internal class G22190F0D5B1120504B2500252302070912462201280E1C1F04000917 : object {
    internal static Color G2905060401160C06;
    internal static Color G210D130727210D;
    internal static Color G370905;
    internal static Color G29050604010B1B030B150C;
    internal static Color G210D13073A36080C0217;
    internal static Color G2A1E00021221;
    internal static Color G29050604011D0C0E091D1E;
    internal static Color G210D13072C21050E0A05;
    internal static Color G3C090D001A33;
    internal static Color G2905060401031B07001C;
    internal static Color G221E04091B;
    internal static Color G210D130732360C070B;
    internal static Color G290506040117021B22000C2E0B;
    internal static Color G3607182B07210C0C;
    internal static Color G210D1307262F102517170C25;
    internal static Color G290506040117021B271E1C2E;
    internal static Color G3607182E19310C;
    internal static Color G210D1307262F102009070C;
    internal static Color G290506040106051700;
    internal static Color G27001409;
    internal static Color G210D130737281C07;
    internal static Color G2905060401141C10151E0C;
    internal static Color G3519131C1921;
    internal static Color G210D130725311B120917;
    internal static Color G290506040114000C0E;
    internal static Color G35050F07;
    internal static Color G210D1307252D0709;
    internal static Color G2905060401031B071C;
    internal static Color G221E0415;
    internal static Color G210D130732360C1B;
    internal static Color G290506040103080B0B010B241702;
    internal static Color G220D0802062606100A;
    internal static Color G210D13073225000C161006390A;
    private static G22190F0D5B1120504B2500252302070912462201280E1C1F04000917();
}
internal class G22190F0D5B1120504B25002523020709124623072A0522221616271D13 : BindScroll {
    private ListBox G06030F18142D070717;
    private Control G160F130319282B0317;
    private G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F33233908202C233D G0619131E102A1D2B0B1406;
    protected bool ShowScrollBar { get; }
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    protected virtual bool get_ShowScrollBar();
    protected virtual void OnValueChanged(EventArgs e);
    public virtual void Update();
}
internal class G22190F0D5B1120504B25002523020709124623072A052A2A1103220002053E080B2E : BindScroll {
    private DataGridView G06030F18142D070717;
    private Control G160F130319282B0317;
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    public virtual void Dispose();
    private G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F332339082D233133 G2209153F1636060E093B072D0A();
    protected virtual void OnValueChanged(EventArgs e);
    public virtual void Update();
}
internal class G22190F0D5B1120504B25002523020709124623072A053A2E1D16271D13 : BindScroll {
    private TextBox G06030F18142D070717;
    private Control G160F130319282B0317;
    public static Size G280D193F1C3E0C;
    protected bool ShowScrollBar { get; }
    private static G22190F0D5B1120504B25002523020709124623072A053A2E1D16271D13();
    protected virtual bool get_ShowScrollBar();
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    public virtual void Dispose();
    private G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F332339082D233133 G2209153F1636060E093B072D0A();
    protected virtual void OnValueChanged(EventArgs e);
    public virtual void Update();
}
internal class G22190F0D5B1120504B25002523020709124623072A053A390007331B0E16 : BindScroll {
    private TreeView G06030F18142D070717;
    private Control G160F130319282B0317;
    private G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F33233908202C233D G0619131E102A1D2B0B1406;
    protected bool ShowScrollBar { get; }
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    public virtual void Dispose();
    protected virtual bool get_ShowScrollBar();
    protected virtual void OnValueChanged(EventArgs e);
    public virtual void Update();
}
internal class G22190F0D5B1120504B25002523020709124623072A053C22060A311713152A0E16 : BindScroll {
    private RichTextBox G06030F18142D070717;
    private Control G160F130319282B0317;
    protected bool ShowScrollBar { get; }
    protected virtual bool get_ShowScrollBar();
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    public virtual void Dispose();
    private G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F332339082D233133 G2209153F1636060E093B072D0A();
    protected virtual void OnValueChanged(EventArgs e);
    public virtual void Update();
}
internal class G22190F0D5B1120504B25002523020709124623072A053D28170D091E0A0304042D360F1A15270D : BindScroll {
    private ScrollableControl G06030F18142D070717;
    private Control G160F130319282B0317;
    private G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F33233908202C233D G0619131E102A1D2B0B1406;
    protected bool ShowScrollBar { get; }
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    public virtual void Dispose();
    protected virtual bool get_ShowScrollBar();
    protected virtual void OnValueChanged(EventArgs e);
    public virtual void Update();
}
internal class G22190F0D5B1120504B25002523020709124623072A053D28170D091E29001A : BindScroll {
    private Control G06030F18142D070717;
    private Control G160F130319282B0317;
    private bool G0C0B0F0307213A01171D0527;
    public virtual void Update();
    protected virtual void OnValueChanged(EventArgs e);
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    public virtual void Dispose();
    private void G06030F18142D070717210A390A0119(object G16, ScrollEventArgs G00);
}
internal class G22190F0D5B1120504B250025230207091246250F300029390C06331B0E163B151735041C232100000E0B : Form {
    public List`1<G22190F0D5B1120504B250025230207091246250F300029390C06331B0E163B151735041C232100000E0B7C221E08082630100E00> G2C18040106;
    private G22190F0D5B1120504B250025230207091246250F300029390C06331B0E163B151735041C232100000E0B7C221E08082630100E00 G36090D0916300C063606102700;
    public Control G310D130B1030;
    private IContainer G06030C1C1A2A0C0C1101;
    private NumericUpDown G0B3E0E1B060C0C0B021A1D;
    private NumericUpDown G0B24040D11211B2A001B0E2311;
    private Label G090D03091975;
    private Label G090D03091976;
    private Panel G150D0F091975;
    private Label G090E230D162F0E100A07072F2602190B13;
    private Panel G133F040010271D070120063C16;
    private Label G090E320919210A1600162B2A0606360B0D0713;
    private Label G090E320919210A1600162F241708360B0D0713;
    private Label G090D0309197550;
    private Panel G132D33030237;
    private Label G090E203E1A331A20041102080A011A16;
    private Label G090E203E1A331A240A1C1D;
    private Label G090E203E1A331A240A000C080A011A16;
    private Label G090D030919755C;
    private Panel G133E0E1B06;
    private Label G090E330302372B0306192A24090207;
    private Label G090E330302372F0D0B06;
    private Label G090E330302372F0D17172A24090207;
    private Label G090D0309197559;
    private Panel G1324040D11211B;
    private Label G090E290914200C1027130A202602190B13;
    private Label G090E290914200C10231D073F;
    private Label G090E290914200C10231D1B2E2602190B13;
    private Label G090D03091972;
    private Button G0718220D1B270C0E;
    private Button G07182E27;
    private Button G0718341C;
    private Button G07182503022A;
    private Label G090D03091977;
    private ImageList G0C01000B100800111143;
    private CheckedListBox G0604040F1E210D2E0C011D090A1544;
    private CheckBox G060E320919210A16241E05;
    private Timer G11050C090775;
    private FontDialog G03030F18312D080E0A1558;
    private ColorDialog G06030D0307000003091D0E7A;
    private ToolTip G11030E00212D1953;
    private void G361818001C2A0E();
    private List`1<G22190F0D5B1120504B250025230207091246250F300029390C06331B0E163B151735041C232100000E0B7C221E08082630100E00> G2209152F1A2A1D100A1E1A(Control G06030F18072B05);
    private void G241C11000C(G22190F0D5B1120504B250025230207091246250F300029390C06331B0E163B151735041C232100000E0B7C221E08082630100E00 G1618180010);
    private void G210D150D32360006331B0C3C36190C08041A2701360C31070A0301(object G16090F081036, EventArgs G00);
    private void G0718341C2A07050B0619(object G16090F081036, EventArgs G00);
    private void G07182503022A3621091B0A20(object G16090F081036, EventArgs G00);
    private void G07182E272A07050B0619(object G16090F081036, EventArgs G00);
    private void G060E320919210A16241E0514260510070A0D052D2C00002C0006(object G16090F081036, EventArgs G00);
    private void G0718220D1B270C0E3A3105220606(object G16090F081036, EventArgs G00);
    private void G11050C09077536360C1102(object G16090F081036, EventArgs G00);
    private void G090E290914200C10231D1B2E2602190B133722022D0205(object G16090F081036, EventArgs G00);
    private void G090E290914200C10231D073F3A2E190D0203(object G16090F081036, EventArgs G00);
    private void G090E290914200C1027130A202602190B133722022D0205(object G16090F081036, EventArgs G00);
    private void G090E330302372F0D17172A240902073B2204080D2F(object G16090F081036, EventArgs G00);
    private void G090E27031B302F0D17172A240902073B2204080D2F(object G16090F081036, EventArgs G00);
    private void G090E330302372B0306192A240902073B2204080D2F(object G16090F081036, EventArgs G00);
    private void G090E203E1A331A240A000C080A011A163E2B0D07270A(object G16090F081036, EventArgs G00);
    private void G090E203E1A331A240A1C1D1426011C070A(object G16090F081036, EventArgs G00);
    private void G090E203E1A331A20041102080A011A163E2B0D07270A(object G16090F081036, EventArgs G00);
    private void G090E320919210A1600162F241708360B0D071331070D07280E(object G16090F081036, EventArgs G00);
    private void G090E320919210A1600162B2A0606360B0D071331070D07280E(object G16090F081036, EventArgs G00);
    private void G090E230D162F0E100A07072F2602190B133722022D0205(object G16090F081036, EventArgs G00);
    private void G0604040F1E210D2E0C011D090A15443B320D0D0B27150B2F2C0C011713220000003E040A(object G16090F081036, EventArgs G00);
    private void G0B24040D11211B2A001B0E23113223050D1D042D2C00002C0006(object G16090F081036, EventArgs G00);
    private void G0B3E0E1B060C0C0B021A1D14330C1911042B090F2A060B2F(object G16090F081036, EventArgs G00);
    private void G090D030919723621091B0A20(object G16090F081036, EventArgs G00);
    private void G090D03091975593D261E00280E(object G16090F081036, EventArgs G00);
    private void G090D030919755C3D261E00280E(object G16090F081036, EventArgs G00);
    private void G090D03091975503D261E00280E(object G16090F081036, EventArgs G00);
    protected virtual void Dispose(bool disposing);
    private void G2C0208181C25050B1F172A24081D1A0A040615();
}
internal static class G22190F0D5B1120504B250025230207091246261B2A005C0C1703151A02021B : object {
    public static void G211E001B252B051B021D07(Graphics G021E001C1D2D0A11, Color G03050D00362B050D17, Color G0703130810362A0D091D1B, int G0703130810363D0A0C110225001E06, DashStyle G0703130810363A161C1E0C, int G1605050906, int G1607081C, Rectangle G17090218142A0E0E00);
    public static void G211E001B392D0707(Graphics G021E001C1D2D0A11, Color G03050D00362B050D17, int G09050F09212C00010E1C0C3816, DashStyle G1618180010, Orientation G0A1E08091B3008160C1D07, LineCap G1618001E01070812, LineCap G0002052F1434, Rectangle G17090218142A0E0E00);
    public static void G211E001B3028050B15010C(Graphics G021E001C1D2D0A11, Color G03050D00362B050D17, Color G0703130810362A0D091D1B, int G0703130810363D0A0C110225001E06, DashStyle G0703130810363A161C1E0C, Rectangle G17090218142A0E0E00);
    public static void G211E001B272B1C0C01170D(Graphics G021E001C1D2D0A11, Color G03050D00362B050D17, Color G0703130810362A0D091D1B, int G0703130810363D0A0C110225001E06, DashStyle G0703130810363A161C1E0C, int G170D05050037, CustomizableEdges G0008060906, Rectangle G17090218142A0E0E00);
    public static void G211E001B27210A16041C0E2700(Graphics G021E001C1D2D0A11, Color G03050D00362B050D17, Color G0703130810362A0D091D1B, int G0703130810363D0A0C110225001E06, DashStyle G0703130810363A161C1E0C, Rectangle G17090218142A0E0E00);
    private static void G211E001B26300810(Graphics G021E, Brush G11040433052107, int G0703130810363D0A0C110225001E06, DashStyle G0703130810363A161C1E0C, Brush G1104043317361C110D, int G0B190C33052B000C1101, int G1607081C, Rectangle G17090218);
    private static PointF[] G280D0A0926300810351D0025111E(double G1618001E011B1D0A000608, int G0B190C33052B000C1101, int G1607081C, Rectangle G17090218);
    private static double G260D0D0F0028081600310625060C0301330905073112(int G0B190C33052B000C1101, int G1607081C);
    private static void G23050F083C2A1D0717010C2811041A0A(PointF G155D, PointF G155E, PointF G155F, PointF G1558, Boolean& G09050F09061B000C11171B38000E01, Boolean& G16090601102A1D113A1B073F001F0601021C, PointF& G0C02150907370C01111B0625, PointF& G06000E1F101B1953, PointF& G06000E1F101B1950);
}
internal enum G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 : Enum {
    public int value__;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 G270315181A2925070306;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 G270315181A293B0B021A1D;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 G23190D0026271B07001C;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 G29090718;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 G2B030F09;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 G3705060401;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 G3103112010221D;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C211D080A380E1D3015070826 G3103113E1C230116;
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D041A : object {
    internal G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C G0803170907;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public DragMode G3A28130D1209060600;
    [CompilerGeneratedAttribute]
private Form <TargetForm>k__BackingField;
    public bool G2002000E19210D { get; public set; }
    public DragOrientation G211E000B3A3600070B06083F0C021B { get; public set; }
    public DragMode G211E000B382B0D07 { get; public set; }
    public bool G311E000206340810001C1D1C0D041901251A0009 { get; public set; }
    public double G211E000B2630081011261B2A0B1E0505130D0F0D3D370F271007 { get; public set; }
    public double G211E000B302A0D3617130738150C07010F0B1838250D1B2E { get; public set; }
    public bool G21030207332B1B0F { get; public set; }
    public Color G210302073C2A0D0B06131D24172E1A080E1A { get; public set; }
    public double G210302073C2A0D0B06131D24173907050F1B110F360400281C34041E1E04 { get; public set; }
    public Form G310D130B10302F0D171F { get; public set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D041A(bool dock);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    public DragOrientation get_DragOrientation();
    public void set_DragOrientation(DragOrientation value);
    private DragOrientation G111E00020628081600(G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F G0A1E08091B3008160C1D07);
    private G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F G111E00020628081600(DragOrientation G0A1E08091B3008160C1D07);
    public DragMode get_DragMode();
    public void set_DragMode(DragMode value);
    public bool get_TransparentWhileDrag();
    public void set_TransparentWhileDrag(bool value);
    public double get_DragStartTransparencyValue();
    public void set_DragStartTransparencyValue(double value);
    public double get_DragEndTransparencyValue();
    public void set_DragEndTransparencyValue(double value);
    public bool get_DockForm();
    public void set_DockForm(bool value);
    public Color get_DockIndicatorColor();
    public void set_DockIndicatorColor(Color value);
    public double get_DockIndicatorTransparencyValue();
    public void set_DockIndicatorTransparencyValue(double value);
    [CompilerGeneratedAttribute]
public Form get_TargetForm();
    [CompilerGeneratedAttribute]
public void set_TargetForm(Form value);
    public void G3609152807250E(Control G06030F18072B05);
    public void G3609152807250E11(ControlCollection G06030F18072B0511);
    public void G3609152807250E11(List`1<Control> G06030F18072B0511);
    public void G3609152807250E11(Control[] G06030F18072B0511);
    public void G37090C0303212D1004151A(ControlCollection G06030F18072B0511);
    public void G37090C0303212D1004151A(Control[] G06030F18072B0511);
    public void G37090C0303212D1004151A(List`1<Control> G06030F18072B0511);
    public void G37090C0303212D100415(Control G06030F18072B05);
    public sealed virtual void Dispose();
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C : object {
    internal static Form G2C021509072A080E3617052E061910002C07170B020E1C26;
    internal Dictionary`2<Control, G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C48050E1A0425270001> G2C18040106;
    [CompilerGeneratedAttribute]
private G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F <MoveOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C480E0E1E0C213C1309201C05210810041C0A2E <FormAppearance>k__BackingField;
    [CompilerGeneratedAttribute]
private G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D04250E0A3C <MoveMode>k__BackingField;
    [CategoryAttribute("Guna")]
[DefaultValueAttribute]
public G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F G280317093A3600070B06083F0C021B { get; public set; }
    [CategoryAttribute("Guna")]
[DesignerSerializationVisibilityAttribute("2")]
public G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C480E0E1E0C213C1309201C05210810041C0A2E G2303130134341907040008250608 { get; private set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D04250E0A3C G28031709382B0D07 { get; public set; }
    [CompilerGeneratedAttribute]
public G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F get_MoveOrientation();
    [CompilerGeneratedAttribute]
public void set_MoveOrientation(G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F value);
    [CompilerGeneratedAttribute]
public G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C480E0E1E0C213C1309201C05210810041C0A2E get_FormAppearance();
    [CompilerGeneratedAttribute]
private void set_FormAppearance(G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C480E0E1E0C213C1309201C05210810041C0A2E value);
    [CompilerGeneratedAttribute]
public G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D04250E0A3C get_MoveMode();
    [CompilerGeneratedAttribute]
public void set_MoveMode(G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D04250E0A3C value);
    public bool G260D0F290D300C0C01(object G001415091B200C07);
    public void G37090C030321(Control G06030F18072B05);
    public void G360915211A320C2D07180C2811(Control G06030F18072B05, bool G040805);
    public sealed virtual void Dispose();
}
internal enum G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D04250E0A3C : Enum {
    public int value__;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D04250E0A3C G23031301;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D04250E0A3C G26030F18072B05;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D04250E0A3C G2B030F09;
}
internal enum G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F : Enum {
    public int value__;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F G27031504;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F G2D0313050F2B0716041E;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042713073C0F1A063C08030F G330913181C27080E;
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042D170B37152606260500041E : MulticastDelegate {
    public G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D042D170B37152606260500041E(object object, IntPtr method);
    public virtual void Invoke(object sender, G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C48050E1A0425270001 moveItem);
    public virtual IAsyncResult BeginInvoke(object sender, G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D0420040229041C48050E1A0425270001 moveItem, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class G22190F0D5B1120504B250025230207091246290B28110B39164C3113180A2A001C091301003A041F12 : object {
    private static G22190F0D5B1120504B250025230207091246290B28110B39164C3113180A2A001C091301003A041F12431A310D120717251B2E0C011D78 G110D120717251B2B0B011D2A0B0E10;
    private static bool G110D120717251B311002192417191000;
    private static G22190F0D5B1120504B250025230207091246290B28110B39164C3113180A2A001C091301003A041F12();
    public static void G3609153F01251D07(IntPtr G12050F081A3321030B16052E, G22190F0D5B1120504B250025230207091246290B28110B39164C3113180A2A001C091301003A041F124307041F0A0E14363A1604060C38 G110D120717251B3111131D2E);
    public static void G3609153A14281C07(IntPtr G12050F081A3321030B16052E, double G151E0E0B07211A113313053E00, double G151E0E0B07211A11281311);
}
internal static class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C381327092E0E : object {
    public static int G223B2D332610302E20;
    public static int G323F3E3A26073B2D293E;
    public static int G323F3E2426073B2D293E;
    public static UInt32 G32213E2426073B2D293E;
    public static UInt32 G32213E3A26073B2D293E;
    public static UInt32 G32213E213A113A27323A2C0E29;
    public static int G362E3E3A30163D;
    public static int G362E3E243A1633;
    public static int G362E3E203C0A2C3735;
    public static int G362E3E203C0A2C2E20343D;
    public static int G362E3E203C0A2C262A2527;
    public static int G362E3E203C0A2C302C35211F;
    public static int G362E3E3C34032C3735;
    public static int G362E3E3C34032C2E20343D;
    public static int G362E3E3C34032C262A2527;
    public static int G362E3E3C34032C302C353D03;
    public static int G362E3E3C34032C362A22;
    public static int G362E3E2030023D;
    public static int G362E3E3C34032C202A263D0428;
    public static int G362E3E3E3C032136;
    public static int G362E3E293B003A21373D2507;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C381327092E0E43320F210A000D251B2206 G220915251B2206(Control G06030F18072B05, ScrollOrientation G160F1303192826100C17073F04191C0B0F);
    public static ScrollBars G2209153A1C37000009173A28170219080309131D(Control G06030F18072B05);
    public static void G3609153F1636060E09(Control G06030F18072B05, int G130D0D1910, ScrollOrientation G160F1303192826100C17073F04191C0B0F);
    public static int G2209153F1636060E09(Control G06030F18072B05, ScrollOrientation G160F1303192826100C17073F04191C0B0F);
    public static bool G3503121838211A1104150C0A(IntPtr G0D1B0F08, int G1221120B, int G123C001E1429, int G093C001E1429);
    private static bool G2209153F1636060E093B072D0A(IntPtr G0D1B0F08, int G070D13, G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C381327092E0E43320F210A000D251B2206& G160F13031928200C031D);
    private static bool G3609153F1636060E093B072D0A(IntPtr G0D1B0F08, int G070D13, G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C381327092E0E43320F210A000D251B2206& G160F13031928200C031D, int G1709051E1433);
    private static IntPtr G36090F0838211A1104150C(IntPtr G0D3B0F08, UInt32 G281F06, IntPtr G123C001E1429, IntPtr G093C001E1429);
    public static bool G3503121838211A1104150C(IntPtr G0D3B0F08, UInt32 G081F06, int G123C001E1429, int G093C001E1429);
    public static int G3609153F1636060E09220638(IntPtr G0D3B0F08, int G0B2E001E, int G0B3C0E1F, bool G073E040807251E);
    public static int G2209153F1636060E09220638(IntPtr G0D3B0F08, int G0B2E001E);
    private static int G2209153B1C2A0D0D123E062502(IntPtr G0D3B0F08, int G0B250F08103C);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0820370C10261D073F17021937021A0E0228230F39 : G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0826271B0D091E08290908360B0F1C130128320D390A0E09300A13 {
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0820370C10261D073F17021937021A0E0228230F39(UserControl userControl, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0820370C10261D073F17021937021A0E0228230F39(UserControl userControl, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0820370C10261D073F17021937021A0E0228230F39(UserControl userControl, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0820370C10261D073F17021937021A0E0228230F39(UserControl userControl, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C : object {
    [CompilerGeneratedAttribute]
private ScrollOrientation <ScrollOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SmallChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LargeChange>k__BackingField;
    private Control G160F130319280B0317;
    private Control G110D130B1030;
    private G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C6B370B39110B061307320B1301350D2C063A28020703 G0408173A10361D0B061305;
    private G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C6B2901390C180A1C1F0004320D2B0E020B0A001E2802350A G040817241A3600180A1C1D2A09;
    private bool G03051909111406110C0600240B2C1B0032011B0B;
    private bool G01091205122A240D0117;
    private int G3A3A00000021;
    private bool G3A08081F052B1A0701;
    public ScrollOrientation G360F1303192826100C17073F04191C0B0F { get; private set; }
    private int G280D1905183104 { get; private set; }
    private int G28050F05183104 { get; private set; }
    private int G36010000190701030B150C { get; private set; }
    private int G290D130B100701030B150C { get; private set; }
    private int G330D0D1910 { get; private set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C(TextBox textBox, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C(TextBox textBox, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C(TextBox textBox, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C(TextBox textBox, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C(Guna2TextBox textBox, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C(Guna2TextBox textBox, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C(Guna2TextBox textBox, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C(Guna2TextBox textBox, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
    [CompilerGeneratedAttribute]
public ScrollOrientation get_ScrollOrientation();
    [CompilerGeneratedAttribute]
private void set_ScrollOrientation(ScrollOrientation value);
    [CompilerGeneratedAttribute]
private int get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(int value);
    [CompilerGeneratedAttribute]
private int get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(int value);
    [CompilerGeneratedAttribute]
private int get_SmallChange();
    [CompilerGeneratedAttribute]
private void set_SmallChange(int value);
    [CompilerGeneratedAttribute]
private int get_LargeChange();
    [CompilerGeneratedAttribute]
private void set_LargeChange(int value);
    private int get_Value();
    private void set_Value(int value);
    internal void G2C0208181C25050B1F17(Control G06030F18072B05, Control G160F13031928, ScrollOrientation G160F1303192826100C17073F04191C0B0F, bool G0305190911080601040600240B);
    private void G3609152F142805200411020E13081B1012(bool G160915);
    private void G23051909110C06100C080625110C1937021A0E0228230F39(bool G1305120517280C06);
    private void G2305190911120C10111B0A2A093E16160E040D2C2513(bool G1305120517280C06);
    private void G311E182A1C3C0C0636111B240901370513(ScrollBars G1618001810, bool G1305120517280C06);
    private bool G2C1F3705062D0B0E0016(ScrollBars G1618001810);
    private bool G2209152D11323A01171D05273619141004();
    private void G20140204142A0E0735131B2E0B19();
    private void G3609151905170A100A1E0509041F();
    private void G360F130319282A0A041C0E2E01(object G16090F081036, ScrollEventArgs G00);
    private void G2A022D0316251D0B0A1C2A230403120105(object G16090F081036, EventArgs G00);
    private void G2A022A090C0006150B(object G16090F081036, KeyEventArgs G00);
    private void G2A022A090C1119(object G16090F081036, KeyEventArgs G00);
    private void G2A023309062D1307(object G16090F081036, EventArgs G00);
    private void G2A022C0300370C260A0507(object G16090F081036, MouseEventArgs G00);
    private void G2A022C0300370C3715(object G16090F081036, MouseEventArgs G00);
    private void G2A022C0300370C2F0A040C(object G16090F081036, MouseEventArgs G00);
    private void G2A0235090D302A0A041C0E2E01(object G16090F081036, EventArgs G00);
    private void G2A0227031B302A0A041C0E2E01(object G16090F081036, EventArgs G00);
    private void G2A022C0300370C350D170C27(object G16090F081036, MouseEventArgs G00);
    public sealed virtual void UpdateScrollBar();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821360C07331B0C3C360E070B0D04230F36 : object {
    [CompilerGeneratedAttribute]
private ScrollOrientation <ScrollOrientation>k__BackingField;
    private bool G03051909111406110C0600240B2C1B0032011B0B;
    private bool G01091205122A240D0117;
    private Control G160F130319280B0317;
    private TreeView G110D130B1030;
    [CompilerGeneratedAttribute]
private int <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SmallChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LargeChange>k__BackingField;
    private bool G3A08081F052B1A0701;
    public ScrollOrientation G360F1303192826100C17073F04191C0B0F { get; private set; }
    private int G280D1905183104 { get; private set; }
    private int G28050F05183104 { get; private set; }
    private int G36010000190701030B150C { get; private set; }
    private int G290D130B100701030B150C { get; private set; }
    private int G330D0D1910 { get; private set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821360C07331B0C3C360E070B0D04230F36(TreeView treeView, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821360C07331B0C3C360E070B0D04230F36(TreeView treeView, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821360C07331B0C3C360E070B0D04230F36(TreeView treeView, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821360C07331B0C3C360E070B0D04230F36(TreeView treeView, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
    [CompilerGeneratedAttribute]
public ScrollOrientation get_ScrollOrientation();
    [CompilerGeneratedAttribute]
private void set_ScrollOrientation(ScrollOrientation value);
    [CompilerGeneratedAttribute]
private int get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(int value);
    [CompilerGeneratedAttribute]
private int get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(int value);
    [CompilerGeneratedAttribute]
private int get_SmallChange();
    [CompilerGeneratedAttribute]
private void set_SmallChange(int value);
    [CompilerGeneratedAttribute]
private int get_LargeChange();
    [CompilerGeneratedAttribute]
private void set_LargeChange(int value);
    private int get_Value();
    private void set_Value(int value);
    private void G2C0208181C25050B1F17(TreeView G06030F18072B05, Control G160F13031928, ScrollOrientation G160F1303192826100C17073F04191C0B0F, bool G0305190911080601040600240B);
    private bool G2C1F3705062D0B0E0016(ScrollBars G1618001810);
    private void G3609152F142805200411020E13081B1012(bool G160915);
    private void G23051909110C06100C080625110C1937021A0E0228230F39(bool G1305120517280C06);
    private void G2305190911120C10111B0A2A093E16160E040D2C2513(bool G1305120517280C06);
    private void G311E182A1C3C0C0636111B240901370513(ScrollBars G1618001810, bool G1305120517280C06);
    private void G20140204142A0E0735131B2E0B19();
    private void G3609151905170A100A1E0509041F();
    private void G2A023309062D1307(object G16090F081036, EventArgs G00);
    private void G2A02200A01211B271D02082501(object G16090F081036, TreeViewEventArgs G00);
    private void G2A02200A01211B210A1E052A151E10(object G16090F081036, TreeViewEventArgs G00);
    private void G2A022D0316251D0B0A1C2A230403120105(object G16090F081036, EventArgs G00);
    private void G2A0222031B301B0D09330D2F0009(object G16090F081036, ControlEventArgs G00);
    private void G2A0222031B301B0D09200C260A1B1000(object G16090F081036, ControlEventArgs G00);
    private void G2A022C0300370C350D170C27(object G16090F081036, MouseEventArgs G00);
    private void G360F130319282A0A041C0E2E01(object G16090F081036, ScrollEventArgs G00);
    public sealed virtual void UpdateScrollBar();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F082525070709210A390A011926001A : G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0826271B0D091E08290908360B0F1C130128320D390A0E09300A13 {
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F082525070709210A390A011926001A(Panel panel, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F082525070709210A390A011926001A(Panel panel, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F082525070709210A390A011926001A(Panel panel, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F082525070709210A390A011926001A(Panel panel, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0826271B0D091E08290908360B0F1C130128320D390A0E09300A13 : object {
    [CompilerGeneratedAttribute]
private ScrollOrientation <ScrollOrientation>k__BackingField;
    private bool G03051909111406110C0600240B2C1B0032011B0B;
    private bool G01091205122A240D0117;
    private Control G160F130319280B0317;
    private ScrollableControl G110D130B1030;
    [CompilerGeneratedAttribute]
private int <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SmallChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LargeChange>k__BackingField;
    private bool G3A08081F052B1A0701;
    public ScrollOrientation G360F1303192826100C17073F04191C0B0F { get; private set; }
    private int G280D1905183104 { get; private set; }
    private int G28050F05183104 { get; private set; }
    private int G36010000190701030B150C { get; private set; }
    private int G290D130B100701030B150C { get; private set; }
    private int G330D0D1910 { get; private set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0826271B0D091E08290908360B0F1C130128320D390A0E09300A13(ScrollableControl control, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0826271B0D091E08290908360B0F1C130128320D390A0E09300A13(ScrollableControl control, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0826271B0D091E08290908360B0F1C130128320D390A0E09300A13(ScrollableControl control, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0826271B0D091E08290908360B0F1C130128320D390A0E09300A13(ScrollableControl control, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
    [CompilerGeneratedAttribute]
public ScrollOrientation get_ScrollOrientation();
    [CompilerGeneratedAttribute]
private void set_ScrollOrientation(ScrollOrientation value);
    [CompilerGeneratedAttribute]
private int get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(int value);
    [CompilerGeneratedAttribute]
private int get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(int value);
    [CompilerGeneratedAttribute]
private int get_SmallChange();
    [CompilerGeneratedAttribute]
private void set_SmallChange(int value);
    [CompilerGeneratedAttribute]
private int get_LargeChange();
    [CompilerGeneratedAttribute]
private void set_LargeChange(int value);
    private int get_Value();
    private void set_Value(int value);
    internal void G2C0208181C25050B1F17(ScrollableControl G06030F18072B05, Control G160F13031928, ScrollOrientation G160F1303192826100C17073F04191C0B0F, bool G0305190911080601040600240B);
    private bool G2C1F3705062D0B0E0016(ScrollBars G1618001810);
    private void G20140204142A0E0735131B2E0B19();
    private void G3609151905170A100A1E0509041F();
    private void G3609152F142805200411020E13081B1012(bool G160915);
    private void G23051909110C06100C080625110C1937021A0E0228230F39(bool G1305120517280C06);
    private void G2305190911120C10111B0A2A093E16160E040D2C2513(bool G1305120517280C06);
    private void G311E182A1C3C0C0636111B240901370513(ScrollBars G1618001810, bool G1305120517280C06);
    private void G2A023309062D1307(object G16090F081036, EventArgs G00);
    private void G2A022D0316251D0B0A1C2A230403120105(object G16090F081036, EventArgs G00);
    private void G2A0222031B301B0D09330D2F0009(object G16090F081036, ControlEventArgs G00);
    private void G2A0222031B301B0D09200C260A1B1000(object G16090F081036, ControlEventArgs G00);
    private void G2A022C0300370C350D170C27(object G16090F081036, MouseEventArgs G00);
    private void G360F130319282A0A041C0E2E01(object G16090F081036, ScrollEventArgs G00);
    public sealed virtual void UpdateScrollBar();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08272D0A0A3117113F27020D37021A0E0228230F39 : G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0821211116271D1118061F1A080D2A001C {
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08272D0A0A3117113F27020D37021A0E0228230F39(RichTextBox richTextBox, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08272D0A0A3117113F27020D37021A0E0228230F39(RichTextBox richTextBox, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08272D0A0A3117113F27020D37021A0E0228230F39(RichTextBox richTextBox, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08272D0A0A3117113F27020D37021A0E0228230F39(RichTextBox richTextBox, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0831251D032200002F33041013320B1301280D2C2A17 : object {
    private G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0831251D032200002F33041013320B1301280D2C2A174D2C1C0D0E G0C020703;
    private bool G0C1F2C0300370C350D170C27360E070B0D04;
    private int G0C0B0F0307213A01171D0527070C072709090F0921;
    private HScrollBar G0D0313050F170A100A1E0509041F;
    private VScrollBar G1309131826271B0D091E2B2A17;
    private DataGridView G110D130B1030;
    private Control G160F130319280B0317;
    private bool G03051909111406110C0600240B2C1B0032011B0B;
    private bool G01091205122A240D0117;
    [CompilerGeneratedAttribute]
private ScrollOrientation <ScrollOrientation>k__BackingField;
    private bool G3A08081F052B1A0701;
    public ScrollOrientation G360F1303192826100C17073F04191C0B0F { get; private set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0831251D032200002F33041013320B1301280D2C2A17(DataGridView dataGridView, HScrollBar hScrollBar, bool fixedPosition);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0831251D032200002F33041013320B1301280D2C2A17(DataGridView dataGridView, VScrollBar vScrollBar, bool fixedPosition);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0831251D032200002F33041013320B1301280D2C2A17(DataGridView dataGridView, Guna2HScrollBar hScrollBar, bool fixedPosition);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0831251D032200002F33041013320B1301280D2C2A17(DataGridView dataGridView, Guna2VScrollBar vScrollBar, bool fixedPosition);
    [CompilerGeneratedAttribute]
public ScrollOrientation get_ScrollOrientation();
    [CompilerGeneratedAttribute]
private void set_ScrollOrientation(ScrollOrientation value);
    private void G2C0208181C25050B1F17(DataGridView G010D150D32360006331B0C3C, Control G160F13031928, bool G03051909111406110C0600240B);
    private void G3609152F142805200411020E13081B1012(bool G160915);
    private void G2209152812323A01171D0527270C0717(DataGridView G010D150D32360006331B0C3C);
    private void G2A02230307200C1036061027002E1D050F0F040A(object G16090F081036, EventArgs G00);
    private void G2A023309062D1307(object G16090F081036, EventArgs G00);
    private void G2A022D0316251D0B0A1C2A230403120105(object G16090F081036, EventArgs G00);
    private void G2A02200A01211B2604060819000B07011200(object G16090F081036, ListChangedEventArgs G00);
    private void G2A022C0300370C350D170C27(object G16090F081036, EventArgs G00);
    private void G2A023705062D0B0E0031012A0B0A1000(object G16090F081036, EventArgs G00);
    private void G2A02341F10362D0709171D2E013F1A13(object G16090F081036, DataGridViewRowEventArgs G00);
    private void G2A0233030237280601170D(object G16090F081036, DataGridViewRowsAddedEventArgs G00);
    private void G2A02320F072B050E(object G16090F081036, ScrollEventArgs G00);
    private object G2209152A1C210506(object G110D130B1030, string G03050400110A080F00);
    private void G270906051B0D0E0C0A000C18061F1A080D0A001C07090F25020720040E0F1C12();
    private void G20020525122A061000210A390A011906001A2206250F092E2014001C1F12();
    private int G3305120517280C240917110C170411360E1F12();
    private int G3305120517280C240917110C170411270E0412();
    private void G3609153F1636060E093B072D0A(Control G160F130319280B0317);
    private void G3609152D1928(Control G160F130319280B0317, int G28050F05183104, int G280D1905183104, int G36010000190701030B150C, int G290D130B100701030B150C, int G330D0D1910, ScrollOrientation G160F1303192826100C17073F04191C0B0F);
    private void G23051909110C06100C080625110C1937021A0E0228230F39();
    private void G2305190911120C10111B0A2A093E16160E040D2C2513();
    private void G20140204142A0E0735131B2E0B19();
    private void G3609151905170A100A1E05();
    public sealed virtual void UpdateScrollBar();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F083328061529131024101925050F0D0D3D2713012709200400 : G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F0826271B0D091E08290908360B0F1C130128320D390A0E09300A13 {
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F083328061529131024101925050F0D0D3D2713012709200400(FlowLayoutPanel flowLayoutPanel, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F083328061529131024101925050F0D0D3D2713012709200400(FlowLayoutPanel flowLayoutPanel, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F083328061529131024101925050F0D0D3D2713012709200400(FlowLayoutPanel flowLayoutPanel, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F083328061529131024101925050F0D0D3D2713012709200400(FlowLayoutPanel flowLayoutPanel, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08362C0C010E170D070C1E01260E10320D360E0227270317 : G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16271D1118061F1A080D2A001C {
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08362C0C010E170D070C1E01260E10320D360E0227270317(CheckedListBox checkedListBox, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08362C0C010E170D070C1E01260E10320D360E0227270317(CheckedListBox checkedListBox, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08362C0C010E170D070C1E01260E10320D360E0227270317(CheckedListBox checkedListBox, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08362C0C010E170D070C1E01260E10320D360E0227270317(CheckedListBox checkedListBox, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16271D1118061F1A080D2A001C : object {
    [CompilerGeneratedAttribute]
private ScrollOrientation <ScrollOrientation>k__BackingField;
    private bool G03051909111406110C0600240B2C1B0032011B0B;
    private bool G01091205122A240D0117;
    private Control G160F130319280B0317;
    private ListBox G110D130B1030;
    private Timer G11050C0907;
    [CompilerGeneratedAttribute]
private int <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SmallChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LargeChange>k__BackingField;
    private int G0C180401362B1C0C11;
    private bool G3A08081F052B1A0701;
    public ScrollOrientation G360F1303192826100C17073F04191C0B0F { get; private set; }
    private int G280D1905183104 { get; private set; }
    private int G28050F05183104 { get; private set; }
    private int G36010000190701030B150C { get; private set; }
    private int G290D130B100701030B150C { get; private set; }
    private int G330D0D1910 { get; private set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16271D1118061F1A080D2A001C(ListBox listBox, HScrollBar hScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16271D1118061F1A080D2A001C(ListBox listBox, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16271D1118061F1A080D2A001C(ListBox listBox, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16271D1118061F1A080D2A001C(ListBox listBox, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
    [CompilerGeneratedAttribute]
public ScrollOrientation get_ScrollOrientation();
    [CompilerGeneratedAttribute]
private void set_ScrollOrientation(ScrollOrientation value);
    [CompilerGeneratedAttribute]
private int get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(int value);
    [CompilerGeneratedAttribute]
private int get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(int value);
    [CompilerGeneratedAttribute]
private int get_SmallChange();
    [CompilerGeneratedAttribute]
private void set_SmallChange(int value);
    [CompilerGeneratedAttribute]
private int get_LargeChange();
    [CompilerGeneratedAttribute]
private void set_LargeChange(int value);
    private int get_Value();
    private void set_Value(int value);
    internal void G2C0208181C25050B1F17(ListBox G06030F18072B05, Control G160F13031928, ScrollOrientation G160F1303192826100C17073F04191C0B0F, bool G0305190911080601040600240B);
    private bool G2C1F3705062D0B0E0016(ScrollBars G1618001810);
    private void G3609152F142805200411020E13081B1012(bool G160915);
    private void G23051909110C06100C080625110C1937021A0E0228230F39(bool G1305120517280C06);
    private void G2305190911120C10111B0A2A093E16160E040D2C2513(bool G1305120517280C06);
    private void G311E182A1C3C0C0636111B240901370513(ScrollBars G1618001810, bool G1305120517280C06);
    private void G20140204142A0E0735131B2E0B19();
    private void G3609151905170A100A1E0509041F();
    private void G2A023309062D1307(object G16090F081036, EventArgs G00);
    private void G2A022D0316251D0B0A1C2A230403120105(object G16090F081036, EventArgs G00);
    private void G2A022C0300370C350D170C27(object G16090F081036, MouseEventArgs G00);
    private void G360F130319282A0A041C0E2E01(object G16090F081036, ScrollEventArgs G00);
    public sealed virtual void UpdateScrollBar();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G59250F05012D080E0C080C7507322A57553751(object G16, EventArgs G00);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16331B0C3C360E070B0D04230F36 : object {
    [CompilerGeneratedAttribute]
private ScrollOrientation <ScrollOrientation>k__BackingField;
    private bool G03051909111406110C0600240B2C1B0032011B0B;
    private bool G01091205122A240D0117;
    private Control G160F130319280B0317;
    private ListView G110D130B1030;
    [CompilerGeneratedAttribute]
private int <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SmallChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LargeChange>k__BackingField;
    private bool G3A08081F052B1A0701;
    public ScrollOrientation G360F1303192826100C17073F04191C0B0F { get; private set; }
    private int G280D1905183104 { get; private set; }
    private int G28050F05183104 { get; private set; }
    private int G36010000190701030B150C { get; private set; }
    private int G290D130B100701030B150C { get; private set; }
    private int G330D0D1910 { get; private set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16331B0C3C360E070B0D04230F36(ListView listView, VScrollBar vScrollBar, bool fixedLocation);
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3611190E040D2C38132C0E260509131F7D27050F08392D1A16331B0C3C360E070B0D04230F36(ListView listView, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
    [CompilerGeneratedAttribute]
public ScrollOrientation get_ScrollOrientation();
    [CompilerGeneratedAttribute]
private void set_ScrollOrientation(ScrollOrientation value);
    [CompilerGeneratedAttribute]
private int get_Maximum();
    [CompilerGeneratedAttribute]
private void set_Maximum(int value);
    [CompilerGeneratedAttribute]
private int get_Minimum();
    [CompilerGeneratedAttribute]
private void set_Minimum(int value);
    [CompilerGeneratedAttribute]
private int get_SmallChange();
    [CompilerGeneratedAttribute]
private void set_SmallChange(int value);
    [CompilerGeneratedAttribute]
private int get_LargeChange();
    [CompilerGeneratedAttribute]
private void set_LargeChange(int value);
    private int get_Value();
    private void set_Value(int value);
    private void G2C0208181C25050B1F17(ListView G06030F18072B05, Control G160F13031928, ScrollOrientation G160F1303192826100C17073F04191C0B0F, bool G0305190911080601040600240B);
    private bool G2C1F3705062D0B0E0016(ScrollBars G1618001810);
    private void G3609152F142805200411020E13081B1012(bool G160915);
    private void G23051909110C06100C080625110C1937021A0E0228230F39(bool G1305120517280C06);
    private void G2305190911120C10111B0A2A093E16160E040D2C2513(bool G1305120517280C06);
    private void G311E182A1C3C0C0636111B240901370513(ScrollBars G1618001810, bool G1305120517280C06);
    private void G20140204142A0E0735131B2E0B19();
    private void G3609151905170A100A1E0509041F();
    private void G2A023309062D1307(object G16090F081036, EventArgs G00);
    private void G2A022D0316251D0B0A1C2A230403120105(object G16090F081036, EventArgs G00);
    private void G2A0222031B301B0D09330D2F0009(object G16090F081036, ControlEventArgs G00);
    private void G2A0222031B301B0D09200C260A1B1000(object G16090F081036, ControlEventArgs G00);
    private void G2A022C0300370C350D170C27(object G16090F081036, MouseEventArgs G00);
    private void G360F130319282A0A041C0E2E01(object G16090F081036, ScrollEventArgs G00);
    public sealed virtual void UpdateScrollBar();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class G22190F0D5B1120504B250025230207091246290B28110B39164C361A0A050716263C0D1E023A : object {
    private static int G32213E22360C203631373A1F;
    private static int G323F3E213C0A202F2C282C092A35;
    private static int G2D3822203C012736;
    private static int G2D38222D2510202D2B;
    private static int G263F3E2837082A2E2E21;
    private static int G263F3E28270B39312D332D0432;
    private static int G32213E223614282B2B26;
    private static int G32213E2D3610203424262C0A353D;
    [EditorBrowsableAttribute("1")]
private static int G211B0C290D300C0C01341B2A08083C0A150722022D04003F24100013(IntPtr G0D3B0F08, G22190F0D5B1120504B250025230207091246290B28110B39164C361A0A050716263C0D1E023A4E21203E142C2232& G1521001E3C2A1A0711);
    [EditorBrowsableAttribute("1")]
private static int G211B0C3F10303E0B0B16063C24190116080A141A21(IntPtr G0D1B0F08, int G0418151E, Int32& G0418151E2325051700, int G0418151E262D1307);
    [EditorBrowsableAttribute("1")]
private static int G211B0C250607060F151D1A2211041A0A2406000C28040A(Int32& G150A24021426050701);
    [EditorBrowsableAttribute("1")]
public static bool G2C1F2203183406110C0600240B281B050304040A();
    public static void G241C11000C(Form G03031301);
    private static bool G2C1F2009072B2C0C0410052E01();
    private static int G211B0C250607060F151D1A2211041A0A2406000C28040A(Boolean& G0002000E19210D);
    private static IntPtr G261E040D01213B0D101C0D19000E01360606(int G0B20040A01160C0111, int G0B380E1C27210A16, int G0B3E080B1D303B070606, int G0B2E0E18012B043000111D, int G0B3B0808012C2C0E091B193800, int G0B240405122C1D27091E003B1608);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C37170D0D09021A300E002F2D0D1C041E : object {
    internal static object G2209152A1C210506(Type G11151109, string G03050400110A080F00);
    internal static object G2209152A1C210506(object G110D130B1030, string G03050400110A080F00);
    internal static object G3609152A1C210506(object G110D130B1030, string G03050400110A080F00, object G130D0D1910);
    internal static object G2209153C072B1907170610(object G110D130B1030, string G151E0E1C10361D1B2B13042E);
    internal static object G3609153C072B1907170610(object G110D130B1030, string G151E0E1C10361D1B2B13042E, object G130D0D1910);
    internal static void G280915041A20200C131D022E(object G110D130B1030, string G080915041A2027030817, Object[] G130D0D191037);
}
internal class G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C : object {
    internal Dictionary`2<Control, G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C76330B14211B0928183608> G2C18040106;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C76330B14211B09240834001F <ResizeEdge>k__BackingField;
    public bool G2002000E19210D { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C76330B14211B09240834001F G370912050F212C060217 { get; public set; }
    public G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C(Control control, Control container);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C76330B14211B09240834001F get_ResizeEdge();
    [CompilerGeneratedAttribute]
public void set_ResizeEdge(G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C76330B14211B09240834001F value);
    public bool G260D0F290D300C0C01(object G001415091B200C07);
    [DefaultValueAttribute("System.Windows.Forms.Control", "")]
public Control G2209153E10370018003D0B21000E01(Control G06030F18072B05);
    public void G3609153E10370018003D0B21000E01(Control G06030F18072B05, Control G06030F18142D070717);
    public void G37090C030321(Control G06030F18072B05);
    internal static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G2209153C1A3700160C1D07(Control G06030F18072B05, G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C76330B14211B09240834001F G00080609);
    internal static Cursor G2209152F00361A0D17(Control G06030F18072B05, Cursor G0A1E080B1C2A080E, G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C76330B14211B09240834001F G00080609);
    internal static void G241C11000C17001800(Control G06030F18072B05, Point G1603141E1621, Point G163C0E1F1C30000D0B, Size G163F081610, G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G11151109, G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C76330B14211B09240834001F G00080609);
    public sealed virtual void Dispose();
}
internal enum G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 : Enum {
    public int value__;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G270315181A29;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G270315181A2925070306;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G270315181A293B0B021A1D;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G29090718;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G2B030F09;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G3705060401;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G310311;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G3103112010221D;
    public static G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812043E36120713210E02 G3103113E1C230116;
}
internal class G22190F0D5B1120504B2500252302070912462C1D2325072A090D02 : Form {
    [CompilerGeneratedAttribute]
private Color <BorderColor>k__BackingField;
    private IContainer G06030C1C1A2A0C0C1101;
    private PictureBox G1505021800360C200A0A58;
    private Label G090D03091975;
    private Label G090D03091976;
    private Guna2Button G071915181A2A58;
    private Guna2Button G071915181A2A5B;
    private Guna2Button G071915181A2A5A;
    public Color G2703130810362A0D091D1B { get; public set; }
    protected virtual void OnLoad(EventArgs e);
    [CompilerGeneratedAttribute]
public Color get_BorderColor();
    [CompilerGeneratedAttribute]
public void set_BorderColor(Color value);
    protected virtual void OnPaint(PaintEventArgs e);
    private Color G2209153C072D0403170B2A24090207(MessageDialogIcon G0C0F0E02);
    private Image G22091525162B07(MessageDialogIcon G0C0F0E02, Size G16051B09, Color G0A00052F1A280610, Color G0B09162F1A280610, bool G101F04);
    private Guna2Button G2C02081837311D160A1C(Guna2Button G071915181A2A, string G11091918, Color G151E0801143610210A1E0639, DialogResult G010500001A233B071607053F, MessageDialogStyle G1618180010, bool G16090D091630);
    private void G2C0208182630100E00(MessageDialogButtons G071915181A2A1A, MessageDialogIcon G0C0F0E02, MessageDialogStyle G1618180010);
    private void G2C0208181C25050B1F17(string G11091918, string G060D11181C2B07, MessageDialogButtons G071915181A2A1A, MessageDialogIcon G0C0F0E02, MessageDialogStyle G1618180010);
    internal static void G2A1A041E192510240A0004(Form G150D13091B30, Form G0604080011, float G0A1C000F1C3010, int G0A0A073F1030, bool G0700000F1E0B1C16);
    internal static DialogResult G36040E1B362B1B07(Form G150D13091B30, string G11091918, string G060D11181C2B07, MessageDialogButtons G071915181A2A1A, MessageDialogIcon G0C0F0E02, MessageDialogStyle G1618180010);
    protected virtual void Dispose(bool disposing);
    private void G2C0208181C25050B1F172A24081D1A0A040615();
}
internal class G22190F0D5B1120504B250025230207091246321B2D150B65200602171822070F183C131A023A : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class G22190F0D5B1120504B250025230207091246321B2D150B65210311173F0805042A300002082F : Form {
    private IContainer G06030C1C1A2A0C0C1101;
    public DateTimePicker G010D1509212D0407351B0A20001F44;
    private Timer G11050C090775;
    private Guna2ShadowForm G02190F0D262C08060A052F24170044;
    private Panel G150D0F091975;
    private Guna2Button G02190F0D37311D160A1C58;
    protected CreateParams CreateParams { get; }
    protected virtual void Dispose(bool disposing);
    private void G2C0208181C25050B1F172A24081D1A0A040615();
    public void G2C0208051C();
    protected virtual CreateParams get_CreateParams();
    public void G36040E1B312D080E0A15(Control G06030F18072B05, Color G06030D0307, Color G03031309162B050D17, Font G03030F18, RightToLeft G17180D);
    private void G22190F0D31251D07311B042E210414080E0F3E2F2715073D04160016(object G16090F081036, EventArgs G00);
    private void G22190F0D31251D07311B042E210414080E0F3E2A21000D3F0C1404060E(object G16090F081036, EventArgs G00);
    private void G11050C09077536360C1102(object G16090F081036, EventArgs G00);
    private void G02190F0D37311D160A1C581426011C070A(object G16090F081036, EventArgs G00);
    private void G010D1509212D0407351B0A20001F443B22040E1D21341E(object G16090F081036, EventArgs G00);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B250025230207091246321B2D150B652B17081719080B341E1D0E19090D19 : NumericUpDown {
    [CompilerGeneratedAttribute]
private G22190F0D5B1120504B250025230207091246321B2D150B652B17081719080B341E1D0E19090D1943270330101F2204142A0E0701371F2E0B193D050F0C0D0B36 FocusChanged;
    private bool G2C1F290303211B;
    internal MouseState G2803141F10171D031117;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool G2C1F2509062D0E0C281D0D2E { get; }
    public bool get_IsDesignMode();
    [CompilerGeneratedAttribute]
public void add_FocusChanged(G22190F0D5B1120504B250025230207091246321B2D150B652B17081719080B341E1D0E19090D1943270330101F2204142A0E0701371F2E0B193D050F0C0D0B36 value);
    [CompilerGeneratedAttribute]
public void remove_FocusChanged(G22190F0D5B1120504B250025230207091246321B2D150B652B17081719080B341E1D0E19090D1943270330101F2204142A0E0701371F2E0B193D050F0C0D0B36 value);
    protected virtual void OnFocusChanged(bool e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
}
internal class G22190F0D5B1120504B250025230207091246321B2D150B653012211D1C0F2A141A2D0E00 : G22190F0D5B1120504B250025230207091246321B2D150B65302B261D05151A0E02 {
    private CustomizableEdges G3A2F141F012B040B1F130B2700281103041B;
    private Color G3A2A08001907060E0A00;
    [CompilerGeneratedAttribute]
private EventHandler DownButtonChanged;
    [CompilerGeneratedAttribute]
private EventHandler UpButtonChanged;
    [CompilerGeneratedAttribute]
private EventHandler CustomGotFocusChanged;
    private Size G101C2503022A3A0B1F17;
    private G22190F0D5B1120504B250025230207091246321B2D150B653012211D1C0F2A141A2D0E00480A141815033D2C28 G151912041020;
    private Timer G11050C0907;
    private bool G060D111800360C06;
    private int G11050C09070D071600001F2A09;
    [CompilerGeneratedAttribute]
private NumericUpDown <Numeric>k__BackingField;
    private bool G0103140E19212A0E0C11020D0C1F1000;
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color G23050D00362B050D17 { get; public set; }
    internal NumericUpDown G2B190C09072D0A { get; internal set; }
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    [CompilerGeneratedAttribute]
public void add_DownButtonChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DownButtonChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDownButtonChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_UpButtonChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UpButtonChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnUpButtonChanged(EventArgs e);
    private Image G011E001B37251A07();
    protected virtual void OnPaint(PaintEventArgs e);
    private Bitmap G211E001B213600030B15052E(Color G06030D0307);
    [CompilerGeneratedAttribute]
public void add_CustomGotFocusChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CustomGotFocusChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCustomGotFocusChanged(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    private void G3618001E0110000F0000();
    private void G36180E1C212D040717();
    [CompilerGeneratedAttribute]
internal NumericUpDown get_Numeric();
    [CompilerGeneratedAttribute]
internal void set_Numeric(NumericUpDown value);
    internal void G3509130A1A3604371536063C0B(G22190F0D5B1120504B250025230207091246321B2D150B653012211D1C0F2A141A2D0E00480A141815033D2C28 G071915181A2A2026);
    private void G270906051B061C16111D071B17080617(MouseEventArgs G00);
    private void G2002052E00301D0D0B221B2E161E();
    private void G31050C09070C080C011E0C39(object G1603141E1621, EventArgs G041E061F);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B250025230207091246321B2D150B65302B261D05151A0E02 : Control {
    private int G3A2E0E1E11211B300416003E16;
    private DashStyle G3A2E0E1E11211B31110B052E;
    private Color G3A2E0E1E11211B210A1E0639;
    private int G3A2E0E1E11211B360D1B0A200B080617;
    private ShadowDecoration G3A3F090D112B1E260011063904191C0B0F;
    private bool G2C1F290303211B;
    internal bool G301F04211A311A073606083F00241B120004080A25150B;
    internal bool G301F042A1A271C112C1C1F2A09041105150D;
    internal MouseState G2803141F10171D031117;
    private bool G3A3912092136080C1602083900030126000B0A09360E1B2501;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int G2703130810363B03011B1C38 { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public DashStyle G2703130810363A161C1E0C { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color G2703130810362A0D091D1B { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int G2703130810363D0A0C110225001E06 { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Set the use of transfarant backgroud on this control.")]
public bool G301F04380725071115131B2E0B1937050203061C2B14002F { get; public set; }
    public sealed virtual bool get_IsDesignMode();
    protected virtual void OnHandleCreated(EventArgs e);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public DashStyle get_BorderStyle();
    public void set_BorderStyle(DashStyle value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderThickness();
    public void set_BorderThickness(int value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    public bool get_UseTransparentBackground();
    public void set_UseTransparentBackground(bool value);
    private void G211E001B2136080C16020839000301270E06151C2B0D(Graphics G22);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
}
[ToolboxItemAttribute("False")]
[DefaultEventAttribute("Scroll")]
[DefaultPropertyAttribute("Value")]
internal class G22190F0D5B1120504B250025230207091246321B2D150B653601171D070D2A001C : Control {
    [CompilerGeneratedAttribute]
private ScrollEventHandler Scroll;
    private bool G0C1F270507371D3106000627092803010F1C370B36150728040E;
    private bool G0C1F270507371D3106000627092803010F1C2901360814240B16041E;
    internal bool G0C02341C11251D07;
    private Rectangle G0600080F1E210D2004003B2E0619140A060404;
    private Rectangle G1104140117160C011113072C0908;
    private bool G1103112E14362A0E0C11022E01;
    private bool G070315181A292B031731052206061000;
    private bool G110414011707050B06190C2F;
    private int G1104140117130006111A;
    private int G11041401170C0C0B021A1D;
    private int G1104140117060616111D04070C001C102307151A2B0C;
    private int G1104140117060616111D04070C001C10350711;
    private int G1104140117100612291B042211;
    private int G11041401171406110C0600240B;
    private int G111E000F1E1406110C0600240B;
    private Timer G151E0E0B07211A11311B042E17;
    private int G0803141F10130107001E2B2A173D1416150115072B0F1D;
    private int G0619131E102A1D300416003E16;
    private bool G3A2D14181A1606170B160C2F2602070A041A12;
    private ScrollBarState G3A240E1A10363A1604060C;
    private ScrollBarState G3A3C130906370C063606083F00;
    private CustomizableEdges G3A2F141F012B040B1F130B2700281103041B;
    private ThumbStyle G3A38091918263A161C1E0C;
    private int G3A2E0E1E11211B300416003E16;
    private Color G3A2E0E1E11211B210A1E0639;
    private bool G0C1F290303211B0701;
    private bool G0C1F311E10371A0701;
    private bool G0D050604192D0E0A113D071C0D081008;
    private ScrollOrientation G160F1303192826100C17073F04191C0B0F;
    private int G08050F05183104;
    private int G080D1905183104;
    private int G16010000190701030B150C;
    private int G090D130B100701030B150C;
    private int G0619133A14281C07;
    private Color G3A38091918262A0D091D1B;
    private Color G3A2A08001907060E0A00;
    private float G3A38091918263A0B1F17;
    private bool G01030F1820340D0311172A24090207;
    private Timer G041915033D2B1F0717260026001F;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private Rectangle G160F130319282B0317200C28110C1B030D0D { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public ScrollBarState G2D03170907171D031117 { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public ScrollBarState G351E041F06210D3111131D2E { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [DescriptionAttribute("Sets the thumb's style in relation to the ScrollBar.")]
[DefaultValueAttribute("0")]
public ThumbStyle G3104140117171D1B0917 { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int G2703130810363B03011B1C38 { get; public set; }
    public int G2803141F10130107001E2B2A173D1416150115072B0F1D { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color G2703130810362A0D091D1B { get; public set; }
    public int G360F130319280B031721003100 { get; public set; }
    [DefaultValueAttribute("False")]
public bool G2D050604192D0E0A113D071C0D081008 { get; public set; }
    public int G28050F05183104 { get; public set; }
    public int G280D1905183104 { get; public set; }
    [DefaultValueAttribute("1")]
public int G36010000190701030B150C { get; public set; }
    [DefaultValueAttribute("5")]
public int G290D130B100701030B150C { get; public set; }
    [BrowsableAttribute("True")]
public Color G310414011707060E0A00 { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[BrowsableAttribute("True")]
public Color G23050D00362B050D17 { get; public set; }
    [DefaultValueAttribute("10")]
public float G310414011717001800 { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
public int G330D0D1910 { get; public set; }
    protected virtual void OnResize(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_Scroll(ScrollEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Scroll(ScrollEventHandler value);
    private void G2A02320F072B050E(ScrollEventType G11151109, int G0A00053A14281C07, int G0B09163A14281C07, ScrollOrientation G0A1E08091B3008160C1D07);
    private Rectangle get_scrollBarRectangle();
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void G301C050D01213B0D101C0D2E012E1A160F0D131D();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public ScrollBarState get_HoverState();
    public void set_HoverState(ScrollBarState value);
    public ScrollBarState get_PressedState();
    public void set_PressedState(ScrollBarState value);
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public ThumbStyle get_ThumbStyle();
    public void set_ThumbStyle(ThumbStyle value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public int get_MouseWheelBarPartitions();
    public void set_MouseWheelBarPartitions(int value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_ScrollbarSize();
    public void set_ScrollbarSize(int value);
    public bool get_HighlightOnWheel();
    public void set_HighlightOnWheel(bool value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_SmallChange();
    public void set_SmallChange(int value);
    public int get_LargeChange();
    public void set_LargeChange(int value);
    public Color get_ThumbColor();
    public void set_ThumbColor(Color value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public float get_ThumbSize();
    public void set_ThumbSize(float value);
    public int get_Value();
    public void set_Value(int value);
    private void G041915033D2B1F0717260026001F2A30080B0A(object G16090F081036, EventArgs G00);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    internal void G3609153F1636060E093D1B220003010515010E00(ScrollOrientation G0A1E08091B3008160C1D07);
    public bool G2D05153810371D(Point G1503080201);
    [SecuritySafeCriticalAttribute]
public void G270906051B11190604060C();
    [SecuritySafeCriticalAttribute]
public void G200205390520081600();
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void OnSizeChanged(EventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual void OnEnabledChanged(EventArgs e);
    private void G3609151905170A100A1E0509041F();
    private void G3709120901170A100A1E0518110C011112();
    private void G351E0E0B07211A11311B042E17391C070A(object G16090F081036, EventArgs G00);
    private int G2209153A14281C07(bool G16010000190D07011717042E0B19, bool G101C);
    private int G220915381D310400351D1A2211041A0A();
    private int G220915381D310400361B132E();
    private void G2002000E19213D0B08171B();
    private void G36180E1C212D040717();
    private void G2604000212213D0A101F0B1B0A1E1C1008070F(int G15031205012D060C);
    private void G351E0E0B07211A11311A1C2607(bool G0002000E19213D0B08171B);
    private Color G3709110014270C2C101E05080A011A16(Color G06030D030775, Color G06030D030776);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ExtensionAttribute]
internal static class G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F : object {
    public static int G223B2D332610302E20;
    public static int G323F3E3A26073B2D293E;
    public static int G323F3E2426073B2D293E;
    public static UInt32 G32213E2426073B2D293E;
    public static UInt32 G32213E3A26073B2D293E;
    public static UInt32 G32213E213A113A27323A2C0E29;
    public static int G362E3E203C0A2C3735;
    public static int G362E3E203C0A2C2E20343D;
    public static int G362E3E203C0A2C262A2527;
    public static int G362E3E203C0A2C302C35211F;
    public static int G362E3E3C34032C3735;
    public static int G362E3E3C34032C2E20343D;
    public static int G362E3E3C34032C262A2527;
    public static int G362E3E3C34032C302C353D03;
    public static int G362E3E3C34032C362A22;
    public static int G362E3E2030023D;
    public static int G362E3E3C34032C202A263D0428;
    public static int G362E3E3E3C032136;
    public static int G362E3E293B003A21373D2507;
    public static G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F33233908202C233D G2209153F1636060E093B072D0A(Control G06030F18072B05, ScrollOrientation G160F1303192826100C17073F04191C0B0F);
    public static void G3609153F1636060E093B072D0A(Control G06030F18072B05, int G0B210802, int G0B210014, int G0B3C000B10, int G0B3C0E1F, G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C360F130319282B0317360039000E010D0E06 G010513091630000D0B);
    public static ScrollBars G360F130319282B03172400380C0F1901(Control G06030F18072B05);
    public static void G3609153F1636060E092408271008(Control G06030F18072B05, int G130D0D1910, ScrollOrientation G160F1303192826100C17073F04191C0B0F);
    public static void G3609152F(Control G1705020421211116271D11, int G130D0D1910, ScrollOrientation G0A1E08091B3008160C1D07);
    public static void G3609153E1C270136000A1D090A15260713070D021200023E00(RichTextBox G1705020421211116271D11, int G130D0D1910, ScrollOrientation G0A1E08091B3008160C1D07);
    public static void G3609153807210C340C171E18061F1A080D3E00023104(TreeView G1705020421211116271D11, int G130D0D1910, ScrollOrientation G0A1E08091B3008160C1D07);
    [ExtensionAttribute]
public static int G2209153F1636060E092408271008(Control G06030F18072B05, ScrollOrientation G160F1303192826100C17073F04191C0B0F);
    public static int G36040E1B26271B0D091E2B2A17(IntPtr G0D3B0F08, int G122E001E, int G073F090302);
    public static bool G3503121838211A1104150C0A(IntPtr G0D1B0F08, int G1221120B, int G123C001E1429, int G093C001E1429);
    public static bool G2209153F1636060E093B072D0A(IntPtr G0D1B0F08, int G070D13, G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F33233908202C233D& G160F13031928200C031D);
    public static bool G3609153F1636060E093B072D0A(IntPtr G0D1B0F08, int G070D13, G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F33233908202C233D& G160F13031928200C031D, int G1709051E1433);
    public static IntPtr G36090F0838211A1104150C(IntPtr G0D3B0F08, UInt32 G281F06, IntPtr G123C001E1429, IntPtr G093C001E1429);
    public static bool G3503121838211A1104150C(IntPtr G0D3B0F08, UInt32 G081F06, int G123C001E1429, int G093C001E1429);
    public static int G3609153F1636060E09220638(IntPtr G0D3B0F08, int G0B2E001E, int G0B3C0E1F, bool G073E040807251E);
    public static int G2209153F1636060E09220638(IntPtr G0D3B0F08, int G0B2E001E);
    private static int G2209153B1C2A0D0D123E062502(IntPtr G0D3B0F08, int G0B250F08103C);
}
[ExtensionAttribute]
internal static class G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C39040E0D0F3A150708263418080020 : object {
    [ExtensionAttribute]
internal static void G36091529032107162D13072F090807(object G0A0E0B, object G110D130B1030, MethodInfo G080915041A20, string G001A0402010A080F00, bool G040805);
    internal static object G2209152A1C210506(Type G11151109, string G03050400110A080F00);
    internal static object G2209152A1C210506(object G110D130B1030, string G03050400110A080F00);
    internal static object G3609152A1C210506(object G110D130B1030, string G03050400110A080F00, object G130D0D1910);
    internal static object G2209153C072B1907170610(object G110D130B1030, string G151E0E1C10361D1B2B13042E);
    internal static object G3609153C072B1907170610(object G110D130B1030, string G151E0E1C10361D1B2B13042E, object G130D0D1910);
    internal static object G280915041A20200C131D022E(object G110D130B1030, string G080915041A2027030817, Object[] G130D0D191037);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B330722080C010B1326324000040D241703111B040F2B0E002D13010B : UserControl {
    [CompilerGeneratedAttribute]
private DecorationType <DecorationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <DecoratedControl>k__BackingField;
    [CompilerGeneratedAttribute]
private Padding <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private Bitmap <CtrlBmp>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CtrlPixels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CtrlStride>k__BackingField;
    [CompilerGeneratedAttribute]
private Bitmap <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CurrentTime>k__BackingField;
    private Timer G1101;
    private bool G0C1F320214341A0A0A06272412;
    [CompilerGeneratedAttribute]
private EventHandler`1<NonLinearTransfromNeededEventArg> NonLinearTransfromNeeded;
    public DecorationType G2109020307251D0B0A1C3D321508 { get; public set; }
    public Control G2109020307251D0701310625111F1A08 { get; public set; }
    public Padding G350D05081C2A0E { get; public set; }
    public Bitmap G26181300372919 { get; public set; }
    public Byte[] G26181300252D11070901 { get; public set; }
    public int G2618130026301B0B0117 { get; public set; }
    public Bitmap G231E000110 { get; public set; }
    public float G2619131E102A1D360C1F0C { get; public set; }
    public G22190F0D5B1120504B330722080C010B1326324000040D241703111B040F2B0E002D13010B(DecorationType type, Control decoratedControl);
    [CompilerGeneratedAttribute]
public DecorationType get_DecorationType();
    [CompilerGeneratedAttribute]
public void set_DecorationType(DecorationType value);
    [CompilerGeneratedAttribute]
public Control get_DecoratedControl();
    [CompilerGeneratedAttribute]
public void set_DecoratedControl(Control value);
    [CompilerGeneratedAttribute]
public Padding get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(Padding value);
    [CompilerGeneratedAttribute]
public Bitmap get_CtrlBmp();
    [CompilerGeneratedAttribute]
public void set_CtrlBmp(Bitmap value);
    [CompilerGeneratedAttribute]
public Byte[] get_CtrlPixels();
    [CompilerGeneratedAttribute]
public void set_CtrlPixels(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_CtrlStride();
    [CompilerGeneratedAttribute]
public void set_CtrlStride(int value);
    [CompilerGeneratedAttribute]
public Bitmap get_Frame();
    [CompilerGeneratedAttribute]
public void set_Frame(Bitmap value);
    [CompilerGeneratedAttribute]
public float get_CurrentTime();
    [CompilerGeneratedAttribute]
public void set_CurrentTime(float value);
    private void G2C02081825250D060C1C0E();
    private void G11013E381C2702(object G16090F081036, EventArgs G00);
    private void G0109020307251D0701310625111F1A083E3800072A15(object G16090F081036, PaintEventArgs G00);
    protected virtual void OnPaint(PaintEventArgs e);
    private void G06030F18072B053D331B1A220701102709090F092105(object G16090F081036, EventArgs G00);
    private void G2C020818();
    protected virtual Bitmap GetForeground(Control ctrl);
    private Byte[] G2209153C1C3C0C0E16(Bitmap G070111);
    [CompilerGeneratedAttribute]
public void add_NonLinearTransfromNeeded(EventHandler`1<NonLinearTransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void remove_NonLinearTransfromNeeded(EventHandler`1<NonLinearTransfromNeededEventArg> value);
    protected virtual Bitmap OnNonLinearTransfromNeeded();
    protected virtual void Dispose(bool disposing);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B330722080C010B1326324010000C080A0C1100040D2D19 : TabControl {
    private Animator G0402080114300610;
    private IContainer G06030C1C1A2A0C0C1101;
    [TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public Animation G240208011430000D0B { get; public set; }
    public Animation get_Animation();
    public void set_Animation(Animation value);
    protected virtual void OnSelecting(TabControlCancelEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void G2C0208181C25050B1F172A24081D1A0A040615();
    [CompilerGeneratedAttribute]
private void G59230F3F10280C01111B072C5B0F2A3B543751();
}
internal class G22190F0D5B1120504B360C380C0A1B01134635012306022E36150C0608092C041D300600023A : object {
}
internal enum G22190F0D5B1120504B37113F0003060D0E061240060E1C2F001037130F081D123B37081A : Enum {
    public int value__;
    public static G22190F0D5B1120504B37113F0003060D0E061240060E1C2F001037130F081D123B37081A G3503080201;
    public static G22190F0D5B1120504B37113F0003060D0E061240060E1C2F001037130F081D123B37081A G3509130F102A1D030217;
}
[ExtensionAttribute]
internal static class G22190F0D5B1120504B37113F0003060D0E061240070E003F170D093713150D0F1D300E0014 : object {
    [ExtensionAttribute]
public static bool G2C1F280231211A0B021C24240108(Control G06030F18072B05);
    [ExtensionAttribute]
public static bool G2C1F280231211A0B021C24240108(UserControl G06030F18072B05);
    private static bool G3709120319320C260001002C0B201A0004(Control G06030F18072B05);
}
[ExtensionAttribute]
internal static class G22190F0D5B1120504B37113F0003060D0E0612401115072716 : object {
    internal static Size G280D193F1C3E0C;
    internal static Size G2C02170D192D0D310C080C;
    internal static Rectangle G280D193E10271D030B15052E;
    private static ContentAlignment G0402183E1C230116;
    private static ContentAlignment G0402182E1A301D0D08;
    private static ContentAlignment G0402182F102A1D0717;
    private static ContentAlignment G040218211C200D0E00;
    internal static ContentAlignment G240218381A34280E0C1507;
    internal static ContentAlignment G240218211C200D0E003305220203;
    internal static ContentAlignment G2402182E1A301D0D083305220203;
    private static G22190F0D5B1120504B37113F0003060D0E0612401115072716();
    internal static Color G280519091107060E0A00(Color G06030D030775, Color G06030D030776);
    [ExtensionAttribute]
internal static Color G2700000211(Color G0A00052F1A280610, Color G0B09162F1A280610, double G0700040211, bool G0D0D122D193401033313053E00);
    [ExtensionAttribute]
internal static void G211E001B3C29080500200C3B090C160122070D0136(Graphics G02, Image G0C01000B10, Rectangle G01091218, Color G0A00052F1A280610, Color G0B09162F1A280610);
    internal static GraphicsPath G261E040D01213B0D101C0D19000E01(RectangleF G17090218142A0E0E00, float G170D05050037, G22190F0D5B1120504B37113F0003060D0E061240060E1C2F001037130F081D123B37081A G10020818);
    internal static GraphicsPath G261E040D01213B0D101C0D19000E01(RectangleF G17090218142A0E0E00, float G1103112010221D, float G1103113E1C230116, float G070315181A2925070306, float G070315181A293B0B021A1D, G22190F0D5B1120504B37113F0003060D0E061240060E1C2F001037130F081D123B37081A G10020818);
    [ExtensionAttribute]
internal static void G23050D0025251D0A(Graphics G02, Brush G071E141F1D, Pen G15090F, int G0703130810363B03011B1C38, G22190F0D5B1120504B37113F0003060D0E061240060E1C2F001037130F081D123B37081A G10020818, RectangleF G17090218142A0E0E00);
    [ExtensionAttribute]
internal static int G280D19(int G130D0D, int G08050F);
    [ExtensionAttribute]
internal static double G280D19(double G130D0D, double G08050F);
    [ExtensionAttribute]
internal static float G280D19(float G130D0D, float G08050F);
    [ExtensionAttribute]
internal static ulong G280D19(ulong G130D0D, ulong G08050F);
    [ExtensionAttribute]
internal static long G280D19(long G130D0D, long G08050F);
    [ExtensionAttribute]
internal static UInt32 G280D19(UInt32 G130D0D, UInt32 G08050F);
    [ExtensionAttribute]
internal static ushort G280D19(ushort G130D0D, ushort G08050F);
    [ExtensionAttribute]
internal static short G280D19(short G130D0D, short G08050F);
    [ExtensionAttribute]
internal static sbyte G280D19(sbyte G130D0D, sbyte G08050F);
    [ExtensionAttribute]
internal static byte G280D19(byte G130D0D, byte G08050F);
    [ExtensionAttribute]
internal static decimal G280D19(decimal G130D0D, decimal G08050F);
    [ExtensionAttribute]
internal static int G28050F(int G130D0D, int G08050F);
    [ExtensionAttribute]
internal static double G28050F(double G130D0D, double G08050F);
    [ExtensionAttribute]
internal static float G28050F(float G130D0D, float G08050F);
    [ExtensionAttribute]
internal static ulong G28050F(ulong G130D0D, ulong G08050F);
    [ExtensionAttribute]
internal static long G28050F(long G130D0D, long G08050F);
    [ExtensionAttribute]
internal static UInt32 G28050F(UInt32 G130D0D, UInt32 G08050F);
    [ExtensionAttribute]
internal static ushort G28050F(ushort G130D0D, ushort G08050F);
    [ExtensionAttribute]
internal static short G28050F(short G130D0D, short G08050F);
    [ExtensionAttribute]
internal static sbyte G28050F(sbyte G130D0D, sbyte G08050F);
    [ExtensionAttribute]
internal static byte G28050F(byte G130D0D, byte G08050F);
    [ExtensionAttribute]
internal static decimal G28050F(decimal G130D0D, decimal G08050F);
    [ExtensionAttribute]
internal static int G29050C0501(int G130D0D, int G08050F, int G080D19);
    [ExtensionAttribute]
internal static double G29050C0501(double G130D0D, double G08050F, double G080D19);
    [ExtensionAttribute]
internal static float G29050C0501(float G130D0D, float G08050F, float G080D19);
    [ExtensionAttribute]
internal static ulong G29050C0501(ulong G130D0D, ulong G08050F, ulong G080D19);
    [ExtensionAttribute]
internal static long G29050C0501(long G130D0D, long G08050F, long G080D19);
    [ExtensionAttribute]
internal static UInt32 G29050C0501(UInt32 G130D0D, UInt32 G08050F, UInt32 G080D19);
    [ExtensionAttribute]
internal static ushort G29050C0501(ushort G130D0D, ushort G08050F, ushort G080D19);
    [ExtensionAttribute]
internal static short G29050C0501(short G130D0D, short G08050F, short G080D19);
    [ExtensionAttribute]
internal static sbyte G29050C0501(sbyte G130D0D, sbyte G08050F, sbyte G080D19);
    [ExtensionAttribute]
internal static byte G29050C0501(byte G130D0D, byte G08050F, byte G080D19);
    [ExtensionAttribute]
internal static decimal G29050C0501(decimal G130D0D, decimal G08050F, decimal G080D19);
    [ExtensionAttribute]
internal static float G3509130F102A1D030217(float G130D0D, float G130D0D5E, float G130D0D5F);
    [ExtensionAttribute]
internal static int G3509130F102A1D030217(int G130D0D, int G130D0D5E, int G130D0D5F);
    [ExtensionAttribute]
internal static double G3509130F102A1D030217(double G130D0D, double G130D0D5E, double G130D0D5F);
    [ExtensionAttribute]
internal static float G3103310907270C0C11130E2E(float G130D0D1910, float G1103150D19);
    [ExtensionAttribute]
internal static float G231E0E0125211B01001C1D2A0208(float G130D0D1910, float G1103150D19);
    [ExtensionAttribute]
internal static int G3103310907270C0C11130E2E(int G130D0D1910, int G1103150D19);
    [ExtensionAttribute]
internal static int G231E0E0125211B01001C1D2A0208(int G130D0D1910, int G1103150D19);
    [ExtensionAttribute]
internal static string G3709110014270C(string G16, char G06);
    [ExtensionAttribute]
internal static string G3103270507371D210D131B070A1A10162209120B(string G161813);
    [ExtensionAttribute]
internal static Font G3709110014270C2C101E050D0A0301(Font G03030F18, Font G1709110014270C);
    [ExtensionAttribute]
internal static Point G3709110014270C2708021D3235021C0A15(Point G1503080201, Point G1709110014270C);
    [ExtensionAttribute]
internal static PointF G3709110014270C2708021D3235021C0A15(PointF G1503080201, PointF G1709110014270C);
    [ExtensionAttribute]
internal static Size G3709110014270C2708021D3236040F01(Size G16051B09, Size G1709110014270C);
    [ExtensionAttribute]
internal static SizeF G3709110014270C2708021D3236040F01(SizeF G16051B09, SizeF G1709110014270C);
    internal static Size G2809001F00360C36000A1D(string G11091918, Font G03030F18);
    internal static Size G2809001F00360C36000A1D(Control G06, string G11091918, Font G03030F18, ContentAlignment G0400080B1B, bool G301F042F1A291903111B0B270039101C153A040020041C220B05);
    internal static StringFormat G261E040D01213A16171B072C23020709001C(ContentAlignment G0400080B1B);
    internal static StringFormat G261E040D01213A16171B072C23020709001C(ContentAlignment G11091918342800050B, RightToLeft G370506040110062E00141D, bool G16040E1B3028050B15010038, bool G101F04211B21040D0B1B0A, bool G1203130822251B12);
    internal static TextFormatFlags G261E040D01213D071D062F24170014102704000937(ContentAlignment G11091918342800050B, RightToLeft G170506040110062E00141D, bool G16040E1B3028050B15010038, bool G101F04211B21040D0B1B0A, bool G1203130822251B12);
    internal static TextFormatFlags G31091918332B1B0F04062F27040A06220E1A20022D060026000C11352F28(ContentAlignment G0400080B1B);
    internal static StringAlignment G311E00020628081600330522020318010F1C(ContentAlignment G0400080B1B);
    internal static TextFormatFlags G311E00020628081600330522020318010F1C270136262A02(ContentAlignment G0400080B1B);
    internal static StringAlignment G311E000206280816003E0025002C190D06060C0B2A15(ContentAlignment G0400080B1B);
    internal static TextFormatFlags G311E000206280816003E0025002C190D06060C0B2A1528241725213B(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static HorizontalAlignment G311E00020628081600(ContentAlignment G0400080B1B);
    public static Size G3619032D192D0E0C00163B2E02041A0A(Size G0619131E102A1D310C080C, Size G06030F18102A1D310C080C, TextImageRelation G17090D0D012D060C);
    public static Size G3619032D192D0E0C00163B2E02041A0A2207130B(Size G0619131E102A1D310C080C, Size G06030F18102A1D310C080C, bool G130913181C27080E);
    public static bool G2C1F370907300001041E3B2E090C010D0E06(TextImageRelation G17090D0D012D060C);
    public static bool G2C1F2903072D130D0B0608273708190515010E00(TextImageRelation G17090D0D012D060C);
    private static AnchorStyles G22091523053406110C060C0A0B0E1D0B13(AnchorStyles G040202041A36);
    public static TextImageRelation G22091523053406110C060C1F0015012D0C09060B1604022A110B0A1C(TextImageRelation G17090D0D012D060C);
    [ExtensionAttribute]
internal static RectangleF G3609153B1C201D0A(RectangleF G17090218, float G120505181D);
    [ExtensionAttribute]
internal static RectangleF G36091524102D0E0A11(RectangleF G17090218, float G0D09080B1D30);
    [ExtensionAttribute]
internal static RectangleF G36091534(RectangleF G17090218, float G1D);
    [ExtensionAttribute]
internal static RectangleF G36091535(RectangleF G17090218, float G1C);
    [ExtensionAttribute]
internal static RectangleF G360915201A2708160C1D07(RectangleF G17090218, float G1D, float G1C);
    [ExtensionAttribute]
internal static RectangleF G360915201A2708160C1D07(RectangleF G17090218, PointF G0903020D012D060C);
    [ExtensionAttribute]
internal static RectangleF G360915201A2708160C1D070E081D011D(RectangleF G17090218);
    [ExtensionAttribute]
internal static RectangleF G3609153F1C3E0C(RectangleF G17090218, float G120505181D, float G0D09080B1D30);
    [ExtensionAttribute]
internal static RectangleF G3609153F1C3E0C(RectangleF G17090218, SizeF G16051B09);
    [ExtensionAttribute]
internal static RectangleF G3609152313221A0711(RectangleF G17090218, float G1D, float G1C);
    [ExtensionAttribute]
internal static RectangleF G3609152313221A0711(RectangleF G17090218, PointF G1503080201);
    [ExtensionAttribute]
internal static RectangleF G3609152313221A07112A(RectangleF G17090218, float G1D);
    [ExtensionAttribute]
internal static RectangleF G3609152313221A07112B(RectangleF G17090218, float G1C);
    [ExtensionAttribute]
internal static RectangleF G2C02070014300C(RectangleF G17090218, float G09090718, float G110311, float G1705060401, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G2C02070014300C(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2C02070014300C(RectangleF G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2D0313251B2205031117(RectangleF G17090218, float G09090718, float G1705060401);
    [ExtensionAttribute]
internal static RectangleF G2D0313251B2205031117(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G330913251B2205031117(RectangleF G17090218, float G110311, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G330913251B2205031117(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C(RectangleF G17090218, float G09090718, float G110311, float G1705060401, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C(RectangleF G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2D031328102205031117(RectangleF G17090218, float G09090718, float G1705060401);
    [ExtensionAttribute]
internal static RectangleF G2D031328102205031117(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G33091328102205031117(RectangleF G17090218, float G110311, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G33091328102205031117(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static float G280505081921(RectangleF G17090218, float G0D09080B1D30);
    [ExtensionAttribute]
internal static float G26090F181036(RectangleF G17090218, float G120505181D);
    [ExtensionAttribute]
internal static float G3705060401(RectangleF G17090218, float G120505181D);
    [ExtensionAttribute]
internal static float G270315181A29(RectangleF G17090218, float G0D09080B1D30);
    [ExtensionAttribute]
internal static PointF G2805050819212A070B060C39(RectangleF G17090218, float G120505181D, float G0D09080B1D30);
    [ExtensionAttribute]
internal static RectangleF G26030F18102A1D23091B0E25(RectangleF G17090218, SizeF G16051B09, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static RectangleF G26030F18102A1D23091B0E25(RectangleF G17090218, float G120505181D, float G0D09080B1D30, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static Rectangle G3609153B1C201D0A(Rectangle G17090218, int G120505181D);
    [ExtensionAttribute]
internal static Rectangle G36091524102D0E0A11(Rectangle G17090218, int G0D09080B1D30);
    [ExtensionAttribute]
internal static Rectangle G36091534(Rectangle G17090218, int G1D);
    [ExtensionAttribute]
internal static Rectangle G36091535(Rectangle G17090218, int G1C);
    [ExtensionAttribute]
internal static Rectangle G360915201A2708160C1D07(Rectangle G17090218, int G1D, int G1C);
    [ExtensionAttribute]
internal static Rectangle G360915201A2708160C1D07(Rectangle G17090218, Point G0903020D012D060C);
    [ExtensionAttribute]
internal static Rectangle G360915201A2708160C1D070E081D011D(Rectangle G17090218);
    [ExtensionAttribute]
internal static Rectangle G3609153F1C3E0C(Rectangle G17090218, int G120505181D, int G0D09080B1D30);
    [ExtensionAttribute]
internal static Rectangle G3609153F1C3E0C(Rectangle G17090218, Size G16051B09);
    [ExtensionAttribute]
internal static Rectangle G3609152313221A0711(Rectangle G17090218, int G1D, int G1C);
    [ExtensionAttribute]
internal static Rectangle G3609152313221A0711(Rectangle G17090218, Point G1503080201);
    [ExtensionAttribute]
internal static Rectangle G3609152313221A07112A(Rectangle G17090218, int G1D);
    [ExtensionAttribute]
internal static Rectangle G3609152313221A07112B(Rectangle G17090218, int G1C);
    [ExtensionAttribute]
internal static Rectangle G2C02070014300C(Rectangle G17090218, int G09090718, int G110311, int G1705060401, int G070315181A29);
    [ExtensionAttribute]
internal static Rectangle G2C02070014300C(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2C02070014300C(Rectangle G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2D0313251B2205031117(Rectangle G17090218, int G09090718, int G1705060401);
    [ExtensionAttribute]
internal static Rectangle G2D0313251B2205031117(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G330913251B2205031117(Rectangle G17090218, int G110311, int G070315181A29);
    [ExtensionAttribute]
internal static Rectangle G330913251B2205031117(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2109070014300C(Rectangle G17090218, int G09090718, int G110311, int G1705060401, int G070315181A29);
    [ExtensionAttribute]
internal static Rectangle G2109070014300C(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2109070014300C(Rectangle G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2D031328102205031117(Rectangle G17090218, int G09090718, int G1705060401);
    [ExtensionAttribute]
internal static Rectangle G2D031328102205031117(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G33091328102205031117(Rectangle G17090218, int G110311, int G070315181A29);
    [ExtensionAttribute]
internal static Rectangle G33091328102205031117(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C24(RectangleF G17090218, float G09090718, float G110311, float G1705060401, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C24(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C24(RectangleF G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2D0313281022050311172F(RectangleF G17090218, float G09090718, float G1705060401);
    [ExtensionAttribute]
internal static RectangleF G2D0313281022050311172F(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G330913281022050311172F(RectangleF G17090218, float G110311, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G330913281022050311172F(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static int G280505081921(Rectangle G17090218, int G0D09080B1D30);
    [ExtensionAttribute]
internal static int G26090F181036(Rectangle G17090218, int G120505181D);
    [ExtensionAttribute]
internal static int G3705060401(Rectangle G17090218, int G120505181D);
    [ExtensionAttribute]
internal static int G270315181A29(Rectangle G17090218, int G0D09080B1D30);
    [ExtensionAttribute]
internal static Point G2805050819212A070B060C39(Rectangle G17090218, int G120505181D, int G0D09080B1D30);
    [ExtensionAttribute]
internal static Rectangle G26030F18102A1D23091B0E25(Rectangle G17090218, Size G16051B09, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static Rectangle G26030F18102A1D23091B0E25(Rectangle G17090218, int G120505181D, int G0D09080B1D30, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static RectangleF G26030F18102A1D23091B0E2523(RectangleF G17090218, SizeF G16051B09, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static RectangleF G26030F18102A1D23091B0E2523(RectangleF G17090218, float G120505181D, float G0D09080B1D30, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F22091B300C10241E002C0B(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F2D091330280E0C1507(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F3305122C1D23091B0E25(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F35030505050B021C(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F23030130060F241E002C0B(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F2C0511200507241E002C0B(ContentAlignment G0400080B1B);
    internal static G22190F0D5B1120504B37113F0003060D0E06124011150727164D31171315210C0F3E042206310E1915 G310919183C29080500200C2704191C0B0F2400172B141A(Rectangle G06030F18142D070717200C2811, Size G11091918262D1307, Size G0C01000B1017001800, int G161C000F10, TextImageRelation G17090D0D012D060C, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static Rectangle G21030207(Size G16051B09, Rectangle G06030F18142D070717200C2811, DockStyle G010302072630100E00);
    [ExtensionAttribute]
internal static TextImageRelation G37180D380725071109131D2E31080D102805000921330B2704160C1D05(TextImageRelation G110919183C29080500200C2704191C0B0F, RightToLeft G170506040110062E00141D);
    [ExtensionAttribute]
internal static ContentAlignment G37180D380725071109131D2E26021B10040615(ContentAlignment G0400080B1B, RightToLeft G170506040110062E00141D);
}
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F222D020B251607281519 : object {
    private static G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E37090D073D001A083A G130D0D0511251D0D17;
    private static G22190F0D5B1120504B3E00280003060D0F0F4F222D020B251607281519();
    internal static void G2A1C0402();
    internal static void G330D0D0511251D07(IComponent G0C021218142A0A07);
    internal static bool G22091528103700050B3F062F00(IComponent G0C021218142A0A07);
}
[DefaultMemberAttribute("Item")]
internal class G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812 : object {
    private Dictionary`2<string, object> G09051218;
    public object G2C180401 { get; public set; }
    public int G2603140201 { get; }
    public G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812(string json);
    public object G2209153A14281C07(string G0E0918);
    public string G2209153F0136(string G0E0918);
    public bool G2209152E1A2B05(string G0E0918);
    public int G220915251B30(string G0E0918);
    public G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812 G22091523172E0C0111(string G0E0918);
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public void G240805(string G0E0918, object G130D0D1910);
    public bool G37090C030321(string G0E0918);
    public bool G26030F18142D0711(string G0E0918);
    public int get_Count();
    public T G2209153A14281C07(string G0E0918);
    public virtual string ToString();
    private object G26030F1A10361D34041E1C2E16(Type G11151109, object G130D0D1910);
    private string G360913051428001800(G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812 G0A0E0B);
    private string G2F1F0E023A26030706063D243619070D0F0F(object G130D0D1910);
    private string G360913051428001800(IList G0A0E0B);
    private T G231E0E013F37060C(string G0F1F0E02);
    private string G360913051428001800(object G0A0E0B);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C390409050B2B : object {
    private static long G210D1509012D0407281B071F0C001030080B0A1D;
    private static Regex G210D1509212D0407231D1B260419;
    private static int G370902190737000D0B3E00260C19;
    private StreamReader G170900081036;
    private int G170902190737000D0B360C3B1105;
    public G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C390409050B2B(StreamReader reader);
    private static G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C390409050B2B();
    public object G370900082325051700();
    private char G370900083B211116261A0839040E010113();
    private char G350904073B211116261A0839040E010113();
    private string G2209152F1D251B0306060C3916(int G0603140201);
    private char G350904073B211116361B0E250C0B1C070006152D2C001C2A06160000();
    private ArrayList G3709000834361B031C();
    private bool G37090008372B060E001307();
    private string G370900083B250407(bool G04000D0302151C0D11171A);
    private void G370900083B31050E();
    private object G370900083B3104000000();
    private G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812 G370900083A2603070606();
    private string G3709000826301B0B0B15();
    private string G3709000826301B0B0B15(Boolean& G0D0D122010250D0B0B153A27041E1D);
    private void G3709021907370C270B060C39();
    private void G3709021907370C2E00131F2E();
    internal static void G3709021907370C270B060C39(int G170902190737000D0B3E00260C19, Int32& G170902190737000D0B360C3B1105);
    internal static void G3709021907370C2E00131F2E(Int32& G170902190737000D0B360C3B1105);
}
internal enum G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B200A000F041A330F3D081B141D0F0515 : Enum {
    public int value__;
    public static G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B200A000F041A330F3D081B141D0F0515 G3503080201;
    public static G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B200A000F041A330F3D081B141D0F0515 G3509130F102A1D030217;
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B210A1E04133800023C151A02 : object {
    [CompilerGeneratedAttribute]
private static Color <BackColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <BorderColor>k__BackingField;
    public static Color G270D0207362B050D17 { get; public set; }
    public static Color G2703130810362A0D091D1B { get; public set; }
    [CompilerGeneratedAttribute]
public static Color get_BackColor();
    [CompilerGeneratedAttribute]
public static void set_BackColor(Color value);
    [CompilerGeneratedAttribute]
public static Color get_BorderColor();
    [CompilerGeneratedAttribute]
public static void set_BorderColor(Color value);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25261A0E0203230121 : CheckBox {
    private Size G0604040F1E17001800;
    private Color G0604040F1E210D20041102080A011A16;
    private Color G0604040F1E210D200A000D2E172E1A080E1A;
    private Color G1002020410270207013008280E2E1A080E1A;
    private Color G100202041027020701300639010807270E040E1C;
    private Color G0604040F1E0908100E3106270A1F;
    public Color G2604040F1E210D20041102080A011A16 { get; public set; }
    public Color G2604040F1E210D200A000D2E172E1A080E1A { get; public set; }
    public Color G3002020410270207013008280E2E1A080E1A { get; public set; }
    public Color G300202041027020701300639010807270E040E1C { get; public set; }
    public Size G2604040F1E17001800 { get; public set; }
    public Color G2604040F1E0908100E3106270A1F { get; public set; }
    public Color get_CheckedBackColor();
    public void set_CheckedBackColor(Color value);
    public Color get_CheckedBorderColor();
    public void set_CheckedBorderColor(Color value);
    public Color get_UncheckedBackColor();
    public void set_UncheckedBackColor(Color value);
    public Color get_UncheckedBorderColor();
    public void set_UncheckedBorderColor(Color value);
    public Size get_CheckSize();
    public void set_CheckSize(Size value);
    public Color get_CheckMarkColor();
    public void set_CheckMarkColor(Color value);
    protected virtual void OnPaint(PaintEventArgs pevent);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25261E04120903023C231B133C0E02 : G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B2527071F15070F {
    private Image G211E001B3C27060C(Color G06030D0307);
    protected virtual void OnPaint(PaintEventArgs pevent);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B2527071F15070F : Button {
    internal bool G24000D030206061001171B;
    private bool G0C1F200F012D1F07;
    private bool G0C1F311E10371A0701;
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    private Color G040F150503212B0306192A24090207;
    public Color G270D0207123606170B162A24090207 { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
public Color G240F150503212B0306192A24090207 { get; public set; }
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    public Color get_ActiveBackColor();
    public void set_ActiveBackColor(Color value);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected virtual void OnMouseDown(MouseEventArgs mevent);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs pevent);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25291B080406120B0F080B10 : Control {
    private Dictionary`2<string, string> G3A080418142D0511;
    public void G241C11091B20(string G0E0918, string G130D0D1910);
    private void G3609110D07251D0D17(Graphics G02, Rectangle G17090218142A0E0E00);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25311713152A0E16 : UserControl {
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25311713152A0E1676350B1F3C2303193C3F040F04041A280D0717 G3A1C0D0D1621010D09160C39;
    private bool G0C1F200F012D1F07;
    private Color G0703130810362A0D091D1B;
    private Color G040F150503212B0D17160C392602190B13;
    private IContainer G06030C1C1A2A0C0C1101;
    private TextBox G11091918372B1153;
    [DefaultValueAttribute("System.Drawing.Color", "Window")]
public Color BackColor { get; public set; }
    public string Text { get; public set; }
    [DisplayNameAttribute("Text")]
[LocalizableAttribute("True")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
public string G31091918372B1136000A1D { get; public set; }
    public Font Font { get; public set; }
    public Padding G350D05081C2A0E { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "ActiveBorder")]
public Color G2703130810362A0D091D1B { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "ActiveBorder")]
public Color G240F150503212B0D17160C392602190B13 { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "GrayText")]
public Color G3500000F102C060E01171B0D0A1F10270E040E1C { get; public set; }
    [DefaultValueAttribute("")]
public string G3500000F102C060E01171B1F001501 { get; public set; }
    protected virtual void OnDoubleClick(EventArgs e);
    private void G301C050D01213D071D062B241D21141D0E1D15();
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public string get_TextBoxText();
    public void set_TextBoxText(string value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_ActiveBorderColor();
    public void set_ActiveBorderColor(Color value);
    public Color get_PlaceholderForeColor();
    public void set_PlaceholderForeColor(Color value);
    public string get_PlaceholderText();
    public void set_PlaceholderText(string value);
    protected virtual void Dispose(bool disposing);
    private void G2C0208181C25050B1F172A24081D1A0A040615();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G594202181A3657003A2D5B1455(object G16, EventArgs G00);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G594202181A3657003A2D5B1454(object G16, EventArgs G00);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G594202181A3657003A2D5B1457(object G16, EventArgs G00);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G594202181A3657003A2D5B1456(object G16, EventArgs G00);
}
[ToolboxItemAttribute("False")]
internal class G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B253513050404 : Panel {
    protected virtual void OnPaint(PaintEventArgs e);
}
[ExtensionAttribute]
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B37111B0712 : object {
    internal static Size G280D193F1C3E0C;
    internal static Size G2C02170D192D0D310C080C;
    internal static Rectangle G280D193E10271D030B15052E;
    private static ContentAlignment G0402183E1C230116;
    private static ContentAlignment G0402182E1A301D0D08;
    private static ContentAlignment G0402182F102A1D0717;
    private static ContentAlignment G040218211C200D0E00;
    internal static ContentAlignment G240218381A34280E0C1507;
    internal static ContentAlignment G240218211C200D0E003305220203;
    internal static ContentAlignment G2402182E1A301D0D083305220203;
    private static G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B37111B0712();
    internal static Color G280519091107060E0A00(Color G06030D030775, Color G06030D030776);
    [ExtensionAttribute]
internal static Color G2700000211(Color G0A00052F1A280610, Color G0B09162F1A280610, double G0700040211, bool G0D0D122D193401033313053E00);
    [ExtensionAttribute]
internal static void G211E001B3C29080500200C3B090C160122070D0136(Graphics G02, Image G0C01000B10, Rectangle G01091218, Color G0A00052F1A280610, Color G0B09162F1A280610);
    internal static GraphicsPath G261E040D01213B0D101C0D19000E01(RectangleF G17090218142A0E0E00, float G170D05050037, G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B200A000F041A330F3D081B141D0F0515 G10020818);
    internal static GraphicsPath G261E040D01213B0D101C0D19000E01(RectangleF G17090218142A0E0E00, float G1103112010221D, float G1103113E1C230116, float G070315181A2925070306, float G070315181A293B0B021A1D, G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B200A000F041A330F3D081B141D0F0515 G10020818);
    [ExtensionAttribute]
internal static void G23050D0025251D0A(Graphics G02, Brush G071E141F1D, Pen G15090F, int G0703130810363B03011B1C38, G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B200A000F041A330F3D081B141D0F0515 G10020818, RectangleF G17090218142A0E0E00);
    [ExtensionAttribute]
internal static int G280D19(int G130D0D, int G08050F);
    [ExtensionAttribute]
internal static double G280D19(double G130D0D, double G08050F);
    [ExtensionAttribute]
internal static float G280D19(float G130D0D, float G08050F);
    [ExtensionAttribute]
internal static ulong G280D19(ulong G130D0D, ulong G08050F);
    [ExtensionAttribute]
internal static long G280D19(long G130D0D, long G08050F);
    [ExtensionAttribute]
internal static UInt32 G280D19(UInt32 G130D0D, UInt32 G08050F);
    [ExtensionAttribute]
internal static ushort G280D19(ushort G130D0D, ushort G08050F);
    [ExtensionAttribute]
internal static short G280D19(short G130D0D, short G08050F);
    [ExtensionAttribute]
internal static sbyte G280D19(sbyte G130D0D, sbyte G08050F);
    [ExtensionAttribute]
internal static byte G280D19(byte G130D0D, byte G08050F);
    [ExtensionAttribute]
internal static decimal G280D19(decimal G130D0D, decimal G08050F);
    [ExtensionAttribute]
internal static int G28050F(int G130D0D, int G08050F);
    [ExtensionAttribute]
internal static double G28050F(double G130D0D, double G08050F);
    [ExtensionAttribute]
internal static float G28050F(float G130D0D, float G08050F);
    [ExtensionAttribute]
internal static ulong G28050F(ulong G130D0D, ulong G08050F);
    [ExtensionAttribute]
internal static long G28050F(long G130D0D, long G08050F);
    [ExtensionAttribute]
internal static UInt32 G28050F(UInt32 G130D0D, UInt32 G08050F);
    [ExtensionAttribute]
internal static ushort G28050F(ushort G130D0D, ushort G08050F);
    [ExtensionAttribute]
internal static short G28050F(short G130D0D, short G08050F);
    [ExtensionAttribute]
internal static sbyte G28050F(sbyte G130D0D, sbyte G08050F);
    [ExtensionAttribute]
internal static byte G28050F(byte G130D0D, byte G08050F);
    [ExtensionAttribute]
internal static decimal G28050F(decimal G130D0D, decimal G08050F);
    [ExtensionAttribute]
internal static int G29050C0501(int G130D0D, int G08050F, int G080D19);
    [ExtensionAttribute]
internal static double G29050C0501(double G130D0D, double G08050F, double G080D19);
    [ExtensionAttribute]
internal static float G29050C0501(float G130D0D, float G08050F, float G080D19);
    [ExtensionAttribute]
internal static ulong G29050C0501(ulong G130D0D, ulong G08050F, ulong G080D19);
    [ExtensionAttribute]
internal static long G29050C0501(long G130D0D, long G08050F, long G080D19);
    [ExtensionAttribute]
internal static UInt32 G29050C0501(UInt32 G130D0D, UInt32 G08050F, UInt32 G080D19);
    [ExtensionAttribute]
internal static ushort G29050C0501(ushort G130D0D, ushort G08050F, ushort G080D19);
    [ExtensionAttribute]
internal static short G29050C0501(short G130D0D, short G08050F, short G080D19);
    [ExtensionAttribute]
internal static sbyte G29050C0501(sbyte G130D0D, sbyte G08050F, sbyte G080D19);
    [ExtensionAttribute]
internal static byte G29050C0501(byte G130D0D, byte G08050F, byte G080D19);
    [ExtensionAttribute]
internal static decimal G29050C0501(decimal G130D0D, decimal G08050F, decimal G080D19);
    [ExtensionAttribute]
internal static float G3509130F102A1D030217(float G130D0D, float G130D0D5E, float G130D0D5F);
    [ExtensionAttribute]
internal static int G3509130F102A1D030217(int G130D0D, int G130D0D5E, int G130D0D5F);
    [ExtensionAttribute]
internal static double G3509130F102A1D030217(double G130D0D, double G130D0D5E, double G130D0D5F);
    [ExtensionAttribute]
internal static float G3103310907270C0C11130E2E(float G130D0D1910, float G1103150D19);
    [ExtensionAttribute]
internal static float G231E0E0125211B01001C1D2A0208(float G130D0D1910, float G1103150D19);
    [ExtensionAttribute]
internal static int G3103310907270C0C11130E2E(int G130D0D1910, int G1103150D19);
    [ExtensionAttribute]
internal static int G231E0E0125211B01001C1D2A0208(int G130D0D1910, int G1103150D19);
    [ExtensionAttribute]
internal static string G3709110014270C(string G16, char G06);
    [ExtensionAttribute]
internal static string G3103270507371D210D131B070A1A10162209120B(string G161813);
    [ExtensionAttribute]
internal static Font G3709110014270C2C101E050D0A0301(Font G03030F18, Font G1709110014270C);
    [ExtensionAttribute]
internal static Point G3709110014270C2708021D3235021C0A15(Point G1503080201, Point G1709110014270C);
    [ExtensionAttribute]
internal static PointF G3709110014270C2708021D3235021C0A15(PointF G1503080201, PointF G1709110014270C);
    [ExtensionAttribute]
internal static Size G3709110014270C2708021D3236040F01(Size G16051B09, Size G1709110014270C);
    [ExtensionAttribute]
internal static SizeF G3709110014270C2708021D3236040F01(SizeF G16051B09, SizeF G1709110014270C);
    internal static Size G2809001F00360C36000A1D(string G11091918, Font G03030F18);
    internal static Size G2809001F00360C36000A1D(Control G06, string G11091918, Font G03030F18, ContentAlignment G0400080B1B, bool G301F042F1A291903111B0B270039101C153A040020041C220B05);
    internal static StringFormat G261E040D01213A16171B072C23020709001C(ContentAlignment G0400080B1B);
    internal static StringFormat G261E040D01213A16171B072C23020709001C(ContentAlignment G11091918342800050B, RightToLeft G370506040110062E00141D, bool G16040E1B3028050B15010038, bool G101F04211B21040D0B1B0A, bool G1203130822251B12);
    internal static TextFormatFlags G261E040D01213D071D062F24170014102704000937(ContentAlignment G11091918342800050B, RightToLeft G170506040110062E00141D, bool G16040E1B3028050B15010038, bool G101F04211B21040D0B1B0A, bool G1203130822251B12);
    internal static TextFormatFlags G31091918332B1B0F04062F27040A06220E1A20022D060026000C11352F28(ContentAlignment G0400080B1B);
    internal static StringAlignment G311E00020628081600330522020318010F1C(ContentAlignment G0400080B1B);
    internal static TextFormatFlags G311E00020628081600330522020318010F1C270136262A02(ContentAlignment G0400080B1B);
    internal static StringAlignment G311E000206280816003E0025002C190D06060C0B2A15(ContentAlignment G0400080B1B);
    internal static TextFormatFlags G311E000206280816003E0025002C190D06060C0B2A1528241725213B(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static HorizontalAlignment G311E00020628081600(ContentAlignment G0400080B1B);
    public static Size G3619032D192D0E0C00163B2E02041A0A(Size G0619131E102A1D310C080C, Size G06030F18102A1D310C080C, TextImageRelation G17090D0D012D060C);
    public static Size G3619032D192D0E0C00163B2E02041A0A2207130B(Size G0619131E102A1D310C080C, Size G06030F18102A1D310C080C, bool G130913181C27080E);
    public static bool G2C1F370907300001041E3B2E090C010D0E06(TextImageRelation G17090D0D012D060C);
    public static bool G2C1F2903072D130D0B0608273708190515010E00(TextImageRelation G17090D0D012D060C);
    private static AnchorStyles G22091523053406110C060C0A0B0E1D0B13(AnchorStyles G040202041A36);
    public static TextImageRelation G22091523053406110C060C1F0015012D0C09060B1604022A110B0A1C(TextImageRelation G17090D0D012D060C);
    [ExtensionAttribute]
internal static RectangleF G3609153B1C201D0A(RectangleF G17090218, float G120505181D);
    [ExtensionAttribute]
internal static RectangleF G36091524102D0E0A11(RectangleF G17090218, float G0D09080B1D30);
    [ExtensionAttribute]
internal static RectangleF G36091534(RectangleF G17090218, float G1D);
    [ExtensionAttribute]
internal static RectangleF G36091535(RectangleF G17090218, float G1C);
    [ExtensionAttribute]
internal static RectangleF G360915201A2708160C1D07(RectangleF G17090218, float G1D, float G1C);
    [ExtensionAttribute]
internal static RectangleF G360915201A2708160C1D07(RectangleF G17090218, PointF G0903020D012D060C);
    [ExtensionAttribute]
internal static RectangleF G360915201A2708160C1D070E081D011D(RectangleF G17090218);
    [ExtensionAttribute]
internal static RectangleF G3609153F1C3E0C(RectangleF G17090218, float G120505181D, float G0D09080B1D30);
    [ExtensionAttribute]
internal static RectangleF G3609153F1C3E0C(RectangleF G17090218, SizeF G16051B09);
    [ExtensionAttribute]
internal static RectangleF G3609152313221A0711(RectangleF G17090218, float G1D, float G1C);
    [ExtensionAttribute]
internal static RectangleF G3609152313221A0711(RectangleF G17090218, PointF G1503080201);
    [ExtensionAttribute]
internal static RectangleF G3609152313221A07112A(RectangleF G17090218, float G1D);
    [ExtensionAttribute]
internal static RectangleF G3609152313221A07112B(RectangleF G17090218, float G1C);
    [ExtensionAttribute]
internal static RectangleF G2C02070014300C(RectangleF G17090218, float G09090718, float G110311, float G1705060401, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G2C02070014300C(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2C02070014300C(RectangleF G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2D0313251B2205031117(RectangleF G17090218, float G09090718, float G1705060401);
    [ExtensionAttribute]
internal static RectangleF G2D0313251B2205031117(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G330913251B2205031117(RectangleF G17090218, float G110311, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G330913251B2205031117(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C(RectangleF G17090218, float G09090718, float G110311, float G1705060401, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C(RectangleF G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2D031328102205031117(RectangleF G17090218, float G09090718, float G1705060401);
    [ExtensionAttribute]
internal static RectangleF G2D031328102205031117(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G33091328102205031117(RectangleF G17090218, float G110311, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G33091328102205031117(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static float G280505081921(RectangleF G17090218, float G0D09080B1D30);
    [ExtensionAttribute]
internal static float G26090F181036(RectangleF G17090218, float G120505181D);
    [ExtensionAttribute]
internal static float G3705060401(RectangleF G17090218, float G120505181D);
    [ExtensionAttribute]
internal static float G270315181A29(RectangleF G17090218, float G0D09080B1D30);
    [ExtensionAttribute]
internal static PointF G2805050819212A070B060C39(RectangleF G17090218, float G120505181D, float G0D09080B1D30);
    [ExtensionAttribute]
internal static RectangleF G26030F18102A1D23091B0E25(RectangleF G17090218, SizeF G16051B09, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static RectangleF G26030F18102A1D23091B0E25(RectangleF G17090218, float G120505181D, float G0D09080B1D30, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static Rectangle G3609153B1C201D0A(Rectangle G17090218, int G120505181D);
    [ExtensionAttribute]
internal static Rectangle G36091524102D0E0A11(Rectangle G17090218, int G0D09080B1D30);
    [ExtensionAttribute]
internal static Rectangle G36091534(Rectangle G17090218, int G1D);
    [ExtensionAttribute]
internal static Rectangle G36091535(Rectangle G17090218, int G1C);
    [ExtensionAttribute]
internal static Rectangle G360915201A2708160C1D07(Rectangle G17090218, int G1D, int G1C);
    [ExtensionAttribute]
internal static Rectangle G360915201A2708160C1D07(Rectangle G17090218, Point G0903020D012D060C);
    [ExtensionAttribute]
internal static Rectangle G360915201A2708160C1D070E081D011D(Rectangle G17090218);
    [ExtensionAttribute]
internal static Rectangle G3609153F1C3E0C(Rectangle G17090218, int G120505181D, int G0D09080B1D30);
    [ExtensionAttribute]
internal static Rectangle G3609153F1C3E0C(Rectangle G17090218, Size G16051B09);
    [ExtensionAttribute]
internal static Rectangle G3609152313221A0711(Rectangle G17090218, int G1D, int G1C);
    [ExtensionAttribute]
internal static Rectangle G3609152313221A0711(Rectangle G17090218, Point G1503080201);
    [ExtensionAttribute]
internal static Rectangle G3609152313221A07112A(Rectangle G17090218, int G1D);
    [ExtensionAttribute]
internal static Rectangle G3609152313221A07112B(Rectangle G17090218, int G1C);
    [ExtensionAttribute]
internal static Rectangle G2C02070014300C(Rectangle G17090218, int G09090718, int G110311, int G1705060401, int G070315181A29);
    [ExtensionAttribute]
internal static Rectangle G2C02070014300C(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2C02070014300C(Rectangle G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2D0313251B2205031117(Rectangle G17090218, int G09090718, int G1705060401);
    [ExtensionAttribute]
internal static Rectangle G2D0313251B2205031117(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G330913251B2205031117(Rectangle G17090218, int G110311, int G070315181A29);
    [ExtensionAttribute]
internal static Rectangle G330913251B2205031117(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2109070014300C(Rectangle G17090218, int G09090718, int G110311, int G1705060401, int G070315181A29);
    [ExtensionAttribute]
internal static Rectangle G2109070014300C(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2109070014300C(Rectangle G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static Rectangle G2D031328102205031117(Rectangle G17090218, int G09090718, int G1705060401);
    [ExtensionAttribute]
internal static Rectangle G2D031328102205031117(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static Rectangle G33091328102205031117(Rectangle G17090218, int G110311, int G070315181A29);
    [ExtensionAttribute]
internal static Rectangle G33091328102205031117(Rectangle G17090218, int G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C24(RectangleF G17090218, float G09090718, float G110311, float G1705060401, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C24(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2109070014300C24(RectangleF G17090218, Padding G130D0D);
    [ExtensionAttribute]
internal static RectangleF G2D0313281022050311172F(RectangleF G17090218, float G09090718, float G1705060401);
    [ExtensionAttribute]
internal static RectangleF G2D0313281022050311172F(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static RectangleF G330913281022050311172F(RectangleF G17090218, float G110311, float G070315181A29);
    [ExtensionAttribute]
internal static RectangleF G330913281022050311172F(RectangleF G17090218, float G130D0D);
    [ExtensionAttribute]
internal static int G280505081921(Rectangle G17090218, int G0D09080B1D30);
    [ExtensionAttribute]
internal static int G26090F181036(Rectangle G17090218, int G120505181D);
    [ExtensionAttribute]
internal static int G3705060401(Rectangle G17090218, int G120505181D);
    [ExtensionAttribute]
internal static int G270315181A29(Rectangle G17090218, int G0D09080B1D30);
    [ExtensionAttribute]
internal static Point G2805050819212A070B060C39(Rectangle G17090218, int G120505181D, int G0D09080B1D30);
    [ExtensionAttribute]
internal static Rectangle G26030F18102A1D23091B0E25(Rectangle G17090218, Size G16051B09, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static Rectangle G26030F18102A1D23091B0E25(Rectangle G17090218, int G120505181D, int G0D09080B1D30, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static RectangleF G26030F18102A1D23091B0E2523(RectangleF G17090218, SizeF G16051B09, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static RectangleF G26030F18102A1D23091B0E2523(RectangleF G17090218, float G120505181D, float G0D09080B1D30, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F22091B300C10241E002C0B(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F2D091330280E0C1507(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F3305122C1D23091B0E25(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F35030505050B021C(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F23030130060F241E002C0B(ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static bool G2C1F2C0511200507241E002C0B(ContentAlignment G0400080B1B);
    internal static G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B37111B071247350B2115270A2906092D0D2A0A1915 G310919183C29080500200C2704191C0B0F2400172B141A(Rectangle G06030F18142D070717200C2811, Size G11091918262D1307, Size G0C01000B1017001800, int G161C000F10, TextImageRelation G17090D0D012D060C, ContentAlignment G0400080B1B);
    [ExtensionAttribute]
internal static Rectangle G21030207(Size G16051B09, Rectangle G06030F18142D070717200C2811, DockStyle G010302072630100E00);
    [ExtensionAttribute]
internal static TextImageRelation G37180D380725071109131D2E31080D102805000921330B2704160C1D05(TextImageRelation G110919183C29080500200C2704191C0B0F, RightToLeft G170506040110062E00141D);
    [ExtensionAttribute]
internal static ContentAlignment G37180D380725071109131D2E26021B10040615(ContentAlignment G0400080B1B, RightToLeft G170506040110062E00141D);
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B01020F0F27012B0C : G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B01020F0F27012B0C2C063B04 {
    private IContainer G06030C1C1A2A0C0C1101;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B2527071F15070F G1709101910371D2010061D240B;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25311713152A0E16 G090502091B370C2708130027;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B253513050404 G1502290914200C10;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25311713152A0E16 G090502091B370C29000B;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25291B080406120B0F080B10 G090502091B370C340C171E7A;
    private Panel G15020D2D1630001404060639;
    private Panel G15020D281030080B0901;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B2527071F15070F G0109000F012D1F0311172B3E11191A0A;
    private Label G090E2D051621071100390C32;
    private Label G090E2401142D05;
    private Label G090E250906271B0B150600240B;
    private Label G090E350501280C;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25261E04120903023C231B133C0E02 G06000E1F1426050727071D3F0A03;
    private PictureBox G0C0F0E02;
    private LinkLabel G090732190534061011;
    private LinkLabel G0907311E1C27000C02;
    private LinkLabel G090729031821;
    private Label G090E27031A300C10;
    private Panel G150D0F091977;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25261A0E0203230121 G0607351E1C2505;
    private PictureBox G0619131A10;
    private Timer G11050C090775;
    private Label G090D03091913080B11;
    internal virtual void G2A022D05162107110C1C0E080D0C1B03040C(int G0C08, string G161800180037);
    protected virtual void OnLoad(EventArgs e);
    internal virtual void G2A022D05162107110C1C0E0D0A1F18280E0905();
    private void G301C050D01213F0B0005();
    private void G1709101910371D2010061D240B323608080B0A(object G16090F081036, EventArgs G00);
    private void G0109000F012D1F0311172B3E11191A0A3E2B0D07270A(object G16090F081036, EventArgs G00);
    private void G3709071E103701210A1C1D390A0106();
    private void G06000E1F1426050727071D3F0A032A270D010205(object G16090F081036, EventArgs G00);
    private void G36090D09163039030217(G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B01020F0F27012B0C413729060912 G150D0609);
    private void G0607351E1C25053D261A0C280E08112709090F092105(object G16090F081036, EventArgs G00);
    private void G11050C09077536360C1102(object G16090F081036, EventArgs G00);
    protected virtual void Dispose(bool disposing);
    private void G2C0208181C25050B1F172A24081D1A0A040615();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G59230F201C270C0C161B072C230207092D07000A7A033114513D55(object G16, MouseEventArgs G00);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G59230F201C270C0C161B072C230207092D07000A7A033114513D50(object G16, MouseEventArgs G00);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G59230F201C270C0C161B072C230207092D07000A7A033114513D54(object G16, PaintEventArgs G00);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G59230F201C270C0C161B072C230207092D07000A7A033114513D57(object G16, LinkLabelLinkClickedEventArgs G00);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G59230F201C270C0C161B072C230207092D07000A7A033114513D56(object G16, LinkLabelLinkClickedEventArgs G00);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G59230F201C270C0C161B072C230207092D07000A7A033114513D51(object G16, LinkLabelLinkClickedEventArgs G00);
    [CompilerGeneratedAttribute]
private void G591E041D00211A1627071D3F0A032A270D0102057A033114533D55();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G591E041D00211A1627071D3F0A032A270D0102057A033114533D54(Task G11);
    [CompilerGeneratedAttribute]
private void G5908040D1630001404060C091019010B0F3722022D020575073D3A453451();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G5908040D1630001404060C091019010B0F3722022D020575073D3A453450(Task G11);
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B01020F0F27012B0C2C063B04 : Form {
    [CompilerGeneratedAttribute]
private Color <ThemeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HomeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PricingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosableWait>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<int> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Dictionary`2<string, string>> <GetLicense>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<bool> <IsProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, string> <LicenseActivate>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <LicenseDeactivate>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <LicenseRequestTrial>k__BackingField;
    internal Color G310404011007060E0A00 { get; internal set; }
    internal string G2D030C09203605 { get; internal set; }
    internal string G351E080F1C2A0E37171E { get; internal set; }
    internal string G3619111C1A361D37171E { get; internal set; }
    internal int G26000E1F142605073213003F { get; internal set; }
    internal string G241C113A10361A0B0A1C { get; internal set; }
    internal string G241C112214290C { get; internal set; }
    internal string G241C11380C340C { get; internal set; }
    internal string G290502091B370C3400001A220A03 { get; internal set; }
    internal string G2001000519 { get; internal set; }
    internal string G290502091B370C29000B { get; internal set; }
    internal Func`1<int> G3618001800372A0D0117 { get; internal set; }
    internal Func`1<Dictionary`2<string, string>> G220915201C270C0C1617 { get; internal set; }
    internal Func`1<bool> G2C1F311E1A231B071601 { get; internal set; }
    internal Action`2<string, string> G290502091B370C230606003D041910 { get; internal set; }
    internal Action G290502091B370C2600130A3F0C1B141004 { get; internal set; }
    internal Action`1<string> G290502091B370C3000031C2E1619211608090D { get; internal set; }
    [CompilerGeneratedAttribute]
internal Color get_ThemeColor();
    [CompilerGeneratedAttribute]
internal void set_ThemeColor(Color value);
    [CompilerGeneratedAttribute]
internal string get_HomeUrl();
    [CompilerGeneratedAttribute]
internal void set_HomeUrl(string value);
    [CompilerGeneratedAttribute]
internal string get_PricingUrl();
    [CompilerGeneratedAttribute]
internal void set_PricingUrl(string value);
    [CompilerGeneratedAttribute]
internal string get_SupportUrl();
    [CompilerGeneratedAttribute]
internal void set_SupportUrl(string value);
    [CompilerGeneratedAttribute]
internal int get_ClosableWait();
    [CompilerGeneratedAttribute]
internal void set_ClosableWait(int value);
    [CompilerGeneratedAttribute]
internal string get_AppVersion();
    [CompilerGeneratedAttribute]
internal void set_AppVersion(string value);
    [CompilerGeneratedAttribute]
internal string get_AppName();
    [CompilerGeneratedAttribute]
internal void set_AppName(string value);
    [CompilerGeneratedAttribute]
internal string get_AppType();
    [CompilerGeneratedAttribute]
internal void set_AppType(string value);
    [CompilerGeneratedAttribute]
internal string get_LicenseVersion();
    [CompilerGeneratedAttribute]
internal void set_LicenseVersion(string value);
    [CompilerGeneratedAttribute]
internal string get_Email();
    [CompilerGeneratedAttribute]
internal void set_Email(string value);
    [CompilerGeneratedAttribute]
internal string get_LicenseKey();
    [CompilerGeneratedAttribute]
internal void set_LicenseKey(string value);
    [CompilerGeneratedAttribute]
internal Func`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
internal void set_StatusCode(Func`1<int> value);
    [CompilerGeneratedAttribute]
internal Func`1<Dictionary`2<string, string>> get_GetLicense();
    [CompilerGeneratedAttribute]
internal void set_GetLicense(Func`1<Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
internal Func`1<bool> get_IsProgress();
    [CompilerGeneratedAttribute]
internal void set_IsProgress(Func`1<bool> value);
    [CompilerGeneratedAttribute]
internal Action`2<string, string> get_LicenseActivate();
    [CompilerGeneratedAttribute]
internal void set_LicenseActivate(Action`2<string, string> value);
    [CompilerGeneratedAttribute]
internal Action get_LicenseDeactivate();
    [CompilerGeneratedAttribute]
internal void set_LicenseDeactivate(Action value);
    [CompilerGeneratedAttribute]
internal Action`1<string> get_LicenseRequestTrial();
    [CompilerGeneratedAttribute]
internal void set_LicenseRequestTrial(Action`1<string> value);
    internal virtual void G2A022D05162107110C1C0E080D0C1B03040C(int G0C08, string G161800180037);
    internal virtual void G2A022D05162107110C1C0E0D0A1F18280E0905();
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E291C151E0B041F122D1218 : object {
    public static void G36090F08252B1A16(string G101E0D, Dictionary`2<string, string> G1419041E1C211A, Action`2<string, string> G1709121C1A2A1A07);
    private static void G36090F08252B1A16270B213F111D2201033A041F31041D3F(string G101E0D, Dictionary`2<string, string> G1419041E1C211A, Action`2<string, string> G1709121C1A2A1A07);
    private static void G36090F08252B1A16270B3E2E072F070B161B041C(string G101E0D, Dictionary`2<string, string> G1419041E1C211A, Action`2<string, string> G1709121C1A2A1A07);
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E37090D073D001A083A : object {
    private string G090502091B370C3400001A220A03;
    private string G0109170516212006;
    private string G080D02041C2A0C2C041F0C;
    private string G161800180037;
    private string G151E0E0800271D2C041F0C;
    private int G151E0E0800271D361C020C0201;
    private string G151E0E0800271D3400001A220A03;
    private string G041C08390728;
    private string G041C085E203605;
    private G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812 G090502091B370C;
    private bool G0C1F370D192D0D03111B072C;
    private int G130D0D0511251D0B0A1C242A1D0418110C;
    private int G130D0D0511251D0B0A1C2A24100301;
    private int G0A0A07001C2A0C34041E002F04191C0B0F2B0E1B2A15;
    private int G0A0A07001C2A0C34041E002F04191C0B0F2500162D0C1B26;
    private string G151E0E0800271D361C020C;
    private Color G110404011007060E0A00;
    private string G0D030C09203605;
    private string G151E080F1C2A0E37171E;
    private string G1619111C1A361D37171E;
    [CompilerGeneratedAttribute]
private G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E37090D073D001A083A4E20080F360B1F080212011F070B06212A0B09190113 LicensingChanged;
    private G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B01020F0F27012B0C2C063B04 G03031301;
    public G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E37090D073D001A083A(G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E37090D073D001A083A28020703 info);
    [CompilerGeneratedAttribute]
public void add_LicensingChanged(G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E37090D073D001A083A4E20080F360B1F080212011F070B06212A0B09190113 value);
    [CompilerGeneratedAttribute]
public void remove_LicensingChanged(G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E37090D073D001A083A4E20080F360B1F080212011F070B06212A0B09190113 value);
    public void G2A1C0402392D0A070B010025022B1A160C();
    public void G330D0D0511251D07();
    public void G240F150503251D07(string G0001000519, string G0E0918);
    public void G330D0D0511251D07(string G0001000519, string G0E0918);
    public void G2109000F012D1F031117(string G0001000519, string G0E0918);
    public void G3709101910371D36171B0827(string G0001000519);
    public void G2109000F012D1F031117();
    private void G241C083E10351C071606(string G0C08, string G0001000519, string G0E0918);
    private void G241C083E1037190D0B010C(string G010302, string G1209033F01251D1716);
    private int G2209153F01251D171631062F00(string G161800180037);
    private void G2A1C0402332B1B0F(bool G080D0F191428051B);
    private void G2A022D05162107110C1C0E080D0C1B03040C(int G0C08, string G161800180037);
    private G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812 G290502091B370C2708021D32();
    private G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812 G311E000206280816003E002800030601(string G0F1F0E02);
    private bool G321E081810080001001C1A2E(string G090502, string G0A1811);
    private bool G37090C030321250B0617073800();
    private string G37090008392D0A070B010C();
    private string G2209153E10351C0716062D2A110C(string G0001000519, string G090502091B370C29000B);
    [CompilerGeneratedAttribute]
private void G592311091B080001001C1A220B0A330B13055F0C1B3E5C7E3A52();
    [CompilerGeneratedAttribute]
private void G593A00001C200816004C0B143A5F433B51();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void G593A00001C200816004C0B143A5F433B50(Task G11);
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F38724F222206070B010E37090D073D001A083A28020703 : ValueType {
    public string G151E0E0800271D2C041F0C;
    public string G151E0E0800271D361C020C;
    public string G151E0E0800271D3400001A220A03;
    public int G151E0E0800271D361C020C0201;
    public string G041C08390728;
    public string G041C085E203605;
    public string G0D030C09203605;
    public string G151E080F1C2A0E37171E;
    public string G1619111C1A361D37171E;
    public Color G110404011007060E0A00;
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F38724F232E161104150E123B151C300F09 : object {
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F38724F232E161104150E250100023606 : Form {
    private IContainer G06030C1C1A2A0C0C1101;
    private Label G090D03091975;
    private Label G090D03091976;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B25261E04120903023C231B133C0E02 G06000E1F1426050727071D3F0A03;
    private G22190F0D5B1120504B3E00280003060D0F0F4F382D0419384B2527071F15070F G0A0723190130060C;
    private Panel G150D0F091975;
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    public DialogResult G36040E1B312D080E0A15(Form G150D13091B30, string G060D11181C2B07, string G11091918);
    private void G06000E1F1426050727071D3F0A032A270D010205(object G16090F081036, EventArgs G00);
    private void G0A0723190130060C3A3105220606(object G16090F081036, EventArgs G00);
    protected virtual void Dispose(bool disposing);
    private void G2C0208181C25050B1F172A24081D1A0A040615();
}
[ExtensionAttribute]
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F38724F262E09120000 : object {
    private static string G090D1218212D1D0E00;
    private static IntPtr G090D12183D2507060917;
    public static int G32213E2236082B37312626052122222A;
    public static int G2D383E2F34143D2B2A3C;
    private static string G2109070D00281D260C00272A0808;
    private static string G2109070D00281D29000B392A1105;
    private static string G2109070D00281D260C00392A1105;
    private static string G2E2938;
    private static string G2E29385E;
    private static G22190F0D5B1120504B3E00280003060D0F0F4F38724F262E09120000();
    private static int G2209153B1C2A0D0D12260C3311(IntPtr G0D3B0F08, StringBuilder G11091918, int G0603140201);
    private static IntPtr G2209153B1C2A0D0D12260139000C11341307020B3712272F(IntPtr G0D3B0F08, UInt32& G351E0E0F10371A2B01);
    private static IntPtr G2209152A1A360C05171D1C25013A1C0A050716();
    public static bool G2C1F37050631080E36061C2F0C02220D0F0C0E1905021A221307();
    public static long G211B0C3F10303E0B0B16063C24190116080A141A21(IntPtr G0D1B0F08, G22190F0D5B1120504B3E00280003060D0F0F4F38724F262E0912000044253F2C39102F2A281F2038353E1A27393529 G0418151E1C261C1600, G22190F0D5B1120504B3E00280003060D0F0F4F38724F262E0912000044253F2C310E2820230736332223012B29333325162C2420202C052628& G151A20180136000010060C, UInt32 G060E20180136000010060C);
    public static int G36090F0838211A1104150C(IntPtr G0D3B0F08, int G281F06, int G123C001E1429, int G093C001E1429);
    public static bool G37090D0914370C2104021D3E1708();
    public static bool G2402080114300C350C1C0D2412(IntPtr G0D1B0F08, int G011B35051821, int G011B270014231A);
    public static void G3609152D1B2D040311173E220B091A13(IntPtr G0D0D0F081921, int G0C0215090732080E);
    public static void G3609152A1A36042F0A040C(IntPtr G0D0D0F081921);
    public static void G3609152A1A3604300A07072F(IntPtr G0D0D0F081921);
    [ExtensionAttribute]
public static bool G2C1F2401142D05(string G0001000519);
    [ExtensionAttribute]
public static G22190F0D5B1120504B3E00280003060D0F0F4F24370E00652F110A1C240302040D2D330B0427130812 G31032B1F1A2A26000F170A3F(string G0F1F0E02);
    [ExtensionAttribute]
public static string G22091526062B073111000025023B1408140D(string G0F1F0E02, string G0E0918);
    public static string G280D02041C2A0C2C041F0C();
    public static string G2209152810320001003B0D();
    internal static string G241C08281027060600(string G161813);
    internal static string G290502091B370C5021170A240108(string G090502, string G0A1811);
    internal static string G241C08291B27060600(string G161813);
    private static void G261E040D01212D0B17(string G03030D08103627030817);
    public static bool G321E081810(string G03030D08103627030817, string G03050D093B250407, string G1309131F1C2B07, string G130D0D1910);
    public static string G37090008(string G03030D08103627030817, string G03050D093B250407, string G1309131F1C2B07);
}
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F3B300802383D : object {
    internal static bool G2C1F370D192D0D0311170D;
    internal static void G2A1C0402();
    internal static void G330D0D0511251D07(IComponent G0C021218142A0A07);
}
[ExtensionAttribute]
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B21170B1B1507061C3811061E : object {
    private static Random G170D0F081A29;
    private static G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B21170B1B1507061C3811061E();
    [ExtensionAttribute]
internal static string G370D0F081A293A16171B072C(int G09090F0B012C);
    [ExtensionAttribute]
internal static string G3103230D06215F56(string G010D150D);
    [ExtensionAttribute]
internal static string G231E0E0137251A075346(string G010D150D);
    [ExtensionAttribute]
public static string G31032C0840(string G161813381A0C08110D);
    [ExtensionAttribute]
public static string G2109021E0C341D(string G010D150D, string G0E0918, int G0E09185E);
    private static object G2109021E0C341D311100002502(string G010D150D, string G0E0918, string G0C02111901, Object[] G0A0E0B);
    [ExtensionAttribute]
public static string G3D2333291B271B1B1506(string G010D150D, string G0E0918);
    [ExtensionAttribute]
public static string G3D23332810271B1B1506(string G010D150D, string G0E0918);
    [ExtensionAttribute]
internal static string G2903020737251A0753462C2506021101(string G150000051B100C1A11);
    [ExtensionAttribute]
internal static string G30020D03162F2B0316175F7F2108160B050D(string G150000051B100C1A11);
}
internal class G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B240A0006251A0E1E0A090F032716 : NativeWindow {
    [CompilerGeneratedAttribute]
private bool <ShowDropShadow>k__BackingField;
    private static int G32213E223614282B2B26;
    private static int G222F2D332610302E20;
    private static int G263F3E28270B39312D332D0432;
    public bool G36040E1B31360612361A082F0A1A { get; public set; }
    public G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B240A0006251A0E1E0A090F032716(Form control);
    public G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B240A0006251A0E1E0A090F032716(IntPtr hWnd);
    [CompilerGeneratedAttribute]
public bool get_ShowDropShadow();
    [CompilerGeneratedAttribute]
public void set_ShowDropShadow(bool value);
    private static IntPtr G261E040D01213B0D101C0D19000E01360606(int G0B20040A01160C0111, int G0B380E1C27210A16, int G0B3E080B1D303B070606, int G0B2E0E18012B043000111D, int G0B3B0808012C2C0E091B193800, int G0B240405122C1D27091E003B1608);
    public static int G211B0C290D300C0C01341B2A08083C0A150722022D04003F24100013(IntPtr G0D3B0F08, G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B240A0006251A0E1E0A090F032716432C2D0122252F3F& G1521001E3C2A1A0711);
    public static int G211B0C3F10303E0B0B16063C24190116080A141A21(IntPtr G0D1B0F08, int G0418151E, Int32& G0418151E2325051700, int G0418151E262D1307);
    public static int G211B0C250607060F151D1A2211041A0A2406000C28040A(Int32& G150A24021426050701);
    public static int G2209152F19251A11291D072C(IntPtr G0D3B0F08, int G0B250F08103C);
    public static int G3609152F19251A11291D072C(IntPtr G0D3B0F08, int G0B250F08103C, int G011B2F090208060C02);
    private bool G2604040F1E050C100A37072A07011000();
    protected virtual void WndProc(Message& m);
}
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B26000402020D28003F0E : object {
    private static Nullable`1<bool> G0C1F36051B200615164358;
    private static string G3A0505;
    public static bool G2C1F36051B200615164358 { get; }
    public static string G2C08 { get; }
    public static string G2B0D0C09 { get; }
    public static string G210D1509212D04072B1D1E { get; }
    public static string G2903020D190008160026002600231A13 { get; }
    public static string G301F041E1B250407 { get; }
    private static G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B26000402020D28003F0E();
    public static bool get_IsWindows11();
    public static string get_Id();
    public static string get_Name();
    public static string get_DateTimeNow();
    public static string get_LocalDateTimeNow();
    private static string G22091525112107160C14002E17(string G153B0C053628081116, string G151E0E1C10361D0B0001);
    private static string G2209152F05312006();
    private static string G2209152E1C2B1A2B01();
    private static string G22091521142D07000A131B2F2C09();
    private static string G2209152B05312006();
    public static string get_Username();
}
[ExtensionAttribute]
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B271D060E0F1B08013712 : object {
    [ExtensionAttribute]
public static T G231E0E013F37060C(string G0F1F0E02);
    [ExtensionAttribute]
public static string G31032B1F1A2A(object G0A0E0B);
}
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B2C00061C0E1A0A : object {
    public static bool G2C1F201A142D0503071E0C { get; }
    private static bool G2C021509072A0C1622171D080A031B01021C040A17150F3F00(Int32& G2109120F072D19160C1D07, int G3709120907320C063313053E00);
    public static bool get_IsAvailable();
}
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B2E0C110E0F1B0428300D0B : object {
    public static void G321E081810(string G150D1504, string G0B0D0C09, string G130D0D1910);
    public static string G37090008(string G150D1504, string G0B0D0C09);
    public static void G261E040D01212D0B17(string G150D1504);
    public static void G261E040D01212D0B17(string G0109070D00281D32040601, string G0105132214290C);
}
internal static class G22190F0D5B1120504B3E00280003060D0F0F4F3B300802384B30001502121C1317 : object {
    public static void G3609153A14281C07(string G0E09183C143001, string G0B0D0C09, string G130D0D1910);
    public static string G2209153A14281C07(string G0E09183C143001, string G0B0D0C09);
    public static void G21090D0901213F0309070C(string G0E09183C143001, string G0B0D0C09);
    public static void G21090D0901213A1707390C32(string G0E09183C143001, string G0B0D0C09);
}
internal static class G2D180C002721070600000C394B3D1416120D4F3C21060B33350317010E1320040229041C : object {
    public static string G261F122F1A2904070B061A;
    public static string G261F122110200003310B192E16;
    public static string G261F122E192B0A0916;
    public static string G261F122200290B0717;
    public static string G261F123C10360A070B06082C00;
    public static string G261F1220102A0E160D;
    public static string G261F122F1A28061016;
    public static string G261F12201C2A0C2A001B0E2311;
    public static string G261F122E1A360D0717211D320908;
    public static string G261F122E1A360D071725002F1105;
    public static string G261F122A1A2A1D24041F00271C;
    public static string G261F122A1A2A1D31110B052E;
    public static string G261F122A1A2A1D340400002A0B19;
    public static string G261F122A1A2A1D35001B0E2311;
    public static string G261F122A1A2A1D310C080C;
    public static string G261F122A1A2A1D310C080C0A0B09390D0F0D290B2D06063F;
    public static string G2D180C0021250E;
    public static string G2D010D38142328161100002910191017;
    private static Dictionary`2<string, Regex> G3A1E040B103C0C11;
    private static G2D180C002721070600000C394B3D1416120D4F3C21060B33350317010E1320040229041C();
    public static string G2209152F063728163707052E16(string G16181800103701070006, Int32& G1618001E010D0D1A);
    public static MatchCollection G280D150F1D(string G170906090D, string G1603141E1621);
    public static string G3609001E162C(string G170906090D, string G1603141E1621);
    public static string G3609001E162C(string G170906090D, string G1603141E1621, Int32& G15031205012D060C);
    private static Regex G2209153E10230C1A(string G170906090D);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D171745221B122A3C070F1224151F : object {
    public static string G2109070D00281D31110B052E3605100115;
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C40110E18023A2303192E3F0A0F0A : object {
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A0F121F372B11;
    private CssBlock G3A0F121F372806010E;
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G261F122E1A3C { get; }
    public CssBlock G261F122E192B0A09 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C40110E18023A2303192E3F0A0F0A(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 cssBox, CssBlock cssBlock);
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 get_CssBox();
    public CssBlock get_CssBlock();
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B : object {
    private string G3A02000110;
    private bool G3A05123F1C2A0E0E00;
    private Dictionary`2<string, string> G3A0D1518072D0B1711171A;
    public string G2B0D0C09 { get; }
    public Dictionary`2<string, string> G2418151E1C261C160001 { get; }
    public bool G2C1F32051B230507 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B(string name, bool isSingle, Dictionary`2<string, string> attributes);
    public string get_Name();
    public Dictionary`2<string, string> get_Attributes();
    public bool get_IsSingle();
    public bool G2D0D122D01301B0B07071D2E16();
    public bool G2D0D122D01301B0B07071D2E(string G0418151E1C261C1600);
    public string G311E182B1030281611000029101910(string G0418151E1C261C1600, string G0109070D00281D34041E1C2E);
    public virtual string ToString();
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 : G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 {
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A1C001E102A1D200A0A;
    protected HtmlContainerInt G3A0415011907060C11130025001F;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B G3A04150119300805;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218> G3A0E0E14222B1B0616;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G3A0E0E141037;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B> G3A0008021006061A0001;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B> G3A1C001E102A1D2E0C1C0C090A151017;
    private Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B, RRect> G3A1E040F0125070509171A;
    private G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F3D122A321813053D02 G3A18041401;
    internal bool G3A18000E19212F0B1D170D;
    protected bool G3A1B0E1E11373A0B1F17242E041E0016040C;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A00081F010D1D0708300633;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G3A0A081E0630210D1606002502211C0A042A0E16;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G3A00001F010C0611111B072C29041B01230719;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B G3A050C0D1221250D0416212A0B09190113;
    public HtmlContainerInt G2D180C00362B0716041B072E17 { get; public set; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G350D13091B302B0D1D { get; public set; }
    public List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G2703190906 { get; }
    public bool G2C1F231E30280C0F001C1D { get; }
    public bool G2C1F2802192D0707 { get; }
    public bool G2C1F23001A2702 { get; }
    public bool IsClickable { get; }
    public bool IsFixed { get; }
    public string HrefLink { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G26030F18142D070B0B152B270A0E1E { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B G2D180C0021250E { get; }
    public bool G2C1F280114230C { get; }
    public bool G2C1F321C14270C2D1737043B1114 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F3D122A321813053D02 G31091918 { get; public set; }
    internal List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B> G29050F09372B110716 { get; }
    internal List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B> G350D13091B30250B0B172B241D0806 { get; }
    internal Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B, RRect> G37090218142A0E0E0001 { get; }
    internal List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218> G3203130806 { get; }
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G2305131F0113061001 { get; }
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G2305131F010C0611111B072C29041B01230719 { get; internal set; }
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G290D12183D2B1A160C1C0E070C0310260E10 { get; internal set; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 parentBox, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B tag);
    public HtmlContainerInt get_HtmlContainer();
    public void set_HtmlContainer(HtmlContainerInt value);
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 get_ParentBox();
    public void set_ParentBox(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 value);
    public List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> get_Boxes();
    public bool get_IsBrElement();
    public bool get_IsInline();
    public bool get_IsBlock();
    public virtual bool get_IsClickable();
    public virtual bool get_IsFixed();
    public virtual string get_HrefLink();
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 get_ContainingBlock();
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B get_HtmlTag();
    public bool get_IsImage();
    public bool get_IsSpaceOrEmpty();
    public G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F3D122A321813053D02 get_Text();
    public void set_Text(G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F3D122A321813053D02 value);
    internal List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B> get_LineBoxes();
    internal List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B> get_ParentLineBoxes();
    internal Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B, RRect> get_Rectangles();
    internal List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218> get_Words();
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 get_FirstWord();
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B get_FirstHostingLineBox();
    internal void set_FirstHostingLineBox(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B value);
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B get_LastHostingLineBox();
    internal void set_LastHostingLineBox(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B value);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G261E040D01212B0D1D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B G110D06, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G150D13091B30);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G261E040D01212B0D1D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G150D13091B30, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B G110D06, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070907030721);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G261E040D01212B0E0A1102();
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G261E040D01212B0E0A1102(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G150D13091B30, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B G110D06, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070907030721);
    public void G3509130A1A36042E040B063E11(RGraphics G02);
    public void G350D080201(RGraphics G02);
    public void G3609152E1022061000300633(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070907030721);
    public void G3609152D19282B0D1D171A(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G031E0E01372B11);
    public void G350D131F101006350A000D38();
    public virtual void Dispose();
    protected virtual void PerformLayoutImp(RGraphics g);
    internal virtual void G2809001F00360C350A000D3836040F01(RGraphics G02);
    protected sealed virtual G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 GetParent();
    private int G220915251B200C1A231D1B070C1E01();
    private void G261E040D0121250B1606203F0000370B19(RGraphics G02);
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G2305131F01130610013D0A280A1807010F0B04(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09);
    internal string G2209152D01301B0B07071D2E(string G0418151E1C261C1600);
    internal string G2209152D01301B0B07071D2E(string G0418151E1C261C1600, string G0109070D00281D34041E1C2E);
    internal double G220915211C2A000F101F3E2201191D();
    private static void G220915211C2A000F101F3E2201191D3B2D070F0921121A1C0A1001(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, Double& G080D193B1C201D0A, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218& G080D193B1C201D0A321D1B2F);
    private static double G2209153B1C201D0A28131B2C0C0331010418(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    internal double G22091521143C000F101F2B2411191A09(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G1618001E0106061A, double G0619131E102A1D2F040A2B2411191A09);
    internal void G220915211C2A24031D25002F1105(Double& G08050F3B1C201D0A, Double& G080D193B1C201D0A);
    private static void G220915211C2A24031D211C263202070012(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, Double& G08050F, Double& G080D193F0029, Double& G150D05081C2A0E31101F, Double& G080D130B1C2A3A1708);
    internal bool G2D0D122600371D2B0B1E0025003E1C060D010F0937();
    internal void G2C020909072D1D31110B052E(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, bool G001A041E0C30010B0B15);
    protected double G280D130B1C2A3D0D15310627090C051704(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 G151E041A262D0B0E0C1C0E);
    public bool G271E040D1E14080500();
    private double G260D0D0F0028081600330A3F100C1936080F091A();
    private double G280D130B1C2A2B0D11060626260219080018120B();
    internal void G2A0A071F10303D0D15(double G04010E191B30);
    protected virtual void PaintImp(RGraphics g);
    private bool G2C1F330916303F0B161B0B2700(RRect G17090218, RRect G0600081C);
    protected void G350D0802010608010E151B24100311(RGraphics G02, RRect G17090218, bool G0C1F270507371D, bool G0C1F2D0D0630);
    private void G350D0802011306100101(RGraphics G02, RPoint G0A0A071F1030);
    protected void G350D080201000C010A00083F0C021B(RGraphics G02, RRect G17090218142A0E0E00, bool G0C1F270507371D, bool G0C1F2D0D0630);
    internal void G2A0A071F10303B0706060825020110(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09372B11, double G020D11);
    internal void G37090218142A0E0E00013B2E160801();
    private void G2A02280114230C2E0A130D080A000508041C04(RImage G0C01000B10, RRect G17090218142A0E0E00, bool G041F180216);
    protected RColor G2209153F10280C01111B062523020701231A141D2C();
    protected RBrush G2209153F10280C01111B0625270C160F231A141D2C(RGraphics G02, bool G0303130F100505120D13);
    protected virtual RFont GetCachedFont(string fontFamily, double fsize, RFontStyle st);
    protected virtual RColor GetActualColor(string colorStr);
    protected virtual RPoint GetActualLocation(string X, string Y);
    public virtual string ToString();
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527192413 : G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 {
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527192413(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 parent, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B tag);
    protected virtual void PerformLayoutImp(RGraphics g);
    protected virtual void PaintImp(RGraphics g);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719250C0D3400 : G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 {
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D02182801320209 G3A050C0D12213E0D1716;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B G3A050C0D1221250D0416212A0B09190113;
    private bool G3A050C0D1221250D04160025022E1A091104041A21;
    public RImage G2C01000B10 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719250C0D3400(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 parent, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B tag);
    public RImage get_Image();
    protected virtual void PaintImp(RGraphics g);
    internal virtual void G2809001F00360C350A000D3836040F01(RGraphics G02);
    public virtual void Dispose();
    private void G3609152907360610271D1B2F001F();
    private void G2A022D031420200F04150C080A000508041C04(RImage G0C01000B10, RRect G17090218142A0E0E00, bool G041F180216);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527192A130D3E00 : G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 {
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D02182801320209 G3A050C0D12213E0D1716;
    private bool G3A05123A1C200C0D;
    private string G3A1A0808102B3D0B111E0C;
    private string G3A1A0808102B200F04150C1E1701;
    private string G3A1A0808102B250B0B193C3909;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B G3A050C0D1221250D0416212A0B09190113;
    private bool G3A050C0D1221250D04160025022E1A091104041A21;
    public bool IsClickable { get; }
    public string HrefLink { get; }
    public bool G2C1F3705112106 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527192A130D3E00(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 parent, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B tag);
    public virtual bool get_IsClickable();
    public virtual string get_HrefLink();
    public bool get_IsVideo();
    public virtual void Dispose();
    private void G290300082C2B1C1610100C0F0419142512110F0D(Uri G101E08);
    private void G2A022503022A050D041630241019000604291107070E033B090711170F(object G16090F081036, DownloadStringCompletedEventArgs G00);
    private void G29030008232D04070A36083F042C061D0F0B(Uri G101E08);
    private void G2A022503022A050D04163F2208081A25110122012911022E110701(object G16090F081036, DownloadStringCompletedEventArgs G00);
    private void G2D0D0F0819212D0311132524040933050804141C21(Exception G0014, string G1603141E1621);
    private void G2D0D0F081921390D1606283B0C2E14080D(object G16090F081036);
    protected virtual void PaintImp(RGraphics g);
    private void G211E001B3C29080500(RGraphics G02, RPoint G0A0A071F1030, RRect G17090218);
    private void G211E001B212D1D0E00(RGraphics G02, RRect G17090218);
    private void G211E001B2528081B(RGraphics G02, RRect G17090218);
    internal virtual void G2809001F00360C350A000D3836040F01(RGraphics G02);
    private void G3609152907360610271D1B2F001F();
    private void G2A022D031420200F04150C080A000508041C04(RImage G0C01000B10, RRect G17090218142A0E0E00, bool G041F180216);
    private bool G2C1F2D0D0C2B1C163717183E0C1F1000();
}
internal abstract class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 : object {
    private string G3A0E000F1E231B0D101C0D080A011A16;
    private string G3A0E000F1E231B0D101C0D0C170C110D040615;
    private string G3A0E000F1E231B0D101C0D0C170C110D0406152F2A06022E;
    private string G3A0E000F1E231B0D101C0D02080C1201;
    private string G3A0E000F1E231B0D101C0D1B0A1E1C1008070F;
    private string G3A0E000F1E231B0D101C0D19001D100515;
    private string G3A0E0E1E11211B360A023E2201191D;
    private string G3A0E0E1E11211B300C15013F3204111009;
    private string G3A0E0E1E11211B200A061D24083A1C001500;
    private string G3A0E0E1E11211B2E00141D1C0C09010C;
    private string G3A0E0E1E11211B360A022A24090207;
    private string G3A0E0E1E11211B300C15013F2602190B13;
    private string G3A0E0E1E11211B200A061D24082E1A080E1A;
    private string G3A0E0E1E11211B2E00141D080A011A16;
    private string G3A0E0E1E11211B360A023A3F1C0110;
    private string G3A0E0E1E11211B300C15013F36190C0804;
    private string G3A0E0E1E11211B200A061D24083E011D0D0D;
    private string G3A0E0E1E11211B2E00141D1811141901;
    private string G3A0E0E1E11211B3115130A220B0A;
    private string G3A0E0E1E11211B210A1E052A151E10;
    private string G3A0E0E18012B04;
    private string G3A0F0E001A36;
    private string G3A0F0E0201210716;
    private string G3A0F0E1E1B211B2C1230063901080736000C081B37;
    private string G3A0F0E1E1B211B2C0030063901080736000C081B37;
    private string G3A0F0E1E1B211B310030063901080736000C081B37;
    private string G3A0F0E1E1B211B311230063901080736000C081B37;
    private string G3A0F0E1E1B211B200A000D2E173F1400081D12;
    private string G3A090C1C013D2A07091E1A;
    private string G3A08081E10271D0B0A1C;
    private string G3A08081F0528081B;
    private string G3A0A0E020102080F0C1E10;
    private string G3A0A0E020117001800;
    private string G3A0A0E0201171D1B0917;
    private string G3A0A0E02011208100C13073F;
    private string G3A0A0E0201130C0B021A1D;
    private string G3A0A0D031430;
    private string G3A040405122C1D;
    private string G3A01001E122D07200A061D2408;
    private string G3A01001E122D072E00141D;
    private string G3A01001E122D07300C15013F;
    private string G3A01001E122D07360A02;
    private string G3A00040A01;
    private string G3A000802100C0C0B021A1D;
    private string G3A00081F01171D1B09173D321508;
    private string G3A00081F01171D1B09172026040A10;
    private string G3A00081F01171D1B091739241604010D0E06;
    private string G3A00081F01171D1B0917;
    private string G3A0317090722050D12;
    private string G3A1C0008112D070529170F3F;
    private string G3A1C0008112D0705271D1D3F0A00;
    private string G3A1C0008112D0705371B0E2311;
    private string G3A1C0008112D0705311D19;
    private string G3A1C000B10061B070419202516041101;
    private string G3A1E080B1D30;
    private string G3A1804140105050B021C;
    private string G3A18041401000C010A00083F0C021B;
    private string G3A180414010D0706001C1D;
    private string G3A180E1C;
    private string G3A1C0E1F1C30000D0B;
    private string G3A1A041E012D0A03093305220203;
    private string G3A1B0808012C;
    private string G3A010014222D0D160D;
    private string G3A1B0E1E11171903061B072C;
    private string G3A1B0E1E11061B070419;
    private string G3A1B090501213A1204110C;
    private string G3A1A081F1C26000E0C0610;
    private RPoint G3A000E0F1430000D0B;
    private RSize G3A1F081610;
    private double G3A0D0218002505210A00072E172302;
    private double G3A0D0218002505210A00072E172310;
    private double G3A0D0218002505210A00072E173E02;
    private double G3A0D0218002505210A00072E173E10;
    private RColor G3A0D0218002505210A1E0639;
    private double G3A0D0218002505200411022C1702000A052F130F20080B2511230B150704;
    private double G3A0D02180025052A001B0E2311;
    private double G3A0D0218002505350C161D23;
    private double G3A0D02180025053204160D220B0A210B11;
    private double G3A0D02180025053204160D220B0A370B151C0E03;
    private double G3A0D02180025053204160D220B0A270D060015;
    private double G3A0D02180025053204160D220B0A3901071C;
    private double G3A0D02180025052F04000E220B391A14;
    private double G3A0F0E00192519110016242A170A1C0A350711;
    private double G3A0D02180025052F04000E220B2F1A1015070C;
    private double G3A0D02180025052F04000E220B3F1C03091C;
    private double G3A0D02180025052F04000E220B21100215;
    private double G3A0D0218002505200A000D2E17391A143601051A2C;
    private double G3A0D0218002505200A000D2E17211002153F080A3009;
    private double G3A0D0218002505200A000D2E172F1A1015070C392D051A23;
    private double G3A0D0218002505200A000D2E173F1C03091C3607201506;
    private double G3A0D02180025052E0C1C0C030004120C15;
    private double G3A0D0218002505350A000D18150C160D0F0F;
    private double G3A0D021800250536000A1D020B09100A15;
    private double G3A0D0218002505200A000D2E173E050502010F090C0E1C221F0D0B060A0D;
    private double G3A0D0218002505200A000D2E173E050502010F0912041C3F0C01041E;
    private RColor G3A0D0218002505200411022C1702000A052F130F20080B2511;
    private RColor G3A0D0218002505200A000D2E17391A1422070D0136;
    private RColor G3A0D0218002505200A000D2E17211002152B0E022B13;
    private RColor G3A0D0218002505200A000D2E172F1A1015070C2D2B0D0139;
    private RColor G3A0D0218002505200A000D2E173F1C03091C2201280E1C;
    private RColor G3A0D0218002505200411022C1702000A052B0E022B13;
    private RFont G3A0D0218002505240A1C1D;
    public string G2703130810362B0D110606263204111009 { get; public set; }
    public string G270313081036250703063E2201191D { get; public set; }
    public string G2703130810363B0B021A1D1C0C09010C { get; public set; }
    public string G2703130810363D0D1525002F1105 { get; public set; }
    public string G2703130810362B0D1106062636190C0804 { get; public set; }
    public string G270313081036250703063A3F1C0110 { get; public set; }
    public string G2703130810363B0B021A1D1811141901 { get; public set; }
    public string G2703130810363D0D15211D320908 { get; public set; }
    public string G2703130810362B0D110606262602190B13 { get; public set; }
    public string G270313081036250703062A24090207 { get; public set; }
    public string G2703130810363B0B021A1D080A011A16 { get; public set; }
    public string G2703130810363D0D153106270A1F { get; public set; }
    public string G2703130810363A120411002502 { get; public set; }
    public string G2703130810362A0D091E083B1608 { get; public set; }
    public string G2603130210362B0D17160C39370C110D141B { get; public set; }
    public string G2603130210362715271D1B2F001F27050501141D { get; public set; }
    public string G2603130210362707271D1B2F001F27050501141D { get; public set; }
    public string G2603130210363A07271D1B2F001F27050501141D { get; public set; }
    public string G2603130210363A15271D1B2F001F27050501141D { get; public set; }
    public string G280D130B1C2A2B0D11060626 { get; public set; }
    public string G280D130B1C2A25070306 { get; public set; }
    public string G280D130B1C2A3B0B021A1D { get; public set; }
    public string G280D130B1C2A3D0D15 { get; public set; }
    public string G350D05081C2A0E200A061D2408 { get; public set; }
    public string G350D05081C2A0E2E00141D { get; public set; }
    public string G350D05081C2A0E300C15013F { get; public set; }
    public string G350D05081C2A0E360A02 { get; public set; }
    public string G350D060937360C030E3B07380C0910 { get; public set; }
    public string G29090718 { get; public set; }
    public string G310311 { get; public set; }
    public string G320505181D { get; public set; }
    public string G280D193B1C201D0A { get; public set; }
    public string G2D09080B1D30 { get; public set; }
    public string G270D0207123606170B162A24090207 { get; public set; }
    public string G270D0207123606170B162026040A10 { get; public set; }
    public string G270D0207123606170B1639241604010D0E06 { get; public set; }
    public string G270D0207123606170B163B2E15081410 { get; public set; }
    public string G270D0207123606170B162E3904091C010F1C { get; public set; }
    public string G270D0207123606170B162E3904091C010F1C2000230D0B { get; public set; }
    public string G26030D0307 { get; public set; }
    public string G26030F18102A1D { get; public set; }
    public string G2105121C192510 { get; public set; }
    public string G210513091630000D0B { get; public set; }
    public string G200111180C070C0E0901 { get; public set; }
    public string G23000E0D01 { get; public set; }
    public string G35031205012D060C { get; public set; }
    public string G29050F093D2100050D06 { get; public set; }
    public string G330913181C27080E241E002C0B { get; public set; }
    public string G310919183C2A0D070B06 { get; public set; }
    public string G31091918342800050B { get; public set; }
    public string G3109191831210A0D17131D220A03 { get; public set; }
    public string G32040818101719030617 { get; public set; }
    public string G33051205172D050B110B { get; public set; }
    public string G32031308263408010C1C0E { get; public set; }
    public string G3203130837360C030E { get; public set; }
    public string G23030F183325040B090B { get; public set; }
    public string G23030F18262D1307 { get; public set; }
    public string G23030F182630100E00 { get; public set; }
    public string G23030F1823251B0B041C1D { get; public set; }
    public string G23030F18222100050D06 { get; public set; }
    public string G290512182630100E00 { get; public set; }
    public string G2A1A041E13280615 { get; public set; }
    public string G290512182630100E002206380C191C0B0F { get; public set; }
    public string G290512182630100E003B042A0208 { get; public set; }
    public string G290512182630100E0026103B00 { get; public set; }
    public RPoint G2903020D012D060C { get; public set; }
    public RSize G36051B09 { get; public set; }
    public RRect G270314021137 { get; }
    public double G241A000519250B0E0025002F1105 { get; }
    public double G240F151914283B0B021A1D { get; public set; }
    public double G240F151914282B0D11060626 { get; public set; }
    public double G260008091B3025070306 { get; }
    public double G260008091B303D0D15 { get; }
    public double G260008091B303B0B021A1D { get; }
    public double G260008091B302B0D11060626 { get; }
    public RRect G260008091B303B0706060825020110 { get; }
    public double G240F1519142821070C15013F { get; }
    public double G240F151914283E0B010601 { get; }
    public double G240F1519142839030116002502391A14 { get; }
    public double G240F151914283903011600250221100215 { get; }
    public double G240F15191428390301160025022F1A1015070C { get; }
    public double G240F15191428390301160025023F1C03091C { get; }
    public double G240F15191428240317150025310205 { get; }
    public double G26030D0014341A07013F083902041B300E18 { get; public set; }
    public double G240F1519142824031715002529081310 { get; }
    public double G240F15191428240317150025270201100E05 { get; }
    public double G240F151914282403171500253704120C15 { get; }
    public double G240F151914282B0D17160C3931020533080C1506 { get; }
    public double G240F151914282B0D17160C39290813103601051A2C { get; }
    public double G240F151914282B0D17160C39270201100E053607201506 { get; }
    public double G240F151914282B0D17160C393704120C153F080A3009 { get; }
    public RColor G240F151914282B0D17160C39310205270E040E1C { get; }
    public RColor G240F151914282B0D17160C392908131022070D0136 { get; }
    public RColor G240F151914282B0D17160C39270201100E052201280E1C { get; }
    public RColor G240F151914282B0D17160C393704120C152B0E022B13 { get; }
    public double G240F151914282A0D171C0C392B1A { get; }
    public double G240F151914282A0D171C0C392B08 { get; }
    public double G240F151914282A0D171C0C393608 { get; }
    public double G240F151914282A0D171C0C39361A { get; }
    public bool G2C1F3303002A0D0701 { get; }
    public double G240F151914283E0D17163A3B040E1C0A06 { get; }
    public RColor G240F151914282A0D091D1B { get; }
    public RColor G240F151914282B0306190E390A181B0022070D0136 { get; }
    public RColor G240F151914282B0306190E390A181B00261A000A2D04003F { get; }
    public double G240F151914282B0306190E390A181B00261A000A2D04003F240C021E0E { get; }
    public RFont G240F1519142839031717073F23021B10 { get; }
    public RFont G240F151914282F0D0B06 { get; }
    public double G240F15191428250B0B17212E0C0A1D10 { get; }
    public double G240F151914283D071D06202501081B10 { get; }
    public double G240F151914282B0D17160C39361D1407080606262B1307310A0C111307 { get; }
    public double G240F151914282B0D17160C39361D14070806063821131A22060309 { get; }
    public string get_BorderBottomWidth();
    public void set_BorderBottomWidth(string value);
    public string get_BorderLeftWidth();
    public void set_BorderLeftWidth(string value);
    public string get_BorderRightWidth();
    public void set_BorderRightWidth(string value);
    public string get_BorderTopWidth();
    public void set_BorderTopWidth(string value);
    public string get_BorderBottomStyle();
    public void set_BorderBottomStyle(string value);
    public string get_BorderLeftStyle();
    public void set_BorderLeftStyle(string value);
    public string get_BorderRightStyle();
    public void set_BorderRightStyle(string value);
    public string get_BorderTopStyle();
    public void set_BorderTopStyle(string value);
    public string get_BorderBottomColor();
    public void set_BorderBottomColor(string value);
    public string get_BorderLeftColor();
    public void set_BorderLeftColor(string value);
    public string get_BorderRightColor();
    public void set_BorderRightColor(string value);
    public string get_BorderTopColor();
    public void set_BorderTopColor(string value);
    public string get_BorderSpacing();
    public void set_BorderSpacing(string value);
    public string get_BorderCollapse();
    public void set_BorderCollapse(string value);
    public string get_CornerBorderRadius();
    public void set_CornerBorderRadius(string value);
    public string get_CornerNwBorderRadius();
    public void set_CornerNwBorderRadius(string value);
    public string get_CornerNeBorderRadius();
    public void set_CornerNeBorderRadius(string value);
    public string get_CornerSeBorderRadius();
    public void set_CornerSeBorderRadius(string value);
    public string get_CornerSwBorderRadius();
    public void set_CornerSwBorderRadius(string value);
    public string get_MarginBottom();
    public void set_MarginBottom(string value);
    public string get_MarginLeft();
    public void set_MarginLeft(string value);
    public string get_MarginRight();
    public void set_MarginRight(string value);
    public string get_MarginTop();
    public void set_MarginTop(string value);
    public string get_PaddingBottom();
    public void set_PaddingBottom(string value);
    public string get_PaddingLeft();
    public void set_PaddingLeft(string value);
    public string get_PaddingRight();
    public void set_PaddingRight(string value);
    public string get_PaddingTop();
    public void set_PaddingTop(string value);
    public string get_PageBreakInside();
    public void set_PageBreakInside(string value);
    public string get_Left();
    public void set_Left(string value);
    public string get_Top();
    public void set_Top(string value);
    public string get_Width();
    public void set_Width(string value);
    public string get_MaxWidth();
    public void set_MaxWidth(string value);
    public string get_Height();
    public void set_Height(string value);
    public string get_BackgroundColor();
    public void set_BackgroundColor(string value);
    public string get_BackgroundImage();
    public void set_BackgroundImage(string value);
    public string get_BackgroundPosition();
    public void set_BackgroundPosition(string value);
    public string get_BackgroundRepeat();
    public void set_BackgroundRepeat(string value);
    public string get_BackgroundGradient();
    public void set_BackgroundGradient(string value);
    public string get_BackgroundGradientAngle();
    public void set_BackgroundGradientAngle(string value);
    public string get_Color();
    public void set_Color(string value);
    public string get_Content();
    public void set_Content(string value);
    public string get_Display();
    public void set_Display(string value);
    public string get_Direction();
    public void set_Direction(string value);
    public string get_EmptyCells();
    public void set_EmptyCells(string value);
    public string get_Float();
    public void set_Float(string value);
    public string get_Position();
    public void set_Position(string value);
    public string get_LineHeight();
    public void set_LineHeight(string value);
    public string get_VerticalAlign();
    public void set_VerticalAlign(string value);
    public string get_TextIndent();
    public void set_TextIndent(string value);
    public string get_TextAlign();
    public void set_TextAlign(string value);
    public string get_TextDecoration();
    public void set_TextDecoration(string value);
    public string get_WhiteSpace();
    public void set_WhiteSpace(string value);
    public string get_Visibility();
    public void set_Visibility(string value);
    public string get_WordSpacing();
    public void set_WordSpacing(string value);
    public string get_WordBreak();
    public void set_WordBreak(string value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_FontSize();
    public void set_FontSize(string value);
    public string get_FontStyle();
    public void set_FontStyle(string value);
    public string get_FontVariant();
    public void set_FontVariant(string value);
    public string get_FontWeight();
    public void set_FontWeight(string value);
    public string get_ListStyle();
    public void set_ListStyle(string value);
    public string get_Overflow();
    public void set_Overflow(string value);
    public string get_ListStylePosition();
    public void set_ListStylePosition(string value);
    public string get_ListStyleImage();
    public void set_ListStyleImage(string value);
    public string get_ListStyleType();
    public void set_ListStyleType(string value);
    public RPoint get_Location();
    public void set_Location(RPoint value);
    public RSize get_Size();
    public void set_Size(RSize value);
    public RRect get_Bounds();
    public double get_AvailableWidth();
    public double get_ActualRight();
    public void set_ActualRight(double value);
    public double get_ActualBottom();
    public void set_ActualBottom(double value);
    public double get_ClientLeft();
    public double get_ClientTop();
    public double get_ClientRight();
    public double get_ClientBottom();
    public RRect get_ClientRectangle();
    public double get_ActualHeight();
    public double get_ActualWidth();
    public double get_ActualPaddingTop();
    public double get_ActualPaddingLeft();
    public double get_ActualPaddingBottom();
    public double get_ActualPaddingRight();
    public double get_ActualMarginTop();
    public double get_CollapsedMarginTop();
    public void set_CollapsedMarginTop(double value);
    public double get_ActualMarginLeft();
    public double get_ActualMarginBottom();
    public double get_ActualMarginRight();
    public double get_ActualBorderTopWidth();
    public double get_ActualBorderLeftWidth();
    public double get_ActualBorderBottomWidth();
    public double get_ActualBorderRightWidth();
    public RColor get_ActualBorderTopColor();
    protected abstract virtual RPoint GetActualLocation(string X, string Y);
    protected abstract virtual RColor GetActualColor(string colorStr);
    public RColor get_ActualBorderLeftColor();
    public RColor get_ActualBorderBottomColor();
    public RColor get_ActualBorderRightColor();
    public double get_ActualCornerNw();
    public double get_ActualCornerNe();
    public double get_ActualCornerSe();
    public double get_ActualCornerSw();
    public bool get_IsRounded();
    public double get_ActualWordSpacing();
    public RColor get_ActualColor();
    public RColor get_ActualBackgroundColor();
    public RColor get_ActualBackgroundGradient();
    public double get_ActualBackgroundGradientAngle();
    public RFont get_ActualParentFont();
    public RFont get_ActualFont();
    protected abstract virtual RFont GetCachedFont(string fontFamily, double fsize, RFontStyle st);
    public double get_ActualLineHeight();
    public double get_ActualTextIndent();
    public double get_ActualBorderSpacingHorizontal();
    public double get_ActualBorderSpacingVertical();
    protected abstract virtual G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 GetParent();
    public double G22091529180C0C0B021A1D();
    protected string G2B03240106(string G09090F0B012C);
    protected void G3609152D19282B0D17160C3916(string G1618180010, string G120505181D, string G06030D0307);
    protected void G2809001F00360C350A000D18150C160D0F0F(RGraphics G02);
    protected void G2C020909072D1D31110B052E(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G15, bool G001A041E0C30010B0B15);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B : object {
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218> G3A1B0E1E1137;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A03160210362B0D1D;
    private Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719, RRect> G3A1E040F0137;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G3A1E040014300C06271D112E16;
    public List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G37090D0D01210D200A0A0C38 { get; }
    public List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218> G3203130806 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G2A1B0F090706061A { get; }
    public Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719, RRect> G37090218142A0E0E0001 { get; }
    public double G29050F093D2100050D06 { get; }
    public double G29050F09372B1D160A1F { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 ownerBox);
    public List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> get_RelatedBoxes();
    public List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218> get_Words();
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 get_OwnerBox();
    public Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719, RRect> get_Rectangles();
    public double get_LineHeight();
    public double get_LineBottom();
    internal void G3709110307302C1A0C011D2A0B0E102B07(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308);
    internal List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218> G32031308060B0F(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    internal void G301C050D01213B0706060825020110(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, double G1D, double G1C, double G17, double G07);
    internal void G241F1205122A3B070606082502011017350723013C041D();
    internal void G3609152E14370C2E0C1C0C(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07, double G070D1209192D0707);
    public bool G2C1F2D0D06303A0709170A3F0009220B130C(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308);
    public virtual string ToString();
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B2918031418160B0B080210 : object {
    public static void G2809001F00360C2B08130E2E36040F01(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D02182801320209 G0C01000B1013061001);
    public static void G261E040D0121250B0B172B241D0806(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07000E0F1E06061A);
    public static void G241C11000C070C0E09240C39110416050D290D07230F032E0B16(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G06090D00);
    private static void G23000E1B372B11(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07000E0F1E26061A, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, double G09050C05011600050D06, double G09050F09063408010C1C0E, double G1618001E013C, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B& G09050F09, Double& G06191314, Double& G06191315, Double& G080D193E1C230116, Double& G080D190E1A301D0D08);
    private static void G24080B1906302800161D053E1108250B120115072B0F(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, double G09090718, double G110311);
    private static void G2719030E19213B070606082502011017(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09);
    private static void G241C11000C0C06100C080625110C19250D0106002904003F(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09372B11);
    private static void G241C11000C1600050D063D2429081310(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07000E0F1E06061A, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09372B11);
    private static void G241C11000C1600050D063D24290813102E062D072A04(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09);
    private static void G241C11000C1600050D063D24290813102E0632072A06022E270D1D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09372B11, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static void G241C11000C120C10111B0A2A092C190D06060C0B2A15(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09372B11);
    private static void G241C11000C0E1C11111B0F3224011C030F05040030(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09372B11);
    private static void G241C11000C070C0C11171B0A0904120A0C0D0F1A(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09);
    private static void G241C11000C1600050D0628270C0A1B09040615(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09);
    private static void G241C11000C080C0411330522020318010F1C(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09);
    private static List`1<T> G31032D050630(IEnumerable`1<T> G06030D0010271D0B0A1C);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B2918031418160B0B0802101008000917 : object {
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A18000E19212B0D1D;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A0F001C012D060C;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A04040D11211B200A0A;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A0A0E0301211B200A0A;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G3A0E0E080C36061516;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G3A0F0E0000290711;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G3A0D0D00272B1E11;
    private int G3A0F0E00002907210A07073F;
    private bool G3A1B0808012C3A120011002D0C0811;
    private Double[] G3A0F0E00002907350C161D2316;
    private Double[] G3A0F0E000029072F0C1C3E2201191D17;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B2918031418160B0B0802101008000917(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 tableBox);
    public static double G2209153814260507360208280C0312(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G110D03001006061A);
    public static void G3509130A1A36042E040B063E11(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G110D03001006061A);
    private void G290D18030030(RGraphics G02);
    private void G241F1205122A2B0D1D390025011E();
    private void G2C02120907302C0F150610090A151017();
    private double G260D0D0F002808160031063E0B19340A053F080A3009();
    private void G210915090729000C003F003816041B0322070D1B290F392201160D01(double G041A000519070C0E0921192A0608);
    private void G2002070307270C2F040A00261000260D1B0D();
    private void G2002070307270C2F0C1C00261000260D1B0D();
    private void G290D180300302A07091E1A(RGraphics G02);
    private double G2209153F0525070C001624220B3A1C001500(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G170316, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G06090D00, int G17090000162B050B0B160C33, int G06030D1F052507);
    private static int G2209152F10280530001305080A0100090F210F0A2119(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G170316, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G06090D00);
    private double G2209152F102805350C161D23(int G06030D19182A, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07);
    private static int G2209152F1A283A12041C(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07);
    private static int G2209153E1A333A12041C(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07);
    private static void G2809001F00360C350A000D38(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RGraphics G02);
    private bool G260D0F3E10201C010025002F1105();
    private bool G260D0F3E10201C010025002F1105(int G06030D19182A200C011711);
    private double G2209152D0325000E0410052E310C1708043F080A3009();
    private double G22091521143C3D03071E0C1C0C09010C();
    private void G2209152F1A281C0F0B0124220B20141C3601051A2C2317080A0C11170515(bool G0A020D153B250711, Double[]& G08050F2A002805350C161D2316, Double[]& G080D192A002805350C161D2316);
    private double G2209152D0325000E0410052E260819083601051A2C();
    private double G2209153B1C201D0A360704();
    private static int G2209153F052507(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07);
    private Double[] G2209152F1A281C0F0B3F002532041110091B();
    private double G220915241A3600180A1C1D2A093E050502010F09();
    private static double G220915241A3600180A1C1D2A093E050502010F09(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private double G2209153A10361D0B06130518150C160D0F0F();
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B2D0F0B1504 : object {
    private double G3A02140117211B;
    private bool G3A05123E102808160C040C;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G3A190F0501;
    private string G3A000402123001;
    private bool G3A05123C10360A070B06082C00;
    private bool G3A04001F30361B0D17;
    public double G2B190C0E1036 { get; }
    public bool G2D0D122907360610 { get; }
    public bool G2C1F310907270C0C11130E2E { get; }
    public bool G2C1F330919251D0B1317 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G30020818 { get; }
    public string G29090F0B012C { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B2D0F0B1504(string length);
    public double get_Number();
    public bool get_HasError();
    public bool get_IsPercentage();
    public bool get_IsRelative();
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 get_Unit();
    public string get_Length();
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B2D0F0B1504 G26030F1A10361D270826061B0A041B1012(double G000132050F21);
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B2D0F0B1504 G26030F1A10361D270826061B0C15100812(double G1505190919020801111D1B);
    public virtual string ToString();
}
internal enum G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 : Enum {
    public int value__;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G2B030F09;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G200112;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G350519091937;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G2014;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G2C0202041037;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G26090F181C290C1600001A;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G28050D0518211D071701;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G350308020137;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D32260818 G3505020D06;
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D3438000F080234270319 : G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 {
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A091918102A0D0701300633;
    private int G3A1F150D07303B0D12;
    private int G3A090F08272B1E;
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G201415091B200C06271D11 { get; }
    public int G3618001E01160615 { get; }
    public int G2002053E1A33 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D3438000F080234270319(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 tableBox, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719& extendedBox, int startRow);
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 get_ExtendedBox();
    public int get_StartRow();
    public int get_EndRow();
}
internal abstract class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 : object {
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A03160210362B0D1D;
    private RRect G3A1E040F01;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B G3A1F040010271D0B0A1C;
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G2A1B0F090706061A { get; }
    public RRect G37090218142A0E0E00 { get; public set; }
    public double G29090718 { get; public set; }
    public double G310311 { get; public set; }
    public double G320505181D { get; public set; }
    public double G23190D00222D0D160D { get; }
    public double G240F151914283E0D17163A3B040E1C0A06 { get; }
    public double G2D09080B1D30 { get; public set; }
    public double G3705060401 { get; public set; }
    public double G270315181A29 { get; public set; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B G36090D091630000D0B { get; public set; }
    public bool HasSpaceBefore { get; }
    public bool HasSpaceAfter { get; }
    public RImage Image { get; public set; }
    public bool IsImage { get; }
    public bool IsSpaces { get; }
    public bool IsLineBreak { get; }
    public string Text { get; }
    public bool G36090D0916300C06 { get; }
    public int G36090D0916300C063606083911241B000410 { get; }
    public int G36090D0916300C06201C0D020B09101C2E0E071D2115 { get; }
    public double G36090D0916300C063606083911221302120D15 { get; }
    public double G36090D0916300C06201C0D04030B060115 { get; }
    internal double G29090718322810120D22082F01041B03 { get; }
    protected G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 owner);
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 get_OwnerBox();
    public RRect get_Rectangle();
    public void set_Rectangle(RRect value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Top();
    public void set_Top(double value);
    public double get_Width();
    public void set_Width(double value);
    public double get_FullWidth();
    public double get_ActualWordSpacing();
    public double get_Height();
    public void set_Height(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B get_Selection();
    public void set_Selection(G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B value);
    public virtual bool get_HasSpaceBefore();
    public virtual bool get_HasSpaceAfter();
    public virtual RImage get_Image();
    public virtual void set_Image(RImage value);
    public virtual bool get_IsImage();
    public virtual bool get_IsSpaces();
    public virtual bool get_IsLineBreak();
    public virtual string get_Text();
    public bool get_Selected();
    public int get_SelectedStartIndex();
    public int get_SelectedEndIndexOffset();
    public double get_SelectedStartOffset();
    public double get_SelectedEndOffset();
    internal double get_LeftGlyphPadding();
    public virtual string ToString();
    public bool G271E040D1E14080500();
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D02182801320209 : G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 {
    private RImage G3A050C0D1221;
    private RRect G3A050C0D12213B0706060825020110;
    public RImage Image { get; public set; }
    public bool IsImage { get; }
    public RRect G2C01000B10160C011113072C0908 { get; public set; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D02182801320209(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 owner);
    public virtual RImage get_Image();
    public virtual void set_Image(RImage value);
    public virtual bool get_IsImage();
    public RRect get_ImageRectangle();
    public void set_ImageRectangle(RRect value);
    public virtual string ToString();
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D021836032101 : G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 {
    private string G3A18041401;
    private bool G3A04001F2634080100300C2D0A1F10;
    private bool G3A04001F2634080100330F3F001F;
    public bool HasSpaceBefore { get; }
    public bool HasSpaceAfter { get; }
    public bool IsSpaces { get; }
    public bool IsLineBreak { get; }
    public string Text { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D021836032101(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 owner, string text, bool hasSpaceBefore, bool hasSpaceAfter);
    public virtual bool get_HasSpaceBefore();
    public virtual bool get_HasSpaceAfter();
    public virtual bool get_IsSpaces();
    public virtual bool get_IsLineBreak();
    public virtual string get_Text();
    public virtual string ToString();
}
internal enum G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 : Enum {
    public int value__;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G310311;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G3705060401;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G270315181A29;
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G29090718;
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146622030F18361D182C091B3121030B16052E17 : object {
    private static string G3A1F040010271D23091E;
    private static string G3A0F0E1C0C;
    private static string G3A0F0E1C0C08000C0E;
    private static string G3A0311091B08000C0E;
    private static string G3A0F0E1C0C0D0403021725220B06;
    private static string G3A0F0E1C0C0D04030217;
    private static string G3A1F001A100D04030217;
    private static string G3A0311091B120006001D;
    private static string G3A0F0E1C0C120006001D3C3909;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B G3A1F040010271D0B0A1C212A0B09190113;
    private HtmlContainerInt G3A0415011907060C11130025001F;
    private RContextMenu G3A0F0E02012111162817073E;
    private RControl G3A1C001E102A1D210A1C1D390A01;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G3A0F141E0721071637170A3F;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A0F141E07210716291B0720;
    private static G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146622030F18361D182C091B3121030B16052E17();
    public G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146622030F18361D182C091B3121030B16052E17(G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B selectionHandler, HtmlContainerInt htmlContainer);
    public void G36040E1B362B0716000A1D06000300(RControl G150D13091B30, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G17090218, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G09050F07);
    public sealed virtual void Dispose();
    private void G2105121C1A370C210A1C1D2E1D1938010F1D();
    private void G2A022E1C102A250B0B192A270C0E1E(object G16090F081036, EventArgs G001A040201051B0516);
    private void G2A022203053D250B0B192A270C0E1E(object G16090F081036, EventArgs G001A040201051B0516);
    private void G2A02320D0321200F04150C080904160F(object G16090F081036, EventArgs G001A040201051B0516);
    private void G2A022203053D200F04150C070C031E270D010205(object G16090F081036, EventArgs G001A040201051B0516);
    private void G2A022203053D200F04150C080904160F(object G16090F081036, EventArgs G001A040201051B0516);
    private void G2A022203053D2A0E0C1102(object G16090F081036, EventArgs G001A040201051B0516);
    private void G2A02320919210A16241E05080904160F(object G16090F081036, EventArgs G001A040201051B0516);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662303130836171F251E143321030B16052E17 : object {
    private static RPoint[] G3A0E0E1E11211B321101;
    private static G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662303130836171F251E143321030B16052E17();
    public static void G211E001B372B11200A000D2E171E(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RRect G17090218, bool G0C1F270507371D, bool G0C1F2D0D0630);
    public static void G211E001B372B1B060000(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G070313081036, RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RBrush G071E141F1D, RRect G17090218142A0E0E00);
    private static void G211E001B372B1B060000(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G070313081036, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RGraphics G02, RRect G17090218, bool G0C1F2D051B213A1604001D, bool G0C1F2D051B212C0C01);
    private static void G360915251B0B1C1616171D19000E01050F0F0D0B140E07251111(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G070313081036, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07, RRect G17, bool G0C1F2D051B213A1604001D, bool G0C1F2D051B212C0C01);
    private static RGraphicsPath G2209153E1A31070600162B241709101631091506(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G070313081036, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07, RRect G17);
    private static RPen G2209153C102A(RGraphics G02, string G1618180010, RColor G06030D0307, double G120505181D);
    private static RColor G2209152F1A280610(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G070313081036, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 G070319, string G1618180010);
    private static double G2209153B1C201D0A(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G070313081036, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 G070319);
    private static string G2209153F013D0507(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401B0E1C032D13 G070313081036, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 G070319);
    private static RColor G210D1307102A(RColor G06);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C1466230D02073417031402110D040302172D39041A3D050F0C0D0B36 : object {
    public static void G211E001B37250A090200063E0B093C09000F04(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B G0C01000B10080603013A082501011016, RRect G17090218142A0E0E00);
    private static RPoint G220915201A2708160C1D07(string G070D0207123606170B1639241604010D0E06, RRect G17090218142A0E0E00, RSize G0C01063F1C3E0C);
    private static void G211E001B27211907040631(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B G0C01000B10080603013A082501011016, RRect G17090218142A0E0E00, RRect G161E023E10271D, RRect G0109121827210A16, RSize G0C01063F1C3E0C);
    private static void G211E001B27211907040630(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B G0C01000B10080603013A082501011016, RRect G17090218142A0E0E00, RRect G161E023E10271D, RRect G0109121827210A16, RSize G0C01063F1C3E0C);
    private static void G211E001B272119070406(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B G0C01000B10080603013A082501011016, RRect G17090218142A0E0E00, RRect G161E023E10271D, RRect G0109121827210A16, RSize G0C01063F1C3E0C);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146627030F18202D0D0F0819211B : object {
    private RAdapter G3A0D050D05300C10;
    private Dictionary`2<string, string> G3A0A0E02013724031502002502;
    private Dictionary`2<string, RFontFamily> G3A0919050630000C02340625112B14090804080B37;
    private Dictionary`2<string, Dictionary`2<double, Dictionary`2<RFontStyle, RFont>>> G3A0A0E0201372A03061A0C;
    public G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146627030F18202D0D0F0819211B(RAdapter adapter);
    public bool G2C1F27031B302C1A0C011D38(string G030D0C05193D);
    public void G2408052A1A2A1D24041F00271C(RFontFamily G03030F183325040B090B);
    public void G2408052A1A2A1D24041F00271C20141411010F09(string G031E0E013325040B090B, string G1103270D182D051B);
    public RFont G2209152F142701070134062511(string G030D0C05193D, double G16051B09, RFontStyle G1618180010);
    private RFont G311E182B10302F0D0B06(string G030D0C05193D, double G16051B09, RFontStyle G1618180010);
    private RFont G261E040D01212F0D0B06(string G030D0C05193D, double G16051B09, RFontStyle G1618180010);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B3621031602192B08060000 : object {
    private List`1<WebClient> G3A0F0D05102A1D11;
    private Dictionary`2<string, List`1<DownloadFileAsyncCallback>> G3A050C0D12212D0D121C0524040936050D04030F270A1D;
    public void G21031602192B08062C1F082C00(Uri G0C01000B10111B0B, string G03050D0925251D0A, bool G041F180216, DownloadFileAsyncCallback G060D020410202F0B09172A2A090117050203);
    public sealed virtual void Dispose();
    private void G21031602192B08062C1F082C002B070B0C3D1302(Uri G1603141E1621, string G11090C1C25251D0A, string G03050D0925251D0A);
    private void G21031602192B08062C1F082C002B070B0C3D13020512172506(object G010D150D);
    private void G2A022503022A050D04162026040A102512110F0D070E033B090711170F(object G16090F081036, AsyncCompletedEventArgs G00);
    private void G2A022503022A050D04162026040A10270E05110221150B2F(WebClient G060008091B30, Uri G1603141E1621, string G11090C1C25251D0A, string G03050D0925251D0A, Exception G001E130307, bool G060D0F0F1028050701);
    private void G37090D0914370C2D07180C28111E();
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B : object {
    private HtmlContainerInt G3A0415011907060C11130025001F;
    private G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C52<RImage, RRect, bool> G3A000E0D1107060F151E0C3F002E14080D0A000D2F;
    private FileStream G3A050C0D12212F0B09173A3F17081409;
    private RImage G3A050C0D1221;
    private RRect G3A050C0D12213B0706060825020110;
    private bool G3A0D12151B272A03091E0B2A0606;
    private bool G3A1E040010251A072C1F082C0022170E040B15;
    private bool G3A08081F052B1A0701;
    public RImage G2C01000B10 { get; }
    public RRect G37090218142A0E0E00 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B36290300083D25070609171B(HtmlContainerInt htmlContainer, G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C52<RImage, RRect, bool> loadCompleteCallback);
    public RImage get_Image();
    public RRect get_Rectangle();
    public void G290300083C29080500(string G161E02, Dictionary`2<string, string> G0418151E1C261C160001);
    public sealed virtual void Dispose();
    private void G2A0229181828200F04150C070A0C1121170D0F1A0700022707030619(string G150D1504, object G0C01000B10, RRect G0C01000B10160C011113072C0908);
    private void G3609152A072B042B0B1E00250029141000(string G161E02);
    private RImage G2209152518250E0723000626210C0105(string G161E02);
    private void G3609152518250E0723000626350C010C(string G150D1504);
    private void G3609152518250E072300062623041901(FileInfo G1603141E1621);
    private void G290300083C29080500341B24082B1C0804(string G1603141E1621);
    private void G3609152518250E0723000626301F19(Uri G1603141E1621);
    private void G2A022503022A050D04162026040A10270E05110221150B2F(Uri G0C01000B10111B0B, string G03050D0925251D0A, Exception G001E130307, bool G060D0F0F10280C06);
    private void G2C01000B10080603013106261501101004(bool G041F180216);
    private void G37090D0914370C2D07180C28111E();
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B : object {
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G3A1E0E0301;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146622030F18361D182C091B3121030B16052E17 G3A0F0E02012111162817073E2D0C1B000D0D13;
    private RPoint G3A1F040010271D0B0A1C3A3F041F01340E010F1A;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G3A1F040010271D0B0A1C3A3F041F01;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G3A1F040010271D0B0A1C2C2501;
    private int G3A1F040010271D0B0A1C3A3F041F012D0F0C0416;
    private int G3A1F040010271D0B0A1C2C2501241B000410;
    private double G3A1F040010271D0B0A1C3A3F041F012B070E120B30;
    private double G3A1F040010271D0B0A1C2C2501221302120D15;
    private bool G3A0E000F1E33081001210C27000E010D0E06;
    private bool G3A050F3F10280C01111B0625;
    private bool G3A0512281A310B0E00310522060626010D0D021A;
    private bool G3A010E1906212D0D121C202526021B1013070D;
    private bool G3A010E1906212D0D121C262536081901021C040A130E1C2F;
    private bool G3A0F141E062B1B210D13072C0009;
    private DateTime G3A00001F0109061716172D241203;
    private object G3A08130D12001B0D1536083F04;
    public G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 root);
    public void G36090D091630280E09(RControl G06030F18072B05);
    public void G36090D0916303E0D1716(RControl G06030F18072B05, RPoint G090302);
    public void G2D0D0F081921240D10010C0F0A1A1B(RControl G150D13091B30, RPoint G090302, bool G0C1F2C0300370C2B0B310625110C1C0A041A);
    public bool G2D0D0F081921240D10010C1E15(RControl G150D13091B30, bool G09090718382B1C1100301C3F11021B);
    public void G2D0D0F081921240D10010C060A1B10(RControl G150D13091B30, RPoint G090302);
    public void G2D0D0F081921240D10010C07000C0301(RControl G150D13091B30);
    public void G260311152621050706060C2F2D191808();
    public string G2209153F10280C0111170D1F001501();
    public string G2209153F10280C0111170D03110019();
    public int G2209153F10280C01111B072C3619141615210F0A2119(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308);
    public int G2209153F10280C0111170D0E0B093C0A050D192122071D2E11(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308);
    public double G2209153F10280C0111170D18110C07102E0E071D2115(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308);
    public double G2209153F10280C0111170D0E0B093A02071B041A(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308);
    public void G2600040D07170C0E00111D220A03();
    public sealed virtual void Dispose();
    private void G2D0D0F0819213A0709170A3F0C021B(RControl G06030F18072B05, RPoint G090302, bool G04000D0302140810111B082736081901021C);
    private static void G2600040D07170C0E00111D220A03(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private void G3618001E01001B0302361B2415(RControl G06030F18072B05);
    public void G36090D091630280E09250639011E(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private bool G2604040F1E0A060C201F193F1C3E1008040B15072B0F(RPoint G090302, bool G04000D0302140810111B082736081901021C);
    private void G36090D0916303E0D17161A020B3F140A060D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G17030E18, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G16090D091630000D0B211D2A1719, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G16090D091630000D0B37072F);
    private bool G36090D0916303E0D17161A020B3F140A060D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G16090D091630000D0B211D2A1719, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G16090D091630000D0B37072F, Boolean& G0C02320919210A160C1D07);
    private void G260D0D0F0028081600250639012E1D0513210F0A21192F25012D031418041C(RControl G06030F18072B05, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308, RPoint G090302, bool G16090D091630000D0B211D2A1719);
    private static void G260D0D0F0028081600250639012E1D0513210F0A21192F25012D031418041C(RControl G06030F18072B05, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308, RPoint G090302, bool G0C0202000037001400, Int32& G16090D091630000D0B3B072F0015, Double& G16090D091630000D0B3D0F2D160801);
    private void G2604040F1E170C0E00111D220A03310D130D021A2D0E00();
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632181800361604040901080603013A082501011016 : object {
    public static void G290300082630100E0001012E0019(HtmlContainerInt G0D180C00362B0716041B072E17, string G161E02, Dictionary`2<string, string> G0418151E1C261C160001, String& G16181800103701070006, CssData& G161818001037010700062D2A110C);
    private static string G290300082630100E0001012E0019(HtmlContainerInt G0D180C00362B0716041B072E17, string G161E02);
    private static string G290300082630100E0001012E001933160E0527072804(HtmlContainerInt G0D180C00362B0716041B072E17, string G150D1504);
    private static string G290300082630100E0001012E001933160E05341C2D(HtmlContainerInt G0D180C00362B0716041B072E17, Uri G101E08);
    private static string G2603131E10271D30001E083F0C1B1031130412(string G16181800103701070006, Uri G070D1209203600);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2613250D3C001E20001E : object {
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G350D131F10000601101F0C2511(string G1603141E1621);
    private static void G24080538103C1D200A0A(string G1603141E1621, int G1618001E010D0D1A, int G110D0625113C, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719& G0619132E1A3C);
    private static int G350D131F100C1D0F0926082C(string G1603141E1621, int G110D0625113C, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719& G0619132E1A3C);
    private static bool G350D131F100C1D0F0926082C(string G1603141E1621, int G0C0819, int G09090F0B012C, String& G0B0D0C09, Dictionary`2& G0418151E1C261C160001);
    private static void G2014151E14271D2311061B220718010112(string G1603141E1621, int G0C0819, int G09090F0B012C, Dictionary`2& G0418151E1C261C160001);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2A0825310D131F3617 : object {
    private G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617 G3A0F121F25251B110000;
    public G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2A0825310D131F3617(G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617 cssParser);
    public G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G22090F0907251D0726011A1F170810(string G0D180C00, HtmlContainerInt G0D180C00362B0716041B072E17, CssData& G061F1228143008);
    private void G260D120F14200C3204001A2E36190C08041B(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, HtmlContainerInt G0D180C00362B0716041B072E17, CssData& G061F1228143008, Boolean& G061F1228143008210D13072C0009);
    private void G260D120F14200C231502053236190C08041B(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, CssData G061F1228143008);
    private void G36091538103C1D31001E0C2811041A0A321C180221(HtmlContainerInt G0D180C00362B0716041B072E17, CssData G061F1228143008);
    private static void G241F1205122A2A0E04011A08161E37080E0B0A1D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, CssData G061F1228143008);
    private static void G241F1205122A2A1116300524060606(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, CssData G061F1228143008, string G0600001F060A080F00);
    private static bool G2C1F23001A2702231601002C0B0C1708043C0E2C2B19(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, CssBlock G07000E0F1E);
    private static bool G2C1F23001A2702231601002C0B0C1708043C0E2C2B193922110A361707040B15012B(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, CssBlock G07000E0F1E);
    private static void G241F1205122A2A11163005240606(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, CssBlock G07000E0F1E);
    private static bool G2C1F32180C280C2D0B37052E08081B1020040D0133040A(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, string G0E0918, string G130D0D1910);
    private static void G26000E0210071A1121131D2A(CssData& G061F1228143008, Boolean& G061F1228143008210D13072C0009);
    private void G311E00020628081600331D3F17041711150D12(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401115030B1C000B G110D06, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static string G311E000206280816003E0C2502191D(string G0D180C0039210705111A);
    private static void G241C11000C10080009172B2417091016(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G110D030010, string G070313081036);
    private static void G241C11000C1008000917392A01091C0A06(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G110D030010, string G150D05081C2A0E);
    private static void G3609152A1A36280E09310C27091E(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G110D030010, G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C50<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G040F15051A2A);
    private static void G2603131E10271D36000A1D090A151017(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static void G2603131E10271D2B08152B241D0806(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static void G2603131E10271D2E0C1C0C091708140F122A0D01270A1D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, Boolean& G03030D001A33000C023005240606);
    private static void G2603131E10271D20091D0A202C03060D050D28002808002E(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G2603131E10271D20091D0A202C03060D050D28002808002E2C0F15(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static void G2603131E10271D20091D0A20361D190D152A000A060E16(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G150D13091B302B0D1D, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070D052E1A3C, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G09090718372806010E);
    private static void G2603131E10271D2B0B1E0025002F1A1C041B310F3604003F(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static bool G26030F18142D07112C1C05220B08062B0F04182A21041E(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static bool G26030F18142D071133131B22040301260E10041D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617 : object {
    private static Char[] G3A0F121F372806010E2119270C190101131B;
    private RAdapter G3A0D050D05300C10;
    private G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B370D0D1936350D131F1036 G3A1A00000021390317010C39;
    private static Char[] G3A0F121F3628081116261B22082E1D05131B;
    public G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617(RAdapter adapter);
    private static G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617();
    public CssData G350D131F10171D1B09173A23000801(string G16181800103701070006, bool G06030C0E1C2A0C350C06010F000B14110D1C);
    public void G350D131F10171D1B09173A23000801(CssData G061F1228143008, string G16181800103701070006);
    public CssBlock G350D131F10071A11271E06280E(string G0600001F060A080F00, string G07000E0F1E17061717110C);
    public string G350D131F1002060C113408260C010C(string G130D0D1910);
    public RColor G350D131F1007060E0A00(string G06030D0307171D10);
    private static string G37090C0303213A161C1E0C380D08101022070C03210F1A38(string G16181800103701070006);
    private void G350D131F10171D1B09172B270A0E1E17(CssData G061F1228143008, string G16181800103701070006);
    private void G350D131F10090C060C133A3F1C0110260D07020537(CssData G061F1228143008, string G16181800103701070006);
    private void G230904082630100E003005240606(CssData G061F1228143008, string G07000E0F1E, string G0809050514);
    private CssBlock G350D131F10071A11271E06280E241814(string G0600001F060A080F00, string G07000E0F1E17061717110C);
    private static List`1<CssBlockSelectorItem> G350D131F10071A11271E06280E3E1008040B150136(string G0600001F060A080F00, String& G0305131F010705031601);
    private Dictionary`2<string, string> G350D131F10071A11271E06280E3D070B110D131A2D041D(string G07000E0F1E17061717110C);
    private void G2408053C072B1907170610(string G151E0E1C3B250407, string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private static void G350D131F10080C0C0206011B17020501131C18(string G151E0E1C3B250407, string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private void G350D131F1007060E0A0039390A1D10161511(string G151E0E1C3B250407, string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private void G350D131F1002060C11221B241508071018(string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private static string G350D131F100D0403021739390A1D10161511(string G151E0E1C2325051700);
    private string G350D131F1002060C113408260C010C341307110B361517(string G151E0E1C2325051700);
    private void G350D131F1006061001171B1B17020501131C18(string G151E0E1C2325051700, string G010513091630000D0B, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private static void G350D131F10090810021B071B17020501131C18(string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private static void G350D131F1006061001171B1811141901311A0E1E21131A32(string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private static void G350D131F1006061001171B1C0C09010C311A0E1E21131A32(string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private static void G350D131F1006061001171B080A011A16311A0E1E21131A32(string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private static void G350D131F10140806011B072C351F1A14041A1517(string G151E0E1C2325051700, Dictionary`2<string, string> G151E0E1C10361D0B0001);
    private static void G361C0D0501091C0E111B2D221708161008070F38250D1B2E16(string G151E0E1C2325051700, String& G09090718, String& G110311, String& G1705060401, String& G070315181A29);
    private static String[] G361C0D050112080E10171A(string G130D0D1910, char G1609110D07251D0D17);
    public void G350D131F1006061001171B(string G130D0D1910, String& G120505181D, String& G1618180010, String& G06030D0307);
    private static string G350D131F1006061001171B1C0C09010C(string G161813, int G0C0819, int G09090F0B012C);
    private static string G350D131F1006061001171B1811141901(string G161813, int G0C0819, int G09090F0B012C);
    private string G350D131F1006061001171B080A011A16(string G161813, int G0C0819, int G09090F0B012C);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B370D0D1936350D131F1036 : object {
    private RAdapter G3A0D050D05300C10;
    public G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B370D0D1936350D131F1036(RAdapter adapter);
    public static bool G2C1F27001A251D(string G161813, int G0C0819, int G09090F0B012C);
    public static bool G2C1F280201(string G161813, int G0C0819, int G09090F0B012C);
    public static bool G2C1F370D192D0D2E001C0E3F0D(string G130D0D1910);
    public static double G350D131F100A1C0F07171B(string G0B190C0E1036, double G0D190F0807210D3200000A2E0B19);
    public static double G350D131F10080C0C020601(string G09090F0B012C, double G0D190F0807210D3200000A2E0B19, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 G070319, bool G03030F18342003171606);
    public static double G350D131F10080C0C020601(string G09090F0B012C, double G0D190F0807210D3200000A2E0B19, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 G070319, string G0109070D00281D370B1B1D);
    public static double G350D131F10080C0C020601(string G09090F0B012C, double G0D190F0807210D3200000A2E0B19, double G0001270D16300610, string G0109070D00281D370B1B1D, bool G03030F18342003171606, bool G17091519072A390D0C1C1D38);
    private static string G220915391B2D1D(string G09090F0B012C, string G0109070D00281D370B1B1D, Boolean& G0D0D12391B2D1D);
    public bool G2C1F2203192B1B34041E002F(string G06030D030712080E1017);
    public RColor G2209152D16301C03093106270A1F(string G06030D030712080E1017);
    public bool G311E182B10302A0D091D1B(string G161813, int G0C0819, int G09090F0B012C, RColor& G06030D0307);
    public static double G2209152D16301C030930063901080733080C1506(string G0703130810363F0309070C, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 G07);
    private static bool G2209152F1A280610270B212E1D(string G161813, int G0C0819, int G09090F0B012C, RColor& G06030D0307);
    private static bool G2209152F1A280610270B3B2C07(string G161813, int G0C0819, int G09090F0B012C, RColor& G06030D0307);
    private static bool G2209152F1A280610270B3B2C070C(string G161813, int G0C0819, int G09090F0B012C, RColor& G06030D0307);
    private bool G2209152F1A280610270B272A0808(string G161813, int G0C0819, int G09090F0B012C, RColor& G06030D0307);
    private static int G350D131F100D07162406202501080D(string G161813, Int32& G1618001E010D0D1A);
    private static int G350D131F100D0716(string G161813, int G0C0819, int G09090F0B012C);
    private static int G350D131F100C0C1A2C1C1D(string G161813, int G0C0819, int G09090F0B012C);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F3C022F0414310D2116091339012D0511 : object {
    public static string G261F122110200003310B192E16;
    public static string G261F122E192B0A0916;
    public static string G261F122200290B0717;
    public static string G261F123C10360A070B06082C00;
    public static string G261F1220102A0E160D;
    public static string G261F12201C2A0C2A001B0E2311;
    public static string G261F122A1A2A1D24041F00271C;
    public static string G261F122A1A2A1D31110B052E;
    public static string G261F122A1A2A1D340400002A0B19;
    public static string G261F122A1A2A1D35001B0E2311;
    public static string G261F122A1A2A1D310C080C;
    public static string G261F122A1A2A1D310C080C0A0B09390D0F0D290B2D06063F;
    private static Dictionary`2<string, Regex> G3A1E040B103C0C11;
    private static G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F3C022F0414310D2116091339012D0511();
    public static string G2209152F063728163707052E16(string G16181800103701070006, Int32& G1618001E010D0D1A);
    public static MatchCollection G280D150F1D(string G170906090D, string G1603141E1621);
    public static string G3609001E162C(string G170906090D, string G1603141E1621);
    public static string G3609001E162C(string G170906090D, string G1603141E1621, Int32& G15031205012D060C);
    private static Regex G2209153E10230C1A(string G170906090D);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2613250D2F0E0220110D0F1806 : object {
    public static string G24;
    public static string G260D11181C2B07;
    public static string G26030D;
    public static string G26030D0B072B1C12;
    public static string G2105121C192510;
    public static string G23030F18;
    public static string G2D1E;
    public static string G2C0A130D1821;
    public static string G2C0106;
    public static string G2905;
    public static string G3618180010;
    public static string G310D030010;
    public static string G310E0E080C;
    public static string G3108;
    public static string G310A0E0301;
    public static string G3104;
    public static string G3104040D11;
    public static string G311E;
    public static string G2400080B1B;
    public static string G270D0207123606170B16;
    public static string G270B0203192B1B;
    public static string G270313081036;
    public static string G2703130810360A0D091D1B;
    public static string G26090D0005250D060C1C0E;
    public static string G26090D00063408010C1C0E;
    public static string G2600001F06;
    public static string G26030D0307;
    public static string G06030F18102A1D;
    public static string G210513;
    public static string G230D0209;
    public static string G2D09080B1D30;
    public static string G2D1E040A;
    public static string G2D1F110D1621;
    public static string G2B03161E1434;
    public static string G36051B09;
    public static string G330D0D05122A;
    public static string G331F110D1621;
    public static string G320505181D;
    public static string G29090718;
    public static string G3705060401;
    public static string G26090F181036;
    public static string G2F1912181C2210;
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2613250D3915053F16 : object {
    private static List`1<string> G3A00081F01;
    private static KeyValuePair`2[] G3A090F0F1A200C260011062F00;
    private static Dictionary`2<string, char> G3A08040F1A200C2D0B1E10;
    private static G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2613250D3915053F16();
    public static bool G2C1F32051B23050731130E(string G110D062214290C);
    public static string G2109020311212116081E(string G161813);
    public static string G2002020311212116081E(string G161813);
    private static string G2109020311212116081E2A23041F371D2207050B(string G161813);
    private static string G2109020311212116081E2A23041F371D2F090C0B(string G161813);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2A08253418080020 : object {
    public static bool G2C1F2802372B11(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RPoint G0903020D012D060C);
    public static bool G26030F18142D07112C1C05220B08062B0F0418(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G23050F0825251B070B06(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G17030E18, string G110D062214290C, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G2209153C07211F0B0A071A180C0F190D0F0F(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G2209153C07211F0B0A071A080A03010508060800232302240609361B090D010F09(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07);
    public static bool G2C1F23030D0C0811321A003F001E0505020D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G22091522103C1D310C1005220B0A(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G07);
    public static string G2209152D01301B0B07071D2E(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, string G0418151E1C261C1600);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G2209152F06372B0D1D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RPoint G0903020D012D060C, bool G1305120517280C);
    public static void G2209152D1928250B0B192B241D0806(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719> G09050F07372B110716);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G220915201C2A02200A0A(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RPoint G0903020D012D060C);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G2209152E1A3C2B1B2C16(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, string G0C08);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G2209152F0637250B0B172B241D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RPoint G0903020D012D060C);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G2209152F06372B0D1D25063901(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, RPoint G0903020D012D060C);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G2209152F06372B0D1D25063901(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G09050F09372B11, RPoint G0903020D012D060C);
    public static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2B210F0923032B G2209152F0637250B0B172B241D2F0C330E1A05(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G12031308);
    public static string G2209153F10280C0111170D1B090C1C0A350D191A(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G17030E18);
    public static string G22090F0907251D072D060427(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G17030E18, HtmlGenerationStyle G1618180010030C0C, bool G0A020D152621050706060C2F);
    public static string G22090F0907251D07271D111F170810(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G17030E18);
    private static int G2209153F10280C0111170D1B090C1C0A350D191A(StringBuilder G160E, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719, bool> G26030D0010271D31001E0C28110811260E10041D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G17030E18);
    private static bool G26030D0010271D31001E0C28110811260E10041D(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719, bool> G16090D0916300C06271D112E16, Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719, bool> G080D180E1006061A0001);
    private static G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G2209153F10280C01111B062537021A10(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G17030E18, Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719, bool> G16090D0916300C06271D112E16);
    private static bool G26030F18142D07112B13042E012F1A1C(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    private static void G321E0818100C1D0F09(G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617 G061F123C14361A0717, StringBuilder G160E, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, HtmlGenerationStyle G1618180010030C0C, Dictionary`2<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719, bool> G16090D0916300C06271D112E16, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G16090D091630000D0B20062411);
    private static void G321E0818100C1D0F0926082C(G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617 G061F123C14361A0717, StringBuilder G160E, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, HtmlGenerationStyle G1618180010030C0C);
    private static Dictionary`2<string, string> G3618130505000C040407053F36190C08041B(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, Dictionary`2<string, string> G110D063F013D050716);
    private static void G321E081810171D1B09171A23000801(StringBuilder G160E, CssData G061F1228143008);
    private static string G2209153F10280C0111170D1C0A1F11(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D352D0218 G17090218, bool G16090D0916300C063117113F);
    private static void G22090F0907251D07271D111F170810(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319, StringBuilder G0719080011211B, int G0C0205091B30);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2D08250C030F39270C0012 : object {
    private static String[0...,0...] G3A1E0E01142A2D0B021B1D38310C170804;
    private static String[0...,0...] G3A04040E07211E260C15003F163914060D0D;
    private static String[0...,0...] G3A0B0403072300030B36002C0C190630000A0D0B;
    private static String[0...,0...] G3A0D1301102A00030B36002C0C190630000A0D0B;
    private static String[] G3A04081E1423080C0436002C0C190630000A0D0B;
    private static String[] G3A1F0018142F080C0436002C0C190630000A0D0B;
    public static string G3A180401051408160D;
    private static G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2D08250C030F39270C0012();
    public static bool G2C1F201F1C2507210D131B2E06191016(char G0604);
    public static bool G2C1F2505122D1D(char G0604, bool G0D0919);
    public static int G31032505122D1D(char G0604, bool G0D0919);
    public static RSize G280D19(RSize G16051B09, RSize G0A18090907);
    public static Uri G311E182B10303C100C(string G150D1504);
    public static TValue G2209152A1C361A163313053E00220720040E001B2815(IDictionary`2<TKey, TValue> G010502, TValue G0109070D00281D34041E1C2E);
    public static FileInfo G311E182B10302F0B091720250302(string G150D1504);
    public static string G2209153E1037190D0B010C080A0301010F1C35173404(WebClient G060008091B30);
    public static FileInfo G220915201A27080E031B052E2B0C1801(Uri G0C01000B10111B0B);
    public static int G22091522103C1D3110103A3F17041B03(string G161813, int G0C0819, Int32& G09090F0B012C);
    public static bool G3619033F0136000C0237183E040106(string G161813, int G0C0819, int G09090F0B012C, string G1618135E);
    private static string G2209153A14280006231B052E2B0C1801(string G1603141E1621);
    public static string G26030F1A10361D360A33053B0D0C3B110C0A041C(int G0B190C0E1036, string G1618180010);
    private static string G26030F1A10361D360A37072C0904060C2F1D0C0C2113(int G0B190C0E1036, bool G090316090727081100);
    private static string G26030F1A10361D360A351B2E00063B110C0A041C(int G0B190C0E1036);
    private static string G26030F1A10361D360A20062604033B110C0A041C37(int G0B190C0E1036, bool G090316090727081100);
    private static string G26030F1A10361D360A21192E0604130D0226140326041C38(int G0B190C0E1036, String[0...,0...] G0400110414260C16);
    private static string G26030F1A10361D360A21192E0604130D0226140326041C3857(int G0B190C0E1036, String[] G0400110414260C16);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2D143B22030F1F270402151F : object {
    public static string G240E120319311D07;
    public static string G24191503;
    public static string G241A0E0511;
    public static string G270D1209192D0707;
    public static string G270008021E;
    public static string G27000E0F1E;
    public static string G2C020D051B212B0E0A1102;
    public static string G27030D08;
    public static string G27030D081036;
    public static string G270315181A29;
    public static string G271E040D1E05050E;
    public static string G2E09041C342805;
    public static string G26090F181036;
    public static string G26030D0014341A07;
    public static string G2619131F1C320C;
    public static string G2605130F1921;
    public static string G21090205182505;
    public static string G210902051825052E00130D220B0A2F011307;
    public static string G2105120F;
    public static string G230D0F18143710;
    public static string G2305190911;
    public static string G2D050509;
    public static string G2C020909072D1D;
    public static string G2C020D051B21;
    public static string G2C020D051B213D03071E0C;
    public static string G2C02120901;
    public static string G2C1800001C27;
    public static string G2F1912181C2210;
    public static string G290D130B10;
    public static string G290D130B1036;
    public static string G29090718;
    public static string G2905060401211B;
    public static string G29050F09212C1B0D101501;
    public static string G290512183C300C0F;
    public static string G291813;
    public static string G29031609070505120D13;
    public static string G29031609070808160C1C;
    public static string G290316090716060F041C;
    public static string G2903160907031B070019;
    public static string G241E0C091B2D080C;
    public static string G22090E1E122D080C;
    public static string G2D09031E1033;
    public static string G2D05130D12250703;
    public static string G2D05130D122507032C00062304;
    public static string G2E0D150D1E250703;
    public static string G2E0D150D1E2507032C00062304;
    public static string G280905050029;
    public static string G280505081921;
    public static string G28030F030634080100;
    public static string G2B030F09;
    public static string G2B0313011428;
    public static string G2B03361E1434;
    public static string G2A0E0D0504310C;
    public static string G2A19151F1030;
    public static string G2A1A041E192D0707;
    public static string G351E04;
    public static string G351E043B072519;
    public static string G351E04201C2A0C;
    public static string G3705060401;
    public static string G37180D;
    public static string G360D0F1F26211B0B03;
    public static string G3609130513;
    public static string G36040E1B;
    public static string G3601000019;
    public static string G3601000019211B;
    public static string G36030D0511;
    public static string G361903;
    public static string G3619110907;
    public static string G361D140D0721;
    public static string G310D030010;
    public static string G310D030010160615;
    public static string G310D0300101606152200063E15;
    public static string G310D0300100C0C0301171B0C17020014;
    public static string G310D03001002060D11171B0C17020014;
    public static string G310D03001007060E101F07;
    public static string G310D03001007060E101F070C17020014;
    public static string G310D030010070C0E09;
    public static string G310D030010070812111B0625;
    public static string G31091918372B1D160A1F;
    public static string G31091918212B19;
    public static string G31040802;
    public static string G3104080F1E;
    public static string G310311;
    public static string G300205090728000C00;
    public static string G301C1109070505120D13;
    public static string G301C1109070808160C1C;
    public static string G301C11090716060F041C;
    public static string G3D20001E1221;
    public static string G3D3F0C0D1928;
    public static string G3D342D0D07230C;
    public static string G3D343201142805;
    public static string G3305120517280C;
    public static string G2D050508102A;
    public static string G210315181020;
    public static string G210D12041020;
    public static string G2103140E1921;
    public static string G221E0E030321;
    public static string G3705050B10;
    public static string G2601;
    public static string G2801;
    public static string G3514;
    public static string G2C02;
    public static string G2001;
    public static string G2014;
    public static string G3518;
    public static string G350F;
    public static double G23030F18262D1307;
    public static string G2109070D00281D240A1C1D;
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2D143B3418080020 : object {
    private static RColor G3A08040A143105163617052E06191C0B0F2A000D2F0201270A10;
    public static RColor G2109070D00281D31001E0C2811041A0A23090205270E022417 { get; }
    private static G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2D143B3418080020();
    public static RColor get_DefaultSelectionBackcolor();
    public static double G32040818101719030617(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D2527193C130323001E15051037 G070319);
    public static string G2209153C072B19071706101D04010001(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G061F122E1A3C, string G151E0E1C3B250407);
    public static void G3609153C072B19071706101D04010001(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G061F122E1A3C, string G151E0E1C3B250407, string G130D0D1910);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C50 : MulticastDelegate {
    public G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C50(object object, IntPtr method);
    public virtual void Invoke(T obj);
    public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C52 : MulticastDelegate {
    public G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C52(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C53 : MulticastDelegate {
    public G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F2F043C08030F253D110C53(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F3C022605091339270C0012 : object {
    public static bool G2C1F2203192B1B340C0100290908(RColor G06030D0307);
    public static bool G2600081C323608120D1B0A3827143A12041A07022B16(RGraphics G02, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 G070319);
    public static void G211E001B3C290805003E062A01041B03280B0E00(RGraphics G02, HtmlContainerInt G0D180C00362B0716041B072E17, RRect G17);
    public static void G211E001B3C29080500371B390A1F3C070E06(RGraphics G02, HtmlContainerInt G0D180C00362B0716041B072E17, RRect G17);
    public static RGraphicsPath G2209153E1A31070637170A3F(RGraphics G02, RRect G17090218, double G0B1B230307200C1037130D22101E, double G0B09230307200C1037130D22101E, double G1609230307200C1037130D22101E, double G161B230307200C1037130D22101E);
}
[DefaultMemberAttribute("Item")]
internal class G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F3D122A321813053D02 : object {
    private string G3A0A140019171D100C1C0E;
    private int G3A1F150D073020061D;
    private int G3A000402123001;
    public string G23190D0026301B0B0B15 { get; }
    public int G3618001E010D0D1A { get; }
    public int G29090F0B012C { get; }
    public char G2C180401 { get; }
    public G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F3D122A321813053D02(string fullString);
    public G3104042D0730260421171F03110019360406050B36041C65260D171745341C08022A4F3D122A321813053D02(string fullString, int startIdx, int length);
    public string get_FullString();
    public int get_StartIdx();
    public int get_Length();
    public char get_Item(int idx);
    public bool G2C1F2401053010();
    public bool G2C1F24010530102D1725012211080614000B04();
    public bool G2C1F36041C300C1115130A2E();
    public string G2619153F00261A16171B072C();
    public string G3619031F0136000C02(int G1618001E010D0D1A, int G09090F0B012C);
    public virtual string ToString();
}
internal static class G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D2600081C172B0810013A0C27150807 : object {
    private static string G2D0900081036;
    public static string G3618001E01021B03021F0C2511;
    public static string G2002052A07250E0F001C1D;
    private static Char[] G3A0E1818100706170B06;
    private static G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D2600081C172B0810013A0C27150807();
    public static DataObject G261E040D01212D03111326290F081610(string G0D180C00, string G150000051B100C1A11);
    public static void G26031115212B2A0E0C020B24041F11(string G0D180C00, string G150000051B100C1A11);
    public static void G26031115212B2A0E0C020B24041F11(string G150000051B100C1A11);
    private static string G220915240129052604060818111F1C0A06(string G0D180C00);
    private static int G2209152E0C300C210A07073F(StringBuilder G160E, int G1618001E01, int G000205);
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D2700040211021C0C060600240B : ValueType {
    public byte G27000402110B19;
    public byte G27000402110205030201;
    public byte G3603141E16212A0D0B011D2A0B193408110000;
    public byte G240011041402061008131D;
    public G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D2700040211021C0C060600240B(byte alpha);
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D270515211434200C031D : ValueType {
    public int G070532050F21;
    public int G07053605113001;
    public int G070529091C230116;
    public short G07053100142A0C11;
    public short G07052305010706170B06;
    public int G0705220318341B07160100240B;
    public int G070532050F21200F04150C;
    public int G0705393C10281A320000242E110807;
    public int G0705383C10281A320000242E110807;
    public int G0705220007111A0701;
    public int G07052200070D04120A001D2A0B19;
    public byte G0701082F1A280610162D1B2C072F191104;
    public byte G0701082F1A280610162D1B2C072A07010406;
    public byte G0701082F1A280610162D1B2C073F1000;
    public byte G0701082F1A280610162D1B2C073F1017041A170B20;
}
internal static class G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D3018080006 : object {
    public static RPoint G26030F1A10361D(PointF G15);
    public static PointF[] G26030F1A10361D(RPoint[] G150308020137);
    public static PointF G26030F1A10361D(RPoint G15);
    public static Point G26030F1A10361D300A07072F(RPoint G15);
    public static RSize G26030F1A10361D(SizeF G16);
    public static SizeF G26030F1A10361D(RSize G16);
    public static Size G26030F1A10361D300A07072F(RSize G16);
    public static RRect G26030F1A10361D(RectangleF G17);
    public static RectangleF G26030F1A10361D(RRect G17);
    public static Rectangle G26030F1A10361D300A07072F(RRect G17);
    public static RColor G26030F1A10361D(Color G06);
    public static Color G26030F1A10361D(RColor G06);
    public static Graphics G261E040D01212E1004020122061E(Control G06030F18072B05);
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D3109191838211D100C11 : ValueType {
    public int G110129091C230116;
    public int G1101201F16210716;
    public int G1101250906270C0C11;
    public int G1101280201211B0C041E252E04091C0A06;
    public int G1101241401211B0C041E252E04091C0A06;
    public int G1101201A100701031725002F1105;
    public int G11012C0D0D0701031725002F1105;
    public int G110136091C230116;
    public int G11012E1A103601030B15;
    public int G11012505122D1D0B1F170D0A161D10071530;
    public int G11012505122D1D0B1F170D0A161D10071531;
    public char G1101270507371D210D131B;
    public char G11012D0D06302A0A0400;
    public char G1101250913251C0E1131012A17;
    public char G1101231E102502210D131B;
    public byte G1101281814280001;
    public byte G1101340211211B0E0C1C0C2F;
    public byte G1101321807310A092A071D;
    public byte G11013105012701230B162F2A0804191D;
    public byte G1101220414363A0711;
}
internal static class G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D32050F5F47111D0B0901 : object {
    public static int G321F230307200C10;
    public static int G321F2414362800070B062C2F0208;
    public static int G2705152E19302A0D150B;
    public static int G2705152E193039030C1C1D;
    public static int G3201320901071C10161D1B;
    public static int G2C080224142A0D;
    public static int G31091918342800050B360C2D04181910;
    public static int G31091918342800050B201D27;
    public static int G31091918342800050B30083800011C0A04;
    public static int G31091918342800050B30083800011C0A043A1502;
    public static int G3609152F00361A0D17(int G0D2F141E062B1B);
    public static int G2903000836311B110A00(int G0D250F1F0125070100, int G091C2219073706102B13042E);
    public static IntPtr G261E040D01212407081D1B322D0916(IntPtr G0D0802, int G120505181D, int G0D09080B1D30, IntPtr& G010503);
    public static void G37090D0914370C2F001F06391C251107(IntPtr G08090C03073D210606, IntPtr G010503);
    public static bool G2C1F36051B200615331B1A22070110(IntPtr G0D3B0F08);
    public static IntPtr G32050F081A332F100A1F2D08(IntPtr G0D0802);
    public static int G2209153B1C2A0D0D12200C2811(IntPtr G0D3B0F08, Rectangle& G091C33091630);
    public static Rectangle G2209153B1C2A0D0D12200C28110C1B030D0D(IntPtr G0D0D0F081921);
    public static bool G28031709222D07060A05(IntPtr G0D0D0F081921, int G1D, int G1C, int G120505181D, int G0D09080B1D30, bool G1709051E1433);
    public static int G36091538103C1D23091B0E25(IntPtr G0D0802, UInt32 G03210E0810);
    public static int G3609152E1E09060600(IntPtr G0D0802, int G08030509);
    public static IntPtr G36090D09163026000F170A3F(IntPtr G0D0802, IntPtr G0D0B05053A2603);
    public static UInt32 G36091538103C1D210A1E0639(IntPtr G0D0802, int G06030D0307);
    public static bool G22091538103C1D2F00061B22061E(IntPtr G0D0802, G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D3109191838211D100C11& G091C1501);
    public static int G22091538103C1D271D060C25113D1A0D0F1C525C(IntPtr G0D0802, string G161813, int G09090F, Size& G16051B09);
    public static bool G22091538103C1D271D060C2511280D340E010F1A(IntPtr G0D2802, string G161813, int G0B200402123001, int G0B210014303C1D070B06, Int32[] G091C0F2A1C30, Int32[] G040011280D, Size& G16051B09);
    public static bool G310919183A311D(IntPtr G0D0802, int G1D, int G1C, string G161813, int G09090F);
    public static IntPtr G261E040D01213B0706063B2C0B(int G0B20040A01160C0111, int G0B380E1C27210A16, int G0B3E080B1D303B070606, int G0B2E0E18012B043000111D);
    public static int G2209152F192D19200A0A(IntPtr G0D0802, Rectangle& G091C130F);
    public static int G36090D0916302A0E0C023B2C0B(IntPtr G0D0802, IntPtr G0D1E0602);
    public static bool G21090D09012126000F170A3F(IntPtr G0D23030610271D);
    public static bool G2705152E1930(IntPtr G0D0802, int G0B3425090630, int G0B3525090630, int G0B3B0808012C, int G0B240405122C1D, IntPtr G0D08023F0727, int G0B34321E16, int G0B35321E16, UInt32 G011B330305);
    public static bool G24001104140605070B16(IntPtr G0D08022810371D, int G0B342E1E1C23000C21171A3F, int G0B352E1E1C23000C21171A3F, int G0B3B0808012C2D071606, int G0B240405122C1D2600011D, IntPtr G0D08023F0727, int G0B342E1E1C23000C36000A, int G0B352E1E1C23000C36000A, int G0B3B0808012C3A1006, int G0B240405122C1D311711, G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D2700040211021C0C060600240B G0700040211021C0C060600240B);
    public static bool G21090D0901212D21(IntPtr G0D0802);
    public static IntPtr G261E040D01212A0D0802083F0C0F1901252B(IntPtr G0D0802);
    public static IntPtr G261E040D01212D2B27210C2811041A0A(IntPtr G0D0802, G3104042D0730260421171F03110019360406050B36041C65320B0B3404130512400C15070B211505041F7D270515211434200C031D& G150E0C05, UInt32 G0C39120D1221, IntPtr& G151C172E1C301A, IntPtr G0D3F040F012D060C, UInt32 G011B2E0A13370C16);
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242030002200814341D0717 : RPen {
    private Pen G3A1C0402;
    public Pen G35090F { get; }
    public double Width { get; public set; }
    unknown RDashStyle DashStyle {public set; }
    public G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242030002200814341D0717(Pen pen);
    public Pen get_Pen();
    public virtual double get_Width();
    public virtual void set_Width(double value);
    public virtual void set_DashStyle(RDashStyle value);
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242040C02270307291A230113193F001F : RAdapter {
    private static G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242040C02270307291A230113193F001F G3A050F1F0125070100;
    public static G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242040C02270307291A230113193F001F G2C021218142A0A07 { get; }
    private static G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242040C02270307291A230113193F001F();
    public static G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242040C02270307291A230113193F001F get_Instance();
    protected virtual RColor GetColorInt(string colorName);
    protected virtual RPen CreatePen(RColor color);
    protected virtual RBrush CreateSolidBrush(RColor color);
    protected virtual RBrush CreateLinearGradientBrush(RRect rect, RColor color1, RColor color2, double angle);
    protected virtual RImage ConvertImageInt(object image);
    protected virtual RImage ImageFromStreamInt(Stream memoryStream);
    protected virtual RFont CreateFontInt(string family, double size, RFontStyle style);
    protected virtual RFont CreateFontInt(RFontFamily family, double size, RFontStyle style);
    protected virtual object GetClipboardDataObjectInt(string html, string plainText);
    protected virtual void SetToClipboardInt(string text);
    protected virtual void SetToClipboardInt(string html, string plainText);
    protected virtual void SetToClipboardInt(RImage image);
    protected virtual RContextMenu CreateContextMenuInt();
    protected virtual void SaveToFileInt(RImage image, string name, string extension, RControl control);
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242100A0215090D3024070B07282F041D010113 : RContextMenu {
    private ContextMenuStrip G3A0F0E02012111162817073E;
    public int ItemsCount { get; }
    public virtual int get_ItemsCount();
    public virtual void AddDivider();
    public virtual void AddItem(string text, bool enabled, EventHandler onClick);
    public virtual void RemoveLastDivider();
    public virtual void Show(RControl parent, RPoint location);
    public virtual void Dispose();
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242100A02151E1A28280604021D2E17 : RControl {
    private Control G3A0F0E020136060E;
    private bool G3A1912093220003209071A1F001501360406050B3608002C;
    public Control G26030F18072B05 { get; }
    public RPoint MouseLocation { get; }
    public bool LeftMouseButton { get; }
    public bool RightMouseButton { get; }
    public G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242100A02151E1A28280604021D2E17(Control control, bool useGdiPlusTextRendering);
    public Control get_Control();
    public virtual RPoint get_MouseLocation();
    public virtual bool get_LeftMouseButton();
    public virtual bool get_RightMouseButton();
    public virtual void SetCursorDefault();
    public virtual void SetCursorHand();
    public virtual void SetCursorIBeam();
    public virtual void DoDragDropCopy(object dragDropData);
    public virtual void MeasureString(string str, RFont font, double maxWidth, Int32& charFit, Double& charFitWidth);
    public virtual void Invalidate();
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E124211171912043420081211171B : RBrush {
    private Brush G3A0E1319062C;
    private bool G3A08081F052B1A07;
    public Brush G271E141F1D { get; }
    public G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E124211171912043420081211171B(Brush brush, bool dispose);
    public Brush get_Brush();
    public virtual void Dispose();
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E124214170D11041C271A320406010A010C0510041A : RGraphicsPath {
    private GraphicsPath G3A0B130D052C00011622083F0D;
    private RPoint G3A00001F0114060B0B06;
    public GraphicsPath G221E001C1D2D0A1135131D23 { get; }
    public GraphicsPath get_GraphicsPath();
    public virtual void Start(double x, double y);
    public virtual void LineTo(double x, double y);
    public virtual void ArcTo(double x, double y, double size, Corner corner);
    public virtual void Dispose();
    private static int G2209153F01251B16241C0E2700(Corner G060313021036);
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242150A02152A1429000E1C330D2A15191016 : RFontFamily {
    private FontFamily G3A0A0E020102080F0C1E10;
    public FontFamily G23030F183325040B090B { get; }
    public string Name { get; }
    public G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242150A02152A1429000E1C330D2A15191016(FontFamily fontFamily);
    public FontFamily get_FontFamily();
    public virtual string get_Name();
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242150A02152D112519160000 : RFont {
    private Font G3A0A0E0201;
    private IntPtr G3A0427031B30;
    private float G3A190F081036050B0B17262D031E1010;
    private float G3A040405122C1D;
    private double G3A1B090501211A1204110C1C0C09010C;
    public Font G23030F18 { get; }
    public IntPtr G2D2A0E0201 { get; }
    public double Size { get; }
    public double UnderlineOffset { get; }
    public double Height { get; }
    public double LeftPadding { get; }
    public G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E1242150A02152D112519160000(Font font);
    public Font get_Font();
    public IntPtr get_HFont();
    public virtual double get_Size();
    public virtual double get_UnderlineOffset();
    public virtual double get_Height();
    public virtual double get_LeftPadding();
    public virtual double GetWhitespaceWidth(RGraphics graphics);
    internal void G3609152110301B0B0601(int G0D09080B1D30, int G100205090728000C003D0F2D160801);
}
internal class G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E12421A080D06093420081211171B : RImage {
    private Image G3A050C0D1221;
    public Image G2C01000B10 { get; }
    public double Width { get; }
    public double Height { get; }
    public G3104042D0730260421171F03110019360406050B36041C65320B0B34041305124018050F173C041E12421A080D06093420081211171B(Image image);
    public Image get_Image();
    public virtual double get_Width();
    public virtual double get_Height();
    public virtual void Dispose();
}
[CompilerGeneratedAttribute]
internal class G593C130503251D072C1F19270000100A150915072B0F2A2E11030C1E185F : object {
    internal static G593C130503251D072C1F19270000100A150915072B0F2A2E11030C1E185F473E310A150F1321022D131E321C250F05011010120021003100504452 G575C205844005E545D31280E53283025245D552C0750280E515423412D555E57566C5557517D542E565D10545B575940075F5052375B7C525A4554595F555D7D;
    internal static G593C130503251D072C1F19270000100A150915072B0F2A2E11030C1E185F473E310A150F1321022D131E321C250F05011010120021003100504750 G5728235F3406585520342A7C515B4151202B575702515F09515454472F275D57586F5157557B2755512F105058565837715F2651302B73535E4553202C525A01;
    internal static G593C130503251D072C1F19270000100A150915072B0F2A2E11030C1E185F473E310A150F1321022D131E321C250F05011010120021003100504750 G505C225E34055A5751342F7D5028375D2459525B73565E7B525754445A515D582C1C575F5E79222D2755625D2A272D4173282726345E0E235D3157202C555A05;
    internal static G593C130503251D072C1F19270000100A150915072B0F2A2E11030C1E185F473E310A150F1321022D131E321C250F05011010120021003100504452 G5C5B5859427C2D2426445F7A512F4D56225153597259560F532720425B525D522F18562D5070202A545D6B562F515C330550515645587A272F40215459205B76;
    internal static long G245F225933762D23504B5B785C5E455D5958555D002559735D2753312E272E232D69272D507E5929582D6B532A545D37702F235D40280E562F3456232E585972;
    internal static G593C130503251D072C1F19270000100A150915072B0F2A2E11030C1E185F473E310A150F1321022D131E321C250F05011010120021003100504452 G245A235E4C715A54514A2B7C5D2F4220572C575601575C78235450365A252B235D18252B577D565D575B175C5C532E4C72585321365E7E275D4C572329585973;
    internal static G593C130503251D072C1F19270000100A150915072B0F2A2E11030C1E185F473E310A150F1321022D131E321C250F05011010120021003100504652 G21555629477C505351372D0927294750522D585F75515B7D52515C445E562D225D61555C517B562D535A645629502D40755F505D302C0F215D45575158502D76;
    internal static long G235F222F437D28205C44580821594427592A222F7356580E275756422F592B55281C54575679275E512F6A5754505E4C712A5055402C0D26553656235A232D70;
    internal static UInt32 G26030C1C00300C31110000250225141709(string G16);
}
public enum Guna.UI2.AnimatorNS.AnimateMode : Enum {
    public int value__;
    public static AnimateMode Show;
    public static AnimateMode Hide;
    public static AnimateMode Update;
    public static AnimateMode BeginUpdate;
}
public class Guna.UI2.AnimatorNS.Animation : object {
    [CompilerGeneratedAttribute]
private PointF <SlideCoeff>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RotateCoeff>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RotateLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private PointF <ScaleCoeff>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TransparencyCoeff>k__BackingField;
    [CompilerGeneratedAttribute]
private float <LeafCoeff>k__BackingField;
    [CompilerGeneratedAttribute]
private PointF <MosaicShift>k__BackingField;
    [CompilerGeneratedAttribute]
private PointF <MosaicCoeff>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MosaicSize>k__BackingField;
    [CompilerGeneratedAttribute]
private PointF <BlindCoeff>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TimeCoeff>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MinTime>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Padding <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimateOnlyDifferences>k__BackingField;
    [DesignerSerializationVisibilityAttribute("1")]
[EditorBrowsableAttribute("2")]
[TypeConverterAttribute("Guna.UI2.AnimatorNS.PointFConverter")]
public PointF SlideCoeff { get; public set; }
    public float RotateCoeff { get; public set; }
    public float RotateLimit { get; public set; }
    [DesignerSerializationVisibilityAttribute("1")]
[EditorBrowsableAttribute("2")]
[TypeConverterAttribute("Guna.UI2.AnimatorNS.PointFConverter")]
public PointF ScaleCoeff { get; public set; }
    public float TransparencyCoeff { get; public set; }
    public float LeafCoeff { get; public set; }
    [DesignerSerializationVisibilityAttribute("1")]
[EditorBrowsableAttribute("2")]
[TypeConverterAttribute("Guna.UI2.AnimatorNS.PointFConverter")]
public PointF MosaicShift { get; public set; }
    [DesignerSerializationVisibilityAttribute("1")]
[EditorBrowsableAttribute("2")]
[TypeConverterAttribute("Guna.UI2.AnimatorNS.PointFConverter")]
public PointF MosaicCoeff { get; public set; }
    public int MosaicSize { get; public set; }
    [DesignerSerializationVisibilityAttribute("1")]
[EditorBrowsableAttribute("2")]
[TypeConverterAttribute("Guna.UI2.AnimatorNS.PointFConverter")]
public PointF BlindCoeff { get; public set; }
    public float TimeCoeff { get; public set; }
    public float MinTime { get; public set; }
    public float MaxTime { get; public set; }
    public Padding Padding { get; public set; }
    public bool AnimateOnlyDifferences { get; public set; }
    public bool IsNonLinearTransformNeeded { get; }
    public static Animation Rotate { get; }
    public static Animation HorizSlide { get; }
    public static Animation VertSlide { get; }
    public static Animation Scale { get; }
    public static Animation ScaleAndRotate { get; }
    public static Animation HorizSlideAndRotate { get; }
    public static Animation ScaleAndHorizSlide { get; }
    public static Animation Transparent { get; }
    public static Animation Leaf { get; }
    public static Animation Mosaic { get; }
    public static Animation Particles { get; }
    public static Animation VertBlind { get; }
    public static Animation HorizBlind { get; }
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public PointF get_SlideCoeff();
    [CompilerGeneratedAttribute]
public void set_SlideCoeff(PointF value);
    [CompilerGeneratedAttribute]
public float get_RotateCoeff();
    [CompilerGeneratedAttribute]
public void set_RotateCoeff(float value);
    [CompilerGeneratedAttribute]
public float get_RotateLimit();
    [CompilerGeneratedAttribute]
public void set_RotateLimit(float value);
    [CompilerGeneratedAttribute]
public PointF get_ScaleCoeff();
    [CompilerGeneratedAttribute]
public void set_ScaleCoeff(PointF value);
    [CompilerGeneratedAttribute]
public float get_TransparencyCoeff();
    [CompilerGeneratedAttribute]
public void set_TransparencyCoeff(float value);
    [CompilerGeneratedAttribute]
public float get_LeafCoeff();
    [CompilerGeneratedAttribute]
public void set_LeafCoeff(float value);
    [CompilerGeneratedAttribute]
public PointF get_MosaicShift();
    [CompilerGeneratedAttribute]
public void set_MosaicShift(PointF value);
    [CompilerGeneratedAttribute]
public PointF get_MosaicCoeff();
    [CompilerGeneratedAttribute]
public void set_MosaicCoeff(PointF value);
    [CompilerGeneratedAttribute]
public int get_MosaicSize();
    [CompilerGeneratedAttribute]
public void set_MosaicSize(int value);
    [CompilerGeneratedAttribute]
public PointF get_BlindCoeff();
    [CompilerGeneratedAttribute]
public void set_BlindCoeff(PointF value);
    [CompilerGeneratedAttribute]
public float get_TimeCoeff();
    [CompilerGeneratedAttribute]
public void set_TimeCoeff(float value);
    [CompilerGeneratedAttribute]
public float get_MinTime();
    [CompilerGeneratedAttribute]
public void set_MinTime(float value);
    [CompilerGeneratedAttribute]
public float get_MaxTime();
    [CompilerGeneratedAttribute]
public void set_MaxTime(float value);
    [CompilerGeneratedAttribute]
public Padding get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(Padding value);
    [CompilerGeneratedAttribute]
public bool get_AnimateOnlyDifferences();
    [CompilerGeneratedAttribute]
public void set_AnimateOnlyDifferences(bool value);
    public bool get_IsNonLinearTransformNeeded();
    public Animation Clone();
    public static Animation get_Rotate();
    public static Animation get_HorizSlide();
    public static Animation get_VertSlide();
    public static Animation get_Scale();
    public static Animation get_ScaleAndRotate();
    public static Animation get_HorizSlideAndRotate();
    public static Animation get_ScaleAndHorizSlide();
    public static Animation get_Transparent();
    public static Animation get_Leaf();
    public static Animation get_Mosaic();
    public static Animation get_Particles();
    public static Animation get_VertBlind();
    public static Animation get_HorizBlind();
    public void Add(Animation a);
}
public class Guna.UI2.AnimatorNS.AnimationCompletedEventArg : EventArgs {
    [CompilerGeneratedAttribute]
private Animation <Animation>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimateMode <Mode>k__BackingField;
    public Animation Animation { get; public set; }
    public Control Control { get; internal set; }
    public AnimateMode Mode { get; internal set; }
    [CompilerGeneratedAttribute]
public Animation get_Animation();
    [CompilerGeneratedAttribute]
public void set_Animation(Animation value);
    [CompilerGeneratedAttribute]
public Control get_Control();
    [CompilerGeneratedAttribute]
internal void set_Control(Control value);
    [CompilerGeneratedAttribute]
public AnimateMode get_Mode();
    [CompilerGeneratedAttribute]
internal void set_Mode(AnimateMode value);
}
public enum Guna.UI2.AnimatorNS.AnimationType : Enum {
    public int value__;
    public static AnimationType Custom;
    public static AnimationType Rotate;
    public static AnimationType HorizSlide;
    public static AnimationType VertSlide;
    public static AnimationType Scale;
    public static AnimationType ScaleAndRotate;
    public static AnimationType HorizSlideAndRotate;
    public static AnimationType ScaleAndHorizSlide;
    public static AnimationType Transparent;
    public static AnimationType Leaf;
    public static AnimationType Mosaic;
    public static AnimationType Particles;
    public static AnimationType VertBlind;
    public static AnimationType HorizBlind;
}
[ProvidePropertyAttribute("Decoration", "System.Windows.Forms.Control")]
[ToolboxItemAttribute("False")]
public class Guna.UI2.AnimatorNS.Animator : Component {
    protected List`1<QueueItem> queue;
    private Thread thread;
    private Timer timer;
    [CompilerGeneratedAttribute]
private EventHandler`1<AnimationCompletedEventArg> AnimationCompleted;
    [CompilerGeneratedAttribute]
private EventHandler AllAnimationsCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<TransfromNeededEventArg> TransfromNeeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<NonLinearTransfromNeededEventArg> NonLinearTransfromNeeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseEventArgs> MouseDown;
    [CompilerGeneratedAttribute]
private EventHandler`1<PaintEventArgs> FramePainted;
    [CompilerGeneratedAttribute]
private int <MaxAnimationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Animation <DefaultAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private Cursor <Cursor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Interval>k__BackingField;
    private AnimationType animationType;
    private Control invokerControl;
    [CompilerGeneratedAttribute]
private float <TimeStep>k__BackingField;
    private List`1<QueueItem> requests;
    private Dictionary`2<Control, G22190F0D5B1120504B330722080C010B1326324000040D241703111B040F2B0E002D13010B> DecorationByControls;
    [DefaultValueAttribute("1500")]
public int MaxAnimationTime { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DefaultValueAttribute("")]
public Animation DefaultAnimation { get; public set; }
    [DefaultValueAttribute("System.Windows.Forms.Cursor", "Default")]
public Cursor Cursor { get; public set; }
    public bool IsCompleted { get; }
    [DefaultValueAttribute("10")]
public int Interval { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AnimationType AnimationType { get; public set; }
    [DefaultValueAttribute("0,02")]
public float TimeStep { get; public set; }
    public Animator(IContainer container);
    [CompilerGeneratedAttribute]
public void add_AnimationCompleted(EventHandler`1<AnimationCompletedEventArg> value);
    [CompilerGeneratedAttribute]
public void remove_AnimationCompleted(EventHandler`1<AnimationCompletedEventArg> value);
    [CompilerGeneratedAttribute]
public void add_AllAnimationsCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AllAnimationsCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void remove_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void add_NonLinearTransfromNeeded(EventHandler`1<NonLinearTransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void remove_NonLinearTransfromNeeded(EventHandler`1<NonLinearTransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void add_MouseDown(EventHandler`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseDown(EventHandler`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_FramePainted(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FramePainted(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public int get_MaxAnimationTime();
    [CompilerGeneratedAttribute]
public void set_MaxAnimationTime(int value);
    [CompilerGeneratedAttribute]
public Animation get_DefaultAnimation();
    [CompilerGeneratedAttribute]
public void set_DefaultAnimation(Animation value);
    [CompilerGeneratedAttribute]
public Cursor get_Cursor();
    [CompilerGeneratedAttribute]
public void set_Cursor(Cursor value);
    public bool get_IsCompleted();
    [CompilerGeneratedAttribute]
public int get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(int value);
    public AnimationType get_AnimationType();
    public void set_AnimationType(AnimationType value);
    protected virtual void Init();
    private void Start();
    private void timer_Tick(object sender, EventArgs e);
    private void Animator_Disposed(object sender, EventArgs e);
    private void Work();
    private void CheckRequests();
    private bool IsStateOK(Control control, AnimateMode mode);
    private void RepairState(Control control, AnimateMode mode);
    private void DoAnimation(QueueItem item);
    private void InitDefaultAnimation(AnimationType animationType);
    [CompilerGeneratedAttribute]
public float get_TimeStep();
    [CompilerGeneratedAttribute]
public void set_TimeStep(float value);
    public void Show(Control control, bool parallel, Animation animation);
    public void ShowSync(Control control, bool parallel, Animation animation);
    public void Hide(Control control, bool parallel, Animation animation);
    public void HideSync(Control control, bool parallel, Animation animation);
    public void BeginUpdate(Control control, bool parallel, Animation animation, Rectangle clipRectangle);
    public void EndUpdate(Control control);
    public void EndUpdateSync(Control control);
    public void WaitAllAnimations();
    public void WaitAnimation(Control animatedControl);
    private void OnCompleted(QueueItem item);
    public void AddToQueue(Control control, AnimateMode mode, bool parallel, Animation animation, Rectangle clipRectangle);
    private Controller CreateDoubleBitmap(Control control, AnimateMode mode, Animation animation, Rectangle clipRect);
    private void OnFramePainted(object sender, PaintEventArgs e);
    protected virtual void OnMouseDown(object sender, MouseEventArgs e);
    protected virtual void OnNonLinearTransfromNeeded(object sender, NonLinearTransfromNeededEventArg e);
    protected virtual void OnTransformNeeded(object sender, TransfromNeededEventArg e);
    public void ClearQueue();
    protected virtual void OnAnimationCompleted(AnimationCompletedEventArg e);
    protected virtual void OnAllAnimationsCompleted();
    public DecorationType GetDecoration(Control control);
    public void SetDecoration(Control control, DecorationType decoration);
    public sealed virtual bool CanExtend(object extendee);
}
public class Guna.UI2.AnimatorNS.Controller : object {
    protected Bitmap ctrlBmp;
    [CompilerGeneratedAttribute]
private float <CurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TimeStep>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<TransfromNeededEventArg> TransfromNeeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<NonLinearTransfromNeededEventArg> NonLinearTransfromNeeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<PaintEventArgs> FramePainting;
    [CompilerGeneratedAttribute]
private EventHandler`1<PaintEventArgs> FramePainted;
    [CompilerGeneratedAttribute]
private EventHandler`1<MouseEventArgs> MouseDown;
    [CompilerGeneratedAttribute]
private Control <DoubleBitmap>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <AnimatedControl>k__BackingField;
    private Point[] buffer;
    private Byte[] pixelsBuffer;
    protected Rectangle CustomClipRect;
    private AnimateMode mode;
    private Animation animation;
    protected Bitmap BgBmp { get; protected set; }
    public Bitmap Frame { get; public set; }
    public float CurrentTime { get; private set; }
    protected float TimeStep { get; private set; }
    public Control DoubleBitmap { get; private set; }
    public Control AnimatedControl { get; public set; }
    public bool IsCompleted { get; }
    public Controller(Control control, AnimateMode mode, Animation animation, float timeStep, Rectangle controlClipRect);
    protected Bitmap get_BgBmp();
    protected void set_BgBmp(Bitmap value);
    public Bitmap get_Frame();
    public void set_Frame(Bitmap value);
    [CompilerGeneratedAttribute]
public float get_CurrentTime();
    [CompilerGeneratedAttribute]
private void set_CurrentTime(float value);
    [CompilerGeneratedAttribute]
protected float get_TimeStep();
    [CompilerGeneratedAttribute]
private void set_TimeStep(float value);
    [CompilerGeneratedAttribute]
public void add_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void remove_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void add_NonLinearTransfromNeeded(EventHandler`1<NonLinearTransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void remove_NonLinearTransfromNeeded(EventHandler`1<NonLinearTransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public void add_FramePainting(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FramePainting(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_FramePainted(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FramePainted(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_MouseDown(EventHandler`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MouseDown(EventHandler`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public Control get_DoubleBitmap();
    [CompilerGeneratedAttribute]
private void set_DoubleBitmap(Control value);
    [CompilerGeneratedAttribute]
public Control get_AnimatedControl();
    [CompilerGeneratedAttribute]
public void set_AnimatedControl(Control value);
    public void Dispose();
    public void Hide();
    protected virtual Rectangle GetBounds();
    protected virtual Rectangle ControlRectToMyRect(Rectangle rect);
    protected virtual void OnMouseDown(object sender, MouseEventArgs e);
    protected virtual void OnFramePainting(object sender, PaintEventArgs e);
    protected virtual void OnFramePainted(object sender, PaintEventArgs e);
    protected virtual Bitmap GetBackground(Control ctrl, bool includeForeground, bool clip);
    private Bitmap GetScreenBackground(Control ctrl, bool includeForeground, bool clip);
    protected virtual Bitmap GetForeground(Control ctrl);
    protected virtual void OnTransfromNeeded(object sender, TransfromNeededEventArg e);
    protected virtual Bitmap OnNonLinearTransfromNeeded();
    public void EndUpdate();
    public bool get_IsCompleted();
    internal void BuildNextFrame();
    [CompilerGeneratedAttribute]
private void <Hide>b__44_0();
}
public enum Guna.UI2.AnimatorNS.DecorationType : Enum {
    public int value__;
    public static DecorationType None;
    public static DecorationType BottomMirror;
    public static DecorationType Custom;
}
[ToolboxItemAttribute("False")]
public class Guna.UI2.AnimatorNS.DoubleBitmapControl : Control {
    private Bitmap bgBmp;
    private Bitmap frame;
    [CompilerGeneratedAttribute]
private EventHandler`1<TransfromNeededEventArg> TransfromNeeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<PaintEventArgs> FramePainted;
    [CompilerGeneratedAttribute]
private EventHandler`1<PaintEventArgs> FramePainting;
    private IContainer components;
    private Bitmap Guna.UI2.AnimatorNS.IFakeControl.BgBmp { get; private set; }
    private Bitmap Guna.UI2.AnimatorNS.IFakeControl.Frame { get; private set; }
    private sealed virtual override Bitmap Guna.UI2.AnimatorNS.IFakeControl.get_BgBmp();
    private sealed virtual override void Guna.UI2.AnimatorNS.IFakeControl.set_BgBmp(Bitmap value);
    private sealed virtual override Bitmap Guna.UI2.AnimatorNS.IFakeControl.get_Frame();
    private sealed virtual override void Guna.UI2.AnimatorNS.IFakeControl.set_Frame(Bitmap value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FramePainted(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FramePainted(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FramePainting(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FramePainting(EventHandler`1<PaintEventArgs> value);
    protected virtual void OnPaint(PaintEventArgs e);
    private void OnTransfromNeeded(TransfromNeededEventArg ea);
    protected virtual void OnFramePainting(PaintEventArgs e);
    protected virtual void OnFramePainted(PaintEventArgs e);
    public sealed virtual void InitParent(Control control, Padding padding);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public class Guna.UI2.AnimatorNS.DoubleBitmapForm : Form {
    private Bitmap bgBmp;
    private Bitmap frame;
    [CompilerGeneratedAttribute]
private EventHandler`1<TransfromNeededEventArg> TransfromNeeded;
    private Padding padding;
    private Control control;
    private Point controlLocation;
    [CompilerGeneratedAttribute]
private EventHandler`1<PaintEventArgs> FramePainting;
    [CompilerGeneratedAttribute]
private EventHandler`1<PaintEventArgs> FramePainted;
    private IContainer components;
    protected CreateParams CreateParams { get; }
    public Bitmap BgBmp { get; public set; }
    public Bitmap Frame { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    protected virtual CreateParams get_CreateParams();
    protected virtual void OnPaint(PaintEventArgs e);
    private void OnTransfromNeeded(TransfromNeededEventArg ea);
    protected virtual void OnFramePainting(PaintEventArgs e);
    protected virtual void OnFramePainted(PaintEventArgs e);
    public sealed virtual void InitParent(Control control, Padding padding);
    private void control_VisibleChanged(object sender, EventArgs e);
    public sealed virtual Bitmap get_BgBmp();
    public sealed virtual void set_BgBmp(Bitmap value);
    public sealed virtual Bitmap get_Frame();
    public sealed virtual void set_Frame(Bitmap value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FramePainting(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FramePainting(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FramePainted(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FramePainted(EventHandler`1<PaintEventArgs> value);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public static class Guna.UI2.AnimatorNS.Flags : object {
}
public interface Guna.UI2.AnimatorNS.IFakeControl {
    public Bitmap BgBmp { get; public set; }
    public Bitmap Frame { get; public set; }
    public abstract virtual Bitmap get_BgBmp();
    public abstract virtual void set_BgBmp(Bitmap value);
    public abstract virtual Bitmap get_Frame();
    public abstract virtual void set_Frame(Bitmap value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransfromNeeded(EventHandler`1<TransfromNeededEventArg> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FramePainting(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FramePainting(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FramePainted(EventHandler`1<PaintEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FramePainted(EventHandler`1<PaintEventArgs> value);
    public abstract virtual void InitParent(Control animatedControl, Padding padding);
}
public class Guna.UI2.AnimatorNS.NonLinearTransfromNeededEventArg : EventArgs {
    [CompilerGeneratedAttribute]
private float <CurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ClientRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Pixels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Stride>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <SourceClientRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SourcePixels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceStride>k__BackingField;
    [CompilerGeneratedAttribute]
private Animation <Animation>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimateMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultTransform>k__BackingField;
    public float CurrentTime { get; internal set; }
    public Rectangle ClientRectangle { get; internal set; }
    public Byte[] Pixels { get; internal set; }
    public int Stride { get; internal set; }
    public Rectangle SourceClientRectangle { get; internal set; }
    public Byte[] SourcePixels { get; internal set; }
    public int SourceStride { get; public set; }
    public Animation Animation { get; public set; }
    public Control Control { get; internal set; }
    public AnimateMode Mode { get; internal set; }
    public bool UseDefaultTransform { get; public set; }
    [CompilerGeneratedAttribute]
public float get_CurrentTime();
    [CompilerGeneratedAttribute]
internal void set_CurrentTime(float value);
    [CompilerGeneratedAttribute]
public Rectangle get_ClientRectangle();
    [CompilerGeneratedAttribute]
internal void set_ClientRectangle(Rectangle value);
    [CompilerGeneratedAttribute]
public Byte[] get_Pixels();
    [CompilerGeneratedAttribute]
internal void set_Pixels(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Stride();
    [CompilerGeneratedAttribute]
internal void set_Stride(int value);
    [CompilerGeneratedAttribute]
public Rectangle get_SourceClientRectangle();
    [CompilerGeneratedAttribute]
internal void set_SourceClientRectangle(Rectangle value);
    [CompilerGeneratedAttribute]
public Byte[] get_SourcePixels();
    [CompilerGeneratedAttribute]
internal void set_SourcePixels(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_SourceStride();
    [CompilerGeneratedAttribute]
public void set_SourceStride(int value);
    [CompilerGeneratedAttribute]
public Animation get_Animation();
    [CompilerGeneratedAttribute]
public void set_Animation(Animation value);
    [CompilerGeneratedAttribute]
public Control get_Control();
    [CompilerGeneratedAttribute]
internal void set_Control(Control value);
    [CompilerGeneratedAttribute]
public AnimateMode get_Mode();
    [CompilerGeneratedAttribute]
internal void set_Mode(AnimateMode value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultTransform();
    [CompilerGeneratedAttribute]
public void set_UseDefaultTransform(bool value);
}
public class Guna.UI2.AnimatorNS.PointFConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public static class Guna.UI2.AnimatorNS.TransfromHelper : object {
    private static int bytesPerPixel;
    private static Random rnd;
    private static TransfromHelper();
    public static void DoScale(TransfromNeededEventArg e, Animation animation);
    public static void DoSlide(TransfromNeededEventArg e, Animation animation);
    public static void DoBlind(NonLinearTransfromNeededEventArg e, Animation animation);
    public static void DoMosaic(NonLinearTransfromNeededEventArg e, Animation animation, Point[]& buffer, Byte[]& pixelsBuffer);
    public static void DoLeaf(NonLinearTransfromNeededEventArg e, Animation animation);
    public static void DoTransparent(NonLinearTransfromNeededEventArg e, Animation animation);
    public static void CalcDifference(Bitmap bmp1, Bitmap bmp2);
    public static void DoRotate(TransfromNeededEventArg e, Animation animation);
    public static void DoBottomMirror(NonLinearTransfromNeededEventArg e);
    public static void DoBlur(NonLinearTransfromNeededEventArg e, int r);
}
public class Guna.UI2.AnimatorNS.TransfromNeededEventArg : EventArgs {
    [CompilerGeneratedAttribute]
private Matrix <Matrix>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ClientRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ClipRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private Animation <Animation>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimateMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultMatrix>k__BackingField;
    public Matrix Matrix { get; public set; }
    public float CurrentTime { get; internal set; }
    public Rectangle ClientRectangle { get; internal set; }
    public Rectangle ClipRectangle { get; internal set; }
    public Animation Animation { get; public set; }
    public Control Control { get; internal set; }
    public AnimateMode Mode { get; internal set; }
    public bool UseDefaultMatrix { get; public set; }
    [CompilerGeneratedAttribute]
public Matrix get_Matrix();
    [CompilerGeneratedAttribute]
public void set_Matrix(Matrix value);
    [CompilerGeneratedAttribute]
public float get_CurrentTime();
    [CompilerGeneratedAttribute]
internal void set_CurrentTime(float value);
    [CompilerGeneratedAttribute]
public Rectangle get_ClientRectangle();
    [CompilerGeneratedAttribute]
internal void set_ClientRectangle(Rectangle value);
    [CompilerGeneratedAttribute]
public Rectangle get_ClipRectangle();
    [CompilerGeneratedAttribute]
internal void set_ClipRectangle(Rectangle value);
    [CompilerGeneratedAttribute]
public Animation get_Animation();
    [CompilerGeneratedAttribute]
public void set_Animation(Animation value);
    [CompilerGeneratedAttribute]
public Control get_Control();
    [CompilerGeneratedAttribute]
internal void set_Control(Control value);
    [CompilerGeneratedAttribute]
public AnimateMode get_Mode();
    [CompilerGeneratedAttribute]
internal void set_Mode(AnimateMode value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultMatrix();
    [CompilerGeneratedAttribute]
public void set_UseDefaultMatrix(bool value);
}
public class Guna.UI2.Designer.ButtonDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.CheckBoxDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.CircleButtonDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.CirclePictureBoxDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.CircleProgressBarDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.ComboBoxDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.CustomCheckBoxDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.CustomRadioButtonDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.DateTimePickerDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.GradientButtonDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.GradientCircleButtonDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.ImageButtonDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.ImageCheckBoxDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.ImageRadioButtonDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.NumericUpDownDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.PictureBoxDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.ProgressIndicatorDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.RadioButtonDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.ScrollBarDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.SeparatorDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.ShapesDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.TextBoxDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public class Guna.UI2.Designer.TrackBarDesigner : ControlDesigner {
    private DesignerActionListCollection actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual DesignerActionListCollection get_ActionLists();
}
public static class Guna.UI2.Material.Animation.AnimationCustomQuadratic : object {
    public static double CalculateProgress(double progress);
}
public enum Guna.UI2.Material.Animation.AnimationDirection : Enum {
    public int value__;
    public static AnimationDirection In;
    public static AnimationDirection Out;
    public static AnimationDirection InOutIn;
    public static AnimationDirection InOutOut;
    public static AnimationDirection InOutRepeatingIn;
    public static AnimationDirection InOutRepeatingOut;
}
public static class Guna.UI2.Material.Animation.AnimationEaseInOut : object {
    public static double PI;
    public static double PI_HALF;
    private static AnimationEaseInOut();
    public static double CalculateProgress(double progress);
    private static double EaseInOut(double s);
}
public static class Guna.UI2.Material.Animation.AnimationEaseOut : object {
    public static double CalculateProgress(double progress);
}
public static class Guna.UI2.Material.Animation.AnimationLinear : object {
    public static double CalculateProgress(double progress);
}
public class Guna.UI2.Material.Animation.AnimationManager : object {
    [CompilerGeneratedAttribute]
private bool <InterruptAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Increment>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SecondaryIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimationType <AnimationType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Singular>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimationFinished OnAnimationFinished;
    [CompilerGeneratedAttribute]
private AnimationProgress OnAnimationProgress;
    private List`1<double> _animationProgresses;
    private List`1<Point> _animationSources;
    private List`1<AnimationDirection> _animationDirections;
    private List`1<Object[]> _animationDatas;
    private static double MIN_VALUE;
    private static double MAX_VALUE;
    private Timer _animationTimer;
    public bool InterruptAnimation { get; public set; }
    public double Increment { get; public set; }
    public double SecondaryIncrement { get; public set; }
    public AnimationType AnimationType { get; public set; }
    public bool Singular { get; public set; }
    public AnimationManager(bool singular);
    [CompilerGeneratedAttribute]
public bool get_InterruptAnimation();
    [CompilerGeneratedAttribute]
public void set_InterruptAnimation(bool value);
    [CompilerGeneratedAttribute]
public double get_Increment();
    [CompilerGeneratedAttribute]
public void set_Increment(double value);
    [CompilerGeneratedAttribute]
public double get_SecondaryIncrement();
    [CompilerGeneratedAttribute]
public void set_SecondaryIncrement(double value);
    [CompilerGeneratedAttribute]
public AnimationType get_AnimationType();
    [CompilerGeneratedAttribute]
public void set_AnimationType(AnimationType value);
    [CompilerGeneratedAttribute]
public bool get_Singular();
    [CompilerGeneratedAttribute]
public void set_Singular(bool value);
    [CompilerGeneratedAttribute]
public void add_OnAnimationFinished(AnimationFinished value);
    [CompilerGeneratedAttribute]
public void remove_OnAnimationFinished(AnimationFinished value);
    [CompilerGeneratedAttribute]
public void add_OnAnimationProgress(AnimationProgress value);
    [CompilerGeneratedAttribute]
public void remove_OnAnimationProgress(AnimationProgress value);
    private void AnimationTimerOnTick(object sender, EventArgs eventArgs);
    public bool IsAnimating();
    public void StartNewAnimation(AnimationDirection animationDirection, Object[] data);
    public void StartNewAnimation(AnimationDirection animationDirection, Point animationSource, Object[] data);
    public void UpdateProgress(int index);
    private void IncrementProgress(int index);
    private void DecrementProgress(int index);
    public double GetProgress();
    public int GetIntPercentage();
    public double GetColorProgress();
    public double GetProgress(int index);
    public Point GetSource(int index);
    public Point GetSource();
    public AnimationDirection GetDirection();
    public AnimationDirection GetDirection(int index);
    public Object[] GetData();
    public Object[] GetData(int index);
    public int GetAnimationCount();
    public void SetProgress(double progress);
    public void SetDirection(AnimationDirection direction);
    public void SetData(Object[] data);
}
public enum Guna.UI2.Material.Animation.AnimationType : Enum {
    public int value__;
    public static AnimationType Linear;
    public static AnimationType EaseInOut;
    public static AnimationType EaseOut;
    public static AnimationType CustomQuadratic;
}
[SuppressUnmanagedCodeSecurityAttribute]
public static class Guna.UI2.Native.WinApi : object {
    public static int Autohide;
    public static int AlwaysOnTop;
    public static int MfByposition;
    public static int MfRemove;
    public static int TCM_HITTEST;
    public static int ULW_COLORKEY;
    public static int ULW_ALPHA;
    public static int ULW_OPAQUE;
    public static byte AC_SRC_OVER;
    public static byte AC_SRC_ALPHA;
    public static int GW_HWNDFIRST;
    public static int GW_HWNDLAST;
    public static int GW_HWNDNEXT;
    public static int GW_HWNDPREV;
    public static int GW_OWNER;
    public static int GW_CHILD;
    public static int HC_ACTION;
    public static int WH_CALLWNDPROC;
    public static int GWL_WNDPROC;
    public static int GetScrollPos(IntPtr hWnd, int nBar);
    public static int SetScrollPos(IntPtr hWnd, int nBar, int nPos, bool bRedraw);
    public static bool PostMessageA(IntPtr hwnd, int wMsg, int wParam, int lParam);
    public static IntPtr CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
    public static bool AnimateWindow(IntPtr hwnd, int dwTime, int dwFlags);
    public static Bool UpdateLayeredWindow(IntPtr hwnd, IntPtr hdcDst, POINT& pptDst, SIZE& psize, IntPtr hdcSrc, POINT& pprSrc, int crKey, BLENDFUNCTION& pblend, int dwFlags);
    public static IntPtr GetDC(IntPtr hWnd);
    public static IntPtr CreateCompatibleDC(IntPtr hDC);
    public static Bool DeleteDC(IntPtr hdc);
    public static IntPtr SelectObject(IntPtr hDC, IntPtr hObject);
    public static Bool DeleteObject(IntPtr hObject);
    public static UInt32 GetWindowLong(IntPtr hWnd, int nIndex);
    public static int SetWindowLong(IntPtr hWnd, int nIndex, UInt32 dwNewLong);
    public static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int W, int H, UInt32 uFlags);
    public static IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
    public static int GetMenuItemCount(IntPtr hMenu);
    public static bool DrawMenuBar(IntPtr hWnd);
    public static bool RemoveMenu(IntPtr hMenu, UInt32 uPosition, UInt32 uFlags);
    public static bool ReleaseCapture();
    public static IntPtr SetCapture(IntPtr hWnd);
    public static int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);
    public static int SendMessage(IntPtr wnd, int msg, bool param, int lparam);
    public static IntPtr SHAppBarMessage(ABM dwMessage, APPBARDATA& pData);
    public static IntPtr FindWindow(string lpClassName, string lpWindowName);
    public static bool SetForegroundWindow(IntPtr hWnd);
    public static IntPtr GetDCEx(IntPtr hwnd, IntPtr hrgnclip, UInt32 fdwOptions);
    public static bool ShowScrollBar(IntPtr hWnd, int bar, int cmd);
    public static IntPtr GetWindowDC(IntPtr handle);
    public static IntPtr ReleaseDC(IntPtr handle, IntPtr hDC);
    public static int GetClassName(IntPtr hwnd, Char[] className, int maxCount);
    public static IntPtr GetWindow(IntPtr hwnd, int uCmd);
    public static bool IsWindowVisible(IntPtr hwnd);
    public static int GetClientRect(IntPtr hwnd, RECT& lpRect);
    public static int GetClientRect(IntPtr hwnd, Rectangle& rect);
    public static bool MoveWindow(IntPtr hwnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);
    public static bool UpdateWindow(IntPtr hwnd);
    public static bool InvalidateRect(IntPtr hwnd, Rectangle& rect, bool bErase);
    public static bool ValidateRect(IntPtr hwnd, Rectangle& rect);
    internal static bool GetWindowRect(IntPtr hWnd, Rectangle& rect);
    public static int LoWord(int dwValue);
    public static int HiWord(int dwValue);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Guna.UI2.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static Bitmap ce_48px { get; }
    internal static Bitmap CheckedCheckbox_20px { get; }
    internal static Bitmap CheckedRadioButton_20px { get; }
    internal static Bitmap curv3 { get; }
    internal static Bitmap curv3_w { get; }
    internal static Bitmap error { get; }
    internal static Bitmap FullImage_64px { get; }
    internal static Bitmap ImageCalendar { get; }
    internal static Bitmap info { get; }
    internal static Bitmap logo { get; }
    internal static Bitmap logo_w { get; }
    internal static Bitmap miring { get; }
    internal static Bitmap question { get; }
    internal static Bitmap UncheckedCheckbox_20px { get; }
    internal static Bitmap UncheckedRadioButton_20px { get; }
    internal static Bitmap warning { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static Bitmap get_ce_48px();
    internal static Bitmap get_CheckedCheckbox_20px();
    internal static Bitmap get_CheckedRadioButton_20px();
    internal static Bitmap get_curv3();
    internal static Bitmap get_curv3_w();
    internal static Bitmap get_error();
    internal static Bitmap get_FullImage_64px();
    internal static Bitmap get_ImageCalendar();
    internal static Bitmap get_info();
    internal static Bitmap get_logo();
    internal static Bitmap get_logo_w();
    internal static Bitmap get_miring();
    internal static Bitmap get_question();
    internal static Bitmap get_UncheckedCheckbox_20px();
    internal static Bitmap get_UncheckedRadioButton_20px();
    internal static Bitmap get_warning();
}
internal class Guna.UI2.WinForms.BindListView : BindScroll {
    private ListView container;
    private Control scrollBar;
    private G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F33233908202C233D currentInfo;
    private int oldValue;
    protected bool ShowScrollBar { get; }
    protected virtual bool get_ShowScrollBar();
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    public virtual void Dispose();
    protected virtual void OnValueChanged(EventArgs e);
    public virtual void Update();
}
internal class Guna.UI2.WinForms.BindScroll : NativeWindow {
    private Control Container;
    private Control ScrollBar;
    private Timer timer;
    private bool ignoreScroll;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private ScrollOrientation <Orientation>k__BackingField;
    private static UInt32 WM_VSCROLL;
    private static UInt32 WM_HSCROLL;
    private static UInt32 LVM_FIRST;
    private static UInt32 LVM_INSERTITEMA;
    private static UInt32 LVM_INSERTITEMW;
    private static UInt32 LVM_DELETEITEM;
    private static UInt32 LVM_DELETEALLITEMS;
    protected bool CanAccessScrollBar { get; }
    protected bool CanAccessContainer { get; }
    protected bool CanUpdate { get; }
    protected ScrollOrientation Orientation { get; private set; }
    protected bool ShowScrollBar { get; }
    internal void SetAutoUpdate(bool start, int interval);
    public virtual void Initialize(Control scrollBar, Control container, ScrollOrientation orientation);
    protected virtual void OnLoad(EventArgs e);
    public virtual void Dispose();
    private void ScrollBarDisposed(object s, EventArgs e);
    private void OnMouseWheel(object s, MouseEventArgs e);
    internal void OnUpdate(object s, EventArgs e);
    protected bool get_CanAccessScrollBar();
    protected bool get_CanAccessContainer();
    protected bool get_CanUpdate();
    protected G22190F0D5B1120504B250025230207091246341A2D0D073F0C07165C38021A0E0235230F151D15050D1F7C362F33233908202C233D GetInfo();
    [CompilerGeneratedAttribute]
protected virtual ScrollOrientation get_Orientation();
    [CompilerGeneratedAttribute]
private void set_Orientation(ScrollOrientation value);
    protected virtual bool get_ShowScrollBar();
    private void OnScroll(object s, ScrollEventArgs e);
    protected virtual void OnScroll(ScrollEventArgs e);
    private void OnValueChanged(object s, EventArgs e);
    protected virtual void OnValueChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
    private void internalUpdate();
    public virtual void Update();
    internal void SetMaximum(int value);
    internal void SetMinimum(int value);
    internal void SetSmallChange(int value);
    internal void SetLargeChange(int value);
    internal void SetValue(int value);
    internal void SetContainerScrollValue(int value);
    internal int Percentage(float val, float total, float max);
    internal static int GetProperty(object target, string propertyName);
    internal static void SetProperty(object target, string propertyName, int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Initialize>b__5_0(object s, EventArgs e);
}
public enum Guna.UI2.WinForms.Enums.AddOrRemove : Enum {
    public int value__;
    public static AddOrRemove Add;
    public static AddOrRemove Remove;
}
public enum Guna.UI2.WinForms.Enums.BrushMode : Enum {
    public int value__;
    public static BrushMode Gradient;
    public static BrushMode Solid;
    public static BrushMode SolidTransition;
}
public enum Guna.UI2.WinForms.Enums.ButtonMode : Enum {
    public int value__;
    public static ButtonMode DefaultButton;
    public static ButtonMode RadioButton;
    public static ButtonMode ToogleButton;
}
public enum Guna.UI2.WinForms.Enums.ControlBoxStyle : Enum {
    public int value__;
    public static ControlBoxStyle Windows10;
    public static ControlBoxStyle Custom;
}
public enum Guna.UI2.WinForms.Enums.ControlBoxType : Enum {
    public int value__;
    public static ControlBoxType MinimizeBox;
    public static ControlBoxType MaximizeBox;
    public static ControlBoxType CloseBox;
}
public enum Guna.UI2.WinForms.Enums.CustomContentAlignment : Enum {
    public int value__;
    public static CustomContentAlignment MiddleLeft;
    public static CustomContentAlignment MiddleRight;
    public static CustomContentAlignment MiddleCenter;
    public static CustomContentAlignment TopLeft;
    public static CustomContentAlignment TopRight;
    public static CustomContentAlignment TopCenter;
    public static CustomContentAlignment BottomLeft;
    public static CustomContentAlignment BottomRight;
    public static CustomContentAlignment BottomCenter;
    public static CustomContentAlignment Custom;
}
public enum Guna.UI2.WinForms.Enums.DataGridViewPresetThemes : Enum {
    public int value__;
    public static DataGridViewPresetThemes Default;
    public static DataGridViewPresetThemes Alizarin;
    public static DataGridViewPresetThemes Carrot;
    public static DataGridViewPresetThemes SunFlower;
    public static DataGridViewPresetThemes Amethyst;
    public static DataGridViewPresetThemes FeterRiver;
    public static DataGridViewPresetThemes Emerald;
    public static DataGridViewPresetThemes GreenSea;
    public static DataGridViewPresetThemes Turquoise;
    public static DataGridViewPresetThemes WetAsphalt;
    public static DataGridViewPresetThemes Red;
    public static DataGridViewPresetThemes Pink;
    public static DataGridViewPresetThemes Indigo;
    public static DataGridViewPresetThemes Blue;
    public static DataGridViewPresetThemes LightBlue;
    public static DataGridViewPresetThemes Cyan;
    public static DataGridViewPresetThemes Purple;
    public static DataGridViewPresetThemes DeepPurple;
    public static DataGridViewPresetThemes Teal;
    public static DataGridViewPresetThemes Green;
    public static DataGridViewPresetThemes LightGreen;
    public static DataGridViewPresetThemes Lime;
    public static DataGridViewPresetThemes Yellow;
    public static DataGridViewPresetThemes Ember;
    public static DataGridViewPresetThemes Orange;
    public static DataGridViewPresetThemes DeepOrange;
    public static DataGridViewPresetThemes White;
    public static DataGridViewPresetThemes WhiteGrid;
    public static DataGridViewPresetThemes Light;
    public static DataGridViewPresetThemes LightGrid;
    public static DataGridViewPresetThemes Dark;
}
public enum Guna.UI2.WinForms.Enums.DragMode : Enum {
    public int value__;
    public static DragMode Form;
    public static DragMode Control;
}
public enum Guna.UI2.WinForms.Enums.DragOrientation : Enum {
    public int value__;
    public static DragOrientation Horizontal;
    public static DragOrientation Vertical;
    public static DragOrientation Both;
}
public enum Guna.UI2.WinForms.Enums.FlipOrientation : Enum {
    public int value__;
    public static FlipOrientation Normal;
    public static FlipOrientation Horizontal;
    public static FlipOrientation Vertical;
}
public enum Guna.UI2.WinForms.Enums.MouseState : Enum {
    public int value__;
    public static MouseState HOVER;
    public static MouseState DOWN;
    public static MouseState OUT;
}
public enum Guna.UI2.WinForms.Enums.ProgressBarTextMode : Enum {
    public int value__;
    public static ProgressBarTextMode Custom;
    public static ProgressBarTextMode Percentage;
    public static ProgressBarTextMode Value;
}
public enum Guna.UI2.WinForms.Enums.ProgressIndicatorStyle : Enum {
    public int value__;
    public static ProgressIndicatorStyle Default;
    public static ProgressIndicatorStyle Windows;
}
public enum Guna.UI2.WinForms.Enums.RoundBorderAlign : Enum {
    public int value__;
    public static RoundBorderAlign None;
    public static RoundBorderAlign Horizontal;
    public static RoundBorderAlign Vertical;
}
public enum Guna.UI2.WinForms.Enums.ShadowMode : Enum {
    public int value__;
    public static ShadowMode Custom;
    public static ShadowMode Circle;
}
public enum Guna.UI2.WinForms.Enums.ShapeType : Enum {
    public int value__;
    public static ShapeType Rectangle;
    public static ShapeType Ellipse;
    public static ShapeType Rounded;
    public static ShapeType Polygon;
    public static ShapeType Line;
}
public enum Guna.UI2.WinForms.Enums.TextBoxStyle : Enum {
    public int value__;
    public static TextBoxStyle Default;
    public static TextBoxStyle Material;
}
public enum Guna.UI2.WinForms.Enums.TextTransform : Enum {
    public int value__;
    public static TextTransform None;
    public static TextTransform UpperCase;
    public static TextTransform LowerCase;
}
public enum Guna.UI2.WinForms.Enums.ThumbStyle : Enum {
    public int value__;
    public static ThumbStyle Default;
    public static ThumbStyle Inset;
}
public enum Guna.UI2.WinForms.Enums.TrackBarStyle : Enum {
    public int value__;
    public static TrackBarStyle Default;
    public static TrackBarStyle Metro;
}
public enum Guna.UI2.WinForms.Enums.VerHorAlign : Enum {
    public int value__;
    public static VerHorAlign VerticalLeft;
    public static VerHorAlign VerticalRight;
    public static VerHorAlign HoriziontalTop;
    public static VerHorAlign HorizontalBottom;
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("This components animates a winform when loading")]
public class Guna.UI2.WinForms.Guna2AnimateWindow : Component {
    private IContainer components;
    [CompilerGeneratedAttribute]
private int <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimateWindowType <AnimationType>k__BackingField;
    private Form _TargetForm;
    public ISite Site { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("500")]
public int Interval { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("16")]
public AnimateWindowType AnimationType { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Form", "")]
[DescriptionAttribute("The target form to apply the AnimateWindow")]
public Form TargetForm { get; public set; }
    public Guna2AnimateWindow(Form form, AnimateWindowType animateWindowType, int interval);
    public Guna2AnimateWindow(ContextMenuStrip contextMenuStrip, AnimateWindowType animateWindowType, int interval);
    public Guna2AnimateWindow(IContainer container);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
public int get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(int value);
    [CompilerGeneratedAttribute]
public AnimateWindowType get_AnimationType();
    [CompilerGeneratedAttribute]
public void set_AnimationType(AnimateWindowType value);
    public void SetAnimateWindow(Form form, AnimateWindowType animationType, int interval);
    internal void ApplyAnimateWindow(Form form, int animationType, int interval);
    public void SetAnimateWindow(ContextMenuStrip contextMenuStrip, AnimateWindowType animationType, int interval);
    public void SetAnimateWindow(Form form, AnimateWindowType animationType);
    public void SetAnimateWindow(ContextMenuStrip contextMenuStrip, AnimateWindowType animationType);
    public void SetAnimateWindow(Form form);
    public Form get_TargetForm();
    public void set_TargetForm(Form value);
    private void Load(object sender, EventArgs e);
    public void SetAnimateWindow(ContextMenuStrip contextMenuStrip);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("It is easier for you to customize the view of the borderless form with some of the combinant components: dragform, dockform, resizeform, formshadow, ellipse and animatewindow.")]
public class Guna.UI2.WinForms.Guna2BorderlessForm : Component {
    private Form target;
    private ShadowForm shadow;
    private G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D041A drag;
    private G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C resize;
    private Timer refreshElipse;
    private IContainer components;
    private ContainerControl _containerControl;
    [CompilerGeneratedAttribute]
private bool <AnimateWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AnimationInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimateWindowType <AnimationType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFormShadow>k__BackingField;
    private Color _ShadowColor;
    private int _BorderRadius;
    private FormBorderStyle formBorderStyle;
    private Region tempRegion;
    private Region defaultRegion;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContainerControl ContainerControl { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public ISite Site { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("AnimateWindow")]
public bool AnimateWindow { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("500")]
[CategoryAttribute("AnimateWindow")]
public int AnimationInterval { get; public set; }
    [CategoryAttribute("AnimateWindow")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AnimateWindowType AnimationType { get; public set; }
    [CategoryAttribute("Shadow")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("")]
public bool HasFormShadow { get; public set; }
    [CategoryAttribute("Shadow")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("Gets or sets the shadow color")]
public Color ShadowColor { get; public set; }
    [CategoryAttribute("Ellipse")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the form on all angles")]
public int BorderRadius { get; public set; }
    [CategoryAttribute("Resize")]
[DescriptionAttribute("Gets or sets a value indicating whether the parent form will be resizable when borderless.")]
[DefaultValueAttribute("True")]
public bool ResizeForm { get; public set; }
    [CategoryAttribute("Drag")]
[DefaultValueAttribute("True")]
public bool DragForm { get; public set; }
    [CategoryAttribute("Drag")]
[DescriptionAttribute("Allows you to move the form or control on the vertical, horizontal or both axis.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DragOrientation DragOrientation { get; public set; }
    [CategoryAttribute("Drag")]
[DescriptionAttribute("Gets or sets a value indicating whether the parent form or control will be dragging.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DragMode DragMode { get; public set; }
    [CategoryAttribute("Drag")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Gets or sets a value indicating whether the parent form's opacity or transparency will be changed whenever it's being dragged on screen.")]
public bool TransparentWhileDrag { get; public set; }
    [CategoryAttribute("Drag")]
[TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0,9")]
[DescriptionAttribute("Gets or sets the opacity or transparency value that will be applied when the dragging starts.")]
public double DragStartTransparencyValue { get; public set; }
    [CategoryAttribute("Drag")]
[TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Double", "1")]
[DescriptionAttribute("Gets or sets the opacity or transparency value that will be applied when the dragging ends.")]
public double DragEndTransparencyValue { get; public set; }
    [CategoryAttribute("Dock")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets a value indicating whether the docking indicators will be used on the parent form.")]
[DefaultValueAttribute("True")]
public bool DockForm { get; public set; }
    [CategoryAttribute("Dock")]
[TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0,2")]
[DescriptionAttribute("Gets or sets the opacity or transparency of the docking indicators.")]
public double DockIndicatorTransparencyValue { get; public set; }
    [CategoryAttribute("Dock")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("Gets or sets the color of the docking indicators.")]
public Color DockIndicatorColor { get; public set; }
    public Form TargetForm { get; }
    public Guna2BorderlessForm(IContainer container);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    public ContainerControl get_ContainerControl();
    public void set_ContainerControl(ContainerControl value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    [CompilerGeneratedAttribute]
public bool get_AnimateWindow();
    [CompilerGeneratedAttribute]
public void set_AnimateWindow(bool value);
    [CompilerGeneratedAttribute]
public int get_AnimationInterval();
    [CompilerGeneratedAttribute]
public void set_AnimationInterval(int value);
    [CompilerGeneratedAttribute]
public AnimateWindowType get_AnimationType();
    [CompilerGeneratedAttribute]
public void set_AnimationType(AnimateWindowType value);
    [CompilerGeneratedAttribute]
public bool get_HasFormShadow();
    [CompilerGeneratedAttribute]
public void set_HasFormShadow(bool value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public bool get_ResizeForm();
    public void set_ResizeForm(bool value);
    public bool get_DragForm();
    public void set_DragForm(bool value);
    public DragOrientation get_DragOrientation();
    public void set_DragOrientation(DragOrientation value);
    public DragMode get_DragMode();
    public void set_DragMode(DragMode value);
    public bool get_TransparentWhileDrag();
    public void set_TransparentWhileDrag(bool value);
    public double get_DragStartTransparencyValue();
    public void set_DragStartTransparencyValue(double value);
    public double get_DragEndTransparencyValue();
    public void set_DragEndTransparencyValue(double value);
    public bool get_DockForm();
    public void set_DockForm(bool value);
    public double get_DockIndicatorTransparencyValue();
    public void set_DockIndicatorTransparencyValue(double value);
    public Color get_DockIndicatorColor();
    public void set_DockIndicatorColor(Color value);
    public Form get_TargetForm();
    private void Initialize(ContainerControl containerControl);
    private void SetCallBackEvents(bool add);
    public void SetDrag(Control control);
    public void SetDrag(ControlCollection controls);
    public void SetDrag(List`1<Control> controls);
    public void SetDrag(Control[] controls);
    public void RemoveDrag(ControlCollection controls);
    public void RemoveDrag(Control[] controls);
    public void RemoveDrag(List`1<Control> controls);
    public void RemoveDrag(Control control);
    private void OnLoad(object sender, EventArgs e);
    private void OnResize(object sender, EventArgs e);
    private Form GetParentForm(ContainerControl value);
    private void ResetRegion();
    private void Elipse(int radius);
    private int AnimateWindowTypeInt(AnimateWindowType _animateWindowType);
    private void Shadow();
    private void refreshElipse_Tick(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Button")]
[DescriptionAttribute("An advanced Button control that supports animations, border styles, radius customizations, etc.")]
[DesignerAttribute("Guna.UI2.Designer.ButtonDesigner")]
public class Guna.UI2.WinForms.Guna2Button : Control {
    private bool AnimatorGIF;
    private Graphics curg;
    private DialogResult _dialogResult;
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private bool _TextFormatNoPrefix;
    private Color _FocusedColor;
    private int _BorderRadius;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private ShadowDecoration _ShadowDecoration;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    private Point _TextOffset;
    private HorizontalAlignment _TextAlign;
    private HorizontalAlignment _ImageAlign;
    private TextRenderingHint _TextRenderingHint;
    private TextTransform _TextTransform;
    private bool _Tile;
    private bool _Animated;
    private bool _Checked;
    private Color _FillColor;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private Color _PressedColor;
    private int _PressedDepth;
    private ButtonMode _ButtonMode;
    private bool _UseTransparentBackground;
    protected AnimationManager AnimationManager;
    protected AnimationManager HoveredAnimationManager;
    protected AnimationManager CheckedAnimationManager;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    private bool IsHover;
    internal MouseState MouseState;
    private GraphicsPath GP;
    private bool _AnimatedGIF;
    private CustomizableEdges _CustomizableEdges;
    private ButtonImages _CustomImages;
    private ButtonState _HoverState;
    private ButtonState _CheckedState;
    private ButtonState _DisabledState;
    private bool _IndicateFocus;
    private ButtonState tmp;
    private IdleStateState idleState;
    [DefaultValueAttribute("0")]
public DialogResult DialogResult { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Turns off processing of prefix characters. Typically, the ampersand (&amp;) mnemonic-prefix character is interpreted as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying (TextFormatNoPrefix = true), this processing is turned off. For example, an input string of "A & amp;bc & amp;&amp;d" with (TextFormatNoPrefix = true) applied would result in output of "A & amp;bc & amp;&amp;d"")]
public bool TextFormatNoPrefix { get; public set; }
    [BrowsableAttribute("False")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[DisplayNameAttribute("AutoSize")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Enables automatic resizing based.")]
public bool DefaultAutoSize { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Options")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("The focused color.")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color FocusedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Setting the position of the control's image.")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment.")]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's image alignment.")]
public HorizontalAlignment ImageAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The control's text-transform property allows you to change the appearance of the text.")]
public TextTransform TextTransform { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, tiles will be applied.")]
public bool Tile { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "94, 148, 255")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The color of the control when pressed down by the mouse.")]
public Color PressedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("30")]
[DescriptionAttribute("The visual effect of the pressing event. This property helps animate the pressing event.")]
public int PressedDepth { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The type of Button. The control can act as a toggle button, radio button, or general button.")]
public ButtonMode ButtonMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Allows animated GIF Image.")]
public bool AnimatedGIF { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Custom images of the control.")]
public ButtonImages CustomImages { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public ButtonState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public ButtonState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is in a disabled state.")]
public ButtonState DisabledState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    private IdleStateState IdleState { get; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual bool ProcessMnemonic(char charCode);
    private void ResizeForAutoSize();
    private Size GetAutoSize();
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public sealed virtual DialogResult get_DialogResult();
    public sealed virtual void set_DialogResult(DialogResult value);
    public sealed virtual void NotifyDefault(bool value);
    public sealed virtual void PerformClick();
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_TextFormatNoPrefix();
    public virtual void set_TextFormatNoPrefix(bool value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public virtual bool get_DefaultAutoSize();
    public virtual void set_DefaultAutoSize(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual bool get_IsDesignMode();
    public virtual Color get_FocusedColor();
    public virtual void set_FocusedColor(Color value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Point get_ImageOffset();
    public virtual void set_ImageOffset(Point value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public virtual HorizontalAlignment get_ImageAlign();
    public virtual void set_ImageAlign(HorizontalAlignment value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual TextTransform get_TextTransform();
    public virtual void set_TextTransform(TextTransform value);
    public virtual bool get_Tile();
    public virtual void set_Tile(bool value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual Color get_PressedColor();
    public virtual void set_PressedColor(Color value);
    public virtual int get_PressedDepth();
    public virtual void set_PressedDepth(int value);
    public virtual ButtonMode get_ButtonMode();
    public virtual void set_ButtonMode(ButtonMode value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    protected void InitializeAnimationManager();
    private void CheckedAnimationManager_OnAnimationProgress(object sender);
    private void HoveredAnimationManager_OnAnimationProgress(object sender);
    private void AnimationManager_OnAnimationProgress(object sender);
    private void InvalidateControls();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs kevent);
    protected virtual void OnClick(EventArgs e);
    private void Initialize();
    public virtual bool get_AnimatedGIF();
    public virtual void set_AnimatedGIF(bool value);
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual ButtonImages get_CustomImages();
    public virtual void set_CustomImages(ButtonImages value);
    public virtual ButtonState get_HoverState();
    public virtual void set_HoverState(ButtonState value);
    public virtual ButtonState get_CheckedState();
    public virtual void set_CheckedState(ButtonState value);
    public virtual ButtonState get_DisabledState();
    public virtual void set_DisabledState(ButtonState value);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    private Bitmap rippleBmp();
    private void ripple(Graphics g);
    private IdleStateState get_IdleState();
    private void SetupState();
    private Color bnc(Color c1, Color c2, bool op);
    private void BasePaint(Graphics g);
    protected virtual void OnPaint(PaintEventArgs e);
    private sealed virtual override void Guna.UI2.WinForms.Interfaces.ICustomButtonControl.Invalidate();
    [CompilerGeneratedAttribute]
private void <BasePaint>b__196_0(object _o, EventArgs _e);
    [CompilerGeneratedAttribute]
private void <BasePaint>b__196_1(object _o, EventArgs _e);
}
[DescriptionAttribute("Provides enhanced visual support for checked and unchecked states.")]
[ToolboxBitmapAttribute("System.Windows.Forms.CheckBox")]
[DesignerAttribute("Guna.UI2.Designer.CheckBoxDesigner")]
public class Guna.UI2.WinForms.Guna2CheckBox : CheckBox {
    private Guna2CustomCheckBox gunaCustomCheckBox1;
    private Guna2ControlFocusHandler gunaControlFocusHandler1;
    private IContainer components;
    [CompilerGeneratedAttribute]
private Appearance <Appearance>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentAlignment <CheckAlign>k__BackingField;
    private TextRenderingHint _TextRenderingHint;
    [CompilerGeneratedAttribute]
private EventHandler LostFocus;
    [CompilerGeneratedAttribute]
private EventHandler GotFocus;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("False")]
public FlatButtonAppearance FlatAppearance { get; }
    [BrowsableAttribute("False")]
public Appearance Appearance { get; }
    [BrowsableAttribute("False")]
public ContentAlignment CheckAlign { get; }
    [DefaultValueAttribute]
[BrowsableAttribute("False")]
public FlatStyle FlatStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public Color CheckMarkColor { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public CustomCheckBoxState UncheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public CustomCheckBoxState CheckedState { get; public set; }
    private void InitializeComponent();
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual bool get_IsDesignMode();
    public FlatButtonAppearance get_FlatAppearance();
    [CompilerGeneratedAttribute]
public Appearance get_Appearance();
    [CompilerGeneratedAttribute]
public ContentAlignment get_CheckAlign();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_CheckMarkColor();
    public virtual void set_CheckMarkColor(Color value);
    public virtual CustomCheckBoxState get_UncheckedState();
    public virtual void set_UncheckedState(CustomCheckBoxState value);
    public virtual CustomCheckBoxState get_CheckedState();
    public virtual void set_CheckedState(CustomCheckBoxState value);
    protected virtual void OnCheckedChanged(EventArgs e);
    private void refresh();
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs pevent);
    private void gunaCustomCheckBox1_CheckedChanged(object sender, EventArgs e);
    private void gunaCustomCheckBox1_RightToLeftChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_GotFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GotFocus(EventHandler value);
    private void gunaControlFocusHandler1_GotFocus(object sender, EventArgs e);
    private void gunaControlFocusHandler1_LostFocus(object sender, EventArgs e);
}
[DescriptionAttribute("An advanced chip control.")]
public class Guna.UI2.WinForms.Guna2Chip : Control {
    private int _closableSize;
    private Graphics curg;
    private Point mousePosition;
    private Cursor _Cursor;
    private bool _TextFormatNoPrefix;
    private bool _closable;
    private CustomizableEdges _CustomizableEdges;
    private bool _AutoRoundedCorners;
    private int currentRadius;
    private DashStyle _BorderStyle;
    private ShadowDecoration _ShadowDecoration;
    private Color _FillColor;
    private Color _BorderColor;
    private int _BorderThickness;
    private int _BorderRadius;
    private bool _UseTransparentBackground;
    private HorizontalAlignment _TextAlign;
    private TextTransform _TextTransform;
    private Point _TextOffset;
    private TextRenderingHint _TextRenderingHint;
    [BrowsableAttribute("False")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[DisplayNameAttribute("AutoSize")]
[DefaultValueAttribute("False")]
public bool DefaultAutoSize { get; public set; }
    public Cursor Cursor { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Turns off processing of prefix characters. Typically, the ampersand (&amp;) mnemonic-prefix character is interpreted as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying (TextFormatNoPrefix = true), this processing is turned off. For example, an input string of "A & amp;bc & amp;&amp;d" with (TextFormatNoPrefix = true) applied would result in output of "A & amp;bc & amp;&amp;d"")]
public bool TextFormatNoPrefix { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("If true, the Chip Close button will be displayed.")]
public bool IsClosable { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Options")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "255, 77, 165")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "170, 51, 110")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("6")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment.")]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The control's text-transform property allows you to change the appearance of the text.")]
public TextTransform TextTransform { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    protected virtual bool ProcessMnemonic(char charCode);
    public void PerformClick();
    private Rectangle ClosableCursorRectangle();
    private Point ClosablePoint();
    private Size ClosableSize();
    private Bitmap ClosableImage();
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public virtual bool get_DefaultAutoSize();
    public virtual void set_DefaultAutoSize(bool value);
    private void ResizeForAutoSize();
    private Size GetAutoSize();
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    private bool isClosableClick(Point e);
    protected virtual void OnHandleCreated(EventArgs e);
    public Cursor get_Cursor();
    public void set_Cursor(Cursor value);
    public virtual bool get_TextFormatNoPrefix();
    public virtual void set_TextFormatNoPrefix(bool value);
    public virtual bool get_IsClosable();
    public virtual void set_IsClosable(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public bool get_AutoRoundedCorners();
    public void set_AutoRoundedCorners(bool value);
    protected virtual void OnResize(EventArgs e);
    private void updateRoundBorder();
    public virtual bool get_IsDesignMode();
    public DashStyle get_BorderStyle();
    public void set_BorderStyle(DashStyle value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public virtual TextTransform get_TextTransform();
    public virtual void set_TextTransform(TextTransform value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Button")]
[DescriptionAttribute("Advanced circle button control with animation effects features.")]
[DesignerAttribute("Guna.UI2.Designer.CircleButtonDesigner")]
public class Guna.UI2.WinForms.Guna2CircleButton : Control {
    private bool AnimatorGIF;
    private Graphics curg;
    private DialogResult _dialogResult;
    private bool _TextFormatNoPrefix;
    private Color _FocusedColor;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private ShadowDecoration _ShadowDecoration;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    private Point _TextOffset;
    private HorizontalAlignment _TextAlign;
    private HorizontalAlignment _ImageAlign;
    private TextRenderingHint _TextRenderingHint;
    private TextTransform _TextTransform;
    private bool _Tile;
    private bool _Animated;
    private bool _Checked;
    private Color _FillColor;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private Color _PressedColor;
    private int _PressedDepth;
    private ButtonMode _ButtonMode;
    private bool _UseTransparentBackground;
    protected AnimationManager AnimationManager;
    protected AnimationManager HoveredAnimationManager;
    protected AnimationManager CheckedAnimationManager;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    private bool IsHover;
    internal MouseState MouseState;
    private GraphicsPath GP;
    private bool _IndicateFocus;
    private bool _AnimatedGIF;
    private ButtonImages _CustomImages;
    private ButtonState _HoverState;
    private ButtonState _CheckedState;
    private ButtonState _DisabledState;
    private ButtonState tmp;
    private IdleStateState idleState;
    [DefaultValueAttribute("0")]
public DialogResult DialogResult { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Turns off processing of prefix characters. Typically, the ampersand (&amp;) mnemonic-prefix character is interpreted as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying (TextFormatNoPrefix = true), this processing is turned off. For example, an input string of "A & amp;bc & amp;&amp;d" with (TextFormatNoPrefix = true) applied would result in output of "A & amp;bc & amp;&amp;d"")]
public bool TextFormatNoPrefix { get; public set; }
    [BrowsableAttribute("False")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[DisplayNameAttribute("AutoSize")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Enables automatic resizing based.")]
public bool DefaultAutoSize { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Options")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("The focused color.")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color FocusedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Setting the position of the control's image.")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment.")]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's image alignment.")]
public HorizontalAlignment ImageAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The control's text-transform property allows you to change the appearance of the text.")]
public TextTransform TextTransform { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("If true, tiles will be applied.")]
public bool Tile { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "94, 148, 255")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The color of the control when pressed down by the mouse.")]
public Color PressedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("30")]
[DescriptionAttribute("The visual effect of the pressing event. This property helps animate the pressing event.")]
public int PressedDepth { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The type of Button. The control can act as a toggle button, radio button, or general button.")]
public ButtonMode ButtonMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Allows animated GIF Image.")]
public bool AnimatedGIF { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Custom images of the control.")]
public ButtonImages CustomImages { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public ButtonState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public ButtonState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public ButtonState DisabledState { get; public set; }
    private IdleStateState IdleState { get; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual bool ProcessMnemonic(char charCode);
    private void ResizeForAutoSize();
    private Size GetAutoSize();
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public sealed virtual DialogResult get_DialogResult();
    public sealed virtual void set_DialogResult(DialogResult value);
    public sealed virtual void NotifyDefault(bool value);
    public sealed virtual void PerformClick();
    public virtual bool get_TextFormatNoPrefix();
    public virtual void set_TextFormatNoPrefix(bool value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public virtual bool get_DefaultAutoSize();
    public virtual void set_DefaultAutoSize(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual bool get_IsDesignMode();
    public virtual Color get_FocusedColor();
    public virtual void set_FocusedColor(Color value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Point get_ImageOffset();
    public virtual void set_ImageOffset(Point value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public virtual HorizontalAlignment get_ImageAlign();
    public virtual void set_ImageAlign(HorizontalAlignment value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual TextTransform get_TextTransform();
    public virtual void set_TextTransform(TextTransform value);
    public virtual bool get_Tile();
    public virtual void set_Tile(bool value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual Color get_PressedColor();
    public virtual void set_PressedColor(Color value);
    public virtual int get_PressedDepth();
    public virtual void set_PressedDepth(int value);
    public virtual ButtonMode get_ButtonMode();
    public virtual void set_ButtonMode(ButtonMode value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    protected void InitializeAnimationManager();
    private void CheckedAnimationManager_OnAnimationProgress(object sender);
    private void HoveredAnimationManager_OnAnimationProgress(object sender);
    private void AnimationManager_OnAnimationProgress(object sender);
    private void InvalidateControls();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    private void DrawTransparentControl(Graphics g);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs kevent);
    protected virtual void OnClick(EventArgs e);
    private void Initialize();
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    public bool get_AnimatedGIF();
    public void set_AnimatedGIF(bool value);
    public virtual ButtonImages get_CustomImages();
    public virtual void set_CustomImages(ButtonImages value);
    public virtual ButtonState get_HoverState();
    public virtual void set_HoverState(ButtonState value);
    public virtual ButtonState get_CheckedState();
    public virtual void set_CheckedState(ButtonState value);
    public virtual ButtonState get_DisabledState();
    public virtual void set_DisabledState(ButtonState value);
    private Bitmap rippleBmp();
    private void ripple(Graphics g);
    private IdleStateState get_IdleState();
    private void SetupState();
    private Color bnc(Color c1, Color c2, bool op);
    private void BasePaint(Graphics g);
    protected virtual void OnPaint(PaintEventArgs e);
    private sealed virtual override void Guna.UI2.WinForms.Interfaces.ICustomButtonControl.Invalidate();
    [CompilerGeneratedAttribute]
private void <BasePaint>b__182_0(object _o, EventArgs _e);
    [CompilerGeneratedAttribute]
private void <BasePaint>b__182_1(object _o, EventArgs _e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.PictureBox")]
[DescriptionAttribute("Advanced circle picturebox.")]
[DesignerAttribute("Guna.UI2.Designer.CirclePictureBoxDesigner")]
public class Guna.UI2.WinForms.Guna2CirclePictureBox : PictureBox {
    private float _Rotate;
    private FlipOrientation _Flip;
    private string imageLocation;
    private StreamReader localImageStreamReader;
    private Stream uriImageStream;
    private ShadowDecoration _ShadowDecoration;
    private Color _FillColor;
    private bool _UseTransparentBackground;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set image rotation from 0 to 360.")]
public float ImageRotate { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set the image orientation to flip the image.")]
public FlipOrientation ImageFlip { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string ImageLocation { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    public sealed virtual bool get_IsDesignMode();
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual float get_ImageRotate();
    public virtual void set_ImageRotate(float value);
    public virtual FlipOrientation get_ImageFlip();
    public virtual void set_ImageFlip(FlipOrientation value);
    public string get_ImageLocation();
    public void set_ImageLocation(string value);
    private Uri CalculateUri(string path);
    private void DisposeImageStream();
    private void LoadImage();
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    private Bitmap ReImage();
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.ProgressBar")]
[DescriptionAttribute("Advanced progress bar control.")]
[DefaultEventAttribute("ValueChanged")]
public class Guna.UI2.WinForms.Guna2CircleProgressBar : ContainerControl {
    internal float Angle;
    [CompilerGeneratedAttribute]
private EventHandler MaximumChanged;
    [CompilerGeneratedAttribute]
private EventHandler MinimumChanged;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private bool _UseTransparentBackground;
    private Timer TM;
    private float _Speed;
    private ShadowDecoration _ShadowDecoration;
    private TextRenderingHint _TextRenderingHint;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    private int _FillOffset;
    private bool _EnsureVisible;
    private bool _Backwards;
    private int _FillThickness;
    private int _ProgressOffset;
    private int _ProgressThickness;
    private Color _ProgressColor;
    private Color _ProgressColor2;
    private BrushMode _ProgressBrushMode;
    private LinearGradientMode _GradientMode;
    private Color _FillColor;
    private Color _InnerColor;
    private int _Maximum;
    private int _Minimum;
    private int _Value;
    private LineCap _ProgressStartCap;
    private LineCap _ProgressEndCap;
    private ProgressBarTextMode _TextMode;
    private bool _ShowText;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0,6")]
[DescriptionAttribute("The speed of the control's animation.")]
public float AnimationSpeed { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "42, 42")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Setting the position of the control's image.")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control's percentile value will be shown.")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ShowPercentage { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("Setting the position on the control that will be filled.")]
public int FillOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The property to guarantee the control's visibility.")]
public bool EnsureVisible { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will progress in a backward direction.")]
public bool Backwards { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("23")]
[DescriptionAttribute("The thickness of the control's progress.")]
public int FillThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The position of the control's progress.")]
public int ProgressOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("23")]
[DescriptionAttribute("The thickness of the control's progress.")]
public int ProgressThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "139, 201, 77")]
[DescriptionAttribute("The progress bar color.")]
public Color ProgressColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "139, 201, 77")]
[DescriptionAttribute("The progress bar second color in a gradient mode.")]
public Color ProgressColor2 { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The progress bar brush mode.")]
public BrushMode ProgressBrushMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The gradient mode to be applied.")]
public LinearGradientMode GradientMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The inner BackColor of the control.")]
public Color InnerColor { get; public set; }
    [DefaultValueAttribute("100")]
[DescriptionAttribute("Gets or sets the maximum value of the range of the control.")]
public int Maximum { get; public set; }
    [DefaultValueAttribute("100")]
[DescriptionAttribute("Gets or sets the minimum value of the range of the control.")]
public int Minimum { get; public set; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("Gets or sets the current position of the progress bar.")]
public int Value { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("Ther progress percentage text.")]
public string ProgressPercentText { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The progress value represented as percentage.")]
public double ProgressTotalPercent { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The progress value.")]
public double ProgressTotalValue { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The design type of progress start.")]
public LineCap ProgressStartCap { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The design type of progress end.")]
public LineCap ProgressEndCap { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Allows you to change the text mode to Percentage, Value and Custom when ShowText = true.")]
public ProgressBarTextMode TextMode { get; public set; }
    [DescriptionAttribute("Allows you to show or hide text.")]
[DefaultValueAttribute("False")]
public bool ShowText { get; public set; }
    public string Text { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_MaximumChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MaximumChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMaximumChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_MinimumChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MinimumChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMinimumChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    public virtual bool get_IsDesignMode();
    private void InitializeAnimation();
    private void TM_Tick(object sender, EventArgs e);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual float get_AnimationSpeed();
    public virtual void set_AnimationSpeed(float value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Point get_ImageOffset();
    public virtual void set_ImageOffset(Point value);
    public virtual bool get_ShowPercentage();
    public virtual void set_ShowPercentage(bool value);
    public virtual int get_FillOffset();
    public virtual void set_FillOffset(int value);
    public virtual bool get_EnsureVisible();
    public virtual void set_EnsureVisible(bool value);
    public virtual bool get_Backwards();
    public virtual void set_Backwards(bool value);
    public virtual int get_FillThickness();
    public virtual void set_FillThickness(int value);
    public virtual int get_ProgressOffset();
    public virtual void set_ProgressOffset(int value);
    public virtual int get_ProgressThickness();
    public virtual void set_ProgressThickness(int value);
    public virtual Color get_ProgressColor();
    public virtual void set_ProgressColor(Color value);
    public virtual Color get_ProgressColor2();
    public virtual void set_ProgressColor2(Color value);
    public virtual BrushMode get_ProgressBrushMode();
    public virtual void set_ProgressBrushMode(BrushMode value);
    public virtual LinearGradientMode get_GradientMode();
    public virtual void set_GradientMode(LinearGradientMode value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_InnerColor();
    public virtual void set_InnerColor(Color value);
    public virtual int get_Maximum();
    public virtual void set_Maximum(int value);
    public virtual int get_Minimum();
    public virtual void set_Minimum(int value);
    public virtual int get_Value();
    public virtual void set_Value(int value);
    public virtual string get_ProgressPercentText();
    public virtual double get_ProgressTotalPercent();
    public virtual double get_ProgressTotalValue();
    public virtual LineCap get_ProgressStartCap();
    public virtual void set_ProgressStartCap(LineCap value);
    public virtual LineCap get_ProgressEndCap();
    public virtual void set_ProgressEndCap(LineCap value);
    public ProgressBarTextMode get_TextMode();
    public void set_TextMode(ProgressBarTextMode value);
    public bool get_ShowText();
    public void set_ShowText(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    private float BaseHight();
    private float BaseWidth();
    private float ProgressHight();
    private float ProgressWidth();
    public float ProgressX(int i);
    public float ProgressY(int i);
    public float BaseX(int i);
    public float BaseY(int i);
    public void Reset();
    public void Increment(int value);
    public void Decrement(int value);
    private Brush getBrushProgress();
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("Advanced Color transition component")]
public class Guna.UI2.WinForms.Guna2ColorTransition : Component {
    private Timer timer1;
    private IContainer components;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private Color[] _ColorArray;
    private Color _StartColor;
    private Color _EndColor;
    private int _ProgressValue;
    private Color _Value;
    private int i;
    private int ii;
    public ISite Site { get; public set; }
    [BrowsableAttribute("True")]
public Color[] ColorArray { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
[DescriptionAttribute("The start color to apply to the parent's BackColor")]
public Color StartColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Blue")]
[DescriptionAttribute("The end color to apply to the parent's BackColor")]
public Color EndColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The transition progress value")]
public int ProgressValue { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("20")]
[DescriptionAttribute("The transition interval")]
public int Interval { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("The current color applied to the parent's BackColor")]
public Color Value { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the transition will start automatically")]
public bool AutoTransition { get; public set; }
    [DefaultValueAttribute("100")]
[DescriptionAttribute("The control's maximum value")]
public int Maximum { get; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("The control's minimum value")]
public int Minimum { get; }
    public Guna2ColorTransition(IContainer container);
    protected virtual void Dispose(bool disposing);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    private void InitializeComponent();
    private void InitializaTransition();
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    public Color[] get_ColorArray();
    public void set_ColorArray(Color[] value);
    public Color get_StartColor();
    public void set_StartColor(Color value);
    public Color get_EndColor();
    public void set_EndColor(Color value);
    public int get_ProgressValue();
    public void set_ProgressValue(int value);
    public int get_Interval();
    public void set_Interval(int value);
    public Color get_Value();
    public bool get_AutoTransition();
    public void set_AutoTransition(bool value);
    public int get_Maximum();
    public int get_Minimum();
    private void Invalidate();
    private void timer1_Tick(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.ComboBox")]
[DescriptionAttribute("Advanced ComboBox Control.")]
[DesignerAttribute("Guna.UI2.Designer.ComboBoxDesigner")]
public class Guna.UI2.WinForms.Guna2ComboBox : ComboBox {
    private MouseState MouseState;
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private CustomizableEdges _CustomizableEdges;
    private HorizontalAlignment _TextAlign;
    private ComboBoxItemsAppearance _ItemsAppearance;
    private ComboBoxState _HoverState;
    private ComboBoxState _DisabledState;
    private ComboBoxState _FocusedState;
    private ShadowDecoration _ShadowDecoration;
    private TextRenderingHint _TextRenderingHint;
    private TextTransform _TextTransform;
    private int _BorderRadius;
    private int _StartIndex;
    private Color _FillColor;
    private Color _BorderColor;
    private int _BorderThickness;
    private DashStyle _BorderStyle;
    private bool _Animated;
    private Point _TextOffset;
    private TextBoxStyle _Style;
    private AnimationManager _hoverAnimationManager;
    private AnimationManager _focusAnimationManager;
    private bool IsHover;
    private Color DefaultFillColor;
    private Color currentBorderColor;
    private static int WM_CTLCOLORLISTBOX;
    private SubclassCBListBox m_cbLBSubclass;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("False")]
public ComboBoxStyle DropDownStyle { get; public set; }
    [BrowsableAttribute("False")]
public DrawMode DrawMode { get; public set; }
    [BrowsableAttribute("False")]
public FlatStyle FlatStyle { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("The control's text alignment.")]
[DefaultValueAttribute]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The appearance of the control's items.")]
public ComboBoxItemsAppearance ItemsAppearance { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is over the control.")]
public ComboBoxState HoverState { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is over the control.")]
public ComboBoxState DisabledState { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is focused.")]
public ComboBoxState FocusedState { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The control's text-transform property allows you to change the appearance of the text.")]
public TextTransform TextTransform { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("-1")]
[DescriptionAttribute("The starting or pre-selected index or position in the items list.")]
public int StartIndex { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "217, 221, 226")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "136, 191, 255")]
[DescriptionAttribute("The focused color.")]
public Color FocusedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Gets or Sets the style of the textbox.")]
public TextBoxStyle Style { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public ComboBoxStyle get_DropDownStyle();
    public void set_DropDownStyle(ComboBoxStyle value);
    public DrawMode get_DrawMode();
    public void set_DrawMode(DrawMode value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public virtual ComboBoxItemsAppearance get_ItemsAppearance();
    public virtual ComboBoxState get_HoverState();
    public virtual ComboBoxState get_DisabledState();
    public virtual ComboBoxState get_FocusedState();
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual TextTransform get_TextTransform();
    public virtual void set_TextTransform(TextTransform value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual int get_StartIndex();
    public virtual void set_StartIndex(int value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual Color get_FocusedColor();
    public virtual void set_FocusedColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual TextBoxStyle get_Style();
    public virtual void set_Style(TextBoxStyle value);
    private void InitializeAnimationManager();
    private void FocusAnimationProgress(object sender);
    private void HoverAnimationProgress(object sender);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    private void AnimationSet(MouseState m);
    private void AnimationSet(bool m);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    private Color ItemsForeColor();
    private Color ItemsBackColor();
    private Font ItemsFont();
    private Font SelectedItemsFont();
    private Color SelectedItemsBackColor();
    private Color SelectedItemsForeColor();
    private Color HoverFillColor();
    private Color HoverForeColor();
    private Color HoverBorderColor();
    private Font HoverFont();
    private Font FocusedFont();
    private Bitmap DrawTriangle(Color color);
    private string FTextTransform(string s);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectedItemChanged(EventArgs e);
    protected virtual void OnSelectedValueChanged(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
    private void InitializeComponent();
    private void ComboBox_DropDownClosed(object sender, EventArgs e);
    protected virtual void WndProc(Message& m);
    [CompilerGeneratedAttribute]
private void <WndProc>b__131_0(object s, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Panel")]
public class Guna.UI2.WinForms.Guna2ContainerControl : ContainerControl {
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private CustomizableEdges _CustomizableEdges;
    private DashStyle _BorderStyle;
    private ShadowDecoration _ShadowDecoration;
    private Color _FillColor;
    private Color _BorderColor;
    private int _BorderThickness;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private int _BorderRadius;
    private bool _UseTransparentBackground;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public DashStyle get_BorderStyle();
    public void set_BorderStyle(DashStyle value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    public void DefWndProc(Message m);
}
[ToolboxBitmapAttribute("System.Windows.Forms.ContextMenuStrip")]
[DescriptionAttribute("A ContextMenuStrip component.")]
public class Guna.UI2.WinForms.Guna2ContextMenuStrip : ContextMenuStrip {
    [CompilerGeneratedAttribute]
private Guna2ToolStripProfessionalRenderer <RenderStyle>k__BackingField;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [CategoryAttribute("Guna Properties")]
[BrowsableAttribute("True")]
[DescriptionAttribute("The style to be applied when rendering the context menu strip.")]
[DesignerSerializationVisibilityAttribute("2")]
public Guna2ToolStripProfessionalRenderer RenderStyle { get; public set; }
    public bool get_IsDesignMode();
    [CompilerGeneratedAttribute]
public virtual Guna2ToolStripProfessionalRenderer get_RenderStyle();
    [CompilerGeneratedAttribute]
public virtual void set_RenderStyle(Guna2ToolStripProfessionalRenderer value);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Button")]
[DescriptionAttribute("Advanced controlbox control that supports animations.")]
public class Guna.UI2.WinForms.Guna2ControlBox : Control {
    private ControlBoxState _HoverState;
    private CustomizableEdges _CustomizableEdges;
    private Color _FillColor;
    private Color _IconColor;
    private bool _Animated;
    private Font _IconFont;
    private ControlBoxType _ControlBoxType;
    private ControlBoxStyle _ControlBoxStyle;
    private Color _PressedColor;
    private int _PressedDepth;
    private bool _ShowIcon;
    [CompilerGeneratedAttribute]
private bool <CustomClick>k__BackingField;
    private int _BorderRadius;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private ShadowDecoration _ShadowDecoration;
    private bool _UseTransparentBackground;
    private AnimationManager _hoverAnimationManager;
    internal bool AnimatorGIF;
    private bool IsHover;
    internal bool UseMouseStateInvalidate;
    internal bool UseFocusInvalidate;
    protected MouseState MouseState;
    private bool isMaximumSize;
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is over the control.")]
public ControlBoxState HoverState { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's icon color.")]
public Color IconColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("10")]
[DescriptionAttribute("The size of the control's icon.")]
public float CustomIconSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The controlbox type: close, maximize or minimize.")]
public ControlBoxType ControlBoxType { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The controlbox style: Windows or custom.")]
public ControlBoxStyle ControlBoxStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The color of the control when pressed down by the mouse.")]
public Color PressedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("30")]
[DescriptionAttribute("The visual effect of the pressing event. This property helps animate the pressing event.")]
public int PressedDepth { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("If true, the Control's icon will be displayed, otherwise false.")]
public bool ShowIcon { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The custom click event of the Control.")]
public bool CustomClick { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    private void InitializeComponent();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_IsDesignMode();
    public virtual ControlBoxState get_HoverState();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_IconColor();
    public virtual void set_IconColor(Color value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual float get_CustomIconSize();
    public virtual void set_CustomIconSize(float value);
    public virtual ControlBoxType get_ControlBoxType();
    public virtual void set_ControlBoxType(ControlBoxType value);
    public virtual ControlBoxStyle get_ControlBoxStyle();
    public virtual void set_ControlBoxStyle(ControlBoxStyle value);
    public virtual Color get_PressedColor();
    public virtual void set_PressedColor(Color value);
    public virtual int get_PressedDepth();
    public virtual void set_PressedDepth(int value);
    public virtual bool get_ShowIcon();
    public virtual void set_ShowIcon(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_CustomClick();
    [CompilerGeneratedAttribute]
public virtual void set_CustomClick(bool value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    private Color HoverFillColor();
    private Color HoverIconColor();
    private Color HoverBorderColor();
    private void InitializeAnimationManager();
    private void HoverOnAnimationProgress(object sender);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    public void PerformClick();
    protected virtual void OnKeyDown(KeyEventArgs e);
    private Image DrawIcon(Color color, Color bg);
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("False")]
public class Guna.UI2.WinForms.Guna2ControlFocusHandler : Component {
    private Timer timer1;
    private IContainer components;
    [CompilerGeneratedAttribute]
private EventHandler LostFocus;
    [CompilerGeneratedAttribute]
private EventHandler GotFocus;
    private List`1<Control> controls;
    private bool isFocused;
    public bool IsFocused { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    public Guna2ControlFocusHandler(IContainer container);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
public void add_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_GotFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GotFocus(EventHandler value);
    private void gotFocus(object sender, EventArgs e);
    private void lostFocus(object sender, EventArgs e);
    public bool get_IsFocused();
    public void set_IsFocused(bool value);
    public int get_Count();
    public void Add(Control control);
    public void Remove(Control control);
    public void Clear();
    private void timer1_Tick(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.CheckBox")]
[DescriptionAttribute("Advanced CheckBox Control.")]
[DesignerAttribute("Guna.UI2.Designer.CustomCheckBoxDesigner")]
public class Guna.UI2.WinForms.Guna2CustomCheckBox : Control {
    private bool _UseTransparentBackground;
    private CustomCheckBoxState _CheckedState;
    private CustomCheckBoxState _UncheckedState;
    private CustomizableEdges _CustomizableEdges;
    private bool _Checked;
    private bool _Animated;
    private DashStyle _BorderStyle;
    private Color _CheckMarkColor;
    private ShadowDecoration _ShadowDecoration;
    private AnimationManager _animationManager;
    private bool IsHover;
    internal bool UseMouseStateInvalidate;
    internal bool UseFocusInvalidate;
    internal MouseState MouseState;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public CustomCheckBoxState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in an unchecked state.")]
public CustomCheckBoxState UncheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("Allows you to define the color of the tick icon of the checkbox.")]
public Color CheckMarkColor { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    public virtual bool get_IsDesignMode();
    public virtual CustomCheckBoxState get_CheckedState();
    public virtual void set_CheckedState(CustomCheckBoxState value);
    public virtual CustomCheckBoxState get_UncheckedState();
    public virtual void set_UncheckedState(CustomCheckBoxState value);
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_CheckMarkColor();
    public virtual void set_CheckMarkColor(Color value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    private void InitializeAnimationManager();
    private void OnAnimationProgress(object sender);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    private Bitmap DrawCheckmark(Color color, int width, int height);
    private Bitmap DrawCheckMark();
    private void BasePaint(Graphics G, CustomCheckBoxState appearance);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Panel")]
[DescriptionAttribute("Advanced panel control that supports gradient colors.")]
public class Guna.UI2.WinForms.Guna2CustomGradientPanel : Panel {
    private Bitmap gradientImage;
    private CustomizableEdges _CustomizableEdges;
    private Color _FillColor;
    private Color _FillColor2;
    private Color _FillColor3;
    private Color _FillColor4;
    private int _Quality;
    private DashStyle _BorderStyle;
    private ShadowDecoration _ShadowDecoration;
    private Color _BorderColor;
    private int _BorderThickness;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private int _BorderRadius;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The second fill BackColor in a gradient mode.")]
public Color FillColor2 { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The third BackColor that will fill the control in a gradient mode.")]
public Color FillColor3 { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The fourth BackColor that will fill the control in a gradient mode.")]
public Color FillColor4 { get; public set; }
    [DefaultValueAttribute("10")]
[DescriptionAttribute("The gradient rendering quality option of the control.")]
public int Quality { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_FillColor2();
    public virtual void set_FillColor2(Color value);
    public virtual Color get_FillColor3();
    public virtual void set_FillColor3(Color value);
    public virtual Color get_FillColor4();
    public virtual void set_FillColor4(Color value);
    public virtual int get_Quality();
    public virtual void set_Quality(int value);
    public DashStyle get_BorderStyle();
    public void set_BorderStyle(DashStyle value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    private Bitmap ReGradientImage();
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    private void InvalidateGradient();
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.RadioButton")]
[DescriptionAttribute("Advanced RadioButton Control.")]
[DesignerAttribute("Guna.UI2.Designer.CustomRadioButtonDesigner")]
[DefaultEventAttribute("CheckedChanged")]
public class Guna.UI2.WinForms.Guna2CustomRadioButton : Control {
    private AnimationManager _animationManager;
    private CustomRadionButtonState _CheckedState;
    private CustomRadionButtonState _UncheckedState;
    private bool _Checked;
    private bool _Animated;
    private DashStyle _BorderStyle;
    private ShadowDecoration _ShadowDecoration;
    private bool _UseTransparentBackground;
    private bool IsHover;
    internal bool UseMouseStateInvalidate;
    internal bool UseFocusInvalidate;
    internal MouseState MouseState;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public CustomRadionButtonState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in an unchecked state.")]
public CustomRadionButtonState UncheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    private void InvalidateControls();
    private void InitializeAnimationManager();
    private void OnAnimationProgress(object sender);
    public virtual bool get_IsDesignMode();
    public virtual CustomRadionButtonState get_CheckedState();
    public virtual void set_CheckedState(CustomRadionButtonState value);
    public virtual CustomRadionButtonState get_UncheckedState();
    public virtual void set_UncheckedState(CustomRadionButtonState value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    private void BasePaint(Graphics G, CustomRadionButtonState appearance);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridView")]
[DescriptionAttribute("An advanced themed DataGridView control.")]
public class Guna.UI2.WinForms.Guna2DataGridView : DataGridView {
    private DataGridViewPresetThemes _Theme;
    [CompilerGeneratedAttribute]
private Guna2DataGridViewThemeStyle <ThemeStyle>k__BackingField;
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public DataGridViewSelectionMode SelectionMode { get; public set; }
    [DefaultValueAttribute("True")]
public bool RowHeadersVisible { get; public set; }
    [DefaultValueAttribute("False")]
public bool EnableHeadersVisualStyles { get; public set; }
    [DefaultValueAttribute]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle { get; public set; }
    [DefaultValueAttribute]
public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public DataGridViewCellBorderStyle CellBorderStyle { get; public set; }
    [DefaultValueAttribute]
[RefreshPropertiesAttribute("1")]
public DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "White")]
public Color BackgroundColor { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [CategoryAttribute("Guna Properties")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DisplayNameAttribute("Theme")]
public DataGridViewPresetThemes Theme { get; public set; }
    [CategoryAttribute("Guna Properties")]
[BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public Guna2DataGridViewThemeStyle ThemeStyle { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    public DataGridViewSelectionMode get_SelectionMode();
    public void set_SelectionMode(DataGridViewSelectionMode value);
    public bool get_RowHeadersVisible();
    public void set_RowHeadersVisible(bool value);
    public bool get_EnableHeadersVisualStyles();
    public void set_EnableHeadersVisualStyles(bool value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public DataGridViewHeaderBorderStyle get_ColumnHeadersBorderStyle();
    public void set_ColumnHeadersBorderStyle(DataGridViewHeaderBorderStyle value);
    public DataGridViewAutoSizeColumnsMode get_AutoSizeColumnsMode();
    public void set_AutoSizeColumnsMode(DataGridViewAutoSizeColumnsMode value);
    public DataGridViewCellBorderStyle get_CellBorderStyle();
    public void set_CellBorderStyle(DataGridViewCellBorderStyle value);
    public DataGridViewColumnHeadersHeightSizeMode get_ColumnHeadersHeightSizeMode();
    public void set_ColumnHeadersHeightSizeMode(DataGridViewColumnHeadersHeightSizeMode value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    private void ApplyThemeCore(Color defaultHeaderCellBackColor, Color defaultHeaderCellForeColor, Color defaultCellBackColor, Color defaultCellForeColor, Color defaultCellSelectionBackColor, Color defaultCellSelectionForeColor, Color defaultAlternatingCellBackColor, Color gridColor);
    public bool get_IsDesignMode();
    public DataGridViewPresetThemes get_Theme();
    public void set_Theme(DataGridViewPresetThemes value);
    [CompilerGeneratedAttribute]
public Guna2DataGridViewThemeStyle get_ThemeStyle();
    [CompilerGeneratedAttribute]
public void set_ThemeStyle(Guna2DataGridViewThemeStyle value);
    private void SelectTheme(DataGridViewPresetThemes dataGridViewPresetTheme);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("DataGridViewAlternatingRowsStyle")]
public class Guna.UI2.WinForms.Guna2DataGridViewAlternatingRowsStyle : object {
    private DataGridViewCellStyle _owner;
    [DescriptionAttribute("The BackColor")]
public Color BackColor { get; public set; }
    [DescriptionAttribute("The ForeColor")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("The font style")]
public Font Font { get; public set; }
    [DescriptionAttribute("The Selection BackColor")]
public Color SelectionBackColor { get; public set; }
    [DescriptionAttribute("The Selection ForeColor")]
public Color SelectionForeColor { get; public set; }
    public Guna2DataGridViewAlternatingRowsStyle(DataGridViewCellStyle sender);
    private DataGridViewCellStyle Owner();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    public Color get_SelectionForeColor();
    public void set_SelectionForeColor(Color value);
    public virtual string ToString();
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("DataGridViewHeaderStyle")]
public class Guna.UI2.WinForms.Guna2DataGridViewHeaderStyle : object {
    private Guna2DataGridView _parent;
    private DataGridViewCellStyle _owner;
    [DescriptionAttribute("The height size mode")]
public DataGridViewColumnHeadersHeightSizeMode HeaightSizeMode { get; public set; }
    [DescriptionAttribute("The height")]
public int Height { get; public set; }
    [DescriptionAttribute("The DataGridView HeaderBorderStyle ")]
public DataGridViewHeaderBorderStyle BorderStyle { get; public set; }
    [DescriptionAttribute("The BackColor")]
public Color BackColor { get; public set; }
    [DescriptionAttribute("The ForeColor")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("The Font style")]
public Font Font { get; public set; }
    public Guna2DataGridViewHeaderStyle(DataGridViewCellStyle sender, Guna2DataGridView parent);
    private Guna2DataGridView Parent();
    private DataGridViewCellStyle Owner();
    public DataGridViewColumnHeadersHeightSizeMode get_HeaightSizeMode();
    public void set_HeaightSizeMode(DataGridViewColumnHeadersHeightSizeMode value);
    public int get_Height();
    public void set_Height(int value);
    public DataGridViewHeaderBorderStyle get_BorderStyle();
    public void set_BorderStyle(DataGridViewHeaderBorderStyle value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Font get_Font();
    public void set_Font(Font value);
    public virtual string ToString();
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("DataGridViewRowsStyle")]
public class Guna.UI2.WinForms.Guna2DataGridViewRowsStyle : object {
    private Guna2DataGridView _parent;
    private DataGridViewCellStyle _owner;
    private DataGridViewCellBorderStyle _BorderStyle;
    [DescriptionAttribute("The Dheight")]
public int Height { get; public set; }
    public DataGridViewCellBorderStyle BorderStyle { get; public set; }
    [DescriptionAttribute("The BackColor")]
public Color BackColor { get; public set; }
    [DescriptionAttribute("The ForeColor")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("The font style")]
public Font Font { get; public set; }
    [DescriptionAttribute("The Selection BackColor")]
public Color SelectionBackColor { get; public set; }
    [DescriptionAttribute("The selection ForeColor")]
public Color SelectionForeColor { get; public set; }
    public Guna2DataGridViewRowsStyle(DataGridViewCellStyle sender, Guna2DataGridView parent);
    private Guna2DataGridView Parent();
    private DataGridViewCellStyle Owner();
    public int get_Height();
    public void set_Height(int value);
    public DataGridViewCellBorderStyle get_BorderStyle();
    public void set_BorderStyle(DataGridViewCellBorderStyle value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    public Color get_SelectionForeColor();
    public void set_SelectionForeColor(Color value);
    public virtual string ToString();
}
public class Guna.UI2.WinForms.Guna2DataGridViewStyler : Component {
    private ContainerControl _containerControl;
    private IContainer components;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public ISite Site { get; public set; }
    public Guna2DataGridViewStyler(IContainer container);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <set_Site>b__4_0();
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("DataGridViewThemeStyle")]
public class Guna.UI2.WinForms.Guna2DataGridViewThemeStyle : object {
    private Guna2DataGridView _owner;
    [CompilerGeneratedAttribute]
private Guna2DataGridViewRowsStyle <RowsStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Guna2DataGridViewHeaderStyle <HeaderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Guna2DataGridViewAlternatingRowsStyle <AlternatingRowsStyle>k__BackingField;
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public Guna2DataGridViewRowsStyle RowsStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public Guna2DataGridViewHeaderStyle HeaderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public Guna2DataGridViewAlternatingRowsStyle AlternatingRowsStyle { get; public set; }
    [DescriptionAttribute("The BackColor")]
public Color BackColor { get; public set; }
    [DescriptionAttribute("The grid color")]
public Color GridColor { get; public set; }
    [DescriptionAttribute("The readonly property")]
public bool ReadOnly { get; public set; }
    public Guna2DataGridViewThemeStyle(Guna2DataGridView sender);
    private Guna2DataGridView Owner();
    [CompilerGeneratedAttribute]
public Guna2DataGridViewRowsStyle get_RowsStyle();
    [CompilerGeneratedAttribute]
public void set_RowsStyle(Guna2DataGridViewRowsStyle value);
    [CompilerGeneratedAttribute]
public Guna2DataGridViewHeaderStyle get_HeaderStyle();
    [CompilerGeneratedAttribute]
public void set_HeaderStyle(Guna2DataGridViewHeaderStyle value);
    [CompilerGeneratedAttribute]
public Guna2DataGridViewAlternatingRowsStyle get_AlternatingRowsStyle();
    [CompilerGeneratedAttribute]
public void set_AlternatingRowsStyle(Guna2DataGridViewAlternatingRowsStyle value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_GridColor();
    public void set_GridColor(Color value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public virtual string ToString();
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.DateTimePicker")]
[DesignerAttribute("Guna.UI2.Designer.DateTimePickerDesigner")]
[DescriptionAttribute("An advanced DateTimePicker Control.")]
[DefaultEventAttribute("ValueChanged")]
public class Guna.UI2.WinForms.Guna2DateTimePicker : Control {
    private AnimationManager _hoverAnimationManager;
    private AnimationManager _checkedAnimationManager;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    private bool _UseTransparentBackground;
    private G22190F0D5B1120504B250025230207091246321B2D150B65210311173F0805042A300002082F _dialog;
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private int _BorderRadius;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private ShadowDecoration _ShadowDecoration;
    private CustomizableEdges _CustomizableEdges;
    private DateTimePickerState _HoverState;
    private DateTimePickerState _CheckedState;
    private Color _FocusedColor;
    private Point _TextOffset;
    private HorizontalAlignment _TextAlign;
    private TextRenderingHint _TextRenderingHint;
    private TextTransform _TextTransform;
    private bool _Animated;
    private bool _Checked;
    private Color _FillColor;
    private bool _IndicateFocus;
    internal bool AnimatorGIF;
    private bool IsHover;
    protected MouseState MouseState;
    private Point mousePosition;
    private Image _calendarImage;
    private GraphicsPath GP;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private EventHandler FormatChanged;
    [CompilerGeneratedAttribute]
private EventHandler DropDown;
    [CompilerGeneratedAttribute]
private EventHandler CloseUp;
    [CompilerGeneratedAttribute]
private EventHandler LostFocus;
    [CompilerGeneratedAttribute]
private EventHandler GotFocus;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    private G22190F0D5B1120504B250025230207091246321B2D150B65210311173F0805042A300002082F dialog { get; }
    private DateTimePicker owner { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public DateTimePickerState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public DateTimePickerState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The focused color.")]
public Color FocusedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment.")]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("5")]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The control's text-transform property allows you to change the appearance of the text.")]
public TextTransform TextTransform { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "255, 136, 77")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [DefaultValueAttribute("False")]
public bool ShowUpDown { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
public string CustomFormat { get; public set; }
    [RefreshPropertiesAttribute("2")]
public DateTimePickerFormat Format { get; public set; }
    public DateTime MaxDate { get; public set; }
    public static DateTime MaximumDateTime { get; }
    public DateTime MinDate { get; public set; }
    public static DateTime MinimumDateTime { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public int PreferredHeight { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool ShowCheckBox { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [BindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
public DateTime Value { get; public set; }
    public void PerformClick();
    protected virtual void OnHandleCreated(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    private void InitializeAnimationManager();
    private void CheckedOnAnimationProgress(object sender);
    private void HoverOnAnimationProgress(object sender);
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private G22190F0D5B1120504B250025230207091246321B2D150B65210311173F0805042A300002082F get_dialog();
    private DateTimePicker get_owner();
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual DateTimePickerState get_HoverState();
    public virtual void set_HoverState(DateTimePickerState value);
    public virtual DateTimePickerState get_CheckedState();
    public virtual void set_CheckedState(DateTimePickerState value);
    public virtual Color get_FocusedColor();
    public virtual void set_FocusedColor(Color value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual TextTransform get_TextTransform();
    public virtual void set_TextTransform(TextTransform value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs kevent);
    public bool get_ShowUpDown();
    public void set_ShowUpDown(bool value);
    private Image GetCalendarImage();
    private Color HoverFillColor();
    private Color HoverForeColor();
    private Color HoverBorderColor();
    private Color CheckedFillColor();
    private Color CheckedForeColor();
    private Color CheckedBorderColor();
    private Bitmap DrawTriangle(Color color);
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
    public string get_CustomFormat();
    public void set_CustomFormat(string value);
    public DateTimePickerFormat get_Format();
    public void set_Format(DateTimePickerFormat value);
    public DateTime get_MaxDate();
    public void set_MaxDate(DateTime value);
    public static DateTime get_MaximumDateTime();
    public DateTime get_MinDate();
    public void set_MinDate(DateTime value);
    public static DateTime get_MinimumDateTime();
    public int get_PreferredHeight();
    public bool get_ShowCheckBox();
    public void set_ShowCheckBox(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public DateTime get_Value();
    public void set_Value(DateTime value);
    public virtual string ToString();
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_FormatChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FormatChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnFormatChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_DropDown(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDown(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDropDown(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_CloseUp(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CloseUp(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCloseUp(EventArgs e);
    private void owner_ValueChanged(object sender, EventArgs e);
    private void owner_FormatChanged(object sender, EventArgs e);
    private void owner_DropDown(object sender, EventArgs e);
    private void owner_CloseUp(object sender, EventArgs e);
    protected virtual void OnClick(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_GotFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GotFocus(EventHandler value);
    private void gunaControlFocusHandler1_GotFocus(object sender, EventArgs e);
    private void gunaControlFocusHandler1_LostFocus(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("The component that is used to drag a borderless winform.")]
public class Guna.UI2.WinForms.Guna2DragControl : Component {
    private G22190F0D5B1120504B250025230207091246290B28110B39164C281D1D041A drag;
    private IContainer components;
    [CompilerGeneratedAttribute]
private ContainerControl <ContainerControl>k__BackingField;
    private Control _TargetControl;
    private Color _DockIndicatorColor;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [DefaultValueAttribute("System.Windows.Forms.ContainerControl", "")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContainerControl ContainerControl { get; public set; }
    public ISite Site { get; public set; }
    [DefaultValueAttribute("System.Windows.Forms.Control", "")]
[DescriptionAttribute("The target control or form to apply drag.")]
public Control TargetControl { get; public set; }
    [DescriptionAttribute("Allows you to move the form or control on the vertical, horizontal or both axis.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DragOrientation DragOrientation { get; public set; }
    [DescriptionAttribute("Gets or sets a value indicating whether the parent form or control will be dragging.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DragMode DragMode { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Gets or sets a value indicating whether the parent form's opacity or transparency will be changed whenever it's being dragged on screen.")]
[BrowsableAttribute("False")]
public bool UseTransparentDrag { get; public set; }
    [DefaultValueAttribute("True")]
[DescriptionAttribute("Gets or sets a value indicating whether the parent form's opacity or transparency will be changed whenever it's being dragged on screen.")]
public bool TransparentWhileDrag { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0,9")]
[DescriptionAttribute("Gets or sets the opacity or transparency value that will be applied when the dragging starts.")]
public double DragStartTransparencyValue { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Double", "1")]
[DescriptionAttribute("Gets or sets the opacity or transparency value that will be applied when the dragging ends.")]
public double DragEndTransparencyValue { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets a value indicating whether the docking indicators will be used on the parent form.")]
[DefaultValueAttribute("False")]
public bool DockForm { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0,2")]
[DescriptionAttribute("Gets or sets the opacity or transparency of the docking indicators.")]
public double DockIndicatorTransparencyValue { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("Gets or sets the color of the docking indicators.")]
public Color DockIndicatorColor { get; public set; }
    public Guna2DragControl(Control control);
    public Guna2DragControl(IContainer container);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    public bool get_IsDesignMode();
    [CompilerGeneratedAttribute]
public ContainerControl get_ContainerControl();
    [CompilerGeneratedAttribute]
public void set_ContainerControl(ContainerControl value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public Control get_TargetControl();
    public void set_TargetControl(Control value);
    public DragOrientation get_DragOrientation();
    public void set_DragOrientation(DragOrientation value);
    public DragMode get_DragMode();
    public void set_DragMode(DragMode value);
    public bool get_UseTransparentDrag();
    public void set_UseTransparentDrag(bool value);
    public bool get_TransparentWhileDrag();
    public void set_TransparentWhileDrag(bool value);
    public double get_DragStartTransparencyValue();
    public void set_DragStartTransparencyValue(double value);
    public double get_DragEndTransparencyValue();
    public void set_DragEndTransparencyValue(double value);
    public bool get_DockForm();
    public void set_DockForm(bool value);
    public double get_DockIndicatorTransparencyValue();
    public void set_DockIndicatorTransparencyValue(double value);
    public Color get_DockIndicatorColor();
    public void set_DockIndicatorColor(Color value);
    public void SetDrag(Control control);
    public void SetDrag(ControlCollection controls);
    public void SetDrag(List`1<Control> controls);
    public void SetDrag(Control[] controls);
    public void RemoveDrag(ControlCollection controls);
    public void RemoveDrag(Control[] controls);
    public void RemoveDrag(List`1<Control> controls);
    public void RemoveDrag(Control control);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("A component to apply radius to the winform edges")]
public class Guna.UI2.WinForms.Guna2Elipse : Component {
    private IContainer components;
    private int _BorderRadius;
    private Timer timer1;
    private Control _TargetControl;
    private Region region;
    private Region defaultRegion;
    public ISite Site { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("6")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Control", "")]
[DescriptionAttribute("The target control to apply curves to the edges")]
public Control TargetControl { get; public set; }
    public Guna2Elipse(IContainer container);
    public Guna2Elipse(Control control);
    public Guna2Elipse(Control control, int borderRadius);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public Control get_TargetControl();
    public void set_TargetControl(Control value);
    public void SetElipse(Control control);
    public void SetElipse(Control control, int borderRadius);
    public void Clear();
    private void SetTargetControl(Control control);
    private void SetCallBackEvents(bool add);
    private void OnResize(object sender, EventArgs e);
    private void ResetControlRegion();
    private void CreateRegion(int radius);
    private void timer1_Tick(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Button")]
[DescriptionAttribute("An advanced button control that supports a gradient background.")]
[DesignerAttribute("Guna.UI2.Designer.GradientButtonDesigner")]
public class Guna.UI2.WinForms.Guna2GradientButton : Control {
    private bool AnimatorGIF;
    private Graphics curg;
    private DialogResult _dialogResult;
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private bool _TextFormatNoPrefix;
    private Color _FocusedColor;
    private int _BorderRadius;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private ShadowDecoration _ShadowDecoration;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    private Point _TextOffset;
    private HorizontalAlignment _TextAlign;
    private HorizontalAlignment _ImageAlign;
    private TextRenderingHint _TextRenderingHint;
    private TextTransform _TextTransform;
    private bool _Tile;
    private bool _Animated;
    private bool _Checked;
    private Color _FillColor;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private Color _PressedColor;
    private int _PressedDepth;
    private ButtonMode _ButtonMode;
    private bool _UseTransparentBackground;
    protected AnimationManager AnimationManager;
    protected AnimationManager HoveredAnimationManager;
    protected AnimationManager CheckedAnimationManager;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    private bool IsHover;
    internal MouseState MouseState;
    private int TileY;
    private GraphicsPath GP;
    private CustomizableEdges _CustomizableEdges;
    private bool _AnimatedGIF;
    private bool _IndicateFocus;
    private ButtonImages _CustomImages;
    private GradientButtonState _HoverState;
    private GradientButtonState _CheckedState;
    private GradientButtonState _DisabledState;
    private LinearGradientMode _GradientMode;
    private Color _FillColor2;
    private GradientButtonState tmp;
    private IdleStateState idleState;
    [DefaultValueAttribute("0")]
public DialogResult DialogResult { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Turns off processing of prefix characters. Typically, the ampersand (&amp;) mnemonic-prefix character is interpreted as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying (TextFormatNoPrefix = true), this processing is turned off. For example, an input string of "A & amp;bc & amp;&amp;d" with (TextFormatNoPrefix = true) applied would result in output of "A & amp;bc & amp;&amp;d"")]
public bool TextFormatNoPrefix { get; public set; }
    [BrowsableAttribute("False")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[DisplayNameAttribute("AutoSize")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Enables automatic resizing based.")]
public bool DefaultAutoSize { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Options")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("The focused color.")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color FocusedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Setting the position of the control's image.")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment.")]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's image alignment.")]
public HorizontalAlignment ImageAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The control's text-transform property allows you to change the appearance of the text.")]
public TextTransform TextTransform { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, tiles will be applied.")]
public bool Tile { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "94, 148, 255")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The color of the control when pressed down by the mouse.")]
public Color PressedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("30")]
[DescriptionAttribute("The visual effect of the pressing event. This property helps animate the pressing event.")]
public int PressedDepth { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The type of Button. The control can act as a toggle button, radio button, or general button.")]
public ButtonMode ButtonMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Allows animated GIF Image.")]
public bool AnimatedGIF { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Custom images of the control.")]
public ButtonImages CustomImages { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public GradientButtonState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public GradientButtonState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public GradientButtonState DisabledState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The gradient mode to be applied.")]
public LinearGradientMode GradientMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "255, 77, 165")]
[DescriptionAttribute("The second fill BackColor in a gradient mode.")]
public Color FillColor2 { get; public set; }
    private IdleStateState IdleState { get; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual bool ProcessMnemonic(char charCode);
    private void ResizeForAutoSize();
    private Size GetAutoSize();
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public sealed virtual DialogResult get_DialogResult();
    public sealed virtual void set_DialogResult(DialogResult value);
    public sealed virtual void NotifyDefault(bool value);
    public sealed virtual void PerformClick();
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_TextFormatNoPrefix();
    public virtual void set_TextFormatNoPrefix(bool value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public virtual bool get_DefaultAutoSize();
    public virtual void set_DefaultAutoSize(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual bool get_IsDesignMode();
    public virtual Color get_FocusedColor();
    public virtual void set_FocusedColor(Color value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Point get_ImageOffset();
    public virtual void set_ImageOffset(Point value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public virtual HorizontalAlignment get_ImageAlign();
    public virtual void set_ImageAlign(HorizontalAlignment value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual TextTransform get_TextTransform();
    public virtual void set_TextTransform(TextTransform value);
    public virtual bool get_Tile();
    public virtual void set_Tile(bool value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual Color get_PressedColor();
    public virtual void set_PressedColor(Color value);
    public virtual int get_PressedDepth();
    public virtual void set_PressedDepth(int value);
    public virtual ButtonMode get_ButtonMode();
    public virtual void set_ButtonMode(ButtonMode value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    protected void InitializeAnimationManager();
    private void CheckedAnimationManager_OnAnimationProgress(object sender);
    private void HoveredAnimationManager_OnAnimationProgress(object sender);
    private void AnimationManager_OnAnimationProgress(object sender);
    private void InvalidateControls();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    private void DrawTransparentControl(Graphics g);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs kevent);
    protected virtual void OnClick(EventArgs e);
    private void Initialize();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual bool get_AnimatedGIF();
    public virtual void set_AnimatedGIF(bool value);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    public virtual ButtonImages get_CustomImages();
    public virtual void set_CustomImages(ButtonImages value);
    public virtual GradientButtonState get_HoverState();
    public virtual void set_HoverState(GradientButtonState value);
    public virtual GradientButtonState get_CheckedState();
    public virtual void set_CheckedState(GradientButtonState value);
    public virtual GradientButtonState get_DisabledState();
    public virtual void set_DisabledState(GradientButtonState value);
    public virtual LinearGradientMode get_GradientMode();
    public virtual void set_GradientMode(LinearGradientMode value);
    public virtual Color get_FillColor2();
    public virtual void set_FillColor2(Color value);
    private Bitmap rippleBmp();
    private void ripple(Graphics g);
    private IdleStateState get_IdleState();
    private void SetupState();
    private Color bnc(Color c1, Color c2, bool op);
    private void BasePaint(Graphics g);
    protected virtual void OnPaint(PaintEventArgs e);
    private sealed virtual override void Guna.UI2.WinForms.Interfaces.ICustomButtonControl.Invalidate();
    [CompilerGeneratedAttribute]
private void <BasePaint>b__205_0(object _o, EventArgs _e);
    [CompilerGeneratedAttribute]
private void <BasePaint>b__205_1(object _o, EventArgs _e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Button")]
[DescriptionAttribute("An advanced circle button control that supports a gradient background.")]
[DesignerAttribute("Guna.UI2.Designer.GradientCircleButtonDesigner")]
public class Guna.UI2.WinForms.Guna2GradientCircleButton : Control {
    private bool AnimatorGIF;
    private Graphics curg;
    private DialogResult _dialogResult;
    private bool _TextFormatNoPrefix;
    private Color _FocusedColor;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private ShadowDecoration _ShadowDecoration;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    private Point _TextOffset;
    private HorizontalAlignment _TextAlign;
    private HorizontalAlignment _ImageAlign;
    private TextRenderingHint _TextRenderingHint;
    private TextTransform _TextTransform;
    private bool _Tile;
    private bool _Animated;
    private bool _Checked;
    private Color _FillColor;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private Color _PressedColor;
    private int _PressedDepth;
    private ButtonMode _ButtonMode;
    private bool _UseTransparentBackground;
    protected AnimationManager AnimationManager;
    protected AnimationManager HoveredAnimationManager;
    protected AnimationManager CheckedAnimationManager;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    private bool IsHover;
    internal MouseState MouseState;
    private GraphicsPath GP;
    private bool _AnimatedGIF;
    private bool _IndicateFocus;
    private ButtonImages _CustomImages;
    private GradientButtonState _HoverState;
    private GradientButtonState _CheckedState;
    private GradientButtonState _DisabledState;
    private LinearGradientMode _GradientMode;
    private Color _FillColor2;
    private GradientButtonState tmp;
    private IdleStateState idleState;
    [DefaultValueAttribute("0")]
public DialogResult DialogResult { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Turns off processing of prefix characters. Typically, the ampersand (&amp;) mnemonic-prefix character is interpreted as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying (TextFormatNoPrefix = true), this processing is turned off. For example, an input string of "A & amp;bc & amp;&amp;d" with (TextFormatNoPrefix = true) applied would result in output of "A & amp;bc & amp;&amp;d"")]
public bool TextFormatNoPrefix { get; public set; }
    [BrowsableAttribute("False")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[DisplayNameAttribute("AutoSize")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Enables automatic resizing based.")]
public bool DefaultAutoSize { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Options")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("The focused color.")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color FocusedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Setting the position of the control's image.")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment.")]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's image alignment.")]
public HorizontalAlignment ImageAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The control's text-transform property allows you to change the appearance of the text.")]
public TextTransform TextTransform { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("If true, tiles will be applied.")]
public bool Tile { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "94, 148, 255")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The color of the control when pressed down by the mouse.")]
public Color PressedColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("30")]
[DescriptionAttribute("The visual effect of the pressing event. This property helps animate the pressing event.")]
public int PressedDepth { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The type of Button. The control can act as a toggle button, radio button, or general button.")]
public ButtonMode ButtonMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Allows animated GIF Image.")]
public bool AnimatedGIF { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Custom images of the control.")]
public ButtonImages CustomImages { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public GradientButtonState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public GradientButtonState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public GradientButtonState DisabledState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The gradient mode to be applied.")]
public LinearGradientMode GradientMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "255, 77, 165")]
[DescriptionAttribute("The second fill BackColor in a gradient mode.")]
public Color FillColor2 { get; public set; }
    private IdleStateState IdleState { get; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual bool ProcessMnemonic(char charCode);
    private void ResizeForAutoSize();
    private Size GetAutoSize();
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public sealed virtual DialogResult get_DialogResult();
    public sealed virtual void set_DialogResult(DialogResult value);
    public sealed virtual void NotifyDefault(bool value);
    public sealed virtual void PerformClick();
    public virtual bool get_TextFormatNoPrefix();
    public virtual void set_TextFormatNoPrefix(bool value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public virtual bool get_DefaultAutoSize();
    public virtual void set_DefaultAutoSize(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual bool get_IsDesignMode();
    public virtual Color get_FocusedColor();
    public virtual void set_FocusedColor(Color value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Point get_ImageOffset();
    public virtual void set_ImageOffset(Point value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public virtual HorizontalAlignment get_ImageAlign();
    public virtual void set_ImageAlign(HorizontalAlignment value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual TextTransform get_TextTransform();
    public virtual void set_TextTransform(TextTransform value);
    public virtual bool get_Tile();
    public virtual void set_Tile(bool value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual Color get_PressedColor();
    public virtual void set_PressedColor(Color value);
    public virtual int get_PressedDepth();
    public virtual void set_PressedDepth(int value);
    public virtual ButtonMode get_ButtonMode();
    public virtual void set_ButtonMode(ButtonMode value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    protected void InitializeAnimationManager();
    private void CheckedAnimationManager_OnAnimationProgress(object sender);
    private void HoveredAnimationManager_OnAnimationProgress(object sender);
    private void AnimationManager_OnAnimationProgress(object sender);
    private void InvalidateControls();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    private void DrawTransparentControl(Graphics g);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs kevent);
    protected virtual void OnClick(EventArgs e);
    private void Initialize();
    public virtual bool get_AnimatedGIF();
    public virtual void set_AnimatedGIF(bool value);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    public virtual ButtonImages get_CustomImages();
    public virtual void set_CustomImages(ButtonImages value);
    public virtual GradientButtonState get_HoverState();
    public virtual void set_HoverState(GradientButtonState value);
    public virtual GradientButtonState get_CheckedState();
    public virtual void set_CheckedState(GradientButtonState value);
    public virtual GradientButtonState get_DisabledState();
    public virtual void set_DisabledState(GradientButtonState value);
    public virtual LinearGradientMode get_GradientMode();
    public virtual void set_GradientMode(LinearGradientMode value);
    public virtual Color get_FillColor2();
    public virtual void set_FillColor2(Color value);
    private Bitmap rippleBmp();
    private void ripple(Graphics g);
    private IdleStateState get_IdleState();
    private void SetupState();
    private Color bnc(Color c1, Color c2, bool op);
    private void BasePaint(Graphics g);
    protected virtual void OnPaint(PaintEventArgs e);
    private sealed virtual override void Guna.UI2.WinForms.Interfaces.ICustomButtonControl.Invalidate();
    [CompilerGeneratedAttribute]
private void <BasePaint>b__190_0(object _o, EventArgs _e);
    [CompilerGeneratedAttribute]
private void <BasePaint>b__190_1(object _o, EventArgs _e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Panel")]
[DescriptionAttribute("A gradient panel control.")]
public class Guna.UI2.WinForms.Guna2GradientPanel : Panel {
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private CustomizableEdges _CustomizableEdges;
    private ShadowDecoration _ShadowDecoration;
    private DashStyle _BorderStyle;
    private Color _FillColor;
    private Color _FillColor2;
    private Color _BorderColor;
    private int _BorderThickness;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private int _BorderRadius;
    private LinearGradientMode _GradientMode;
    private bool _UseTransparentBackground;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The second fill BackColor in a gradient mode.")]
public Color FillColor2 { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The gradient mode to be applied.")]
public LinearGradientMode GradientMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    protected virtual void OnResize(EventArgs eventargs);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public DashStyle get_BorderStyle();
    public void set_BorderStyle(DashStyle value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_FillColor2();
    public virtual void set_FillColor2(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual LinearGradientMode get_GradientMode();
    public virtual void set_GradientMode(LinearGradientMode value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    protected virtual void OnHandleCreated(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
}
public class Guna.UI2.WinForms.Guna2GradientTileButton : Guna2GradientButton {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("If true, tiles will be applied.")]
public bool Tile { get; public set; }
    public virtual bool get_Tile();
    public virtual void set_Tile(bool value);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("Represents a Windows control that displays a frame around a group of controls with an optional caption.")]
public class Guna.UI2.WinForms.Guna2GroupBox : ContainerControl {
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private ShadowDecoration _ShadowDecoration;
    private CustomizableEdges _CustomizableEdges;
    private Color _FillColor;
    private Color _BorderColor;
    private int _BorderThickness;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private int _BorderRadius;
    private TextRenderingHint _TextRenderingHint;
    private HorizontalAlignment _TextAlign;
    private DashStyle _BorderStyle;
    private TextTransform _TextTransform;
    private Point _TextOffset;
    private bool _UseTransparentBackground;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 40, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment.")]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The control's text-transform property allows you to change the appearance of the text.")]
public TextTransform TextTransform { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Options")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    public Rectangle DisplayRectangle { get; }
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public DashStyle get_BorderStyle();
    public void set_BorderStyle(DashStyle value);
    public virtual TextTransform get_TextTransform();
    public virtual void set_TextTransform(TextTransform value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    private Rectangle Deflate(Rectangle rect, int left, int top, int right, int bottom);
    private Rectangle Deflate(Rectangle rect, Padding val);
    public virtual Rectangle get_DisplayRectangle();
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.HScrollBar")]
[DescriptionAttribute("A HScrollBar control.")]
[DesignerAttribute("Guna.UI2.Designer.ScrollBarDesigner")]
[DefaultEventAttribute("Scroll")]
[DefaultPropertyAttribute("Value")]
public class Guna.UI2.WinForms.Guna2HScrollBar : UserControl {
    private Guna2ControlFocusHandler gunaControlFocusHandler1;
    private G22190F0D5B1120504B250025230207091246321B2D150B653601171D070D2A001C owner;
    private IContainer components;
    private IScroll scroll;
    private Control _BindingContainer;
    [CompilerGeneratedAttribute]
private EventHandler MaximumChanged;
    [CompilerGeneratedAttribute]
private EventHandler MinimumChanged;
    [CompilerGeneratedAttribute]
private ScrollEventHandler Scroll;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private EventHandler LostFocus;
    [CompilerGeneratedAttribute]
private EventHandler GotFocus;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Control", "")]
[DescriptionAttribute("Bind scrollbar to selected control, e.g: 'Panel', 'FlowLayoutPanel', 'UserControl', 'ContainerControl' or 'TextBox', 'RichTextBox', 'DataGridView', 'ListBox', 'CheckedListBox' and 'TreeView'.'")]
public Control BindingContainer { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public ScrollBarState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The state of the control when pressed.")]
public ScrollBarState PressedState { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Sets the thumb's style in relation to the ScrollBar.")]
[DefaultValueAttribute("0")]
public ThumbStyle ThumbStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("10")]
[DescriptionAttribute("The MouseWheel Bar Partitions when using the mouse wheel.")]
public int MouseWheelBarPartitions { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("The size of the scrollbar")]
public int ScrollbarSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("10")]
[DescriptionAttribute("The control's thumb size.")]
public float ThumbSize { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the bar will be highlighted on mouse wheel")]
public bool HighlightOnWheel { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The minimum scrollbar value")]
public int Minimum { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("100")]
[DescriptionAttribute("The maximum scrollbar value")]
public int Maximum { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The amount by which the scroll box position changes when the user clicks a scroll arrow or presses an arrow key.")]
public int SmallChange { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("5")]
[DescriptionAttribute("The amount by which the scroll box position changes when the user clicks a scroll arrow or presses the PAGE UP or PAGE DOWN keys.")]
public int LargeChange { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "139, 152, 166")]
[DescriptionAttribute("The scrollbar thumb color.")]
public Color ThumbColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The state of the control indicating whether it is being updated or not.")]
public bool InUpdate { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The scrollbar current value.")]
public int Value { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The bar positioning property.")]
public Padding FillOffset { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    internal void InternalMouseWheel(MouseEventArgs e);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    public virtual Control get_BindingContainer();
    public virtual void set_BindingContainer(Control value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual ScrollBarState get_HoverState();
    public virtual void set_HoverState(ScrollBarState value);
    public virtual ScrollBarState get_PressedState();
    public virtual void set_PressedState(ScrollBarState value);
    public virtual ThumbStyle get_ThumbStyle();
    public virtual void set_ThumbStyle(ThumbStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual int get_MouseWheelBarPartitions();
    public virtual void set_MouseWheelBarPartitions(int value);
    public virtual int get_ScrollbarSize();
    public virtual void set_ScrollbarSize(int value);
    public virtual float get_ThumbSize();
    public virtual void set_ThumbSize(float value);
    public virtual bool get_HighlightOnWheel();
    public virtual void set_HighlightOnWheel(bool value);
    public virtual int get_Minimum();
    public virtual void set_Minimum(int value);
    public virtual int get_Maximum();
    public virtual void set_Maximum(int value);
    public virtual int get_SmallChange();
    public virtual void set_SmallChange(int value);
    public virtual int get_LargeChange();
    public virtual void set_LargeChange(int value);
    public virtual Color get_ThumbColor();
    public virtual void set_ThumbColor(Color value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual bool get_InUpdate();
    public virtual void set_InUpdate(bool value);
    public virtual int get_Value();
    public virtual void set_Value(int value);
    public virtual Padding get_FillOffset();
    public virtual void set_FillOffset(Padding value);
    public bool HitTest(Point point);
    [SecuritySafeCriticalAttribute]
public void BeginUpdate();
    [SecuritySafeCriticalAttribute]
public void EndUpdate();
    [CompilerGeneratedAttribute]
public void add_MaximumChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MaximumChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMaximumChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_MinimumChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MinimumChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMinimumChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_Scroll(ScrollEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Scroll(ScrollEventHandler value);
    protected virtual void OnScrollChanged(ScrollEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    private void owner_Scroll(object sender, ScrollEventArgs e);
    private void owner_ValueChanged(object sender, EventArgs e);
    protected virtual void OnResize(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_GotFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GotFocus(EventHandler value);
    private void gunaControlFocusHandler1_GotFocus(object sender, EventArgs e);
    private void gunaControlFocusHandler1_LostFocus(object sender, EventArgs e);
    public void UpdateScroll();
}
[DescriptionAttribute("A Label control that supports html tags. See our YouTube tutorials to learn more.")]
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Label")]
public class Guna.UI2.WinForms.Guna2HtmlLabel : Control {
    protected HtmlContainer _htmlContainer;
    protected BorderStyle _borderStyle;
    protected string _baseRawCssData;
    protected CssData _baseCssData;
    protected string _text;
    protected bool _autoSizeHight;
    protected bool _useSystemCursors;
    protected TextRenderingHint _textRenderingHint;
    private bool IsRedy;
    [CompilerGeneratedAttribute]
private EventHandler BorderStyleChanged;
    [CompilerGeneratedAttribute]
private EventHandler LoadComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlLinkClickedEventArgs> LinkClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlRenderErrorEventArgs> RenderError;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlStylesheetLoadEventArgs> StylesheetLoad;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlImageLoadEventArgs> ImageLoad;
    private ContentAlignment _TextAlignment;
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If anti-aliasing should be avoided for geometry like backgrounds and borders")]
public bool AvoidGeometryAntialias { get; public set; }
    [CategoryAttribute("Behavior")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If to use GDI+ text rendering to measure/draw text, false - use GDI")]
public bool UseGdiPlusTextRendering { get; public set; }
    [CategoryAttribute("Behavior")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute]
[DescriptionAttribute("The text rendering hint to be used for text rendering.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [CategoryAttribute("Behavior")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If to use cursors defined by the operating system or .NET cursors")]
public bool UseSystemCursors { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Windows.Forms.BorderStyle", "None")]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
[DescriptionAttribute("Is content selection is enabled for the rendered html.")]
public bool IsSelectionEnabled { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
[DescriptionAttribute("Is the build-in context menu enabled and will be shown on mouse right click.")]
public bool IsContextMenuEnabled { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Set base stylesheet to be used by html rendered in the control.")]
[CategoryAttribute("Appearance")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design", "System.Drawing.Design.UITypeEditor")]
internal string BaseStylesheet { get; internal set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
[DescriptionAttribute("Automatically sets the size of the label by content size.")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Layout")]
[DescriptionAttribute("Automatically sets the height of the label by content height (width is not effected)")]
public bool AutoSizeHeightOnly { get; public set; }
    [DescriptionAttribute("If AutoSize or AutoSizeHeightOnly is set this will restrict the max size of the control (0 is not restricted)")]
public Size MaximumSize { get; public set; }
    [DescriptionAttribute("If AutoSize or AutoSizeHeightOnly is set this will restrict the min size of the control (0 is not restricted)")]
public Size MinimumSize { get; public set; }
    [EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design", "System.Drawing.Design.UITypeEditor")]
[DescriptionAttribute("Sets the html of this control.")]
public string Text { get; public set; }
    [DisplayNameAttribute("TextAlign")]
[BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("Determines the position of the text within the label. Referred to as 'TextAlignment' when using it in code.")]
public ContentAlignment TextAlignment { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets the foreground color of the control")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets the font of the text displayed by the control")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
public string SelectedText { get; }
    [BrowsableAttribute("False")]
public string SelectedHtml { get; }
    protected CreateParams CreateParams { get; }
    [BrowsableAttribute("False")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("False")]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
public Cursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
public bool UseWaitCursor { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_BorderStyleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BorderStyleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    public virtual bool get_AvoidGeometryAntialias();
    public virtual void set_AvoidGeometryAntialias(bool value);
    public virtual bool get_UseGdiPlusTextRendering();
    public virtual void set_UseGdiPlusTextRendering(bool value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual bool get_UseSystemCursors();
    public virtual void set_UseSystemCursors(bool value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public virtual bool get_IsSelectionEnabled();
    public virtual void set_IsSelectionEnabled(bool value);
    public virtual bool get_IsContextMenuEnabled();
    public virtual void set_IsContextMenuEnabled(bool value);
    internal virtual string get_BaseStylesheet();
    internal virtual void set_BaseStylesheet(string value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public virtual bool get_AutoSizeHeightOnly();
    public virtual void set_AutoSizeHeightOnly(bool value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public ContentAlignment get_TextAlignment();
    public void set_TextAlignment(ContentAlignment value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_SelectedText();
    public virtual string get_SelectedHtml();
    public virtual string GetHtml();
    public virtual Nullable`1<RectangleF> GetElementRectangle(string elementId);
    public void ClearSelection();
    protected virtual void OnResize(EventArgs e);
    public string ColorToHtml(Color color);
    private string ColorToRgb(Color color);
    private void renderText();
    protected virtual CreateParams get_CreateParams();
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnBorderStyleChanged(EventArgs e);
    protected virtual void OnLoadComplete(EventArgs e);
    protected virtual void OnLinkClicked(HtmlLinkClickedEventArgs e);
    protected virtual void OnRenderError(HtmlRenderErrorEventArgs e);
    protected virtual void OnStylesheetLoad(HtmlStylesheetLoadEventArgs e);
    protected virtual void OnImageLoad(HtmlImageLoadEventArgs e);
    protected virtual void OnRefresh(HtmlRefreshEventArgs e);
    protected virtual void WndProc(Message& m);
    protected virtual void Dispose(bool disposing);
    private void OnLoadComplete(object sender, EventArgs e);
    private void OnLinkClicked(object sender, HtmlLinkClickedEventArgs e);
    private void OnRenderError(object sender, HtmlRenderErrorEventArgs e);
    private void OnStylesheetLoad(object sender, HtmlStylesheetLoadEventArgs e);
    private void OnImageLoad(object sender, HtmlImageLoadEventArgs e);
    private void OnRefresh(object sender, HtmlRefreshEventArgs e);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    public bool get_UseWaitCursor();
    public void set_UseWaitCursor(bool value);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.ToolTip")]
[DescriptionAttribute("An HtmlLabel Control.")]
public class Guna.UI2.WinForms.Guna2HtmlToolTip : ToolTip {
    protected HtmlContainer _htmlContainer;
    protected string _baseRawCssData;
    protected CssData _baseCssData;
    protected TextRenderingHint _textRenderingHint;
    private string _tooltipCssClass;
    private Control _associatedControl;
    private Timer _linkHandlingTimer;
    private IntPtr _tooltipHandle;
    private bool _allowLinksHandling;
    private Color _BorderColor;
    private Font _Font;
    private Font _TitleFont;
    private Color _TitleForeColor;
    [CompilerGeneratedAttribute]
private bool <OwnerDraw>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlLinkClickedEventArgs> LinkClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlRenderErrorEventArgs> RenderError;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlStylesheetLoadEventArgs> StylesheetLoad;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlImageLoadEventArgs> ImageLoad;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "125, 137, 149")]
[DescriptionAttribute("The tooltip ForeColor.")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The tooltip BackColor.")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[DescriptionAttribute("The tooltip BorderColor.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Segoe UI, 9pt")]
[DescriptionAttribute("The tooltip font style.")]
public Font Font { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Segoe UI, 9pt, style=Bold")]
[DescriptionAttribute("The tooltip title font style.")]
public Font TitleFont { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "94, 148, 255")]
[DescriptionAttribute("The tooltip title ForeColor.")]
public Color TitleForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DescriptionAttribute("If true, the tooltip will draw itself.")]
public bool OwnerDraw { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("0")]
[DescriptionAttribute("If to use GDI+ text rendering to measure/draw text, false - use GDI")]
public bool UseGdiPlusTextRendering { get; public set; }
    [CategoryAttribute("Behavior")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute]
[DescriptionAttribute("The text rendering hint to be used for text rendering.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("Set base stylesheet to be used by html rendered in the tooltip.")]
[CategoryAttribute("Appearance")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design", "System.Drawing.Design.UITypeEditor")]
internal string BaseStylesheet { get; internal set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The CSS class used for tooltip html root div.")]
[CategoryAttribute("Appearance")]
internal string TooltipCssClass { get; internal set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If to handle links in the tooltip.")]
[CategoryAttribute("Behavior")]
public bool AllowLinksHandling { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Layout")]
[DescriptionAttribute("Restrict the max size of the shown tooltip (0 is not restricted)")]
public Size MaximumSize { get; public set; }
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Font get_Font();
    public void set_Font(Font value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public Color get_TitleForeColor();
    public void set_TitleForeColor(Color value);
    [CompilerGeneratedAttribute]
public bool get_OwnerDraw();
    [CompilerGeneratedAttribute]
public void set_OwnerDraw(bool value);
    [CompilerGeneratedAttribute]
public void add_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    public bool get_UseGdiPlusTextRendering();
    public void set_UseGdiPlusTextRendering(bool value);
    public TextRenderingHint get_TextRenderingHint();
    public void set_TextRenderingHint(TextRenderingHint value);
    internal virtual string get_BaseStylesheet();
    internal virtual void set_BaseStylesheet(string value);
    internal virtual string get_TooltipCssClass();
    internal virtual void set_TooltipCssClass(string value);
    public virtual bool get_AllowLinksHandling();
    public virtual void set_AllowLinksHandling(bool value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public void SetToolTip(Control control, string caption);
    public string ColorToHtml(Color color);
    internal string ColorToRgb(Color color);
    private void renderToolTipText(string text, string title);
    protected virtual void OnToolTipPopup(PopupEventArgs e);
    protected virtual void OnToolTipDraw(DrawToolTipEventArgs e);
    protected virtual void AdjustTooltipPosition(Control associatedControl, Size size);
    protected virtual void OnLinkClicked(HtmlLinkClickedEventArgs e);
    protected virtual void OnRenderError(HtmlRenderErrorEventArgs e);
    protected virtual void OnStylesheetLoad(HtmlStylesheetLoadEventArgs e);
    protected virtual void OnImageLoad(HtmlImageLoadEventArgs e);
    protected virtual void OnLinkHandlingTimerTick(EventArgs e);
    protected virtual void OnToolTipDisposed(EventArgs e);
    private void OnToolTipPopup(object sender, PopupEventArgs e);
    private void OnToolTipDraw(object sender, DrawToolTipEventArgs e);
    private void OnRenderError(object sender, HtmlRenderErrorEventArgs e);
    private void OnStylesheetLoad(object sender, HtmlStylesheetLoadEventArgs e);
    private void OnImageLoad(object sender, HtmlImageLoadEventArgs e);
    private void OnLinkClicked(object sender, HtmlLinkClickedEventArgs e);
    private void OnLinkHandlingTimerTick(object sender, EventArgs e);
    private void OnToolTipDisposed(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Button")]
[DescriptionAttribute("An advanced ImageButton control.")]
[DesignerAttribute("Guna.UI2.Designer.ImageButtonDesigner")]
public class Guna.UI2.WinForms.Guna2ImageButton : Control {
    private ShadowDecoration _ShadowDecoration;
    private bool _UseTransparentBackground;
    private bool _AnimatedGIF;
    private float _Rotate;
    private FlipOrientation _Flip;
    private ImageControlState _HoverState;
    private ImageControlState _CheckedState;
    private ImageControlState _PressedState;
    private bool _IndicateFocus;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    private bool _Checked;
    private bool _TextFormatNoPrefix;
    internal bool AnimatorGIF;
    private bool IsHover;
    internal bool UseMouseStateInvalidate;
    internal bool UseFocusInvalidate;
    protected MouseState MouseState;
    private DialogResult _dialogResult;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Allows animated GIF Image.")]
public bool AnimatedGIF { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set image rotation from 0 to 360.")]
public float ImageRotate { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set the image orientation to flip the image.")]
public FlipOrientation ImageFlip { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public ImageControlState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public ImageControlState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The state of the control when pressed.")]
public ImageControlState PressedState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "64, 64")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("False")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Turns off processing of prefix characters. Typically, the ampersand (&amp;) mnemonic-prefix character is interpreted as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying (TextFormatNoPrefix = true), this processing is turned off. For example, an input string of "A & amp;bc & amp;&amp;d" with (TextFormatNoPrefix = true) applied would result in output of "A & amp;bc & amp;&amp;d"")]
public bool TextFormatNoPrefix { get; public set; }
    [DefaultValueAttribute("0")]
public DialogResult DialogResult { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual bool ProcessMnemonic(char charCode);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual bool get_IsDesignMode();
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    public virtual bool get_AnimatedGIF();
    public virtual void set_AnimatedGIF(bool value);
    public virtual float get_ImageRotate();
    public virtual void set_ImageRotate(float value);
    public virtual FlipOrientation get_ImageFlip();
    public virtual void set_ImageFlip(FlipOrientation value);
    public virtual ImageControlState get_HoverState();
    public virtual void set_HoverState(ImageControlState value);
    public virtual ImageControlState get_CheckedState();
    public virtual void set_CheckedState(ImageControlState value);
    public virtual ImageControlState get_PressedState();
    public virtual void set_PressedState(ImageControlState value);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Point get_ImageOffset();
    public virtual void set_ImageOffset(Point value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_TextFormatNoPrefix();
    public virtual void set_TextFormatNoPrefix(bool value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    public sealed virtual DialogResult get_DialogResult();
    public sealed virtual void set_DialogResult(DialogResult value);
    public sealed virtual void NotifyDefault(bool value);
    public sealed virtual void PerformClick();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs kevent);
    private Image HoverImage();
    private Size HoverImageSize();
    private Point HoverImageOffset();
    private Image PressedImage();
    private Size PressedImageSize();
    private Point PressedImageOffset();
    private Image CheckedImage();
    private Size CheckedImageSize();
    private Point CheckedImageOffset();
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
    private sealed virtual override void Guna.UI2.WinForms.Interfaces.IImageControl.Invalidate();
    [CompilerGeneratedAttribute]
private void <BasePaint>b__103_0(object _o, EventArgs _e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.CheckBox")]
[DescriptionAttribute("An Advanced ImageCheckBox control.")]
[DesignerAttribute("Guna.UI2.Designer.ImageCheckBoxDesigner")]
[DefaultEventAttribute("CheckedChanged")]
public class Guna.UI2.WinForms.Guna2ImageCheckBox : Control {
    private ShadowDecoration _ShadowDecoration;
    private bool _UseTransparentBackground;
    private bool _IndicateFocus;
    private float _Rotate;
    private FlipOrientation _Flip;
    private ImageControlState _HoverState;
    private ImageControlState _CheckedState;
    private ImageControlState _PressedState;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    private bool _Checked;
    internal bool AnimatorGIF;
    private bool IsHover;
    internal bool UseMouseStateInvalidate;
    internal bool UseFocusInvalidate;
    protected MouseState MouseState;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set image rotation from 0 to 360.")]
public float ImageRotate { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set the image orientation to flip the image.")]
public FlipOrientation ImageFlip { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public ImageControlState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public ImageControlState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The state of the control when pressed.")]
public ImageControlState PressedState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("False")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual bool get_IsDesignMode();
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    public virtual float get_ImageRotate();
    public virtual void set_ImageRotate(float value);
    public virtual FlipOrientation get_ImageFlip();
    public virtual void set_ImageFlip(FlipOrientation value);
    public virtual ImageControlState get_HoverState();
    public virtual void set_HoverState(ImageControlState value);
    public virtual ImageControlState get_CheckedState();
    public virtual void set_CheckedState(ImageControlState value);
    public virtual ImageControlState get_PressedState();
    public virtual void set_PressedState(ImageControlState value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Point get_ImageOffset();
    public virtual void set_ImageOffset(Point value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    private Image HoverImage();
    private Size HoverImageSize();
    private Point HoverImageOffset();
    private Image PressedImage();
    private Size PressedImageSize();
    private Point PressedImageOffset();
    private Image CheckedImage();
    private Size CheckedImageSize();
    private Point CheckedImageOffset();
    protected virtual void OnResize(EventArgs e);
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
    private sealed virtual override void Guna.UI2.WinForms.Interfaces.IImageControl.Invalidate();
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.RadioButton")]
[DescriptionAttribute("An advanced ImageRadioButton control.")]
[DesignerAttribute("Guna.UI2.Designer.ImageRadioButtonDesigner")]
[DefaultEventAttribute("CheckedChanged")]
public class Guna.UI2.WinForms.Guna2ImageRadioButton : Control {
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    private ShadowDecoration _ShadowDecoration;
    private bool _UseTransparentBackground;
    private bool _IndicateFocus;
    private float _Rotate;
    private FlipOrientation _Flip;
    private ImageControlState _HoverState;
    private ImageControlState _CheckedState;
    private ImageControlState _PressedState;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    private bool _Checked;
    internal bool AnimatorGIF;
    private bool IsHover;
    internal bool UseMouseStateInvalidate;
    internal bool UseFocusInvalidate;
    protected MouseState MouseState;
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set image rotation from 0 to 360.")]
public float ImageRotate { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set the image orientation to flip the image.")]
public FlipOrientation ImageFlip { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public ImageControlState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public ImageControlState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The state of the control when pressed.")]
public ImageControlState PressedState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("False")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    private void InvalidateControls();
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public sealed virtual bool get_IsDesignMode();
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    public virtual float get_ImageRotate();
    public virtual void set_ImageRotate(float value);
    public virtual FlipOrientation get_ImageFlip();
    public virtual void set_ImageFlip(FlipOrientation value);
    public virtual ImageControlState get_HoverState();
    public virtual void set_HoverState(ImageControlState value);
    public virtual ImageControlState get_CheckedState();
    public virtual void set_CheckedState(ImageControlState value);
    public virtual ImageControlState get_PressedState();
    public virtual void set_PressedState(ImageControlState value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Point get_ImageOffset();
    public virtual void set_ImageOffset(Point value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnClick(EventArgs e);
    private Image HoverImage();
    private Size HoverImageSize();
    private Point HoverImageOffset();
    private Image PressedImage();
    private Size PressedImageSize();
    private Point PressedImageOffset();
    private Image CheckedImage();
    private Size CheckedImageSize();
    private Point CheckedImageOffset();
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
    private sealed virtual override void Guna.UI2.WinForms.Interfaces.IImageControl.Invalidate();
}
public class Guna.UI2.WinForms.Guna2MessageDialog : Component {
    private IContainer components;
    [CompilerGeneratedAttribute]
private Form <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageDialogButtons <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageDialogIcon <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageDialogStyle <Style>k__BackingField;
    public Form Parent { get; public set; }
    public string Text { get; public set; }
    public string Caption { get; public set; }
    public MessageDialogButtons Buttons { get; public set; }
    public MessageDialogIcon Icon { get; public set; }
    public MessageDialogStyle Style { get; public set; }
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
public Form get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(Form value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public MessageDialogButtons get_Buttons();
    [CompilerGeneratedAttribute]
public void set_Buttons(MessageDialogButtons value);
    [CompilerGeneratedAttribute]
public MessageDialogIcon get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(MessageDialogIcon value);
    [CompilerGeneratedAttribute]
public MessageDialogStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(MessageDialogStyle value);
    public DialogResult Show();
    public DialogResult Show(string text);
    public DialogResult Show(string text, string caption);
}
public class Guna.UI2.WinForms.Guna2MouseStateHandler : Component {
    private IContainer components;
    [CompilerGeneratedAttribute]
private EventHandler HoverState;
    [CompilerGeneratedAttribute]
private EventHandler PressedState;
    [CompilerGeneratedAttribute]
private EventHandler IdleState;
    private List`1<MouseStateHandlerItem> Items;
    private MouseState _MouseState;
    public ISite Site { get; public set; }
    private MouseState MouseState { get; private set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    public Guna2MouseStateHandler(IContainer container);
    protected virtual void Dispose(bool disposing);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
public void add_HoverState(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HoverState(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PressedState(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PressedState(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_IdleState(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IdleState(EventHandler value);
    private MouseState get_MouseState();
    private void set_MouseState(MouseState value);
    public int get_Count();
    public void Add(Control control);
    public void Remove(Control control);
    public void Clear();
}
public class Guna.UI2.WinForms.Guna2NotificationPaint : Component {
    private IContainer components;
    private Color _FillColor;
    private int _BorderRadius;
    private Color _BorderColor;
    private Color _ForeColor;
    private string _Text;
    private int _BorderThickness;
    private bool _Visible;
    private Point _Location;
    private Size _Size;
    private Font _Font;
    private Control _TargetControl;
    private CustomContentAlignment _Alignment;
    private Point _Offset;
    public ISite Site { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "255, 128, 0")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("4")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point Location { get; public set; }
    [DefaultValueAttribute("System.Drawing.Size", "18, 18")]
public Size Size { get; public set; }
    private Rectangle ClientRectangle { get; }
    [DefaultValueAttribute("System.Drawing.Font", "Segoe UI, 8.23pt, style=Bold")]
public Font Font { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Control", "")]
[DescriptionAttribute("The target control to apply curves to the edges")]
public Control TargetControl { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CustomContentAlignment Alignment { get; public set; }
    [DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point Offset { get; public set; }
    public Guna2NotificationPaint(Control control);
    public Guna2NotificationPaint(IContainer container);
    protected virtual void Dispose(bool disposing);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    private void InitializeComponent();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public string get_Text();
    public void set_Text(string value);
    public int get_BorderThickness();
    public void set_BorderThickness(int value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    private Rectangle get_ClientRectangle();
    public Font get_Font();
    public void set_Font(Font value);
    public Control get_TargetControl();
    public void set_TargetControl(Control value);
    public CustomContentAlignment get_Alignment();
    public void set_Alignment(CustomContentAlignment value);
    public Point get_Offset();
    public void set_Offset(Point value);
    private Point getAlign();
    private void Invalidate();
    private int bottom();
    private int right();
    private int hcenter();
    private int wcenter();
    private void Paint(object sender, PaintEventArgs e);
}
[ToolboxBitmapAttribute("System.Windows.Forms.NumericUpDown")]
[DescriptionAttribute("A numeric UpDown control.")]
[DesignerAttribute("Guna.UI2.Designer.NumericUpDownDesigner")]
[DefaultEventAttribute("ValueChanged")]
public class Guna.UI2.WinForms.Guna2NumericUpDown : UserControl {
    private G22190F0D5B1120504B250025230207091246321B2D150B653012211D1C0F2A141A2D0E00 upDownButton1;
    private Guna2ControlFocusHandler gunaControlFocusHandler1;
    private G22190F0D5B1120504B250025230207091246321B2D150B652B17081719080B341E1D0E19090D19 Owner;
    private IContainer components;
    private int wheelDelta;
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private CustomizableEdges _CustomizableEdges;
    private bool _IndicateFocus;
    private NumericUpDownState _FocusedState;
    private NumericUpDownState _DisabledState;
    private bool _UpDownButtonBorderVisible;
    private Color _UpDownButtonFillColor;
    private Color _UpDownButtonForeColor;
    private DashStyle _BorderStyle;
    private ShadowDecoration _ShadowDecoration;
    private Color _FillColor;
    private Color _BorderColor;
    private int _BorderThickness;
    private int _BorderRadius;
    private Point _TextOffset;
    private bool _UseTransparentBackground;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private Padding textboxMargin;
    private bool singleinvalidate;
    [CompilerGeneratedAttribute]
private EventHandler LostFocus;
    [CompilerGeneratedAttribute]
private EventHandler GotFocus;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is focused.")]
public NumericUpDownState FocusedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is in a disabled state.")]
public NumericUpDownState DisabledState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("If true, the UpDown button will be visible.")]
public bool UpDownButtonBorderVisible { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "94, 148, 255")]
[DescriptionAttribute("The UpDown button fill color.")]
public Color UpDownButtonFillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "80, 0, 0, 0")]
[DescriptionAttribute("The UpDown button ForeColor.")]
public Color UpDownButtonForeColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public NumericUpDownAccelerationCollection Accelerations { get; }
    [DefaultValueAttribute("0")]
public int DecimalPlaces { get; public set; }
    [DefaultValueAttribute("False")]
public bool Hexadecimal { get; public set; }
    [DefaultValueAttribute("System.Decimal", "1")]
public decimal Increment { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("System.Decimal", "100")]
public decimal Maximum { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("System.Decimal", "0")]
public decimal Minimum { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
public bool ThousandsSeparator { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("System.Decimal", "0")]
public decimal Value { get; public set; }
    [DescriptionAttribute("Sets the Numeric Control's foreground color.")]
[CategoryAttribute("Options")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("Gets or sets the font of the text displayed by the control.")]
public Font Font { get; public set; }
    [DescriptionAttribute("Gets a value indicating whether the control has input focus")]
public bool Focused { get; }
    public void KeyAdd(Control control);
    private void ControlKeyDown(object sender, KeyEventArgs e);
    private void ControlKeyPress(object sender, KeyPressEventArgs e);
    private void ControlKeyUp(object sender, KeyEventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    public virtual NumericUpDownState get_FocusedState();
    public virtual void set_FocusedState(NumericUpDownState value);
    public virtual NumericUpDownState get_DisabledState();
    public virtual void set_DisabledState(NumericUpDownState value);
    public virtual bool get_UpDownButtonBorderVisible();
    public virtual void set_UpDownButtonBorderVisible(bool value);
    public virtual Color get_UpDownButtonFillColor();
    public virtual void set_UpDownButtonFillColor(Color value);
    public virtual Color get_UpDownButtonForeColor();
    public virtual void set_UpDownButtonForeColor(Color value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    private Image drawBase();
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    private void upDownButton1_UpButtonChanged(object sender, EventArgs e);
    private void upDownButton1_DownButtonChanged(object sender, EventArgs e);
    public sealed virtual void BeginInit();
    public void DownButton();
    public sealed virtual void EndInit();
    public virtual string ToString();
    public void UpButton();
    public NumericUpDownAccelerationCollection get_Accelerations();
    public int get_DecimalPlaces();
    public void set_DecimalPlaces(int value);
    public bool get_Hexadecimal();
    public void set_Hexadecimal(bool value);
    public decimal get_Increment();
    public void set_Increment(decimal value);
    public decimal get_Maximum();
    public void set_Maximum(decimal value);
    public decimal get_Minimum();
    public void set_Minimum(decimal value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public bool get_ThousandsSeparator();
    public void set_ThousandsSeparator(bool value);
    public decimal get_Value();
    public void set_Value(decimal value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    private void Owner_ValueChanged(object sender, EventArgs e);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public bool get_Focused();
    private void Owner_FocusChanged(bool e);
    internal void InternalInvalidate();
    private void updateSize();
    [CompilerGeneratedAttribute]
public void add_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_GotFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GotFocus(EventHandler value);
    private void gunaControlFocusHandler1_GotFocus(object sender, EventArgs e);
    private void gunaControlFocusHandler1_LostFocus(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Panel")]
[DescriptionAttribute("An advanced panel control.")]
public class Guna.UI2.WinForms.Guna2Panel : Panel {
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private CustomizableEdges _CustomizableEdges;
    private DashStyle _BorderStyle;
    private ShadowDecoration _ShadowDecoration;
    private Color _FillColor;
    private Color _BorderColor;
    private int _BorderThickness;
    private Color _CustomBorderColor;
    private Padding _CustomBorderThickness;
    private int _BorderRadius;
    private bool _UseTransparentBackground;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Additional border color.")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "0, 0, 0, 0")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border.")]
public Padding CustomBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public DashStyle get_BorderStyle();
    public void set_BorderStyle(DashStyle value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Padding get_CustomBorderThickness();
    public virtual void set_CustomBorderThickness(Padding value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    public void DefWndProc(Message m);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.PictureBox")]
[DescriptionAttribute("A picturebox control.")]
[DesignerAttribute("Guna.UI2.Designer.PictureBoxDesigner")]
public class Guna.UI2.WinForms.Guna2PictureBox : PictureBox {
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private CustomizableEdges _CustomizableEdges;
    private float _Rotate;
    private FlipOrientation _Flip;
    private ShadowDecoration _ShadowDecoration;
    private int _BorderRadius;
    private Color _FillColor;
    private bool _UseTransparentBackground;
    private string imageLocation;
    private StreamReader localImageStreamReader;
    private Stream uriImageStream;
    [CompilerGeneratedAttribute]
private PaintEventHandler Paint;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set image rotation from 0 to 360.")]
public float ImageRotate { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Set the image orientation to flip the image.")]
public FlipOrientation ImageFlip { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string ImageLocation { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual float get_ImageRotate();
    public virtual void set_ImageRotate(float value);
    public virtual FlipOrientation get_ImageFlip();
    public virtual void set_ImageFlip(FlipOrientation value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    private Bitmap ReImage();
    private Uri CalculateUri(string path);
    private void DisposeImageStream();
    public string get_ImageLocation();
    public void set_ImageLocation(string value);
    private void LoadImage();
    [CompilerGeneratedAttribute]
public void add_Paint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Paint(PaintEventHandler value);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.ProgressBar")]
[DescriptionAttribute("An advanced progress bar control.")]
[DefaultEventAttribute("ValueChanged")]
public class Guna.UI2.WinForms.Guna2ProgressBar : Control {
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private int _BorderRadius;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private CustomizableEdges _CustomizableEdges;
    private ShadowDecoration _ShadowDecoration;
    private bool _UseTransparentBackground;
    internal bool AnimatorGIF;
    private bool IsHover;
    internal bool UseMouseStateInvalidate;
    internal bool UseFocusInvalidate;
    protected MouseState MouseState;
    private Orientation _Orientation;
    private int marqueeLocation;
    private Timer TM;
    [CompilerGeneratedAttribute]
private EventHandler MaximumChanged;
    [CompilerGeneratedAttribute]
private EventHandler MinimumChanged;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private TextRenderingHint _TextRenderingHint;
    private Point _TextOffset;
    private HorizontalAlignment _TextAlign;
    private int _Maximum;
    private int _Minimum;
    private int _Value;
    private bool _Backwards;
    private ProgressBarStyle _Style;
    private Color _ProgressColor;
    private Color _ProgressColor2;
    private BrushMode _ProgressBrushMode;
    private Color _FillColor;
    private LinearGradientMode _GradientMode;
    private ProgressBarTextMode _TextMode;
    private bool _ShowText;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The curve angle of the control on all angles.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment.")]
public HorizontalAlignment TextAlign { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control's percentile value will be shown.")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ShowPercentage { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("100")]
[DescriptionAttribute("The control's maximum value.")]
public int Maximum { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The control's minimum value.")]
public int Minimum { get; public set; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("Gets or sets the current position of the progress bar.")]
public int Value { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will progress in a backward direction.")]
public bool Backwards { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The progress bar style.")]
public ProgressBarStyle Style { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "139, 201, 77")]
[DescriptionAttribute("The progress bar color.")]
public Color ProgressColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "139, 201, 77")]
[DescriptionAttribute("The progress bar second color in a gradient mode.")]
public Color ProgressColor2 { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The progress bar brush mode.")]
public BrushMode ProgressBrushMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The gradient mode to be applied.")]
public LinearGradientMode GradientMode { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The progress value.")]
public double ProgressTotalValue { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The progress value represented as percentage.")]
public double ProgressTotalPercent { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("Ther progress percentage text.")]
public string ProgressPercentText { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Allows you to change the text mode to Percentage, Value and Custom when ShowText = true.")]
public ProgressBarTextMode TextMode { get; public set; }
    [DescriptionAttribute("Allows you to show or hide text.")]
[DefaultValueAttribute("False")]
public bool ShowText { get; public set; }
    public string Text { get; public set; }
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public DashStyle get_BorderStyle();
    public void set_BorderStyle(DashStyle value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderThickness();
    public void set_BorderThickness(int value);
    public sealed virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public bool get_UseTransparentBackground();
    public void set_UseTransparentBackground(bool value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    private void TM_Tick(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_MaximumChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MaximumChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMaximumChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_MinimumChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MinimumChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMinimumChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual HorizontalAlignment get_TextAlign();
    public virtual void set_TextAlign(HorizontalAlignment value);
    public virtual bool get_ShowPercentage();
    public virtual void set_ShowPercentage(bool value);
    public virtual int get_Maximum();
    public virtual void set_Maximum(int value);
    public virtual int get_Minimum();
    public virtual void set_Minimum(int value);
    public virtual int get_Value();
    public virtual void set_Value(int value);
    public virtual bool get_Backwards();
    public virtual void set_Backwards(bool value);
    public virtual ProgressBarStyle get_Style();
    public virtual void set_Style(ProgressBarStyle value);
    public virtual Color get_ProgressColor();
    public virtual void set_ProgressColor(Color value);
    public virtual Color get_ProgressColor2();
    public virtual void set_ProgressColor2(Color value);
    public virtual BrushMode get_ProgressBrushMode();
    public virtual void set_ProgressBrushMode(BrushMode value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual LinearGradientMode get_GradientMode();
    public virtual void set_GradientMode(LinearGradientMode value);
    public virtual double get_ProgressTotalValue();
    public virtual double get_ProgressTotalPercent();
    public virtual string get_ProgressPercentText();
    public ProgressBarTextMode get_TextMode();
    public void set_TextMode(ProgressBarTextMode value);
    public bool get_ShowText();
    public void set_ShowText(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    private int ProgressValueLocationY();
    private int ProgressValueLocationX();
    private float ProgressValueSize();
    public void Increment(int value);
    public void Decrement(int value);
    private Brush getBrushProgress();
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.ProgressBar")]
[DescriptionAttribute("An Advanced Radial Progress Control.")]
[DesignerAttribute("Guna.UI2.Designer.ProgressIndicatorDesigner")]
public class Guna.UI2.WinForms.Guna2ProgressIndicator : Control {
    private IContainer components;
    private Timer timerAnimation;
    private int _value;
    private int _interval;
    private Color _progressColor;
    private bool _autoStart;
    private bool _stopped;
    private float _circleSize;
    private int _numberOfCircles;
    private int _numberOfVisibleCircles;
    private ProgressIndicatorStyle _Style;
    private ShadowDecoration _ShadowDecoration;
    private bool _UseTransparentBackground;
    private float increment;
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The progress style of the ProressIndicator control.")]
public ProgressIndicatorStyle Style { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "94, 148, 255")]
[DescriptionAttribute("Gets or sets the base color for the circles.")]
[CategoryAttribute("Appearance")]
public Color ProgressColor { get; public set; }
    [DefaultValueAttribute("False")]
[DescriptionAttribute("Gets or sets a value indicating if the animation should start automatically.")]
[CategoryAttribute("Behavior")]
public bool AutoStart { get; public set; }
    [DefaultValueAttribute("0,9")]
[DescriptionAttribute("Gets or sets the scale for the circles.")]
[CategoryAttribute("Appearance")]
public float CircleSize { get; public set; }
    [DefaultValueAttribute("75")]
[DescriptionAttribute("Gets or sets the animation speed.")]
[CategoryAttribute("Behavior")]
public int AnimationSpeed { get; public set; }
    [DefaultValueAttribute("8")]
[DescriptionAttribute("Gets or sets the number of circles used in the animation.")]
[CategoryAttribute("Behavior")]
public int NumberOfCircles { get; public set; }
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual bool get_IsDesignMode();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual ProgressIndicatorStyle get_Style();
    public virtual void set_Style(ProgressIndicatorStyle value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    public virtual Color get_ProgressColor();
    public virtual void set_ProgressColor(Color value);
    public virtual bool get_AutoStart();
    public virtual void set_AutoStart(bool value);
    public virtual float get_CircleSize();
    public virtual void set_CircleSize(float value);
    public virtual int get_AnimationSpeed();
    public virtual void set_AnimationSpeed(int value);
    public virtual int get_NumberOfCircles();
    public virtual void set_NumberOfCircles(int value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    public void Start();
    public void Stop();
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnSizeChanged(EventArgs e);
    private void IncreaseValue();
    private void timerAnimation_Tick(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("An advanced Radial Gauge Control.")]
[DefaultEventAttribute("ValueChanged")]
public class Guna.UI2.WinForms.Guna2RadialGauge : Control {
    private float angle;
    private int _ProgressOffset;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private bool _UseTransparentBackground;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    private Color _ArrowColor;
    private bool _ArrowVisible;
    private int _ArrowThickness;
    private Color _FillColor;
    private Color _ProgressColor;
    private Color _ProgressColor2;
    private bool _ShowPercentage;
    private int _ProgressThickness;
    private int _value;
    private BrushMode _ProgressBrushMode;
    private LinearGradientMode _GradientMode;
    private LineCap _ProgressStartCap;
    private LineCap _ProgressEndCap;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "125, 137, 149")]
public Color ArrowColor { get; public set; }
    [DefaultValueAttribute("True")]
[DescriptionAttribute("If true, the arrow will be visible")]
public bool ArrowVisible { get; public set; }
    [DefaultValueAttribute("4")]
[DescriptionAttribute("The control's arrow thickness, the higher the value, the thicker the arrow")]
public int ArrowThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [DefaultValueAttribute("100")]
[DescriptionAttribute("The gauge's maximum value")]
public int Maximum { get; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("The gauge's minimum value")]
public int Minimum { get; }
    [DefaultValueAttribute("System.Drawing.Color", "77, 196, 255")]
[DescriptionAttribute("The gauge's progress color")]
public Color ProgressColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "77, 196, 255")]
[DescriptionAttribute("The gauge's second progress color in a gradient mode")]
public Color ProgressColor2 { get; public set; }
    [DefaultValueAttribute("True")]
[DescriptionAttribute("If true, the gauge's progress value/percentage will be shown")]
public bool ShowPercentage { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The gauge's progress percentile text")]
public string ProgressPercentText { get; }
    [DefaultValueAttribute("20")]
[DescriptionAttribute("The gauge's progress thickness, the higher the value, the thicker")]
public int ProgressThickness { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The gauge's progress total percentage")]
public double ProgressTotalPercent { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The gauge's progress total value")]
public double ProgressTotalValue { get; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("The gauge's progress value")]
public int Value { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The gauge's progress brush mode")]
public BrushMode ProgressBrushMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The gauge's progress gradient mode")]
public LinearGradientMode GradientMode { get; public set; }
    [DefaultValueAttribute]
[DescriptionAttribute("The gauge's progress start cap or design")]
public LineCap ProgressStartCap { get; public set; }
    [DefaultValueAttribute]
[DescriptionAttribute("The gauge's progress end cap or design")]
public LineCap ProgressEndCap { get; public set; }
    public virtual bool get_IsDesignMode();
    protected virtual void OnHandleCreated(EventArgs e);
    private int CircleSize();
    private Point FindPointOnCircle(Point originPoint, double radius, double angleDegrees);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public virtual Color get_ArrowColor();
    public virtual void set_ArrowColor(Color value);
    public virtual bool get_ArrowVisible();
    public virtual void set_ArrowVisible(bool value);
    public virtual int get_ArrowThickness();
    public virtual void set_ArrowThickness(int value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual int get_Maximum();
    public virtual int get_Minimum();
    public virtual Color get_ProgressColor();
    public virtual void set_ProgressColor(Color value);
    public virtual Color get_ProgressColor2();
    public virtual void set_ProgressColor2(Color value);
    public virtual bool get_ShowPercentage();
    public virtual void set_ShowPercentage(bool value);
    public virtual string get_ProgressPercentText();
    public virtual int get_ProgressThickness();
    public virtual void set_ProgressThickness(int value);
    public virtual double get_ProgressTotalPercent();
    public virtual double get_ProgressTotalValue();
    public virtual int get_Value();
    public virtual void set_Value(int value);
    public virtual BrushMode get_ProgressBrushMode();
    public virtual void set_ProgressBrushMode(BrushMode value);
    public virtual LinearGradientMode get_GradientMode();
    public virtual void set_GradientMode(LinearGradientMode value);
    public virtual LineCap get_ProgressStartCap();
    public virtual void set_ProgressStartCap(LineCap value);
    public virtual LineCap get_ProgressEndCap();
    public virtual void set_ProgressEndCap(LineCap value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    private Brush getBrushProgress();
    private void DrawArrow(Graphics G);
    private void DrawProgress(Graphics G);
    private void DrawProgressPercent(Graphics G);
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
}
[DescriptionAttribute("A RadioButton Control.")]
[ToolboxBitmapAttribute("System.Windows.Forms.RadioButton")]
[DesignerAttribute("Guna.UI2.Designer.RadioButtonDesigner")]
public class Guna.UI2.WinForms.Guna2RadioButton : RadioButton {
    private Guna2CustomRadioButton gunaCustomRadioButton1;
    private IContainer components;
    private Guna2ControlFocusHandler gunaControlFocusHandler1;
    private TextRenderingHint _TextRenderingHint;
    [CompilerGeneratedAttribute]
private EventHandler LostFocus;
    [CompilerGeneratedAttribute]
private EventHandler GotFocus;
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("Gets or sets value indicating whether control's elements are aligned to support locales using right-to-left fonts.")]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control.")]
public TextRenderingHint TextRenderingHint { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public CustomRadionButtonState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in an unchecked state.")]
public CustomRadionButtonState UncheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    private void InitializeComponent();
    protected virtual void OnHandleCreated(EventArgs e);
    public RightToLeft get_RightToLeft();
    public void set_RightToLeft(RightToLeft value);
    public virtual TextRenderingHint get_TextRenderingHint();
    public virtual void set_TextRenderingHint(TextRenderingHint value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual CustomRadionButtonState get_CheckedState();
    public virtual void set_CheckedState(CustomRadionButtonState value);
    public virtual CustomRadionButtonState get_UncheckedState();
    public virtual void set_UncheckedState(CustomRadionButtonState value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    protected virtual void OnCheckedChanged(EventArgs e);
    private void gunaCustomRadioButton1_CheckedChanged(object sender, EventArgs e);
    private void refresh();
    protected virtual void OnResize(EventArgs e);
    private void gunaCustomRadioButton1_RightToLeftChanged(object sender, EventArgs e);
    protected virtual void OnPaint(PaintEventArgs pevent);
    [CompilerGeneratedAttribute]
public void add_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_GotFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GotFocus(EventHandler value);
    private void gunaControlFocusHandler1_GotFocus(object sender, EventArgs e);
    private void gunaControlFocusHandler1_LostFocus(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[DefaultEventAttribute("ValueChanged")]
[DescriptionAttribute("A RatingStar Control.")]
public class Guna.UI2.WinForms.Guna2RatingStar : Control {
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private bool _ReadOnly;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeColor>k__BackingField;
    private float _Value;
    private Color _FillColor;
    private Color _RatingColor;
    private Color _BorderColor;
    private int _BorderThickness;
    private Color _FocusedColor;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [DescriptionAttribute("If true, the rating is read only.")]
[DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DescriptionAttribute("The rating control's font style")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DescriptionAttribute("The rating control's text")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DescriptionAttribute("The rating control's ForeColor")]
public string ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The rating control's minimum value")]
public float Minimum { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("5")]
[DescriptionAttribute("The rating control's maximum value")]
public float Maximum { get; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("The rating control's current value")]
public float Value { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The rating control's fill color")]
public Color FillColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "113, 208, 255")]
[DescriptionAttribute("The rating control's color")]
public Color RatingColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "193, 200, 207")]
[DescriptionAttribute("The rating control's border color")]
public Color BorderColor { get; public set; }
    [DefaultValueAttribute("2")]
[DescriptionAttribute("The rating control's border thickness")]
public int BorderThickness { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The rating control's color when focused")]
public Color FocusedColor { get; public set; }
    public virtual bool get_IsDesignMode();
    protected virtual bool ProcessDialogKey(Keys keyData);
    private PointF[] Calculate5StarPoints(PointF Orig, float outerradius, float innerradius);
    private PointF[] starPoint(PointF location, float size);
    private float starSize();
    private float starX(int i);
    private float starProgress(int i);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(Font value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_ForeColor();
    [CompilerGeneratedAttribute]
public void set_ForeColor(string value);
    public float get_Minimum();
    public float get_Maximum();
    public virtual float get_Value();
    public virtual void set_Value(float value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_RatingColor();
    public virtual void set_RatingColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual Color get_FocusedColor();
    public virtual void set_FocusedColor(Color value);
    private void BasePaint(Graphics G);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("An advanced resize control.")]
public class Guna.UI2.WinForms.Guna2ResizeBox : Control {
    private Size FillSize;
    private Color _FillColor;
    private Control _TargetControl;
    private bool _UseTransparentBackground;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Control", "")]
[DescriptionAttribute("The target control to resize.")]
public Control TargetControl { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual bool get_IsDesignMode();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Control get_TargetControl();
    public virtual void set_TargetControl(Control value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("A resize form control")]
public class Guna.UI2.WinForms.Guna2ResizeForm : Component {
    private Form ParentForm;
    private G22190F0D5B1120504B250025230207091246290B28110B39164C3717180812041C resizeForm;
    private IContainer components;
    public ISite Site { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Form", "")]
[DescriptionAttribute("The target form to apply resizing a borderless form.")]
public Form TargetForm { get; public set; }
    public Guna2ResizeForm(Form form);
    public Guna2ResizeForm(IContainer container);
    private void InitializeComponent();
    protected virtual void Dispose(bool disposing);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public Form get_TargetForm();
    public void set_TargetForm(Form value);
    public void SetResizeForm(Form form);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("A Separator Control.")]
[DesignerAttribute("Guna.UI2.Designer.SeparatorDesigner")]
public class Guna.UI2.WinForms.Guna2Separator : Control {
    private Color _FillColor;
    private int _FillThickness;
    private DashStyle _FillStyle;
    private bool _UseTransparentBackground;
    private Orientation _Orientation;
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "193, 200, 207")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The thickness of the separator control.")]
public int FillThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-style of the separator.")]
public DashStyle FillStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected void SetOrientation(Orientation orientation);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual bool get_IsDesignMode();
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual int get_FillThickness();
    public virtual void set_FillThickness(int value);
    public virtual DashStyle get_FillStyle();
    public virtual void set_FillStyle(DashStyle value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("A ShadowForm Component")]
public class Guna.UI2.WinForms.Guna2ShadowForm : Component {
    private ShadowForm shadowForm;
    private Form _TargetForm;
    private Timer timer1;
    private Guna2Panel p;
    private IContainer components;
    [CompilerGeneratedAttribute]
private EventHandler Load;
    private int _BorderRadius;
    private Color _ShadowColor;
    public ISite Site { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("12")]
[DescriptionAttribute("The curve angle of the shadow on all angles")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("Gets or sets the shadow color")]
public Color ShadowColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Form", "")]
[DescriptionAttribute("The target form to apply the shadow")]
public Form TargetForm { get; public set; }
    public Guna2ShadowForm(Form form);
    public Guna2ShadowForm(IContainer container);
    protected virtual void Dispose(bool disposing);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    private void InitializeComponent();
    private void shadowForm_ShadowCompleted(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_Load(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Load(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLoad(EventArgs e);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public void SetShadowForm(Form form);
    public Form get_TargetForm();
    public void set_TargetForm(Form value);
    private void timer1_Tick(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.Panel")]
[DescriptionAttribute("A ShadowPanel Control.")]
public class Guna.UI2.WinForms.Guna2ShadowPanel : Panel {
    private Color _FillColor;
    private int _ShadowDepth;
    private int _rectRadius;
    private int _shadowShift;
    private Color _shadowColor;
    private static int sh;
    private int _edgeWidth;
    private Color _edgeColor;
    private ShadowMode _shadowStyle;
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [DescriptionAttribute("The width of an edge.")]
[DefaultValueAttribute("0")]
public int EdgeWidth { get; public set; }
    [DescriptionAttribute("The corner round radius.")]
[DefaultValueAttribute("0")]
public int Radius { get; public set; }
    [DescriptionAttribute("The shadow color.")]
public Color ShadowColor { get; public set; }
    [DescriptionAttribute("The shadow depth color.")]
[DefaultValueAttribute("100")]
public int ShadowDepth { get; public set; }
    [DescriptionAttribute("The shadow shift.")]
[DefaultValueAttribute("5")]
public int ShadowShift { get; public set; }
    [DescriptionAttribute("Style of the shadow.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ShadowMode ShadowStyle { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    private GraphicsPath DrawRoundedRectanglePath(Rectangle rect, int radius);
    private GraphicsPath DrawRoundedRectanglePath(Rectangle rect, int radius, bool dropStyle);
    private GraphicsPath DrawFilledRoundedRectangle(Graphics G, Brush rectBrush, Rectangle rect, int radius);
    private GraphicsPath DrawRoundedRectangle(Graphics G, Pen pen, Rectangle rect, int radius);
    public virtual bool get_IsDesignMode();
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual int get_EdgeWidth();
    public virtual void set_EdgeWidth(int value);
    public virtual int get_Radius();
    public virtual void set_Radius(int value);
    public virtual Color get_ShadowColor();
    public virtual void set_ShadowColor(Color value);
    public virtual int get_ShadowDepth();
    public virtual void set_ShadowDepth(int value);
    public virtual int get_ShadowShift();
    public virtual void set_ShadowShift(int value);
    public virtual ShadowMode get_ShadowStyle();
    public virtual void set_ShadowStyle(ShadowMode value);
    private void DrawEdges(Graphics g, Rectangle& edgeRect);
    private void DrawPanelStyled(Graphics g, Rectangle rect);
    private void DrawRect(Graphics graphics, Rectangle rect);
    private void DrawRectLowered(Graphics graphics, Rectangle rect);
    private void DrawRectRaised(Graphics graphics, Rectangle rect);
    private void DrawShadow(Graphics graphics);
    protected virtual void OnPaint(PaintEventArgs e);
}
[DesignerAttribute("Guna.UI2.Designer.ShapesDesigner")]
public class Guna.UI2.WinForms.Guna2Shapes : Control {
    private Color _FillColor;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private int _LineThickness;
    private float _Rotate;
    private FlipOrientation _Flip;
    private int _RoundedRadius;
    private int _Zoom;
    private CustomizableEdges _RoundedEdges;
    private Orientation _LineOrientation;
    private int _PolygonSides;
    private int _PolygonSkip;
    private LineCap _LineStartCap;
    private LineCap _LineEndCap;
    private DashStyle _LineStyle;
    private bool _UseTransparentBackground;
    private ShapeType _Shape;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "170, 170, 251")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "93, 93, 166")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("2")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("5")]
public int LineThickness { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
public float Rotate { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
public FlipOrientation Flip { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("20")]
public int RoundedRadius { get; public set; }
    public int Zoom { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
public CustomizableEdges RoundedEdges { get; public set; }
    [DefaultValueAttribute]
public Orientation LineOrientation { get; public set; }
    [DefaultValueAttribute("5")]
public int PolygonSides { get; public set; }
    public int PolygonSkip { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public LineCap LineStartCap { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public LineCap LineEndCap { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public DashStyle LineStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ShapeType Shape { get; public set; }
    private Rectangle ShapeRectangle { get; }
    protected virtual void OnHandleCreated(EventArgs e);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual int get_LineThickness();
    public virtual void set_LineThickness(int value);
    public virtual float get_Rotate();
    public virtual void set_Rotate(float value);
    public virtual FlipOrientation get_Flip();
    public virtual void set_Flip(FlipOrientation value);
    public virtual int get_RoundedRadius();
    public virtual void set_RoundedRadius(int value);
    public int get_Zoom();
    public void set_Zoom(int value);
    public virtual CustomizableEdges get_RoundedEdges();
    public virtual void set_RoundedEdges(CustomizableEdges value);
    public Orientation get_LineOrientation();
    public void set_LineOrientation(Orientation value);
    public int get_PolygonSides();
    public void set_PolygonSides(int value);
    public int get_PolygonSkip();
    public void set_PolygonSkip(int value);
    public virtual LineCap get_LineStartCap();
    public virtual void set_LineStartCap(LineCap value);
    public virtual LineCap get_LineEndCap();
    public virtual void set_LineEndCap(LineCap value);
    public virtual DashStyle get_LineStyle();
    public virtual void set_LineStyle(DashStyle value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    public ShapeType get_Shape();
    public void set_Shape(ShapeType value);
    private Rectangle get_ShapeRectangle();
    private Bitmap RectangleImage();
    private Bitmap LineImage();
    private Bitmap EllipsImage();
    private Bitmap RoundedImage();
    private Bitmap PolygonImage();
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
}
public class Guna.UI2.WinForms.Guna2ShapesTool : Component {
    private IContainer components;
    private Control _TargetControl;
    private Color _FillColor;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private int _LineThickness;
    private float _Rotate;
    private FlipOrientation _Flip;
    private int _RoundedRadius;
    private CustomizableEdges _RoundedEdges;
    private Orientation _LineOrientation;
    private int _PolygonSides;
    private int _PolygonSkip;
    private LineCap _LineStartCap;
    private LineCap _LineEndCap;
    private Point _Location;
    private Size _Size;
    private DashStyle _LineStyle;
    private ShapeType _Shape;
    public Control TargetControl { get; public set; }
    private int Height { get; }
    private int Width { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "170, 170, 251")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "93, 93, 166")]
[DescriptionAttribute("The control's border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("2")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("5")]
public int LineThickness { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
public float Rotate { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
public FlipOrientation Flip { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("20")]
public int RoundedRadius { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
public CustomizableEdges RoundedEdges { get; public set; }
    [DefaultValueAttribute]
public Orientation LineOrientation { get; public set; }
    [DefaultValueAttribute("5")]
public int PolygonSides { get; public set; }
    public int PolygonSkip { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public LineCap LineStartCap { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public LineCap LineEndCap { get; public set; }
    public Point Location { get; public set; }
    public Size Size { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
public DashStyle LineStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ShapeType Shape { get; public set; }
    private Rectangle ShapeRectangle { get; }
    private Rectangle ClientRectangle { get; }
    public Guna2ShapesTool(IContainer container);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    public Control get_TargetControl();
    public void set_TargetControl(Control value);
    private void Invalidate();
    private int get_Height();
    private int get_Width();
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual int get_LineThickness();
    public virtual void set_LineThickness(int value);
    public virtual float get_Rotate();
    public virtual void set_Rotate(float value);
    public virtual FlipOrientation get_Flip();
    public virtual void set_Flip(FlipOrientation value);
    public virtual int get_RoundedRadius();
    public virtual void set_RoundedRadius(int value);
    public virtual CustomizableEdges get_RoundedEdges();
    public virtual void set_RoundedEdges(CustomizableEdges value);
    public Orientation get_LineOrientation();
    public void set_LineOrientation(Orientation value);
    public int get_PolygonSides();
    public void set_PolygonSides(int value);
    public int get_PolygonSkip();
    public void set_PolygonSkip(int value);
    public virtual LineCap get_LineStartCap();
    public virtual void set_LineStartCap(LineCap value);
    public virtual LineCap get_LineEndCap();
    public virtual void set_LineEndCap(LineCap value);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    public virtual DashStyle get_LineStyle();
    public virtual void set_LineStyle(DashStyle value);
    public ShapeType get_Shape();
    public void set_Shape(ShapeType value);
    private Rectangle get_ShapeRectangle();
    private Rectangle get_ClientRectangle();
    private Bitmap RectangleImage();
    private Bitmap LineImage();
    private Bitmap EllipsImage();
    private Bitmap RoundedImage();
    private Bitmap PolygonImage();
    private void Paint(object sender, PaintEventArgs e);
}
public class Guna.UI2.WinForms.Guna2TabControl : TabControl {
    private Size _ItemSize;
    private Size _ItemVerticalSize;
    private HorizontalAlignment _TabButtonImageAlign;
    private Point _TabButtonImageOffset;
    private Point _TabButtonTextOffset;
    private HorizontalAlignment _TabButtonTextAlign;
    private TextRenderingHint _TabButtonTextRenderingHint;
    private bool _TabMenuVisible;
    private TabButtonState _TabButtonHoverState;
    private TabButtonState _TabButtonIdleState;
    private TabButtonState _TabButtonSelectedState;
    private Color _TabMenuBackColor;
    private Color _BorderColor;
    private bool IsHover;
    public MouseState MouseState;
    internal int HoverSelectedIndex;
    [BrowsableAttribute("False")]
public TabAlignment Alignment { get; public set; }
    [BrowsableAttribute("False")]
public Size ItemSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("2")]
[DescriptionAttribute("The control's image alignment")]
public HorizontalAlignment TabButtonImageAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Setting the position of the control's image")]
public Point TabButtonImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position")]
public Point TabButtonTextOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The control's text alignment")]
public HorizontalAlignment TabButtonTextAlign { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("This property allows you to change how text is printed onto the control")]
public TextRenderingHint TabButtonTextRenderingHint { get; public set; }
    [BrowsableAttribute("False")]
public bool RightToLeftLayout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TabMenuOrientation TabMenuOrientation { get; public set; }
    public Size TabButtonSize { get; public set; }
    [DefaultValueAttribute("True")]
public bool TabMenuVisible { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public TabButtonState TabButtonHoverState { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public TabButtonState TabButtonIdleState { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public TabButtonState TabButtonSelectedState { get; public set; }
    public Color TabMenuBackColor { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute]
public TabSizeMode SizeMode { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute]
public TabAppearance Appearance { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
public bool Multiline { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute]
public TabDrawMode DrawMode { get; public set; }
    private int ItemHeight { get; }
    private int ItemWidth { get; }
    public TabAlignment get_Alignment();
    public void set_Alignment(TabAlignment value);
    public Size get_ItemSize();
    public void set_ItemSize(Size value);
    public HorizontalAlignment get_TabButtonImageAlign();
    public void set_TabButtonImageAlign(HorizontalAlignment value);
    public Point get_TabButtonImageOffset();
    public void set_TabButtonImageOffset(Point value);
    public Point get_TabButtonTextOffset();
    public void set_TabButtonTextOffset(Point value);
    public HorizontalAlignment get_TabButtonTextAlign();
    public void set_TabButtonTextAlign(HorizontalAlignment value);
    public TextRenderingHint get_TabButtonTextRenderingHint();
    public void set_TabButtonTextRenderingHint(TextRenderingHint value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public TabMenuOrientation get_TabMenuOrientation();
    public void set_TabMenuOrientation(TabMenuOrientation value);
    public Size get_TabButtonSize();
    public void set_TabButtonSize(Size value);
    public bool get_TabMenuVisible();
    public void set_TabMenuVisible(bool value);
    public TabButtonState get_TabButtonHoverState();
    public void set_TabButtonHoverState(TabButtonState value);
    public TabButtonState get_TabButtonIdleState();
    public void set_TabButtonIdleState(TabButtonState value);
    public TabButtonState get_TabButtonSelectedState();
    public void set_TabButtonSelectedState(TabButtonState value);
    public Color get_TabMenuBackColor();
    public void set_TabMenuBackColor(Color value);
    public TabSizeMode get_SizeMode();
    public void set_SizeMode(TabSizeMode value);
    public TabAppearance get_Appearance();
    public void set_Appearance(TabAppearance value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public TabDrawMode get_DrawMode();
    public void set_DrawMode(TabDrawMode value);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnSelected(TabControlEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    private int get_ItemHeight();
    private int get_ItemWidth();
    private void DrawFlatLine(Graphics G, Brush B, Rectangle R, int BorderTop, int BorderLeft, int BorderRight, int BorderBottom);
    private void theme_default_back(Graphics g);
    private void theme_default_button(Graphics g, int i, TabButtonState TabButtonState, Rectangle tabRect, Image img, Size imgSize);
    private void theme_default_border(Graphics g, TabButtonState TabButtonState, Rectangle tabRect);
    private void theme_default_inner(Graphics g, TabButtonState TabButtonState, Rectangle tabRect);
    private void theme_default_inner2(Graphics g, TabButtonState TabButtonState, Rectangle tabRect);
    private void theme_default_inner3(Graphics g, TabButtonState TabButtonState, Rectangle tabRect);
    private void theme_default_inner4(Graphics g, TabButtonState TabButtonState, Rectangle tabRect);
    private void theme_default_fill(Graphics g, int i);
}
public class Guna.UI2.WinForms.Guna2TaskBarProgress : Component {
    private IContainer components;
    private Timer timer1;
    [CompilerGeneratedAttribute]
private Form <TargetForm>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler StateChanged;
    [CompilerGeneratedAttribute]
private EventHandler MaximumChanged;
    [CompilerGeneratedAttribute]
private EventHandler MinimumChanged;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private TaskbarStates _State;
    private int _Maximum;
    private int _Minimum;
    private int _Value;
    public Form TargetForm { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TaskbarStates State { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("100")]
[DescriptionAttribute("The control's maximum value.")]
public int Maximum { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The control's minimum value.")]
public int Minimum { get; public set; }
    [DefaultValueAttribute("0")]
[DescriptionAttribute("Gets or sets the current position of the progress bar.")]
public int Value { get; public set; }
    public Guna2TaskBarProgress(IContainer container);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
public Form get_TargetForm();
    [CompilerGeneratedAttribute]
public void set_TargetForm(Form value);
    private G22190F0D5B1120504B250025230207091246290B28110B39164C3113180A2A001C091301003A041F124307041F0A0E14363A1604060C38 ConvertState(TaskbarStates state);
    private void ProgressChange();
    [CompilerGeneratedAttribute]
public void add_StateChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StateChanged(EventHandler value);
    protected virtual void OnStateChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_MaximumChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MaximumChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMaximumChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_MinimumChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MinimumChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMinimumChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    public void Increment(int value);
    public void Decrement(int value);
    public TaskbarStates get_State();
    public void set_State(TaskbarStates value);
    public virtual int get_Maximum();
    public virtual void set_Maximum(int value);
    public virtual int get_Minimum();
    public virtual void set_Minimum(int value);
    public virtual int get_Value();
    public virtual void set_Value(int value);
    private void timer1_Tick(object sender, EventArgs e);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.TextBox")]
[DesignerAttribute("Guna.UI2.Designer.TextBoxDesigner")]
[DescriptionAttribute("A TextBox control.")]
[DefaultEventAttribute("TextChanged")]
public class Guna.UI2.WinForms.Guna2TextBox : UserControl {
    private IContainer components;
    internal PlaceholderTextBox Owner;
    private AnimationManager _hoverAnimationManager;
    private AnimationManager _focusAnimationManager;
    [CompilerGeneratedAttribute]
private EventHandler IconLeftClick;
    [CompilerGeneratedAttribute]
private EventHandler IconRightClick;
    private int currentRadius;
    private bool _AutoRoundedCorners;
    private CustomizableEdges _CustomizableEdges;
    private TextBoxState _HoverState;
    private TextBoxState _FocusedState;
    private TextBoxState _DisabledState;
    private bool _Animated;
    private TextBoxStyle _Style;
    private Point _TextOffset;
    private Color _PlaceholderTextColor;
    private int _BorderRadius;
    private DashStyle _BorderStyle;
    private Color _BorderColor;
    private int _BorderThickness;
    private ShadowDecoration _ShadowDecoration;
    private Image _IconLeft;
    private Size _IconLeftSize;
    private Cursor _IconLeftCursor;
    private Point _IconLeftOffset;
    private Image _IconRight;
    private Size _IconRightSize;
    private Cursor _IconRightCursor;
    private Point _IconRightOffset;
    private Color _FillColor;
    private Point mousePosition;
    internal MouseState MouseState;
    private Color _ForeColor;
    private Padding textboxMargin;
    private bool wireMouseLeaveActive;
    private bool wireMouseHoverActive;
    private bool wireMouseEnterActive;
    private bool wireFocusActive;
    public ContextMenuStrip ContextMenuStrip { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute]
public ScrollBars ScrollBars { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public TextBoxState HoverState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is focused.")]
public TextBoxState FocusedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is in a disabled state.")]
public TextBoxState DisabledState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The TextBox style to render e.g. Material Textbox, or default style.")]
public TextBoxStyle Style { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's text position.")]
public Point TextOffset { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Options")]
[DescriptionAttribute("The control's placeholder text.")]
public string PlaceholderText { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "193, 200, 207")]
[DescriptionAttribute("The control's placeholder text ForeColor.")]
public Color PlaceholderForeColor { get; public set; }
    [DescriptionAttribute("The curve angle of the control on all angles.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [DescriptionAttribute("The control's border color.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "213, 218, 223")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The border thickness. The higher the value, the thicker the border.")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("Sets the TextBox's left icon.")]
public Image IconLeft { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("Sets TextBox's left icon size.")]
public Size IconLeftSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Cursor", "Default")]
[DescriptionAttribute("Sets TextBox's left icon cursor.")]
public Cursor IconLeftCursor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Sets TextBox's left icon offset (Point).")]
public Point IconLeftOffset { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("Sets the TextBox's right icon.")]
public Image IconRight { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("Sets TextBox's right icon size.")]
public Size IconRightSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Cursor", "Default")]
[DescriptionAttribute("Sets TextBox's right icon cursor.")]
public Cursor IconRightCursor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Sets TextBox's right icon offset (Point).")]
public Point IconRightOffset { get; public set; }
    [DescriptionAttribute("The BackColor that will fill the control.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("True")]
[DisplayNameAttribute("Text")]
[DescriptionAttribute("The control's text.")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor", "System.Drawing.Design.UITypeEditor")]
public string DefaultText { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Gets or sets a value indicating whether pressing ENTER in a multiline TextBox control creates a new line of text in the control or activates the  button for the form.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool AcceptsReturn { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Gets or sets a value indicating whether pressing the TAB key in a multiline text box control types a TAB character in the control instead of moving the focus to the next control in the tab order.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool AcceptsTab { get; public set; }
    [DescriptionAttribute("Gets or sets a custom System.Collections.Specialized.StringCollection to use when the AutoCompleteSource property is set to CustomSource.")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets an option that controls how automatic completion works for the TextBox.")]
[DefaultValueAttribute]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DescriptionAttribute("Gets or sets a value specifying the source of complete strings used for automatic completion.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [DescriptionAttribute("Gets a value indicating whether the user can undo the previous operation in a text box control.")]
[BrowsableAttribute("False")]
public bool CanUndo { get; }
    [DescriptionAttribute("Sets the TextBox's foreground color.")]
[CategoryAttribute("Options")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "125, 137, 149")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DescriptionAttribute("Gets or sets whether the TextBox control modifies the case of characters as they are typed.")]
[DefaultValueAttribute]
public CharacterCasing CharacterCasing { get; public set; }
    [DescriptionAttribute("Gets or sets the font of the text displayed by the control.")]
public Font Font { get; public set; }
    [DescriptionAttribute("Gets or sets a value indicating whether the selected text in the text box control remains highlighted when the control loses focus.")]
[CategoryAttribute("Behavior")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool HideSelection { get; public set; }
    [CategoryAttribute("Appearance")]
[BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[MergablePropertyAttribute("False")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.StringArrayEditor, System.Design", "System.Drawing.Design.UITypeEditor")]
[DescriptionAttribute("Gets or sets the lines of text in a text box control.")]
public String[] Lines { get; public set; }
    [DefaultValueAttribute("32767")]
[DescriptionAttribute("Gets or sets the maximum number of characters the user can type or paste into the text box control.")]
[BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
public int MaxLength { get; public set; }
    [DescriptionAttribute("Gets or sets a value that indicates that the text box control has been modified by the user since the control was created or its contents were last set.")]
[BrowsableAttribute("True")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool Modified { get; public set; }
    [CategoryAttribute("Behavior")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets a value indicating whether this is a multiline TextBox control.")]
[DefaultValueAttribute("False")]
public bool Multiline { get; public set; }
    [CategoryAttribute("Behavior")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets the character used to mask characters of a password in a single-line TextBox control.")]
public char PasswordChar { get; public set; }
    [DescriptionAttribute("Gets the preferred height for a text box.")]
[BrowsableAttribute("False")]
[CategoryAttribute("Behavior")]
public int PreferredHeight { get; }
    [CategoryAttribute("Behavior")]
[BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets a value indicating whether text in the text box is read-only.")]
[DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Gets or sets a value indicating the currently selected text in the control.")]
[BrowsableAttribute("True")]
public string SelectedText { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Gets or sets the number of characters selected in the text box.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int SelectionLength { get; public set; }
    [DescriptionAttribute("Gets or sets the starting point of text selected in the text box.")]
[CategoryAttribute("Behavior")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int SelectionStart { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Gets or sets a value indicating whether the defined shortcuts are enabled.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool ShortcutsEnabled { get; public set; }
    [BrowsableAttribute("True")]
[DescriptionAttribute("Gets or sets how text is aligned in a TextBox control.")]
[DefaultValueAttribute]
public HorizontalAlignment TextAlign { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Gets the length of text in the control.")]
[BrowsableAttribute("False")]
public int TextLength { get; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Gets or sets a value indicating whether the text in the TextBox control should appear as the  password character.")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool UseSystemPasswordChar { get; public set; }
    [DescriptionAttribute("Indicates whether a multiline text box control automatically wraps words to the beginning of the next line when necessary.")]
[CategoryAttribute("Behavior")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool WordWrap { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("Gets a value indicating whether the control has input focus")]
public bool Focused { get; }
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void InitializeAnimationManager();
    private void FocusAnimationProgress(object sender);
    private void HoverAnimationProgress(object sender);
    [CompilerGeneratedAttribute]
public void add_IconLeftClick(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IconLeftClick(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnIconLeftClick(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_IconRightClick(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IconRightClick(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnIconRightClick(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public ScrollBars get_ScrollBars();
    public void set_ScrollBars(ScrollBars value);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual TextBoxState get_HoverState();
    public virtual void set_HoverState(TextBoxState value);
    public virtual TextBoxState get_FocusedState();
    public virtual void set_FocusedState(TextBoxState value);
    public virtual TextBoxState get_DisabledState();
    public virtual void set_DisabledState(TextBoxState value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual TextBoxStyle get_Style();
    public virtual void set_Style(TextBoxStyle value);
    public virtual Point get_TextOffset();
    public virtual void set_TextOffset(Point value);
    public virtual string get_PlaceholderText();
    public virtual void set_PlaceholderText(string value);
    public virtual Color get_PlaceholderForeColor();
    public virtual void set_PlaceholderForeColor(Color value);
    public virtual int get_BorderRadius();
    public virtual void set_BorderRadius(int value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual int get_BorderThickness();
    public virtual void set_BorderThickness(int value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual Image get_IconLeft();
    public virtual void set_IconLeft(Image value);
    public virtual Size get_IconLeftSize();
    public virtual void set_IconLeftSize(Size value);
    public virtual Cursor get_IconLeftCursor();
    public virtual void set_IconLeftCursor(Cursor value);
    public virtual Point get_IconLeftOffset();
    public virtual void set_IconLeftOffset(Point value);
    public virtual Image get_IconRight();
    public virtual void set_IconRight(Image value);
    public virtual Size get_IconRightSize();
    public virtual void set_IconRightSize(Size value);
    public virtual Cursor get_IconRightCursor();
    public virtual void set_IconRightCursor(Cursor value);
    public virtual Point get_IconRightOffset();
    public virtual void set_IconRightOffset(Point value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual string get_DefaultText();
    public virtual void set_DefaultText(string value);
    private bool isIconLeftHover(Point e);
    private bool isIconRightHover(Point e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    public void AppendText(string text);
    public void Clear();
    public void ClearUndo();
    public void Cut();
    public void DeselectAll();
    public void SelectAll();
    public void Paste();
    public virtual void ResetText();
    public void ScrollToCaret();
    public void Select(int start, int length);
    public virtual string ToString();
    public void Undo();
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    public bool get_CanUndo();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public CharacterCasing get_CharacterCasing();
    public void set_CharacterCasing(CharacterCasing value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public String[] get_Lines();
    public void set_Lines(String[] value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public bool get_Modified();
    public void set_Modified(bool value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    public int get_PreferredHeight();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public bool get_ShortcutsEnabled();
    public void set_ShortcutsEnabled(bool value);
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    public int get_TextLength();
    public bool get_UseSystemPasswordChar();
    public void set_UseSystemPasswordChar(bool value);
    public bool get_WordWrap();
    public void set_WordWrap(bool value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    protected virtual void OnResize(EventArgs e);
    protected void UpdateBaseTextBoxPosition();
    private void updateSize();
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    private TextFormatFlags GetTextFormatFlags();
    private ContentAlignment RtlContentAlignment();
    private void BasePaint(Graphics G);
    private void colorSet(MouseState mouseState);
    private void OnInternalMouseState(InternalMouseState state);
    private void OnMouseState(MouseState state);
    private void OnFocusState(bool focus);
    public bool get_Focused();
    private void InitOwnerEvents();
    public void Focus();
    public void Select();
    private void PerformMouseLeave(bool ignore);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseHover(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_0(object s, EventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_1(object s, EventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_2(object s, EventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_3(object s, KeyEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_4(object s, KeyPressEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_5(object s, PreviewKeyDownEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_6(object s, KeyEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_7(object s, EventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_8(object s, EventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_9(object s, MouseEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_10(object s, MouseEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_11(object s, MouseEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_12(object s, EventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_13(object s, EventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_14(object s, MouseEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_15(object s, MouseEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <InitOwnerEvents>b__243_16(object s, EventArgs e);
}
public class Guna.UI2.WinForms.Guna2TileButton : Guna2Button {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("If true, tiles will be applied.")]
public bool Tile { get; public set; }
    public virtual bool get_Tile();
    public virtual void set_Tile(bool value);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("A ToggleSwitch Control.")]
[DefaultEventAttribute("CheckedChanged")]
public class Guna.UI2.WinForms.Guna2ToggleSwitch : Control {
    private AnimationManager _animationManager;
    private int currentRadius;
    private int currentInnerRadius;
    private int currentUncheckedRadius;
    private int currentUncheckedInnerRadius;
    private bool _AutoRoundedCorners;
    private CustomizableEdges _CustomizableEdges;
    private ToggleSwitchState _CheckedState;
    private ToggleSwitchState _UncheckedState;
    private bool _Animated;
    private DashStyle _BorderStyle;
    private ShadowDecoration _ShadowDecoration;
    private bool _Checked;
    private bool _UseTransparentBackground;
    private bool IsHover;
    internal bool UseMouseStateInvalidate;
    internal bool UseFocusInvalidate;
    internal MouseState MouseState;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the border on the control is rounded off automatically.")]
public bool AutoRoundedCorners { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in a checked state.")]
public ToggleSwitchState CheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the control is in an unchecked state.")]
public ToggleSwitchState UncheckedState { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the control will be animated while interacting with the mouse.")]
public bool Animated { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute]
[DescriptionAttribute("The css-like style of the border. You can customize the border to meet your design needs.")]
public DashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("Shadow property of the control.")]
public ShadowDecoration ShadowDecoration { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The properties that will be applied when the control is checked.")]
public bool Checked { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the background will allow a transparent color.")]
public bool UseTransparentBackground { get; public set; }
    protected virtual void OnHandleCreated(EventArgs e);
    private void DefaultTheme();
    protected virtual void OnResize(EventArgs e);
    private void InitializeAnimationManager();
    private void OnAnimationProgress(object sender);
    public virtual bool get_AutoRoundedCorners();
    public virtual void set_AutoRoundedCorners(bool value);
    private void UpdateRoundedCorners();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual bool get_IsDesignMode();
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public virtual ToggleSwitchState get_CheckedState();
    public virtual void set_CheckedState(ToggleSwitchState value);
    public virtual ToggleSwitchState get_UncheckedState();
    public virtual void set_UncheckedState(ToggleSwitchState value);
    public virtual bool get_Animated();
    public virtual void set_Animated(bool value);
    public virtual DashStyle get_BorderStyle();
    public virtual void set_BorderStyle(DashStyle value);
    public virtual ShadowDecoration get_ShadowDecoration();
    public virtual void set_ShadowDecoration(ShadowDecoration value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_UseTransparentBackground();
    public virtual void set_UseTransparentBackground(bool value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void DrawTransparentControl(Graphics G);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    private void BasePaint(Graphics G, ToggleSwitchState appearance);
    protected virtual void OnPaint(PaintEventArgs e);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class Guna.UI2.WinForms.Guna2ToolStripProfessionalRenderer : ToolStripProfessionalRenderer {
    [CompilerGeneratedAttribute]
private ProfessionalColorTable <ColorTable>k__BackingField;
    private Guna2ContextMenuStrip owner;
    private Color _SeparatorColor;
    private Color _BorderColor;
    private Color _ArrowColor;
    private Color _SelectionArrowColor;
    private Color _SelectionBackColor;
    private Color _SelectionForeColor;
    private TextRenderingHint _TextRenderingHint;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ProfessionalColorTable ColorTable { get; public set; }
    public Color SeparatorColor { get; public set; }
    public Color BorderColor { get; public set; }
    public Color ArrowColor { get; public set; }
    public Color SelectionArrowColor { get; public set; }
    public Color SelectionBackColor { get; public set; }
    public Color SelectionForeColor { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Guna2ToolStripProfessionalRenderer(Guna2ContextMenuStrip _gunaContextMenuStrip);
    [CompilerGeneratedAttribute]
public ProfessionalColorTable get_ColorTable();
    [CompilerGeneratedAttribute]
public void set_ColorTable(ProfessionalColorTable value);
    public void Invalidate();
    public virtual string ToString();
    public Color get_SeparatorColor();
    public void set_SeparatorColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_ArrowColor();
    public void set_ArrowColor(Color value);
    public Color get_SelectionArrowColor();
    public void set_SelectionArrowColor(Color value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    public Color get_SelectionForeColor();
    public void set_SelectionForeColor(Color value);
    public TextRenderingHint get_TextRenderingHint();
    public void set_TextRenderingHint(TextRenderingHint value);
    protected virtual void OnRenderItemText(ToolStripItemTextRenderEventArgs e);
    protected virtual void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    protected virtual void OnRenderArrow(ToolStripArrowRenderEventArgs e);
    private Rectangle GetItemRect(ToolStripItem item);
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.TrackBar")]
[DescriptionAttribute("A TrackBar Control.")]
[DesignerAttribute("Guna.UI2.Designer.TrackBarDesigner")]
[DefaultEventAttribute("Scroll")]
public class Guna.UI2.WinForms.Guna2TrackBar : Control {
    private Orientation orientation;
    private bool displayFocusRectangle;
    private bool isHovered;
    private bool isPressed;
    private bool isFocused;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private ScrollEventHandler Scroll;
    private TrackBarState _HoverState;
    private int trackerValue;
    private int barMinimum;
    private int barMaximum;
    private int smallChange;
    private int largeChange;
    private int mouseWheelBarPartitions;
    private Color _ThumbColor;
    private Color _FillColor;
    private TrackBarStyle _Style;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("The focus indicator.")]
public bool IndicateFocus { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The font used to display text in the control.")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The control's text.")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [DescriptionAttribute("Gets a value that indicates whether the Component is currently in design mode.")]
[BrowsableAttribute("False")]
public bool IsDesignMode { get; }
    [BrowsableAttribute("False")]
public MouseState MouseState { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[DescriptionAttribute("The properties that will be applied when the cursor is hover the control.")]
public TrackBarState HoverState { get; public set; }
    [BrowsableAttribute("False")]
[CategoryAttribute("Behaviour")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("If true, the user can select the control, otherwise false.")]
public bool UseSelectable { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("If true, the focus feedback will be displayed, otherwise false.")]
public bool DisplayFocus { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("50")]
[DescriptionAttribute("The trackbar's current value.")]
public int Value { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The trackbar's minimum value.")]
public int Minimum { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("100")]
[DescriptionAttribute("The trackbar's maximum value.")]
public int Maximum { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The trackbar's small change.")]
public int SmallChange { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("5")]
[DescriptionAttribute("The trackbar's large change.")]
public int LargeChange { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("10")]
[DescriptionAttribute("The trackbar's mouse wheel trackbar change.")]
public int MouseWheelBarPartitions { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "160, 113 225")]
[DescriptionAttribute("The trackbar's thumb color.")]
public Color ThumbColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "193, 200, 207")]
[DescriptionAttribute("The trackbar's fill color.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Gets or Sets the style of the trackbar.")]
public TrackBarStyle Style { get; public set; }
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValueChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_Scroll(ScrollEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Scroll(ScrollEventHandler value);
    [EditorBrowsableAttribute("2")]
private void OnScroll(ScrollEventType scrollType, int newValue);
    public virtual bool get_IndicateFocus();
    public virtual void set_IndicateFocus(bool value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual bool get_IsDesignMode();
    public virtual MouseState get_MouseState();
    public virtual TrackBarState get_HoverState();
    public virtual void set_HoverState(TrackBarState value);
    public virtual bool get_UseSelectable();
    public virtual void set_UseSelectable(bool value);
    public virtual bool get_DisplayFocus();
    public virtual void set_DisplayFocus(bool value);
    public virtual int get_Value();
    public virtual void set_Value(int value);
    public virtual int get_Minimum();
    public virtual void set_Minimum(int value);
    public virtual int get_Maximum();
    public virtual void set_Maximum(int value);
    public virtual int get_SmallChange();
    public virtual void set_SmallChange(int value);
    public virtual int get_LargeChange();
    public virtual void set_LargeChange(int value);
    public virtual int get_MouseWheelBarPartitions();
    public virtual void set_MouseWheelBarPartitions(int value);
    public virtual Color get_ThumbColor();
    public virtual void set_ThumbColor(Color value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual TrackBarStyle get_Style();
    public virtual void set_Style(TrackBarStyle value);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    private void BasePaint(Graphics G);
    private void DrawTrackBar(Graphics g, Color thumbColor, Color barColor);
    private void CircleDrawTrackBar(Graphics g, Color thumbColor, Color barColor);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    private void SetProperValue(int val);
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("A transition component, integrate beautiful control transitions in your applications.")]
public class Guna.UI2.WinForms.Guna2Transition : Animator {
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.ProgressBar")]
[DescriptionAttribute("A vertical ProgressBar Control")]
public class Guna.UI2.WinForms.Guna2VProgressBar : Guna2ProgressBar {
    protected CreateParams CreateParams { get; }
    protected virtual CreateParams get_CreateParams();
}
[ToolboxBitmapAttribute("System.Windows.Forms.VScrollBar")]
[DescriptionAttribute("A VScrollBar control.")]
public class Guna.UI2.WinForms.Guna2VScrollBar : Guna2HScrollBar {
    private IContainer components;
    private IScroll scroll;
    private Control _BindingContainer;
    protected CreateParams CreateParams { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Windows.Forms.Control", "")]
[DescriptionAttribute("Bind scrollbar to selected control, e.g: 'Panel', 'FlowLayoutPanel', 'UserControl', 'ContainerControl' or 'TextBox', 'RichTextBox', 'DataGridView', 'ListBox', 'CheckedListBox' and 'TreeView'.'")]
public Control BindingContainer { get; public set; }
    protected virtual CreateParams get_CreateParams();
    public virtual Control get_BindingContainer();
    public virtual void set_BindingContainer(Control value);
    private void InitializeComponent();
}
[ToolboxItemAttribute("True")]
[DescriptionAttribute("A vertical Separator Control")]
public class Guna.UI2.WinForms.Guna2VSeparator : Guna2Separator {
}
[ToolboxItemAttribute("True")]
[ToolboxBitmapAttribute("System.Windows.Forms.TrackBar")]
[DescriptionAttribute("A vertical TrackBar Control")]
public class Guna.UI2.WinForms.Guna2VTrackBar : Guna2TrackBar {
    protected CreateParams CreateParams { get; }
    protected virtual CreateParams get_CreateParams();
}
[ToolboxBitmapAttribute("System.Windows.Forms.ProgressBar")]
[DescriptionAttribute("A Windows ProgressIndicator Control.")]
public class Guna.UI2.WinForms.Guna2WinProgressIndicator : Guna2ProgressIndicator {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The progress style of the ProressIndicator control.")]
public ProgressIndicatorStyle Style { get; public set; }
    [DefaultValueAttribute("1,5")]
[DescriptionAttribute("Gets or sets the scale for the circles.")]
[CategoryAttribute("Appearance")]
public float CircleSize { get; public set; }
    public virtual ProgressIndicatorStyle get_Style();
    public virtual void set_Style(ProgressIndicatorStyle value);
    public virtual float get_CircleSize();
    public virtual void set_CircleSize(float value);
}
public class Guna.UI2.WinForms.GunaUILicenseMgr : Component {
    private Timer timer1;
    private IContainer components;
    public GunaUILicenseMgr(IContainer container);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void timer1_Tick(object sender, EventArgs e);
}
public class Guna.UI2.WinForms.Helpers.DataGridViewScrollHelper : object {
    private IScroll scroll;
    public DataGridViewScrollHelper(DataGridView dataGridView, VScrollBar vScrollBar, bool fixedPosition);
    public DataGridViewScrollHelper(DataGridView dataGridView, Guna2HScrollBar hScrollBar, bool fixedPosition);
    public DataGridViewScrollHelper(DataGridView dataGridView, Guna2VScrollBar vScrollBar, bool fixedPosition);
    public sealed virtual void Dispose();
    public void UpdateScrollBar();
}
public static class Guna.UI2.WinForms.Helpers.GraphicsBitmapConverter : object {
    private static bool BitBlt(IntPtr hdc, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, TernaryRasterOperations dwRop);
    public static Bitmap GraphicsToBitmap(Graphics g, Rectangle bounds);
}
public static class Guna.UI2.WinForms.Helpers.GraphicsHelper : object {
    private static Dictionary`2<string, LineShadowHelper> DrawLineShadowList;
    private static ContentAlignment anyRight;
    private static ContentAlignment anyBottom;
    private static ContentAlignment anyCenter;
    private static ContentAlignment anyMiddle;
    internal static Color DisabledColor;
    internal static Rectangle nullRec;
    private static GraphicsHelper();
    public static Color BlendColorARGB(Color color1, Color color2, double blend);
    public static Color BlendColorRGB(Color color1, Color color2, double blend);
    public static Image RotateImage(Image image, float rotationAngle);
    public static Image FlipRotateImage(Image image, FlipOrientation flipOrientation, float rotationAngle);
    public static Image FlipImage(Image image, FlipOrientation flipOrientation);
    public static Image ImageResizer(Image imgToResize, Rectangle maxOffset);
    public static Image ImageColorOverlay(Image image, Color oldColor, Color newColor);
    internal static void ImageColorOverlay(Graphics graphics, Image image, Rectangle dest, Color oldColor, Color newColor);
    public static void DrawTransparent(Control control, Graphics graphics);
    public static void DrawLineShadow(Control control, Color shadowColor, int shadowDepth, int shadowSize, VerHorAlign shadowAlign, AddOrRemove handler);
    public static void DrawLineShadow(Graphics graphics, Color shadowColor, Rectangle bounds, int shadowDepth, int shadowSize, VerHorAlign shadowAlign);
    internal static Color Interpolate(Color color1, Color color2, int percent);
    internal static HorizontalAlignment HorAlignRightToLeft(RightToLeft rightToLeft, HorizontalAlignment horizontalAlignment);
    internal static void DrawString(Control control, Graphics graphics, string text, Font font, Color color, Rectangle rectangle, StringAlignment stringAlignment, bool withPrefix, Padding padding, bool paddingAdv);
    internal static TextFormatFlags CreateTextFormatFlags(Control ctl, ContentAlignment textAlign, bool showEllipsis, bool useMnemonic);
    internal static Bitmap ResizeImage(Image img, int width, int height);
    internal static TextFormatFlags TextFormatFlagsForAlignmentGDI(ContentAlignment align);
    internal static StringAlignment TranslateAlignment(ContentAlignment align);
    internal static TextFormatFlags TranslateAlignmentForGDI(ContentAlignment align);
    internal static StringAlignment TranslateLineAlignment(ContentAlignment align);
    internal static TextFormatFlags TranslateLineAlignmentForGDI(ContentAlignment align);
    internal static void DrawTextImage(Graphics G, string Text, Color ForeColor, Font Font, HorizontalAlignment TextAlign, TextRenderingHint TextRenderingHint, Point TextOffset, Image Image, Size ImageSize, HorizontalAlignment ImageAlign, Point ImageOffset, bool Tile, Padding ClientPadding, Rectangle ClientRectangle);
    private static Rectangle bindRectangleXY(Rectangle r1, Rectangle r2);
    internal static Color SetDisabledColor(Color color);
    public static Color BindColor(Color color1, Color color2);
    internal static Rectangle DeflateRect(Rectangle rect, Padding padding);
    internal static Rectangle ImageRectangleFromSizeMode(Image image, Rectangle rect, Padding padding, PictureBoxSizeMode mode);
    internal static StringAlignment HorToStringAlign(HorizontalAlignment e);
    internal static void DrawBackgroundImage(Graphics g, Image backgroundImage, ImageLayout backgroundImageLayout, Rectangle bounds, Rectangle clipRect, Point scrollOffset, RightToLeft rightToLeft);
    internal static Rectangle CalculateBackgroundImageRectangle(Rectangle bounds, Image backgroundImage, ImageLayout imageLayout);
    internal static Point ImageCenter(int iWidth, int iHeight, int cWidth, int cHeight);
    internal static int ImageCenterHor(int iWidth, int cWidth);
    internal static int ImageCenterVer(int iHeight, int cHeight);
    internal static Color BandingColor(Color c, Color c1, Color c2, int depth);
    internal static RectangleF SmoothRect(RectangleF rec);
    public static GraphicsPath RoundRect(RectangleF rect, float BorderRadius, CustomizableEdges CustomizableEdges);
    internal static void DrawLine(Graphics G, Color color, Rectangle rec, Padding sz, int radius, CustomizableEdges CustomizableEdges);
    private static Image DrawLine(int w, int h, int w2, int h2, Posisition l, Color onCustomBorderColor, Padding sz, int radius, CustomizableEdges CustomizableEdges);
    internal static GraphicsPath RoundBorderRect(Rectangle R, float BorderRadius, float BorderThickness, CustomizableEdges CustomizableEdges);
    internal static void DrawCircleLine(Graphics G, Color color, Rectangle rec, Padding sz);
    private static Image DrawCircleLine(int w, int h, int w2, int h2, Posisition l, Color onCustomBorderColor, Padding sz);
    internal static GraphicsPath CircleBorderRect(RectangleF R, float BorderThickness);
    internal static void DrawCircleBorder(Graphics G, Brush brush, RectangleF rect, int width, DashStyle dashStyle);
    public static void DrawRoundBorder(Graphics G, Brush B, Rectangle R, int BorderRadius, int witdh, DashStyle dashType, CustomizableEdges CustomizableEdges);
    internal static void DrawFlatLine(Graphics G, Brush B, Rectangle R, int BorderTop, int BorderLeft, int BorderRight, int BorderBottom);
    public static void DrawBorder(Graphics G, Brush brush, Rectangle rect, int width, DashStyle dashtype);
    internal static Color Interpolate2(Color color1, Color color2, int percent);
    internal static Bitmap ImageReplaceColor(Image image, Color oldColor, Color newColor);
    internal static void DrawImageReplaceColor(Graphics g, Image image, Rectangle dest, Color oldColor, Color newColor);
}
internal interface Guna.UI2.WinForms.Helpers.IScroll {
    public abstract virtual void Dispose();
    public abstract virtual void UpdateScrollBar();
}
public class Guna.UI2.WinForms.Helpers.ListViewScrollHelper : object {
    private IScroll scroll;
    public ListViewScrollHelper(ListView listView, VScrollBar vScrollBar, bool fixedLocation);
    public ListViewScrollHelper(ListView listView, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
    public sealed virtual void Dispose();
    public void UpdateScrollBar();
}
public class Guna.UI2.WinForms.Helpers.PanelScrollHelper : object {
    private IScroll scroll;
    public PanelScrollHelper(ScrollableControl control, HScrollBar hScrollBar, bool fixedLocation);
    public PanelScrollHelper(ScrollableControl control, VScrollBar vScrollBar, bool fixedLocation);
    public PanelScrollHelper(ScrollableControl control, Guna2HScrollBar guna2HScrollBar, bool fixedLocation);
    public PanelScrollHelper(ScrollableControl control, Guna2VScrollBar guna2VScrollBar, bool fixedLocation);
    public sealed virtual void Dispose();
    public void UpdateScrollBar();
}
public interface Guna.UI2.WinForms.Interfaces.IControl {
    public bool IsDesignMode { get; }
    public abstract virtual bool get_IsDesignMode();
}
public interface Guna.UI2.WinForms.Interfaces.ICustomButtonControl {
    public Color FillColor { get; public set; }
    public Color ForeColor { get; public set; }
    public Color BorderColor { get; public set; }
    public Color CustomBorderColor { get; public set; }
    public Image Image { get; public set; }
    public Font Font { get; public set; }
    public bool Checked { get; public set; }
    public abstract virtual void Invalidate();
    public abstract virtual Color get_FillColor();
    public abstract virtual void set_FillColor(Color value);
    public abstract virtual Color get_ForeColor();
    public abstract virtual void set_ForeColor(Color value);
    public abstract virtual Color get_BorderColor();
    public abstract virtual void set_BorderColor(Color value);
    public abstract virtual Color get_CustomBorderColor();
    public abstract virtual void set_CustomBorderColor(Color value);
    public abstract virtual Image get_Image();
    public abstract virtual void set_Image(Image value);
    public abstract virtual Font get_Font();
    public abstract virtual void set_Font(Font value);
    public abstract virtual bool get_Checked();
    public abstract virtual void set_Checked(bool value);
}
public interface Guna.UI2.WinForms.Interfaces.IImageControl {
    public Image Image { get; public set; }
    public abstract virtual Image get_Image();
    public abstract virtual void set_Image(Image value);
    public abstract virtual void Invalidate();
}
[ToolboxItemAttribute("False")]
public class Guna.UI2.WinForms.Internal.PlaceholderTextBox : TextBox {
    private string _PlaceholderText;
    private Color _PlaceholderTextColor;
    public string PlaceholderText { get; public set; }
    public bool CanShowPlaceholder { get; }
    [DefaultValueAttribute("System.Drawing.Color", "GrayText")]
public Color PlaceholderTextColor { get; public set; }
    public string get_PlaceholderText();
    public void set_PlaceholderText(string value);
    public bool get_CanShowPlaceholder();
    public Color get_PlaceholderTextColor();
    public void set_PlaceholderTextColor(Color value);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
    public void UpdatePlaceholder();
}
public class Guna.UI2.WinForms.MessageDialog : object {
    internal static DialogResult ShowCore(Form parent, string text, string caption, MessageDialogButtons buttons, MessageDialogIcon icon, MessageDialogStyle style);
    public static DialogResult Show(string text);
    public static DialogResult Show(Form parent, string text);
    public static DialogResult Show(string text, MessageDialogStyle style);
    public static DialogResult Show(Form parent, string text, MessageDialogStyle style);
    public static DialogResult Show(string text, string caption);
    public static DialogResult Show(Form parent, string text, string caption);
    public static DialogResult Show(string text, string caption, MessageDialogStyle style);
    public static DialogResult Show(Form parent, string text, string caption, MessageDialogStyle style);
    public static DialogResult Show(string text, string caption, MessageDialogButtons buttons);
    public static DialogResult Show(Form parent, string text, string caption, MessageDialogButtons buttons);
    public static DialogResult Show(string text, string caption, MessageDialogButtons buttons, MessageDialogStyle style);
    public static DialogResult Show(Form parent, string text, string caption, MessageDialogButtons buttons, MessageDialogStyle style);
    public static DialogResult Show(string text, string caption, MessageDialogButtons buttons, MessageDialogIcon icon);
    public static DialogResult Show(Form parent, string text, string caption, MessageDialogButtons buttons, MessageDialogIcon icon);
    public static DialogResult Show(string text, string caption, MessageDialogButtons buttons, MessageDialogIcon icon, MessageDialogStyle style);
    public static DialogResult Show(Form parent, string text, string caption, MessageDialogButtons buttons, MessageDialogIcon icon, MessageDialogStyle style);
}
public enum Guna.UI2.WinForms.MessageDialogButtons : Enum {
    public int value__;
    public static MessageDialogButtons OK;
    public static MessageDialogButtons OKCancel;
    public static MessageDialogButtons AbortRetryIgnore;
    public static MessageDialogButtons YesNoCancel;
    public static MessageDialogButtons YesNo;
    public static MessageDialogButtons RetryCancel;
}
public enum Guna.UI2.WinForms.MessageDialogIcon : Enum {
    public int value__;
    public static MessageDialogIcon None;
    public static MessageDialogIcon Question;
    public static MessageDialogIcon Error;
    public static MessageDialogIcon Warning;
    public static MessageDialogIcon Information;
}
public enum Guna.UI2.WinForms.MessageDialogStyle : Enum {
    public int value__;
    public static MessageDialogStyle Default;
    public static MessageDialogStyle Light;
    public static MessageDialogStyle Dark;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("ButtonCustomImages")]
public class Guna.UI2.WinForms.Suite.ButtonImages : object {
    private ICustomButtonControl _Parent;
    private Image _Image;
    private Image _HoveredImage;
    private Image _CheckedImage;
    private Size _ImageSize;
    private Point _ImageOffset;
    private HorizontalAlignment _ImageAlign;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public ICustomButtonControl Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image.")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The Image that will be applied when the cursor hovers over the control.")]
public Image HoveredImage { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The Image that will be applied when the control is checked.")]
public Image CheckedImage { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("The size of the control's image.")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("Setting the position of the control's image.")]
public Point ImageOffset { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("1")]
[DescriptionAttribute("The control's image alignment.")]
public HorizontalAlignment ImageAlign { get; public set; }
    public ICustomButtonControl get_Parent();
    public void set_Parent(ICustomButtonControl value);
    public virtual string ToString();
    private void Invalidate();
    public Image get_Image();
    public void set_Image(Image value);
    public Image get_HoveredImage();
    public void set_HoveredImage(Image value);
    public Image get_CheckedImage();
    public void set_CheckedImage(Image value);
    public Size get_ImageSize();
    public void set_ImageSize(Size value);
    public Point get_ImageOffset();
    public void set_ImageOffset(Point value);
    public HorizontalAlignment get_ImageAlign();
    public void set_ImageAlign(HorizontalAlignment value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("Button State")]
public class Guna.UI2.WinForms.Suite.ButtonState : object {
    private ICustomButtonControl _Parent;
    private Color _FillColor;
    private Color _ForeColor;
    private Color _BorderColor;
    private Color _CustomBorderColor;
    private Image _Image;
    private Font _Font;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public ICustomButtonControl Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The controls' fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The controls' ForeColor")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The controls' border color")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The controls' custom border color")]
public Color CustomBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The controls' image")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Font", "")]
[DescriptionAttribute("The controls' font style")]
public Font Font { get; public set; }
    public virtual ICustomButtonControl get_Parent();
    public virtual void set_Parent(ICustomButtonControl value);
    internal void Invalidate();
    public virtual string ToString();
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual Color get_CustomBorderColor();
    public virtual void set_CustomBorderColor(Color value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("ComboBoxItemsAppearance")]
public class Guna.UI2.WinForms.Suite.ComboBoxItemsAppearance : object {
    private Guna2ComboBox _Parent;
    private Font _Font;
    private Color _ForeColor;
    private Color _BackColor;
    private Font _SelectedFont;
    private Color _SelectedForeColor;
    private Color _SelectedBackColor;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2ComboBox Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Font", "")]
[DescriptionAttribute("The font style")]
public Font Font { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The ForeColor")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The BackColor")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Font", "")]
[DescriptionAttribute("The font style of a selected item")]
public Font SelectedFont { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The ForeColor of a selected item")]
public Color SelectedForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The BackColor of a selected item")]
public Color SelectedBackColor { get; public set; }
    public Guna2ComboBox get_Parent();
    public void set_Parent(Guna2ComboBox value);
    public virtual string ToString();
    private void Invalidate();
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Font get_SelectedFont();
    public void set_SelectedFont(Font value);
    public Color get_SelectedForeColor();
    public void set_SelectedForeColor(Color value);
    public Color get_SelectedBackColor();
    public void set_SelectedBackColor(Color value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("ComboBoxState")]
public class Guna.UI2.WinForms.Suite.ComboBoxState : object {
    private Guna2ComboBox _Parent;
    private Color _FillColor;
    private Color _ForeColor;
    private Color _BorderColor;
    private Font _Font;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2ComboBox Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The forecolor")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The color of the border")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Font", "")]
[DescriptionAttribute("The font style")]
public Font Font { get; public set; }
    public Guna2ComboBox get_Parent();
    public void set_Parent(Guna2ComboBox value);
    private void Invalidate();
    public virtual string ToString();
    internal void PaintValue(PaintValueEventArgs e);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Font get_Font();
    public void set_Font(Font value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("ControlBoxState")]
public class Guna.UI2.WinForms.Suite.ControlBoxState : object {
    private Guna2ControlBox _Parent;
    private Color _FillColor;
    private Color _IconColor;
    private Color _BorderColor;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2ControlBox Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The icon color")]
public Color IconColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The color of the border")]
public Color BorderColor { get; public set; }
    public Guna2ControlBox get_Parent();
    public void set_Parent(Guna2ControlBox value);
    private void Invalidate();
    public virtual string ToString();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_IconColor();
    public void set_IconColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("An abstract class used to define various states within Guna CheckBox.")]
public class Guna.UI2.WinForms.Suite.CustomCheckBoxState : object {
    private Guna2CustomCheckBox _Parent;
    private Color _FillColor;
    private Color _BorderColor;
    private int _BorderRadius;
    private int _BorderThickness;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2CustomCheckBox Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Allows you to apply fill color of your checkbox by setting the color value.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Allows you to set the checkbox border color.")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Int32", "")]
[DescriptionAttribute("Allows you to set the border radius of your checkbox hence defines the roundness of your checkbox.")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Int32", "")]
[DescriptionAttribute("Allows you to set the border thickness of your checkbox.")]
public int BorderThickness { get; public set; }
    public Guna2CustomCheckBox get_Parent();
    public void set_Parent(Guna2CustomCheckBox value);
    private void Invalidate();
    public virtual string ToString();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public int get_BorderThickness();
    public void set_BorderThickness(int value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("You can choose which edges will be included when styling the border radius")]
public class Guna.UI2.WinForms.Suite.CustomizableEdges : object {
    internal Control Parent;
    private bool _TopLeft;
    private bool _TopRight;
    private bool _BottomLeft;
    private bool _BottomRight;
    [DefaultValueAttribute("True")]
public bool TopLeft { get; public set; }
    [DefaultValueAttribute("True")]
public bool TopRight { get; public set; }
    [DefaultValueAttribute("True")]
public bool BottomLeft { get; public set; }
    [DefaultValueAttribute("True")]
public bool BottomRight { get; public set; }
    public CustomizableEdges(bool bottomLeft, bool bottomRight, bool topLeft, bool topRight);
    private void Invalidate();
    public virtual string ToString();
    public bool get_TopLeft();
    public void set_TopLeft(bool value);
    public bool get_TopRight();
    public void set_TopRight(bool value);
    public bool get_BottomLeft();
    public void set_BottomLeft(bool value);
    public bool get_BottomRight();
    public void set_BottomRight(bool value);
    public static CustomizableEdges TryParse(string input);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("CustomRadionButtonState")]
public class Guna.UI2.WinForms.Suite.CustomRadionButtonState : object {
    private Guna2CustomRadioButton _Parent;
    private Color _FillColor;
    private Color _BorderColor;
    private int _BorderThickness;
    private Color _InnerColor;
    private int _InnerOffset;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2CustomRadioButton Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's border color")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Int32", "")]
[DescriptionAttribute("The thickness of the border. The higher the value, the thicker the border")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The inner color of the control")]
public Color InnerColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The offset of the control")]
public int InnerOffset { get; public set; }
    public Guna2CustomRadioButton get_Parent();
    public void set_Parent(Guna2CustomRadioButton value);
    private void Invalidate();
    public virtual string ToString();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderThickness();
    public void set_BorderThickness(int value);
    public Color get_InnerColor();
    public void set_InnerColor(Color value);
    public int get_InnerOffset();
    public void set_InnerOffset(int value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("DateTimePickerState")]
public class Guna.UI2.WinForms.Suite.DateTimePickerState : object {
    private Guna2DateTimePicker _Parent;
    private Color _FillColor;
    private Color _ForeColor;
    private Color _BorderColor;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2DateTimePicker Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The date picker's fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The date picker's ForeColor")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The date picker's border color")]
public Color BorderColor { get; public set; }
    public Guna2DateTimePicker get_Parent();
    public void set_Parent(Guna2DateTimePicker value);
    private void Invalidate();
    public virtual string ToString();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
}
public class Guna.UI2.WinForms.Suite.Descriptions : object {
}
public class Guna.UI2.WinForms.Suite.GradientButtonState : ButtonState {
    private Color _FillColor2;
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The second fill color in a gradient mode")]
public Color FillColor2 { get; public set; }
    public virtual Color get_FillColor2();
    public virtual void set_FillColor2(Color value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("ImageControlState")]
public class Guna.UI2.WinForms.Suite.ImageControlState : object {
    private IImageControl _Parent;
    private FlipOrientation _ImageFlip;
    private float _ImageRotate;
    private Image _Image;
    private Size _ImageSize;
    private Point _ImageOffset;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public IImageControl Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("Flips the image to any given orientation. Supports both Vertical  and Horizontal orientation-flipping options.")]
public FlipOrientation ImageFlip { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Single", "0")]
[DescriptionAttribute("Sets the angle of rotation for the image. Please provide a value between 0 and 360.")]
public float ImageRotate { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Image", "")]
[DescriptionAttribute("The control's image")]
public Image Image { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Size", "20, 20")]
[DescriptionAttribute("The control's image size")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
[DescriptionAttribute("The control's image offset")]
public Point ImageOffset { get; public set; }
    public IImageControl get_Parent();
    public void set_Parent(IImageControl value);
    public virtual string ToString();
    private void Invalidate();
    public FlipOrientation get_ImageFlip();
    public void set_ImageFlip(FlipOrientation value);
    public float get_ImageRotate();
    public void set_ImageRotate(float value);
    public Image get_Image();
    public void set_Image(Image value);
    public Size get_ImageSize();
    public void set_ImageSize(Size value);
    public Point get_ImageOffset();
    public void set_ImageOffset(Point value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("NumericUpDownState")]
public class Guna.UI2.WinForms.Suite.NumericUpDownState : object {
    private Guna2NumericUpDown _Parent;
    private Color _ForeColor;
    private Color _UpDownButtonForeColor;
    private Color _UpDownButtonFillColor;
    private Color _FillColor;
    private Color _BorderColor;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2NumericUpDown Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The foreground color of this control, which is used to display text.")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's UpDown button ForeColor")]
public Color UpDownButtonForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's UpDown button fill color")]
public Color UpDownButtonFillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's UpDown button fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's UpDown button border color")]
public Color BorderColor { get; public set; }
    public Guna2NumericUpDown get_Parent();
    public void set_Parent(Guna2NumericUpDown value);
    public virtual string ToString();
    private void Invalidate();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_UpDownButtonForeColor();
    public void set_UpDownButtonForeColor(Color value);
    public Color get_UpDownButtonFillColor();
    public void set_UpDownButtonFillColor(Color value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("ScrollBarState")]
public class Guna.UI2.WinForms.Suite.ScrollBarState : ExpandableObjectConverter {
    private Guna2HScrollBar _Parent;
    private Color _ThumbColor;
    private Color _FillColor;
    private Color _BorderColor;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2HScrollBar Parent { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The scroll bar thumb color")]
public Color ThumbColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The scroll bar fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The scroll bar border color")]
public Color BorderColor { get; public set; }
    public Guna2HScrollBar get_Parent();
    public void set_Parent(Guna2HScrollBar value);
    public virtual string ToString();
    public Color get_ThumbColor();
    public void set_ThumbColor(Color value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("ShadowDecoration")]
public class Guna.UI2.WinForms.Suite.ShadowDecoration : object {
    private Bitmap B2;
    private bool istmp;
    private Control _Parent;
    private int parentRadius;
    private Control ParentOfParent;
    private CustomizableEdges _CustomizableEdges;
    private bool _Enabled;
    private ShadowMode _Mode;
    private Color _Color;
    private int _Depth;
    private Padding _Shadow;
    private int _BorderRadius;
    private int numH;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Control Parent { get; public set; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Guna.UI2.WinForms.Suite.EdgesConverter")]
[DescriptionAttribute("Style the control's border sides.")]
public CustomizableEdges CustomizableEdges { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("If true, the shadow decoration will be enabled")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The shadow decoration mode")]
public ShadowMode Mode { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The shadow decoration color")]
public Color Color { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("30")]
[DescriptionAttribute("The shadow decoration depth")]
public int Depth { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Windows.Forms.Padding", "5, 5, 5, 5")]
[DescriptionAttribute("The shadow decoration shadow")]
public Padding Shadow { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("6")]
[DescriptionAttribute("The shadow decoration border radius")]
public int BorderRadius { get; public set; }
    public ShadowDecoration(IControl owner);
    public Control get_Parent();
    public void set_Parent(Control value);
    internal void UpdateBorderRadius(int radius);
    internal void PaintValue(PaintValueEventArgs e);
    public virtual CustomizableEdges get_CustomizableEdges();
    public virtual void set_CustomizableEdges(CustomizableEdges value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public ShadowMode get_Mode();
    public void set_Mode(ShadowMode value);
    public Color get_Color();
    public void set_Color(Color value);
    public int get_Depth();
    public void set_Depth(int value);
    public Padding get_Shadow();
    public void set_Shadow(Padding value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    private void UpdateHandler(bool e);
    private void WaitParent();
    private bool IsRedy();
    private void Invalidate();
    public virtual string ToString();
    private Rectangle shadowRect();
    private int Max();
    private void Parent_VisibleChanged(object sender, EventArgs e);
    private void Parent_Resize(object sender, EventArgs e);
    private void ParentOfParent_ControlRemoved(object sender, ControlEventArgs e);
    private void ParentOfParent_Resize(object sender, EventArgs e);
    private void ParentOfParent_Paint(object sender, PaintEventArgs e);
}
public class Guna.UI2.WinForms.Suite.ShadowForm : Form {
    public int _spread;
    private bool _isActive;
    private bool _lastActive;
    private int _BorderRadius;
    private Int32[] alpha;
    private Bitmap shadow;
    private Form _TargetForm;
    private Color _ShadowColor;
    public Form TargetForm { get; public set; }
    [CategoryAttribute("Guna, Appearance")]
[DefaultValueAttribute("12")]
public int BorderRadius { get; public set; }
    [CategoryAttribute("Guna, Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[DescriptionAttribute("The shadow color")]
public Color ShadowColor { get; public set; }
    protected CreateParams CreateParams { get; }
    public ShadowForm(Form parent);
    public ShadowForm(Form parent, int radius, Color color);
    private void init();
    public Form get_TargetForm();
    public void set_TargetForm(Form value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    protected virtual CreateParams get_CreateParams();
    private void UpdateNative(Bitmap backBuffer, int bl);
    private int DoubleSpread();
    private GraphicsPath RoundRect(Rectangle r, int radius, Edges edges);
    private void CreateShadow();
    private void RenderShadow();
    private void SetPos();
    private void TargetVisibleChanged(object sender, EventArgs e);
    private void TargetResize(object sender, EventArgs e);
    private void TargetLocationChanged(object sender, EventArgs e);
    private void TargetDeactivate(object sender, EventArgs e);
    private void TargetActivated(object sender, EventArgs e);
    private void TargetFormClosed(object sender, FormClosedEventArgs e);
    private void TargetDisposed(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void callBack(bool add);
    private void InitializeComponent();
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("")]
public class Guna.UI2.WinForms.Suite.TextBoxState : object {
    private Guna2TextBox _Parent;
    private Color _ForeColor;
    private Color _PlaceholderForeColor;
    private Color _FillColor;
    private Color _BorderColor;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2TextBox Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The textbox ForeColor")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The textbox Placeholder ForeColor")]
public Color PlaceholderForeColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The textbox fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The textbox border color")]
public Color BorderColor { get; public set; }
    public Guna2TextBox get_Parent();
    public void set_Parent(Guna2TextBox value);
    public virtual string ToString();
    private void Invalidate();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_PlaceholderForeColor();
    public void set_PlaceholderForeColor(Color value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("ToggleSwitchState")]
public class Guna.UI2.WinForms.Suite.ToggleSwitchState : object {
    private Guna2ToggleSwitch _Parent;
    private Color _FillColor;
    private Color _BorderColor;
    private Color _InnerColor;
    private Color _InnerBorderColor;
    private int _BorderRadius;
    private int _BorderThickness;
    private int _InnerBorderRadius;
    private int _InnerBorderThickness;
    private int _InnerOffset;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2ToggleSwitch Parent { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The toggle switch fill color")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The toggle switch border color")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The toggle switch inner color")]
public Color InnerColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The toggle switch inner border color")]
public Color InnerBorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("9")]
[DescriptionAttribute("The toggle switch border radius")]
public int BorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The toggle switch border thickness")]
public int BorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("5")]
[DescriptionAttribute("The toggle switch innder border radius")]
public int InnerBorderRadius { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The toggle switch innder border thickness")]
public int InnerBorderThickness { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The toggle switch inner offset")]
public int InnerOffset { get; public set; }
    public Guna2ToggleSwitch get_Parent();
    public void set_Parent(Guna2ToggleSwitch value);
    private void Invalidate();
    public virtual string ToString();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_InnerColor();
    public void set_InnerColor(Color value);
    public Color get_InnerBorderColor();
    public void set_InnerBorderColor(Color value);
    public int get_BorderRadius();
    public void set_BorderRadius(int value);
    public int get_BorderThickness();
    public void set_BorderThickness(int value);
    public int get_InnerBorderRadius();
    public void set_InnerBorderRadius(int value);
    public int get_InnerBorderThickness();
    public void set_InnerBorderThickness(int value);
    public int get_InnerOffset();
    public void set_InnerOffset(int value);
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
[DescriptionAttribute("TrackBarState")]
public class Guna.UI2.WinForms.Suite.TrackBarState : object {
    private Guna2TrackBar _Parent;
    private Color _FillColor;
    private Color _ThumbColor;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Guna2TrackBar Parent { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The BackColor that will fill the control.")]
public Color FillColor { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("The control's thumb color")]
public Color ThumbColor { get; public set; }
    public Guna2TrackBar get_Parent();
    public void set_Parent(Guna2TrackBar value);
    private void Invalidate();
    public virtual string ToString();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Color get_ThumbColor();
    public void set_ThumbColor(Color value);
}
public enum Guna.UI2.WinForms.TabMenuOrientation : Enum {
    public int value__;
    public static TabMenuOrientation HorizontalTop;
    public static TabMenuOrientation HorizontalBottom;
    public static TabMenuOrientation VerticalLeft;
    public static TabMenuOrientation VerticalRight;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public class TheArtOfDevHtmlRenderer.Adapters.Entities.RColor : ValueType {
    public static RColor Empty;
    private long _value;
    public static RColor Transparent { get; }
    public static RColor Black { get; }
    public static RColor White { get; }
    public static RColor WhiteSmoke { get; }
    public static RColor LightGray { get; }
    public byte R { get; }
    public byte G { get; }
    public byte B { get; }
    public byte A { get; }
    public bool IsEmpty { get; }
    private RColor(long value);
    private static RColor();
    public static RColor get_Transparent();
    public static RColor get_Black();
    public static RColor get_White();
    public static RColor get_WhiteSmoke();
    public static RColor get_LightGray();
    public byte get_R();
    public byte get_G();
    public byte get_B();
    public byte get_A();
    public bool get_IsEmpty();
    public static bool op_Equality(RColor left, RColor right);
    public static bool op_Inequality(RColor left, RColor right);
    public static RColor FromArgb(int alpha, int red, int green, int blue);
    public static RColor FromArgb(int red, int green, int blue);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private static void CheckByte(int value);
}
public enum TheArtOfDevHtmlRenderer.Adapters.Entities.RDashStyle : Enum {
    public int value__;
    public static RDashStyle Solid;
    public static RDashStyle Dash;
    public static RDashStyle Dot;
    public static RDashStyle DashDot;
    public static RDashStyle DashDotDot;
    public static RDashStyle Custom;
}
[FlagsAttribute]
public enum TheArtOfDevHtmlRenderer.Adapters.Entities.RFontStyle : Enum {
    public int value__;
    public static RFontStyle Regular;
    public static RFontStyle Bold;
    public static RFontStyle Italic;
    public static RFontStyle Underline;
    public static RFontStyle Strikeout;
}
public class TheArtOfDevHtmlRenderer.Adapters.Entities.RKeyEvent : object {
    private bool _control;
    private bool _aKeyCode;
    private bool _cKeyCode;
    public bool Control { get; }
    public bool AKeyCode { get; }
    public bool CKeyCode { get; }
    public RKeyEvent(bool control, bool aKeyCode, bool cKeyCode);
    public bool get_Control();
    public bool get_AKeyCode();
    public bool get_CKeyCode();
}
public class TheArtOfDevHtmlRenderer.Adapters.Entities.RMouseEvent : object {
    private bool _leftButton;
    public bool LeftButton { get; }
    public RMouseEvent(bool leftButton);
    public bool get_LeftButton();
}
public class TheArtOfDevHtmlRenderer.Adapters.Entities.RPoint : ValueType {
    public static RPoint Empty;
    private double _x;
    private double _y;
    public bool IsEmpty { get; }
    public double X { get; public set; }
    public double Y { get; public set; }
    private static RPoint();
    public RPoint(double x, double y);
    public bool get_IsEmpty();
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public static RPoint op_Addition(RPoint pt, RSize sz);
    public static RPoint op_Subtraction(RPoint pt, RSize sz);
    public static bool op_Equality(RPoint left, RPoint right);
    public static bool op_Inequality(RPoint left, RPoint right);
    public static RPoint Add(RPoint pt, RSize sz);
    public static RPoint Subtract(RPoint pt, RSize sz);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class TheArtOfDevHtmlRenderer.Adapters.Entities.RRect : ValueType {
    public static RRect Empty;
    private double _height;
    private double _width;
    private double _x;
    private double _y;
    public RPoint Location { get; public set; }
    public RSize Size { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double Left { get; }
    public double Top { get; }
    public double Right { get; }
    public double Bottom { get; }
    public bool IsEmpty { get; }
    public RRect(double x, double y, double width, double height);
    public RRect(RPoint location, RSize size);
    private static RRect();
    public RPoint get_Location();
    public void set_Location(RPoint value);
    public RSize get_Size();
    public void set_Size(RSize value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public double get_Left();
    public double get_Top();
    public double get_Right();
    public double get_Bottom();
    public bool get_IsEmpty();
    public static bool op_Equality(RRect left, RRect right);
    public static bool op_Inequality(RRect left, RRect right);
    public static RRect FromLTRB(double left, double top, double right, double bottom);
    public virtual bool Equals(object obj);
    public bool Contains(double x, double y);
    public bool Contains(RPoint pt);
    public bool Contains(RRect rect);
    public void Inflate(double x, double y);
    public void Inflate(RSize size);
    public static RRect Inflate(RRect rect, double x, double y);
    public void Intersect(RRect rect);
    public static RRect Intersect(RRect a, RRect b);
    public bool IntersectsWith(RRect rect);
    public static RRect Union(RRect a, RRect b);
    public void Offset(RPoint pos);
    public void Offset(double x, double y);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class TheArtOfDevHtmlRenderer.Adapters.Entities.RSize : ValueType {
    public static RSize Empty;
    private double _height;
    private double _width;
    public bool IsEmpty { get; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public RSize(RSize size);
    public RSize(RPoint pt);
    public RSize(double width, double height);
    private static RSize();
    public bool get_IsEmpty();
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public static RPoint op_Explicit(RSize size);
    public static RSize op_Addition(RSize sz1, RSize sz2);
    public static RSize op_Subtraction(RSize sz1, RSize sz2);
    public static bool op_Equality(RSize sz1, RSize sz2);
    public static bool op_Inequality(RSize sz1, RSize sz2);
    public static RSize Add(RSize sz1, RSize sz2);
    public static RSize Subtract(RSize sz1, RSize sz2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public RPoint ToPointF();
    public virtual string ToString();
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RAdapter : object {
    private Dictionary`2<RColor, RBrush> _brushesCache;
    private Dictionary`2<RColor, RPen> _penCache;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146627030F18202D0D0F0819211B _fontsHandler;
    private CssData _defaultCssData;
    private RImage _loadImage;
    private RImage _errorImage;
    public CssData DefaultCssData { get; }
    public CssData get_DefaultCssData();
    public RColor GetColor(string colorName);
    public RPen GetPen(RColor color);
    public RBrush GetSolidBrush(RColor color);
    public RBrush GetLinearGradientBrush(RRect rect, RColor color1, RColor color2, double angle);
    public RImage ConvertImage(object image);
    public RImage ImageFromStream(Stream memoryStream);
    public bool IsFontExists(string font);
    public void AddFontFamily(RFontFamily fontFamily);
    public void AddFontFamilyMapping(string fromFamily, string toFamily);
    public RFont GetFont(string family, double size, RFontStyle style);
    public RImage GetLoadingImage();
    public RImage GetLoadingFailedImage();
    public object GetClipboardDataObject(string html, string plainText);
    public void SetToClipboard(string text);
    public void SetToClipboard(string html, string plainText);
    public void SetToClipboard(RImage image);
    public RContextMenu GetContextMenu();
    public void SaveToFile(RImage image, string name, string extension, RControl control);
    internal RFont CreateFont(string family, double size, RFontStyle style);
    internal RFont CreateFont(RFontFamily family, double size, RFontStyle style);
    protected abstract virtual RColor GetColorInt(string colorName);
    protected abstract virtual RPen CreatePen(RColor color);
    protected abstract virtual RBrush CreateSolidBrush(RColor color);
    protected abstract virtual RBrush CreateLinearGradientBrush(RRect rect, RColor color1, RColor color2, double angle);
    protected abstract virtual RImage ConvertImageInt(object image);
    protected abstract virtual RImage ImageFromStreamInt(Stream memoryStream);
    protected abstract virtual RFont CreateFontInt(string family, double size, RFontStyle style);
    protected abstract virtual RFont CreateFontInt(RFontFamily family, double size, RFontStyle style);
    protected virtual object GetClipboardDataObjectInt(string html, string plainText);
    protected virtual void SetToClipboardInt(string text);
    protected virtual void SetToClipboardInt(string html, string plainText);
    protected virtual void SetToClipboardInt(RImage image);
    protected virtual RContextMenu CreateContextMenuInt();
    protected virtual void SaveToFileInt(RImage image, string name, string extension, RControl control);
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RBrush : object {
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RContextMenu : object {
    public int ItemsCount { get; }
    public abstract virtual int get_ItemsCount();
    public abstract virtual void AddDivider();
    public abstract virtual void AddItem(string text, bool enabled, EventHandler onClick);
    public abstract virtual void RemoveLastDivider();
    public abstract virtual void Show(RControl parent, RPoint location);
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RControl : object {
    private RAdapter _adapter;
    public RAdapter Adapter { get; }
    public bool LeftMouseButton { get; }
    public bool RightMouseButton { get; }
    public RPoint MouseLocation { get; }
    protected RControl(RAdapter adapter);
    public RAdapter get_Adapter();
    public abstract virtual bool get_LeftMouseButton();
    public abstract virtual bool get_RightMouseButton();
    public abstract virtual RPoint get_MouseLocation();
    public abstract virtual void SetCursorDefault();
    public abstract virtual void SetCursorHand();
    public abstract virtual void SetCursorIBeam();
    public abstract virtual void DoDragDropCopy(object dragDropData);
    public abstract virtual void MeasureString(string str, RFont font, double maxWidth, Int32& charFit, Double& charFitWidth);
    public abstract virtual void Invalidate();
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RFont : object {
    public double Size { get; }
    public double Height { get; }
    public double UnderlineOffset { get; }
    public double LeftPadding { get; }
    public abstract virtual double get_Size();
    public abstract virtual double get_Height();
    public abstract virtual double get_UnderlineOffset();
    public abstract virtual double get_LeftPadding();
    public abstract virtual double GetWhitespaceWidth(RGraphics graphics);
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RFontFamily : object {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RGraphics : object {
    protected RAdapter _adapter;
    protected Stack`1<RRect> _clipStack;
    private Stack`1<RRect> _suspendedClips;
    protected RGraphics(RAdapter adapter, RRect initialClip);
    public RPen GetPen(RColor color);
    public RBrush GetSolidBrush(RColor color);
    public RBrush GetLinearGradientBrush(RRect rect, RColor color1, RColor color2, double angle);
    public RRect GetClip();
    public abstract virtual void PopClip();
    public abstract virtual void PushClip(RRect rect);
    public abstract virtual void PushClipExclude(RRect rect);
    public void SuspendClipping();
    public void ResumeClipping();
    public abstract virtual object SetAntiAliasSmoothingMode();
    public abstract virtual void ReturnPreviousSmoothingMode(object prevMode);
    public abstract virtual RBrush GetTextureBrush(RImage image, RRect dstRect, RPoint translateTransformLocation);
    public abstract virtual RGraphicsPath GetGraphicsPath();
    public abstract virtual RSize MeasureString(string str, RFont font);
    public abstract virtual void MeasureString(string str, RFont font, double maxWidth, Int32& charFit, Double& charFitWidth);
    public abstract virtual void DrawString(string str, RFont font, RColor color, RPoint point, RSize size, bool rtl);
    public abstract virtual void DrawLine(RPen pen, double x1, double y1, double x2, double y2);
    public abstract virtual void DrawRectangle(RPen pen, double x, double y, double width, double height);
    public abstract virtual void DrawRectangle(RBrush brush, double x, double y, double width, double height);
    public abstract virtual void DrawImage(RImage image, RRect destRect, RRect srcRect);
    public abstract virtual void DrawImage(RImage image, RRect destRect);
    public abstract virtual void DrawPath(RPen pen, RGraphicsPath path);
    public abstract virtual void DrawPath(RBrush brush, RGraphicsPath path);
    public abstract virtual void DrawPolygon(RBrush brush, RPoint[] points);
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RGraphicsPath : object {
    public abstract virtual void Start(double x, double y);
    public abstract virtual void LineTo(double x, double y);
    public abstract virtual void ArcTo(double x, double y, double size, Corner corner);
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RImage : object {
    public double Width { get; }
    public double Height { get; }
    public abstract virtual double get_Width();
    public abstract virtual double get_Height();
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDevHtmlRenderer.Adapters.RPen : object {
    public double Width { get; public set; }
    unknown RDashStyle DashStyle {public set; }
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual void set_DashStyle(RDashStyle value);
}
public class TheArtOfDevHtmlRenderer.Core.CssData : object {
    private static List`1<CssBlock> _emptyArray;
    private Dictionary`2<string, Dictionary`2<string, List`1<CssBlock>>> _mediaBlocks;
    internal IDictionary`2<string, Dictionary`2<string, List`1<CssBlock>>> MediaBlocks { get; }
    private static CssData();
    public static CssData Parse(RAdapter adapter, string stylesheet, bool combineWithDefault);
    internal IDictionary`2<string, Dictionary`2<string, List`1<CssBlock>>> get_MediaBlocks();
    public bool ContainsCssBlock(string className, string media);
    public IEnumerable`1<CssBlock> GetCssBlock(string className, string media);
    public void AddCssBlock(string media, CssBlock cssBlock);
    public void Combine(CssData other);
    public CssData Clone();
}
public class TheArtOfDevHtmlRenderer.Core.Entities.CssBlock : object {
    private string _class;
    private Dictionary`2<string, string> _properties;
    private List`1<CssBlockSelectorItem> _selectors;
    private bool _hover;
    public string Class { get; }
    public List`1<CssBlockSelectorItem> Selectors { get; }
    public IDictionary`2<string, string> Properties { get; }
    public bool Hover { get; }
    public CssBlock(string class, Dictionary`2<string, string> properties, List`1<CssBlockSelectorItem> selectors, bool hover);
    public string get_Class();
    public List`1<CssBlockSelectorItem> get_Selectors();
    public IDictionary`2<string, string> get_Properties();
    public bool get_Hover();
    public void Merge(CssBlock other);
    public CssBlock Clone();
    public bool Equals(CssBlock other);
    public bool EqualsSelector(CssBlock other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class TheArtOfDevHtmlRenderer.Core.Entities.CssBlockSelectorItem : ValueType {
    private string _class;
    private bool _directParent;
    public string Class { get; }
    public bool DirectParent { get; }
    public CssBlockSelectorItem(string class, bool directParent);
    public string get_Class();
    public bool get_DirectParent();
    public virtual string ToString();
}
public enum TheArtOfDevHtmlRenderer.Core.Entities.HtmlGenerationStyle : Enum {
    public int value__;
    public static HtmlGenerationStyle None;
    public static HtmlGenerationStyle Inline;
    public static HtmlGenerationStyle InHeader;
}
public class TheArtOfDevHtmlRenderer.Core.Entities.HtmlImageLoadCallback : MulticastDelegate {
    public HtmlImageLoadCallback(object object, IntPtr method);
    public virtual void Invoke(string path, object image, RRect imageRectangle);
    public virtual IAsyncResult BeginInvoke(string path, object image, RRect imageRectangle, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class TheArtOfDevHtmlRenderer.Core.Entities.HtmlImageLoadEventArgs : EventArgs {
    private bool _handled;
    private string _src;
    private Dictionary`2<string, string> _attributes;
    private HtmlImageLoadCallback _callback;
    public string Src { get; }
    public Dictionary`2<string, string> Attributes { get; }
    public bool Handled { get; public set; }
    internal HtmlImageLoadEventArgs(string src, Dictionary`2<string, string> attributes, HtmlImageLoadCallback callback);
    public string get_Src();
    public Dictionary`2<string, string> get_Attributes();
    public bool get_Handled();
    public void set_Handled(bool value);
    public void Callback();
    public void Callback(string path);
    public void Callback(string path, double x, double y, double width, double height);
    public void Callback(object image);
    public void Callback(object image, double x, double y, double width, double height);
}
public class TheArtOfDevHtmlRenderer.Core.Entities.HtmlLinkClickedEventArgs : EventArgs {
    private string _link;
    private Dictionary`2<string, string> _attributes;
    private bool _handled;
    public string Link { get; }
    public Dictionary`2<string, string> Attributes { get; }
    public bool Handled { get; public set; }
    public HtmlLinkClickedEventArgs(string link, Dictionary`2<string, string> attributes);
    public string get_Link();
    public Dictionary`2<string, string> get_Attributes();
    public bool get_Handled();
    public void set_Handled(bool value);
    public virtual string ToString();
}
public class TheArtOfDevHtmlRenderer.Core.Entities.HtmlLinkClickedException : Exception {
    public HtmlLinkClickedException(string message);
    public HtmlLinkClickedException(string message, Exception innerException);
}
public class TheArtOfDevHtmlRenderer.Core.Entities.HtmlRefreshEventArgs : EventArgs {
    private bool _layout;
    public bool Layout { get; }
    public HtmlRefreshEventArgs(bool layout);
    public bool get_Layout();
    public virtual string ToString();
}
public class TheArtOfDevHtmlRenderer.Core.Entities.HtmlRenderErrorEventArgs : EventArgs {
    private HtmlRenderErrorType _type;
    private string _message;
    private Exception _exception;
    public HtmlRenderErrorType Type { get; }
    public string Message { get; }
    public Exception Exception { get; }
    public HtmlRenderErrorEventArgs(HtmlRenderErrorType type, string message, Exception exception);
    public HtmlRenderErrorType get_Type();
    public string get_Message();
    public Exception get_Exception();
    public virtual string ToString();
}
public enum TheArtOfDevHtmlRenderer.Core.Entities.HtmlRenderErrorType : Enum {
    public int value__;
    public static HtmlRenderErrorType General;
    public static HtmlRenderErrorType CssParsing;
    public static HtmlRenderErrorType HtmlParsing;
    public static HtmlRenderErrorType Image;
    public static HtmlRenderErrorType Paint;
    public static HtmlRenderErrorType Layout;
    public static HtmlRenderErrorType KeyboardMouse;
    public static HtmlRenderErrorType Iframe;
    public static HtmlRenderErrorType ContextMenu;
}
public class TheArtOfDevHtmlRenderer.Core.Entities.HtmlScrollEventArgs : EventArgs {
    private RPoint _location;
    public double X { get; }
    public double Y { get; }
    public HtmlScrollEventArgs(RPoint location);
    public double get_X();
    public double get_Y();
    public virtual string ToString();
}
public class TheArtOfDevHtmlRenderer.Core.Entities.HtmlStylesheetLoadEventArgs : EventArgs {
    private string _src;
    private Dictionary`2<string, string> _attributes;
    private string _setSrc;
    private string _setStyleSheet;
    private CssData _setStyleSheetData;
    public string Src { get; }
    public Dictionary`2<string, string> Attributes { get; }
    public string SetSrc { get; public set; }
    public string SetStyleSheet { get; public set; }
    public CssData SetStyleSheetData { get; public set; }
    internal HtmlStylesheetLoadEventArgs(string src, Dictionary`2<string, string> attributes);
    public string get_Src();
    public Dictionary`2<string, string> get_Attributes();
    public string get_SetSrc();
    public void set_SetSrc(string value);
    public string get_SetStyleSheet();
    public void set_SetStyleSheet(string value);
    public CssData get_SetStyleSheetData();
    public void set_SetStyleSheetData(CssData value);
}
public class TheArtOfDevHtmlRenderer.Core.Entities.LinkElementData`1 : object {
    private string _id;
    private string _href;
    private T _rectangle;
    public string Id { get; }
    public string Href { get; }
    public T Rectangle { get; }
    public bool IsAnchor { get; }
    public string AnchorId { get; }
    public LinkElementData`1(string id, string href, T rectangle);
    public string get_Id();
    public string get_Href();
    public T get_Rectangle();
    public bool get_IsAnchor();
    public string get_AnchorId();
    public virtual string ToString();
}
public class TheArtOfDevHtmlRenderer.Core.Handlers.DownloadFileAsyncCallback : MulticastDelegate {
    public DownloadFileAsyncCallback(object object, IntPtr method);
    public virtual void Invoke(Uri imageUri, string filePath, Exception error, bool canceled);
    public virtual IAsyncResult BeginInvoke(Uri imageUri, string filePath, Exception error, bool canceled, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class TheArtOfDevHtmlRenderer.Core.HtmlContainerInt : object {
    private RAdapter _adapter;
    private G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617 _cssParser;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 _root;
    private List`1<G3104042D0730260421171F03110019360406050B36041C65260D17174525070C40110E18023A2303192E3F0A0F0A> _hoverBoxes;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C146632090D093011050E023D25070609171B _selectionHandler;
    private G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B3621031602192B08060000 _imageDownloader;
    private RColor _selectionForeColor;
    private RColor _selectionBackColor;
    private CssData _cssData;
    private bool _isSelectionEnabled;
    private bool _isContextMenuEnabled;
    private bool _avoidGeometryAntialias;
    private bool _avoidAsyncImagesLoading;
    private bool _avoidImagesLateLoading;
    private bool _loadComplete;
    private RPoint _location;
    private RSize _maxSize;
    private RPoint _scrollOffset;
    private RSize _actualSize;
    private int _marginTop;
    private int _marginBottom;
    private int _marginLeft;
    private int _marginRight;
    [CompilerGeneratedAttribute]
private EventHandler LoadComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlLinkClickedEventArgs> LinkClicked;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlRefreshEventArgs> Refresh;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlScrollEventArgs> ScrollChange;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlRenderErrorEventArgs> RenderError;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlStylesheetLoadEventArgs> StylesheetLoad;
    [CompilerGeneratedAttribute]
private EventHandler`1<HtmlImageLoadEventArgs> ImageLoad;
    [CompilerGeneratedAttribute]
private RSize <PageSize>k__BackingField;
    internal RAdapter Adapter { get; }
    internal G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617 CssParser { get; }
    public CssData CssData { get; }
    public bool AvoidGeometryAntialias { get; public set; }
    public bool AvoidAsyncImagesLoading { get; public set; }
    public bool AvoidImagesLateLoading { get; public set; }
    public bool IsSelectionEnabled { get; public set; }
    public bool IsContextMenuEnabled { get; public set; }
    public RPoint ScrollOffset { get; public set; }
    public RPoint Location { get; public set; }
    public RSize MaxSize { get; public set; }
    public RSize ActualSize { get; public set; }
    public RSize PageSize { get; public set; }
    public int MarginTop { get; public set; }
    public int MarginBottom { get; public set; }
    public int MarginLeft { get; public set; }
    public int MarginRight { get; public set; }
    public string SelectedText { get; }
    public string SelectedHtml { get; }
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 Root { get; }
    internal RColor SelectionForeColor { get; internal set; }
    internal RColor SelectionBackColor { get; internal set; }
    public HtmlContainerInt(RAdapter adapter);
    internal RAdapter get_Adapter();
    internal G3104042D0730260421171F03110019360406050B36041C65260D1717453109131D3C4F2D143B310D131F3617 get_CssParser();
    [CompilerGeneratedAttribute]
public void add_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Refresh(EventHandler`1<HtmlRefreshEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Refresh(EventHandler`1<HtmlRefreshEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ScrollChange(EventHandler`1<HtmlScrollEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ScrollChange(EventHandler`1<HtmlScrollEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    public CssData get_CssData();
    public bool get_AvoidGeometryAntialias();
    public void set_AvoidGeometryAntialias(bool value);
    public bool get_AvoidAsyncImagesLoading();
    public void set_AvoidAsyncImagesLoading(bool value);
    public bool get_AvoidImagesLateLoading();
    public void set_AvoidImagesLateLoading(bool value);
    public bool get_IsSelectionEnabled();
    public void set_IsSelectionEnabled(bool value);
    public bool get_IsContextMenuEnabled();
    public void set_IsContextMenuEnabled(bool value);
    public RPoint get_ScrollOffset();
    public void set_ScrollOffset(RPoint value);
    public RPoint get_Location();
    public void set_Location(RPoint value);
    public RSize get_MaxSize();
    public void set_MaxSize(RSize value);
    public RSize get_ActualSize();
    public void set_ActualSize(RSize value);
    [CompilerGeneratedAttribute]
public RSize get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(RSize value);
    public int get_MarginTop();
    public void set_MarginTop(int value);
    public int get_MarginBottom();
    public void set_MarginBottom(int value);
    public int get_MarginLeft();
    public void set_MarginLeft(int value);
    public int get_MarginRight();
    public void set_MarginRight(int value);
    public void SetMargins(int value);
    public string get_SelectedText();
    public string get_SelectedHtml();
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 get_Root();
    internal RColor get_SelectionForeColor();
    internal void set_SelectionForeColor(RColor value);
    internal RColor get_SelectionBackColor();
    internal void set_SelectionBackColor(RColor value);
    public void SetHtml(string htmlSource, CssData baseCssData);
    public void Clear();
    public void ClearSelection();
    public string GetHtml(HtmlGenerationStyle styleGen);
    public string GetAttributeAt(RPoint location, string attribute);
    public List`1<LinkElementData`1<RRect>> GetLinks();
    public string GetLinkAt(RPoint location);
    public Nullable`1<RRect> GetElementRectangle(string elementId);
    public void PerformLayout(RGraphics g);
    public void PerformPaint(RGraphics g);
    public void HandleMouseDown(RControl parent, RPoint location);
    public void HandleMouseUp(RControl parent, RPoint location, RMouseEvent e);
    public void HandleMouseDoubleClick(RControl parent, RPoint location);
    public void HandleMouseMove(RControl parent, RPoint location);
    public void HandleMouseLeave(RControl parent);
    public void HandleKeyDown(RControl parent, RKeyEvent e);
    internal void RaiseHtmlStylesheetLoadEvent(HtmlStylesheetLoadEventArgs args);
    internal void RaiseHtmlImageLoadEvent(HtmlImageLoadEventArgs args);
    public void RequestRefresh(bool layout);
    internal void ReportError(HtmlRenderErrorType type, string message, Exception exception);
    internal void HandleLinkClicked(RControl parent, RPoint location, G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 link);
    internal void AddHoverBox(G3104042D0730260421171F03110019360406050B36041C65260D17174525070C401A121D252719 box, CssBlock block);
    internal G3104042D0730260421171F03110019360406050B36041C65260D17174529090F0A35041C14662801000B3621031602192B08060000 GetImageDownloader();
    public sealed virtual void Dispose();
    private RPoint OffsetByScroll(RPoint location);
    private bool IsMouseInContainer(RPoint location);
    private void Dispose(bool all);
}
public static class TheArtOfDevHtmlRenderer.Core.HtmlRendererUtils : object {
    public static RSize MeasureHtmlByRestrictions(RGraphics g, HtmlContainerInt htmlContainer, RSize minSize, RSize maxSize);
    public static RSize Layout(RGraphics g, HtmlContainerInt htmlContainer, RSize size, RSize minSize, RSize maxSize, bool autoSize, bool autoSizeHeightOnly);
}
public static class TheArtOfDevHtmlRenderer.Core.Utils.ArgChecker : object {
    public static void AssertIsTrue(bool condition, string message);
    public static void AssertArgNotNull(object arg, string argName);
    public static void AssertArgNotNull(IntPtr arg, string argName);
    public static void AssertArgNotNullOrEmpty(string arg, string argName);
    public static T AssertArgOfType(object arg, string argName);
    public static void AssertFileExist(string arg, string argName);
}
public class TheArtOfDevHtmlRenderer.WinForms.Adapters.GraphicsAdapter : RGraphics {
    private static Int32[] _charFit;
    private static Int32[] _charFitWidth;
    private static CharacterRange[] _characterRanges;
    private static StringFormat _stringFormat;
    private static StringFormat _stringFormat2;
    private Graphics _g;
    private bool _useGdiPlusTextRendering;
    private IntPtr _hdc;
    private bool _releaseGraphics;
    private bool _setRtl;
    private static GraphicsAdapter();
    public GraphicsAdapter(Graphics g, bool useGdiPlusTextRendering, bool releaseGraphics);
    public virtual void PopClip();
    public virtual void PushClip(RRect rect);
    public virtual void PushClipExclude(RRect rect);
    public virtual object SetAntiAliasSmoothingMode();
    public virtual void ReturnPreviousSmoothingMode(object prevMode);
    public virtual RSize MeasureString(string str, RFont font);
    public virtual void MeasureString(string str, RFont font, double maxWidth, Int32& charFit, Double& charFitWidth);
    public virtual void DrawString(string str, RFont font, RColor color, RPoint point, RSize size, bool rtl);
    public virtual RBrush GetTextureBrush(RImage image, RRect dstRect, RPoint translateTransformLocation);
    public virtual RGraphicsPath GetGraphicsPath();
    public virtual void Dispose();
    public virtual void DrawLine(RPen pen, double x1, double y1, double x2, double y2);
    public virtual void DrawRectangle(RPen pen, double x, double y, double width, double height);
    public virtual void DrawRectangle(RBrush brush, double x, double y, double width, double height);
    public virtual void DrawImage(RImage image, RRect destRect, RRect srcRect);
    public virtual void DrawImage(RImage image, RRect destRect);
    public virtual void DrawPath(RPen pen, RGraphicsPath path);
    public virtual void DrawPath(RBrush brush, RGraphicsPath path);
    public virtual void DrawPolygon(RBrush brush, RPoint[] points);
    private void ReleaseHdc();
    private void InitHdc();
    private void SetFont(RFont font);
    private void SetTextColor(Color color);
    private void SetRtlAlignGdi(bool rtl);
    private static void DrawTransparentText(IntPtr hdc, string str, RFont font, Point point, Size size, Color color);
    private void SetRtlAlignGdiPlus(bool rtl);
}
public class TheArtOfDevHtmlRenderer.WinForms.HtmlContainer : object {
    private HtmlContainerInt _htmlContainerInt;
    private bool _useGdiPlusTextRendering;
    public HtmlContainerInt HtmlContainerInt { get; }
    public bool UseGdiPlusTextRendering { get; public set; }
    public CssData CssData { get; }
    public bool AvoidGeometryAntialias { get; public set; }
    public bool AvoidAsyncImagesLoading { get; public set; }
    public bool AvoidImagesLateLoading { get; public set; }
    public bool IsSelectionEnabled { get; public set; }
    public bool IsContextMenuEnabled { get; public set; }
    public Point ScrollOffset { get; public set; }
    public PointF Location { get; public set; }
    public SizeF MaxSize { get; public set; }
    public SizeF ActualSize { get; internal set; }
    public string SelectedText { get; }
    public string SelectedHtml { get; }
    public void add_LoadComplete(EventHandler value);
    public void remove_LoadComplete(EventHandler value);
    public void add_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    public void remove_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    public void add_Refresh(EventHandler`1<HtmlRefreshEventArgs> value);
    public void remove_Refresh(EventHandler`1<HtmlRefreshEventArgs> value);
    public void add_ScrollChange(EventHandler`1<HtmlScrollEventArgs> value);
    public void remove_ScrollChange(EventHandler`1<HtmlScrollEventArgs> value);
    public void add_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    public void remove_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    public void add_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    public void remove_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    public void add_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    public void remove_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    public HtmlContainerInt get_HtmlContainerInt();
    public bool get_UseGdiPlusTextRendering();
    public void set_UseGdiPlusTextRendering(bool value);
    public CssData get_CssData();
    public bool get_AvoidGeometryAntialias();
    public void set_AvoidGeometryAntialias(bool value);
    public bool get_AvoidAsyncImagesLoading();
    public void set_AvoidAsyncImagesLoading(bool value);
    public bool get_AvoidImagesLateLoading();
    public void set_AvoidImagesLateLoading(bool value);
    public bool get_IsSelectionEnabled();
    public void set_IsSelectionEnabled(bool value);
    public bool get_IsContextMenuEnabled();
    public void set_IsContextMenuEnabled(bool value);
    public Point get_ScrollOffset();
    public void set_ScrollOffset(Point value);
    public PointF get_Location();
    public void set_Location(PointF value);
    public SizeF get_MaxSize();
    public void set_MaxSize(SizeF value);
    public SizeF get_ActualSize();
    internal void set_ActualSize(SizeF value);
    public string get_SelectedText();
    public string get_SelectedHtml();
    public void ClearSelection();
    public void SetHtml(string htmlSource, CssData baseCssData);
    public string GetHtml(HtmlGenerationStyle styleGen);
    public string GetAttributeAt(Point location, string attribute);
    public List`1<LinkElementData`1<RectangleF>> GetLinks();
    public string GetLinkAt(Point location);
    public Nullable`1<RectangleF> GetElementRectangle(string elementId);
    public void PerformLayout(Graphics g);
    public void PerformPaint(Graphics g);
    public void HandleMouseDown(Control parent, MouseEventArgs e);
    public void HandleMouseUp(Control parent, MouseEventArgs e);
    public void HandleMouseDoubleClick(Control parent, MouseEventArgs e);
    public void HandleMouseMove(Control parent, MouseEventArgs e);
    public void HandleMouseLeave(Control parent);
    public void HandleKeyDown(Control parent, KeyEventArgs e);
    public sealed virtual void Dispose();
    private static RMouseEvent CreateMouseEvent(MouseEventArgs e);
    private static RKeyEvent CreateKeyEevent(KeyEventArgs e);
}
public static class TheArtOfDevHtmlRenderer.WinForms.HtmlRender : object {
    public static void AddFontFamily(FontFamily fontFamily);
    public static void AddFontFamilyMapping(string fromFamily, string toFamily);
    public static CssData ParseStyleSheet(string stylesheet, bool combineWithDefault);
    public static SizeF Measure(Graphics g, string html, float maxWidth, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static SizeF MeasureGdiPlus(Graphics g, string html, float maxWidth, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static SizeF Render(Graphics g, string html, float left, float top, float maxWidth, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static SizeF Render(Graphics g, string html, PointF location, SizeF maxSize, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static SizeF RenderGdiPlus(Graphics g, string html, float left, float top, float maxWidth, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static SizeF RenderGdiPlus(Graphics g, string html, PointF location, SizeF maxSize, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static Metafile RenderToMetafile(string html, float left, float top, float maxWidth, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static void RenderToImage(Image image, string html, PointF location, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static void RenderToImage(Image image, string html, PointF location, SizeF maxSize, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static Image RenderToImage(string html, Size size, Color backgroundColor, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static Image RenderToImage(string html, int maxWidth, int maxHeight, Color backgroundColor, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static Image RenderToImage(string html, Size minSize, Size maxSize, Color backgroundColor, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static Image RenderToImageGdiPlus(string html, Size size, TextRenderingHint textRenderingHint, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static Image RenderToImageGdiPlus(string html, int maxWidth, int maxHeight, TextRenderingHint textRenderingHint, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static Image RenderToImageGdiPlus(string html, Size minSize, Size maxSize, TextRenderingHint textRenderingHint, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    private static SizeF Measure(Graphics g, string html, float maxWidth, CssData cssData, bool useGdiPlusTextRendering, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    private static Size MeasureHtmlByRestrictions(HtmlContainer htmlContainer, Size minSize, Size maxSize);
    private static SizeF RenderClip(Graphics g, string html, PointF location, SizeF maxSize, CssData cssData, bool useGdiPlusTextRendering, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    private static SizeF RenderHtml(Graphics g, string html, PointF location, SizeF maxSize, CssData cssData, bool useGdiPlusTextRendering, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    private static void CopyBufferToImage(IntPtr memoryHdc, Image image);
}
public static class TheArtOfDevHtmlRenderer.WinForms.MetafileExtensions : object {
    public static void SaveAsEmf(Metafile me, string fileName);
    public static int GetEnhMetaFileBits(int hemf, int cbBuffer, Byte[] lpbBuffer);
    public static bool DeleteEnhMetaFile(int hemfbitHandle);
}
