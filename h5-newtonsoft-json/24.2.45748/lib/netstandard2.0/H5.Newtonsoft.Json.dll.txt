[FlagsAttribute]
public enum Newtonsoft.Json.DefaultValueHandling : Enum {
    public int value__;
    public static DefaultValueHandling Include;
    public static DefaultValueHandling Ignore;
    public static DefaultValueHandling Populate;
    public static DefaultValueHandling IgnoreAndPopulate;
}
public enum Newtonsoft.Json.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
[AttributeUsageAttribute]
public class Newtonsoft.Json.JsonConstructorAttribute : Attribute {
}
[ExternalAttribute]
public static class Newtonsoft.Json.JsonConvert : object {
    [UnboxAttribute("False")]
public static string SerializeObject(object value);
    [UnboxAttribute("False")]
public static string SerializeObject(object value, Formatting formatting);
    [UnboxAttribute("False")]
public static string SerializeObject(object value, JsonSerializerSettings settings);
    [UnboxAttribute("False")]
[TemplateAttribute("Newtonsoft.Json.JsonConvert.SerializeObject({value}, null, {settings}, false, {type})")]
public static string SerializeObject(object value, Type type, JsonSerializerSettings settings);
    [UnboxAttribute("False")]
public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings);
    [UnboxAttribute("False")]
[TemplateAttribute("Newtonsoft.Json.JsonConvert.SerializeObject({value}, {formatting}, {settings}, false, {type})")]
public static string SerializeObject(object value, Type type, Formatting formatting, JsonSerializerSettings settings);
    public static object DeserializeObject(string value, Type type);
    [TemplateAttribute("Newtonsoft.Json.JsonConvert.DeserializeObject({value}, System.Object, {settings})")]
public static object DeserializeObject(string value, JsonSerializerSettings settings);
    [TemplateAttribute("Newtonsoft.Json.JsonConvert.DeserializeObject({value}, {T})")]
public static T DeserializeObject(string value);
    [TemplateAttribute("Newtonsoft.Json.JsonConvert.DeserializeObject({value}, H5.getType({anonymousTypeObject}))")]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject);
    [TemplateAttribute("Newtonsoft.Json.JsonConvert.DeserializeObject({value}, H5.getType({anonymousTypeObject}), {settings})")]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject, JsonSerializerSettings settings);
    [TemplateAttribute("Newtonsoft.Json.JsonConvert.DeserializeObject({value}, {T}, {settings})")]
public static T DeserializeObject(string value, JsonSerializerSettings settings);
    public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings);
    public static void PopulateObject(string value, object target);
    public static void PopulateObject(string value, object target, JsonSerializerSettings settings);
}
public class Newtonsoft.Json.JsonException : Exception {
    public JsonException(string message);
    public JsonException(string message, Exception innerException);
}
[AttributeUsageAttribute]
public class Newtonsoft.Json.JsonIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute]
public class Newtonsoft.Json.JsonPropertyAttribute : Attribute {
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<Required> _required;
    internal Nullable`1<int> _order;
    [DebuggerBrowsableAttribute]
private string <PropertyName>k__BackingField;
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public Required Required { get; public set; }
    public int Order { get; public set; }
    public string PropertyName { get; public set; }
    public JsonPropertyAttribute(string propertyName);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public Required get_Required();
    public void set_Required(Required value);
    public int get_Order();
    public void set_Order(int value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
}
public class Newtonsoft.Json.JsonSerializationException : JsonException {
    public JsonSerializationException(string message);
    public JsonSerializationException(string message, Exception innerException);
}
public class Newtonsoft.Json.JsonSerializerSettings : object {
    internal static NullValueHandling DefaultNullValueHandling;
    internal static TypeNameHandling DefaultTypeNameHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    [DebuggerBrowsableAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    [DebuggerBrowsableAttribute]
private ISerializationBinder <SerializationBinder>k__BackingField;
    public NullValueHandling NullValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public IContractResolver get_ContractResolver();
    public void set_ContractResolver(IContractResolver value);
    public ISerializationBinder get_SerializationBinder();
    public void set_SerializationBinder(ISerializationBinder value);
}
public enum Newtonsoft.Json.NullValueHandling : Enum {
    public int value__;
    public static NullValueHandling Include;
    public static NullValueHandling Ignore;
}
public enum Newtonsoft.Json.ObjectCreationHandling : Enum {
    public int value__;
    public static ObjectCreationHandling Auto;
    public static ObjectCreationHandling Reuse;
    public static ObjectCreationHandling Replace;
}
public enum Newtonsoft.Json.Required : Enum {
    public int value__;
    public static Required Default;
    public static Required AllowNull;
    public static Required Always;
    public static Required DisallowNull;
}
public class Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver : object {
}
public interface Newtonsoft.Json.Serialization.IContractResolver {
}
public interface Newtonsoft.Json.Serialization.ISerializationBinder {
    public abstract virtual Type BindToType(string assemblyName, string typeName);
    public abstract virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
[FlagsAttribute]
public enum Newtonsoft.Json.TypeNameHandling : Enum {
    public int value__;
    public static TypeNameHandling None;
    public static TypeNameHandling Objects;
    public static TypeNameHandling Arrays;
    public static TypeNameHandling All;
    public static TypeNameHandling Auto;
}
