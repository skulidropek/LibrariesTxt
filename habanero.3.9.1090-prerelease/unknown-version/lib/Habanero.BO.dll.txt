public interface Habanero.Base.IDataSetProvider {
    public string IDColumnName { get; }
    public bool RegisterForBusinessObjectPropertyUpdatedEvents { get; public set; }
    [ObsoleteAttribute("Should rather use GetDataView This provides the more generic IBindingListView")]
public abstract virtual DataTable GetDataTable(IUIGrid uiGrid);
    public abstract virtual IBindingListView GetDataView(IUIGrid uiGrid);
    public abstract virtual IBusinessObject Find(Guid objectID);
    [ObsoleteAttribute("This is no longer used use Find(Guid objectID) instead 6/7/2010")]
public abstract virtual IBusinessObject Find(int rowNum);
    [ObsoleteAttribute("This is no longer used use Find(Guid objectID) instead 6/7/2010")]
public abstract virtual IBusinessObject Find(DataRow row);
    public abstract virtual int FindRow(IBusinessObject bo);
    public abstract virtual void UpdateBusinessObjectRowValues(IBusinessObject businessObject);
    public abstract virtual string get_IDColumnName();
    public abstract virtual bool get_RegisterForBusinessObjectPropertyUpdatedEvents();
    public abstract virtual void set_RegisterForBusinessObjectPropertyUpdatedEvents(bool value);
}
public static class Habanero.BO.BOColLoaderHelper : object {
    public static void ClearCurrentCollection(IBusinessObjectCollection col);
    public static void FireRefreshedEvent(IBusinessObjectCollection col);
    public static void Initialise(IRelationship relationship);
    public static bool GetLoading(IBusinessObjectCollection col);
    public static void SetLoading(IBusinessObjectCollection col, bool loading);
}
public class Habanero.BO.BOError : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IBusinessObject <BusinessObject>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ErrorLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public IBusinessObject BusinessObject { get; public set; }
    public ErrorLevel Level { get; private set; }
    public string Message { get; private set; }
    public BOError(string message, ErrorLevel level);
    [CompilerGeneratedAttribute]
public sealed virtual IBusinessObject get_BusinessObject();
    [CompilerGeneratedAttribute]
public void set_BusinessObject(IBusinessObject value);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorLevel get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(ErrorLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
}
public class Habanero.BO.BOHelper : object {
    public static ReadOnlyCollection`1<IBusinessObjectRule> GetBusinessObjectRules(BusinessObject businessObject);
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.BOKey : object {
    private Dictionary`2<string, IBOProp> _props;
    private KeyDef _keyDef;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOKeyEventArgs> Updated;
    public IKeyDef KeyDef { get; }
    public IBOProp Item { get; }
    public IBOProp Item { get; }
    public int Count { get; }
    protected bool IgnoreIfNull { get; }
    protected internal bool IsDirty { get; }
    protected bool IsObjectNew { get; }
    public string KeyName { get; }
    public List`1<IBOProp> SortedValues { get; }
    public bool HasAutoIncrementingProperty { get; }
    internal BOKey(KeyDef lKeyDef);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Updated(EventHandler`1<BOKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Updated(EventHandler`1<BOKeyEventArgs> value);
    public sealed virtual IKeyDef get_KeyDef();
    public sealed virtual IBOProp get_Item(string propName);
    public sealed virtual IBOProp get_Item(int index);
    public virtual void Add(IBOProp boProp);
    protected virtual void BOPropUpdated_Handler(object sender, BOPropEventArgs e);
    protected void FireValueUpdated();
    public sealed virtual bool Contains(string propName);
    public sealed virtual int get_Count();
    protected bool get_IgnoreIfNull();
    internal virtual bool IsDirtyOrNew();
    protected internal bool get_IsDirty();
    protected virtual bool get_IsObjectNew();
    public sealed virtual string get_KeyName();
    public List`1<IBOProp> get_SortedValues();
    public sealed virtual bool get_HasAutoIncrementingProperty();
    public virtual string ToString();
    public virtual string AsString_CurrentValue();
    public virtual string AsString_LastPersistedValue();
    public virtual string AsString_PreviousValue();
    public sealed virtual IBOPropCol GetBOPropCol();
    public static bool op_Equality(BOKey lhs, BOKey rhs);
    public static bool op_Inequality(BOKey lhs, BOKey rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override IEnumerator`1<IBOProp> System.Collections.Generic.IEnumerable<Habanero.Base.IBOProp>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Criteria GetKeyCriteria();
}
public class Habanero.BO.BOMapper : object {
    private IBusinessObject _businessObject;
    public BOMapper(IBusinessObject bo);
    public Dictionary`2<string, string> GetLookupList(string propertyName);
    public IUIDef GetUIDef();
    public IUIDef GetUIDef(string uiDefName);
    public object GetPropertyValueToDisplay(string propertyName);
    private object GetAlternateRelationshipValue(string propertyName);
    private bool IsAlternateRelationshipProp(string propertyName);
    public void SetDisplayPropertyValue(string propertyName, object value);
    public IClassDef GetLookupListClassDef(string propertyName);
}
public class Habanero.BO.BOObjectID : BOPrimaryKey {
    protected IBOProp _objectIDProp;
    protected IBOProp ObjectIDProp { get; }
    public Guid ObjectID { get; }
    internal BOObjectID(PrimaryKeyDef lPrimaryKeyDef);
    public virtual void Add(IBOProp boProp);
    protected IBOProp get_ObjectIDProp();
    public virtual void SetObjectGuidID(Guid id);
    public virtual Guid get_ObjectID();
    public virtual string GetObjectId();
    internal virtual bool IsDirtyOrNew();
    public virtual Guid GetAsGuid();
    public virtual string AsString_CurrentValue();
    public virtual string AsString_PreviousValue();
    public static bool op_Equality(BOObjectID lhs, Guid rhs);
    public static bool op_Inequality(BOObjectID lhs, Guid rhs);
    public static bool op_Equality(BOObjectID lhs, BOObjectID rhs);
    public static bool op_Inequality(BOObjectID lhs, BOObjectID rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Habanero.BO.BOPrimaryKey : BOKey {
    protected Guid _objectID;
    private string _currentValue;
    private string _previousValue;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IBusinessObject <BusinessObject>k__BackingField;
    public bool IsGuidObjectID { get; }
    public bool IsCompositeKey { get; }
    public Guid ObjectID { get; }
    public Guid PreviousObjectID { get; }
    public IBusinessObject BusinessObject { get; public set; }
    internal BOPrimaryKey(PrimaryKeyDef lKeyDef);
    public virtual void SetObjectGuidID(Guid id);
    public virtual string GetObjectId();
    public virtual int GetHashCode();
    protected virtual void BOPropUpdated_Handler(object sender, BOPropEventArgs e);
    internal virtual bool IsDirtyOrNew();
    public static IBOKey GetSuperClassKey(ClassDef subClassDef, BusinessObject subClassObj);
    public virtual Guid GetAsGuid();
    public virtual bool Equals(object obj);
    public sealed virtual bool get_IsGuidObjectID();
    public sealed virtual object GetAsValue();
    public sealed virtual bool get_IsCompositeKey();
    public virtual Guid get_ObjectID();
    public sealed virtual Guid get_PreviousObjectID();
    [CompilerGeneratedAttribute]
public sealed virtual IBusinessObject get_BusinessObject();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BusinessObject(IBusinessObject value);
    public static BOPrimaryKey CreateWithValue(ClassDef classDef, object idValue);
    public static BOPrimaryKey CreateWithValue(Type type, object idValue);
    public virtual string AsString_CurrentValue();
    public virtual string AsString_PreviousValue();
    private bool AllPropValuesAreNonNull();
    private bool AllPropPreviousValuesAreNonNull();
    public string GetPreviousObjectID();
}
public class Habanero.BO.BOProp : object {
    protected static IHabaneroLogger _logger;
    protected object _currentValue;
    protected internal bool _isDirty;
    protected bool _isValid;
    protected IPropDef _propDef;
    protected string _invalidReason;
    protected object _persistedValue;
    protected bool _origValueIsValid;
    protected string _origInvalidReason;
    protected bool _isObjectNew;
    protected object _valueBeforeLastEdit;
    private IBOPropAuthorisation _boPropAuthorisation;
    private bool _loadedPropHasBeenValidated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOPropEventArgs> Updated;
    private BusinessObject _businessObject;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <UpdatesBusinessObjectStatus>k__BackingField;
    public bool UpdatesBusinessObjectStatus { get; public set; }
    public IBusinessObject BusinessObject { get; internal set; }
    public IPropDef PropDef { get; }
    public string PropertyName { get; }
    public string DatabaseFieldName { get; }
    public object Value { get; public set; }
    public object ValueBeforeLastEdit { get; }
    public string PersistedPropertyValueString { get; }
    public string PropertyValueString { get; }
    public object PersistedPropertyValue { get; }
    public bool IsValid { get; }
    public string IsValidMessage { get; }
    public string InvalidReason { get; }
    public bool IsDirty { get; }
    public bool IsObjectNew { get; internal set; }
    public Type PropertyType { get; }
    public string DirtyXml { get; }
    public string DisplayName { get; }
    public object PropertyValueToDisplay { get; }
    public BOProp(IPropDef propDef);
    public BOProp(IPropDef propDef, object propValue);
    private static BOProp();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Updated(EventHandler`1<BOPropEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Updated(EventHandler`1<BOPropEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_UpdatesBusinessObjectStatus();
    [CompilerGeneratedAttribute]
public void set_UpdatesBusinessObjectStatus(bool value);
    public sealed virtual IBusinessObject get_BusinessObject();
    internal void set_BusinessObject(IBusinessObject value);
    public sealed virtual IPropDef get_PropDef();
    public sealed virtual string get_PropertyName();
    public sealed virtual string get_DatabaseFieldName();
    public virtual bool InitialiseProp(object propValue);
    public sealed virtual void Validate();
    protected virtual bool InitialiseProp(object propValue, bool isObjectNew);
    public virtual void ParsePropValue(object valueToParse, Object& returnValue);
    public sealed virtual void RestorePropValue();
    public sealed virtual void BackupPropValue();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public sealed virtual bool CurrentValueEquals(object value);
    private bool CompareValues(object compareToValue, object value);
    private bool PersistedValueEquals(object value);
    protected void RaiseIncorrectTypeException(object value);
    public sealed virtual object get_ValueBeforeLastEdit();
    protected void FireBOPropValueUpdated();
    public virtual string get_PersistedPropertyValueString();
    public virtual string get_PropertyValueString();
    public sealed virtual object get_PersistedPropertyValue();
    public sealed virtual bool get_IsValid();
    public string get_IsValidMessage();
    public sealed virtual string get_InvalidReason();
    public sealed virtual bool get_IsDirty();
    public sealed virtual bool get_IsObjectNew();
    internal void set_IsObjectNew(bool value);
    public sealed virtual Type get_PropertyType();
    public sealed virtual string get_DirtyXml();
    private static string FormatForXML(string text);
    public sealed virtual string get_DisplayName();
    public virtual object get_PropertyValueToDisplay();
    public void SetAuthorisationRules(IBOPropAuthorisation boPropAuthorisation);
    public virtual bool IsEditable(String& message);
    protected virtual bool IsReadable();
    public virtual bool IsReadable(String& message);
    private bool AreReadWriteRulesEditable(String& message);
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.BOPropCol : object {
    private Dictionary`2<string, IBOProp> _boProps;
    public IBOProp Item { get; }
    public string DirtyXml { get; }
    public bool IsDirty { get; }
    public ICollection Values { get; }
    public IEnumerable SortedValues { get; }
    public int Count { get; }
    public bool HasAutoIncrementingField { get; }
    public sealed virtual void Add(IBOProp boProp);
    public sealed virtual void Add(IBOPropCol propCol);
    public sealed virtual void Remove(string propName);
    public sealed virtual bool Contains(string propName);
    public sealed virtual IBOProp get_Item(string propName);
    public sealed virtual string get_DirtyXml();
    public sealed virtual bool get_IsDirty();
    public sealed virtual void RestorePropertyValues();
    public sealed virtual void BackupPropertyValues();
    public sealed virtual bool IsValid(String& invalidReason);
    public sealed virtual bool IsValid(IList`1& errors);
    public sealed virtual ICollection get_Values();
    public sealed virtual IEnumerable get_SortedValues();
    private sealed virtual override IEnumerator`1<IBOProp> System.Collections.Generic.IEnumerable<Habanero.Base.IBOProp>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_HasAutoIncrementingField();
}
public class Habanero.BO.BOPropertyMapper : object {
    private IBusinessObject _businessObject;
    protected IBOProp _property;
    private BOPropertyMapper _childBoPropertyMapper;
    private BORelationshipMapper _relationshipPathMapper;
    private ISingleRelationship _childRelationship;
    private static string RELATIONSHIP_SEPARATOR;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    public BOPropertyMapper ChildBoPropertyMapper { get; }
    public string PropertyName { get; private set; }
    public IBOProp Property { get; private set; }
    public IBusinessObject BusinessObject { get; public set; }
    public string InvalidReason { get; }
    public BOPropertyMapper(string propertyName);
    public BOPropertyMapper get_ChildBoPropertyMapper();
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    public IBOProp get_Property();
    private void set_Property(IBOProp value);
    public sealed virtual IBusinessObject get_BusinessObject();
    public void set_BusinessObject(IBusinessObject value);
    private void UpdateChildProperty();
    private void RegisterForChildRelationshipEvents();
    private void DeRegisterForChildRelationshipEvents();
    private void ChildProperty_OnRelatedBusinessObjectChanged(object sender, EventArgs e);
    private void UpdateChildPropertyBO();
    private void FirePropertyChanged();
    public sealed virtual void SetPropertyValue(object propValue);
    private void CheckBusinessObjectSet(string methodName);
    public sealed virtual object GetPropertyValue();
    public sealed virtual string get_InvalidReason();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(object sender, EventArgs e);
}
public class Habanero.BO.BOPropLookupList : BOProp {
    private object _propValueWhenLookupListDisplayValueLastCalled;
    private string _displayValueWhenLookupListDisplayValueLastCalled;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Loading>k__BackingField;
    public object PropertyValueToDisplay { get; }
    protected bool Loading { get; protected set; }
    public BOPropLookupList(IPropDef propDef);
    internal BOPropLookupList(IPropDef propDef, object propValue);
    private static void CheckPropDefHasLookupList(IPropDef propDef);
    protected virtual bool InitialiseProp(object propValue, bool isObjectNew);
    public virtual void ParsePropValue(object valueToParse, Object& returnValue);
    public virtual object get_PropertyValueToDisplay();
    [CompilerGeneratedAttribute]
protected bool get_Loading();
    [CompilerGeneratedAttribute]
protected void set_Loading(bool value);
    internal IBusinessObject GetBusinessObjectForProp(IClassDef classDef);
    public IBusinessObject GetBusinessObjectForProp();
}
public static class Habanero.BO.BOPropMapperFactory : object {
    private static string RELATIONSHIP_SEPARATOR;
    public static IBOPropertyMapper CreateMapper(IBusinessObject businessObject, string propertyName);
    private static bool IsReflectiveProp(string propertyName);
}
public class Habanero.BO.BORegistry : object {
    private static IDataAccessor _dataAccessor;
    private static object _lockObject;
    private static IBusinessObjectManager _businessObjectManager;
    public static IDataAccessor DataAccessor { get; public set; }
    public static IBusinessObjectManager BusinessObjectManager { get; public set; }
    private static BORegistry();
    public static IDataAccessor get_DataAccessor();
    public static void set_DataAccessor(IDataAccessor value);
    public static IBusinessObjectManager get_BusinessObjectManager();
    public static void set_BusinessObjectManager(IBusinessObjectManager value);
}
public class Habanero.BO.BORelationshipMapper : object {
    private IBusinessObject _businessObject;
    private IRelationship _relationship;
    private BORelationshipMapper _childBoRelationshipMapper;
    private BORelationshipMapper _localBoRelationshipMapper;
    private ISingleRelationship _childRelationship;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler RelationshipChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RelationshipName>k__BackingField;
    public string RelationshipName { get; private set; }
    public IRelationship Relationship { get; private set; }
    public IBusinessObject BusinessObject { get; public set; }
    public BORelationshipMapper(string relationshipName);
    [CompilerGeneratedAttribute]
public void add_RelationshipChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RelationshipChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public string get_RelationshipName();
    [CompilerGeneratedAttribute]
private void set_RelationshipName(string value);
    public IRelationship get_Relationship();
    private void set_Relationship(IRelationship value);
    public IBusinessObject get_BusinessObject();
    public void set_BusinessObject(IBusinessObject value);
    private void UpdateChildRelationship();
    private void RegisterForChildRelationshipEvents();
    private void DeRegisterForChildRelationshipEvents();
    private void ChildRelationship_OnRelatedBusinessObjectChanged(object sender, EventArgs e);
    private void UpdateChildRelationshipBO();
    private void FireRelationshipChanged();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(object sender, EventArgs e);
}
public class Habanero.BO.BOSequenceNumber : BusinessObject {
    private static string _tableName;
    private static object _loadClassDefLock;
    public string NumberType { get; public set; }
    public Nullable`1<long> SequenceNumber { get; public set; }
    private static BOSequenceNumber();
    public virtual string get_NumberType();
    public virtual void set_NumberType(string value);
    public virtual Nullable`1<long> get_SequenceNumber();
    public virtual void set_SequenceNumber(Nullable`1<long> value);
    internal static void LoadNumberGenClassDef();
    internal static void LoadNumberGenClassDef(string tableName);
}
public class Habanero.BO.BOStatus : object {
    private BusinessObject _bo;
    private Statuses _flagState;
    public bool IsNew { get; internal set; }
    public bool IsDeleted { get; internal set; }
    public bool IsEditing { get; internal set; }
    public bool IsDirty { get; }
    public string IsValidMessage { get; }
    public IBusinessObject BusinessObject { get; internal set; }
    public BOStatus(BusinessObject bo);
    public sealed virtual bool get_IsNew();
    internal void set_IsNew(bool value);
    public sealed virtual bool get_IsDeleted();
    internal void set_IsDeleted(bool value);
    public sealed virtual bool get_IsEditing();
    internal void set_IsEditing(bool value);
    public sealed virtual bool get_IsDirty();
    public sealed virtual bool IsValid(String& message);
    public sealed virtual bool IsValid(IList`1& errors);
    public sealed virtual bool IsValid();
    public sealed virtual string get_IsValidMessage();
    public sealed virtual IBusinessObject get_BusinessObject();
    internal void set_BusinessObject(IBusinessObject value);
    public sealed virtual bool HasWarnings(IList`1& errors);
    private bool GetBOFlagValue(Statuses objFlag);
    internal void SetBOFlagValue(Statuses flag, bool bValue);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Habanero.BO.Broker : object {
    public static T GetBusinessObject(IPrimaryKey primaryKey);
    public static IBusinessObject GetBusinessObject(IClassDef classDef, IPrimaryKey primaryKey);
    public static T GetBusinessObject(Criteria criteria);
    public static IBusinessObject GetBusinessObject(IClassDef classDef, Criteria criteria);
    public static T GetBusinessObject(ISelectQuery selectQuery);
    public static IBusinessObject GetBusinessObject(IClassDef classDef, ISelectQuery selectQuery);
    public static T GetBusinessObject(string criteriaString);
    public static IBusinessObject GetBusinessObject(IClassDef classDef, string criteriaString);
    public static T GetRelatedBusinessObject(SingleRelationship`1<T> relationship);
    public static IBusinessObject GetRelatedBusinessObject(ISingleRelationship relationship);
    public static BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria);
    public static BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString);
    public static IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria);
    public static BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria, IOrderCriteria orderCriteria);
    public static BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString, string orderCriteria);
    public static BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria, OrderCriteria orderCriteria, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public static BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString, string orderCriteriaString, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public static IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria, OrderCriteria orderCriteria);
    public static BusinessObjectCollection`1<T> GetBusinessObjectCollection(ISelectQuery selectQuery);
    public static IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, ISelectQuery selectQuery);
    public static IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, string searchCriteria, string orderCriteria);
    public static IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, string searchCriteria);
    public static void Refresh(BusinessObjectCollection`1<T> collection);
    public static void Refresh(IBusinessObjectCollection collection);
    public static IBusinessObject Refresh(IBusinessObject businessObject);
    public static RelatedBusinessObjectCollection`1<T> GetRelatedBusinessObjectCollection(IMultipleRelationship relationship);
    public static IBusinessObjectCollection GetRelatedBusinessObjectCollection(Type type, IMultipleRelationship relationship);
}
public class Habanero.BO.BusinessObject : object {
    private static IHabaneroLogger Logger;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs> Updated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs> Saved;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs> Deleted;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs> Restored;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs> MarkedForDeletion;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOPropUpdatedEventArgs> PropertyUpdated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs> IDUpdated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IBusinessObjectAuthorisation <AuthorisationRules>k__BackingField;
    protected IBOPropCol _boPropCol;
    private IList`1<IBusinessObjectRule> _boRules;
    private BOStatus _boStatus;
    private IBusinessObjectUpdateLog _businessObjectUpdateLog;
    protected IClassDef _classDef;
    protected IConcurrencyControl _concurrencyControl;
    protected BOKeyCol _keysCol;
    protected IPrimaryKey _primaryKey;
    private IRelationshipCol _relationshipCol;
    private object _beginEditLock;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITransactionLog <TransactionLog>k__BackingField;
    private IBusinessObjectAuthorisation AuthorisationRules { get; private set; }
    [TypeDescriptorIgnoreAttribute]
public string DirtyXML { get; }
    [TypeDescriptorIgnoreAttribute]
public RelationshipCol Relationships { get; public set; }
    [TypeDescriptorIgnoreAttribute]
public ClassDef ClassDef { get; public set; }
    [TypeDescriptorIgnoreAttribute]
private IRelationshipCol Habanero.Base.IBusinessObject.Relationships { get; private set; }
    [TypeDescriptorIgnoreAttribute]
private IClassDef Habanero.Base.IBusinessObject.ClassDef { get; private set; }
    [TypeDescriptorIgnoreAttribute]
public IPrimaryKey ID { get; }
    [ObsoleteAttribute("V2.5 Please use ID")]
[TypeDescriptorIgnoreAttribute]
protected IPrimaryKey PrimaryKey { get; }
    [TypeDescriptorIgnoreAttribute]
public IBOPropCol Props { get; }
    [TypeDescriptorIgnoreAttribute]
public IBOStatus Status { get; }
    [ObsoleteAttribute("V 2.5 Use Props.HasAutoIncrementingField")]
internal bool HasAutoIncrementingField { get; }
    [TypeDescriptorIgnoreAttribute]
public ITransactionLog TransactionLog { get; private set; }
    protected internal IBusinessObjectUpdateLog BusinessObjectUpdateLog { get; protected internal set; }
    protected internal BusinessObject(IClassDef def);
    protected BusinessObject(ConstructForFakes constructForFakes);
    protected BusinessObject(SerializationInfo info, StreamingContext context);
    private static BusinessObject();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Updated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Updated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Saved(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Saved(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Deleted(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Deleted(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Restored(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Restored(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MarkedForDeletion(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MarkedForDeletion(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_IDUpdated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_IDUpdated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
private IBusinessObjectAuthorisation get_AuthorisationRules();
    [CompilerGeneratedAttribute]
private void set_AuthorisationRules(IBusinessObjectAuthorisation value);
    protected virtual void ConstructEntireClassFromClassDefs(IClassDef def);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void AddToObjectManager();
    private void ReplaceInObjectManager();
    private void SetupBOPropsWithThisBo();
    private void FinaliseBusinessObjectTearDown();
    private void RemoveFromObjectManager();
    private void RegisterForPropertyEvents();
    private void UnregisterForPropertyEvents();
    private void BOProp_OnUpdated(object sender, BOPropEventArgs e);
    private void InitialisePrimaryKeyPropertiesBasedOnParentClass(Guid myID);
    public virtual string ToString();
    private bool HasAlternateKeys();
    private bool HasTypeParameter();
    protected virtual override void Finalize();
    private void Initialise(IClassDef classDef);
    private void BackupObjectIdPropValues();
    protected virtual void ConstructFromClassDef(bool newObject);
    private void SetPrimaryKeyForInheritedClass();
    internal IClassDef GetClassDefToUseForPrimaryKey();
    protected virtual IClassDef ConstructClassDef();
    public string get_DirtyXML();
    public RelationshipCol get_Relationships();
    public void set_Relationships(RelationshipCol value);
    public ClassDef get_ClassDef();
    public void set_ClassDef(ClassDef value);
    private sealed virtual override IRelationshipCol Habanero.Base.IBusinessObject.get_Relationships();
    private sealed virtual override void Habanero.Base.IBusinessObject.set_Relationships(IRelationshipCol value);
    private sealed virtual override IClassDef Habanero.Base.IBusinessObject.get_ClassDef();
    private sealed virtual override void Habanero.Base.IBusinessObject.set_ClassDef(IClassDef value);
    public sealed virtual IPrimaryKey get_ID();
    private void CheckClassDefNotNull();
    private void SetupPrimaryKey();
    protected void SetConcurrencyControl(IConcurrencyControl concurrencyControl);
    protected void SetTransactionLog(ITransactionLog transactionLog);
    protected internal void SetAuthorisationRules(IBusinessObjectAuthorisation authorisationRules);
    protected void SetBusinessObjectUpdateLog(IBusinessObjectUpdateLog businessObjectUpdateLog);
    public BOKeyCol GetBOKeyCol();
    internal string GetDebugOutput();
    protected IPrimaryKey get_PrimaryKey();
    public virtual bool IsCreatable(String& message);
    public virtual bool IsEditable(String& message);
    public virtual bool IsDeletable(String& message);
    public sealed virtual object GetPropertyValue(string propName);
    public sealed virtual object GetPropertyValue(Source source, string propName);
    public sealed virtual object GetPersistedPropertyValue(Source source, string propName);
    public sealed virtual void SetPropertyValue(string propName, object newPropValue);
    public sealed virtual IBOPropCol get_Props();
    public virtual IBOStatus get_Status();
    public sealed virtual string GetPropertyValueString(string propName);
    public virtual bool IsReadable(String& message);
    public T GetPropertyValue(string propName);
    internal IBOProp GetProperty(string propName);
    internal void BeginEdit();
    private void BeginEdit(bool delete);
    private void CheckNotEditing();
    internal object GetPropertyValueToDisplay(string propName);
    internal string GetPropertyStringValueToDisplay(string propName);
    [ObsoleteAttribute("2010/10/11 V2.5 This internal method no longer appears to be used anywhere")]
internal static bool PropValueHasChanged(object currentPropValue, object newPropValue);
    private void InitialisePropertyValue(string propName, object propValue);
    internal bool get_HasAutoIncrementingField();
    [CompilerGeneratedAttribute]
public ITransactionLog get_TransactionLog();
    [CompilerGeneratedAttribute]
private void set_TransactionLog(ITransactionLog value);
    protected internal virtual IBusinessObjectUpdateLog get_BusinessObjectUpdateLog();
    protected internal virtual void set_BusinessObjectUpdateLog(IBusinessObjectUpdateLog value);
    internal IList`1<IBusinessObjectRule> GetBusinessObjectRules();
    public sealed virtual void CancelEdits();
    public sealed virtual void MarkForDelete();
    private void MarkChildrenForDelete();
    protected internal virtual void AfterLoad();
    protected internal void UpdateStateAsPersisted();
    private void CleanUpAllRelationshipCollections();
    private void StorePersistedPropertyValues();
    private void SetStateAsUpdated();
    internal void SetStateAsPermanentlyDeleted();
    protected internal virtual void UpdateObjectBeforePersisting(ITransactionCommitter transactionCommitter);
    private void CheckIsDeletable();
    protected void FireMarkForDeleteEvent();
    protected internal void FireUpdatedEvent();
    protected void FirePropertyUpdatedEvent(IBOProp prop);
    protected void FireIDUpdatedEvent();
    private void FireRestoredEvent();
    private void FireSavedEvent();
    private void FireDeletedEvent();
    protected virtual bool AreCustomRulesValid(String& customRuleErrors);
    protected virtual bool AreCustomRulesValid(IList`1& errors);
    protected virtual void LoadBusinessObjectRules(IList`1<IBusinessObjectRule> boRules);
    internal bool AreCustomRulesValidInternal(String& customRuleErrors);
    protected internal bool AreCustomRulesValidInternal(IList`1& errors);
    private bool HasErrors(IList`1& errors);
    internal bool HasWarnings(IList`1& errors);
    private static bool ErrorLevelIsError(IBusinessObjectRule rule);
    private void CreateBOError(IBusinessObjectRule rule, ICollection`1<IBOError> errors);
    protected internal virtual void CheckConcurrencyBeforePersisting();
    protected virtual void CheckConcurrencyBeforeBeginEditing();
    protected virtual void UpdatedConcurrencyControlPropertiesBeforePersisting();
    protected virtual void ReleaseWriteLocks();
    protected internal virtual void UpdateAsTransactionRolledBack();
    protected virtual void AfterSave();
    internal void SetStatus(Statuses status, bool value);
    protected internal virtual bool CanBePersisted(String& errMsg);
    public sealed virtual IBusinessObject Save();
    [CompilerGeneratedAttribute]
private void <RegisterForPropertyEvents>b__46_0(object sender, BOKeyEventArgs e);
    [CompilerGeneratedAttribute]
private void <UnregisterForPropertyEvents>b__47_0(object sender, BOKeyEventArgs e);
    [CompilerGeneratedAttribute]
private bool <HasErrors>b__142_0(IBusinessObjectRule rule);
}
public class Habanero.BO.BusinessObject`1 : BusinessObject {
    protected internal BusinessObject`1(IClassDef def);
    [ObsoleteAttribute("Not for use, to be removed, see Habanero.Testability for creating")]
protected BusinessObject`1(ConstructForFakes constructForFakes);
    public void SetPropertyValue(Expression`1<Func`2<T, TOut>> propNameExpression, object newPropValue);
    public TOut GetPropertyValue(Expression`1<Func`2<T, TOut>> propNameExpression);
    public BusinessObject`1<T> Save();
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.BusinessObjectCollection`1 : object {
    private static string COUNT;
    private static string CLASS_NAME;
    private static string ASSEMBLY_NAME;
    private static string CREATED_COUNT;
    private static string PERSISTED_COUNT;
    private static string ADDED_COUNT;
    private static string REMOVED_COUNT;
    private static string MARKEDFORDELETE_COUNT;
    private static string BUSINESS_OBJECT;
    private static string CREATED_BUSINESS_OBJECT;
    private static string PERSISTED_BUSINESS_OBJECT;
    private static string ADDED_BUSINESS_OBJECT;
    private static string REMOVED_BUSINESS_OBJECT;
    private static string MARKEDFORDELETE_BUSINESS_OBJECT;
    protected List`1<TBusinessObject> _boCol;
    private IClassDef _boClassDef;
    private List`1<TBusinessObject> _createdBusinessObjects;
    private List`1<TBusinessObject> _persistedObjectsCollection;
    protected List`1<TBusinessObject> _removedBusinessObjects;
    private List`1<TBusinessObject> _addedBusinessObjects;
    private List`1<TBusinessObject> _markedForDeleteBusinessObjects;
    private EventHandler`1<BOEventArgs> _savedEventHandler;
    private EventHandler`1<BOEventArgs> _deletedEventHandler;
    private EventHandler`1<BOEventArgs> _restoredEventHandler;
    private EventHandler`1<BOEventArgs> _markForDeleteEventHandler;
    private EventHandler`1<BOEventArgs> _updatedEventHandler;
    private EventHandler`1<BOPropUpdatedEventArgs> _boPropUpdatedEventHandler;
    private EventHandler`1<BOEventArgs> _boIDUpdatedEventHandler;
    private ISelectQuery _selectQuery;
    private IDictionary`2<EventHandler`1<BOEventArgs>, EventHandler`1<BOEventArgs`1<TBusinessObject>>> _updatedHandlers;
    private IDictionary`2<EventHandler`1<BOEventArgs>, EventHandler`1<BOEventArgs`1<TBusinessObject>>> _addedHandlers;
    private IDictionary`2<EventHandler`1<BOEventArgs>, EventHandler`1<BOEventArgs`1<TBusinessObject>>> _removedHandlers;
    private IDictionary`2<EventHandler`1<BOEventArgs>, EventHandler`1<BOEventArgs`1<TBusinessObject>>> _idUpdatedHandlers;
    private IDictionary`2<EventHandler`1<BOPropUpdatedEventArgs>, EventHandler`1<BOPropUpdatedEventArgs`1<TBusinessObject>>> _propertyUpdatedHandlers;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs`1<TBusinessObject>> _BusinessObjectRemoved;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs`1<TBusinessObject>> _businessObjectAdded;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs`1<TBusinessObject>> _businessObjectUpdated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs`1<TBusinessObject>> _BusinessObjectIDUpdated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOPropUpdatedEventArgs`1<TBusinessObject>> _BusinessObjectPropertyUpdated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler CollectionRefreshed;
    private object _mSyncRoot;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<DateTime> <TimeLastLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Hashtable <KeyObjectHashTable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Habanero.BO.IBusinessObjectCollectionInternal.Loading>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TotalCountAvailableForPaging>k__BackingField;
    private object System.Collections.IList.Item { get; private set; }
    public TBusinessObject Item { get; public set; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private int System.Collections.Generic.ICollection<TBusinessObject>.Count { get; }
    private bool System.Collections.Generic.ICollection<TBusinessObject>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsDirty { get; }
    public ISelectQuery SelectQuery { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public Nullable`1<DateTime> TimeLastLoaded { get; public set; }
    private IBusinessObject Habanero.Base.IBusinessObjectCollection.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private IList Habanero.Base.IBusinessObjectCollection.CreatedBusinessObjects { get; }
    public List`1<TBusinessObject> CreatedBusinessObjects { get; }
    private IList Habanero.Base.IBusinessObjectCollection.PersistedBusinessObjects { get; }
    public IList`1<TBusinessObject> PersistedBusinessObjects { get; }
    private IList Habanero.Base.IBusinessObjectCollection.RemovedBusinessObjects { get; }
    public List`1<TBusinessObject> RemovedBusinessObjects { get; }
    private IList Habanero.Base.IBusinessObjectCollection.MarkedForDeleteBusinessObjects { get; }
    public List`1<TBusinessObject> MarkedForDeleteBusinessObjects { get; }
    private IList Habanero.Base.IBusinessObjectCollection.AddedBusinessObjects { get; }
    public List`1<TBusinessObject> AddedBusinessObjects { get; }
    private Hashtable KeyObjectHashTable { get; private set; }
    private bool Habanero.BO.IBusinessObjectCollectionInternal.Loading { get; private set; }
    public int TotalCountAvailableForPaging { get; public set; }
    public BusinessObjectCollection`1(IClassDef classDef);
    [ObsoleteAttribute("Please initialize with a ClassDef instead.  This option will be removed in later versions of Habanero.")]
public BusinessObjectCollection`1(TBusinessObject bo);
    private BusinessObjectCollection`1(IClassDef classDef, TBusinessObject sampleBo);
    protected BusinessObjectCollection`1(SerializationInfo info, StreamingContext context);
    private void SetupEventHandlers();
    private void Initialise(IClassDef classDef, TBusinessObject sampleBo);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
private void add__BusinessObjectRemoved(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void remove__BusinessObjectRemoved(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void add__businessObjectAdded(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void remove__businessObjectAdded(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void add__businessObjectUpdated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void remove__businessObjectUpdated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void add__BusinessObjectIDUpdated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void remove__BusinessObjectIDUpdated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void add__BusinessObjectPropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
private void remove__BusinessObjectPropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionRefreshed(EventHandler value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.add_BusinessObjectAdded(EventHandler`1<BOEventArgs> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.remove_BusinessObjectAdded(EventHandler`1<BOEventArgs> value);
    public void add_BusinessObjectAdded(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    public void remove_BusinessObjectAdded(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.add_BusinessObjectRemoved(EventHandler`1<BOEventArgs> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.remove_BusinessObjectRemoved(EventHandler`1<BOEventArgs> value);
    public void add_BusinessObjectRemoved(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    public void remove_BusinessObjectRemoved(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.add_BusinessObjectUpdated(EventHandler`1<BOEventArgs> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.remove_BusinessObjectUpdated(EventHandler`1<BOEventArgs> value);
    public void add_BusinessObjectUpdated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    public void remove_BusinessObjectUpdated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.add_BusinessObjectPropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.remove_BusinessObjectPropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs> value);
    public void add_BusinessObjectPropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs`1<TBusinessObject>> value);
    public void remove_BusinessObjectPropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs`1<TBusinessObject>> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.add_BusinessObjectIDUpdated(EventHandler`1<BOEventArgs> value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.remove_BusinessObjectIDUpdated(EventHandler`1<BOEventArgs> value);
    public void add_BusinessObjectIDUpdated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    public void remove_BusinessObjectIDUpdated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    private void FireBusinessObjectAdded(TBusinessObject bo);
    private sealed virtual override void Habanero.BO.IBusinessObjectCollectionInternal.FireRefreshedEvent();
    private void FireBusinessObjectRemoved(TBusinessObject bo);
    private void FireBusinessObjectUpdated(TBusinessObject bo);
    private void FireBusinessObjectPropertyUpdated(TBusinessObject bo, IBOProp boProp);
    private void FireBusinessObjectIDUpdated(TBusinessObject bo);
    public virtual void Add(TBusinessObject bo);
    protected virtual bool AddInternal(TBusinessObject bo);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.AddWithoutEvents(IBusinessObject businessObject);
    private void AddToPersistedCollection(TBusinessObject businessObject);
    private void AddWithoutEvents(TBusinessObject bo);
    private void RegisterBOEvents(TBusinessObject businessObject);
    private void DeRegisterBOEvents(TBusinessObject businessObject);
    private void DeRegisterBoEventsForAllBusinessObjects();
    private void MarkForDeleteEventHandler(object sender, BOEventArgs e);
    private void DeletedEventHandler(object sender, BOEventArgs e);
    protected virtual void RestoredEventHandler(object sender, BOEventArgs e);
    protected virtual void SavedEventHandler(object sender, BOEventArgs e);
    private void UpdatedEventHandler(object sender, BOEventArgs e);
    private void BOPropUpdatedEventHandler(object sender, BOPropUpdatedEventArgs propEventArgs);
    private void BOIDUpdatedEventHandler(object sender, BOEventArgs e);
    public void Add(BusinessObjectCollection`1<TBusinessObject> col);
    public void Add(IEnumerable`1<TBusinessObject> col);
    public virtual void Add(TBusinessObject[] businessObjects);
    public virtual void Refresh();
    private sealed virtual override void Habanero.BO.IBusinessObjectCollectionInternal.AddInternal(IBusinessObject businessObject);
    public sealed virtual void LoadAll();
    public sealed virtual void LoadAll(string orderByClause);
    public sealed virtual void Load(string searchCriteria, string orderByClause);
    public void Load(Criteria searchExpression, string orderByClause);
    public virtual void LoadWithLimit(string searchCriteria, string orderByClause, int limit);
    public virtual void LoadWithLimit(Criteria searchExpression, string orderByClause, int limit);
    public virtual void LoadWithLimit(Criteria searchCriteria, IOrderCriteria orderByClause, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public virtual void LoadWithLimit(string searchCriteria, string orderByClause, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    private static string PrimaryKeyAsOrderByClause(IPrimaryKeyDef primaryKeyDef);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual void Clear();
    public sealed virtual bool Contains(TBusinessObject item);
    public sealed virtual void CopyTo(TBusinessObject[] array, int arrayIndex);
    public sealed virtual int IndexOf(TBusinessObject item);
    public sealed virtual void Insert(int index, TBusinessObject item);
    public virtual void RemoveAt(int index);
    public sealed virtual TBusinessObject get_Item(int index);
    public sealed virtual void set_Item(int index, TBusinessObject value);
    public virtual bool Remove(TBusinessObject bo);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override int System.Collections.Generic.ICollection<TBusinessObject>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<TBusinessObject>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void Habanero.BO.IBusinessObjectCollectionInternal.ClearCurrentCollection();
    private bool RemoveInternal(TBusinessObject businessObject, Boolean& fireEvent);
    private void RemoveCreatedBusinessObject(TBusinessObject businessObject);
    private void RemoveAddedBusinessObject(TBusinessObject businessObject);
    public sealed virtual bool get_IsDirty();
    public bool IsValid();
    public sealed virtual bool IsValid(String& errorMessage);
    public sealed virtual ISelectQuery get_SelectQuery();
    public sealed virtual void set_SelectQuery(ISelectQuery value);
    public virtual TBusinessObject Find(Guid key);
    private sealed virtual override IBusinessObject Habanero.Base.IBusinessObjectCollection.Find(Guid key);
    [ObsoleteAttribute("Please use Find(Guid key) instead")]
public TBusinessObject FindByGuid(Guid searchTerm);
    public sealed virtual IClassDef get_ClassDef();
    public sealed virtual void set_ClassDef(IClassDef value);
    public BusinessObjectCollection`1<TBusinessObject> Intersection(BusinessObjectCollection`1<TBusinessObject> col2);
    public BusinessObjectCollection`1<TBusinessObject> Union(BusinessObjectCollection`1<TBusinessObject> col2);
    public BusinessObjectCollection`1<TBusinessObject> Clone();
    public BusinessObjectCollection`1<DestType> Clone();
    public virtual void Sort(Expression`1<Func`2<TBusinessObject, TResult>> sortExpression, bool isBoProperty, bool isAscending);
    public virtual void Sort(string propertyName, bool isBoProperty, bool isAscending);
    public virtual void Sort(IComparer`1<TBusinessObject> comparer);
    public virtual void Sort();
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.Sort(IComparer comparer);
    public virtual List`1<TBusinessObject> GetSortedList(string propertyName, bool isAscending);
    public virtual BusinessObjectCollection`1<TBusinessObject> GetSortedCollection(string propertyName, bool isAscending);
    public virtual List`1<TBusinessObject> GetList();
    public virtual void SaveAll();
    protected virtual void SaveAllInTransaction(ITransactionCommitter transaction);
    public virtual void CancelEdits();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_TimeLastLoaded();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeLastLoaded(Nullable`1<DateTime> value);
    [ObsoleteAttribute("Should use Cancel Edits")]
public sealed virtual void RestoreAll();
    private sealed virtual override IBusinessObjectCollection Habanero.Base.IBusinessObjectCollection.Clone();
    private sealed virtual override int Habanero.Base.IBusinessObjectCollection.IndexOf(IBusinessObject item);
    private sealed virtual override IBusinessObject Habanero.Base.IBusinessObjectCollection.get_Item(int index);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.set_Item(int index, IBusinessObject value);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.Add(IBusinessObject item);
    private sealed virtual override bool Habanero.Base.IBusinessObjectCollection.Contains(IBusinessObject item);
    private sealed virtual override void Habanero.Base.IBusinessObjectCollection.CopyTo(IBusinessObject[] array, int arrayIndex);
    private sealed virtual override bool Habanero.Base.IBusinessObjectCollection.Remove(IBusinessObject item);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override IList Habanero.Base.IBusinessObjectCollection.get_CreatedBusinessObjects();
    public List`1<TBusinessObject> get_CreatedBusinessObjects();
    private sealed virtual override IList Habanero.Base.IBusinessObjectCollection.get_PersistedBusinessObjects();
    public IList`1<TBusinessObject> get_PersistedBusinessObjects();
    private sealed virtual override IList Habanero.Base.IBusinessObjectCollection.get_RemovedBusinessObjects();
    public List`1<TBusinessObject> get_RemovedBusinessObjects();
    private sealed virtual override IList Habanero.Base.IBusinessObjectCollection.get_MarkedForDeleteBusinessObjects();
    public List`1<TBusinessObject> get_MarkedForDeleteBusinessObjects();
    private sealed virtual override IList Habanero.Base.IBusinessObjectCollection.get_AddedBusinessObjects();
    public List`1<TBusinessObject> get_AddedBusinessObjects();
    [CompilerGeneratedAttribute]
private Hashtable get_KeyObjectHashTable();
    [CompilerGeneratedAttribute]
private void set_KeyObjectHashTable(Hashtable value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool Habanero.BO.IBusinessObjectCollectionInternal.get_Loading();
    [CompilerGeneratedAttribute]
private sealed virtual override void Habanero.BO.IBusinessObjectCollectionInternal.set_Loading(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalCountAvailableForPaging();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TotalCountAvailableForPaging(int value);
    public virtual TBusinessObject CreateBusinessObject();
    protected virtual TBusinessObject CreateNewBusinessObject();
    private void AddCreatedBusinessObject(TBusinessObject newBO);
    private sealed virtual override IBusinessObject Habanero.Base.IBusinessObjectCollection.CreateBusinessObject();
    public virtual void MarkForDelete(TBusinessObject businessObject);
    public virtual void MarkForDeleteAt(int index);
    public sealed virtual IEnumerator`1<TBusinessObject> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public TBusinessObject Find(Predicate`1<TBusinessObject> match);
    public List`1<TBusinessObject> FindAll(Predicate`1<TBusinessObject> match);
    public void ForEach(Action`1<TBusinessObject> action);
    public void RemoveAll(Predicate`1<TBusinessObject> match);
    public TBusinessObject[] ToArray();
    public List`1<TOutput> ConvertAll(Converter`2<TBusinessObject, TOutput> converter);
    public bool Exists(Predicate`1<TBusinessObject> match);
    public void AddRange(IEnumerable`1<TBusinessObject> collection);
    private sealed virtual override IEnumerable`1<T> Habanero.Base.IBusinessObjectCollection.AsEnumerable();
}
public class Habanero.BO.BusinessObjectLastUpdatePropertiesLog : object {
    private ISecurityController _securityController;
    private IBOProp _userLastUpdatedBoProp;
    private IBOProp _dateLastUpdatedBoProp;
    public BusinessObjectLastUpdatePropertiesLog(IBOProp userLastUpdatedBoProp, IBOProp dateLastUpdatedBoProp);
    public BusinessObjectLastUpdatePropertiesLog(IBOProp userLastUpdatedBoProp, IBOProp dateLastUpdatedBoProp, ISecurityController securityController);
    public BusinessObjectLastUpdatePropertiesLog(IBusinessObject businessObject);
    public BusinessObjectLastUpdatePropertiesLog(IBusinessObject businessObject, ISecurityController securityController);
    public sealed virtual void Update();
    private string GetCurrentUserName();
}
public abstract class Habanero.BO.BusinessObjectLoaderBase : MarshalByRefObject {
    private static Criteria GetCriteriaObject(IClassDef classDef, string criteriaString);
    protected virtual void PrepareForRefresh(IBusinessObjectCollection col);
    private static void CheckNotTypedAsBusinessObject();
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria);
    public sealed virtual void Refresh(BusinessObjectCollection`1<T> collection);
    public sealed virtual void Refresh(IBusinessObjectCollection collection);
    protected virtual void DoRefresh(BusinessObjectCollection`1<T> collection);
    protected virtual void DoRefresh(IBusinessObjectCollection collection);
    protected virtual void DoRefreshShared(IBusinessObjectCollection collection);
    protected abstract virtual LoaderResult GetObjectsFromDataStore(IClassDef classDef, ISelectQuery selectQuery);
    protected abstract virtual string GetDuplicatePersistedObjectsErrorMessage(ISelectQuery selectQuery, string loadMechanismDescription);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, string criteriaString, string orderCriteria);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, string criteriaString);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString, string orderCriteria);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria, IOrderCriteria orderCriteria, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria, IOrderCriteria orderCriteria, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString, string orderCriteriaString, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria, IOrderCriteria orderCriteria);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria, IOrderCriteria orderCriteria);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(ISelectQuery selectQuery);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, ISelectQuery selectQuery);
    protected static IBusinessObjectCollection CreateCollectionOfType(IClassDef classDef);
    protected static void AddBusinessObjectToCollection(IBusinessObjectCollection collection, IBusinessObject loadedBo, Dictionary`2<string, IBusinessObject> originalPersistedObjects);
    protected static void RestoreEditedLists(IBusinessObjectCollection collection, Dictionary`2<string, IBusinessObject> originalPersistedCollection);
    private static void CorrectPersistedCollection(IBusinessObjectCollection collection, Dictionary`2<string, IBusinessObject> originalPersistedCollection);
    protected static void RestoreAddedCollection(IBusinessObjectCollection collection, ArrayList addedBoArray);
    private static void RestoreMarkForDeleteCollection(IBusinessObjectCollection collection, Dictionary`2<string, IBusinessObject> originalPersistedCollection);
    private static void RestoreRemovedCollection(IBusinessObjectCollection collection);
    private static void RestoreCreatedCollection(IBusinessObjectCollection collection);
    protected static void RestoreCreatedCollection(IBusinessObjectCollection collection, IList createdBusinessObjects);
    protected static void RestoreRemovedCollection(IBusinessObjectCollection collection, IList removedBusinessObjects);
    public sealed virtual RelatedBusinessObjectCollection`1<T> GetRelatedBusinessObjectCollection(IMultipleRelationship relationship);
    protected void LoadBOCollection(IBusinessObjectCollection collection, ICollection loadedBos, string duplicatePersistedObjectsErrorMessage);
    protected void LoadBOCollection(IBusinessObjectCollection collection, IList`1<T> loadedBOs);
    protected void LoadBOCollection(IBusinessObjectCollection collection, List`1<LoadedBoInfo> loadedBoInfos, string duplicatePersistedObjectsErrorMessage);
    private Dictionary`2<string, IBusinessObject> GetOriginalPersistedCollection(IBusinessObjectCollection collection, string duplicatePersistedObjectsErrorMessage);
    private void FinaliseLoad(List`1<LoadedBoInfo> loadedBoInfos);
    public sealed virtual IBusinessObjectCollection GetRelatedBusinessObjectCollection(Type type, IMultipleRelationship relationship);
    public sealed virtual IBusinessObject GetBusinessObjectByValue(IClassDef classDef, object idValue);
    public sealed virtual IBusinessObject GetBusinessObjectByValue(Type type, object idValue);
    public sealed virtual T GetBusinessObjectByValue(object idValue);
    protected static IBusinessObject GetObjectFromObjectManager(IPrimaryKey key, Type boType);
    protected internal static void SetStatusAfterLoad(IBusinessObject bo);
    protected internal static void CallAfterLoad(IBusinessObject bo);
    protected internal static void FireUpdatedEvent(IBusinessObject bo);
}
public class Habanero.BO.BusinessObjectLoaderInMemory : BusinessObjectLoaderBase {
    private DataStoreInMemory _dataStore;
    public BusinessObjectLoaderInMemory(DataStoreInMemory dataStore);
    public sealed virtual T GetBusinessObject(IPrimaryKey primaryKey);
    public sealed virtual IBusinessObject GetBusinessObject(IClassDef classDef, IPrimaryKey primaryKey);
    public sealed virtual T GetBusinessObject(Criteria criteria);
    private T GetBusinessObjectShared(Criteria criteria);
    private IBusinessObject GetBusinessObjectShared(IClassDef classDef, Criteria criteria);
    public sealed virtual IBusinessObject GetBusinessObject(IClassDef classDef, Criteria criteria);
    public sealed virtual T GetBusinessObject(ISelectQuery selectQuery);
    public sealed virtual IBusinessObject GetBusinessObject(IClassDef classDef, ISelectQuery selectQuery);
    public sealed virtual T GetBusinessObject(string criteriaString);
    public sealed virtual IBusinessObject GetBusinessObject(IClassDef classDef, string criteriaString);
    public sealed virtual IBusinessObject Refresh(IBusinessObject businessObject);
    public sealed virtual int GetCount(IClassDef classDef, Criteria criteria);
    protected virtual LoaderResult GetObjectsFromDataStore(IClassDef classDef, ISelectQuery selectQuery);
    protected virtual string GetDuplicatePersistedObjectsErrorMessage(ISelectQuery selectQuery, string loadMechanismDescription);
    private static void ApplyLimitsToList(ISelectQuery selectQuery, IList loadedBos);
    public sealed virtual T GetRelatedBusinessObject(SingleRelationship`1<T> relationship);
    public sealed virtual IBusinessObject GetRelatedBusinessObject(ISingleRelationship relationship);
    public DataStoreInMemory GetMemoryDatabase();
}
public class Habanero.BO.BusinessObjectLoaderMultiSource : object {
    private IBusinessObjectLoader _defaultBusinessObjectLoader;
    private Dictionary`2<Type, IBusinessObjectLoader> _businessObjectLoaders;
    public BusinessObjectLoaderMultiSource(IBusinessObjectLoader defaultBusinessObjectLoader);
    public void AddBusinessObjectLoader(Type type, IBusinessObjectLoader businessObjectLoader);
    public sealed virtual T GetBusinessObject(IPrimaryKey primaryKey);
    public sealed virtual IBusinessObject GetBusinessObject(IClassDef classDef, IPrimaryKey primaryKey);
    public sealed virtual T GetBusinessObject(Criteria criteria);
    public sealed virtual IBusinessObject GetBusinessObject(IClassDef classDef, Criteria criteria);
    public sealed virtual T GetBusinessObject(ISelectQuery selectQuery);
    public sealed virtual IBusinessObject GetBusinessObject(IClassDef classDef, ISelectQuery selectQuery);
    public sealed virtual T GetBusinessObject(string criteriaString);
    public sealed virtual IBusinessObject GetBusinessObject(IClassDef classDef, string criteriaString);
    public sealed virtual T GetRelatedBusinessObject(SingleRelationship`1<T> relationship);
    public sealed virtual IBusinessObject GetRelatedBusinessObject(ISingleRelationship relationship);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, string searchCriteria);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria, IOrderCriteria orderCriteria);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria, IOrderCriteria orderCriteria);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString, string orderCriteria);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, string searchCriteria, string orderCriteria);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria, IOrderCriteria orderCriteria, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef def, Criteria criteria, IOrderCriteria orderCriteria, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& records);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString, string orderCriteriaString, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public sealed virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(ISelectQuery selectQuery);
    public sealed virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, ISelectQuery selectQuery);
    public sealed virtual void Refresh(BusinessObjectCollection`1<T> collection);
    public sealed virtual void Refresh(IBusinessObjectCollection collection);
    public sealed virtual IBusinessObject Refresh(IBusinessObject businessObject);
    public sealed virtual RelatedBusinessObjectCollection`1<T> GetRelatedBusinessObjectCollection(IMultipleRelationship relationship);
    public sealed virtual IBusinessObjectCollection GetRelatedBusinessObjectCollection(Type type, IMultipleRelationship relationship);
    public sealed virtual IBusinessObject GetBusinessObjectByValue(IClassDef classDef, object idValue);
    public sealed virtual IBusinessObject GetBusinessObjectByValue(Type type, object idValue);
    public sealed virtual T GetBusinessObjectByValue(object idValue);
    public sealed virtual int GetCount(IClassDef classDef, Criteria criteria);
}
public class Habanero.BO.BusinessObjectLookupList : object {
    private bool _limitToList;
    private int _timeout;
    private Type _boType;
    private string _assemblyName;
    private string _className;
    private Dictionary`2<string, string> _keyValueDictionary;
    private DateTime _lastCallTime;
    private IOrderCriteria _orderCriteria;
    private string _criteriaString;
    private string _sortString;
    private Criteria _criteria;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPropDef <PropDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <DisplayValueDictionary>k__BackingField;
    public string AssemblyName { get; public set; }
    public string ClassName { get; public set; }
    public Criteria Criteria { get; }
    public string SortString { get; }
    public string CriteriaString { get; }
    public IOrderCriteria OrderCriteria { get; }
    public IPropDef PropDef { get; public set; }
    public IClassDef LookupBoClassDef { get; }
    private IClassDef Habanero.Base.ILookupListWithClassDef.ClassDef { get; }
    public Type BoType { get; private set; }
    internal Dictionary`2<string, string> DisplayValueDictionary { get; private set; }
    public bool LimitToList { get; }
    public int TimeOut { get; public set; }
    public BusinessObjectLookupList(Type boType, int timeout);
    public BusinessObjectLookupList(string assemblyName, string className, int timeout);
    public BusinessObjectLookupList(string assemblyName, string className, string criteria, string sort);
    public BusinessObjectLookupList(string assemblyName, string className, string criteria, string sort, bool limitToList);
    public BusinessObjectLookupList(string assemblyName, string className, string criteria, string sort, int timeout);
    public BusinessObjectLookupList(Type type, string criteria, string sort, bool limitToList);
    public sealed virtual string get_AssemblyName();
    public sealed virtual void set_AssemblyName(string value);
    public sealed virtual string get_ClassName();
    public sealed virtual void set_ClassName(string value);
    public sealed virtual Criteria get_Criteria();
    public sealed virtual string get_SortString();
    public sealed virtual string get_CriteriaString();
    public sealed virtual IOrderCriteria get_OrderCriteria();
    public sealed virtual Dictionary`2<string, string> GetLookupList();
    public sealed virtual Dictionary`2<string, string> GetLookupList(IDatabaseConnection connection);
    [CompilerGeneratedAttribute]
public sealed virtual IPropDef get_PropDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PropDef(IPropDef value);
    public Dictionary`2<string, string> GetLookupList(bool ignoreTimeout);
    private bool CacheHasNotTimedOut();
    public virtual IBusinessObjectCollection GetBusinessObjectCollection();
    public IClassDef get_LookupBoClassDef();
    private sealed virtual override IClassDef Habanero.Base.ILookupListWithClassDef.get_ClassDef();
    public static Dictionary`2<string, string> CreateDisplayValueDictionary(IBusinessObjectCollection col, bool sortByDisplayValue, ConvertPrimaryKeyGetAsValueToString coverter);
    public Dictionary`2<string, string> CreateDisplayValueDictionary(IBusinessObjectCollection col, bool sortByDisplayValue);
    private static void AddBusinessObjectToLookupList(IDictionary`2<string, string> lookupList, string objectID, string stringValue);
    private static string GetAvailableDisplayValue(IDictionary`2<string, string> sortedLookupList, string stringValue);
    public Type get_BoType();
    private void set_BoType(Type value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_DisplayValueDictionary();
    [CompilerGeneratedAttribute]
private void set_DisplayValueDictionary(Dictionary`2<string, string> value);
    public sealed virtual bool get_LimitToList();
    public sealed virtual int get_TimeOut();
    public sealed virtual void set_TimeOut(int value);
    [ObsoleteAttribute("V2.6.0 This code does not appear to have anything to do with Business Object LookupList")]
public ICollection GetValueCollection();
    private ICollection CreateValueList(IBusinessObjectCollection col);
    public sealed virtual Dictionary`2<string, string> GetIDValueLookupList();
    private void FillKeyValueDictionary();
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.BusinessObjectManager : object {
    private static IHabaneroLogger Logger;
    protected static IBusinessObjectManager _businessObjectManager;
    protected Dictionary`2<Guid, WeakReference> _loadedBusinessObjects;
    private Dictionary`2<string, Guid> _compositeKeyIDs;
    private object _lock;
    private EventHandler`1<BOEventArgs> _updateIDEventHandler;
    public static IBusinessObjectManager Instance { get; }
    public int Count { get; }
    public IBusinessObject Item { get; }
    public IBusinessObject Item { get; }
    private static BusinessObjectManager();
    public static IBusinessObjectManager get_Instance();
    public sealed virtual int get_Count();
    public virtual void Add(IBusinessObject businessObject);
    protected virtual void ObjectID_Updated_Handler(object sender, BOEventArgs e);
    public sealed virtual bool Contains(IBusinessObject businessObject);
    public sealed virtual bool Contains(IPrimaryKey id);
    public sealed virtual bool Contains(Guid objectID);
    private bool BusinessObjectWeakReferenceIsAlive(Guid objectID);
    private static bool WeakReferenceIsAlive(WeakReference boWeakRef);
    public sealed virtual void Remove(IBusinessObject businessObject);
    protected void Remove(Guid objectID, IBusinessObject businessObject);
    protected void DeregisterForIDUpdatedEvent(IBusinessObject businessObject);
    public virtual IBusinessObject get_Item(Guid objectID);
    public virtual IBusinessObject get_Item(IPrimaryKey objectID);
    public sealed virtual void ClearLoadedObjects();
    public sealed virtual IList`1<T> Find(Criteria criteria);
    public sealed virtual IBusinessObject FindFirst(Criteria criteria);
    public sealed virtual IBusinessObject GetBusinessObject(IPrimaryKey key);
    private static IBusinessObject GetBusinessObject(WeakReference weakReference);
    public sealed virtual IList Find(Criteria criteria, Type boType);
    public sealed virtual IBusinessObject FindFirst(BOPrimaryKey key, Type boType);
    public sealed virtual IBusinessObject FindFirst(BOPrimaryKey key, IClassDef classDef);
    public sealed virtual IBusinessObject FindFirst(Criteria criteria, Type boType);
    public sealed virtual IBusinessObject FindFirst(Criteria criteria, IClassDef classDef);
    public sealed virtual void AddWithReplace(IBusinessObject businessObject);
    public sealed virtual IBusinessObject GetObjectIfInManager(Guid id);
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.BusinessObjectManagerNull : object {
    public int Count { get; }
    public IBusinessObject Item { get; }
    public IBusinessObject Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual void Add(IBusinessObject businessObject);
    public sealed virtual bool Contains(IBusinessObject businessObject);
    public sealed virtual bool Contains(IPrimaryKey id);
    public sealed virtual bool Contains(Guid objectID);
    public sealed virtual void Remove(IBusinessObject businessObject);
    public sealed virtual IBusinessObject get_Item(Guid objectID);
    public sealed virtual IBusinessObject get_Item(IPrimaryKey objectID);
    public sealed virtual void ClearLoadedObjects();
    public sealed virtual IList`1<T> Find(Criteria criteria);
    public sealed virtual IBusinessObject FindFirst(Criteria criteria);
    public sealed virtual IBusinessObject GetBusinessObject(IPrimaryKey key);
    public sealed virtual IList Find(Criteria criteria, Type boType);
    public sealed virtual IBusinessObject FindFirst(BOPrimaryKey key, Type boType);
    public sealed virtual IBusinessObject FindFirst(BOPrimaryKey key, IClassDef classDef);
    public sealed virtual IBusinessObject FindFirst(Criteria criteria, Type boType);
    public sealed virtual IBusinessObject FindFirst(Criteria criteria, IClassDef classDef);
    public sealed virtual void AddWithReplace(IBusinessObject businessObject);
    public sealed virtual IBusinessObject GetObjectIfInManager(Guid id);
}
public class Habanero.BO.BusinessObjectXmlReader : object {
    private List`1<string> _propertyReadExceptions;
    public IEnumerable`1<string> PropertyReadExceptions { get; }
    public sealed virtual IEnumerable`1<string> get_PropertyReadExceptions();
    public sealed virtual IEnumerable`1<IBusinessObject> Read(XmlReader xmlReader);
    protected virtual void SetupProperty(IBusinessObject bo, string propertyName, string propertyValue);
}
public class Habanero.BO.BusinessObjectXmlWriter : object {
    public sealed virtual void Write(XmlWriter writer, IEnumerable`1<IBusinessObject> businessObjects);
    public sealed virtual void Write(XmlWriter writer, IEnumerable`1<IBusinessObject> businessObjects, bool includeStartDocument);
}
public class Habanero.BO.ClassDefinition.ClassDef : object {
    private string _assemblyName;
    private string _cachedTableName;
    private string _className;
    private string _classNameFull;
    private Type _classType;
    private string _displayName;
    private KeyDefCol _keysCol;
    private KeyDefCol _keyDefColIncludingInheritance;
    private IPrimaryKeyDef _primaryKeyDef;
    private IPropDefCol _propDefCol;
    private IPropDefCol _propDefColIncludingInheritance;
    private IRelationshipDefCol _relationshipDefCol;
    private string _tableName;
    private UIDefCol _uiDefCol;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISuperClassDef <SuperClassDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <TypeParameter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<Guid> <ClassID>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Module>k__BackingField;
    public string DisplayName { get; public set; }
    public string InheritedTableName { get; }
    public KeyDefCol KeysCol { get; public set; }
    public IPrimaryKeyDef PrimaryKeyDef { get; public set; }
    public bool HasObjectID { get; }
    public UIDefCol UIDefCol { get; public set; }
    public string AssemblyName { get; public set; }
    public string ClassName { get; public set; }
    public string ClassNameExcludingTypeParameter { get; }
    public string ClassNameFull { get; public set; }
    public Type ClassType { get; public set; }
    public string TableName { get; public set; }
    public IPropDefCol PropDefcol { get; public set; }
    public IPropDefCol PropDefColIncludingInheritance { get; }
    private int TotalNoOfPropsIncludingInheritance { get; }
    private int TotalNoOfKeysIncludingInheritance { get; }
    public IRelationshipDefCol RelationshipDefCol { get; public set; }
    public static ClassDefCol ClassDefs { get; }
    private Type MyClassType { get; private set; }
    public ISuperClassDef SuperClassDef { get; public set; }
    public IClassDef SuperClassClassDef { get; }
    public KeyDefCol KeyDefColIncludingInheritance { get; }
    public ClassDefCol ImmediateChildren { get; }
    public ClassDefCol AllChildren { get; }
    public string TypeParameter { get; public set; }
    public bool HasAutoIncrementingField { get; }
    public Nullable`1<Guid> ClassID { get; public set; }
    public string Module { get; public set; }
    internal ClassDef(Type classType, IPrimaryKeyDef primaryKeyDef, string tableName, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol);
    internal ClassDef(Type classType, IPrimaryKeyDef primaryKeyDef, string tableName, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol, UIDefCol uiDefCol);
    public ClassDef(Type classType, IPrimaryKeyDef primaryKeyDef, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol, UIDefCol uiDefCol);
    public ClassDef(Type classType, IPrimaryKeyDef primaryKeyDef, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol);
    public ClassDef(string assemblyName, string className, IPrimaryKeyDef primaryKeyDef, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol, UIDefCol uiDefCol);
    public ClassDef(string assemblyName, string className, string displayName, IPrimaryKeyDef primaryKeyDef, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol, UIDefCol uiDefCol);
    private ClassDef(Type classType, string assemblyName, string className, string tableName, string displayName, IPrimaryKeyDef primaryKeyDef, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol, UIDefCol uiDefCol);
    private void SetClassDefOnChildClasses();
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public string get_InheritedTableName();
    public sealed virtual KeyDefCol get_KeysCol();
    public sealed virtual void set_KeysCol(KeyDefCol value);
    public sealed virtual IPrimaryKeyDef get_PrimaryKeyDef();
    public sealed virtual void set_PrimaryKeyDef(IPrimaryKeyDef value);
    public bool get_HasObjectID();
    public sealed virtual UIDefCol get_UIDefCol();
    public sealed virtual void set_UIDefCol(UIDefCol value);
    public sealed virtual string get_AssemblyName();
    public sealed virtual void set_AssemblyName(string value);
    public sealed virtual string get_ClassName();
    public sealed virtual void set_ClassName(string value);
    public sealed virtual string get_ClassNameExcludingTypeParameter();
    public sealed virtual string get_ClassNameFull();
    public sealed virtual void set_ClassNameFull(string value);
    public sealed virtual Type get_ClassType();
    public sealed virtual void set_ClassType(Type value);
    public sealed virtual string get_TableName();
    public sealed virtual void set_TableName(string value);
    public sealed virtual IPropDefCol get_PropDefcol();
    public sealed virtual void set_PropDefcol(IPropDefCol value);
    public sealed virtual IPropDefCol get_PropDefColIncludingInheritance();
    private int get_TotalNoOfPropsIncludingInheritance();
    private int get_TotalNoOfKeysIncludingInheritance();
    public sealed virtual IRelationshipDefCol get_RelationshipDefCol();
    public sealed virtual void set_RelationshipDefCol(IRelationshipDefCol value);
    public static ClassDefCol get_ClassDefs();
    public static bool IsDefined(Type classType);
    public sealed virtual IBusinessObject CreateNewBusinessObject();
    public IBOPropCol CreateBOPropertyCol(bool newObject);
    private BusinessObject InstantiateBusinessObject(bool instantiateWithClassDef);
    public RelationshipCol CreateRelationshipCol(IBOPropCol propCol, IBusinessObject bo);
    public BOKeyCol CreateBOKeyCol(IBOPropCol col);
    private Type get_MyClassType();
    private void set_MyClassType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual ISuperClassDef get_SuperClassDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuperClassDef(ISuperClassDef value);
    public sealed virtual IClassDef get_SuperClassClassDef();
    public sealed virtual KeyDefCol get_KeyDefColIncludingInheritance();
    public ClassDefCol get_ImmediateChildren();
    public sealed virtual ClassDefCol get_AllChildren();
    public sealed virtual bool IsUsingClassTableInheritance();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TypeParameter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TypeParameter(string value);
    public bool IsUsingConcreteTableInheritance();
    public bool IsUsingSingleTableInheritance();
    public IList`1<ClassDef> GetAllClassDefsInHierarchy();
    public sealed virtual ILookupList GetLookupList(string propertyName);
    public sealed virtual IPropDef GetPropDef(Source source, string propertyName, bool throwError);
    public sealed virtual IRelationshipDef GetRelationship(string relationshipName);
    public IUIDef GetUIDef(string uiDefName);
    public virtual bool Equals(object obj);
    public bool Equals(ClassDef otherClsDef);
    public virtual int GetHashCode();
    public bool get_HasAutoIncrementingField();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_ClassID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClassID(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Module();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Module(string value);
    public sealed virtual Type GetPropertyType(string propertyName);
    private static bool IsReflectiveProperty(string propertyName);
    public sealed virtual IPropDef GetPropDef(string propertyName);
    private IPropDef GetInheritedPropDef(string propertyName, bool throwError);
    public sealed virtual IPropDef GetPropDef(string propertyName, bool throwError);
    private static bool IsRelatedProperty(string propertyName);
    private IPropDef GetRelatedPropertyDef(string propertyName, bool throwError);
    private void ThrowPropertyNotFoundError(string propertyName);
    private Type GetReflectivePropertyType(string propertyName);
    public sealed virtual IPropertyComparer`1<T> CreatePropertyComparer(string propertyName);
    public sealed virtual string GetTableName();
    public sealed virtual string GetTableName(IPropDef propDef);
    public ClassDef Clone();
    public ClassDef Clone(bool clonePropDefs);
    public ClassDef GetBaseClassOfSingleTableHierarchy();
    public static ClassDef Get();
}
internal class Habanero.BO.ClassDefinition.ClassDefHelper : object {
    public static IPropDef GetPropDefByPropName(IClassDef classDef, string propertyName);
    internal static bool IsReflectiveProperty(string propertyName);
    public static IPrimaryKeyDef GetPrimaryKeyDef(IClassDef classDef, ClassDefCol classDefCol);
    public static ClassDef GetSuperClassClassDef(ISuperClassDef superClassDef, ClassDefCol classDefCol);
    public static IRelationshipDef GetRelationshipDefByName(IClassDef classDef, string name);
}
public class Habanero.BO.ClassDefinition.ClassDefValidator : object {
    private IDefClassFactory _defClassFactory;
    public ClassDefValidator(IDefClassFactory defClassFactory);
    public void ValidateClassDefs(ClassDefCol classDefCol);
    private static void UpdateOwningBOHasForeignKey(ClassDefCol classDefCol);
    private static void UpdatePrimaryKeys(IEnumerable`1<IClassDef> col);
    private void UpdateKeyDefinitionsWithBoProp(ClassDefCol col);
    private void UpdateKeyDefinitionsWithBoProp(IDictionary`2<IClassDef, IPropDefCol> loadedFullPropertyLists, IClassDef classDef, ClassDefCol col);
    internal IPropDefCol GetAllClassDefProps(IDictionary`2<IClassDef, IPropDefCol> loadedFullPropertyLists, IClassDef classDef, ClassDefCol col);
    private static IClassDef GetSuperClassClassDef(IClassDef currentClassDef, ClassDefCol col);
    private void CheckRelationships(ClassDefCol classDefs);
    private void CheckRelationshipsForAClassDef(IDictionary`2<IClassDef, IPropDefCol> loadedFullPropertyLists, IClassDef classDef, ClassDefCol classDefs);
    private static IClassDef GetRelatedObjectClassDef(ClassDefCol classDefs, IRelationshipDef relationshipDef);
    private void ValidateRelKeyDef(IClassDef classDef, ClassDefCol classDefs, IRelationshipDef relationshipDef, IClassDef relatedObjectClassDef, IDictionary`2<IClassDef, IPropDefCol> loadedFullPropertyLists);
    private static void ValidateReverseRelationship(IClassDef classDef, IRelationshipDef relationshipDef, IClassDef relatedClassDef);
    private static string GetBaseRelationshipMessage(IRelationshipDef relationshipDef, IClassDef relatedClassDef, string reverseRelationshipName, IClassDef classDef);
    private static void CheckReverseRelationshipRelKeyDefProps(IRelationshipDef relationshipDef, IClassDef relatedClassDef, string reverseRelationshipName, IRelationshipDef reverseRelationshipDef, IClassDef classDef);
    private static Result ReverseRelationshipHasSameProps(IRelationshipDef relationshipDef, IRelationshipDef reverseRelationshipDef);
    private static bool OwningClassHasPrimaryKey(IRelationshipDef relationshipDef, IClassDef classDef, ClassDefCol classDefCol);
    private static bool HasReverseRelationship(IRelationshipDef relationshipDef);
}
[ExtensionAttribute]
internal static class Habanero.BO.ClassDefinition.ClassValidatorExtensions : object {
    [ExtensionAttribute]
internal static string GetRelPropDefString(IRelationshipDef relationshipDef);
    [ExtensionAttribute]
internal static bool DoKeyPropsMatch(IRelPropDef relPropDef, IRelPropDef reverseRelPropDef);
}
public class Habanero.BO.ClassDefinition.DefClassFactory : object {
    public sealed virtual ILookupList CreateBusinessObjectLookupList(string assemblyName, string className, string criteria, string sort, int timeout);
    public sealed virtual IClassDef CreateClassDef(string assemblyName, string className, string displayName, IPrimaryKeyDef primaryKeyDef, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol, UIDefCol uiDefCol);
    public sealed virtual ILookupList CreateDatabaseLookupList(string sqlString, int timeout, string assemblyName, string className, bool limitToList);
    public sealed virtual IKeyDef CreateKeyDef(string keyName);
    public sealed virtual IPrimaryKeyDef CreatePrimaryKeyDef();
    public sealed virtual IPropDef CreatePropDef(string propertyName, string assemblyName, string typeName, PropReadWriteRule readWriteRule, string databaseFieldName, string defaultValueString, bool compulsory, bool autoIncrementing, int length, string displayName, string description, bool keepValuePrivate);
    public sealed virtual IPropRule CreatePropRuleDate(string name, string message);
    public sealed virtual IPropRule CreatePropRuleDecimal(string name, string message);
    public sealed virtual IPropRule CreatePropRuleInteger(string name, string message);
    public sealed virtual IPropRule CreatePropRuleShort(string name, string message);
    public sealed virtual IPropRule CreatePropRuleLong(string name, string message);
    public sealed virtual IPropRule CreatePropRuleString(string name, string message);
    public sealed virtual IPropRule CreatePropRuleSingle(string name, string message);
    public sealed virtual IPropRule CreatePropRuleDouble(string name, string message);
    public sealed virtual IRelationshipDef CreateSingleRelationshipDef(string relationshipName, string relatedAssemblyName, string relatedClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, DeleteParentAction deleteParentAction, InsertParentAction insertParentAction, RelationshipType relationshipType);
    public sealed virtual IRelationshipDef CreateMultipleRelationshipDef(string relationshipName, string relatedAssemblyName, string relatedClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, string orderBy, DeleteParentAction deleteParentAction, InsertParentAction insertParentAction, RelationshipType relationshipType, int timeout);
    public sealed virtual ILookupList CreateSimpleLookupList(Dictionary`2<string, string> displayValueDictionary);
    public sealed virtual ISuperClassDef CreateSuperClassDef(string assemblyName, string className, ORMapping orMapping, string id, string discriminator);
    public sealed virtual IUIDef CreateUIDef(string name, IUIForm uiForm, IUIGrid uiGrid);
    public sealed virtual IUIFormColumn CreateUIFormColumn();
    public sealed virtual IUIForm CreateUIFormDef();
    public sealed virtual IUIFormField CreateUIFormProperty(string label, string propertyName, string controlTypeName, string controlAssembly, string mapperTypeName, string mapperAssembly, bool editable, Nullable`1<bool> showAsCompulsory, string toolTipText, Hashtable propertyAttributes, LayoutStyle layout);
    public sealed virtual IUIFormTab CreateUIFormTab();
    public sealed virtual IUIGrid CreateUIGridDef();
    public sealed virtual IUIGridColumn CreateUIGridProperty(string heading, string propertyName, string gridControlTypeName, string gridControlAssembly, bool editable, int width, PropAlignment alignment, Hashtable propertyAttributes);
    public sealed virtual IPropDefCol CreatePropDefCol();
    public sealed virtual KeyDefCol CreateKeyDefCol();
    public sealed virtual UIDefCol CreateUIDefCol();
    public sealed virtual IRelationshipDefCol CreateRelationshipDefCol();
    public sealed virtual IRelPropDef CreateRelPropDef(string propName, string relPropName);
    public sealed virtual IRelKeyDef CreateRelKeyDef();
    public sealed virtual ClassDefCol CreateClassDefCol();
    public sealed virtual IFilterPropertyDef CreateFilterPropertyDef(string propertyName, string label, string filterType, string filterTypeAssembly, FilterClauseOperator filterClauseOperator, Dictionary`2<string, string> parameters);
    public sealed virtual IFilterDef CreateFilterDef(IList`1<IFilterPropertyDef> filterPropertyDefs);
}
public class Habanero.BO.ClassDefinition.FilterDef : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<IFilterPropertyDef> <FilterPropertyDefs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FilterModes <FilterMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Columns>k__BackingField;
    public IList`1<IFilterPropertyDef> FilterPropertyDefs { get; public set; }
    public FilterModes FilterMode { get; public set; }
    public int Columns { get; public set; }
    public FilterDef(IList`1<IFilterPropertyDef> filterPropertyDefs);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IFilterPropertyDef> get_FilterPropertyDefs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterPropertyDefs(IList`1<IFilterPropertyDef> value);
    [CompilerGeneratedAttribute]
public sealed virtual FilterModes get_FilterMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterMode(FilterModes value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Columns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Columns(int value);
}
public class Habanero.BO.ClassDefinition.FilterPropertyDef : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FilterType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FilterTypeAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private FilterClauseOperator <FilterClauseOperator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Dictionary`2<string, string> <Parameters>k__BackingField;
    public string PropertyName { get; private set; }
    public string Label { get; private set; }
    public string FilterType { get; public set; }
    public string FilterTypeAssembly { get; public set; }
    public FilterClauseOperator FilterClauseOperator { get; public set; }
    public Dictionary`2<string, string> Parameters { get; public set; }
    public FilterPropertyDef(string propertyName, string label, string filterType, string filterTypeAssembly, FilterClauseOperator filterClauseOperator, Dictionary`2<string, string> parameters);
    public FilterPropertyDef(string propertyName, string label, Type filterType, FilterClauseOperator filterClauseOperator, Dictionary`2<string, string> parameters);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FilterType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FilterTypeAssembly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterTypeAssembly(string value);
    [CompilerGeneratedAttribute]
public sealed virtual FilterClauseOperator get_FilterClauseOperator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterClauseOperator(FilterClauseOperator value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(Dictionary`2<string, string> value);
}
public interface Habanero.BO.ClassDefinition.IDefClassFactory {
    public abstract virtual ILookupList CreateBusinessObjectLookupList(string assemblyName, string className, string criteria, string sort, int timeout);
    public abstract virtual IClassDef CreateClassDef(string assemblyName, string className, string displayName, IPrimaryKeyDef primaryKeyDef, IPropDefCol propDefCol, KeyDefCol keyDefCol, IRelationshipDefCol relationshipDefCol, UIDefCol uiDefCol);
    public abstract virtual ILookupList CreateSimpleLookupList(Dictionary`2<string, string> displayValueDictionary);
    public abstract virtual ILookupList CreateDatabaseLookupList(string sqlString, int timeout, string assemblyName, string className, bool limitToList);
    public abstract virtual IKeyDef CreateKeyDef(string keyName);
    public abstract virtual IPrimaryKeyDef CreatePrimaryKeyDef();
    public abstract virtual IPropDef CreatePropDef(string propertyName, string assemblyName, string typeName, PropReadWriteRule readWriteRule, string databaseFieldName, string defaultValueString, bool compulsory, bool autoIncrementing, int length, string displayName, string description, bool keepValuePrivate);
    public abstract virtual IPropRule CreatePropRuleDate(string name, string message);
    public abstract virtual IPropRule CreatePropRuleDecimal(string name, string message);
    public abstract virtual IPropRule CreatePropRuleInteger(string name, string message);
    public abstract virtual IPropRule CreatePropRuleLong(string name, string message);
    public abstract virtual IPropRule CreatePropRuleString(string name, string message);
    public abstract virtual IRelationshipDef CreateSingleRelationshipDef(string relationshipName, string relatedAssemblyName, string relatedClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, DeleteParentAction deleteParentAction, InsertParentAction insertParentAction, RelationshipType relationshipType);
    public abstract virtual IRelationshipDef CreateMultipleRelationshipDef(string relationshipName, string relatedAssemblyName, string relatedClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, string orderBy, DeleteParentAction deleteParentAction, InsertParentAction insertParentAction, RelationshipType relationshipType, int timeout);
    public abstract virtual ISuperClassDef CreateSuperClassDef(string assemblyName, string className, ORMapping orMapping, string id, string discriminator);
    public abstract virtual IUIDef CreateUIDef(string name, IUIForm uiForm, IUIGrid uiGrid);
    public abstract virtual IUIFormColumn CreateUIFormColumn();
    public abstract virtual IUIForm CreateUIFormDef();
    public abstract virtual IUIFormField CreateUIFormProperty(string label, string propertyName, string controlTypeName, string controlAssembly, string mapperTypeName, string mapperAssembly, bool editable, Nullable`1<bool> showAsCompulsory, string toolTipText, Hashtable propertyAttributes, LayoutStyle layout);
    public abstract virtual IUIFormTab CreateUIFormTab();
    public abstract virtual IUIGrid CreateUIGridDef();
    public abstract virtual IUIGridColumn CreateUIGridProperty(string heading, string propertyName, string gridControlTypeName, string gridControlAssembly, bool editable, int width, PropAlignment alignment, Hashtable propertyAttributes);
    public abstract virtual IPropDefCol CreatePropDefCol();
    public abstract virtual KeyDefCol CreateKeyDefCol();
    public abstract virtual UIDefCol CreateUIDefCol();
    public abstract virtual IRelationshipDefCol CreateRelationshipDefCol();
    public abstract virtual IRelPropDef CreateRelPropDef(string propName, string relPropName);
    public abstract virtual IRelKeyDef CreateRelKeyDef();
    public abstract virtual ClassDefCol CreateClassDefCol();
    public abstract virtual IFilterPropertyDef CreateFilterPropertyDef(string propertyName, string label, string filterType, string filterTypeAssembly, FilterClauseOperator filterClauseOperator, Dictionary`2<string, string> parameters);
    public abstract virtual IFilterDef CreateFilterDef(IList`1<IFilterPropertyDef> filterPropertyDefs);
    public abstract virtual IPropRule CreatePropRuleSingle(string name, string message);
    public abstract virtual IPropRule CreatePropRuleDouble(string name, string message);
    public abstract virtual IPropRule CreatePropRuleShort(string name, string message);
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.KeyDef : object {
    private Dictionary`2<string, IPropDef> _propDefs;
    protected bool _ignoreIfNull;
    protected string _keyName;
    protected string _keyNameBuilt;
    protected bool _buildKeyName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public bool IgnoreIfNull { get; public set; }
    public string KeyName { get; public set; }
    public string Message { get; public set; }
    public IPropDef Item { get; }
    public IPropDef Item { get; }
    public int Count { get; }
    public KeyDef(string keyName);
    public virtual bool get_IgnoreIfNull();
    public virtual void set_IgnoreIfNull(bool value);
    public sealed virtual string get_KeyName();
    public sealed virtual void set_KeyName(string value);
    private void UpdateKeyNameBuildt();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    public sealed virtual IPropDef get_Item(string propName);
    public sealed virtual IPropDef get_Item(int index);
    public virtual void Add(IPropDef propDef);
    protected void Remove(PropDef propDef);
    protected bool Contains(IPropDef propDef);
    public bool Contains(string propName);
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    internal virtual bool IsValid();
    public virtual IBOKey CreateBOKey(IBOPropCol lBOPropCol);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Habanero.BO.ClassDefinition.MultipleRelationshipDef : RelationshipDef {
    public bool OwningBOHasForeignKey { get; public set; }
    public bool IsOneToMany { get; }
    public bool IsManyToOne { get; }
    public bool IsOneToOne { get; }
    public bool IsCompulsory { get; }
    public MultipleRelationshipDef(string relationshipName, Type relatedObjectClassType, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, string orderBy, DeleteParentAction deleteParentAction);
    public MultipleRelationshipDef(string relationshipName, string relatedObjectAssemblyName, string relatedObjectClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, string orderBy, DeleteParentAction deleteParentAction);
    public MultipleRelationshipDef(string relationshipName, string relatedObjectAssemblyName, string relatedObjectClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, string orderBy, DeleteParentAction deleteParentAction, InsertParentAction insertParentAction, RelationshipType relationshipType, int timeout);
    public virtual bool get_OwningBOHasForeignKey();
    public virtual void set_OwningBOHasForeignKey(bool value);
    public virtual IRelationship CreateRelationship(IBusinessObject owningBo, IBOPropCol lBOPropCol);
    public virtual bool get_IsOneToMany();
    public virtual bool get_IsManyToOne();
    public virtual bool get_IsOneToOne();
    public virtual bool get_IsCompulsory();
}
public class Habanero.BO.ClassDefinition.PrimaryKeyDef : KeyDef {
    private bool _isGuidObjectID;
    public bool IsGuidObjectID { get; public set; }
    public bool IgnoreIfNull { get; public set; }
    public bool IsCompositeKey { get; }
    public virtual void Add(IPropDef propDef);
    public sealed virtual bool get_IsGuidObjectID();
    public sealed virtual void set_IsGuidObjectID(bool value);
    public virtual bool get_IgnoreIfNull();
    public virtual void set_IgnoreIfNull(bool value);
    public virtual IBOKey CreateBOKey(IBOPropCol lBOPropCol);
    public sealed virtual bool get_IsCompositeKey();
    public virtual string ToString();
}
public class Habanero.BO.ClassDefinition.PropDef : object {
    private static IHabaneroLogger _logger;
    private string _propertyName;
    private string _description;
    private Type _propType;
    private string _propTypeAssemblyName;
    private string _propTypeName;
    private object _defaultValue;
    private string _defaultValueString;
    private bool _hasDefaultValueBeenValidated;
    private ILookupList _lookupList;
    private string _displayName;
    private IDataMapper _propDataMapper;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Persistable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UnitOfMeasure>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IPropRule> <PropRules>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <DatabaseFieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Compulsory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropReadWriteRule <ReadWriteRule>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <AutoIncrementing>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <KeepValuePrivate>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClassDef <ClassDef>k__BackingField;
    public bool Persistable { get; public set; }
    public string UnitOfMeasure { get; public set; }
    public List`1<IPropRule> PropRules { get; private set; }
    public string DatabaseFieldName { get; public set; }
    public bool Compulsory { get; public set; }
    public PropReadWriteRule ReadWriteRule { get; public set; }
    public string PropertyName { get; public set; }
    public string DisplayName { get; }
    public string Description { get; public set; }
    public string PropertyTypeAssemblyName { get; public set; }
    public string PropertyTypeName { get; public set; }
    public Type PropertyType { get; public set; }
    public object DefaultValue { get; public set; }
    public string DefaultValueString { get; public set; }
    public ILookupList LookupList { get; public set; }
    public bool AutoIncrementing { get; public set; }
    public int Length { get; private set; }
    public bool KeepValuePrivate { get; public set; }
    public IClassDef ClassDef { get; public set; }
    private Type MyPropertyType { get; private set; }
    private object MyDefaultValue { get; private set; }
    public string DisplayNameFull { get; }
    public string ClassName { get; }
    public IDataMapper DataMapper { get; }
    public PropDef(string propertyName, Type propType, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue);
    public PropDef(string propertyName, Type propType, PropReadWriteRule propRWStatus, object defaultValue);
    public PropDef(string propertyName, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, string defaultValueString, bool compulsory, bool autoIncrementing);
    internal PropDef(string propertyName, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, string defaultValueString, bool compulsory, bool autoIncrementing, int length);
    public PropDef(string propertyName, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, string defaultValueString, bool compulsory, bool autoIncrementing, int length, string displayName, string description, bool keepValuePrivate);
    public PropDef(string propertyName, Type propType, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, bool compulsory, bool autoIncrementing, int length, string displayName, string description);
    public PropDef(string propertyName, Type propType, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, bool compulsory, bool autoIncrementing);
    internal PropDef(string propertyName, Type propType, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, bool compulsory, bool autoIncrementing, int length, string displayName, string description, bool keepValuePrivate);
    private PropDef(string propertyName, Type propType, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, string defaultValueString);
    private PropDef(string propertyName, Type propType, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, string defaultValueString, bool compulsory);
    private PropDef(string propertyName, Type propType, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, string defaultValueString, bool compulsory, bool autoIncrementing);
    private PropDef(string propertyName, Type propType, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, string defaultValueString, bool compulsory, bool autoIncrementing, int length);
    private PropDef(string propertyName, Type propType, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, string defaultValueString, bool compulsory, bool autoIncrementing, int length, string displayName);
    private PropDef(string propertyName, Type propType, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, string defaultValueString, bool compulsory, bool autoIncrementing, int length, string displayName, string description, bool keepValuePrivate);
    private PropDef(string propertyName, Type propType, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, string defaultValueString, bool compulsory, bool autoIncrementing, int length, string displayName, string description);
    private static PropDef();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Persistable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Persistable(bool value);
    [CompilerGeneratedAttribute]
public string get_UnitOfMeasure();
    [CompilerGeneratedAttribute]
public void set_UnitOfMeasure(string value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IPropRule> get_PropRules();
    [CompilerGeneratedAttribute]
private void set_PropRules(List`1<IPropRule> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DatabaseFieldName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DatabaseFieldName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Compulsory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Compulsory(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PropReadWriteRule get_ReadWriteRule();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReadWriteRule(PropReadWriteRule value);
    private void SetupPropDef(string propertyName, Type propType, string assemblyName, string typeName, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue, string defaultValueString, bool compulsory, bool autoIncrementing, int length, string displayName, string description, bool keepValuePrivate);
    private static string GetDisplayName(string propertyName);
    public sealed virtual string get_PropertyName();
    public sealed virtual void set_PropertyName(string value);
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual string get_PropertyTypeAssemblyName();
    public sealed virtual void set_PropertyTypeAssemblyName(string value);
    public sealed virtual string get_PropertyTypeName();
    public sealed virtual void set_PropertyTypeName(string value);
    public sealed virtual Type get_PropertyType();
    public sealed virtual void set_PropertyType(Type value);
    public sealed virtual object get_DefaultValue();
    public sealed virtual void set_DefaultValue(object value);
    public sealed virtual string get_DefaultValueString();
    public sealed virtual void set_DefaultValueString(string value);
    public virtual ILookupList get_LookupList();
    public virtual void set_LookupList(ILookupList value);
    public sealed virtual bool HasLookupList();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoIncrementing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoIncrementing(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepValuePrivate();
    [CompilerGeneratedAttribute]
public void set_KeepValuePrivate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IClassDef get_ClassDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClassDef(IClassDef value);
    public sealed virtual bool IsValueValid(object propValue, String& errorMessage);
    private bool IsLookupItemValid(object propValue, String& errorMessage);
    private bool IsStringLengthValid(object propValue, string displayNameFull, String& errorMessage);
    private static bool IsValueObjectValid(object propValueParsedToCorrectType, String& errorMessage);
    private static bool IsNullOrEmpty(object propValue);
    protected bool IsLookupListItemValid(object propValue, String& errorMessage);
    protected bool CheckBusinessObjectMeetsLookupListCriteria(object propValue, IBusinessObject businessObject, BusinessObjectLookupList list, String& errorMessage);
    internal IBusinessObject GetlookupBusinessObjectFromObjectManager(object propValue);
    private bool IsValueValidType(object propValue, String& errorMessage);
    private string GetErrorMessage(object propValue);
    public sealed virtual IBOProp CreateBOProp(bool assignDefaultValue);
    public sealed virtual IPropertyComparer`1<T> GetPropertyComparer();
    private Type get_MyPropertyType();
    private void set_MyPropertyType(Type value);
    private object get_MyDefaultValue();
    private void set_MyDefaultValue(object value);
    private object ChangeType(object valueToChange);
    public sealed virtual string get_DisplayNameFull();
    public sealed virtual string get_ClassName();
    private void ValidateDefaultValue(object defaultValue);
    public sealed virtual void AddPropRule(IPropRule rule);
    public sealed virtual IPropDef Clone();
    public virtual bool Equals(object obj);
    public bool Equals(PropDef obj);
    public virtual int GetHashCode();
    public sealed virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
    public sealed virtual string ConvertValueToString(object value);
    public sealed virtual IDataMapper get_DataMapper();
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.PropDefCol : object {
    private Dictionary`2<string, IPropDef> _propDefs;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClassDef <ClassDef>k__BackingField;
    public IPropDef Item { get; }
    public int Count { get; }
    public IClassDef ClassDef { get; public set; }
    public sealed virtual IPropDef get_Item(string propertyName);
    public sealed virtual void Add(IPropDef propDef);
    public sealed virtual void Remove(IPropDef propDef);
    public sealed virtual bool Contains(IPropDef propDef);
    public sealed virtual bool Contains(string propertyName);
    public sealed virtual IBOPropCol CreateBOPropertyCol(bool isNewObject);
    public sealed virtual int get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IPropDefCol Clone();
    public sealed virtual IPropDefCol Clone(bool clonePropDefs);
    private sealed virtual override IEnumerator`1<IPropDef> System.Collections.Generic.IEnumerable<Habanero.Base.IPropDef>.GetEnumerator();
    public virtual bool Equals(object obj);
    public bool Equals(PropDefCol obj);
    public virtual int GetHashCode();
    public sealed virtual void Add(IEnumerable`1<IPropDef> propDefCol);
    [CompilerGeneratedAttribute]
public sealed virtual IClassDef get_ClassDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClassDef(IClassDef value);
    internal IPropDef Add(string propName, Type propType, PropReadWriteRule propRWStatus, string databaseFieldName, object defaultValue);
    internal IPropDef Add(string propName, Type propType, PropReadWriteRule propRWStatus, object defaultValue);
    private void CheckPropNotAlreadyAdded(string propName);
}
public abstract class Habanero.BO.ClassDefinition.RelationshipDef : object {
    private Type _relatedObjectClassType;
    private string _relatedObjectAssemblyName;
    private string _relatedObjectClassName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClassDef <OwningClassDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RelationshipName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IRelKeyDef <RelKeyDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <KeepReferenceToRelatedObject>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RelatedObjectTypeParameter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DeleteParentAction <DeleteParentAction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PreventDeleteMessage>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InsertParentAction <InsertParentAction>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IOrderCriteria <OrderCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OrderCriteriaString>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private RelationshipType <RelationshipType>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ReverseRelationshipName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <OwningBOHasPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TimeOut>k__BackingField;
    public bool IsCompulsory { get; }
    public IClassDef OwningClassDef { get; public set; }
    public string OwningClassName { get; }
    public string RelationshipName { get; protected set; }
    public string RelatedObjectAssemblyName { get; protected set; }
    public string RelatedObjectClassName { get; protected set; }
    public Type RelatedObjectClassType { get; protected set; }
    public IRelKeyDef RelKeyDef { get; protected set; }
    public bool KeepReferenceToRelatedObject { get; protected set; }
    public IClassDef RelatedObjectClassDef { get; }
    public string RelatedObjectClassNameWithTypeParameter { get; }
    public string RelatedObjectTypeParameter { get; public set; }
    private Type MyRelatedObjectClassType { get; private set; }
    public DeleteParentAction DeleteParentAction { get; public set; }
    public string PreventDeleteMessage { get; public set; }
    public InsertParentAction InsertParentAction { get; public set; }
    public IOrderCriteria OrderCriteria { get; protected set; }
    public string OrderCriteriaString { get; protected set; }
    public RelationshipType RelationshipType { get; public set; }
    public bool OwningBOHasForeignKey { get; public set; }
    public string ReverseRelationshipName { get; public set; }
    public Nullable`1<bool> OwningBOHasPrimaryKey { get; public set; }
    public int TimeOut { get; public set; }
    public bool IsOneToMany { get; }
    public bool IsManyToOne { get; }
    public bool IsOneToOne { get; }
    protected RelationshipDef(string relationshipName, Type relatedObjectClassType, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, DeleteParentAction deleteParentAction);
    protected RelationshipDef(string relationshipName, string relatedObjectAssemblyName, string relatedObjectClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, DeleteParentAction deleteParentAction, InsertParentAction insertParentAction, RelationshipType relationshipType);
    private RelationshipDef(string relationshipName, Type relatedObjectClassType, string relatedObjectAssemblyName, string relatedObjectClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, DeleteParentAction deleteParentAction, InsertParentAction insertParentAction, RelationshipType relationshipType);
    public abstract virtual bool get_IsCompulsory();
    [CompilerGeneratedAttribute]
public sealed virtual IClassDef get_OwningClassDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OwningClassDef(IClassDef value);
    public sealed virtual string get_OwningClassName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RelationshipName();
    [CompilerGeneratedAttribute]
protected void set_RelationshipName(string value);
    public sealed virtual string get_RelatedObjectAssemblyName();
    protected void set_RelatedObjectAssemblyName(string value);
    public sealed virtual string get_RelatedObjectClassName();
    protected void set_RelatedObjectClassName(string value);
    public Type get_RelatedObjectClassType();
    protected void set_RelatedObjectClassType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual IRelKeyDef get_RelKeyDef();
    [CompilerGeneratedAttribute]
protected void set_RelKeyDef(IRelKeyDef value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepReferenceToRelatedObject();
    [CompilerGeneratedAttribute]
protected void set_KeepReferenceToRelatedObject(bool value);
    public sealed virtual IClassDef get_RelatedObjectClassDef();
    protected bool RelatedClassDefLoaded();
    public sealed virtual string get_RelatedObjectClassNameWithTypeParameter();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RelatedObjectTypeParameter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RelatedObjectTypeParameter(string value);
    private Type get_MyRelatedObjectClassType();
    private void set_MyRelatedObjectClassType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual DeleteParentAction get_DeleteParentAction();
    [CompilerGeneratedAttribute]
public void set_DeleteParentAction(DeleteParentAction value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PreventDeleteMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreventDeleteMessage(string value);
    [CompilerGeneratedAttribute]
public virtual InsertParentAction get_InsertParentAction();
    [CompilerGeneratedAttribute]
public virtual void set_InsertParentAction(InsertParentAction value);
    [CompilerGeneratedAttribute]
public sealed virtual IOrderCriteria get_OrderCriteria();
    [CompilerGeneratedAttribute]
protected void set_OrderCriteria(IOrderCriteria value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OrderCriteriaString();
    [CompilerGeneratedAttribute]
protected void set_OrderCriteriaString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RelationshipType get_RelationshipType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RelationshipType(RelationshipType value);
    public abstract virtual bool get_OwningBOHasForeignKey();
    public abstract virtual void set_OwningBOHasForeignKey(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReverseRelationshipName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReverseRelationshipName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OwningBOHasPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_OwningBOHasPrimaryKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TimeOut();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeOut(int value);
    public abstract virtual IRelationship CreateRelationship(IBusinessObject owningBo, IBOPropCol lBOPropCol);
    public sealed virtual void CheckCanAddChild(IBusinessObject bo);
    public sealed virtual void CheckCanRemoveChild(IBusinessObject bo);
    public abstract virtual bool get_IsOneToMany();
    public abstract virtual bool get_IsManyToOne();
    public abstract virtual bool get_IsOneToOne();
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.RelationshipDefCol : object {
    private Dictionary`2<string, IRelationshipDef> _relDefs;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClassDef <ClassDef>k__BackingField;
    public IRelationshipDef Item { get; }
    public int Count { get; }
    public IClassDef ClassDef { get; public set; }
    public sealed virtual void Add(IRelationshipDef relationshipDef);
    protected void Remove(IRelationshipDef relationshipDef);
    protected bool Contains(IRelationshipDef relationshipDef);
    public sealed virtual bool Contains(string keyName);
    public sealed virtual IRelationshipDef get_Item(string relationshipName);
    public RelationshipCol CreateRelationshipCol(IBOPropCol lBoPropCol, IBusinessObject bo);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual IClassDef get_ClassDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClassDef(IClassDef value);
    public sealed virtual IEnumerator`1<IRelationshipDef> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.RelKeyDef : object {
    private Dictionary`2<string, IRelPropDef> _relPropDefs;
    public IRelPropDef Item { get; }
    public int Count { get; }
    public sealed virtual IRelPropDef get_Item(string propName);
    public virtual void Add(IRelPropDef relPropDef);
    protected void Remove(IRelPropDef relPropDef);
    protected internal bool Contains(IRelPropDef relPropDef);
    public sealed virtual bool Contains(string propName);
    public sealed virtual IRelKey CreateRelKey(IBOPropCol lBoPropCol);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<IRelPropDef> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Habanero.BO.ClassDefinition.RelPropDef : object {
    private string _ownerPropDefName;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RelatedClassPropName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPropDef <OwnerPropDef>k__BackingField;
    public string RelatedClassPropName { get; protected set; }
    public IPropDef OwnerPropDef { get; protected set; }
    public string OwnerPropertyName { get; }
    public RelPropDef(IPropDef ownerClassPropDef, string relatedObjectPropName);
    public RelPropDef(string ownerClassPropDefName, string relatedObjectPropName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RelatedClassPropName();
    [CompilerGeneratedAttribute]
protected void set_RelatedClassPropName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IPropDef get_OwnerPropDef();
    [CompilerGeneratedAttribute]
protected void set_OwnerPropDef(IPropDef value);
    public sealed virtual string get_OwnerPropertyName();
    protected internal IRelProp CreateRelProp(IBOPropCol boPropCol);
}
public class Habanero.BO.ClassDefinition.SingleRelationshipDef : RelationshipDef {
    private bool _setAsOneToOne;
    private bool _setAsCompulsory;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OwningBOHasForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropReadWriteRule <ReadWriteRule>k__BackingField;
    public bool OwningBOHasForeignKey { get; public set; }
    public bool IsOneToMany { get; }
    public bool IsManyToOne { get; }
    public bool IsOneToOne { get; }
    public bool IsCompulsory { get; }
    public string DisplayName { get; }
    public string Description { get; public set; }
    public string PropertyTypeAssemblyName { get; public set; }
    public List`1<IPropRule> PropRules { get; }
    public ILookupList LookupList { get; public set; }
    public PropReadWriteRule ReadWriteRule { get; public set; }
    public string PropertyTypeName { get; public set; }
    public Type PropertyType { get; public set; }
    public bool Compulsory { get; public set; }
    public string PropertyName { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public string DisplayNameFull { get; }
    public string ClassName { get; }
    public SingleRelationshipDef(string relationshipName, Type relatedObjectClassType, RelKeyDef relKeyDef, bool keepReferenceToRelatedObject, DeleteParentAction deleteParentAction);
    public SingleRelationshipDef(string relationshipName, string relatedObjectAssemblyName, string relatedObjectClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, DeleteParentAction deleteParentAction);
    public SingleRelationshipDef(string relationshipName, string relatedObjectAssemblyName, string relatedObjectClassName, IRelKeyDef relKeyDef, bool keepReferenceToRelatedObject, DeleteParentAction deleteParentAction, InsertParentAction insertParentAction, RelationshipType relationshipType);
    [CompilerGeneratedAttribute]
public virtual bool get_OwningBOHasForeignKey();
    [CompilerGeneratedAttribute]
public virtual void set_OwningBOHasForeignKey(bool value);
    public virtual IRelationship CreateRelationship(IBusinessObject owningBo, IBOPropCol lBOPropCol);
    public virtual bool get_IsOneToMany();
    public virtual bool get_IsManyToOne();
    public virtual bool get_IsOneToOne();
    private bool ReverseRelationshipIsSingle();
    private bool HasReverseRelationshipDefined();
    private IRelationshipDef GetReverseRelationshipDef();
    public virtual bool get_IsCompulsory();
    public void SetAsOneToOne();
    public void SetAsCompulsory();
    private bool AreAllPropsCompulsory();
    private bool PropDefIsCompulsory(IRelPropDef def);
    public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    public sealed virtual string get_PropertyTypeAssemblyName();
    public sealed virtual void set_PropertyTypeAssemblyName(string value);
    public sealed virtual List`1<IPropRule> get_PropRules();
    public sealed virtual ILookupList get_LookupList();
    public sealed virtual void set_LookupList(ILookupList value);
    [CompilerGeneratedAttribute]
public sealed virtual PropReadWriteRule get_ReadWriteRule();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReadWriteRule(PropReadWriteRule value);
    public sealed virtual string get_PropertyTypeName();
    public sealed virtual void set_PropertyTypeName(string value);
    public sealed virtual Type get_PropertyType();
    public sealed virtual void set_PropertyType(Type value);
    public sealed virtual bool get_Compulsory();
    public sealed virtual void set_Compulsory(bool value);
    public sealed virtual string get_PropertyName();
    public sealed virtual void set_PropertyName(string value);
    public sealed virtual IClassDef get_ClassDef();
    public sealed virtual void set_ClassDef(IClassDef value);
    public sealed virtual string get_DisplayNameFull();
    public sealed virtual string get_ClassName();
}
public class Habanero.BO.ClassDefinition.SuperClassDef : object {
    private ORMapping _orMapping;
    private IClassDef _superClassClassDef;
    private string _className;
    private string _assemblyName;
    private string _id;
    private string _discriminator;
    private string _typeParameter;
    public ORMapping ORMapping { get; public set; }
    public string AssemblyName { get; public set; }
    public string ClassName { get; public set; }
    public string TypeParameter { get; public set; }
    public string ID { get; public set; }
    public string Discriminator { get; public set; }
    public IClassDef SuperClassClassDef { get; public set; }
    public IClassDef MySuperClassDef { get; public set; }
    public SuperClassDef(IClassDef superClassDef, ORMapping mapping);
    public SuperClassDef(string assemblyName, string className, ORMapping mapping, string id, string discriminator);
    public sealed virtual ORMapping get_ORMapping();
    public sealed virtual void set_ORMapping(ORMapping value);
    public sealed virtual string get_AssemblyName();
    public sealed virtual void set_AssemblyName(string value);
    public sealed virtual string get_ClassName();
    public sealed virtual void set_ClassName(string value);
    public sealed virtual string get_TypeParameter();
    public sealed virtual void set_TypeParameter(string value);
    public sealed virtual string get_ID();
    public sealed virtual void set_ID(string value);
    public sealed virtual string get_Discriminator();
    public sealed virtual void set_Discriminator(string value);
    public sealed virtual IClassDef get_SuperClassClassDef();
    public sealed virtual void set_SuperClassClassDef(IClassDef value);
    public IClassDef get_MySuperClassDef();
    public void set_MySuperClassDef(IClassDef value);
}
public class Habanero.BO.ClassDefinition.UIDef : object {
    private string _name;
    private IUIForm _uiForm;
    private IUIGrid _uiGrid;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UIDefCol <UIDefCol>k__BackingField;
    private IClassDef _classDef;
    public string Name { get; public set; }
    public IUIForm UIForm { get; public set; }
    public IUIGrid UIGrid { get; public set; }
    public UIDefCol UIDefCol { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public string ClassName { get; }
    public UIDef(string name, IUIForm uiForm, IUIGrid uiGrid);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IUIForm get_UIForm();
    public sealed virtual void set_UIForm(IUIForm value);
    public sealed virtual IUIGrid get_UIGrid();
    public sealed virtual void set_UIGrid(IUIGrid value);
    [CompilerGeneratedAttribute]
public sealed virtual UIDefCol get_UIDefCol();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UIDefCol(UIDefCol value);
    public sealed virtual IClassDef get_ClassDef();
    public sealed virtual void set_ClassDef(IClassDef value);
    public sealed virtual string get_ClassName();
    [ObsoleteAttribute("V 2.5 Please use the UIForm property instead as it returns the same UIForm. This method will be removed in later versions of Habanero")]
public sealed virtual IUIForm GetUIFormProperties();
    [ObsoleteAttribute("V 2.5 Please use the UIGrid property instead as it returns the same UIGrid. This method will be removed in later versions of Habanero")]
public sealed virtual IUIGrid GetUIGridProperties();
    public sealed virtual IUIFormField GetFormField(string propertyName);
    public static bool op_Equality(UIDef a, UIDef b);
    public static bool op_Inequality(UIDef a, UIDef b);
    public sealed virtual IUIDef Clone();
    public sealed virtual bool Equals(UIDef otherUIDef);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.UIForm : object {
    private IList _tabList;
    private int _width;
    private int _height;
    private string _title;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUIDef <UIDef>k__BackingField;
    private IClassDef _classDef;
    public IUIFormTab Item { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public string Title { get; public set; }
    public IUIDef UIDef { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public UIForm(UIFormTab[] uiFormTabs);
    public sealed virtual void Add(IUIFormTab tab);
    public sealed virtual void Remove(IUIFormTab tab);
    public sealed virtual bool Contains(IUIFormTab tab);
    public sealed virtual IUIFormTab get_Item(int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void set_Width(int value);
    public sealed virtual int get_Width();
    public sealed virtual void set_Height(int value);
    public sealed virtual int get_Height();
    public sealed virtual void set_Title(string value);
    public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual IUIDef get_UIDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UIDef(IUIDef value);
    public sealed virtual IClassDef get_ClassDef();
    public sealed virtual void set_ClassDef(IClassDef value);
    public static bool op_Equality(UIForm a, UIForm b);
    public static bool op_Inequality(UIForm a, UIForm b);
    public IUIForm Clone();
    public sealed virtual bool Equals(UIForm otherUIForm);
    private sealed virtual override IEnumerator`1<IUIFormTab> System.Collections.Generic.IEnumerable<Habanero.BO.ClassDefinition.IUIFormTab>.GetEnumerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.UIFormColumn : object {
    private IList _list;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUIFormTab <UIFormTab>k__BackingField;
    public IUIFormField Item { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public int Width { get; public set; }
    public IUIFormTab UIFormTab { get; public set; }
    public UIFormColumn(UIFormField[] uiFormFields);
    public UIFormColumn(int width);
    public sealed virtual void Add(IUIFormField field);
    public sealed virtual void Remove(IUIFormField field);
    public sealed virtual bool Contains(IUIFormField field);
    public sealed virtual IUIFormField get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Width(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IUIFormTab get_UIFormTab();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UIFormTab(IUIFormTab value);
    public IUIFormColumn Clone();
    public virtual bool Equals(object obj);
    public static bool op_Equality(UIFormColumn a, UIFormColumn b);
    public static bool op_Inequality(UIFormColumn a, UIFormColumn b);
    public int GetRowsRequired();
    public int GetRowSpanForColumnToTheRight(int columnsRight);
    public bool Equals(IUIFormColumn obj);
    public virtual int GetHashCode();
    public sealed virtual void Insert(int index, IUIFormField formField);
}
public class Habanero.BO.ClassDefinition.UIFormField : object {
    private string _controlAssembly;
    private string _controlTypeName;
    private Type _controlType;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MapperTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MapperAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <ShowAsCompulsory>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Hashtable <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUIFormColumn <UIFormColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private LayoutStyle <Layout>k__BackingField;
    private IClassDef _classDef;
    public string Label { get; public set; }
    public string PropertyName { get; public set; }
    public string MapperTypeName { get; public set; }
    public string MapperAssembly { get; private set; }
    public string ControlAssemblyName { get; public set; }
    public string ControlTypeName { get; public set; }
    public Type ControlType { get; public set; }
    public Nullable`1<bool> ShowAsCompulsory { get; public set; }
    public bool Editable { get; public set; }
    public string ToolTipText { get; private set; }
    public Hashtable Parameters { get; private set; }
    private string LabelSuffix { get; }
    private Type MyControlType { get; private set; }
    public int RowSpan { get; }
    public int ColSpan { get; }
    public bool IsCompulsory { get; }
    public bool KeepValuePrivate { get; }
    public IUIFormColumn UIFormColumn { get; public set; }
    public string Alignment { get; }
    public string DecimalPlaces { get; }
    public string Options { get; }
    public string IsEmail { get; }
    public string DateFormat { get; }
    public LayoutStyle Layout { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public UIFormField(string label, string propertyName);
    public UIFormField(string label, string propertyName, Type controlType, string mapperTypeName, string mapperAssembly, bool editable, string toolTipText, Hashtable parameters, LayoutStyle layout);
    public UIFormField(string label, string propertyName, string controlTypeName, string controlAssembly, string mapperTypeName, string mapperAssembly, bool editable, Nullable`1<bool> showAsComulsory, string toolTipText, Hashtable parameters, LayoutStyle layout);
    private UIFormField(string label, string propertyName, Type controlType, string controlTypeName, string controlAssembly, string mapperTypeName, string mapperAssembly, bool editable, Nullable`1<bool> showAsCompulsory, string toolTipText, Hashtable parameters, LayoutStyle layout);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Label();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Label(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MapperTypeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MapperTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MapperAssembly();
    [CompilerGeneratedAttribute]
private void set_MapperAssembly(string value);
    public sealed virtual string get_ControlAssemblyName();
    public sealed virtual void set_ControlAssemblyName(string value);
    public sealed virtual string get_ControlTypeName();
    public sealed virtual void set_ControlTypeName(string value);
    public sealed virtual Type get_ControlType();
    public sealed virtual void set_ControlType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_ShowAsCompulsory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowAsCompulsory(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Editable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Editable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTipText();
    [CompilerGeneratedAttribute]
private void set_ToolTipText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Hashtable get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(Hashtable value);
    public IPropDef GetPropDefIfExists(IClassDef classDef);
    public string GetToolTipText();
    public string GetToolTipText(IClassDef classDef);
    public sealed virtual string GetLabel();
    public string GetLabel(IClassDef classDef);
    private string GetIsCompulsoryIndicator();
    private string get_LabelSuffix();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UIFormField a, UIFormField b);
    public static bool op_Inequality(UIFormField a, UIFormField b);
    public sealed virtual object GetParameterValue(string parameterName);
    public sealed virtual bool HasParameterValue(string parameterName);
    private Type get_MyControlType();
    private void set_MyControlType(Type value);
    public int get_RowSpan();
    public int get_ColSpan();
    public sealed virtual bool get_IsCompulsory();
    public virtual bool get_KeepValuePrivate();
    [CompilerGeneratedAttribute]
public sealed virtual IUIFormColumn get_UIFormColumn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UIFormColumn(IUIFormColumn value);
    public string get_Alignment();
    public string get_DecimalPlaces();
    public string get_Options();
    public string get_IsEmail();
    public string get_DateFormat();
    [CompilerGeneratedAttribute]
public sealed virtual LayoutStyle get_Layout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Layout(LayoutStyle value);
    public sealed virtual IClassDef get_ClassDef();
    public sealed virtual void set_ClassDef(IClassDef value);
    [ObsoleteAttribute("V2.6 Use ClassDef Property Instead")]
public virtual IClassDef GetClassDef();
}
public class Habanero.BO.ClassDefinition.UIFormGrid : object {
    private string _relationshipName;
    private Type _gridType;
    private string _correspondingRelationshipName;
    public string RelationshipName { get; public set; }
    public Type GridType { get; public set; }
    public string CorrespondingRelationshipName { get; public set; }
    public UIFormGrid(string relationshipName, Type gridType, string correspondingRelationshipName);
    public sealed virtual string get_RelationshipName();
    public sealed virtual void set_RelationshipName(string value);
    public sealed virtual Type get_GridType();
    public sealed virtual void set_GridType(Type value);
    public sealed virtual string get_CorrespondingRelationshipName();
    public sealed virtual void set_CorrespondingRelationshipName(string value);
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.UIFormTab : object {
    private IList _list;
    private string _name;
    private IUIFormGrid _uiFormGrid;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUIForm <UIForm>k__BackingField;
    public IUIFormColumn Item { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public string Name { get; public set; }
    public IUIFormGrid UIFormGrid { get; public set; }
    public IUIForm UIForm { get; public set; }
    public UIFormTab(UIFormColumn[] uiFormColumns);
    public UIFormTab(string name);
    public sealed virtual void Add(IUIFormColumn column);
    public sealed virtual void Remove(IUIFormColumn column);
    public sealed virtual bool Contains(IUIFormColumn column);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IUIFormColumn get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual void set_UIFormGrid(IUIFormGrid value);
    public sealed virtual IUIFormGrid get_UIFormGrid();
    [CompilerGeneratedAttribute]
public sealed virtual IUIForm get_UIForm();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UIForm(IUIForm value);
    public static bool op_Equality(UIFormTab a, UIFormTab b);
    public static bool op_Inequality(UIFormTab a, UIFormTab b);
    public IUIFormTab Clone();
    public sealed virtual bool Equals(IUIFormTab uiFormTab);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int GetMaxFieldCount();
    public int GetMaxRowsInColumns();
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.UIGrid : object {
    private ArrayList _list;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SortColumn>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IFilterDef <FilterDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUIDef <UIDef>k__BackingField;
    public IUIGridColumn Item { get; }
    public IUIGridColumn Item { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public string SortColumn { get; public set; }
    public IFilterDef FilterDef { get; public set; }
    public IUIDef UIDef { get; public set; }
    public IClassDef ClassDef { get; }
    public sealed virtual void Add(IUIGridColumn prop);
    public sealed virtual void Remove(IUIGridColumn prop);
    public sealed virtual bool Contains(IUIGridColumn prop);
    public sealed virtual IUIGridColumn get_Item(int index);
    public sealed virtual IUIGridColumn get_Item(string propName);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SortColumn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortColumn(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFilterDef get_FilterDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterDef(IFilterDef value);
    [CompilerGeneratedAttribute]
public sealed virtual IUIDef get_UIDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UIDef(IUIDef value);
    public sealed virtual IClassDef get_ClassDef();
    private sealed virtual override IEnumerator`1<IUIGridColumn> System.Collections.Generic.IEnumerable<Habanero.BO.ClassDefinition.IUIGridColumn>.GetEnumerator();
    public virtual bool Equals(object obj);
    public static bool op_Equality(UIGrid a, UIGrid b);
    public static bool op_Inequality(UIGrid a, UIGrid b);
    public UIGrid Clone();
    public bool Equals(IUIGrid obj);
    public virtual int GetHashCode();
}
public class Habanero.BO.ClassDefinition.UIGridColumn : object {
    private string _propertyName;
    private Type _gridControlType;
    protected IPropDef _propDef;
    private bool _editable;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Heading>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PropAlignment <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Hashtable <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <GridControlTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <GridControlAssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IUIGrid <UIGrid>k__BackingField;
    public string Heading { get; public set; }
    public string PropertyName { get; public set; }
    public Type GridControlType { get; public set; }
    public bool Editable { get; public set; }
    public int Width { get; public set; }
    public PropAlignment Alignment { get; public set; }
    public Hashtable Parameters { get; private set; }
    public string GridControlTypeName { get; public set; }
    public string GridControlAssemblyName { get; public set; }
    public IUIGrid UIGrid { get; public set; }
    public IClassDef ClassDef { get; }
    public ILookupList LookupList { get; }
    public IPropDef PropDef { get; }
    public bool HasPropDef { get; }
    public UIGridColumn(string heading, string propertyName, string gridControlTypeName, string gridControlAssembly, bool editable, int width, PropAlignment alignment, Hashtable parameters);
    public UIGridColumn(string heading, string propertyName, Type gridControlType, bool editable, int width, PropAlignment alignment, Hashtable parameters);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Heading();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Heading(string value);
    public sealed virtual string get_PropertyName();
    public sealed virtual void set_PropertyName(string value);
    public Type get_GridControlType();
    public void set_GridControlType(Type value);
    public sealed virtual bool get_Editable();
    public sealed virtual void set_Editable(bool value);
    private bool DetermineIsEditable();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Width(int value);
    [CompilerGeneratedAttribute]
public sealed virtual PropAlignment get_Alignment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Alignment(PropAlignment value);
    [CompilerGeneratedAttribute]
public sealed virtual Hashtable get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(Hashtable value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_GridControlTypeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GridControlTypeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_GridControlAssemblyName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GridControlAssemblyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IUIGrid get_UIGrid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UIGrid(IUIGrid value);
    public virtual IClassDef get_ClassDef();
    public sealed virtual ILookupList get_LookupList();
    public sealed virtual string GetHeading();
    [ObsoleteAttribute("This is no longer necessary since the UIGridColumn can now return its associated classDef.")]
public sealed virtual string GetHeading(IClassDef classDef);
    public sealed virtual Type GetPropertyType();
    public virtual IPropDef get_PropDef();
    public sealed virtual bool get_HasPropDef();
    private bool PropDefIsEditable();
    private bool PropDefIsReadOnly();
    private bool DoesVirtualPropertyHaveSetter();
    private bool IsPropertyReflective();
    public sealed virtual object GetParameterValue(string parameterName);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UIGridColumn a, UIGridColumn b);
    public static bool op_Inequality(UIGridColumn a, UIGridColumn b);
    public IUIGridColumn Clone();
}
public class Habanero.BO.Comparer.DateTimeComparer`1 : object {
    private string _propName;
    public DateTimeComparer`1(string propName);
    public sealed virtual int Compare(T x, T y);
}
public class Habanero.BO.Comparer.DoubleComparer`1 : PropertyComparer`2<T, double> {
    public DoubleComparer`1(string propName);
}
public class Habanero.BO.Comparer.GuidComparer`1 : object {
    private string _propName;
    public GuidComparer`1(string propName);
    public sealed virtual int Compare(T x, T y);
}
public class Habanero.BO.Comparer.IntComparer`1 : object {
    private string _propName;
    public IntComparer`1(string propName);
    public sealed virtual int Compare(T x, T y);
}
public class Habanero.BO.Comparer.PropertyComparer`2 : object {
    private string _propertyName;
    private Source _source;
    public string PropertyName { get; public set; }
    public Source Source { get; public set; }
    public Type PropertyType { get; }
    public PropertyComparer`2(string propName);
    public sealed virtual string get_PropertyName();
    public sealed virtual void set_PropertyName(string value);
    public sealed virtual Source get_Source();
    public sealed virtual void set_Source(Source value);
    public sealed virtual Type get_PropertyType();
    public sealed virtual int Compare(TBusinessObject x, TBusinessObject y);
    private static int CompareValues(object left, object right);
}
public class Habanero.BO.Comparer.ReflectedPropertyComparer`1 : object {
    private PropertyInfo _propInfo;
    public ReflectedPropertyComparer`1(string propertyName);
    public sealed virtual int Compare(T x, T y);
}
public class Habanero.BO.Comparer.SingleComparer`1 : object {
    private string _propName;
    public SingleComparer`1(string propName);
    public sealed virtual int Compare(T x, T y);
}
public class Habanero.BO.Comparer.StringComparer`1 : object {
    private string _propName;
    public StringComparer`1(string propName);
    public sealed virtual int Compare(T x, T y);
}
public class Habanero.BO.Comparer.TimeSpanComparer`1 : object {
    private string _propName;
    public TimeSpanComparer`1(string propName);
    public sealed virtual int Compare(T x, T y);
}
public enum Habanero.BO.ConstructForFakes : Enum {
    public int value__;
    public static ConstructForFakes True;
}
public class Habanero.BO.CriteriaManager.Expression : object {
    private IExpression _leftExpression;
    private SqlOperator _sqlOperator;
    private IExpression _rightExpression;
    private static String[] _operators;
    public IExpression LeftExpression { get; }
    public SqlOperator SqlOperator { get; }
    public IExpression RightExpression { get; }
    public Expression(IExpression leftExpression, SqlOperator expressionSqlOperator, IExpression rightExpression);
    private Expression(string expressionString);
    private static Expression();
    public IExpression get_LeftExpression();
    public SqlOperator get_SqlOperator();
    public IExpression get_RightExpression();
    public sealed virtual void SetParameterSqlInfo(IParameterSqlInfo info);
    public sealed virtual IExpression Clone();
    public sealed virtual string ExpressionString();
    public sealed virtual void SqlExpressionString(ISqlStatement statement, string tableNameFieldNameLeftSeparator, string tableNameFieldNameRightSeparator);
    public static IExpression CreateExpression(string expressionClause);
    public static IExpression AppendExpression(IExpression leftExpression, SqlOperator expressionSqlOperator, string expressionClause);
}
public class Habanero.BO.CriteriaManager.Parameter : object {
    private string _parameterName;
    private string _tableName;
    private string _fieldName;
    private string _sqlOperator;
    private string _parameterValue;
    private ParameterType _parameterType;
    private static string _defaultValueSeperator;
    public string ParameterName { get; }
    public Parameter(string parameterClause);
    public Parameter(string parameterName, string sqlOperator, string parameterValue);
    public Parameter(string parameterName, string fieldName, string sqlOperator, string parameterValue);
    public Parameter(string parameterName, string tableName, string fieldName, string sqlOperator, string parameterValue);
    public Parameter(string parameterName, string tableName, string fieldName, string sqlOperator, string parameterValue, ParameterType parameterType);
    public sealed virtual string ExpressionString();
    public sealed virtual void SqlExpressionString(ISqlStatement statement, string tableNameFieldNameLeftSeparator, string tableNameFieldNameRightSeparator);
    internal string FieldFullName(string tableFieldNameLeftSeperator, string tableFieldNameRightSeperator);
    internal string GetSqlStringWithNoParameters();
    internal object GetParameterValueAsObject();
    public bool DoesntRequireParametrisedValue();
    public sealed virtual void SetParameterSqlInfo(IParameterSqlInfo info);
    public sealed virtual IExpression Clone();
    private string GetSqlOperator();
    public string get_ParameterName();
}
public class Habanero.BO.CriteriaManager.PropDefParameterSQLInfo : object {
    private PropDef _propDef;
    private ClassDef _classDef;
    private string _parameterName;
    private string _tableName;
    public ParameterType ParameterType { get; }
    public string FieldName { get; }
    public string ParameterName { get; }
    public string TableName { get; }
    public PropDefParameterSQLInfo(PropDef propDef);
    public PropDefParameterSQLInfo(PropDef propDef, string tableName);
    public PropDefParameterSQLInfo(string parameterName, PropDef propDef, string tableName);
    public PropDefParameterSQLInfo(PropDef propDef, ClassDef classDef);
    public PropDefParameterSQLInfo(string parameterName, PropDef propDef, ClassDef classDef);
    private PropDefParameterSQLInfo(PropDef propDef, ClassDef classDef, string tableName, string parameterName);
    public sealed virtual ParameterType get_ParameterType();
    public sealed virtual string get_FieldName();
    public sealed virtual string get_ParameterName();
    public sealed virtual string get_TableName();
}
public class Habanero.BO.CriteriaManager.SqlOperator : object {
    private string _operator;
    public SqlOperator(string sqlOperator);
    public sealed virtual void SetParameterSqlInfo(IParameterSqlInfo info);
    public sealed virtual IExpression Clone();
    public sealed virtual string ExpressionString();
    public sealed virtual void SqlExpressionString(ISqlStatement statement, string tableNameFieldNameLeftSeparator, string tableNameFieldNameRightSeparator);
}
public class Habanero.BO.DataAccessorInMemory : object {
    protected DataStoreInMemory _dataStore;
    private IBusinessObjectLoader _businessObjectLoader;
    public IBusinessObjectLoader BusinessObjectLoader { get; }
    public DataStoreInMemory DataStoreInMemory { get; }
    public DataAccessorInMemory(DataStoreInMemory dataStore);
    public sealed virtual IBusinessObjectLoader get_BusinessObjectLoader();
    public virtual ITransactionCommitter CreateTransactionCommitter();
    public DataStoreInMemory get_DataStoreInMemory();
}
public class Habanero.BO.DataAccessorMultiSource : object {
    private IDataAccessor _defaultDataAccessor;
    private BusinessObjectLoaderMultiSource _multiSourceBusinessObjectLoader;
    private Dictionary`2<Type, IDataAccessor> _dataAccessors;
    public IBusinessObjectLoader BusinessObjectLoader { get; }
    public DataAccessorMultiSource(IDataAccessor defaultDataAccessor);
    public sealed virtual IBusinessObjectLoader get_BusinessObjectLoader();
    public sealed virtual ITransactionCommitter CreateTransactionCommitter();
    public void AddDataAccessor(Type type, IDataAccessor dataAccessor);
}
public class Habanero.BO.DataAccessorThreadSplitter : object {
    private Dictionary`2<Thread, IDataAccessor> _dataAccessors;
    public IBusinessObjectLoader BusinessObjectLoader { get; }
    public DataAccessorThreadSplitter(IDataAccessor dataAccessor);
    public sealed virtual IBusinessObjectLoader get_BusinessObjectLoader();
    public sealed virtual ITransactionCommitter CreateTransactionCommitter();
    public void AddDataAccessorForThread(IDataAccessor dataAccessor);
    public IDataAccessor GetDataAccessorForThread(Thread thread);
    public void ClearDeadThreads();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
public abstract class Habanero.BO.DataSetProvider : object {
    private static string _idColumnName;
    private static IHabaneroLogger Logger;
    protected IBusinessObjectCollection _collection;
    protected ICollection _uiGridProperties;
    protected DataTable _table;
    protected EventHandler`1<BOEventArgs> _boAddedHandler;
    protected EventHandler`1<BOPropUpdatedEventArgs> _propUpdatedEventHandler;
    protected EventHandler`1<BOEventArgs> _updatedHandler;
    protected EventHandler`1<BOEventArgs> _removedHandler;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <RegisterForBusinessObjectPropertyUpdatedEvents>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IBusinessObjectInitialiser <ObjectInitialiser>k__BackingField;
    public bool RegisterForBusinessObjectPropertyUpdatedEvents { get; public set; }
    public IBusinessObjectInitialiser ObjectInitialiser { get; public set; }
    public string IDColumnName { get; }
    protected DataSetProvider(IBusinessObjectCollection collection);
    private static DataSetProvider();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RegisterForBusinessObjectPropertyUpdatedEvents();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RegisterForBusinessObjectPropertyUpdatedEvents(bool value);
    [ObsoleteAttribute("Please use GetDataView instead")]
public sealed virtual DataTable GetDataTable(IUIGrid uiGrid);
    public sealed virtual IBindingListView GetDataView(IUIGrid uiGrid);
    private void AddColumn(IUIGridColumn uiProperty, IClassDef classDef);
    private static Type GetPropertyType(IClassDef classDef, string propertyName);
    public virtual void UpdateBusinessObjectRowValues(IBusinessObject businessObject);
    protected virtual void DeregisterForTableEvents();
    protected virtual void RegisterForTableEvents();
    protected Object[] GetValues(IBusinessObject businessObject);
    protected virtual void DeregisterForBOEvents();
    public virtual void RegisterForEvents();
    protected virtual void RegisterForBOEvents();
    private void PropertyUpdatedHandler(object sender, BOPropUpdatedEventArgs propEventArgs);
    private void UpdatedHandler(object sender, BOEventArgs e);
    protected virtual void RemovedHandler(object sender, BOEventArgs e);
    protected virtual void BOAddedHandler(object sender, BOEventArgs e);
    private void LoadBusinessObject(IBusinessObject businessObject);
    private void IDUpdatedHandler(object sender, BOEventArgs e);
    public abstract virtual void InitialiseLocalData();
    [ObsoleteAttribute("This is no longer used use Find(Guid objectID) instead 6/7/2010")]
public sealed virtual IBusinessObject Find(int rowNum);
    [ObsoleteAttribute("This is no longer used use Find(Guid objectID) instead 6/7/2010")]
public sealed virtual IBusinessObject Find(DataRow row);
    public sealed virtual IBusinessObject Find(Guid objectID);
    public sealed virtual int FindRow(IBusinessObject bo);
    [CompilerGeneratedAttribute]
public IBusinessObjectInitialiser get_ObjectInitialiser();
    [CompilerGeneratedAttribute]
public void set_ObjectInitialiser(IBusinessObjectInitialiser value);
    public sealed virtual string get_IDColumnName();
}
public class Habanero.BO.DataStoreInMemory : object {
    private ConcurrentDictionary`2<Guid, IBusinessObject> _objects;
    private ConcurrentDictionary`2<IClassDef, INumberGenerator> _autoIncrementNumberGenerators;
    private object _lock;
    public int Count { get; }
    public ConcurrentDictionary`2<Guid, IBusinessObject> AllObjects { get; public set; }
    protected internal IDictionary`2<IClassDef, INumberGenerator> AutoIncrementNumberGenerators { get; }
    public int get_Count();
    public ConcurrentDictionary`2<Guid, IBusinessObject> get_AllObjects();
    public void set_AllObjects(ConcurrentDictionary`2<Guid, IBusinessObject> value);
    public virtual void Add(IBusinessObject businessObject);
    public virtual T Find(Criteria criteria);
    public virtual IBusinessObject Find(Type boType, Criteria criteria);
    public virtual IBusinessObject Find(IClassDef classDef, Criteria criteria);
    private IEnumerable`1<IBusinessObject> GetAllObjectsSnapshot();
    public virtual T Find(IPrimaryKey primaryKey);
    public virtual void Remove(IBusinessObject businessObject);
    public virtual BusinessObjectCollection`1<T> FindAll(Criteria criteria);
    internal virtual List`1<T> FindAllInternal(Criteria criteria);
    public virtual IBusinessObjectCollection FindAll(Type boType, Criteria criteria);
    private static IBusinessObjectCollection CreateGenericCollection(Type boType);
    public virtual IBusinessObjectCollection FindAll(IClassDef classDef, Criteria criteria);
    private IEnumerable`1<IBusinessObject> FindObjectsMatchingType(IClassDef classDef);
    public void ClearAllBusinessObjects();
    protected internal IDictionary`2<IClassDef, INumberGenerator> get_AutoIncrementNumberGenerators();
    public virtual long GetNextAutoIncrementingNumber(IClassDef classDef);
}
public class Habanero.BO.DataStoreInMemoryBinaryReader : object {
    private Stream _stream;
    public DataStoreInMemoryBinaryReader(Stream stream);
    public ConcurrentDictionary`2<Guid, IBusinessObject> Read();
}
public class Habanero.BO.DataStoreInMemoryBinaryWriter : object {
    private Stream _stream;
    public DataStoreInMemoryBinaryWriter(Stream stream);
    public void Write(DataStoreInMemory dataStore);
    public void Write(IDictionary`2<Guid, IBusinessObject> businessObjects);
}
public class Habanero.BO.DataStoreInMemoryXmlReader : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Result <ReadResult>k__BackingField;
    public Result ReadResult { get; private set; }
    [CompilerGeneratedAttribute]
public Result get_ReadResult();
    [CompilerGeneratedAttribute]
private void set_ReadResult(Result value);
    public DataStoreInMemory Read(Stream stream);
    public DataStoreInMemory Read(string xml);
    public DataStoreInMemory Read(XmlReader xmlReader);
    public DataStoreInMemory Read(Stream stream, IBusinessObjectXmlReader boReader);
    public DataStoreInMemory Read(XmlReader xmlReader, IBusinessObjectXmlReader boReader);
    protected virtual IBusinessObject ConfigureObjectAfterLoad(IBusinessObject bo);
    protected virtual XmlReaderSettings GetSettings();
    private static string BuildExceptionMessage(IEnumerable`1<string> propertyReadExceptions);
}
public class Habanero.BO.DataStoreInMemoryXmlWriter : object {
    private XmlWriterSettings _settings;
    public DataStoreInMemoryXmlWriter(XmlWriterSettings xmlWriterSettings);
    public void Write(Stream stream, DataStoreInMemory dataStore);
    public void Write(StringBuilder s, DataStoreInMemory dataStore);
    public void Write(Stream stream, IDictionary`2<Guid, IBusinessObject> businessObjects);
    public void Write(XmlWriter writer, IDictionary`2<Guid, IBusinessObject> businessObjects, bool includeStartDocument);
}
internal class Habanero.BO.DeleteHelper : object {
    public static bool CheckCanDelete(IBusinessObject bo, String& reason);
    private static void CheckCanDeleteSafe(IBusinessObject bo, List`1<IBusinessObject> alreadyChecked, MatchList matchList, string currentRelationshipPath, Dictionary`2& results);
    public static MatchList FindPreventDeleteRelationships(IRelationshipDefCol relationshipDefCol);
    public static MatchList FindRelationships(IRelationshipDefCol relationshipDefCol, MatchesConditionDelegate`1<TRelationshipDef> matchesConditionDelegate);
    private static MatchList FindRelationshipsSafe(IRelationshipDefCol relationshipDefCol, MatchesConditionDelegate`1<TRelationshipDef> matchesConditionDelegate, List`1<IRelationshipDefCol> alreadyChecked);
    private static bool PreventDeleteRelationshipCondition(MultipleRelationshipDef multipleRelationshipDef);
}
public class Habanero.BO.EditableDataSetProvider : DataSetProvider {
    private DataTableNewRowEventHandler _newRowHandler;
    private DataRowChangeEventHandler _rowChangedHandler;
    private DataRowChangeEventHandler _rowDeletedHandler;
    private Dictionary`2<DataRow, IBusinessObject> _addedRows;
    private Dictionary`2<DataRow, IBusinessObject> _deletedRows;
    private bool _isBeingAdded;
    private bool _registeredForTableEvents;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IDatabaseConnection <Connection>k__BackingField;
    public IDatabaseConnection Connection { get; public set; }
    public EditableDataSetProvider(IBusinessObjectCollection col);
    [CompilerGeneratedAttribute]
public IDatabaseConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(IDatabaseConnection value);
    protected virtual void DeregisterForTableEvents();
    protected virtual void RegisterForTableEvents();
    private void NewRowHandler(object sender, DataTableNewRowEventArgs e);
    public virtual void InitialiseLocalData();
    private void RowDeletedHandler(object sender, DataRowChangeEventArgs e);
    private IBusinessObject GetBusinessObjectForRow(DataRow row);
    private void RowRollback(DataRowChangeEventArgs e);
    private void RowChangedHandler(object sender, DataRowChangeEventArgs e);
    private void RowCommitted(DataRowChangeEventArgs e);
    private void RowChanged(DataRowChangeEventArgs e);
    private void ApplyRowCellValueToBOProperty(DataRow row, UIGridColumn uiProperty, IBusinessObject changedBo);
    private Guid GetRowID(DataRow row);
    private static Guid GetGuidID(object objectID);
    private static void CheckRowIDNotNull(object objectID);
    private void RowAdded(DataRowChangeEventArgs e);
}
internal static class Habanero.BO.ExceptionHelper : object {
    internal static string _loaderGenericTypeMethodExceptionMessage;
    internal static string _habaneroDeveloperExceptionUserMessage;
    private static ExceptionHelper();
    internal static HabaneroDeveloperException CreateLoaderGenericTypeMethodException();
}
public class Habanero.BO.Exceptions.BOPropReadException : BusinessObjectException {
    public BOPropReadException(string message);
    public BOPropReadException(string message, Exception inner);
    protected BOPropReadException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BOPropWriteException : BusinessObjectException {
    private IPropDef _propDef;
    public IPropDef PropDef { get; }
    public BOPropWriteException(PropDef propDef);
    public BOPropWriteException(IPropDef propDef, string message);
    public BOPropWriteException(PropDef propDef, string message, Exception inner);
    protected BOPropWriteException(SerializationInfo info, StreamingContext context);
    private static string ConstructMessage(PropDef propDef);
    public IPropDef get_PropDef();
}
public abstract class Habanero.BO.Exceptions.BusinessObjectException : HabaneroApplicationException {
    protected BusinessObjectException(string message);
    protected BusinessObjectException(string message, Exception inner);
    protected BusinessObjectException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusinessObjectNotFoundException : BusinessObjectException {
    public BusinessObjectNotFoundException(string message);
    public BusinessObjectNotFoundException(string message, Exception inner);
    protected BusinessObjectNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusinessObjectReferentialIntegrityException : BusinessObjectException {
    public BusinessObjectReferentialIntegrityException(string message);
    public BusinessObjectReferentialIntegrityException(string message, Exception inner);
    protected BusinessObjectReferentialIntegrityException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjBeginEditConcurrencyControlException : BusObjectConcurrencyControlException {
    public BusObjBeginEditConcurrencyControlException(string className, string userName, string machineName, DateTime dateUpdated, string objectID, IBusinessObject obj);
    public BusObjBeginEditConcurrencyControlException(string message);
    public BusObjBeginEditConcurrencyControlException(string message, Exception inner);
    protected BusObjBeginEditConcurrencyControlException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjDeleteConcurrencyControlException : BusObjectConcurrencyControlException {
    public BusObjDeleteConcurrencyControlException(string className, string objectID, object obj);
    public BusObjDeleteConcurrencyControlException(string message);
    public BusObjDeleteConcurrencyControlException(string message, Exception inner);
    protected BusObjDeleteConcurrencyControlException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjDeleteException : BusinessObjectException {
    public BusObjDeleteException(IBusinessObject bo, string message);
}
public class Habanero.BO.Exceptions.BusObjDuplicateConcurrencyControlException : BusObjectConcurrencyControlException {
    public BusObjDuplicateConcurrencyControlException(string className, string userName, string machineName, DateTime dateDuplicated, string duplicateWhereClause, object obj);
    public BusObjDuplicateConcurrencyControlException(string message);
    public BusObjDuplicateConcurrencyControlException(string message, Exception inner);
    protected BusObjDuplicateConcurrencyControlException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjectConcurrencyControlException : BusinessObjectException {
    protected object _obj;
    public object getObject { get; }
    public BusObjectConcurrencyControlException(string message);
    public BusObjectConcurrencyControlException(string message, Exception inner);
    public BusObjectConcurrencyControlException(string message, object obj);
    protected BusObjectConcurrencyControlException(SerializationInfo info, StreamingContext context);
    public object get_getObject();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjectInAnInvalidStateException : BusinessObjectException {
    public BusObjectInAnInvalidStateException(string message);
    public BusObjectInAnInvalidStateException(string message, Exception inner);
    protected BusObjectInAnInvalidStateException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjEditableException : BusinessObjectException {
    public BusObjEditableException(BusinessObject bo, string message);
}
public class Habanero.BO.Exceptions.BusObjOptimisticConcurrencyControlException : BusObjUserConcurrencyControlExceptionBase {
    public BusObjOptimisticConcurrencyControlException(string className, string userName, string machineName, DateTime dateUpdated, string objectID, IBusinessObject obj);
    public BusObjOptimisticConcurrencyControlException(string message);
    public BusObjOptimisticConcurrencyControlException(string message, Exception inner);
    protected BusObjOptimisticConcurrencyControlException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjPersistException : BusinessObjectException {
    public BusObjPersistException(string message);
    public BusObjPersistException(string message, Exception inner);
    protected BusObjPersistException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjPessimisticConcurrencyControlException : BusObjUserConcurrencyControlExceptionBase {
    public BusObjPessimisticConcurrencyControlException(string className, string userName, string machineName, DateTime dateUpdated, string objectID, IBusinessObject obj);
    public BusObjPessimisticConcurrencyControlException(string message);
    public BusObjPessimisticConcurrencyControlException(string message, Exception inner);
    protected BusObjPessimisticConcurrencyControlException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjReadException : BusinessObjectException {
    protected object mobj;
    public BusObjReadException(string message);
    public BusObjReadException(string message, Exception inner);
    public BusObjReadException(string className, string objectID, object obj);
    protected BusObjReadException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.BusObjUserConcurrencyControlExceptionBase : BusObjectConcurrencyControlException {
    protected string _userNameEdited;
    protected string _machineNameEdited;
    protected DateTime _dateUpdated;
    protected string _objectID;
    protected string _className;
    public string MachineNameEdited { get; }
    public string UserNameEdited { get; }
    public DateTime DateTimeEdited { get; }
    public string ClassName { get; }
    public IBusinessObject BusinessObject { get; }
    public string ObjectID { get; }
    protected BusObjUserConcurrencyControlExceptionBase(SerializationInfo info, StreamingContext context);
    protected BusObjUserConcurrencyControlExceptionBase(string message, object obj);
    protected BusObjUserConcurrencyControlExceptionBase(string message);
    protected BusObjUserConcurrencyControlExceptionBase(string message, Exception inner);
    public string get_MachineNameEdited();
    public string get_UserNameEdited();
    public DateTime get_DateTimeEdited();
    public string get_ClassName();
    public IBusinessObject get_BusinessObject();
    public string get_ObjectID();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.EditingException : BusinessObjectException {
    protected object mobj;
    public EditingException(string message);
    public EditingException(string message, Exception inner);
    public EditingException(string className, string objectID, object obj);
    protected EditingException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.InvalidPropertyValueException : HabaneroApplicationException {
    public InvalidPropertyValueException(string message);
    public InvalidPropertyValueException(string message, Exception inner);
    protected InvalidPropertyValueException(SerializationInfo info, StreamingContext context);
}
public class Habanero.BO.Exceptions.RelationshipNotFoundException : Exception {
    public RelationshipNotFoundException(string message);
    public RelationshipNotFoundException(string message, Exception inner);
    protected RelationshipNotFoundException(SerializationInfo info, StreamingContext context);
}
public interface Habanero.BO.IBOPropertyMapper {
    public IBusinessObject BusinessObject { get; }
    public string PropertyName { get; }
    public string InvalidReason { get; }
    public abstract virtual IBusinessObject get_BusinessObject();
    public abstract virtual string get_PropertyName();
    public abstract virtual string get_InvalidReason();
    public abstract virtual void SetPropertyValue(object propValue);
    public abstract virtual object GetPropertyValue();
}
internal interface Habanero.BO.IBusinessObjectCollectionInternal {
    public bool Loading { get; public set; }
    public abstract virtual void AddInternal(IBusinessObject businessObject);
    public abstract virtual bool get_Loading();
    public abstract virtual void set_Loading(bool value);
    public abstract virtual void FireRefreshedEvent();
    public abstract virtual void ClearCurrentCollection();
}
public interface Habanero.BO.IBusinessObjectCollectionLoader {
    public abstract virtual IBusinessObjectCollection Load();
}
public interface Habanero.BO.IBusinessObjectLoader {
    public abstract virtual T GetBusinessObject(IPrimaryKey primaryKey);
    public abstract virtual IBusinessObject GetBusinessObject(IClassDef classDef, IPrimaryKey primaryKey);
    public abstract virtual T GetBusinessObject(Criteria criteria);
    public abstract virtual IBusinessObject GetBusinessObject(IClassDef classDef, Criteria criteria);
    public abstract virtual T GetBusinessObject(ISelectQuery selectQuery);
    public abstract virtual IBusinessObject GetBusinessObject(IClassDef classDef, ISelectQuery selectQuery);
    public abstract virtual T GetBusinessObject(string criteriaString);
    public abstract virtual IBusinessObject GetBusinessObject(IClassDef classDef, string criteriaString);
    public abstract virtual T GetRelatedBusinessObject(SingleRelationship`1<T> relationship);
    public abstract virtual IBusinessObject GetRelatedBusinessObject(ISingleRelationship relationship);
    public abstract virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria);
    public abstract virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString);
    public abstract virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria);
    public abstract virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria, IOrderCriteria orderCriteria);
    public abstract virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString, string orderCriteria);
    public abstract virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(Criteria criteria, IOrderCriteria orderCriteria, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public abstract virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(string criteriaString, string orderCriteriaString, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public abstract virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef def, Criteria criteria, IOrderCriteria orderCriteria, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& records);
    public abstract virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, Criteria criteria, IOrderCriteria orderCriteria);
    public abstract virtual BusinessObjectCollection`1<T> GetBusinessObjectCollection(ISelectQuery selectQuery);
    public abstract virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, ISelectQuery selectQuery);
    public abstract virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, string searchCriteria, string orderCriteria);
    public abstract virtual IBusinessObjectCollection GetBusinessObjectCollection(IClassDef classDef, string searchCriteria);
    public abstract virtual void Refresh(BusinessObjectCollection`1<T> collection);
    public abstract virtual void Refresh(IBusinessObjectCollection collection);
    public abstract virtual IBusinessObject Refresh(IBusinessObject businessObject);
    public abstract virtual RelatedBusinessObjectCollection`1<T> GetRelatedBusinessObjectCollection(IMultipleRelationship relationship);
    public abstract virtual IBusinessObjectCollection GetRelatedBusinessObjectCollection(Type type, IMultipleRelationship relationship);
    public abstract virtual IBusinessObject GetBusinessObjectByValue(IClassDef classDef, object idValue);
    public abstract virtual IBusinessObject GetBusinessObjectByValue(Type type, object idValue);
    public abstract virtual T GetBusinessObjectByValue(object idValue);
    public abstract virtual int GetCount(IClassDef classDef, Criteria criteria);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.BO.IBusinessObjectManager {
    public int Count { get; }
    public IBusinessObject Item { get; }
    public IBusinessObject Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Add(IBusinessObject businessObject);
    public abstract virtual bool Contains(IBusinessObject businessObject);
    public abstract virtual bool Contains(IPrimaryKey id);
    public abstract virtual bool Contains(Guid objectID);
    public abstract virtual void Remove(IBusinessObject businessObject);
    public abstract virtual IBusinessObject get_Item(Guid objectID);
    public abstract virtual IBusinessObject get_Item(IPrimaryKey objectID);
    public abstract virtual void ClearLoadedObjects();
    public abstract virtual IList`1<T> Find(Criteria criteria);
    public abstract virtual IBusinessObject FindFirst(Criteria criteria);
    public abstract virtual IBusinessObject GetBusinessObject(IPrimaryKey key);
    public abstract virtual IList Find(Criteria criteria, Type boType);
    public abstract virtual IBusinessObject FindFirst(BOPrimaryKey key, Type boType);
    public abstract virtual IBusinessObject FindFirst(BOPrimaryKey key, IClassDef classDef);
    public abstract virtual IBusinessObject FindFirst(Criteria criteria, Type boType);
    public abstract virtual IBusinessObject FindFirst(Criteria criteria, IClassDef classDef);
    public abstract virtual void AddWithReplace(IBusinessObject businessObject);
    public abstract virtual IBusinessObject GetObjectIfInManager(Guid id);
}
public interface Habanero.BO.IBusinessObjectXmlReader {
    public IEnumerable`1<string> PropertyReadExceptions { get; }
    public abstract virtual IEnumerable`1<string> get_PropertyReadExceptions();
    public abstract virtual IEnumerable`1<IBusinessObject> Read(XmlReader xmlReader);
}
public interface Habanero.BO.IBusinessObjectXmlWriter {
    public abstract virtual void Write(XmlWriter writer, IEnumerable`1<IBusinessObject> businessObjects);
    public abstract virtual void Write(XmlWriter writer, IEnumerable`1<IBusinessObject> businessObjects, bool includeStartDocument);
}
public interface Habanero.BO.IDataAccessor {
    public IBusinessObjectLoader BusinessObjectLoader { get; }
    public abstract virtual IBusinessObjectLoader get_BusinessObjectLoader();
    public abstract virtual ITransactionCommitter CreateTransactionCommitter();
}
public interface Habanero.BO.IMultipleRelationship {
    public IOrderCriteria OrderCriteria { get; }
    public IBusinessObjectCollection BusinessObjectCollection { get; }
    public IBusinessObjectCollection CurrentBusinessObjectCollection { get; }
    public abstract virtual IOrderCriteria get_OrderCriteria();
    public abstract virtual IBusinessObjectCollection get_BusinessObjectCollection();
    public abstract virtual IBusinessObjectCollection get_CurrentBusinessObjectCollection();
}
public interface Habanero.BO.IPropRuleComparable`1 {
    public T MinValue { get; }
    public T MaxValue { get; }
    public abstract virtual T get_MinValue();
    public abstract virtual T get_MaxValue();
}
internal interface Habanero.BO.IRelationshipForLoading {
    public abstract virtual void Initialise();
}
public interface Habanero.BO.ISingleRelationship {
    public abstract virtual void SetRelatedObject(IBusinessObject relatedObject);
    public abstract virtual IBusinessObject GetRelatedObject();
    public abstract virtual bool HasRelatedObject();
    [CompilerGeneratedAttribute]
public abstract virtual void add_RelatedBusinessObjectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RelatedBusinessObjectChanged(EventHandler value);
}
public interface Habanero.BO.ITransactionLoggerFactory {
    public abstract virtual ITransactionLog GetLogger(BusinessObject bo, string tableName);
    public abstract virtual ITransactionLog GetLogger(BusinessObject bo);
}
public class Habanero.BO.Loaders.ClassDefsXmlValidator : object {
    public XmlValidationResult ValidateClassDefsXml(string xml);
}
public class Habanero.BO.Loaders.DtdLoader : object {
    private ITextFileLoader _textFileLoader;
    private string _dtdPath;
    private ResourceManager _resourceManager;
    public DtdLoader(ITextFileLoader textFileLoader, string dtdPath);
    public string LoadDtd(string dtdName);
    internal string LoadDtd(string fileName, IList alreadyIncludedFiles);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Habanero.BO.Loaders.Dtds : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string _class { get; }
    internal static string businessObjectLookupList { get; }
    internal static string classes { get; }
    internal static string column { get; }
    internal static string columnLayout { get; }
    internal static string databaseLookupList { get; }
    internal static string field { get; }
    internal static string filter { get; }
    internal static string form { get; }
    internal static string formGrid { get; }
    internal static string grid { get; }
    internal static string key { get; }
    internal static string parameter { get; }
    internal static string primaryKey { get; }
    internal static string Prop { get; }
    internal static string property { get; }
    internal static string relationship { get; }
    internal static string Rule { get; }
    internal static string simpleLookupList { get; }
    internal static string superClass { get; }
    internal static string tab { get; }
    internal static string trigger { get; }
    internal static string ui { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get__class();
    internal static string get_businessObjectLookupList();
    internal static string get_classes();
    internal static string get_column();
    internal static string get_columnLayout();
    internal static string get_databaseLookupList();
    internal static string get_field();
    internal static string get_filter();
    internal static string get_form();
    internal static string get_formGrid();
    internal static string get_grid();
    internal static string get_key();
    internal static string get_parameter();
    internal static string get_primaryKey();
    internal static string get_Prop();
    internal static string get_property();
    internal static string get_relationship();
    internal static string get_Rule();
    internal static string get_simpleLookupList();
    internal static string get_superClass();
    internal static string get_tab();
    internal static string get_trigger();
    internal static string get_ui();
}
public interface Habanero.BO.Loaders.IClassDefsLoader {
    [ObsoleteAttribute("Please use parameterless LoadClassDefs() and pass the xml in via the constructor or another paramter")]
public abstract virtual ClassDefCol LoadClassDefs(string classDefsXml);
    public abstract virtual ClassDefCol LoadClassDefs();
}
public class Habanero.BO.Loaders.XmlBusinessObjectLookupListLoader : XmlLookupListLoader {
    private string _className;
    private string _assemblyName;
    private string _criteria;
    private string _sort;
    private int _timeout;
    public XmlBusinessObjectLookupListLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    protected virtual void LoadLookupListFromReader();
    protected virtual object Create();
}
public class Habanero.BO.Loaders.XmlClassDefsLoader : XmlLoader {
    private ClassDefCol _classDefList;
    private string _xmlClassDefs;
    public XmlClassDefsLoader(string xmlClassDefs, DtdLoader dtdLoader);
    public XmlClassDefsLoader(string xmlClassDefs, DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public sealed virtual ClassDefCol LoadClassDefs(string xmlClassDefs);
    public sealed virtual ClassDefCol LoadClassDefs();
    public ClassDefCol LoadClassDefs(XmlElement allClassesElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
}
public class Habanero.BO.Loaders.XmlClassLoader : XmlLoader {
    private string _assemblyName;
    private string _className;
    private string _displayName;
    private KeyDefCol _keyDefCol;
    private IPrimaryKeyDef _primaryKeyDef;
    private IPropDefCol _propDefCol;
    private IRelationshipDefCol _relationshipDefCol;
    private ISuperClassDef _superClassDef;
    private string _tableName;
    private UIDefCol _uiDefCol;
    private string _typeParameter;
    private string _classIDString;
    private string _moduleName;
    private IClassDef _classDef;
    public XmlClassLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IClassDef LoadClass(string xmlClassDef);
    public IClassDef LoadClass(XmlElement classElement);
    protected virtual object Create();
    private IClassDef CreateClassDef();
    protected virtual void LoadFromReader();
    private void LoadSuperClassDesc(string xmlDef);
    private void LoadRelationshipDefs(IEnumerable`1<string> xmlDefs);
    private void LoadUIDefs(IEnumerable`1<string> xmlDefs);
    private void LoadKeyDefs(IEnumerable`1<string> xmlDefs);
    private void LoadPrimaryKeyDef(string xmlDef);
    private void LoadPropDefs(ICollection`1<string> xmlDefs);
    private void LoadTableName();
    private void LoadDisplayName();
    private void LoadModuleName();
    private void LoadTypeParameter();
    private void LoadClassID();
    private void LoadClassInfo();
}
public class Habanero.BO.Loaders.XmlDatabaseLookupListLoader : XmlLookupListLoader {
    private string _sqlString;
    private int _timeout;
    private string _assemblyName;
    private string _className;
    public XmlDatabaseLookupListLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    protected virtual void LoadLookupListFromReader();
    protected virtual object Create();
}
public class Habanero.BO.Loaders.XmlFilterLoader : XmlLoader {
    private IList`1<IFilterPropertyDef> _propertyDefs;
    private FilterModes _filterMode;
    private int _columns;
    public XmlFilterLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    protected virtual object Create();
    protected virtual void LoadFromReader();
    public IFilterDef LoadFilterDef(string xml);
}
public class Habanero.BO.Loaders.XmlKeyLoader : XmlLoader {
    private IKeyDef _keyDef;
    private IPropDefCol _propDefCol;
    public XmlKeyLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IKeyDef LoadKey(string xmlKeyDef, IPropDefCol propDefs);
    public IKeyDef LoadKey(XmlElement keyElement, IPropDefCol propDefs);
    protected virtual object Create();
    protected virtual void LoadFromReader();
    private void LoadKeyName();
    private void LoadMessage();
    private void LoadKeyIgnoreIfNull();
    private void LoadKeyProperties();
}
public abstract class Habanero.BO.Loaders.XmlLoader : object {
    protected IDefClassFactory _defClassFactory;
    protected XmlReader _reader;
    private bool _documentValid;
    private ValidationEventArgs _invalidDocumentArgs;
    private XmlElement _element;
    private DtdLoader _dtdLoader;
    protected DtdLoader DtdLoader { get; }
    protected XmlLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    protected object Load(XmlElement el);
    protected abstract virtual object Create();
    protected abstract virtual void LoadFromReader();
    private void CheckDocumentValidity();
    private void CreateValidatingReader(XmlElement propertyElement);
    private string GetDTD(string rootElementName);
    private void ValidationHandler(object sender, ValidationEventArgs args);
    protected XmlElement CreateXmlElement(string element);
    protected void ReadAndIgnoreEndTag();
    protected DtdLoader get_DtdLoader();
}
public abstract class Habanero.BO.Loaders.XmlLookupListLoader : XmlLoader {
    protected string _ruleName;
    protected bool _isCompulsory;
    protected XmlLookupListLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public ILookupList LoadLookupList(string sourceElement);
    public ILookupList LoadLookupList(XmlElement sourceElement);
    protected sealed virtual void LoadFromReader();
    protected abstract virtual void LoadLookupListFromReader();
    public static void LoadLookupListIntoProperty(string sourceElement, IPropDef def, DtdLoader dtdLoader, IDefClassFactory defClassFactory);
}
public class Habanero.BO.Loaders.XmlPrimaryKeyLoader : XmlLoader {
    private IPrimaryKeyDef _primaryKeyDef;
    private IPropDefCol _propDefCol;
    public XmlPrimaryKeyLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    internal IPrimaryKeyDef LoadPrimaryKey(string xmlPrimaryKeyDef, IPropDefCol propDefs);
    internal IPrimaryKeyDef LoadPrimaryKey(XmlElement primaryKeyElement, IPropDefCol propDefs);
    protected virtual object Create();
    protected virtual void LoadFromReader();
    private void LoadIsObjectID();
    private void LoadPropertyDefs();
}
public class Habanero.BO.Loaders.XmlPropertyLoader : XmlLoader {
    private string _assemblyName;
    private string _typeName;
    private PropReadWriteRule _readWriteRule;
    private string _propertyName;
    private string _defaultValueString;
    private string _databaseFieldName;
    private IPropDef _propDef;
    private bool _compulsory;
    private bool _autoIncrementing;
    private int _length;
    private string _description;
    private string _displayName;
    private bool _keepValuePrivate;
    public XmlPropertyLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IPropDef LoadProperty(string xmlPropDef);
    public IPropDef LoadProperty(XmlElement propertyElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
    private void LoadPropertyName();
    private void LoadDisplayName();
    private void LoadPropertyType();
    private void LoadReadWriteRule();
    private void LoadDefaultValue();
    private void LoadDatabaseFieldName();
    private void LoadDescription();
    private void LoadCompulsory();
    private void LoadAutoIncrementing();
    private void LoadKeepValuePrivate();
    private void LoadLength();
}
public class Habanero.BO.Loaders.XmlRelationshipLoader : XmlLoader {
    private string _className;
    private string _relatedAssemblyName;
    private string _relatedClassName;
    private IRelKeyDef _relKeyDef;
    private string _name;
    private string _type;
    private string _preventDeleteMessage;
    private bool _keepReferenceToRelatedObject;
    private string _orderBy;
    private DeleteParentAction _deleteParentAction;
    private RelationshipType _relationshipType;
    private bool _owningBOHasForeignKey;
    private string _reverseRelationshipName;
    private string _typeParameter;
    private int _timeout;
    private InsertParentAction _insertParentAction;
    public XmlRelationshipLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory, string className);
    public IRelationshipDef LoadRelationship(string xmlRelationshipDef, IPropDefCol propDefs);
    public IRelationshipDef LoadRelationship(XmlElement relationshipElement, IPropDefCol propDefs);
    protected virtual object Create();
    protected virtual void LoadFromReader();
    protected void LoadRelationshipDef();
    private void LoadRelKeyDef();
}
public class Habanero.BO.Loaders.XmlRuleLoader : XmlLoader {
    protected string _name;
    private string _propTypeName;
    private string _message;
    private Dictionary`2<string, object> _ruleParameters;
    private string _class;
    private string _assembly;
    private IPropRule _propRule;
    public XmlRuleLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IPropRule LoadRule(string propTypeName, string ruleXml);
    public IPropRule LoadPropertyRule(XmlElement ruleElement);
    protected sealed virtual void LoadFromReader();
    public void LoadRuleIntoProperty(string propertyRuleElement, IPropDef def);
    protected virtual object Create();
    protected IPropRule CreatePropRule();
    protected IPropRule CreatePropRule(string propTypeName, string name, string message);
}
public class Habanero.BO.Loaders.XmlSimpleLookupListLoader : XmlLookupListLoader {
    private Dictionary`2<string, string> _displayValueDictionary;
    public XmlSimpleLookupListLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    protected virtual void LoadLookupListFromReader();
    protected virtual object Create();
}
public class Habanero.BO.Loaders.XmlSuperClassLoader : XmlLoader {
    private ORMapping _orMapping;
    private string _className;
    private string _assemblyName;
    private string _typeParameter;
    private string _discriminator;
    private string _id;
    public XmlSuperClassLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public ISuperClassDef LoadSuperClassDesc(string xmlSuperClassDesc);
    public ISuperClassDef LoadSuperClassDesc(XmlElement xmlSuperClassDesc);
    protected virtual object Create();
    protected virtual void LoadFromReader();
}
public class Habanero.BO.Loaders.XmlUIFormColumnLoader : XmlLoader {
    private IUIFormColumn _column;
    public XmlUIFormColumnLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IUIFormColumn LoadUIFormColumn(string formColumnElement);
    public IUIFormColumn LoadUIFormColumn(XmlElement formColumnElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
}
public class Habanero.BO.Loaders.XmlUIFormFieldLoader : XmlLoader {
    private string _label;
    private string _propertyName;
    private string _mapperTypeName;
    private string _mapperTypeAssembly;
    private string _controlTypeName;
    private string _controlAssembly;
    private bool _editable;
    private Hashtable _parameters;
    private string _toolTipText;
    private LayoutStyle _layout;
    private bool _showAsCompulsory;
    public XmlUIFormFieldLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IUIFormField LoadUIProperty(string xmlUIProp);
    public IUIFormField LoadUIProperty(XmlElement uiPropElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
    private void LoadLayout();
    private void LoadMapperTypeName();
    private void LoadMapperTypeAssembly();
    private void LoadControlType();
    private void LoadPropertyName();
    private void LoadLabel();
    private void LoadEditable();
    private void LoadShowAsCompulsory();
    private void LoadToolTipText();
    private void LoadParameters();
}
public class Habanero.BO.Loaders.XmlUIFormLoader : XmlLoader {
    private IUIForm _uiForm;
    public XmlUIFormLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IUIForm LoadUIFormDef(string formDefElement);
    public IUIForm LoadUIFormDef(XmlElement formDefElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
}
public class Habanero.BO.Loaders.XmlUIFormTabLoader : XmlLoader {
    private IUIFormTab _tab;
    private static string MixedContentMessage;
    public XmlUIFormTabLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IUIFormTab LoadUIFormTab(string formTabElement);
    public IUIFormTab LoadUIFormTab(XmlElement formTabElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
}
public class Habanero.BO.Loaders.XmlUIGridColumnLoader : XmlLoader {
    private static IHabaneroLogger Logger;
    private string _heading;
    private string _propertyName;
    private bool _editable;
    private int _width;
    private PropAlignment _alignment;
    private Hashtable _propertyAttributes;
    private string _assemblyName;
    private string _className;
    public XmlUIGridColumnLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    private static XmlUIGridColumnLoader();
    public IUIGridColumn LoadUIProperty(string xmlUIProp);
    public IUIGridColumn LoadUIProperty(XmlElement uiPropElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
    private void LoadIsEditable();
    private void LoadGridControlType();
    private void LoadPropertyName();
    private void LoadHeading();
    private void LoadWidth();
    private void LoadAlignment();
    private void LoadParameters();
}
public class Habanero.BO.Loaders.XmlUIGridLoader : XmlLoader {
    private IUIGrid _uiGrid;
    public XmlUIGridLoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IUIGrid LoadUIGridDef(string formDefElement);
    public IUIGrid LoadUIGridDef(XmlElement formDefElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
}
public class Habanero.BO.Loaders.XmlUILoader : XmlLoader {
    private IUIForm _uiForm;
    private IUIGrid _uiGrid;
    private string _name;
    public XmlUILoader(DtdLoader dtdLoader, IDefClassFactory defClassFactory);
    public IUIDef LoadUIDef(string uiDefElement);
    public IUIDef LoadUIDef(XmlElement uiDefElement);
    protected virtual object Create();
    protected virtual void LoadFromReader();
}
public class Habanero.BO.Loaders.XmlValidationResult : object {
    private List`1<string> _messages;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsValid>k__BackingField;
    public bool IsValid { get; private set; }
    public List`1<string> Messages { get; }
    public XmlValidationResult(bool isValid, List`1<string> messages);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    public List`1<string> get_Messages();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Habanero.BO.Loaders.Xsds : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string classes { get; }
    internal static string There_was_an_error_in_DataSetProvider_MultipleDelesHit { get; }
    internal static string ui { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_classes();
    internal static string get_There_was_an_error_in_DataSetProvider_MultipleDelesHit();
    internal static string get_ui();
}
internal class Habanero.BO.MatchList : Dictionary`2<string, MatchList> {
    public virtual string ToString();
    public string ToString(string delimiter);
}
public class Habanero.BO.MultipleRelationship`1 : MultipleRelationshipBase {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TimeOut>k__BackingField;
    private Lazy`1<RelatedBusinessObjectCollection`1<TBusinessObject>> _boCol;
    public int TimeOut { get; private set; }
    public bool IsDirty { get; }
    protected bool HasDirtyEditingCollections { get; }
    private IBusinessObjectCollection Habanero.BO.IMultipleRelationship.BusinessObjectCollection { get; }
    private IBusinessObjectCollection Habanero.BO.IMultipleRelationship.CurrentBusinessObjectCollection { get; }
    public BusinessObjectCollection`1<TBusinessObject> CurrentBusinessObjectCollection { get; }
    public BusinessObjectCollection`1<TBusinessObject> BusinessObjectCollection { get; }
    public IOrderCriteria OrderCriteria { get; }
    public MultipleRelationship`1(IBusinessObject owningBo, RelationshipDef lRelDef, IBOPropCol lBOPropCol);
    public MultipleRelationship`1(IBusinessObject owningBo, IRelationshipDef lRelDef, IBOPropCol lBOPropCol, int timeOut);
    [CompilerGeneratedAttribute]
public int get_TimeOut();
    [CompilerGeneratedAttribute]
private void set_TimeOut(int value);
    internal virtual void DereferenceChildren(TransactionCommitter committer);
    internal virtual void DereferenceRemovedChildren(TransactionCommitter committer);
    internal virtual void DeleteMarkedForDeleteChildren(TransactionCommitter committer);
    internal virtual void DeleteChildren(TransactionCommitter committer);
    public virtual void MarkForDelete();
    public virtual bool get_IsDirty();
    protected bool get_HasDirtyEditingCollections();
    private sealed virtual override IBusinessObjectCollection Habanero.BO.IMultipleRelationship.get_BusinessObjectCollection();
    private sealed virtual override IBusinessObjectCollection Habanero.BO.IMultipleRelationship.get_CurrentBusinessObjectCollection();
    public BusinessObjectCollection`1<TBusinessObject> get_CurrentBusinessObjectCollection();
    public BusinessObjectCollection`1<TBusinessObject> get_BusinessObjectCollection();
    private bool TimeOutHasExpired(IBusinessObjectCollection currentCol);
    protected virtual void DoInitialisation();
    internal virtual void UpdateRelationshipAsPersisted();
    internal virtual IBusinessObjectCollectionInternal GetLoadedBOColInternal();
    public sealed virtual IOrderCriteria get_OrderCriteria();
    internal virtual void CancelEdits();
    internal virtual void AddDirtyChildrenToTransactionCommitter(TransactionCommitter transactionCommitter);
    internal IList`1<TBusinessObject> GetDirtyChildren();
    public virtual bool IsDeletable(String& message);
    [CompilerGeneratedAttribute]
private RelatedBusinessObjectCollection`1<TBusinessObject> <.ctor>b__6_0();
}
public abstract class Habanero.BO.MultipleRelationshipBase : Relationship {
    protected MultipleRelationshipBase(IBusinessObject owningBo, IRelationshipDef lRelDef, IBOPropCol lBOPropCol);
    internal abstract virtual IBusinessObjectCollectionInternal GetLoadedBOColInternal();
}
public class Habanero.BO.NullBOPropertyMapper : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IBusinessObject <BusinessObject>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <InvalidReason>k__BackingField;
    public IBusinessObject BusinessObject { get; public set; }
    public string PropertyName { get; private set; }
    public string InvalidReason { get; private set; }
    public NullBOPropertyMapper(string propertyName, string invalidReason);
    [CompilerGeneratedAttribute]
public sealed virtual IBusinessObject get_BusinessObject();
    [CompilerGeneratedAttribute]
public void set_BusinessObject(IBusinessObject value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InvalidReason();
    [CompilerGeneratedAttribute]
private void set_InvalidReason(string value);
    public sealed virtual void SetPropertyValue(object propValue);
    public sealed virtual object GetPropertyValue();
}
public class Habanero.BO.NullLookupList : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPropDef <PropDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TimeOut>k__BackingField;
    public IPropDef PropDef { get; public set; }
    public bool LimitToList { get; }
    public int TimeOut { get; public set; }
    public sealed virtual Dictionary`2<string, string> GetLookupList();
    public sealed virtual Dictionary`2<string, string> GetLookupList(IDatabaseConnection connection);
    [CompilerGeneratedAttribute]
public sealed virtual IPropDef get_PropDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PropDef(IPropDef value);
    public sealed virtual bool get_LimitToList();
    [CompilerGeneratedAttribute]
public sealed virtual int get_TimeOut();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeOut(int value);
    public sealed virtual Dictionary`2<string, string> GetIDValueLookupList();
}
public class Habanero.BO.NullTransactionLogger : object {
    public sealed virtual string TransactionID();
    public sealed virtual void UpdateStateAsCommitted();
    public sealed virtual void UpdateAsRolledBack();
    public sealed virtual IEnumerable`1<ISqlStatement> GetPersistSql();
}
public class Habanero.BO.NumberGenerator : object {
    private BOSequenceNumber _boSequenceNumber;
    private string _tableName;
    public NumberGenerator(string numberType);
    public NumberGenerator(string numberType, string tableName);
    public sealed virtual long NextNumber();
    public sealed virtual void SetSequenceNumber(long newSequenceNumber);
    public sealed virtual void AddToTransaction(ITransactionCommitter transactionCommitter);
    private BOSequenceNumber LoadSequenceNumber(string numberType);
    private static BOSequenceNumber CreateSequenceForType(string numberType);
    public void Save();
    private BusinessObject GetTransactionalBO();
}
public class Habanero.BO.ObjectFactory : object {
    private static ObjectFactory _objectFactory;
    public static ObjectFactory GetObjectFactory();
}
public class Habanero.BO.ObjectTreeXmlReader : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Result <ReadResult>k__BackingField;
    public Result ReadResult { get; private set; }
    [CompilerGeneratedAttribute]
public Result get_ReadResult();
    [CompilerGeneratedAttribute]
private void set_ReadResult(Result value);
    public IEnumerable`1<IBusinessObject> Read(Stream stream);
    public IEnumerable`1<IBusinessObject> Read(string xml);
    public IEnumerable`1<IBusinessObject> Read(XmlReader xmlReader);
    public IEnumerable`1<IBusinessObject> Read(Stream stream, IBusinessObjectXmlReader boReader);
    public IEnumerable`1<IBusinessObject> Read(XmlReader xmlReader, IBusinessObjectXmlReader boReader);
    protected virtual IBusinessObject ConfigureObjectAfterLoad(IBusinessObject bo);
    private IBusinessObject TryGetUpdatedExistingBo(IBusinessObject bo);
    private static void ConfigureNewBo(IBusinessObject bo);
    private void UpdateExistingBo(IBusinessObject bo, IBusinessObject existingBo);
    private IBusinessObject GetExistingBo(IClassDef classDef, IBusinessObject bo);
    protected virtual XmlReaderSettings GetSettings();
    private static string BuildExceptionMessage(IEnumerable`1<string> propertyReadExceptions);
}
public class Habanero.BO.PropertyLink`2 : object {
    private IBusinessObject _owningBO;
    private string _sourcePropName;
    private string _destPropName;
    private Converter`2<TInput, TOutput> _transform;
    private TInput _previousSourceValue;
    private IBOProp _sourceProp;
    private IBOProp _destinationProp;
    public PropertyLink`2(IBusinessObject owningBO, string sourcePropName, string destPropName, Converter`2<TInput, TOutput> transform);
    private void SourcePropUpdatedHandler(object sender, BOPropEventArgs e);
    private TInput GetSourcePropValue();
    public void Disable();
    public void Enable();
    protected virtual override void Finalize();
}
public abstract class Habanero.BO.PropRuleBase : object {
    protected Dictionary`2<string, object> _parameters;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public Dictionary`2<string, object> Parameters { get; public set; }
    public string Name { get; public set; }
    public string Message { get; public set; }
    public List`1<string> AvailableParameters { get; }
    protected PropRuleBase(string name, string message);
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
    public virtual Dictionary`2<string, object> get_Parameters();
    public virtual void set_Parameters(Dictionary`2<string, object> value);
    protected internal abstract virtual void SetupParameters();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    private void FillParameters(IEnumerable`1<string> availableParams, Dictionary`2<string, object> currentCollection);
    protected virtual string GetBaseErrorMessage(object propValue, string displayName);
    public abstract virtual List`1<string> get_AvailableParameters();
    public sealed virtual void SetParameter(string parameterName, object value);
}
public class Habanero.BO.PropRuleDate : PropRuleBase {
    public List`1<string> AvailableParameters { get; }
    public DateTime MinValue { get; protected set; }
    public DateTime MaxValue { get; protected set; }
    unknown string MaxValueExpression {private set; }
    unknown string MinValueExpression {private set; }
    public PropRuleDate(string ruleName, string message);
    public PropRuleDate(string ruleName, string message, DateTime minValue, DateTime maxValue);
    private void InitialiseParameters(DateTime minValue, DateTime maxValue);
    protected internal virtual void SetupParameters();
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
    private bool IsPropValueADate(string displayName, object propValue, String& errorMessage);
    private bool IsPropValueGtMaxValue(string displayName, object propValue, String& errorMessage);
    private bool IsPropValueLtMinValue(string displayName, object propValue, String& errorMessage);
    public virtual List`1<string> get_AvailableParameters();
    public sealed virtual DateTime get_MinValue();
    protected void set_MinValue(DateTime value);
    public sealed virtual DateTime get_MaxValue();
    protected void set_MaxValue(DateTime value);
    private void set_MaxValueExpression(string value);
    private void set_MinValueExpression(string value);
}
public class Habanero.BO.PropRuleDecimal : PropRuleBase {
    public decimal MinValue { get; protected set; }
    public decimal MaxValue { get; protected set; }
    public List`1<string> AvailableParameters { get; }
    public PropRuleDecimal(string ruleName, string message, decimal minValue, decimal maxValue);
    public PropRuleDecimal(string name, string message);
    private void InitialiseParameters(decimal minValue, decimal maxValue);
    protected internal virtual void SetupParameters();
    public sealed virtual decimal get_MinValue();
    protected void set_MinValue(decimal value);
    public sealed virtual decimal get_MaxValue();
    protected void set_MaxValue(decimal value);
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
    public virtual List`1<string> get_AvailableParameters();
}
public class Habanero.BO.PropRuleDouble : PropRuleBase {
    public double MinValue { get; protected set; }
    public double MaxValue { get; protected set; }
    public List`1<string> AvailableParameters { get; }
    public PropRuleDouble(string ruleName, string message);
    public PropRuleDouble(string ruleName, string message, double minValue, double maxValue);
    private void InitialiseParameters(double minValue, double maxValue);
    protected internal virtual void SetupParameters();
    public sealed virtual double get_MinValue();
    protected void set_MinValue(double value);
    public sealed virtual double get_MaxValue();
    protected void set_MaxValue(double value);
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
    public virtual List`1<string> get_AvailableParameters();
}
public class Habanero.BO.PropRuleInteger : PropRuleIntegerBase`1<int> {
    public int MinValue { get; public set; }
    public int MaxValue { get; public set; }
    public PropRuleInteger(string name, string message, int min, int max);
    public PropRuleInteger(string name, string message);
    private void InitialiseParameters(int min, int max);
    protected internal virtual void SetupParameters();
    public virtual int get_MinValue();
    public virtual void set_MinValue(int value);
    public virtual int get_MaxValue();
    public virtual void set_MaxValue(int value);
    protected virtual bool IsLessThanMinValue(int value);
    protected virtual bool IsGreaterThanMaxValue(int value);
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
}
public abstract class Habanero.BO.PropRuleIntegerBase`1 : PropRuleBase {
    public T MaxValue { get; public set; }
    public T MinValue { get; public set; }
    public List`1<string> AvailableParameters { get; }
    protected PropRuleIntegerBase`1(string name, string message);
    public abstract virtual T get_MaxValue();
    public abstract virtual void set_MaxValue(T value);
    public abstract virtual T get_MinValue();
    public abstract virtual void set_MinValue(T value);
    protected abstract virtual bool IsLessThanMinValue(T value);
    protected abstract virtual bool IsGreaterThanMaxValue(T value);
    protected bool CheckValueAgainstAcceptedRange(string displayName, T value, String& errorMessage);
    public virtual List`1<string> get_AvailableParameters();
}
public class Habanero.BO.PropRuleLong : PropRuleIntegerBase`1<long> {
    public long MinValue { get; public set; }
    public long MaxValue { get; public set; }
    public PropRuleLong(string name, string message, long min, long max);
    public PropRuleLong(string name, string message);
    private void InitialiseParameters(long min, long max);
    protected internal virtual void SetupParameters();
    public virtual long get_MinValue();
    public virtual void set_MinValue(long value);
    public virtual long get_MaxValue();
    public virtual void set_MaxValue(long value);
    protected virtual bool IsLessThanMinValue(long value);
    protected virtual bool IsGreaterThanMaxValue(long value);
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
}
public class Habanero.BO.PropRuleShort : PropRuleIntegerBase`1<short> {
    public short MinValue { get; public set; }
    public short MaxValue { get; public set; }
    public PropRuleShort(string name, string message, short min, short max);
    public PropRuleShort(string name, string message);
    private void InitialiseParameters(short min, short max);
    protected internal virtual void SetupParameters();
    public virtual short get_MinValue();
    public virtual void set_MinValue(short value);
    public virtual short get_MaxValue();
    public virtual void set_MaxValue(short value);
    protected virtual bool IsLessThanMinValue(short value);
    protected virtual bool IsGreaterThanMaxValue(short value);
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
}
public class Habanero.BO.PropRuleSingle : PropRuleBase {
    public float MinValue { get; protected set; }
    public float MaxValue { get; protected set; }
    public List`1<string> AvailableParameters { get; }
    public PropRuleSingle(string ruleName, string message, float minValue, float maxValue);
    public PropRuleSingle(string name, string message);
    private void InitialiseParameters(float minValue, float maxValue);
    protected internal virtual void SetupParameters();
    public sealed virtual float get_MinValue();
    protected void set_MinValue(float value);
    public sealed virtual float get_MaxValue();
    protected void set_MaxValue(float value);
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
    public virtual List`1<string> get_AvailableParameters();
}
public class Habanero.BO.PropRuleString : PropRuleBase {
    public List`1<string> AvailableParameters { get; }
    public int MaxLength { get; protected set; }
    public int MinLength { get; protected set; }
    public string PatternMatch { get; protected set; }
    public string PatternMatchMessage { get; protected set; }
    public PropRuleString(string name, string message);
    public PropRuleString(string ruleName, string message, int minLength, int maxLength, string patternMatch);
    public PropRuleString(string ruleName, string message, int minLength, int maxLength, string patternMatch, string patternMatchMessage);
    private void InitialiseParameters(int minLength, int maxLength, string patternMatchMessage, string patternMatch);
    protected internal virtual void SetupParameters();
    public virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
    public virtual List`1<string> get_AvailableParameters();
    protected bool CheckPatternMatchRule(string propName, object propValue, String& errorMessage);
    protected bool CheckLengthRule(string propName, object propValue, String& errorMessage);
    public int get_MaxLength();
    protected void set_MaxLength(int value);
    public int get_MinLength();
    protected void set_MinLength(int value);
    public string get_PatternMatch();
    protected void set_PatternMatch(string value);
    public string get_PatternMatchMessage();
    protected void set_PatternMatchMessage(string value);
}
public class Habanero.BO.QueryBuilder : object {
    public static ISelectQuery CreateSelectQuery(IClassDef classDef);
    public static ISelectQuery CreateSelectQuery(IClassDef classDef, Criteria criteria);
    private static void AddAllPropsToQuery(IClassDef classDef, SelectQuery selectQuery);
    private static QueryField CreateQueryField(IClassDef classDef, IPropDef propDef);
    public static QueryField CreateQueryField(IClassDef classDef, string propertyName);
    private static void AddDiscriminatorFields(ISelectQuery selectQuery, IClassDef classDef, Criteria& criteria);
    public static IOrderCriteria CreateOrderCriteria(IClassDef classDef, string orderByString);
    public static void PrepareCriteria(IClassDef classDef, Criteria criteria);
    public static IPropDef PrepareField(Source currentSource, IClassDef classDef, QueryField field);
    public static void PrepareSource(IClassDef classDef, Source& source);
    public static void PrepareSource(IClassDef classDef, Source& source, IClassDef& relatedClassDef);
    private static void CreateInheritanceJoins(IClassDef classDef, Source rootSource);
    private static void PrepareSourceTree(Source currentSource, ClassDef& currentClassDef);
    public static void PrepareDiscriminatorCriteria(IClassDef classDef, Criteria criteria);
    public static ISelectQuery CreateSelectCountQuery(IClassDef classDef);
    public static ISelectQuery CreateSelectCountQuery(IClassDef classDef, Criteria criteria);
}
public class Habanero.BO.QueryResultLoaderInMemory : object {
    private DataStoreInMemory _dataStore;
    public QueryResultLoaderInMemory(DataStoreInMemory dataStore);
    public sealed virtual IQueryResult GetResultSet(ISelectQuery selectQuery);
}
public class Habanero.BO.ReadOnlyDataSetProvider : DataSetProvider {
    public ReadOnlyDataSetProvider(IBusinessObjectCollection collection);
    public virtual void InitialiseLocalData();
}
public class Habanero.BO.ReflectionPropertyMapper : object {
    private IBusinessObject _businessObject;
    protected PropertyInfo _propertyInfo;
    protected string _invalidMessage;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; private set; }
    public IBusinessObject BusinessObject { get; public set; }
    public string InvalidReason { get; }
    public ReflectionPropertyMapper(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    public sealed virtual IBusinessObject get_BusinessObject();
    public void set_BusinessObject(IBusinessObject value);
    private void ThrowPropertyNotFoundException(IBusinessObject businessObject);
    public sealed virtual void SetPropertyValue(object propValue);
    private void CheckBusinessObjectSet(string methodName);
    public sealed virtual object GetPropertyValue();
    public sealed virtual string get_InvalidReason();
}
public class Habanero.BO.RelatedBusinessObjectCollection`1 : BusinessObjectCollection`1<TBusinessObject> {
    private Relationship _relationship;
    public RelatedBusinessObjectCollection`1(IRelationship relationship);
    protected virtual bool AddInternal(TBusinessObject bo);
    public virtual bool Remove(TBusinessObject bo);
    internal bool RemoveInternal(TBusinessObject bo);
    private void DereferenceBO(TBusinessObject bo);
    private void RemoveRelatedObject(TBusinessObject bo);
    public virtual void SaveAll();
    protected virtual TBusinessObject CreateNewBusinessObject();
    private void SetupRelatedObject(TBusinessObject bo);
    private bool IsForeignKeySetup(TBusinessObject bo);
    internal IRelationship GetReverseRelationship(TBusinessObject bo);
    private void SetUpForeignKey(TBusinessObject bo);
    protected virtual void RestoredEventHandler(object sender, BOEventArgs e);
    protected virtual void SavedEventHandler(object sender, BOEventArgs e);
    private void RemoveFromPersistedCollection(TBusinessObject bo);
}
public abstract class Habanero.BO.Relationship : RelationshipBase {
    protected IRelationshipDef _relDef;
    protected IBusinessObject _owningBo;
    private Lazy`1<IRelKey> _relKey;
    private bool _initialised;
    public string RelationshipName { get; }
    public IRelationshipDef RelationshipDef { get; }
    public DeleteParentAction DeleteParentAction { get; }
    public IBusinessObject OwningBO { get; }
    public IRelKey RelKey { get; }
    public IClassDef RelatedObjectClassDef { get; }
    public bool Initialised { get; }
    protected Relationship(IBusinessObject owningBo, IRelationshipDef lRelDef, IBOPropCol lBOPropCol);
    public virtual string get_RelationshipName();
    public virtual IRelationshipDef get_RelationshipDef();
    public virtual DeleteParentAction get_DeleteParentAction();
    public virtual IBusinessObject get_OwningBO();
    public virtual IRelKey get_RelKey();
    public virtual IClassDef get_RelatedObjectClassDef();
    private sealed virtual override void Habanero.BO.IRelationshipForLoading.Initialise();
    protected abstract virtual void DoInitialisation();
    public virtual bool get_Initialised();
    protected void DereferenceChild(TransactionCommitter committer, IBusinessObject bo);
    protected virtual void DeleteChild(TransactionCommitter committer, IBusinessObject bo);
    internal abstract virtual void UpdateRelationshipAsPersisted();
}
public abstract class Habanero.BO.RelationshipBase : object {
    public IRelKey RelKey { get; }
    public IClassDef RelatedObjectClassDef { get; }
    public bool IsDirty { get; }
    public IRelationshipDef RelationshipDef { get; }
    public string RelationshipName { get; }
    public bool Initialised { get; }
    public DeleteParentAction DeleteParentAction { get; }
    public IBusinessObject OwningBO { get; }
    public RelationshipType RelationshipType { get; }
    public abstract virtual IRelKey get_RelKey();
    public abstract virtual IClassDef get_RelatedObjectClassDef();
    public abstract virtual bool get_IsDirty();
    public abstract virtual IRelationshipDef get_RelationshipDef();
    public abstract virtual string get_RelationshipName();
    public abstract virtual bool get_Initialised();
    public abstract virtual DeleteParentAction get_DeleteParentAction();
    public abstract virtual IBusinessObject get_OwningBO();
    public sealed virtual RelationshipType get_RelationshipType();
    public abstract virtual bool IsDeletable(String& message);
    public abstract virtual void MarkForDelete();
    internal abstract virtual void CancelEdits();
    internal abstract virtual void AddDirtyChildrenToTransactionCommitter(TransactionCommitter committer);
    internal abstract virtual void DereferenceChildren(TransactionCommitter committer);
    internal abstract virtual void DeleteChildren(TransactionCommitter committer);
    internal abstract virtual void DereferenceRemovedChildren(TransactionCommitter committer);
    internal abstract virtual void DeleteMarkedForDeleteChildren(TransactionCommitter committer);
    public sealed virtual IRelationship GetReverseRelationship(IBusinessObject bo);
    protected static bool HasReverseRelationshipDefined(IRelationship relationship);
    [CompilerGeneratedAttribute]
private bool <GetReverseRelationship>b__26_0(IRelationship relationship);
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.RelationshipCol : object {
    private IBusinessObject _bo;
    private Dictionary`2<string, IRelationship> _relationships;
    public bool IsDirty { get; }
    public int Count { get; }
    public IRelationship Item { get; }
    public RelationshipCol(IBusinessObject bo);
    public sealed virtual bool get_IsDirty();
    public int get_Count();
    public void Add(IRelationship lRelationship);
    public void Add(IEnumerable`1<IRelationship> relCol);
    public sealed virtual IRelationship get_Item(string relationshipName);
    public sealed virtual IBusinessObject GetRelatedObject(string relationshipName);
    public sealed virtual T GetRelatedObject(string relationshipName);
    public ISingleRelationship GetSingle(string relationshipName);
    public SingleRelationship`1<T> GetSingle(string relationshipName);
    private IRelationship GetRelationshipAsSingle(string relationshipName);
    public sealed virtual bool Contains(string relationshipName);
    public virtual IBusinessObjectCollection GetRelatedCollection(string relationshipName);
    public BusinessObjectCollection`1<TBusinessObject> GetRelatedCollection(string relationshipName);
    public MultipleRelationship`1<T> GetMultiple(string relationshipName);
    public IMultipleRelationship GetMultiple(string relationshipName);
    private IMultipleRelationship GetRelationshipAsMultiple(string relationshipName);
    public sealed virtual void SetRelatedObject(string relationshipName, IBusinessObject relatedObject);
    public sealed virtual IEnumerator`1<IRelationship> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void CancelEdits();
    internal void AddDirtyChildrenToTransactionCommitter(TransactionCommitter transactionCommitter);
    internal void DereferenceChildren(TransactionCommitter transactionCommitter);
    internal void DeleteChildren(TransactionCommitter transactionCommitter);
}
public class Habanero.BO.RelationshipObjectInitialiser : object {
    private string _correspondingRelationshipName;
    private RelationshipDef _relationship;
    private IBusinessObject _parentObject;
    public RelationshipObjectInitialiser(IBusinessObject parentObject, RelationshipDef relationship, string correspondingRelationshipName);
    public sealed virtual void InitialiseObject(IBusinessObject objToInitialise);
    public sealed virtual void InitialiseDataRow(DataRow row);
}
internal static class Habanero.BO.RelationshipUtils : object {
    public static IBusinessObjectCollection CreateRelatedBusinessObjectCollection(Type boType, IMultipleRelationship relationship);
    public static IBusinessObjectCollection CreateRelatedBusinessObjectCollection(string boAssemblyName, string boClassName, IMultipleRelationship relationship);
    private static IBusinessObjectCollection CreateNewRelatedBusinessObjectCollection(string boAssemblyName, string boClassName, IRelationship relationship);
    private static IBusinessObjectCollection CreateNewRelatedBusinessObjectCollection(Type boType, IRelationship relationship);
    internal static void SetupCriteriaForRelationship(IMultipleRelationship relationship, IBusinessObjectCollection collection);
    internal static void CheckCorrespondingSingleRelationshipsAreValid(SingleRelationshipBase singleRelationship, SingleRelationshipBase singleReverseRelationship);
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.RelKey : object {
    private Dictionary`2<string, IRelProp> _relProps;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler RelatedPropValueChanged;
    public IRelProp Item { get; }
    public IRelProp Item { get; }
    public Criteria Criteria { get; }
    public int Count { get; }
    public RelKey(IEnumerable`1<IRelPropDef> lRelKeyDef, IBOPropCol lBoPropCol);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RelatedPropValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RelatedPropValueChanged(EventHandler value);
    private void FireRelatedPropValueChangedEvent();
    public sealed virtual IRelProp get_Item(string propName);
    public sealed virtual IRelProp get_Item(int index);
    private void Add(IRelProp relProp);
    public sealed virtual bool Contains(string propName);
    public sealed virtual Criteria get_Criteria();
    public sealed virtual bool HasRelatedObject();
    public sealed virtual IEnumerator`1<IRelProp> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object sender, EventArgs e);
}
public class Habanero.BO.RelProp : object {
    private IBOProp _boProp;
    private RelPropDef _relPropDef;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler PropValueUpdated;
    public string OwnerPropertyName { get; }
    public string RelatedClassPropName { get; }
    public bool IsNull { get; }
    public IBOProp BOProp { get; }
    internal Criteria Criteria { get; }
    internal RelProp(RelPropDef mRelPropDef, IBOProp lBoProp);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropValueUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropValueUpdated(EventHandler value);
    private void FirePropValueUpdatedEvent();
    public sealed virtual string get_OwnerPropertyName();
    public sealed virtual string get_RelatedClassPropName();
    public sealed virtual bool get_IsNull();
    internal IExpression RelatedPropExpression();
    public sealed virtual IBOProp get_BOProp();
    internal Criteria get_Criteria();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(object sender, BOPropEventArgs e);
}
public enum Habanero.BO.Rules.ComparisonOperator : Enum {
    public int value__;
    public static ComparisonOperator GreaterThan;
    public static ComparisonOperator GreaterThanOrEqual;
    public static ComparisonOperator EqualTo;
    public static ComparisonOperator LessThanOrEqual;
    public static ComparisonOperator LessThan;
}
public class Habanero.BO.Rules.InterPropRule : object {
    private IComparable _prop1Value;
    private IComparable _prop2Value;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPropDef <LeftProp>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ComparisonOperator <ComparisonOp>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPropDef <RightProp>k__BackingField;
    public IPropDef LeftProp { get; protected set; }
    public ComparisonOperator ComparisonOp { get; private set; }
    public IPropDef RightProp { get; protected set; }
    public string Name { get; }
    public string Message { get; }
    public ErrorLevel ErrorLevel { get; }
    public InterPropRule(IPropDef propLeft, ComparisonOperator comparisonOperator, IPropDef propRight);
    protected InterPropRule(ComparisonOperator comparisonOperator);
    [CompilerGeneratedAttribute]
public IPropDef get_LeftProp();
    [CompilerGeneratedAttribute]
protected void set_LeftProp(IPropDef value);
    [CompilerGeneratedAttribute]
public ComparisonOperator get_ComparisonOp();
    [CompilerGeneratedAttribute]
private void set_ComparisonOp(ComparisonOperator value);
    [CompilerGeneratedAttribute]
public IPropDef get_RightProp();
    [CompilerGeneratedAttribute]
protected void set_RightProp(IPropDef value);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsValid(IBusinessObject bo);
    public sealed virtual string get_Name();
    public sealed virtual string get_Message();
    public sealed virtual ErrorLevel get_ErrorLevel();
}
public class Habanero.BO.Rules.InterPropRule`1 : InterPropRule {
    public InterPropRule`1(IPropDef propLeft, ComparisonOperator comparisonOperator, IPropDef propRight);
    public InterPropRule`1(Expression`1<Func`2<T, object>> propExpressionLeft, ComparisonOperator comparisonOperator, Expression`1<Func`2<T, object>> propExpressionRight);
}
public class Habanero.BO.SelectQuery : object {
    private Dictionary`2<string, QueryField> _fields;
    private Criteria _criteria;
    private IOrderCriteria _orderCriteria;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Source <Source>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClassDef <ClassDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Criteria <DiscriminatorCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <FirstRecordToLoad>k__BackingField;
    public Criteria Criteria { get; public set; }
    public Dictionary`2<string, QueryField> Fields { get; }
    public Source Source { get; public set; }
    public IOrderCriteria OrderCriteria { get; public set; }
    public int Limit { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public Criteria DiscriminatorCriteria { get; public set; }
    public int FirstRecordToLoad { get; public set; }
    public SelectQuery(Criteria criteria);
    public sealed virtual Criteria get_Criteria();
    public sealed virtual void set_Criteria(Criteria value);
    private void MergeCriteriaSource(Criteria criteria);
    public sealed virtual Dictionary`2<string, QueryField> get_Fields();
    [CompilerGeneratedAttribute]
public sealed virtual Source get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Source(Source value);
    public sealed virtual IOrderCriteria get_OrderCriteria();
    public sealed virtual void set_OrderCriteria(IOrderCriteria value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Limit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Limit(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IClassDef get_ClassDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClassDef(IClassDef value);
    [CompilerGeneratedAttribute]
public sealed virtual Criteria get_DiscriminatorCriteria();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiscriminatorCriteria(Criteria value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FirstRecordToLoad();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FirstRecordToLoad(int value);
}
public class Habanero.BO.SimpleLookupList : object {
    private Dictionary`2<string, string> _displayValueDictionary;
    private Dictionary`2<string, string> _keyValueDictionary;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPropDef <PropDef>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <LimitToList>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <TimeOut>k__BackingField;
    public IPropDef PropDef { get; public set; }
    public bool LimitToList { get; public set; }
    public int TimeOut { get; public set; }
    public SimpleLookupList(Dictionary`2<string, string> collection);
    public SimpleLookupList(Dictionary`2<string, string> collection, bool limitToList);
    public sealed virtual Dictionary`2<string, string> GetLookupList();
    public sealed virtual Dictionary`2<string, string> GetLookupList(IDatabaseConnection connection);
    [CompilerGeneratedAttribute]
public sealed virtual IPropDef get_PropDef();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PropDef(IPropDef value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LimitToList();
    [CompilerGeneratedAttribute]
public void set_LimitToList(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TimeOut();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeOut(int value);
    public sealed virtual Dictionary`2<string, string> GetIDValueLookupList();
    private void FillKeyValueDictionary();
}
public class Habanero.BO.SingleRelationship`1 : SingleRelationshipBase {
    private TBusinessObject _relatedBo;
    private Criteria _storedKeyCriteria;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler RelatedBusinessObjectChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<BOEventArgs`1<TBusinessObject>> Updated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsRemoved>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private TBusinessObject <RemovedBO>k__BackingField;
    public bool IsDirty { get; }
    internal bool IsRemoved { get; private set; }
    internal TBusinessObject RemovedBO { get; private set; }
    internal IBusinessObject RemovedBOInternal { get; }
    public bool OwningBOHasForeignKey { get; public set; }
    public SingleRelationship`1(IBusinessObject owningBo, IRelationshipDef lRelDef, IBOPropCol lBOPropCol);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RelatedBusinessObjectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RelatedBusinessObjectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Updated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    [CompilerGeneratedAttribute]
public void remove_Updated(EventHandler`1<BOEventArgs`1<TBusinessObject>> value);
    private void FireRelatedBusinessObjectChangedEvent();
    public virtual bool get_IsDirty();
    private bool IsRelatedBOCreatedOrDeleted();
    private bool MustPersistChild();
    private bool IsRemovedBOPropsDirty();
    private bool IsRelatedBOPropsDirty();
    private bool IsRelatedPropsDirty(IBusinessObject bo);
    [CompilerGeneratedAttribute]
internal bool get_IsRemoved();
    [CompilerGeneratedAttribute]
private void set_IsRemoved(bool value);
    [CompilerGeneratedAttribute]
internal TBusinessObject get_RemovedBO();
    [CompilerGeneratedAttribute]
private void set_RemovedBO(TBusinessObject value);
    internal virtual IBusinessObject get_RemovedBOInternal();
    public virtual bool get_OwningBOHasForeignKey();
    public virtual void set_OwningBOHasForeignKey(bool value);
    public virtual bool HasRelatedObject();
    private sealed virtual override IBusinessObject Habanero.BO.ISingleRelationship.GetRelatedObject();
    public virtual TBusinessObject GetRelatedObject();
    private TBusinessObject GetRelatedObject(bool isInternalAdd);
    private bool RelKeyIsDirty();
    private void SetRelatedBoReferenceInternal(TBusinessObject relatedBo);
    private void RegisterForRelatedKeyPropChangeEvents();
    private void UnRegisterForRelatedKeyPropChangeEvents();
    private void ForEachRelatedBoKeyProp(Action`1<IBOProp> action);
    private void RelatedBoKeyPropUpdated(object sender, BOPropEventArgs boPropEventArgs);
    private TBusinessObject GetRelatedBusinessObjectFromBusinessObjectManager();
    public virtual bool IsDeletable(String& message);
    public virtual void MarkForDelete();
    private bool RelatedBoDoesNotMatchForeignKey();
    private sealed virtual override void Habanero.BO.ISingleRelationship.SetRelatedObject(IBusinessObject relatedObject);
    public virtual void SetRelatedObject(TBusinessObject relatedObject);
    internal virtual void SetRelatedObjectFromMultiple(IBusinessObject relatedObject);
    internal void SetRelatedObjectInternal(TBusinessObject relatedObject, bool isInternalAdd);
    private void FireUpdatedEvent();
    private void AddToReverseRelationship(TBusinessObject relatedObject, bool isInternalAdd);
    private void AddToSingleReverseRelationship(IRelationship reverseRelationship);
    private void AddToMultipleReverseRelationship(IRelationship reverseRelationship, bool isInternalAdd);
    private void RemoveFromReverseRelationship(TBusinessObject previousRelatedBO);
    private void RemoveFromSingleReverseRelationship(IRelationship reverseRelationship);
    private void RemoveFromMultipleReverseRelationship(IRelationship reverseRelationship);
    private void UpdateForeignKeyAndStoredRelationshipExpression();
    private bool IsRelatedBODirty();
    private bool MustAddToDirtyBusinessObjects();
    private bool IsRelationshipCompositionOrAggregation();
    private bool IsRelationshipComposition();
    private bool IsRelationshipAggregation();
    private bool MustAddRemovedBOToDirtyBusinessObjects();
    protected virtual void DoInitialisation();
    internal virtual void UpdateRelationshipAsPersisted();
    internal virtual void DereferenceChildren(TransactionCommitter committer);
    internal virtual void DeleteChildren(TransactionCommitter committer);
    internal virtual void DereferenceRemovedChildren(TransactionCommitter committer);
    internal virtual void DeleteMarkedForDeleteChildren(TransactionCommitter committer);
    internal virtual void CancelEdits();
    internal virtual void AddDirtyChildrenToTransactionCommitter(TransactionCommitter transactionCommitter);
    internal IList`1<TBusinessObject> GetDirtyChildren();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <RegisterForRelatedKeyPropChangeEvents>b__36_0(IBOProp boProp);
    [CompilerGeneratedAttribute]
private void <UnRegisterForRelatedKeyPropChangeEvents>b__37_0(IBOProp boProp);
}
public abstract class Habanero.BO.SingleRelationshipBase : Relationship {
    internal IBusinessObject RemovedBOInternal { get; }
    public bool OwningBOHasForeignKey { get; public set; }
    protected SingleRelationshipBase(IBusinessObject owningBo, IRelationshipDef lRelDef, IBOPropCol lBOPropCol);
    internal abstract virtual IBusinessObject get_RemovedBOInternal();
    public abstract virtual bool get_OwningBOHasForeignKey();
    public abstract virtual void set_OwningBOHasForeignKey(bool value);
    internal abstract virtual void SetRelatedObjectFromMultiple(IBusinessObject relatedObject);
}
public class Habanero.BO.SupportsAutoIncrementingFieldBO : object {
    private IBusinessObject _bo;
    public SupportsAutoIncrementingFieldBO(IBusinessObject bo);
    public sealed virtual void SetAutoIncrementingFieldValue(long value);
}
public class Habanero.BO.TransactionalBusinessObject : object {
    private BusinessObject _businessObject;
    public BusinessObject BusinessObject { get; }
    protected internal bool IsDeleted { get; }
    protected internal TransactionalBusinessObject(IBusinessObject businessObject);
    public BusinessObject get_BusinessObject();
    protected internal virtual bool get_IsDeleted();
    protected internal bool IsNew();
    protected internal bool IsNewAndDeleted();
    public sealed virtual string TransactionID();
    public virtual void UpdateStateAsCommitted();
    protected internal virtual bool IsValid(String& invalidReason);
    protected internal virtual void UpdateObjectBeforePersisting(ITransactionCommitter transactionCommitter);
    protected internal virtual void CheckForConcurrencyErrors();
    public virtual void UpdateAsRolledBack();
    protected internal bool CheckCanDelete(String& errMsg);
    protected internal bool CanBePersisted(String& errMsg);
    protected internal virtual void CheckDuplicateIdentifier(List`1<ITransactional> pendingTransactions, List`1<string> errorMessages);
    private static string GetClassDisplayName(BusinessObject bo);
    private static IBusinessObjectCollection GetDuplicateObjects(BusinessObject bo, List`1<ITransactional> pendingTransactions, Criteria keyCriteria);
    private static Criteria GetDuplicateKeyCriteria(Criteria keyCriteria, Criteria primaryKeyCriteria);
    private static void CheckDuplicatePrimaryKey(BusinessObject bo, List`1<ITransactional> pendingTransactions, IPrimaryKey primaryKey, List`1<string> errorMessages);
    private static string GetDuplicateObjectErrMsg(IBOKey boKey, string classDisplayName);
}
public class Habanero.BO.TransactionalBusinessObjectInMemory : TransactionalBusinessObject {
    protected internal TransactionalBusinessObjectInMemory(IBusinessObject businessObject);
}
public abstract class Habanero.BO.TransactionalSingleRelationship : object {
    private IRelationship _relationship;
    private IBusinessObject _relatedBO;
    private string _transactionID;
    public IRelationship Relationship { get; }
    protected IBusinessObject RelatedBO { get; }
    protected TransactionalSingleRelationship(IRelationship relationship, IBusinessObject relatedBO);
    public IRelationship get_Relationship();
    protected IBusinessObject get_RelatedBO();
    public sealed virtual string TransactionID();
    public sealed virtual void UpdateStateAsCommitted();
    protected abstract virtual void UpdateCollections();
    public sealed virtual void UpdateAsRolledBack();
}
public class Habanero.BO.TransactionalSingleRelationship_Added : TransactionalSingleRelationship {
    protected internal TransactionalSingleRelationship_Added(IRelationship singleRelationship, IBusinessObject relatedBO);
    protected virtual void UpdateCollections();
}
public class Habanero.BO.TransactionalSingleRelationship_Removed : TransactionalSingleRelationship {
    protected internal TransactionalSingleRelationship_Removed(IRelationship singleRelationship, IBusinessObject relatedBO);
    protected virtual void UpdateCollections();
}
public abstract class Habanero.BO.TransactionCommitter : MarshalByRefObject {
    private List`1<ITransactional> _originalTransactions;
    private Dictionary`2<string, ITransactional> _originalTransactionsByKey;
    private static IHabaneroLogger Log;
    protected List`1<ITransactional> _executedTransactions;
    protected bool _commitSuccess;
    private bool _runningUpdatingBeforePersisting;
    internal List`1<ITransactional> ExecutedTransactions { get; }
    protected internal List`1<ITransactional> OriginalTransactions { get; }
    public bool CommitSuccess { get; }
    private static TransactionCommitter();
    public virtual void AddBusinessObject(IBusinessObject businessObject);
    public void InsertBusinessObject(IBusinessObject businessObject);
    private void UpdateObjectBeforePersisting(TransactionalBusinessObject transaction, bool added);
    private static bool MustBOBeAdded(IBusinessObject businessObject);
    public sealed virtual void AddTransaction(ITransactional transaction);
    private bool AddTransactionInternal(ITransactional transaction);
    private bool InsertTransactionInternal(ITransactional transaction);
    private bool AddToTransactionsByKey(ITransactional transaction);
    public sealed virtual List`1<Guid> CommitTransaction();
    internal List`1<ITransactional> get_ExecutedTransactions();
    protected internal List`1<ITransactional> get_OriginalTransactions();
    public bool get_CommitSuccess();
    private void Begin();
    private void UpdateObjectBeforePersisting();
    private void ValidateTransactionCanBePersisted();
    private void CheckObjectsAreValid();
    private void CheckTransactionsCanBePersisted();
    private void ValidateObjectsCanBeDeleted();
    private void CheckForDuplicateObjects();
    private void CheckForConcurrencyErrors();
    protected abstract virtual void BeginDataSource();
    private void Execute();
    protected internal virtual void ExecuteTransactionToDataSource(ITransactional transaction);
    protected abstract virtual void TryRollback();
    private void Commit();
    protected abstract virtual bool CommitToDatasource();
    protected void UpdateTransactionsAsCommited();
    private void UpdateTransactionsAsRolledBack();
    protected internal abstract virtual TransactionalBusinessObject CreateTransactionalBusinessObject(IBusinessObject businessObject);
    protected void DereferenceRelatedChildren(IBusinessObject businessObject);
    protected void DeleteRelatedChildren(IBusinessObject businessObject);
    protected internal abstract virtual void AddAddedChildBusinessObject(IRelationship relationship, T businessObject);
    protected internal abstract virtual void AddRemovedChildBusinessObject(IRelationship relationship, T businessObject);
}
public class Habanero.BO.TransactionCommitterInMemory : TransactionCommitter {
    private DataStoreInMemory _dataStoreInMemory;
    private Dictionary`2<string, ITransactional> _transactionsExecutingToDataSource;
    public TransactionCommitterInMemory(DataStoreInMemory dataStoreInMemory);
    protected virtual void BeginDataSource();
    protected internal virtual TransactionalBusinessObject CreateTransactionalBusinessObject(IBusinessObject businessObject);
    protected internal virtual void AddAddedChildBusinessObject(IRelationship relationship, T businessObject);
    protected internal virtual void AddRemovedChildBusinessObject(IRelationship relationship, T businessObject);
    protected internal virtual void ExecuteTransactionToDataSource(ITransactional transaction);
    protected virtual bool CommitToDatasource();
    protected virtual void TryRollback();
}
public class Habanero.BO.TransactionCommitterMultiSource : object {
    private IDataAccessor _defaultDataAccessor;
    private Dictionary`2<Type, IDataAccessor> _dataAccessors;
    private ITransactionCommitter _transactionCommitter;
    private IDataAccessor _myDataAccessor;
    public TransactionCommitterMultiSource(IDataAccessor defaultDataAccessor, Dictionary`2<Type, IDataAccessor> dataAccessors);
    public sealed virtual void AddBusinessObject(IBusinessObject businessObject);
    private IDataAccessor GetDataAccessorForType(Type type);
    public sealed virtual void AddTransaction(ITransactional transaction);
    public sealed virtual List`1<Guid> CommitTransaction();
}
public class Habanero.BO.TransactionLogBusObj : BusinessObject {
    public string CrudAction { get; public set; }
    public string DirtyXMLLog { get; public set; }
    public string BusinessObjectTypeName { get; public set; }
    public string WindowsUser { get; public set; }
    public string LogonUser { get; public set; }
    public string MachineUpdatedName { get; public set; }
    public Nullable`1<DateTime> DateTimeUpdated { get; public set; }
    public string BusinessObjectToString { get; public set; }
    public static IClassDef LoadClassDef();
    public string get_CrudAction();
    public void set_CrudAction(string value);
    public string get_DirtyXMLLog();
    public void set_DirtyXMLLog(string value);
    public string get_BusinessObjectTypeName();
    public void set_BusinessObjectTypeName(string value);
    public string get_WindowsUser();
    public void set_WindowsUser(string value);
    public string get_LogonUser();
    public void set_LogonUser(string value);
    public string get_MachineUpdatedName();
    public void set_MachineUpdatedName(string value);
    public Nullable`1<DateTime> get_DateTimeUpdated();
    public void set_DateTimeUpdated(Nullable`1<DateTime> value);
    public string get_BusinessObjectToString();
    public void set_BusinessObjectToString(string value);
}
public class Habanero.BO.TransactionLoggerFactoryNull : object {
    public sealed virtual ITransactionLog GetLogger(BusinessObject bo, string tableName);
    public sealed virtual ITransactionLog GetLogger(BusinessObject bo);
}
[AttributeUsageAttribute("128")]
public class Habanero.BO.TypeDescriptorIgnoreAttribute : Attribute {
}
