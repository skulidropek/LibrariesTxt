public class Habanero.Base.Base64Sha1Hasher : object {
    public sealed virtual string HashString(string value);
    private static Byte[] GetPasswordByteArray(string value);
}
public class Habanero.Base.BOEventArgs : EventArgs {
    private IBusinessObject _bo;
    public IBusinessObject BusinessObject { get; }
    public BOEventArgs(IBusinessObject bo);
    public IBusinessObject get_BusinessObject();
}
public class Habanero.Base.BOEventArgs`1 : BOEventArgs {
    private TBusinessObject _bo;
    public TBusinessObject BusinessObject { get; }
    public BOEventArgs`1(TBusinessObject bo);
    public TBusinessObject get_BusinessObject();
}
[DefaultMemberAttribute("Item")]
public class Habanero.Base.BOKeyCol : object {
    private Dictionary`2<string, IBOKey> _boKeys;
    internal IBOKey Item { get; }
    public int Count { get; }
    public void Add(IBOKey lBOKey);
    public void Add(BOKeyCol keyCol);
    internal IBOKey get_Item(string boKeyName);
    internal bool Contains(string boKeyName);
    public IEnumerator GetEnumerator();
    public int get_Count();
}
public class Habanero.Base.BOKeyEventArgs : EventArgs {
    private IBOKey _boKey;
    public IBOKey BOKey { get; }
    public BOKeyEventArgs(IBOKey boKey);
    public IBOKey get_BOKey();
}
public enum Habanero.Base.BOPropActions : Enum {
    public int value__;
    public static BOPropActions CanRead;
    public static BOPropActions CanUpdate;
}
public class Habanero.Base.BOPropEventArgs : EventArgs {
    private IBOProp _prop;
    public IBOProp Prop { get; }
    public BOPropEventArgs(IBOProp prop);
    public IBOProp get_Prop();
}
public class Habanero.Base.BOPropUpdatedEventArgs : EventArgs {
    private IBOProp _prop;
    private IBusinessObject _businessObject;
    public IBOProp Prop { get; }
    public IBusinessObject BusinessObject { get; }
    public BOPropUpdatedEventArgs(IBusinessObject businessObject, IBOProp prop);
    public IBOProp get_Prop();
    public IBusinessObject get_BusinessObject();
}
public class Habanero.Base.BOPropUpdatedEventArgs`1 : BOPropUpdatedEventArgs {
    private TBusinessObject _bo;
    public TBusinessObject BusinessObject { get; }
    public BOPropUpdatedEventArgs`1(TBusinessObject bo, IBOProp prop);
    public TBusinessObject get_BusinessObject();
}
public enum Habanero.Base.BusinessObjectActions : Enum {
    public int value__;
    public static BusinessObjectActions CanCreate;
    public static BusinessObjectActions CanRead;
    public static BusinessObjectActions CanUpdate;
    public static BusinessObjectActions CanDelete;
}
public abstract class Habanero.Base.BusinessObjectCreator`1 : object {
    private sealed virtual override IBusinessObject Habanero.Base.IBusinessObjectCreator.CreateBusinessObject();
    public abstract virtual T CreateBusinessObject();
}
public class Habanero.Base.BusinessObjectDTO : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassDefName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ID>k__BackingField;
    private Dictionary`2<string, object> _props;
    public string ClassDefName { get; private set; }
    public string ClassName { get; private set; }
    public string AssemblyName { get; private set; }
    public string ID { get; private set; }
    public Dictionary`2<string, object> Props { get; }
    public BusinessObjectDTO(IBusinessObject businessObject);
    [CompilerGeneratedAttribute]
public string get_ClassDefName();
    [CompilerGeneratedAttribute]
private void set_ClassDefName(string value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
private void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
private void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
private void set_ID(string value);
    public Dictionary`2<string, object> get_Props();
}
[DefaultMemberAttribute("Item")]
public class Habanero.Base.ClassDefCol : object {
    private static ClassDefCol _classDefcol;
    private static bool _instanceFlag;
    private Dictionary`2<string, IClassDef> _classDefs;
    public IClassDef Item { get; }
    public IClassDef Item { get; }
    internal ICollection Keys { get; }
    internal ICollection Values { get; }
    public int Count { get; }
    public IClassDef get_Item(Type key);
    private static void ThrowClassDefNotFoundForTypeException(Type type);
    private static void ThrowClassDefNotFoundForTypeException(string assemblyName, string className, string typeid);
    public IClassDef get_Item(string assemblyName, string className);
    internal ICollection get_Keys();
    internal ICollection get_Values();
    private sealed virtual override IEnumerator`1<IClassDef> System.Collections.Generic.IEnumerable<Habanero.Base.IClassDef>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(IClassDef value);
    public void Add(IEnumerable`1<IClassDef> classDefCol);
    public bool Contains(Type key);
    public bool Contains(string assemblyName, string className);
    public bool Contains(IClassDef classDef);
    public void Remove(Type key);
    public void Remove(IClassDef classDef);
    public void Remove(string assemblyName, string className);
    protected static void FinalizeInstanceFlag();
    public IClassDef FindByClassName(string className);
    public int get_Count();
    public static ClassDefCol GetColClassDef();
    public static ClassDefCol LoadColClassDef(ClassDefCol classDefCol);
    public void Clear();
    private string GetTypeIdForItem(Type key, Boolean& found);
    private string GetTypeIdForItem(string assemblyName, string className, Boolean& found);
    private static string GetTypeId(string assemblyName, string className, bool includeNamespace);
    private static string GetTypeId(Type classType, bool includeNamespace);
    public static string StripOutNameSpace(string className);
    public static string StripOutNameSpace(string className, String& namespaceString);
}
public class Habanero.Base.ConfirmationDelegate : MulticastDelegate {
    public ConfirmationDelegate(object object, IntPtr method);
    public virtual void Invoke(bool confirmed);
    public virtual IAsyncResult BeginInvoke(bool confirmed, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Habanero.Base.CountFunctionQueryField : FunctionQueryField {
    public CountFunctionQueryField(object field);
    private static object FieldOrDefault(object input);
}
[CoverageExcludeAttribute]
public class Habanero.Base.CoverageExcludeAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ExcludeReason>k__BackingField;
    public string ExcludeReason { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ExcludeReason();
    [CompilerGeneratedAttribute]
public void set_ExcludeReason(string value);
}
public class Habanero.Base.Criteria : object {
    public static string DATE_FORMAT;
    protected String[] _logicalOps;
    protected String[] _comparisonOps;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private QueryField <Field>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Criteria <LeftCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Criteria <RightCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private LogicalOp <LogicalOperator>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private object <FieldValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ComparisonOp <ComparisonOperator>k__BackingField;
    private static Regex GuidFormat;
    public QueryField Field { get; private set; }
    public Criteria LeftCriteria { get; private set; }
    public Criteria RightCriteria { get; private set; }
    public LogicalOp LogicalOperator { get; private set; }
    public object FieldValue { get; public set; }
    public ComparisonOp ComparisonOperator { get; public set; }
    public Criteria(string propName, ComparisonOp comparisonOp, object value);
    public Criteria(Criteria leftCriteria, LogicalOp logicalOp, Criteria rightCriteria);
    public Criteria(QueryField field, ComparisonOp comparisonOp, object value);
    public Criteria(LogicalOp logicalOp, Criteria criteria);
    private static Criteria();
    private void InitFieldCriteria(string propName, ComparisonOp comparisonOp, object value);
    private void InitFieldCriteria(QueryField field, ComparisonOp comparisonOp, object value);
    [CompilerGeneratedAttribute]
public virtual QueryField get_Field();
    [CompilerGeneratedAttribute]
private void set_Field(QueryField value);
    [CompilerGeneratedAttribute]
public virtual Criteria get_LeftCriteria();
    [CompilerGeneratedAttribute]
private void set_LeftCriteria(Criteria value);
    [CompilerGeneratedAttribute]
public virtual Criteria get_RightCriteria();
    [CompilerGeneratedAttribute]
private void set_RightCriteria(Criteria value);
    [CompilerGeneratedAttribute]
public virtual LogicalOp get_LogicalOperator();
    [CompilerGeneratedAttribute]
private void set_LogicalOperator(LogicalOp value);
    [CompilerGeneratedAttribute]
public virtual object get_FieldValue();
    [CompilerGeneratedAttribute]
public virtual void set_FieldValue(object value);
    [CompilerGeneratedAttribute]
public virtual ComparisonOp get_ComparisonOperator();
    [CompilerGeneratedAttribute]
public virtual void set_ComparisonOperator(ComparisonOp value);
    public virtual bool IsMatch(T businessObject, bool usePersistedValue);
    private bool CheckValueAgainstSingleCriteria(object leftValue, string className);
    private static IComparable ConvertDateTimeStringToValue(IComparable propertyValue, IComparable compareToValue);
    private static IComparable ConvertGuidStringToValue(IComparable propertyValue, IComparable compareToValue);
    public virtual bool IsMatch(T businessObject);
    public virtual bool IsMatch(BusinessObjectDTO dto);
    private bool IsNonNullMatch(IComparable boPropertyValue, IComparable compareToValue);
    private static bool IsLikeMatch(IComparable boPropertyValue, IComparable compareToValue);
    private bool IsNullMatch();
    public virtual string ToString();
    private string GetValueAsString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool IsComposite();
    public static Criteria FromPrimaryKey(IPrimaryKey primaryKey);
    public static Criteria FromRelationship(IRelationship relationship);
    public bool CannotBeParametrised();
    public bool CanBeParametrised();
    protected string ComparisonOperatorString();
    public static Criteria MergeCriteria(Criteria criteria1, Criteria criteria2);
    private static bool GuidTryParse(string s, Guid& result);
    public static Criteria Create(Expression`1<Func`2<T, TProp>> propNameExpression, ComparisonOp comparisonOp, TProp value);
    public static CriteriaBuilder Expr(Expression`1<Func`2<T, bool>> expression);
    public static CriteriaBuilder Not(Expression`1<Func`2<T, bool>> expression);
}
public class Habanero.Base.CriteriaBuilder : object {
    private Expression _expression;
    private static Dictionary`2<ComparisonOp, ComparisonOp> NegatedOps;
    private static Dictionary`2<ExpressionType, LogicalOp> LogicalOps;
    private static Dictionary`2<ExpressionType, ComparisonOp> Ops;
    public CriteriaBuilderAnd And { get; }
    public CriteriaBuilderOr Or { get; }
    public CriteriaBuilder(Expression expression);
    private static CriteriaBuilder();
    public Criteria Build();
    public CriteriaBuilderAnd get_And();
    public CriteriaBuilderOr get_Or();
    public virtual CriteriaBuilder Not(Expression`1<Func`2<T, bool>> expression);
    private Criteria Create(Expression expression);
    private Criteria CreateFromMemberExpression(MemberExpression memberExpression);
    private Criteria CreateFromUnaryExpression(UnaryExpression unaryExpression);
    private Criteria CreateFromMethodCallExpression(Expression expression);
    private Criteria CreateFromBinaryExpression(Expression expression);
    private Criteria CreateCriteriaForRelationship(MemberInfo memberInfo, ComparisonOp comparisonOp, object finalValue);
    private object GetValueFromMemberExpression(MemberExpression fieldExpression);
}
public class Habanero.Base.CriteriaExpression : object {
    private static String[] _defaultOperators;
    private CriteriaExpression _left;
    private CriteriaExpression _right;
    private string _expression;
    private String[] _operators;
    public CriteriaExpression Left { get; public set; }
    public CriteriaExpression Right { get; public set; }
    public string Expression { get; }
    public string CompleteExpression { get; }
    public CriteriaExpression(string expression);
    public CriteriaExpression(string expression, String[] operators);
    private static CriteriaExpression();
    private void parseExpression(HabaneroStringBuilder expression);
    private static bool IsPosInsideBrackets(string quote, int pos);
    public CriteriaExpression get_Left();
    public void set_Left(CriteriaExpression value);
    public CriteriaExpression get_Right();
    public void set_Right(CriteriaExpression value);
    public string get_Expression();
    public string get_CompleteExpression();
    public bool IsLeaf();
}
public static class Habanero.Base.CriteriaParser : object {
    public static Criteria CreateCriteria(string criteriaString);
    private static Criteria GetCriteria(CriteriaExpression criteriaExpression);
    private static Criteria GetCriteriaLeaf(CriteriaExpression criteriaExpression);
    public static ComparisonOp CreateComparisonOperator(string operatorString);
    public static LogicalOp CreateLogicalOperator(string operatorString);
}
public abstract class Habanero.Base.CustomProperty : object {
    public CustomProperty(object value, bool isLoading);
    public abstract virtual object GetPersistValue();
}
public interface Habanero.Base.Data.IQueryResult {
    public List`1<IQueryResultRow> Rows { get; }
    public List`1<IQueryResultField> Fields { get; }
    public abstract virtual List`1<IQueryResultRow> get_Rows();
    public abstract virtual List`1<IQueryResultField> get_Fields();
}
public interface Habanero.Base.Data.IQueryResultField {
    public string PropertyName { get; }
    public int Index { get; public set; }
    public abstract virtual string get_PropertyName();
    public abstract virtual int get_Index();
    public abstract virtual void set_Index(int value);
}
public interface Habanero.Base.Data.IQueryResultRow {
    public IList`1<object> RawValues { get; }
    public IList`1<object> Values { get; }
    public abstract virtual IList`1<object> get_RawValues();
    public abstract virtual IList`1<object> get_Values();
}
public interface Habanero.Base.Data.IQueryResultSorter {
    public abstract virtual void Sort(IQueryResult queryResult, IOrderCriteria orderCriteria);
}
public class Habanero.Base.Data.QueryResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IQueryResultRow> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<IQueryResultField> <Fields>k__BackingField;
    public List`1<IQueryResultRow> Rows { get; private set; }
    public List`1<IQueryResultField> Fields { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IQueryResultRow> get_Rows();
    [CompilerGeneratedAttribute]
private void set_Rows(List`1<IQueryResultRow> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IQueryResultField> get_Fields();
    [CompilerGeneratedAttribute]
private void set_Fields(List`1<IQueryResultField> value);
    public void AddField(string propertyName);
    public void AddResult(Object[] rawValues);
}
public class Habanero.Base.Data.QueryResultField : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Index>k__BackingField;
    public string PropertyName { get; private set; }
    public int Index { get; public set; }
    public QueryResultField(string propertyName, int index);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Index(int value);
}
public class Habanero.Base.Data.QueryResultRow : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<object> <RawValues>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<object> <Values>k__BackingField;
    public IList`1<object> RawValues { get; private set; }
    public IList`1<object> Values { get; private set; }
    public QueryResultRow(Object[] rawValues);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<object> get_RawValues();
    [CompilerGeneratedAttribute]
private void set_RawValues(IList`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<object> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IList`1<object> value);
}
public class Habanero.Base.Data.QueryResultSorter : object {
    public sealed virtual void Sort(IQueryResult queryResult, IOrderCriteria orderCriteria);
}
[ExtensionAttribute]
public static class Habanero.Base.DatabaseConfigExtensions : object {
    [ExtensionAttribute]
public static bool IsInMemoryDB(IDatabaseConfig databaseConfig);
}
public class Habanero.Base.DataMappers.BoolDataMapper : DataMapper {
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
}
public class Habanero.Base.DataMappers.ByteArrayDataMapper : DataMapper {
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
    public virtual string ConvertValueToString(object value);
}
public abstract class Habanero.Base.DataMappers.DataMapper : object {
    protected bool _convertEmptyStringToNull;
    public sealed virtual bool CompareValues(object compareToValue, object value);
    public virtual string ConvertValueToString(object value);
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
}
public class Habanero.Base.DataMappers.DataMapperFactory : object {
    private Dictionary`2<Type, IDataMapper> _dataMappers;
    private void InitialiseDataMappers();
    public sealed virtual IDataMapper GetDataMapper(Type targetType);
    public sealed virtual void SetDataMapper(Type targetType, IDataMapper dataMapper);
}
public class Habanero.Base.DataMappers.DateTimeDataMapper : DataMapper {
    public virtual string ConvertValueToString(object value);
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
}
public class Habanero.Base.DataMappers.GeneralDataMapper : DataMapper {
    private Type _targetType;
    private static IHabaneroLogger Logger;
    public GeneralDataMapper(Type targetType);
    private static GeneralDataMapper();
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
    private bool CanConvertUsingTypeConverter(object valueToParse);
    private TypeConverter GetTypeConverter();
}
public class Habanero.Base.DataMappers.GuidDataMapper : DataMapper {
    public virtual string ConvertValueToString(object value);
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
    private static string ToUpperInvariant(Guid guidValue);
}
public interface Habanero.Base.DataMappers.IDataMapper {
    public abstract virtual string ConvertValueToString(object value);
    public abstract virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
    public abstract virtual bool CompareValues(object compareToValue, object value);
}
public interface Habanero.Base.DataMappers.IDataMapperFactory {
    public abstract virtual IDataMapper GetDataMapper(Type targetType);
    public abstract virtual void SetDataMapper(Type targetType, IDataMapper dataMapper);
}
public class Habanero.Base.DataMappers.ImageDataMapper : DataMapper {
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
    public virtual string ConvertValueToString(object value);
}
public class Habanero.Base.DataMappers.IntDataMapper : DataMapper {
    public virtual string ConvertValueToString(object value);
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
}
public class Habanero.Base.DataMappers.LongDataMapper : DataMapper {
    public virtual string ConvertValueToString(object value);
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
}
public class Habanero.Base.DataMappers.StringDataMapper : DataMapper {
    public virtual string ConvertValueToString(object value);
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
    private static string ToUpperInvariant(Guid guidValue);
}
public class Habanero.Base.DataMappers.TimeSpanDataMapper : DataMapper {
    public static DateTime BaseDate;
    private static TimeSpanDataMapper();
    public virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
}
[TypeConverterAttribute("Habanero.Base.DateTimeNowConverter")]
public class Habanero.Base.DateTimeNow : object {
    public static DateTime Value { get; }
    public static DateTime get_Value();
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(DateTime other);
    public virtual DateTime ResolveToValue();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override object Habanero.Base.IResolvableToValue<System.Object>.ResolveToValue();
}
public class Habanero.Base.DateTimeNowConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Habanero.Base.DateTimeNowFixed : DateTimeNow {
    private DateTime _dateTimeNow;
    public DateTimeNowFixed(DateTime dateTimeNow);
    public virtual DateTime ResolveToValue();
}
[TypeConverterAttribute("Habanero.Base.DateTimeTodayConverter")]
public class Habanero.Base.DateTimeToday : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <OffSet>k__BackingField;
    public static DateTime Value { get; }
    public int OffSet { get; public set; }
    public static DateTime get_Value();
    [CompilerGeneratedAttribute]
public int get_OffSet();
    [CompilerGeneratedAttribute]
public void set_OffSet(int value);
    public sealed virtual int CompareTo(object obj);
    private sealed virtual override object Habanero.Base.IResolvableToValue<System.Object>.ResolveToValue();
    public sealed virtual DateTime ResolveToValue();
    public virtual string ToString();
    public sealed virtual int CompareTo(DateTime other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Habanero.Base.DateTimeTodayConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("Habanero.Base.DateTimeUtcNowConverter")]
public class Habanero.Base.DateTimeUtcNow : object {
    public static DateTime Value { get; }
    public static DateTime get_Value();
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(DateTime other);
    public virtual DateTime ResolveToValue();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override object Habanero.Base.IResolvableToValue<System.Object>.ResolveToValue();
}
public class Habanero.Base.DateTimeUtcNowConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Habanero.Base.DelegatedBusinessObjectCreator : DelegatedBusinessObjectCreator`1<IBusinessObject> {
    public DelegatedBusinessObjectCreator(CreateBusinessObjectDelegate<IBusinessObject> createBusinessObjectDelegate);
}
public class Habanero.Base.DelegatedBusinessObjectCreator`1 : object {
    private CreateBusinessObjectDelegate<TBusinessObject> _createBusinessObjectDelegate;
    public DelegatedBusinessObjectCreator`1(CreateBusinessObjectDelegate<TBusinessObject> createBusinessObjectDelegate);
    public sealed virtual IBusinessObject CreateBusinessObject();
}
public class Habanero.Base.DelegatedBusinessObjectEditor : DelegatedBusinessObjectEditor`1<IBusinessObject> {
    public DelegatedBusinessObjectEditor(EditObjectDelegate<IBusinessObject> editObjectDelegate);
}
public class Habanero.Base.DelegatedBusinessObjectEditor`1 : object {
    private EditObjectDelegate<TBusinessObject> _editObjectDelegate;
    public DelegatedBusinessObjectEditor`1(EditObjectDelegate<TBusinessObject> editObjectDelegate);
    public sealed virtual bool EditObject(IBusinessObject obj, string uiDefName);
    public sealed virtual bool EditObject(IBusinessObject obj, string uiDefName, PostObjectEditDelegate postEditAction);
}
public class Habanero.Base.DelegatedExceptionNotifier : object {
    private NotifyDelegate _notifyDelegate;
    public string ExceptionMessage { get; }
    public DelegatedExceptionNotifier(NotifyDelegate notifyDelegate);
    public sealed virtual void Notify(Exception ex, string furtherMessage, string title);
    public sealed virtual string get_ExceptionMessage();
}
public enum Habanero.Base.DeleteParentAction : Enum {
    public int value__;
    public static DeleteParentAction DeleteRelated;
    public static DeleteParentAction DereferenceRelated;
    public static DeleteParentAction Prevent;
    public static DeleteParentAction DoNothing;
}
[ExtensionAttribute]
public static class Habanero.Base.EnumerableExtensions : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
    [ExtensionAttribute]
public static bool IsEqualTo(IEnumerable enumerable1, IEnumerable enumerable2);
}
public enum Habanero.Base.ErrorLevel : Enum {
    public int value__;
    public static ErrorLevel Error;
    public static ErrorLevel Warning;
    public static ErrorLevel Suggestion;
}
public class Habanero.Base.EventHandler`2 : MulticastDelegate {
    public EventHandler`2(object object, IntPtr method);
    public virtual void Invoke(object sender, TEventArgs1 eventArgs1, TEventArgs2 eventArgs2);
    public virtual IAsyncResult BeginInvoke(object sender, TEventArgs1 eventArgs1, TEventArgs2 eventArgs2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Habanero.Base.Exceptions.ArgumentValidationHelper : object {
    public static bool IsNull(object obj);
    public static void CheckArgumentNotNull(object obj, string parameterName);
    public static void CheckArgumentNotNull(object obj, string parameterName, string message);
    public static void CheckStringArgumentNotEmpty(string str, string parameterName);
    public static void CheckStringArgumentNotEmpty(string str, string parameterName, string message);
    public static void CheckArgumentIsSubType(Type parameterType, string parameterName, Type expectedType);
    public static void CheckArgumentIsSubType(Type parameterType, string parameterName, Type expectedType, string message);
}
public class Habanero.Base.Exceptions.CannotSaveException : Exception {
    public CannotSaveException(string message);
    public CannotSaveException(string message, Exception inner);
    protected CannotSaveException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.ExceptionUtilities : object {
    public static void Display(Exception ex);
    public static string GetExceptionString(Exception ex, int indent, bool showStackTrace);
    private static string GetIndent(int numberOfSpaces);
}
public class Habanero.Base.Exceptions.HabaneroApplicationException : HabaneroDeveloperException {
    public HabaneroApplicationException(string message);
    public HabaneroApplicationException(string message, string developerMessage);
    public HabaneroApplicationException(string message, Exception inner);
    public HabaneroApplicationException(string message, string developerMessage, Exception inner);
    protected HabaneroApplicationException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.HabaneroArgumentException : HabaneroDeveloperException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; private set; }
    public HabaneroArgumentException(string parameterName);
    public HabaneroArgumentException(string parameterName, string message, Exception inner);
    public HabaneroArgumentException(string parameterName, Exception inner);
    public HabaneroArgumentException(string parameterName, string message);
    protected HabaneroArgumentException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
}
[CoverageExcludeAttribute]
public class Habanero.Base.Exceptions.HabaneroDeveloperException : Exception {
    protected string _developerMessage;
    public string DeveloperMessage { get; }
    public HabaneroDeveloperException(string userMessage);
    public HabaneroDeveloperException(string userMessage, string developerMessage);
    public HabaneroDeveloperException(string userMessage, string developerMessage, Exception inner);
    protected HabaneroDeveloperException(SerializationInfo info, StreamingContext context);
    public virtual string get_DeveloperMessage();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.HabaneroIncorrectTypeException : HabaneroDeveloperException {
    public string DeveloperMessage { get; }
    public HabaneroIncorrectTypeException(string userMessage, string developerMessage);
    public HabaneroIncorrectTypeException(string userMessage, string developerMessage, Exception inner);
    protected HabaneroIncorrectTypeException(SerializationInfo info, StreamingContext context);
    public virtual string get_DeveloperMessage();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidDefinitionException : HabaneroDeveloperException {
    public InvalidDefinitionException(string message);
    public InvalidDefinitionException(string message, Exception inner);
    protected InvalidDefinitionException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidKeyException : HabaneroApplicationException {
    public InvalidKeyException(string message);
    public InvalidKeyException(string message, Exception inner);
    protected InvalidKeyException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidObjectIdException : HabaneroDeveloperException {
    public InvalidObjectIdException(string message);
    public InvalidObjectIdException(string message, Exception inner);
    protected InvalidObjectIdException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidOrderCriteriaException : HabaneroApplicationException {
    public InvalidOrderCriteriaException(string message);
    public InvalidOrderCriteriaException(string message, Exception inner);
    protected InvalidOrderCriteriaException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidPropertyException : HabaneroApplicationException {
    public InvalidPropertyException(string message);
    public InvalidPropertyException(string message, Exception inner);
    protected InvalidPropertyException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidPropertyNameException : HabaneroApplicationException {
    public InvalidPropertyNameException(string message);
    public InvalidPropertyNameException(string message, Exception inner);
    protected InvalidPropertyNameException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidRelationshipAccessException : Exception {
    public InvalidRelationshipAccessException(string message);
    public InvalidRelationshipAccessException(string message, Exception inner);
    protected InvalidRelationshipAccessException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidRelationshipNameException : HabaneroApplicationException {
    public InvalidRelationshipNameException(string message);
    public InvalidRelationshipNameException(string message, Exception inner);
    protected InvalidRelationshipNameException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.InvalidXmlDefinitionException : HabaneroDeveloperException {
    public InvalidXmlDefinitionException(string message);
    public InvalidXmlDefinitionException(string message, Exception inner);
    protected InvalidXmlDefinitionException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.RecordedExceptionsException : HabaneroDeveloperException {
    public RecordedExceptionsException(string message);
    public RecordedExceptionsException(string message, Exception inner);
    protected RecordedExceptionsException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.ReflectionException : Exception {
    public ReflectionException(string message);
    public ReflectionException(string message, Exception inner);
    protected ReflectionException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.UnknownTypeNameException : HabaneroDeveloperException {
    public UnknownTypeNameException(string message);
    public UnknownTypeNameException(string message, Exception inner);
    protected UnknownTypeNameException(SerializationInfo info, StreamingContext context);
}
public class Habanero.Base.Exceptions.UserException : Exception {
    public UserException(string message);
    public UserException(string message, Exception inner);
    protected UserException(SerializationInfo info, StreamingContext context);
}
public enum Habanero.Base.FilterClauseCompositeOperator : Enum {
    public int value__;
    public static FilterClauseCompositeOperator OpAnd;
    public static FilterClauseCompositeOperator OpOr;
}
public enum Habanero.Base.FilterClauseOperator : Enum {
    public int value__;
    public static FilterClauseOperator OpEquals;
    public static FilterClauseOperator OpLike;
    public static FilterClauseOperator OpGreaterThanOrEqualTo;
    public static FilterClauseOperator OpLessThanOrEqualTo;
    public static FilterClauseOperator OpGreaterThan;
    public static FilterClauseOperator OpLessThan;
    public static FilterClauseOperator Is;
    public static FilterClauseOperator OpNotEqual;
}
public enum Habanero.Base.FilterModes : Enum {
    public int value__;
    public static FilterModes Filter;
    public static FilterModes Search;
}
public abstract class Habanero.Base.FunctionQueryField : QueryField {
    protected string _functionName;
    protected Object[] _parameters;
    public FunctionQueryField(string functionName, Object[] parameters);
    private static string GetFieldNameFrom(Object[] parameters);
    private static string GetPropertyNameFor(string functionName);
    public virtual string GetFormattedStringWith(ISqlFormatter formatter, IDictionary`2<string, string> aliases);
    private void AddParametersTo(List`1<string> parts, ISqlFormatter formatter, IDictionary`2<string, string> aliases);
    private bool AddQueryFieldParameter(object parameter, List`1<string> parts, ISqlFormatter formatter, IDictionary`2<string, string> aliases);
    private string QuoteSource(Source source, ISqlFormatter withFormatter, IDictionary`2<string, string> aliases);
    private bool AddStringParameter(object parameter, List`1<string> parts, ISqlFormatter formatter);
}
public class Habanero.Base.GlobalRegistry : object {
    private static IExceptionNotifier _exceptionNotifier;
    private static IHabaneroLoggerFactory _loggerFactory;
    private static IDataMapperFactory _dataMapperFactory;
    private static ICrypter _passwordCrypter;
    private static IHasher _passwordHasher;
    private static ISettings _settings;
    private static ISecurityController _securityController;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static string <ApplicationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static int <DatabaseVersion>k__BackingField;
    public static ISettings Settings { get; public set; }
    public static IExceptionNotifier UIExceptionNotifier { get; public set; }
    public static string ApplicationName { get; public set; }
    public static string ApplicationVersion { get; public set; }
    public static int DatabaseVersion { get; public set; }
    public static ISecurityController SecurityController { get; public set; }
    public static ICrypter PasswordCrypter { get; public set; }
    public static IHasher PasswordHasher { get; public set; }
    public static IHabaneroLoggerFactory LoggerFactory { get; public set; }
    public static IDataMapperFactory DataMapperFactory { get; public set; }
    public static ISettings get_Settings();
    public static void set_Settings(ISettings value);
    public static IExceptionNotifier get_UIExceptionNotifier();
    public static void set_UIExceptionNotifier(IExceptionNotifier value);
    [CompilerGeneratedAttribute]
public static string get_ApplicationName();
    [CompilerGeneratedAttribute]
public static void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public static string get_ApplicationVersion();
    [CompilerGeneratedAttribute]
public static void set_ApplicationVersion(string value);
    [CompilerGeneratedAttribute]
public static int get_DatabaseVersion();
    [CompilerGeneratedAttribute]
public static void set_DatabaseVersion(int value);
    public static ISecurityController get_SecurityController();
    public static void set_SecurityController(ISecurityController value);
    public static ICrypter get_PasswordCrypter();
    public static void set_PasswordCrypter(ICrypter value);
    public static IHasher get_PasswordHasher();
    public static void set_PasswordHasher(IHasher value);
    public static IHabaneroLoggerFactory get_LoggerFactory();
    public static void set_LoggerFactory(IHabaneroLoggerFactory value);
    public static IDataMapperFactory get_DataMapperFactory();
    public static void set_DataMapperFactory(IDataMapperFactory value);
}
public abstract class Habanero.Base.HabaneroApp : object {
    protected IApplicationVersionUpgrader _applicationVersionUpgrader;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <LoadClassDefs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AppVersion>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassDefsFileName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ClassDefsXml>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IExceptionNotifier <ExceptionNotifier>k__BackingField;
    unknown IApplicationVersionUpgrader ApplicationVersionUpgrader {public set; }
    public ISettings Settings { get; public set; }
    public bool LoadClassDefs { get; public set; }
    public string AppName { get; private set; }
    public string AppVersion { get; private set; }
    public string ClassDefsFileName { get; public set; }
    public string ClassDefsXml { get; public set; }
    public IExceptionNotifier ExceptionNotifier { get; public set; }
    public HabaneroApp(string appName, string appVersion);
    public void set_ApplicationVersionUpgrader(IApplicationVersionUpgrader value);
    public virtual bool Startup();
    private void LogAppStartingInfo(IHabaneroLogger log);
    protected virtual void SetupLogging();
    protected void SetupApplicationNameAndVersion();
    protected abstract virtual void SetupExceptionNotifier();
    protected abstract virtual void SetupDatabaseConnection();
    protected abstract virtual void SetupSettings();
    protected abstract virtual void SetupClassDefs();
    protected virtual void Upgrade();
    [CompilerGeneratedAttribute]
public ISettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(ISettings value);
    [CompilerGeneratedAttribute]
public bool get_LoadClassDefs();
    [CompilerGeneratedAttribute]
public void set_LoadClassDefs(bool value);
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
private void set_AppName(string value);
    [CompilerGeneratedAttribute]
public string get_AppVersion();
    [CompilerGeneratedAttribute]
private void set_AppVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ClassDefsFileName();
    [CompilerGeneratedAttribute]
public void set_ClassDefsFileName(string value);
    [CompilerGeneratedAttribute]
public string get_ClassDefsXml();
    [CompilerGeneratedAttribute]
public void set_ClassDefsXml(string value);
    [CompilerGeneratedAttribute]
public IExceptionNotifier get_ExceptionNotifier();
    [CompilerGeneratedAttribute]
public void set_ExceptionNotifier(IExceptionNotifier value);
}
public class Habanero.Base.HabaneroBackgroundWorker : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IActionDispatcher <ActionDispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private BackgroundWorkerMethodDelegate <BackgroundWorker>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UIWorkerMethodDelegate <OnSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private UIWorkerMethodDelegate <OnCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private BackgroundWorkerExceptionHandlerDelegate <OnException>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<string, object> <Data>k__BackingField;
    private Thread _thread;
    public IActionDispatcher ActionDispatcher { get; protected set; }
    public BackgroundWorkerMethodDelegate BackgroundWorker { get; public set; }
    public UIWorkerMethodDelegate OnSuccess { get; public set; }
    public UIWorkerMethodDelegate OnCancelled { get; public set; }
    public BackgroundWorkerExceptionHandlerDelegate OnException { get; public set; }
    public ConcurrentDictionary`2<string, object> Data { get; public set; }
    [CompilerGeneratedAttribute]
public IActionDispatcher get_ActionDispatcher();
    [CompilerGeneratedAttribute]
protected void set_ActionDispatcher(IActionDispatcher value);
    [CompilerGeneratedAttribute]
public BackgroundWorkerMethodDelegate get_BackgroundWorker();
    [CompilerGeneratedAttribute]
public void set_BackgroundWorker(BackgroundWorkerMethodDelegate value);
    [CompilerGeneratedAttribute]
public UIWorkerMethodDelegate get_OnSuccess();
    [CompilerGeneratedAttribute]
public void set_OnSuccess(UIWorkerMethodDelegate value);
    [CompilerGeneratedAttribute]
public UIWorkerMethodDelegate get_OnCancelled();
    [CompilerGeneratedAttribute]
public void set_OnCancelled(UIWorkerMethodDelegate value);
    [CompilerGeneratedAttribute]
public BackgroundWorkerExceptionHandlerDelegate get_OnException();
    [CompilerGeneratedAttribute]
public void set_OnException(BackgroundWorkerExceptionHandlerDelegate value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, object> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(ConcurrentDictionary`2<string, object> value);
    public void Run();
    public void WaitForBackgroundWorkerToComplete();
    private void RunBackgroundWorker();
    private void RunExceptionDelegate(Exception ex);
    private void RunUIWorkerDelegate(bool success);
    public static HabaneroBackgroundWorker Run(IActionDispatcher dispatcher, ConcurrentDictionary`2<string, object> data, BackgroundWorkerMethodDelegate backgroundWorker, UIWorkerMethodDelegate onSuccess, UIWorkerMethodDelegate onCancel, BackgroundWorkerExceptionHandlerDelegate onException);
    [CompilerGeneratedAttribute]
private void <RunUIWorkerDelegate>b__32_0();
    [CompilerGeneratedAttribute]
private void <RunUIWorkerDelegate>b__32_1();
}
public class Habanero.Base.HabaneroStringBuilder : object {
    private StringBuilder _string;
    private List`1<QuotedSection> _quotedSections;
    private String[] _quotes;
    internal List`1<QuotedSection> QuotedSections { get; internal set; }
    public HabaneroStringBuilder(string s);
    public void SetQuotes(String[] quotes);
    public HabaneroStringBuilder RemoveQuotedSections();
    public HabaneroStringBuilder PutBackQuotedSections();
    public virtual string ToString();
    public HabaneroStringBuilder Substring(int startIndex, int length);
    public HabaneroStringBuilder Substring(int startIndex);
    public int IndexOf(string value);
    public int IndexOf(string value, int startIndex);
    public HabaneroStringBuilder DropOuterQuotes();
    internal List`1<QuotedSection> get_QuotedSections();
    internal void set_QuotedSections(List`1<QuotedSection> value);
}
public interface Habanero.Base.IActionDispatcher {
    public abstract virtual void Dispatch(Action method);
}
public interface Habanero.Base.IApplicationVersionUpgrader {
    public abstract virtual void Upgrade();
}
public interface Habanero.Base.IBOError {
    public IBusinessObject BusinessObject { get; }
    public ErrorLevel Level { get; }
    public string Message { get; }
    public abstract virtual IBusinessObject get_BusinessObject();
    public abstract virtual ErrorLevel get_Level();
    public abstract virtual string get_Message();
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IBOKey {
    public int Count { get; }
    public IKeyDef KeyDef { get; }
    public bool HasAutoIncrementingProperty { get; }
    public string KeyName { get; }
    public IBOProp Item { get; }
    public IBOProp Item { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Updated(EventHandler`1<BOKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Updated(EventHandler`1<BOKeyEventArgs> value);
    public abstract virtual bool Contains(string propName);
    public abstract virtual int get_Count();
    public abstract virtual IKeyDef get_KeyDef();
    public abstract virtual bool get_HasAutoIncrementingProperty();
    public abstract virtual string get_KeyName();
    public abstract virtual string AsString_LastPersistedValue();
    public abstract virtual string AsString_PreviousValue();
    public abstract virtual string AsString_CurrentValue();
    public abstract virtual IBOProp get_Item(string propName);
    public abstract virtual IBOProp get_Item(int index);
    public abstract virtual IBOPropCol GetBOPropCol();
    public abstract virtual void Add(IBOProp boProp);
}
public interface Habanero.Base.IBOProp {
    public IPropDef PropDef { get; }
    public object Value { get; public set; }
    public object ValueBeforeLastEdit { get; }
    public object PersistedPropertyValue { get; }
    public bool IsValid { get; }
    public string InvalidReason { get; }
    public bool IsDirty { get; }
    public Type PropertyType { get; }
    public string DisplayName { get; }
    public string PropertyValueString { get; }
    public string DatabaseFieldName { get; }
    public string PropertyName { get; }
    public string DirtyXml { get; }
    public bool IsObjectNew { get; }
    public string PersistedPropertyValueString { get; }
    public object PropertyValueToDisplay { get; }
    public IBusinessObject BusinessObject { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Updated(EventHandler`1<BOPropEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Updated(EventHandler`1<BOPropEventArgs> value);
    public abstract virtual IPropDef get_PropDef();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual object get_ValueBeforeLastEdit();
    public abstract virtual object get_PersistedPropertyValue();
    public abstract virtual bool get_IsValid();
    public abstract virtual string get_InvalidReason();
    public abstract virtual bool get_IsDirty();
    public abstract virtual Type get_PropertyType();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_PropertyValueString();
    public abstract virtual string get_DatabaseFieldName();
    public abstract virtual string get_PropertyName();
    public abstract virtual string get_DirtyXml();
    public abstract virtual bool get_IsObjectNew();
    public abstract virtual string get_PersistedPropertyValueString();
    public abstract virtual object get_PropertyValueToDisplay();
    public abstract virtual IBusinessObject get_BusinessObject();
    public abstract virtual void RestorePropValue();
    public abstract virtual void BackupPropValue();
    public abstract virtual bool InitialiseProp(object propValue);
    public abstract virtual void Validate();
    public abstract virtual bool IsEditable(String& message);
    public abstract virtual bool IsReadable(String& message);
    public abstract virtual bool CurrentValueEquals(object value);
}
public interface Habanero.Base.IBOPropAuthorisation {
    public abstract virtual void AddAuthorisedRole(string authorisedRole, BOPropActions actionToPerform);
    public abstract virtual bool IsAuthorised(IBOProp prop, BOPropActions actionToPerform);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IBOPropCol {
    public IBOProp Item { get; }
    public string DirtyXml { get; }
    public ICollection Values { get; }
    public IEnumerable SortedValues { get; }
    public int Count { get; }
    public bool HasAutoIncrementingField { get; }
    public bool IsDirty { get; }
    public abstract virtual void Add(IBOProp boProp);
    public abstract virtual void Add(IBOPropCol propCol);
    public abstract virtual void Remove(string propName);
    public abstract virtual bool Contains(string propName);
    public abstract virtual IBOProp get_Item(string propName);
    public abstract virtual string get_DirtyXml();
    public abstract virtual ICollection get_Values();
    public abstract virtual IEnumerable get_SortedValues();
    public abstract virtual int get_Count();
    public abstract virtual bool get_HasAutoIncrementingField();
    public abstract virtual bool get_IsDirty();
    public abstract virtual void RestorePropertyValues();
    public abstract virtual void BackupPropertyValues();
    public abstract virtual bool IsValid(String& invalidReason);
    public abstract virtual bool IsValid(IList`1& errors);
}
public interface Habanero.Base.IBOStatus {
    public bool IsNew { get; }
    public bool IsDeleted { get; }
    public bool IsEditing { get; }
    public bool IsDirty { get; }
    public string IsValidMessage { get; }
    public IBusinessObject BusinessObject { get; }
    public abstract virtual bool get_IsNew();
    public abstract virtual bool get_IsDeleted();
    public abstract virtual bool get_IsEditing();
    public abstract virtual bool get_IsDirty();
    public abstract virtual bool IsValid(String& message);
    public abstract virtual bool IsValid(IList`1& errors);
    public abstract virtual bool IsValid();
    public abstract virtual string get_IsValidMessage();
    public abstract virtual IBusinessObject get_BusinessObject();
    public abstract virtual bool HasWarnings(IList`1& errors);
}
public interface Habanero.Base.IBusinessObject {
    public IPrimaryKey ID { get; }
    public IClassDef ClassDef { get; public set; }
    public IRelationshipCol Relationships { get; public set; }
    public IBOStatus Status { get; }
    public IBOPropCol Props { get; }
    public abstract virtual IPrimaryKey get_ID();
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
    public abstract virtual IRelationshipCol get_Relationships();
    public abstract virtual void set_Relationships(IRelationshipCol value);
    public abstract virtual IBOStatus get_Status();
    public abstract virtual IBOPropCol get_Props();
    public abstract virtual bool IsEditable(String& message);
    public abstract virtual bool IsDeletable(String& message);
    public abstract virtual object GetPropertyValue(string propName);
    public abstract virtual object GetPropertyValue(Source source, string propName);
    public abstract virtual void SetPropertyValue(string propName, object newPropValue);
    public abstract virtual void CancelEdits();
    public abstract virtual void MarkForDelete();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Updated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Updated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Saved(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Saved(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Deleted(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Deleted(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Restored(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Restored(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_IDUpdated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IDUpdated(EventHandler`1<BOEventArgs> value);
    public abstract virtual bool IsCreatable(String& message);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MarkedForDeletion(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MarkedForDeletion(EventHandler`1<BOEventArgs> value);
    public abstract virtual object GetPersistedPropertyValue(Source source, string propName);
    public abstract virtual string GetPropertyValueString(string propName);
    public abstract virtual IBusinessObject Save();
}
public interface Habanero.Base.IBusinessObjectAuthorisation {
    public abstract virtual void AddAuthorisedRole(string authorisedRole, BusinessObjectActions actionToPerform);
    public abstract virtual bool IsAuthorised(IBusinessObject businessObject, BusinessObjectActions actionToPerform);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IBusinessObjectCollection {
    public IClassDef ClassDef { get; public set; }
    public bool IsDirty { get; }
    public ISelectQuery SelectQuery { get; public set; }
    public IBusinessObject Item { get; public set; }
    public IList PersistedBusinessObjects { get; }
    public IList CreatedBusinessObjects { get; }
    public IList RemovedBusinessObjects { get; }
    public IList AddedBusinessObjects { get; }
    public IList MarkedForDeleteBusinessObjects { get; }
    public int TotalCountAvailableForPaging { get; public set; }
    public Nullable`1<DateTime> TimeLastLoaded { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_BusinessObjectAdded(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BusinessObjectAdded(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BusinessObjectRemoved(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BusinessObjectRemoved(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BusinessObjectUpdated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BusinessObjectUpdated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BusinessObjectPropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BusinessObjectPropertyUpdated(EventHandler`1<BOPropUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BusinessObjectIDUpdated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BusinessObjectIDUpdated(EventHandler`1<BOEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CollectionRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CollectionRefreshed(EventHandler value);
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
    public abstract virtual bool get_IsDirty();
    public abstract virtual ISelectQuery get_SelectQuery();
    public abstract virtual void set_SelectQuery(ISelectQuery value);
    public abstract virtual IBusinessObject Find(Guid key);
    public abstract virtual IBusinessObjectCollection Clone();
    public abstract virtual int IndexOf(IBusinessObject item);
    public abstract virtual IBusinessObject get_Item(int index);
    public abstract virtual void set_Item(int index, IBusinessObject value);
    public abstract virtual void Add(IBusinessObject item);
    public abstract virtual bool Contains(IBusinessObject item);
    public abstract virtual void CopyTo(IBusinessObject[] array, int arrayIndex);
    public abstract virtual bool Remove(IBusinessObject item);
    public abstract virtual bool IsValid(String& errorMessage);
    public abstract virtual void SaveAll();
    public abstract virtual void Sort(string propertyName, bool isBoProperty, bool isAscending);
    public abstract virtual void Sort(IComparer comparer);
    public abstract virtual void Load(string searchCriteria, string orderByClause);
    public abstract virtual IBusinessObject CreateBusinessObject();
    public abstract virtual void LoadAll();
    public abstract virtual void LoadAll(string orderByClause);
    public abstract virtual void LoadWithLimit(string searchCriteria, string orderByClause, int limit);
    public abstract virtual void AddWithoutEvents(IBusinessObject businessObject);
    public abstract virtual IList get_PersistedBusinessObjects();
    public abstract virtual IList get_CreatedBusinessObjects();
    public abstract virtual IList get_RemovedBusinessObjects();
    public abstract virtual IList get_AddedBusinessObjects();
    public abstract virtual IList get_MarkedForDeleteBusinessObjects();
    public abstract virtual int get_TotalCountAvailableForPaging();
    public abstract virtual void set_TotalCountAvailableForPaging(int value);
    public abstract virtual Nullable`1<DateTime> get_TimeLastLoaded();
    public abstract virtual void set_TimeLastLoaded(Nullable`1<DateTime> value);
    [ObsoleteAttribute("This has been replaced with CancelEdits : 04 Mar 2009")]
public abstract virtual void RestoreAll();
    public abstract virtual void CancelEdits();
    public abstract virtual void LoadWithLimit(string searchCriteria, string orderByClause, int firstRecordToLoad, int numberOfRecordsToLoad, Int32& totalNoOfRecords);
    public abstract virtual void Refresh();
    public abstract virtual IEnumerable`1<T> AsEnumerable();
}
public interface Habanero.Base.IBusinessObjectCreator {
    public abstract virtual IBusinessObject CreateBusinessObject();
}
public interface Habanero.Base.IBusinessObjectDeletor {
    public abstract virtual void DeleteBusinessObject(IBusinessObject businessObject);
}
public interface Habanero.Base.IBusinessObjectEditor {
    public abstract virtual bool EditObject(IBusinessObject obj, string uiDefName);
    public abstract virtual bool EditObject(IBusinessObject obj, string uiDefName, PostObjectEditDelegate postEditAction);
}
public interface Habanero.Base.IBusinessObjectEditor`1 {
    public abstract virtual bool EditObject(T obj, string uiDefName);
    public abstract virtual bool EditObject(T obj, string uiDefName, PostObjectEditDelegate`1<T> postEditAction);
}
public interface Habanero.Base.IBusinessObjectInitialiser {
    public abstract virtual void InitialiseObject(IBusinessObject objToInitialise);
    public abstract virtual void InitialiseDataRow(DataRow row);
}
public interface Habanero.Base.IBusinessObjectInitialiser`1 {
    public abstract virtual void InitialiseObject(T objToInitialise);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IBusinessObjectList {
    public IBusinessObject Item { get; public set; }
    public abstract virtual IBusinessObject Find(Guid key);
    public abstract virtual int IndexOf(IBusinessObject item);
    public abstract virtual IBusinessObject get_Item(int index);
    public abstract virtual void set_Item(int index, IBusinessObject value);
    public abstract virtual void Add(IBusinessObject item);
    public abstract virtual bool Contains(IBusinessObject item);
    public abstract virtual void CopyTo(IBusinessObject[] array, int arrayIndex);
    public abstract virtual bool Remove(IBusinessObject item);
    public abstract virtual void Sort(string propertyName, bool isBoProperty, bool isAscending);
    public abstract virtual void Sort(IComparer comparer);
}
public interface Habanero.Base.IBusinessObjectLookupList {
    public string AssemblyName { get; public set; }
    public string ClassName { get; public set; }
    public Criteria Criteria { get; }
    public string SortString { get; }
    public string CriteriaString { get; }
    public IOrderCriteria OrderCriteria { get; }
    public abstract virtual string get_AssemblyName();
    public abstract virtual void set_AssemblyName(string value);
    public abstract virtual string get_ClassName();
    public abstract virtual void set_ClassName(string value);
    public abstract virtual Criteria get_Criteria();
    public abstract virtual string get_SortString();
    public abstract virtual string get_CriteriaString();
    public abstract virtual IOrderCriteria get_OrderCriteria();
}
public interface Habanero.Base.IBusinessObjectRule {
    public string Name { get; }
    public string Message { get; }
    public ErrorLevel ErrorLevel { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Message();
    public abstract virtual ErrorLevel get_ErrorLevel();
    [ObsoleteAttribute("Using IsValid(IBusinessObject) is the recommended")]
public abstract virtual bool IsValid();
    public abstract virtual bool IsValid(IBusinessObject bo);
}
public interface Habanero.Base.IBusinessObjectUpdateLog {
    public abstract virtual void Update();
}
public interface Habanero.Base.IClassDef {
    public string TableName { get; public set; }
    public Type ClassType { get; public set; }
    public IPropDefCol PropDefcol { get; public set; }
    public IPropDefCol PropDefColIncludingInheritance { get; }
    public string AssemblyName { get; public set; }
    public string ClassNameFull { get; public set; }
    public string ClassName { get; public set; }
    public string ClassNameExcludingTypeParameter { get; }
    public string TypeParameter { get; public set; }
    public IRelationshipDefCol RelationshipDefCol { get; public set; }
    public ISuperClassDef SuperClassDef { get; public set; }
    public Nullable`1<Guid> ClassID { get; public set; }
    public string Module { get; public set; }
    public string DisplayName { get; public set; }
    public IPrimaryKeyDef PrimaryKeyDef { get; public set; }
    public KeyDefCol KeysCol { get; public set; }
    public UIDefCol UIDefCol { get; public set; }
    public ClassDefCol AllChildren { get; }
    public IClassDef SuperClassClassDef { get; }
    public KeyDefCol KeyDefColIncludingInheritance { get; }
    public abstract virtual IPropDef GetPropDef(string propertyName);
    public abstract virtual IPropDef GetPropDef(string propertyName, bool throwError);
    public abstract virtual IPropDef GetPropDef(Source source, string propertyName, bool throwError);
    public abstract virtual ILookupList GetLookupList(string propertyName);
    public abstract virtual IBusinessObject CreateNewBusinessObject();
    public abstract virtual string get_TableName();
    public abstract virtual void set_TableName(string value);
    public abstract virtual Type get_ClassType();
    public abstract virtual void set_ClassType(Type value);
    public abstract virtual IPropDefCol get_PropDefcol();
    public abstract virtual void set_PropDefcol(IPropDefCol value);
    public abstract virtual IPropDefCol get_PropDefColIncludingInheritance();
    public abstract virtual string get_AssemblyName();
    public abstract virtual void set_AssemblyName(string value);
    public abstract virtual string get_ClassNameFull();
    public abstract virtual void set_ClassNameFull(string value);
    public abstract virtual string get_ClassName();
    public abstract virtual void set_ClassName(string value);
    public abstract virtual string get_ClassNameExcludingTypeParameter();
    public abstract virtual string get_TypeParameter();
    public abstract virtual void set_TypeParameter(string value);
    public abstract virtual IRelationshipDefCol get_RelationshipDefCol();
    public abstract virtual void set_RelationshipDefCol(IRelationshipDefCol value);
    public abstract virtual ISuperClassDef get_SuperClassDef();
    public abstract virtual void set_SuperClassDef(ISuperClassDef value);
    public abstract virtual Nullable`1<Guid> get_ClassID();
    public abstract virtual void set_ClassID(Nullable`1<Guid> value);
    public abstract virtual string get_Module();
    public abstract virtual void set_Module(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual IPrimaryKeyDef get_PrimaryKeyDef();
    public abstract virtual void set_PrimaryKeyDef(IPrimaryKeyDef value);
    public abstract virtual KeyDefCol get_KeysCol();
    public abstract virtual void set_KeysCol(KeyDefCol value);
    public abstract virtual UIDefCol get_UIDefCol();
    public abstract virtual void set_UIDefCol(UIDefCol value);
    public abstract virtual ClassDefCol get_AllChildren();
    public abstract virtual IClassDef get_SuperClassClassDef();
    public abstract virtual KeyDefCol get_KeyDefColIncludingInheritance();
    public abstract virtual string GetTableName(IPropDef propDef);
    public abstract virtual Type GetPropertyType(string propertyName);
    public abstract virtual IPropertyComparer`1<T> CreatePropertyComparer(string propertyName);
    public abstract virtual string GetTableName();
    public abstract virtual bool IsUsingClassTableInheritance();
    public abstract virtual IRelationshipDef GetRelationship(string relationshipName);
}
public interface Habanero.Base.IConcurrencyControl {
    public abstract virtual void CheckConcurrencyBeforeBeginEditing();
    public abstract virtual void CheckConcurrencyBeforePersisting();
    public abstract virtual void UpdatePropertiesWithLatestConcurrencyInfoBeforePersisting();
    public abstract virtual void ReleaseWriteLocks();
    public abstract virtual void UpdateAsTransactionRolledBack();
}
public interface Habanero.Base.IConfirmer {
    public abstract virtual bool Confirm(string message);
    public abstract virtual void Confirm(string message, ConfirmationDelegate confirmationDelegate);
}
public interface Habanero.Base.IConnectionStringFactory {
    public abstract virtual string GetConnectionString(string server, string database, string userName, string password, string port);
}
public interface Habanero.Base.ICrypter {
    public abstract virtual string DecryptString(string value);
    public abstract virtual string EncryptString(string value);
}
public interface Habanero.Base.IDatabaseConfig {
    public string Vendor { get; public set; }
    public string Server { get; public set; }
    public string Database { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string Port { get; public set; }
    public string AssemblyName { get; public set; }
    public string FullClassName { get; public set; }
    public string ConnectionStringFactoryAssemblyName { get; public set; }
    public string ConnectionStringFactoryClassName { get; public set; }
    public abstract virtual string get_Vendor();
    public abstract virtual void set_Vendor(string value);
    public abstract virtual string get_Server();
    public abstract virtual void set_Server(string value);
    public abstract virtual string get_Database();
    public abstract virtual void set_Database(string value);
    public abstract virtual string get_UserName();
    public abstract virtual void set_UserName(string value);
    public abstract virtual string get_Password();
    public abstract virtual void set_Password(string value);
    public abstract virtual string get_Port();
    public abstract virtual void set_Port(string value);
    public abstract virtual string get_AssemblyName();
    public abstract virtual void set_AssemblyName(string value);
    public abstract virtual string get_FullClassName();
    public abstract virtual void set_FullClassName(string value);
    public abstract virtual string get_ConnectionStringFactoryAssemblyName();
    public abstract virtual void set_ConnectionStringFactoryAssemblyName(string value);
    public abstract virtual string get_ConnectionStringFactoryClassName();
    public abstract virtual void set_ConnectionStringFactoryClassName(string value);
    public abstract virtual string GetConnectionString();
    public abstract virtual IDbConnection GetConnection();
    public abstract virtual IDatabaseConnection GetDatabaseConnection();
}
public interface Habanero.Base.IDatabaseConnection {
    public string ConnectionString { get; public set; }
    public string LeftFieldDelimiter { get; }
    public string RightFieldDelimiter { get; }
    public ISqlFormatter SqlFormatter { get; }
    public IsolationLevel IsolationLevel { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual string ErrorSafeConnectString();
    public abstract virtual IDbConnection GetConnection();
    public abstract virtual IDataReader LoadDataReader(ISqlStatement selectSql);
    public abstract virtual IDataReader LoadDataReader(ISqlStatement selectSql, string strOrderByCriteria);
    public abstract virtual IDataReader LoadDataReader(string selectSql);
    public abstract virtual IDataReader LoadDataReader(string selectSql, IDbTransaction transaction);
    public abstract virtual DataTable LoadDataTable(ISqlStatement selectSql, string strSearchCriteria, string strOrderByCriteria);
    public abstract virtual int ExecuteRawSql(string sql);
    public abstract virtual int ExecuteRawSql(string sql, IDbTransaction transaction);
    public abstract virtual int ExecuteSql(IEnumerable`1<ISqlStatement> statements);
    public abstract virtual int ExecuteSql(IEnumerable`1<ISqlStatement> statements, IDbTransaction transaction);
    public abstract virtual int ExecuteSql(ISqlStatement sql);
    public abstract virtual string get_LeftFieldDelimiter();
    public abstract virtual string get_RightFieldDelimiter();
    public abstract virtual ISqlFormatter get_SqlFormatter();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void SetTimeoutPeriod(int timeoutSeconds);
    public abstract virtual IParameterNameGenerator CreateParameterNameGenerator();
    public abstract virtual ISqlStatement CreateSqlStatement();
    public abstract virtual IDbTransaction BeginTransaction(IDbConnection openConnection);
    public abstract virtual int ExecuteStoredProcNonQuery(string procName, IEnumerable`1<Param> params);
    public abstract virtual int ExecuteStoredProcNonQuery(string procName, IEnumerable`1<Param> params, int timeout);
    public abstract virtual object ExecuteRawSqlScalar(string sql);
}
public interface Habanero.Base.IDatabaseConnectionFactory {
    public abstract virtual IDatabaseConnection CreateConnection(IDatabaseConfig config);
}
public interface Habanero.Base.IDatabaseLookupList {
    public string AssemblyName { get; public set; }
    public string ClassName { get; public set; }
    public string SqlString { get; public set; }
    public abstract virtual string get_AssemblyName();
    public abstract virtual void set_AssemblyName(string value);
    public abstract virtual string get_ClassName();
    public abstract virtual void set_ClassName(string value);
    public abstract virtual string get_SqlString();
    public abstract virtual void set_SqlString(string value);
}
public interface Habanero.Base.IDBNumberGenerator {
    public abstract virtual int GetNextNumberInt();
    public abstract virtual ITransactional GetUpdateTransaction();
}
public interface Habanero.Base.IExceptionNotifier {
    public string ExceptionMessage { get; }
    public abstract virtual void Notify(Exception ex, string furtherMessage, string title);
    public abstract virtual string get_ExceptionMessage();
}
public interface Habanero.Base.IExpression {
    public abstract virtual string ExpressionString();
    public abstract virtual void SqlExpressionString(ISqlStatement statement, string tableNameFieldNameLeftSeparator, string tableNameFieldNameRightSeparator);
    public abstract virtual void SetParameterSqlInfo(IParameterSqlInfo info);
    public abstract virtual IExpression Clone();
}
public interface Habanero.Base.IFilterClause {
    public abstract virtual string GetFilterClauseString();
    public abstract virtual string GetFilterClauseString(string stringLikeDelimiter, string dateTimeDelimiter);
}
public interface Habanero.Base.IFilterClauseFactory {
    public abstract virtual IFilterClause CreateStringFilterClause(string columnName, FilterClauseOperator clauseOperator, string filterValue);
    public abstract virtual IFilterClause CreateIntegerFilterClause(string columnName, FilterClauseOperator clauseOperator, int filterValue);
    public abstract virtual IFilterClause CreateDateFilterClause(string columnName, FilterClauseOperator clauseOperator, DateTime filterValue);
    public abstract virtual IFilterClause CreateCompositeFilterClause(IFilterClause leftClause, FilterClauseCompositeOperator compositeOperator, IFilterClause rightClause);
    public abstract virtual IFilterClause CreateNullFilterClause();
    public abstract virtual IFilterClause CreateEnumFilterClause(string columnName, FilterClauseOperator clauseOperator, object enumValue);
}
public interface Habanero.Base.IFilterDef {
    public IList`1<IFilterPropertyDef> FilterPropertyDefs { get; public set; }
    public FilterModes FilterMode { get; public set; }
    public int Columns { get; public set; }
    public abstract virtual IList`1<IFilterPropertyDef> get_FilterPropertyDefs();
    public abstract virtual void set_FilterPropertyDefs(IList`1<IFilterPropertyDef> value);
    public abstract virtual FilterModes get_FilterMode();
    public abstract virtual void set_FilterMode(FilterModes value);
    public abstract virtual int get_Columns();
    public abstract virtual void set_Columns(int value);
}
public interface Habanero.Base.IFilterPropertyDef {
    public string PropertyName { get; }
    public string Label { get; }
    public string FilterType { get; public set; }
    public string FilterTypeAssembly { get; public set; }
    public FilterClauseOperator FilterClauseOperator { get; public set; }
    public Dictionary`2<string, string> Parameters { get; public set; }
    public abstract virtual string get_PropertyName();
    public abstract virtual string get_Label();
    public abstract virtual string get_FilterType();
    public abstract virtual void set_FilterType(string value);
    public abstract virtual string get_FilterTypeAssembly();
    public abstract virtual void set_FilterTypeAssembly(string value);
    public abstract virtual FilterClauseOperator get_FilterClauseOperator();
    public abstract virtual void set_FilterClauseOperator(FilterClauseOperator value);
    public abstract virtual Dictionary`2<string, string> get_Parameters();
    public abstract virtual void set_Parameters(Dictionary`2<string, string> value);
}
public interface Habanero.Base.IHasher {
    public abstract virtual string HashString(string value);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IKeyDef {
    public bool IgnoreIfNull { get; public set; }
    public string KeyName { get; public set; }
    public string Message { get; public set; }
    public IPropDef Item { get; }
    public IPropDef Item { get; }
    public int Count { get; }
    public abstract virtual bool get_IgnoreIfNull();
    public abstract virtual void set_IgnoreIfNull(bool value);
    public abstract virtual string get_KeyName();
    public abstract virtual void set_KeyName(string value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual void Add(IPropDef propDef);
    public abstract virtual IPropDef get_Item(string propName);
    public abstract virtual IPropDef get_Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual IBOKey CreateBOKey(IBOPropCol lBOPropCol);
    public abstract virtual void Clear();
}
public interface Habanero.Base.ILookupList {
    public IPropDef PropDef { get; public set; }
    public bool LimitToList { get; }
    public int TimeOut { get; public set; }
    public abstract virtual Dictionary`2<string, string> GetLookupList();
    public abstract virtual Dictionary`2<string, string> GetLookupList(IDatabaseConnection connection);
    public abstract virtual IPropDef get_PropDef();
    public abstract virtual void set_PropDef(IPropDef value);
    public abstract virtual bool get_LimitToList();
    public abstract virtual int get_TimeOut();
    public abstract virtual void set_TimeOut(int value);
    public abstract virtual Dictionary`2<string, string> GetIDValueLookupList();
}
public interface Habanero.Base.ILookupListWithClassDef {
    public IClassDef ClassDef { get; }
    public abstract virtual IClassDef get_ClassDef();
}
public enum Habanero.Base.InsertParentAction : Enum {
    public int value__;
    public static InsertParentAction InsertRelationship;
    public static InsertParentAction DoNothing;
}
public interface Habanero.Base.INumberGenerator {
    public abstract virtual long NextNumber();
    public abstract virtual void SetSequenceNumber(long newSequenceNumber);
    public abstract virtual void AddToTransaction(ITransactionCommitter transactionCommitter);
}
public interface Habanero.Base.IOrderCriteria {
    public List`1<IOrderCriteriaField> Fields { get; }
    public abstract virtual List`1<IOrderCriteriaField> get_Fields();
    public abstract virtual IOrderCriteria Add(string field);
    public abstract virtual IOrderCriteria Add(string field, SortDirection sortDirection);
    public abstract virtual IOrderCriteria Add(IOrderCriteriaField orderCriteriaField);
    public abstract virtual int Compare(T bo1, T bo2);
}
public interface Habanero.Base.IOrderCriteriaField {
    public string PropertyName { get; }
    public string FieldName { get; public set; }
    public Source Source { get; public set; }
    public SortDirection SortDirection { get; }
    public string FullName { get; }
    public abstract virtual string get_PropertyName();
    public abstract virtual string get_FieldName();
    public abstract virtual void set_FieldName(string value);
    public abstract virtual Source get_Source();
    public abstract virtual void set_Source(Source value);
    public abstract virtual SortDirection get_SortDirection();
    public abstract virtual string get_FullName();
}
public interface Habanero.Base.IParameterNameGenerator {
    public string PrefixCharacter { get; }
    public abstract virtual string GetNextParameterName();
    public abstract virtual void Reset();
    public abstract virtual string get_PrefixCharacter();
}
public interface Habanero.Base.IParameterSqlInfo {
    public string ParameterName { get; }
    public string TableName { get; }
    public string FieldName { get; }
    public ParameterType ParameterType { get; }
    public abstract virtual string get_ParameterName();
    public abstract virtual string get_TableName();
    public abstract virtual string get_FieldName();
    public abstract virtual ParameterType get_ParameterType();
}
public interface Habanero.Base.IPrimaryKey {
    public bool IsGuidObjectID { get; }
    public bool IsCompositeKey { get; }
    public Guid ObjectID { get; }
    public Guid PreviousObjectID { get; }
    public IBusinessObject BusinessObject { get; public set; }
    public abstract virtual Guid GetAsGuid();
    public abstract virtual void SetObjectGuidID(Guid id);
    public abstract virtual bool get_IsGuidObjectID();
    public abstract virtual object GetAsValue();
    public abstract virtual bool get_IsCompositeKey();
    public abstract virtual Guid get_ObjectID();
    public abstract virtual Guid get_PreviousObjectID();
    public abstract virtual IBusinessObject get_BusinessObject();
    public abstract virtual void set_BusinessObject(IBusinessObject value);
}
public interface Habanero.Base.IPrimaryKeyDef {
    public bool IsGuidObjectID { get; public set; }
    public bool IsCompositeKey { get; }
    public abstract virtual bool get_IsGuidObjectID();
    public abstract virtual void set_IsGuidObjectID(bool value);
    public abstract virtual bool get_IsCompositeKey();
}
public interface Habanero.Base.IProgressIndicator {
    public abstract virtual void UpdateProgress(int amountComplete, int totalToComplete, string description);
    public abstract virtual void Complete();
}
public interface Habanero.Base.IPropDef {
    public string DatabaseFieldName { get; public set; }
    public object DefaultValue { get; public set; }
    public string DefaultValueString { get; public set; }
    public bool AutoIncrementing { get; public set; }
    public int Length { get; }
    public bool KeepValuePrivate { get; }
    public bool Persistable { get; public set; }
    public IDataMapper DataMapper { get; }
    public abstract virtual void AddPropRule(IPropRule rule);
    public abstract virtual string get_DatabaseFieldName();
    public abstract virtual void set_DatabaseFieldName(string value);
    public abstract virtual object get_DefaultValue();
    public abstract virtual void set_DefaultValue(object value);
    public abstract virtual string get_DefaultValueString();
    public abstract virtual void set_DefaultValueString(string value);
    public abstract virtual bool HasLookupList();
    public abstract virtual bool get_AutoIncrementing();
    public abstract virtual void set_AutoIncrementing(bool value);
    public abstract virtual int get_Length();
    public abstract virtual bool get_KeepValuePrivate();
    public abstract virtual IPropertyComparer`1<T> GetPropertyComparer();
    public abstract virtual bool get_Persistable();
    public abstract virtual void set_Persistable(bool value);
    public abstract virtual IDataMapper get_DataMapper();
    public abstract virtual IBOProp CreateBOProp(bool assignDefaultValue);
    public abstract virtual bool Equals(object obj);
    public abstract virtual bool TryParsePropValue(object valueToParse, Object& returnValue);
    public abstract virtual string ConvertValueToString(object value);
    public abstract virtual IPropDef Clone();
    public abstract virtual bool IsValueValid(object propValue, String& errorMessage);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IPropDefCol {
    public IPropDef Item { get; }
    public int Count { get; }
    public IClassDef ClassDef { get; public set; }
    public abstract virtual IPropDef get_Item(string propertyName);
    public abstract virtual int get_Count();
    public abstract virtual IBOPropCol CreateBOPropertyCol(bool isNewObject);
    public abstract virtual void Add(IPropDef propDef);
    public abstract virtual IPropDefCol Clone();
    public abstract virtual IPropDefCol Clone(bool clonePropDefs);
    public abstract virtual bool Contains(IPropDef propDef);
    public abstract virtual bool Contains(string propertyName);
    public abstract virtual void Remove(IPropDef propDef);
    public abstract virtual void Add(IEnumerable`1<IPropDef> propDefCol);
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
}
public interface Habanero.Base.IPropertyComparer`1 {
    public string PropertyName { get; public set; }
    public Source Source { get; public set; }
    public Type PropertyType { get; }
    public abstract virtual string get_PropertyName();
    public abstract virtual void set_PropertyName(string value);
    public abstract virtual Source get_Source();
    public abstract virtual void set_Source(Source value);
    public abstract virtual Type get_PropertyType();
}
public interface Habanero.Base.IPropRule {
    public string Name { get; public set; }
    public string Message { get; public set; }
    public Dictionary`2<string, object> Parameters { get; public set; }
    public List`1<string> AvailableParameters { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual Dictionary`2<string, object> get_Parameters();
    public abstract virtual void set_Parameters(Dictionary`2<string, object> value);
    public abstract virtual void SetParameter(string parameterName, object value);
    public abstract virtual List`1<string> get_AvailableParameters();
    public abstract virtual bool IsPropValueValid(string displayName, object propValue, String& errorMessage);
}
public interface Habanero.Base.IQueryResultLoader {
    public abstract virtual IQueryResult GetResultSet(ISelectQuery selectQuery);
}
public interface Habanero.Base.IRelationship {
    public IRelKey RelKey { get; }
    public IClassDef RelatedObjectClassDef { get; }
    public bool IsDirty { get; }
    public IRelationshipDef RelationshipDef { get; }
    public string RelationshipName { get; }
    public bool Initialised { get; }
    public DeleteParentAction DeleteParentAction { get; }
    public IBusinessObject OwningBO { get; }
    public RelationshipType RelationshipType { get; }
    public abstract virtual IRelKey get_RelKey();
    public abstract virtual IClassDef get_RelatedObjectClassDef();
    public abstract virtual bool get_IsDirty();
    public abstract virtual IRelationshipDef get_RelationshipDef();
    public abstract virtual string get_RelationshipName();
    public abstract virtual bool get_Initialised();
    public abstract virtual DeleteParentAction get_DeleteParentAction();
    public abstract virtual IBusinessObject get_OwningBO();
    public abstract virtual RelationshipType get_RelationshipType();
    public abstract virtual bool IsDeletable(String& message);
    public abstract virtual void MarkForDelete();
    public abstract virtual IRelationship GetReverseRelationship(IBusinessObject bo);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IRelationshipCol {
    public IRelationship Item { get; }
    public bool IsDirty { get; }
    public abstract virtual IBusinessObject GetRelatedObject(string relationshipName);
    public abstract virtual T GetRelatedObject(string relationshipName);
    public abstract virtual IBusinessObjectCollection GetRelatedCollection(string relationshipName);
    public abstract virtual void SetRelatedObject(string relationshipName, IBusinessObject parentObject);
    public abstract virtual IRelationship get_Item(string name);
    public abstract virtual bool Contains(string relationshipName);
    public abstract virtual bool get_IsDirty();
}
public interface Habanero.Base.IRelationshipDef {
    public string RelationshipName { get; }
    public string RelatedObjectAssemblyName { get; }
    public string RelatedObjectClassName { get; }
    public IRelKeyDef RelKeyDef { get; }
    public bool KeepReferenceToRelatedObject { get; }
    public DeleteParentAction DeleteParentAction { get; }
    public string PreventDeleteMessage { get; public set; }
    public InsertParentAction InsertParentAction { get; }
    public IOrderCriteria OrderCriteria { get; }
    public string OrderCriteriaString { get; }
    public RelationshipType RelationshipType { get; public set; }
    public string ReverseRelationshipName { get; public set; }
    public bool OwningBOHasForeignKey { get; public set; }
    public IClassDef RelatedObjectClassDef { get; }
    public string RelatedObjectTypeParameter { get; public set; }
    public int TimeOut { get; public set; }
    public string RelatedObjectClassNameWithTypeParameter { get; }
    public bool IsOneToMany { get; }
    public bool IsManyToOne { get; }
    public bool IsOneToOne { get; }
    public bool IsCompulsory { get; }
    public IClassDef OwningClassDef { get; public set; }
    public string OwningClassName { get; }
    public abstract virtual string get_RelationshipName();
    public abstract virtual string get_RelatedObjectAssemblyName();
    public abstract virtual string get_RelatedObjectClassName();
    public abstract virtual IRelKeyDef get_RelKeyDef();
    public abstract virtual bool get_KeepReferenceToRelatedObject();
    public abstract virtual DeleteParentAction get_DeleteParentAction();
    public abstract virtual string get_PreventDeleteMessage();
    public abstract virtual void set_PreventDeleteMessage(string value);
    public abstract virtual InsertParentAction get_InsertParentAction();
    public abstract virtual IOrderCriteria get_OrderCriteria();
    public abstract virtual string get_OrderCriteriaString();
    public abstract virtual RelationshipType get_RelationshipType();
    public abstract virtual void set_RelationshipType(RelationshipType value);
    public abstract virtual string get_ReverseRelationshipName();
    public abstract virtual void set_ReverseRelationshipName(string value);
    public abstract virtual bool get_OwningBOHasForeignKey();
    public abstract virtual void set_OwningBOHasForeignKey(bool value);
    public abstract virtual IClassDef get_RelatedObjectClassDef();
    public abstract virtual string get_RelatedObjectTypeParameter();
    public abstract virtual void set_RelatedObjectTypeParameter(string value);
    public abstract virtual int get_TimeOut();
    public abstract virtual void set_TimeOut(int value);
    public abstract virtual string get_RelatedObjectClassNameWithTypeParameter();
    public abstract virtual IRelationship CreateRelationship(IBusinessObject owningBo, IBOPropCol lBOPropCol);
    public abstract virtual void CheckCanAddChild(IBusinessObject bo);
    public abstract virtual void CheckCanRemoveChild(IBusinessObject bo);
    public abstract virtual bool get_IsOneToMany();
    public abstract virtual bool get_IsManyToOne();
    public abstract virtual bool get_IsOneToOne();
    public abstract virtual bool get_IsCompulsory();
    public abstract virtual IClassDef get_OwningClassDef();
    public abstract virtual void set_OwningClassDef(IClassDef value);
    public abstract virtual string get_OwningClassName();
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IRelationshipDefCol {
    public IRelationshipDef Item { get; }
    public int Count { get; }
    public IClassDef ClassDef { get; public set; }
    public abstract virtual void Add(IRelationshipDef relationshipDef);
    public abstract virtual bool Contains(string keyName);
    public abstract virtual IRelationshipDef get_Item(string relationshipName);
    public abstract virtual int get_Count();
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IRelKey {
    public int Count { get; }
    public IRelProp Item { get; }
    public IRelProp Item { get; }
    public Criteria Criteria { get; }
    public abstract virtual int get_Count();
    public abstract virtual IRelProp get_Item(string propName);
    public abstract virtual IRelProp get_Item(int index);
    public abstract virtual bool HasRelatedObject();
    public abstract virtual bool Contains(string propName);
    public abstract virtual Criteria get_Criteria();
    [CompilerGeneratedAttribute]
public abstract virtual void add_RelatedPropValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RelatedPropValueChanged(EventHandler value);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.Base.IRelKeyDef {
    public IRelPropDef Item { get; }
    public int Count { get; }
    public abstract virtual IRelPropDef get_Item(string propName);
    public abstract virtual int get_Count();
    public abstract virtual void Add(IRelPropDef relPropDef);
    public abstract virtual IRelKey CreateRelKey(IBOPropCol lBoPropCol);
    public abstract virtual bool Contains(string propName);
}
public interface Habanero.Base.IRelProp {
    public string OwnerPropertyName { get; }
    public string RelatedClassPropName { get; }
    public IBOProp BOProp { get; }
    public bool IsNull { get; }
    public abstract virtual string get_OwnerPropertyName();
    public abstract virtual string get_RelatedClassPropName();
    public abstract virtual IBOProp get_BOProp();
    public abstract virtual bool get_IsNull();
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropValueUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropValueUpdated(EventHandler value);
}
public interface Habanero.Base.IRelPropDef {
    public string OwnerPropertyName { get; }
    public string RelatedClassPropName { get; }
    public IPropDef OwnerPropDef { get; }
    public abstract virtual string get_OwnerPropertyName();
    public abstract virtual string get_RelatedClassPropName();
    public abstract virtual IPropDef get_OwnerPropDef();
}
public interface Habanero.Base.IResolvableToValue {
}
public interface Habanero.Base.IResolvableToValue`1 {
    public abstract virtual T ResolveToValue();
}
public interface Habanero.Base.ISecurityController {
    public string CurrentUserName { get; }
    public abstract virtual string get_CurrentUserName();
}
public interface Habanero.Base.ISelectQuery {
    public Criteria Criteria { get; public set; }
    public Dictionary`2<string, QueryField> Fields { get; }
    public Source Source { get; public set; }
    public IOrderCriteria OrderCriteria { get; public set; }
    public int Limit { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public Criteria DiscriminatorCriteria { get; public set; }
    public int FirstRecordToLoad { get; public set; }
    public abstract virtual Criteria get_Criteria();
    public abstract virtual void set_Criteria(Criteria value);
    public abstract virtual Dictionary`2<string, QueryField> get_Fields();
    public abstract virtual Source get_Source();
    public abstract virtual void set_Source(Source value);
    public abstract virtual IOrderCriteria get_OrderCriteria();
    public abstract virtual void set_OrderCriteria(IOrderCriteria value);
    public abstract virtual int get_Limit();
    public abstract virtual void set_Limit(int value);
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
    public abstract virtual Criteria get_DiscriminatorCriteria();
    public abstract virtual void set_DiscriminatorCriteria(Criteria value);
    public abstract virtual int get_FirstRecordToLoad();
    public abstract virtual void set_FirstRecordToLoad(int value);
}
public interface Habanero.Base.ISelfFormattingField {
    public abstract virtual string GetFormattedStringWith(ISqlFormatter formatter, IDictionary`2<string, string> aliases);
}
public interface Habanero.Base.ISettings {
    public abstract virtual bool HasSetting(string settingName);
    public abstract virtual string GetString(string settingName);
    public abstract virtual string GetString(string settingName, DateTime date);
    public abstract virtual void SetString(string settingName, string settingValue);
    public abstract virtual decimal GetDecimal(string settingName, DateTime date);
    public abstract virtual decimal GetDecimal(string settingName);
    public abstract virtual void SetDecimal(string settingName, decimal settingValue);
    public abstract virtual bool GetBoolean(string settingName);
    public abstract virtual void SetBoolean(string settingName, bool boolValue);
}
public interface Habanero.Base.ISimpleLookupList {
}
public interface Habanero.Base.ISingleRelationshipDef {
}
public interface Habanero.Base.ISingleValueDef {
    public string DisplayName { get; }
    public string Description { get; public set; }
    public string PropertyTypeName { get; public set; }
    public Type PropertyType { get; public set; }
    public bool Compulsory { get; public set; }
    public string PropertyName { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public string DisplayNameFull { get; }
    public string ClassName { get; }
    public string PropertyTypeAssemblyName { get; public set; }
    public List`1<IPropRule> PropRules { get; }
    public ILookupList LookupList { get; public set; }
    public PropReadWriteRule ReadWriteRule { get; public set; }
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_PropertyTypeName();
    public abstract virtual void set_PropertyTypeName(string value);
    public abstract virtual Type get_PropertyType();
    public abstract virtual void set_PropertyType(Type value);
    public abstract virtual bool get_Compulsory();
    public abstract virtual void set_Compulsory(bool value);
    public abstract virtual string get_PropertyName();
    public abstract virtual void set_PropertyName(string value);
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
    public abstract virtual string get_DisplayNameFull();
    public abstract virtual string get_ClassName();
    public abstract virtual string get_PropertyTypeAssemblyName();
    public abstract virtual void set_PropertyTypeAssemblyName(string value);
    public abstract virtual List`1<IPropRule> get_PropRules();
    public abstract virtual ILookupList get_LookupList();
    public abstract virtual void set_LookupList(ILookupList value);
    public abstract virtual PropReadWriteRule get_ReadWriteRule();
    public abstract virtual void set_ReadWriteRule(PropReadWriteRule value);
}
public interface Habanero.Base.ISqlFormatter {
    public abstract virtual string DelimitField(string fieldName);
    public abstract virtual string DelimitTable(string tableName);
    public abstract virtual object PrepareValue(object objValue);
    public abstract virtual string GetLimitClauseCriteriaForEnd(int limit);
    public abstract virtual string GetLimitClauseCriteriaForBegin(int limit);
}
public interface Habanero.Base.ISqlStatement {
    public StringBuilder Statement { get; public set; }
    public List`1<IDbDataParameter> Parameters { get; }
    public IDatabaseConnection DatabaseConnection { get; }
    public abstract virtual StringBuilder get_Statement();
    public abstract virtual void set_Statement(StringBuilder value);
    public abstract virtual IDbDataParameter AddParameter(string paramName, object paramValue);
    public abstract virtual void AddParameterToStatement(object obj);
    public abstract virtual List`1<IDbDataParameter> get_Parameters();
    public abstract virtual IDatabaseConnection get_DatabaseConnection();
    public abstract virtual void SetupCommand(IDbCommand command);
}
public interface Habanero.Base.ISuperClassDef {
    public ORMapping ORMapping { get; public set; }
    public string AssemblyName { get; public set; }
    public string ClassName { get; public set; }
    public string TypeParameter { get; public set; }
    public string Discriminator { get; public set; }
    public IClassDef SuperClassClassDef { get; public set; }
    public string ID { get; public set; }
    public abstract virtual ORMapping get_ORMapping();
    public abstract virtual void set_ORMapping(ORMapping value);
    public abstract virtual string get_AssemblyName();
    public abstract virtual void set_AssemblyName(string value);
    public abstract virtual string get_ClassName();
    public abstract virtual void set_ClassName(string value);
    public abstract virtual string get_TypeParameter();
    public abstract virtual void set_TypeParameter(string value);
    public abstract virtual string get_Discriminator();
    public abstract virtual void set_Discriminator(string value);
    public abstract virtual IClassDef get_SuperClassClassDef();
    public abstract virtual void set_SuperClassClassDef(IClassDef value);
    public abstract virtual string get_ID();
    public abstract virtual void set_ID(string value);
}
public interface Habanero.Base.ISupportsAutoIncrementingField {
    public abstract virtual void SetAutoIncrementingFieldValue(long value);
}
public interface Habanero.Base.ISupportsRSADecryption {
    public abstract virtual void SetPrivateKeyFromXML(string xmlPrivateKey);
    public abstract virtual void SetPrivateKey(RSA privateKey);
}
public interface Habanero.Base.ITextFileLoader {
    public abstract virtual TextReader LoadTextFile(string fileName);
}
public interface Habanero.Base.ITransactional {
    public abstract virtual string TransactionID();
    public abstract virtual void UpdateStateAsCommitted();
    public abstract virtual void UpdateAsRolledBack();
}
public interface Habanero.Base.ITransactionalDB {
    public abstract virtual IEnumerable`1<ISqlStatement> GetPersistSql();
}
public interface Habanero.Base.ITransactionCommitter {
    public abstract virtual void AddBusinessObject(IBusinessObject businessObject);
    public abstract virtual void AddTransaction(ITransactional transaction);
    public abstract virtual List`1<Guid> CommitTransaction();
}
public interface Habanero.Base.ITransactionLog {
}
public interface Habanero.Base.IUIDef {
    public IUIForm UIForm { get; public set; }
    public string Name { get; public set; }
    public IUIGrid UIGrid { get; public set; }
    public UIDefCol UIDefCol { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public string ClassName { get; }
    public abstract virtual IUIForm get_UIForm();
    public abstract virtual void set_UIForm(IUIForm value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IUIGrid get_UIGrid();
    public abstract virtual void set_UIGrid(IUIGrid value);
    public abstract virtual UIDefCol get_UIDefCol();
    public abstract virtual void set_UIDefCol(UIDefCol value);
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
    public abstract virtual string get_ClassName();
    [ObsoleteAttribute("Please use the UIForm property instead as it returns the same UIForm. This method will be removed in later versions of Habanero")]
public abstract virtual IUIForm GetUIFormProperties();
    [ObsoleteAttribute("Please use the UIGrid property instead as it returns the same UIGrid. This method will be removed in later versions of Habanero")]
public abstract virtual IUIGrid GetUIGridProperties();
    public abstract virtual IUIFormField GetFormField(string propertyName);
    public abstract virtual IUIDef Clone();
}
public interface Habanero.Base.IUIFormField {
    public string PropertyName { get; public set; }
    public string MapperTypeName { get; public set; }
    public string MapperAssembly { get; }
    public string ControlAssemblyName { get; public set; }
    public string ControlTypeName { get; public set; }
    public Type ControlType { get; public set; }
    public bool Editable { get; public set; }
    public Nullable`1<bool> ShowAsCompulsory { get; public set; }
    public string ToolTipText { get; }
    public Hashtable Parameters { get; }
    public bool IsCompulsory { get; }
    public IUIFormColumn UIFormColumn { get; public set; }
    public LayoutStyle Layout { get; public set; }
    public string Label { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public abstract virtual string get_PropertyName();
    public abstract virtual void set_PropertyName(string value);
    public abstract virtual string get_MapperTypeName();
    public abstract virtual void set_MapperTypeName(string value);
    public abstract virtual string get_MapperAssembly();
    public abstract virtual string get_ControlAssemblyName();
    public abstract virtual void set_ControlAssemblyName(string value);
    public abstract virtual string get_ControlTypeName();
    public abstract virtual void set_ControlTypeName(string value);
    public abstract virtual Type get_ControlType();
    public abstract virtual void set_ControlType(Type value);
    public abstract virtual bool get_Editable();
    public abstract virtual void set_Editable(bool value);
    public abstract virtual Nullable`1<bool> get_ShowAsCompulsory();
    public abstract virtual void set_ShowAsCompulsory(Nullable`1<bool> value);
    public abstract virtual string get_ToolTipText();
    public abstract virtual Hashtable get_Parameters();
    public abstract virtual bool get_IsCompulsory();
    public abstract virtual IUIFormColumn get_UIFormColumn();
    public abstract virtual void set_UIFormColumn(IUIFormColumn value);
    public abstract virtual LayoutStyle get_Layout();
    public abstract virtual void set_Layout(LayoutStyle value);
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
    public abstract virtual string GetLabel();
    public abstract virtual object GetParameterValue(string parameterName);
    public abstract virtual bool HasParameterValue(string parameterName);
}
[DefaultMemberAttribute("Item")]
public class Habanero.Base.KeyDefCol : object {
    private Dictionary`2<string, IKeyDef> _keyDefs;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClassDef <ClassDef>k__BackingField;
    public IKeyDef Item { get; }
    public int Count { get; }
    public IClassDef ClassDef { get; public set; }
    public void Add(IKeyDef keyDef);
    public void AddRange(IEnumerable`1<IKeyDef> keyDefs);
    protected void Remove(IKeyDef keyDef);
    protected bool Contains(IKeyDef keyDef);
    public bool Contains(string keyName);
    public IKeyDef get_Item(string keyName);
    public IKeyDef GetKeyDefAtIndex(int index);
    public BOKeyCol CreateBOKeyCol(IBOPropCol lBOPropCol);
    public int get_Count();
    private sealed virtual override IEnumerator`1<IKeyDef> System.Collections.Generic.IEnumerable<Habanero.Base.IKeyDef>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public IClassDef get_ClassDef();
    [CompilerGeneratedAttribute]
public void set_ClassDef(IClassDef value);
    [CompilerGeneratedAttribute]
private bool <AddRange>b__3_0(IKeyDef keyDef);
}
public class Habanero.Base.Logging.ConsoleLogger : object {
    private string _contextName;
    private IDictionary`2<LogCategory, bool> _isLogging;
    public string ContextName { get; }
    public ConsoleLogger(string contextName, IDictionary`2<LogCategory, bool> isLogging);
    public sealed virtual string get_ContextName();
    public sealed virtual void Log(string message, LogCategory logCategory);
    public sealed virtual void Log(Exception exception);
    public sealed virtual void Log(string message, Exception exception);
    public sealed virtual void Log(string message, Exception exception, LogCategory logCategory);
    public sealed virtual bool IsLogging(LogCategory logCategory);
    public void SetIsLogging(LogCategory logCategory, bool isLogging);
}
public class Habanero.Base.Logging.ConsoleLoggerFactory : object {
    private IDictionary`2<string, IHabaneroLogger> _loggers;
    private IDictionary`2<LogCategory, bool> _isLogging;
    public sealed virtual IHabaneroLogger GetLogger(string contextName);
    public sealed virtual IHabaneroLogger GetLogger(Type type);
    public void SetDefaultIsLogging(LogCategory logCategory, bool isLogging);
}
public interface Habanero.Base.Logging.IHabaneroLogger {
    public string ContextName { get; }
    public abstract virtual string get_ContextName();
    public abstract virtual void Log(string message, LogCategory logCategory);
    public abstract virtual void Log(Exception exception);
    public abstract virtual void Log(string message, Exception exception);
    public abstract virtual void Log(string message, Exception exception, LogCategory logCategory);
    public abstract virtual bool IsLogging(LogCategory logCategory);
}
public interface Habanero.Base.Logging.IHabaneroLoggerFactory {
    public abstract virtual IHabaneroLogger GetLogger(string contextName);
    public abstract virtual IHabaneroLogger GetLogger(Type type);
}
public class Habanero.Base.Logging.Log4NetLogger : object {
    private string _contextName;
    protected ILog _log;
    public string ContextName { get; }
    public Log4NetLogger(string contextName);
    public Log4NetLogger(Type contextType);
    public sealed virtual string get_ContextName();
    public sealed virtual void Log(string message, LogCategory logCategory);
    public sealed virtual void Log(Exception exception);
    public sealed virtual void Log(string message, Exception exception);
    public sealed virtual void Log(string message, Exception exception, LogCategory logCategory);
    public sealed virtual bool IsLogging(LogCategory logCategory);
}
public class Habanero.Base.Logging.Log4NetLoggerFactory : object {
    public sealed virtual IHabaneroLogger GetLogger(string contextName);
    public sealed virtual IHabaneroLogger GetLogger(Type contextType);
}
public enum Habanero.Base.Logging.LogCategory : Enum {
    public int value__;
    public static LogCategory Debug;
    public static LogCategory Exception;
    public static LogCategory Info;
    public static LogCategory Warn;
    public static LogCategory Fatal;
    public static LogCategory Error;
}
public class Habanero.Base.NullCrypter : object {
    public sealed virtual string DecryptString(string value);
    public sealed virtual string EncryptString(string value);
}
public class Habanero.Base.NullProgressIndicator : object {
    public sealed virtual void UpdateProgress(int amountComplete, int totalToComplete, string description);
    public sealed virtual void Complete();
}
public class Habanero.Base.NullSecurityController : object {
    public string CurrentUserName { get; }
    public sealed virtual string get_CurrentUserName();
}
public class Habanero.Base.OrderCriteria : object {
    private List`1<IOrderCriteriaField> _fields;
    public List`1<IOrderCriteriaField> Fields { get; }
    public sealed virtual List`1<IOrderCriteriaField> get_Fields();
    public sealed virtual IOrderCriteria Add(string field);
    public sealed virtual IOrderCriteria Add(string field, SortDirection sortDirection);
    public sealed virtual IOrderCriteria Add(IOrderCriteriaField orderCriteriaField);
    public sealed virtual int Compare(T bo1, T bo2);
    public virtual string ToString();
    public static IOrderCriteria FromString(string orderCriteriaString);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
public class Habanero.Base.OrderCriteriaField : object {
    private string _propertyName;
    private SortDirection _sortDirection;
    private IClassDef _classDef;
    private object _comparer;
    private string _fullNameExcludingPrimarySource;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Source <Source>k__BackingField;
    public string PropertyName { get; }
    public string FieldName { get; public set; }
    public Source Source { get; public set; }
    public SortDirection SortDirection { get; }
    public string FullName { get; }
    private string FullNameExcludingPrimarySource { get; }
    public OrderCriteriaField(string propertyName, string fieldName, Source source, SortDirection sortDirection);
    public OrderCriteriaField(string propertyName, SortDirection sortDirection);
    public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FieldName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Source get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Source(Source value);
    public sealed virtual SortDirection get_SortDirection();
    public sealed virtual string get_FullName();
    private string get_FullNameExcludingPrimarySource();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public static OrderCriteriaField FromString(string fieldString);
    public int Compare(T bo1, T bo2);
    private static OrderCriteriaField CreateField(string sourceAndFieldName, SortDirection sortDirection);
}
public enum Habanero.Base.ORMapping : Enum {
    public int value__;
    public static ORMapping ClassTableInheritance;
    public static ORMapping SingleTableInheritance;
    public static ORMapping ConcreteTableInheritance;
}
public class Habanero.Base.Param : object {
    private DbType _dbType;
    private string _paramName;
    private string _paramValue;
    public DbType DbType { get; }
    public string ParamName { get; }
    public string ParamValue { get; }
    public Param(DbType dbType, string paramName, string paramValue);
    public DbType get_DbType();
    public string get_ParamName();
    public string get_ParamValue();
}
public enum Habanero.Base.ParameterType : Enum {
    public int value__;
    public static ParameterType String;
    public static ParameterType Date;
    public static ParameterType Number;
    public static ParameterType Bool;
}
public class Habanero.Base.PostObjectEditDelegate : MulticastDelegate {
    public PostObjectEditDelegate(object object, IntPtr method);
    public virtual void Invoke(IBusinessObject bo, bool cancelled);
    public virtual IAsyncResult BeginInvoke(IBusinessObject bo, bool cancelled, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Habanero.Base.PostObjectEditDelegate`1 : MulticastDelegate {
    public PostObjectEditDelegate`1(object object, IntPtr method);
    public virtual void Invoke(T bo, bool cancelled);
    public virtual IAsyncResult BeginInvoke(T bo, bool cancelled, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Habanero.Base.PropAlignment : Enum {
    public int value__;
    public static PropAlignment left;
    public static PropAlignment right;
    public static PropAlignment centre;
}
public enum Habanero.Base.PropReadWriteRule : Enum {
    public int value__;
    public static PropReadWriteRule ReadWrite;
    public static PropReadWriteRule ReadOnly;
    public static PropReadWriteRule WriteOnce;
    public static PropReadWriteRule WriteNotNew;
    public static PropReadWriteRule WriteNew;
}
public class Habanero.Base.QueryField : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Source <Source>k__BackingField;
    public string PropertyName { get; private set; }
    public string FieldName { get; public set; }
    public Source Source { get; public set; }
    public QueryField(string propertyName, string fieldName, Source source);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public Source get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(Source value);
    public static QueryField FromString(string fieldString);
    public virtual string GetFormattedStringWith(ISqlFormatter formatter, IDictionary`2<string, string> aliases);
}
public class Habanero.Base.RecordingExceptionNotifier : object {
    private List`1<ExceptionDetail> _exceptions;
    public IList`1<ExceptionDetail> Exceptions { get; }
    public string ExceptionMessage { get; }
    public bool HasExceptions { get; }
    public IList`1<ExceptionDetail> get_Exceptions();
    public void RethrowRecordedException();
    public sealed virtual void Notify(Exception ex, string furtherMessage, string title);
    public sealed virtual string get_ExceptionMessage();
    public bool get_HasExceptions();
}
public enum Habanero.Base.RelationshipType : Enum {
    public int value__;
    public static RelationshipType Association;
    public static RelationshipType Aggregation;
    public static RelationshipType Composition;
}
public class Habanero.Base.Result : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Successful>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public bool Successful { get; private set; }
    public string Message { get; private set; }
    public Result(bool successful);
    public Result(bool successful, string message);
    [CompilerGeneratedAttribute]
public bool get_Successful();
    [CompilerGeneratedAttribute]
private void set_Successful(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
}
public class Habanero.Base.RethrowingExceptionNotifier : object {
    public string ExceptionMessage { get; }
    public sealed virtual void Notify(Exception ex, string furtherMessage, string title);
    public sealed virtual string get_ExceptionMessage();
}
public class Habanero.Base.RSAPasswordCrypter : object {
    private RSA _rsa;
    public RSAPasswordCrypter(RSA rsa);
    public sealed virtual string DecryptString(string value);
    public sealed virtual string EncryptString(string value);
}
public abstract class Habanero.Base.SimpleValueObject : CustomProperty {
    public SimpleValueObject(object value, bool isLoading);
    public abstract virtual Result IsValid();
}
public enum Habanero.Base.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
public class Habanero.Base.Source : object {
    private string _name;
    private string _entityName;
    private JoinList _joins;
    private JoinList _inheritanceJoins;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsPrepared>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IClassDef <RelatedClassDef>k__BackingField;
    public string Name { get; public set; }
    public string EntityName { get; public set; }
    public JoinList Joins { get; }
    public Source ChildSource { get; }
    public Source ChildSourceLeaf { get; }
    public JoinList InheritanceJoins { get; }
    public bool IsPrepared { get; public set; }
    public IClassDef RelatedClassDef { get; public set; }
    public Source(string name);
    public Source(string name, string entityName);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_EntityName();
    public virtual void set_EntityName(string value);
    public virtual JoinList get_Joins();
    public Source get_ChildSource();
    public Source get_ChildSourceLeaf();
    public virtual JoinList get_InheritanceJoins();
    [CompilerGeneratedAttribute]
public bool get_IsPrepared();
    [CompilerGeneratedAttribute]
public void set_IsPrepared(bool value);
    [CompilerGeneratedAttribute]
public IClassDef get_RelatedClassDef();
    [CompilerGeneratedAttribute]
public void set_RelatedClassDef(IClassDef value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public void JoinToSource(Source toSource);
    public static Source FromString(string sourcename);
    public void MergeWith(Source sourceToMerge);
    public Source Clone();
}
public class Habanero.Base.SqlFormatter : object {
    private string _leftFieldDelimiter;
    private string _rightFieldDelimiter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LimitClauseAtEnd>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <LimitClauseAtBeginning>k__BackingField;
    public string LimitClauseAtEnd { get; private set; }
    public string LimitClauseAtBeginning { get; private set; }
    public string LeftFieldDelimiter { get; }
    public string RightFieldDelimiter { get; }
    public SqlFormatter(string leftFieldDelimiter, string rightFieldDelimiter, string limitClauseAtBeginning, string limitClauseAtEnd);
    [CompilerGeneratedAttribute]
public string get_LimitClauseAtEnd();
    [CompilerGeneratedAttribute]
private void set_LimitClauseAtEnd(string value);
    [CompilerGeneratedAttribute]
public string get_LimitClauseAtBeginning();
    [CompilerGeneratedAttribute]
private void set_LimitClauseAtBeginning(string value);
    public sealed virtual string DelimitField(string fieldName);
    public sealed virtual string DelimitTable(string tableName);
    public string get_LeftFieldDelimiter();
    public string get_RightFieldDelimiter();
    public virtual string GetLimitClauseCriteriaForEnd(int limit);
    public virtual string GetLimitClauseCriteriaForBegin(int limit);
    public virtual object PrepareValue(object objValue);
}
public class Habanero.Base.Utf8Sha1Hasher : object {
    public sealed virtual string HashString(string value);
    private static Byte[] GetPasswordByteArray(string value);
}
[CoverageExcludeAttribute]
public class Habanero.Base.Util.DateRange : object {
    private DateTime _startDate;
    private DateTime _endDate;
    public TimeSpan TimeSpan { get; }
    public DateTime StartDate { get; public set; }
    public DateTime EndDate { get; public set; }
    public DateRange(DateTime startDate, DateTime endDate);
    public TimeSpan get_TimeSpan();
    public DateTime get_StartDate();
    public void set_StartDate(DateTime value);
    public DateTime get_EndDate();
    public void set_EndDate(DateTime value);
    private static void AssertStartDateFollowsEndDate(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public sealed virtual bool Equals(DateRange other);
}
public class Habanero.Base.Util.DateRangeComparerByStartDate : object {
    public sealed virtual int Compare(object x, object y);
    public sealed virtual int Compare(DateRange x, DateRange y);
}
public enum Habanero.Base.Util.DateRangeOptions : Enum {
    public int value__;
    public static DateRangeOptions ThisHour;
    public static DateRangeOptions PreviousHour;
    public static DateRangeOptions Current60Minutes;
    public static DateRangeOptions Today;
    public static DateRangeOptions Yesterday;
    public static DateRangeOptions Current24Hours;
    public static DateRangeOptions WeekToDate;
    public static DateRangeOptions PreviousWeek;
    public static DateRangeOptions Previous7Days;
    public static DateRangeOptions MonthToDate;
    public static DateRangeOptions PreviousMonth;
    public static DateRangeOptions Previous30Days;
    public static DateRangeOptions Previous31Days;
    public static DateRangeOptions YearToDate;
    public static DateRangeOptions ThisYear;
    public static DateRangeOptions PreviousYear;
    public static DateRangeOptions Previous365Days;
    public static DateRangeOptions Current2Years;
    public static DateRangeOptions Current3Years;
    public static DateRangeOptions Current5Years;
    public static DateRangeOptions Previous2Years;
    public static DateRangeOptions Previous3Years;
    public static DateRangeOptions Previous5Years;
    public static DateRangeOptions Tommorrow;
    public static DateRangeOptions Next24Hours;
    public static DateRangeOptions ThisWeek;
    public static DateRangeOptions Next7Days;
    public static DateRangeOptions ThisMonth;
    public static DateRangeOptions Next30Days;
}
public class Habanero.Base.Util.DateRangeOptionsConverter : object {
    private DateTimeNow _dateTimeNow;
    private TimeSpan _midnightOffset;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <WeekStartOffset>k__BackingField;
    private int _monthStartOffset;
    private int _yearStartOffset;
    public TimeSpan MidnightOffset { get; public set; }
    public int WeekStartOffset { get; public set; }
    public int MonthStartOffset { get; public set; }
    public int YearStartOffset { get; public set; }
    public DateRangeOptionsConverter(DateTimeNow dateTimeNow);
    public void SetNow(DateTime now);
    public TimeSpan get_MidnightOffset();
    public void set_MidnightOffset(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_WeekStartOffset();
    [CompilerGeneratedAttribute]
public void set_WeekStartOffset(int value);
    public int get_MonthStartOffset();
    public void set_MonthStartOffset(int value);
    public int get_YearStartOffset();
    public void set_YearStartOffset(int value);
    public DateRange ConvertDateRange(DateRangeOptions dateRangeOptions);
    private DateTime YearEnd(DateTime currentDateTime);
    private DateTime YearStart(DateTime currentDateTime);
    private DateTime MonthEnd(DateTime previousMonthDate);
    private DateTime WeekEnd(DateTime currentDateTime);
    private DateTime WeekStart(DateTime currentDateTime);
    private TimeSpan TotalWeekStartOffSet();
    private TimeSpan TotalMonthStartOffSet();
    private DateTime DayEnd(DateTime currentDateTime);
    private DateTime DayStart(DateTime currentDateTime);
    private DateTime HourEnd(DateTime currentDateTime);
    private DateTime HourStart(DateTime currentDateTime);
    private DateTime MonthStart(DateTime currentDateTime);
}
public class Habanero.Base.XmlWrapper : object {
    private XmlDocument _doc;
    private string _filename;
    public XmlDocument XmlDocument { get; }
    public XmlWrapper(XmlDocument doc);
    public XmlWrapper(string xmlFilename);
    public XmlDocument get_XmlDocument();
    public string ReadXmlValue(IXPathNavigable parentNode, string elementName);
    public void WriteXmlValue(IXPathNavigable parentNode, string elementName, string newValue);
    public void WriteXmlDocToFile();
    public void WriteXmlDocToFile(string filename);
}
[ObsoleteAttribute("This is no longer used")]
public interface Habanero.BO.ClassDefinition.ITrigger {
    public string TriggeredBy { get; }
    public string Target { get; }
    public string ConditionValue { get; public set; }
    public string Action { get; public set; }
    public string Value { get; public set; }
    public abstract virtual string get_TriggeredBy();
    public abstract virtual string get_Target();
    public abstract virtual string get_ConditionValue();
    public abstract virtual void set_ConditionValue(string value);
    public abstract virtual string get_Action();
    public abstract virtual void set_Action(string value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.BO.ClassDefinition.IUIForm {
    public IUIFormTab Item { get; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public string Title { get; public set; }
    public IUIDef UIDef { get; public set; }
    public IClassDef ClassDef { get; public set; }
    public abstract virtual void Add(IUIFormTab tab);
    public abstract virtual void Remove(IUIFormTab tab);
    public abstract virtual bool Contains(IUIFormTab tab);
    public abstract virtual IUIFormTab get_Item(int index);
    public abstract virtual void set_Width(int value);
    public abstract virtual int get_Width();
    public abstract virtual void set_Height(int value);
    public abstract virtual int get_Height();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Title();
    public abstract virtual IUIDef get_UIDef();
    public abstract virtual void set_UIDef(IUIDef value);
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual void set_ClassDef(IClassDef value);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.BO.ClassDefinition.IUIFormColumn {
    public IUIFormField Item { get; }
    public int Width { get; public set; }
    public IUIFormTab UIFormTab { get; public set; }
    public abstract virtual void Add(IUIFormField field);
    public abstract virtual void Remove(IUIFormField field);
    public abstract virtual bool Contains(IUIFormField field);
    public abstract virtual IUIFormField get_Item(int index);
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
    public abstract virtual IUIFormTab get_UIFormTab();
    public abstract virtual void set_UIFormTab(IUIFormTab value);
    public abstract virtual void Insert(int index, IUIFormField formField);
}
public interface Habanero.BO.ClassDefinition.IUIFormGrid {
    public string RelationshipName { get; public set; }
    public Type GridType { get; public set; }
    public string CorrespondingRelationshipName { get; public set; }
    public abstract virtual string get_RelationshipName();
    public abstract virtual void set_RelationshipName(string value);
    public abstract virtual Type get_GridType();
    public abstract virtual void set_GridType(Type value);
    public abstract virtual string get_CorrespondingRelationshipName();
    public abstract virtual void set_CorrespondingRelationshipName(string value);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.BO.ClassDefinition.IUIFormTab {
    public IUIFormColumn Item { get; }
    public string Name { get; public set; }
    public IUIFormGrid UIFormGrid { get; public set; }
    public IUIForm UIForm { get; public set; }
    public abstract virtual void Add(IUIFormColumn column);
    public abstract virtual void Remove(IUIFormColumn column);
    public abstract virtual bool Contains(IUIFormColumn column);
    public abstract virtual IUIFormColumn get_Item(int index);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual void set_UIFormGrid(IUIFormGrid value);
    public abstract virtual IUIFormGrid get_UIFormGrid();
    public abstract virtual IUIForm get_UIForm();
    public abstract virtual void set_UIForm(IUIForm value);
}
[DefaultMemberAttribute("Item")]
public interface Habanero.BO.ClassDefinition.IUIGrid {
    public IUIGridColumn Item { get; }
    public IUIGridColumn Item { get; }
    public string SortColumn { get; public set; }
    public IFilterDef FilterDef { get; public set; }
    public IUIDef UIDef { get; public set; }
    public IClassDef ClassDef { get; }
    public abstract virtual void Add(IUIGridColumn prop);
    public abstract virtual void Remove(IUIGridColumn prop);
    public abstract virtual bool Contains(IUIGridColumn prop);
    public abstract virtual IUIGridColumn get_Item(int index);
    public abstract virtual IUIGridColumn get_Item(string propName);
    public abstract virtual string get_SortColumn();
    public abstract virtual void set_SortColumn(string value);
    public abstract virtual IFilterDef get_FilterDef();
    public abstract virtual void set_FilterDef(IFilterDef value);
    public abstract virtual IUIDef get_UIDef();
    public abstract virtual void set_UIDef(IUIDef value);
    public abstract virtual IClassDef get_ClassDef();
}
public interface Habanero.BO.ClassDefinition.IUIGridColumn {
    public string Heading { get; public set; }
    public string PropertyName { get; public set; }
    public bool Editable { get; public set; }
    public int Width { get; public set; }
    public PropAlignment Alignment { get; public set; }
    public Hashtable Parameters { get; }
    public string GridControlTypeName { get; public set; }
    public string GridControlAssemblyName { get; public set; }
    public IUIGrid UIGrid { get; public set; }
    public IClassDef ClassDef { get; }
    public ILookupList LookupList { get; }
    public IPropDef PropDef { get; }
    public bool HasPropDef { get; }
    public abstract virtual string get_Heading();
    public abstract virtual void set_Heading(string value);
    public abstract virtual string get_PropertyName();
    public abstract virtual void set_PropertyName(string value);
    public abstract virtual bool get_Editable();
    public abstract virtual void set_Editable(bool value);
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
    public abstract virtual PropAlignment get_Alignment();
    public abstract virtual void set_Alignment(PropAlignment value);
    public abstract virtual Hashtable get_Parameters();
    public abstract virtual string get_GridControlTypeName();
    public abstract virtual void set_GridControlTypeName(string value);
    public abstract virtual string get_GridControlAssemblyName();
    public abstract virtual void set_GridControlAssemblyName(string value);
    public abstract virtual IUIGrid get_UIGrid();
    public abstract virtual void set_UIGrid(IUIGrid value);
    public abstract virtual IClassDef get_ClassDef();
    public abstract virtual ILookupList get_LookupList();
    public abstract virtual IPropDef get_PropDef();
    public abstract virtual bool get_HasPropDef();
    public abstract virtual string GetHeading();
    [ObsoleteAttribute("This is no longer required since the IUIGridColumn can now acquire its ClassDef")]
public abstract virtual string GetHeading(IClassDef classDef);
    public abstract virtual object GetParameterValue(string parameterName);
    public abstract virtual Type GetPropertyType();
}
public enum Habanero.BO.ClassDefinition.LayoutStyle : Enum {
    public int value__;
    public static LayoutStyle Label;
    public static LayoutStyle GroupBox;
}
[DefaultMemberAttribute("Item")]
public class Habanero.BO.ClassDefinition.UIDefCol : object {
    private Dictionary`2<string, IUIDef> _defs;
    private IClassDef _classDef;
    public IUIDef Item { get; }
    public int Count { get; }
    public IClassDef ClassDef { get; public set; }
    public string ClassName { get; }
    public void Add(IUIDef def);
    public bool Contains(IUIDef def);
    public bool Contains(string uiDefName);
    public void Remove(IUIDef def);
    public IUIDef get_Item(string name);
    public int get_Count();
    public IClassDef get_ClassDef();
    public void set_ClassDef(IClassDef value);
    public string get_ClassName();
    public UIDefCol Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UIDefCol a, UIDefCol b);
    public static bool op_Inequality(UIDefCol a, UIDefCol b);
    private sealed virtual override IEnumerator`1<IUIDef> System.Collections.Generic.IEnumerable<Habanero.Base.IUIDef>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Habanero.Util.ByteString : CustomProperty {
    private string _textValue;
    public string Value { get; public set; }
    public ByteString(string value);
    public ByteString(object value, bool isLoading);
    public string get_Value();
    public void set_Value(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual object GetPersistValue();
}
public class Habanero.Util.ConfigFileSettings : object {
    private Configuration _configuration;
    public ConfigFileSettings(Configuration configuration);
    public sealed virtual bool HasSetting(string settingName);
    public sealed virtual string GetString(string settingName);
    public sealed virtual string GetString(string settingName, DateTime date);
    public sealed virtual void SetString(string settingName, string settingValue);
    public sealed virtual decimal GetDecimal(string settingName, DateTime date);
    public sealed virtual decimal GetDecimal(string settingName);
    public sealed virtual void SetDecimal(string settingName, decimal settingValue);
    public sealed virtual bool GetBoolean(string settingName);
    public sealed virtual void SetBoolean(string settingName, bool boolValue);
    private string GetSettingValue(string settingName);
    private void SetSettingValue(string settingName, string settingValue);
    private KeyValueConfigurationElement GetSettingConfigurationElement(string settingName);
}
public class Habanero.Util.CrossThreadRunner : object {
    private Exception _lastException;
    public void RunInMTA(ThreadStart userDelegate);
    public TReturn RunInMTA(Function`1<TReturn> function);
    public void RunInSTA(ThreadStart userDelegate);
    public TReturn RunInSTA(Function`1<TReturn> function);
    private void Run(ThreadStart userDelegate, ApartmentState apartmentState);
    private void MultiThreadedWorker(ThreadStart userDelegate);
    private bool ExceptionWasThrown();
    private static void ThrowExceptionPreservingStack(Exception exception);
}
public class Habanero.Util.CSVFileReader : object {
    private TextReader _reader;
    private string _currentLine;
    private int _lineNo;
    public CSVFileReader(string fileName);
    public CSVFileReader(TextReader textReader);
    public bool MoveToNextLine();
    public List`1<string> GetValues();
    public List`1<string> GetValues(int numValues);
    public void Close();
}
public class Habanero.Util.CSVFileWriter : object {
    private TextWriter _writer;
    public CSVFileWriter(string fileName);
    public CSVFileWriter(TextWriter textWriter);
    public void WriteFromDataTable(DataTable table);
    private static string PrepareForCsv(string val);
    public void Close();
}
public static class Habanero.Util.DateTimeUtilities : object {
    private static int _DECEMBER;
    private static int _NOVEMBER;
    private static int _JANUARY;
    public static string StandardDateTimeFormat;
    private static IFormatProvider _dateTimeFormatProvider;
    private static DateTimeUtilities();
    public static DateTime LastDayOfTheMonth();
    public static DateTime LastDayOfTheMonth(DateTime dte);
    public static DateTime FirstDayOfMonth();
    public static DateTime FirstDayOfMonth(DateTime dte);
    public static DateTime FirstDayOFinancialYear(int monthFinancialYearStarts);
    public static DateTime FirstDayOFinancialYear(int monthFinancialYearStarts, DateTime currentDate);
    public static DateTime LastDayOfFinancialYear(int monthFinancialYearStarts, DateTime currentDate);
    public static bool CloseToDateTimeNow(DateTime valueToCheck, int toleranceInSeconds);
    public static DateTime ParseToDate(object valueToParse);
    private static object ParseValue(object valueToParse);
    private static void RaiseIncorrectTypeException(object value);
    public static bool TryParseDate(object valueToParse, Nullable`1& returnValue);
    public static bool TryParseValue(object valueToParse, Object& returnValue);
    public static bool IsWeekDay(DateTime date);
    public static DateTime OnOrNextDayOfWeek(DateTime date, DayOfWeek day);
    public static DateTime OnOrNextBusinessDay(DateTime date);
    public static DateTime OnOrPreviousDayOfWeek(DateTime date, DayOfWeek day);
    public static DateTime OnOrPreviousBusinessDay(DateTime date);
    public static DateTime NextBusinessDay(DateTime date);
    public static DateTime PreviousBusinessDay(DateTime date);
    public static DateTime HourStart(DateTime date);
    public static DateTime HourEnd(DateTime date);
    public static DateTime DayStart(DateTime date);
    public static DateTime DayStart(DateTime date, TimeSpan dayStartOffSet);
    public static DateTime DayEnd(DateTime date);
    public static DateTime DayEnd(DateTime date, TimeSpan dayStartOffSet);
    public static DateTime WeekStart(DateTime currentDateTime, TimeSpan weekStartOffSet);
    public static DateTime MonthStart(DateTime currentDateTime);
    public static DateTime MonthStart(DateTime currentDateTime, TimeSpan monthStartOffSet);
    public static DateTime WeekStart(DateTime currentDateTime);
    public static DateTime WeekEnd(DateTime currentDateTime);
    public static DateTime WeekEnd(DateTime currentDateTime, TimeSpan startOfWeekOffSet);
    public static DateTime MonthEnd(DateTime currentDateTime);
    public static DateTime MonthEnd(DateTime currentDateTime, TimeSpan startOfMonthOffSet);
    public static DateTime YearStart(DateTime currentDateTime);
    public static DateTime YearStart(DateTime currentDateTime, int noOfMonthsOffSet);
    public static DateTime YearStart(DateTime currentDateTime, int noOfMonthsOffSet, TimeSpan monthStartOffSet);
    public static DateTime YearEnd(DateTime currentDateTime);
    public static DateTime YearEnd(DateTime currentDateTime, int noOfMonthsOffSet);
    public static DateTime YearEnd(DateTime currentDateTime, int noOfMonthsOffSet, TimeSpan monthStartOffSet);
}
public class Habanero.Util.EmailSender : object {
    private string _fromAddress;
    private string _content;
    private string _subject;
    private List`1<string> _toAddresses;
    private List`1<string> _ccAddresses;
    private List`1<string> _bccAddresses;
    private List`1<string> _attachmentPaths;
    private string _smtpServerHost;
    private int _smtpServerPort;
    private bool _enableSSL;
    public List`1<string> ToAddresses { get; }
    public string Subject { get; }
    public List`1<string> Attachment { get; }
    public string SmtpServerHost { get; public set; }
    public int SmtpServerPort { get; public set; }
    public bool EnableSSL { get; public set; }
    public EmailSender(IList`1<string> emailAddresses, string fromAddress, string subject, string content, string attachmentPath);
    public EmailSender(IList`1<string> emailAddresses, string fromAddress, string subject, string content, IList`1<string> attachmentPaths);
    public EmailSender(IList`1<string> toAddresses, IList`1<string> ccAddresses, IList`1<string> bccAddresses, string fromAddress, string subject, string content, IList`1<string> attachmentPaths);
    private static List`1<string> CreateListWithItem(string item);
    public List`1<string> get_ToAddresses();
    public string get_Subject();
    public List`1<string> get_Attachment();
    public string get_SmtpServerHost();
    public void set_SmtpServerHost(string value);
    public int get_SmtpServerPort();
    public void set_SmtpServerPort(int value);
    public bool get_EnableSSL();
    public void set_EnableSSL(bool value);
    public void Send();
    public void SendAuthenticated(string username, string password);
    public void SendAuthenticated(string username, string password, string domain);
    private void DoSend(string authUsername, string authPassword, string authDomain);
    private static void addAddresses(MailAddressCollection addToCol, List`1<string> addressList);
}
public class Habanero.Util.FileUtilities : object {
    public static bool StringHasOnlyWhitespaceSinceLastNewline(string result);
    public static string GetRelativePath(string absolutePath, string relativeTo);
    public static string CreateFile(string filePath, string fileContents);
    public static string CreateFile(string filePath, string fileContents, bool overwrite);
    public static string CreateFile(string folderPath, string fileName, string fileContents);
    public static string CreateFile(string folderPath, string fileName, string fileContents, Encoding encoding);
    public static string CreateFile(string folderPath, string fileName, string fileContents, bool overwrite);
    public static string CreateFile(string folderPath, string fileName, string fileContents, bool overwrite, Encoding encoding);
    public static void CreateDirectory(string path);
}
public class Habanero.Util.Function`1 : MulticastDelegate {
    public Function`1(object object, IntPtr method);
    public virtual TReturn Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TReturn EndInvoke(IAsyncResult result);
}
public class Habanero.Util.Function`2 : MulticastDelegate {
    public Function`2(object object, IntPtr method);
    public virtual TReturn Invoke(TArg0 arg0);
    public virtual IAsyncResult BeginInvoke(TArg0 arg0, AsyncCallback callback, object object);
    public virtual TReturn EndInvoke(IAsyncResult result);
}
public class Habanero.Util.IdNumberUtilities : object {
    public static DateTime GetDateOfBirth(string idNumber);
}
public class Habanero.Util.ImageThumbnailCreator : object {
    public Image CreateThumbnail(Image fullImage, int newHeight);
    private bool ThumbnailCallback();
}
public class Habanero.Util.LongText : CustomProperty {
    private string _longTextValue;
    public string Value { get; public set; }
    public LongText(string value);
    public LongText(object value, bool isLoading);
    public string get_Value();
    public void set_Value(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual object GetPersistValue();
}
public static class Habanero.Util.ReflectionUtilities : object {
    private static IHabaneroLogger _log;
    private static ReflectionUtilities();
    public static void SetEnumPropertyValue(object obj, string propertyName, string enumItemName);
    public static string GetEnumPropertyValue(object obj, string propertyName);
    public static object GetPropertyValue(object obj, string propertyName);
    public static PropertyInfo GetPropertyInfo(Type type, string propertyName);
    public static object GetPrivatePropertyValue(object obj, string propertyName);
    public static PropertyInfo GetPrivatePropertyInfo(Type type, string propertyName);
    public static MethodInfo GetMethodInfo(Type type, string methodName);
    public static MethodInfo GetPrivateMethodInfo(Type type, string methodName);
    public static void SetPropertyValue(object obj, string propertyName, object value);
    public static void SetPrivatePropertyValue(object obj, string propertyName, object value);
    public static void SetPropValue(object obj, PropertyInfo propInfo, object value);
    private static object ConvertType(object value, Type propertyType);
    public static void SetInternalPropertyValue(object obj, string propertyName, object value);
    public static object ExecuteMethod(object obj, string methodName);
    public static object ExecutePrivateMethod(object obj, string methodName);
    public static object ExecutePrivateMethod(object obj, string methodName, Object[] arguments);
    public static Type GetUndelyingPropertType(Type classType, string propName);
    public static Type GetUndelyingPropertType(PropertyInfo propertyInfo);
    public static Type GetNullableUnderlyingType(Type type);
    public static bool IsNullableType(Type type);
    public static string GetPropertyName(Expression`1<Func`2<TModel, TReturn>> propExpression);
    public static PropertyInfo GetPropertyInfo(Expression`1<Func`2<TModel, TReturn>> propExpression);
    private static MemberExpression GetMemberExpression(Expression`1<Func`2<TModel, T>> expression);
    private static MemberExpression GetMemberExpression(Expression`1<Func`2<TModel, T>> expression, bool enforceCheck);
}
public static class Habanero.Util.SerialisationUtilities : object {
    public static Byte[] ObjectToByteArray(object obj);
    public static object ByteArrayToObject(Byte[] arrBytes);
    public static Byte[] ReadFully(Stream stream, int initialLength);
}
[DefaultMemberAttribute("Item")]
public class Habanero.Util.SortedStringCollection : object {
    private IList _list;
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public string Item { get; }
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    public string get_Item(int index);
    public void Add(string s);
}
public static class Habanero.Util.StringUtilities : object {
    private static NameValueCollection myPluralRules;
    private static String[] myUnaffectedPlural;
    private static NameValueCollection myIrregularPlural;
    private static NameValueCollection mySingularRules;
    private static String[] myUnaffectedSingular;
    private static NameValueCollection myIrregularSingular;
    private static Regex _guidFormat;
    private static StringUtilities();
    public static string ReplaceSingleQuotesWithTwo(string value);
    public static string ReplaceDoubleQuotesWithTwo(string value);
    public static string DelimitPascalCase(string inputString, string delimiter);
    public static string Singularize(string input);
    private static string Singularise(string input, NameValueCollection singularisationRules);
    public static string Pluralize(string input);
    public static string Camelize(string input);
    public static string Humanize(string input);
    public static string Classify(string input);
    public static string PascalCaseTableName(string text);
    private static string RemovePascalDelimiters(string text, string delimiter);
    public static bool IsManyPascalWords(string text);
    public static string RemovePrefix(string prefix, string text);
    public static string ToLowerFirstLetter(string input);
    public static bool GuidTryParse(string s, Guid& result);
    public static bool BoolTryParse(object valueToParse, Boolean& result);
    public static int CountOccurrences(string fullText, string searchText);
    public static int CountOccurrences(string fullText, string searchText, int startIndex, int length);
    public static int CountOccurrences(string fullText, char token);
    public static int CountOccurrences(string fullText, char token, int startIndex, int length);
    public static string GetLeftSection(string fullText, string searchText);
    public static string GetRightSection(string fullText, string searchText);
    public static string AppendMessage(string origMessage, string messageToAppend);
    public static string AppendMessage(string origMessage, string messageToAppend, string separator);
    public static StringBuilder AppendMessage(StringBuilder origStringBuilder, string appendedString, string separator);
    public static string GetValueString(string nameValuePairString, string name);
    public static NameValueCollection GetNameValueCollection(string nameValuePairString);
    public static string GuidToUpper(Guid guid);
}
public class Habanero.Util.TextFileLoader : object {
    public sealed virtual TextReader LoadTextFile(string fileName);
}
public static class Habanero.Util.TypeLoader : object {
    public static Type LoadType(string assemblyName, string className);
    private static Type FindFirstTypeWithName(Type[] types, string className);
    public static void LoadClassType(Type& classType, string assemblyName, string className, string loadingTypeDesc, string loadingFor);
    public static void ClassTypeInfo(Type classType, String& assemblyName, String& className);
    public static string CleanUpAssemblyName(string assemblyName);
}
[ExtensionAttribute]
public static class Habanero.Util.TypeUtilities : object {
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsDecimal(Type type);
}
[ExtensionAttribute]
public static class Habanero.Util.Utilities : object {
    [ExtensionAttribute]
public static bool IsNull(object obj);
    public static T[] ToArray(IList list);
}
public class Habanero.Util.XmlDocumentValidator : object {
    private bool _documentValid;
    private ValidationEventArgs _invalidDocumentArgs;
    private XmlDocument _xmlDocument;
    private void ValidationHandler(object sender, ValidationEventArgs args);
    public void ValidateDocument(string xmlDocument, string rootElementName, string dtd);
    private void ValidateCurrentDocument();
    public void ValidateDocument(XmlDocument xmlDocument);
    public void ValidateElement(XmlElement xmlElement);
    private string GetDTD(string rootElementName);
}
