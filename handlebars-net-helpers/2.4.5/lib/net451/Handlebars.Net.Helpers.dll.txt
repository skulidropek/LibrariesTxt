internal static class HandlebarsDotNet.Helpers.Compatibility.AppContextHelper : object {
    [NullableContextAttribute("1")]
public static string GetBaseDirectory();
}
[ExtensionAttribute]
public static class HandlebarsDotNet.Helpers.Extensions.IHandlebarsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool TryEvaluate(IHandlebars handlebarsContext, string template, object data, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HandlebarsDotNet.Helpers.HandlebarsHelpers : object {
    internal static AsyncLocal`1<EvaluateResult> AsyncLocalResultFromEvaluate;
    private static HandlebarsHelpers();
    public static void Register(IHandlebars handlebarsContext, Category[] categories);
    public static void Register(IHandlebars handlebarsContext, Action`1<HandlebarsHelpersOptions> optionsCallback);
    private static void RegisterEvaluateHelper(IHandlebars handlebarsContext);
    private static void RegisterCustomHelper(IHandlebars handlebarsContext, HandlebarsHelpersOptions options, string categoryPrefix, IHelpers helper);
    private static string GetName(MethodInfo methodInfo, HandlebarsWriterAttribute attribute, HandlebarsHelpersOptions options, string categoryPrefix);
    private static void RegisterHelper(IHandlebars handlebarsContext, object instance, HandlebarsWriterAttribute attribute, MethodInfo methodInfo, string name);
    private static void RegisterStringHelper(IHandlebars handlebarsContext, object instance, MethodInfo methodInfo, string helperName, bool passContext);
    private static void RegisterValueHelper(IHandlebars handlebarsContext, object instance, MethodInfo methodInfo, string helperName, bool passContext);
    private static void RegisterBlockHelper(bool methodIsOnlyUsedInContextOfABlockHelper, IHandlebars handlebarsContext, object obj, MethodInfo methodInfo, string name);
    private static object InvokeMethod(Nullable`1<Context> model, bool methodIsOnlyUsedInContextOfABlockHelper, IHandlebars context, string helperName, MethodInfo methodInfo, Arguments arguments, object instance, IHelperOptions options);
    private static String[] CreateHelperNames(string helperName);
    [CompilerGeneratedAttribute]
internal static void <Register>g__Add|2_0(string path, ICollection`1<string> customHelperPaths);
}
internal class HandlebarsDotNet.Helpers.Helpers.BooleanHelpers : BaseHelpers {
    [NullableContextAttribute("1")]
public BooleanHelpers(IHandlebars context);
    [HandlebarsWriterAttribute]
public bool Equal(bool value, bool test);
    [HandlebarsWriterAttribute]
public bool NotEqual(bool value, bool test);
    [HandlebarsWriterAttribute]
public bool Not(bool value);
    [HandlebarsWriterAttribute]
public bool And(bool value, bool test);
    [HandlebarsWriterAttribute]
public bool LogicalAnd(bool value, bool test);
    [HandlebarsWriterAttribute]
public bool Or(bool value, bool test);
    [HandlebarsWriterAttribute]
public bool LogicalOr(bool value, bool test);
    [HandlebarsWriterAttribute]
public bool LogicalXor(bool value, bool test);
}
internal class HandlebarsDotNet.Helpers.Helpers.ConstantsHelpers : BaseHelpers {
    [NullableContextAttribute("1")]
public ConstantsHelpers(IHandlebars context);
    [HandlebarsWriterAttribute]
public double E();
    [HandlebarsWriterAttribute]
public double PI();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Helpers.DateTimeHelpers : BaseHelpers {
    private IDateTimeService _dateTimeService;
    public DateTimeHelpers(IHandlebars context, IDateTimeService dateTimeService);
    [HandlebarsWriterAttribute]
public object Now(string format);
    [HandlebarsWriterAttribute]
public object UtcNow(string format);
    [HandlebarsWriterAttribute]
public string Format(object value, string format);
    [CompilerGeneratedAttribute]
private string <Format>g__FormatToString|4_0(DateTime dateTime, <>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Helpers.EnumerableHelpers : BaseHelpers {
    public EnumerableHelpers(IHandlebars context);
    [HandlebarsWriterAttribute]
public double Average(IEnumerable`1<object> values);
    [HandlebarsWriterAttribute]
public IEnumerable`1<object> Distinct(IEnumerable`1<object> values);
    [NullableContextAttribute("2")]
[HandlebarsWriterAttribute]
public bool IsFirst(IEnumerable`1<object> values, object value);
    [NullableContextAttribute("2")]
[HandlebarsWriterAttribute]
public bool IsLast(IEnumerable`1<object> values, object value);
    [NullableContextAttribute("2")]
[HandlebarsWriterAttribute]
public bool IsEmpty(IEnumerable`1<object> value);
    [HandlebarsWriterAttribute]
public double Max(IEnumerable`1<object> values);
    [HandlebarsWriterAttribute]
public double Min(IEnumerable`1<object> values);
    [HandlebarsWriterAttribute]
public IEnumerable`1<object> Page(IEnumerable`1<object> values, int pageNumber, int numberOfObjectsPerPage);
    [HandlebarsWriterAttribute]
public IEnumerable`1<object> Reverse(IEnumerable`1<object> values);
    [IteratorStateMachineAttribute("HandlebarsDotNet.Helpers.Helpers.EnumerableHelpers/<Select>d__9")]
[HandlebarsWriterAttribute]
public IEnumerable`1<object> Select(IEnumerable`1<object> values, string propertyName, bool skipNullValues);
    [HandlebarsWriterAttribute]
public IEnumerable`1<object> Skip(IEnumerable`1<object> values, int count);
    [HandlebarsWriterAttribute]
public double Sum(IEnumerable`1<object> values);
    [HandlebarsWriterAttribute]
public IEnumerable`1<object> Take(IEnumerable`1<object> values, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Helpers.EnvironmentHelpers : BaseHelpers {
    private static string Process;
    public EnvironmentHelpers(IHandlebars context);
    [HandlebarsWriterAttribute]
public string GetEnvironmentVariable(string variable, string target);
    public IDictionary GetEnvironmentVariables(string target);
    private static EnvironmentVariableTarget Parse(string target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Helpers.EvaluateHelper : object {
    internal static string HelperName;
    private AsyncLocal`1<EvaluateResult> _asyncLocal;
    public PathInfo Name { get; }
    public EvaluateHelper(AsyncLocal`1<EvaluateResult> asyncLocal);
    public sealed virtual PathInfo get_Name();
    public object Invoke(HelperOptions& options, Context& context, Arguments& arguments);
    public void Invoke(EncodedTextWriter& output, HelperOptions& options, Context& context, Arguments& arguments);
    private EvaluateResult SetValue(Arguments arguments);
    private sealed virtual override object HandlebarsDotNet.Helpers.IHelperDescriptor<HandlebarsDotNet.HelperOptions>.Invoke(HelperOptions& modreq(System.Runtime.InteropServices.InAttribute) options, Context& modreq(System.Runtime.InteropServices.InAttribute) context, Arguments& modreq(System.Runtime.InteropServices.InAttribute) arguments);
    private sealed virtual override void HandlebarsDotNet.Helpers.IHelperDescriptor<HandlebarsDotNet.HelperOptions>.Invoke(EncodedTextWriter& modreq(System.Runtime.InteropServices.InAttribute) output, HelperOptions& modreq(System.Runtime.InteropServices.InAttribute) options, Context& modreq(System.Runtime.InteropServices.InAttribute) context, Arguments& modreq(System.Runtime.InteropServices.InAttribute) arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Helpers.MathHelpers : BaseHelpers {
    private static double Tolerance;
    public MathHelpers(IHandlebars context);
    [HandlebarsWriterAttribute]
public object Add(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Abs(object value);
    [HandlebarsWriterAttribute]
public double Avg(object value1, object value2);
    [HandlebarsWriterAttribute]
public double Ceiling(object value);
    [HandlebarsWriterAttribute]
public double Divide(object value1, object value2);
    [HandlebarsWriterAttribute]
public bool Equal(object value1, object value2);
    [HandlebarsWriterAttribute]
public double Floor(object value1, object value2);
    [HandlebarsWriterAttribute]
public bool GreaterThan(object value1, object value2);
    [HandlebarsWriterAttribute]
public bool GreaterThanEqual(object value1, object value2);
    [HandlebarsWriterAttribute]
public bool LessThan(object value1, object value2);
    [HandlebarsWriterAttribute]
public bool LessThanEqual(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Max(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Min(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Minus(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Modulo(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Multiply(object value1, object value2);
    [HandlebarsWriterAttribute]
public bool NotEqual(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Plus(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Power(object value1, object value2);
    [HandlebarsWriterAttribute]
public double Round(object value);
    [HandlebarsWriterAttribute]
public object Sign(object value);
    [HandlebarsWriterAttribute]
public object Subtract(object value1, object value2);
    [HandlebarsWriterAttribute]
public object Sqrt(object value);
    [HandlebarsWriterAttribute]
public object Times(object value1, object value2);
}
internal class HandlebarsDotNet.Helpers.Helpers.ObjectHelpers : BaseHelpers {
    [NullableContextAttribute("1")]
public ObjectHelpers(IHandlebars context);
    [NullableContextAttribute("2")]
[HandlebarsWriterAttribute]
public object FormatAsObject(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Helpers.RegexHelpers : BaseHelpers {
    private static TimeSpan RegexTimeout;
    public RegexHelpers(IHandlebars context);
    private static RegexHelpers();
    [HandlebarsWriterAttribute]
public bool IsMatch(string value, string regexPattern, string options);
    [HandlebarsWriterAttribute]
public object Match(string value, string regexPattern, string options);
    [HandlebarsWriterAttribute]
public object Match(bool isBlockHelper, string value, string regexPattern, string options);
    private static object MatchInternal(bool isBlockHelper, string value, string regexPattern, string options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Helpers.StringHelpers : BaseHelpers {
    public StringHelpers(IHandlebars context);
    [HandlebarsWriterAttribute]
public string Append(string value, string append);
    [HandlebarsWriterAttribute]
public static string Base64Decode(string value);
    [HandlebarsWriterAttribute]
public static string Base64Encode(string value);
    [HandlebarsWriterAttribute]
public string Camelcase(string value);
    [HandlebarsWriterAttribute]
public string Capitalize(string value);
    [NullableContextAttribute("2")]
[HandlebarsWriterAttribute]
public object Coalesce(Object[] arguments);
    [HandlebarsWriterAttribute]
public string Concat(string value, string append);
    [HandlebarsWriterAttribute]
public bool Contains(string value, string test);
    [HandlebarsWriterAttribute]
public string Ellipsis(string value, int length);
    [HandlebarsWriterAttribute]
public bool Equal(string value, string test, object stringComparisonType);
    [HandlebarsWriterAttribute]
public bool Equals(string value, string test, object stringComparisonType);
    [HandlebarsWriterAttribute]
public string Format(object value, string format);
    [NullableContextAttribute("2")]
[HandlebarsWriterAttribute]
public WrappedString FormatAsString(object value, string format);
    [HandlebarsWriterAttribute]
public bool IsNotNullOrEmpty(string value);
    [HandlebarsWriterAttribute]
public bool IsNotNullOrWhiteSpace(string value);
    [HandlebarsWriterAttribute]
public bool IsNullOrEmpty(string value);
    [HandlebarsWriterAttribute]
public bool IsNullOrWhiteSpace(string value);
    [HandlebarsWriterAttribute]
public bool IsString(object value);
    [HandlebarsWriterAttribute]
public string Join(IEnumerable values, string separator);
    [HandlebarsWriterAttribute]
public string Lowercase(string value);
    [HandlebarsWriterAttribute]
public bool NotEqual(string value, string test, object stringComparisonType);
    [HandlebarsWriterAttribute]
public bool NotEquals(string value, string test, object stringComparisonType);
    [HandlebarsWriterAttribute]
public string PadLeft(string value, int totalWidth, string padChar);
    [HandlebarsWriterAttribute]
public string PadRight(string value, int totalWidth, string padChar);
    [HandlebarsWriterAttribute]
public string Pascalcase(string value);
    [HandlebarsWriterAttribute]
public string Prepend(string value, string pre);
    [HandlebarsWriterAttribute]
public string Remove(string value, string oldValue);
    [HandlebarsWriterAttribute]
public string Repeat(string value, int count);
    [HandlebarsWriterAttribute]
public string Replace(string value, string oldValue, string newValue);
    [HandlebarsWriterAttribute]
public string Reverse(string value);
    [HandlebarsWriterAttribute]
public String[] Split(string value, string separator);
    [HandlebarsWriterAttribute]
public bool StartsWith(string value, string test);
    [HandlebarsWriterAttribute]
public string Substring(string value, int start, Nullable`1<int> end);
    [HandlebarsWriterAttribute]
public static string Titlecase(string value);
    [HandlebarsWriterAttribute]
public string Trim(string value);
    [HandlebarsWriterAttribute]
public string TrimEnd(string value);
    [HandlebarsWriterAttribute]
public string TrimStart(string value);
    [HandlebarsWriterAttribute]
public string Truncate(string value, int length);
    [HandlebarsWriterAttribute]
public string Uppercase(string value);
    [HandlebarsWriterAttribute]
public WrappedString ToWrappedString(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Helpers.UrlHelpers : BaseHelpers {
    public UrlHelpers(IHandlebars context);
    [HandlebarsWriterAttribute]
public string DecodeUri(string value);
    [HandlebarsWriterAttribute]
public string EncodeUri(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class HandlebarsDotNet.Helpers.Models.EvaluateResult : ValueType {
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEvaluated>k__BackingField;
    public object Result { get; public set; }
    public bool IsEvaluated { get; public set; }
    public static EvaluateResult NotEvaluated { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsEvaluated();
    [CompilerGeneratedAttribute]
public void set_IsEvaluated(bool value);
    public static EvaluateResult get_NotEvaluated();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HandlebarsDotNet.Helpers.Models.WrappedString : object {
    private static string Start;
    private static string End;
    private static string Pattern;
    private static string Replacement;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WrappedValue>k__BackingField;
    public string Value { get; }
    public string WrappedValue { get; }
    public WrappedString(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public string get_WrappedValue();
    public virtual string ToString();
    public static bool TryDecode(string text, String& decoded);
    private static bool TryRegexReplace(string input, String& output);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HandlebarsDotNet.Helpers.Options.HandlebarsHelpersOptions : object {
    [NullableAttribute("1")]
private static string Dot;
    [CompilerGeneratedAttribute]
private bool <UseCategoryPrefix>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <PrefixSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Category[] <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeService <DateTimeService>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, IHelpers> <CustomHelpers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> CustomHelperPaths;
    public bool UseCategoryPrefix { get; public set; }
    [NullableAttribute("1")]
public string PrefixSeparator { get; public set; }
    public bool PrefixSeparatorIsDot { get; }
    public string Prefix { get; public set; }
    public Category[] Categories { get; public set; }
    public IDateTimeService DateTimeService { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, IHelpers> CustomHelpers { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseCategoryPrefix();
    [CompilerGeneratedAttribute]
public void set_UseCategoryPrefix(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_PrefixSeparator();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_PrefixSeparator(string value);
    public bool get_PrefixSeparatorIsDot();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public Category[] get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(Category[] value);
    [CompilerGeneratedAttribute]
public IDateTimeService get_DateTimeService();
    [CompilerGeneratedAttribute]
public void set_DateTimeService(IDateTimeService value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IHelpers> get_CustomHelpers();
    [CompilerGeneratedAttribute]
public void set_CustomHelpers(IDictionary`2<string, IHelpers> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HandlebarsDotNet.Helpers.Plugin.PluginLoader : object {
    public static IDictionary`2<Category, IHelpers> Load(IEnumerable`1<string> paths, IDictionary`2<Category, string> items, Object[] args);
    private static IEnumerable`1<Type> GetImplementationTypeByInterface(Assembly assembly);
}
internal class HandlebarsDotNet.Helpers.Utils.DateTimeService : object {
    public sealed virtual DateTime Now();
    public sealed virtual DateTime UtcNow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HandlebarsDotNet.Helpers.Utils.ExecuteUtils : object {
    public static object Execute(IHandlebars context, object value, Func`2<int, int> intFunc, Func`2<long, long> longFunc, Func`2<double, double> doubleFunc);
    public static string Execute(IHandlebars context, object value, Func`2<int, string> intFunc, Func`2<long, string> longFunc, Func`2<double, string> doubleFunc);
    public static TResult Execute(IHandlebars context, object value1, object value2, Func`3<int, int, TResult> intFunc, Func`3<long, long, TResult> longFunc, Func`3<double, double, TResult> doubleFunc);
    public static double Execute(object value, Func`2<double, double> doubleFunc);
    public static double Execute(IEnumerable`1<object> values, Func`2<IEnumerable`1<double>, double> doubleFunc);
    public static double Execute(IHandlebars context, object value1, object value2, Func`3<double, double, double> doubleFunc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HandlebarsDotNet.Helpers.Utils.HtmlUtils : object {
    public static void HtmlDecode(string value, TextWriter output);
    public static string HtmlDecode(string value);
    public static void HtmlEncode(string value, TextWriter output);
    public static string HtmlEncode(string value);
}
public interface HandlebarsDotNet.Helpers.Utils.IDateTimeService {
    public abstract virtual DateTime Now();
    public abstract virtual DateTime UtcNow();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class HandlebarsDotNet.Helpers.Utils.ReflectionUtils : object {
    public static object GetPropertyOrFieldValue(object obj, string propertyOrFieldName);
    private static object GetPropertyOrFieldValueInternal(object obj, string propertyOrFieldName);
}
internal static class HandlebarsDotNet.Helpers.Utils.RegexUtils : object {
    [NullableContextAttribute("1")]
public static Dictionary`2<string, string> GetNamedGroups(Regex regex, string input);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.MethodBaseExtensions : object {
    [ExtensionAttribute]
public static bool LastParameterIsParam(MethodBase methodInfo);
    [ExtensionAttribute]
public static bool FirstParameterIsHelperOptions(MethodBase methodInfo);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
