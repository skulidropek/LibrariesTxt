public class Hangfire.Dashboard.AspNetCoreDashboardContext : DashboardContext {
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    public HttpContext HttpContext { get; }
    public AspNetCoreDashboardContext(JobStorage storage, DashboardOptions options, HttpContext httpContext);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    public virtual IBackgroundJobClient GetBackgroundJobClient();
    public virtual IRecurringJobManager GetRecurringJobManager();
}
[ExtensionAttribute]
public static class Hangfire.Dashboard.AspNetCoreDashboardContextExtensions : object {
    [ExtensionAttribute]
public static HttpContext GetHttpContext(DashboardContext context);
}
public class Hangfire.Dashboard.AspNetCoreDashboardMiddleware : object {
    private RequestDelegate _next;
    private JobStorage _storage;
    private DashboardOptions _options;
    private RouteCollection _routes;
    public AspNetCoreDashboardMiddleware(RequestDelegate next, JobStorage storage, DashboardOptions options, RouteCollection routes);
    [AsyncStateMachineAttribute("Hangfire.Dashboard.AspNetCoreDashboardMiddleware/<Invoke>d__5")]
public Task Invoke(HttpContext httpContext);
    private static void SetResponseStatusCode(HttpContext httpContext, int statusCode);
    private static int GetUnauthorizedStatusCode(HttpContext httpContext);
}
internal class Hangfire.Dashboard.AspNetCoreDashboardRequest : DashboardRequest {
    private HttpContext _context;
    public string Method { get; }
    public string Path { get; }
    public string PathBase { get; }
    public string LocalIpAddress { get; }
    public string RemoteIpAddress { get; }
    public AspNetCoreDashboardRequest(HttpContext context);
    public virtual string get_Method();
    public virtual string get_Path();
    public virtual string get_PathBase();
    public virtual string get_LocalIpAddress();
    public virtual string get_RemoteIpAddress();
    public virtual string GetQuery(string key);
    [AsyncStateMachineAttribute("Hangfire.Dashboard.AspNetCoreDashboardRequest/<GetFormValuesAsync>d__13")]
public virtual Task`1<IList`1<string>> GetFormValuesAsync(string key);
}
internal class Hangfire.Dashboard.AspNetCoreDashboardResponse : DashboardResponse {
    private HttpContext _context;
    public string ContentType { get; public set; }
    public int StatusCode { get; public set; }
    public Stream Body { get; }
    public AspNetCoreDashboardResponse(HttpContext context);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual int get_StatusCode();
    public virtual void set_StatusCode(int value);
    public virtual Stream get_Body();
    public virtual Task WriteAsync(string text);
    public virtual void SetExpire(Nullable`1<DateTimeOffset> value);
}
[ExtensionAttribute]
public static class Hangfire.HangfireApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseHangfireDashboard(IApplicationBuilder app, string pathMatch, DashboardOptions options, JobStorage storage);
    [ExtensionAttribute]
[ObsoleteAttribute("Please use IServiceCollection.AddHangfireServer extension method instead in the ConfigureServices method. Will be removed in 2.0.0.")]
public static IApplicationBuilder UseHangfireServer(IApplicationBuilder app, BackgroundJobServerOptions options, IEnumerable`1<IBackgroundProcess> additionalProcesses, JobStorage storage);
    [ExtensionAttribute]
public static IApplicationBuilder UseHangfireServer(IApplicationBuilder app, Func`1<IBackgroundProcessingServer> serverFactory);
    [ExtensionAttribute]
public static IServiceProvider RegisterHangfireServer(IServiceProvider services, IBackgroundProcessingServer server);
}
[ExtensionAttribute]
public static class Hangfire.HangfireEndpointRouteBuilderExtensions : object {
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapHangfireDashboard(IEndpointRouteBuilder endpoints, DashboardOptions options, JobStorage storage);
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapHangfireDashboard(IEndpointRouteBuilder endpoints, string pattern, DashboardOptions options, JobStorage storage);
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapHangfireDashboardWithAuthorizationPolicy(IEndpointRouteBuilder endpoints, string authorizationPolicyName, string pattern, DashboardOptions options, JobStorage storage);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
