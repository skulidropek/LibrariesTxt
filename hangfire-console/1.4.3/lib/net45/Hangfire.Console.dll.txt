[ExtensionAttribute]
public static class Hangfire.Console.ConsoleExtensions : object {
    [ExtensionAttribute]
public static void SetTextColor(PerformContext context, ConsoleTextColor color);
    [ExtensionAttribute]
public static void ResetTextColor(PerformContext context);
    [ExtensionAttribute]
public static IProgressBar WriteProgressBar(PerformContext context, int value, ConsoleTextColor color);
    [ExtensionAttribute]
public static IProgressBar WriteProgressBar(PerformContext context, string name, double value, ConsoleTextColor color);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, string value);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, ConsoleTextColor color, string value);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, object value);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, string format, object arg0);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, string format, Object[] args);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, ConsoleTextColor color, object value);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, ConsoleTextColor color, string format, object arg0);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, ConsoleTextColor color, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, ConsoleTextColor color, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void WriteLine(PerformContext context, ConsoleTextColor color, string format, Object[] args);
}
public class Hangfire.Console.ConsoleOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ExpireIn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowJobRetentionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PollInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProgressBarDecimalDigits>k__BackingField;
    public TimeSpan ExpireIn { get; public set; }
    public bool FollowJobRetentionPolicy { get; public set; }
    public int PollInterval { get; public set; }
    public string BackgroundColor { get; public set; }
    public string TextColor { get; public set; }
    public string TimestampColor { get; public set; }
    public int ProgressBarDecimalDigits { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpireIn();
    [CompilerGeneratedAttribute]
public void set_ExpireIn(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_FollowJobRetentionPolicy();
    [CompilerGeneratedAttribute]
public void set_FollowJobRetentionPolicy(bool value);
    [CompilerGeneratedAttribute]
public int get_PollInterval();
    [CompilerGeneratedAttribute]
public void set_PollInterval(int value);
    [CompilerGeneratedAttribute]
public string get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(string value);
    [CompilerGeneratedAttribute]
public string get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(string value);
    [CompilerGeneratedAttribute]
public string get_TimestampColor();
    [CompilerGeneratedAttribute]
public void set_TimestampColor(string value);
    [CompilerGeneratedAttribute]
public int get_ProgressBarDecimalDigits();
    [CompilerGeneratedAttribute]
public void set_ProgressBarDecimalDigits(int value);
    internal void Validate(string paramName);
}
public class Hangfire.Console.ConsoleTextColor : object {
    public static ConsoleTextColor Black;
    public static ConsoleTextColor DarkBlue;
    public static ConsoleTextColor DarkGreen;
    public static ConsoleTextColor DarkCyan;
    public static ConsoleTextColor DarkRed;
    public static ConsoleTextColor DarkMagenta;
    public static ConsoleTextColor DarkYellow;
    public static ConsoleTextColor Gray;
    public static ConsoleTextColor DarkGray;
    public static ConsoleTextColor Blue;
    public static ConsoleTextColor Green;
    public static ConsoleTextColor Cyan;
    public static ConsoleTextColor Red;
    public static ConsoleTextColor Magenta;
    public static ConsoleTextColor Yellow;
    public static ConsoleTextColor White;
    private string _color;
    private ConsoleTextColor(string color);
    private static ConsoleTextColor();
    public virtual string ToString();
    public static string op_Implicit(ConsoleTextColor color);
}
internal class Hangfire.Console.Dashboard.ConsoleDispatcher : object {
    private ConsoleOptions _options;
    public ConsoleDispatcher(ConsoleOptions options);
    public sealed virtual Task Dispatch(DashboardContext context);
}
internal static class Hangfire.Console.Dashboard.ConsoleRenderer : object {
    private static HtmlHelper Helper;
    private static Regex LinkDetector;
    private static ConsoleRenderer();
    public static void RenderText(StringBuilder buffer, string text);
    public static void RenderLine(StringBuilder builder, ConsoleLine line, DateTime timestamp);
    public static void RenderLines(StringBuilder builder, IEnumerable`1<ConsoleLine> lines, DateTime timestamp);
    public static void RenderLineBuffer(StringBuilder builder, IConsoleStorage storage, ConsoleId consoleId, int start);
    private static IEnumerable`1<ConsoleLine> ReadLines(IConsoleStorage storage, ConsoleId consoleId, Int32& start);
}
internal class Hangfire.Console.Dashboard.DynamicCssDispatcher : object {
    private ConsoleOptions _options;
    public DynamicCssDispatcher(ConsoleOptions options);
    public sealed virtual Task Dispatch(DashboardContext context);
}
internal class Hangfire.Console.Dashboard.DynamicJsDispatcher : object {
    private ConsoleOptions _options;
    public DynamicJsDispatcher(ConsoleOptions options);
    public sealed virtual Task Dispatch(DashboardContext context);
}
internal class Hangfire.Console.Dashboard.JobProgressDispatcher : object {
    internal static JsonSerializerSettings JsonSettings;
    private ConsoleOptions _options;
    public JobProgressDispatcher(ConsoleOptions options);
    private static JobProgressDispatcher();
    [AsyncStateMachineAttribute("Hangfire.Console.Dashboard.JobProgressDispatcher/<Dispatch>d__3")]
public sealed virtual Task Dispatch(DashboardContext context);
}
internal class Hangfire.Console.Dashboard.ProcessingStateRenderer : object {
    private ConsoleOptions _options;
    public ProcessingStateRenderer(ConsoleOptions options);
    public NonEscapedString Render(HtmlHelper helper, IDictionary`2<string, string> stateData);
}
[ExtensionAttribute]
public static class Hangfire.Console.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> WithProgress(IEnumerable`1<T> enumerable, IProgressBar progressBar, int count);
    [ExtensionAttribute]
public static IEnumerable WithProgress(IEnumerable enumerable, IProgressBar progressBar, int count);
    [ExtensionAttribute]
public static IEnumerable`1<T> WithProgress(IEnumerable`1<T> enumerable, PerformContext context, ConsoleTextColor color, int count);
    [ExtensionAttribute]
public static IEnumerable WithProgress(IEnumerable enumerable, PerformContext context, ConsoleTextColor color, int count);
    [ExtensionAttribute]
public static IEnumerable`1<T> WithProgress(IEnumerable`1<T> enumerable, PerformContext context, string name, ConsoleTextColor color, int count);
    [ExtensionAttribute]
public static IEnumerable WithProgress(IEnumerable enumerable, PerformContext context, string name, ConsoleTextColor color, int count);
}
[ExtensionAttribute]
public static class Hangfire.Console.GlobalConfigurationExtensions : object {
    [ExtensionAttribute]
public static IGlobalConfiguration UseConsole(IGlobalConfiguration configuration, ConsoleOptions options);
}
[ExtensionAttribute]
public static class Hangfire.Console.JobStorageExtensions : object {
    [ExtensionAttribute]
public static IConsoleApi GetConsoleApi(JobStorage storage);
}
internal class Hangfire.Console.Monitoring.ConsoleApi : object {
    private IConsoleStorage _storage;
    public ConsoleApi(IStorageConnection connection);
    public sealed virtual void Dispose();
    public sealed virtual IList`1<LineDto> GetLines(string jobId, DateTime timestamp, LineType type);
}
public interface Hangfire.Console.Monitoring.IConsoleApi {
    public abstract virtual IList`1<LineDto> GetLines(string jobId, DateTime timestamp, LineType type);
}
public abstract class Hangfire.Console.Monitoring.LineDto : object {
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public LineType Type { get; }
    public DateTime Timestamp { get; }
    public string Color { get; internal set; }
    internal LineDto(ConsoleLine line, DateTime referenceTimestamp);
    public abstract virtual LineType get_Type();
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
internal void set_Color(string value);
}
public enum Hangfire.Console.Monitoring.LineType : Enum {
    public int value__;
    public static LineType Any;
    public static LineType Text;
    public static LineType ProgressBar;
}
public class Hangfire.Console.Monitoring.ProgressBarDto : LineDto {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Progress>k__BackingField;
    public LineType Type { get; }
    public int Id { get; }
    public string Name { get; }
    public double Progress { get; internal set; }
    internal ProgressBarDto(ConsoleLine line, DateTime referenceTimestamp);
    public virtual LineType get_Type();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public double get_Progress();
    [CompilerGeneratedAttribute]
internal void set_Progress(double value);
}
public class Hangfire.Console.Monitoring.TextLineDto : LineDto {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public LineType Type { get; }
    public string Text { get; }
    internal TextLineDto(ConsoleLine line, DateTime referenceTimestamp);
    public virtual LineType get_Type();
    [CompilerGeneratedAttribute]
public string get_Text();
}
internal class Hangfire.Console.Progress.DefaultProgressBar : object {
    private ConsoleContext _context;
    private string _progressBarId;
    private int _decimalDigits;
    private string _name;
    private string _color;
    private double _value;
    internal DefaultProgressBar(ConsoleContext context, string progressBarId, int decimalDigits, string name, string color);
    public sealed virtual void SetValue(int value);
    public sealed virtual void SetValue(double value);
}
public interface Hangfire.Console.Progress.IProgressBar {
    public abstract virtual void SetValue(int value);
    public abstract virtual void SetValue(double value);
}
internal class Hangfire.Console.Progress.NoOpProgressBar : object {
    public sealed virtual void SetValue(int value);
    public sealed virtual void SetValue(double value);
}
internal class Hangfire.Console.Progress.ProgressEnumerable : object {
    private IEnumerable _enumerable;
    private IProgressBar _progressBar;
    private int _count;
    public ProgressEnumerable(IEnumerable enumerable, IProgressBar progressBar, int count);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class Hangfire.Console.Progress.ProgressEnumerable`1 : object {
    private IEnumerable`1<T> _enumerable;
    private IProgressBar _progressBar;
    private int _count;
    public ProgressEnumerable`1(IEnumerable`1<T> enumerable, IProgressBar progressBar, int count);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Hangfire.Console.Serialization.ConsoleId : object {
    private static DateTime UnixEpoch;
    private string _cachedString;
    [CompilerGeneratedAttribute]
private string <JobId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    public string JobId { get; }
    public long Timestamp { get; }
    public DateTime DateValue { get; }
    public ConsoleId(string jobId, DateTime timestamp);
    private ConsoleId(string jobId, long timestamp);
    private static ConsoleId();
    [CompilerGeneratedAttribute]
public string get_JobId();
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    public DateTime get_DateValue();
    public static ConsoleId Parse(string value);
    public sealed virtual bool Equals(ConsoleId other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Hangfire.Console.Serialization.ConsoleLine : object {
    [CompilerGeneratedAttribute]
private double <TimeOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ProgressValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProgressName>k__BackingField;
    [JsonPropertyAttribute]
public double TimeOffset { get; public set; }
    [JsonPropertyAttribute]
public bool IsReference { get; public set; }
    [JsonPropertyAttribute]
public string Message { get; public set; }
    [JsonPropertyAttribute]
public string TextColor { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<double> ProgressValue { get; public set; }
    [JsonPropertyAttribute]
public string ProgressName { get; public set; }
    [CompilerGeneratedAttribute]
public double get_TimeOffset();
    [CompilerGeneratedAttribute]
public void set_TimeOffset(double value);
    [CompilerGeneratedAttribute]
public bool get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ProgressValue();
    [CompilerGeneratedAttribute]
public void set_ProgressValue(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_ProgressName();
    [CompilerGeneratedAttribute]
public void set_ProgressName(string value);
}
internal class Hangfire.Console.Server.ConsoleContext : object {
    private ConsoleId _consoleId;
    private IConsoleStorage _storage;
    private ConsoleOptions _options;
    private double _lastTimeOffset;
    private int _nextProgressBarId;
    [CompilerGeneratedAttribute]
private ConsoleTextColor <TextColor>k__BackingField;
    public ConsoleTextColor TextColor { get; public set; }
    public ConsoleContext(ConsoleId consoleId, IConsoleStorage storage, ConsoleOptions options);
    public static ConsoleContext FromPerformContext(PerformContext context);
    [CompilerGeneratedAttribute]
public ConsoleTextColor get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(ConsoleTextColor value);
    public void AddLine(ConsoleLine line);
    public void WriteLine(string value, ConsoleTextColor color);
    public IProgressBar WriteProgressBar(string name, double value, ConsoleTextColor color);
    public void Expire(TimeSpan expireIn);
    public void FixExpiration();
}
internal class Hangfire.Console.Server.ConsoleServerFilter : object {
    private ConsoleOptions _options;
    public ConsoleServerFilter(ConsoleOptions options);
    public sealed virtual void OnPerforming(PerformingContext filterContext);
    public sealed virtual void OnPerformed(PerformedContext filterContext);
}
internal class Hangfire.Console.States.ConsoleApplyStateFilter : object {
    private ConsoleOptions _options;
    public ConsoleApplyStateFilter(ConsoleOptions options);
    public sealed virtual void OnStateApplied(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual void OnStateUnapplied(ApplyStateContext context, IWriteOnlyTransaction transaction);
}
internal class Hangfire.Console.Storage.ConsoleExpirationTransaction : object {
    private JobStorageTransaction _transaction;
    public ConsoleExpirationTransaction(JobStorageTransaction transaction);
    public sealed virtual void Dispose();
    public sealed virtual void Expire(ConsoleId consoleId, TimeSpan expireIn);
    public sealed virtual void Persist(ConsoleId consoleId);
}
[ExtensionAttribute]
internal static class Hangfire.Console.Storage.ConsoleIdExtensions : object {
    [ExtensionAttribute]
public static string GetSetKey(ConsoleId consoleId);
    [ExtensionAttribute]
public static string GetHashKey(ConsoleId consoleId);
    [ExtensionAttribute]
public static string GetOldConsoleKey(ConsoleId consoleId);
}
internal class Hangfire.Console.Storage.ConsoleStorage : object {
    private static int ValueFieldLimit;
    private JobStorageConnection _connection;
    public ConsoleStorage(IStorageConnection connection);
    public sealed virtual void Dispose();
    public sealed virtual void InitConsole(ConsoleId consoleId);
    public sealed virtual void AddLine(ConsoleId consoleId, ConsoleLine line);
    public sealed virtual TimeSpan GetConsoleTtl(ConsoleId consoleId);
    public sealed virtual void Expire(ConsoleId consoleId, TimeSpan expireIn);
    public sealed virtual int GetLineCount(ConsoleId consoleId);
    [IteratorStateMachineAttribute("Hangfire.Console.Storage.ConsoleStorage/<GetLines>d__9")]
public sealed virtual IEnumerable`1<ConsoleLine> GetLines(ConsoleId consoleId, int start, int end);
    public sealed virtual StateData GetState(ConsoleId consoleId);
    public sealed virtual Nullable`1<double> GetProgress(ConsoleId consoleId);
}
internal interface Hangfire.Console.Storage.IConsoleExpirationTransaction {
    public abstract virtual void Expire(ConsoleId consoleId, TimeSpan expireIn);
    public abstract virtual void Persist(ConsoleId consoleId);
}
internal interface Hangfire.Console.Storage.IConsoleStorage {
    public abstract virtual int GetLineCount(ConsoleId consoleId);
    public abstract virtual IEnumerable`1<ConsoleLine> GetLines(ConsoleId consoleId, int start, int end);
    public abstract virtual void InitConsole(ConsoleId consoleId);
    public abstract virtual void AddLine(ConsoleId consoleId, ConsoleLine line);
    public abstract virtual TimeSpan GetConsoleTtl(ConsoleId consoleId);
    public abstract virtual void Expire(ConsoleId consoleId, TimeSpan expireIn);
    public abstract virtual StateData GetState(ConsoleId consoleId);
    public abstract virtual Nullable`1<double> GetProgress(ConsoleId consoleId);
}
internal class Hangfire.Dashboard.Extensions.CompositeDispatcher : object {
    private List`1<IDashboardDispatcher> _dispatchers;
    public CompositeDispatcher(IDashboardDispatcher[] dispatchers);
    public void AddDispatcher(IDashboardDispatcher dispatcher);
    [AsyncStateMachineAttribute("Hangfire.Dashboard.Extensions.CompositeDispatcher/<Dispatch>d__3")]
public sealed virtual Task Dispatch(DashboardContext context);
}
internal class Hangfire.Dashboard.Extensions.EmbeddedResourceDispatcher : object {
    private Assembly _assembly;
    private string _resourceName;
    private string _contentType;
    public EmbeddedResourceDispatcher(Assembly assembly, string resourceName, string contentType);
    public sealed virtual Task Dispatch(DashboardContext context);
    [AsyncStateMachineAttribute("Hangfire.Dashboard.Extensions.EmbeddedResourceDispatcher/<WriteResourceAsync>d__5")]
private static Task WriteResourceAsync(DashboardResponse response, Assembly assembly, string resourceName);
}
[ExtensionAttribute]
internal static class Hangfire.Dashboard.Extensions.HtmlHelperExtensions : object {
    private static FieldInfo _page;
    private static HtmlHelperExtensions();
    [ExtensionAttribute]
public static RazorPage GetPage(HtmlHelper helper);
}
[ExtensionAttribute]
internal static class Hangfire.Dashboard.Extensions.RouteCollectionExtensions : object {
    private static FieldInfo _dispatchers;
    private static RouteCollectionExtensions();
    [ExtensionAttribute]
private static List`1<Tuple`2<string, IDashboardDispatcher>> GetDispatchers(RouteCollection routes);
    [ExtensionAttribute]
public static bool Contains(RouteCollection routes, string pathTemplate);
    [ExtensionAttribute]
public static void Append(RouteCollection routes, string pathTemplate, IDashboardDispatcher dispatcher);
    [ExtensionAttribute]
public static void Replace(RouteCollection routes, string pathTemplate, IDashboardDispatcher dispatcher);
    [ExtensionAttribute]
public static void Remove(RouteCollection routes, string pathTemplate);
}
