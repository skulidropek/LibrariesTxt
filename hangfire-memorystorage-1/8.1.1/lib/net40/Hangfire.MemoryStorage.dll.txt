public class Hangfire.MemoryStorage.CountersAggregator : object {
    private static int NumberOfRecordsInSinglePass;
    private static TimeSpan DelayBetweenPasses;
    private TimeSpan _aggregateInterval;
    private Data _data;
    public CountersAggregator(Data data, TimeSpan aggregateInterval);
    private static CountersAggregator();
    public sealed virtual void Execute(CancellationToken cancellationToken);
    public virtual string ToString();
}
public static class Hangfire.MemoryStorage.Database.AutoIncrementIdGenerator : object {
    private static Dictionary`2<Type, int> Identifiers;
    private static object LockObject;
    private static AutoIncrementIdGenerator();
    public static int GenerateId(Type type);
}
public class Hangfire.MemoryStorage.Database.Data : object {
    private ConcurrentDictionary`2<Type, ConcurrentDictionary`2<object, object>> Dictionary;
    public IEnumerable`1<T> GetEnumeration();
    public ICollection`1<object> GetEnumeration(Type type);
    public T GetOrCreate(K key, T element);
    public T Get(string key);
    public T Get(int key);
    internal void Create(IEnumerable`1<IIdentifiedData`1<K>> elements);
    public void Create(IIdentifiedData`1<K> element);
    public void Delete(IIdentifiedData`1<K> element);
    public void Delete(IEnumerable`1<IIdentifiedData`1<K>> elements);
    private ConcurrentDictionary`2<object, object> GetDictionary(Type type);
}
public class Hangfire.MemoryStorage.Dto.AggregatedCounterDto : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpireAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public string Key { get; public set; }
    public long Value { get; public set; }
    public Nullable`1<DateTime> ExpireAt { get; public set; }
    public int Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public long get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpireAt();
    [CompilerGeneratedAttribute]
public void set_ExpireAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
}
public class Hangfire.MemoryStorage.Dto.CounterDto : object {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpireAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public int Value { get; public set; }
    public Nullable`1<DateTime> ExpireAt { get; public set; }
    public int Id { get; public set; }
    public string Key { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpireAt();
    [CompilerGeneratedAttribute]
public void set_ExpireAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
}
public class Hangfire.MemoryStorage.Dto.HashDto : object {
    [CompilerGeneratedAttribute]
private string <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpireAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Field { get; public set; }
    public Nullable`1<DateTime> ExpireAt { get; public set; }
    public int Id { get; public set; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpireAt();
    [CompilerGeneratedAttribute]
public void set_ExpireAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public interface Hangfire.MemoryStorage.Dto.IExpirable {
    public Nullable`1<DateTime> ExpireAt { get; }
    public abstract virtual Nullable`1<DateTime> get_ExpireAt();
}
public interface Hangfire.MemoryStorage.Dto.IIdentifiedData`1 {
    public T Id { get; }
    public abstract virtual T get_Id();
}
public interface Hangfire.MemoryStorage.Dto.IKeyValued {
    public string Key { get; }
    public string Value { get; }
    public abstract virtual string get_Key();
    public abstract virtual string get_Value();
}
public class Hangfire.MemoryStorage.Dto.JobDto : object {
    [CompilerGeneratedAttribute]
private StateDto <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpireAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StateHistoryDto> <History>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JobParameterDto> <Parameters>k__BackingField;
    public StateDto State { get; public set; }
    public string StateName { get; }
    public string InvocationData { get; public set; }
    public string Arguments { get; public set; }
    public DateTime CreatedAt { get; public set; }
    public Nullable`1<DateTime> ExpireAt { get; public set; }
    public string Id { get; public set; }
    public IList`1<StateHistoryDto> History { get; public set; }
    public IList`1<JobParameterDto> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public StateDto get_State();
    [CompilerGeneratedAttribute]
public void set_State(StateDto value);
    public string get_StateName();
    [CompilerGeneratedAttribute]
public string get_InvocationData();
    [CompilerGeneratedAttribute]
public void set_InvocationData(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpireAt();
    [CompilerGeneratedAttribute]
public void set_ExpireAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public IList`1<StateHistoryDto> get_History();
    [CompilerGeneratedAttribute]
public void set_History(IList`1<StateHistoryDto> value);
    [CompilerGeneratedAttribute]
public IList`1<JobParameterDto> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IList`1<JobParameterDto> value);
}
public class Hangfire.MemoryStorage.Dto.JobParameterDto : object {
    [CompilerGeneratedAttribute]
private string <JobId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public string JobId { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public int Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_JobId();
    [CompilerGeneratedAttribute]
public void set_JobId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
}
public class Hangfire.MemoryStorage.Dto.JobQueueDto : object {
    [CompilerGeneratedAttribute]
private string <JobId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <AddedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FetchedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public string JobId { get; public set; }
    public string Queue { get; public set; }
    public DateTime AddedAt { get; public set; }
    public Nullable`1<DateTime> FetchedAt { get; public set; }
    public int Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_JobId();
    [CompilerGeneratedAttribute]
public void set_JobId(string value);
    [CompilerGeneratedAttribute]
public string get_Queue();
    [CompilerGeneratedAttribute]
public void set_Queue(string value);
    [CompilerGeneratedAttribute]
public DateTime get_AddedAt();
    [CompilerGeneratedAttribute]
public void set_AddedAt(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FetchedAt();
    [CompilerGeneratedAttribute]
public void set_FetchedAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
}
public class Hangfire.MemoryStorage.Dto.ListDto : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpireAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public Nullable`1<DateTime> ExpireAt { get; public set; }
    public int Id { get; public set; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpireAt();
    [CompilerGeneratedAttribute]
public void set_ExpireAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Hangfire.MemoryStorage.Dto.ServerDto : object {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastHeartbeat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Data { get; public set; }
    public DateTime LastHeartbeat { get; public set; }
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public DateTime get_LastHeartbeat();
    [CompilerGeneratedAttribute]
public void set_LastHeartbeat(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
}
public class Hangfire.MemoryStorage.Dto.SetDto : object {
    [CompilerGeneratedAttribute]
private long <Score>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpireAt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public long Score { get; public set; }
    public Nullable`1<DateTime> ExpireAt { get; public set; }
    public int Id { get; public set; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Score();
    [CompilerGeneratedAttribute]
public void set_Score(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ExpireAt();
    [CompilerGeneratedAttribute]
public void set_ExpireAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Hangfire.MemoryStorage.Dto.StateDto : object {
    [CompilerGeneratedAttribute]
private string <JobId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public string JobId { get; public set; }
    public string Name { get; public set; }
    public string Reason { get; public set; }
    public DateTime CreatedAt { get; public set; }
    public string Data { get; public set; }
    public int Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_JobId();
    [CompilerGeneratedAttribute]
public void set_JobId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
}
public class Hangfire.MemoryStorage.Entities.EnqueuedAndFetchedCountDto : object {
    [CompilerGeneratedAttribute]
private int <EnqueuedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FetchedCount>k__BackingField;
    public int EnqueuedCount { get; public set; }
    public int FetchedCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_EnqueuedCount();
    [CompilerGeneratedAttribute]
public void set_EnqueuedCount(int value);
    [CompilerGeneratedAttribute]
public int get_FetchedCount();
    [CompilerGeneratedAttribute]
public void set_FetchedCount(int value);
}
public class Hangfire.MemoryStorage.Entities.JsonJob : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExpireAt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FetchedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateData>k__BackingField;
    public string Id { get; public set; }
    public string InvocationData { get; public set; }
    public string Arguments { get; public set; }
    public DateTime CreatedAt { get; public set; }
    public Nullable`1<DateTime> ExpireAt { get; public set; }
    public Nullable`1<DateTime> FetchedAt { get; public set; }
    public string StateName { get; public set; }
    public string StateReason { get; public set; }
    public string StateData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_InvocationData();
    [CompilerGeneratedAttribute]
public void set_InvocationData(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ExpireAt();
    [CompilerGeneratedAttribute]
public void set_ExpireAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FetchedAt();
    [CompilerGeneratedAttribute]
public void set_FetchedAt(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_StateName();
    [CompilerGeneratedAttribute]
public void set_StateName(string value);
    [CompilerGeneratedAttribute]
public string get_StateReason();
    [CompilerGeneratedAttribute]
public void set_StateReason(string value);
    [CompilerGeneratedAttribute]
public string get_StateData();
    [CompilerGeneratedAttribute]
public void set_StateData(string value);
}
public class Hangfire.MemoryStorage.Entities.ServerData : object {
    [CompilerGeneratedAttribute]
private int <WorkerCount>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Queues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartedAt>k__BackingField;
    public int WorkerCount { get; public set; }
    public String[] Queues { get; public set; }
    public Nullable`1<DateTime> StartedAt { get; public set; }
    [CompilerGeneratedAttribute]
public int get_WorkerCount();
    [CompilerGeneratedAttribute]
public void set_WorkerCount(int value);
    [CompilerGeneratedAttribute]
public String[] get_Queues();
    [CompilerGeneratedAttribute]
public void set_Queues(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartedAt();
    [CompilerGeneratedAttribute]
public void set_StartedAt(Nullable`1<DateTime> value);
}
public class Hangfire.MemoryStorage.ExpirationManager : object {
    private static int NumberOfRecordsInSinglePass;
    private static TimeSpan DelayBetweenPasses;
    private Data _data;
    private static Type[] Types;
    private TimeSpan _checkInterval;
    public ExpirationManager(Data data, TimeSpan checkInterval);
    private static ExpirationManager();
    public sealed virtual void Execute(CancellationToken cancellationToken);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Hangfire.MemoryStorage.GlobalConfigurationExtensions : object {
    [ExtensionAttribute]
public static IGlobalConfiguration`1<MemoryStorage> UseMemoryStorage(IGlobalConfiguration configuration);
    [ExtensionAttribute]
public static IGlobalConfiguration`1<MemoryStorage> UseMemoryStorage(IGlobalConfiguration configuration, MemoryStorageOptions storageOptions);
    [ExtensionAttribute]
public static IGlobalConfiguration`1<MemoryStorage> UseMemoryStorage(IGlobalConfiguration configuration, MemoryStorageOptions storageOptions, Data data);
}
public class Hangfire.MemoryStorage.MemoryStorage : JobStorage {
    private MemoryStorageOptions _options;
    private object _connectionLock;
    private MemoryStorageConnection _connection;
    [CompilerGeneratedAttribute]
private Data <Data>k__BackingField;
    public Data Data { get; }
    public MemoryStorage(MemoryStorageOptions options);
    public MemoryStorage(MemoryStorageOptions options, Data data);
    [CompilerGeneratedAttribute]
public Data get_Data();
    public virtual IStorageConnection GetConnection();
    public virtual IMonitoringApi GetMonitoringApi();
    [IteratorStateMachineAttribute("Hangfire.MemoryStorage.MemoryStorage/<GetComponents>d__11")]
public virtual IEnumerable`1<IServerComponent> GetComponents();
}
public class Hangfire.MemoryStorage.MemoryStorageConnection : JobStorageConnection {
    private object FetchJobsLock;
    private TimeSpan _fetchNextJobTimeout;
    private Data _data;
    private ConcurrentDictionary`2<string, SemaphoreSlim> _locks;
    private AutoResetEvent _newItemInQueueEvent;
    public MemoryStorageConnection(Data data, TimeSpan fetchNextJobTimeout);
    public virtual IDisposable AcquireDistributedLock(string resource, TimeSpan timeout);
    public virtual void AnnounceServer(string serverId, ServerContext context);
    public virtual string CreateExpiredJob(Job job, IDictionary`2<string, string> parameters, DateTime createdAt, TimeSpan expireIn);
    public virtual IWriteOnlyTransaction CreateWriteTransaction();
    public virtual IFetchedJob FetchNextJob(String[] queues, CancellationToken cancellationToken);
    public virtual Dictionary`2<string, string> GetAllEntriesFromHash(string key);
    public virtual HashSet`1<string> GetAllItemsFromSet(string key);
    public virtual string GetFirstByLowestScoreFromSet(string key, double fromScore, double toScore);
    public virtual JobData GetJobData(string jobId);
    public virtual string GetJobParameter(string id, string name);
    public virtual long GetListCount(string key);
    public virtual long GetSetCount(string key);
    public virtual long GetHashCount(string key);
    public virtual StateData GetStateData(string jobId);
    public virtual string GetValueFromHash(string key, string name);
    public virtual List`1<string> GetAllItemsFromList(string key);
    public virtual long GetCounter(string key);
    public virtual TimeSpan GetHashTtl(string key);
    public virtual TimeSpan GetListTtl(string key);
    public virtual TimeSpan GetSetTtl(string key);
    public virtual List`1<string> GetRangeFromList(string key, int startingFrom, int endingAt);
    public virtual List`1<string> GetRangeFromSet(string key, int startingFrom, int endingAt);
    public virtual void Heartbeat(string serverId);
    public virtual void RemoveServer(string serverId);
    public virtual int RemoveTimedOutServers(TimeSpan timeOut);
    public virtual void SetJobParameter(string id, string name, string value);
    public virtual void SetRangeInHash(string key, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    private TimeSpan GetExpireAt(string key);
    private long GetCount(string key);
}
public class Hangfire.MemoryStorage.MemoryStorageFetchedJob : object {
    private bool _disposed;
    private bool _removedFromQueue;
    private bool _requeued;
    private Data _data;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobId>k__BackingField;
    public int Id { get; private set; }
    public string JobId { get; private set; }
    public MemoryStorageFetchedJob(Data data, JobQueueDto queue);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_JobId();
    [CompilerGeneratedAttribute]
private void set_JobId(string value);
    public sealed virtual void RemoveFromQueue();
    public sealed virtual void Requeue();
    public sealed virtual void Dispose();
}
public class Hangfire.MemoryStorage.MemoryStorageMonitoringApi : object {
    private Data _data;
    public MemoryStorageMonitoringApi(Data data);
    public sealed virtual JobList`1<DeletedJobDto> DeletedJobs(int from, int count);
    public sealed virtual long DeletedListCount();
    public sealed virtual long EnqueuedCount(string queue);
    public sealed virtual JobList`1<EnqueuedJobDto> EnqueuedJobs(string queue, int from, int perPage);
    public sealed virtual IDictionary`2<DateTime, long> FailedByDatesCount();
    public sealed virtual long FailedCount();
    public sealed virtual JobList`1<FailedJobDto> FailedJobs(int from, int count);
    public sealed virtual long FetchedCount(string queue);
    public sealed virtual JobList`1<FetchedJobDto> FetchedJobs(string queue, int from, int perPage);
    public sealed virtual StatisticsDto GetStatistics();
    public sealed virtual IDictionary`2<DateTime, long> HourlyFailedJobs();
    public sealed virtual IDictionary`2<DateTime, long> HourlySucceededJobs();
    public sealed virtual JobDetailsDto JobDetails(string jobId);
    public sealed virtual long ProcessingCount();
    public sealed virtual JobList`1<ProcessingJobDto> ProcessingJobs(int from, int count);
    public sealed virtual IList`1<QueueWithTopEnqueuedJobsDto> Queues();
    public sealed virtual long ScheduledCount();
    public sealed virtual JobList`1<ScheduledJobDto> ScheduledJobs(int from, int count);
    public sealed virtual IList`1<ServerDto> Servers();
    public sealed virtual IDictionary`2<DateTime, long> SucceededByDatesCount();
    public sealed virtual JobList`1<SucceededJobDto> SucceededJobs(int from, int count);
    public sealed virtual long SucceededListCount();
    private Dictionary`2<DateTime, long> GetHourlyTimelineStats(string type);
    public Dictionary`2<DateTime, long> GetTimelineStats(string type);
    private Dictionary`2<DateTime, long> GetTimelineStats(List`1<DateTime> dates, Func`2<DateTime, string> formatorAction);
    private JobList`1<FetchedJobDto> FetchedJobs(IEnumerable`1<string> jobIds);
    private JobList`1<EnqueuedJobDto> EnqueuedJobs(IEnumerable`1<string> jobIds);
    private JobList`1<TDto> GetJobs(int from, int count, string stateName, Func`4<JsonJob, Job, Dictionary`2<string, string>, TDto> selector);
    private static Job DeserializeJob(string invocationData, string arguments);
    private JobList`1<TDto> DeserializeJobs(IEnumerable`1<JsonJob> jobs, Func`4<JsonJob, Job, Dictionary`2<string, string>, TDto> selector);
    private long GetNumberOfJobsByStateName(string stateName);
}
public class Hangfire.MemoryStorage.MemoryStorageOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <JobExpirationCheckInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CountersAggregateInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FetchNextJobTimeout>k__BackingField;
    public TimeSpan JobExpirationCheckInterval { get; public set; }
    public TimeSpan CountersAggregateInterval { get; public set; }
    public TimeSpan FetchNextJobTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_JobExpirationCheckInterval();
    [CompilerGeneratedAttribute]
public void set_JobExpirationCheckInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CountersAggregateInterval();
    [CompilerGeneratedAttribute]
public void set_CountersAggregateInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_FetchNextJobTimeout();
    [CompilerGeneratedAttribute]
public void set_FetchNextJobTimeout(TimeSpan value);
}
public class Hangfire.MemoryStorage.MemoryStorageWriteOnlyTransaction : JobStorageTransaction {
    private IList`1<Action> commandsList;
    private AutoResetEvent CommitTriggerEvent;
    private Data _data;
    public MemoryStorageWriteOnlyTransaction(Data data, AutoResetEvent commitTriggerEvent);
    public virtual void AddJobState(string jobId, IState state);
    public virtual void AddToQueue(string queue, string jobId);
    public virtual void AddToSet(string key, string value);
    public virtual void AddToSet(string key, string value, double score);
    public virtual void Commit();
    public virtual void ExpireJob(string jobId, TimeSpan expireIn);
    public virtual void ExpireSet(string key, TimeSpan expireIn);
    public virtual void ExpireHash(string key, TimeSpan expireIn);
    public virtual void ExpireList(string key, TimeSpan expireIn);
    public virtual void IncrementCounter(string key);
    public virtual void IncrementCounter(string key, TimeSpan expireIn);
    public virtual void DecrementCounter(string key);
    public virtual void DecrementCounter(string key, TimeSpan expireIn);
    public virtual void InsertToList(string key, string value);
    public virtual void PersistJob(string jobId);
    public virtual void RemoveFromList(string key, string value);
    public virtual void RemoveFromSet(string key, string value);
    public virtual void RemoveHash(string key);
    public virtual void RemoveSet(string key);
    public virtual void SetJobState(string jobId, IState state);
    public virtual void SetRangeInHash(string key, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    public virtual void Dispose();
    public virtual void TrimList(string key, int keepStartingFrom, int keepEndingAt);
    private void QueueCommand(Action command);
    public virtual void PersistSet(string key);
    public virtual void PersistHash(string key);
    public virtual void PersistList(string key);
    public virtual void AddRangeToSet(string key, IList`1<string> items);
}
[ExtensionAttribute]
public static class Hangfire.MemoryStorage.Utilities.ConcurrentDictionaryExtensions : object {
    [ExtensionAttribute]
public static bool Remove(ConcurrentDictionary`2<TKey, TValue> self, TKey key);
}
public static class Hangfire.MemoryStorage.Utilities.CounterUtilities : object {
    public static long GetCombinedCounter(Data data, string key);
    public static CounterDto IncrementCounter(Data data, string key, bool decrement);
    public static void ArgumentNotNull(object argument, string name);
    public static void ArgumentCondition(bool condition, string name, string message);
}
public class Hangfire.MemoryStorage.Utilities.Disposable : object {
    [CompilerGeneratedAttribute]
private Action <OnDispose>k__BackingField;
    private Action OnDispose { get; private set; }
    public static IDisposable Create(Action onDispose);
    [CompilerGeneratedAttribute]
private Action get_OnDispose();
    [CompilerGeneratedAttribute]
private void set_OnDispose(Action value);
    public sealed virtual void Dispose();
}
public static class Hangfire.MemoryStorage.Utilities.Guard : object {
    public static void ArgumentNotNull(object argument, string name);
    public static void ArgumentCondition(bool condition, string name, string message);
}
public static class Hangfire.MemoryStorage.Utilities.QueueApi : object {
    public static IEnumerable`1<string> GetEnqueuedJobIds(Data data, string queue, int from, int perPage, bool fetched);
    public static EnqueuedAndFetchedCountDto GetEnqueuedAndFetchedCount(IEnumerable`1<JobQueueDto> allQueues, string queue);
}
[DefaultMemberAttribute("Item")]
public class Hangfire.MemoryStorage.Utilities.StateHistoryList : object {
    private IList`1<StateHistoryDto> _list;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public StateHistoryDto Item { get; public set; }
    public sealed virtual IEnumerator`1<StateHistoryDto> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(StateHistoryDto item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(StateHistoryDto item);
    public sealed virtual void CopyTo(StateHistoryDto[] array, int arrayIndex);
    public sealed virtual bool Remove(StateHistoryDto item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(StateHistoryDto item);
    public sealed virtual void Insert(int index, StateHistoryDto item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual StateHistoryDto get_Item(int index);
    public sealed virtual void set_Item(int index, StateHistoryDto value);
}
