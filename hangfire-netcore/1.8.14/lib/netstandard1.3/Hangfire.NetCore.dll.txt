public class Hangfire.AspNetCore.AspNetCoreJobActivator : JobActivator {
    private IServiceScopeFactory _serviceScopeFactory;
    public AspNetCoreJobActivator(IServiceScopeFactory serviceScopeFactory);
    public virtual JobActivatorScope BeginScope(JobActivatorContext context);
    public virtual JobActivatorScope BeginScope();
}
internal class Hangfire.AspNetCore.AspNetCoreJobActivatorScope : JobActivatorScope {
    private IServiceScope _serviceScope;
    public AspNetCoreJobActivatorScope(IServiceScope serviceScope);
    public virtual object Resolve(Type type);
    public virtual void DisposeScope();
}
internal class Hangfire.AspNetCore.AspNetCoreLog : object {
    private static Func`3<object, Exception, string> MessageFormatterFunc;
    private ILogger _targetLogger;
    public AspNetCoreLog(ILogger targetLogger);
    private static AspNetCoreLog();
    public sealed virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception);
    private static LogLevel ToTargetLogLevel(LogLevel logLevel);
    private static string MessageFormatter(object state, Exception exception);
}
public class Hangfire.AspNetCore.AspNetCoreLogProvider : object {
    private ILoggerFactory _loggerFactory;
    public AspNetCoreLogProvider(ILoggerFactory loggerFactory);
    public sealed virtual ILog GetLogger(string name);
}
internal class Hangfire.DefaultClientManagerFactory : object {
    private IServiceProvider _serviceProvider;
    public DefaultClientManagerFactory(IServiceProvider serviceProvider);
    public sealed virtual IBackgroundJobClientV2 GetClientV2(JobStorage storage);
    public sealed virtual IBackgroundJobClient GetClient(JobStorage storage);
    public sealed virtual IRecurringJobManagerV2 GetManagerV2(JobStorage storage);
    public sealed virtual IRecurringJobManager GetManager(JobStorage storage);
}
[ExtensionAttribute]
public static class Hangfire.HangfireServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHangfire(IServiceCollection services, Action`1<IGlobalConfiguration> configuration);
    [ExtensionAttribute]
public static IServiceCollection AddHangfire(IServiceCollection services, Action`2<IServiceProvider, IGlobalConfiguration> configuration);
    public static bool GetInternalServices(IServiceProvider provider, IBackgroundJobFactory& factory, IBackgroundJobStateChanger& stateChanger, IBackgroundJobPerformer& performer);
    [ExtensionAttribute]
private static void TryAddSingletonChecked(IServiceCollection serviceCollection, Func`2<IServiceProvider, T> implementationFactory);
    public static void ThrowIfNotConfigured(IServiceProvider serviceProvider);
}
public interface Hangfire.IBackgroundJobClientFactory {
    public abstract virtual IBackgroundJobClient GetClient(JobStorage storage);
}
public interface Hangfire.IBackgroundJobClientFactoryV2 {
    public abstract virtual IBackgroundJobClientV2 GetClientV2(JobStorage storage);
}
public interface Hangfire.IRecurringJobManagerFactory {
    public abstract virtual IRecurringJobManager GetManager(JobStorage storage);
}
public interface Hangfire.IRecurringJobManagerFactoryV2 {
    public abstract virtual IRecurringJobManagerV2 GetManagerV2(JobStorage storage);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
