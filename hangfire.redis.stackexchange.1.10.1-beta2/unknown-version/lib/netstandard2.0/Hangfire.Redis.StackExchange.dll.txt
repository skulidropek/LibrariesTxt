internal class Hangfire.Redis.StackExchange.DeletedStateHandler : object {
    public string StateName { get; }
    public sealed virtual void Apply(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual void Unapply(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual string get_StateName();
}
internal class Hangfire.Redis.StackExchange.ExpiredJobsWatcher : object {
    private static ILog Logger;
    private RedisStorage _storage;
    private TimeSpan _checkInterval;
    private static String[] ProcessedKeys;
    public ExpiredJobsWatcher(RedisStorage storage, TimeSpan checkInterval);
    private static ExpiredJobsWatcher();
    public virtual string ToString();
    private sealed virtual override void Hangfire.Server.IServerComponent.Execute(CancellationToken cancellationToken);
}
internal class Hangfire.Redis.StackExchange.FailedStateHandler : object {
    public string StateName { get; }
    public sealed virtual void Apply(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual void Unapply(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual string get_StateName();
}
internal class Hangfire.Redis.StackExchange.FetchedJobsWatcher : object {
    private TimeSpan _invisibilityTimeout;
    private static ILog Logger;
    private RedisStorage _storage;
    private FetchedJobsWatcherOptions _options;
    public FetchedJobsWatcher(RedisStorage storage, TimeSpan invisibilityTimeout);
    public FetchedJobsWatcher(RedisStorage storage, TimeSpan invisibilityTimeout, FetchedJobsWatcherOptions options);
    private static FetchedJobsWatcher();
    public sealed virtual void Execute(CancellationToken cancellationToken);
    private void ProcessQueue(string queue, RedisConnection connection);
    private bool RequeueJobIfTimedOutOrAborted(RedisConnection connection, string jobId, string queue);
    private bool TimedOutByFetchedTime(string fetchedTimestamp);
    private bool TimedOutByCheckedTime(string fetchedTimestamp, string checkedTimestamp);
    private bool BeingProcessedByADeadServer(RedisConnection connection, string jobId);
}
internal class Hangfire.Redis.StackExchange.FetchedJobsWatcherOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <FetchedLockTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CheckedTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SleepTimeout>k__BackingField;
    public TimeSpan FetchedLockTimeout { get; public set; }
    public TimeSpan CheckedTimeout { get; public set; }
    public TimeSpan SleepTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_FetchedLockTimeout();
    [CompilerGeneratedAttribute]
public void set_FetchedLockTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CheckedTimeout();
    [CompilerGeneratedAttribute]
public void set_CheckedTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SleepTimeout();
    [CompilerGeneratedAttribute]
public void set_SleepTimeout(TimeSpan value);
}
public class Hangfire.Redis.StackExchange.HangFireRedisException : Exception {
    public HangFireRedisException(string message);
}
public class Hangfire.Redis.StackExchange.HangfireRedisTransactionException : Exception {
    public HangfireRedisTransactionException(string message);
}
internal class Hangfire.Redis.StackExchange.HangfireSubscriber : object {
    private static AsyncLocal`1<PerformingContext> localStorage;
    public static PerformingContext Value { get; }
    private static HangfireSubscriber();
    public static PerformingContext get_Value();
    public sealed virtual void OnPerforming(PerformingContext filterContext);
    public sealed virtual void OnPerformed(PerformedContext filterContext);
}
internal class Hangfire.Redis.StackExchange.ProcessingStateHandler : object {
    public string StateName { get; }
    public sealed virtual void Apply(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual void Unapply(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual string get_StateName();
}
internal class Hangfire.Redis.StackExchange.RedisConnection : JobStorageConnection {
    private RedisStorage _storage;
    private RedisSubscription _subscription;
    private TimeSpan _fetchTimeout;
    private IServer redisServer;
    [CompilerGeneratedAttribute]
private IDatabase <Redis>k__BackingField;
    public IDatabase Redis { get; }
    public RedisConnection(RedisStorage storage, IServer redisServer, IDatabase redis, RedisSubscription subscription, TimeSpan fetchTimeout);
    [CompilerGeneratedAttribute]
public IDatabase get_Redis();
    public virtual IDisposable AcquireDistributedLock(string resource, TimeSpan timeout);
    public virtual void AnnounceServer(string serverId, ServerContext context);
    public virtual DateTime GetUtcDateTime();
    public virtual long GetSetCount(IEnumerable`1<string> keys, int limit);
    public virtual bool GetSetContains(string key, string value);
    public virtual string CreateExpiredJob(Job job, IDictionary`2<string, string> parameters, DateTime createdAt, TimeSpan expireIn);
    public virtual IWriteOnlyTransaction CreateWriteTransaction();
    public virtual void Dispose();
    public virtual IFetchedJob FetchNextJob(String[] queues, CancellationToken cancellationToken);
    public virtual Dictionary`2<string, string> GetAllEntriesFromHash(string key);
    public virtual List`1<string> GetAllItemsFromList(string key);
    public virtual HashSet`1<string> GetAllItemsFromSet(string key);
    public virtual long GetCounter(string key);
    public virtual string GetFirstByLowestScoreFromSet(string key, double fromScore, double toScore);
    public virtual List`1<string> GetFirstByLowestScoreFromSet(string key, double fromScore, double toScore, int count);
    public virtual long GetHashCount(string key);
    public virtual TimeSpan GetHashTtl(string key);
    public virtual JobData GetJobData(string jobId);
    public virtual string GetJobParameter(string jobId, string name);
    public virtual long GetListCount(string key);
    public virtual TimeSpan GetListTtl(string key);
    public virtual List`1<string> GetRangeFromList(string key, int startingFrom, int endingAt);
    public virtual List`1<string> GetRangeFromSet(string key, int startingFrom, int endingAt);
    public virtual long GetSetCount(string key);
    public virtual TimeSpan GetSetTtl(string key);
    public virtual StateData GetStateData(string jobId);
    public virtual string GetValueFromHash(string key, string name);
    public virtual void Heartbeat(string serverId);
    public virtual void RemoveServer(string serverId);
    public virtual int RemoveTimedOutServers(TimeSpan timeOut);
    public virtual void SetJobParameter(string jobId, string name, string value);
    public virtual void SetRangeInHash(string key, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
}
[ExtensionAttribute]
public static class Hangfire.Redis.StackExchange.RedisDatabaseExtensions : object {
    [ExtensionAttribute]
public static HashEntry[] ToHashEntries(IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    [ExtensionAttribute]
public static RedisValue[] ToRedisValues(IEnumerable`1<string> values);
    [ExtensionAttribute]
public static Dictionary`2<string, string> GetValuesMap(IDatabase redis, String[] keys);
}
internal class Hangfire.Redis.StackExchange.RedisFetchedJob : object {
    private RedisStorage _storage;
    private IDatabase _redis;
    private bool _disposed;
    private bool _removedFromQueue;
    private bool _requeued;
    [CompilerGeneratedAttribute]
private string <JobId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FetchedAt>k__BackingField;
    public string JobId { get; }
    public string Queue { get; }
    public Nullable`1<DateTime> FetchedAt { get; }
    public RedisFetchedJob(RedisStorage storage, IDatabase redis, string jobId, string queue, Nullable`1<DateTime> fetchedAt);
    [CompilerGeneratedAttribute]
public sealed virtual string get_JobId();
    [CompilerGeneratedAttribute]
public string get_Queue();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FetchedAt();
    private Nullable`1<DateTime> GetFetchedValue();
    public sealed virtual void RemoveFromQueue();
    public sealed virtual void Requeue();
    public sealed virtual void Dispose();
    private void RemoveFromFetchedListAsync(IDatabaseAsync databaseAsync);
    private void RemoveFromFetchedList(IDatabase database);
}
public class Hangfire.Redis.StackExchange.RedisInfoKeys : object {
    public static string redis_version;
    public static string redis_git_sha1;
    public static string redis_git_dirty;
    public static string redis_build_id;
    public static string redis_mode;
    public static string os;
    public static string arch_bits;
    public static string multiplexing_api;
    public static string process_id;
    public static string run_id;
    public static string tcp_port;
    public static string uptime_in_seconds;
    public static string uptime_in_days;
    public static string hz;
    public static string lru_clock;
    public static string config_file;
    public static string connected_clients;
    public static string client_longest_output_list;
    public static string client_biggest_input_buf;
    public static string blocked_clients;
    public static string used_memory;
    public static string used_memory_human;
    public static string used_memory_rss;
    public static string used_memory_peak;
    public static string used_memory_peak_human;
    public static string used_memory_lua;
    public static string mem_fragmentation_ratio;
    public static string mem_allocator;
    public static string loading;
    public static string rdb_changes_since_last_save;
    public static string rdb_bgsave_in_progress;
    public static string rdb_last_save_time;
    public static string rdb_last_bgsave_status;
    public static string rdb_last_bgsave_time_sec;
    public static string rdb_current_bgsave_time_sec;
    public static string aof_enabled;
    public static string aof_rewrite_in_progress;
    public static string aof_rewrite_scheduled;
    public static string aof_last_rewrite_time_sec;
    public static string aof_current_rewrite_time_sec;
    public static string aof_last_bgrewrite_status;
    public static string aof_last_write_status;
    public static string total_connections_received;
    public static string total_commands_processed;
    public static string instantaneous_ops_per_sec;
    public static string total_net_input_bytes;
    public static string total_net_output_bytes;
    public static string instantaneous_input_kbps;
    public static string instantaneous_output_kbps;
    public static string rejected_connections;
    public static string sync_full;
    public static string sync_partial_ok;
    public static string sync_partial_err;
    public static string expired_keys;
    public static string evicted_keys;
    public static string keyspace_hits;
    public static string keyspace_misses;
    public static string pubsub_channels;
    public static string pubsub_patterns;
    public static string latest_fork_usec;
    public static string migrate_cached_sockets;
    public static string role;
    public static string connected_slaves;
    public static string master_repl_offset;
    public static string repl_backlog_active;
    public static string repl_backlog_size;
    public static string repl_backlog_first_byte_offset;
    public static string repl_backlog_histlen;
    public static string used_cpu_sys;
    public static string used_cpu_user;
    public static string used_cpu_sys_children;
    public static string used_cpu_user_children;
    public static string cluster_enabled;
    public static string db0;
    private static RedisInfoKeys();
}
internal class Hangfire.Redis.StackExchange.RedisLock : object {
    private static TimeSpan DefaultHoldDuration;
    private static string OwnerId;
    private static ThreadLocal`1<ConcurrentDictionary`2<RedisKey, byte>> _heldLocks;
    private IDatabase _redis;
    private RedisKey _key;
    private bool _holdsLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    private Timer _slidingExpirationTimer;
    private static ConcurrentDictionary`2<RedisKey, byte> HeldLocks { get; }
    private RedisLock(IDatabase redis, RedisKey key, bool holdsLock, TimeSpan holdDuration);
    private static RedisLock();
    private static ConcurrentDictionary`2<RedisKey, byte> get_HeldLocks();
    private void ExpirationTimerTick(object state);
    public sealed virtual void Dispose();
    public static IDisposable Acquire(IDatabase redis, RedisKey key, TimeSpan timeOut);
    internal static IDisposable Acquire(IDatabase redis, RedisKey key, TimeSpan timeOut, TimeSpan holdDuration);
    private static void SleepBackOffMultiplier(int i, int maxWait);
}
public class Hangfire.Redis.StackExchange.RedisMonitoringApi : JobStorageMonitor {
    private RedisStorage _storage;
    private IDatabase _database;
    public RedisMonitoringApi(RedisStorage storage, IDatabase database);
    public virtual long ScheduledCount();
    public virtual IDictionary`2<DateTime, long> DeletedByDatesCount();
    public virtual IDictionary`2<DateTime, long> HourlyDeletedJobs();
    public virtual long EnqueuedCount(string queue);
    public virtual long FetchedCount(string queue);
    public virtual long ProcessingCount();
    public virtual long SucceededListCount();
    public virtual long FailedCount();
    public virtual long DeletedListCount();
    public IDatabase GetDataBase();
    public virtual JobList`1<ProcessingJobDto> ProcessingJobs(int from, int count);
    public virtual JobList`1<ScheduledJobDto> ScheduledJobs(int from, int count);
    public virtual IDictionary`2<DateTime, long> SucceededByDatesCount();
    public virtual IDictionary`2<DateTime, long> FailedByDatesCount();
    public virtual IList`1<ServerDto> Servers();
    public virtual JobList`1<FailedJobDto> FailedJobs(int from, int count);
    public virtual JobList`1<SucceededJobDto> SucceededJobs(int from, int count);
    public virtual JobList`1<DeletedJobDto> DeletedJobs(int from, int count);
    public virtual IList`1<QueueWithTopEnqueuedJobsDto> Queues();
    public virtual JobList`1<EnqueuedJobDto> EnqueuedJobs(string queue, int from, int count);
    public virtual JobList`1<FetchedJobDto> FetchedJobs(string queue, int from, int count);
    public virtual JobList`1<AwaitingJobDto> AwaitingJobs(int from, int count);
    public virtual IDictionary`2<DateTime, long> HourlySucceededJobs();
    public virtual IDictionary`2<DateTime, long> HourlyFailedJobs();
    public virtual JobDetailsDto JobDetails(string jobId);
    private Dictionary`2<DateTime, long> GetHourlyTimelineStats(IDatabase redis, string type);
    private Dictionary`2<DateTime, long> GetTimelineStats(IDatabase redis, string type);
    private JobList`1<T> GetJobsWithProperties(IDatabase redis, String[] jobIds, String[] properties, String[] stateProperties, bool loadHistory, Func`6<Job, IReadOnlyList`1<string>, IReadOnlyList`1<string>, Dictionary`2<string, string>, Exception, T> selector);
    public virtual StatisticsDto GetStatistics();
    private T UseConnection(Func`2<IDatabase, T> action);
    private static Job TryToGetJob(string type, string method, string parameterTypes, string arguments, Exception& loadException);
    public virtual long AwaitingCount();
    [CompilerGeneratedAttribute]
private long <ScheduledCount>b__3_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private Dictionary`2<DateTime, long> <DeletedByDatesCount>b__4_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private Dictionary`2<DateTime, long> <HourlyDeletedJobs>b__5_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private long <ProcessingCount>b__8_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private long <SucceededListCount>b__9_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private long <FailedCount>b__10_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private long <DeletedListCount>b__11_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private Dictionary`2<DateTime, long> <SucceededByDatesCount>b__15_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private Dictionary`2<DateTime, long> <FailedByDatesCount>b__16_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private List`1<ServerDto> <Servers>b__17_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private List`1<QueueWithTopEnqueuedJobsDto> <Queues>b__21_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private Dictionary`2<DateTime, long> <HourlySucceededJobs>b__25_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private Dictionary`2<DateTime, long> <HourlyFailedJobs>b__26_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private StatisticsDto <GetStatistics>b__31_0(IDatabase redis);
    [CompilerGeneratedAttribute]
private long <AwaitingCount>b__34_0(IDatabase redis);
}
public class Hangfire.Redis.StackExchange.RedisStorage : JobStorage {
    private RedisStorageOptions _options;
    private IConnectionMultiplexer _connectionMultiplexer;
    private RedisSubscription _subscription;
    private ConfigurationOptions _redisOptions;
    private Dictionary`2<string, bool> _features;
    public string ConnectionString { get; }
    public int Db { get; }
    internal int SucceededListSize { get; }
    internal int DeletedListSize { get; }
    internal RedisChannel SubscriptionChannel { get; }
    internal String[] LifoQueues { get; }
    internal bool UseTransactions { get; }
    public RedisStorage(IConnectionMultiplexer connectionMultiplexer, RedisStorageOptions options);
    public RedisStorage(string connectionString, RedisStorageOptions options);
    private RedisStorage(string connectionString, IConnectionMultiplexer connectionMultiplexer, RedisStorageOptions options);
    private void SetTransactionalFeatures();
    public string get_ConnectionString();
    public int get_Db();
    internal int get_SucceededListSize();
    internal int get_DeletedListSize();
    internal RedisChannel get_SubscriptionChannel();
    internal String[] get_LifoQueues();
    internal bool get_UseTransactions();
    public virtual IMonitoringApi GetMonitoringApi();
    public virtual bool HasFeature(string featureId);
    public virtual IStorageConnection GetConnection();
    [IteratorStateMachineAttribute("Hangfire.Redis.StackExchange.RedisStorage/<GetComponents>d__27")]
public virtual IEnumerable`1<IServerComponent> GetComponents();
    public static DashboardMetric GetDashboardMetricFromRedisInfo(string title, string key);
    [IteratorStateMachineAttribute("Hangfire.Redis.StackExchange.RedisStorage/<GetStateHandlers>d__29")]
public virtual IEnumerable`1<IStateHandler> GetStateHandlers();
    public virtual void WriteOptionsToLog(ILog logger);
    public virtual string ToString();
    internal string GetRedisKey(string key);
    [CompilerGeneratedAttribute]
private IServer <GetConnection>b__26_0(EndPoint endPoint);
}
[ExtensionAttribute]
public static class Hangfire.Redis.StackExchange.RedisStorageExtensions : object {
    [ExtensionAttribute]
public static IGlobalConfiguration`1<RedisStorage> UseRedisStorage(IGlobalConfiguration configuration);
    [ExtensionAttribute]
public static IGlobalConfiguration`1<RedisStorage> UseRedisStorage(IGlobalConfiguration configuration, IConnectionMultiplexer connectionMultiplexer, RedisStorageOptions options);
    [ExtensionAttribute]
public static IGlobalConfiguration`1<RedisStorage> UseRedisStorage(IGlobalConfiguration configuration, string nameOrConnectionString, RedisStorageOptions options);
}
public class Hangfire.Redis.StackExchange.RedisStorageOptions : object {
    public static string DefaultPrefix;
    [CompilerGeneratedAttribute]
private TimeSpan <InvisibilityTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FetchTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpiryCheckInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SucceededListSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeletedListSize>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LifoQueues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTransactions>k__BackingField;
    public TimeSpan InvisibilityTimeout { get; public set; }
    public TimeSpan FetchTimeout { get; public set; }
    public TimeSpan ExpiryCheckInterval { get; public set; }
    public string Prefix { get; public set; }
    public int Db { get; public set; }
    public int SucceededListSize { get; public set; }
    public int DeletedListSize { get; public set; }
    public String[] LifoQueues { get; public set; }
    public bool UseTransactions { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_InvisibilityTimeout();
    [CompilerGeneratedAttribute]
public void set_InvisibilityTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_FetchTimeout();
    [CompilerGeneratedAttribute]
public void set_FetchTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpiryCheckInterval();
    [CompilerGeneratedAttribute]
public void set_ExpiryCheckInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public int get_Db();
    [CompilerGeneratedAttribute]
public void set_Db(int value);
    [CompilerGeneratedAttribute]
public int get_SucceededListSize();
    [CompilerGeneratedAttribute]
public void set_SucceededListSize(int value);
    [CompilerGeneratedAttribute]
public int get_DeletedListSize();
    [CompilerGeneratedAttribute]
public void set_DeletedListSize(int value);
    [CompilerGeneratedAttribute]
public String[] get_LifoQueues();
    [CompilerGeneratedAttribute]
public void set_LifoQueues(String[] value);
    [CompilerGeneratedAttribute]
public bool get_UseTransactions();
    [CompilerGeneratedAttribute]
public void set_UseTransactions(bool value);
}
internal class Hangfire.Redis.StackExchange.RedisSubscription : object {
    private ManualResetEvent _mre;
    private RedisStorage _storage;
    private ISubscriber _subscriber;
    [CompilerGeneratedAttribute]
private RedisChannel <Channel>k__BackingField;
    public RedisChannel Channel { get; }
    public RedisSubscription(RedisStorage storage, ISubscriber subscriber);
    [CompilerGeneratedAttribute]
public RedisChannel get_Channel();
    public void WaitForJob(TimeSpan timeout, CancellationToken cancellationToken);
    private sealed virtual override void Hangfire.Server.IServerComponent.Execute(CancellationToken cancellationToken);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private void <Hangfire.Server.IServerComponent.Execute>b__8_0(RedisChannel channel, RedisValue value);
}
internal class Hangfire.Redis.StackExchange.RedisWriteDirectlyToDatabase : JobStorageTransaction {
    private RedisStorage _storage;
    private IDatabase _database;
    public RedisWriteDirectlyToDatabase(RedisStorage storage, IDatabase database);
    public virtual void AddRangeToSet(string key, IList`1<string> items);
    public virtual void ExpireHash(string key, TimeSpan expireIn);
    public virtual void ExpireList(string key, TimeSpan expireIn);
    public virtual void ExpireSet(string key, TimeSpan expireIn);
    public virtual void PersistHash(string key);
    public virtual void PersistList(string key);
    public virtual void PersistSet(string key);
    public virtual void RemoveSet(string key);
    public virtual void Commit();
    public virtual void ExpireJob(string jobId, TimeSpan expireIn);
    public virtual void PersistJob(string jobId);
    public virtual void SetJobState(string jobId, IState state);
    public virtual void AddJobState(string jobId, IState state);
    public virtual void AddToQueue(string queue, string jobId);
    public virtual void IncrementCounter(string key);
    public virtual void IncrementCounter(string key, TimeSpan expireIn);
    public virtual void DecrementCounter(string key);
    public virtual void DecrementCounter(string key, TimeSpan expireIn);
    public virtual void AddToSet(string key, string value);
    public virtual void AddToSet(string key, string value, double score);
    public virtual void RemoveFromSet(string key, string value);
    public virtual void InsertToList(string key, string value);
    public virtual void RemoveFromList(string key, string value);
    public virtual void TrimList(string key, int keepStartingFrom, int keepEndingAt);
    public virtual void SetRangeInHash(string key, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    public virtual void RemoveHash(string key);
    public virtual void Dispose();
}
internal class Hangfire.Redis.StackExchange.RedisWriteOnlyTransaction : JobStorageTransaction {
    private RedisStorage _storage;
    private ITransaction _transaction;
    private List`1<IDisposable> _lockToDispose;
    public RedisWriteOnlyTransaction(RedisStorage storage, ITransaction transaction);
    public virtual void AddRangeToSet(string key, IList`1<string> items);
    public virtual void AcquireDistributedLock(string resource, TimeSpan timeout);
    public virtual void ExpireHash(string key, TimeSpan expireIn);
    public virtual void ExpireList(string key, TimeSpan expireIn);
    public virtual void ExpireSet(string key, TimeSpan expireIn);
    public virtual void PersistHash(string key);
    public virtual void PersistList(string key);
    public virtual void PersistSet(string key);
    public virtual void RemoveSet(string key);
    public virtual void Commit();
    public virtual void ExpireJob(string jobId, TimeSpan expireIn);
    public virtual void PersistJob(string jobId);
    public virtual void SetJobState(string jobId, IState state);
    public virtual void AddJobState(string jobId, IState state);
    public virtual void AddToQueue(string queue, string jobId);
    public virtual void IncrementCounter(string key);
    public virtual void IncrementCounter(string key, TimeSpan expireIn);
    public virtual void DecrementCounter(string key);
    public virtual void DecrementCounter(string key, TimeSpan expireIn);
    public virtual void AddToSet(string key, string value);
    public virtual void AddToSet(string key, string value, double score);
    public virtual string CreateJob(Job job, IDictionary`2<string, string> parameters, DateTime createdAt, TimeSpan expireIn);
    public virtual void RemoveFromSet(string key, string value);
    public virtual void InsertToList(string key, string value);
    public virtual void RemoveFromList(string key, string value);
    public virtual void TrimList(string key, int keepStartingFrom, int keepEndingAt);
    public virtual void SetRangeInHash(string key, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    public virtual void SetJobParameter(string jobId, string name, string value);
    public virtual void RemoveHash(string key);
    public virtual void RemoveFromQueue(IFetchedJob fetchedJob);
    public virtual void Dispose();
}
internal class Hangfire.Redis.StackExchange.SucceededStateHandler : object {
    public string StateName { get; }
    public sealed virtual void Apply(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual void Unapply(ApplyStateContext context, IWriteOnlyTransaction transaction);
    public sealed virtual string get_StateName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
