public enum Hardcodet.Wpf.TaskbarNotification.BalloonIcon : Enum {
    public int value__;
    public static BalloonIcon None;
    public static BalloonIcon Info;
    public static BalloonIcon Warning;
    public static BalloonIcon Error;
}
public class Hardcodet.Wpf.TaskbarNotification.Interop.AppBarInfo : object {
    private static int ABM_GETTASKBARPOS;
    private APPBARDATA m_data;
    public ScreenEdge Edge { get; }
    public Rectangle WorkArea { get; }
    private static IntPtr FindWindow(string lpClassName, string lpWindowName);
    private static UInt32 SHAppBarMessage(UInt32 dwMessage, APPBARDATA& data);
    private static int SystemParametersInfo(UInt32 uiAction, UInt32 uiParam, IntPtr pvParam, UInt32 fWinIni);
    public ScreenEdge get_Edge();
    public Rectangle get_WorkArea();
    private Rectangle GetRectangle(RECT rc);
    private void GetPosition(string strClassName, string strWindowName);
    public void GetSystemTaskBarPosition();
}
public enum Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags : Enum {
    public int value__;
    public static BalloonFlags None;
    public static BalloonFlags Info;
    public static BalloonFlags Warning;
    public static BalloonFlags Error;
    public static BalloonFlags User;
    public static BalloonFlags NoSound;
    public static BalloonFlags LargeIcon;
    public static BalloonFlags RespectQuietTime;
}
[FlagsAttribute]
public enum Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers : Enum {
    public int value__;
    public static IconDataMembers Message;
    public static IconDataMembers Icon;
    public static IconDataMembers Tip;
    public static IconDataMembers State;
    public static IconDataMembers Info;
    public static IconDataMembers Realtime;
    public static IconDataMembers UseLegacyToolTips;
}
public enum Hardcodet.Wpf.TaskbarNotification.Interop.IconState : Enum {
    public int value__;
    public static IconState Visible;
    public static IconState Hidden;
}
public enum Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent : Enum {
    public int value__;
    public static MouseEvent MouseMove;
    public static MouseEvent IconRightMouseDown;
    public static MouseEvent IconLeftMouseDown;
    public static MouseEvent IconRightMouseUp;
    public static MouseEvent IconLeftMouseUp;
    public static MouseEvent IconMiddleMouseDown;
    public static MouseEvent IconMiddleMouseUp;
    public static MouseEvent IconDoubleClick;
    public static MouseEvent BalloonToolTipClicked;
}
public enum Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand : Enum {
    public int value__;
    public static NotifyCommand Add;
    public static NotifyCommand Modify;
    public static NotifyCommand Delete;
    public static NotifyCommand SetFocus;
    public static NotifyCommand SetVersion;
}
public class Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData : ValueType {
    public UInt32 cbSize;
    public IntPtr WindowHandle;
    public UInt32 TaskbarIconId;
    public IconDataMembers ValidMembers;
    public UInt32 CallbackMessageId;
    public IntPtr IconHandle;
    public string ToolTipText;
    public IconState IconState;
    public IconState StateMask;
    public string BalloonText;
    public UInt32 VersionOrTimeout;
    public string BalloonTitle;
    public BalloonFlags BalloonFlags;
    public Guid TaskbarIconGuid;
    public IntPtr CustomBalloonIconHandle;
    public static NotifyIconData CreateDefault(IntPtr handle);
}
public enum Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconVersion : Enum {
    public int value__;
    public static NotifyIconVersion Win95;
    public static NotifyIconVersion Win2000;
    public static NotifyIconVersion Vista;
}
public class Hardcodet.Wpf.TaskbarNotification.Interop.Point : ValueType {
    public int X;
    public int Y;
}
[ExtensionAttribute]
public static class Hardcodet.Wpf.TaskbarNotification.Interop.SystemInfo : object {
    [CompilerGeneratedAttribute]
private static double <DpiFactorX>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <DpiFactorY>k__BackingField;
    public static double DpiFactorX { get; private set; }
    public static double DpiFactorY { get; private set; }
    private static SystemInfo();
    internal static void UpdateDpiFactors();
    [CompilerGeneratedAttribute]
public static double get_DpiFactorX();
    [CompilerGeneratedAttribute]
private static void set_DpiFactorX(double value);
    [CompilerGeneratedAttribute]
public static double get_DpiFactorY();
    [CompilerGeneratedAttribute]
private static void set_DpiFactorY(double value);
    [ExtensionAttribute]
public static Point ScaleWithDpi(Point point);
}
public static class Hardcodet.Wpf.TaskbarNotification.Interop.TrayInfo : object {
    public static Point GetTrayLocation();
    public static Point GetDeviceCoordinates(Point point);
}
internal static class Hardcodet.Wpf.TaskbarNotification.Interop.WinApi : object {
    private static string User32;
    public static bool Shell_NotifyIcon(NotifyCommand cmd, NotifyIconData& data);
    public static IntPtr CreateWindowEx(int dwExStyle, string lpClassName, string lpWindowName, int dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
    public static IntPtr DefWindowProc(IntPtr hWnd, UInt32 msg, IntPtr wparam, IntPtr lparam);
    public static short RegisterClass(WindowClass& lpWndClass);
    public static UInt32 RegisterWindowMessage(string lpString);
    public static bool DestroyWindow(IntPtr hWnd);
    public static bool SetForegroundWindow(IntPtr hWnd);
    public static int GetDoubleClickTime();
    public static bool GetPhysicalCursorPos(Point& lpPoint);
    public static bool GetCursorPos(Point& lpPoint);
}
public class Hardcodet.Wpf.TaskbarNotification.Interop.WindowClass : ValueType {
    public UInt32 style;
    public WindowProcedureHandler lpfnWndProc;
    public int cbClsExtra;
    public int cbWndExtra;
    public IntPtr hInstance;
    public IntPtr hIcon;
    public IntPtr hCursor;
    public IntPtr hbrBackground;
    public string lpszMenuName;
    public string lpszClassName;
}
public class Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink : object {
    public static int CallbackMessageId;
    private UInt32 taskbarRestartMessageId;
    private bool isDoubleClick;
    private WindowProcedureHandler messageHandler;
    [CompilerGeneratedAttribute]
private string <WindowId>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <MessageWindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyIconVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<bool> ChangeToolTipStateRequest;
    [CompilerGeneratedAttribute]
private Action`1<MouseEvent> MouseEventReceived;
    [CompilerGeneratedAttribute]
private Action`1<bool> BalloonToolTipChanged;
    [CompilerGeneratedAttribute]
private Action TaskbarCreated;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    internal string WindowId { get; private set; }
    internal IntPtr MessageWindowHandle { get; private set; }
    public NotifyIconVersion Version { get; public set; }
    public bool IsDisposed { get; private set; }
    public WindowMessageSink(NotifyIconVersion version);
    [CompilerGeneratedAttribute]
internal string get_WindowId();
    [CompilerGeneratedAttribute]
private void set_WindowId(string value);
    [CompilerGeneratedAttribute]
internal IntPtr get_MessageWindowHandle();
    [CompilerGeneratedAttribute]
private void set_MessageWindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
public NotifyIconVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(NotifyIconVersion value);
    [CompilerGeneratedAttribute]
public void add_ChangeToolTipStateRequest(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public void remove_ChangeToolTipStateRequest(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public void add_MouseEventReceived(Action`1<MouseEvent> value);
    [CompilerGeneratedAttribute]
public void remove_MouseEventReceived(Action`1<MouseEvent> value);
    [CompilerGeneratedAttribute]
public void add_BalloonToolTipChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public void remove_BalloonToolTipChanged(Action`1<bool> value);
    [CompilerGeneratedAttribute]
public void add_TaskbarCreated(Action value);
    [CompilerGeneratedAttribute]
public void remove_TaskbarCreated(Action value);
    internal static WindowMessageSink CreateEmpty();
    private void CreateMessageWindow();
    private IntPtr OnWindowMessageReceived(IntPtr hWnd, UInt32 messageId, IntPtr wParam, IntPtr lParam);
    private void ProcessWindowMessage(UInt32 msg, IntPtr wParam, IntPtr lParam);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
}
public class Hardcodet.Wpf.TaskbarNotification.Interop.WindowProcedureHandler : MulticastDelegate {
    public WindowProcedureHandler(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr hWnd, UInt32 uMsg, IntPtr wParam, IntPtr lParam);
    public virtual IAsyncResult BeginInvoke(IntPtr hWnd, UInt32 uMsg, IntPtr wParam, IntPtr lParam, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
public enum Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages : Enum {
    public UInt32 value__;
    public static WindowsMessages WM_CONTEXTMENU;
    public static WindowsMessages WM_MOUSEMOVE;
    public static WindowsMessages WM_LBUTTONDOWN;
    public static WindowsMessages WM_LBUTTONUP;
    public static WindowsMessages WM_LBUTTONDBLCLK;
    public static WindowsMessages WM_RBUTTONDOWN;
    public static WindowsMessages WM_RBUTTONUP;
    public static WindowsMessages WM_RBUTTONDBLCLK;
    public static WindowsMessages WM_MBUTTONDOWN;
    public static WindowsMessages WM_MBUTTONUP;
    public static WindowsMessages WM_MBUTTONDBLCLK;
    public static WindowsMessages WM_DPICHANGED;
    public static WindowsMessages WM_USER;
    public static WindowsMessages NIN_SELECT;
    public static WindowsMessages NIN_KEYSELECT;
    public static WindowsMessages NIN_BALLOONSHOW;
    public static WindowsMessages NIN_BALLOONHIDE;
    public static WindowsMessages NIN_BALLOONTIMEOUT;
    public static WindowsMessages NIN_BALLOONUSERCLICK;
    public static WindowsMessages NIN_POPUPOPEN;
    public static WindowsMessages NIN_POPUPCLOSE;
}
public enum Hardcodet.Wpf.TaskbarNotification.PopupActivationMode : Enum {
    public int value__;
    public static PopupActivationMode LeftClick;
    public static PopupActivationMode RightClick;
    public static PopupActivationMode DoubleClick;
    public static PopupActivationMode LeftOrRightClick;
    public static PopupActivationMode LeftOrDoubleClick;
    public static PopupActivationMode MiddleClick;
    public static PopupActivationMode All;
}
internal static class Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper : object {
    internal static void RaiseEvent(DependencyObject target, RoutedEventArgs args);
    internal static void AddHandler(DependencyObject element, RoutedEvent routedEvent, Delegate handler);
    internal static void RemoveHandler(DependencyObject element, RoutedEvent routedEvent, Delegate handler);
}
public class Hardcodet.Wpf.TaskbarNotification.TaskbarIcon : FrameworkElement {
    private object lockObject;
    private NotifyIconData iconData;
    private WindowMessageSink messageSink;
    private Action singleClickTimerAction;
    private Timer singleClickTimer;
    private Timer balloonCloseTimer;
    [CompilerGeneratedAttribute]
private bool <IsTaskbarIconCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private GetCustomPopupPosition <CustomPopupPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public static string CategoryName;
    private static DependencyPropertyKey TrayPopupResolvedPropertyKey;
    public static DependencyProperty TrayPopupResolvedProperty;
    private static DependencyPropertyKey TrayToolTipResolvedPropertyKey;
    public static DependencyProperty TrayToolTipResolvedProperty;
    private static DependencyPropertyKey CustomBalloonPropertyKey;
    public static DependencyProperty CustomBalloonProperty;
    private Icon icon;
    public static DependencyProperty IconSourceProperty;
    public static DependencyProperty ToolTipTextProperty;
    public static DependencyProperty TrayToolTipProperty;
    public static DependencyProperty TrayPopupProperty;
    public static DependencyProperty MenuActivationProperty;
    public static DependencyProperty PopupActivationProperty;
    public static DependencyProperty DoubleClickCommandProperty;
    public static DependencyProperty DoubleClickCommandParameterProperty;
    public static DependencyProperty DoubleClickCommandTargetProperty;
    public static DependencyProperty LeftClickCommandProperty;
    public static DependencyProperty LeftClickCommandParameterProperty;
    public static DependencyProperty LeftClickCommandTargetProperty;
    public static DependencyProperty NoLeftClickDelayProperty;
    public static RoutedEvent TrayLeftMouseDownEvent;
    public static RoutedEvent TrayRightMouseDownEvent;
    public static RoutedEvent TrayMiddleMouseDownEvent;
    public static RoutedEvent TrayLeftMouseUpEvent;
    public static RoutedEvent TrayRightMouseUpEvent;
    public static RoutedEvent TrayMiddleMouseUpEvent;
    public static RoutedEvent TrayMouseDoubleClickEvent;
    public static RoutedEvent TrayMouseMoveEvent;
    public static RoutedEvent TrayBalloonTipShownEvent;
    public static RoutedEvent TrayBalloonTipClosedEvent;
    public static RoutedEvent TrayBalloonTipClickedEvent;
    public static RoutedEvent TrayContextMenuOpenEvent;
    public static RoutedEvent PreviewTrayContextMenuOpenEvent;
    public static RoutedEvent TrayPopupOpenEvent;
    public static RoutedEvent PreviewTrayPopupOpenEvent;
    public static RoutedEvent TrayToolTipOpenEvent;
    public static RoutedEvent PreviewTrayToolTipOpenEvent;
    public static RoutedEvent TrayToolTipCloseEvent;
    public static RoutedEvent PreviewTrayToolTipCloseEvent;
    public static RoutedEvent PopupOpenedEvent;
    public static RoutedEvent ToolTipOpenedEvent;
    public static RoutedEvent ToolTipCloseEvent;
    public static RoutedEvent BalloonShowingEvent;
    public static RoutedEvent BalloonClosingEvent;
    public static DependencyProperty ParentTaskbarIconProperty;
    private int DoubleClickWaitTime { get; }
    public bool IsTaskbarIconCreated { get; private set; }
    public bool SupportsCustomToolTips { get; }
    private bool IsPopupOpen { get; }
    public GetCustomPopupPosition CustomPopupPosition { get; public set; }
    public bool IsDisposed { get; private set; }
    [CategoryAttribute("NotifyIcon")]
public Popup TrayPopupResolved { get; }
    [CategoryAttribute("NotifyIcon")]
[BrowsableAttribute("True")]
[BindableAttribute("True")]
public ToolTip TrayToolTipResolved { get; }
    public Popup CustomBalloon { get; }
    [BrowsableAttribute("False")]
public Icon Icon { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("Sets the displayed taskbar icon.")]
public ImageSource IconSource { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("Alternative to a fully blown ToolTip, which is only displayed on Vista and above.")]
public string ToolTipText { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("Custom UI element that is displayed as a tooltip. Only on Vista and above")]
public UIElement TrayToolTip { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("Displayed as a Popup if the user clicks on the taskbar icon.")]
public UIElement TrayPopup { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("Defines what mouse events display the context menu.")]
public PopupActivationMode MenuActivation { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("Defines what mouse events display the TaskbarIconPopup.")]
public PopupActivationMode PopupActivation { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("A command that is being executed if the tray icon is being double-clicked.")]
public ICommand DoubleClickCommand { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("Parameter to submit to the DoubleClickCommand when the user double clicks on the NotifyIcon.")]
public object DoubleClickCommandParameter { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("The target of the command that is fired if the notify icon is double clicked.")]
public IInputElement DoubleClickCommandTarget { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("A command that is being executed if the tray icon is being left-clicked.")]
public ICommand LeftClickCommand { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("The target of the command that is fired if the notify icon is clicked with the left mouse button.")]
public object LeftClickCommandParameter { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("The target of the command that is fired if the notify icon is clicked with the left mouse button.")]
public IInputElement LeftClickCommandTarget { get; public set; }
    [CategoryAttribute("NotifyIcon")]
[DescriptionAttribute("Set to true to make left clicks work without delay.")]
public bool NoLeftClickDelay { get; public set; }
    private static TaskbarIcon();
    private int get_DoubleClickWaitTime();
    [CompilerGeneratedAttribute]
public bool get_IsTaskbarIconCreated();
    [CompilerGeneratedAttribute]
private void set_IsTaskbarIconCreated(bool value);
    public bool get_SupportsCustomToolTips();
    private bool get_IsPopupOpen();
    [CompilerGeneratedAttribute]
public GetCustomPopupPosition get_CustomPopupPosition();
    [CompilerGeneratedAttribute]
public void set_CustomPopupPosition(GetCustomPopupPosition value);
    public Point GetPopupTrayPosition();
    public void ShowCustomBalloon(UIElement balloon, PopupAnimation animation, Nullable`1<int> timeout);
    public void ResetBalloonCloseTimer();
    public void CloseBalloon();
    private void CloseBalloonCallback(object state);
    private void OnMouseEvent(MouseEvent me);
    private void OnToolTipChange(bool visible);
    private void CreateCustomToolTip();
    private void WriteToolTipSettings();
    private void CreatePopup();
    private void ShowTrayPopup(Point cursorPosition);
    private void ShowContextMenu(Point cursorPosition);
    private void OnBalloonToolTipChanged(bool visible);
    public void ShowBalloonTip(string title, string message, BalloonIcon symbol);
    public void ShowBalloonTip(string title, string message, Icon customIcon, bool largeIcon);
    private void ShowBalloonTip(string title, string message, BalloonFlags flags, IntPtr balloonIconHandle);
    public void HideBalloonTip();
    private void DoSingleClickAction(object state);
    private void SetVersion();
    private void OnTaskbarCreated();
    private void CreateTaskbarIcon();
    private void RemoveTaskbarIcon();
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    private void EnsureNotDisposed();
    private void OnExit(object sender, EventArgs e);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public Popup get_TrayPopupResolved();
    protected void SetTrayPopupResolved(Popup value);
    public ToolTip get_TrayToolTipResolved();
    protected void SetTrayToolTipResolved(ToolTip value);
    public Popup get_CustomBalloon();
    protected void SetCustomBalloon(Popup value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public ImageSource get_IconSource();
    public void set_IconSource(ImageSource value);
    private static void IconSourcePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnIconSourcePropertyChanged(DependencyPropertyChangedEventArgs e);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    private static void ToolTipTextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnToolTipTextPropertyChanged(DependencyPropertyChangedEventArgs e);
    public UIElement get_TrayToolTip();
    public void set_TrayToolTip(UIElement value);
    private static void TrayToolTipPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnTrayToolTipPropertyChanged(DependencyPropertyChangedEventArgs e);
    public UIElement get_TrayPopup();
    public void set_TrayPopup(UIElement value);
    private static void TrayPopupPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnTrayPopupPropertyChanged(DependencyPropertyChangedEventArgs e);
    public PopupActivationMode get_MenuActivation();
    public void set_MenuActivation(PopupActivationMode value);
    public PopupActivationMode get_PopupActivation();
    public void set_PopupActivation(PopupActivationMode value);
    private static void VisibilityPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnVisibilityPropertyChanged(DependencyPropertyChangedEventArgs e);
    private void UpdateDataContext(FrameworkElement target, object oldDataContextValue, object newDataContextValue);
    private static void DataContextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnDataContextPropertyChanged(DependencyPropertyChangedEventArgs e);
    private static void ContextMenuPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnContextMenuPropertyChanged(DependencyPropertyChangedEventArgs e);
    public ICommand get_DoubleClickCommand();
    public void set_DoubleClickCommand(ICommand value);
    public object get_DoubleClickCommandParameter();
    public void set_DoubleClickCommandParameter(object value);
    public IInputElement get_DoubleClickCommandTarget();
    public void set_DoubleClickCommandTarget(IInputElement value);
    public ICommand get_LeftClickCommand();
    public void set_LeftClickCommand(ICommand value);
    public object get_LeftClickCommandParameter();
    public void set_LeftClickCommandParameter(object value);
    public IInputElement get_LeftClickCommandTarget();
    public void set_LeftClickCommandTarget(IInputElement value);
    public bool get_NoLeftClickDelay();
    public void set_NoLeftClickDelay(bool value);
    public void add_TrayLeftMouseDown(RoutedEventHandler value);
    public void remove_TrayLeftMouseDown(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayLeftMouseDownEvent();
    internal static RoutedEventArgs RaiseTrayLeftMouseDownEvent(DependencyObject target);
    public void add_TrayRightMouseDown(RoutedEventHandler value);
    public void remove_TrayRightMouseDown(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayRightMouseDownEvent();
    internal static RoutedEventArgs RaiseTrayRightMouseDownEvent(DependencyObject target);
    public void add_TrayMiddleMouseDown(RoutedEventHandler value);
    public void remove_TrayMiddleMouseDown(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayMiddleMouseDownEvent();
    internal static RoutedEventArgs RaiseTrayMiddleMouseDownEvent(DependencyObject target);
    public void add_TrayLeftMouseUp(RoutedEventHandler value);
    public void remove_TrayLeftMouseUp(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayLeftMouseUpEvent();
    internal static RoutedEventArgs RaiseTrayLeftMouseUpEvent(DependencyObject target);
    public void add_TrayRightMouseUp(RoutedEventHandler value);
    public void remove_TrayRightMouseUp(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayRightMouseUpEvent();
    internal static RoutedEventArgs RaiseTrayRightMouseUpEvent(DependencyObject target);
    public void add_TrayMiddleMouseUp(RoutedEventHandler value);
    public void remove_TrayMiddleMouseUp(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayMiddleMouseUpEvent();
    internal static RoutedEventArgs RaiseTrayMiddleMouseUpEvent(DependencyObject target);
    public void add_TrayMouseDoubleClick(RoutedEventHandler value);
    public void remove_TrayMouseDoubleClick(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayMouseDoubleClickEvent();
    internal static RoutedEventArgs RaiseTrayMouseDoubleClickEvent(DependencyObject target);
    public void add_TrayMouseMove(RoutedEventHandler value);
    public void remove_TrayMouseMove(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayMouseMoveEvent();
    internal static RoutedEventArgs RaiseTrayMouseMoveEvent(DependencyObject target);
    public void add_TrayBalloonTipShown(RoutedEventHandler value);
    public void remove_TrayBalloonTipShown(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayBalloonTipShownEvent();
    internal static RoutedEventArgs RaiseTrayBalloonTipShownEvent(DependencyObject target);
    public void add_TrayBalloonTipClosed(RoutedEventHandler value);
    public void remove_TrayBalloonTipClosed(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayBalloonTipClosedEvent();
    internal static RoutedEventArgs RaiseTrayBalloonTipClosedEvent(DependencyObject target);
    public void add_TrayBalloonTipClicked(RoutedEventHandler value);
    public void remove_TrayBalloonTipClicked(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayBalloonTipClickedEvent();
    internal static RoutedEventArgs RaiseTrayBalloonTipClickedEvent(DependencyObject target);
    public void add_TrayContextMenuOpen(RoutedEventHandler value);
    public void remove_TrayContextMenuOpen(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayContextMenuOpenEvent();
    internal static RoutedEventArgs RaiseTrayContextMenuOpenEvent(DependencyObject target);
    public void add_PreviewTrayContextMenuOpen(RoutedEventHandler value);
    public void remove_PreviewTrayContextMenuOpen(RoutedEventHandler value);
    protected RoutedEventArgs RaisePreviewTrayContextMenuOpenEvent();
    internal static RoutedEventArgs RaisePreviewTrayContextMenuOpenEvent(DependencyObject target);
    public void add_TrayPopupOpen(RoutedEventHandler value);
    public void remove_TrayPopupOpen(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayPopupOpenEvent();
    internal static RoutedEventArgs RaiseTrayPopupOpenEvent(DependencyObject target);
    public void add_PreviewTrayPopupOpen(RoutedEventHandler value);
    public void remove_PreviewTrayPopupOpen(RoutedEventHandler value);
    protected RoutedEventArgs RaisePreviewTrayPopupOpenEvent();
    internal static RoutedEventArgs RaisePreviewTrayPopupOpenEvent(DependencyObject target);
    public void add_TrayToolTipOpen(RoutedEventHandler value);
    public void remove_TrayToolTipOpen(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayToolTipOpenEvent();
    internal static RoutedEventArgs RaiseTrayToolTipOpenEvent(DependencyObject target);
    public void add_PreviewTrayToolTipOpen(RoutedEventHandler value);
    public void remove_PreviewTrayToolTipOpen(RoutedEventHandler value);
    protected RoutedEventArgs RaisePreviewTrayToolTipOpenEvent();
    internal static RoutedEventArgs RaisePreviewTrayToolTipOpenEvent(DependencyObject target);
    public void add_TrayToolTipClose(RoutedEventHandler value);
    public void remove_TrayToolTipClose(RoutedEventHandler value);
    protected RoutedEventArgs RaiseTrayToolTipCloseEvent();
    internal static RoutedEventArgs RaiseTrayToolTipCloseEvent(DependencyObject target);
    public void add_PreviewTrayToolTipClose(RoutedEventHandler value);
    public void remove_PreviewTrayToolTipClose(RoutedEventHandler value);
    protected RoutedEventArgs RaisePreviewTrayToolTipCloseEvent();
    internal static RoutedEventArgs RaisePreviewTrayToolTipCloseEvent(DependencyObject target);
    public static void AddPopupOpenedHandler(DependencyObject element, RoutedEventHandler handler);
    public static void RemovePopupOpenedHandler(DependencyObject element, RoutedEventHandler handler);
    internal static RoutedEventArgs RaisePopupOpenedEvent(DependencyObject target);
    public static void AddToolTipOpenedHandler(DependencyObject element, RoutedEventHandler handler);
    public static void RemoveToolTipOpenedHandler(DependencyObject element, RoutedEventHandler handler);
    internal static RoutedEventArgs RaiseToolTipOpenedEvent(DependencyObject target);
    public static void AddToolTipCloseHandler(DependencyObject element, RoutedEventHandler handler);
    public static void RemoveToolTipCloseHandler(DependencyObject element, RoutedEventHandler handler);
    internal static RoutedEventArgs RaiseToolTipCloseEvent(DependencyObject target);
    public static void AddBalloonShowingHandler(DependencyObject element, RoutedEventHandler handler);
    public static void RemoveBalloonShowingHandler(DependencyObject element, RoutedEventHandler handler);
    internal static RoutedEventArgs RaiseBalloonShowingEvent(DependencyObject target, TaskbarIcon source);
    public static void AddBalloonClosingHandler(DependencyObject element, RoutedEventHandler handler);
    public static void RemoveBalloonClosingHandler(DependencyObject element, RoutedEventHandler handler);
    internal static RoutedEventArgs RaiseBalloonClosingEvent(DependencyObject target, TaskbarIcon source);
    public static TaskbarIcon GetParentTaskbarIcon(DependencyObject d);
    public static void SetParentTaskbarIcon(DependencyObject d, TaskbarIcon value);
}
[ExtensionAttribute]
internal static class Hardcodet.Wpf.TaskbarNotification.Util : object {
    public static object SyncRoot;
    private static bool isDesignMode;
    public static bool IsDesignMode { get; }
    private static Util();
    public static bool get_IsDesignMode();
    public static Window CreateHelperWindow();
    public static bool WriteIconData(NotifyIconData& data, NotifyCommand command);
    public static bool WriteIconData(NotifyIconData& data, NotifyCommand command, IconDataMembers flags);
    [ExtensionAttribute]
public static BalloonFlags GetBalloonFlag(BalloonIcon icon);
    [ExtensionAttribute]
public static Icon ToIcon(ImageSource imageSource);
    [ExtensionAttribute]
public static bool Is(T value, T[] candidates);
    [ExtensionAttribute]
public static bool IsMatch(MouseEvent me, PopupActivationMode activationMode);
    [ExtensionAttribute]
public static void ExecuteIfEnabled(ICommand command, object commandParameter, IInputElement target);
    [ExtensionAttribute]
internal static Dispatcher GetDispatcher(DispatcherObject source);
    [ExtensionAttribute]
public static bool IsDataContextDataBound(FrameworkElement element);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
