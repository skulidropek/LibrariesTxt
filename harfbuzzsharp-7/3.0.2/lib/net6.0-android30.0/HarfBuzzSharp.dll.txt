public class HarfBuzzSharp.Blob : NativeObject {
    private static Lazy`1<Blob> emptyBlob;
    public static Blob Empty { get; }
    public int Length { get; }
    public int FaceCount { get; }
    public bool IsImmutable { get; }
    internal Blob(IntPtr handle);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use Blob(IntPtr, int, MemoryMode, ReleaseDelegate) instead.")]
public Blob(IntPtr data, UInt32 length, MemoryMode mode, object userData, BlobReleaseDelegate releaseDelegate);
    public Blob(IntPtr data, int length, MemoryMode mode);
    public Blob(IntPtr data, int length, MemoryMode mode, ReleaseDelegate releaseDelegate);
    private static Blob();
    public static Blob get_Empty();
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeHandler();
    public int get_Length();
    public int get_FaceCount();
    public bool get_IsImmutable();
    public void MakeImmutable();
    public Stream AsStream();
    public ReadOnlySpan`1<byte> AsSpan();
    public static Blob FromFile(string fileName);
    public static Blob FromStream(Stream stream);
    private static IntPtr Create(IntPtr data, int length, MemoryMode mode, ReleaseDelegate releaseProc);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use ReleaseDelegate instead.")]
public class HarfBuzzSharp.BlobReleaseDelegate : MulticastDelegate {
    public BlobReleaseDelegate(object object, IntPtr method);
    public virtual void Invoke(object context);
    public virtual IAsyncResult BeginInvoke(object context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.Buffer : NativeObject {
    public static int DefaultReplacementCodepoint;
    public ContentType ContentType { get; public set; }
    public Direction Direction { get; public set; }
    public Language Language { get; public set; }
    public BufferFlags Flags { get; public set; }
    public ClusterLevel ClusterLevel { get; public set; }
    public UInt32 ReplacementCodepoint { get; public set; }
    public UInt32 InvisibleGlyph { get; public set; }
    public Script Script { get; public set; }
    public int Length { get; public set; }
    public UnicodeFunctions UnicodeFunctions { get; public set; }
    public GlyphInfo[] GlyphInfos { get; }
    public GlyphPosition[] GlyphPositions { get; }
    internal Buffer(IntPtr handle);
    public ContentType get_ContentType();
    public void set_ContentType(ContentType value);
    public Direction get_Direction();
    public void set_Direction(Direction value);
    public Language get_Language();
    public void set_Language(Language value);
    public BufferFlags get_Flags();
    public void set_Flags(BufferFlags value);
    public ClusterLevel get_ClusterLevel();
    public void set_ClusterLevel(ClusterLevel value);
    public UInt32 get_ReplacementCodepoint();
    public void set_ReplacementCodepoint(UInt32 value);
    public UInt32 get_InvisibleGlyph();
    public void set_InvisibleGlyph(UInt32 value);
    public Script get_Script();
    public void set_Script(Script value);
    public int get_Length();
    public void set_Length(int value);
    public UnicodeFunctions get_UnicodeFunctions();
    public void set_UnicodeFunctions(UnicodeFunctions value);
    public GlyphInfo[] get_GlyphInfos();
    public GlyphPosition[] get_GlyphPositions();
    public void Add(int codepoint, int cluster);
    public void Add(UInt32 codepoint, UInt32 cluster);
    public void AddUtf8(string utf8text);
    public void AddUtf8(Byte[] bytes);
    public void AddUtf8(ReadOnlySpan`1<byte> text);
    public void AddUtf8(ReadOnlySpan`1<byte> text, int itemOffset, int itemLength);
    public void AddUtf8(IntPtr text, int textLength);
    public void AddUtf8(IntPtr text, int textLength, int itemOffset, int itemLength);
    public void AddUtf16(string text);
    public void AddUtf16(string text, int itemOffset, int itemLength);
    public void AddUtf16(ReadOnlySpan`1<byte> text);
    public void AddUtf16(ReadOnlySpan`1<char> text);
    public void AddUtf16(ReadOnlySpan`1<char> text, int itemOffset, int itemLength);
    public void AddUtf16(IntPtr text, int textLength);
    public void AddUtf16(IntPtr text, int textLength, int itemOffset, int itemLength);
    public void AddUtf32(string text);
    public void AddUtf32(ReadOnlySpan`1<byte> text);
    public void AddUtf32(ReadOnlySpan`1<UInt32> text);
    public void AddUtf32(ReadOnlySpan`1<UInt32> text, int itemOffset, int itemLength);
    public void AddUtf32(ReadOnlySpan`1<int> text);
    public void AddUtf32(ReadOnlySpan`1<int> text, int itemOffset, int itemLength);
    public void AddUtf32(IntPtr text, int textLength);
    public void AddUtf32(IntPtr text, int textLength, int itemOffset, int itemLength);
    public void AddCodepoints(ReadOnlySpan`1<UInt32> text);
    public void AddCodepoints(ReadOnlySpan`1<UInt32> text, int itemOffset, int itemLength);
    public void AddCodepoints(ReadOnlySpan`1<int> text);
    public void AddCodepoints(ReadOnlySpan`1<int> text, int itemOffset, int itemLength);
    public void AddCodepoints(IntPtr text, int textLength);
    public void AddCodepoints(IntPtr text, int textLength, int itemOffset, int itemLength);
    public ReadOnlySpan`1<GlyphInfo> GetGlyphInfoSpan();
    public ReadOnlySpan`1<GlyphPosition> GetGlyphPositionSpan();
    public void GuessSegmentProperties();
    public void ClearContents();
    public void Reset();
    public void Append(Buffer buffer);
    public void Append(Buffer buffer, int start, int end);
    public void NormalizeGlyphs();
    public void Reverse();
    public void ReverseRange(int start, int end);
    public void ReverseClusters();
    public string SerializeGlyphs();
    public string SerializeGlyphs(int start, int end);
    public string SerializeGlyphs(Font font);
    public string SerializeGlyphs(Font font, SerializeFormat format, SerializeFlag flags);
    public string SerializeGlyphs(int start, int end, Font font, SerializeFormat format, SerializeFlag flags);
    public void DeserializeGlyphs(string data);
    public void DeserializeGlyphs(string data, Font font);
    public void DeserializeGlyphs(string data, Font font, SerializeFormat format);
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeHandler();
}
public enum HarfBuzzSharp.BufferDiffFlags : Enum {
    public int value__;
    public static BufferDiffFlags Equal;
    public static BufferDiffFlags ContentTypeMismatch;
    public static BufferDiffFlags LengthMismatch;
    public static BufferDiffFlags NotdefPresent;
    public static BufferDiffFlags DottedCirclePresent;
    public static BufferDiffFlags CodepointMismatch;
    public static BufferDiffFlags ClusterMismatch;
    public static BufferDiffFlags GlyphFlagsMismatch;
    public static BufferDiffFlags PositionMismatch;
}
[FlagsAttribute]
public enum HarfBuzzSharp.BufferFlags : Enum {
    public int value__;
    public static BufferFlags Default;
    public static BufferFlags BeginningOfText;
    public static BufferFlags EndOfText;
    public static BufferFlags PreserveDefaultIgnorables;
    public static BufferFlags RemoveDefaultIgnorables;
    public static BufferFlags DoNotInsertDottedCircle;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.BufferMessageProxyDelegate : MulticastDelegate {
    public BufferMessageProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr buffer, IntPtr font, Void* message, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr buffer, IntPtr font, Void* message, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public enum HarfBuzzSharp.ClusterLevel : Enum {
    public int value__;
    public static ClusterLevel MonotoneGraphemes;
    public static ClusterLevel MonotoneCharacters;
    public static ClusterLevel Characters;
    public static ClusterLevel Default;
}
public class HarfBuzzSharp.CombiningClassDelegate : MulticastDelegate {
    public CombiningClassDelegate(object object, IntPtr method);
    public virtual UnicodeCombiningClass Invoke(UnicodeFunctions ufuncs, UInt32 unicode);
    public virtual IAsyncResult BeginInvoke(UnicodeFunctions ufuncs, UInt32 unicode, AsyncCallback callback, object object);
    public virtual UnicodeCombiningClass EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.ComposeDelegate : MulticastDelegate {
    public ComposeDelegate(object object, IntPtr method);
    public virtual bool Invoke(UnicodeFunctions ufuncs, UInt32 a, UInt32 b, UInt32& ab);
    public virtual IAsyncResult BeginInvoke(UnicodeFunctions ufuncs, UInt32 a, UInt32 b, UInt32& ab, AsyncCallback callback, object object);
    public virtual bool EndInvoke(UInt32& ab, IAsyncResult result);
}
public enum HarfBuzzSharp.ContentType : Enum {
    public int value__;
    public static ContentType Invalid;
    public static ContentType Unicode;
    public static ContentType Glyphs;
}
public class HarfBuzzSharp.DecomposeDelegate : MulticastDelegate {
    public DecomposeDelegate(object object, IntPtr method);
    public virtual bool Invoke(UnicodeFunctions ufuncs, UInt32 ab, UInt32& a, UInt32& b);
    public virtual IAsyncResult BeginInvoke(UnicodeFunctions ufuncs, UInt32 ab, UInt32& a, UInt32& b, AsyncCallback callback, object object);
    public virtual bool EndInvoke(UInt32& a, UInt32& b, IAsyncResult result);
}
internal static class HarfBuzzSharp.DelegateProxies : object {
    public static DestroyProxyDelegate ReleaseDelegateProxy;
    public static DestroyProxyDelegate ReleaseDelegateProxyForMulti;
    public static ReferenceTableProxyDelegate GetTableDelegateProxy;
    public static FontGetFontExtentsProxyDelegate FontExtentsProxy;
    public static FontGetNominalGlyphProxyDelegate NominalGlyphProxy;
    public static FontGetVariationGlyphProxyDelegate VariationGlyphProxy;
    public static FontGetNominalGlyphsProxyDelegate NominalGlyphsProxy;
    public static FontGetGlyphAdvanceProxyDelegate GlyphAdvanceProxy;
    public static FontGetGlyphAdvancesProxyDelegate GlyphAdvancesProxy;
    public static FontGetGlyphOriginProxyDelegate GlyphOriginProxy;
    public static FontGetGlyphKerningProxyDelegate GlyphKerningProxy;
    public static FontGetGlyphExtentsProxyDelegate GlyphExtentsProxy;
    public static FontGetGlyphContourPointProxyDelegate GlyphContourPointProxy;
    public static FontGetGlyphNameProxyDelegate GlyphNameProxy;
    public static FontGetGlyphFromNameProxyDelegate GlyphFromNameProxy;
    public static UnicodeCombiningClassProxyDelegate CombiningClassProxy;
    public static UnicodeGeneralCategoryProxyDelegate GeneralCategoryProxy;
    public static UnicodeMirroringProxyDelegate MirroringProxy;
    public static UnicodeScriptProxyDelegate ScriptProxy;
    public static UnicodeComposeProxyDelegate ComposeProxy;
    public static UnicodeDecomposeProxyDelegate DecomposeProxy;
    private static DelegateProxies();
    public static T Create(object managedDel, T nativeDel, GCHandle& gch, IntPtr& contextPtr);
    public static void Create(object managedDel, GCHandle& gch, IntPtr& contextPtr);
    public static T Get(IntPtr contextPtr, GCHandle& gch);
    public static IntPtr CreateUserData(object userData, bool makeWeak);
    public static T GetUserData(IntPtr contextPtr, GCHandle& gch);
    public static IntPtr CreateMulti(T1 wrappedDelegate1, T2 wrappedDelegate2);
    public static IntPtr CreateMulti(T1 wrappedDelegate1, T2 wrappedDelegate2, T3 wrappedDelegate3);
    public static T GetMulti(IntPtr contextPtr, GCHandle& gch);
    public static void GetMulti(IntPtr contextPtr, T1& wrappedDelegate1, T2& wrappedDelegate2, GCHandle& gch);
    public static void GetMulti(IntPtr contextPtr, T1& wrappedDelegate1, T2& wrappedDelegate2, T3& wrappedDelegate3, GCHandle& gch);
    public static IntPtr CreateMultiUserData(T wrappedDelegate, object userData, bool makeWeak);
    public static IntPtr CreateMultiUserData(T1 wrappedDelegate1, T2 wrappedDelegate2, object userData, bool makeWeak);
    public static IntPtr CreateMultiUserData(T1 wrappedDelegate1, T2 wrappedDelegate2, T3 wrappedDelegate3, object userData, bool makeWeak);
    public static TUserData GetMultiUserData(IntPtr contextPtr, GCHandle& gch);
    public static void GetMultiUserData(IntPtr contextPtr, T& wrappedDelegate, TUserData& userData, GCHandle& gch);
    public static void GetMultiUserData(IntPtr contextPtr, T1& wrappedDelegate1, T2& wrappedDelegate2, TUserData& userData, GCHandle& gch);
    public static void GetMultiUserData(IntPtr contextPtr, T1& wrappedDelegate1, T2& wrappedDelegate2, T3& wrappedDelegate3, TUserData& userData, GCHandle& gch);
    private static TUserData GetUserData(GetMultiDelegateDelegate multi);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.DestroyProxyDelegate")]
private static void ReleaseDelegateProxyImplementation(Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.ReferenceTableProxyDelegate")]
private static IntPtr GetTableDelegateProxyImplementation(IntPtr face, UInt32 tag, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.DestroyProxyDelegate")]
private static void ReleaseDelegateProxyImplementationForMulti(Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetFontExtentsProxyDelegate")]
private static bool FontExtentsProxyImplementation(IntPtr font, Void* fontData, FontExtents* extents, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetNominalGlyphProxyDelegate")]
private static bool NominalGlyphProxyImplementation(IntPtr font, Void* fontData, UInt32 unicode, UInt32* glyph, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetNominalGlyphsProxyDelegate")]
private static UInt32 NominalGlyphsProxyImplementation(IntPtr font, Void* fontData, UInt32 count, UInt32* firstUnicode, UInt32 unicodeStride, UInt32* firstGlyph, UInt32 glyphStride, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetVariationGlyphProxyDelegate")]
private static bool VariationGlyphProxyImplementation(IntPtr font, Void* fontData, UInt32 unicode, UInt32 variationSelector, UInt32* glyph, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetGlyphAdvanceProxyDelegate")]
private static int GlyphAdvanceProxyImplementation(IntPtr font, Void* fontData, UInt32 glyph, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetGlyphAdvancesProxyDelegate")]
private static void GlyphAdvancesProxyImplementation(IntPtr font, Void* fontData, UInt32 count, UInt32* firstGlyph, UInt32 glyphStride, Int32* firstAdvance, UInt32 advanceStride, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetGlyphOriginProxyDelegate")]
private static bool GlyphOriginProxyImplementation(IntPtr font, Void* fontData, UInt32 glyph, Int32* x, Int32* y, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetGlyphKerningProxyDelegate")]
private static int GlyphKerningProxyImplementation(IntPtr font, Void* fontData, UInt32 firstGlyph, UInt32 secondGlyph, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetGlyphExtentsProxyDelegate")]
private static bool GlyphExtentsProxyImplementation(IntPtr font, Void* fontData, UInt32 glyph, GlyphExtents* extents, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetGlyphContourPointProxyDelegate")]
private static bool GlyphContourPointProxyImplementation(IntPtr font, Void* fontData, UInt32 glyph, UInt32 pointIndex, Int32* x, Int32* y, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetGlyphNameProxyDelegate")]
private static bool GlyphNameProxyImplementation(IntPtr font, Void* fontData, UInt32 glyph, Void* nameBuffer, UInt32 size, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.FontGetGlyphFromNameProxyDelegate")]
private static bool GlyphFromNameProxyImplementation(IntPtr font, Void* fontData, Void* name, int len, UInt32* glyph, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.UnicodeCombiningClassProxyDelegate")]
private static int CombiningClassProxyImplementation(IntPtr ufuncs, UInt32 unicode, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.UnicodeGeneralCategoryProxyDelegate")]
private static int GeneralCategoryProxyImplementation(IntPtr ufuncs, UInt32 unicode, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.UnicodeMirroringProxyDelegate")]
private static UInt32 MirroringProxyImplementation(IntPtr ufuncs, UInt32 unicode, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.UnicodeScriptProxyDelegate")]
private static UInt32 ScriptProxyImplementation(IntPtr ufuncs, UInt32 unicode, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.UnicodeComposeProxyDelegate")]
private static bool ComposeProxyImplementation(IntPtr ufuncs, UInt32 a, UInt32 b, UInt32* ab, Void* context);
    [MonoPInvokeCallbackAttribute("HarfBuzzSharp.UnicodeDecomposeProxyDelegate")]
private static bool DecomposeProxyImplementation(IntPtr ufuncs, UInt32 ab, UInt32* a, UInt32* b, Void* context);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.DestroyProxyDelegate : MulticastDelegate {
    public DestroyProxyDelegate(object object, IntPtr method);
    public virtual void Invoke(Void* user_data);
    public virtual IAsyncResult BeginInvoke(Void* user_data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum HarfBuzzSharp.Direction : Enum {
    public int value__;
    public static Direction Invalid;
    public static Direction LeftToRight;
    public static Direction RightToLeft;
    public static Direction TopToBottom;
    public static Direction BottomToTop;
}
public class HarfBuzzSharp.Face : NativeObject {
    private static Lazy`1<Face> emptyFace;
    public static Face Empty { get; }
    public int Index { get; public set; }
    public int UnitsPerEm { get; public set; }
    public int GlyphCount { get; public set; }
    public Tag[] Tables { get; }
    public bool IsImmutable { get; }
    public Face(Blob blob, UInt32 index);
    public Face(Blob blob, int index);
    public Face(GetTableDelegate getTable);
    public Face(GetTableDelegate getTable, ReleaseDelegate destroy);
    internal Face(IntPtr handle);
    private static Face();
    public static Face get_Empty();
    public int get_Index();
    public void set_Index(int value);
    public int get_UnitsPerEm();
    public void set_UnitsPerEm(int value);
    public int get_GlyphCount();
    public void set_GlyphCount(int value);
    public Tag[] get_Tables();
    public Blob ReferenceTable(Tag table);
    public bool get_IsImmutable();
    public void MakeImmutable();
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeHandler();
}
public class HarfBuzzSharp.Feature : ValueType {
    private static int MaxFeatureStringSize;
    private UInt32 tag;
    private UInt32 value;
    private UInt32 start;
    private UInt32 end;
    public Tag Tag { get; public set; }
    public UInt32 Value { get; public set; }
    public UInt32 Start { get; public set; }
    public UInt32 End { get; public set; }
    public Feature(Tag tag);
    public Feature(Tag tag, UInt32 value);
    public Feature(Tag tag, UInt32 value, UInt32 start, UInt32 end);
    [IsReadOnlyAttribute]
public Tag get_Tag();
    public void set_Tag(Tag value);
    [IsReadOnlyAttribute]
public UInt32 get_Value();
    public void set_Value(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_Start();
    public void set_Start(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_End();
    public void set_End(UInt32 value);
    public virtual string ToString();
    public static bool TryParse(string s, Feature& feature);
    public static Feature Parse(string s);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(Feature obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(Feature left, Feature right);
    public static bool op_Inequality(Feature left, Feature right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public class HarfBuzzSharp.Font : NativeObject {
    internal static int NameBufferLength;
    [CompilerGeneratedAttribute]
private Font <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenTypeMetrics <OpenTypeMetrics>k__BackingField;
    public Font Parent { get; }
    public OpenTypeMetrics OpenTypeMetrics { get; }
    public String[] SupportedShapers { get; }
    public Font(Face face);
    public Font(Font parent);
    [CompilerGeneratedAttribute]
public Font get_Parent();
    [CompilerGeneratedAttribute]
public OpenTypeMetrics get_OpenTypeMetrics();
    public String[] get_SupportedShapers();
    public void SetFontFunctions(FontFunctions fontFunctions);
    public void SetFontFunctions(FontFunctions fontFunctions, object fontData);
    public void SetFontFunctions(FontFunctions fontFunctions, object fontData, ReleaseDelegate destroy);
    public void GetScale(Int32& xScale, Int32& yScale);
    public void SetScale(int xScale, int yScale);
    public bool TryGetHorizontalFontExtents(FontExtents& extents);
    public bool TryGetVerticalFontExtents(FontExtents& extents);
    public bool TryGetNominalGlyph(int unicode, UInt32& glyph);
    public bool TryGetNominalGlyph(UInt32 unicode, UInt32& glyph);
    public bool TryGetVariationGlyph(int unicode, UInt32& glyph);
    public bool TryGetVariationGlyph(UInt32 unicode, UInt32& glyph);
    public bool TryGetVariationGlyph(int unicode, UInt32 variationSelector, UInt32& glyph);
    public bool TryGetVariationGlyph(UInt32 unicode, UInt32 variationSelector, UInt32& glyph);
    public int GetHorizontalGlyphAdvance(UInt32 glyph);
    public int GetVerticalGlyphAdvance(UInt32 glyph);
    public Int32[] GetHorizontalGlyphAdvances(ReadOnlySpan`1<UInt32> glyphs);
    public Int32[] GetHorizontalGlyphAdvances(IntPtr firstGlyph, int count);
    public Int32[] GetVerticalGlyphAdvances(ReadOnlySpan`1<UInt32> glyphs);
    public Int32[] GetVerticalGlyphAdvances(IntPtr firstGlyph, int count);
    public bool TryGetHorizontalGlyphOrigin(UInt32 glyph, Int32& xOrigin, Int32& yOrigin);
    public bool TryGetVerticalGlyphOrigin(UInt32 glyph, Int32& xOrigin, Int32& yOrigin);
    public int GetHorizontalGlyphKerning(UInt32 leftGlyph, UInt32 rightGlyph);
    public bool TryGetGlyphExtents(UInt32 glyph, GlyphExtents& extents);
    public bool TryGetGlyphContourPoint(UInt32 glyph, UInt32 pointIndex, Int32& x, Int32& y);
    public bool TryGetGlyphName(UInt32 glyph, String& name);
    public bool TryGetGlyphFromName(string name, UInt32& glyph);
    public bool TryGetGlyph(int unicode, UInt32& glyph);
    public bool TryGetGlyph(UInt32 unicode, UInt32& glyph);
    public bool TryGetGlyph(int unicode, UInt32 variationSelector, UInt32& glyph);
    public bool TryGetGlyph(UInt32 unicode, UInt32 variationSelector, UInt32& glyph);
    public FontExtents GetFontExtentsForDirection(Direction direction);
    public void GetGlyphAdvanceForDirection(UInt32 glyph, Direction direction, Int32& x, Int32& y);
    public Int32[] GetGlyphAdvancesForDirection(ReadOnlySpan`1<UInt32> glyphs, Direction direction);
    public Int32[] GetGlyphAdvancesForDirection(IntPtr firstGlyph, int count, Direction direction);
    public bool TryGetGlyphContourPointForOrigin(UInt32 glyph, UInt32 pointIndex, Direction direction, Int32& x, Int32& y);
    public string GlyphToString(UInt32 glyph);
    public bool TryGetGlyphFromString(string s, UInt32& glyph);
    public void SetFunctionsOpenType();
    public void Shape(Buffer buffer, Feature[] features);
    public void Shape(Buffer buffer, IReadOnlyList`1<Feature> features, IReadOnlyList`1<string> shapers);
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeHandler();
}
public class HarfBuzzSharp.FontExtents : ValueType {
    private int ascender;
    private int descender;
    private int line_gap;
    private int reserved9;
    private int reserved8;
    private int reserved7;
    private int reserved6;
    private int reserved5;
    private int reserved4;
    private int reserved3;
    private int reserved2;
    private int reserved1;
    public int Ascender { get; public set; }
    public int Descender { get; public set; }
    public int LineGap { get; public set; }
    [IsReadOnlyAttribute]
public int get_Ascender();
    public void set_Ascender(int value);
    [IsReadOnlyAttribute]
public int get_Descender();
    public void set_Descender(int value);
    [IsReadOnlyAttribute]
public int get_LineGap();
    public void set_LineGap(int value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(FontExtents obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(FontExtents left, FontExtents right);
    public static bool op_Inequality(FontExtents left, FontExtents right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public class HarfBuzzSharp.FontExtentsDelegate : MulticastDelegate {
    public FontExtentsDelegate(object object, IntPtr method);
    public virtual bool Invoke(Font font, object fontData, FontExtents& extents);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, FontExtents& extents, AsyncCallback callback, object object);
    public virtual bool EndInvoke(FontExtents& extents, IAsyncResult result);
}
public class HarfBuzzSharp.FontFunctions : NativeObject {
    private static Lazy`1<FontFunctions> emptyFontFunctions;
    public static FontFunctions Empty { get; }
    public bool IsImmutable { get; }
    internal FontFunctions(IntPtr handle);
    private static FontFunctions();
    public static FontFunctions get_Empty();
    public bool get_IsImmutable();
    public void MakeImmutable();
    public void SetHorizontalFontExtentsDelegate(FontExtentsDelegate del, ReleaseDelegate destroy);
    public void SetVerticalFontExtentsDelegate(FontExtentsDelegate del, ReleaseDelegate destroy);
    public void SetNominalGlyphDelegate(NominalGlyphDelegate del, ReleaseDelegate destroy);
    public void SetNominalGlyphsDelegate(NominalGlyphsDelegate del, ReleaseDelegate destroy);
    public void SetVariationGlyphDelegate(VariationGlyphDelegate del, ReleaseDelegate destroy);
    public void SetHorizontalGlyphAdvanceDelegate(GlyphAdvanceDelegate del, ReleaseDelegate destroy);
    public void SetVerticalGlyphAdvanceDelegate(GlyphAdvanceDelegate del, ReleaseDelegate destroy);
    public void SetHorizontalGlyphAdvancesDelegate(GlyphAdvancesDelegate del, ReleaseDelegate destroy);
    public void SetVerticalGlyphAdvancesDelegate(GlyphAdvancesDelegate del, ReleaseDelegate destroy);
    public void SetHorizontalGlyphOriginDelegate(GlyphOriginDelegate del, ReleaseDelegate destroy);
    public void SetVerticalGlyphOriginDelegate(GlyphOriginDelegate del, ReleaseDelegate destroy);
    public void SetHorizontalGlyphKerningDelegate(GlyphKerningDelegate del, ReleaseDelegate destroy);
    public void SetGlyphExtentsDelegate(GlyphExtentsDelegate del, ReleaseDelegate destroy);
    public void SetGlyphContourPointDelegate(GlyphContourPointDelegate del, ReleaseDelegate destroy);
    public void SetGlyphNameDelegate(GlyphNameDelegate del, ReleaseDelegate destroy);
    public void SetGlyphFromNameDelegate(GlyphFromNameDelegate del, ReleaseDelegate destroy);
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeHandler();
    private void VerifyParameters(Delegate del);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetFontExtentsProxyDelegate : MulticastDelegate {
    public FontGetFontExtentsProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, FontExtents* extents, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, FontExtents* extents, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphAdvanceProxyDelegate : MulticastDelegate {
    public FontGetGlyphAdvanceProxyDelegate(object object, IntPtr method);
    public virtual int Invoke(IntPtr font, Void* font_data, UInt32 glyph, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 glyph, Void* user_data, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphAdvancesProxyDelegate : MulticastDelegate {
    public FontGetGlyphAdvancesProxyDelegate(object object, IntPtr method);
    public virtual void Invoke(IntPtr font, Void* font_data, UInt32 count, UInt32* first_glyph, UInt32 glyph_stride, Int32* first_advance, UInt32 advance_stride, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 count, UInt32* first_glyph, UInt32 glyph_stride, Int32* first_advance, UInt32 advance_stride, Void* user_data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphContourPointProxyDelegate : MulticastDelegate {
    public FontGetGlyphContourPointProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, UInt32 glyph, UInt32 point_index, Int32* x, Int32* y, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 glyph, UInt32 point_index, Int32* x, Int32* y, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphExtentsProxyDelegate : MulticastDelegate {
    public FontGetGlyphExtentsProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, UInt32 glyph, GlyphExtents* extents, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 glyph, GlyphExtents* extents, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphFromNameProxyDelegate : MulticastDelegate {
    public FontGetGlyphFromNameProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, Void* name, int len, UInt32* glyph, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, Void* name, int len, UInt32* glyph, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphKerningProxyDelegate : MulticastDelegate {
    public FontGetGlyphKerningProxyDelegate(object object, IntPtr method);
    public virtual int Invoke(IntPtr font, Void* font_data, UInt32 first_glyph, UInt32 second_glyph, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 first_glyph, UInt32 second_glyph, Void* user_data, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphNameProxyDelegate : MulticastDelegate {
    public FontGetGlyphNameProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, UInt32 glyph, Void* name, UInt32 size, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 glyph, Void* name, UInt32 size, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphOriginProxyDelegate : MulticastDelegate {
    public FontGetGlyphOriginProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, UInt32 glyph, Int32* x, Int32* y, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 glyph, Int32* x, Int32* y, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetGlyphProxyDelegate : MulticastDelegate {
    public FontGetGlyphProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, UInt32 unicode, UInt32 variation_selector, UInt32* glyph, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 unicode, UInt32 variation_selector, UInt32* glyph, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetNominalGlyphProxyDelegate : MulticastDelegate {
    public FontGetNominalGlyphProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, UInt32 unicode, UInt32* glyph, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 unicode, UInt32* glyph, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetNominalGlyphsProxyDelegate : MulticastDelegate {
    public FontGetNominalGlyphsProxyDelegate(object object, IntPtr method);
    public virtual UInt32 Invoke(IntPtr font, Void* font_data, UInt32 count, UInt32* first_unicode, UInt32 unicode_stride, UInt32* first_glyph, UInt32 glyph_stride, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 count, UInt32* first_unicode, UInt32 unicode_stride, UInt32* first_glyph, UInt32 glyph_stride, Void* user_data, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.FontGetVariationGlyphProxyDelegate : MulticastDelegate {
    public FontGetVariationGlyphProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr font, Void* font_data, UInt32 unicode, UInt32 variation_selector, UInt32* glyph, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr font, Void* font_data, UInt32 unicode, UInt32 variation_selector, UInt32* glyph, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class HarfBuzzSharp.FontUserData : object {
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FontData>k__BackingField;
    public Font Font { get; }
    public object FontData { get; }
    public FontUserData(Font font, object fontData);
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public object get_FontData();
}
public class HarfBuzzSharp.GeneralCategoryDelegate : MulticastDelegate {
    public GeneralCategoryDelegate(object object, IntPtr method);
    public virtual UnicodeGeneralCategory Invoke(UnicodeFunctions ufuncs, UInt32 unicode);
    public virtual IAsyncResult BeginInvoke(UnicodeFunctions ufuncs, UInt32 unicode, AsyncCallback callback, object object);
    public virtual UnicodeGeneralCategory EndInvoke(IAsyncResult result);
}
internal class HarfBuzzSharp.GetMultiDelegateDelegate : MulticastDelegate {
    public GetMultiDelegateDelegate(object object, IntPtr method);
    public virtual Delegate Invoke(Type index);
    public virtual IAsyncResult BeginInvoke(Type index, AsyncCallback callback, object object);
    public virtual Delegate EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.GetTableDelegate : MulticastDelegate {
    public GetTableDelegate(object object, IntPtr method);
    public virtual Blob Invoke(Face face, Tag tag);
    public virtual IAsyncResult BeginInvoke(Face face, Tag tag, AsyncCallback callback, object object);
    public virtual Blob EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.GlyphAdvanceDelegate : MulticastDelegate {
    public GlyphAdvanceDelegate(object object, IntPtr method);
    public virtual int Invoke(Font font, object fontData, UInt32 glyph);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 glyph, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.GlyphAdvancesDelegate : MulticastDelegate {
    public GlyphAdvancesDelegate(object object, IntPtr method);
    public virtual void Invoke(Font font, object fontData, UInt32 count, ReadOnlySpan`1<UInt32> glyphs, Span`1<int> advances);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 count, ReadOnlySpan`1<UInt32> glyphs, Span`1<int> advances, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.GlyphContourPointDelegate : MulticastDelegate {
    public GlyphContourPointDelegate(object object, IntPtr method);
    public virtual bool Invoke(Font font, object fontData, UInt32 glyph, UInt32 pointIndex, Int32& x, Int32& y);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 glyph, UInt32 pointIndex, Int32& x, Int32& y, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Int32& x, Int32& y, IAsyncResult result);
}
public class HarfBuzzSharp.GlyphExtents : ValueType {
    private int x_bearing;
    private int y_bearing;
    private int width;
    private int height;
    public int XBearing { get; public set; }
    public int YBearing { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    [IsReadOnlyAttribute]
public int get_XBearing();
    public void set_XBearing(int value);
    [IsReadOnlyAttribute]
public int get_YBearing();
    public void set_YBearing(int value);
    [IsReadOnlyAttribute]
public int get_Width();
    public void set_Width(int value);
    [IsReadOnlyAttribute]
public int get_Height();
    public void set_Height(int value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(GlyphExtents obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(GlyphExtents left, GlyphExtents right);
    public static bool op_Inequality(GlyphExtents left, GlyphExtents right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public class HarfBuzzSharp.GlyphExtentsDelegate : MulticastDelegate {
    public GlyphExtentsDelegate(object object, IntPtr method);
    public virtual bool Invoke(Font font, object fontData, UInt32 glyph, GlyphExtents& extents);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 glyph, GlyphExtents& extents, AsyncCallback callback, object object);
    public virtual bool EndInvoke(GlyphExtents& extents, IAsyncResult result);
}
[FlagsAttribute]
public enum HarfBuzzSharp.GlyphFlags : Enum {
    public int value__;
    public static GlyphFlags UnsafeToBreak;
    public static GlyphFlags Defined;
}
public class HarfBuzzSharp.GlyphFromNameDelegate : MulticastDelegate {
    public GlyphFromNameDelegate(object object, IntPtr method);
    public virtual bool Invoke(Font font, object fontData, string name, UInt32& glyph);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, string name, UInt32& glyph, AsyncCallback callback, object object);
    public virtual bool EndInvoke(UInt32& glyph, IAsyncResult result);
}
public class HarfBuzzSharp.GlyphInfo : ValueType {
    private UInt32 codepoint;
    private UInt32 mask;
    private UInt32 cluster;
    private int var1;
    private int var2;
    public GlyphFlags GlyphFlags { get; }
    public UInt32 Codepoint { get; public set; }
    public UInt32 Mask { get; public set; }
    public UInt32 Cluster { get; public set; }
    public GlyphFlags get_GlyphFlags();
    [IsReadOnlyAttribute]
public UInt32 get_Codepoint();
    public void set_Codepoint(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_Mask();
    public void set_Mask(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_Cluster();
    public void set_Cluster(UInt32 value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(GlyphInfo obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(GlyphInfo left, GlyphInfo right);
    public static bool op_Inequality(GlyphInfo left, GlyphInfo right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public class HarfBuzzSharp.GlyphKerningDelegate : MulticastDelegate {
    public GlyphKerningDelegate(object object, IntPtr method);
    public virtual int Invoke(Font font, object fontData, UInt32 firstGlyph, UInt32 secondGlyph);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 firstGlyph, UInt32 secondGlyph, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.GlyphNameDelegate : MulticastDelegate {
    public GlyphNameDelegate(object object, IntPtr method);
    public virtual bool Invoke(Font font, object fontData, UInt32 glyph, String& name);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 glyph, String& name, AsyncCallback callback, object object);
    public virtual bool EndInvoke(String& name, IAsyncResult result);
}
public class HarfBuzzSharp.GlyphOriginDelegate : MulticastDelegate {
    public GlyphOriginDelegate(object object, IntPtr method);
    public virtual bool Invoke(Font font, object fontData, UInt32 glyph, Int32& x, Int32& y);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 glyph, Int32& x, Int32& y, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Int32& x, Int32& y, IAsyncResult result);
}
public class HarfBuzzSharp.GlyphPosition : ValueType {
    private int x_advance;
    private int y_advance;
    private int x_offset;
    private int y_offset;
    private int var;
    public int XAdvance { get; public set; }
    public int YAdvance { get; public set; }
    public int XOffset { get; public set; }
    public int YOffset { get; public set; }
    [IsReadOnlyAttribute]
public int get_XAdvance();
    public void set_XAdvance(int value);
    [IsReadOnlyAttribute]
public int get_YAdvance();
    public void set_YAdvance(int value);
    [IsReadOnlyAttribute]
public int get_XOffset();
    public void set_XOffset(int value);
    [IsReadOnlyAttribute]
public int get_YOffset();
    public void set_YOffset(int value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(GlyphPosition obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(GlyphPosition left, GlyphPosition right);
    public static bool op_Inequality(GlyphPosition left, GlyphPosition right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
internal class HarfBuzzSharp.HarfBuzzApi : object {
    private static string HARFBUZZ;
    internal static IntPtr hb_blob_copy_writable_or_fail(IntPtr blob);
    internal static IntPtr hb_blob_create(Void* data, UInt32 length, MemoryMode mode, Void* user_data, DestroyProxyDelegate destroy);
    internal static IntPtr hb_blob_create_from_file(string file_name);
    internal static IntPtr hb_blob_create_from_file_or_fail(Void* file_name);
    internal static IntPtr hb_blob_create_or_fail(Void* data, UInt32 length, MemoryMode mode, Void* user_data, DestroyProxyDelegate destroy);
    internal static IntPtr hb_blob_create_sub_blob(IntPtr parent, UInt32 offset, UInt32 length);
    internal static void hb_blob_destroy(IntPtr blob);
    internal static Void* hb_blob_get_data(IntPtr blob, UInt32* length);
    internal static Void* hb_blob_get_data_writable(IntPtr blob, UInt32* length);
    internal static IntPtr hb_blob_get_empty();
    internal static UInt32 hb_blob_get_length(IntPtr blob);
    internal static bool hb_blob_is_immutable(IntPtr blob);
    internal static void hb_blob_make_immutable(IntPtr blob);
    internal static IntPtr hb_blob_reference(IntPtr blob);
    internal static void hb_buffer_add(IntPtr buffer, UInt32 codepoint, UInt32 cluster);
    internal static void hb_buffer_add_codepoints(IntPtr buffer, UInt32* text, int text_length, UInt32 item_offset, int item_length);
    internal static void hb_buffer_add_latin1(IntPtr buffer, Byte* text, int text_length, UInt32 item_offset, int item_length);
    internal static void hb_buffer_add_utf16(IntPtr buffer, UInt16* text, int text_length, UInt32 item_offset, int item_length);
    internal static void hb_buffer_add_utf32(IntPtr buffer, UInt32* text, int text_length, UInt32 item_offset, int item_length);
    internal static void hb_buffer_add_utf8(IntPtr buffer, Void* text, int text_length, UInt32 item_offset, int item_length);
    internal static bool hb_buffer_allocation_successful(IntPtr buffer);
    internal static void hb_buffer_append(IntPtr buffer, IntPtr source, UInt32 start, UInt32 end);
    internal static void hb_buffer_clear_contents(IntPtr buffer);
    internal static IntPtr hb_buffer_create();
    internal static bool hb_buffer_deserialize_glyphs(IntPtr buffer, string buf, int buf_len, Void** end_ptr, IntPtr font, SerializeFormat format);
    internal static bool hb_buffer_deserialize_unicode(IntPtr buffer, Void* buf, int buf_len, Void** end_ptr, SerializeFormat format);
    internal static void hb_buffer_destroy(IntPtr buffer);
    internal static BufferDiffFlags hb_buffer_diff(IntPtr buffer, IntPtr reference, UInt32 dottedcircle_glyph, UInt32 position_fuzz);
    internal static ClusterLevel hb_buffer_get_cluster_level(IntPtr buffer);
    internal static ContentType hb_buffer_get_content_type(IntPtr buffer);
    internal static Direction hb_buffer_get_direction(IntPtr buffer);
    internal static IntPtr hb_buffer_get_empty();
    internal static BufferFlags hb_buffer_get_flags(IntPtr buffer);
    internal static GlyphInfo* hb_buffer_get_glyph_infos(IntPtr buffer, UInt32* length);
    internal static GlyphPosition* hb_buffer_get_glyph_positions(IntPtr buffer, UInt32* length);
    internal static UInt32 hb_buffer_get_invisible_glyph(IntPtr buffer);
    internal static IntPtr hb_buffer_get_language(IntPtr buffer);
    internal static UInt32 hb_buffer_get_length(IntPtr buffer);
    internal static UInt32 hb_buffer_get_replacement_codepoint(IntPtr buffer);
    internal static UInt32 hb_buffer_get_script(IntPtr buffer);
    internal static IntPtr hb_buffer_get_unicode_funcs(IntPtr buffer);
    internal static void hb_buffer_guess_segment_properties(IntPtr buffer);
    internal static bool hb_buffer_has_positions(IntPtr buffer);
    internal static void hb_buffer_normalize_glyphs(IntPtr buffer);
    internal static bool hb_buffer_pre_allocate(IntPtr buffer, UInt32 size);
    internal static IntPtr hb_buffer_reference(IntPtr buffer);
    internal static void hb_buffer_reset(IntPtr buffer);
    internal static void hb_buffer_reverse(IntPtr buffer);
    internal static void hb_buffer_reverse_clusters(IntPtr buffer);
    internal static void hb_buffer_reverse_range(IntPtr buffer, UInt32 start, UInt32 end);
    internal static UInt32 hb_buffer_serialize(IntPtr buffer, UInt32 start, UInt32 end, Void* buf, UInt32 buf_size, UInt32* buf_consumed, IntPtr font, SerializeFormat format, SerializeFlag flags);
    internal static SerializeFormat hb_buffer_serialize_format_from_string(Void* str, int len);
    internal static Void* hb_buffer_serialize_format_to_string(SerializeFormat format);
    internal static UInt32 hb_buffer_serialize_glyphs(IntPtr buffer, UInt32 start, UInt32 end, Void* buf, UInt32 buf_size, UInt32* buf_consumed, IntPtr font, SerializeFormat format, SerializeFlag flags);
    internal static Void** hb_buffer_serialize_list_formats();
    internal static UInt32 hb_buffer_serialize_unicode(IntPtr buffer, UInt32 start, UInt32 end, Void* buf, UInt32 buf_size, UInt32* buf_consumed, SerializeFormat format, SerializeFlag flags);
    internal static void hb_buffer_set_cluster_level(IntPtr buffer, ClusterLevel cluster_level);
    internal static void hb_buffer_set_content_type(IntPtr buffer, ContentType content_type);
    internal static void hb_buffer_set_direction(IntPtr buffer, Direction direction);
    internal static void hb_buffer_set_flags(IntPtr buffer, BufferFlags flags);
    internal static void hb_buffer_set_invisible_glyph(IntPtr buffer, UInt32 invisible);
    internal static void hb_buffer_set_language(IntPtr buffer, IntPtr language);
    internal static bool hb_buffer_set_length(IntPtr buffer, UInt32 length);
    internal static void hb_buffer_set_message_func(IntPtr buffer, BufferMessageProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_buffer_set_replacement_codepoint(IntPtr buffer, UInt32 replacement);
    internal static void hb_buffer_set_script(IntPtr buffer, UInt32 script);
    internal static void hb_buffer_set_unicode_funcs(IntPtr buffer, IntPtr unicode_funcs);
    internal static GlyphFlags hb_glyph_info_get_glyph_flags(GlyphInfo* info);
    internal static byte hb_color_get_alpha(UInt32 color);
    internal static byte hb_color_get_blue(UInt32 color);
    internal static byte hb_color_get_green(UInt32 color);
    internal static byte hb_color_get_red(UInt32 color);
    internal static Direction hb_direction_from_string(Void* str, int len);
    internal static Void* hb_direction_to_string(Direction direction);
    internal static bool hb_feature_from_string(string str, int len, Feature* feature);
    internal static void hb_feature_to_string(Feature* feature, Void* buf, UInt32 size);
    internal static IntPtr hb_language_from_string(string str, int len);
    internal static IntPtr hb_language_get_default();
    internal static Void* hb_language_to_string(IntPtr language);
    internal static UInt32 hb_script_from_iso15924_tag(UInt32 tag);
    internal static UInt32 hb_script_from_string(string str, int len);
    internal static Direction hb_script_get_horizontal_direction(UInt32 script);
    internal static UInt32 hb_script_to_iso15924_tag(UInt32 script);
    internal static UInt32 hb_tag_from_string(Void* str, int len);
    internal static void hb_tag_to_string(UInt32 tag, Void* buf);
    internal static bool hb_variation_from_string(Void* str, int len, Variation* variation);
    internal static void hb_variation_to_string(Variation* variation, Void* buf, UInt32 size);
    internal static bool hb_face_builder_add_table(IntPtr face, UInt32 tag, IntPtr blob);
    internal static IntPtr hb_face_builder_create();
    internal static void hb_face_collect_unicodes(IntPtr face, IntPtr out);
    internal static void hb_face_collect_variation_selectors(IntPtr face, IntPtr out);
    internal static void hb_face_collect_variation_unicodes(IntPtr face, UInt32 variation_selector, IntPtr out);
    internal static UInt32 hb_face_count(IntPtr blob);
    internal static IntPtr hb_face_create(IntPtr blob, UInt32 index);
    internal static IntPtr hb_face_create_for_tables(ReferenceTableProxyDelegate reference_table_func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_face_destroy(IntPtr face);
    internal static IntPtr hb_face_get_empty();
    internal static UInt32 hb_face_get_glyph_count(IntPtr face);
    internal static UInt32 hb_face_get_index(IntPtr face);
    internal static UInt32 hb_face_get_table_tags(IntPtr face, UInt32 start_offset, UInt32* table_count, UInt32* table_tags);
    internal static UInt32 hb_face_get_upem(IntPtr face);
    internal static bool hb_face_is_immutable(IntPtr face);
    internal static void hb_face_make_immutable(IntPtr face);
    internal static IntPtr hb_face_reference(IntPtr face);
    internal static IntPtr hb_face_reference_blob(IntPtr face);
    internal static IntPtr hb_face_reference_table(IntPtr face, UInt32 tag);
    internal static void hb_face_set_glyph_count(IntPtr face, UInt32 glyph_count);
    internal static void hb_face_set_index(IntPtr face, UInt32 index);
    internal static void hb_face_set_upem(IntPtr face, UInt32 upem);
    internal static void hb_font_add_glyph_origin_for_direction(IntPtr font, UInt32 glyph, Direction direction, Int32* x, Int32* y);
    internal static IntPtr hb_font_create(IntPtr face);
    internal static IntPtr hb_font_create_sub_font(IntPtr parent);
    internal static void hb_font_destroy(IntPtr font);
    internal static IntPtr hb_font_funcs_create();
    internal static void hb_font_funcs_destroy(IntPtr ffuncs);
    internal static IntPtr hb_font_funcs_get_empty();
    internal static bool hb_font_funcs_is_immutable(IntPtr ffuncs);
    internal static void hb_font_funcs_make_immutable(IntPtr ffuncs);
    internal static IntPtr hb_font_funcs_reference(IntPtr ffuncs);
    internal static void hb_font_funcs_set_font_h_extents_func(IntPtr ffuncs, FontGetFontExtentsProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_font_v_extents_func(IntPtr ffuncs, FontGetFontExtentsProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_contour_point_func(IntPtr ffuncs, FontGetGlyphContourPointProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_extents_func(IntPtr ffuncs, FontGetGlyphExtentsProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_from_name_func(IntPtr ffuncs, FontGetGlyphFromNameProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_h_advance_func(IntPtr ffuncs, FontGetGlyphAdvanceProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_h_advances_func(IntPtr ffuncs, FontGetGlyphAdvancesProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_h_kerning_func(IntPtr ffuncs, FontGetGlyphKerningProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_h_origin_func(IntPtr ffuncs, FontGetGlyphOriginProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_name_func(IntPtr ffuncs, FontGetGlyphNameProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_v_advance_func(IntPtr ffuncs, FontGetGlyphAdvanceProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_v_advances_func(IntPtr ffuncs, FontGetGlyphAdvancesProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_glyph_v_origin_func(IntPtr ffuncs, FontGetGlyphOriginProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_nominal_glyph_func(IntPtr ffuncs, FontGetNominalGlyphProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_nominal_glyphs_func(IntPtr ffuncs, FontGetNominalGlyphsProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_font_funcs_set_variation_glyph_func(IntPtr ffuncs, FontGetVariationGlyphProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static IntPtr hb_font_get_empty();
    internal static void hb_font_get_extents_for_direction(IntPtr font, Direction direction, FontExtents* extents);
    internal static IntPtr hb_font_get_face(IntPtr font);
    internal static bool hb_font_get_glyph(IntPtr font, UInt32 unicode, UInt32 variation_selector, UInt32* glyph);
    internal static void hb_font_get_glyph_advance_for_direction(IntPtr font, UInt32 glyph, Direction direction, Int32* x, Int32* y);
    internal static void hb_font_get_glyph_advances_for_direction(IntPtr font, Direction direction, UInt32 count, UInt32* first_glyph, UInt32 glyph_stride, Int32* first_advance, UInt32 advance_stride);
    internal static bool hb_font_get_glyph_contour_point(IntPtr font, UInt32 glyph, UInt32 point_index, Int32* x, Int32* y);
    internal static bool hb_font_get_glyph_contour_point_for_origin(IntPtr font, UInt32 glyph, UInt32 point_index, Direction direction, Int32* x, Int32* y);
    internal static bool hb_font_get_glyph_extents(IntPtr font, UInt32 glyph, GlyphExtents* extents);
    internal static bool hb_font_get_glyph_extents_for_origin(IntPtr font, UInt32 glyph, Direction direction, GlyphExtents* extents);
    internal static bool hb_font_get_glyph_from_name(IntPtr font, string name, int len, UInt32* glyph);
    internal static int hb_font_get_glyph_h_advance(IntPtr font, UInt32 glyph);
    internal static void hb_font_get_glyph_h_advances(IntPtr font, UInt32 count, UInt32* first_glyph, UInt32 glyph_stride, Int32* first_advance, UInt32 advance_stride);
    internal static int hb_font_get_glyph_h_kerning(IntPtr font, UInt32 left_glyph, UInt32 right_glyph);
    internal static bool hb_font_get_glyph_h_origin(IntPtr font, UInt32 glyph, Int32* x, Int32* y);
    internal static void hb_font_get_glyph_kerning_for_direction(IntPtr font, UInt32 first_glyph, UInt32 second_glyph, Direction direction, Int32* x, Int32* y);
    internal static bool hb_font_get_glyph_name(IntPtr font, UInt32 glyph, Void* name, UInt32 size);
    internal static void hb_font_get_glyph_origin_for_direction(IntPtr font, UInt32 glyph, Direction direction, Int32* x, Int32* y);
    internal static int hb_font_get_glyph_v_advance(IntPtr font, UInt32 glyph);
    internal static void hb_font_get_glyph_v_advances(IntPtr font, UInt32 count, UInt32* first_glyph, UInt32 glyph_stride, Int32* first_advance, UInt32 advance_stride);
    internal static bool hb_font_get_glyph_v_origin(IntPtr font, UInt32 glyph, Int32* x, Int32* y);
    internal static bool hb_font_get_h_extents(IntPtr font, FontExtents* extents);
    internal static bool hb_font_get_nominal_glyph(IntPtr font, UInt32 unicode, UInt32* glyph);
    internal static UInt32 hb_font_get_nominal_glyphs(IntPtr font, UInt32 count, UInt32* first_unicode, UInt32 unicode_stride, UInt32* first_glyph, UInt32 glyph_stride);
    internal static IntPtr hb_font_get_parent(IntPtr font);
    internal static void hb_font_get_ppem(IntPtr font, UInt32* x_ppem, UInt32* y_ppem);
    internal static float hb_font_get_ptem(IntPtr font);
    internal static void hb_font_get_scale(IntPtr font, Int32* x_scale, Int32* y_scale);
    internal static bool hb_font_get_v_extents(IntPtr font, FontExtents* extents);
    internal static Int32* hb_font_get_var_coords_normalized(IntPtr font, UInt32* length);
    internal static bool hb_font_get_variation_glyph(IntPtr font, UInt32 unicode, UInt32 variation_selector, UInt32* glyph);
    internal static bool hb_font_glyph_from_string(IntPtr font, string s, int len, UInt32* glyph);
    internal static void hb_font_glyph_to_string(IntPtr font, UInt32 glyph, Void* s, UInt32 size);
    internal static bool hb_font_is_immutable(IntPtr font);
    internal static void hb_font_make_immutable(IntPtr font);
    internal static IntPtr hb_font_reference(IntPtr font);
    internal static void hb_font_set_face(IntPtr font, IntPtr face);
    internal static void hb_font_set_funcs(IntPtr font, IntPtr klass, Void* font_data, DestroyProxyDelegate destroy);
    internal static void hb_font_set_funcs_data(IntPtr font, Void* font_data, DestroyProxyDelegate destroy);
    internal static void hb_font_set_parent(IntPtr font, IntPtr parent);
    internal static void hb_font_set_ppem(IntPtr font, UInt32 x_ppem, UInt32 y_ppem);
    internal static void hb_font_set_ptem(IntPtr font, float ptem);
    internal static void hb_font_set_scale(IntPtr font, int x_scale, int y_scale);
    internal static void hb_font_set_var_coords_design(IntPtr font, Single* coords, UInt32 coords_length);
    internal static void hb_font_set_var_coords_normalized(IntPtr font, Int32* coords, UInt32 coords_length);
    internal static void hb_font_set_var_named_instance(IntPtr font, UInt32 instance_index);
    internal static void hb_font_set_variations(IntPtr font, Variation* variations, UInt32 variations_length);
    internal static void hb_font_subtract_glyph_origin_for_direction(IntPtr font, UInt32 glyph, Direction direction, Int32* x, Int32* y);
    internal static bool hb_map_allocation_successful(IntPtr map);
    internal static void hb_map_clear(IntPtr map);
    internal static IntPtr hb_map_create();
    internal static void hb_map_del(IntPtr map, UInt32 key);
    internal static void hb_map_destroy(IntPtr map);
    internal static UInt32 hb_map_get(IntPtr map, UInt32 key);
    internal static IntPtr hb_map_get_empty();
    internal static UInt32 hb_map_get_population(IntPtr map);
    internal static bool hb_map_has(IntPtr map, UInt32 key);
    internal static bool hb_map_is_empty(IntPtr map);
    internal static IntPtr hb_map_reference(IntPtr map);
    internal static void hb_map_set(IntPtr map, UInt32 key, UInt32 value);
    internal static UInt32 hb_ot_color_glyph_get_layers(IntPtr face, UInt32 glyph, UInt32 start_offset, UInt32* layer_count, OpenTypeColorLayer* layers);
    internal static IntPtr hb_ot_color_glyph_reference_png(IntPtr font, UInt32 glyph);
    internal static IntPtr hb_ot_color_glyph_reference_svg(IntPtr face, UInt32 glyph);
    internal static bool hb_ot_color_has_layers(IntPtr face);
    internal static bool hb_ot_color_has_palettes(IntPtr face);
    internal static bool hb_ot_color_has_png(IntPtr face);
    internal static bool hb_ot_color_has_svg(IntPtr face);
    internal static OpenTypeNameId hb_ot_color_palette_color_get_name_id(IntPtr face, UInt32 color_index);
    internal static UInt32 hb_ot_color_palette_get_colors(IntPtr face, UInt32 palette_index, UInt32 start_offset, UInt32* color_count, UInt32* colors);
    internal static UInt32 hb_ot_color_palette_get_count(IntPtr face);
    internal static OpenTypeColorPaletteFlags hb_ot_color_palette_get_flags(IntPtr face, UInt32 palette_index);
    internal static OpenTypeNameId hb_ot_color_palette_get_name_id(IntPtr face, UInt32 palette_index);
    internal static void hb_ot_font_set_funcs(IntPtr font);
    internal static void hb_ot_layout_collect_features(IntPtr face, UInt32 table_tag, UInt32* scripts, UInt32* languages, UInt32* features, IntPtr feature_indexes);
    internal static void hb_ot_layout_collect_lookups(IntPtr face, UInt32 table_tag, UInt32* scripts, UInt32* languages, UInt32* features, IntPtr lookup_indexes);
    internal static UInt32 hb_ot_layout_feature_get_characters(IntPtr face, UInt32 table_tag, UInt32 feature_index, UInt32 start_offset, UInt32* char_count, UInt32* characters);
    internal static UInt32 hb_ot_layout_feature_get_lookups(IntPtr face, UInt32 table_tag, UInt32 feature_index, UInt32 start_offset, UInt32* lookup_count, UInt32* lookup_indexes);
    internal static bool hb_ot_layout_feature_get_name_ids(IntPtr face, UInt32 table_tag, UInt32 feature_index, OpenTypeNameId* label_id, OpenTypeNameId* tooltip_id, OpenTypeNameId* sample_id, UInt32* num_named_parameters, OpenTypeNameId* first_param_id);
    internal static UInt32 hb_ot_layout_feature_with_variations_get_lookups(IntPtr face, UInt32 table_tag, UInt32 feature_index, UInt32 variations_index, UInt32 start_offset, UInt32* lookup_count, UInt32* lookup_indexes);
    internal static UInt32 hb_ot_layout_get_attach_points(IntPtr face, UInt32 glyph, UInt32 start_offset, UInt32* point_count, UInt32* point_array);
    internal static bool hb_ot_layout_get_baseline(IntPtr font, OpenTypeLayoutBaselineTag baseline_tag, Direction direction, UInt32 script_tag, UInt32 language_tag, Int32* coord);
    internal static OpenTypeLayoutGlyphClass hb_ot_layout_get_glyph_class(IntPtr face, UInt32 glyph);
    internal static void hb_ot_layout_get_glyphs_in_class(IntPtr face, OpenTypeLayoutGlyphClass klass, IntPtr glyphs);
    internal static UInt32 hb_ot_layout_get_ligature_carets(IntPtr font, Direction direction, UInt32 glyph, UInt32 start_offset, UInt32* caret_count, Int32* caret_array);
    internal static bool hb_ot_layout_get_size_params(IntPtr face, UInt32* design_size, UInt32* subfamily_id, OpenTypeNameId* subfamily_name_id, UInt32* range_start, UInt32* range_end);
    internal static bool hb_ot_layout_has_glyph_classes(IntPtr face);
    internal static bool hb_ot_layout_has_positioning(IntPtr face);
    internal static bool hb_ot_layout_has_substitution(IntPtr face);
    internal static bool hb_ot_layout_language_find_feature(IntPtr face, UInt32 table_tag, UInt32 script_index, UInt32 language_index, UInt32 feature_tag, UInt32* feature_index);
    internal static UInt32 hb_ot_layout_language_get_feature_indexes(IntPtr face, UInt32 table_tag, UInt32 script_index, UInt32 language_index, UInt32 start_offset, UInt32* feature_count, UInt32* feature_indexes);
    internal static UInt32 hb_ot_layout_language_get_feature_tags(IntPtr face, UInt32 table_tag, UInt32 script_index, UInt32 language_index, UInt32 start_offset, UInt32* feature_count, UInt32* feature_tags);
    internal static bool hb_ot_layout_language_get_required_feature(IntPtr face, UInt32 table_tag, UInt32 script_index, UInt32 language_index, UInt32* feature_index, UInt32* feature_tag);
    internal static bool hb_ot_layout_language_get_required_feature_index(IntPtr face, UInt32 table_tag, UInt32 script_index, UInt32 language_index, UInt32* feature_index);
    internal static void hb_ot_layout_lookup_collect_glyphs(IntPtr face, UInt32 table_tag, UInt32 lookup_index, IntPtr glyphs_before, IntPtr glyphs_input, IntPtr glyphs_after, IntPtr glyphs_output);
    internal static UInt32 hb_ot_layout_lookup_get_glyph_alternates(IntPtr face, UInt32 lookup_index, UInt32 glyph, UInt32 start_offset, UInt32* alternate_count, UInt32* alternate_glyphs);
    internal static void hb_ot_layout_lookup_substitute_closure(IntPtr face, UInt32 lookup_index, IntPtr glyphs);
    internal static bool hb_ot_layout_lookup_would_substitute(IntPtr face, UInt32 lookup_index, UInt32* glyphs, UInt32 glyphs_length, bool zero_context);
    internal static void hb_ot_layout_lookups_substitute_closure(IntPtr face, IntPtr lookups, IntPtr glyphs);
    internal static UInt32 hb_ot_layout_script_get_language_tags(IntPtr face, UInt32 table_tag, UInt32 script_index, UInt32 start_offset, UInt32* language_count, UInt32* language_tags);
    internal static bool hb_ot_layout_script_select_language(IntPtr face, UInt32 table_tag, UInt32 script_index, UInt32 language_count, UInt32* language_tags, UInt32* language_index);
    internal static bool hb_ot_layout_table_find_feature_variations(IntPtr face, UInt32 table_tag, Int32* coords, UInt32 num_coords, UInt32* variations_index);
    internal static bool hb_ot_layout_table_find_script(IntPtr face, UInt32 table_tag, UInt32 script_tag, UInt32* script_index);
    internal static UInt32 hb_ot_layout_table_get_feature_tags(IntPtr face, UInt32 table_tag, UInt32 start_offset, UInt32* feature_count, UInt32* feature_tags);
    internal static UInt32 hb_ot_layout_table_get_lookup_count(IntPtr face, UInt32 table_tag);
    internal static UInt32 hb_ot_layout_table_get_script_tags(IntPtr face, UInt32 table_tag, UInt32 start_offset, UInt32* script_count, UInt32* script_tags);
    internal static bool hb_ot_layout_table_select_script(IntPtr face, UInt32 table_tag, UInt32 script_count, UInt32* script_tags, UInt32* script_index, UInt32* chosen_script);
    internal static IntPtr hb_ot_tag_to_language(UInt32 tag);
    internal static UInt32 hb_ot_tag_to_script(UInt32 tag);
    internal static void hb_ot_tags_from_script_and_language(UInt32 script, IntPtr language, UInt32* script_count, UInt32* script_tags, UInt32* language_count, UInt32* language_tags);
    internal static void hb_ot_tags_to_script_and_language(UInt32 script_tag, UInt32 language_tag, UInt32* script, IntPtr* language);
    internal static int hb_ot_math_get_constant(IntPtr font, OpenTypeMathConstant constant);
    internal static UInt32 hb_ot_math_get_glyph_assembly(IntPtr font, UInt32 glyph, Direction direction, UInt32 start_offset, UInt32* parts_count, OpenTypeMathGlyphPart* parts, Int32* italics_correction);
    internal static int hb_ot_math_get_glyph_italics_correction(IntPtr font, UInt32 glyph);
    internal static int hb_ot_math_get_glyph_kerning(IntPtr font, UInt32 glyph, OpenTypeMathKern kern, int correction_height);
    internal static int hb_ot_math_get_glyph_top_accent_attachment(IntPtr font, UInt32 glyph);
    internal static UInt32 hb_ot_math_get_glyph_variants(IntPtr font, UInt32 glyph, Direction direction, UInt32 start_offset, UInt32* variants_count, OpenTypeMathGlyphVariant* variants);
    internal static int hb_ot_math_get_min_connector_overlap(IntPtr font, Direction direction);
    internal static bool hb_ot_math_has_data(IntPtr face);
    internal static bool hb_ot_math_is_glyph_extended_shape(IntPtr face, UInt32 glyph);
    internal static UInt32 hb_ot_meta_get_entry_tags(IntPtr face, UInt32 start_offset, UInt32* entries_count, OpenTypeMetaTag* entries);
    internal static IntPtr hb_ot_meta_reference_entry(IntPtr face, OpenTypeMetaTag meta_tag);
    internal static bool hb_ot_metrics_get_position(IntPtr font, OpenTypeMetricsTag metrics_tag, Int32* position);
    internal static float hb_ot_metrics_get_variation(IntPtr font, OpenTypeMetricsTag metrics_tag);
    internal static int hb_ot_metrics_get_x_variation(IntPtr font, OpenTypeMetricsTag metrics_tag);
    internal static int hb_ot_metrics_get_y_variation(IntPtr font, OpenTypeMetricsTag metrics_tag);
    internal static UInt32 hb_ot_name_get_utf16(IntPtr face, OpenTypeNameId name_id, IntPtr language, UInt32* text_size, UInt16* text);
    internal static UInt32 hb_ot_name_get_utf32(IntPtr face, OpenTypeNameId name_id, IntPtr language, UInt32* text_size, UInt32* text);
    internal static UInt32 hb_ot_name_get_utf8(IntPtr face, OpenTypeNameId name_id, IntPtr language, UInt32* text_size, Void* text);
    internal static OpenTypeNameEntry* hb_ot_name_list_names(IntPtr face, UInt32* num_entries);
    internal static void hb_ot_shape_glyphs_closure(IntPtr font, IntPtr buffer, Feature* features, UInt32 num_features, IntPtr glyphs);
    internal static void hb_ot_shape_plan_collect_lookups(IntPtr shape_plan, UInt32 table_tag, IntPtr lookup_indexes);
    internal static void hb_set_add(IntPtr set, UInt32 codepoint);
    internal static void hb_set_add_range(IntPtr set, UInt32 first, UInt32 last);
    internal static bool hb_set_allocation_successful(IntPtr set);
    internal static void hb_set_clear(IntPtr set);
    internal static IntPtr hb_set_copy(IntPtr set);
    internal static IntPtr hb_set_create();
    internal static void hb_set_del(IntPtr set, UInt32 codepoint);
    internal static void hb_set_del_range(IntPtr set, UInt32 first, UInt32 last);
    internal static void hb_set_destroy(IntPtr set);
    internal static IntPtr hb_set_get_empty();
    internal static UInt32 hb_set_get_max(IntPtr set);
    internal static UInt32 hb_set_get_min(IntPtr set);
    internal static UInt32 hb_set_get_population(IntPtr set);
    internal static bool hb_set_has(IntPtr set, UInt32 codepoint);
    internal static void hb_set_intersect(IntPtr set, IntPtr other);
    internal static bool hb_set_is_empty(IntPtr set);
    internal static bool hb_set_is_equal(IntPtr set, IntPtr other);
    internal static bool hb_set_is_subset(IntPtr set, IntPtr larger_set);
    internal static bool hb_set_next(IntPtr set, UInt32* codepoint);
    internal static bool hb_set_next_range(IntPtr set, UInt32* first, UInt32* last);
    internal static bool hb_set_previous(IntPtr set, UInt32* codepoint);
    internal static bool hb_set_previous_range(IntPtr set, UInt32* first, UInt32* last);
    internal static IntPtr hb_set_reference(IntPtr set);
    internal static void hb_set_set(IntPtr set, IntPtr other);
    internal static void hb_set_subtract(IntPtr set, IntPtr other);
    internal static void hb_set_symmetric_difference(IntPtr set, IntPtr other);
    internal static void hb_set_union(IntPtr set, IntPtr other);
    internal static void hb_shape(IntPtr font, IntPtr buffer, Feature* features, UInt32 num_features);
    internal static bool hb_shape_full(IntPtr font, IntPtr buffer, Feature* features, UInt32 num_features, Void** shaper_list);
    internal static Void** hb_shape_list_shapers();
    internal static UnicodeCombiningClass hb_unicode_combining_class(IntPtr ufuncs, UInt32 unicode);
    internal static bool hb_unicode_compose(IntPtr ufuncs, UInt32 a, UInt32 b, UInt32* ab);
    internal static bool hb_unicode_decompose(IntPtr ufuncs, UInt32 ab, UInt32* a, UInt32* b);
    internal static IntPtr hb_unicode_funcs_create(IntPtr parent);
    internal static void hb_unicode_funcs_destroy(IntPtr ufuncs);
    internal static IntPtr hb_unicode_funcs_get_default();
    internal static IntPtr hb_unicode_funcs_get_empty();
    internal static IntPtr hb_unicode_funcs_get_parent(IntPtr ufuncs);
    internal static bool hb_unicode_funcs_is_immutable(IntPtr ufuncs);
    internal static void hb_unicode_funcs_make_immutable(IntPtr ufuncs);
    internal static IntPtr hb_unicode_funcs_reference(IntPtr ufuncs);
    internal static void hb_unicode_funcs_set_combining_class_func(IntPtr ufuncs, UnicodeCombiningClassProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_unicode_funcs_set_compose_func(IntPtr ufuncs, UnicodeComposeProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_unicode_funcs_set_decompose_func(IntPtr ufuncs, UnicodeDecomposeProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_unicode_funcs_set_general_category_func(IntPtr ufuncs, UnicodeGeneralCategoryProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_unicode_funcs_set_mirroring_func(IntPtr ufuncs, UnicodeMirroringProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static void hb_unicode_funcs_set_script_func(IntPtr ufuncs, UnicodeScriptProxyDelegate func, Void* user_data, DestroyProxyDelegate destroy);
    internal static UnicodeGeneralCategory hb_unicode_general_category(IntPtr ufuncs, UInt32 unicode);
    internal static UInt32 hb_unicode_mirroring(IntPtr ufuncs, UInt32 unicode);
    internal static UInt32 hb_unicode_script(IntPtr ufuncs, UInt32 unicode);
    internal static void hb_version(UInt32* major, UInt32* minor, UInt32* micro);
    internal static bool hb_version_atleast(UInt32 major, UInt32 minor, UInt32 micro);
    internal static Void* hb_version_string();
}
internal class HarfBuzzSharp.HashCode : ValueType {
    private static UInt32 s_seed;
    private static UInt32 Prime1;
    private static UInt32 Prime2;
    private static UInt32 Prime3;
    private static UInt32 Prime4;
    private static UInt32 Prime5;
    private UInt32 _v1;
    private UInt32 _v2;
    private UInt32 _v3;
    private UInt32 _v4;
    private UInt32 _queue1;
    private UInt32 _queue2;
    private UInt32 _queue3;
    private UInt32 _length;
    private static HashCode();
    private static UInt32 GenerateGlobalSeed();
    private static void Initialize(UInt32& v1, UInt32& v2, UInt32& v3, UInt32& v4);
    private static UInt32 Round(UInt32 hash, UInt32 input);
    private static UInt32 QueueRound(UInt32 hash, UInt32 queuedValue);
    private static UInt32 MixState(UInt32 v1, UInt32 v2, UInt32 v3, UInt32 v4);
    private static UInt32 RotateLeft(UInt32 value, int offset);
    private static UInt32 MixEmptyState();
    private static UInt32 MixFinal(UInt32 hash);
    public void Add(Void* value);
    public void Add(T value);
    private void Add(int value);
    public int ToHashCode();
}
public static class HarfBuzzSharp.Internals.PlatformConfiguration : object {
    private static string LibCLibrary;
    private static string linuxFlavor;
    private static Lazy`1<bool> isGlibcLazy;
    public static bool IsUnix { get; }
    public static bool IsWindows { get; }
    public static bool IsMac { get; }
    public static bool IsLinux { get; }
    public static bool IsArm { get; }
    public static bool Is64Bit { get; }
    public static string LinuxFlavor { get; public set; }
    public static bool IsGlibc { get; }
    private static PlatformConfiguration();
    public static bool get_IsUnix();
    public static bool get_IsWindows();
    public static bool get_IsMac();
    public static bool get_IsLinux();
    public static bool get_IsArm();
    public static bool get_Is64Bit();
    public static string get_LinuxFlavor();
    public static void set_LinuxFlavor(string value);
    public static bool get_IsGlibc();
    private static bool IsGlibcImplementation();
    private static IntPtr gnu_get_libc_version();
}
public class HarfBuzzSharp.Language : NativeObject {
    private static Lazy`1<Language> defaultLanguage;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static Language Default { get; }
    public string Name { get; }
    internal Language(IntPtr handle);
    public Language(CultureInfo culture);
    public Language(string name);
    private static Language();
    public static Language get_Default();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum HarfBuzzSharp.MemoryMode : Enum {
    public int value__;
    public static MemoryMode Duplicate;
    public static MemoryMode ReadOnly;
    public static MemoryMode Writeable;
    public static MemoryMode ReadOnlyMayMakeWriteable;
}
public class HarfBuzzSharp.MirroringDelegate : MulticastDelegate {
    public MirroringDelegate(object object, IntPtr method);
    public virtual UInt32 Invoke(UnicodeFunctions ufuncs, UInt32 unicode);
    public virtual IAsyncResult BeginInvoke(UnicodeFunctions ufuncs, UInt32 unicode, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("64")]
internal class HarfBuzzSharp.MonoPInvokeCallbackAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; private set; }
    public MonoPInvokeCallbackAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
}
public class HarfBuzzSharp.NativeObject : object {
    private bool isDisposed;
    private bool zero;
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    public IntPtr Handle { get; protected set; }
    internal NativeObject(IntPtr handle);
    internal NativeObject(IntPtr handle, bool zero);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public virtual IntPtr get_Handle();
    [CompilerGeneratedAttribute]
protected virtual void set_Handle(IntPtr value);
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeHandler();
    public sealed virtual void Dispose();
    internal static IntPtr StructureArrayToPtr(IReadOnlyList`1<T> items);
    [IteratorStateMachineAttribute("HarfBuzzSharp.NativeObject/<PtrToStringArray>d__13")]
internal static IEnumerable`1<string> PtrToStringArray(IntPtr intPtr);
}
public class HarfBuzzSharp.NominalGlyphDelegate : MulticastDelegate {
    public NominalGlyphDelegate(object object, IntPtr method);
    public virtual bool Invoke(Font font, object fontData, UInt32 unicode, UInt32& glyph);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 unicode, UInt32& glyph, AsyncCallback callback, object object);
    public virtual bool EndInvoke(UInt32& glyph, IAsyncResult result);
}
public class HarfBuzzSharp.NominalGlyphsDelegate : MulticastDelegate {
    public NominalGlyphsDelegate(object object, IntPtr method);
    public virtual UInt32 Invoke(Font font, object fontData, UInt32 count, ReadOnlySpan`1<UInt32> codepoints, Span`1<UInt32> glyphs);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 count, ReadOnlySpan`1<UInt32> codepoints, Span`1<UInt32> glyphs, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.OpenTypeColorLayer : ValueType {
    private UInt32 glyph;
    private UInt32 color_index;
    public UInt32 Glyph { get; public set; }
    public UInt32 ColorIndex { get; public set; }
    [IsReadOnlyAttribute]
public UInt32 get_Glyph();
    public void set_Glyph(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_ColorIndex();
    public void set_ColorIndex(UInt32 value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(OpenTypeColorLayer obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(OpenTypeColorLayer left, OpenTypeColorLayer right);
    public static bool op_Inequality(OpenTypeColorLayer left, OpenTypeColorLayer right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public enum HarfBuzzSharp.OpenTypeColorPaletteFlags : Enum {
    public int value__;
    public static OpenTypeColorPaletteFlags Default;
    public static OpenTypeColorPaletteFlags UsableWithLightBackground;
    public static OpenTypeColorPaletteFlags UsableWithDarkBackground;
}
public enum HarfBuzzSharp.OpenTypeLayoutBaselineTag : Enum {
    public int value__;
    public static OpenTypeLayoutBaselineTag Roman;
    public static OpenTypeLayoutBaselineTag Hanging;
    public static OpenTypeLayoutBaselineTag IdeoFaceBottomOrLeft;
    public static OpenTypeLayoutBaselineTag IdeoFaceTopOrRight;
    public static OpenTypeLayoutBaselineTag IdeoEmboxBottomOrLeft;
    public static OpenTypeLayoutBaselineTag IdeoEmboxTopOrRight;
    public static OpenTypeLayoutBaselineTag Math;
}
public enum HarfBuzzSharp.OpenTypeLayoutGlyphClass : Enum {
    public int value__;
    public static OpenTypeLayoutGlyphClass Unclassified;
    public static OpenTypeLayoutGlyphClass BaseGlyph;
    public static OpenTypeLayoutGlyphClass Ligature;
    public static OpenTypeLayoutGlyphClass Mark;
    public static OpenTypeLayoutGlyphClass Component;
}
public enum HarfBuzzSharp.OpenTypeMathConstant : Enum {
    public int value__;
    public static OpenTypeMathConstant ScriptPercentScaleDown;
    public static OpenTypeMathConstant ScriptScriptPercentScaleDown;
    public static OpenTypeMathConstant DelimitedSubFormulaMinHeight;
    public static OpenTypeMathConstant DisplayOperatorMinHeight;
    public static OpenTypeMathConstant MathLeading;
    public static OpenTypeMathConstant AxisHeight;
    public static OpenTypeMathConstant AccentBaseHeight;
    public static OpenTypeMathConstant FlattenedAccentBaseHeight;
    public static OpenTypeMathConstant SubscriptShiftDown;
    public static OpenTypeMathConstant SubscriptTopMax;
    public static OpenTypeMathConstant SubscriptBaselineDropMin;
    public static OpenTypeMathConstant SuperscriptShiftUp;
    public static OpenTypeMathConstant SuperscriptShiftUpCramped;
    public static OpenTypeMathConstant SuperscriptBottomMin;
    public static OpenTypeMathConstant SuperscriptBaselineDropMax;
    public static OpenTypeMathConstant SubSuperscriptGapMin;
    public static OpenTypeMathConstant SuperscriptBottomMaxWithSubscript;
    public static OpenTypeMathConstant SpaceAfterScript;
    public static OpenTypeMathConstant UpperLimitGapMin;
    public static OpenTypeMathConstant UpperLimitBaselineRiseMin;
    public static OpenTypeMathConstant LowerLimitGapMin;
    public static OpenTypeMathConstant LowerLimitBaselineDropMin;
    public static OpenTypeMathConstant StackTopShiftUp;
    public static OpenTypeMathConstant StackTopDisplayStyleShiftUp;
    public static OpenTypeMathConstant StackBottomShiftDown;
    public static OpenTypeMathConstant StackBottomDisplayStyleShiftDown;
    public static OpenTypeMathConstant StackGapMin;
    public static OpenTypeMathConstant StackDisplayStyleGapMin;
    public static OpenTypeMathConstant StretchStackTopShiftUp;
    public static OpenTypeMathConstant StretchStackBottomShiftDown;
    public static OpenTypeMathConstant StretchStackGapAboveMin;
    public static OpenTypeMathConstant StretchStackGapBelowMin;
    public static OpenTypeMathConstant FractionNumeratorShiftUp;
    public static OpenTypeMathConstant FractionNumeratorDisplayStyleShiftUp;
    public static OpenTypeMathConstant FractionDenominatorShiftDown;
    public static OpenTypeMathConstant FractionDenominatorDisplayStyleShiftDown;
    public static OpenTypeMathConstant FractionNumeratorGapMin;
    public static OpenTypeMathConstant FractionNumDisplayStyleGapMin;
    public static OpenTypeMathConstant FractionRuleThickness;
    public static OpenTypeMathConstant FractionDenominatorGapMin;
    public static OpenTypeMathConstant FractionDenomDisplayStyleGapMin;
    public static OpenTypeMathConstant SkewedFractionHorizontalGap;
    public static OpenTypeMathConstant SkewedFractionVerticalGap;
    public static OpenTypeMathConstant OverbarVerticalGap;
    public static OpenTypeMathConstant OverbarRuleThickness;
    public static OpenTypeMathConstant OverbarExtraAscender;
    public static OpenTypeMathConstant UnderbarVerticalGap;
    public static OpenTypeMathConstant UnderbarRuleThickness;
    public static OpenTypeMathConstant UnderbarExtraDescender;
    public static OpenTypeMathConstant RadicalVerticalGap;
    public static OpenTypeMathConstant RadicalDisplayStyleVerticalGap;
    public static OpenTypeMathConstant RadicalRuleThickness;
    public static OpenTypeMathConstant RadicalExtraAscender;
    public static OpenTypeMathConstant RadicalKernBeforeDegree;
    public static OpenTypeMathConstant RadicalKernAfterDegree;
    public static OpenTypeMathConstant RadicalDegreeBottomRaisePercent;
}
public class HarfBuzzSharp.OpenTypeMathGlyphPart : ValueType {
    private UInt32 glyph;
    private int start_connector_length;
    private int end_connector_length;
    private int full_advance;
    private OpenTypeMathGlyphPartFlags flags;
    public UInt32 Glyph { get; public set; }
    public int StartConnectorLength { get; public set; }
    public int EndConnectorLength { get; public set; }
    public int FullAdvance { get; public set; }
    public OpenTypeMathGlyphPartFlags Flags { get; public set; }
    [IsReadOnlyAttribute]
public UInt32 get_Glyph();
    public void set_Glyph(UInt32 value);
    [IsReadOnlyAttribute]
public int get_StartConnectorLength();
    public void set_StartConnectorLength(int value);
    [IsReadOnlyAttribute]
public int get_EndConnectorLength();
    public void set_EndConnectorLength(int value);
    [IsReadOnlyAttribute]
public int get_FullAdvance();
    public void set_FullAdvance(int value);
    [IsReadOnlyAttribute]
public OpenTypeMathGlyphPartFlags get_Flags();
    public void set_Flags(OpenTypeMathGlyphPartFlags value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(OpenTypeMathGlyphPart obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(OpenTypeMathGlyphPart left, OpenTypeMathGlyphPart right);
    public static bool op_Inequality(OpenTypeMathGlyphPart left, OpenTypeMathGlyphPart right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public enum HarfBuzzSharp.OpenTypeMathGlyphPartFlags : Enum {
    public int value__;
    public static OpenTypeMathGlyphPartFlags Extender;
}
public class HarfBuzzSharp.OpenTypeMathGlyphVariant : ValueType {
    private UInt32 glyph;
    private int advance;
    public UInt32 Glyph { get; public set; }
    public int Advance { get; public set; }
    [IsReadOnlyAttribute]
public UInt32 get_Glyph();
    public void set_Glyph(UInt32 value);
    [IsReadOnlyAttribute]
public int get_Advance();
    public void set_Advance(int value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(OpenTypeMathGlyphVariant obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(OpenTypeMathGlyphVariant left, OpenTypeMathGlyphVariant right);
    public static bool op_Inequality(OpenTypeMathGlyphVariant left, OpenTypeMathGlyphVariant right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public enum HarfBuzzSharp.OpenTypeMathKern : Enum {
    public int value__;
    public static OpenTypeMathKern TopRight;
    public static OpenTypeMathKern TopLeft;
    public static OpenTypeMathKern BottomRight;
    public static OpenTypeMathKern BottomLeft;
}
public enum HarfBuzzSharp.OpenTypeMetaTag : Enum {
    public int value__;
    public static OpenTypeMetaTag DesignLanguages;
    public static OpenTypeMetaTag SupportedLanguages;
}
public class HarfBuzzSharp.OpenTypeMetrics : object {
    private Font font;
    public OpenTypeMetrics(Font font);
    public bool TryGetPosition(OpenTypeMetricsTag metricsTag, Int32& position);
    public float GetVariation(OpenTypeMetricsTag metricsTag);
    public int GetXVariation(OpenTypeMetricsTag metricsTag);
    public int GetYVariation(OpenTypeMetricsTag metricsTag);
}
public enum HarfBuzzSharp.OpenTypeMetricsTag : Enum {
    public int value__;
    public static OpenTypeMetricsTag HorizontalAscender;
    public static OpenTypeMetricsTag HorizontalDescender;
    public static OpenTypeMetricsTag HorizontalLineGap;
    public static OpenTypeMetricsTag HorizontalClippingAscent;
    public static OpenTypeMetricsTag HorizontalClippingDescent;
    public static OpenTypeMetricsTag VerticalAscender;
    public static OpenTypeMetricsTag VerticalDescender;
    public static OpenTypeMetricsTag VerticalLineGap;
    public static OpenTypeMetricsTag HorizontalCaretRise;
    public static OpenTypeMetricsTag HorizontalCaretRun;
    public static OpenTypeMetricsTag HorizontalCaretOffset;
    public static OpenTypeMetricsTag VerticalCaretRise;
    public static OpenTypeMetricsTag VerticalCaretRun;
    public static OpenTypeMetricsTag VerticalCaretOffset;
    public static OpenTypeMetricsTag XHeight;
    public static OpenTypeMetricsTag CapHeight;
    public static OpenTypeMetricsTag SubScriptEmXSize;
    public static OpenTypeMetricsTag SubScriptEmYSize;
    public static OpenTypeMetricsTag SubScriptEmXOffset;
    public static OpenTypeMetricsTag SubScriptEmYOffset;
    public static OpenTypeMetricsTag SuperScriptEmXSize;
    public static OpenTypeMetricsTag SuperScriptEmYSize;
    public static OpenTypeMetricsTag SuperScriptEmXOffset;
    public static OpenTypeMetricsTag SuperScriptEmYOffset;
    public static OpenTypeMetricsTag StrikeoutSize;
    public static OpenTypeMetricsTag StrikeoutOffset;
    public static OpenTypeMetricsTag UnderlineSize;
    public static OpenTypeMetricsTag UnderlineOffset;
}
public class HarfBuzzSharp.OpenTypeNameEntry : ValueType {
    private OpenTypeNameId name_id;
    private int var;
    private IntPtr language;
    public OpenTypeNameId NameId { get; public set; }
    public int Var { get; public set; }
    public IntPtr Language { get; public set; }
    [IsReadOnlyAttribute]
public OpenTypeNameId get_NameId();
    public void set_NameId(OpenTypeNameId value);
    [IsReadOnlyAttribute]
public int get_Var();
    public void set_Var(int value);
    [IsReadOnlyAttribute]
public IntPtr get_Language();
    public void set_Language(IntPtr value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(OpenTypeNameEntry obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(OpenTypeNameEntry left, OpenTypeNameEntry right);
    public static bool op_Inequality(OpenTypeNameEntry left, OpenTypeNameEntry right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public enum HarfBuzzSharp.OpenTypeNameId : Enum {
    public int value__;
    public static OpenTypeNameId Copyright;
    public static OpenTypeNameId FontFamily;
    public static OpenTypeNameId FontSubfamily;
    public static OpenTypeNameId UniqueId;
    public static OpenTypeNameId FullName;
    public static OpenTypeNameId VersionString;
    public static OpenTypeNameId PostscriptName;
    public static OpenTypeNameId Trademark;
    public static OpenTypeNameId Manufacturer;
    public static OpenTypeNameId Designer;
    public static OpenTypeNameId Description;
    public static OpenTypeNameId VendorUrl;
    public static OpenTypeNameId DesignerUrl;
    public static OpenTypeNameId License;
    public static OpenTypeNameId LicenseUrl;
    public static OpenTypeNameId TypographicFamily;
    public static OpenTypeNameId TypographicSubfamily;
    public static OpenTypeNameId MacFullName;
    public static OpenTypeNameId SampleText;
    public static OpenTypeNameId CidFindFontName;
    public static OpenTypeNameId WwsFamily;
    public static OpenTypeNameId WwsSubfamily;
    public static OpenTypeNameId LightBackground;
    public static OpenTypeNameId DarkBackground;
    public static OpenTypeNameId VariationsPostscriptPrefix;
    public static OpenTypeNameId Invalid;
}
public class HarfBuzzSharp.OpenTypeVarAxis : ValueType {
    private UInt32 tag;
    private OpenTypeNameId name_id;
    private float min_value;
    private float default_value;
    private float max_value;
    public UInt32 Tag { get; public set; }
    public OpenTypeNameId NameId { get; public set; }
    public float MinValue { get; public set; }
    public float DefaultValue { get; public set; }
    public float MaxValue { get; public set; }
    [IsReadOnlyAttribute]
public UInt32 get_Tag();
    public void set_Tag(UInt32 value);
    [IsReadOnlyAttribute]
public OpenTypeNameId get_NameId();
    public void set_NameId(OpenTypeNameId value);
    [IsReadOnlyAttribute]
public float get_MinValue();
    public void set_MinValue(float value);
    [IsReadOnlyAttribute]
public float get_DefaultValue();
    public void set_DefaultValue(float value);
    [IsReadOnlyAttribute]
public float get_MaxValue();
    public void set_MaxValue(float value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(OpenTypeVarAxis obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(OpenTypeVarAxis left, OpenTypeVarAxis right);
    public static bool op_Inequality(OpenTypeVarAxis left, OpenTypeVarAxis right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public enum HarfBuzzSharp.OpenTypeVarAxisFlags : Enum {
    public int value__;
    public static OpenTypeVarAxisFlags Hidden;
}
public class HarfBuzzSharp.OpenTypeVarAxisInfo : ValueType {
    private UInt32 axis_index;
    private UInt32 tag;
    private OpenTypeNameId name_id;
    private OpenTypeVarAxisFlags flags;
    private float min_value;
    private float default_value;
    private float max_value;
    private UInt32 reserved;
    public UInt32 AxisIndex { get; public set; }
    public UInt32 Tag { get; public set; }
    public OpenTypeNameId NameId { get; public set; }
    public OpenTypeVarAxisFlags Flags { get; public set; }
    public float MinValue { get; public set; }
    public float DefaultValue { get; public set; }
    public float MaxValue { get; public set; }
    [IsReadOnlyAttribute]
public UInt32 get_AxisIndex();
    public void set_AxisIndex(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_Tag();
    public void set_Tag(UInt32 value);
    [IsReadOnlyAttribute]
public OpenTypeNameId get_NameId();
    public void set_NameId(OpenTypeNameId value);
    [IsReadOnlyAttribute]
public OpenTypeVarAxisFlags get_Flags();
    public void set_Flags(OpenTypeVarAxisFlags value);
    [IsReadOnlyAttribute]
public float get_MinValue();
    public void set_MinValue(float value);
    [IsReadOnlyAttribute]
public float get_DefaultValue();
    public void set_DefaultValue(float value);
    [IsReadOnlyAttribute]
public float get_MaxValue();
    public void set_MaxValue(float value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(OpenTypeVarAxisInfo obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(OpenTypeVarAxisInfo left, OpenTypeVarAxisInfo right);
    public static bool op_Inequality(OpenTypeVarAxisInfo left, OpenTypeVarAxisInfo right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.ReferenceTableProxyDelegate : MulticastDelegate {
    public ReferenceTableProxyDelegate(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr face, UInt32 tag, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr face, UInt32 tag, Void* user_data, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.ReleaseDelegate : MulticastDelegate {
    public ReleaseDelegate(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "12.3.99.85")]
public class HarfBuzzSharp.Resource : object {
    private static Resource();
}
public class HarfBuzzSharp.Script : ValueType {
    private Tag tag;
    public static Script Invalid;
    public static Script MaxValue;
    public static Script MaxValueSigned;
    public static Script Common;
    public static Script Inherited;
    public static Script Unknown;
    public static Script Arabic;
    public static Script Armenian;
    public static Script Bengali;
    public static Script Cyrillic;
    public static Script Devanagari;
    public static Script Georgian;
    public static Script Greek;
    public static Script Gujarati;
    public static Script Gurmukhi;
    public static Script Hangul;
    public static Script Han;
    public static Script Hebrew;
    public static Script Hiragana;
    public static Script Kannada;
    public static Script Katakana;
    public static Script Lao;
    public static Script Latin;
    public static Script Malayalam;
    public static Script Oriya;
    public static Script Tamil;
    public static Script Telugu;
    public static Script Thai;
    public static Script Tibetan;
    public static Script Bopomofo;
    public static Script Braille;
    public static Script CanadianSyllabics;
    public static Script Cherokee;
    public static Script Ethiopic;
    public static Script Khmer;
    public static Script Mongolian;
    public static Script Myanmar;
    public static Script Ogham;
    public static Script Runic;
    public static Script Sinhala;
    public static Script Syriac;
    public static Script Thaana;
    public static Script Yi;
    public static Script Deseret;
    public static Script Gothic;
    public static Script OldItalic;
    public static Script Buhid;
    public static Script Hanunoo;
    public static Script Tagalog;
    public static Script Tagbanwa;
    public static Script Cypriot;
    public static Script Limbu;
    public static Script LinearB;
    public static Script Osmanya;
    public static Script Shavian;
    public static Script TaiLe;
    public static Script Ugaritic;
    public static Script Buginese;
    public static Script Coptic;
    public static Script Glagolitic;
    public static Script Kharoshthi;
    public static Script NewTaiLue;
    public static Script OldPersian;
    public static Script SylotiNagri;
    public static Script Tifinagh;
    public static Script Balinese;
    public static Script Cuneiform;
    public static Script Nko;
    public static Script PhagsPa;
    public static Script Phoenician;
    public static Script Carian;
    public static Script Cham;
    public static Script KayahLi;
    public static Script Lepcha;
    public static Script Lycian;
    public static Script Lydian;
    public static Script OlChiki;
    public static Script Rejang;
    public static Script Saurashtra;
    public static Script Sundanese;
    public static Script Vai;
    public static Script Avestan;
    public static Script Bamum;
    public static Script EgyptianHieroglyphs;
    public static Script ImperialAramaic;
    public static Script InscriptionalPahlavi;
    public static Script InscriptionalParthian;
    public static Script Javanese;
    public static Script Kaithi;
    public static Script Lisu;
    public static Script MeeteiMayek;
    public static Script OldSouthArabian;
    public static Script OldTurkic;
    public static Script Samaritan;
    public static Script TaiTham;
    public static Script TaiViet;
    public static Script Batak;
    public static Script Brahmi;
    public static Script Mandaic;
    public static Script Chakma;
    public static Script MeroiticCursive;
    public static Script MeroiticHieroglyphs;
    public static Script Miao;
    public static Script Sharada;
    public static Script SoraSompeng;
    public static Script Takri;
    public static Script BassaVah;
    public static Script CaucasianAlbanian;
    public static Script Duployan;
    public static Script Elbasan;
    public static Script Grantha;
    public static Script Khojki;
    public static Script Khudawadi;
    public static Script LinearA;
    public static Script Mahajani;
    public static Script Manichaean;
    public static Script MendeKikakui;
    public static Script Modi;
    public static Script Mro;
    public static Script Nabataean;
    public static Script OldNorthArabian;
    public static Script OldPermic;
    public static Script PahawhHmong;
    public static Script Palmyrene;
    public static Script PauCinHau;
    public static Script PsalterPahlavi;
    public static Script Siddham;
    public static Script Tirhuta;
    public static Script WarangCiti;
    public static Script Ahom;
    public static Script AnatolianHieroglyphs;
    public static Script Hatran;
    public static Script Multani;
    public static Script OldHungarian;
    public static Script Signwriting;
    public static Script Adlam;
    public static Script Bhaiksuki;
    public static Script Marchen;
    public static Script Osage;
    public static Script Tangut;
    public static Script Newa;
    public static Script MasaramGondi;
    public static Script Nushu;
    public static Script Soyombo;
    public static Script ZanabazarSquare;
    public static Script Dogra;
    public static Script GunjalaGondi;
    public static Script HanifiRohingya;
    public static Script Makasar;
    public static Script Medefaidrin;
    public static Script OldSogdian;
    public static Script Sogdian;
    public Direction HorizontalDirection { get; }
    private Script(Tag tag);
    private static Script();
    public Direction get_HorizontalDirection();
    public static Script Parse(string str);
    public static bool TryParse(string str, Script& script);
    public virtual string ToString();
    public static UInt32 op_Implicit(Script script);
    public static Script op_Implicit(UInt32 tag);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Script other);
    public virtual int GetHashCode();
}
public class HarfBuzzSharp.ScriptDelegate : MulticastDelegate {
    public ScriptDelegate(object object, IntPtr method);
    public virtual Script Invoke(UnicodeFunctions ufuncs, UInt32 unicode);
    public virtual IAsyncResult BeginInvoke(UnicodeFunctions ufuncs, UInt32 unicode, AsyncCallback callback, object object);
    public virtual Script EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum HarfBuzzSharp.SerializeFlag : Enum {
    public int value__;
    public static SerializeFlag Default;
    public static SerializeFlag NoClusters;
    public static SerializeFlag NoPositions;
    public static SerializeFlag NoGlyphNames;
    public static SerializeFlag GlyphExtents;
    public static SerializeFlag GlyphFlags;
    public static SerializeFlag NoAdvances;
}
public enum HarfBuzzSharp.SerializeFormat : Enum {
    public int value__;
    public static SerializeFormat Text;
    public static SerializeFormat Json;
    public static SerializeFormat Invalid;
}
public class HarfBuzzSharp.Tag : ValueType {
    public static Tag None;
    public static Tag Max;
    public static Tag MaxSigned;
    private UInt32 value;
    private Tag(UInt32 value);
    private Tag(byte c1, byte c2, byte c3, byte c4);
    public Tag(char c1, char c2, char c3, char c4);
    private static Tag();
    public static Tag Parse(string tag);
    public virtual string ToString();
    public static UInt32 op_Implicit(Tag tag);
    public static Tag op_Implicit(UInt32 tag);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Tag other);
    public virtual int GetHashCode();
}
public enum HarfBuzzSharp.UnicodeCombiningClass : Enum {
    public int value__;
    public static UnicodeCombiningClass NotReordered;
    public static UnicodeCombiningClass Overlay;
    public static UnicodeCombiningClass Nukta;
    public static UnicodeCombiningClass KanaVoicing;
    public static UnicodeCombiningClass Virama;
    public static UnicodeCombiningClass CCC10;
    public static UnicodeCombiningClass CCC11;
    public static UnicodeCombiningClass CCC12;
    public static UnicodeCombiningClass CCC13;
    public static UnicodeCombiningClass CCC14;
    public static UnicodeCombiningClass CCC15;
    public static UnicodeCombiningClass CCC16;
    public static UnicodeCombiningClass CCC17;
    public static UnicodeCombiningClass CCC18;
    public static UnicodeCombiningClass CCC19;
    public static UnicodeCombiningClass CCC20;
    public static UnicodeCombiningClass CCC21;
    public static UnicodeCombiningClass CCC22;
    public static UnicodeCombiningClass CCC23;
    public static UnicodeCombiningClass CCC24;
    public static UnicodeCombiningClass CCC25;
    public static UnicodeCombiningClass CCC26;
    public static UnicodeCombiningClass CCC27;
    public static UnicodeCombiningClass CCC28;
    public static UnicodeCombiningClass CCC29;
    public static UnicodeCombiningClass CCC30;
    public static UnicodeCombiningClass CCC31;
    public static UnicodeCombiningClass CCC32;
    public static UnicodeCombiningClass CCC33;
    public static UnicodeCombiningClass CCC34;
    public static UnicodeCombiningClass CCC35;
    public static UnicodeCombiningClass CCC36;
    public static UnicodeCombiningClass CCC84;
    public static UnicodeCombiningClass CCC91;
    public static UnicodeCombiningClass CCC103;
    public static UnicodeCombiningClass CCC107;
    public static UnicodeCombiningClass CCC118;
    public static UnicodeCombiningClass CCC122;
    public static UnicodeCombiningClass CCC129;
    public static UnicodeCombiningClass CCC130;
    public static UnicodeCombiningClass CCC133;
    public static UnicodeCombiningClass AttachedBelowLeft;
    public static UnicodeCombiningClass AttachedBelow;
    public static UnicodeCombiningClass AttachedAbove;
    public static UnicodeCombiningClass AttachedAboveRight;
    public static UnicodeCombiningClass BelowLeft;
    public static UnicodeCombiningClass Below;
    public static UnicodeCombiningClass BelowRight;
    public static UnicodeCombiningClass Left;
    public static UnicodeCombiningClass Right;
    public static UnicodeCombiningClass AboveLeft;
    public static UnicodeCombiningClass Above;
    public static UnicodeCombiningClass AboveRight;
    public static UnicodeCombiningClass DoubleBelow;
    public static UnicodeCombiningClass DoubleAbove;
    public static UnicodeCombiningClass IotaSubscript;
    public static UnicodeCombiningClass Invalid;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.UnicodeCombiningClassProxyDelegate : MulticastDelegate {
    public UnicodeCombiningClassProxyDelegate(object object, IntPtr method);
    public virtual int Invoke(IntPtr ufuncs, UInt32 unicode, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr ufuncs, UInt32 unicode, Void* user_data, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.UnicodeComposeProxyDelegate : MulticastDelegate {
    public UnicodeComposeProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr ufuncs, UInt32 a, UInt32 b, UInt32* ab, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr ufuncs, UInt32 a, UInt32 b, UInt32* ab, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.UnicodeDecomposeCompatibilityProxyDelegate : MulticastDelegate {
    public UnicodeDecomposeCompatibilityProxyDelegate(object object, IntPtr method);
    public virtual UInt32 Invoke(IntPtr ufuncs, UInt32 u, UInt32* decomposed, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr ufuncs, UInt32 u, UInt32* decomposed, Void* user_data, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.UnicodeDecomposeProxyDelegate : MulticastDelegate {
    public UnicodeDecomposeProxyDelegate(object object, IntPtr method);
    public virtual bool Invoke(IntPtr ufuncs, UInt32 ab, UInt32* a, UInt32* b, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr ufuncs, UInt32 ab, UInt32* a, UInt32* b, Void* user_data, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.UnicodeEastasianWidthProxyDelegate : MulticastDelegate {
    public UnicodeEastasianWidthProxyDelegate(object object, IntPtr method);
    public virtual UInt32 Invoke(IntPtr ufuncs, UInt32 unicode, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr ufuncs, UInt32 unicode, Void* user_data, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.UnicodeFunctions : NativeObject {
    private static Lazy`1<UnicodeFunctions> defaultFunctions;
    private static Lazy`1<UnicodeFunctions> emptyFunctions;
    [CompilerGeneratedAttribute]
private UnicodeFunctions <Parent>k__BackingField;
    public static UnicodeFunctions Default { get; }
    public static UnicodeFunctions Empty { get; }
    public UnicodeFunctions Parent { get; }
    public bool IsImmutable { get; }
    internal UnicodeFunctions(IntPtr handle);
    public UnicodeFunctions(UnicodeFunctions parent);
    private static UnicodeFunctions();
    public static UnicodeFunctions get_Default();
    public static UnicodeFunctions get_Empty();
    [CompilerGeneratedAttribute]
public UnicodeFunctions get_Parent();
    public bool get_IsImmutable();
    public void MakeImmutable();
    public UnicodeCombiningClass GetCombiningClass(int unicode);
    public UnicodeCombiningClass GetCombiningClass(UInt32 unicode);
    public UnicodeGeneralCategory GetGeneralCategory(int unicode);
    public UnicodeGeneralCategory GetGeneralCategory(UInt32 unicode);
    public int GetMirroring(int unicode);
    public UInt32 GetMirroring(UInt32 unicode);
    public Script GetScript(int unicode);
    public Script GetScript(UInt32 unicode);
    public bool TryCompose(int a, int b, Int32& ab);
    public bool TryCompose(UInt32 a, UInt32 b, UInt32& ab);
    public bool TryDecompose(int ab, Int32& a, Int32& b);
    public bool TryDecompose(UInt32 ab, UInt32& a, UInt32& b);
    public void SetCombiningClassDelegate(CombiningClassDelegate del, ReleaseDelegate destroy);
    public void SetGeneralCategoryDelegate(GeneralCategoryDelegate del, ReleaseDelegate destroy);
    public void SetMirroringDelegate(MirroringDelegate del, ReleaseDelegate destroy);
    public void SetScriptDelegate(ScriptDelegate del, ReleaseDelegate destroy);
    public void SetComposeDelegate(ComposeDelegate del, ReleaseDelegate destroy);
    public void SetDecomposeDelegate(DecomposeDelegate del, ReleaseDelegate destroy);
    private void VerifyParameters(Delegate del);
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeHandler();
}
public enum HarfBuzzSharp.UnicodeGeneralCategory : Enum {
    public int value__;
    public static UnicodeGeneralCategory Control;
    public static UnicodeGeneralCategory Format;
    public static UnicodeGeneralCategory Unassigned;
    public static UnicodeGeneralCategory PrivateUse;
    public static UnicodeGeneralCategory Surrogate;
    public static UnicodeGeneralCategory LowercaseLetter;
    public static UnicodeGeneralCategory ModifierLetter;
    public static UnicodeGeneralCategory OtherLetter;
    public static UnicodeGeneralCategory TitlecaseLetter;
    public static UnicodeGeneralCategory UppercaseLetter;
    public static UnicodeGeneralCategory SpacingMark;
    public static UnicodeGeneralCategory EnclosingMark;
    public static UnicodeGeneralCategory NonSpacingMark;
    public static UnicodeGeneralCategory DecimalNumber;
    public static UnicodeGeneralCategory LetterNumber;
    public static UnicodeGeneralCategory OtherNumber;
    public static UnicodeGeneralCategory ConnectPunctuation;
    public static UnicodeGeneralCategory DashPunctuation;
    public static UnicodeGeneralCategory ClosePunctuation;
    public static UnicodeGeneralCategory FinalPunctuation;
    public static UnicodeGeneralCategory InitialPunctuation;
    public static UnicodeGeneralCategory OtherPunctuation;
    public static UnicodeGeneralCategory OpenPunctuation;
    public static UnicodeGeneralCategory CurrencySymbol;
    public static UnicodeGeneralCategory ModifierSymbol;
    public static UnicodeGeneralCategory MathSymbol;
    public static UnicodeGeneralCategory OtherSymbol;
    public static UnicodeGeneralCategory LineSeparator;
    public static UnicodeGeneralCategory ParagraphSeparator;
    public static UnicodeGeneralCategory SpaceSeparator;
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.UnicodeGeneralCategoryProxyDelegate : MulticastDelegate {
    public UnicodeGeneralCategoryProxyDelegate(object object, IntPtr method);
    public virtual int Invoke(IntPtr ufuncs, UInt32 unicode, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr ufuncs, UInt32 unicode, Void* user_data, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.UnicodeMirroringProxyDelegate : MulticastDelegate {
    public UnicodeMirroringProxyDelegate(object object, IntPtr method);
    public virtual UInt32 Invoke(IntPtr ufuncs, UInt32 unicode, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr ufuncs, UInt32 unicode, Void* user_data, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class HarfBuzzSharp.UnicodeScriptProxyDelegate : MulticastDelegate {
    public UnicodeScriptProxyDelegate(object object, IntPtr method);
    public virtual UInt32 Invoke(IntPtr ufuncs, UInt32 unicode, Void* user_data);
    public virtual IAsyncResult BeginInvoke(IntPtr ufuncs, UInt32 unicode, Void* user_data, AsyncCallback callback, object object);
    public virtual UInt32 EndInvoke(IAsyncResult result);
}
internal class HarfBuzzSharp.UserDataDelegate : MulticastDelegate {
    public UserDataDelegate(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class HarfBuzzSharp.Variation : ValueType {
    private UInt32 tag;
    private float value;
    public UInt32 Tag { get; public set; }
    public float Value { get; public set; }
    [IsReadOnlyAttribute]
public UInt32 get_Tag();
    public void set_Tag(UInt32 value);
    [IsReadOnlyAttribute]
public float get_Value();
    public void set_Value(float value);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(Variation obj);
    [IsReadOnlyAttribute]
public virtual bool Equals(object obj);
    public static bool op_Equality(Variation left, Variation right);
    public static bool op_Inequality(Variation left, Variation right);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public class HarfBuzzSharp.VariationGlyphDelegate : MulticastDelegate {
    public VariationGlyphDelegate(object object, IntPtr method);
    public virtual bool Invoke(Font font, object fontData, UInt32 unicode, UInt32 variationSelector, UInt32& glyph);
    public virtual IAsyncResult BeginInvoke(Font font, object fontData, UInt32 unicode, UInt32 variationSelector, UInt32& glyph, AsyncCallback callback, object object);
    public virtual bool EndInvoke(UInt32& glyph, IAsyncResult result);
}
internal class VersionConstants : object {
    public static string AssemblyVersion;
    public static string AssemblyFileVersion;
    public static string AssemblyInformationalVersion;
    public static string GitSha;
    public static int Milestone;
    public static int Increment;
}
