[ExtensionAttribute]
internal static class HashidsNet.ArrayExtensions : object {
    [ExtensionAttribute]
public static T[] SubArray(T[] array, int index);
    [ExtensionAttribute]
public static T[] SubArray(T[] array, int index, int length);
    [ExtensionAttribute]
public static T[] Append(T[] array, T[] appendArray, int index, int length);
}
public class HashidsNet.Hashids : object {
    public static string DEFAULT_ALPHABET;
    public static string DEFAULT_SEPS;
    public static int MIN_ALPHABET_LENGTH;
    private static int MAX_STACKALLOC_SIZE;
    private static double SEP_DIV;
    private static double GUARD_DIV;
    private Char[] _alphabet;
    private Char[] _seps;
    private Char[] _guards;
    private Char[] _salt;
    private int _minHashLength;
    private int _minBufferSize;
    private static Lazy`1<Regex> HexValidator;
    private static Lazy`1<Regex> HexSplitter;
    private StringBuilderPool StringBuilderPool;
    public Hashids(string salt, int minHashLength, string alphabet, string seps);
    private static Hashids();
    public sealed virtual string Encode(int number);
    public virtual string Encode(Int32[] numbers);
    public virtual string Encode(IEnumerable`1<int> numbers);
    public sealed virtual string EncodeLong(long number);
    public sealed virtual string EncodeLong(Int64[] numbers);
    public sealed virtual string EncodeLong(IEnumerable`1<long> numbers);
    public virtual Int32[] Decode(string hash);
    public sealed virtual Int64[] DecodeLong(string hash);
    public sealed virtual long DecodeSingleLong(string hash);
    public sealed virtual bool TryDecodeSingleLong(string hash, Int64& id);
    public virtual int DecodeSingle(string hash);
    public virtual bool TryDecodeSingle(string hash, Int32& id);
    public virtual string EncodeHex(string hex);
    public virtual string DecodeHex(string hash);
    private int GenerateHashFrom(long number, Span`1& result);
    private int GenerateHashFrom(ReadOnlySpan`1<long> numbers, Span`1& result);
    private int BuildReversedHash(long input, ReadOnlySpan`1<char> alphabet, Span`1<char> hashBuffer);
    private long Unhash(ReadOnlySpan`1<char> input, ReadOnlySpan`1<char> alphabet);
    private long GetNumberFrom(string hash);
    private Int64[] GetNumbersFrom(string hash);
    private Int64[] NumbersFrom(string hash);
    private static void ConsistentShuffle(Span`1<char> alphabet, ReadOnlySpan`1<char> salt);
    private static ValueTuple`2<int, ValueTuple`2[]> Split(ReadOnlySpan`1<char> line, ReadOnlySpan`1<char> separators);
    [ObsoleteAttribute("Use 'Encode' instead. The method was renamed to better explain what it actually does.")]
[EditorBrowsableAttribute("1")]
public virtual string Encrypt(Int32[] numbers);
    [ObsoleteAttribute("Use 'EncodeHex' instead. The method was renamed to better explain what it actually does.")]
[EditorBrowsableAttribute("1")]
public virtual string EncryptHex(string hex);
    [ObsoleteAttribute("Use 'Decode' instead. Method was renamed to better explain what it actually does.")]
[EditorBrowsableAttribute("1")]
public virtual Int32[] Decrypt(string hash);
    [ObsoleteAttribute("Use 'DecodeHex' instead. The method was renamed to better explain what it actually does.")]
[EditorBrowsableAttribute("1")]
public virtual string DecryptHex(string hash);
}
public interface HashidsNet.IHashids {
    public abstract virtual Int32[] Decode(string hash);
    public abstract virtual int DecodeSingle(string hash);
    public abstract virtual bool TryDecodeSingle(string hash, Int32& id);
    public abstract virtual Int64[] DecodeLong(string hash);
    public abstract virtual long DecodeSingleLong(string hash);
    public abstract virtual bool TryDecodeSingleLong(string hash, Int64& id);
    public abstract virtual string DecodeHex(string hash);
    public abstract virtual string Encode(int number);
    public abstract virtual string Encode(Int32[] numbers);
    public abstract virtual string Encode(IEnumerable`1<int> numbers);
    public abstract virtual string EncodeLong(long number);
    public abstract virtual string EncodeLong(Int64[] numbers);
    public abstract virtual string EncodeLong(IEnumerable`1<long> numbers);
    public abstract virtual string EncodeHex(string hex);
}
public class HashidsNet.NoResultException : Exception {
    public NoResultException(string message);
}
internal class HashidsNet.StringBuilderPool : object {
    private ConcurrentBag`1<StringBuilder> _builders;
    public StringBuilder Get();
    public void Return(StringBuilder sb);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
