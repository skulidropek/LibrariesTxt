public class Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory : object {
    [CompilerGeneratedAttribute]
private bool <DisposeStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnUnsupportedFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private FhirXmlParsingSettings <XmlParsingSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FhirJsonParsingSettings <JsonParsingSettings>k__BackingField;
    public bool DisposeStream { get; public set; }
    public bool ThrowOnUnsupportedFormat { get; public set; }
    public FhirXmlParsingSettings XmlParsingSettings { get; }
    public FhirJsonParsingSettings JsonParsingSettings { get; }
    public ConfigurableNavigatorStreamFactory(FhirXmlParsingSettings xmlParsingSettings, FhirJsonParsingSettings jsonParsingSettings);
    public ConfigurableNavigatorStreamFactory(bool permissiveParsing);
    internal static ConfigurableNavigatorStreamFactory CreateDefault();
    public static string GetSerializationFormat(string path);
    [CompilerGeneratedAttribute]
public bool get_DisposeStream();
    [CompilerGeneratedAttribute]
public void set_DisposeStream(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnUnsupportedFormat();
    [CompilerGeneratedAttribute]
public void set_ThrowOnUnsupportedFormat(bool value);
    [CompilerGeneratedAttribute]
public FhirXmlParsingSettings get_XmlParsingSettings();
    [CompilerGeneratedAttribute]
public FhirJsonParsingSettings get_JsonParsingSettings();
    public INavigatorStream Create(Stream stream, string format);
    internal INavigatorStream Create(Stream stream, string format, bool disposeStream);
    public INavigatorStream Create(string path);
    internal INavigatorStream Create(string path, bool disposeStream);
}
public class Hl7.Fhir.Serialization.DefaultNavigatorStreamFactory : object {
    private static ConfigurableNavigatorStreamFactory _factory;
    public static NavigatorStreamFactory FactoryDelegate;
    private static DefaultNavigatorStreamFactory();
    public static INavigatorStream Create(Stream stream, string format);
    public static INavigatorStream Create(Stream stream, string format, bool disposeStream);
    public static string GetSerializationFormat(string path);
    public static INavigatorStream Create(string path);
    public static INavigatorStream Create(string path, bool disposeStream);
}
public static class Hl7.Fhir.Serialization.FhirFileFormats : object {
    private static StringComparer ExtensionComparer;
    public static string XmlFileExtension;
    public static string JsonFileExtension;
    private static FhirFileFormats();
    public static bool HasXmlExtension(string filePath);
    public static bool HasJsonExtension(string filePath);
    public static bool HasXmlOrJsonExtension(string filePath);
    public static bool HasExtension(string filePath, string extension);
}
internal class Hl7.Fhir.Serialization.FhirJsonBuilder : object {
    private FhirJsonSerializationSettings _settings;
    private bool _roundtripMode;
    [CompilerGeneratedAttribute]
private ExceptionNotificationHandler <ExceptionHandler>k__BackingField;
    private static String[] primitiveTypes;
    public ExceptionNotificationHandler ExceptionHandler { get; public set; }
    internal FhirJsonBuilder(FhirJsonSerializationSettings settings);
    private static FhirJsonBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionNotificationHandler get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExceptionHandler(ExceptionNotificationHandler value);
    public JObject Build(ITypedElement source);
    public JObject Build(ISourceNode source);
    private JObject buildInternal(ITypedElement source);
    private ValueTuple`2<JToken, JObject> buildNode(ITypedElement node);
    internal bool MustSerializeMember(ITypedElement source, IElementDefinitionSummary& info);
    private void addChildren(ITypedElement node, JObject parent);
    private JValue buildValue(object value);
    [CompilerGeneratedAttribute]
private void <buildInternal>b__9_0(object o, ExceptionNotification a);
    [CompilerGeneratedAttribute]
private JObject <buildNode>g__buildChildren|11_0(ITypedElement n);
    [CompilerGeneratedAttribute]
private ValueTuple`2<JToken, JObject> <addChildren>b__13_1(ITypedElement m);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Serialization.FhirJsonBuilderExtensions : object {
    [ExtensionAttribute]
private static void writeTo(JObject root, JsonWriter destination, string rootName);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonBuilderExtensions/<writeToAsync>d__1")]
[ExtensionAttribute]
private static Task writeToAsync(JObject root, JsonWriter destination, string rootName);
    [ExtensionAttribute]
public static void WriteTo(ITypedElement source, JsonWriter destination, FhirJsonSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonBuilderExtensions/<WriteToAsync>d__3")]
[ExtensionAttribute]
public static Task WriteToAsync(ITypedElement source, JsonWriter destination, FhirJsonSerializationSettings settings);
    [ExtensionAttribute]
public static void WriteTo(ISourceNode source, JsonWriter destination, FhirJsonSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonBuilderExtensions/<WriteToAsync>d__5")]
[ExtensionAttribute]
public static Task WriteToAsync(ISourceNode source, JsonWriter destination, FhirJsonSerializationSettings settings);
    [ExtensionAttribute]
public static JObject ToJObject(ISourceNode source, FhirJsonSerializationSettings settings);
    [ExtensionAttribute]
public static JObject ToJObject(ITypedElement source, FhirJsonSerializationSettings settings);
    [ExtensionAttribute]
public static string ToJson(ITypedElement source, FhirJsonSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonBuilderExtensions/<ToJsonAsync>d__9")]
[ExtensionAttribute]
public static Task`1<string> ToJsonAsync(ITypedElement source, FhirJsonSerializationSettings settings);
    [ExtensionAttribute]
public static string ToJson(ISourceNode source, FhirJsonSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonBuilderExtensions/<ToJsonAsync>d__11")]
[ExtensionAttribute]
public static Task`1<string> ToJsonAsync(ISourceNode source, FhirJsonSerializationSettings settings);
    [ExtensionAttribute]
public static Byte[] ToJsonBytes(ITypedElement source, FhirJsonSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonBuilderExtensions/<ToJsonBytesAsync>d__13")]
[ExtensionAttribute]
public static Task`1<Byte[]> ToJsonBytesAsync(ITypedElement source, FhirJsonSerializationSettings settings);
}
public class Hl7.Fhir.Serialization.FhirJsonNode : object {
    private FhirJsonParsingSettings _settings;
    public JValue JsonValue;
    public JObject JsonObject;
    public Nullable`1<int> ArrayIndex;
    public bool UsesShadow;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionNotificationHandler <ExceptionHandler>k__BackingField;
    public string Name { get; private set; }
    public string Location { get; private set; }
    public ExceptionNotificationHandler ExceptionHandler { get; public set; }
    public bool PermissiveParsing { get; }
    public JToken PositionNode { get; }
    public string Text { get; }
    public string ResourceType { get; }
    internal FhirJsonNode(JObject root, string nodeName, FhirJsonParsingSettings settings);
    private FhirJsonNode(FhirJsonNode parent, string name, JValue value, JObject content, bool usesShadow, Nullable`1<int> arrayIndex, string location);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionNotificationHandler get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExceptionHandler(ExceptionNotificationHandler value);
    public bool get_PermissiveParsing();
    public JToken get_PositionNode();
    private FhirJsonNode build(string name, JToken main, JToken shadow, bool isArrayElement, int index);
    public sealed virtual string get_Text();
    public sealed virtual string get_ResourceType();
    [IteratorStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonNode/<Children>d__28")]
public sealed virtual IEnumerable`1<ISourceNode> Children(string name);
    private ValueTuple`2<JProperty, JProperty> getNextElementPair(IGrouping`2<string, JProperty> child);
    [IteratorStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonNode/<enumerateElement>d__30")]
private IEnumerable`1<FhirJsonNode> enumerateElement(string name, JProperty main, JProperty shadow);
    private void validateCardinalities(JProperty main, JProperty shadow);
    private void raiseFormatError(string message, JToken node);
    private ValueTuple`2<int, int> getPosition(JToken node);
    public sealed virtual IEnumerable`1<object> Annotations(Type type);
    [IteratorStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonNode/<additionalTypeRules>d__35")]
private IEnumerable`1<AdditionalStructuralRule> additionalTypeRules();
    public static ISourceNode Read(JsonReader reader, string rootName, FhirJsonParsingSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonNode/<ReadAsync>d__37")]
public static Task`1<ISourceNode> ReadAsync(JsonReader reader, string rootName, FhirJsonParsingSettings settings);
    public static ISourceNode Parse(string json, string rootName, FhirJsonParsingSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirJsonNode/<ParseAsync>d__39")]
public static Task`1<ISourceNode> ParseAsync(string json, string rootName, FhirJsonParsingSettings settings);
    public static ISourceNode Create(JObject root, string rootName, FhirJsonParsingSettings settings);
    [CompilerGeneratedAttribute]
private JValue <build>g__validateValue|23_0(JValue v, string pName, <>c__DisplayClass23_0& );
    [CompilerGeneratedAttribute]
private JObject <build>g__validateObject|23_1(JObject o, string pName, <>c__DisplayClass23_0& );
    [CompilerGeneratedAttribute]
internal static string <Children>g__deriveMainName|28_2(JProperty prop);
    [CompilerGeneratedAttribute]
internal static JToken <enumerateElement>g__at|30_0(IList`1<JToken> list, int i);
    [CompilerGeneratedAttribute]
internal static IList`1<JToken> <enumerateElement>g__makeList|30_1(JProperty prop, Boolean& wasArray);
    [CompilerGeneratedAttribute]
private object <Annotations>g__NormalizeValue|34_0(JValue value);
    [CompilerGeneratedAttribute]
private object <additionalTypeRules>g__checkXhtml|35_0(ITypedElement nav, IExceptionSource ies, object _);
    [CompilerGeneratedAttribute]
private object <additionalTypeRules>g__checkArrayUse|35_1(ITypedElement nav, IExceptionSource ies, object _);
}
public class Hl7.Fhir.Serialization.FhirJsonParsingSettings : object {
    [CompilerGeneratedAttribute]
private bool <PermissiveParsing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowJsonComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateFhirXhtml>k__BackingField;
    public bool PermissiveParsing { get; public set; }
    public bool AllowJsonComments { get; public set; }
    public bool ValidateFhirXhtml { get; public set; }
    public FhirJsonParsingSettings(FhirJsonParsingSettings other);
    [CompilerGeneratedAttribute]
public bool get_PermissiveParsing();
    [CompilerGeneratedAttribute]
public void set_PermissiveParsing(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowJsonComments();
    [CompilerGeneratedAttribute]
public void set_AllowJsonComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateFhirXhtml();
    [CompilerGeneratedAttribute]
public void set_ValidateFhirXhtml(bool value);
    public void CopyTo(FhirJsonParsingSettings other);
    public FhirJsonParsingSettings Clone();
    public static FhirJsonParsingSettings CreateDefault();
}
public class Hl7.Fhir.Serialization.FhirJsonSerializationSettings : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreUnknownElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pretty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendNewLine>k__BackingField;
    public bool IgnoreUnknownElements { get; public set; }
    public bool Pretty { get; public set; }
    public bool AppendNewLine { get; public set; }
    public FhirJsonSerializationSettings(FhirJsonSerializationSettings other);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUnknownElements();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnknownElements(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pretty();
    [CompilerGeneratedAttribute]
public void set_Pretty(bool value);
    [CompilerGeneratedAttribute]
public bool get_AppendNewLine();
    [CompilerGeneratedAttribute]
public void set_AppendNewLine(bool value);
    public void CopyTo(FhirJsonSerializationSettings other);
    public FhirJsonSerializationSettings Clone();
    public static FhirJsonSerializationSettings CreateDefault();
}
public class Hl7.Fhir.Serialization.FhirSerializationFormats : object {
    public static string Xml;
    public static string Json;
    public static String[] All;
    private static FhirSerializationFormats();
}
internal class Hl7.Fhir.Serialization.FhirXmlBuilder : object {
    private FhirXmlSerializationSettings _settings;
    private bool _roundtripMode;
    [CompilerGeneratedAttribute]
private ExceptionNotificationHandler <ExceptionHandler>k__BackingField;
    public ExceptionNotificationHandler ExceptionHandler { get; public set; }
    internal FhirXmlBuilder(FhirXmlSerializationSettings settings);
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionNotificationHandler get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExceptionHandler(ExceptionNotificationHandler value);
    public XDocument Build(ITypedElement source);
    public XDocument Build(ISourceNode source);
    public XDocument buildInternal(ITypedElement source);
    internal bool MustSerializeMember(ITypedElement source, IElementDefinitionSummary& info);
    private void build(ITypedElement source, XContainer parent);
    private void writeComments(String[] comments, XContainer parent);
    [CompilerGeneratedAttribute]
private void <buildInternal>b__9_0(object o, ExceptionNotification a);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Serialization.FhirXmlBuilderExtensions : object {
    [ExtensionAttribute]
private static void writeTo(XDocument doc, XmlWriter destination);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlBuilderExtensions/<writeToAsync>d__1")]
[ExtensionAttribute]
private static Task writeToAsync(XDocument doc, XmlWriter destination);
    [ExtensionAttribute]
public static void WriteTo(ISourceNode source, XmlWriter destination, FhirXmlSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlBuilderExtensions/<WriteToAsync>d__3")]
[ExtensionAttribute]
public static Task WriteToAsync(ISourceNode source, XmlWriter destination, FhirXmlSerializationSettings settings);
    [ExtensionAttribute]
public static void WriteTo(ITypedElement source, XmlWriter destination, FhirXmlSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlBuilderExtensions/<WriteToAsync>d__5")]
[ExtensionAttribute]
public static Task WriteToAsync(ITypedElement source, XmlWriter destination, FhirXmlSerializationSettings settings);
    [ExtensionAttribute]
public static XDocument ToXDocument(ISourceNode source, FhirXmlSerializationSettings settings);
    [ExtensionAttribute]
public static XDocument ToXDocument(ITypedElement source, FhirXmlSerializationSettings settings);
    [ExtensionAttribute]
public static string ToXml(ISourceNode source, FhirXmlSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlBuilderExtensions/<ToXmlAsync>d__9")]
[ExtensionAttribute]
public static Task`1<string> ToXmlAsync(ISourceNode source, FhirXmlSerializationSettings settings);
    [ExtensionAttribute]
public static string ToXml(ITypedElement source, FhirXmlSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlBuilderExtensions/<ToXmlAsync>d__11")]
[ExtensionAttribute]
public static Task`1<string> ToXmlAsync(ITypedElement source, FhirXmlSerializationSettings settings);
    [ExtensionAttribute]
public static Byte[] ToXmlBytes(ITypedElement source, FhirXmlSerializationSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlBuilderExtensions/<ToXmlBytesAsync>d__13")]
[ExtensionAttribute]
public static Task`1<Byte[]> ToXmlBytesAsync(ITypedElement source, FhirXmlSerializationSettings settings);
}
public class Hl7.Fhir.Serialization.FhirXmlNode : object {
    public XObject Current;
    private FhirXmlParsingSettings _settings;
    private bool _atRoot;
    private XElement _containedResource;
    private static XElement NO_CONTAINED_FOUND;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionNotificationHandler <ExceptionHandler>k__BackingField;
    public XNamespace[] AllowedExternalNamespaces { get; }
    public bool DisallowSchemaLocation { get; }
    public bool PermissiveParsing { get; }
    public bool ValidateFhirXhtml { get; }
    public string Name { get; }
    public string Text { get; }
    private XElement contained { get; }
    public string Location { get; private set; }
    public ExceptionNotificationHandler ExceptionHandler { get; public set; }
    public string ResourceType { get; }
    [ObsoleteAttribute("The XHtmlText property is part of alpha-level support for parsing CDA and should not yet be used in production. This interface is subject to change.")]
public string XHtmlText { get; }
    internal FhirXmlNode(XObject node, FhirXmlParsingSettings settings);
    private FhirXmlNode(FhirXmlNode parent, XObject node, string location);
    private static FhirXmlNode();
    public XNamespace[] get_AllowedExternalNamespaces();
    public bool get_DisallowSchemaLocation();
    public bool get_PermissiveParsing();
    public bool get_ValidateFhirXhtml();
    public sealed virtual string get_Name();
    public sealed virtual string get_Text();
    private XElement get_contained();
    private static void verifyXObject(XObject node, XNamespace[] AllowedExternalNamespaces, object source, IExceptionSource ies);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ExceptionNotificationHandler get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExceptionHandler(ExceptionNotificationHandler value);
    public sealed virtual string get_ResourceType();
    [IteratorStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlNode/<Children>d__32")]
public sealed virtual IEnumerable`1<ISourceNode> Children(string name);
    [IteratorStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlNode/<enumerateChildren>d__33")]
private IEnumerable`1<FhirXmlNode> enumerateChildren(XObject first, string name);
    public virtual string ToString();
    public sealed virtual IEnumerable`1<object> Annotations(Type type);
    public static void ValidateXhtml(XDocument doc, IExceptionSource ies, object source);
    private static void raiseFormatError(object source, IExceptionSource ies, string message, XObject position);
    private static ValueTuple`2<int, int> getPosition(XObject node);
    private static bool verifyContained(XElement contained, IExceptionSource ies, bool permissive);
    [IteratorStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlNode/<additionalTypeRules>d__41")]
private IEnumerable`1<AdditionalStructuralRule> additionalTypeRules();
    private ExceptionNotification buildException(string message);
    public sealed virtual string get_XHtmlText();
    private XElement stripNamespaces(XElement rootElement);
    public static ISourceNode Read(XmlReader reader, FhirXmlParsingSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlNode/<ReadAsync>d__47")]
public static Task`1<ISourceNode> ReadAsync(XmlReader reader, FhirXmlParsingSettings settings);
    public static ISourceNode Parse(string xml, FhirXmlParsingSettings settings);
    [AsyncStateMachineAttribute("Hl7.Fhir.Serialization.FhirXmlNode/<ParseAsync>d__49")]
public static Task`1<ISourceNode> ParseAsync(string xml, FhirXmlParsingSettings settings);
    public static ISourceNode Create(XElement root, FhirXmlParsingSettings settings);
    public static ISourceNode Create(XDocument root, FhirXmlParsingSettings settings);
    [CompilerGeneratedAttribute]
internal static String[] <Annotations>g__commentsBefore|35_0(XObject current);
    [CompilerGeneratedAttribute]
internal static String[] <Annotations>g__closingComment|35_1(XObject current);
    [CompilerGeneratedAttribute]
internal static String[] <Annotations>g__docEndComments|35_2(XObject current);
    [CompilerGeneratedAttribute]
internal static String[] <Annotations>g__filterComments|35_3(IEnumerable`1<XNode> source);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<XNode> <Annotations>g__cons|35_4(XNode header, IEnumerable`1<XNode> tail);
    [CompilerGeneratedAttribute]
private string <Annotations>g__getSchemaLocation|35_7();
    [CompilerGeneratedAttribute]
private object <additionalTypeRules>g__checkOrder|41_0(ITypedElement node, IExceptionSource ies, object state);
    [CompilerGeneratedAttribute]
private object <additionalTypeRules>g__checkRepresentation|41_1(ITypedElement node, IExceptionSource ies, object _);
    [CompilerGeneratedAttribute]
internal static string <additionalTypeRules>g__buildMessage|41_2(string name, XmlNodeType actualType, string message);
}
public class Hl7.Fhir.Serialization.FhirXmlParsingSettings : object {
    [CompilerGeneratedAttribute]
private XNamespace[] <AllowedExternalNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisallowSchemaLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PermissiveParsing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateFhirXhtml>k__BackingField;
    public XNamespace[] AllowedExternalNamespaces { get; public set; }
    public bool DisallowSchemaLocation { get; public set; }
    public bool PermissiveParsing { get; public set; }
    public bool ValidateFhirXhtml { get; public set; }
    public FhirXmlParsingSettings(FhirXmlParsingSettings other);
    [CompilerGeneratedAttribute]
public XNamespace[] get_AllowedExternalNamespaces();
    [CompilerGeneratedAttribute]
public void set_AllowedExternalNamespaces(XNamespace[] value);
    [CompilerGeneratedAttribute]
public bool get_DisallowSchemaLocation();
    [CompilerGeneratedAttribute]
public void set_DisallowSchemaLocation(bool value);
    [CompilerGeneratedAttribute]
public bool get_PermissiveParsing();
    [CompilerGeneratedAttribute]
public void set_PermissiveParsing(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateFhirXhtml();
    [CompilerGeneratedAttribute]
public void set_ValidateFhirXhtml(bool value);
    public void CopyTo(FhirXmlParsingSettings other);
    public FhirXmlParsingSettings Clone();
    public static FhirXmlParsingSettings CreateDefault();
}
public class Hl7.Fhir.Serialization.FhirXmlSerializationSettings : object {
    public bool IgnoreUnknownElements;
    [CompilerGeneratedAttribute]
private bool <Pretty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendNewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrimWhitespaces>k__BackingField;
    [ObsoleteAttribute("Use IgnoreUnknownElements instead")]
public bool SkipUnknownElements { get; public set; }
    public bool Pretty { get; public set; }
    public bool AppendNewLine { get; public set; }
    public bool TrimWhitespaces { get; public set; }
    public FhirXmlSerializationSettings(FhirXmlSerializationSettings other);
    public bool get_SkipUnknownElements();
    public void set_SkipUnknownElements(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pretty();
    [CompilerGeneratedAttribute]
public void set_Pretty(bool value);
    [CompilerGeneratedAttribute]
public bool get_AppendNewLine();
    [CompilerGeneratedAttribute]
public void set_AppendNewLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrimWhitespaces();
    [CompilerGeneratedAttribute]
public void set_TrimWhitespaces(bool value);
    public void CopyTo(FhirXmlSerializationSettings other);
    public FhirXmlSerializationSettings Clone();
    public static FhirXmlSerializationSettings CreateDefault();
}
public interface Hl7.Fhir.Serialization.INavigatorStream {
    public string ResourceType { get; }
    public bool IsBundle { get; }
    public abstract virtual string get_ResourceType();
    public abstract virtual bool get_IsBundle();
}
public interface Hl7.Fhir.Serialization.ISeekableEnumerator`1 {
    public string Position { get; }
    public abstract virtual string get_Position();
    public abstract virtual bool Seek(string position);
    public abstract virtual bool MoveNext(string position);
}
public class Hl7.Fhir.Serialization.JsonNavigatorStream : object {
    private Stream _stream;
    private bool _disposeStream;
    private JsonReader _reader;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<ValueTuple`2<JObject, string>> _current;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private FhirJsonParsingSettings <ParserSettings>k__BackingField;
    public string ResourceType { get; private set; }
    public bool IsBundle { get; }
    public string Position { get; }
    public ISourceNode Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public FhirJsonParsingSettings ParserSettings { get; }
    public JsonNavigatorStream(Stream stream);
    public JsonNavigatorStream(Stream stream, bool disposeStream);
    public JsonNavigatorStream(Stream stream, bool disposeStream, FhirJsonParsingSettings settings);
    public static JsonNavigatorStream FromPath(string path);
    public static JsonNavigatorStream FromPath(string path, bool disposeStream, FhirJsonParsingSettings settings);
    public sealed virtual void Dispose();
    private void disposeReader();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResourceType();
    [CompilerGeneratedAttribute]
private void set_ResourceType(string value);
    public sealed virtual bool get_IsBundle();
    public sealed virtual void Reset();
    private void initializeReader();
    public sealed virtual bool MoveNext();
    public sealed virtual bool MoveNext(string fullUrl);
    public sealed virtual bool Seek(string position);
    public sealed virtual string get_Position();
    public sealed virtual ISourceNode get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    [CompilerGeneratedAttribute]
public FhirJsonParsingSettings get_ParserSettings();
    private string scanForResourceType(JsonReader reader);
    private static bool skipTo(JsonReader reader, string path);
    private void throwIfDisposed();
}
public class Hl7.Fhir.Serialization.JsonSerializationDetails : object {
    public static string RESOURCETYPE_MEMBER_NAME;
    public object OriginalValue;
    public Nullable`1<int> ArrayIndex;
    public bool UsesShadow;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public int LineNumber { get; internal set; }
    public int LinePosition { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
internal void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
internal void set_LinePosition(int value);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Serialization.JsonSerializationDetailsExtensions : object {
    [ExtensionAttribute]
public static JsonSerializationDetails GetJsonSerializationDetails(IAnnotated ann);
    [ExtensionAttribute]
public static JsonSerializationDetails GetJsonSerializationDetails(ITypedElement node);
}
[ExtensionAttribute]
internal static class Hl7.Fhir.Serialization.JTokenExtensions : object {
    [ExtensionAttribute]
public static JProperty GetResourceTypePropertyFromObject(JObject o, string myName);
}
public class Hl7.Fhir.Serialization.MissingTypeInformationException : Exception {
    public MissingTypeInformationException(string message);
    public MissingTypeInformationException(string message, Exception inner);
}
public class Hl7.Fhir.Serialization.NavigatorStreamFactory : MulticastDelegate {
    public NavigatorStreamFactory(object object, IntPtr method);
    public virtual INavigatorStream Invoke(string filePath);
    public virtual IAsyncResult BeginInvoke(string filePath, AsyncCallback callback, object object);
    public virtual INavigatorStream EndInvoke(IAsyncResult result);
}
public static class Hl7.Fhir.Serialization.NavigatorStreamHelper : object {
    public static string DefaultCanonicalBaseUrlForBundleEntry;
    private static NavigatorStreamHelper();
    public static string FormatCanonicalUrlForBundleEntry(string resourceType, string resourceId);
    public static string FormatCanonicalUrl(string baseUrl, string resourceType, string resourceId);
}
public class Hl7.Fhir.Serialization.SourceComments : object {
    public String[] CommentsBefore;
    public String[] ClosingComments;
    public String[] DocumentEndComments;
}
public class Hl7.Fhir.Serialization.XmlNavigatorStream : object {
    private Stream _stream;
    private bool _disposeStream;
    private XmlReader _reader;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<ValueTuple`2<XElement, string>> _current;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <ResourceType>k__BackingField;
    private static XName urlName;
    private static XName idName;
    [CompilerGeneratedAttribute]
private FhirXmlParsingSettings <ParserSettings>k__BackingField;
    public string ResourceType { get; private set; }
    public bool IsBundle { get; }
    public string Position { get; }
    public ISourceNode Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public FhirXmlParsingSettings ParserSettings { get; }
    public XmlNavigatorStream(Stream stream);
    public XmlNavigatorStream(Stream stream, bool disposeStream);
    public XmlNavigatorStream(Stream stream, bool disposeStream, FhirXmlParsingSettings settings);
    private static XmlNavigatorStream();
    public static XmlNavigatorStream FromPath(string path);
    public static XmlNavigatorStream FromPath(string path, bool disposeStream, FhirXmlParsingSettings settings);
    public sealed virtual void Dispose();
    private void disposeReader();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResourceType();
    [CompilerGeneratedAttribute]
private void set_ResourceType(string value);
    public sealed virtual bool get_IsBundle();
    public sealed virtual void Reset();
    private void initializeReader();
    public sealed virtual bool MoveNext();
    public sealed virtual bool MoveNext(string fullUrl);
    public sealed virtual bool Seek(string position);
    public sealed virtual string get_Position();
    public sealed virtual ISourceNode get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    [CompilerGeneratedAttribute]
public FhirXmlParsingSettings get_ParserSettings();
    private static string getRootName(XmlReader reader);
    private static string readFullUrl(XmlReader reader);
    private void throwIfDisposed();
    [CompilerGeneratedAttribute]
internal static bool <MoveNext>g__IsFhirElement|24_0(string elemName, <>c__DisplayClass24_0& );
}
public class Hl7.Fhir.Serialization.XmlSerializationDetails : object {
    public XmlNodeType NodeType;
    public XNamespace Namespace;
    public bool IsNamespaceDeclaration;
    public bool IsXhtml;
    public string SchemaLocation;
    public bool IsCDAText;
    public bool IsXsiType;
    public string NodeText;
    public string OriginalValue;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public int LineNumber { get; internal set; }
    public int LinePosition { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
internal void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
internal void set_LinePosition(int value);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Serialization.XmlSerializationDetailsExtensions : object {
    [ExtensionAttribute]
public static XmlSerializationDetails GetXmlSerializationDetails(IAnnotated ann);
    [ExtensionAttribute]
public static XmlSerializationDetails GetXmlSerializationDetails(ITypedElement node);
}
[ExtensionAttribute]
internal static class Hl7.Fhir.Serialization.XObjectFhirXmlExtensions : object {
    [ExtensionAttribute]
public static bool IsResourceName(XName elementName, bool ignoreNameSpace);
    [ExtensionAttribute]
public static bool TryGetContainedResource(XElement xe, XElement& contained, bool ignoreNameSpace);
    [ExtensionAttribute]
public static XObject NextElementOrAttribute(XObject current);
    [ExtensionAttribute]
public static XObject FirstChildElementOrAttribute(XObject current);
    [ExtensionAttribute]
private static XObject scanToNextRelevantNode(XObject scan);
    [ExtensionAttribute]
public static bool IsRelevantNode(XObject scan);
    private static bool isRelevantAttribute(XAttribute a);
    [ExtensionAttribute]
public static bool HasRelevantAttributes(XElement scan);
    [ExtensionAttribute]
public static string GetValue(XObject current);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Support.DateExtensions : object {
    [ExtensionAttribute]
public static string ToFhirDate(DateTime me);
    [ExtensionAttribute]
public static string ToFhirDate(Nullable`1<DateTime> me);
    [ExtensionAttribute]
public static string ToFhirDateTime(DateTime me, TimeSpan offset);
    [ExtensionAttribute]
public static string ToFhirDate(DateTimeOffset me);
    [ExtensionAttribute]
public static string ToFhirDate(Nullable`1<DateTimeOffset> me);
    [ExtensionAttribute]
public static string ToFhirDateTime(DateTimeOffset me);
    [ExtensionAttribute]
public static string ToFhirDateTime(Nullable`1<DateTimeOffset> me);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ToFhirDateTime(this System.DateTimeOffset me) instead, see https://docs.microsoft.com/en-us/dotnet/standard/datetime/converting-between-datetime-and-offset")]
public static string ToFhirDateTime(DateTime me);
    [ExtensionAttribute]
[ObsoleteAttribute("Use ToFhirDateTime(this System.DateTimeOffset? me) instead, see https://docs.microsoft.com/en-us/dotnet/standard/datetime/converting-between-datetime-and-offset")]
public static string ToFhirDateTime(Nullable`1<DateTime> me);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Support.GuidExtensions : object {
    [ExtensionAttribute]
public static string ToFhirId(Guid me);
    [ExtensionAttribute]
public static string ToFhirId(Nullable`1<Guid> me);
}
public static class Hl7.Fhir.Utility.SerializationUtil : object {
    private static Lazy`1<XmlSchemaSet> _xhtmlSchemaSet;
    private static string XML_XSD_RESOURCENAME;
    private static string FHIRXHTML_XSD_RESOURCENAME;
    private static Lazy`1<string> XmlXsdData;
    private static Lazy`1<string> FhirXhtmlXsdData;
    private static Regex _re;
    private static Dictionary`2<string, string> _xmlReplacements;
    private static SerializationUtil();
    public static bool ProbeIsXml(string data);
    public static bool ProbeIsJson(string data);
    private static XDocument XDocumentFromReaderInternal(XmlReader reader, bool ignoreComments);
    public static XDocument XDocumentFromReader(XmlReader reader, bool ignoreComments);
    public static Task`1<XDocument> XDocumentFromReaderAsync(XmlReader reader, bool ignoreComments);
    public static JObject JObjectFromReader(JsonReader reader);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.SerializationUtil/<JObjectFromReaderAsync>d__6")]
public static Task`1<JObject> JObjectFromReaderAsync(JsonReader reader);
    public static XDocument XDocumentFromXmlText(string xml, bool ignoreComments);
    public static JObject JObjectFromJsonText(string json);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.SerializationUtil/<JObjectFromJsonTextAsync>d__9")]
public static Task`1<JObject> JObjectFromJsonTextAsync(string json);
    public static XmlReader XmlReaderFromXmlText(string xml, bool ignoreComments);
    public static Task`1<XmlReader> XmlReaderFromXmlTextAsync(string xml, bool ignoreComments);
    public static JsonReader JsonReaderFromJsonText(string json);
    public static XmlReader XmlReaderFromStream(Stream input, bool ignoreComments);
    public static JsonReader JsonReaderFromStream(Stream input);
    private static JsonReader JsonReaderFromTextReader(TextReader input);
    public static XmlReader WrapXmlReader(XmlReader xmlReader, bool ignoreComments, bool async);
    public static Byte[] WriteXmlToBytes(Action`1<XmlWriter> serializer);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.SerializationUtil/<WriteXmlToBytesAsync>d__18")]
public static Task`1<Byte[]> WriteXmlToBytesAsync(Func`2<XmlWriter, Task> serializer);
    public static string WriteXmlToString(T value, Action`2<T, XmlWriter> serializer, bool pretty, bool appendNewLine);
    public static string WriteXmlToString(Action`1<XmlWriter> serializer, bool pretty, bool appendNewLine);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.SerializationUtil/<WriteXmlToStringAsync>d__21")]
public static Task`1<string> WriteXmlToStringAsync(Func`2<XmlWriter, Task> serializer, bool pretty, bool appendNewLine);
    public static XDocument WriteXmlToDocument(Action`1<XmlWriter> serializer);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.SerializationUtil/<WriteXmlToDocumentAsync>d__23")]
public static Task`1<XDocument> WriteXmlToDocumentAsync(Func`2<XmlWriter, Task> serializer);
    public static string WriteJsonToString(Action`1<JsonWriter> serializer, bool pretty, bool appendNewLine);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.SerializationUtil/<WriteJsonToStringAsync>d__25")]
public static Task`1<string> WriteJsonToStringAsync(Func`2<JsonWriter, Task> serializer, bool pretty, bool appendNewLine);
    public static Byte[] WriteJsonToBytes(Action`1<JsonWriter> serializer);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.SerializationUtil/<WriteJsonToBytesAsync>d__27")]
public static Task`1<Byte[]> WriteJsonToBytesAsync(Func`2<JsonWriter, Task> serializer);
    public static JObject WriteJsonToDocument(Action`1<JsonWriter> serializer);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.SerializationUtil/<WriteJsonToDocumentAsync>d__29")]
public static Task`1<JObject> WriteJsonToDocumentAsync(Func`2<JsonWriter, Task> serializer);
    public static JsonWriter CreateJsonTextWriter(TextWriter writer);
    public static string SanitizeXml(string xml);
    public static String[] RunFhirXhtmlSchemaValidation(string xmlText);
    public static String[] RunFhirXhtmlSchemaValidation(XDocument doc);
    private static XmlSchemaSet compileXhtmlSchema();
    private static string readResource(string resourceName);
    private static Dictionary`2<string, string> getXmlReplacements();
    [CompilerGeneratedAttribute]
internal static bool <RunFhirXhtmlSchemaValidation>g__hasContent|34_1(XElement el);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.XObjectExtensions : object {
    [ExtensionAttribute]
public static bool TryGetAttribute(XElement docNode, XName name, String& value);
    [ExtensionAttribute]
public static XObject FirstChild(XObject node);
    [ExtensionAttribute]
public static XObject NextSibling(XObject node);
    [ExtensionAttribute]
public static XName Name(XObject node);
    [ExtensionAttribute]
public static string Value(XObject node);
    [ExtensionAttribute]
public static string Text(XObject node);
    [IteratorStateMachineAttribute("Hl7.Fhir.Utility.XObjectExtensions/<PreviousNodes>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<XNode> PreviousNodes(XNode node);
    [ExtensionAttribute]
public static bool AtXhtmlDiv(XObject node);
    [ExtensionAttribute]
public static XDocument Rename(XDocument doc, string newRootName);
    [CompilerGeneratedAttribute]
internal static string <Text>g__extractString|5_1(IEnumerable`1<string> source);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
