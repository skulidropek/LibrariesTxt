public enum Hl7.Fhir.Specification.FhirRelease : Enum {
    public int value__;
    public static FhirRelease DSTU1;
    public static FhirRelease DSTU2;
    public static FhirRelease STU3;
    public static FhirRelease R4;
    public static FhirRelease R5;
    public static FhirRelease R4B;
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.AnnotatableExtensions : object {
    private static object _lock;
    private static AnnotatableExtensions();
    [ExtensionAttribute]
public static void RemoveAnnotations(IAnnotatable annotatable);
    [ExtensionAttribute]
public static void SetAnnotation(IAnnotatable annotatable, A annotation);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.AnnotatedExtensions : object {
    [ExtensionAttribute]
public static object Annotation(IAnnotated annotated, Type type);
    [ExtensionAttribute]
public static bool TryGetAnnotation(IAnnotated annotated, Type type, Object& annotation);
    [ExtensionAttribute]
public static A Annotation(IAnnotated annotated);
    [ExtensionAttribute]
public static bool TryGetAnnotation(IAnnotated annotated, A& annotation);
    [ExtensionAttribute]
public static IEnumerable`1<A> Annotations(IAnnotated annotated);
    [ExtensionAttribute]
public static bool HasAnnotation(IAnnotated annotated, Type type);
    [ExtensionAttribute]
public static bool HasAnnotation(IAnnotated annotated);
}
public class Hl7.Fhir.Utility.AnnotationList : object {
    private Lazy`1<ConcurrentDictionary`2<Type, List`1<object>>> _annotations;
    private ConcurrentDictionary`2<Type, List`1<object>> annotations { get; }
    public bool IsEmpty { get; }
    private ConcurrentDictionary`2<Type, List`1<object>> get_annotations();
    public sealed virtual void AddAnnotation(object annotation);
    public sealed virtual void RemoveAnnotations(Type type);
    public sealed virtual IEnumerable`1<object> Annotations(Type type);
    public IEnumerable`1<object> OfType(Type type);
    public bool get_IsEmpty();
    public void AddRange(AnnotationList source);
}
public class Hl7.Fhir.Utility.Cache`2 : object {
    private ConcurrentDictionary`2<K, CacheItem`1<V>> _cached;
    private int _minimumCacheSize;
    private Func`2<K, CacheItem`1<V>> _retriever;
    [CompilerGeneratedAttribute]
private CacheSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<K, V> <Retrieve>k__BackingField;
    public CacheSettings Settings { get; private set; }
    public Func`2<K, V> Retrieve { get; }
    public Cache`2(Func`2<K, V> retrieveFunction);
    public Cache`2(CacheSettings settings);
    public Cache`2(Func`2<K, V> retrieveFunction, CacheSettings settings);
    [CompilerGeneratedAttribute]
public CacheSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(CacheSettings value);
    [CompilerGeneratedAttribute]
public Func`2<K, V> get_Retrieve();
    public V GetValue(K key);
    public V GetValueOrAdd(K key, V value);
    private void enforceMaxItems();
}
internal class Hl7.Fhir.Utility.CacheItem`1 : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastAccessed>k__BackingField;
    private V _value;
    public DateTimeOffset LastAccessed { get; private set; }
    internal V Value { get; internal set; }
    public CacheItem`1(V value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_LastAccessed();
    [CompilerGeneratedAttribute]
private void set_LastAccessed(DateTimeOffset value);
    internal V get_Value();
    internal void set_Value(V value);
}
public class Hl7.Fhir.Utility.CacheSettings : object {
    [CompilerGeneratedAttribute]
private int <MaxCacheSize>k__BackingField;
    public int MaxCacheSize { get; public set; }
    public CacheSettings(CacheSettings other);
    [CompilerGeneratedAttribute]
public int get_MaxCacheSize();
    [CompilerGeneratedAttribute]
public void set_MaxCacheSize(int value);
    public static CacheSettings CreateDefault();
    private void CopyTo(CacheSettings other);
    public CacheSettings Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Hl7.Fhir.Utility.CodedException : Exception {
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    public string ErrorCode { get; }
    public CodedException(string errorCode, string message);
    public CodedException(string errorCode, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.DebuggerDisplayExtensions : object {
    public static string DEBUGGER_DISPLAY_PROP_NAME;
    [ExtensionAttribute]
public static string DebuggerDisplayString(object target);
}
[AttributeUsageAttribute("256")]
public class Hl7.Fhir.Utility.DescriptionAttribute : Attribute {
    private string _description;
    public string Description { get; }
    public DescriptionAttribute(string literal);
    public string get_Description();
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.DictionaryUtilities : object {
    [ExtensionAttribute]
public static U GetOrDefault(IDictionary`2<T, U> dict, T key);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> WithValues(IEnumerable`1<Nullable`1<T>> nullables);
}
[AttributeUsageAttribute("256")]
public class Hl7.Fhir.Utility.EnumLiteralAttribute : Attribute {
    private string _literal;
    private string _system;
    public string Literal { get; }
    public string System { get; }
    public EnumLiteralAttribute(string literal, string system);
    public string get_Literal();
    public string get_System();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.EnumUtility : object {
    private static ConcurrentDictionary`2<Type, EnumMapping> CACHE;
    private static EnumUtility();
    [ExtensionAttribute]
public static string GetLiteral(Enum e);
    [ExtensionAttribute]
public static string GetSystem(Enum e);
    [ExtensionAttribute]
public static string GetDocumentation(Enum e);
    public static Enum ParseLiteral(string rawValue, Type enumType, bool ignoreCase);
    [NullableContextAttribute("0")]
public static Nullable`1<T> ParseLiteral(string rawValue, bool ignoreCase);
    public static string GetName(Type enumType);
    [NullableContextAttribute("0")]
public static string GetName();
    private static EnumMapping getEnumMapping(Type enumType);
}
public static class Hl7.Fhir.Utility.Error : object {
    public static ArgumentException Argument(string message);
    public static ArgumentException Argument(string parameterName, string message);
    public static ArgumentException ArgumentNull(string parameterName);
    public static ArgumentNullException ArgumentNull(string parameterName, string message);
    public static ArgumentException ArgumentNullOrEmpty(string parameterName);
    public static InvalidOperationException InvalidOperation(string message);
    public static InvalidOperationException InvalidOperation(Exception innerException, string message);
    public static NotSupportedException NotSupported(string message);
    public static NotImplementedException NotImplemented(string message);
    public static NotImplementedException NotImplemented();
    public static FormatException Format(string message, Exception innerException);
    public static FormatException Format(string message, string location);
    public static FormatException Format(string message, IPositionInfo pos);
    public static FormatException Format(string message, int lineNumber, int linePosition);
}
public class Hl7.Fhir.Utility.ExceptionNotification : object {
    public string Message;
    public Exception Exception;
    public ExceptionSeverity Severity;
    private ExceptionNotification(string message, Exception exception, ExceptionSeverity severity);
    public static ExceptionNotification Info(string message);
    public static ExceptionNotification Warning(Exception exception);
    public static ExceptionNotification Error(Exception exception);
}
public class Hl7.Fhir.Utility.ExceptionNotificationHandler : MulticastDelegate {
    public ExceptionNotificationHandler(object object, IntPtr method);
    public virtual void Invoke(object source, ExceptionNotification args);
    public virtual IAsyncResult BeginInvoke(object source, ExceptionNotification args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Hl7.Fhir.Utility.ExceptionSeverity : Enum {
    public int value__;
    public static ExceptionSeverity Error;
    public static ExceptionSeverity Warning;
    public static ExceptionSeverity Info;
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.ExceptionSourceExtensions : object {
    [ExtensionAttribute]
public static void NotifyOrThrow(ExceptionNotificationHandler handler, object source, ExceptionNotification args);
    [ExtensionAttribute]
public static void NotifyOrThrow(IExceptionSource ies, object source, ExceptionNotification args);
    [ExtensionAttribute]
public static IDisposable Catch(IExceptionSource source, ExceptionNotificationHandler handler, bool forward);
}
public class Hl7.Fhir.Utility.Fail : Fail`1<Unit> {
    public Fail(Exception error);
}
public class Hl7.Fhir.Utility.Fail`1 : Result`1<T> {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public Exception Error { get; private set; }
    public Fail`1(Exception error);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("16")]
public class Hl7.Fhir.Utility.FhirEnumerationAttribute : Attribute {
    private string _bindingName;
    public string BindingName { get; }
    public FhirEnumerationAttribute(string bindingName);
    public string get_BindingName();
}
public class Hl7.Fhir.Utility.FhirReleaseParser : object {
    public static FhirRelease Parse(string version);
    public static bool TryParse(string version, Nullable`1& release);
    public static string FhirVersionFromRelease(FhirRelease fhirRelease);
    public static FhirRelease FhirReleaseFromMimeVersion(string fhirMimeVersion);
    public static bool TryGetFhirReleaseFromMimeVersion(string fhirMimeVersion, Nullable`1& release);
    [ObsoleteAttribute("This method is obsolete. Use TryGetFhirReleaseFromMimeVersion instead")]
public static bool TryFhirReleaseFromMimeVersion(string fhirMimeVersion, Nullable`1& release);
    public static string MimeVersionFromFhirRelease(FhirRelease fhirRelease);
    public static FhirRelease FhirReleaseFromCorePackageName(string packageName);
    public static bool TryGetFhirReleaseFromCorePackageName(string packageName, Nullable`1& release);
    [ObsoleteAttribute("This method is obsolete. Use TryGetFhirReleaseFromCorePackageName instead")]
public static bool TryFhirReleaseFromCorePackageName(string packageName, Nullable`1& release);
    public static string CorePackageNameFromFhirRelease(FhirRelease fhirRelease);
}
public interface Hl7.Fhir.Utility.IAnnotatable {
    public abstract virtual void AddAnnotation(object annotation);
    public abstract virtual void RemoveAnnotations(Type type);
}
public interface Hl7.Fhir.Utility.IAnnotated {
    public abstract virtual IEnumerable`1<object> Annotations(Type type);
}
public interface Hl7.Fhir.Utility.IExceptionSource {
    public ExceptionNotificationHandler ExceptionHandler { get; public set; }
    public abstract virtual ExceptionNotificationHandler get_ExceptionHandler();
    public abstract virtual void set_ExceptionHandler(ExceptionNotificationHandler value);
}
public interface Hl7.Fhir.Utility.IFailed {
    public Exception Error { get; }
    public abstract virtual Exception get_Error();
}
[ExtensionAttribute]
internal static class Hl7.Fhir.Utility.IntExtensions : object {
    [ExtensionAttribute]
public static int Digits(int n);
}
public interface Hl7.Fhir.Utility.IPositionInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
public static class Hl7.Fhir.Utility.Message : object {
    public static void Info(string messageFormat, Object[] messageArgs);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.ObjectListExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This method is obsolete and will be removed in the next major release. Obsolete since 2021-09-22")]
public static IEnumerable`1<object> OfType(IEnumerable`1<object> me, Type t);
    [ExtensionAttribute]
[ObsoleteAttribute("This method is obsolete and will be removed in the next major release. Obsolete since 2021-09-22")]
public static void RemoveOfType(IList`1<object> me, Type t);
}
public class Hl7.Fhir.Utility.Ok : Ok`1<Unit> {
}
public class Hl7.Fhir.Utility.Ok`1 : Result`1<T> {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; private set; }
    public Ok`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
    public static Ok`1<T> op_Explicit(T value);
    public static T op_Implicit(Ok`1<T> value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Hl7.Fhir.Utility.PositionInfo : object {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public PositionInfo(int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.PredicateExtensions : object {
    [ExtensionAttribute]
public static Predicate`1<T> And(Predicate`1<T> first, Predicate`1<T> second);
    [ExtensionAttribute]
public static Predicate`1<T> Or(Predicate`1<T> first, Predicate`1<T> second);
    [ExtensionAttribute]
public static Predicate`1<T> Not(Predicate`1<T> first);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.PropertyInfoExtensions : object {
    [CompilerGeneratedAttribute]
private static bool <NoCodeGenSupport>k__BackingField;
    public static bool NoCodeGenSupport { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_NoCodeGenSupport();
    [CompilerGeneratedAttribute]
public static void set_NoCodeGenSupport(bool value);
    [ExtensionAttribute]
public static Func`1<object> BuildFactoryMethod(Type type);
    [ExtensionAttribute]
public static Func`1<IList> BuildListFactoryMethod(Type type);
    [ExtensionAttribute]
public static Func`2<T, object> GetValueGetter(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static Func`2<object, object> GetValueGetter(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static Action`2<T, object> GetValueSetter(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static Action`2<object, object> GetValueSetter(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.ReflectionHelper : object {
    [ExtensionAttribute]
public static bool IsAValueType(Type t);
    [ExtensionAttribute]
public static bool CanBeTreatedAsType(Type currentType, Type typeToCompareWith);
    [ExtensionAttribute]
public static T GetAttributeOnEnum(Enum enumVal);
    public static PropertyInfo FindProperty(Type t, string name);
    public static IEnumerable`1<PropertyInfo> FindPublicProperties(Type t);
    public static bool HasDefaultPublicConstructor(Type t);
    internal static ConstructorInfo GetDefaultPublicConstructor(Type t);
    public static bool IsNullableType(Type type);
    public static Type GetNullableArgument(Type type);
    public static bool IsTypedCollection(Type type);
    public static IList CreateGenericList(Type itemType);
    public static bool IsClosedGenericType(Type type);
    public static bool IsOpenGenericTypeDefinition(Type type);
    public static bool IsConstructedFromGenericTypeDefinition(Type type, Type genericBase);
    public static Type GetCollectionItemType(Type type);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition, Type& implementingType);
    [ExtensionAttribute]
public static bool IsEnum(Type t);
    public static T GetAttribute(MemberInfo member);
    public static IEnumerable`1<Attribute> GetAttributes(MemberInfo member);
    public static IEnumerable`1<Attribute> GetAttributes(Type type);
    public static IEnumerable`1<T> GetAttributes(MemberInfo member);
    internal static IEnumerable`1<FieldInfo> FindEnumFields(Type t);
    public static bool IsRepeatingElement(object value);
    public static bool IsRepeatingElement(object value, ICollection& element);
    public static bool IsArray(object value);
    public static string PrettyTypeName(Type t);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.Result : object {
    [ExtensionAttribute]
public static void Throw(IFailed f);
    public static Ok`1<R> Ok(R value);
    public static Ok Ok();
    public static Fail`1<T> Fail(Exception error);
    public static Fail Fail(Exception error);
    [ExtensionAttribute]
public static Result`1<TB> Select(Result`1<TA> a, Func`2<TA, TB> select);
    [ExtensionAttribute]
public static Result`1<TC> SelectMany(Result`1<TA> a, Func`2<TA, Result`1<TB>> func, Func`3<TA, TB, TC> select);
}
public abstract class Hl7.Fhir.Utility.Result`1 : object {
    public bool Success { get; }
    public static Result`1<T> op_Implicit(T value);
    public bool get_Success();
    public T ValueOrDefault(T d);
    public T ValueOrDefault();
    public T ValueOrElse(Func`2<Exception, T> f);
    public T ValueOrThrow();
    public S Handle(Func`2<T, S> ok, Func`2<Exception, S> fail);
    public Result`1<S> Chain(Func`2<T, Result`1<S>> f);
    public Result`1<S> Combine(Result`1<S> second);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Result`1<T> op_BitwiseAnd(Result`1<T> l, Result`1<T> r);
    public static bool op_Equality(Result`1<T> l, Result`1<T> r);
    public static bool op_Inequality(Result`1<T> l, Result`1<T> r);
}
public class Hl7.Fhir.Utility.SemVersion : object {
    private static Regex ParseEx;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Build>k__BackingField;
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public string Prerelease { get; }
    public string Build { get; }
    private SemVersion(SerializationInfo info, StreamingContext context);
    public SemVersion(int major, int minor, int patch, string prerelease, string build);
    public SemVersion(Version version);
    private static SemVersion();
    public static SemVersion Parse(string version, bool strict);
    public static bool TryParse(string version, SemVersion& semver, bool strict);
    public static bool Equals(SemVersion versionA, SemVersion versionB);
    public static int Compare(SemVersion versionA, SemVersion versionB);
    public SemVersion Change(Nullable`1<int> major, Nullable`1<int> minor, Nullable`1<int> patch, string prerelease, string build);
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public int get_Patch();
    [CompilerGeneratedAttribute]
public string get_Prerelease();
    [CompilerGeneratedAttribute]
public string get_Build();
    public virtual string ToString();
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(SemVersion other);
    public bool PrecedenceMatches(SemVersion other);
    public int CompareByPrecedence(SemVersion other);
    private static int CompareComponent(string a, string b, bool nonemptyIsLower);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static SemVersion op_Implicit(string version);
    public static bool op_Equality(SemVersion left, SemVersion right);
    public static bool op_Inequality(SemVersion left, SemVersion right);
    public static bool op_GreaterThan(SemVersion left, SemVersion right);
    public static bool op_GreaterThanOrEqual(SemVersion left, SemVersion right);
    public static bool op_LessThan(SemVersion left, SemVersion right);
    public static bool op_LessThanOrEqual(SemVersion left, SemVersion right);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.StringExtensions : object {
    [ExtensionAttribute]
public static string Shorten(string me, int maxLength);
    [ExtensionAttribute]
public static string RemovePrefix(string instance, string prefix);
    [ExtensionAttribute]
public static string Prepend(string me, string prefix);
    [ExtensionAttribute]
public static string FormatWith(string format, Object[] args);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, Object[] args);
    [ExtensionAttribute]
public static string Capitalize(string s);
    [ExtensionAttribute]
public static string Uncapitalize(string s);
    [ExtensionAttribute]
internal static String[] SplitNotInQuotes(string value, char separator);
    [ExtensionAttribute]
internal static String[] SplitNotEscaped(string value, char separator);
    [ExtensionAttribute]
public static Tuple`2<string, string> SplitLeft(string text, char separator);
    [ExtensionAttribute]
public static bool MatchesPrefix(string text, string prefix);
    [ExtensionAttribute]
public static string EnsureEndsWith(string original, string toEndWith);
}
[ExtensionAttribute]
public static class Hl7.Fhir.Utility.TaskHelper : object {
    public static T Await(Func`1<Task`1<T>> asyncFunc);
    public static void Await(Func`1<Task> asyncFunc);
    [AsyncStateMachineAttribute("Hl7.Fhir.Utility.TaskHelper/<AnyAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<bool> AnyAsync(IEnumerable`1<TSource> source, Func`2<TSource, Task`1<bool>> predicate);
}
public class Hl7.Fhir.Utility.Unit : ValueType {
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class Hl7.Fhir.Utility.XmlNs : object {
    public static string FHIR;
    public static string XHTML;
    public static string NAMESPACE;
    public static string XMLNS;
    public static XNamespace XFHIR;
    public static XNamespace XHTMLNS;
    public static XName XHTMLDIV;
    public static XName XSCHEMALOCATION;
    private static XmlNs();
}
public class Hl7.Fhir.Validation.IncorrectElementDefinitionException : Exception {
    public IncorrectElementDefinitionException(string message);
    public IncorrectElementDefinitionException(string message, Exception innerException);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
