[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AggregateError : Error {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IError> <Errors>k__BackingField;
    public IReadOnlyList`1<IError> Errors { get; }
    public AggregateError(IEnumerable`1<IError> errors);
    public AggregateError(IError[] errors);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IError> get_Errors();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class HotChocolate.ArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ArgumentAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public enum HotChocolate.DataLoaderAccessModifier : Enum {
    public int value__;
    public static DataLoaderAccessModifier Default;
    public static DataLoaderAccessModifier Public;
    public static DataLoaderAccessModifier PublicInterface;
    public static DataLoaderAccessModifier Internal;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class HotChocolate.DataLoaderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DataLoaderServiceScope <ServiceScope>k__BackingField;
    [CompilerGeneratedAttribute]
private DataLoaderAccessModifier <AccessModifier>k__BackingField;
    public string Name { get; }
    public DataLoaderServiceScope ServiceScope { get; public set; }
    public DataLoaderAccessModifier AccessModifier { get; public set; }
    public DataLoaderAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public DataLoaderServiceScope get_ServiceScope();
    [CompilerGeneratedAttribute]
public void set_ServiceScope(DataLoaderServiceScope value);
    [CompilerGeneratedAttribute]
public DataLoaderAccessModifier get_AccessModifier();
    [CompilerGeneratedAttribute]
public void set_AccessModifier(DataLoaderAccessModifier value);
}
[AttributeUsageAttribute("1")]
public class HotChocolate.DataLoaderDefaultsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DataLoaderServiceScope <ServiceScope>k__BackingField;
    [CompilerGeneratedAttribute]
private DataLoaderAccessModifier <AccessModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateRegistrationCode>k__BackingField;
    public DataLoaderServiceScope ServiceScope { get; public set; }
    public DataLoaderAccessModifier AccessModifier { get; public set; }
    public bool GenerateRegistrationCode { get; public set; }
    [CompilerGeneratedAttribute]
public DataLoaderServiceScope get_ServiceScope();
    [CompilerGeneratedAttribute]
public void set_ServiceScope(DataLoaderServiceScope value);
    [CompilerGeneratedAttribute]
public DataLoaderAccessModifier get_AccessModifier();
    [CompilerGeneratedAttribute]
public void set_AccessModifier(DataLoaderAccessModifier value);
    [CompilerGeneratedAttribute]
public bool get_GenerateRegistrationCode();
    [CompilerGeneratedAttribute]
public void set_GenerateRegistrationCode(bool value);
}
public enum HotChocolate.DataLoaderServiceScope : Enum {
    public int value__;
    public static DataLoaderServiceScope Default;
    public static DataLoaderServiceScope DataLoaderScope;
    public static DataLoaderServiceScope OriginalScope;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.DiagnosticEventSourceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Listener>k__BackingField;
    public Type Listener { get; }
    public DiagnosticEventSourceAttribute(Type listener);
    [CompilerGeneratedAttribute]
public Type get_Listener();
}
[AttributeUsageAttribute("2048")]
public class HotChocolate.DirectiveAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Error : object {
    private static string _code;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Path <Path>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<Location> <Locations>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISyntaxNode <SyntaxNode>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Code { get; }
    [NullableAttribute("2")]
public Path Path { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<Location> Locations { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    [NullableAttribute("2")]
public ISyntaxNode SyntaxNode { get; }
    [NullableContextAttribute("2")]
public Error(string message, string code, Path path, IReadOnlyList`1<Location> locations, IReadOnlyDictionary`2<string, object> extensions, Exception exception, ISyntaxNode syntaxNode);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Code();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Path get_Path();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<Location> get_Locations();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_Extensions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISyntaxNode get_SyntaxNode();
    public sealed virtual IError WithMessage(string message);
    public sealed virtual IError WithCode(string code);
    public sealed virtual IError RemoveCode();
    public sealed virtual IError WithPath(Path path);
    public sealed virtual IError WithPath(IReadOnlyList`1<object> path);
    public sealed virtual IError RemovePath();
    public sealed virtual IError WithLocations(IReadOnlyList`1<Location> locations);
    public sealed virtual IError RemoveLocations();
    public sealed virtual IError WithExtensions(IReadOnlyDictionary`2<string, object> extensions);
    public sealed virtual IError RemoveExtensions();
    public sealed virtual IError SetExtension(string key, object value);
    public sealed virtual IError RemoveExtension(string key);
    public sealed virtual IError WithException(Exception exception);
    public sealed virtual IError RemoveException();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.ErrorBuilder : object {
    [NullableAttribute("2")]
private string _message;
    [NullableAttribute("2")]
private string _code;
    [NullableAttribute("2")]
private Path _path;
    [NullableAttribute("2")]
private Exception _exception;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private OrderedDictionary`2<string, object> _extensions;
    [NullableAttribute("2")]
private List`1<Location> _locations;
    private bool _dirtyLocation;
    private bool _dirtyExtensions;
    [NullableAttribute("2")]
private ISyntaxNode _syntaxNode;
    private ErrorBuilder(IError error);
    public sealed virtual IErrorBuilder SetMessage(string message);
    public sealed virtual IErrorBuilder SetCode(string code);
    public sealed virtual IErrorBuilder RemoveCode();
    public sealed virtual IErrorBuilder SetPath(Path path);
    public sealed virtual IErrorBuilder SetPath(IReadOnlyList`1<object> path);
    public sealed virtual IErrorBuilder RemovePath();
    public sealed virtual IErrorBuilder AddLocation(Location location);
    public sealed virtual IErrorBuilder AddLocation(int line, int column);
    public sealed virtual IErrorBuilder SetSyntaxNode(ISyntaxNode syntaxNode);
    public sealed virtual IErrorBuilder ClearLocations();
    public sealed virtual IErrorBuilder SetExtension(string key, object value);
    public sealed virtual IErrorBuilder RemoveExtension(string key);
    public sealed virtual IErrorBuilder ClearExtensions();
    public sealed virtual IErrorBuilder SetException(Exception exception);
    public sealed virtual IErrorBuilder RemoveException();
    public sealed virtual IError Build();
    public static ErrorBuilder New();
    public static ErrorBuilder FromError(IError error);
    public static ErrorBuilder FromDictionary(IReadOnlyDictionary`2<string, object> dict);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.ErrorBuilderExtensions : object {
    [ExtensionAttribute]
public static IErrorBuilder AddLocation(IErrorBuilder builder, ISyntaxNode syntaxNode);
    [ExtensionAttribute]
public static IErrorBuilder SetMessage(IErrorBuilder builder, string format, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.ErrorCodes : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.ErrorExtensions : object {
    [ExtensionAttribute]
public static IError RemoveSyntaxNode(IError error);
    [ExtensionAttribute]
public static IError WithSyntaxNode(IError error, ISyntaxNode syntaxNode);
}
[ExtensionAttribute]
public static class HotChocolate.ErrorHandlerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IReadOnlyList`1<IError> Handle(IErrorHandler errorHandler, IEnumerable`1<IError> errors);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <Handle>g__AddProcessed|0_0(IError error, <>c__DisplayClass0_0& );
}
[AttributeUsageAttribute("2048")]
public class HotChocolate.EventMessageAttribute : Attribute {
}
public abstract class HotChocolate.Execution.ExecutionResult : object {
    [NullableAttribute("1")]
private Func`1[] _cleanupTasks;
    private bool _disposed;
    public ExecutionResultKind Kind { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    [NullableContextAttribute("1")]
protected ExecutionResult(Func`1[] cleanupTasks);
    public abstract virtual ExecutionResultKind get_Kind();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    [NullableContextAttribute("1")]
public sealed virtual void RegisterForCleanup(Func`1<ValueTask> clean);
    protected void EnsureNotDisposed();
    [AsyncStateMachineAttribute("HotChocolate.Execution.ExecutionResult/<DisposeAsync>d__10")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Execution.ExecutionResultExtensions : object {
    [ExtensionAttribute]
public static void RegisterForCleanup(IExecutionResult result, Action clean);
    [ExtensionAttribute]
public static void RegisterForCleanup(IExecutionResult result, IDisposable disposable);
    [ExtensionAttribute]
public static void RegisterForCleanup(IExecutionResult result, IAsyncDisposable disposable);
    [ExtensionAttribute]
public static bool IsStreamResult(IExecutionResult result);
    [ExtensionAttribute]
public static IQueryResult ExpectQueryResult(IExecutionResult result);
    [ExtensionAttribute]
public static IResponseStream ExpectResponseStream(IExecutionResult result);
}
public enum HotChocolate.Execution.ExecutionResultKind : Enum {
    public int value__;
    public static ExecutionResultKind SingleResult;
    public static ExecutionResultKind DeferredResult;
    public static ExecutionResultKind BatchResult;
    public static ExecutionResultKind SubscriptionResult;
}
public enum HotChocolate.Execution.ExecutionStrategy : Enum {
    public int value__;
    public static ExecutionStrategy Serial;
    public static ExecutionStrategy Parallel;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class HotChocolate.Execution.ExecutionTask : object {
    private ExecutionTaskStatus _completionStatus;
    private Task _task;
    [CompilerGeneratedAttribute]
private ExecutionTaskStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionTask <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionTask <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSerial>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRegistered>k__BackingField;
    [NullableAttribute("1")]
protected IExecutionTaskContext Context { get; }
    public ExecutionTaskKind Kind { get; }
    public ExecutionTaskStatus Status { get; private set; }
    public IExecutionTask Next { get; public set; }
    public IExecutionTask Previous { get; public set; }
    public object State { get; public set; }
    public bool IsSerial { get; public set; }
    public bool IsRegistered { get; public set; }
    [NullableContextAttribute("1")]
protected abstract virtual IExecutionTaskContext get_Context();
    public virtual ExecutionTaskKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual ExecutionTaskStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ExecutionTaskStatus value);
    [CompilerGeneratedAttribute]
public sealed virtual IExecutionTask get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(IExecutionTask value);
    [CompilerGeneratedAttribute]
public sealed virtual IExecutionTask get_Previous();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Previous(IExecutionTask value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_State();
    [CompilerGeneratedAttribute]
public sealed virtual void set_State(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSerial();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSerial(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRegistered();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsRegistered(bool value);
    public sealed virtual void BeginExecute(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task WaitForCompletionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.ExecutionTask/<ExecuteInternalAsync>d__32")]
private ValueTask ExecuteInternalAsync(CancellationToken cancellationToken);
    protected abstract virtual ValueTask ExecuteAsync(CancellationToken cancellationToken);
    protected void Faulted();
    protected void Reset();
}
[ExtensionAttribute]
public static class HotChocolate.Execution.ExecutionTaskExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsCompleted(IExecutionTask task);
}
public enum HotChocolate.Execution.ExecutionTaskKind : Enum {
    public int value__;
    public static ExecutionTaskKind Parallel;
    public static ExecutionTaskKind Serial;
    public static ExecutionTaskKind Pure;
}
public enum HotChocolate.Execution.ExecutionTaskStatus : Enum {
    public int value__;
    public static ExecutionTaskStatus WaitingToRun;
    public static ExecutionTaskStatus Running;
    public static ExecutionTaskStatus Completed;
    public static ExecutionTaskStatus Faulted;
}
[FlagsAttribute]
public enum HotChocolate.Execution.GraphQLRequestFlags : Enum {
    public int value__;
    public static GraphQLRequestFlags None;
    public static GraphQLRequestFlags AllowQuery;
    public static GraphQLRequestFlags AllowMutation;
    public static GraphQLRequestFlags AllowSubscription;
    public static GraphQLRequestFlags AllowStreams;
    public static GraphQLRequestFlags AllowLegacy;
    public static GraphQLRequestFlags AllowAll;
}
public interface HotChocolate.Execution.IExecutionResult {
    public ExecutionResultKind Kind { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public abstract virtual ExecutionResultKind get_Kind();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    [NullableContextAttribute("1")]
public abstract virtual void RegisterForCleanup(Func`1<ValueTask> clean);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IExecutionResultFormatter {
    public abstract virtual ValueTask FormatAsync(IExecutionResult result, Stream outputStream, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface HotChocolate.Execution.IExecutionTask {
    public ExecutionTaskKind Kind { get; }
    public ExecutionTaskStatus Status { get; }
    public IExecutionTask Next { get; public set; }
    public IExecutionTask Previous { get; public set; }
    public object State { get; public set; }
    public bool IsSerial { get; public set; }
    public bool IsRegistered { get; public set; }
    public abstract virtual ExecutionTaskKind get_Kind();
    public abstract virtual ExecutionTaskStatus get_Status();
    public abstract virtual IExecutionTask get_Next();
    public abstract virtual void set_Next(IExecutionTask value);
    public abstract virtual IExecutionTask get_Previous();
    public abstract virtual void set_Previous(IExecutionTask value);
    public abstract virtual object get_State();
    public abstract virtual void set_State(object value);
    public abstract virtual bool get_IsSerial();
    public abstract virtual void set_IsSerial(bool value);
    public abstract virtual bool get_IsRegistered();
    public abstract virtual void set_IsRegistered(bool value);
    public abstract virtual void BeginExecute(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task WaitForCompletionAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IExecutionTaskContext {
    public abstract virtual IDisposable Track(IExecutionTask task);
    public abstract virtual void Completed(IExecutionTask task);
    public abstract virtual void ReportError(IExecutionTask task, IError error);
    public abstract virtual void ReportError(IExecutionTask task, Exception exception);
    public abstract virtual void Register(IExecutionTask task);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IExecutionTaskDefinition {
    public abstract virtual IExecutionTask Create(IExecutionTaskContext context);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IQuery {
    [ObsoleteAttribute("Use WriteToAsync")]
public abstract virtual void WriteTo(Stream output);
    public abstract virtual Task WriteToAsync(Stream output);
    public abstract virtual Task WriteToAsync(Stream output, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual ReadOnlySpan`1<byte> AsSpan();
    public abstract virtual string ToString();
}
[NullableContextAttribute("2")]
public interface HotChocolate.Execution.IQueryRequest {
    public IQuery Query { get; }
    public string QueryId { get; }
    public string QueryHash { get; }
    public string OperationName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> VariableValues { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public IServiceProvider Services { get; }
    public GraphQLRequestFlags Flags { get; }
    public abstract virtual IQuery get_Query();
    public abstract virtual string get_QueryId();
    public abstract virtual string get_QueryHash();
    public abstract virtual string get_OperationName();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_VariableValues();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Extensions();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual GraphQLRequestFlags get_Flags();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IQueryRequestBuilder {
    public abstract virtual IQueryRequestBuilder SetQuery(string sourceText);
    public abstract virtual IQueryRequestBuilder SetQuery(DocumentNode document);
    public abstract virtual IQueryRequestBuilder SetQueryId(string queryName);
    public abstract virtual IQueryRequestBuilder SetQueryHash(string queryHash);
    public abstract virtual IQueryRequestBuilder SetOperation(string operationName);
    public abstract virtual IQueryRequestBuilder SetVariableValues(Dictionary`2<string, object> variableValues);
    public abstract virtual IQueryRequestBuilder SetVariableValues(IDictionary`2<string, object> variableValues);
    public abstract virtual IQueryRequestBuilder SetVariableValues(IReadOnlyDictionary`2<string, object> variableValues);
    public abstract virtual IQueryRequestBuilder AddVariableValue(string name, object value);
    public abstract virtual IQueryRequestBuilder TryAddVariableValue(string name, object value);
    public abstract virtual IQueryRequestBuilder SetVariableValue(string name, object value);
    [ObsoleteAttribute("Use `InitializeGlobalState`")]
public abstract virtual IQueryRequestBuilder SetProperties(Dictionary`2<string, object> properties);
    public abstract virtual IQueryRequestBuilder InitializeGlobalState(Dictionary`2<string, object> initialState);
    [ObsoleteAttribute("Use `InitializeGlobalState`")]
public abstract virtual IQueryRequestBuilder SetProperties(IDictionary`2<string, object> properties);
    public abstract virtual IQueryRequestBuilder InitializeGlobalState(IDictionary`2<string, object> initialState);
    [ObsoleteAttribute("Use `InitializeGlobalState`")]
public abstract virtual IQueryRequestBuilder SetProperties(IReadOnlyDictionary`2<string, object> properties);
    public abstract virtual IQueryRequestBuilder InitializeGlobalState(IReadOnlyDictionary`2<string, object> initialState);
    [ObsoleteAttribute("Use `AddGlobalState`")]
public abstract virtual IQueryRequestBuilder AddProperty(string name, object value);
    public abstract virtual IQueryRequestBuilder AddGlobalState(string name, object value);
    [ObsoleteAttribute("Use `TryAddGlobalState`")]
public abstract virtual IQueryRequestBuilder TryAddProperty(string name, object value);
    public abstract virtual IQueryRequestBuilder TryAddGlobalState(string name, object value);
    [ObsoleteAttribute("Use `SetGlobalState`")]
public abstract virtual IQueryRequestBuilder SetProperty(string name, object value);
    public abstract virtual IQueryRequestBuilder SetGlobalState(string name, object value);
    [ObsoleteAttribute("Use `RemoveGlobalState`")]
public abstract virtual IQueryRequestBuilder TryRemoveProperty(string name);
    public abstract virtual IQueryRequestBuilder RemoveGlobalState(string name);
    public abstract virtual IQueryRequestBuilder SetExtensions(Dictionary`2<string, object> extensions);
    public abstract virtual IQueryRequestBuilder SetExtensions(IDictionary`2<string, object> extensions);
    public abstract virtual IQueryRequestBuilder SetExtensions(IReadOnlyDictionary`2<string, object> extensions);
    public abstract virtual IQueryRequestBuilder AddExtension(string name, object value);
    public abstract virtual IQueryRequestBuilder TryAddExtension(string name, object value);
    public abstract virtual IQueryRequestBuilder SetExtension(string name, object value);
    public abstract virtual IQueryRequestBuilder SetServices(IServiceProvider services);
    public abstract virtual IQueryRequestBuilder TrySetServices(IServiceProvider services);
    public abstract virtual IQueryRequestBuilder SetFlags(GraphQLRequestFlags flags);
    public abstract virtual IQueryRequest Create();
}
[NullableContextAttribute("2")]
public interface HotChocolate.Execution.IQueryResult {
    public string Label { get; }
    public Path Path { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Data { get; }
    public IReadOnlyList`1<object> Items { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<IError> Errors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<IQueryResult> Incremental { get; }
    public Nullable`1<bool> HasNext { get; }
    public bool IsDataSet { get; }
    public abstract virtual string get_Label();
    public abstract virtual Path get_Path();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Data();
    public abstract virtual IReadOnlyList`1<object> get_Items();
    public abstract virtual IReadOnlyList`1<IError> get_Errors();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Extensions();
    public abstract virtual IReadOnlyList`1<IQueryResult> get_Incremental();
    public abstract virtual Nullable`1<bool> get_HasNext();
    public abstract virtual bool get_IsDataSet();
    public abstract virtual IReadOnlyDictionary`2<string, object> ToDictionary();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IQueryResultBuilder {
    public abstract virtual IQueryResultBuilder SetData(IReadOnlyDictionary`2<string, object> data);
    public abstract virtual IQueryResultBuilder SetItems(IReadOnlyList`1<object> items);
    public abstract virtual IQueryResultBuilder AddError(IError error);
    public abstract virtual IQueryResultBuilder AddErrors(IEnumerable`1<IError> errors);
    public abstract virtual IQueryResultBuilder AddExtension(string key, object data);
    public abstract virtual IQueryResultBuilder SetExtension(string key, object data);
    public abstract virtual IQueryResultBuilder SetExtensions(IReadOnlyDictionary`2<string, object> extensions);
    public abstract virtual IQueryResultBuilder AddContextData(string key, object data);
    public abstract virtual IQueryResultBuilder SetContextData(string key, object data);
    public abstract virtual IQueryResultBuilder SetContextData(IReadOnlyDictionary`2<string, object> contextData);
    public abstract virtual IQueryResultBuilder SetLabel(string label);
    public abstract virtual IQueryResultBuilder SetPath(Path path);
    public abstract virtual IQueryResultBuilder SetHasNext(Nullable`1<bool> hasNext);
    public abstract virtual IQueryResultBuilder RegisterForCleanup(Func`1<ValueTask> clean);
    public abstract virtual IQueryResult Create();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IQueryResultFormatter {
    public abstract virtual ValueTask FormatAsync(IQueryResult result, Stream outputStream, CancellationToken cancellationToken);
    public abstract virtual void Format(IQueryResult result, IBufferWriter`1<byte> writer);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IReadStoredQueries {
    public abstract virtual Task`1<QueryDocument> TryReadQueryAsync(string queryId, CancellationToken cancellationToken);
}
public interface HotChocolate.Execution.IResponseStream {
    [NullableContextAttribute("1")]
public abstract virtual IAsyncEnumerable`1<IQueryResult> ReadResultsAsync();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IResponseStreamFormatter {
    public abstract virtual Task FormatAsync(IResponseStream responseStream, Stream outputStream, CancellationToken cancellationToken);
}
public interface HotChocolate.Execution.ISourceStream {
    public abstract virtual IAsyncEnumerable`1<object> ReadEventsAsync();
}
public interface HotChocolate.Execution.ISourceStream`1 {
    [NullableContextAttribute("1")]
public abstract virtual IAsyncEnumerable`1<TMessage> ReadEventsAsync();
}
public interface HotChocolate.Execution.IVariableValueCollection {
    [NullableContextAttribute("2")]
public abstract virtual T GetVariable(string name);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetVariable(string name, T& value);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IWriteStoredQueries {
    public abstract virtual Task WriteQueryAsync(string queryId, IQuery query, CancellationToken cancellationToken);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Execution.OrderedDictionary : OrderedDictionary`2<string, object> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class HotChocolate.Execution.OrderedDictionary`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<TKey, TValue>> _order;
    private Dictionary`2<TKey, TValue> _map;
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    public ICollection`1<TValue> Values { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public OrderedDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> values);
    private OrderedDictionary`2(OrderedDictionary`2<TKey, TValue> source);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    private int IndexOfKey(TKey key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public OrderedDictionary`2<TKey, TValue> Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.QueryDocument : object {
    [CompilerGeneratedAttribute]
private DocumentNode <Document>k__BackingField;
    public DocumentNode Document { get; }
    public QueryDocument(DocumentNode document);
    [CompilerGeneratedAttribute]
public DocumentNode get_Document();
    public sealed virtual void WriteTo(Stream output);
    public sealed virtual Task WriteToAsync(Stream output);
    [AsyncStateMachineAttribute("HotChocolate.Execution.QueryDocument/<WriteToAsync>d__6")]
public sealed virtual Task WriteToAsync(Stream output, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual ReadOnlySpan`1<byte> AsSpan();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.QueryException : GraphQLException {
    public QueryException(string message);
    public QueryException(IError error);
    public QueryException(IError[] errors);
    public QueryException(IEnumerable`1<IError> errors);
    protected QueryException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Execution.QueryRequest : object {
    [CompilerGeneratedAttribute]
private IQuery <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <VariableValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ContextData>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLRequestFlags <Flags>k__BackingField;
    public IQuery Query { get; }
    public string QueryId { get; }
    public string QueryHash { get; }
    public string OperationName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> VariableValues { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public IServiceProvider Services { get; }
    public GraphQLRequestFlags Flags { get; }
    public QueryRequest(IQuery query, string queryId, string queryHash, string operationName, IReadOnlyDictionary`2<string, object> variableValues, IReadOnlyDictionary`2<string, object> extensions, IReadOnlyDictionary`2<string, object> contextData, IServiceProvider services, GraphQLRequestFlags flags);
    [CompilerGeneratedAttribute]
public sealed virtual IQuery get_Query();
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueryId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_QueryHash();
    [CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_VariableValues();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual GraphQLRequestFlags get_Flags();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.QueryRequestBuilder : object {
    [NullableAttribute("2")]
private IQuery _query;
    [NullableAttribute("2")]
private string _queryName;
    [NullableAttribute("2")]
private string _queryHash;
    [NullableAttribute("2")]
private string _operationName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, object> _readOnlyVariableValues;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _variableValues;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, object> _readOnlyContextData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _contextData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, object> _readOnlyExtensions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _extensions;
    [NullableAttribute("2")]
private IServiceProvider _services;
    private GraphQLRequestFlags _flags;
    public sealed virtual IQueryRequestBuilder SetQuery(string sourceText);
    public sealed virtual IQueryRequestBuilder SetQuery(DocumentNode document);
    public sealed virtual IQueryRequestBuilder SetQueryId(string queryName);
    public sealed virtual IQueryRequestBuilder SetQueryHash(string queryHash);
    public sealed virtual IQueryRequestBuilder SetOperation(string operationName);
    public sealed virtual IQueryRequestBuilder SetServices(IServiceProvider services);
    public sealed virtual IQueryRequestBuilder TrySetServices(IServiceProvider services);
    public sealed virtual IQueryRequestBuilder SetFlags(GraphQLRequestFlags flags);
    public sealed virtual IQueryRequestBuilder SetVariableValues(Dictionary`2<string, object> variableValues);
    public sealed virtual IQueryRequestBuilder SetVariableValues(IDictionary`2<string, object> variableValues);
    public sealed virtual IQueryRequestBuilder SetVariableValues(IReadOnlyDictionary`2<string, object> variableValues);
    public sealed virtual IQueryRequestBuilder SetVariableValue(string name, object value);
    public sealed virtual IQueryRequestBuilder AddVariableValue(string name, object value);
    public sealed virtual IQueryRequestBuilder TryAddVariableValue(string name, object value);
    [ObsoleteAttribute("Use `InitializeGlobalState`")]
public sealed virtual IQueryRequestBuilder SetProperties(Dictionary`2<string, object> properties);
    public sealed virtual IQueryRequestBuilder InitializeGlobalState(Dictionary`2<string, object> initialState);
    [ObsoleteAttribute("Use `InitializeGlobalState`")]
public sealed virtual IQueryRequestBuilder SetProperties(IDictionary`2<string, object> properties);
    public sealed virtual IQueryRequestBuilder InitializeGlobalState(IDictionary`2<string, object> initialState);
    [ObsoleteAttribute("Use `InitializeGlobalState`")]
public sealed virtual IQueryRequestBuilder SetProperties(IReadOnlyDictionary`2<string, object> properties);
    public sealed virtual IQueryRequestBuilder InitializeGlobalState(IReadOnlyDictionary`2<string, object> initialState);
    [ObsoleteAttribute("Use `SetGlobalState`")]
public sealed virtual IQueryRequestBuilder SetProperty(string name, object value);
    public sealed virtual IQueryRequestBuilder SetGlobalState(string name, object value);
    [ObsoleteAttribute("Use `AddGlobalState`")]
public sealed virtual IQueryRequestBuilder AddProperty(string name, object value);
    public sealed virtual IQueryRequestBuilder AddGlobalState(string name, object value);
    [ObsoleteAttribute("Use `TryAddGlobalState`")]
public sealed virtual IQueryRequestBuilder TryAddProperty(string name, object value);
    public sealed virtual IQueryRequestBuilder TryAddGlobalState(string name, object value);
    [ObsoleteAttribute("Use `RemoveGlobalState`")]
public sealed virtual IQueryRequestBuilder TryRemoveProperty(string name);
    public sealed virtual IQueryRequestBuilder RemoveGlobalState(string name);
    public sealed virtual IQueryRequestBuilder SetExtensions(Dictionary`2<string, object> extensions);
    public sealed virtual IQueryRequestBuilder SetExtensions(IDictionary`2<string, object> extensions);
    public sealed virtual IQueryRequestBuilder SetExtensions(IReadOnlyDictionary`2<string, object> extensions);
    public sealed virtual IQueryRequestBuilder SetExtension(string name, object value);
    public sealed virtual IQueryRequestBuilder AddExtension(string name, object value);
    public sealed virtual IQueryRequestBuilder TryAddExtension(string name, object value);
    public sealed virtual IQueryRequest Create();
    private IReadOnlyDictionary`2<string, object> GetVariableValues();
    private void InitializeVariables();
    private IReadOnlyDictionary`2<string, object> GetContextData();
    private void InitializeContextData();
    private IReadOnlyDictionary`2<string, object> GetExtensions();
    private void InitializeExtensions();
    public static IQueryRequest Create(string query);
    public static QueryRequestBuilder New();
    public static QueryRequestBuilder From(IQueryRequest request);
    public static QueryRequestBuilder From(GraphQLRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.QueryRequestBuilderException : Exception {
    public QueryRequestBuilderException(string message);
    public QueryRequestBuilderException(string message, Exception inner);
    protected QueryRequestBuilderException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Execution.QueryRequestBuilderExtensions : object {
    [ExtensionAttribute]
public static IQueryRequestBuilder AllowIntrospection(IQueryRequestBuilder builder);
    [ExtensionAttribute]
public static IQueryRequestBuilder SetIntrospectionNotAllowedMessage(IQueryRequestBuilder builder, string message);
    [ExtensionAttribute]
public static IQueryRequestBuilder SetIntrospectionNotAllowedMessage(IQueryRequestBuilder builder, Func`1<string> messageFactory);
    [ExtensionAttribute]
public static IQueryRequestBuilder SkipComplexityAnalysis(IQueryRequestBuilder builder);
    [ExtensionAttribute]
public static IQueryRequestBuilder SetMaximumAllowedComplexity(IQueryRequestBuilder builder, int maximumAllowedComplexity);
    [ExtensionAttribute]
public static IQueryRequestBuilder AllowNonPersistedQuery(IQueryRequestBuilder builder);
    [ExtensionAttribute]
public static IQueryRequestBuilder SkipExecutionDepthAnalysis(IQueryRequestBuilder builder);
    [ExtensionAttribute]
public static IQueryRequestBuilder SetMaximumAllowedExecutionDepth(IQueryRequestBuilder builder, int maximumAllowedDepth);
    [ExtensionAttribute]
public static IQueryRequestBuilder SetUser(IQueryRequestBuilder builder, ClaimsPrincipal claimsPrincipal);
    [ExtensionAttribute]
public static void RegisterForCleanup(IQueryResultBuilder builder, Action clean);
    [ExtensionAttribute]
public static void RegisterForCleanup(IQueryResultBuilder builder, IDisposable disposable);
    [ExtensionAttribute]
public static void RegisterForCleanup(IQueryResultBuilder builder, IAsyncDisposable disposable);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Execution.QueryResult : ExecutionResult {
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Path <Path>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Items>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<IError> <Errors>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<IQueryResult> <Incremental>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ContextData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasNext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDataSet>k__BackingField;
    public ExecutionResultKind Kind { get; }
    public string Label { get; }
    public Path Path { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Data { get; }
    public IReadOnlyList`1<object> Items { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<IError> Errors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<IQueryResult> Incremental { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public Nullable`1<bool> HasNext { get; }
    public bool IsDataSet { get; }
    internal QueryResult(IReadOnlyDictionary`2<string, object> data, IReadOnlyList`1<IError> errors, IReadOnlyDictionary`2<string, object> extension, IReadOnlyDictionary`2<string, object> contextData, IReadOnlyList`1<object> items, IReadOnlyList`1<IQueryResult> incremental, string label, Path path, Nullable`1<bool> hasNext, Func`1[] cleanupTasks, bool isDataSet);
    public QueryResult(IReadOnlyDictionary`2<string, object> data, IReadOnlyList`1<IError> errors, IReadOnlyDictionary`2<string, object> extension, IReadOnlyDictionary`2<string, object> contextData, IReadOnlyList`1<object> items, IReadOnlyList`1<IQueryResult> incremental, string label, Path path, Nullable`1<bool> hasNext);
    public virtual ExecutionResultKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Label();
    [CompilerGeneratedAttribute]
public sealed virtual Path get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<object> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IError> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IQueryResult> get_Incremental();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_HasNext();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDataSet();
    public sealed virtual IReadOnlyDictionary`2<string, object> ToDictionary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.QueryResultBuilder : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, object> _data;
    [NullableAttribute("2")]
private IReadOnlyList`1<object> _items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IError> _errors;
    [NullableAttribute("2")]
private ExtensionData _extensionData;
    [NullableAttribute("2")]
private ExtensionData _contextData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IQueryResult> _incremental;
    [NullableAttribute("2")]
private string _label;
    [NullableAttribute("2")]
private Path _path;
    private Nullable`1<bool> _hasNext;
    private Nullable`1<bool> _isDataSet;
    private Func`1[] _cleanupTasks;
    public sealed virtual IQueryResultBuilder SetData(IReadOnlyDictionary`2<string, object> data);
    public sealed virtual IQueryResultBuilder SetItems(IReadOnlyList`1<object> items);
    public sealed virtual IQueryResultBuilder AddError(IError error);
    public sealed virtual IQueryResultBuilder AddErrors(IEnumerable`1<IError> errors);
    public sealed virtual IQueryResultBuilder AddExtension(string key, object data);
    public sealed virtual IQueryResultBuilder SetExtension(string key, object data);
    public sealed virtual IQueryResultBuilder SetExtensions(IReadOnlyDictionary`2<string, object> extensions);
    public sealed virtual IQueryResultBuilder AddContextData(string key, object data);
    public sealed virtual IQueryResultBuilder SetContextData(string key, object data);
    public sealed virtual IQueryResultBuilder SetContextData(IReadOnlyDictionary`2<string, object> contextData);
    public IQueryResultBuilder AddPatch(IQueryResult patch);
    public sealed virtual IQueryResultBuilder SetLabel(string label);
    public sealed virtual IQueryResultBuilder SetPath(Path path);
    public sealed virtual IQueryResultBuilder SetHasNext(Nullable`1<bool> hasNext);
    public sealed virtual IQueryResultBuilder RegisterForCleanup(Func`1<ValueTask> clean);
    public sealed virtual IQueryResult Create();
    public static QueryResultBuilder New();
    public static QueryResultBuilder FromResult(IQueryResult result);
    public static IQueryResult CreateError(IError error, IReadOnlyDictionary`2<string, object> contextData);
    public static IQueryResult CreateError(IReadOnlyList`1<IError> errors, IReadOnlyDictionary`2<string, object> contextData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.QueryResultHelper : object {
    private static string _data;
    private static string _errors;
    private static string _extensions;
    private static string _message;
    private static string _locations;
    private static string _path;
    private static string _line;
    private static string _column;
    public static IReadOnlyDictionary`2<string, object> ToDictionary(IQueryResult result);
    private static ICollection`1<object> SerializeErrors(IReadOnlyCollection`1<IError> errors);
    private static IReadOnlyList`1<IReadOnlyDictionary`2<string, int>> SerializeLocations(IReadOnlyList`1<Location> locations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.QuerySourceText : object {
    [NullableAttribute("2")]
private Byte[] _source;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public QuerySourceText(string sourceText);
    [CompilerGeneratedAttribute]
public string get_Text();
    public sealed virtual void WriteTo(Stream output);
    public sealed virtual Task WriteToAsync(Stream output);
    [AsyncStateMachineAttribute("HotChocolate.Execution.QuerySourceText/<WriteToAsync>d__7")]
public sealed virtual Task WriteToAsync(Stream output, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual ReadOnlySpan`1<byte> AsSpan();
    public virtual string ToString();
}
public class HotChocolate.Execution.ResponseStream : ExecutionResult {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<IAsyncEnumerable`1<IQueryResult>> _resultStreamFactory;
    private bool _isRead;
    [CompilerGeneratedAttribute]
private ExecutionResultKind <Kind>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ContextData>k__BackingField;
    public ExecutionResultKind Kind { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public ResponseStream(Func`1<IAsyncEnumerable`1<IQueryResult>> resultStreamFactory, ExecutionResultKind kind, IReadOnlyDictionary`2<string, object> contextData);
    [CompilerGeneratedAttribute]
public virtual ExecutionResultKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    [NullableContextAttribute("1")]
public sealed virtual IAsyncEnumerable`1<IQueryResult> ReadResultsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.VariableValue : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IInputType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <Value>k__BackingField;
    public string Name { get; }
    public IInputType Type { get; }
    public IValueNode Value { get; }
    public VariableValue(string name, IInputType type, IValueNode value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IInputType get_Type();
    [CompilerGeneratedAttribute]
public IValueNode get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class HotChocolate.ExtensionData : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _dict;
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
private object System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Item { get; }
    public ICollection`1<string> Keys { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<object> Values { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ExtensionData(ExtensionData extensionData);
    public ExtensionData(IReadOnlyDictionary`2<string, object> extensionData);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    private sealed virtual override object System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Item(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    private sealed virtual override IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public void AddRange(IEnumerable`1<KeyValuePair`2<string, object>> pairs);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool TryGetValue(string key, Object& value);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.TryGetValue(string key, Object& value);
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private Dictionary`2<string, object> Dict();
    internal bool TryGetInnerDictionary(Dictionary`2& dictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.FieldCoordinate : ValueType {
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ArgumentName>k__BackingField;
    public bool HasValue { get; }
    public string TypeName { get; }
    public string FieldName { get; }
    [NullableAttribute("2")]
public string ArgumentName { get; }
    public FieldCoordinate(string typeName, string fieldName, string argumentName);
    public void Deconstruct(String& typeName, String& fieldName, String& argumentName);
    public static FieldCoordinate CreateWithoutType(string fieldName, string argumentName);
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ArgumentName();
    public FieldCoordinate With(Optional`1<string> typeName, Optional`1<string> fieldName, Optional`1<string> argumentName);
    public sealed virtual bool Equals(FieldCoordinate other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static FieldCoordinate op_Implicit(string s);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class HotChocolate.GlobalStateAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; }
    [NullableContextAttribute("1")]
public GlobalStateAttribute(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2496")]
public class HotChocolate.GraphQLDeprecatedAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DeprecationReason>k__BackingField;
    public string DeprecationReason { get; }
    public GraphQLDeprecatedAttribute(string deprecationReason);
    [CompilerGeneratedAttribute]
public string get_DeprecationReason();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3548")]
public class HotChocolate.GraphQLDescriptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public GraphQLDescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.GraphQLException : Exception {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IError> <Errors>k__BackingField;
    public IReadOnlyList`1<IError> Errors { get; }
    public GraphQLException(string message);
    public GraphQLException(IError error);
    public GraphQLException(IError[] errors);
    public GraphQLException(IEnumerable`1<IError> errors);
    public GraphQLException(string message, Exception innerException);
    protected GraphQLException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IError> get_Errors();
}
[AttributeUsageAttribute("448")]
public class HotChocolate.GraphQLIgnoreAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("3548")]
public class HotChocolate.GraphQLNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public GraphQLNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2240")]
public class HotChocolate.GraphQLNonNullTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Boolean[] <Nullable>k__BackingField;
    internal Boolean[] Nullable { get; }
    public GraphQLNonNullTypeAttribute(Boolean[] nullable);
    [CompilerGeneratedAttribute]
internal Boolean[] get_Nullable();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2240")]
public class HotChocolate.GraphQLTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeNode <TypeSyntax>k__BackingField;
    public Type Type { get; }
    public ITypeNode TypeSyntax { get; }
    [NullableContextAttribute("1")]
public GraphQLTypeAttribute(Type type);
    [NullableContextAttribute("1")]
public GraphQLTypeAttribute(string typeSyntax);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public ITypeNode get_TypeSyntax();
}
public interface HotChocolate.IApplicationServiceProvider {
}
[NullableContextAttribute("1")]
public interface HotChocolate.IError {
    public string Message { get; }
    [NullableAttribute("2")]
public string Code { get; }
    [NullableAttribute("2")]
public Path Path { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<Location> Locations { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    public abstract virtual string get_Message();
    [NullableContextAttribute("2")]
public abstract virtual string get_Code();
    [NullableContextAttribute("2")]
public abstract virtual Path get_Path();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyList`1<Location> get_Locations();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Extensions();
    [NullableContextAttribute("2")]
public abstract virtual Exception get_Exception();
    public abstract virtual IError WithMessage(string message);
    public abstract virtual IError WithCode(string code);
    public abstract virtual IError RemoveCode();
    public abstract virtual IError WithPath(Path path);
    public abstract virtual IError WithPath(IReadOnlyList`1<object> path);
    public abstract virtual IError RemovePath();
    public abstract virtual IError WithLocations(IReadOnlyList`1<Location> locations);
    public abstract virtual IError RemoveLocations();
    public abstract virtual IError WithExtensions(IReadOnlyDictionary`2<string, object> extensions);
    public abstract virtual IError RemoveExtensions();
    public abstract virtual IError SetExtension(string key, object value);
    public abstract virtual IError RemoveExtension(string key);
    public abstract virtual IError WithException(Exception exception);
    public abstract virtual IError RemoveException();
}
[NullableContextAttribute("1")]
public interface HotChocolate.IErrorBuilder {
    public abstract virtual IErrorBuilder SetMessage(string message);
    public abstract virtual IErrorBuilder SetCode(string code);
    public abstract virtual IErrorBuilder RemoveCode();
    public abstract virtual IErrorBuilder SetPath(IReadOnlyList`1<object> path);
    public abstract virtual IErrorBuilder SetPath(Path path);
    public abstract virtual IErrorBuilder RemovePath();
    public abstract virtual IErrorBuilder AddLocation(Location location);
    public abstract virtual IErrorBuilder AddLocation(int line, int column);
    public abstract virtual IErrorBuilder SetSyntaxNode(ISyntaxNode syntaxNode);
    public abstract virtual IErrorBuilder ClearLocations();
    public abstract virtual IErrorBuilder SetException(Exception exception);
    public abstract virtual IErrorBuilder RemoveException();
    public abstract virtual IErrorBuilder SetExtension(string key, object value);
    public abstract virtual IErrorBuilder RemoveExtension(string key);
    public abstract virtual IErrorBuilder ClearExtensions();
    public abstract virtual IError Build();
}
[NullableContextAttribute("1")]
public interface HotChocolate.IErrorFilter {
    public abstract virtual IError OnError(IError error);
}
[NullableContextAttribute("1")]
public interface HotChocolate.IErrorHandler {
    public abstract virtual IError Handle(IError error);
    public abstract virtual IErrorBuilder CreateUnexpectedError(Exception exception);
}
[NullableContextAttribute("1")]
public interface HotChocolate.IExecutable {
    public object Source { get; }
    public abstract virtual object get_Source();
    public abstract virtual ValueTask`1<IList> ToListAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<object> FirstOrDefaultAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<object> SingleOrDefaultAsync(CancellationToken cancellationToken);
    public abstract virtual string Print();
}
public interface HotChocolate.IExecutable`1 {
}
public interface HotChocolate.IHasContextData {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public abstract virtual IDictionary`2<string, object> get_ContextData();
}
public interface HotChocolate.IHasReadOnlyContextData {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ContextData();
}
[NullableContextAttribute("2")]
public interface HotChocolate.IMutationResult {
    public object Value { get; }
    public bool IsSuccess { get; }
    public bool IsError { get; }
    public abstract virtual object get_Value();
    public abstract virtual bool get_IsSuccess();
    public abstract virtual bool get_IsError();
}
public class HotChocolate.IndexerPathSegment : Path {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public int Index { get; }
    [NullableContextAttribute("1")]
internal IndexerPathSegment(Path parent, int index);
    [CompilerGeneratedAttribute]
public int get_Index();
    [NullableContextAttribute("2")]
public virtual bool Equals(Path other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
public interface HotChocolate.IOptional {
    public object Value { get; }
    public bool HasValue { get; }
    public abstract virtual object get_Value();
    public abstract virtual bool get_HasValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class HotChocolate.LocalStateAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; }
    [NullableContextAttribute("1")]
public LocalStateAttribute(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
}
[IsReadOnlyAttribute]
public class HotChocolate.Location : ValueType {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public Location(int line, int column);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
    public sealed virtual int CompareTo(Location other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.MissingStateException : Exception {
    [CompilerGeneratedAttribute]
private string <Feature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private StateKind <Kind>k__BackingField;
    public string Feature { get; }
    public string Key { get; }
    public StateKind Kind { get; }
    public MissingStateException(string feature, string key, StateKind kind);
    [CompilerGeneratedAttribute]
public string get_Feature();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public StateKind get_Kind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class HotChocolate.ModuleAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleOptions <Options>k__BackingField;
    public string Name { get; }
    public ModuleOptions Options { get; }
    public ModuleAttribute(string name, ModuleOptions options);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ModuleOptions get_Options();
}
[FlagsAttribute]
public enum HotChocolate.ModuleOptions : Enum {
    public int value__;
    public static ModuleOptions Default;
    public static ModuleOptions RegisterTypes;
    public static ModuleOptions RegisterDataLoader;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.MutationError : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Errors>k__BackingField;
    public IReadOnlyList`1<object> Errors { get; }
    private object HotChocolate.IMutationResult.Value { get; }
    public bool IsSuccess { get; }
    public bool IsError { get; }
    public MutationError(object error);
    public MutationError(IReadOnlyList`1<object> errors);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Errors();
    private sealed virtual override object HotChocolate.IMutationResult.get_Value();
    public sealed virtual bool get_IsSuccess();
    public sealed virtual bool get_IsError();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.MutationResult`1 : ValueType {
    [CompilerGeneratedAttribute]
private TResult <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    public TResult Value { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Errors { get; }
    public bool IsSuccess { get; }
    public bool IsError { get; }
    private object HotChocolate.IMutationResult.Value { get; }
    [NullableContextAttribute("1")]
public MutationResult`1(TResult value);
    [NullableContextAttribute("1")]
public MutationResult`1(object error);
    [NullableContextAttribute("1")]
public MutationResult`1(IEnumerable`1<object> errors);
    [NullableContextAttribute("1")]
public MutationResult`1(Object[] errors);
    [CompilerGeneratedAttribute]
public TResult get_Value();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsError();
    private sealed virtual override object HotChocolate.IMutationResult.get_Value();
    [NullableContextAttribute("1")]
public static MutationResult`1<TResult> op_Implicit(TResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.MutationResult`2 : ValueType {
    [CompilerGeneratedAttribute]
private TResult <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    public TResult Value { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Errors { get; }
    public bool IsSuccess { get; }
    public bool IsError { get; }
    private object HotChocolate.IMutationResult.Value { get; }
    [NullableContextAttribute("1")]
public MutationResult`2(TResult value);
    [NullableContextAttribute("1")]
public MutationResult`2(TError error);
    [NullableContextAttribute("1")]
public MutationResult`2(IEnumerable`1<TError> errors);
    [NullableContextAttribute("1")]
public MutationResult`2(TError[] errors);
    [CompilerGeneratedAttribute]
public TResult get_Value();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsError();
    private sealed virtual override object HotChocolate.IMutationResult.get_Value();
    [NullableContextAttribute("1")]
public static MutationResult`2<TResult, TError> op_Implicit(TResult result);
    [NullableContextAttribute("1")]
public static MutationResult`2<TResult, TError> op_Implicit(TError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.MutationResult`3 : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TResult <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [NullableAttribute("2")]
public TResult Value { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Errors { get; }
    public bool IsSuccess { get; }
    public bool IsError { get; }
    [NullableAttribute("2")]
private object HotChocolate.IMutationResult.Value { get; }
    public MutationResult`3(TResult value);
    public MutationResult`3(TError1 error);
    public MutationResult`3(IEnumerable`1<TError1> errors);
    public MutationResult`3(TError1[] errors);
    public MutationResult`3(TError2 error);
    public MutationResult`3(IEnumerable`1<TError2> errors);
    public MutationResult`3(TError2[] errors);
    public MutationResult`3(IEnumerable`1<object> errors);
    public MutationResult`3(Object[] errors);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TResult get_Value();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsError();
    [NullableContextAttribute("2")]
private sealed virtual override object HotChocolate.IMutationResult.get_Value();
    public static MutationResult`3<TResult, TError1, TError2> op_Implicit(TResult result);
    public static MutationResult`3<TResult, TError1, TError2> op_Implicit(TError1 error);
    public static MutationResult`3<TResult, TError1, TError2> op_Implicit(TError2 error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.MutationResult`4 : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TResult <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [NullableAttribute("2")]
public TResult Value { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Errors { get; }
    public bool IsSuccess { get; }
    public bool IsError { get; }
    [NullableAttribute("2")]
private object HotChocolate.IMutationResult.Value { get; }
    public MutationResult`4(TResult value);
    public MutationResult`4(TError1 error);
    public MutationResult`4(IEnumerable`1<TError1> errors);
    public MutationResult`4(TError1[] errors);
    public MutationResult`4(TError2 error);
    public MutationResult`4(IEnumerable`1<TError2> errors);
    public MutationResult`4(TError2[] errors);
    public MutationResult`4(TError3 error);
    public MutationResult`4(IEnumerable`1<TError3> errors);
    public MutationResult`4(TError3[] errors);
    public MutationResult`4(IEnumerable`1<object> errors);
    public MutationResult`4(Object[] errors);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TResult get_Value();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsError();
    [NullableContextAttribute("2")]
private sealed virtual override object HotChocolate.IMutationResult.get_Value();
    public static MutationResult`4<TResult, TError1, TError2, TError3> op_Implicit(TResult result);
    public static MutationResult`4<TResult, TError1, TError2, TError3> op_Implicit(TError1 error);
    public static MutationResult`4<TResult, TError1, TError2, TError3> op_Implicit(TError2 error);
    public static MutationResult`4<TResult, TError1, TError2, TError3> op_Implicit(TError3 error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.MutationResult`5 : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TResult <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [NullableAttribute("2")]
public TResult Value { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Errors { get; }
    public bool IsSuccess { get; }
    public bool IsError { get; }
    [NullableAttribute("2")]
private object HotChocolate.IMutationResult.Value { get; }
    public MutationResult`5(TResult value);
    public MutationResult`5(TError1 error);
    public MutationResult`5(IEnumerable`1<TError1> errors);
    public MutationResult`5(TError1[] errors);
    public MutationResult`5(TError2 error);
    public MutationResult`5(IEnumerable`1<TError2> errors);
    public MutationResult`5(TError2[] errors);
    public MutationResult`5(TError3 error);
    public MutationResult`5(IEnumerable`1<TError3> errors);
    public MutationResult`5(TError3[] errors);
    public MutationResult`5(TError4 error);
    public MutationResult`5(IEnumerable`1<TError4> errors);
    public MutationResult`5(TError4[] errors);
    public MutationResult`5(IEnumerable`1<object> errors);
    public MutationResult`5(Object[] errors);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TResult get_Value();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsError();
    [NullableContextAttribute("2")]
private sealed virtual override object HotChocolate.IMutationResult.get_Value();
    public static MutationResult`5<TResult, TError1, TError2, TError3, TError4> op_Implicit(TResult result);
    public static MutationResult`5<TResult, TError1, TError2, TError3, TError4> op_Implicit(TError1 error);
    public static MutationResult`5<TResult, TError1, TError2, TError3, TError4> op_Implicit(TError2 error);
    public static MutationResult`5<TResult, TError1, TError2, TError3, TError4> op_Implicit(TError3 error);
    public static MutationResult`5<TResult, TError1, TError2, TError3, TError4> op_Implicit(TError4 error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.MutationResult`6 : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TResult <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [NullableAttribute("2")]
public TResult Value { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Errors { get; }
    public bool IsSuccess { get; }
    public bool IsError { get; }
    [NullableAttribute("2")]
private object HotChocolate.IMutationResult.Value { get; }
    public MutationResult`6(TResult value);
    public MutationResult`6(TError1 error);
    public MutationResult`6(IEnumerable`1<TError1> errors);
    public MutationResult`6(TError1[] errors);
    public MutationResult`6(TError2 error);
    public MutationResult`6(IEnumerable`1<TError2> errors);
    public MutationResult`6(TError2[] errors);
    public MutationResult`6(TError3 error);
    public MutationResult`6(IEnumerable`1<TError3> errors);
    public MutationResult`6(TError3[] errors);
    public MutationResult`6(TError4 error);
    public MutationResult`6(IEnumerable`1<TError4> errors);
    public MutationResult`6(TError4[] errors);
    public MutationResult`6(TError5 error);
    public MutationResult`6(IEnumerable`1<TError5> errors);
    public MutationResult`6(TError5[] errors);
    public MutationResult`6(IEnumerable`1<object> errors);
    public MutationResult`6(Object[] errors);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TResult get_Value();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsError();
    [NullableContextAttribute("2")]
private sealed virtual override object HotChocolate.IMutationResult.get_Value();
    public static MutationResult`6<TResult, TError1, TError2, TError3, TError4, TError5> op_Implicit(TResult result);
    public static MutationResult`6<TResult, TError1, TError2, TError3, TError4, TError5> op_Implicit(TError1 error);
    public static MutationResult`6<TResult, TError1, TError2, TError3, TError4, TError5> op_Implicit(TError2 error);
    public static MutationResult`6<TResult, TError1, TError2, TError3, TError4, TError5> op_Implicit(TError3 error);
    public static MutationResult`6<TResult, TError1, TError2, TError3, TError4, TError5> op_Implicit(TError4 error);
    public static MutationResult`6<TResult, TError1, TError2, TError3, TError4, TError5> op_Implicit(TError5 error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.NameFormattingHelpers : object {
    private static string _get;
    private static string _async;
    private static char _genericTypeDelimiter;
    [ExtensionAttribute]
public static string GetGraphQLName(Type type);
    [ExtensionAttribute]
public static string GetGraphQLName(PropertyInfo property);
    [ExtensionAttribute]
public static string GetGraphQLName(MethodInfo method);
    [ExtensionAttribute]
public static string GetGraphQLName(ParameterInfo parameter);
    [ExtensionAttribute]
public static string GetGraphQLName(MemberInfo member);
    private static string FormatMethodName(MethodInfo method);
    private static bool IsAsyncMethod(Type returnType);
    [ExtensionAttribute]
public static string GetGraphQLDescription(ICustomAttributeProvider attributeProvider);
    [ExtensionAttribute]
public static bool IsDeprecated(ICustomAttributeProvider attributeProvider, String& reason);
    private static string GetFromType(Type type);
    public static string FormatFieldName(string fieldName);
    private static TAttribute GetAttributeIfDefined(ICustomAttributeProvider attributeProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.NamePathSegment : Path {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    internal NamePathSegment(Path parent, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
public virtual bool Equals(Path other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Optional`1 : ValueType {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    public T Value { get; }
    private object HotChocolate.IOptional.Value { get; }
    public bool HasValue { get; }
    public bool IsEmpty { get; }
    public Optional`1(T value);
    private Optional`1(T value, bool hasValue);
    [CompilerGeneratedAttribute]
public T get_Value();
    private sealed virtual override object HotChocolate.IOptional.get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasValue();
    public bool get_IsEmpty();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool Equals(Optional`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Optional`1<T> left, Optional`1<T> right);
    public static bool op_Inequality(Optional`1<T> left, Optional`1<T> right);
    [NullableContextAttribute("1")]
public static Optional`1<T> op_Implicit(T value);
    [NullableContextAttribute("1")]
public static T op_Implicit(Optional`1<T> optional);
    public static Optional`1<T> Empty(T defaultValue);
    [NullableContextAttribute("1")]
public static Optional`1<T> From(IOptional optional);
}
[AttributeUsageAttribute("2048")]
public class HotChocolate.ParentAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Path : object {
    [NullableAttribute("2")]
private Path _parent;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public Path Parent { get; }
    public int Length { get; }
    public bool IsRoot { get; }
    public static Path Root { get; }
    protected Path(Path parent);
    public Path get_Parent();
    [CompilerGeneratedAttribute]
public int get_Length();
    public bool get_IsRoot();
    public Path Append(string name);
    public Path Append(int index);
    public string Print();
    public IReadOnlyList`1<object> ToList();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(Path other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static Path FromList(Object[] elements);
    internal static Path FromList(IReadOnlyList`1<object> path);
    public static Path get_Root();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Properties.AbstractionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DirectiveArgument_NameMustNotBeNullOrempty { get; }
    internal static string Name_MustNotBeEmpty { get; }
    internal static string QueryRequestBuilder_QueryIsNull { get; }
    internal static string QueryRequestBuilder_QueryIsNullOrEmpty { get; }
    internal static string State_KeyMustNotBeNullOrEmpty { get; }
    internal static string Type_NameIsNotValid { get; }
    internal static string Error_Unknown_Error { get; }
    internal static string Error_Message_Mustnt_Be_Null { get; }
    internal static string Error_WithMessage_Message_Cannot_Be_Empty { get; }
    internal static string Path_WithPath_Path_Value_NotSupported { get; }
    internal static string Error_SetExtension_Key_Cannot_Be_Empty { get; }
    internal static string Location_Line_Is_1_Based { get; }
    internal static string Location_Column_Is_1_Based { get; }
    internal static string SubscriptionResult_ResultHasErrors { get; }
    internal static string SubscriptionResult_ReadOnlyOnce { get; }
    internal static string SingleValueExtensionData_KeyNotFound { get; }
    internal static string ExtensionDataKeyCollection_CopyTo_ArrayNotBigEnough { get; }
    internal static string ExtensionDataCollection_CollectionIsReadOnly { get; }
    internal static string SingleValueExtensionData_KeyIsEmpty { get; }
    internal static string FieldCoordinate_Parse_InvalidComponentCount { get; }
    internal static string FieldCoordinate_Parse_InvalidFieldComponentCount { get; }
    internal static string FieldCoordinate_Parse_InvalidFormat { get; }
    internal static string AggregateError_Message { get; }
    internal static string ResultValue_NameIsNullOrEmpty { get; }
    internal static string QueryResult_DataAndResultAreNull { get; }
    internal static string ThrowHelper_TryRewriteNullability_InvalidNullabilityStructure { get; }
    internal static string ThrowHelper_SchemaCoordinate_ArgumentNameCannotBeSetWithoutMemberName { get; }
    internal static string ThrowHelper_SchemaCoordinate_MemberNameCannotBeSetOnADirectiveCoordinate { get; }
    internal static string ResponseStream_InvalidResultKind { get; }
    internal static string ExecutionResultExtensions_ExpectResponseStream_NotResponseStream { get; }
    internal static string ExecutionResultExtensions_ExpectQueryResult_NotQueryResult { get; }
    internal static string NameUtils_InvalidGraphQLName { get; }
    internal static string MutationResult_ErrorElementIsNull { get; }
    internal static string MutationResult_ErrorsIsEmpty { get; }
    internal static string MissingStateException_Message { get; }
    internal static string AttributeExtensions_FormatFieldName_FieldNameEmpty { get; }
    internal static string MutationError_ErrorsEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DirectiveArgument_NameMustNotBeNullOrempty();
    internal static string get_Name_MustNotBeEmpty();
    internal static string get_QueryRequestBuilder_QueryIsNull();
    internal static string get_QueryRequestBuilder_QueryIsNullOrEmpty();
    internal static string get_State_KeyMustNotBeNullOrEmpty();
    internal static string get_Type_NameIsNotValid();
    internal static string get_Error_Unknown_Error();
    internal static string get_Error_Message_Mustnt_Be_Null();
    internal static string get_Error_WithMessage_Message_Cannot_Be_Empty();
    internal static string get_Path_WithPath_Path_Value_NotSupported();
    internal static string get_Error_SetExtension_Key_Cannot_Be_Empty();
    internal static string get_Location_Line_Is_1_Based();
    internal static string get_Location_Column_Is_1_Based();
    internal static string get_SubscriptionResult_ResultHasErrors();
    internal static string get_SubscriptionResult_ReadOnlyOnce();
    internal static string get_SingleValueExtensionData_KeyNotFound();
    internal static string get_ExtensionDataKeyCollection_CopyTo_ArrayNotBigEnough();
    internal static string get_ExtensionDataCollection_CollectionIsReadOnly();
    internal static string get_SingleValueExtensionData_KeyIsEmpty();
    internal static string get_FieldCoordinate_Parse_InvalidComponentCount();
    internal static string get_FieldCoordinate_Parse_InvalidFieldComponentCount();
    internal static string get_FieldCoordinate_Parse_InvalidFormat();
    internal static string get_AggregateError_Message();
    internal static string get_ResultValue_NameIsNullOrEmpty();
    internal static string get_QueryResult_DataAndResultAreNull();
    internal static string get_ThrowHelper_TryRewriteNullability_InvalidNullabilityStructure();
    internal static string get_ThrowHelper_SchemaCoordinate_ArgumentNameCannotBeSetWithoutMemberName();
    internal static string get_ThrowHelper_SchemaCoordinate_MemberNameCannotBeSetOnADirectiveCoordinate();
    internal static string get_ResponseStream_InvalidResultKind();
    internal static string get_ExecutionResultExtensions_ExpectResponseStream_NotResponseStream();
    internal static string get_ExecutionResultExtensions_ExpectQueryResult_NotQueryResult();
    internal static string get_NameUtils_InvalidGraphQLName();
    internal static string get_MutationResult_ErrorElementIsNull();
    internal static string get_MutationResult_ErrorsIsEmpty();
    internal static string get_MissingStateException_Message();
    internal static string get_AttributeExtensions_FormatFieldName_FieldNameEmpty();
    internal static string get_MutationError_ErrorsEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.SchemaCoordinate : ValueType {
    [CompilerGeneratedAttribute]
private bool <OfDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ArgumentName>k__BackingField;
    public bool OfDirective { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string MemberName { get; }
    [NullableAttribute("2")]
public string ArgumentName { get; }
    [NullableContextAttribute("2")]
public SchemaCoordinate(string name, string memberName, string argumentName, bool ofDirective);
    [CompilerGeneratedAttribute]
public bool get_OfDirective();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MemberName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ArgumentName();
    public SchemaCoordinateNode ToSyntax();
    public virtual string ToString();
    public static bool TryParse(string s, Nullable`1& coordinate);
    public static SchemaCoordinate Parse(string s);
    public static SchemaCoordinate FromSyntax(SchemaCoordinateNode node);
    public sealed virtual bool Equals(SchemaCoordinate other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SchemaCoordinate left, SchemaCoordinate right);
    public static bool op_Inequality(SchemaCoordinate left, SchemaCoordinate right);
}
[AttributeUsageAttribute("2048")]
public class HotChocolate.SchemaServiceAttribute : Attribute {
}
[ObsoleteAttribute("Use [Service(ServiceKind.Pooled)] or [Service(ServiceKind.Resolver)]")]
[AttributeUsageAttribute("2048")]
public class HotChocolate.ScopedServiceAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class HotChocolate.ScopedStateAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; }
    [NullableContextAttribute("1")]
public ScopedStateAttribute(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
}
[AttributeUsageAttribute("2048")]
public class HotChocolate.ServiceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ServiceKind <Kind>k__BackingField;
    public ServiceKind Kind { get; }
    public ServiceAttribute(ServiceKind kind);
    [CompilerGeneratedAttribute]
public ServiceKind get_Kind();
}
public enum HotChocolate.ServiceKind : Enum {
    public int value__;
    public static ServiceKind Default;
    public static ServiceKind Synchronized;
    public static ServiceKind Pooled;
    public static ServiceKind Resolver;
}
public class HotChocolate.SetState : MulticastDelegate {
    public SetState(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object value);
    public virtual IAsyncResult BeginInvoke(object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HotChocolate.SetState`1 : MulticastDelegate {
    public SetState`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(T value);
    public virtual IAsyncResult BeginInvoke(T value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class HotChocolate.SingleValueExtensionData : object {
    private string _key;
    [NullableAttribute("2")]
private object _value;
    public int Count { get; }
    [NullableAttribute("2")]
public object Item { get; }
    public IEnumerable`1<string> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<object> Values { get; }
    public SingleValueExtensionData(string key, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual object get_Item(string key);
    [IteratorStateMachineAttribute("HotChocolate.SingleValueExtensionData/<get_Keys>d__10")]
public sealed virtual IEnumerable`1<string> get_Keys();
    [IteratorStateMachineAttribute("HotChocolate.SingleValueExtensionData/<get_Values>d__12")]
public sealed virtual IEnumerable`1<object> get_Values();
    [IteratorStateMachineAttribute("HotChocolate.SingleValueExtensionData/<GetEnumerator>d__13")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum HotChocolate.StateKind : Enum {
    public int value__;
    public static StateKind Global;
    public static StateKind Scoped;
    public static StateKind Local;
    public static StateKind Response;
}
[NullableContextAttribute("1")]
public interface HotChocolate.Subscriptions.ITopicEventReceiver {
    public abstract virtual ValueTask`1<ISourceStream`1<TMessage>> SubscribeAsync(string topicName, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<ISourceStream`1<TMessage>> SubscribeAsync(string topicName, Nullable`1<int> bufferCapacity, Nullable`1<TopicBufferFullMode> bufferFullMode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Subscriptions.ITopicEventSender {
    public abstract virtual ValueTask SendAsync(string topicName, TMessage message, CancellationToken cancellationToken);
    public abstract virtual ValueTask CompleteAsync(string topicName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Subscriptions.SubscriptionOptions : object {
    [CompilerGeneratedAttribute]
private string <TopicPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TopicBufferCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private TopicBufferFullMode <TopicBufferFullMode>k__BackingField;
    public string TopicPrefix { get; public set; }
    public int TopicBufferCapacity { get; public set; }
    public TopicBufferFullMode TopicBufferFullMode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TopicPrefix();
    [CompilerGeneratedAttribute]
public void set_TopicPrefix(string value);
    [CompilerGeneratedAttribute]
public int get_TopicBufferCapacity();
    [CompilerGeneratedAttribute]
public void set_TopicBufferCapacity(int value);
    [CompilerGeneratedAttribute]
public TopicBufferFullMode get_TopicBufferFullMode();
    [CompilerGeneratedAttribute]
public void set_TopicBufferFullMode(TopicBufferFullMode value);
}
public enum HotChocolate.Subscriptions.TopicBufferFullMode : Enum {
    public int value__;
    public static TopicBufferFullMode DropNewest;
    public static TopicBufferFullMode DropOldest;
    public static TopicBufferFullMode DropWrite;
}
[NullableContextAttribute("1")]
public interface HotChocolate.Types.IHasRuntimeType {
    public Type RuntimeType { get; }
    public abstract virtual Type get_RuntimeType();
}
public interface HotChocolate.Types.IInputType {
}
public interface HotChocolate.Types.IOutputType {
}
public interface HotChocolate.Types.IType {
    public TypeKind Kind { get; }
    public abstract virtual TypeKind get_Kind();
}
public interface HotChocolate.Types.ITypeSystemMember {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.LiteralExtensions : object {
    [ExtensionAttribute]
public static bool TryGetValueKind(IValueNode literal, ValueKind& kind);
    [ExtensionAttribute]
public static ValueKind GetValueKind(IValueNode literal);
}
public enum HotChocolate.Types.TypeKind : Enum {
    public int value__;
    public static TypeKind Interface;
    public static TypeKind Object;
    public static TypeKind Union;
    public static TypeKind InputObject;
    public static TypeKind Enum;
    public static TypeKind Scalar;
    public static TypeKind List;
    public static TypeKind NonNull;
    public static TypeKind Directive;
}
public enum HotChocolate.Types.ValueKind : Enum {
    public int value__;
    public static ValueKind String;
    public static ValueKind Integer;
    public static ValueKind Float;
    public static ValueKind Boolean;
    public static ValueKind Enum;
    public static ValueKind Object;
    public static ValueKind List;
    public static ValueKind Null;
    public static ValueKind Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.UserState : object {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAuthenticated>k__BackingField;
    public ClaimsPrincipal User { get; }
    public Nullable`1<bool> IsAuthenticated { get; }
    public UserState(ClaimsPrincipal user, Nullable`1<bool> isAuthenticated);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_User();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAuthenticated();
    public UserState SetIsAuthenticated(bool isAuthenticated);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(UserState other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class HotChocolate.Utilities.NameUtils : object {
    private static byte _underscore;
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string EnsureGraphQLName(string name, string argumentName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsValidGraphQLName(string name);
    [ExtensionAttribute]
public static bool IsValidGraphQLName(ReadOnlySpan`1& name);
    [NullableContextAttribute("2")]
public static string MakeValidGraphQLName(string name);
    [ExtensionAttribute]
private static bool IsLetterOrDigitOrUnderscore(char c);
    [ExtensionAttribute]
private static bool IsLetterOrDigitOrUnderscore(byte c);
    [ExtensionAttribute]
private static bool IsLetterOrUnderscore(byte c);
    [ExtensionAttribute]
private static bool IsLetterOrUnderscore(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.WellKnownContextData : object {
    public static string EventMessage;
    public static string Subscription;
    public static string EnableTracing;
    public static string DocumentSaved;
    public static string NonPersistedQueryAllowed;
    public static string ValidationErrors;
    public static string HttpStatusCode;
    public static string OperationNotAllowed;
    public static string IntrospectionAllowed;
    public static string IntrospectionMessage;
    public static string SkipComplexityAnalysis;
    public static string OperationComplexity;
    public static string MaximumAllowedComplexity;
    public static string IncludeQueryPlan;
    public static string ResolverConfigs;
    public static string ResolverTypes;
    public static string RuntimeTypes;
    public static string RootInstance;
    public static string ResolverServiceScope;
    public static string RequestExecutor;
    public static string SchemaName;
    public static string Schema;
    public static string SchemaDirectives;
    public static string SchemaDocuments;
    public static string OperationSessionId;
    public static string DeferredResultId;
    public static string InitialValue;
    public static string RemovedResults;
    public static string ExpectedPatches;
    public static string PatchId;
    public static string TypeDiscoveryHandlers;
    public static string NodeResolver;
    public static string IsRelaySupportEnabled;
    public static string GlobalIdSupportEnabled;
    public static string NodeId;
    public static string InternalId;
    public static string InternalTypeName;
    public static string InternalType;
    public static string IdValue;
    public static string IsNodeField;
    public static string IsNodesField;
    public static string MaxAllowedExecutionDepth;
    public static string SkipDepthAnalysis;
    public static string MutationQueryField;
    public static string MutationConventionDataField;
    public static string CacheControlHeaderValue;
    public static string SkipQueryCaching;
    public static string CacheControlConstraints;
    public static string AuthorizationOptions;
    public static string AuthorizationRequestPolicy;
    public static string UserState;
    public static string AuthorizationHandler;
    public static string AllowAnonymous;
    public static string EnableTrueNullability;
    public static string TagOptions;
    public static string InternalSchemaOptions;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.WellKnownDirectives : object {
    public static string Skip;
    public static string Include;
    public static string Defer;
    public static string Stream;
    public static string OneOf;
    public static string IfArgument;
    public static string LabelArgument;
    public static string InitialCount;
    public static string Deprecated;
    public static string DeprecationReasonArgument;
    public static string DeprecationDefaultReason;
    public static string Tag;
    public static string Name;
    public static string NullBubbling;
    public static string Enable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.WellKnownMiddleware : object {
    public static string Paging;
    public static string Projection;
    public static string Filtering;
    public static string Sorting;
    public static string DataLoader;
    public static string GlobalId;
    public static string SingleOrDefault;
    public static string DbContext;
    public static string ToList;
    public static string ResolverServiceScope;
    public static string PooledService;
    public static string ResolverService;
    public static string MutationArguments;
    public static string MutationErrors;
    public static string MutationErrorNull;
    public static string MutationResult;
    public static string Authorization;
}
internal static class HotChocolate.WellKnownSchema : object {
    [NullableAttribute("1")]
public static string Default;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
