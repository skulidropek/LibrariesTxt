[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Authorization.DefaultAuthorizationHandler : object {
    private IAuthorizationService _authSvc;
    private IAuthorizationPolicyProvider _policyProvider;
    public DefaultAuthorizationHandler(IAuthorizationService authorizationService, IAuthorizationPolicyProvider authorizationPolicyProvider);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Authorization.DefaultAuthorizationHandler/<AuthorizeAsync>d__3")]
public sealed virtual ValueTask`1<AuthorizeResult> AuthorizeAsync(IMiddlewareContext context, AuthorizeDirective directive, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Authorization.DefaultAuthorizationHandler/<AuthorizeAsync>d__4")]
public sealed virtual ValueTask`1<AuthorizeResult> AuthorizeAsync(AuthorizationContext context, IReadOnlyList`1<AuthorizeDirective> directives, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Authorization.DefaultAuthorizationHandler/<AuthorizeAsync>d__5")]
private ValueTask`1<AuthorizeResult> AuthorizeAsync(ClaimsPrincipal user, string policyName, IReadOnlyList`1<string> roles, bool authenticated, object context);
    private static UserState GetUserState(IDictionary`2<string, object> contextData);
    private static void SetUserState(IDictionary`2<string, object> contextData, UserState state);
    private static bool FulfillsAnyRole(ClaimsPrincipal principal, IReadOnlyList`1<string> roles);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.AspNetCore.Authorization.Properties.AuthResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AuthorizeMiddleware_NoDefaultPolicy { get; }
    internal static string AuthorizeMiddleware_NotAuthorized { get; }
    internal static string AuthorizeMiddleware_PolicyNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AuthorizeMiddleware_NoDefaultPolicy();
    internal static string get_AuthorizeMiddleware_NotAuthorized();
    internal static string get_AuthorizeMiddleware_PolicyNotFound();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HotChocolateAuthorizeRequestExecutorBuilder : object {
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddAuthorization(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddAuthorization(IRequestExecutorBuilder builder, Action`1<AuthorizationOptions> configure);
}
