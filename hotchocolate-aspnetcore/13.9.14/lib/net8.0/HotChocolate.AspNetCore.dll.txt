[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.AspNetCore.AcceptMediaType : ValueType {
    [CompilerGeneratedAttribute]
private AcceptMediaTypeKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Quality>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUtf8>k__BackingField;
    public AcceptMediaTypeKind Kind { get; }
    public string Type { get; }
    public string SubType { get; }
    public Nullable`1<double> Quality { get; }
    [NullableAttribute("2")]
public string Charset { get; }
    public bool IsUtf8 { get; }
    internal AcceptMediaType(StringSegment type, StringSegment subType, Nullable`1<double> quality, StringSegment charset);
    [CompilerGeneratedAttribute]
public AcceptMediaTypeKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_SubType();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Quality();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Charset();
    [CompilerGeneratedAttribute]
public bool get_IsUtf8();
}
public enum HotChocolate.AspNetCore.AcceptMediaTypeKind : Enum {
    public int value__;
    public static AcceptMediaTypeKind Unknown;
    public static AcceptMediaTypeKind All;
    public static AcceptMediaTypeKind AllApplication;
    public static AcceptMediaTypeKind AllMultiPart;
    public static AcceptMediaTypeKind ApplicationGraphQL;
    public static AcceptMediaTypeKind ApplicationJson;
    public static AcceptMediaTypeKind MultiPartMixed;
    public static AcceptMediaTypeKind EventStream;
}
[FlagsAttribute]
public enum HotChocolate.AspNetCore.AllowedGetOperations : Enum {
    public int value__;
    public static AllowedGetOperations Query;
    public static AllowedGetOperations Mutation;
    public static AllowedGetOperations Subscription;
    public static AllowedGetOperations QueryAndMutation;
    public static AllowedGetOperations All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.ContentType : object {
    private static string _utf8;
    private static string _boundary;
    public static string GraphQL;
    public static string Json;
    public static string MultiPartMixed;
    public static string GraphQLResponse;
    public static string EventStream;
    public static string Html;
    private static Char[] _jsonArray;
    private static Char[] _multiPartFormArray;
    private static ContentType();
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<char> JsonSpan();
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<char> MultiPartFormSpan();
}
public enum HotChocolate.AspNetCore.DefaultHttpMethod : Enum {
    public int value__;
    public static DefaultHttpMethod Get;
    public static DefaultHttpMethod Post;
}
public class HotChocolate.AspNetCore.DefaultHttpRequestInterceptor : object {
    [NullableContextAttribute("1")]
public virtual ValueTask OnCreateAsync(HttpContext context, IRequestExecutor requestExecutor, IQueryRequestBuilder requestBuilder, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.DefaultSocketSessionInterceptor : object {
    public virtual ValueTask`1<ConnectionStatus> OnConnectAsync(ISocketSession session, IOperationMessagePayload connectionInitMessage, CancellationToken cancellationToken);
    public virtual ValueTask OnRequestAsync(ISocketSession session, string operationSessionId, IQueryRequestBuilder requestBuilder, CancellationToken cancellationToken);
    public virtual ValueTask`1<IQueryResult> OnResultAsync(ISocketSession session, string operationSessionId, IQueryResult result, CancellationToken cancellationToken);
    public virtual ValueTask OnCompleteAsync(ISocketSession session, string operationSessionId, CancellationToken cancellationToken);
    public virtual ValueTask`1<IReadOnlyDictionary`2<string, object>> OnPingAsync(ISocketSession session, IOperationMessagePayload pingMessage, CancellationToken cancellationToken);
    public virtual ValueTask OnPongAsync(ISocketSession session, IOperationMessagePayload pongMessage, CancellationToken cancellationToken);
    public virtual ValueTask OnCloseAsync(ISocketSession session, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.DelegateHttpRequestInterceptor : DefaultHttpRequestInterceptor {
    private HttpRequestInterceptorDelegate _interceptor;
    public DelegateHttpRequestInterceptor(HttpRequestInterceptorDelegate interceptor);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.DelegateHttpRequestInterceptor/<OnCreateAsync>d__2")]
public virtual ValueTask OnCreateAsync(HttpContext context, IRequestExecutor requestExecutor, IQueryRequestBuilder requestBuilder, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0(HttpContext context, IRequestExecutor requestExecutor, IQueryRequestBuilder requestBuilder, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.ErrorHelper : object {
    public static IError InvalidRequest();
    public static IError RequestHasNoElements();
    public static IError NoSupportedAcceptMediaType();
    public static IQueryResult TypeNameIsEmpty();
    public static IQueryResult InvalidTypeName(string typeName);
    public static IQueryResult TypeNotFound(string typeName);
    public static IQueryResult InvalidAcceptMediaType(string headerValue);
    public static IQueryResult MultiPartRequestPreflightRequired();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.Extensions.BananaCakePopEndpointConventionBuilder : object {
    private IEndpointConventionBuilder _builder;
    internal BananaCakePopEndpointConventionBuilder(IEndpointConventionBuilder builder);
    public sealed virtual void Add(Action`1<EndpointBuilder> convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.Extensions.GraphQLEndpointConventionBuilder : object {
    private IEndpointConventionBuilder _builder;
    internal GraphQLEndpointConventionBuilder(IEndpointConventionBuilder builder);
    public sealed virtual void Add(Action`1<EndpointBuilder> convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.Extensions.GraphQLHttpEndpointConventionBuilder : object {
    private IEndpointConventionBuilder _builder;
    internal GraphQLHttpEndpointConventionBuilder(IEndpointConventionBuilder builder);
    public sealed virtual void Add(Action`1<EndpointBuilder> convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.Extensions.WebSocketEndpointConventionBuilder : object {
    private IEndpointConventionBuilder _builder;
    internal WebSocketEndpointConventionBuilder(IEndpointConventionBuilder builder);
    public sealed virtual void Add(Action`1<EndpointBuilder> convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.GlobalStateHelpers : object {
    public static HttpContext GetHttpContext(IPureResolverContext context);
    public static HttpRequest GetHttpRequest(IPureResolverContext context);
    public static HttpResponse GetHttpResponse(IPureResolverContext context);
}
public class HotChocolate.AspNetCore.GraphQLHttpOptions : object {
    [CompilerGeneratedAttribute]
private AllowedGetOperations <AllowedGetOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableGetRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMultipartRequests>k__BackingField;
    public AllowedGetOperations AllowedGetOperations { get; public set; }
    public bool EnableGetRequests { get; public set; }
    public bool EnableMultipartRequests { get; public set; }
    [CompilerGeneratedAttribute]
public AllowedGetOperations get_AllowedGetOperations();
    [CompilerGeneratedAttribute]
public void set_AllowedGetOperations(AllowedGetOperations value);
    [CompilerGeneratedAttribute]
public bool get_EnableGetRequests();
    [CompilerGeneratedAttribute]
public void set_EnableGetRequests(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMultipartRequests();
    [CompilerGeneratedAttribute]
public void set_EnableMultipartRequests(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.GraphQLRequestException : GraphQLException {
    public GraphQLRequestException(string message);
    public GraphQLRequestException(IError error);
    public GraphQLRequestException(IError[] errors);
    public GraphQLRequestException(IEnumerable`1<IError> errors);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.", "True")]
protected GraphQLRequestException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.GraphQLServerOptions : object {
    [CompilerGeneratedAttribute]
private GraphQLToolOptions <Tool>k__BackingField;
    [CompilerGeneratedAttribute]
private GraphQLSocketOptions <Sockets>k__BackingField;
    [CompilerGeneratedAttribute]
private AllowedGetOperations <AllowedGetOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableGetRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceGetRequestsPreflightHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMultipartRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceMultipartRequestsPreflightHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSchemaRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBatching>k__BackingField;
    public GraphQLToolOptions Tool { get; internal set; }
    public GraphQLSocketOptions Sockets { get; internal set; }
    public AllowedGetOperations AllowedGetOperations { get; public set; }
    public bool EnableGetRequests { get; public set; }
    public bool EnforceGetRequestsPreflightHeader { get; public set; }
    public bool EnableMultipartRequests { get; public set; }
    public bool EnforceMultipartRequestsPreflightHeader { get; public set; }
    public bool EnableSchemaRequests { get; public set; }
    public bool EnableBatching { get; public set; }
    [CompilerGeneratedAttribute]
public GraphQLToolOptions get_Tool();
    [CompilerGeneratedAttribute]
internal void set_Tool(GraphQLToolOptions value);
    [CompilerGeneratedAttribute]
public GraphQLSocketOptions get_Sockets();
    [CompilerGeneratedAttribute]
internal void set_Sockets(GraphQLSocketOptions value);
    [CompilerGeneratedAttribute]
public AllowedGetOperations get_AllowedGetOperations();
    [CompilerGeneratedAttribute]
public void set_AllowedGetOperations(AllowedGetOperations value);
    [CompilerGeneratedAttribute]
public bool get_EnableGetRequests();
    [CompilerGeneratedAttribute]
public void set_EnableGetRequests(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnforceGetRequestsPreflightHeader();
    [CompilerGeneratedAttribute]
public void set_EnforceGetRequestsPreflightHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMultipartRequests();
    [CompilerGeneratedAttribute]
public void set_EnableMultipartRequests(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnforceMultipartRequestsPreflightHeader();
    [CompilerGeneratedAttribute]
public void set_EnforceMultipartRequestsPreflightHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSchemaRequests();
    [CompilerGeneratedAttribute]
public void set_EnableSchemaRequests(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBatching();
    [CompilerGeneratedAttribute]
public void set_EnableBatching(bool value);
}
public class HotChocolate.AspNetCore.GraphQLSocketOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectionInitializationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <KeepAliveInterval>k__BackingField;
    public TimeSpan ConnectionInitializationTimeout { get; public set; }
    public Nullable`1<TimeSpan> KeepAliveInterval { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectionInitializationTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectionInitializationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(Nullable`1<TimeSpan> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.GraphQLToolOptions : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private GraphQLToolServeMode <ServeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseBrowserUrlAsGraphQLEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GraphQLEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeCookies>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <HttpHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultHttpMethod> <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GaTrackingId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableTelemetry>k__BackingField;
    [NullableAttribute("1")]
public GraphQLToolServeMode ServeMode { get; public set; }
    public string Title { get; public set; }
    public string Document { get; public set; }
    public bool UseBrowserUrlAsGraphQLEndpoint { get; public set; }
    public string GraphQLEndpoint { get; public set; }
    public Nullable`1<bool> IncludeCookies { get; public set; }
    public IHeaderDictionary HttpHeaders { get; public set; }
    public Nullable`1<DefaultHttpMethod> HttpMethod { get; public set; }
    public bool Enable { get; public set; }
    public string GaTrackingId { get; public set; }
    public Nullable`1<bool> DisableTelemetry { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public GraphQLToolServeMode get_ServeMode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ServeMode(GraphQLToolServeMode value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Document();
    [CompilerGeneratedAttribute]
public void set_Document(string value);
    [CompilerGeneratedAttribute]
public bool get_UseBrowserUrlAsGraphQLEndpoint();
    [CompilerGeneratedAttribute]
public void set_UseBrowserUrlAsGraphQLEndpoint(bool value);
    [CompilerGeneratedAttribute]
public string get_GraphQLEndpoint();
    [CompilerGeneratedAttribute]
public void set_GraphQLEndpoint(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeCookies();
    [CompilerGeneratedAttribute]
public void set_IncludeCookies(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_HttpHeaders();
    [CompilerGeneratedAttribute]
public void set_HttpHeaders(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultHttpMethod> get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(Nullable`1<DefaultHttpMethod> value);
    [CompilerGeneratedAttribute]
public bool get_Enable();
    [CompilerGeneratedAttribute]
public void set_Enable(bool value);
    [CompilerGeneratedAttribute]
public string get_GaTrackingId();
    [CompilerGeneratedAttribute]
public void set_GaTrackingId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableTelemetry();
    [CompilerGeneratedAttribute]
public void set_DisableTelemetry(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.GraphQLToolServeMode : object {
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    public static GraphQLToolServeMode Latest;
    public static GraphQLToolServeMode Insider;
    public static GraphQLToolServeMode Embedded;
    internal string Mode { get; }
    private GraphQLToolServeMode(string mode);
    private static GraphQLToolServeMode();
    [CompilerGeneratedAttribute]
internal string get_Mode();
    public static GraphQLToolServeMode Version(string version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.HeaderUtilities : object {
    private static ConcurrentDictionary`2<string, CacheEntry> _cache;
    public static AcceptMediaType[] GraphQLResponseContentTypes;
    private static HeaderUtilities();
    public static AcceptHeaderResult GetAcceptHeader(HttpRequest request);
    private static bool TryParseMediaType(string s, AcceptMediaType& value);
    private static void MakeSpace();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.AspNetCore.HttpContextExtensions : object {
    [ExtensionAttribute]
public static GraphQLServerOptions GetGraphQLServerOptions(HttpContext context);
    [ExtensionAttribute]
public static GraphQLSocketOptions GetGraphQLSocketOptions(HttpContext context);
    [ExtensionAttribute]
public static bool IsTracingEnabled(HttpContext context);
    [ExtensionAttribute]
public static bool IncludeQueryPlan(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.HttpGetMiddleware : MiddlewareBase {
    private IHttpRequestParser _requestParser;
    private IServerDiagnosticEvents _diagnosticEvents;
    public HttpGetMiddleware(RequestDelegate next, IRequestExecutorResolver executorResolver, IHttpResponseFormatter responseFormatter, IHttpRequestParser requestParser, IServerDiagnosticEvents diagnosticEvents, string schemaName);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpGetMiddleware/<InvokeAsync>d__3")]
public Task InvokeAsync(HttpContext context);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpGetMiddleware/<HandleRequestAsync>d__4")]
private Task HandleRequestAsync(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.HttpGetSchemaMiddleware : MiddlewareBase {
    private static AcceptMediaType[] _mediaTypes;
    private MiddlewareRoutingType _routing;
    private IServerDiagnosticEvents _diagnosticEvents;
    public HttpGetSchemaMiddleware(RequestDelegate next, IRequestExecutorResolver executorResolver, IHttpResponseFormatter responseFormatter, IServerDiagnosticEvents diagnosticEvents, string schemaName, MiddlewareRoutingType routing);
    private static HttpGetSchemaMiddleware();
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpGetSchemaMiddleware/<InvokeAsync>d__4")]
public Task InvokeAsync(HttpContext context);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpGetSchemaMiddleware/<HandleRequestAsync>d__5")]
private Task HandleRequestAsync(HttpContext context);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpGetSchemaMiddleware/<WriteTypesAsync>d__6")]
private Task WriteTypesAsync(HttpContext context, ISchema schema, string typeNames, bool indent);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpGetSchemaMiddleware/<WriteSchemaAsync>d__7")]
private Task WriteSchemaAsync(HttpContext context, ISchema schema, bool indent);
    private string GetTypesFileName(List`1<INamedType> types);
    private string GetSchemaFileName(ISchema schema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.HttpHeaderKeys : object {
    public static string Tracing;
    public static string ApolloTracing;
    public static string QueryPlan;
    public static string CacheControl;
    public static string Preflight;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.HttpHeaderValues : object {
    public static string TracingEnabled;
    public static string IncludeQueryPlan;
    public static string NoCache;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.HttpMultipartMiddleware : HttpPostMiddlewareBase {
    private static string _operations;
    private static string _map;
    private FormOptions _formOptions;
    private IQueryResult _multipartRequestError;
    public HttpMultipartMiddleware(RequestDelegate next, IRequestExecutorResolver executorResolver, IHttpResponseFormatter responseFormatter, IHttpRequestParser requestParser, IServerDiagnosticEvents diagnosticEvents, string schemaName, IOptions`1<FormOptions> formOptions);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpMultipartMiddleware/<InvokeAsync>d__5")]
public virtual Task InvokeAsync(HttpContext context);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpMultipartMiddleware/<GetRequestsFromBody>d__6")]
protected virtual ValueTask`1<IReadOnlyList`1<GraphQLRequest>> GetRequestsFromBody(HttpRequest httpRequest, CancellationToken cancellationToken);
    private static HttpMultipartRequest ParseMultipartRequest(IFormCollection form);
    private static IDictionary`2<string, IFile> MapFilesToObjectPaths(IDictionary`2<string, String[]> map, IFormFileCollection files);
    private static void InsertFilesIntoRequest(GraphQLRequest request, IDictionary`2<string, IFile> fileMap);
    private static IValueNode RewriteVariable(string objectPath, IVariablePathSegment segment, object value, FileValueNode file);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.HttpMultipartRequest : object {
    [CompilerGeneratedAttribute]
private string <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IFile> <FileMap>k__BackingField;
    public string Operations { get; public set; }
    public IDictionary`2<string, IFile> FileMap { get; public set; }
    public HttpMultipartRequest(string operations, IDictionary`2<string, IFile> fileMap);
    [CompilerGeneratedAttribute]
public string get_Operations();
    [CompilerGeneratedAttribute]
public void set_Operations(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IFile> get_FileMap();
    [CompilerGeneratedAttribute]
public void set_FileMap(IDictionary`2<string, IFile> value);
}
public class HotChocolate.AspNetCore.HttpPostMiddleware : HttpPostMiddlewareBase {
    [NullableContextAttribute("1")]
public HttpPostMiddleware(RequestDelegate next, IRequestExecutorResolver executorResolver, IHttpResponseFormatter responseFormatter, IHttpRequestParser requestParser, IServerDiagnosticEvents diagnosticEvents, string schemaName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.HttpPostMiddlewareBase : MiddlewareBase {
    private static string _batchOperations;
    [CompilerGeneratedAttribute]
private IHttpRequestParser <RequestParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IServerDiagnosticEvents <DiagnosticEvents>k__BackingField;
    protected IHttpRequestParser RequestParser { get; }
    protected IServerDiagnosticEvents DiagnosticEvents { get; }
    protected HttpPostMiddlewareBase(RequestDelegate next, IRequestExecutorResolver executorResolver, IHttpResponseFormatter responseFormatter, IHttpRequestParser requestParser, IServerDiagnosticEvents diagnosticEvents, string schemaName);
    [CompilerGeneratedAttribute]
protected IHttpRequestParser get_RequestParser();
    [CompilerGeneratedAttribute]
protected IServerDiagnosticEvents get_DiagnosticEvents();
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpPostMiddlewareBase/<InvokeAsync>d__8")]
public virtual Task InvokeAsync(HttpContext context);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.HttpPostMiddlewareBase/<HandleRequestAsync>d__9")]
protected Task HandleRequestAsync(HttpContext context);
    protected virtual ValueTask`1<IReadOnlyList`1<GraphQLRequest>> GetRequestsFromBody(HttpRequest request, CancellationToken cancellationToken);
    private static bool TryParseOperations(string operationNameString, IReadOnlyList`1& operationNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.AspNetCore.HttpRequestExtensions : object {
    private static string _slash;
    private static PathString _slashPath;
    private static HttpRequestExtensions();
    [ExtensionAttribute]
internal static bool AcceptHeaderContainsHtml(HttpRequest request);
    [ExtensionAttribute]
internal static bool IsGetOrHeadMethod(HttpRequest request);
    [ExtensionAttribute]
internal static bool PathEndsInSlash(HttpRequest request);
    [ExtensionAttribute]
internal static bool TryMatchPath(HttpRequest request, PathString matchUrl, bool forDirectory, PathString& subPath);
}
public class HotChocolate.AspNetCore.HttpRequestInterceptorDelegate : MulticastDelegate {
    public HttpRequestInterceptorDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueTask Invoke(HttpContext context, IRequestExecutor requestExecutor, IQueryRequestBuilder requestBuilder, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(HttpContext context, IRequestExecutor requestExecutor, IQueryRequestBuilder requestBuilder, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual ValueTask EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.AspNetCore.HttpResponseExtensions : object {
    private static string _contentDepositionHeader;
    private static string _contentDepositionValue;
    private static JsonSerializerOptions _serializerOptions;
    private static HttpResponseExtensions();
    [ExtensionAttribute]
internal static Task WriteAsJsonAsync(HttpResponse response, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IHeaderDictionary SetContentDisposition(IHeaderDictionary headers, string fileName);
}
public enum HotChocolate.AspNetCore.HttpTransportVersion : Enum {
    public int value__;
    public static HttpTransportVersion Latest;
    public static HttpTransportVersion Legacy;
    public static HttpTransportVersion Draft20230127;
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.IHttpRequestInterceptor {
    public abstract virtual ValueTask OnCreateAsync(HttpContext context, IRequestExecutor requestExecutor, IQueryRequestBuilder requestBuilder, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Instrumentation.AggregateServerDiagnosticEventListener : object {
    private IServerDiagnosticEventListener[] _listeners;
    public AggregateServerDiagnosticEventListener(IServerDiagnosticEventListener[] listeners);
    public sealed virtual IDisposable ExecuteHttpRequest(HttpContext context, HttpRequestKind kind);
    public sealed virtual void StartSingleRequest(HttpContext context, GraphQLRequest request);
    public sealed virtual void StartBatchRequest(HttpContext context, IReadOnlyList`1<GraphQLRequest> batch);
    public sealed virtual void StartOperationBatchRequest(HttpContext context, GraphQLRequest request, IReadOnlyList`1<string> operations);
    public sealed virtual void HttpRequestError(HttpContext context, IError error);
    public sealed virtual void HttpRequestError(HttpContext context, Exception exception);
    public sealed virtual IDisposable ParseHttpRequest(HttpContext context);
    public sealed virtual void ParserErrors(HttpContext context, IReadOnlyList`1<IError> errors);
    public sealed virtual IDisposable FormatHttpResponse(HttpContext context, IQueryResult result);
    public sealed virtual IDisposable WebSocketSession(HttpContext context);
    public sealed virtual void WebSocketSessionError(HttpContext context, Exception exception);
}
public enum HotChocolate.AspNetCore.Instrumentation.HttpRequestKind : Enum {
    public int value__;
    public static HttpRequestKind HttpPost;
    public static HttpRequestKind HttpGet;
    public static HttpRequestKind HttpGetSchema;
    public static HttpRequestKind HttpMultiPart;
    public static HttpRequestKind HttpSse;
}
public interface HotChocolate.AspNetCore.Instrumentation.IServerDiagnosticEventListener {
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.Instrumentation.IServerDiagnosticEvents {
    public abstract virtual IDisposable ExecuteHttpRequest(HttpContext context, HttpRequestKind kind);
    public abstract virtual void StartSingleRequest(HttpContext context, GraphQLRequest request);
    public abstract virtual void StartBatchRequest(HttpContext context, IReadOnlyList`1<GraphQLRequest> batch);
    public abstract virtual void StartOperationBatchRequest(HttpContext context, GraphQLRequest request, IReadOnlyList`1<string> operations);
    public abstract virtual void HttpRequestError(HttpContext context, IError error);
    public abstract virtual void HttpRequestError(HttpContext context, Exception exception);
    public abstract virtual IDisposable ParseHttpRequest(HttpContext context);
    public abstract virtual void ParserErrors(HttpContext context, IReadOnlyList`1<IError> errors);
    public abstract virtual IDisposable FormatHttpResponse(HttpContext context, IQueryResult result);
    public abstract virtual IDisposable WebSocketSession(HttpContext context);
    public abstract virtual void WebSocketSessionError(HttpContext context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Instrumentation.NoopServerDiagnosticEventListener : object {
    public sealed virtual IDisposable ExecuteHttpRequest(HttpContext context, HttpRequestKind kind);
    public sealed virtual void StartSingleRequest(HttpContext context, GraphQLRequest request);
    public sealed virtual void StartBatchRequest(HttpContext context, IReadOnlyList`1<GraphQLRequest> batch);
    public sealed virtual void StartOperationBatchRequest(HttpContext context, GraphQLRequest request, IReadOnlyList`1<string> operations);
    public sealed virtual void HttpRequestError(HttpContext context, IError error);
    public sealed virtual void HttpRequestError(HttpContext context, Exception exception);
    public sealed virtual IDisposable ParseHttpRequest(HttpContext context);
    public sealed virtual void ParserErrors(HttpContext context, IReadOnlyList`1<IError> errors);
    public sealed virtual IDisposable FormatHttpResponse(HttpContext context, IQueryResult result);
    public sealed virtual IDisposable WebSocketSession(HttpContext context);
    public sealed virtual void WebSocketSessionError(HttpContext context, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticEventSourceAttribute("HotChocolate.AspNetCore.Instrumentation.IServerDiagnosticEventListener")]
public class HotChocolate.AspNetCore.Instrumentation.ServerDiagnosticEventListener : object {
    [CompilerGeneratedAttribute]
private static IDisposable <EmptyScope>k__BackingField;
    protected internal static IDisposable EmptyScope { get; }
    private static ServerDiagnosticEventListener();
    [CompilerGeneratedAttribute]
protected internal static IDisposable get_EmptyScope();
    public virtual IDisposable ExecuteHttpRequest(HttpContext context, HttpRequestKind kind);
    public virtual void StartSingleRequest(HttpContext context, GraphQLRequest request);
    public virtual void StartBatchRequest(HttpContext context, IReadOnlyList`1<GraphQLRequest> batch);
    public virtual void StartOperationBatchRequest(HttpContext context, GraphQLRequest request, IReadOnlyList`1<string> operations);
    public virtual void HttpRequestError(HttpContext context, IError error);
    public virtual void HttpRequestError(HttpContext context, Exception exception);
    public virtual IDisposable ParseHttpRequest(HttpContext context);
    public virtual void ParserErrors(HttpContext context, IReadOnlyList`1<IError> errors);
    public virtual IDisposable FormatHttpResponse(HttpContext context, IQueryResult result);
    public virtual IDisposable WebSocketSession(HttpContext context);
    public virtual void WebSocketSessionError(HttpContext context, Exception exception);
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.ISocketSessionInterceptor {
    public abstract virtual ValueTask`1<ConnectionStatus> OnConnectAsync(ISocketSession session, IOperationMessagePayload connectionInitMessage, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnRequestAsync(ISocketSession session, string operationSessionId, IQueryRequestBuilder requestBuilder, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<IQueryResult> OnResultAsync(ISocketSession session, string operationSessionId, IQueryResult result, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnCompleteAsync(ISocketSession session, string operationSessionId, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<IReadOnlyDictionary`2<string, object>> OnPingAsync(ISocketSession session, IOperationMessagePayload pingMessage, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnPongAsync(ISocketSession session, IOperationMessagePayload pongMessage, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnCloseAsync(ISocketSession session, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.MiddlewareBase : object {
    private RequestDelegate _next;
    private IHttpResponseFormatter _responseFormatter;
    private RequestExecutorProxy _executorProxy;
    [NullableAttribute("2")]
private GraphQLServerOptions _options;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultSchema>k__BackingField;
    protected string SchemaName { get; }
    protected bool IsDefaultSchema { get; }
    protected RequestExecutorProxy ExecutorProxy { get; }
    protected MiddlewareBase(RequestDelegate next, IRequestExecutorResolver executorResolver, IHttpResponseFormatter responseFormatter, string schemaName);
    [CompilerGeneratedAttribute]
protected string get_SchemaName();
    [CompilerGeneratedAttribute]
protected bool get_IsDefaultSchema();
    protected RequestExecutorProxy get_ExecutorProxy();
    protected Task NextAsync(HttpContext context);
    protected ValueTask`1<IRequestExecutor> GetExecutorAsync(CancellationToken cancellationToken);
    protected ValueTask`1<ISchema> GetSchemaAsync(CancellationToken cancellationToken);
    protected ValueTask WriteResultAsync(HttpContext context, IExecutionResult result, AcceptMediaType[] acceptMediaTypes, Nullable`1<HttpStatusCode> statusCode);
    protected GraphQLRequestFlags CreateRequestFlags(AcceptMediaType[] acceptMediaTypes);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.MiddlewareBase/<ExecuteSingleAsync>d__19")]
protected static Task`1<IExecutionResult> ExecuteSingleAsync(HttpContext context, IRequestExecutor requestExecutor, IHttpRequestInterceptor requestInterceptor, IServerDiagnosticEvents diagnosticEvents, GraphQLRequest request, GraphQLRequestFlags flags);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.MiddlewareBase/<ExecuteOperationBatchAsync>d__20")]
protected static Task`1<IResponseStream> ExecuteOperationBatchAsync(HttpContext context, IRequestExecutor requestExecutor, IHttpRequestInterceptor requestInterceptor, IServerDiagnosticEvents diagnosticEvents, GraphQLRequest request, GraphQLRequestFlags flags, IReadOnlyList`1<string> operationNames);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.MiddlewareBase/<ExecuteBatchAsync>d__21")]
protected static Task`1<IResponseStream> ExecuteBatchAsync(HttpContext context, IRequestExecutor requestExecutor, IHttpRequestInterceptor requestInterceptor, IServerDiagnosticEvents diagnosticEvents, IReadOnlyList`1<GraphQLRequest> requests, GraphQLRequestFlags flags);
    protected static RequestContentType ParseContentType(HttpContext context);
    protected GraphQLServerOptions GetOptions(HttpContext context);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public enum HotChocolate.AspNetCore.MiddlewareRoutingType : Enum {
    public int value__;
    public static MiddlewareRoutingType Integrated;
    public static MiddlewareRoutingType Explicit;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.AspNetCore.ParameterExpressionBuilders.HttpContextParameterExpressionBuilder : LambdaParameterExpressionBuilder`2<IPureResolverContext, HttpContext> {
    public ArgumentKind Kind { get; }
    public virtual ArgumentKind get_Kind();
    public virtual bool CanHandle(ParameterInfo parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.AspNetCore.ParameterExpressionBuilders.HttpRequestParameterExpressionBuilder : LambdaParameterExpressionBuilder`2<IPureResolverContext, HttpRequest> {
    public ArgumentKind Kind { get; }
    public virtual ArgumentKind get_Kind();
    public virtual bool CanHandle(ParameterInfo parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.AspNetCore.ParameterExpressionBuilders.HttpResponseParameterExpressionBuilder : LambdaParameterExpressionBuilder`2<IPureResolverContext, HttpResponse> {
    public ArgumentKind Kind { get; }
    public virtual ArgumentKind get_Kind();
    public virtual bool CanHandle(ParameterInfo parameter);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.AspNetCore.Properties.AspNetCoreResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ThrowHelper_DefaultHttpRequestParser_RequestIsEmpty { get; }
    internal static string ThrowHelper_DefaultHttpRequestParser_QueryAndIdMissing { get; }
    internal static string ThrowHelper_DefaultHttpRequestParser_MaxRequestSizeExceeded { get; }
    internal static string ThrowHelper_DataStartMessageHandler_RequestTypeNotSupported { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_Invalid_Form { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_No_Operations_Specified { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_Fields_Misordered { get; }
    internal static string HttpMultipartMiddleware_InsertFilesIntoRequest_VariablesImmutable { get; }
    internal static string VariablePath_Parse_FirstSegmentMustBeKey { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_NoObjectPath { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_FileMissing { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_VariableNotFound { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_VariableStructureInvalid { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_InvalidPath { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_PathMustStartWithVariable { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_InvalidMapJson { get; }
    internal static string ThrowHelper_HttpMultipartMiddleware_MapNotSpecified { get; }
    internal static string ErrorHelper_InvalidRequest { get; }
    internal static string ErrorHelper_RequestHasNoElements { get; }
    internal static string WebSocketSession_SessionEnded { get; }
    internal static string DataStartMessageHandler_Not_A_SubscriptionResult { get; }
    internal static string OperationMessage_TypeCannotBeNullOrEmpty { get; }
    internal static string TerminateConnectionMessageHandler_Message { get; }
    internal static string OperationManager_Register_SessionIdNullOrEmpty { get; }
    internal static string Apollo_OnReceive_MessageMustBeJson { get; }
    internal static string Apollo_OnReceive_TypePropMissing { get; }
    internal static string Apollo_OnReceive_ToManyInitializations { get; }
    internal static string Apollo_OnReceive_InvalidSubscribeMessage { get; }
    internal static string Apollo_OnReceive_SubscriptionIdNotUnique { get; }
    internal static string Apollo_OnReceive_InvalidMessageType { get; }
    internal static string ConnectionStatus_Reject_Message_cannot_be_null_or_empty_ { get; }
    internal static string ConnectionStatus_Reject_MessageCannotBeNullOrEmpty { get; }
    internal static string ErrorHelper_NoSupportedAcceptMediaType { get; }
    internal static string ThrowHelper_Formatter_ResultKindNotSupported { get; }
    internal static string ThrowHelper_Formatter_ResponseContentTypeNotSupported { get; }
    internal static string ThrowHelper_Formatter_InvalidAcceptMediaType { get; }
    internal static string ErrorHelper_InvalidAcceptMediaType { get; }
    internal static string ErrorHelper_TypeNotFound { get; }
    internal static string ErrorHelper_InvalidTypeName { get; }
    internal static string ErrorHelper_TypeNameIsEmpty { get; }
    internal static string ErrorHelper_MultiPartRequestPreflightRequired { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ThrowHelper_DefaultHttpRequestParser_RequestIsEmpty();
    internal static string get_ThrowHelper_DefaultHttpRequestParser_QueryAndIdMissing();
    internal static string get_ThrowHelper_DefaultHttpRequestParser_MaxRequestSizeExceeded();
    internal static string get_ThrowHelper_DataStartMessageHandler_RequestTypeNotSupported();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_Invalid_Form();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_No_Operations_Specified();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_Fields_Misordered();
    internal static string get_HttpMultipartMiddleware_InsertFilesIntoRequest_VariablesImmutable();
    internal static string get_VariablePath_Parse_FirstSegmentMustBeKey();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_NoObjectPath();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_FileMissing();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_VariableNotFound();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_VariableStructureInvalid();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_InvalidPath();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_PathMustStartWithVariable();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_InvalidMapJson();
    internal static string get_ThrowHelper_HttpMultipartMiddleware_MapNotSpecified();
    internal static string get_ErrorHelper_InvalidRequest();
    internal static string get_ErrorHelper_RequestHasNoElements();
    internal static string get_WebSocketSession_SessionEnded();
    internal static string get_DataStartMessageHandler_Not_A_SubscriptionResult();
    internal static string get_OperationMessage_TypeCannotBeNullOrEmpty();
    internal static string get_TerminateConnectionMessageHandler_Message();
    internal static string get_OperationManager_Register_SessionIdNullOrEmpty();
    internal static string get_Apollo_OnReceive_MessageMustBeJson();
    internal static string get_Apollo_OnReceive_TypePropMissing();
    internal static string get_Apollo_OnReceive_ToManyInitializations();
    internal static string get_Apollo_OnReceive_InvalidSubscribeMessage();
    internal static string get_Apollo_OnReceive_SubscriptionIdNotUnique();
    internal static string get_Apollo_OnReceive_InvalidMessageType();
    internal static string get_ConnectionStatus_Reject_Message_cannot_be_null_or_empty_();
    internal static string get_ConnectionStatus_Reject_MessageCannotBeNullOrEmpty();
    internal static string get_ErrorHelper_NoSupportedAcceptMediaType();
    internal static string get_ThrowHelper_Formatter_ResultKindNotSupported();
    internal static string get_ThrowHelper_Formatter_ResponseContentTypeNotSupported();
    internal static string get_ThrowHelper_Formatter_InvalidAcceptMediaType();
    internal static string get_ErrorHelper_InvalidAcceptMediaType();
    internal static string get_ErrorHelper_TypeNotFound();
    internal static string get_ErrorHelper_InvalidTypeName();
    internal static string get_ErrorHelper_TypeNameIsEmpty();
    internal static string get_ErrorHelper_MultiPartRequestPreflightRequired();
}
public enum HotChocolate.AspNetCore.RequestContentType : Enum {
    public int value__;
    public static RequestContentType None;
    public static RequestContentType Json;
    public static RequestContentType Form;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.AspNetCore.RequestExecutorExtensions : object {
    [ExtensionAttribute]
internal static T GetRequiredService(IRequestExecutor requestExecutor);
    [ExtensionAttribute]
internal static IErrorHandler GetErrorHandler(IRequestExecutor requestExecutor);
    [ExtensionAttribute]
internal static IHttpRequestInterceptor GetRequestInterceptor(IRequestExecutor requestExecutor);
}
public enum HotChocolate.AspNetCore.ResponseContentType : Enum {
    public int value__;
    public static ResponseContentType Unknown;
    public static ResponseContentType Json;
    public static ResponseContentType MultiPartMixed;
    public static ResponseContentType GraphQLResponse;
    public static ResponseContentType EventStream;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Serialization.DefaultHttpRequestParser : object {
    private static int _minRequestSize;
    internal static string QueryIdKey;
    private static string _operationNameKey;
    internal static string QueryKey;
    private static string _variablesKey;
    internal static string ExtensionsKey;
    private IDocumentCache _documentCache;
    private IDocumentHashProvider _documentHashProvider;
    private ParserOptions _parserOptions;
    private int _maxRequestSize;
    public DefaultHttpRequestParser(IDocumentCache documentCache, IDocumentHashProvider documentHashProvider, int maxRequestSize, ParserOptions parserOptions);
    public sealed virtual ValueTask`1<IReadOnlyList`1<GraphQLRequest>> ReadJsonRequestAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual GraphQLRequest ReadParamsRequest(IQueryCollection parameters);
    private ValueTuple`2<string, DocumentNode> ParseQueryString(string sourceText);
    public sealed virtual IReadOnlyList`1<GraphQLRequest> ReadOperationsRequest(string operations);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Serialization.DefaultHttpRequestParser/<ReadAsync>d__15")]
private ValueTask`1<IReadOnlyList`1<GraphQLRequest>> ReadAsync(Stream stream, bool isGraphQLQuery, CancellationToken cancellationToken);
    private IReadOnlyList`1<GraphQLRequest> ParseRequest(Byte[] buffer, int bytesBuffered);
    private IReadOnlyList`1<GraphQLRequest> ParseQuery(Byte[] buffer, int bytesBuffered);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.Serialization.DefaultHttpResponseFormatter : object {
    private FormatInfo _defaultFormat;
    private FormatInfo _graphqlResponseFormat;
    private FormatInfo _multiPartFormat;
    private FormatInfo _eventStreamFormat;
    private FormatInfo _legacyFormat;
    [NullableContextAttribute("2")]
public DefaultHttpResponseFormatter(bool indented, JavaScriptEncoder encoder);
    public DefaultHttpResponseFormatter(HttpResponseFormatterOptions options);
    public sealed virtual GraphQLRequestFlags CreateRequestFlags(AcceptMediaType[] acceptMediaTypes);
    protected virtual GraphQLRequestFlags CreateRequestFlags(AcceptMediaType acceptMediaType);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Serialization.DefaultHttpResponseFormatter/<FormatAsync>d__9")]
public sealed virtual ValueTask FormatAsync(HttpResponse response, IExecutionResult result, AcceptMediaType[] acceptMediaTypes, Nullable`1<HttpStatusCode> proposedStatusCode, CancellationToken cancellationToken);
    protected virtual HttpStatusCode OnDetermineStatusCode(IQueryResult result, FormatInfo format, Nullable`1<HttpStatusCode> proposedStatusCode);
    protected virtual void OnWriteResponseHeaders(IQueryResult result, FormatInfo format, IHeaderDictionary headers);
    protected virtual HttpStatusCode OnDetermineStatusCode(IResponseStream responseStream, FormatInfo format, Nullable`1<HttpStatusCode> proposedStatusCode);
    protected virtual void OnWriteResponseHeaders(IResponseStream responseStream, FormatInfo format, IHeaderDictionary headers);
    private FormatInfo TryGetFormatter(IExecutionResult result, AcceptMediaType[] acceptMediaTypes);
    internal static DefaultHttpResponseFormatter Create(HttpResponseFormatterOptions options);
}
public class HotChocolate.AspNetCore.Serialization.HttpResponseFormatterOptions : ValueType {
    [CompilerGeneratedAttribute]
private HttpTransportVersion <HttpTransportVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonResultFormatterOptions <Json>k__BackingField;
    public HttpTransportVersion HttpTransportVersion { get; public set; }
    public JsonResultFormatterOptions Json { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public HttpTransportVersion get_HttpTransportVersion();
    [CompilerGeneratedAttribute]
public void set_HttpTransportVersion(HttpTransportVersion value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public JsonResultFormatterOptions get_Json();
    [CompilerGeneratedAttribute]
public void set_Json(JsonResultFormatterOptions value);
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.Serialization.IHttpRequestParser {
    public abstract virtual ValueTask`1<IReadOnlyList`1<GraphQLRequest>> ReadJsonRequestAsync(Stream requestBody, CancellationToken cancellationToken);
    public abstract virtual GraphQLRequest ReadParamsRequest(IQueryCollection parameters);
    public abstract virtual IReadOnlyList`1<GraphQLRequest> ReadOperationsRequest(string operations);
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.Serialization.IHttpResponseFormatter {
    public abstract virtual GraphQLRequestFlags CreateRequestFlags(AcceptMediaType[] acceptMediaTypes);
    public abstract virtual ValueTask FormatAsync(HttpResponse response, IExecutionResult result, AcceptMediaType[] acceptMediaTypes, Nullable`1<HttpStatusCode> proposedStatusCode, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Serialization.IndexPathSegment : object {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IVariablePathSegment <Next>k__BackingField;
    public int Value { get; }
    public IVariablePathSegment Next { get; }
    public IndexPathSegment(int value, IVariablePathSegment next);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual IVariablePathSegment get_Next();
}
[NullableContextAttribute("2")]
internal interface HotChocolate.AspNetCore.Serialization.IVariablePathSegment {
    public IVariablePathSegment Next { get; }
    public abstract virtual IVariablePathSegment get_Next();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Serialization.KeyPathSegment : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IVariablePathSegment <Next>k__BackingField;
    public string Value { get; }
    [NullableAttribute("2")]
public IVariablePathSegment Next { get; }
    public KeyPathSegment(string value, IVariablePathSegment next);
    [CompilerGeneratedAttribute]
public string get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IVariablePathSegment get_Next();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Serialization.VariablePath : object {
    [CompilerGeneratedAttribute]
private KeyPathSegment <Key>k__BackingField;
    public KeyPathSegment Key { get; }
    public VariablePath(KeyPathSegment key);
    [CompilerGeneratedAttribute]
public KeyPathSegment get_Key();
    public static VariablePath Parse(string s);
}
internal static class HotChocolate.AspNetCore.ServerDefaults : object {
    public static int MaxAllowedRequestSize;
}
public enum HotChocolate.AspNetCore.Subscriptions.ConnectionCloseReason : Enum {
    public int value__;
    public static ConnectionCloseReason NormalClosure;
    public static ConnectionCloseReason EndpointUnavailable;
    public static ConnectionCloseReason ProtocolError;
    public static ConnectionCloseReason InvalidMessageType;
    public static ConnectionCloseReason InvalidPayloadData;
    public static ConnectionCloseReason PolicyViolation;
    public static ConnectionCloseReason MessageTooBig;
    public static ConnectionCloseReason MandatoryExtension;
    public static ConnectionCloseReason InternalServerError;
}
internal static class HotChocolate.AspNetCore.Subscriptions.ConnectionContextKeys : object {
    [NullableAttribute("1")]
public static string Connected;
}
public interface HotChocolate.AspNetCore.Subscriptions.IOperationManager {
    [NullableContextAttribute("1")]
public abstract virtual bool Enqueue(string sessionId, GraphQLRequest request);
    [NullableContextAttribute("1")]
public abstract virtual bool Complete(string sessionId);
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.Subscriptions.IOperationSession {
    public string Id { get; }
    public bool IsCompleted { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_Completed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_Completed(EventHandler value);
    public abstract virtual string get_Id();
    public abstract virtual bool get_IsCompleted();
    public abstract virtual void BeginExecute(GraphQLRequest request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.Subscriptions.ISocketConnection {
    public HttpContext HttpContext { get; }
    public IServiceProvider RequestServices { get; }
    public CancellationToken RequestAborted { get; }
    public abstract virtual HttpContext get_HttpContext();
    public abstract virtual IServiceProvider get_RequestServices();
    public abstract virtual CancellationToken get_RequestAborted();
    public abstract virtual Task`1<IProtocolHandler> TryAcceptConnection();
    [NullableContextAttribute("0")]
public abstract virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> message, CancellationToken cancellationToken);
    public abstract virtual ValueTask CloseAsync(string message, ConnectionCloseReason reason, CancellationToken cancellationToken);
    public abstract virtual ValueTask CloseAsync(string message, int reason, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.Subscriptions.ISocketSession {
    public ISocketConnection Connection { get; }
    public IProtocolHandler Protocol { get; }
    public IOperationManager Operations { get; }
    public abstract virtual ISocketConnection get_Connection();
    public abstract virtual IProtocolHandler get_Protocol();
    public abstract virtual IOperationManager get_Operations();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.Subscriptions.OperationManager : object {
    private ReaderWriterLockSlim _lock;
    private Dictionary`2<string, IOperationSession> _subs;
    private CancellationTokenSource _cts;
    private CancellationToken _cancellationToken;
    private ISocketSession _socketSession;
    private ISocketSessionInterceptor _interceptor;
    private IErrorHandler _errorHandler;
    private IRequestExecutor _executor;
    private Func`2<string, IOperationSession> _createSession;
    private bool _disposed;
    public OperationManager(ISocketSession socketSession, ISocketSessionInterceptor interceptor, IRequestExecutor executor);
    internal OperationManager(ISocketSession socketSession, ISocketSessionInterceptor interceptor, IRequestExecutor executor, Func`2<string, IOperationSession> createSession);
    public sealed virtual bool Enqueue(string sessionId, GraphQLRequest request);
    public sealed virtual bool Complete(string sessionId);
    private OperationSession CreateSession(string sessionId);
    public sealed virtual void Dispose();
    [IteratorStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.OperationManager/<GetEnumerator>d__16")]
public sealed virtual IEnumerator`1<IOperationSession> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.OperationSession : object {
    private CancellationTokenSource _cts;
    private CancellationToken _ct;
    private ISocketSession _session;
    private ISocketSessionInterceptor _interceptor;
    private IErrorHandler _errorHandler;
    private IRequestExecutor _executor;
    private bool _disposed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Completed;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    public string Id { get; }
    public bool IsCompleted { get; private set; }
    public OperationSession(ISocketSession session, ISocketSessionInterceptor interceptor, IErrorHandler errorHandler, IRequestExecutor executor, string id);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_Completed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    public sealed virtual void BeginExecute(GraphQLRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.OperationSession/<SendResultsAsync>d__19")]
private Task SendResultsAsync(GraphQLRequest request, CancellationToken cancellationToken);
    private static IQueryRequestBuilder CreateRequestBuilder(GraphQLRequest request);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.OperationSession/<SendResultMessageAsync>d__21")]
private Task SendResultMessageAsync(IQueryResult result, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.OperationSession/<TrySendErrorMessageAsync>d__22")]
private Task TrySendErrorMessageAsync(Exception exception, CancellationToken ct);
    private void Complete();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.PingPongJob : object {
    private ISocketSession _session;
    private GraphQLSocketOptions _options;
    public PingPongJob(ISocketSession session, GraphQLSocketOptions options);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.PingPongJob/<RunAsync>d__3")]
public Task RunAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.ApolloSubscriptionProtocolHandler : object {
    private JsonResultFormatter _formatter;
    private ISocketSessionInterceptor _interceptor;
    public string Name { get; }
    public ApolloSubscriptionProtocolHandler(ISocketSessionInterceptor interceptor);
    public sealed virtual string get_Name();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.ApolloSubscriptionProtocolHandler/<OnReceiveAsync>d__5")]
public sealed virtual ValueTask OnReceiveAsync(ISocketSession session, ReadOnlySequence`1<byte> message, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.ApolloSubscriptionProtocolHandler/<OnReceiveInternalAsync>d__6")]
private ValueTask OnReceiveInternalAsync(ISocketSession session, ReadOnlySequence`1<byte> message, CancellationToken cancellationToken);
    public sealed virtual ValueTask SendKeepAliveMessageAsync(ISocketSession session, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.ApolloSubscriptionProtocolHandler/<SendResultMessageAsync>d__8")]
public sealed virtual ValueTask SendResultMessageAsync(ISocketSession session, string operationSessionId, IQueryResult result, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.ApolloSubscriptionProtocolHandler/<SendErrorMessageAsync>d__9")]
public sealed virtual ValueTask SendErrorMessageAsync(ISocketSession session, string operationSessionId, IReadOnlyList`1<IError> errors, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.ApolloSubscriptionProtocolHandler/<SendCompleteMessageAsync>d__10")]
public sealed virtual ValueTask SendCompleteMessageAsync(ISocketSession session, string operationSessionId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.ApolloSubscriptionProtocolHandler/<SendConnectionAcceptMessage>d__11")]
private static ValueTask SendConnectionAcceptMessage(ISocketSession session, IReadOnlyDictionary`2<string, object> payload, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.ApolloSubscriptionProtocolHandler/<SendConnectionRejectMessage>d__12")]
private static ValueTask SendConnectionRejectMessage(ISocketSession session, string message, IReadOnlyDictionary`2<string, object> extensions, CancellationToken cancellationToken);
    public sealed virtual ValueTask OnConnectionInitTimeoutAsync(ISocketSession session, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static bool TryParseSubscribeMessage(JsonElement messageElement, DataStartMessage& message);
}
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.CloseReasons : object {
    public static int InvalidMessage;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.DataStartMessage : OperationMessage`1<GraphQLRequest> {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public DataStartMessage(string id, GraphQLRequest request);
    [CompilerGeneratedAttribute]
public string get_Id();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.InitializeConnectionMessage : JsonOperationMessage {
    [CompilerGeneratedAttribute]
private static InitializeConnectionMessage <Default>k__BackingField;
    public static InitializeConnectionMessage Default { get; }
    public InitializeConnectionMessage(Nullable`1<JsonElement> payload);
    private static InitializeConnectionMessage();
    [CompilerGeneratedAttribute]
public static InitializeConnectionMessage get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.MessageProperties : object {
    public static string Id;
    public static string Type;
    public static string Payload;
    public static string Message;
    public static string Extensions;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.Messages : object {
    public static string ConnectionInitialize;
    public static string Start;
}
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.Utf8MessageBodies : object {
    [NullableAttribute("1")]
private static Byte[] _keepAlive;
    public static ReadOnlyMemory`1<byte> KeepAlive { get; }
    private static Utf8MessageBodies();
    public static ReadOnlyMemory`1<byte> get_KeepAlive();
}
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.Utf8MessageProperties : object {
    public static ReadOnlySpan`1<byte> Id { get; }
    public static ReadOnlySpan`1<byte> Type { get; }
    public static ReadOnlySpan`1<byte> get_Id();
    public static ReadOnlySpan`1<byte> get_Type();
}
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.Apollo.Utf8Messages : object {
    public static ReadOnlySpan`1<byte> ConnectionInitialize { get; }
    public static ReadOnlySpan`1<byte> ConnectionAccept { get; }
    public static ReadOnlySpan`1<byte> ConnectionError { get; }
    public static ReadOnlySpan`1<byte> ConnectionTerminate { get; }
    public static ReadOnlySpan`1<byte> Start { get; }
    public static ReadOnlySpan`1<byte> Stop { get; }
    public static ReadOnlySpan`1<byte> Data { get; }
    public static ReadOnlySpan`1<byte> Error { get; }
    public static ReadOnlySpan`1<byte> Complete { get; }
    public static ReadOnlySpan`1<byte> get_ConnectionInitialize();
    public static ReadOnlySpan`1<byte> get_ConnectionAccept();
    public static ReadOnlySpan`1<byte> get_ConnectionError();
    public static ReadOnlySpan`1<byte> get_ConnectionTerminate();
    public static ReadOnlySpan`1<byte> get_Start();
    public static ReadOnlySpan`1<byte> get_Stop();
    public static ReadOnlySpan`1<byte> get_Data();
    public static ReadOnlySpan`1<byte> get_Error();
    public static ReadOnlySpan`1<byte> get_Complete();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.Subscriptions.Protocols.ConnectionStatus : object {
    private static ConnectionStatus _defaultAccepted;
    private static ConnectionStatus _defaultRejected;
    [CompilerGeneratedAttribute]
private bool <Accepted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    public bool Accepted { get; }
    public string Message { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    private ConnectionStatus(bool accepted, string message, IReadOnlyDictionary`2<string, object> extensions);
    private static ConnectionStatus();
    [CompilerGeneratedAttribute]
public bool get_Accepted();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Extensions();
    public static ConnectionStatus Accept();
    public static ConnectionStatus Reject(string message, IReadOnlyDictionary`2<string, object> extensions);
    public static ConnectionStatus Reject(string message);
    public static ConnectionStatus Reject();
    public static ConnectionStatus Reject(IReadOnlyDictionary`2<string, object> extensions);
}
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.CloseReasons : object {
    public static int ProtocolError;
    public static int ConnectionInitWaitTimeout;
    public static int TooManyInitAttempts;
    public static int SubscriberNotUnique;
    public static int Unauthorized;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.ConnectionExtensions : object {
    [ExtensionAttribute]
public static ValueTask CloseInvalidSubscribeMessageAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseSubscriptionIdNotUniqueAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseConnectionInitTimeoutAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseInvalidMessageTypeAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseMessageMustBeJsonObjectAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseMessageTypeIsMandatoryAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseUnauthorizedAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseConnectionRefusedAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseToManyInitializationsAsync(ISocketConnection connection, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask CloseUnexpectedErrorAsync(ISocketConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.ConnectionInitMessage : JsonOperationMessage {
    [CompilerGeneratedAttribute]
private static ConnectionInitMessage <Default>k__BackingField;
    public static ConnectionInitMessage Default { get; }
    public ConnectionInitMessage(Nullable`1<JsonElement> payload);
    private static ConnectionInitMessage();
    [CompilerGeneratedAttribute]
public static ConnectionInitMessage get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler : object {
    private JsonResultFormatter _formatter;
    private ISocketSessionInterceptor _interceptor;
    public string Name { get; }
    public GraphQLOverWebSocketProtocolHandler(ISocketSessionInterceptor interceptor);
    public sealed virtual string get_Name();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler/<OnReceiveAsync>d__5")]
public sealed virtual ValueTask OnReceiveAsync(ISocketSession session, ReadOnlySequence`1<byte> message, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler/<OnReceiveInternalAsync>d__6")]
private ValueTask OnReceiveInternalAsync(ISocketSession session, ReadOnlySequence`1<byte> message, CancellationToken cancellationToken);
    public sealed virtual ValueTask SendKeepAliveMessageAsync(ISocketSession session, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler/<SendResultMessageAsync>d__8")]
public sealed virtual ValueTask SendResultMessageAsync(ISocketSession session, string operationSessionId, IQueryResult result, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler/<SendErrorMessageAsync>d__9")]
public sealed virtual ValueTask SendErrorMessageAsync(ISocketSession session, string operationSessionId, IReadOnlyList`1<IError> errors, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler/<SendCompleteMessageAsync>d__10")]
public sealed virtual ValueTask SendCompleteMessageAsync(ISocketSession session, string operationSessionId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler/<SendPingMessageAsync>d__11")]
public sealed virtual ValueTask SendPingMessageAsync(ISocketSession session, IReadOnlyDictionary`2<string, object> payload, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler/<SendPongMessageAsync>d__12")]
private static ValueTask SendPongMessageAsync(ISocketSession session, IReadOnlyDictionary`2<string, object> payload, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.GraphQLOverWebSocketProtocolHandler/<SendConnectionAcceptMessage>d__13")]
private static ValueTask SendConnectionAcceptMessage(ISocketSession session, IReadOnlyDictionary`2<string, object> payload, CancellationToken cancellationToken);
    public sealed virtual ValueTask OnConnectionInitTimeoutAsync(ISocketSession session, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static bool TryParseSubscribeMessage(JsonElement messageElement, SubscribeMessage& message);
}
public interface HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.IGraphQLOverWebSocketProtocolHandler {
    [NullableContextAttribute("1")]
public abstract virtual ValueTask SendPingMessageAsync(ISocketSession session, IReadOnlyDictionary`2<string, object> payload, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.MessageProperties : object {
    public static string Id;
    public static string Type;
    public static string Payload;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.Messages : object {
    public static string ConnectionInitialize;
    public static string ConnectionAccept;
    public static string Ping;
    public static string Pong;
    public static string Subscribe;
    public static string Next;
    public static string Error;
    public static string Complete;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.PingMessage : JsonOperationMessage {
    [CompilerGeneratedAttribute]
private static PingMessage <Default>k__BackingField;
    public static PingMessage Default { get; }
    public PingMessage(Nullable`1<JsonElement> payload);
    private static PingMessage();
    [CompilerGeneratedAttribute]
public static PingMessage get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.PongMessage : JsonOperationMessage {
    [CompilerGeneratedAttribute]
private static PongMessage <Default>k__BackingField;
    public static PongMessage Default { get; }
    public PongMessage(Nullable`1<JsonElement> payload);
    private static PongMessage();
    [CompilerGeneratedAttribute]
public static PongMessage get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.SubscribeMessage : OperationMessage`1<GraphQLRequest> {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public SubscribeMessage(string id, GraphQLRequest payload);
    [CompilerGeneratedAttribute]
public string get_Id();
}
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.Utf8MessageBodies : object {
    [NullableAttribute("1")]
private static Byte[] _defaultPong;
    [NullableAttribute("1")]
private static Byte[] _defaultPing;
    public static ReadOnlyMemory`1<byte> DefaultPing { get; }
    public static ReadOnlyMemory`1<byte> DefaultPong { get; }
    private static Utf8MessageBodies();
    public static ReadOnlyMemory`1<byte> get_DefaultPing();
    public static ReadOnlyMemory`1<byte> get_DefaultPong();
}
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.Utf8MessageProperties : object {
    public static ReadOnlySpan`1<byte> Type { get; }
    public static ReadOnlySpan`1<byte> Payload { get; }
    public static ReadOnlySpan`1<byte> get_Type();
    public static ReadOnlySpan`1<byte> get_Payload();
}
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.GraphQLOverWebSocket.Utf8Messages : object {
    public static ReadOnlySpan`1<byte> ConnectionInitialize { get; }
    public static ReadOnlySpan`1<byte> ConnectionAccept { get; }
    public static ReadOnlySpan`1<byte> Subscribe { get; }
    public static ReadOnlySpan`1<byte> Next { get; }
    public static ReadOnlySpan`1<byte> Error { get; }
    public static ReadOnlySpan`1<byte> Complete { get; }
    public static ReadOnlySpan`1<byte> Ping { get; }
    public static ReadOnlySpan`1<byte> Pong { get; }
    public static ReadOnlySpan`1<byte> get_ConnectionInitialize();
    public static ReadOnlySpan`1<byte> get_ConnectionAccept();
    public static ReadOnlySpan`1<byte> get_Subscribe();
    public static ReadOnlySpan`1<byte> get_Next();
    public static ReadOnlySpan`1<byte> get_Error();
    public static ReadOnlySpan`1<byte> get_Complete();
    public static ReadOnlySpan`1<byte> get_Ping();
    public static ReadOnlySpan`1<byte> get_Pong();
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.Subscriptions.Protocols.IOperationMessagePayload {
    public abstract virtual T As();
}
[NullableContextAttribute("1")]
public interface HotChocolate.AspNetCore.Subscriptions.Protocols.IProtocolHandler {
    public string Name { get; }
    public abstract virtual string get_Name();
    [NullableContextAttribute("0")]
public abstract virtual ValueTask OnReceiveAsync(ISocketSession session, ReadOnlySequence`1<byte> message, CancellationToken cancellationToken);
    public abstract virtual ValueTask OnConnectionInitTimeoutAsync(ISocketSession session, CancellationToken cancellationToken);
    public abstract virtual ValueTask SendKeepAliveMessageAsync(ISocketSession session, CancellationToken cancellationToken);
    public abstract virtual ValueTask SendResultMessageAsync(ISocketSession session, string operationSessionId, IQueryResult result, CancellationToken cancellationToken);
    public abstract virtual ValueTask SendErrorMessageAsync(ISocketSession session, string operationSessionId, IReadOnlyList`1<IError> errors, CancellationToken cancellationToken);
    public abstract virtual ValueTask SendCompleteMessageAsync(ISocketSession session, string operationSessionId, CancellationToken cancellationToken);
}
public abstract class HotChocolate.AspNetCore.Subscriptions.Protocols.JsonOperationMessage : OperationMessage`1<Nullable`1<JsonElement>> {
    [NullableContextAttribute("1")]
protected JsonOperationMessage(string typeName, Nullable`1<JsonElement> payload);
    [NullableContextAttribute("1")]
public sealed virtual T As();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.Subscriptions.Protocols.MessageUtilities : object {
    [CompilerGeneratedAttribute]
private static JsonWriterOptions <WriterOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions <SerializerOptions>k__BackingField;
    public static JsonWriterOptions WriterOptions { get; }
    public static JsonSerializerOptions SerializerOptions { get; }
    private static MessageUtilities();
    [CompilerGeneratedAttribute]
public static JsonWriterOptions get_WriterOptions();
    [CompilerGeneratedAttribute]
public static JsonSerializerOptions get_SerializerOptions();
    [NullableContextAttribute("0")]
public static void SerializeMessage(ArrayWriter arrayWriter, ReadOnlySpan`1<byte> type, IReadOnlyDictionary`2<string, object> payload, string id);
    public static bool TryGetPayload(JsonElement root, JsonElement& payload);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.AspNetCore.Subscriptions.Protocols.OperationMessage : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; }
    protected OperationMessage(string type);
    [CompilerGeneratedAttribute]
public string get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.AspNetCore.Subscriptions.Protocols.OperationMessage`1 : OperationMessage {
    [CompilerGeneratedAttribute]
private T <Payload>k__BackingField;
    public T Payload { get; }
    protected OperationMessage`1(string type, T payload);
    [CompilerGeneratedAttribute]
public T get_Payload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.WebSocketConnection : object {
    private IProtocolHandler[] _protocolHandlers;
    [NullableAttribute("2")]
private WebSocket _webSocket;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ContextData>k__BackingField;
    public bool IsClosed { get; }
    public HttpContext HttpContext { get; }
    public IServiceProvider RequestServices { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken RequestAborted { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public WebSocketConnection(HttpContext httpContext);
    public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public sealed virtual HttpContext get_HttpContext();
    public sealed virtual IServiceProvider get_RequestServices();
    public CancellationToken get_ApplicationStopping();
    public sealed virtual CancellationToken get_RequestAborted();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_ContextData();
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.WebSocketConnection/<TryAcceptConnection>d__18")]
public sealed virtual Task`1<IProtocolHandler> TryAcceptConnection();
    [NullableContextAttribute("0")]
public sealed virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.WebSocketConnection/<ReadMessageAsync>d__20")]
public sealed virtual Task`1<bool> ReadMessageAsync(IBufferWriter`1<byte> writer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.WebSocketConnection/<CloseAsync>d__21")]
public sealed virtual ValueTask CloseAsync(string message, ConnectionCloseReason reason, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.WebSocketConnection/<CloseAsync>d__22")]
public sealed virtual ValueTask CloseAsync(string message, int reason, CancellationToken cancellationToken);
    private static WebSocketCloseStatus MapCloseStatus(ConnectionCloseReason closeReason);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Subscriptions.WebSocketSession : object {
    private static GraphQLSocketOptions _defaultOptions;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private ISocketConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IProtocolHandler <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private IOperationManager <Operations>k__BackingField;
    public ISocketConnection Connection { get; }
    public IProtocolHandler Protocol { get; }
    public IOperationManager Operations { get; }
    private WebSocketSession(ISocketConnection connection, IProtocolHandler protocol, ISocketSessionInterceptor interceptor, IRequestExecutor requestExecutor);
    private static WebSocketSession();
    [CompilerGeneratedAttribute]
public sealed virtual ISocketConnection get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual IProtocolHandler get_Protocol();
    [CompilerGeneratedAttribute]
public sealed virtual IOperationManager get_Operations();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Subscriptions.WebSocketSession/<AcceptAsync>d__13")]
public static Task AcceptAsync(HttpContext context, IRequestExecutor executor, ISocketSessionInterceptor interceptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.AspNetCore.ThrowHelper : object {
    public static GraphQLRequestException DefaultHttpRequestParser_QueryAndIdMissing();
    public static GraphQLRequestException DefaultHttpRequestParser_SyntaxError(SyntaxException ex);
    public static GraphQLRequestException DefaultHttpRequestParser_UnexpectedError(Exception ex);
    public static GraphQLRequestException DefaultHttpRequestParser_RequestIsEmpty();
    public static GraphQLRequestException DefaultHttpRequestParser_MaxRequestSizeExceeded();
    public static GraphQLException HttpMultipartMiddleware_Invalid_Form(Exception ex);
    public static GraphQLException HttpMultipartMiddleware_No_Operations_Specified();
    public static GraphQLException HttpMultipartMiddleware_Fields_Misordered();
    public static GraphQLException HttpMultipartMiddleware_NoObjectPath(string filename);
    public static GraphQLException HttpMultipartMiddleware_FileMissing(string filename);
    public static GraphQLException HttpMultipartMiddleware_VariableNotFound(string path);
    public static GraphQLException HttpMultipartMiddleware_VariableStructureInvalid();
    public static GraphQLException HttpMultipartMiddleware_InvalidPath(string path);
    public static GraphQLException HttpMultipartMiddleware_PathMustStartWithVariable();
    public static GraphQLException HttpMultipartMiddleware_InvalidMapJson();
    public static GraphQLException HttpMultipartMiddleware_MapNotSpecified();
    public static NotSupportedException Formatter_ResultKindNotSupported();
    public static NotSupportedException Formatter_ResponseContentTypeNotSupported(string contentType);
    public static InvalidOperationException Formatter_InvalidAcceptMediaType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.UploadedFile : StreamFile {
    private IFormFile _file;
    public UploadedFile(IFormFile file);
    public virtual Task CopyToAsync(Stream target, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Warmup.ExecutorWarmupService : BackgroundService {
    private IRequestExecutorResolver _executorResolver;
    private Dictionary`2<string, WarmupSchemaTask[]> _tasks;
    [NullableAttribute("2")]
private IDisposable _eventSubscription;
    private CancellationToken _stopping;
    public ExecutorWarmupService(IRequestExecutorResolver executorResolver, IEnumerable`1<WarmupSchemaTask> tasks);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Warmup.ExecutorWarmupService/<ExecuteAsync>d__5")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
    private void BeginWarmup(string schemaName);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.Warmup.ExecutorWarmupService/<WarmupAsync>d__7")]
private Task WarmupAsync(string schemaName, WarmupSchemaTask[] tasks, CancellationToken ct);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <ExecuteAsync>b__5_0(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.AspNetCore.Warmup.WarmupSchemaTask : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<IRequestExecutor, CancellationToken, Task> _warmup;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepWarm>k__BackingField;
    public string SchemaName { get; }
    public bool KeepWarm { get; }
    public WarmupSchemaTask(string schemaName, bool keepWarm, Func`3<IRequestExecutor, CancellationToken, Task> warmup);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public bool get_KeepWarm();
    public Task ExecuteAsync(IRequestExecutor executor, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.AspNetCore.WebSocketSubscriptionMiddleware : MiddlewareBase {
    private IServerDiagnosticEvents _diagnosticEvents;
    public WebSocketSubscriptionMiddleware(RequestDelegate next, IRequestExecutorResolver executorResolver, IHttpResponseFormatter responseFormatter, IServerDiagnosticEvents diagnosticEvents, string schemaName);
    public Task InvokeAsync(HttpContext context);
    [AsyncStateMachineAttribute("HotChocolate.AspNetCore.WebSocketSubscriptionMiddleware/<HandleWebSocketSessionAsync>d__3")]
private Task HandleWebSocketSessionAsync(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.EndpointRouteBuilderExtensions : object {
    private static string _graphQLHttpPath;
    private static string _graphQLWebSocketPath;
    private static string _graphQLSchemaPath;
    private static string _graphQLToolPath;
    private static string _graphQLToolRelativeRequestPath;
    [ExtensionAttribute]
public static GraphQLEndpointConventionBuilder MapGraphQL(IEndpointRouteBuilder endpointRouteBuilder, string path, string schemaName);
    [ExtensionAttribute]
public static GraphQLEndpointConventionBuilder MapGraphQL(IEndpointRouteBuilder endpointRouteBuilder, PathString path, string schemaName);
    [ExtensionAttribute]
public static IApplicationBuilder MapGraphQL(IApplicationBuilder applicationBuilder, PathString path, string schemaName);
    [ExtensionAttribute]
public static GraphQLHttpEndpointConventionBuilder MapGraphQLHttp(IEndpointRouteBuilder endpointRouteBuilder, string pattern, string schemaName);
    [ExtensionAttribute]
public static GraphQLHttpEndpointConventionBuilder MapGraphQLHttp(IEndpointRouteBuilder endpointRouteBuilder, RoutePattern pattern, string schemaName);
    [ExtensionAttribute]
public static WebSocketEndpointConventionBuilder MapGraphQLWebSocket(IEndpointRouteBuilder endpointRouteBuilder, string pattern, string schemaName);
    [ExtensionAttribute]
public static WebSocketEndpointConventionBuilder MapGraphQLWebSocket(IEndpointRouteBuilder endpointRouteBuilder, RoutePattern pattern, string schemaName);
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapGraphQLSchema(IEndpointRouteBuilder endpointRouteBuilder, string pattern, string schemaName);
    [ExtensionAttribute]
public static IEndpointConventionBuilder MapGraphQLSchema(IEndpointRouteBuilder endpointRouteBuilder, RoutePattern pattern, string schemaName);
    [ExtensionAttribute]
public static BananaCakePopEndpointConventionBuilder MapBananaCakePop(IEndpointRouteBuilder endpointRouteBuilder, string toolPath, string relativeRequestPath);
    [ExtensionAttribute]
public static BananaCakePopEndpointConventionBuilder MapBananaCakePop(IEndpointRouteBuilder endpointRouteBuilder, PathString toolPath, string relativeRequestPath);
    [ExtensionAttribute]
public static GraphQLEndpointConventionBuilder WithOptions(GraphQLEndpointConventionBuilder builder, GraphQLServerOptions serverOptions);
    [ExtensionAttribute]
public static GraphQLHttpEndpointConventionBuilder WithOptions(GraphQLHttpEndpointConventionBuilder builder, GraphQLHttpOptions httpOptions);
    [ExtensionAttribute]
public static BananaCakePopEndpointConventionBuilder WithOptions(BananaCakePopEndpointConventionBuilder builder, GraphQLToolOptions toolOptions);
    [ExtensionAttribute]
public static WebSocketEndpointConventionBuilder WithOptions(WebSocketEndpointConventionBuilder builder, GraphQLSocketOptions socketOptions);
    [ExtensionAttribute]
private static IApplicationBuilder UseCancellation(IApplicationBuilder builder);
    [ExtensionAttribute]
internal static BananaCakePopOptions ToBcpOptions(GraphQLToolOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HotChocolateAspNetCoreServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddGraphQLServerCore(IServiceCollection services, int maxAllowedRequestSize);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddGraphQLServer(IServiceCollection services, string schemaName, int maxAllowedRequestSize);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddGraphQLServer(IRequestExecutorBuilder builder, string schemaName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the new configuration API -> services.AddGraphQLServer().AddQueryType<Query>()...")]
public static IServiceCollection AddGraphQL(IServiceCollection services, ISchema schema, int maxAllowedRequestSize);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the new configuration API -> services.AddGraphQLServer().AddQueryType<Query>()...")]
public static IServiceCollection AddGraphQL(IServiceCollection services, Func`2<IServiceProvider, ISchema> schemaFactory, int maxAllowedRequestSize);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the new configuration API -> services.AddGraphQLServer().AddQueryType<Query>()...")]
public static IServiceCollection AddGraphQL(IServiceCollection services, ISchemaBuilder schemaBuilder, int maxAllowedRequestSize);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddUploadType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddHttpRequestInterceptor(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddHttpRequestInterceptor(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddHttpRequestInterceptor(IRequestExecutorBuilder builder, HttpRequestInterceptorDelegate interceptor);
    [ExtensionAttribute]
private static IRequestExecutorBuilder AddDefaultHttpRequestInterceptor(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IServiceCollection AddHttpResponseFormatter(IServiceCollection services, bool indented);
    [ExtensionAttribute]
public static IServiceCollection AddHttpResponseFormatter(IServiceCollection services, HttpResponseFormatterOptions options);
    [ExtensionAttribute]
public static IServiceCollection AddHttpResponseFormatter(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddHttpResponseFormatter(IServiceCollection services, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSocketSessionInterceptor(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSocketSessionInterceptor(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
private static IRequestExecutorBuilder AddSubscriptionServices(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
private static IRequestExecutorBuilder AddApolloProtocol(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
private static IRequestExecutorBuilder AddGraphQLOverWebSocketProtocol(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder InitializeOnStartup(IRequestExecutorBuilder builder, Func`3<IRequestExecutor, CancellationToken, Task> warmup, bool keepWarm);
}
