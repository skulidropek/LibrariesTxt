[ExtensionAttribute]
internal static class HotChocolate.Authorization.<AuthorizationTypeInterceptor>FEA3295D07AF73D776D7ED782B61FE9FE46A57879C6D126899790696DEC43C47F__AuthorizationTypeInterceptorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsNodeField(ObjectFieldDefinition fieldDef);
}
public class HotChocolate.Authorization.AllowAnonymousAttribute : ObjectFieldDescriptorAttribute {
    [NullableContextAttribute("1")]
protected virtual void OnConfigure(IDescriptorContext context, IObjectFieldDescriptor descriptor, MemberInfo member);
}
internal class HotChocolate.Authorization.AllowAnonymousDirectiveType : DirectiveType {
    [NullableContextAttribute("1")]
protected virtual void Configure(IDirectiveTypeDescriptor descriptor);
    [NullableContextAttribute("1")]
public sealed virtual void ApplyConfiguration(IDescriptorContext context, DirectiveNode directiveNode, IDefinition definition, Stack`1<IDefinition> path);
}
public enum HotChocolate.Authorization.ApplyPolicy : Enum {
    public int value__;
    public static ApplyPolicy BeforeResolver;
    public static ApplyPolicy AfterResolver;
    public static ApplyPolicy Validation;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Authorization.ApplyPolicyType : EnumType`1<ApplyPolicy> {
    protected virtual void Configure(IEnumTypeDescriptor`1<ApplyPolicy> descriptor);
}
internal static class HotChocolate.Authorization.AuthContextData : object {
    [NullableAttribute("1")]
public static string Directives;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Authorization.AuthorizationCache : object {
    private Cache`1<AuthorizeDirective[]> _cache;
    public int Capacity { get; }
    public int Count { get; }
    public AuthorizationCache(int capacity);
    public int get_Capacity();
    public int get_Count();
    public bool TryGetDirectives(string documentId, AuthorizeDirective[]& directives);
    public void TryAddDirectives(string documentId, AuthorizeDirective[] directives);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Authorization.AuthorizationContext : object {
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ContextData>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentNode <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentId>k__BackingField;
    public ISchema Schema { get; }
    public IServiceProvider Services { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public DocumentNode Document { get; }
    public string DocumentId { get; }
    public AuthorizationContext(ISchema schema, IServiceProvider services, IDictionary`2<string, object> contextData, DocumentNode document, string documentId);
    [CompilerGeneratedAttribute]
public ISchema get_Schema();
    [CompilerGeneratedAttribute]
public IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_ContextData();
    [CompilerGeneratedAttribute]
public DocumentNode get_Document();
    [CompilerGeneratedAttribute]
public string get_DocumentId();
}
internal class HotChocolate.Authorization.AuthorizationContextEnricher : object {
    [NullableContextAttribute("1")]
public sealed virtual void Enrich(IRequestContext context);
}
public class HotChocolate.Authorization.AuthorizationOptions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IObjectFieldDescriptor> <ConfigureNodeFields>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IObjectFieldDescriptor> <ConfigureTypeField>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IObjectFieldDescriptor> <ConfigureSchemaField>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IObjectFieldDescriptor> ConfigureNodeFields { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IObjectFieldDescriptor> ConfigureTypeField { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IObjectFieldDescriptor> ConfigureSchemaField { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<IObjectFieldDescriptor> get_ConfigureNodeFields();
    [CompilerGeneratedAttribute]
public void set_ConfigureNodeFields(Action`1<IObjectFieldDescriptor> value);
    [CompilerGeneratedAttribute]
public Action`1<IObjectFieldDescriptor> get_ConfigureTypeField();
    [CompilerGeneratedAttribute]
public void set_ConfigureTypeField(Action`1<IObjectFieldDescriptor> value);
    [CompilerGeneratedAttribute]
public Action`1<IObjectFieldDescriptor> get_ConfigureSchemaField();
    [CompilerGeneratedAttribute]
public void set_ConfigureSchemaField(Action`1<IObjectFieldDescriptor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Authorization.AuthorizationTypeInterceptor : TypeInterceptor {
    private List`1<ObjectTypeInfo> _objectTypes;
    private List`1<UnionTypeInfo> _unionTypes;
    private Dictionary`2<ObjectType, IDirectiveCollection> _directives;
    private HashSet`1<TypeReference> _completedTypeRefs;
    private HashSet`1<RegisteredType> _completedTypes;
    [NullableAttribute("2")]
private State _state;
    private IDescriptorContext _context;
    private TypeInitializer _typeInitializer;
    private TypeRegistry _typeRegistry;
    private TypeLookup _typeLookup;
    private ExtensionData _schemaContextData;
    private ITypeCompletionContext _queryContext;
    internal UInt32 Position { get; }
    internal virtual UInt32 get_Position();
    internal virtual void InitializeContext(IDescriptorContext context, TypeInitializer typeInitializer, TypeRegistry typeRegistry, TypeLookup typeLookup, TypeReferenceResolver typeReferenceResolver);
    internal virtual void OnBeforeCreateSchemaInternal(IDescriptorContext context, ISchemaBuilder schemaBuilder);
    public virtual void OnBeforeCompleteName(ITypeCompletionContext completionContext, DefinitionBase definition);
    public virtual void OnBeforeCompleteTypes();
    internal virtual void OnAfterResolveRootType(ITypeCompletionContext completionContext, ObjectTypeDefinition definition, OperationType operationType);
    public virtual void OnBeforeCompleteType(ITypeCompletionContext completionContext, DefinitionBase definition);
    public virtual void OnAfterCompleteTypes();
    private void InspectObjectTypesForAuthDirective(State state);
    private void FindUnionTypesThatContainAuthTypes(State state);
    private void FindFieldsAndApplyAuthMiddleware(State state);
    private void HandleSpecialQueryFields(ObjectTypeInfo type, State state);
    private void CheckForValidationAuth(ObjectTypeInfo type);
    private void ApplyAuthMiddleware(string typeName, ObjectFieldDefinition fieldDef, State state);
    private void ApplyAuthMiddleware(ObjectFieldDefinition fieldDef, RegisteredType authTypeReg, bool isNodeField);
    private static FieldMiddlewareDefinition CreateAuthMiddleware(AuthorizeDirective directive);
    private DirectiveCollection GetOrCreateDirectives(RegisteredType registration);
    private void CompleteDirectiveTypes(IReadOnlyList`1<DirectiveDefinition> directives);
    private void CompleteDirectiveType(DirectiveDefinition directive);
    private void CollectInterfaces(IReadOnlyList`1<TypeReference> interfaces, Action`1<TypeReference> register, State state);
    private RegisteredType GetTypeRegistration(TypeReference typeReference);
    private static bool IsAuthorizedType(T definition);
    private State CreateState();
    [CompilerGeneratedAttribute]
private void <OnBeforeCreateSchemaInternal>b__15_0(ISchemaTypeDescriptor d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("204")]
public class HotChocolate.Authorization.AuthorizeAttribute : DescriptorAttribute {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyPolicy <Apply>k__BackingField;
    [NullableAttribute("2")]
public string Policy { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Roles { get; public set; }
    public ApplyPolicy Apply { get; public set; }
    public AuthorizeAttribute(string policy);
    public AuthorizeAttribute(string policy, ApplyPolicy apply);
    public AuthorizeAttribute(ApplyPolicy apply);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Policy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Policy(string value);
    [CompilerGeneratedAttribute]
public String[] get_Roles();
    [CompilerGeneratedAttribute]
public void set_Roles(String[] value);
    [CompilerGeneratedAttribute]
public ApplyPolicy get_Apply();
    [CompilerGeneratedAttribute]
public void set_Apply(ApplyPolicy value);
    protected internal virtual void TryConfigure(IDescriptorContext context, IDescriptor descriptor, ICustomAttributeProvider element);
    private AuthorizeDirective CreateDirective();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Authorization.AuthorizeDirective : object {
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplyPolicy <Apply>k__BackingField;
    public string Policy { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> Roles { get; }
    public ApplyPolicy Apply { get; }
    [NullableContextAttribute("1")]
public AuthorizeDirective(IReadOnlyList`1<string> roles, ApplyPolicy apply);
    public AuthorizeDirective(ApplyPolicy apply);
    public AuthorizeDirective(string policy, IReadOnlyList`1<string> roles, ApplyPolicy apply);
    [CompilerGeneratedAttribute]
public string get_Policy();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Roles();
    [CompilerGeneratedAttribute]
public ApplyPolicy get_Apply();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Authorization.AuthorizeDirectiveType : DirectiveType`1<AuthorizeDirective> {
    protected virtual void Configure(IDirectiveTypeDescriptor`1<AuthorizeDirective> descriptor);
    public sealed virtual void ApplyConfiguration(IDescriptorContext context, DirectiveNode directiveNode, IDefinition definition, Stack`1<IDefinition> path);
    private static DirectiveMiddleware CreateMiddleware();
    [CompilerGeneratedAttribute]
internal static bool <ApplyConfiguration>g__IsValidationAuthRule|2_0(DirectiveNode directiveNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Authorization.AuthorizeMiddleware : object {
    private FieldDelegate _next;
    private AuthorizeDirective _directive;
    public AuthorizeMiddleware(FieldDelegate next, AuthorizeDirective directive);
    [AsyncStateMachineAttribute("HotChocolate.Authorization.AuthorizeMiddleware/<InvokeAsync>d__3")]
public Task InvokeAsync(IMiddlewareContext context);
    private static bool IsErrorResult(IMiddlewareContext context);
    private void SetError(IMiddlewareContext context, AuthorizeResult state);
}
public enum HotChocolate.Authorization.AuthorizeResult : Enum {
    public int value__;
    public static AuthorizeResult Allowed;
    public static AuthorizeResult NotAllowed;
    public static AuthorizeResult NotAuthenticated;
    public static AuthorizeResult NoDefaultPolicy;
    public static AuthorizeResult PolicyNotFound;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Authorization.AuthorizeValidationResultAggregator : object {
    private IServiceProvider _services;
    public AuthorizeValidationResultAggregator(IServiceProvider services);
    [AsyncStateMachineAttribute("HotChocolate.Authorization.AuthorizeValidationResultAggregator/<AggregateAsync>d__2")]
public sealed virtual ValueTask AggregateAsync(IDocumentValidatorContext context, DocumentNode document, CancellationToken ct);
    private static IError CreateError(AuthorizeResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Authorization.AuthorizeValidationRule : object {
    private AuthorizeValidationVisitor _visitor;
    private AuthorizationCache _cache;
    public bool IsCacheable { get; }
    public AuthorizeValidationRule(AuthorizationCache cache);
    public sealed virtual bool get_IsCacheable();
    public sealed virtual void Validate(IDocumentValidatorContext context, DocumentNode document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Authorization.AuthorizeValidationVisitor : TypeDocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(DocumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    private static void CollectAuthorizeDirective(ISchema schema, IType type, HashSet`1<AuthorizeDirective> authDirectives);
    private static void CollectAuthorizeDirective(IDirectiveCollection directives, HashSet`1<AuthorizeDirective> authDirectives);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(SelectionSetNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction VisitChildren(FragmentSpreadNode node, IDocumentValidatorContext context);
    private static bool HasFields(SelectionSetNode selectionSet);
    private static bool IsTypeNameField(string fieldName);
    private static HashSet`1<AuthorizeDirective> GetAuthDirectives(IDocumentValidatorContext context);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Authorization.IAuthorizationHandler {
    public abstract virtual ValueTask`1<AuthorizeResult> AuthorizeAsync(IMiddlewareContext context, AuthorizeDirective directive, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<AuthorizeResult> AuthorizeAsync(AuthorizationContext context, IReadOnlyList`1<AuthorizeDirective> directives, CancellationToken cancellationToken);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Authorization.Properties.AuthCoreResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AuthorizeMiddleware_NoDefaultPolicy { get; }
    internal static string AuthorizeMiddleware_NotAuthorized { get; }
    internal static string AuthorizeMiddleware_PolicyNotFound { get; }
    internal static string AuthorizeMiddleware_PoliciesMissing { get; }
    internal static string ThrowHelper_StateNotInitialized { get; }
    internal static string ThrowHelper_UnauthorizedType { get; }
    internal static string ThrowHelper_UnableToResolveTypeReg { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AuthorizeMiddleware_NoDefaultPolicy();
    internal static string get_AuthorizeMiddleware_NotAuthorized();
    internal static string get_AuthorizeMiddleware_PolicyNotFound();
    internal static string get_AuthorizeMiddleware_PoliciesMissing();
    internal static string get_ThrowHelper_StateNotInitialized();
    internal static string get_ThrowHelper_UnauthorizedType();
    internal static string get_ThrowHelper_UnableToResolveTypeReg();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Authorization.ThrowHelper : object {
    public static InvalidOperationException StateNotInitialized();
    public static InvalidOperationException UnauthorizedType(FieldCoordinate fieldCoordinate);
    public static InvalidOperationException UnableToResolveTypeReg();
}
[ExtensionAttribute]
internal static class HotChocolate.AuthorizeSchemaBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ISchemaBuilder AddAuthorizeDirectiveType(ISchemaBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.AuthorizeObjectFieldDescriptorExtensions : object {
    [ExtensionAttribute]
public static IObjectFieldDescriptor Authorize(IObjectFieldDescriptor descriptor, ApplyPolicy apply);
    [ExtensionAttribute]
public static IObjectFieldDescriptor Authorize(IObjectFieldDescriptor descriptor, string policy, ApplyPolicy apply);
    [ExtensionAttribute]
public static IObjectFieldDescriptor Authorize(IObjectFieldDescriptor descriptor, String[] roles);
    [ExtensionAttribute]
public static IObjectFieldDescriptor AllowAnonymous(IObjectFieldDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.AuthorizeObjectTypeDescriptorExtensions : object {
    [ExtensionAttribute]
public static IObjectTypeDescriptor Authorize(IObjectTypeDescriptor descriptor, ApplyPolicy apply);
    [ExtensionAttribute]
public static IObjectTypeDescriptor Authorize(IObjectTypeDescriptor descriptor, string policy, ApplyPolicy apply);
    [ExtensionAttribute]
public static IObjectTypeDescriptor Authorize(IObjectTypeDescriptor descriptor, String[] roles);
    [ExtensionAttribute]
public static IObjectTypeDescriptor`1<T> Authorize(IObjectTypeDescriptor`1<T> descriptor, ApplyPolicy apply);
    [ExtensionAttribute]
public static IObjectTypeDescriptor`1<T> Authorize(IObjectTypeDescriptor`1<T> descriptor, string policy, ApplyPolicy apply);
    [ExtensionAttribute]
public static IObjectTypeDescriptor`1<T> Authorize(IObjectTypeDescriptor`1<T> descriptor, String[] roles);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HotChocolateAuthorizeRequestExecutorBuilder : object {
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddAuthorizationCore(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ModifyAuthorizationOptions(IRequestExecutorBuilder builder, Action`1<AuthorizationOptions> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddAuthorizationHandler(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddAuthorizationHandler(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> factory);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
