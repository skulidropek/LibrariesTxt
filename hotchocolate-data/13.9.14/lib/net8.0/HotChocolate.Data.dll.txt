[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.ByteOperationFilterInputType : ComparableOperationFilterInputType`1<ByteType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.DataEnumerableExtensions : object {
    [ExtensionAttribute]
public static QueryableExecutable`1<T> AsExecutable(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static QueryableExecutable`1<T> AsExecutable(IQueryable`1<T> source);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Data.DataResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FilterField_FilterField_TypeUnknown { get; }
    internal static string FilterConventionDescriptor_MustInheritFromFilterInputType { get; }
    internal static string FilterConventionDescriptor_MustImplementIFilterProvider { get; }
    internal static string FilterConvention_NoConfigurationSpecified { get; }
    internal static string FilterProvider_NoConfigurationSpecified { get; }
    internal static string FilterConvention_UnknownType { get; }
    internal static string FilterInputTypeDescriptor_Operation_OnlyMethods { get; }
    internal static string FilterInputTypeDescriptor_Field_OnlyProperties { get; }
    internal static string FilterObjectFieldDescriptorExtensions_UseFiltering_CannotHandleType { get; }
    internal static string SortField_SortField_TypeUnknown { get; }
    internal static string Sorting_TypeOfInvalidFormat { get; }
    internal static string SortConventionDescriptor_MustInheritFromSortInputOrEnumType { get; }
    internal static string SortConventionDescriptor_MustImplementISortProvider { get; }
    internal static string SortConvention_NoConfigurationSpecified { get; }
    internal static string SortProvider_NoConfigurationSpecified { get; }
    internal static string SortConvention_UnknownType { get; }
    internal static string SortInputTypeDescriptor_Field_OnlyProperties { get; }
    internal static string SortObjectFieldDescriptorExtensions_UseSorting_CannotHandleType { get; }
    internal static string SortingVisitor_ListInput_AreNotSuported { get; }
    internal static string SortingEnumType_Cannot_ParseLiteral { get; }
    internal static string SortInvocation_Cannot_SortOnFields { get; }
    internal static string QueryableSortHandler_InvalidSelector { get; }
    internal static string FilterConvention_CouldNotConvertValue { get; }
    internal static string FilterObjectFieldDescriptorExtensions_CannotInfer { get; }
    internal static string FilterDescriptorContextExtensions_NoConvention { get; }
    internal static string FilterDescriptorContextExtensions_NoConvention_Default { get; }
    internal static string SortProvider_NoFieldHandlersConfigured { get; }
    internal static string SortProvider_NoOperationHandlersConfigured { get; }
    internal static string SortDescriptorContextExtensions_NoConvention { get; }
    internal static string SortDescriptorContextExtensions_NoConvention_Default { get; }
    internal static string SortInterceptor_NoFieldHandlerFoundForField { get; }
    internal static string SortInterceptor_NoOperationHandlerFoundForValue { get; }
    internal static string SortConvention_NoProviderFound { get; }
    internal static string SortConvention_TypeOfMemberIsUnknown { get; }
    internal static string Sorting_SortingWasNotFound { get; }
    internal static string Sorting_TypeMissmatch { get; }
    internal static string FilterConvention_NoProviderFound { get; }
    internal static string FilterConvention_TypeOfMemberIsUnknown { get; }
    internal static string FilterConvention_TypeIsUnknown { get; }
    internal static string SortConvention_OperationNameNotFound { get; }
    internal static string SortObjectFieldDescriptorExtensions_CannotInfer { get; }
    internal static string FilterConvention_OperationNameNotFound { get; }
    internal static string FilterProvider_NoHandlersConfigured { get; }
    internal static string Filtering_FilteringWasNotFound { get; }
    internal static string Filtering_TypeMissmatch { get; }
    internal static string FilterInterceptor_NoHandlerFoundForField { get; }
    internal static string FilterInterceptor_OperationHasNoTypeSpecified { get; }
    internal static string ErrorHelper_CreateNonNullError { get; }
    internal static string FilterProvider_UnableToCreateFieldHandler { get; }
    internal static string SortProvider_UnableToCreateFieldHandler { get; }
    internal static string SortProvider_UnableToCreateOperationHandler { get; }
    internal static string SortEnumValue_ValueIsNull { get; }
    internal static string SortVisitor_InvalidField { get; }
    internal static string SortVisitor_InvalidType { get; }
    internal static string FilterVisitor_InvalidType { get; }
    internal static string FilterVisitor_InvalidField { get; }
    internal static string ProjectionProvider_NoConfigurationSpecified { get; }
    internal static string ProjectionProvider_UnableToCreateFieldHandler { get; }
    internal static string ProjectionProvider_NoHandlersConfigured { get; }
    internal static string ProjectionConvention_NoConfigurationSpecified { get; }
    internal static string ProjectionConvention_NoProviderFound { get; }
    internal static string ProjectionConventionDescriptor_MustImplementIProjectionProvider { get; }
    internal static string ProjectionProvider_CreateMoreThanOneError { get; }
    internal static string ProjectionProvider_CouldNotProjectFiltering { get; }
    internal static string ProjectionProvider_CouldNotProjectSorting { get; }
    internal static string ProjectionConvention_CouldNotProject { get; }
    internal static string ProjectionConvention_NodeFieldWasInInvalidState { get; }
    internal static string ProjectionVisitor_NodeFieldWasNotFound { get; }
    internal static string Projection_ProjectionWasNotFound { get; }
    internal static string Projection_TypeMissmatch { get; }
    internal static string FilterConvention_ProviderHasToBeInitializedByConvention { get; }
    internal static string UseProjection_CannotHandleType { get; }
    internal static string PagingProjectionOptimizer_NotAPagingField { get; }
    internal static string Filtering_CouldNotParseValue { get; }
    internal static string QueryableFiltering_MemberInvalid { get; }
    internal static string QueryableFiltering_ExpressionParameterInvalid { get; }
    internal static string QueryableFilterProvider_ExpressionParameterInvalid { get; }
    internal static string QueryableFiltering_NoMemberDeclared { get; }
    internal static string Filtering_QueryableCombinator_QueueEmpty { get; }
    internal static string Filtering_QueryableCombinator_InvalidCombinator { get; }
    internal static string ProjectionVisitor_MemberInvalid { get; }
    internal static string ProjectionVisitor_NoMemberFound { get; }
    internal static string ProjectionVisitor_InvalidState_NoParentScope { get; }
    internal static string ProjectionVisitor_NoConstructorFoundForSet { get; }
    internal static string Sorting_InvalidState_ParentIsNoFieldSelector { get; }
    internal static string QueryableSorting_MemberInvalid { get; }
    internal static string QueryableSorting_ExpressionParameterInvalid { get; }
    internal static string QueryableSortProvider_ExpressionParameterInvalid { get; }
    internal static string QueryableSorting_NoMemberDeclared { get; }
    internal static string SortField_ArgumentInvalid_NoHandlerWasFound { get; }
    internal static string ProjectionVisitor_CouldNotUnwrapType { get; }
    internal static string GlobalIdInputValueFormatter_SpecifiedValueIsNotAValidId { get; }
    internal static string GlobalIdInputValueFormatter_IdsHaveInvalidFormat { get; }
    internal static string SelectionContext_NoTypeForAbstractFieldProvided { get; }
    internal static string NameHelpers_UppercaseFirstLetter { get; }
    internal static string ProjectionObjectFieldDescriptorExtensions_UnwrapMutationPayloadSelect_Failed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FilterField_FilterField_TypeUnknown();
    internal static string get_FilterConventionDescriptor_MustInheritFromFilterInputType();
    internal static string get_FilterConventionDescriptor_MustImplementIFilterProvider();
    internal static string get_FilterConvention_NoConfigurationSpecified();
    internal static string get_FilterProvider_NoConfigurationSpecified();
    internal static string get_FilterConvention_UnknownType();
    internal static string get_FilterInputTypeDescriptor_Operation_OnlyMethods();
    internal static string get_FilterInputTypeDescriptor_Field_OnlyProperties();
    internal static string get_FilterObjectFieldDescriptorExtensions_UseFiltering_CannotHandleType();
    internal static string get_SortField_SortField_TypeUnknown();
    internal static string get_Sorting_TypeOfInvalidFormat();
    internal static string get_SortConventionDescriptor_MustInheritFromSortInputOrEnumType();
    internal static string get_SortConventionDescriptor_MustImplementISortProvider();
    internal static string get_SortConvention_NoConfigurationSpecified();
    internal static string get_SortProvider_NoConfigurationSpecified();
    internal static string get_SortConvention_UnknownType();
    internal static string get_SortInputTypeDescriptor_Field_OnlyProperties();
    internal static string get_SortObjectFieldDescriptorExtensions_UseSorting_CannotHandleType();
    internal static string get_SortingVisitor_ListInput_AreNotSuported();
    internal static string get_SortingEnumType_Cannot_ParseLiteral();
    internal static string get_SortInvocation_Cannot_SortOnFields();
    internal static string get_QueryableSortHandler_InvalidSelector();
    internal static string get_FilterConvention_CouldNotConvertValue();
    internal static string get_FilterObjectFieldDescriptorExtensions_CannotInfer();
    internal static string get_FilterDescriptorContextExtensions_NoConvention();
    internal static string get_FilterDescriptorContextExtensions_NoConvention_Default();
    internal static string get_SortProvider_NoFieldHandlersConfigured();
    internal static string get_SortProvider_NoOperationHandlersConfigured();
    internal static string get_SortDescriptorContextExtensions_NoConvention();
    internal static string get_SortDescriptorContextExtensions_NoConvention_Default();
    internal static string get_SortInterceptor_NoFieldHandlerFoundForField();
    internal static string get_SortInterceptor_NoOperationHandlerFoundForValue();
    internal static string get_SortConvention_NoProviderFound();
    internal static string get_SortConvention_TypeOfMemberIsUnknown();
    internal static string get_Sorting_SortingWasNotFound();
    internal static string get_Sorting_TypeMissmatch();
    internal static string get_FilterConvention_NoProviderFound();
    internal static string get_FilterConvention_TypeOfMemberIsUnknown();
    internal static string get_FilterConvention_TypeIsUnknown();
    internal static string get_SortConvention_OperationNameNotFound();
    internal static string get_SortObjectFieldDescriptorExtensions_CannotInfer();
    internal static string get_FilterConvention_OperationNameNotFound();
    internal static string get_FilterProvider_NoHandlersConfigured();
    internal static string get_Filtering_FilteringWasNotFound();
    internal static string get_Filtering_TypeMissmatch();
    internal static string get_FilterInterceptor_NoHandlerFoundForField();
    internal static string get_FilterInterceptor_OperationHasNoTypeSpecified();
    internal static string get_ErrorHelper_CreateNonNullError();
    internal static string get_FilterProvider_UnableToCreateFieldHandler();
    internal static string get_SortProvider_UnableToCreateFieldHandler();
    internal static string get_SortProvider_UnableToCreateOperationHandler();
    internal static string get_SortEnumValue_ValueIsNull();
    internal static string get_SortVisitor_InvalidField();
    internal static string get_SortVisitor_InvalidType();
    internal static string get_FilterVisitor_InvalidType();
    internal static string get_FilterVisitor_InvalidField();
    internal static string get_ProjectionProvider_NoConfigurationSpecified();
    internal static string get_ProjectionProvider_UnableToCreateFieldHandler();
    internal static string get_ProjectionProvider_NoHandlersConfigured();
    internal static string get_ProjectionConvention_NoConfigurationSpecified();
    internal static string get_ProjectionConvention_NoProviderFound();
    internal static string get_ProjectionConventionDescriptor_MustImplementIProjectionProvider();
    internal static string get_ProjectionProvider_CreateMoreThanOneError();
    internal static string get_ProjectionProvider_CouldNotProjectFiltering();
    internal static string get_ProjectionProvider_CouldNotProjectSorting();
    internal static string get_ProjectionConvention_CouldNotProject();
    internal static string get_ProjectionConvention_NodeFieldWasInInvalidState();
    internal static string get_ProjectionVisitor_NodeFieldWasNotFound();
    internal static string get_Projection_ProjectionWasNotFound();
    internal static string get_Projection_TypeMissmatch();
    internal static string get_FilterConvention_ProviderHasToBeInitializedByConvention();
    internal static string get_UseProjection_CannotHandleType();
    internal static string get_PagingProjectionOptimizer_NotAPagingField();
    internal static string get_Filtering_CouldNotParseValue();
    internal static string get_QueryableFiltering_MemberInvalid();
    internal static string get_QueryableFiltering_ExpressionParameterInvalid();
    internal static string get_QueryableFilterProvider_ExpressionParameterInvalid();
    internal static string get_QueryableFiltering_NoMemberDeclared();
    internal static string get_Filtering_QueryableCombinator_QueueEmpty();
    internal static string get_Filtering_QueryableCombinator_InvalidCombinator();
    internal static string get_ProjectionVisitor_MemberInvalid();
    internal static string get_ProjectionVisitor_NoMemberFound();
    internal static string get_ProjectionVisitor_InvalidState_NoParentScope();
    internal static string get_ProjectionVisitor_NoConstructorFoundForSet();
    internal static string get_Sorting_InvalidState_ParentIsNoFieldSelector();
    internal static string get_QueryableSorting_MemberInvalid();
    internal static string get_QueryableSorting_ExpressionParameterInvalid();
    internal static string get_QueryableSortProvider_ExpressionParameterInvalid();
    internal static string get_QueryableSorting_NoMemberDeclared();
    internal static string get_SortField_ArgumentInvalid_NoHandlerWasFound();
    internal static string get_ProjectionVisitor_CouldNotUnwrapType();
    internal static string get_GlobalIdInputValueFormatter_SpecifiedValueIsNotAValidId();
    internal static string get_GlobalIdInputValueFormatter_IdsHaveInvalidFormat();
    internal static string get_SelectionContext_NoTypeForAbstractFieldProvided();
    internal static string get_NameHelpers_UppercaseFirstLetter();
    internal static string get_ProjectionObjectFieldDescriptorExtensions_UnwrapMutationPayloadSelect_Failed();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.DateOperationFilterInputType : ComparableOperationFilterInputType`1<DateType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.DateTimeOperationFilterInputType : ComparableOperationFilterInputType`1<DateTimeType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.DecimalOperationFilterInputType : ComparableOperationFilterInputType`1<DecimalType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Data.ErrorHelper : object {
    public static IError CreateNonNullError(IFilterField field, IValueNode value, IFilterVisitorContext`1<T> context, bool isMemberInvalid);
    public static IError SortingVisitor_ListValues(ISortField field, ListValueNode node);
    public static IError CreateNonNullError(ISortField field, IValueNode value, ISortVisitorContext`1<T> context);
    public static ISchemaError ProjectionConvention_UnableToCreateFieldHandler(IProjectionProvider convention, Type fieldHandler);
    public static IError ProjectionProvider_CreateMoreThanOneError(IResolverContext context);
    public static IError ProjectionProvider_CreateMoreThanOneError();
    public static IError ProjectionProvider_CouldNotProjectFiltering(IValueNode node);
    public static IError ProjectionProvider_CouldNotProjectSorting(IValueNode node);
    public static IError ProjectionVisitor_NodeFieldWasNotFound(IPageType pageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.FilterConventionDescriptorExtensions : object {
    [ExtensionAttribute]
public static IFilterConventionDescriptor AddDefaults(IFilterConventionDescriptor descriptor);
    [ExtensionAttribute]
public static IFilterConventionDescriptor AddDefaults(IFilterConventionDescriptor descriptor, bool compatabilityMode);
    [ExtensionAttribute]
public static IFilterConventionDescriptor AddDefaultOperations(IFilterConventionDescriptor descriptor);
    [ExtensionAttribute]
public static IFilterConventionDescriptor BindDefaultTypes(IFilterConventionDescriptor descriptor, bool compatabilityMode);
    [ExtensionAttribute]
private static IFilterConventionDescriptor BindComparableType(IFilterConventionDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.FilterConventionDescriptorQueryableExtensions : object {
    [ExtensionAttribute]
public static IFilterConventionDescriptor UseQueryableProvider(IFilterConventionDescriptor descriptor);
    [ExtensionAttribute]
public static IFilterProviderDescriptor`1<QueryableFilterContext> AddDefaultFieldHandlers(IFilterProviderDescriptor`1<QueryableFilterContext> descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.FilterDescriptorContextExtensions : object {
    [ExtensionAttribute]
public static IFilterConvention GetFilterConvention(ITypeSystemObjectContext context, string scope);
    [ExtensionAttribute]
public static IFilterConvention GetFilterConvention(IDescriptorContext context, string scope);
}
public class HotChocolate.Data.Filters.AndField : FilterOperationField {
    [NullableAttribute("1")]
public FilterInputType DeclaringType { get; }
    [NullableAttribute("1")]
private IFilterInputType HotChocolate.Data.Filters.IAndField.DeclaringType { get; }
    [NullableContextAttribute("1")]
internal AndField(IDescriptorContext context, int index, string scope);
    [NullableContextAttribute("1")]
public FilterInputType get_DeclaringType();
    [NullableContextAttribute("1")]
private sealed virtual override IFilterInputType HotChocolate.Data.Filters.IAndField.get_DeclaringType();
    [NullableContextAttribute("1")]
protected virtual void OnCompleteField(ITypeCompletionContext context, ITypeSystemMember declaringMember, InputFieldDefinition definition);
    [NullableContextAttribute("1")]
private static FilterOperationFieldDefinition CreateDefinition(IDescriptorContext context, string scope);
}
public class HotChocolate.Data.Filters.BooleanOperationFilterInputType : FilterInputType {
    [NullableContextAttribute("1")]
protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
public class HotChocolate.Data.Filters.ComparableOperationFilterInputType`1 : FilterInputType {
    [NullableContextAttribute("1")]
protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
public class HotChocolate.Data.Filters.ConfigureFilterInputType : MulticastDelegate {
    public ConfigureFilterInputType(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(IFilterInputTypeDescriptor descriptor);
    public virtual IAsyncResult BeginInvoke(IFilterInputTypeDescriptor descriptor, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HotChocolate.Data.Filters.ConfigureFilterInputType`1 : MulticastDelegate {
    public ConfigureFilterInputType`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(IFilterInputTypeDescriptor`1<T> descriptor);
    public virtual IAsyncResult BeginInvoke(IFilterInputTypeDescriptor`1<T> descriptor, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Data.Filters.DataTypeExtensionHelper : object {
    public static void MergeFilterInputTypeDefinitions(ITypeCompletionContext context, FilterInputTypeDefinition extensionDefinition, FilterInputTypeDefinition typeDefinition);
    public static void MergeSortEnumTypeDefinitions(ITypeCompletionContext context, SortEnumTypeDefinition extensionDefinition, SortEnumTypeDefinition typeDefinition);
    public static void MergeSortInputTypeDefinitions(ITypeCompletionContext context, SortInputTypeDefinition extensionDefinition, SortInputTypeDefinition typeDefinition);
    private static void MergeFilterFieldDefinitions(ITypeCompletionContext context, IList`1<InputFieldDefinition> extensionFields, IList`1<InputFieldDefinition> typeFields);
    private static void MergeSortEnumValueDefinitions(ITypeCompletionContext context, IList`1<EnumValueDefinition> extensionFields, IList`1<EnumValueDefinition> typeFields);
    private static void MergeSortInputFieldDefinitions(ITypeCompletionContext context, IList`1<InputFieldDefinition> extensionFields, IList`1<InputFieldDefinition> typeFields);
    private static void MergeFilterFields(ITypeCompletionContext context, IList`1<InputFieldDefinition> extensionFields, IList`1<InputFieldDefinition> typeFields, Action`3<IList`1<InputFieldDefinition>, InputFieldDefinition, InputFieldDefinition> action);
    private static void MergeSortEnumValues(ITypeCompletionContext context, IList`1<EnumValueDefinition> extensionFields, IList`1<EnumValueDefinition> typeFields, Action`3<IList`1<EnumValueDefinition>, EnumValueDefinition, EnumValueDefinition> action);
    private static void MergeSortFields(ITypeCompletionContext context, IList`1<InputFieldDefinition> extensionFields, IList`1<InputFieldDefinition> typeFields, Action`3<IList`1<InputFieldDefinition>, InputFieldDefinition, InputFieldDefinition> action);
}
public static class HotChocolate.Data.Filters.DefaultFilterOperations : object {
    public static int Equals;
    public static int NotEquals;
    public static int Contains;
    public static int NotContains;
    public static int In;
    public static int NotIn;
    public static int StartsWith;
    public static int NotStartsWith;
    public static int EndsWith;
    public static int NotEndsWith;
    public static int And;
    public static int Or;
    public static int GreaterThan;
    public static int NotGreaterThan;
    public static int GreaterThanOrEquals;
    public static int NotGreaterThanOrEquals;
    public static int LowerThan;
    public static int NotLowerThan;
    public static int LowerThanOrEquals;
    public static int NotLowerThanOrEquals;
    public static int Some;
    public static int All;
    public static int None;
    public static int Any;
    public static int Like;
    public static int Data;
}
public class HotChocolate.Data.Filters.EnumOperationFilterInputType`1 : FilterInputType {
    [NullableContextAttribute("1")]
protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Data.Filters.Expressions.<QueryableDefaultFieldHandler>F638A6BAC41234CF48F86C7F73A7A83C5926FBFCC0647F708DC189C3033D3F023__LocalExtensions : object {
    [ExtensionAttribute]
public static bool TryGetPreviousRuntimeType(QueryableFilterContext context, IExtendedType& runtimeType);
    [ExtensionAttribute]
public static bool IsNullableValueType(IExtendedType type);
    [ExtensionAttribute]
public static bool IsValueType(IExtendedType type);
    [ExtensionAttribute]
private static IExtendedType GetTypeOrElementType(IExtendedType type);
}
public class HotChocolate.Data.Filters.Expressions.ApplyFiltering : MulticastDelegate {
    public ApplyFiltering(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual object Invoke(IResolverContext context, object input);
    public virtual IAsyncResult BeginInvoke(IResolverContext context, object input, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.ExpressionFilterMetadata : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    public ExpressionFilterMetadata(Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.Data.Filters.Expressions.FilterExpressionBuilder : object {
    private static MethodInfo _startsWith;
    private static MethodInfo _endsWith;
    private static MethodInfo _contains;
    private static MethodInfo _createAndConvert;
    private static MethodInfo _anyMethod;
    private static MethodInfo _anyWithParameter;
    private static MethodInfo _allMethod;
    private static ConstantExpression _null;
    private static FilterExpressionBuilder();
    public static Expression Not(Expression expression);
    public static Expression Equals(Expression property, object value);
    public static Expression NotEquals(Expression property, object value);
    public static Expression In(Expression property, Type genericType, object parsedValue);
    public static Expression GreaterThan(Expression property, object value);
    public static Expression GreaterThanOrEqual(Expression property, object value);
    public static Expression LowerThan(Expression property, object value);
    public static Expression LowerThanOrEqual(Expression property, object value);
    public static Expression StartsWith(Expression property, object value);
    public static Expression EndsWith(Expression property, object value);
    public static Expression Contains(Expression property, object value);
    public static Expression NotNull(Expression expression);
    public static Expression HasValue(Expression expression);
    public static Expression NotNullAndAlso(Expression property, Expression condition);
    public static Expression HasValueAndAlso(Expression property, Expression condition);
    public static Expression Any(Type type, Expression property, Expression body, ParameterExpression[] parameterExpression);
    public static Expression Any(Type type, Expression property, LambdaExpression lambda);
    public static Expression Any(Type type, Expression property);
    public static Expression All(Type type, Expression property, LambdaExpression lambda);
    public static Expression NotContains(Expression property, object value);
    private static Expression CreateAndConvertParameter(object value);
    private static Expression CreateParameter(object value, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableBooleanEqualsHandler : QueryableBooleanOperationHandler {
    protected int Operation { get; }
    public QueryableBooleanEqualsHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableBooleanNotEqualsHandler : QueryableBooleanOperationHandler {
    protected int Operation { get; }
    public QueryableBooleanNotEqualsHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Filters.Expressions.QueryableBooleanOperationHandler : QueryableOperationHandlerBase {
    protected int Operation { get; }
    protected QueryableBooleanOperationHandler(InputParser inputParser);
    protected abstract virtual int get_Operation();
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.Expressions.QueryableCombinator : FilterOperationCombinator`2<QueryableFilterContext, Expression> {
    public virtual bool TryCombineOperations(QueryableFilterContext context, Queue`1<Expression> operations, FilterCombinator combinator, Expression& combined);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableEqualsHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableEqualsHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableGreaterThanHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableGreaterThanOrEqualsHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableGreaterThanOrEqualsHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableInHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableInHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableLowerThanHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableLowerThanOrEqualsHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableLowerThanOrEqualsHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableNotEqualsHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableNotEqualsHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableNotGreaterThanHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableNotGreaterThanOrEqualsHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableNotGreaterThanOrEqualsHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableNotInHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableNotInHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableNotLowerThanHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableComparableNotLowerThanOrEqualsHandler : QueryableComparableOperationHandler {
    protected int Operation { get; }
    public QueryableComparableNotLowerThanOrEqualsHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Filters.Expressions.QueryableComparableOperationHandler : QueryableOperationHandlerBase {
    [CompilerGeneratedAttribute]
private ITypeConverter <TypeConverter>k__BackingField;
    protected int Operation { get; }
    protected ITypeConverter TypeConverter { get; }
    protected QueryableComparableOperationHandler(ITypeConverter typeConverter, InputParser inputParser);
    protected abstract virtual int get_Operation();
    [CompilerGeneratedAttribute]
protected ITypeConverter get_TypeConverter();
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
    protected object ParseValue(IValueNode node, object parsedValue, IType type, QueryableFilterContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.Expressions.QueryableDataOperationHandler : FilterFieldHandler`2<QueryableFilterContext, Expression> {
    protected int Operation { get; }
    protected virtual int get_Operation();
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.Expressions.QueryableDefaultFieldHandler : FilterFieldHandler`2<QueryableFilterContext, Expression> {
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
    public virtual bool TryHandleEnter(QueryableFilterContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public virtual bool TryHandleLeave(QueryableFilterContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableEnumEqualsHandler : QueryableComparableEqualsHandler {
    public QueryableEnumEqualsHandler(ITypeConverter typeConverter, InputParser inputParser);
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableEnumInHandler : QueryableComparableInHandler {
    public QueryableEnumInHandler(ITypeConverter typeConverter, InputParser inputParser);
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableEnumNotEqualsHandler : QueryableComparableNotEqualsHandler {
    public QueryableEnumNotEqualsHandler(ITypeConverter typeConverter, InputParser inputParser);
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableEnumNotInHandler : QueryableComparableNotInHandler {
    public QueryableEnumNotInHandler(ITypeConverter typeConverter, InputParser inputParser);
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.Expressions.QueryableFilterContext : FilterVisitorContext`1<Expression> {
    [CompilerGeneratedAttribute]
private bool <InMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<IExtendedType> <RuntimeTypes>k__BackingField;
    public bool InMemory { get; }
    public Stack`1<IExtendedType> RuntimeTypes { get; }
    public QueryableFilterContext(IFilterInputType initialType, bool inMemory);
    [CompilerGeneratedAttribute]
public bool get_InMemory();
    [CompilerGeneratedAttribute]
public Stack`1<IExtendedType> get_RuntimeTypes();
    public virtual FilterScope`1<Expression> CreateScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.Expressions.QueryableFilterProvider : FilterProvider`1<QueryableFilterContext> {
    public static string ContextArgumentNameKey;
    public static string ContextVisitFilterArgumentKey;
    public static string ContextApplyFilteringKey;
    public static string SkipFilteringKey;
    public static string ContextValueNodeKey;
    [CompilerGeneratedAttribute]
private FilterVisitor`2<QueryableFilterContext, Expression> <Visitor>k__BackingField;
    protected FilterVisitor`2<QueryableFilterContext, Expression> Visitor { get; }
    public QueryableFilterProvider(Action`1<IFilterProviderDescriptor`1<QueryableFilterContext>> configure);
    private static QueryableFilterProvider();
    [CompilerGeneratedAttribute]
protected virtual FilterVisitor`2<QueryableFilterContext, Expression> get_Visitor();
    public virtual FieldMiddleware CreateExecutor(string argumentName);
    public virtual void ConfigureField(string argumentName, IObjectFieldDescriptor descriptor);
    public virtual IFilterMetadata CreateMetaData(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
    [NullableContextAttribute("2")]
protected virtual bool IsInMemoryQuery(object input);
    [NullableContextAttribute("2")]
protected virtual object ApplyToResult(object input, Expression`1<Func`2<TEntityType, bool>> where);
    private ApplyFiltering CreateApplicator(string argumentName);
    [CompilerGeneratedAttribute]
private QueryableFilterContext <ConfigureField>g__VisitFilterArgumentExecutor|11_0(IValueNode valueNode, IFilterInputType filterInput, bool inMemory);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.Expressions.QueryableFilterProviderExtension : FilterProviderExtensions`1<QueryableFilterContext> {
    public QueryableFilterProviderExtension(Action`1<IFilterProviderDescriptor`1<QueryableFilterContext>> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.Filters.Expressions.QueryableFilterVisitorContextExtensions : object {
    [ExtensionAttribute]
public static QueryableScope GetClosure(QueryableFilterContext context);
    [ExtensionAttribute]
public static bool TryCreateLambda(QueryableFilterContext context, LambdaExpression& expression);
    [ExtensionAttribute]
public static bool TryCreateLambda(QueryableFilterContext context, Expression`1& expression);
}
public class HotChocolate.Data.Filters.Expressions.QueryableListAllOperationHandler : QueryableListOperationHandlerBase {
    protected int Operation { get; }
    protected virtual int get_Operation();
    [NullableContextAttribute("1")]
protected virtual Expression HandleListOperation(QueryableFilterContext context, IFilterField field, ObjectFieldNode node, Type closureType, LambdaExpression lambda);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableListAnyOperationHandler : QueryableOperationHandlerBase {
    [CompilerGeneratedAttribute]
private ITypeConverter <TypeConverter>k__BackingField;
    protected ITypeConverter TypeConverter { get; }
    public QueryableListAnyOperationHandler(ITypeConverter typeConverter, InputParser inputParser);
    [CompilerGeneratedAttribute]
protected ITypeConverter get_TypeConverter();
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
public class HotChocolate.Data.Filters.Expressions.QueryableListNoneOperationHandler : QueryableListOperationHandlerBase {
    protected int Operation { get; }
    protected virtual int get_Operation();
    [NullableContextAttribute("1")]
protected virtual Expression HandleListOperation(QueryableFilterContext context, IFilterField field, ObjectFieldNode node, Type closureType, LambdaExpression lambda);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Filters.Expressions.QueryableListOperationHandlerBase : FilterFieldHandler`2<QueryableFilterContext, Expression> {
    protected int Operation { get; }
    protected abstract virtual int get_Operation();
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
    public virtual bool TryHandleEnter(QueryableFilterContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public virtual bool TryHandleLeave(QueryableFilterContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    protected abstract virtual Expression HandleListOperation(QueryableFilterContext context, IFilterField field, ObjectFieldNode node, Type closureType, LambdaExpression lambda);
}
public class HotChocolate.Data.Filters.Expressions.QueryableListSomeOperationHandler : QueryableListOperationHandlerBase {
    protected int Operation { get; }
    protected virtual int get_Operation();
    [NullableContextAttribute("1")]
protected virtual Expression HandleListOperation(QueryableFilterContext context, IFilterField field, ObjectFieldNode node, Type closureType, LambdaExpression lambda);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Filters.Expressions.QueryableOperationHandlerBase : FilterOperationHandler`2<QueryableFilterContext, Expression> {
    [CompilerGeneratedAttribute]
private InputParser <InputParser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    protected InputParser InputParser { get; }
    protected bool CanBeNull { get; protected set; }
    protected QueryableOperationHandlerBase(InputParser inputParser);
    [CompilerGeneratedAttribute]
protected InputParser get_InputParser();
    public virtual bool TryHandleOperation(QueryableFilterContext context, IFilterOperationField field, ObjectFieldNode node, Expression& result);
    [CompilerGeneratedAttribute]
protected bool get_CanBeNull();
    [CompilerGeneratedAttribute]
protected void set_CanBeNull(bool value);
    public abstract virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.Expressions.QueryableScope : FilterScope`1<Expression> {
    [CompilerGeneratedAttribute]
private ParameterExpression <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InMemory>k__BackingField;
    public ParameterExpression Parameter { get; }
    public bool InMemory { get; }
    public QueryableScope(IExtendedType type, string parameterName, bool inMemory);
    [CompilerGeneratedAttribute]
public ParameterExpression get_Parameter();
    [CompilerGeneratedAttribute]
public bool get_InMemory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringContainsHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringContainsHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringEndsWithHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringEndsWithHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringEqualsHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringEqualsHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringInHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringInHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringNotContainsHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringNotContainsHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringNotEndsWithHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringNotEndsWithHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringNotEqualsHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringNotEqualsHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringNotInHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringNotInHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringNotStartsWithHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringNotStartsWithHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Filters.Expressions.QueryableStringOperationHandler : QueryableOperationHandlerBase {
    protected int Operation { get; }
    protected QueryableStringOperationHandler(InputParser inputParser);
    protected abstract virtual int get_Operation();
    public virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.Expressions.QueryableStringStartsWithHandler : QueryableStringOperationHandler {
    protected int Operation { get; }
    public QueryableStringStartsWithHandler(InputParser inputParser);
    protected virtual int get_Operation();
    public virtual Expression HandleOperation(QueryableFilterContext context, IFilterOperationField field, IValueNode value, object parsedValue);
}
public class HotChocolate.Data.Filters.Expressions.VisitFilterArgument : MulticastDelegate {
    public VisitFilterArgument(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual QueryableFilterContext Invoke(IValueNode filterValueNode, IFilterInputType filterInputType, bool inMemory);
    public virtual IAsyncResult BeginInvoke(IValueNode filterValueNode, IFilterInputType filterInputType, bool inMemory, AsyncCallback callback, object object);
    public virtual QueryableFilterContext EndInvoke(IAsyncResult result);
}
public enum HotChocolate.Data.Filters.FilterCombinator : Enum {
    public int value__;
    public static FilterCombinator And;
    public static FilterCombinator Or;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterContext : object {
    private FilterInfo _value;
    private IResolverContext _context;
    public FilterContext(IResolverContext context, IType type, IValueNode valueNode, InputParser inputParser);
    public sealed virtual void Handled(bool isHandled);
    public sealed virtual IReadOnlyList`1<IFilterFieldInfo> GetFields();
    public sealed virtual IReadOnlyList`1<IFilterOperationInfo> GetOperations();
    public sealed virtual IDictionary`2<string, object> ToDictionary();
    [NullableContextAttribute("2")]
private object Serialize(IFilterValueNode value);
    [CompilerGeneratedAttribute]
private void <Serialize>g__SerializeAndAssign|7_0(string fieldName, IFilterValueNode value, <>c__DisplayClass7_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Filters.FilterContextParameterExpressionBuilder : object {
    private static string _getFilterContext;
    private static MethodInfo _getFilterContextMethod;
    public ArgumentKind Kind { get; }
    public bool IsPure { get; }
    public bool IsDefaultHandler { get; }
    private static FilterContextParameterExpressionBuilder();
    public sealed virtual ArgumentKind get_Kind();
    public sealed virtual bool get_IsPure();
    public sealed virtual bool get_IsDefaultHandler();
    public sealed virtual bool CanHandle(ParameterInfo parameter);
    public sealed virtual Expression Build(ParameterExpressionBuilderContext context);
}
[ExtensionAttribute]
public static class HotChocolate.Data.Filters.FilterContextResolverContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IFilterContext GetFilterContext(IResolverContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.FilterConvention : Convention`1<FilterConventionDefinition> {
    private static string _inputPostFix;
    private static string _inputTypePostFix;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IFilterConventionDescriptor> _configure;
    private INamingConventions _namingConventions;
    private IReadOnlyDictionary`2<int, FilterOperation> _operations;
    private IDictionary`2<Type, Type> _bindings;
    private IDictionary`2<TypeReference, List`1<ConfigureFilterInputType>> _configs;
    private string _argumentName;
    private IFilterProvider _provider;
    private ITypeInspector _typeInspector;
    private bool _useAnd;
    private bool _useOr;
    [NullableAttribute("2")]
internal FilterConventionDefinition Definition { get; }
    public FilterConvention(Action`1<IFilterConventionDescriptor> configure);
    [NullableContextAttribute("2")]
internal FilterConventionDefinition get_Definition();
    protected virtual FilterConventionDefinition CreateDefinition(IConventionContext context);
    protected virtual void Configure(IFilterConventionDescriptor descriptor);
    protected internal virtual void Complete(IConventionContext context);
    public virtual string GetTypeName(Type runtimeType);
    public virtual string GetTypeDescription(Type runtimeType);
    public virtual string GetFieldName(MemberInfo member);
    public virtual string GetFieldDescription(MemberInfo member);
    public virtual ExtendedTypeReference GetFieldType(MemberInfo member);
    public sealed virtual string GetOperationName(int operation);
    [NullableContextAttribute("2")]
public sealed virtual string GetOperationDescription(int operationId);
    public sealed virtual string GetArgumentName();
    public sealed virtual void ApplyConfigurations(TypeReference typeReference, IFilterInputTypeDescriptor descriptor);
    public sealed virtual FieldMiddleware CreateExecutor();
    public virtual void ConfigureField(IObjectFieldDescriptor descriptor);
    public sealed virtual bool IsAndAllowed();
    public sealed virtual bool IsOrAllowed();
    public sealed virtual bool TryGetHandler(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition, IFilterFieldHandler& handler);
    public sealed virtual IFilterMetadata CreateMetaData(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
    protected bool TryCreateFilterType(IExtendedType runtimeType, Type& type);
    private static IReadOnlyList`1<IFilterProviderExtension> CollectExtensions(IServiceProvider serviceProvider, FilterConventionDefinition definition);
    private void MergeExtensions(IConventionContext context, IFilterProviderConvention provider, IReadOnlyList`1<IFilterProviderExtension> extensions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterConventionDefinition : object {
    public static string DefaultArgumentName;
    private string _argumentName;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <Provider>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFilterProvider <ProviderInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FilterOperationConventionDefinition> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, Type> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TypeReference, List`1<ConfigureFilterInputType>> <Configurations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IFilterProviderExtension> <ProviderExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ProviderExtensionsTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOr>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAnd>k__BackingField;
    [NullableAttribute("2")]
public string Scope { get; public set; }
    public string ArgumentName { get; public set; }
    [NullableAttribute("2")]
public Type Provider { get; public set; }
    [NullableAttribute("2")]
public IFilterProvider ProviderInstance { get; public set; }
    public List`1<FilterOperationConventionDefinition> Operations { get; }
    public IDictionary`2<Type, Type> Bindings { get; }
    public IDictionary`2<TypeReference, List`1<ConfigureFilterInputType>> Configurations { get; }
    public List`1<IFilterProviderExtension> ProviderExtensions { get; }
    public List`1<Type> ProviderExtensionsTypes { get; }
    public bool UseOr { get; public set; }
    public bool UseAnd { get; public set; }
    private static FilterConventionDefinition();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Scope(string value);
    public string get_ArgumentName();
    public void set_ArgumentName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_Provider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Provider(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IFilterProvider get_ProviderInstance();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProviderInstance(IFilterProvider value);
    [CompilerGeneratedAttribute]
public List`1<FilterOperationConventionDefinition> get_Operations();
    [CompilerGeneratedAttribute]
public IDictionary`2<Type, Type> get_Bindings();
    [CompilerGeneratedAttribute]
public IDictionary`2<TypeReference, List`1<ConfigureFilterInputType>> get_Configurations();
    [CompilerGeneratedAttribute]
public List`1<IFilterProviderExtension> get_ProviderExtensions();
    [CompilerGeneratedAttribute]
public List`1<Type> get_ProviderExtensionsTypes();
    [CompilerGeneratedAttribute]
public bool get_UseOr();
    [CompilerGeneratedAttribute]
public void set_UseOr(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseAnd();
    [CompilerGeneratedAttribute]
public void set_UseAnd(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterConventionDescriptor : object {
    private Dictionary`2<int, FilterOperationConventionDescriptor> _operations;
    [CompilerGeneratedAttribute]
private IDescriptorContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterConventionDefinition <Definition>k__BackingField;
    protected IDescriptorContext Context { get; }
    protected FilterConventionDefinition Definition { get; }
    protected FilterConventionDescriptor(IDescriptorContext context, string scope);
    [CompilerGeneratedAttribute]
protected IDescriptorContext get_Context();
    [CompilerGeneratedAttribute]
protected FilterConventionDefinition get_Definition();
    public FilterConventionDefinition CreateDefinition();
    public sealed virtual IFilterOperationConventionDescriptor Operation(int operationId);
    public sealed virtual IFilterConventionDescriptor BindRuntimeType();
    public sealed virtual IFilterConventionDescriptor BindRuntimeType(Type runtimeType, Type filterType);
    public sealed virtual IFilterConventionDescriptor Configure(ConfigureFilterInputType configure);
    public sealed virtual IFilterConventionDescriptor Configure(ConfigureFilterInputType`1<TRuntimeType> configure);
    protected IFilterConventionDescriptor Configure(TypeReference typeReference, ConfigureFilterInputType configure);
    public sealed virtual IFilterConventionDescriptor Provider();
    public sealed virtual IFilterConventionDescriptor Provider(TProvider provider);
    public sealed virtual IFilterConventionDescriptor Provider(Type provider);
    public sealed virtual IFilterConventionDescriptor ArgumentName(string argumentName);
    public sealed virtual IFilterConventionDescriptor AddProviderExtension();
    public sealed virtual IFilterConventionDescriptor AddProviderExtension(TExtension provider);
    public sealed virtual IFilterConventionDescriptor AllowOr(bool allow);
    public sealed virtual IFilterConventionDescriptor AllowAnd(bool allow);
    public static FilterConventionDescriptor New(IDescriptorContext context, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.FilterConventionExtension : ConventionExtension`1<FilterConventionDefinition> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IFilterConventionDescriptor> _configure;
    public FilterConventionExtension(Action`1<IFilterConventionDescriptor> configure);
    protected virtual FilterConventionDefinition CreateDefinition(IConventionContext context);
    protected internal void Initialize(IConventionContext context);
    protected virtual void Configure(IFilterConventionDescriptor descriptor);
    public virtual void Merge(IConventionContext context, Convention convention);
}
public class HotChocolate.Data.Filters.FilterField : InputField {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IExtendedType <RuntimeType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IFilterFieldHandler <Handler>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFilterMetadata <Metadata>k__BackingField;
    [NullableAttribute("1")]
public FilterInputType DeclaringType { get; }
    [NullableAttribute("1")]
private IFilterInputType HotChocolate.Data.Filters.IFilterField.DeclaringType { get; }
    [NullableAttribute("2")]
public MemberInfo Member { get; }
    [NullableAttribute("2")]
public IExtendedType RuntimeType { get; private set; }
    [NullableAttribute("1")]
public IFilterFieldHandler Handler { get; }
    [NullableAttribute("2")]
public IFilterMetadata Metadata { get; }
    [NullableContextAttribute("1")]
internal FilterField(FilterFieldDefinition definition);
    [NullableContextAttribute("1")]
internal FilterField(FilterFieldDefinition definition, int index);
    [NullableContextAttribute("1")]
public FilterInputType get_DeclaringType();
    [NullableContextAttribute("1")]
private sealed virtual override IFilterInputType HotChocolate.Data.Filters.IFilterField.get_DeclaringType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual MemberInfo get_Member();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IExtendedType get_RuntimeType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_RuntimeType(IExtendedType value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IFilterFieldHandler get_Handler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IFilterMetadata get_Metadata();
    [NullableContextAttribute("1")]
protected virtual void OnCompleteField(ITypeCompletionContext context, ITypeSystemMember declaringMember, InputFieldDefinition definition);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterFieldDefinition : InputFieldDefinition {
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilterFieldHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilterMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    public MemberInfo Member { get; public set; }
    public IFilterFieldHandler Handler { get; public set; }
    public Expression Expression { get; public set; }
    internal IFilterMetadata Metadata { get; internal set; }
    public string Scope { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual MemberInfo get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(MemberInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IFilterFieldHandler get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(IFilterFieldHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
internal IFilterMetadata get_Metadata();
    [CompilerGeneratedAttribute]
internal void set_Metadata(IFilterMetadata value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [NullableContextAttribute("1")]
internal void CopyTo(FilterFieldDefinition target);
    [NullableContextAttribute("1")]
internal void MergeInto(FilterFieldDefinition target);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.FilterFieldDescriptor : ArgumentDescriptorBase`1<FilterFieldDefinition> {
    protected internal FilterFieldDefinition Definition { get; protected set; }
    protected FilterFieldDescriptor(IDescriptorContext context, string scope, string fieldName);
    protected FilterFieldDescriptor(IDescriptorContext context, string scope, MemberInfo member);
    protected FilterFieldDescriptor(IDescriptorContext context, string scope, Expression expression);
    protected internal FilterFieldDescriptor(IDescriptorContext context, string scope);
    protected internal FilterFieldDefinition get_Definition();
    protected void set_Definition(FilterFieldDefinition value);
    internal InputFieldDefinition CreateFieldDefinition();
    protected virtual void OnCreateDefinition(FilterFieldDefinition definition);
    public sealed virtual IFilterFieldDescriptor SyntaxNode(InputValueDefinitionNode inputValueDefinition);
    public sealed virtual IFilterFieldDescriptor Name(string value);
    public sealed virtual IFilterFieldDescriptor Ignore(bool ignore);
    public sealed virtual IFilterFieldDescriptor Description(string value);
    public sealed virtual IFilterFieldDescriptor Type();
    public sealed virtual IFilterFieldDescriptor Type(TInputType inputType);
    public sealed virtual IFilterFieldDescriptor Type(ITypeNode typeNode);
    public sealed virtual IFilterFieldDescriptor Type(Type type);
    public sealed virtual IFilterFieldDescriptor DefaultValue(IValueNode value);
    public sealed virtual IFilterFieldDescriptor DefaultValue(object value);
    public sealed virtual IFilterFieldDescriptor Directive(TDirective directiveInstance);
    public sealed virtual IFilterFieldDescriptor Directive();
    public sealed virtual IFilterFieldDescriptor Directive(string name, ArgumentNode[] arguments);
    public static FilterFieldDescriptor New(IDescriptorContext context, string scope, MemberInfo member);
    public static FilterFieldDescriptor New(IDescriptorContext context, string fieldName, string scope);
    internal static FilterFieldDescriptor New(IDescriptorContext context, string scope, Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
public abstract class HotChocolate.Data.Filters.FilterFieldDescriptorAttribute : DescriptorAttribute {
    protected internal sealed virtual void TryConfigure(IDescriptorContext context, IDescriptor descriptor, ICustomAttributeProvider element);
    public abstract virtual void OnConfigure(IDescriptorContext context, IFilterFieldDescriptor descriptor, MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Filters.FilterFieldHandler`2 : object {
    public virtual bool TryHandleEnter(TContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public virtual bool TryHandleLeave(TContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public abstract virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterFieldInfo : object {
    [CompilerGeneratedAttribute]
private IFilterField <Field>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFilterValueNode <Value>k__BackingField;
    public IFilterField Field { get; }
    [NullableAttribute("2")]
public IFilterValueNode Value { get; }
    public FilterFieldInfo(IFilterField field, IFilterValueNode value);
    [CompilerGeneratedAttribute]
public sealed virtual IFilterField get_Field();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IFilterValueNode get_Value();
}
internal class HotChocolate.Data.Filters.FilterGlobalIdInputValueFormatter : object {
    [NullableAttribute("1")]
private IIdSerializer _idSerializer;
    [NullableContextAttribute("1")]
public FilterGlobalIdInputValueFormatter(IIdSerializer idSerializer);
    [NullableContextAttribute("2")]
public sealed virtual object Format(object runtimeValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterInfo : FilterValueNode {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<IFilterFieldInfo> _fieldInfos;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<IFilterOperationInfo> _operationInfos;
    private InputParser _inputParser;
    public FilterInfo(IType type, IValueNode valueNode, InputParser inputParser);
    public sealed virtual IReadOnlyList`1<IFilterFieldInfo> GetFields();
    public sealed virtual IReadOnlyList`1<IFilterOperationInfo> GetOperations();
    private void Initialize();
    private IFilterValueNode CreateValueInfo(IValueNode valueNode, IType type);
}
public class HotChocolate.Data.Filters.FilterInputType : InputObjectType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IFilterInputTypeDescriptor> _configure;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IExtendedType <EntityType>k__BackingField;
    [NullableAttribute("1")]
public IExtendedType EntityType { get; private set; }
    [NullableContextAttribute("1")]
public FilterInputType(Action`1<IFilterInputTypeDescriptor> configure);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IExtendedType get_EntityType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_EntityType(IExtendedType value);
    [NullableContextAttribute("1")]
protected virtual InputObjectTypeDefinition CreateDefinition(ITypeDiscoveryContext context);
    [NullableContextAttribute("1")]
protected virtual void OnRegisterDependencies(ITypeDiscoveryContext context, InputObjectTypeDefinition definition);
    [NullableContextAttribute("1")]
protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
    [NullableContextAttribute("1")]
protected virtual void OnCompleteType(ITypeCompletionContext context, InputObjectTypeDefinition definition);
    [NullableContextAttribute("1")]
protected virtual FieldCollection`1<InputField> OnCompleteFields(ITypeCompletionContext context, InputObjectTypeDefinition definition);
    [NullableContextAttribute("1")]
protected sealed virtual void Configure(IInputObjectTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterInputType`1 : FilterInputType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IFilterInputTypeDescriptor`1<T>> _configure;
    public FilterInputType`1(Action`1<IFilterInputTypeDescriptor`1<T>> configure);
    protected virtual InputObjectTypeDefinition CreateDefinition(ITypeDiscoveryContext context);
    protected virtual void Configure(IFilterInputTypeDescriptor`1<T> descriptor);
    protected sealed virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterInputTypeDefinition : InputObjectTypeDefinition {
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOr>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNamed>k__BackingField;
    public Type EntityType { get; public set; }
    public string Scope { get; public set; }
    public bool UseOr { get; public set; }
    public bool UseAnd { get; public set; }
    internal bool IsNamed { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseOr();
    [CompilerGeneratedAttribute]
public void set_UseOr(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseAnd();
    [CompilerGeneratedAttribute]
public void set_UseAnd(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsNamed();
    [CompilerGeneratedAttribute]
internal void set_IsNamed(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.FilterInputTypeDescriptor : DescriptorBase`1<FilterInputTypeDefinition> {
    [CompilerGeneratedAttribute]
private IFilterConvention <Convention>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterInputTypeDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private BindableList`1<FilterFieldDescriptor> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private BindableList`1<FilterOperationFieldDescriptor> <Operations>k__BackingField;
    protected IFilterConvention Convention { get; }
    protected internal FilterInputTypeDefinition Definition { get; protected set; }
    protected BindableList`1<FilterFieldDescriptor> Fields { get; }
    protected BindableList`1<FilterOperationFieldDescriptor> Operations { get; }
    private Type HotChocolate.Types.IHasRuntimeType.RuntimeType { get; }
    protected FilterInputTypeDescriptor(IDescriptorContext context, Type entityType, string scope);
    protected FilterInputTypeDescriptor(IDescriptorContext context, string scope);
    protected FilterInputTypeDescriptor(IDescriptorContext context, FilterInputTypeDefinition definition, string scope);
    [CompilerGeneratedAttribute]
protected IFilterConvention get_Convention();
    [CompilerGeneratedAttribute]
protected internal virtual FilterInputTypeDefinition get_Definition();
    [CompilerGeneratedAttribute]
protected virtual void set_Definition(FilterInputTypeDefinition value);
    [CompilerGeneratedAttribute]
protected BindableList`1<FilterFieldDescriptor> get_Fields();
    [CompilerGeneratedAttribute]
protected BindableList`1<FilterOperationFieldDescriptor> get_Operations();
    private sealed virtual override Type HotChocolate.Types.IHasRuntimeType.get_RuntimeType();
    protected virtual void OnCreateDefinition(FilterInputTypeDefinition definition);
    protected virtual void OnCompleteFields(IDictionary`2<string, FilterFieldDefinition> fields, ISet`1<MemberInfo> handledProperties);
    public sealed virtual IFilterInputTypeDescriptor Name(string value);
    public sealed virtual IFilterInputTypeDescriptor Description(string value);
    protected IFilterInputTypeDescriptor BindFields(BindingBehavior bindingBehavior);
    protected IFilterInputTypeDescriptor BindFieldsExplicitly();
    protected IFilterInputTypeDescriptor BindFieldsImplicitly();
    public sealed virtual IFilterOperationFieldDescriptor Operation(int operationId);
    public sealed virtual IFilterFieldDescriptor Field(string name);
    public sealed virtual IFilterInputTypeDescriptor Ignore(int operationId);
    public sealed virtual IFilterInputTypeDescriptor Ignore(string name);
    public sealed virtual IFilterInputTypeDescriptor AllowOr(bool allow);
    public sealed virtual IFilterInputTypeDescriptor AllowAnd(bool allow);
    public sealed virtual IFilterInputTypeDescriptor Directive(TDirective directive);
    public sealed virtual IFilterInputTypeDescriptor Directive();
    public sealed virtual IFilterInputTypeDescriptor Directive(string name, ArgumentNode[] arguments);
    public static FilterInputTypeDescriptor New(IDescriptorContext context, Type entityType, string scope);
    public static FilterInputTypeDescriptor`1<T> New(IDescriptorContext context, Type entityType, string scope);
    public static FilterInputTypeDescriptor FromSchemaType(IDescriptorContext context, Type schemaType, string scope);
    public static FilterInputTypeDescriptor From(IDescriptorContext context, FilterInputTypeDefinition definition, string scope);
    public static FilterInputTypeDescriptor`1<T> From(IDescriptorContext context, FilterInputTypeDefinition definition, string scope);
    public static FilterInputTypeDescriptor`1<T> From(FilterInputTypeDescriptor descriptor, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterInputTypeDescriptor`1 : FilterInputTypeDescriptor {
    protected internal FilterInputTypeDescriptor`1(IDescriptorContext context, Type entityType, string scope);
    protected internal FilterInputTypeDescriptor`1(IDescriptorContext context, string scope);
    protected internal FilterInputTypeDescriptor`1(IDescriptorContext context, FilterInputTypeDefinition definition, string scope);
    protected virtual void OnCompleteFields(IDictionary`2<string, FilterFieldDefinition> fields, ISet`1<MemberInfo> handledProperties);
    public sealed virtual IFilterInputTypeDescriptor`1<T> Name(string value);
    public sealed virtual IFilterInputTypeDescriptor`1<T> Description(string value);
    public sealed virtual IFilterInputTypeDescriptor`1<T> BindFields(BindingBehavior bindingBehavior);
    public sealed virtual IFilterInputTypeDescriptor`1<T> BindFieldsExplicitly();
    public sealed virtual IFilterInputTypeDescriptor`1<T> BindFieldsImplicitly();
    public sealed virtual IFilterFieldDescriptor Field(Expression`1<Func`2<T, TField>> propertyOrMember);
    public sealed virtual IFilterInputTypeDescriptor`1<T> Ignore(int operationId);
    public sealed virtual IFilterInputTypeDescriptor`1<T> Ignore(string name);
    public sealed virtual IFilterInputTypeDescriptor`1<T> Ignore(Expression`1<Func`2<T, object>> propertyOrMember);
    public sealed virtual IFilterInputTypeDescriptor`1<T> AllowOr(bool allow);
    public sealed virtual IFilterInputTypeDescriptor`1<T> AllowAnd(bool allow);
    public sealed virtual IFilterInputTypeDescriptor`1<T> Directive(TDirective directive);
    public sealed virtual IFilterInputTypeDescriptor`1<T> Directive();
    public sealed virtual IFilterInputTypeDescriptor`1<T> Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("12")]
public abstract class HotChocolate.Data.Filters.FilterInputTypeDescriptorAttribute : DescriptorAttribute {
    protected internal sealed virtual void TryConfigure(IDescriptorContext context, IDescriptor descriptor, ICustomAttributeProvider element);
    public abstract virtual void OnConfigure(IDescriptorContext context, IFilterInputTypeDescriptor descriptor, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Filters.FilterInputTypeNameDependencyDescriptor`1 : object {
    private IFilterInputTypeDescriptor`1<T> _descriptor;
    private Func`2<INamedType, string> _createName;
    public FilterInputTypeNameDependencyDescriptor`1(IFilterInputTypeDescriptor`1<T> descriptor, Func`2<INamedType, string> createName);
    public sealed virtual IFilterInputTypeDescriptor`1<T> DependsOn();
    public sealed virtual IFilterInputTypeDescriptor`1<T> DependsOn(Type schemaType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterOperation : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public int Id { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public FilterOperation(int id, string name, string description);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    internal static FilterOperation FromDefinition(FilterOperationConventionDefinition definition);
}
public abstract class HotChocolate.Data.Filters.FilterOperationCombinator : object {
    [NullableContextAttribute("1")]
public abstract virtual bool TryCombineOperations(TContext context, Queue`1<T> operations, FilterCombinator combinator, T& combined);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Filters.FilterOperationCombinator`2 : FilterOperationCombinator {
    public abstract virtual bool TryCombineOperations(TContext context, Queue`1<T> operations, FilterCombinator combinator, T& combined);
    public virtual bool TryCombineOperations(TVisitorContext context, Queue`1<TOperation> operations, FilterCombinator combinator, TOperation& combined);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterOperationConventionDefinition : object {
    private string _name;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public int Id { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    public string get_Name();
    public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Description(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterOperationConventionDescriptor : object {
    [CompilerGeneratedAttribute]
private FilterOperationConventionDefinition <Definition>k__BackingField;
    protected FilterOperationConventionDefinition Definition { get; }
    protected FilterOperationConventionDescriptor(int operationId);
    [CompilerGeneratedAttribute]
protected FilterOperationConventionDefinition get_Definition();
    public FilterOperationConventionDefinition CreateDefinition();
    public sealed virtual IFilterOperationConventionDescriptor Name(string name);
    public sealed virtual IFilterOperationConventionDescriptor Description(string description);
    public static FilterOperationConventionDescriptor New(int operationId);
}
public class HotChocolate.Data.Filters.FilterOperationField : FilterField {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    [NullableContextAttribute("1")]
internal FilterOperationField(FilterOperationFieldDefinition definition);
    [NullableContextAttribute("1")]
internal FilterOperationField(FilterOperationFieldDefinition definition, int index);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterOperationFieldDefinition : FilterFieldDefinition {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    internal void CopyTo(FilterOperationFieldDefinition target);
    internal void MergeInto(FilterOperationFieldDefinition target);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.FilterOperationFieldDescriptor : ArgumentDescriptorBase`1<FilterOperationFieldDefinition> {
    protected internal FilterOperationFieldDefinition Definition { get; }
    protected FilterOperationFieldDescriptor(IDescriptorContext context, int operationId, string scope);
    protected internal FilterOperationFieldDefinition get_Definition();
    protected virtual void OnCreateDefinition(FilterOperationFieldDefinition definition);
    public sealed virtual IFilterOperationFieldDescriptor SyntaxNode(InputValueDefinitionNode inputValueDefinition);
    public sealed virtual IFilterOperationFieldDescriptor Name(string value);
    public sealed virtual IFilterOperationFieldDescriptor Ignore(bool ignore);
    public sealed virtual IFilterOperationFieldDescriptor Description(string value);
    public sealed virtual IFilterOperationFieldDescriptor Type();
    public sealed virtual IFilterOperationFieldDescriptor Type(TInputType inputType);
    public sealed virtual IFilterOperationFieldDescriptor Type(ITypeNode typeNode);
    public sealed virtual IFilterOperationFieldDescriptor Type(Type type);
    public sealed virtual IFilterOperationFieldDescriptor Operation(int operation);
    public sealed virtual IFilterOperationFieldDescriptor DefaultValue(IValueNode value);
    public sealed virtual IFilterOperationFieldDescriptor DefaultValue(object value);
    public sealed virtual IFilterOperationFieldDescriptor Directive(TDirective directiveInstance);
    public sealed virtual IFilterOperationFieldDescriptor Directive();
    public sealed virtual IFilterOperationFieldDescriptor Directive(string name, ArgumentNode[] arguments);
    public InputFieldDefinition CreateFieldDefinition();
    public static FilterOperationFieldDescriptor New(IDescriptorContext context, int operation, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Filters.FilterOperationHandler`2 : FilterFieldHandler`2<TContext, T> {
    public virtual bool TryHandleEnter(TContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public virtual bool TryHandleOperation(TContext context, IFilterOperationField field, ObjectFieldNode node, T& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterOperationInfo : object {
    [CompilerGeneratedAttribute]
private IFilterOperationField <Field>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFilterValueNode <Value>k__BackingField;
    public IFilterOperationField Field { get; }
    [NullableAttribute("2")]
public IFilterValueNode Value { get; }
    public FilterOperationInfo(IFilterOperationField field, IFilterValueNode value);
    [CompilerGeneratedAttribute]
public sealed virtual IFilterOperationField get_Field();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IFilterValueNode get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Filters.FilterProvider`1 : Convention`1<FilterProviderDefinition> {
    private List`1<IFilterFieldHandler`1<TContext>> _fieldHandlers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IFilterProviderDescriptor`1<TContext>> _configure;
    [NullableAttribute("2")]
private IFilterConvention _filterConvention;
    [NullableAttribute("2")]
internal FilterProviderDefinition Definition { get; }
    public IReadOnlyCollection`1<IFilterFieldHandler> FieldHandlers { get; }
    public FilterProvider`1(Action`1<IFilterProviderDescriptor`1<TContext>> configure);
    [NullableContextAttribute("2")]
internal FilterProviderDefinition get_Definition();
    public sealed virtual IReadOnlyCollection`1<IFilterFieldHandler> get_FieldHandlers();
    protected virtual FilterProviderDefinition CreateDefinition(IConventionContext context);
    private sealed virtual override void HotChocolate.Data.Filters.IFilterProviderConvention.Initialize(IConventionContext context, IFilterConvention convention);
    private sealed virtual override void HotChocolate.Data.Filters.IFilterProviderConvention.Complete(IConventionContext context);
    protected internal virtual void Complete(IConventionContext context);
    protected virtual void Configure(IFilterProviderDescriptor`1<TContext> descriptor);
    public abstract virtual FieldMiddleware CreateExecutor(string argumentName);
    public virtual void ConfigureField(string argumentName, IObjectFieldDescriptor descriptor);
    public virtual IFilterMetadata CreateMetaData(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
public class HotChocolate.Data.Filters.FilterProviderDefinition : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<Type, IFilterFieldHandler>> <Handlers>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ValueTuple`2<Type, IFilterFieldHandler>> Handlers { get; }
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<Type, IFilterFieldHandler>> get_Handlers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterProviderDescriptor`1 : object {
    [CompilerGeneratedAttribute]
private FilterProviderDefinition <Definition>k__BackingField;
    protected FilterProviderDefinition Definition { get; }
    [CompilerGeneratedAttribute]
protected FilterProviderDefinition get_Definition();
    public FilterProviderDefinition CreateDefinition();
    public sealed virtual IFilterProviderDescriptor`1<TContext> AddFieldHandler();
    public sealed virtual IFilterProviderDescriptor`1<TContext> AddFieldHandler(TFieldHandler fieldHandler);
    public static FilterProviderDescriptor`1<TContext> New();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Filters.FilterProviderExtensions`1 : ConventionExtension`1<FilterProviderDefinition> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IFilterProviderDescriptor`1<TContext>> _configure;
    public FilterProviderExtensions`1(Action`1<IFilterProviderDescriptor`1<TContext>> configure);
    private sealed virtual override void HotChocolate.Data.Filters.IFilterProviderConvention.Initialize(IConventionContext context, IFilterConvention convention);
    private sealed virtual override void HotChocolate.Data.Filters.IFilterProviderConvention.Complete(IConventionContext context);
    protected virtual FilterProviderDefinition CreateDefinition(IConventionContext context);
    protected virtual void Configure(IFilterProviderDescriptor`1<TContext> descriptor);
    public virtual void Merge(IConventionContext context, Convention convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterScope`1 : object {
    [CompilerGeneratedAttribute]
private Stack`1<Queue`1<T>> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<T> <Instance>k__BackingField;
    public Stack`1<Queue`1<T>> Level { get; }
    public Stack`1<T> Instance { get; }
    [CompilerGeneratedAttribute]
public Stack`1<Queue`1<T>> get_Level();
    [CompilerGeneratedAttribute]
public Stack`1<T> get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterTypeInterceptor : TypeInterceptor {
    private Dictionary`2<string, IFilterConvention> _conventions;
    public virtual void OnBeforeRegisterDependencies(ITypeDiscoveryContext discoveryContext, DefinitionBase definition);
    public virtual void OnBeforeCompleteName(ITypeCompletionContext completionContext, DefinitionBase definition);
    public virtual void OnAfterCompleteName(ITypeCompletionContext completionContext, DefinitionBase definition);
    private IFilterConvention GetConvention(IDescriptorContext context, string scope);
    private static void ApplyCorrectScope(InputObjectTypeDefinition definition, ITypeDiscoveryContext discoveryContext);
}
[ExtensionAttribute]
public static class HotChocolate.Data.Filters.FilterTypeNameExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IFilterInputTypeNameDependencyDescriptor`1<T> Name(IFilterInputTypeDescriptor`1<T> descriptor, Func`2<INamedType, string> createName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Filters.FilterValue : FilterValueNode {
    private object _parsedObject;
    [NullableAttribute("1")]
private InputParser _inputParser;
    public object Value { get; }
    [NullableContextAttribute("1")]
public FilterValue(IType type, IValueNode valueNode, InputParser inputParser);
    public sealed virtual object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.FilterValueCollection : List`1<IFilterValueNode> {
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <ValueNode>k__BackingField;
    public IType Type { get; }
    public IValueNode ValueNode { get; }
    public FilterValueCollection(IType type, IValueNode valueNode, IEnumerable`1<IFilterValueNode> collection);
    [CompilerGeneratedAttribute]
public sealed virtual IType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual IValueNode get_ValueNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Filters.FilterValueNode : object {
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <ValueNode>k__BackingField;
    public IType Type { get; }
    public IValueNode ValueNode { get; }
    protected FilterValueNode(IType type, IValueNode valueNode);
    [CompilerGeneratedAttribute]
public sealed virtual IType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual IValueNode get_ValueNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Filters.FilterVisitor`2 : FilterVisitorBase`2<TContext, T> {
    private FilterOperationCombinator`2<TContext, T> _combinator;
    public FilterVisitor`2(FilterOperationCombinator`2<TContext, T> combinator);
    protected virtual ISyntaxVisitorAction OnFieldEnter(TContext context, IFilterField field, ObjectFieldNode node);
    protected virtual ISyntaxVisitorAction OnFieldLeave(TContext context, IFilterField field, ObjectFieldNode node);
    protected virtual bool TryCombineOperations(TContext context, Queue`1<T> operations, FilterCombinator combinator, T& combined);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Filters.FilterVisitorBase`1 : SyntaxWalker`1<TContext> {
    protected virtual ISyntaxVisitorAction Leave(ObjectFieldNode node, TContext context);
    protected virtual ISyntaxVisitorAction Enter(ObjectFieldNode node, TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Filters.FilterVisitorBase`2 : FilterVisitorBase`1<TContext> {
    protected abstract virtual ISyntaxVisitorAction OnFieldEnter(TContext context, IFilterField field, ObjectFieldNode node);
    protected abstract virtual ISyntaxVisitorAction OnFieldLeave(TContext context, IFilterField field, ObjectFieldNode node);
    protected abstract virtual bool TryCombineOperations(TContext context, Queue`1<T> operations, FilterCombinator combinator, T& combined);
    protected virtual ISyntaxVisitorAction Leave(ObjectValueNode node, TContext context);
    protected virtual ISyntaxVisitorAction Enter(ObjectValueNode node, TContext context);
    protected virtual ISyntaxVisitorAction Enter(ObjectFieldNode node, TContext context);
    protected virtual ISyntaxVisitorAction Leave(ObjectFieldNode node, TContext context);
    protected virtual ISyntaxVisitorAction Enter(ListValueNode node, TContext context);
    protected virtual ISyntaxVisitorAction Leave(ListValueNode node, TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Filters.FilterVisitorContext`1 : object {
    [CompilerGeneratedAttribute]
private Stack`1<FilterScope`1<T>> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<IType> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<IInputField> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IError> <Errors>k__BackingField;
    public Stack`1<FilterScope`1<T>> Scopes { get; }
    public Stack`1<IType> Types { get; }
    public Stack`1<IInputField> Operations { get; }
    public IList`1<IError> Errors { get; }
    protected FilterVisitorContext`1(IFilterInputType initialType, FilterScope`1<T> filterScope);
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<FilterScope`1<T>> get_Scopes();
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<IType> get_Types();
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<IInputField> get_Operations();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IError> get_Errors();
    public virtual FilterScope`1<T> CreateScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.Filters.FilterVisitorContextExtensions : object {
    [ExtensionAttribute]
public static void ReportError(IFilterVisitorContext`1<T> context, IError error);
    [ExtensionAttribute]
public static FilterScope`1<T> AddScope(IFilterVisitorContext`1<T> context);
    [ExtensionAttribute]
public static FilterScope`1<T> GetScope(IFilterVisitorContext`1<T> context);
    [ExtensionAttribute]
public static T GetInstance(IFilterVisitorContext`1<T> context);
    [ExtensionAttribute]
public static Queue`1<T> GetLevel(IFilterVisitorContext`1<T> context);
    [ExtensionAttribute]
public static void PushInstance(IFilterVisitorContext`1<T> context, T nextExpression);
    [ExtensionAttribute]
public static void PushLevel(IFilterVisitorContext`1<T> context, Queue`1<T> nextLevel);
    [ExtensionAttribute]
public static T PopInstance(IFilterVisitorContext`1<T> context);
    [ExtensionAttribute]
public static Queue`1<T> PopLevel(IFilterVisitorContext`1<T> context);
    [ExtensionAttribute]
public static FilterScope`1<T> PopScope(IFilterVisitorContext`1<T> context);
}
public interface HotChocolate.Data.Filters.IAndField {
    [NullableAttribute("1")]
public IFilterInputType DeclaringType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IFilterInputType get_DeclaringType();
}
public interface HotChocolate.Data.Filters.IComparableOperationFilterInputType {
}
public class HotChocolate.Data.Filters.IdOperationFilterInputType : FilterInputType {
    [NullableContextAttribute("1")]
public IdOperationFilterInputType(Action`1<IFilterInputTypeDescriptor> configure);
    [NullableContextAttribute("1")]
protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
public interface HotChocolate.Data.Filters.IEnumOperationFilterInputType {
}
public interface HotChocolate.Data.Filters.IFilterContext {
    public abstract virtual void Handled(bool isHandled);
    public abstract virtual IDictionary`2<string, object> ToDictionary();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterConvention {
    public abstract virtual string GetTypeName(Type runtimeType);
    public abstract virtual string GetTypeDescription(Type runtimeType);
    public abstract virtual string GetFieldName(MemberInfo member);
    public abstract virtual string GetFieldDescription(MemberInfo member);
    public abstract virtual ExtendedTypeReference GetFieldType(MemberInfo member);
    public abstract virtual string GetOperationName(int operationId);
    [NullableContextAttribute("2")]
public abstract virtual string GetOperationDescription(int operationId);
    public abstract virtual string GetArgumentName();
    public abstract virtual void ApplyConfigurations(TypeReference typeReference, IFilterInputTypeDescriptor descriptor);
    public abstract virtual bool TryGetHandler(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition, IFilterFieldHandler& handler);
    public abstract virtual IFilterMetadata CreateMetaData(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
    public abstract virtual FieldMiddleware CreateExecutor();
    public abstract virtual void ConfigureField(IObjectFieldDescriptor fieldDescriptor);
    public abstract virtual bool IsAndAllowed();
    public abstract virtual bool IsOrAllowed();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterConventionDescriptor {
    public abstract virtual IFilterOperationConventionDescriptor Operation(int operationId);
    public abstract virtual IFilterConventionDescriptor BindRuntimeType();
    public abstract virtual IFilterConventionDescriptor BindRuntimeType(Type runtimeType, Type filterType);
    public abstract virtual IFilterConventionDescriptor Configure(ConfigureFilterInputType configure);
    public abstract virtual IFilterConventionDescriptor Configure(ConfigureFilterInputType`1<TRuntimeType> configure);
    public abstract virtual IFilterConventionDescriptor Provider();
    public abstract virtual IFilterConventionDescriptor Provider(TProvider provider);
    public abstract virtual IFilterConventionDescriptor Provider(Type provider);
    public abstract virtual IFilterConventionDescriptor ArgumentName(string argumentName);
    public abstract virtual IFilterConventionDescriptor AddProviderExtension();
    public abstract virtual IFilterConventionDescriptor AddProviderExtension(TExtension provider);
    public abstract virtual IFilterConventionDescriptor AllowOr(bool allow);
    public abstract virtual IFilterConventionDescriptor AllowAnd(bool allow);
}
public interface HotChocolate.Data.Filters.IFilterField {
    [NullableAttribute("1")]
public IFilterInputType DeclaringType { get; }
    [NullableAttribute("2")]
public MemberInfo Member { get; }
    [NullableAttribute("2")]
public IExtendedType RuntimeType { get; }
    [NullableAttribute("1")]
public IFilterFieldHandler Handler { get; }
    [NullableAttribute("2")]
public IFilterMetadata Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IFilterInputType get_DeclaringType();
    [NullableContextAttribute("2")]
public abstract virtual MemberInfo get_Member();
    [NullableContextAttribute("2")]
public abstract virtual IExtendedType get_RuntimeType();
    [NullableContextAttribute("1")]
public abstract virtual IFilterFieldHandler get_Handler();
    [NullableContextAttribute("2")]
public abstract virtual IFilterMetadata get_Metadata();
}
[NullableContextAttribute("2")]
public interface HotChocolate.Data.Filters.IFilterFieldDefinition {
    public MemberInfo Member { get; }
    public IFilterFieldHandler Handler { get; }
    public Expression Expression { get; }
    public abstract virtual MemberInfo get_Member();
    public abstract virtual IFilterFieldHandler get_Handler();
    public abstract virtual Expression get_Expression();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterFieldDescriptor {
    public abstract virtual IFilterFieldDescriptor SyntaxNode(InputValueDefinitionNode inputValueDefinitionNode);
    public abstract virtual IFilterFieldDescriptor Name(string value);
    public abstract virtual IFilterFieldDescriptor Description(string value);
    public abstract virtual IFilterFieldDescriptor Type();
    public abstract virtual IFilterFieldDescriptor Type(TInputType inputType);
    public abstract virtual IFilterFieldDescriptor Type(ITypeNode typeNode);
    public abstract virtual IFilterFieldDescriptor Type(Type type);
    public abstract virtual IFilterFieldDescriptor Ignore(bool ignore);
    public abstract virtual IFilterFieldDescriptor DefaultValue(IValueNode value);
    public abstract virtual IFilterFieldDescriptor DefaultValue(object value);
    public abstract virtual IFilterFieldDescriptor Directive(T directiveInstance);
    public abstract virtual IFilterFieldDescriptor Directive();
    public abstract virtual IFilterFieldDescriptor Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterFieldHandler {
    public abstract virtual bool CanHandle(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterFieldHandler`1 {
    public abstract virtual bool TryHandleEnter(TContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public abstract virtual bool TryHandleLeave(TContext context, IFilterField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
}
public interface HotChocolate.Data.Filters.IFilterFieldHandler`2 {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterFieldInfo {
    public IFilterField Field { get; }
    [NullableAttribute("2")]
public IFilterValueNode Value { get; }
    public abstract virtual IFilterField get_Field();
    [NullableContextAttribute("2")]
public abstract virtual IFilterValueNode get_Value();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterInfo {
    public abstract virtual IReadOnlyList`1<IFilterFieldInfo> GetFields();
    public abstract virtual IReadOnlyList`1<IFilterOperationInfo> GetOperations();
}
public interface HotChocolate.Data.Filters.IFilterInputType {
    [NullableAttribute("1")]
public IExtendedType EntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IExtendedType get_EntityType();
}
[NullableContextAttribute("2")]
public interface HotChocolate.Data.Filters.IFilterInputTypeDefinition {
    public Type EntityType { get; }
    public string Scope { get; }
    public bool UseOr { get; }
    public bool UseAnd { get; }
    public abstract virtual Type get_EntityType();
    public abstract virtual string get_Scope();
    public abstract virtual bool get_UseOr();
    public abstract virtual bool get_UseAnd();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterInputTypeDescriptor {
    public abstract virtual IFilterInputTypeDescriptor Name(string value);
    public abstract virtual IFilterInputTypeDescriptor Description(string value);
    public abstract virtual IFilterOperationFieldDescriptor Operation(int operationId);
    public abstract virtual IFilterFieldDescriptor Field(string name);
    public abstract virtual IFilterInputTypeDescriptor Ignore(int operationId);
    public abstract virtual IFilterInputTypeDescriptor Ignore(string name);
    public abstract virtual IFilterInputTypeDescriptor AllowOr(bool allow);
    public abstract virtual IFilterInputTypeDescriptor AllowAnd(bool allow);
    public abstract virtual IFilterInputTypeDescriptor Directive(TDirective directive);
    public abstract virtual IFilterInputTypeDescriptor Directive();
    public abstract virtual IFilterInputTypeDescriptor Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterInputTypeDescriptor`1 {
    public abstract virtual IFilterInputTypeDescriptor`1<T> Name(string value);
    public abstract virtual IFilterInputTypeDescriptor`1<T> Description(string value);
    public abstract virtual IFilterInputTypeDescriptor`1<T> BindFields(BindingBehavior bindingBehavior);
    public abstract virtual IFilterInputTypeDescriptor`1<T> BindFieldsExplicitly();
    public abstract virtual IFilterInputTypeDescriptor`1<T> BindFieldsImplicitly();
    public abstract virtual IFilterFieldDescriptor Field(Expression`1<Func`2<T, TField>> propertyOrMember);
    public abstract virtual IFilterInputTypeDescriptor`1<T> Ignore(int operationId);
    public abstract virtual IFilterInputTypeDescriptor`1<T> Ignore(string name);
    public abstract virtual IFilterInputTypeDescriptor`1<T> Ignore(Expression`1<Func`2<T, object>> propertyOrMember);
    public abstract virtual IFilterInputTypeDescriptor`1<T> AllowOr(bool allow);
    public abstract virtual IFilterInputTypeDescriptor`1<T> AllowAnd(bool allow);
    public abstract virtual IFilterInputTypeDescriptor`1<T> Directive(TDirective directive);
    public abstract virtual IFilterInputTypeDescriptor`1<T> Directive();
    public abstract virtual IFilterInputTypeDescriptor`1<T> Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterInputTypeNameDependencyDescriptor`1 {
    public abstract virtual IFilterInputTypeDescriptor`1<T> DependsOn();
    public abstract virtual IFilterInputTypeDescriptor`1<T> DependsOn(Type schemaType);
}
public interface HotChocolate.Data.Filters.IFilterMetadata {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterOperationConventionDescriptor {
    public abstract virtual IFilterOperationConventionDescriptor Name(string name);
    public abstract virtual IFilterOperationConventionDescriptor Description(string description);
}
public interface HotChocolate.Data.Filters.IFilterOperationField {
    public int Id { get; }
    public abstract virtual int get_Id();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterOperationFieldDescriptor {
    public abstract virtual IFilterOperationFieldDescriptor SyntaxNode(InputValueDefinitionNode inputValueDefinitionNode);
    public abstract virtual IFilterOperationFieldDescriptor Name(string value);
    public abstract virtual IFilterOperationFieldDescriptor Description(string value);
    public abstract virtual IFilterOperationFieldDescriptor Type();
    public abstract virtual IFilterOperationFieldDescriptor Type(TInputType inputType);
    public abstract virtual IFilterOperationFieldDescriptor Type(ITypeNode typeNode);
    public abstract virtual IFilterOperationFieldDescriptor Type(Type type);
    public abstract virtual IFilterOperationFieldDescriptor Ignore(bool ignore);
    public abstract virtual IFilterOperationFieldDescriptor DefaultValue(IValueNode value);
    public abstract virtual IFilterOperationFieldDescriptor DefaultValue(object value);
    public abstract virtual IFilterOperationFieldDescriptor Operation(int operation);
    public abstract virtual IFilterOperationFieldDescriptor Directive(T directiveInstance);
    public abstract virtual IFilterOperationFieldDescriptor Directive();
    public abstract virtual IFilterOperationFieldDescriptor Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterOperationInfo {
    public IFilterOperationField Field { get; }
    [NullableAttribute("2")]
public IFilterValueNode Value { get; }
    public abstract virtual IFilterOperationField get_Field();
    [NullableContextAttribute("2")]
public abstract virtual IFilterValueNode get_Value();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterProvider {
    public IReadOnlyCollection`1<IFilterFieldHandler> FieldHandlers { get; }
    public abstract virtual IReadOnlyCollection`1<IFilterFieldHandler> get_FieldHandlers();
    public abstract virtual FieldMiddleware CreateExecutor(string argumentName);
    public abstract virtual void ConfigureField(string argumentName, IObjectFieldDescriptor descriptor);
    public abstract virtual IFilterMetadata CreateMetaData(ITypeCompletionContext context, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
internal interface HotChocolate.Data.Filters.IFilterProviderConvention {
    internal abstract virtual void Initialize(IConventionContext context, IFilterConvention convention);
    internal abstract virtual void Complete(IConventionContext context);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterProviderDescriptor`1 {
    public abstract virtual IFilterProviderDescriptor`1<TContext> AddFieldHandler();
    public abstract virtual IFilterProviderDescriptor`1<TContext> AddFieldHandler(TFieldHandler fieldHandler);
}
public interface HotChocolate.Data.Filters.IFilterProviderExtension {
}
[NullableContextAttribute("2")]
public interface HotChocolate.Data.Filters.IFilterValue {
    public object Value { get; }
    public abstract virtual object get_Value();
}
public interface HotChocolate.Data.Filters.IFilterValueCollection {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterValueNode {
    public IType Type { get; }
    public IValueNode ValueNode { get; }
    public abstract virtual IType get_Type();
    public abstract virtual IValueNode get_ValueNode();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterVisitorContext {
    public Stack`1<IType> Types { get; }
    public Stack`1<IInputField> Operations { get; }
    public IList`1<IError> Errors { get; }
    public abstract virtual Stack`1<IType> get_Types();
    public abstract virtual Stack`1<IInputField> get_Operations();
    public abstract virtual IList`1<IError> get_Errors();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Filters.IFilterVisitorContext`1 {
    public Stack`1<FilterScope`1<T>> Scopes { get; }
    public abstract virtual Stack`1<FilterScope`1<T>> get_Scopes();
    public abstract virtual FilterScope`1<T> CreateScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Filters.IgnoreFilterFieldDescriptor : FilterFieldDescriptor {
    protected IgnoreFilterFieldDescriptor(IDescriptorContext context, string scope, MemberInfo member);
    public static FilterFieldDescriptor New(IDescriptorContext context, string scope, MemberInfo member);
}
public interface HotChocolate.Data.Filters.IListFilterInputType {
}
public static class HotChocolate.Data.Filters.Internal.ValueNullabilityHelpers : object {
    [NullableContextAttribute("1")]
public static bool IsListValueValid(IType type, IExtendedType runtimeType, IValueNode node);
}
public interface HotChocolate.Data.Filters.IOrField {
    [NullableAttribute("1")]
public IFilterInputType DeclaringType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IFilterInputType get_DeclaringType();
}
public class HotChocolate.Data.Filters.ListFilterInputType`1 : FilterInputType {
    [NullableContextAttribute("1")]
protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
public class HotChocolate.Data.Filters.OrField : FilterOperationField {
    [NullableAttribute("1")]
public FilterInputType DeclaringType { get; }
    [NullableAttribute("1")]
private IFilterInputType HotChocolate.Data.Filters.IOrField.DeclaringType { get; }
    [NullableContextAttribute("1")]
internal OrField(IDescriptorContext context, int index, string scope);
    [NullableContextAttribute("1")]
public FilterInputType get_DeclaringType();
    [NullableContextAttribute("1")]
private sealed virtual override IFilterInputType HotChocolate.Data.Filters.IOrField.get_DeclaringType();
    [NullableContextAttribute("1")]
protected virtual void OnCompleteField(ITypeCompletionContext context, ITypeSystemMember declaringMember, InputFieldDefinition definition);
    [NullableContextAttribute("1")]
private static FilterOperationFieldDefinition CreateDefinition(IDescriptorContext context, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Data.Filters.RelayIdFilterFieldExtensions : object {
    [NullableAttribute("2")]
private static IdSerializer _idSerializer;
    [ExtensionAttribute]
internal static IFilterOperationFieldDescriptor ID(IFilterOperationFieldDescriptor descriptor);
    private static IInputValueFormatter CreateSerializer(ITypeCompletionContext completionContext);
}
public class HotChocolate.Data.Filters.StringOperationFilterInputType : FilterInputType {
    [NullableContextAttribute("1")]
protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Filters.TypeReferenceComparer : object {
    public static IEqualityComparer`1<TypeReference> Default;
    private static TypeReferenceComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TypeReference x, TypeReference y);
    public sealed virtual int GetHashCode(TypeReference obj);
    private static bool CompareSchemaAndExtendedTypeRef(SchemaTypeReference schemaTypeReference, ExtendedTypeReference extendedTypeReference);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.FloatOperationFilterInputType : ComparableOperationFilterInputType`1<FloatType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.IntOperationFilterInputType : ComparableOperationFilterInputType`1<IntType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[AttributeUsageAttribute("192")]
public class HotChocolate.Data.IsProjectedAttribute : ObjectFieldDescriptorAttribute {
    private bool _isProjected;
    public IsProjectedAttribute(bool isProjected);
    [NullableContextAttribute("1")]
protected virtual void OnConfigure(IDescriptorContext context, IObjectFieldDescriptor descriptor, MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.LongOperationFilterInputType : ComparableOperationFilterInputType`1<LongType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[ExtensionAttribute]
public static class HotChocolate.Data.ProjectionConventionDescriptorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IProjectionConventionDescriptor AddDefaults(IProjectionConventionDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.ProjectionDescriptorContextExtensions : object {
    [ExtensionAttribute]
public static IProjectionConvention GetProjectionConvention(ITypeSystemObjectContext context, string scope);
    [ExtensionAttribute]
public static IProjectionConvention GetProjectionConvention(IDescriptorContext context, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.ProjectionProviderDescriptorExtensions : object {
    [ExtensionAttribute]
public static IProjectionProviderDescriptor AddDefaults(IProjectionProviderDescriptor descriptor);
    [ExtensionAttribute]
public static IProjectionProviderDescriptor RegisterQueryableHandler(IProjectionProviderDescriptor descriptor);
}
public class HotChocolate.Data.Projections.BreakSelectionVisitorAction : object {
    public SelectionVisitorActionKind Kind { get; }
    public sealed virtual SelectionVisitorActionKind get_Kind();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.Context.ISelectedField {
    public ISelection Selection { get; }
    public IObjectField Field { get; }
    public IType Type { get; }
    public bool IsAbstractType { get; }
    public abstract virtual ISelection get_Selection();
    public abstract virtual IObjectField get_Field();
    public abstract virtual IType get_Type();
    public abstract virtual bool get_IsAbstractType();
    public abstract virtual IReadOnlyList`1<ISelectedField> GetFields(ObjectType type, bool allowInternals);
    public abstract virtual bool IsSelected(string fieldName, ObjectType type, bool allowInternals);
}
[ExtensionAttribute]
public static class HotChocolate.Data.Projections.Context.ResolverContextSelectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ISelectedField GetSelectedField(IResolverContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Context.SelectedField : object {
    private IResolverContext _resolverContext;
    private ISelection _selection;
    public ISelection Selection { get; }
    public IObjectField Field { get; }
    public IType Type { get; }
    public bool IsAbstractType { get; }
    internal SelectedField(IResolverContext resolverContext, ISelection selection);
    public sealed virtual ISelection get_Selection();
    public sealed virtual IObjectField get_Field();
    public sealed virtual IType get_Type();
    public sealed virtual bool get_IsAbstractType();
    public sealed virtual IReadOnlyList`1<ISelectedField> GetFields(ObjectType type, bool allowInternals);
    public sealed virtual bool IsSelected(string fieldName, ObjectType type, bool allowInternals);
    [NullableContextAttribute("2")]
private IReadOnlyList`1<ISelection> GetFieldSelections(ObjectType type, bool allowInternals);
}
public class HotChocolate.Data.Projections.ContinueSelectionVisitorAction : object {
    public SelectionVisitorActionKind Kind { get; }
    public sealed virtual SelectionVisitorActionKind get_Kind();
}
public class HotChocolate.Data.Projections.Expressions.ApplyProjection : MulticastDelegate {
    public ApplyProjection(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual object Invoke(IResolverContext context, object input);
    public virtual IAsyncResult BeginInvoke(IResolverContext context, object input, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Data.Projections.Expressions.Handlers.ExpressionExtensions : object {
    [ExtensionAttribute]
public static Expression Append(Expression expression, MemberInfo memberInfo);
    [ExtensionAttribute]
public static Type GetReturnType(MemberInfo memberInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldHandler`1 : object {
    public virtual IProjectionFieldHandler Wrap(IProjectionFieldInterceptor interceptor);
    public abstract virtual bool CanHandle(ISelection selection);
    public virtual T OnBeforeEnter(T context, ISelection selection);
    public abstract virtual bool TryHandleEnter(T context, ISelection selection, ISelectionVisitorAction& action);
    public virtual T OnAfterEnter(T context, ISelection selection, ISelectionVisitorAction action);
    public virtual T OnBeforeLeave(T context, ISelection selection);
    public abstract virtual bool TryHandleLeave(T context, ISelection selection, ISelectionVisitorAction& action);
    public virtual T OnAfterLeave(T context, ISelection selection, ISelectionVisitorAction action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Expressions.Handlers.ProjectionFieldWrapper`1 : object {
    private ProjectionFieldHandler`1<T> _handler;
    private IProjectionFieldInterceptor`1<T> _interceptor;
    public ProjectionFieldWrapper`1(ProjectionFieldHandler`1<T> handler, IProjectionFieldInterceptor`1<T> interceptor);
    public sealed virtual bool CanHandle(ISelection selection);
    public sealed virtual IProjectionFieldHandler Wrap(IProjectionFieldInterceptor interceptor);
    public sealed virtual T OnBeforeEnter(T context, ISelection selection);
    public sealed virtual bool TryHandleEnter(T context, ISelection selection, ISelectionVisitorAction& action);
    public sealed virtual T OnAfterEnter(T context, ISelection selection, ISelectionVisitorAction result);
    public sealed virtual T OnBeforeLeave(T context, ISelection selection);
    public sealed virtual bool TryHandleLeave(T context, ISelection selection, ISelectionVisitorAction& action);
    public sealed virtual T OnAfterLeave(T context, ISelection selection, ISelectionVisitorAction result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.Projections.Expressions.Handlers.ProjectionVisitorContextExtensions : object {
    [ExtensionAttribute]
public static void ReportError(IProjectionVisitorContext`1<T> context, IError error);
    [ExtensionAttribute]
public static ProjectionScope`1<T> GetScope(IProjectionVisitorContext`1<T> context);
    [ExtensionAttribute]
public static T GetInstance(IProjectionVisitorContext`1<T> context);
    [ExtensionAttribute]
public static void PushInstance(IProjectionVisitorContext`1<T> context, T nextExpression);
    [ExtensionAttribute]
public static T PopInstance(IProjectionVisitorContext`1<T> context);
    [ExtensionAttribute]
public static ProjectionScope`1<T> PopScope(IProjectionVisitorContext`1<T> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionFieldHandler : QueryableProjectionHandlerBase {
    public virtual bool CanHandle(ISelection selection);
    public virtual bool TryHandleEnter(QueryableProjectionContext context, ISelection selection, ISelectionVisitorAction& action);
    public virtual bool TryHandleLeave(QueryableProjectionContext context, ISelection selection, ISelectionVisitorAction& action);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionHandlerBase : ProjectionFieldHandler`1<QueryableProjectionContext> {
    public virtual bool TryHandleEnter(QueryableProjectionContext context, ISelection selection, ISelectionVisitorAction& action);
    public virtual bool TryHandleLeave(QueryableProjectionContext context, ISelection selection, ISelectionVisitorAction& action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionListHandler : QueryableProjectionHandlerBase {
    public virtual bool CanHandle(ISelection selection);
    public virtual QueryableProjectionContext OnBeforeEnter(QueryableProjectionContext context, ISelection selection);
    public virtual bool TryHandleEnter(QueryableProjectionContext context, ISelection selection, ISelectionVisitorAction& action);
    public virtual bool TryHandleLeave(QueryableProjectionContext context, ISelection selection, ISelectionVisitorAction& action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Expressions.Handlers.QueryableProjectionScalarHandler : QueryableProjectionHandlerBase {
    public virtual bool CanHandle(ISelection selection);
    public virtual bool TryHandleEnter(QueryableProjectionContext context, ISelection selection, ISelectionVisitorAction& action);
    public virtual bool TryHandleLeave(QueryableProjectionContext context, ISelection selection, ISelectionVisitorAction& action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Data.Projections.Expressions.ProjectionExpressionBuilder : object {
    private static ConstantExpression _null;
    private static ProjectionExpressionBuilder();
    public static MemberInitExpression CreateMemberInit(Type type, IEnumerable`1<MemberBinding> expressions);
    public static Expression NotNull(Expression expression);
    public static Expression NotNullAndAlso(Expression property, Expression condition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Projections.Expressions.QueryableProjectionContext : ProjectionVisitorContext`1<Expression> {
    [CompilerGeneratedAttribute]
private bool <InMemory>k__BackingField;
    public bool InMemory { get; }
    public QueryableProjectionContext(IResolverContext context, IOutputType initialType, Type runtimeType, bool inMemory);
    [CompilerGeneratedAttribute]
public bool get_InMemory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.Projections.Expressions.QueryableProjectionContextExtensions : object {
    [ExtensionAttribute]
public static QueryableProjectionScope AddScope(QueryableProjectionContext context, Type runtimeType);
    [ExtensionAttribute]
public static bool TryGetQueryableScope(QueryableProjectionContext ctx, QueryableProjectionScope& scope);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, T>> Project(QueryableProjectionContext context);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, TTarget>> Project(QueryableProjectionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Expressions.QueryableProjectionProvider : ProjectionProvider {
    public static string ContextApplyProjectionKey;
    public static string SkipProjectionKey;
    public QueryableProjectionProvider(Action`1<IProjectionProviderDescriptor> configure);
    private static QueryableProjectionProvider();
    public virtual FieldMiddleware CreateExecutor();
    [NullableContextAttribute("2")]
protected virtual bool IsInMemoryQuery(object input);
    [NullableContextAttribute("2")]
protected virtual object ApplyToResult(object input, Expression`1<Func`2<TEntityType, TEntityType>> projection);
    private ApplyProjection CreateApplicator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private object <CreateApplicator>b__7_0(IResolverContext context, object input);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Projections.Expressions.QueryableProjectionScope : ProjectionScope`1<Expression> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, Queue`1<MemberAssignment>> _abstractType;
    [CompilerGeneratedAttribute]
private Type <RuntimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<Queue`1<MemberAssignment>> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterExpression <Parameter>k__BackingField;
    public Type RuntimeType { get; }
    public Stack`1<Queue`1<MemberAssignment>> Level { get; }
    public ParameterExpression Parameter { get; }
    public QueryableProjectionScope(Type type, string parameterName);
    [CompilerGeneratedAttribute]
public Type get_RuntimeType();
    [CompilerGeneratedAttribute]
public Stack`1<Queue`1<MemberAssignment>> get_Level();
    [CompilerGeneratedAttribute]
public ParameterExpression get_Parameter();
    public void AddAbstractType(Type type, Queue`1<MemberAssignment> memberAssignments);
    [IteratorStateMachineAttribute("HotChocolate.Data.Projections.Expressions.QueryableProjectionScope/<GetAbstractTypes>d__12")]
public IEnumerable`1<KeyValuePair`2<Type, Queue`1<MemberAssignment>>> GetAbstractTypes();
    public bool HasAbstractTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.Projections.Expressions.QueryableProjectionScopeExtensions : object {
    [ExtensionAttribute]
public static Expression`1<Func`2<T, T>> Project(QueryableProjectionScope scope);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, TTarget>> Project(QueryableProjectionScope scope);
    [ExtensionAttribute]
public static Expression CreateMemberInit(QueryableProjectionScope scope);
    [ExtensionAttribute]
public static Expression CreateMemberInitLambda(QueryableProjectionScope scope);
    [ExtensionAttribute]
private static Expression CreateMemberInitLambda(QueryableProjectionScope scope);
    [ExtensionAttribute]
public static Expression CreateSelection(QueryableProjectionScope scope, Expression source, Type sourceType);
    private static Expression ToArray(QueryableProjectionScope scope, Expression source);
    private static Expression ToList(QueryableProjectionScope scope, Expression source);
    private static Expression ToSet(Expression source, Type setType);
    private static bool TryGetSetType(Type type, Type& setType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Projections.Expressions.QueryableProjectionVisitor : ProjectionVisitor`1<QueryableProjectionContext> {
    public static QueryableProjectionVisitor Default;
    private static QueryableProjectionVisitor();
    protected virtual ISelectionVisitorAction VisitObjectType(IOutputField field, ObjectType objectType, ISelection selection, QueryableProjectionContext context);
}
[ExtensionAttribute]
public static class HotChocolate.Data.Projections.Expressions.TypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Type UnwrapRuntimeType(IType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.FirstOrDefaultMiddleware`1 : object {
    public static string ContextKey;
    private FieldDelegate _next;
    public FirstOrDefaultMiddleware`1(FieldDelegate next);
    [AsyncStateMachineAttribute("HotChocolate.Data.Projections.FirstOrDefaultMiddleware`1/<InvokeAsync>d__3")]
public Task InvokeAsync(IMiddlewareContext context);
}
public class HotChocolate.Data.Projections.Handlers.IsProjectedProjectionOptimizer : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanHandle(ISelection field);
    [NullableContextAttribute("1")]
public sealed virtual Selection RewriteSelection(SelectionSetOptimizerContext context, Selection selection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Projections.Handlers.ProjectionInterceptorCombinator`1 : object {
    private IProjectionFieldInterceptor _current;
    private IProjectionFieldInterceptor _next;
    public ProjectionInterceptorCombinator`1(IProjectionFieldInterceptor current, IProjectionFieldInterceptor next);
    public sealed virtual bool CanHandle(ISelection selection);
    public sealed virtual void BeforeProjection(T context, ISelection selection);
    public sealed virtual void AfterProjection(T context, ISelection selection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Handlers.QueryableFilterInterceptor : object {
    public sealed virtual bool CanHandle(ISelection selection);
    public sealed virtual void BeforeProjection(QueryableProjectionContext context, ISelection selection);
    public sealed virtual void AfterProjection(QueryableProjectionContext context, ISelection selection);
}
public class HotChocolate.Data.Projections.Handlers.QueryableFilterProjectionOptimizer : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanHandle(ISelection field);
    [NullableContextAttribute("1")]
public sealed virtual Selection RewriteSelection(SelectionSetOptimizerContext context, Selection selection);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static FieldDelegate <RewriteSelection>g__WrappedPipeline|1_0(FieldDelegate next);
}
public class HotChocolate.Data.Projections.Handlers.QueryableFirstOrDefaultInterceptor : QueryableTakeHandlerInterceptor {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Handlers.QueryablePagingProjectionOptimizer : object {
    private static ISyntaxRewriter`1<ISyntaxVisitorContext> _cloneSelectionSetRewriter;
    private static QueryablePagingProjectionOptimizer();
    public sealed virtual bool CanHandle(ISelection field);
    public sealed virtual Selection RewriteSelection(SelectionSetOptimizerContext context, Selection selection);
    private Selection CreateCombinedSelection(SelectionSetOptimizerContext context, ISelection selection, IObjectType declaringType, IPageType pageType, IReadOnlyList`1<ISelectionNode> selections);
    private static ValueTuple`2<string, IObjectField> TryGetObjectField(IPageType type);
    private IReadOnlyList`1<ISelectionNode> CollectSelection(SelectionSetOptimizerContext context);
    private static void CollectSelectionOfEdges(SelectionSetOptimizerContext context, List`1<ISelectionNode> selections);
    private static void CollectSelectionOfItems(SelectionSetOptimizerContext context, List`1<ISelectionNode> selections);
    private static void CollectSelectionOfNodes(SelectionSetOptimizerContext context, List`1<ISelectionNode> selections);
}
public class HotChocolate.Data.Projections.Handlers.QueryableSingleOrDefaultInterceptor : QueryableTakeHandlerInterceptor {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.Handlers.QueryableSortInterceptor : object {
    public sealed virtual bool CanHandle(ISelection selection);
    public sealed virtual void BeforeProjection(QueryableProjectionContext context, ISelection selection);
    public sealed virtual void AfterProjection(QueryableProjectionContext context, ISelection selection);
}
public class HotChocolate.Data.Projections.Handlers.QueryableSortProjectionOptimizer : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanHandle(ISelection field);
    [NullableContextAttribute("1")]
public sealed virtual Selection RewriteSelection(SelectionSetOptimizerContext context, Selection selection);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static FieldDelegate <RewriteSelection>g__WrappedPipeline|1_0(FieldDelegate next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Projections.Handlers.QueryableTakeHandlerInterceptor : object {
    private string _contextDataKey;
    private int _take;
    public QueryableTakeHandlerInterceptor(string contextDataKey, int take);
    public sealed virtual bool CanHandle(ISelection selection);
    public sealed virtual void BeforeProjection(QueryableProjectionContext context, ISelection selection);
    public sealed virtual void AfterProjection(QueryableProjectionContext context, ISelection selection);
}
public interface HotChocolate.Data.Projections.IProjectionConvention {
    [NullableContextAttribute("1")]
public abstract virtual FieldMiddleware CreateExecutor();
    [NullableContextAttribute("1")]
public abstract virtual ISelectionSetOptimizer CreateOptimizer();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.IProjectionConventionDescriptor {
    public abstract virtual IProjectionConventionDescriptor Provider();
    public abstract virtual IProjectionConventionDescriptor Provider(TProvider provider);
    public abstract virtual IProjectionConventionDescriptor Provider(Type provider);
    public abstract virtual IProjectionConventionDescriptor AddProviderExtension();
    public abstract virtual IProjectionConventionDescriptor AddProviderExtension(TExtension provider);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.IProjectionFieldHandler {
    public abstract virtual bool CanHandle(ISelection selection);
    public abstract virtual IProjectionFieldHandler Wrap(IProjectionFieldInterceptor interceptor);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.IProjectionFieldHandler`1 {
    public abstract virtual TContext OnBeforeEnter(TContext context, ISelection selection);
    public abstract virtual bool TryHandleEnter(TContext context, ISelection selection, ISelectionVisitorAction& action);
    public abstract virtual TContext OnAfterEnter(TContext context, ISelection selection, ISelectionVisitorAction result);
    public abstract virtual TContext OnBeforeLeave(TContext context, ISelection selection);
    public abstract virtual bool TryHandleLeave(TContext context, ISelection selection, ISelectionVisitorAction& action);
    public abstract virtual TContext OnAfterLeave(TContext context, ISelection selection, ISelectionVisitorAction result);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.IProjectionFieldInterceptor {
    public abstract virtual bool CanHandle(ISelection selection);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.IProjectionFieldInterceptor`1 {
    public abstract virtual void BeforeProjection(TContext context, ISelection selection);
    public abstract virtual void AfterProjection(TContext context, ISelection selection);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.IProjectionOptimizer {
    public abstract virtual bool CanHandle(ISelection selection);
    public abstract virtual Selection RewriteSelection(SelectionSetOptimizerContext context, Selection selection);
}
public interface HotChocolate.Data.Projections.IProjectionProvider {
    [NullableContextAttribute("1")]
public abstract virtual FieldMiddleware CreateExecutor();
    [NullableContextAttribute("1")]
public abstract virtual Selection RewriteSelection(SelectionSetOptimizerContext context, Selection selection);
}
[NullableContextAttribute("1")]
internal interface HotChocolate.Data.Projections.IProjectionProviderConvention {
    internal abstract virtual void Initialize(IConventionContext context);
    internal abstract virtual void Complete(IConventionContext context);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.IProjectionProviderDescriptor {
    public abstract virtual IProjectionProviderDescriptor RegisterFieldHandler();
    public abstract virtual IProjectionProviderDescriptor RegisterFieldHandler(THandler handler);
    public abstract virtual IProjectionProviderDescriptor RegisterFieldInterceptor();
    public abstract virtual IProjectionProviderDescriptor RegisterFieldInterceptor(THandler handler);
    public abstract virtual IProjectionProviderDescriptor RegisterOptimizer();
    public abstract virtual IProjectionProviderDescriptor RegisterOptimizer(THandler handler);
}
public interface HotChocolate.Data.Projections.IProjectionProviderExtension {
}
public interface HotChocolate.Data.Projections.IProjectionSelection {
    [NullableAttribute("1")]
public IProjectionFieldHandler Handler { get; }
    [NullableContextAttribute("1")]
public abstract virtual IProjectionFieldHandler get_Handler();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.IProjectionVisitorContext {
    public IList`1<IError> Errors { get; }
    public abstract virtual IList`1<IError> get_Errors();
}
public interface HotChocolate.Data.Projections.IProjectionVisitorContext`1 {
    [NullableAttribute("1")]
public Stack`1<ProjectionScope`1<T>> Scopes { get; }
    [NullableContextAttribute("1")]
public abstract virtual Stack`1<ProjectionScope`1<T>> get_Scopes();
}
public interface HotChocolate.Data.Projections.ISelectionVisitorAction {
    public SelectionVisitorActionKind Kind { get; }
    public abstract virtual SelectionVisitorActionKind get_Kind();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Projections.ISelectionVisitorContext {
    public Stack`1<ISelection> Selection { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Stack`1<INamedType> ResolvedType { get; }
    [ObsoleteAttribute("Use ResolverContext")]
public IResolverContext Context { get; }
    public IResolverContext ResolverContext { get; }
    public abstract virtual Stack`1<ISelection> get_Selection();
    public abstract virtual Stack`1<INamedType> get_ResolvedType();
    public virtual IResolverContext get_Context();
    public abstract virtual IResolverContext get_ResolverContext();
}
internal class HotChocolate.Data.Projections.NodeSelectionSetOptimizer : object {
    [NullableAttribute("1")]
private ISelectionSetOptimizer _optimizer;
    [NullableContextAttribute("1")]
public NodeSelectionSetOptimizer(ISelectionSetOptimizer optimizer);
    public sealed virtual void OptimizeSelectionSet(SelectionSetOptimizerContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Data.Projections.OutputFieldExtensions : object {
    [ExtensionAttribute]
public static bool IsNotProjected(IOutputField field);
    [ExtensionAttribute]
private static bool IsExcludedManually(IOutputField field);
    [ExtensionAttribute]
private static bool HasProjectionMiddleware(IOutputField field);
    [ExtensionAttribute]
private static bool IsPagingField(IOutputField field);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Projections.ProjectionConvention : Convention`1<ProjectionConventionDefinition> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IProjectionConventionDescriptor> _configure;
    private IProjectionProvider _provider;
    public static string IsProjectedKey;
    public static string AlwaysProjectedFieldsKey;
    [NullableAttribute("2")]
internal ProjectionConventionDefinition Definition { get; }
    public ProjectionConvention(Action`1<IProjectionConventionDescriptor> configure);
    [NullableContextAttribute("2")]
internal ProjectionConventionDefinition get_Definition();
    protected virtual ProjectionConventionDefinition CreateDefinition(IConventionContext context);
    protected virtual void Configure(IProjectionConventionDescriptor descriptor);
    protected internal virtual void Complete(IConventionContext context);
    public sealed virtual FieldMiddleware CreateExecutor();
    public sealed virtual ISelectionSetOptimizer CreateOptimizer();
    private static IReadOnlyList`1<IProjectionProviderExtension> CollectExtensions(IServiceProvider serviceProvider, ProjectionConventionDefinition definition);
    private static void MergeExtensions(IConventionContext context, IProjectionProviderConvention provider, IReadOnlyList`1<IProjectionProviderExtension> extensions);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.ProjectionConventionDefinition : object {
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectionProvider <ProviderInstance>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<IProjectionProviderExtension> <ProviderExtensions>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<Type> <ProviderExtensionsTypes>k__BackingField;
    public string Scope { get; public set; }
    public Type Provider { get; public set; }
    public IProjectionProvider ProviderInstance { get; public set; }
    [NullableAttribute("1")]
public List`1<IProjectionProviderExtension> ProviderExtensions { get; }
    [NullableAttribute("1")]
public List`1<Type> ProviderExtensionsTypes { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public Type get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(Type value);
    [CompilerGeneratedAttribute]
public IProjectionProvider get_ProviderInstance();
    [CompilerGeneratedAttribute]
public void set_ProviderInstance(IProjectionProvider value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<IProjectionProviderExtension> get_ProviderExtensions();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<Type> get_ProviderExtensionsTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.ProjectionConventionDescriptor : object {
    [CompilerGeneratedAttribute]
private IDescriptorContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectionConventionDefinition <Definition>k__BackingField;
    protected IDescriptorContext Context { get; }
    protected ProjectionConventionDefinition Definition { get; }
    protected ProjectionConventionDescriptor(IDescriptorContext context, string scope);
    [CompilerGeneratedAttribute]
protected IDescriptorContext get_Context();
    [CompilerGeneratedAttribute]
protected ProjectionConventionDefinition get_Definition();
    public ProjectionConventionDefinition CreateDefinition();
    public sealed virtual IProjectionConventionDescriptor Provider();
    public sealed virtual IProjectionConventionDescriptor Provider(TProvider provider);
    public sealed virtual IProjectionConventionDescriptor Provider(Type provider);
    public sealed virtual IProjectionConventionDescriptor AddProviderExtension();
    public sealed virtual IProjectionConventionDescriptor AddProviderExtension(TExtension provider);
    public static ProjectionConventionDescriptor New(IDescriptorContext context, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Projections.ProjectionConventionExtension : ConventionExtension`1<ProjectionConventionDefinition> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IProjectionConventionDescriptor> _configure;
    public ProjectionConventionExtension(Action`1<IProjectionConventionDescriptor> configure);
    protected virtual ProjectionConventionDefinition CreateDefinition(IConventionContext context);
    protected internal void Initialize(IConventionContext context);
    protected virtual void Configure(IProjectionConventionDescriptor descriptor);
    public virtual void Merge(IConventionContext context, Convention convention);
}
internal class HotChocolate.Data.Projections.ProjectionOptimizer : object {
    [NullableAttribute("1")]
private IProjectionProvider _provider;
    [NullableContextAttribute("1")]
public ProjectionOptimizer(IProjectionProvider provider);
    public sealed virtual void OptimizeSelectionSet(SelectionSetOptimizerContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Projections.ProjectionProvider : Convention`1<ProjectionProviderDefinition> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IProjectionProviderDescriptor> _configure;
    private IList`1<IProjectionFieldHandler> _fieldHandlers;
    private IList`1<IProjectionFieldInterceptor> _fieldInterceptors;
    private IList`1<IProjectionOptimizer> _optimizer;
    public static string ProjectionContextIdentifier;
    [NullableAttribute("2")]
internal ProjectionProviderDefinition Definition { get; }
    public ProjectionProvider(Action`1<IProjectionProviderDescriptor> configure);
    [NullableContextAttribute("2")]
internal ProjectionProviderDefinition get_Definition();
    protected virtual ProjectionProviderDefinition CreateDefinition(IConventionContext context);
    protected virtual void Configure(IProjectionProviderDescriptor descriptor);
    private sealed virtual override void HotChocolate.Data.Projections.IProjectionProviderConvention.Complete(IConventionContext context);
    protected internal virtual void Complete(IConventionContext context);
    public sealed virtual Selection RewriteSelection(SelectionSetOptimizerContext context, Selection selection);
    private sealed virtual override void HotChocolate.Data.Projections.IProjectionProviderConvention.Initialize(IConventionContext context);
    public void Initialize(IConventionContext context);
    public abstract virtual FieldMiddleware CreateExecutor();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.ProjectionProviderDefinition : object {
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<Type, IProjectionFieldHandler>> <Handlers>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<Type, IProjectionFieldInterceptor>> <Interceptors>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<Type, IProjectionOptimizer>> <Optimizers>k__BackingField;
    public string Scope { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ValueTuple`2<Type, IProjectionFieldHandler>> Handlers { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ValueTuple`2<Type, IProjectionFieldInterceptor>> Interceptors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ValueTuple`2<Type, IProjectionOptimizer>> Optimizers { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<Type, IProjectionFieldHandler>> get_Handlers();
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<Type, IProjectionFieldInterceptor>> get_Interceptors();
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<Type, IProjectionOptimizer>> get_Optimizers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.ProjectionProviderDescriptor : object {
    [CompilerGeneratedAttribute]
private IDescriptorContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectionProviderDefinition <Definition>k__BackingField;
    protected IDescriptorContext Context { get; }
    protected ProjectionProviderDefinition Definition { get; }
    protected ProjectionProviderDescriptor(IDescriptorContext context, string scope);
    [CompilerGeneratedAttribute]
protected IDescriptorContext get_Context();
    [CompilerGeneratedAttribute]
protected ProjectionProviderDefinition get_Definition();
    public ProjectionProviderDefinition CreateDefinition();
    public sealed virtual IProjectionProviderDescriptor RegisterFieldHandler();
    public sealed virtual IProjectionProviderDescriptor RegisterFieldHandler(THandler handler);
    public sealed virtual IProjectionProviderDescriptor RegisterFieldInterceptor();
    public sealed virtual IProjectionProviderDescriptor RegisterFieldInterceptor(THandler handler);
    public sealed virtual IProjectionProviderDescriptor RegisterOptimizer();
    public sealed virtual IProjectionProviderDescriptor RegisterOptimizer(THandler handler);
    public static ProjectionProviderDescriptor New(IDescriptorContext context, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Projections.ProjectionProviderExtension : ConventionExtension`1<ProjectionProviderDefinition> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IProjectionProviderDescriptor> _configure;
    public ProjectionProviderExtension(Action`1<IProjectionProviderDescriptor> configure);
    private sealed virtual override void HotChocolate.Data.Projections.IProjectionProviderConvention.Initialize(IConventionContext context);
    private sealed virtual override void HotChocolate.Data.Projections.IProjectionProviderConvention.Complete(IConventionContext context);
    protected virtual ProjectionProviderDefinition CreateDefinition(IConventionContext context);
    protected virtual void Configure(IProjectionProviderDescriptor descriptor);
    public virtual void Merge(IConventionContext context, Convention convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.ProjectionScope`1 : object {
    [CompilerGeneratedAttribute]
private Stack`1<T> <Instance>k__BackingField;
    public Stack`1<T> Instance { get; }
    [CompilerGeneratedAttribute]
public Stack`1<T> get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.ProjectionSelection : Selection {
    [CompilerGeneratedAttribute]
private IProjectionFieldHandler <Handler>k__BackingField;
    public IProjectionFieldHandler Handler { get; }
    public ProjectionSelection(IProjectionFieldHandler handler, Selection selection);
    [CompilerGeneratedAttribute]
public sealed virtual IProjectionFieldHandler get_Handler();
    public static ProjectionSelection From(Selection selection, IProjectionFieldHandler handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Projections.ProjectionTypeInterceptor : TypeInterceptor {
    [NullableAttribute("2")]
private ITypeCompletionContext _queryContext;
    internal virtual void OnAfterResolveRootType(ITypeCompletionContext completionContext, ObjectTypeDefinition definition, OperationType operationType);
    public virtual void OnAfterCompleteType(ITypeCompletionContext completionContext, DefinitionBase definition);
    public virtual void OnAfterCompleteName(ITypeCompletionContext completionContext, DefinitionBase definition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Projections.ProjectionVisitor`1 : SelectionVisitor`1<TContext> {
    public virtual void Visit(TContext context);
    public virtual void Visit(TContext context, ISelection selection);
    protected virtual TContext OnBeforeLeave(ISelection selection, TContext localContext);
    protected virtual TContext OnAfterLeave(ISelection selection, TContext localContext, ISelectionVisitorAction result);
    protected virtual TContext OnAfterEnter(ISelection selection, TContext localContext, ISelectionVisitorAction result);
    protected virtual TContext OnBeforeEnter(ISelection selection, TContext context);
    protected virtual ISelectionVisitorAction Enter(ISelection selection, TContext context);
    protected virtual ISelectionVisitorAction Leave(ISelection selection, TContext context);
    protected virtual ISelectionVisitorAction Visit(ISelection selection, TContext context);
    protected virtual ISelectionVisitorAction Visit(IOutputField field, TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Projections.ProjectionVisitorContext`1 : SelectionVisitorContext {
    [CompilerGeneratedAttribute]
private Stack`1<ProjectionScope`1<T>> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<IType> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IError> <Errors>k__BackingField;
    public Stack`1<ProjectionScope`1<T>> Scopes { get; }
    public Stack`1<IType> Types { get; }
    public IList`1<IError> Errors { get; }
    protected ProjectionVisitorContext`1(IResolverContext context, IOutputType initialType, ProjectionScope`1<T> projectionScope);
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<ProjectionScope`1<T>> get_Scopes();
    [CompilerGeneratedAttribute]
public Stack`1<IType> get_Types();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IError> get_Errors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Data.Projections.SelectionOptions : object {
    public static string FirstOrDefault;
    public static string SingleOrDefault;
    public static string MemberIsList;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.SelectionVisitor : object {
    [CompilerGeneratedAttribute]
private static ISelectionVisitorAction <Break>k__BackingField;
    [CompilerGeneratedAttribute]
private static ISelectionVisitorAction <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static ISelectionVisitorAction <Continue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ISelectionVisitorAction <SkipAndLeave>k__BackingField;
    protected ISelectionVisitorAction DefaultAction { get; }
    public static ISelectionVisitorAction Break { get; }
    public static ISelectionVisitorAction Skip { get; }
    public static ISelectionVisitorAction Continue { get; }
    public static ISelectionVisitorAction SkipAndLeave { get; }
    private static SelectionVisitor();
    protected virtual ISelectionVisitorAction get_DefaultAction();
    [CompilerGeneratedAttribute]
public static ISelectionVisitorAction get_Break();
    [CompilerGeneratedAttribute]
public static ISelectionVisitorAction get_Skip();
    [CompilerGeneratedAttribute]
public static ISelectionVisitorAction get_Continue();
    [CompilerGeneratedAttribute]
public static ISelectionVisitorAction get_SkipAndLeave();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.SelectionVisitor`1 : SelectionVisitor {
    protected virtual ISelectionVisitorAction Visit(IOutputField field, TContext context);
    protected virtual TContext OnBeforeLeave(IOutputField field, TContext localContext);
    protected virtual TContext OnAfterLeave(IOutputField field, TContext localContext, ISelectionVisitorAction result);
    protected virtual TContext OnAfterEnter(IOutputField field, TContext localContext, ISelectionVisitorAction result);
    protected virtual TContext OnBeforeEnter(IOutputField field, TContext context);
    protected virtual ISelectionVisitorAction Visit(ISelection selection, TContext context);
    protected virtual TContext OnBeforeLeave(ISelection selection, TContext localContext);
    protected virtual TContext OnAfterLeave(ISelection selection, TContext localContext, ISelectionVisitorAction result);
    protected virtual TContext OnAfterEnter(ISelection selection, TContext localContext, ISelectionVisitorAction result);
    protected virtual TContext OnBeforeEnter(ISelection selection, TContext context);
    protected virtual ISelectionVisitorAction VisitChildren(IOutputField field, TContext context);
    protected virtual ISelectionVisitorAction VisitObjectType(IOutputField field, ObjectType objectType, ISelection selection, TContext context);
    protected virtual ISelectionVisitorAction VisitChildren(ISelection selection, TContext context);
    protected virtual ISelectionVisitorAction Enter(IOutputField field, TContext context);
    protected virtual ISelectionVisitorAction Leave(IOutputField field, TContext context);
    protected virtual ISelectionVisitorAction Enter(ISelection selection, TContext context);
    protected virtual ISelectionVisitorAction Leave(ISelection selection, TContext context);
}
public enum HotChocolate.Data.Projections.SelectionVisitorActionKind : Enum {
    public int value__;
    public static SelectionVisitorActionKind Continue;
    public static SelectionVisitorActionKind Skip;
    public static SelectionVisitorActionKind Break;
    public static SelectionVisitorActionKind SkipAndLeave;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.SelectionVisitorContext : object {
    [CompilerGeneratedAttribute]
private Stack`1<ISelection> <Selection>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Stack`1<SelectionSetNode> <SelectionSetNodes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Stack`1<INamedType> <ResolvedType>k__BackingField;
    [CompilerGeneratedAttribute]
private IResolverContext <ResolverContext>k__BackingField;
    public Stack`1<ISelection> Selection { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Stack`1<SelectionSetNode> SelectionSetNodes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Stack`1<INamedType> ResolvedType { get; }
    public IResolverContext ResolverContext { get; }
    public SelectionVisitorContext(IResolverContext context);
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<ISelection> get_Selection();
    [CompilerGeneratedAttribute]
public Stack`1<SelectionSetNode> get_SelectionSetNodes();
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<INamedType> get_ResolvedType();
    [CompilerGeneratedAttribute]
public sealed virtual IResolverContext get_ResolverContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Projections.SingleOrDefaultMiddleware`1 : object {
    private FieldDelegate _next;
    public SingleOrDefaultMiddleware`1(FieldDelegate next);
    [AsyncStateMachineAttribute("HotChocolate.Data.Projections.SingleOrDefaultMiddleware`1/<InvokeAsync>d__2")]
public Task InvokeAsync(IMiddlewareContext context);
}
public class HotChocolate.Data.Projections.SkipAndLeaveSelectionVisitorAction : object {
    public SelectionVisitorActionKind Kind { get; }
    public sealed virtual SelectionVisitorActionKind get_Kind();
}
public class HotChocolate.Data.Projections.SkipSelectionVisitorAction : object {
    public SelectionVisitorActionKind Kind { get; }
    public sealed virtual SelectionVisitorActionKind get_Kind();
}
internal static class HotChocolate.Data.Projections.WellKnownProjectionFields : object {
    [NullableAttribute("1")]
public static string CombinedEdgeField;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.QueryableExecutable`1 : object {
    [CompilerGeneratedAttribute]
private IQueryable`1<T> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InMemory>k__BackingField;
    public IQueryable`1<T> Source { get; }
    private object HotChocolate.IExecutable.Source { get; }
    public bool InMemory { get; }
    public QueryableExecutable`1(IQueryable`1<T> queryable);
    [CompilerGeneratedAttribute]
public IQueryable`1<T> get_Source();
    private sealed virtual override object HotChocolate.IExecutable.get_Source();
    [CompilerGeneratedAttribute]
public bool get_InMemory();
    public virtual QueryableExecutable`1<T> WithSource(IQueryable`1<T> source);
    [AsyncStateMachineAttribute("HotChocolate.Data.QueryableExecutable`1/<ToListAsync>d__10")]
public virtual ValueTask`1<IList> ToListAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Data.QueryableExecutable`1/<FirstOrDefaultAsync>d__11")]
public virtual ValueTask`1<object> FirstOrDefaultAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Data.QueryableExecutable`1/<SingleOrDefaultAsync>d__12")]
public virtual ValueTask`1<object> SingleOrDefaultAsync(CancellationToken cancellationToken);
    public virtual string Print();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.QueryableFilterExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> Filter(IQueryable`1<T> queryable, IResolverContext context);
    [ExtensionAttribute]
public static IEnumerable`1<T> Filter(IEnumerable`1<T> enumerable, IResolverContext context);
    [ExtensionAttribute]
public static QueryableExecutable`1<T> Filter(QueryableExecutable`1<T> enumerable, IResolverContext context);
    [ExtensionAttribute]
private static T ExecuteFilter(T input, IResolverContext context, Type expectedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.QueryableProjectExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> Project(IQueryable`1<T> queryable, IResolverContext context);
    [ExtensionAttribute]
public static IEnumerable`1<T> Project(IEnumerable`1<T> enumerable, IResolverContext context);
    [ExtensionAttribute]
public static QueryableExecutable`1<T> Project(QueryableExecutable`1<T> enumerable, IResolverContext context);
    [ExtensionAttribute]
private static T ExecuteProject(T input, IResolverContext context, Type expectedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.QueryableSortExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> Sort(IQueryable`1<T> queryable, IResolverContext context);
    [ExtensionAttribute]
public static IEnumerable`1<T> Sort(IEnumerable`1<T> enumerable, IResolverContext context);
    [ExtensionAttribute]
public static QueryableExecutable`1<T> Sort(QueryableExecutable`1<T> enumerable, IResolverContext context);
    [ExtensionAttribute]
private static T ExecuteSort(T input, IResolverContext context, Type expectedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.ShortOperationFilterInputType : ComparableOperationFilterInputType`1<ShortType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.SortConventionDescriptorExtensions : object {
    [ExtensionAttribute]
public static ISortConventionDescriptor AddDefaults(ISortConventionDescriptor descriptor);
    [ExtensionAttribute]
public static ISortConventionDescriptor AddDefaultOperations(ISortConventionDescriptor descriptor);
    [ExtensionAttribute]
public static ISortConventionDescriptor BindDefaultTypes(ISortConventionDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.SortConventionDescriptorQueryableExtensions : object {
    [ExtensionAttribute]
public static ISortConventionDescriptor UseQueryableProvider(ISortConventionDescriptor descriptor);
    [ExtensionAttribute]
public static ISortProviderDescriptor`1<QueryableSortContext> AddDefaultFieldHandlers(ISortProviderDescriptor`1<QueryableSortContext> descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.SortDescriptorContextExtensions : object {
    [ExtensionAttribute]
public static ISortConvention GetSortConvention(ITypeSystemObjectContext context, string scope);
    [ExtensionAttribute]
public static ISortConvention GetSortConvention(IDescriptorContext context, string scope);
}
public class HotChocolate.Data.Sorting.ConfigureSortEnumType : MulticastDelegate {
    public ConfigureSortEnumType(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ISortEnumTypeDescriptor descriptor);
    public virtual IAsyncResult BeginInvoke(ISortEnumTypeDescriptor descriptor, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HotChocolate.Data.Sorting.ConfigureSortInputType : MulticastDelegate {
    public ConfigureSortInputType(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ISortInputTypeDescriptor descriptor);
    public virtual IAsyncResult BeginInvoke(ISortInputTypeDescriptor descriptor, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HotChocolate.Data.Sorting.ConfigureSortInputType`1 : MulticastDelegate {
    public ConfigureSortInputType`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ISortInputTypeDescriptor`1<T> descriptor);
    public virtual IAsyncResult BeginInvoke(ISortInputTypeDescriptor`1<T> descriptor, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HotChocolate.Data.Sorting.DefaultSortEnumType : SortEnumType {
    [NullableContextAttribute("1")]
protected virtual void Configure(ISortEnumTypeDescriptor descriptor);
}
public static class HotChocolate.Data.Sorting.DefaultSortOperations : object {
    public static int Ascending;
    public static int Descending;
}
public class HotChocolate.Data.Sorting.Expressions.ApplySorting : MulticastDelegate {
    public ApplySorting(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual object Invoke(IResolverContext context, object input);
    public virtual IAsyncResult BeginInvoke(IResolverContext context, object input, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class HotChocolate.Data.Sorting.Expressions.ExpressionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Type GetEnumerableKind(Expression source);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.Expressions.ExpressionSortMetadata : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    public ExpressionSortMetadata(Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.Expressions.QueryableAscendingSortOperationHandler : QueryableOperationHandlerBase {
    protected virtual QueryableSortOperation HandleOperation(QueryableSortContext context, QueryableFieldSelector fieldSelector, ISortField field, ISortEnumValue sortEnumValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.Expressions.QueryableDefaultSortFieldHandler : SortFieldHandler`2<QueryableSortContext, QueryableSortOperation> {
    public virtual bool CanHandle(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition);
    public virtual bool TryHandleEnter(QueryableSortContext context, ISortField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public virtual bool TryHandleLeave(QueryableSortContext context, ISortField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.Expressions.QueryableDescendingSortOperationHandler : QueryableOperationHandlerBase {
    protected virtual QueryableSortOperation HandleOperation(QueryableSortContext context, QueryableFieldSelector fieldSelector, ISortField field, ISortEnumValue sortEnumValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.Expressions.QueryableFieldSelector : QueryableSortOperation {
    protected QueryableFieldSelector(ParameterExpression parameterExpression);
    protected QueryableFieldSelector(Expression selector, ParameterExpression parameterExpression);
    public virtual Expression CompileOrderBy(Expression expression);
    public virtual Expression CompileThenBy(Expression expression);
    public QueryableFieldSelector WithSelector(Expression selector);
    public static QueryableFieldSelector New(Type initialType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Sorting.Expressions.QueryableOperationHandlerBase : SortOperationHandler`2<QueryableSortContext, QueryableSortOperation> {
    private int _operation;
    protected QueryableOperationHandlerBase(int operation);
    public virtual bool CanHandle(ITypeCompletionContext context, EnumTypeDefinition typeDefinition, SortEnumValueDefinition valueDefinition);
    public virtual bool TryHandleEnter(QueryableSortContext context, ISortField field, ISortEnumValue sortEnumValue, EnumValueNode valueNode, ISyntaxVisitorAction& action);
    protected abstract virtual QueryableSortOperation HandleOperation(QueryableSortContext context, QueryableFieldSelector fieldSelector, ISortField field, ISortEnumValue sortEnumValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.Expressions.QueryableSortContext : SortVisitorContext`1<QueryableSortOperation> {
    [CompilerGeneratedAttribute]
private bool <InMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<IExtendedType> <RuntimeTypes>k__BackingField;
    public bool InMemory { get; }
    public Stack`1<IExtendedType> RuntimeTypes { get; }
    public QueryableSortContext(ISortInputType initialType, bool inMemory);
    [CompilerGeneratedAttribute]
public bool get_InMemory();
    [CompilerGeneratedAttribute]
public Stack`1<IExtendedType> get_RuntimeTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Sorting.Expressions.QueryableSortOperation : object {
    [CompilerGeneratedAttribute]
private Expression <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterExpression <ParameterExpression>k__BackingField;
    public Expression Selector { get; }
    public ParameterExpression ParameterExpression { get; }
    protected QueryableSortOperation(Expression selector, ParameterExpression parameterExpression);
    protected QueryableSortOperation(QueryableFieldSelector fieldSelector);
    [CompilerGeneratedAttribute]
public Expression get_Selector();
    [CompilerGeneratedAttribute]
public ParameterExpression get_ParameterExpression();
    public abstract virtual Expression CompileOrderBy(Expression expression);
    public abstract virtual Expression CompileThenBy(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.Expressions.QueryableSortProvider : SortProvider`1<QueryableSortContext> {
    public static string ContextArgumentNameKey;
    public static string ContextVisitSortArgumentKey;
    public static string ContextApplySortingKey;
    public static string SkipSortingKey;
    [CompilerGeneratedAttribute]
private SortVisitor`2<QueryableSortContext, QueryableSortOperation> <Visitor>k__BackingField;
    protected SortVisitor`2<QueryableSortContext, QueryableSortOperation> Visitor { get; }
    public QueryableSortProvider(Action`1<ISortProviderDescriptor`1<QueryableSortContext>> configure);
    [CompilerGeneratedAttribute]
protected virtual SortVisitor`2<QueryableSortContext, QueryableSortOperation> get_Visitor();
    public virtual FieldMiddleware CreateExecutor(string argumentName);
    [NullableContextAttribute("2")]
protected virtual bool IsInMemoryQuery(object input);
    public virtual void ConfigureField(string argumentName, IObjectFieldDescriptor descriptor);
    public virtual ISortMetadata CreateMetaData(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition);
    [NullableContextAttribute("2")]
protected virtual object ApplyToResult(object input, Func`2<IQueryable`1<TEntityType>, IQueryable`1<TEntityType>> sort);
    private ApplySorting CreateApplicatorAsync(string argumentName);
    [CompilerGeneratedAttribute]
private QueryableSortContext <ConfigureField>g__VisitSortArgumentExecutor|11_0(IValueNode valueNode, ISortInputType filterInput, bool inMemory);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.Expressions.QueryableSortProviderExtension : SortProviderExtensions`1<QueryableSortContext> {
    public QueryableSortProviderExtension(Action`1<ISortProviderDescriptor`1<QueryableSortContext>> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.Sorting.Expressions.QueryableSortVisitorContextExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<TSource> Sort(QueryableSortContext context, IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Expression Compile(QueryableSortContext context, Expression source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.Data.Sorting.Expressions.SortExpressionBuilder : object {
    private static ConstantExpression _null;
    private static SortExpressionBuilder();
    public static Expression IsNull(Expression expression);
    public static Expression IfNullThenDefault(Expression left, Expression right, DefaultExpression defaultExpression);
}
public class HotChocolate.Data.Sorting.Expressions.VisitSortArgument : MulticastDelegate {
    public VisitSortArgument(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual QueryableSortContext Invoke(IValueNode filterValueNode, ISortInputType filterInputType, bool inMemory);
    public virtual IAsyncResult BeginInvoke(IValueNode filterValueNode, ISortInputType filterInputType, bool inMemory, AsyncCallback callback, object object);
    public virtual QueryableSortContext EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.IgnoreSortFieldDescriptor : SortFieldDescriptor {
    protected IgnoreSortFieldDescriptor(IDescriptorContext context, string scope, MemberInfo member);
    public static IgnoreSortFieldDescriptor New(IDescriptorContext context, string scope, MemberInfo member);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortConvention {
    public abstract virtual string GetTypeName(Type runtimeType);
    public abstract virtual string GetTypeDescription(Type runtimeType);
    public abstract virtual string GetFieldName(MemberInfo member);
    public abstract virtual string GetFieldDescription(MemberInfo member);
    public abstract virtual ExtendedTypeReference GetFieldType(MemberInfo member);
    public abstract virtual string GetOperationName(int operationId);
    [NullableContextAttribute("2")]
public abstract virtual string GetOperationDescription(int operationId);
    public abstract virtual string GetArgumentName();
    public abstract virtual void ApplyConfigurations(TypeReference typeReference, ISortInputTypeDescriptor descriptor);
    public abstract virtual void ApplyConfigurations(TypeReference typeReference, ISortEnumTypeDescriptor descriptor);
    public abstract virtual bool TryGetFieldHandler(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition, ISortFieldHandler& handler);
    public abstract virtual bool TryGetOperationHandler(ITypeCompletionContext context, EnumTypeDefinition typeDefinition, SortEnumValueDefinition fieldDefinition, ISortOperationHandler& handler);
    public abstract virtual FieldMiddleware CreateExecutor();
    public abstract virtual void ConfigureField(IObjectFieldDescriptor fieldDescriptor);
    public abstract virtual ISortMetadata CreateMetaData(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortConventionDescriptor {
    public abstract virtual ISortOperationConventionDescriptor Operation(int operationId);
    public abstract virtual ISortConventionDescriptor DefaultBinding();
    [NullableContextAttribute("2")]
public abstract virtual ISortConventionDescriptor BindRuntimeType();
    public abstract virtual ISortConventionDescriptor BindRuntimeType(Type runtimeType, Type sortType);
    public abstract virtual ISortConventionDescriptor ConfigureEnum(ConfigureSortEnumType configure);
    public abstract virtual ISortConventionDescriptor Configure(ConfigureSortInputType configure);
    public abstract virtual ISortConventionDescriptor Configure(ConfigureSortInputType`1<TRuntimeType> configure);
    public abstract virtual ISortConventionDescriptor Provider();
    public abstract virtual ISortConventionDescriptor Provider(TProvider provider);
    public abstract virtual ISortConventionDescriptor Provider(Type provider);
    public abstract virtual ISortConventionDescriptor ArgumentName(string argumentName);
    public abstract virtual ISortConventionDescriptor AddProviderExtension();
    public abstract virtual ISortConventionDescriptor AddProviderExtension(TExtension provider);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortEnumTypeDescriptor {
    public abstract virtual ISortEnumTypeDescriptor SyntaxNode(EnumTypeDefinitionNode enumTypeDefinition);
    public abstract virtual ISortEnumTypeDescriptor Name(string value);
    public abstract virtual ISortEnumTypeDescriptor Description(string value);
    public abstract virtual ISortEnumValueDescriptor Operation(int operation);
    public abstract virtual ISortEnumTypeDescriptor Directive(T directiveInstance);
    public abstract virtual ISortEnumTypeDescriptor Directive();
    public abstract virtual ISortEnumTypeDescriptor Directive(string name, ArgumentNode[] arguments);
}
public interface HotChocolate.Data.Sorting.ISortEnumValue {
    [NullableAttribute("1")]
public ISortOperationHandler Handler { get; }
    public int Operation { get; }
    [NullableContextAttribute("1")]
public abstract virtual ISortOperationHandler get_Handler();
    public abstract virtual int get_Operation();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortEnumValueDescriptor {
    public abstract virtual ISortEnumValueDescriptor SyntaxNode(EnumValueDefinitionNode enumValueDefinition);
    public abstract virtual ISortEnumValueDescriptor Name(string value);
    public abstract virtual ISortEnumValueDescriptor Description(string value);
    public abstract virtual ISortEnumValueDescriptor Deprecated(string reason);
    public abstract virtual ISortEnumValueDescriptor Deprecated();
    public abstract virtual ISortEnumValueDescriptor Directive(T directiveInstance);
    public abstract virtual ISortEnumValueDescriptor Directive();
    public abstract virtual ISortEnumValueDescriptor Directive(string name, ArgumentNode[] arguments);
}
public interface HotChocolate.Data.Sorting.ISortField {
    [NullableAttribute("1")]
public SortInputType DeclaringType { get; }
    [NullableAttribute("2")]
public MemberInfo Member { get; }
    [NullableAttribute("2")]
public IExtendedType RuntimeType { get; }
    [NullableAttribute("1")]
public ISortFieldHandler Handler { get; }
    [NullableAttribute("2")]
public ISortMetadata Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual SortInputType get_DeclaringType();
    [NullableContextAttribute("2")]
public abstract virtual MemberInfo get_Member();
    [NullableContextAttribute("2")]
public abstract virtual IExtendedType get_RuntimeType();
    [NullableContextAttribute("1")]
public abstract virtual ISortFieldHandler get_Handler();
    [NullableContextAttribute("2")]
public abstract virtual ISortMetadata get_Metadata();
}
[NullableContextAttribute("2")]
public interface HotChocolate.Data.Sorting.ISortFieldDefinition {
    public MemberInfo Member { get; }
    public ISortFieldHandler Handler { get; }
    public Expression Expression { get; }
    public abstract virtual MemberInfo get_Member();
    public abstract virtual ISortFieldHandler get_Handler();
    public abstract virtual Expression get_Expression();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortFieldDescriptor {
    public abstract virtual ISortFieldDescriptor SyntaxNode(InputValueDefinitionNode inputValueDefinition);
    public abstract virtual ISortFieldDescriptor Name(string value);
    public abstract virtual ISortFieldDescriptor Description(string value);
    public abstract virtual ISortFieldDescriptor Type();
    public abstract virtual ISortFieldDescriptor Type(TInputType inputType);
    public abstract virtual ISortFieldDescriptor Type(ITypeNode typeNode);
    public abstract virtual ISortFieldDescriptor Type(Type type);
    public abstract virtual ISortFieldDescriptor Ignore(bool ignore);
    public abstract virtual ISortFieldDescriptor DefaultValue(IValueNode value);
    public abstract virtual ISortFieldDescriptor DefaultValue(object value);
    public abstract virtual ISortFieldDescriptor Directive(T directiveInstance);
    public abstract virtual ISortFieldDescriptor Directive();
    public abstract virtual ISortFieldDescriptor Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortFieldHandler {
    public abstract virtual bool CanHandle(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortFieldHandler`1 {
    public abstract virtual bool TryHandleEnter(TContext context, ISortField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public abstract virtual bool TryHandleLeave(TContext context, ISortField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
}
public interface HotChocolate.Data.Sorting.ISortFieldHandler`2 {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortingContext {
    public abstract virtual void Handled(bool isHandled);
    public abstract virtual IList`1<IDictionary`2<string, object>> ToList();
    public abstract virtual IReadOnlyList`1<IReadOnlyList`1<ISortingFieldInfo>> GetFields();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortingFieldInfo {
    public ISortField Field { get; }
    [NullableAttribute("2")]
public ISortingValueNode Value { get; }
    public abstract virtual ISortField get_Field();
    [NullableContextAttribute("2")]
public abstract virtual ISortingValueNode get_Value();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortingInfo {
    public abstract virtual IReadOnlyList`1<ISortingFieldInfo> GetFields();
}
[NullableContextAttribute("2")]
public interface HotChocolate.Data.Sorting.ISortingValue {
    public object Value { get; }
    public abstract virtual object get_Value();
}
public interface HotChocolate.Data.Sorting.ISortingValueCollection {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortingValueNode {
    public IType Type { get; }
    public IValueNode ValueNode { get; }
    public abstract virtual IType get_Type();
    public abstract virtual IValueNode get_ValueNode();
}
public interface HotChocolate.Data.Sorting.ISortInputType {
    [NullableAttribute("1")]
public IExtendedType EntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IExtendedType get_EntityType();
}
[NullableContextAttribute("2")]
public interface HotChocolate.Data.Sorting.ISortInputTypeDefinition {
    public Type EntityType { get; }
    public abstract virtual Type get_EntityType();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortInputTypeDescriptor {
    public abstract virtual ISortInputTypeDescriptor Name(string value);
    public abstract virtual ISortInputTypeDescriptor Description(string value);
    public abstract virtual ISortFieldDescriptor Field(string name);
    public abstract virtual ISortInputTypeDescriptor Ignore(string name);
    public abstract virtual ISortInputTypeDescriptor Directive(TDirective directive);
    public abstract virtual ISortInputTypeDescriptor Directive();
    public abstract virtual ISortInputTypeDescriptor Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortInputTypeDescriptor`1 {
    public abstract virtual ISortInputTypeDescriptor`1<T> Name(string value);
    public abstract virtual ISortInputTypeDescriptor`1<T> Description(string value);
    public abstract virtual ISortInputTypeDescriptor`1<T> BindFields(BindingBehavior bindingBehavior);
    public abstract virtual ISortInputTypeDescriptor`1<T> BindFieldsExplicitly();
    public abstract virtual ISortInputTypeDescriptor`1<T> BindFieldsImplicitly();
    public abstract virtual ISortFieldDescriptor Field(Expression`1<Func`2<T, TField>> propertyOrMember);
    public abstract virtual ISortInputTypeDescriptor`1<T> Ignore(string name);
    public abstract virtual ISortInputTypeDescriptor`1<T> Ignore(Expression`1<Func`2<T, object>> propertyOrMember);
    public abstract virtual ISortInputTypeDescriptor`1<T> Directive(TDirective directive);
    public abstract virtual ISortInputTypeDescriptor`1<T> Directive();
    public abstract virtual ISortInputTypeDescriptor`1<T> Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortInputTypeNameDependencyDescriptor`1 {
    public abstract virtual ISortInputTypeDescriptor`1<T> DependsOn();
    public abstract virtual ISortInputTypeDescriptor`1<T> DependsOn(Type schemaType);
}
public interface HotChocolate.Data.Sorting.ISortMetadata {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortOperationConventionDescriptor {
    public abstract virtual ISortOperationConventionDescriptor Name(string name);
    public abstract virtual ISortOperationConventionDescriptor Description(string description);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortOperationHandler {
    public abstract virtual bool CanHandle(ITypeCompletionContext context, EnumTypeDefinition typeDefinition, SortEnumValueDefinition valueDefinition);
}
public interface HotChocolate.Data.Sorting.ISortOperationHandler`1 {
    [NullableContextAttribute("1")]
public abstract virtual bool TryHandleEnter(TContext context, ISortField field, ISortEnumValue enumValue, EnumValueNode valueNode, ISyntaxVisitorAction& action);
}
public interface HotChocolate.Data.Sorting.ISortOperationHandler`2 {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortProvider {
    public IReadOnlyCollection`1<ISortFieldHandler> FieldHandlers { get; }
    public IReadOnlyCollection`1<ISortOperationHandler> OperationHandlers { get; }
    public abstract virtual IReadOnlyCollection`1<ISortFieldHandler> get_FieldHandlers();
    public abstract virtual IReadOnlyCollection`1<ISortOperationHandler> get_OperationHandlers();
    public abstract virtual FieldMiddleware CreateExecutor(string argumentName);
    public abstract virtual void ConfigureField(string argumentName, IObjectFieldDescriptor descriptor);
    public abstract virtual ISortMetadata CreateMetaData(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
internal interface HotChocolate.Data.Sorting.ISortProviderConvention {
    internal abstract virtual void Initialize(IConventionContext context);
    internal abstract virtual void Complete(IConventionContext context);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortProviderDescriptor`1 {
    public abstract virtual ISortProviderDescriptor`1<TContext> AddFieldHandler();
    public abstract virtual ISortProviderDescriptor`1<TContext> AddFieldHandler(TFieldHandler fieldHandler);
    public abstract virtual ISortProviderDescriptor`1<TContext> AddOperationHandler();
    public abstract virtual ISortProviderDescriptor`1<TContext> AddOperationHandler(TOperationHandler operationHandler);
}
public interface HotChocolate.Data.Sorting.ISortProviderExtension {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortVisitorContext {
    public Stack`1<IType> Types { get; }
    public Stack`1<IInputField> Fields { get; }
    public IList`1<IError> Errors { get; }
    public abstract virtual Stack`1<IType> get_Types();
    public abstract virtual Stack`1<IInputField> get_Fields();
    public abstract virtual IList`1<IError> get_Errors();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Data.Sorting.ISortVisitorContext`1 {
    public Queue`1<T> Operations { get; }
    public Stack`1<T> Instance { get; }
    public abstract virtual Queue`1<T> get_Operations();
    public abstract virtual Stack`1<T> get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.SortConvention : Convention`1<SortConventionDefinition> {
    private static string _typePostFix;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ISortConventionDescriptor> _configure;
    private INamingConventions _namingConventions;
    private IReadOnlyDictionary`2<int, SortOperation> _operations;
    private IDictionary`2<Type, Type> _bindings;
    private IDictionary`2<TypeReference, List`1<ConfigureSortInputType>> _inputTypeConfigs;
    private IDictionary`2<TypeReference, List`1<ConfigureSortEnumType>> _enumTypeConfigs;
    private string _argumentName;
    private ISortProvider _provider;
    private ITypeInspector _typeInspector;
    [NullableAttribute("2")]
private Type _defaultBinding;
    [NullableAttribute("2")]
internal SortConventionDefinition Definition { get; }
    public SortConvention(Action`1<ISortConventionDescriptor> configure);
    [NullableContextAttribute("2")]
internal SortConventionDefinition get_Definition();
    protected virtual SortConventionDefinition CreateDefinition(IConventionContext context);
    protected virtual void Configure(ISortConventionDescriptor descriptor);
    protected internal virtual void Complete(IConventionContext context);
    public virtual string GetTypeName(Type runtimeType);
    public virtual string GetTypeDescription(Type runtimeType);
    public virtual string GetFieldName(MemberInfo member);
    public virtual string GetFieldDescription(MemberInfo member);
    public virtual ExtendedTypeReference GetFieldType(MemberInfo member);
    public sealed virtual string GetOperationName(int operation);
    [NullableContextAttribute("2")]
public sealed virtual string GetOperationDescription(int operationId);
    public sealed virtual string GetArgumentName();
    public sealed virtual void ApplyConfigurations(TypeReference typeReference, ISortInputTypeDescriptor descriptor);
    public sealed virtual void ApplyConfigurations(TypeReference typeReference, ISortEnumTypeDescriptor descriptor);
    public sealed virtual FieldMiddleware CreateExecutor();
    public virtual void ConfigureField(IObjectFieldDescriptor descriptor);
    public sealed virtual bool TryGetOperationHandler(ITypeCompletionContext context, EnumTypeDefinition typeDefinition, SortEnumValueDefinition fieldDefinition, ISortOperationHandler& handler);
    public sealed virtual bool TryGetFieldHandler(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition, ISortFieldHandler& handler);
    public sealed virtual ISortMetadata CreateMetaData(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition);
    private bool TryCreateSortType(IExtendedType runtimeType, Type& type);
    private static IReadOnlyList`1<ISortProviderExtension> CollectExtensions(IServiceProvider serviceProvider, SortConventionDefinition definition);
    private static void MergeExtensions(IConventionContext context, ISortProviderConvention provider, IReadOnlyList`1<ISortProviderExtension> extensions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortConventionDefinition : object {
    public static string DefaultArgumentName;
    private string _argumentName;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <Provider>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISortProvider <ProviderInstance>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <DefaultBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SortOperationConventionDefinition> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, Type> <Bindings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TypeReference, List`1<ConfigureSortInputType>> <Configurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TypeReference, List`1<ConfigureSortEnumType>> <EnumConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISortProviderExtension> <ProviderExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Type> <ProviderExtensionsTypes>k__BackingField;
    [NullableAttribute("2")]
public string Scope { get; public set; }
    public string ArgumentName { get; public set; }
    [NullableAttribute("2")]
public Type Provider { get; public set; }
    [NullableAttribute("2")]
public ISortProvider ProviderInstance { get; public set; }
    [NullableAttribute("2")]
public Type DefaultBinding { get; public set; }
    public IList`1<SortOperationConventionDefinition> Operations { get; }
    public IDictionary`2<Type, Type> Bindings { get; }
    public IDictionary`2<TypeReference, List`1<ConfigureSortInputType>> Configurations { get; }
    public IDictionary`2<TypeReference, List`1<ConfigureSortEnumType>> EnumConfigurations { get; }
    public IList`1<ISortProviderExtension> ProviderExtensions { get; }
    public IList`1<Type> ProviderExtensionsTypes { get; }
    private static SortConventionDefinition();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Scope(string value);
    public string get_ArgumentName();
    public void set_ArgumentName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_Provider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Provider(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISortProvider get_ProviderInstance();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProviderInstance(ISortProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_DefaultBinding();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DefaultBinding(Type value);
    [CompilerGeneratedAttribute]
public IList`1<SortOperationConventionDefinition> get_Operations();
    [CompilerGeneratedAttribute]
public IDictionary`2<Type, Type> get_Bindings();
    [CompilerGeneratedAttribute]
public IDictionary`2<TypeReference, List`1<ConfigureSortInputType>> get_Configurations();
    [CompilerGeneratedAttribute]
public IDictionary`2<TypeReference, List`1<ConfigureSortEnumType>> get_EnumConfigurations();
    [CompilerGeneratedAttribute]
public IList`1<ISortProviderExtension> get_ProviderExtensions();
    [CompilerGeneratedAttribute]
public IList`1<Type> get_ProviderExtensionsTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortConventionDescriptor : object {
    private Dictionary`2<int, SortOperationConventionDescriptor> _operations;
    [CompilerGeneratedAttribute]
private IDescriptorContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private SortConventionDefinition <Definition>k__BackingField;
    protected IDescriptorContext Context { get; }
    protected SortConventionDefinition Definition { get; }
    protected SortConventionDescriptor(IDescriptorContext context, string scope);
    [CompilerGeneratedAttribute]
protected IDescriptorContext get_Context();
    [CompilerGeneratedAttribute]
protected SortConventionDefinition get_Definition();
    public SortConventionDefinition CreateDefinition();
    public sealed virtual ISortOperationConventionDescriptor Operation(int operationId);
    public sealed virtual ISortConventionDescriptor DefaultBinding();
    [NullableContextAttribute("2")]
public sealed virtual ISortConventionDescriptor BindRuntimeType();
    public sealed virtual ISortConventionDescriptor BindRuntimeType(Type runtimeType, Type sortType);
    public sealed virtual ISortConventionDescriptor Configure(ConfigureSortInputType configure);
    public sealed virtual ISortConventionDescriptor Configure(ConfigureSortInputType`1<TRuntimeType> configure);
    public sealed virtual ISortConventionDescriptor ConfigureEnum(ConfigureSortEnumType configure);
    protected ISortConventionDescriptor Configure(TypeReference typeReference, ConfigureSortInputType configure);
    public sealed virtual ISortConventionDescriptor Provider();
    public sealed virtual ISortConventionDescriptor Provider(TProvider provider);
    public sealed virtual ISortConventionDescriptor Provider(Type provider);
    public sealed virtual ISortConventionDescriptor ArgumentName(string argumentName);
    public sealed virtual ISortConventionDescriptor AddProviderExtension();
    public sealed virtual ISortConventionDescriptor AddProviderExtension(TExtension provider);
    public static SortConventionDescriptor New(IDescriptorContext context, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.SortConventionExtension : ConventionExtension`1<SortConventionDefinition> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ISortConventionDescriptor> _configure;
    public SortConventionExtension(Action`1<ISortConventionDescriptor> configure);
    protected virtual SortConventionDefinition CreateDefinition(IConventionContext context);
    protected internal void Initialize(IConventionContext context);
    protected virtual void Configure(ISortConventionDescriptor descriptor);
    public virtual void Merge(IConventionContext context, Convention convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortEnumType : EnumType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ISortEnumTypeDescriptor> _configure;
    public SortEnumType(Action`1<ISortEnumTypeDescriptor> configure);
    protected virtual EnumTypeDefinition CreateDefinition(ITypeDiscoveryContext context);
    protected virtual void Configure(ISortEnumTypeDescriptor descriptor);
    protected virtual bool TryCreateEnumValue(ITypeCompletionContext context, EnumValueDefinition definition, IEnumValue& enumValue);
    public ISortEnumValue ParseSortLiteral(IValueNode valueSyntax);
    protected sealed virtual void Configure(IEnumTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortEnumTypeDefinition : EnumTypeDefinition {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [NullableAttribute("2")]
public string Scope { get; public set; }
    public Type EntityType { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.SortEnumTypeDescriptor : DescriptorBase`1<SortEnumTypeDefinition> {
    [CompilerGeneratedAttribute]
private SortEnumTypeDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SortEnumValueDescriptor> <Values>k__BackingField;
    protected internal SortEnumTypeDefinition Definition { get; protected set; }
    protected ICollection`1<SortEnumValueDescriptor> Values { get; }
    protected SortEnumTypeDescriptor(IDescriptorContext context, Type clrType, string scope);
    protected SortEnumTypeDescriptor(IDescriptorContext context, SortEnumTypeDefinition definition);
    [CompilerGeneratedAttribute]
protected internal virtual SortEnumTypeDefinition get_Definition();
    [CompilerGeneratedAttribute]
protected virtual void set_Definition(SortEnumTypeDefinition value);
    [CompilerGeneratedAttribute]
protected ICollection`1<SortEnumValueDescriptor> get_Values();
    protected virtual void OnCreateDefinition(SortEnumTypeDefinition definition);
    public sealed virtual ISortEnumTypeDescriptor SyntaxNode(EnumTypeDefinitionNode enumTypeDefinition);
    public sealed virtual ISortEnumTypeDescriptor Name(string value);
    public sealed virtual ISortEnumTypeDescriptor Description(string value);
    public sealed virtual ISortEnumValueDescriptor Operation(int operation);
    public sealed virtual ISortEnumTypeDescriptor Directive(T directiveInstance);
    public sealed virtual ISortEnumTypeDescriptor Directive();
    public sealed virtual ISortEnumTypeDescriptor Directive(string name, ArgumentNode[] arguments);
    public static SortEnumTypeDescriptor New(IDescriptorContext context, Type type, string scope);
    public static SortEnumTypeDescriptor FromSchemaType(IDescriptorContext context, Type schemaType, string scope);
    public static SortEnumTypeDescriptor From(IDescriptorContext context, SortEnumTypeDefinition definition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortEnumValue : object {
    private DirectiveCollection _directives;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EnumValueDefinitionNode <SyntaxNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DeprecationReason>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ContextData>k__BackingField;
    [CompilerGeneratedAttribute]
private ISortOperationHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Operation>k__BackingField;
    [NullableAttribute("2")]
public EnumValueDefinitionNode SyntaxNode { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public bool IsDeprecated { get; }
    [NullableAttribute("2")]
public string DeprecationReason { get; }
    public object Value { get; }
    public IDirectiveCollection Directives { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public ISortOperationHandler Handler { get; }
    public int Operation { get; }
    public SortEnumValue(ITypeCompletionContext completionContext, SortEnumValueDefinition enumValueDefinition);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual EnumValueDefinitionNode get_SyntaxNode();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDeprecated();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_DeprecationReason();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    public sealed virtual IDirectiveCollection get_Directives();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    [CompilerGeneratedAttribute]
public sealed virtual ISortOperationHandler get_Handler();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Operation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortEnumValueDefinition : EnumValueDefinition {
    [CompilerGeneratedAttribute]
private ISortOperationHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Operation>k__BackingField;
    public ISortOperationHandler Handler { get; public set; }
    public int Operation { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public ISortOperationHandler get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(ISortOperationHandler value);
    [CompilerGeneratedAttribute]
public int get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(int value);
    public object get_Value();
    public void set_Value(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortEnumValueDescriptor : EnumValueDescriptor {
    protected internal EnumValueDefinition Definition { get; protected internal set; }
    protected SortEnumValueDescriptor(IDescriptorContext context, string scope, int value);
    protected SortEnumValueDescriptor(IDescriptorContext context, SortEnumValueDefinition definition);
    protected internal EnumValueDefinition get_Definition();
    protected internal void set_Definition(EnumValueDefinition value);
    public sealed virtual ISortEnumValueDescriptor SyntaxNode(EnumValueDefinitionNode enumValueDefinition);
    public sealed virtual ISortEnumValueDescriptor Name(string value);
    public sealed virtual ISortEnumValueDescriptor Description(string value);
    public sealed virtual ISortEnumValueDescriptor Deprecated(string reason);
    public sealed virtual ISortEnumValueDescriptor Deprecated();
    public sealed virtual ISortEnumValueDescriptor Directive(T directiveInstance);
    public sealed virtual ISortEnumValueDescriptor Directive();
    public sealed virtual ISortEnumValueDescriptor Directive(string name, ArgumentNode[] arguments);
    public static SortEnumValueDescriptor New(IDescriptorContext context, string scope, int value);
}
public class HotChocolate.Data.Sorting.SortField : InputField {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IExtendedType <RuntimeType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ISortFieldHandler <Handler>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISortMetadata <Metadata>k__BackingField;
    [NullableAttribute("1")]
public SortInputType DeclaringType { get; }
    [NullableAttribute("1")]
private SortInputType HotChocolate.Data.Sorting.ISortField.DeclaringType { get; }
    [NullableAttribute("2")]
public MemberInfo Member { get; }
    [NullableAttribute("2")]
public IExtendedType RuntimeType { get; private set; }
    [NullableAttribute("1")]
public ISortFieldHandler Handler { get; }
    [NullableAttribute("2")]
public ISortMetadata Metadata { get; }
    [NullableContextAttribute("1")]
internal SortField(SortFieldDefinition definition, int index);
    [NullableContextAttribute("1")]
public SortInputType get_DeclaringType();
    [NullableContextAttribute("1")]
private sealed virtual override SortInputType HotChocolate.Data.Sorting.ISortField.get_DeclaringType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual MemberInfo get_Member();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IExtendedType get_RuntimeType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_RuntimeType(IExtendedType value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ISortFieldHandler get_Handler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ISortMetadata get_Metadata();
    [NullableContextAttribute("1")]
protected virtual void OnCompleteField(ITypeCompletionContext context, ITypeSystemMember declaringMember, InputFieldDefinition definition);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortFieldDefinition : InputFieldDefinition {
    [CompilerGeneratedAttribute]
private MemberInfo <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private ISortFieldHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ISortMetadata <Metadata>k__BackingField;
    public MemberInfo Member { get; public set; }
    public ISortFieldHandler Handler { get; public set; }
    public string Scope { get; public set; }
    public Expression Expression { get; public set; }
    internal ISortMetadata Metadata { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual MemberInfo get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(MemberInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual ISortFieldHandler get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(ISortFieldHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
internal ISortMetadata get_Metadata();
    [CompilerGeneratedAttribute]
internal void set_Metadata(ISortMetadata value);
    [NullableContextAttribute("1")]
internal void CopyTo(SortFieldDefinition target);
    [NullableContextAttribute("1")]
internal void MergeInto(SortFieldDefinition target);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.SortFieldDescriptor : ArgumentDescriptorBase`1<SortFieldDefinition> {
    protected internal SortFieldDefinition Definition { get; protected set; }
    protected SortFieldDescriptor(IDescriptorContext context, string scope, string fieldName);
    protected SortFieldDescriptor(IDescriptorContext context, string scope, Expression expression);
    protected SortFieldDescriptor(IDescriptorContext context, string scope, MemberInfo member);
    protected internal SortFieldDescriptor(IDescriptorContext context, string scope);
    protected internal SortFieldDefinition get_Definition();
    protected void set_Definition(SortFieldDefinition value);
    internal InputFieldDefinition CreateFieldDefinition();
    protected virtual void OnCreateDefinition(SortFieldDefinition definition);
    public sealed virtual ISortFieldDescriptor SyntaxNode(InputValueDefinitionNode inputValueDefinition);
    public sealed virtual ISortFieldDescriptor Name(string value);
    public sealed virtual ISortFieldDescriptor Ignore(bool ignore);
    public sealed virtual ISortFieldDescriptor Description(string value);
    public sealed virtual ISortFieldDescriptor Type();
    public sealed virtual ISortFieldDescriptor Type(TInputType inputType);
    public sealed virtual ISortFieldDescriptor Type(ITypeNode typeNode);
    public sealed virtual ISortFieldDescriptor Type(Type type);
    public sealed virtual ISortFieldDescriptor DefaultValue(IValueNode value);
    public sealed virtual ISortFieldDescriptor DefaultValue(object value);
    public sealed virtual ISortFieldDescriptor Directive(TDirective directiveInstance);
    public sealed virtual ISortFieldDescriptor Directive();
    public sealed virtual ISortFieldDescriptor Directive(string name, ArgumentNode[] arguments);
    public static SortFieldDescriptor New(IDescriptorContext context, string scope, MemberInfo member);
    public static SortFieldDescriptor New(IDescriptorContext context, string fieldName, string scope);
    internal static SortFieldDescriptor New(IDescriptorContext context, string scope, Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
public abstract class HotChocolate.Data.Sorting.SortFieldDescriptorAttribute : DescriptorAttribute {
    protected internal sealed virtual void TryConfigure(IDescriptorContext context, IDescriptor descriptor, ICustomAttributeProvider element);
    public abstract virtual void OnConfigure(IDescriptorContext context, ISortFieldDescriptor descriptor, MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Sorting.SortFieldHandler`2 : object {
    public virtual bool TryHandleEnter(TContext context, ISortField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public virtual bool TryHandleLeave(TContext context, ISortField field, ObjectFieldNode node, ISyntaxVisitorAction& action);
    public abstract virtual bool CanHandle(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortingContext : object {
    private IReadOnlyList`1<SortingInfo> _value;
    private IResolverContext _context;
    public SortingContext(IResolverContext context, IType type, IValueNode valueNode, InputParser inputParser);
    public sealed virtual void Handled(bool isHandled);
    public sealed virtual IReadOnlyList`1<IReadOnlyList`1<ISortingFieldInfo>> GetFields();
    public sealed virtual IList`1<IDictionary`2<string, object>> ToList();
    [NullableContextAttribute("2")]
private static object Serialize(ISortingValueNode value);
    [CompilerGeneratedAttribute]
internal static void <Serialize>g__SerializeAndAssign|6_0(string fieldName, ISortingValueNode value, <>c__DisplayClass6_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Sorting.SortingContextParameterExpressionBuilder : object {
    private static string _getSortingContext;
    private static MethodInfo _getSortingContextMethod;
    public ArgumentKind Kind { get; }
    public bool IsPure { get; }
    public bool IsDefaultHandler { get; }
    private static SortingContextParameterExpressionBuilder();
    public sealed virtual ArgumentKind get_Kind();
    public sealed virtual bool get_IsPure();
    public sealed virtual bool get_IsDefaultHandler();
    public sealed virtual bool CanHandle(ParameterInfo parameter);
    public sealed virtual Expression Build(ParameterExpressionBuilderContext context);
}
[ExtensionAttribute]
public static class HotChocolate.Data.Sorting.SortingContextResolverContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ISortingContext GetSortingContext(IResolverContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortingFieldInfo : object {
    [CompilerGeneratedAttribute]
private ISortField <Field>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISortingValueNode <Value>k__BackingField;
    public ISortField Field { get; }
    [NullableAttribute("2")]
public ISortingValueNode Value { get; }
    public SortingFieldInfo(ISortField field, ISortingValueNode value);
    [CompilerGeneratedAttribute]
public sealed virtual ISortField get_Field();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ISortingValueNode get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortingInfo : SortingValueNode {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ISortingFieldInfo> _fieldInfos;
    private InputParser _inputParser;
    public SortingInfo(IType type, IValueNode valueNode, InputParser inputParser);
    public sealed virtual IReadOnlyList`1<ISortingFieldInfo> GetFields();
    private void Initialize();
    private ISortingValueNode CreateValueInfo(IValueNode valueNode, IType type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortingValue : SortingValueNode {
    private object _parsedObject;
    [NullableAttribute("1")]
private InputParser _inputParser;
    public object Value { get; }
    [NullableContextAttribute("1")]
public SortingValue(IType type, IValueNode valueNode, InputParser inputParser);
    public sealed virtual object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.SortingValueCollection : List`1<ISortingValueNode> {
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <ValueNode>k__BackingField;
    public IType Type { get; }
    public IValueNode ValueNode { get; }
    public SortingValueCollection(IType type, IValueNode valueNode, IEnumerable`1<ISortingValueNode> collection);
    [CompilerGeneratedAttribute]
public sealed virtual IType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual IValueNode get_ValueNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Sorting.SortingValueNode : object {
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <ValueNode>k__BackingField;
    public IType Type { get; }
    public IValueNode ValueNode { get; }
    protected SortingValueNode(IType type, IValueNode valueNode);
    [CompilerGeneratedAttribute]
public sealed virtual IType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual IValueNode get_ValueNode();
}
public class HotChocolate.Data.Sorting.SortInputType : InputObjectType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ISortInputTypeDescriptor> _configure;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IExtendedType <EntityType>k__BackingField;
    [NullableAttribute("1")]
public IExtendedType EntityType { get; private set; }
    [NullableContextAttribute("1")]
public SortInputType(Action`1<ISortInputTypeDescriptor> configure);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IExtendedType get_EntityType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_EntityType(IExtendedType value);
    [NullableContextAttribute("1")]
protected virtual InputObjectTypeDefinition CreateDefinition(ITypeDiscoveryContext context);
    [NullableContextAttribute("1")]
protected virtual void Configure(ISortInputTypeDescriptor descriptor);
    [NullableContextAttribute("1")]
protected virtual void OnRegisterDependencies(ITypeDiscoveryContext context, InputObjectTypeDefinition definition);
    [NullableContextAttribute("1")]
protected virtual void OnCompleteType(ITypeCompletionContext context, InputObjectTypeDefinition definition);
    [NullableContextAttribute("1")]
protected virtual FieldCollection`1<InputField> OnCompleteFields(ITypeCompletionContext context, InputObjectTypeDefinition definition);
    [NullableContextAttribute("1")]
protected sealed virtual void Configure(IInputObjectTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortInputType`1 : SortInputType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ISortInputTypeDescriptor`1<T>> _configure;
    public SortInputType`1(Action`1<ISortInputTypeDescriptor`1<T>> configure);
    protected virtual InputObjectTypeDefinition CreateDefinition(ITypeDiscoveryContext context);
    protected virtual void Configure(ISortInputTypeDescriptor`1<T> descriptor);
    protected sealed virtual void Configure(ISortInputTypeDescriptor descriptor);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortInputTypeDefinition : InputObjectTypeDefinition {
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNamed>k__BackingField;
    public Type EntityType { get; public set; }
    public string Scope { get; public set; }
    internal bool IsNamed { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsNamed();
    [CompilerGeneratedAttribute]
internal void set_IsNamed(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.SortInputTypeDescriptor : DescriptorBase`1<SortInputTypeDefinition> {
    [CompilerGeneratedAttribute]
private ISortConvention <Convention>k__BackingField;
    [CompilerGeneratedAttribute]
private SortInputTypeDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private BindableList`1<SortFieldDescriptor> <Fields>k__BackingField;
    protected ISortConvention Convention { get; }
    protected internal SortInputTypeDefinition Definition { get; protected set; }
    protected BindableList`1<SortFieldDescriptor> Fields { get; }
    private Type HotChocolate.Types.IHasRuntimeType.RuntimeType { get; }
    protected SortInputTypeDescriptor(IDescriptorContext context, Type entityType, string scope);
    protected SortInputTypeDescriptor(IDescriptorContext context, string scope);
    protected SortInputTypeDescriptor(IDescriptorContext context, SortInputTypeDefinition definition, string scope);
    [CompilerGeneratedAttribute]
protected ISortConvention get_Convention();
    [CompilerGeneratedAttribute]
protected internal virtual SortInputTypeDefinition get_Definition();
    [CompilerGeneratedAttribute]
protected virtual void set_Definition(SortInputTypeDefinition value);
    [CompilerGeneratedAttribute]
protected BindableList`1<SortFieldDescriptor> get_Fields();
    private sealed virtual override Type HotChocolate.Types.IHasRuntimeType.get_RuntimeType();
    protected virtual void OnCreateDefinition(SortInputTypeDefinition definition);
    protected virtual void OnCompleteFields(IDictionary`2<string, SortFieldDefinition> fields, ISet`1<MemberInfo> handledProperties);
    public sealed virtual ISortInputTypeDescriptor Name(string value);
    public sealed virtual ISortInputTypeDescriptor Description(string value);
    protected ISortInputTypeDescriptor BindFields(BindingBehavior bindingBehavior);
    protected ISortInputTypeDescriptor BindFieldsExplicitly();
    protected ISortInputTypeDescriptor BindFieldsImplicitly();
    public sealed virtual ISortFieldDescriptor Field(string name);
    public sealed virtual ISortInputTypeDescriptor Ignore(string name);
    public sealed virtual ISortInputTypeDescriptor Directive(TDirective directive);
    public sealed virtual ISortInputTypeDescriptor Directive();
    public sealed virtual ISortInputTypeDescriptor Directive(string name, ArgumentNode[] arguments);
    public static SortInputTypeDescriptor New(IDescriptorContext context, Type entityType, string scope);
    public static SortInputTypeDescriptor`1<T> New(IDescriptorContext context, Type entityType, string scope);
    public static SortInputTypeDescriptor FromSchemaType(IDescriptorContext context, Type schemaType, string scope);
    public static SortInputTypeDescriptor From(IDescriptorContext context, SortInputTypeDefinition definition, string scope);
    public static SortInputTypeDescriptor`1<T> From(IDescriptorContext context, SortInputTypeDefinition definition, string scope);
    public static SortInputTypeDescriptor`1<T> From(SortInputTypeDescriptor descriptor, string scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortInputTypeDescriptor`1 : SortInputTypeDescriptor {
    protected internal SortInputTypeDescriptor`1(IDescriptorContext context, Type entityType, string scope);
    protected internal SortInputTypeDescriptor`1(IDescriptorContext context, string scope);
    protected internal SortInputTypeDescriptor`1(IDescriptorContext context, SortInputTypeDefinition definition, string scope);
    protected virtual void OnCompleteFields(IDictionary`2<string, SortFieldDefinition> fields, ISet`1<MemberInfo> handledProperties);
    public sealed virtual ISortInputTypeDescriptor`1<T> Name(string value);
    public sealed virtual ISortInputTypeDescriptor`1<T> Description(string value);
    public sealed virtual ISortInputTypeDescriptor`1<T> BindFields(BindingBehavior bindingBehavior);
    public sealed virtual ISortInputTypeDescriptor`1<T> BindFieldsExplicitly();
    public sealed virtual ISortInputTypeDescriptor`1<T> BindFieldsImplicitly();
    public sealed virtual ISortFieldDescriptor Field(Expression`1<Func`2<T, TField>> propertyOrMember);
    public sealed virtual ISortInputTypeDescriptor`1<T> Ignore(string name);
    public sealed virtual ISortInputTypeDescriptor`1<T> Ignore(Expression`1<Func`2<T, object>> propertyOrMember);
    public sealed virtual ISortInputTypeDescriptor`1<T> Directive(TDirective directive);
    public sealed virtual ISortInputTypeDescriptor`1<T> Directive();
    public sealed virtual ISortInputTypeDescriptor`1<T> Directive(string name, ArgumentNode[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("12")]
public abstract class HotChocolate.Data.Sorting.SortInputTypeDescriptorAttribute : DescriptorAttribute {
    protected internal sealed virtual void TryConfigure(IDescriptorContext context, IDescriptor descriptor, ICustomAttributeProvider element);
    public abstract virtual void OnConfigure(IDescriptorContext context, ISortInputTypeDescriptor descriptor, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Sorting.SortInputTypeNameDependencyDescriptor`1 : object {
    private ISortInputTypeDescriptor`1<T> _descriptor;
    private Func`2<INamedType, string> _createName;
    public SortInputTypeNameDependencyDescriptor`1(ISortInputTypeDescriptor`1<T> descriptor, Func`2<INamedType, string> createName);
    public sealed virtual ISortInputTypeDescriptor`1<T> DependsOn();
    public sealed virtual ISortInputTypeDescriptor`1<T> DependsOn(Type schemaType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortOperation : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public int Id { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public SortOperation(int id, string name, string description);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    internal static SortOperation FromDefinition(SortOperationConventionDefinition definition);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortOperationConventionDefinition : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public int Id { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortOperationConventionDescriptor : object {
    [CompilerGeneratedAttribute]
private SortOperationConventionDefinition <Definition>k__BackingField;
    protected SortOperationConventionDefinition Definition { get; }
    protected SortOperationConventionDescriptor(int operationId);
    [CompilerGeneratedAttribute]
protected SortOperationConventionDefinition get_Definition();
    public SortOperationConventionDefinition CreateDefinition();
    public sealed virtual ISortOperationConventionDescriptor Name(string name);
    public sealed virtual ISortOperationConventionDescriptor Description(string description);
    public static SortOperationConventionDescriptor New(int operationId);
}
public abstract class HotChocolate.Data.Sorting.SortOperationHandler`2 : object {
    [NullableContextAttribute("1")]
public virtual bool TryHandleEnter(TContext context, ISortField field, ISortEnumValue sortValue, EnumValueNode node, ISyntaxVisitorAction& action);
    [NullableContextAttribute("1")]
public abstract virtual bool CanHandle(ITypeCompletionContext context, EnumTypeDefinition typeDefinition, SortEnumValueDefinition valueDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Sorting.SortProvider`1 : Convention`1<SortProviderDefinition> {
    private List`1<ISortFieldHandler`1<TContext>> _fieldHandlers;
    private List`1<ISortOperationHandler`1<TContext>> _operationHandlers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ISortProviderDescriptor`1<TContext>> _configure;
    [NullableAttribute("2")]
internal SortProviderDefinition Definition { get; }
    public IReadOnlyCollection`1<ISortFieldHandler> FieldHandlers { get; }
    public IReadOnlyCollection`1<ISortOperationHandler> OperationHandlers { get; }
    public SortProvider`1(Action`1<ISortProviderDescriptor`1<TContext>> configure);
    [NullableContextAttribute("2")]
internal SortProviderDefinition get_Definition();
    public sealed virtual IReadOnlyCollection`1<ISortFieldHandler> get_FieldHandlers();
    public sealed virtual IReadOnlyCollection`1<ISortOperationHandler> get_OperationHandlers();
    public void Initialize(IConventionContext context);
    protected virtual SortProviderDefinition CreateDefinition(IConventionContext context);
    private sealed virtual override void HotChocolate.Data.Sorting.ISortProviderConvention.Initialize(IConventionContext context);
    private sealed virtual override void HotChocolate.Data.Sorting.ISortProviderConvention.Complete(IConventionContext context);
    protected internal virtual void Complete(IConventionContext context);
    protected virtual void Configure(ISortProviderDescriptor`1<TContext> descriptor);
    public abstract virtual FieldMiddleware CreateExecutor(string argumentName);
    public virtual void ConfigureField(string argumentName, IObjectFieldDescriptor descriptor);
    public virtual ISortMetadata CreateMetaData(ITypeCompletionContext context, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition fieldDefinition);
}
public class HotChocolate.Data.Sorting.SortProviderDefinition : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<Type, ISortFieldHandler>> <Handlers>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<Type, ISortOperationHandler>> <OperationHandlers>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ValueTuple`2<Type, ISortFieldHandler>> Handlers { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ValueTuple`2<Type, ISortOperationHandler>> OperationHandlers { get; }
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<Type, ISortFieldHandler>> get_Handlers();
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<Type, ISortOperationHandler>> get_OperationHandlers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortProviderDescriptor`1 : object {
    [CompilerGeneratedAttribute]
private SortProviderDefinition <Definition>k__BackingField;
    protected SortProviderDefinition Definition { get; }
    [CompilerGeneratedAttribute]
protected SortProviderDefinition get_Definition();
    public SortProviderDefinition CreateDefinition();
    public sealed virtual ISortProviderDescriptor`1<TContext> AddFieldHandler();
    public sealed virtual ISortProviderDescriptor`1<TContext> AddFieldHandler(TFieldHandler fieldHandler);
    public sealed virtual ISortProviderDescriptor`1<TContext> AddOperationHandler();
    public sealed virtual ISortProviderDescriptor`1<TContext> AddOperationHandler(TOperationHandler operationHandler);
    public static SortProviderDescriptor`1<TContext> New();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Sorting.SortProviderExtensions`1 : ConventionExtension`1<SortProviderDefinition> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ISortProviderDescriptor`1<TContext>> _configure;
    public SortProviderExtensions`1(Action`1<ISortProviderDescriptor`1<TContext>> configure);
    private sealed virtual override void HotChocolate.Data.Sorting.ISortProviderConvention.Initialize(IConventionContext context);
    private sealed virtual override void HotChocolate.Data.Sorting.ISortProviderConvention.Complete(IConventionContext context);
    protected virtual SortProviderDefinition CreateDefinition(IConventionContext context);
    protected virtual void Configure(ISortProviderDescriptor`1<TContext> descriptor);
    public virtual void Merge(IConventionContext context, Convention convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Data.Sorting.SortTypeInterceptor : TypeInterceptor {
    private Dictionary`2<string, ISortConvention> _conventions;
    public virtual void OnBeforeRegisterDependencies(ITypeDiscoveryContext discoveryContext, DefinitionBase definition);
    public virtual void OnBeforeCompleteName(ITypeCompletionContext completionContext, DefinitionBase definition);
    public virtual void OnBeforeCompleteType(ITypeCompletionContext completionContext, DefinitionBase definition);
    private void OnBeforeRegisteringDependencies(ITypeDiscoveryContext discoveryContext, SortInputTypeDefinition definition);
    private void OnBeforeRegisteringDependencies(ITypeDiscoveryContext discoveryContext, SortEnumTypeDefinition definition);
    private void OnBeforeCompleteName(ITypeCompletionContext completionContext, SortInputTypeDefinition definition);
    private void OnBeforeCompleteName(ITypeCompletionContext completionContext, SortEnumTypeDefinition definition);
    private void OnBeforeCompleteType(ITypeCompletionContext completionContext, SortInputTypeDefinition definition);
    private void OnBeforeCompleteType(ITypeCompletionContext completionContext, SortEnumTypeDefinition definition);
    private ISortConvention GetConvention(IDescriptorContext context, string scope);
}
[ExtensionAttribute]
public static class HotChocolate.Data.Sorting.SortTypeNameExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ISortInputTypeNameDependencyDescriptor`1<T> Name(ISortInputTypeDescriptor`1<T> descriptor, Func`2<INamedType, string> createName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.Sorting.SortVisitor`2 : SortVisitorBase`2<TContext, T> {
    protected virtual ISyntaxVisitorAction OnFieldEnter(TContext context, ISortField field, ObjectFieldNode node);
    protected virtual ISyntaxVisitorAction OnFieldLeave(TContext context, ISortField field, ObjectFieldNode node);
    protected virtual ISyntaxVisitorAction OnOperationEnter(TContext context, ISortField field, ISortEnumValue sortValue, EnumValueNode valueNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Sorting.SortVisitorBase`1 : SyntaxWalker`1<TContext> {
    protected virtual ISyntaxVisitorAction Leave(ObjectFieldNode node, TContext context);
    protected virtual ISyntaxVisitorAction Enter(ObjectFieldNode node, TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class HotChocolate.Data.Sorting.SortVisitorBase`2 : SortVisitorBase`1<TContext> {
    protected abstract virtual ISyntaxVisitorAction OnFieldEnter(TContext context, ISortField field, ObjectFieldNode node);
    protected abstract virtual ISyntaxVisitorAction OnFieldLeave(TContext context, ISortField field, ObjectFieldNode node);
    protected abstract virtual ISyntaxVisitorAction OnOperationEnter(TContext context, ISortField field, ISortEnumValue sortEnumValue, EnumValueNode enumValueNode);
    protected virtual ISyntaxVisitorAction Enter(ObjectFieldNode node, TContext context);
    protected virtual ISyntaxVisitorAction Enter(IValueNode node, TContext context);
    protected virtual ISyntaxVisitorAction Leave(ObjectFieldNode node, TContext context);
    protected virtual ISyntaxVisitorAction Enter(ListValueNode node, TContext context);
    protected virtual ISyntaxVisitorAction Leave(ListValueNode node, TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Data.Sorting.SortVisitorContext`1 : object {
    [CompilerGeneratedAttribute]
private Stack`1<IType> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<IInputField> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<T> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<T> <Instance>k__BackingField;
    public Stack`1<IType> Types { get; }
    public Stack`1<IInputField> Fields { get; }
    public IList`1<IError> Errors { get; }
    public Queue`1<T> Operations { get; }
    public Stack`1<T> Instance { get; }
    protected SortVisitorContext`1(ISortInputType initialType);
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<IType> get_Types();
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<IInputField> get_Fields();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IError> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual Queue`1<T> get_Operations();
    [CompilerGeneratedAttribute]
public sealed virtual Stack`1<T> get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Data.Sorting.SortVisitorContextExtensions : object {
    [ExtensionAttribute]
public static void ReportError(ISortVisitorContext`1<T> context, IError error);
    [ExtensionAttribute]
public static T GetInstance(ISortVisitorContext`1<T> context);
    [ExtensionAttribute]
public static void PushInstance(ISortVisitorContext`1<T> context, T nextExpression);
    [ExtensionAttribute]
public static T PopInstance(ISortVisitorContext`1<T> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Data.Sorting.TypeReferenceComparer : object {
    public static IEqualityComparer`1<TypeReference> Default;
    private static TypeReferenceComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TypeReference x, TypeReference y);
    public sealed virtual int GetHashCode(TypeReference obj);
    private static bool CompareSchemaAndExtendedTypeRef(SchemaTypeReference schemaTypeReference, ExtendedTypeReference extendedTypeReference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Data.ThrowHelper : object {
    public static SchemaException FilterConvention_TypeOfMemberIsUnknown(MemberInfo member);
    public static SchemaException FilterConvention_TypeIsUnknown(Type type);
    public static SchemaException FilterConvention_OperationNameNotFound(int operation);
    public static SchemaException FilterConvention_NoProviderFound(Type convention, string scope);
    public static SchemaException FilterConvention_ProviderHasToBeInitializedByConvention(Type provider, string scope);
    public static SchemaException FilterProvider_NoHandlersConfigured(IFilterProvider filterProvider);
    public static SchemaException Filtering_FilteringWasNotFound(IResolverContext context);
    public static SchemaException Filtering_TypeMissmatch(IResolverContext context, Type expectedType, Type resultType);
    public static SchemaException FilterInterceptor_NoHandlerFoundForField(FilterInputTypeDefinition type, FilterFieldDefinition field);
    public static SchemaException FilterInterceptor_OperationHasNoTypeSpecified(FilterInputTypeDefinition type, FilterFieldDefinition field);
    public static GraphQLException FilterConvention_CouldNotConvertValue(IValueNode node);
    public static SchemaException FilterObjectFieldDescriptorExtensions_CannotInfer();
    public static SchemaException FilterDescriptorContextExtensions_NoConvention(string scope);
    public static SchemaException FilterProvider_UnableToCreateFieldHandler(IFilterProvider filterProvider, Type fieldHandler);
    public static SchemaException SortProvider_UnableToCreateFieldHandler(ISortProvider sortProvider, Type fieldHandler);
    public static SchemaException SortProvider_UnableToCreateOperationHandler(ISortProvider sortProvider, Type operationHandler);
    public static SchemaException SortProvider_NoFieldHandlersConfigured(ISortProvider filterProvider);
    public static SchemaException SortProvider_NoOperationHandlersConfigured(ISortProvider sortProvider);
    public static SchemaException SortDescriptorContextExtensions_NoConvention(string scope);
    public static SchemaException SortInterceptor_NoFieldHandlerFoundForField(SortInputTypeDefinition type, SortFieldDefinition field);
    public static SchemaException SortInterceptor_NoOperationHandlerFoundForValue(EnumTypeDefinition type, SortEnumValueDefinition value);
    public static SchemaException SortConvention_NoProviderFound(Type convention, string scope);
    public static SchemaException SortConvention_TypeOfMemberIsUnknown(MemberInfo member);
    public static SchemaException SortConvention_OperationNameNotFound(int operation);
    public static SchemaException SortObjectFieldDescriptorExtensions_CannotInfer();
    public static SchemaException SortConvention_OperationIsNotNamed(ISortConvention sortConvention, SortOperation sortOperation);
    public static SchemaException Sorting_TypeOfInvalidFormat(IType type);
    public static SchemaException Sorting_SortingWasNotFound(IResolverContext context);
    public static SchemaException Sorting_TypeMissmatch(IResolverContext context, Type expectedType, Type resultType);
    public static SchemaException ProjectionProvider_NoHandlersConfigured(IProjectionProvider projectionConvention);
    public static SchemaException ProjectionConvention_NoProviderFound(Type convention, string scope);
    public static SchemaException ProjectionConvention_CouldNotProject();
    public static SchemaException ProjectionConvention_NodeFieldWasInInvalidState();
    public static SchemaException Projection_ProjectionWasNotFound(IResolverContext context);
    public static SchemaException Projection_TypeMismatch(IResolverContext context, Type expectedType, Type resultType);
    public static InvalidOperationException PagingProjectionOptimizer_NotAPagingField(IType actualType, IObjectField fieldName);
    public static InvalidOperationException Filtering_CouldNotParseValue(IFilterFieldHandler handler, IValueNode valueNode, IType expectedType, IFilterField field);
    public static InvalidOperationException QueryableFiltering_MemberInvalid(MemberInfo memberInfo, IFilterField field);
    public static InvalidOperationException QueryableFiltering_ExpressionParameterInvalid(Type type, IFilterField field);
    public static SchemaException QueryableFilterProvider_ExpressionParameterInvalid(ITypeSystemObject type, IFilterInputTypeDefinition typeDefinition, IFilterFieldDefinition field);
    public static InvalidOperationException QueryableFiltering_NoMemberDeclared(IFilterField field);
    public static InvalidOperationException Filtering_QueryableCombinator_QueueEmpty(QueryableCombinator combinator);
    public static InvalidOperationException Filtering_QueryableCombinator_InvalidCombinator(QueryableCombinator combinator, FilterCombinator operation);
    public static InvalidOperationException ProjectionVisitor_MemberInvalid(MemberInfo memberInfo);
    public static InvalidOperationException ProjectionVisitor_NoMemberFound();
    public static InvalidOperationException ProjectionVisitor_InvalidState_NoParentScope();
    public static InvalidOperationException ProjectionVisitor_NoConstructorFoundForSet(Expression expression, Type setType);
    public static InvalidOperationException Sorting_InvalidState_ParentIsNoFieldSelector(ISortField field);
    public static InvalidOperationException QueryableSorting_MemberInvalid(MemberInfo memberInfo, ISortField field);
    public static InvalidOperationException QueryableSorting_ExpressionParameterInvalid(Type type, ISortField field);
    public static SchemaException QueryableSortProvider_ExpressionParameterInvalid(ITypeSystemObject type, ISortInputTypeDefinition typeDefinition, ISortFieldDefinition field);
    public static InvalidOperationException QueryableSorting_NoMemberDeclared(ISortField field);
    public static InvalidOperationException SortField_ArgumentInvalid_NoHandlerWasFound();
    public static InvalidOperationException ProjectionVisitor_CouldNotUnwrapType(IType type);
    public static GraphQLException GlobalIdInputValueFormatter_SpecifiedValueIsNotAValidId();
    public static GraphQLException GlobalIdInputValueFormatter_IdsHaveInvalidFormat(IEnumerable`1<string> ids);
    public static InvalidOperationException SelectionContext_NoTypeForAbstractFieldProvided(INamedType type, IEnumerable`1<ObjectType> possibleTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.TimeSpanOperationFilterInputType : ComparableOperationFilterInputType`1<TimeSpanType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.UrlOperationFilterInputType : ComparableOperationFilterInputType`1<UrlType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.UseFilteringAttribute : ObjectFieldDescriptorAttribute {
    [NullableAttribute("1")]
private static MethodInfo _generic;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    public Type Type { get; public set; }
    public string Scope { get; public set; }
    public UseFilteringAttribute(Type filterType, int order);
    private static UseFilteringAttribute();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [NullableContextAttribute("1")]
protected virtual void OnConfigure(IDescriptorContext context, IObjectFieldDescriptor descriptor, MemberInfo member);
}
[AttributeUsageAttribute("192")]
public class HotChocolate.Data.UseFilteringAttribute`1 : UseFilteringAttribute {
    public UseFilteringAttribute`1(int order);
}
public class HotChocolate.Data.UseFirstOrDefaultAttribute : ObjectFieldDescriptorAttribute {
    public UseFirstOrDefaultAttribute(int order);
    [NullableContextAttribute("1")]
protected virtual void OnConfigure(IDescriptorContext context, IObjectFieldDescriptor descriptor, MemberInfo member);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.UseProjectionAttribute : ObjectFieldDescriptorAttribute {
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    public string Scope { get; public set; }
    public UseProjectionAttribute(int order);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [NullableContextAttribute("1")]
protected virtual void OnConfigure(IDescriptorContext context, IObjectFieldDescriptor descriptor, MemberInfo member);
}
public class HotChocolate.Data.UseSingleOrDefaultAttribute : ObjectFieldDescriptorAttribute {
    public UseSingleOrDefaultAttribute(int order);
    [NullableContextAttribute("1")]
protected virtual void OnConfigure(IDescriptorContext context, IObjectFieldDescriptor descriptor, MemberInfo member);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Data.UseSortingAttribute : ObjectFieldDescriptorAttribute {
    [NullableAttribute("1")]
private static MethodInfo _generic;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    public Type Type { get; public set; }
    public string Scope { get; public set; }
    public UseSortingAttribute(Type sortingType, int order);
    private static UseSortingAttribute();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [NullableContextAttribute("1")]
protected virtual void OnConfigure(IDescriptorContext context, IObjectFieldDescriptor descriptor, MemberInfo member);
}
[AttributeUsageAttribute("192")]
public class HotChocolate.Data.UseSortingAttribute`1 : UseSortingAttribute {
    public UseSortingAttribute`1(int order);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Data.Utilities.ExtensionHelpers : object {
    public static void MergeListDictionary(IDictionary`2<TKey, List`1<TValue>> from, IDictionary`2<TKey, List`1<TValue>> to);
    public static void MergeDictionary(IDictionary`2<TKey, TValue> from, IDictionary`2<TKey, TValue> to);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Data.UuidOperationFilterInputType : ComparableOperationFilterInputType`1<UuidType> {
    protected virtual void Configure(IFilterInputTypeDescriptor descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.FilterSchemaBuilderExtensions : object {
    [ExtensionAttribute]
public static ISchemaBuilder AddFiltering(ISchemaBuilder builder, string name, bool compatabilityMode);
    [ExtensionAttribute]
public static ISchemaBuilder AddFiltering(ISchemaBuilder builder, Action`1<IFilterConventionDescriptor> configure, string name);
    [ExtensionAttribute]
public static ISchemaBuilder AddFiltering(ISchemaBuilder builder, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.ProjectionsSchemaBuilderExtensions : object {
    [ExtensionAttribute]
public static ISchemaBuilder AddProjections(ISchemaBuilder builder);
    [ExtensionAttribute]
public static ISchemaBuilder AddProjections(ISchemaBuilder builder, Action`1<IProjectionConventionDescriptor> configure, string name);
    [ExtensionAttribute]
public static ISchemaBuilder AddProjections(ISchemaBuilder builder, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.SortingSchemaBuilderExtensions : object {
    [ExtensionAttribute]
public static ISchemaBuilder AddSorting(ISchemaBuilder builder, string name);
    [ExtensionAttribute]
public static ISchemaBuilder AddSorting(ISchemaBuilder builder, Action`1<ISortConventionDescriptor> configure, string name);
    [ExtensionAttribute]
public static ISchemaBuilder AddSorting(ISchemaBuilder builder, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.FilterFieldDescriptorExtensions : object {
    [ExtensionAttribute]
public static void MakeNullable(IFilterFieldDescriptor descriptor);
    [ExtensionAttribute]
public static void MakeNullable(IFilterOperationFieldDescriptor descriptor);
    private static TypeReference RewriteTypeToNullableType(FilterFieldDefinition definition, ITypeInspector typeInspector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.FilterObjectFieldDescriptorExtensions : object {
    private static MethodInfo _factoryTemplate;
    private static FilterObjectFieldDescriptorExtensions();
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseFiltering(IObjectFieldDescriptor descriptor, string scope);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseFiltering(IObjectFieldDescriptor descriptor, string scope);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseFiltering(IObjectFieldDescriptor descriptor, Action`1<IFilterInputTypeDescriptor`1<T>> configure, string scope);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseFiltering(IObjectFieldDescriptor descriptor, Type type, string scope);
    [NullableContextAttribute("2")]
private static IObjectFieldDescriptor UseFiltering(IObjectFieldDescriptor descriptor, Type filterType, ITypeSystemMember filterTypeInstance, string scope);
    private static void CompileMiddleware(ITypeCompletionContext context, ObjectFieldDefinition definition, TypeReference argumentTypeReference, FieldMiddlewareDefinition placeholder, string scope);
    private static FieldMiddleware CreateMiddleware(IFilterConvention convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.ProjectionObjectFieldDescriptorExtensions : object {
    private static MethodInfo _factoryTemplate;
    private static ProjectionObjectFieldDescriptorExtensions();
    [ExtensionAttribute]
public static IObjectFieldDescriptor IsProjected(IObjectFieldDescriptor descriptor, bool isProjected);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseProjection(IObjectFieldDescriptor descriptor, string scope);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseProjection(IObjectFieldDescriptor descriptor, string scope);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseProjection(IObjectFieldDescriptor descriptor, Type type, string scope);
    private static void CompileMiddleware(Type type, ObjectFieldDefinition definition, FieldMiddlewareDefinition placeholder, ITypeCompletionContext context, string scope);
    private static FieldMiddleware CreateMiddleware(IProjectionConvention convention);
    private static Selection UnwrapMutationPayloadSelection(ISelectionSet selectionSet, ObjectField field);
    private static Selection CreateProxySelection(ISelection selection, NodeFieldProxy field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.SingleOrDefaultObjectFieldDescriptorExtensions : object {
    private static Type _firstMiddleware;
    private static Type _singleMiddleware;
    private static SingleOrDefaultObjectFieldDescriptorExtensions();
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseFirstOrDefault(IObjectFieldDescriptor descriptor);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseSingleOrDefault(IObjectFieldDescriptor descriptor);
    [ExtensionAttribute]
private static IObjectFieldDescriptor ApplyMiddleware(IObjectFieldDescriptor descriptor, string optionName, Type middlewareDefinition);
    private static void CompileMiddleware(Type type, ObjectFieldDefinition definition, FieldMiddlewareDefinition placeholder, Type middlewareDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.SortObjectFieldDescriptorExtensions : object {
    private static MethodInfo _factoryTemplate;
    private static SortObjectFieldDescriptorExtensions();
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseSorting(IObjectFieldDescriptor descriptor, string scope);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseSorting(IObjectFieldDescriptor descriptor, string scope);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseSorting(IObjectFieldDescriptor descriptor, Type type, string scope);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseSorting(IObjectFieldDescriptor descriptor, Action`1<ISortInputTypeDescriptor`1<T>> configure, string scope);
    [NullableContextAttribute("2")]
private static IObjectFieldDescriptor UseSortingInternal(IObjectFieldDescriptor descriptor, Type sortType, ITypeSystemMember sortTypeInstance, string scope);
    private static void CompileMiddleware(ITypeCompletionContext context, ObjectFieldDefinition definition, ArgumentDefinition argumentDefinition, FieldMiddlewareDefinition placeholder, string scope);
    private static FieldMiddleware CreateMiddleware(ISortConvention convention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HotChocolateDataRequestBuilderExtensions : object {
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddFiltering(IRequestExecutorBuilder builder, string name, bool compatabilityMode);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddFiltering(IRequestExecutorBuilder builder, Action`1<IFilterConventionDescriptor> configure, string name);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddFiltering(IRequestExecutorBuilder builder, string name);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSorting(IRequestExecutorBuilder builder, string name);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSorting(IRequestExecutorBuilder builder, Action`1<ISortConventionDescriptor> configure, string name);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSorting(IRequestExecutorBuilder builder, string name);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddProjections(IRequestExecutorBuilder builder, string name);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddProjections(IRequestExecutorBuilder builder, Action`1<IProjectionConventionDescriptor> configure, string name);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddProjections(IRequestExecutorBuilder builder, string name);
}
