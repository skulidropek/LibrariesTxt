[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.AutoUpdateRequestExecutorProxy : object {
    private SemaphoreSlim _semaphore;
    private RequestExecutorProxy _executorProxy;
    private IRequestExecutor _executor;
    private bool _disposed;
    internal IRequestExecutor InnerExecutor { get; }
    public ISchema Schema { get; }
    public IServiceProvider Services { get; }
    public ulong Version { get; }
    private AutoUpdateRequestExecutorProxy(RequestExecutorProxy requestExecutorProxy, IRequestExecutor initialExecutor);
    internal IRequestExecutor get_InnerExecutor();
    [AsyncStateMachineAttribute("HotChocolate.Execution.AutoUpdateRequestExecutorProxy/<CreateAsync>d__7")]
public static ValueTask`1<AutoUpdateRequestExecutorProxy> CreateAsync(RequestExecutorProxy requestExecutorProxy, CancellationToken cancellationToken);
    public static AutoUpdateRequestExecutorProxy Create(RequestExecutorProxy requestExecutorProxy, IRequestExecutor initialExecutor);
    public sealed virtual ISchema get_Schema();
    public sealed virtual IServiceProvider get_Services();
    public sealed virtual ulong get_Version();
    public sealed virtual Task`1<IExecutionResult> ExecuteAsync(IQueryRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<IResponseStream> ExecuteBatchAsync(IReadOnlyList`1<IQueryRequest> requestBatch, CancellationToken cancellationToken);
    private void BeginUpdateExecutor();
    [AsyncStateMachineAttribute("HotChocolate.Execution.AutoUpdateRequestExecutorProxy/<UpdateExecutorAsync>d__18")]
private ValueTask UpdateExecutorAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(object _, EventArgs _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Batching.BatchExecutor : object {
    private IErrorHandler _errorHandler;
    private ITypeConverter _typeConverter;
    private InputFormatter _inputFormatter;
    public BatchExecutor(IErrorHandler errorHandler, ITypeConverter typeConverter, InputFormatter inputFormatter);
    public IAsyncEnumerable`1<IQueryResult> ExecuteAsync(IRequestExecutor requestExecutor, IReadOnlyList`1<IQueryRequest> requestBatch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Batching.CollectVariablesVisitationMap : VisitationMap {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, FragmentDefinitionNode> _fragments;
    public void Initialize(IReadOnlyDictionary`2<string, FragmentDefinitionNode> fragments);
    protected virtual void ResolveChildren(OperationDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(VariableNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(FieldNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ArgumentNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(FragmentSpreadNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(InlineFragmentNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(FragmentDefinitionNode node, IList`1<SyntaxNodeInfo> children);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Batching.CollectVariablesVisitor : object {
    private Dictionary`2<string, VariableDefinitionNode> _variables;
    private HashSet`1<string> _declared;
    private Stack`1<IType> _type;
    private Stack`1<IOutputField> _field;
    private Stack`1<VisitorAction> _action;
    private HashSet`1<string> _touchedFragments;
    private ISchema _schema;
    public IReadOnlyCollection`1<VariableDefinitionNode> VariableDeclarations { get; }
    public IReadOnlyCollection`1<string> TouchedFragments { get; }
    public CollectVariablesVisitor(ISchema schema);
    public IReadOnlyCollection`1<VariableDefinitionNode> get_VariableDeclarations();
    public IReadOnlyCollection`1<string> get_TouchedFragments();
    public sealed virtual VisitorAction Enter(OperationDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(OperationDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Enter(FieldNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(FieldNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Enter(ArgumentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(ArgumentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Enter(ObjectFieldNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(ObjectFieldNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Enter(VariableNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(VariableNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Enter(InlineFragmentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(InlineFragmentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Enter(FragmentDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(FragmentDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Enter(FragmentSpreadNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(FragmentSpreadNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Batching.ExportDirective : object {
    [CompilerGeneratedAttribute]
private string <As>k__BackingField;
    public string As { get; public set; }
    [CompilerGeneratedAttribute]
public string get_As();
    [CompilerGeneratedAttribute]
public void set_As(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Execution.Batching.ExportDirectiveHelper : object {
    public static string Name;
    public static string ExportedVariables;
    [ExtensionAttribute]
public static T AddExportedVariables(T builder, ConcurrentBag`1<ExportedVariable> exportedVariables);
    [ExtensionAttribute]
public static void ExportValueAsVariable(IMiddlewareContext context, ExportDirective directive);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Execution.Batching.ExportDirectiveType : DirectiveType`1<ExportDirective> {
    protected virtual void Configure(IDirectiveTypeDescriptor`1<ExportDirective> descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Batching.ExportedVariable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    public IType Type { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public ExportedVariable(string name, IType type, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IType get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Caching.DefaultComplexityAnalyzerCache : object {
    private Cache`1<ComplexityAnalyzerDelegate> _cache;
    public int Capacity { get; }
    public int Count { get; }
    public DefaultComplexityAnalyzerCache(int capacity);
    public sealed virtual int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual bool TryGetAnalyzer(string operationId, ComplexityAnalyzerDelegate& analyzer);
    public sealed virtual void TryAddAnalyzer(string operationId, ComplexityAnalyzerDelegate analyzer);
    public sealed virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Caching.DefaultDocumentCache : object {
    private Cache`1<DocumentNode> _cache;
    public int Capacity { get; }
    public int Count { get; }
    public DefaultDocumentCache(int capacity);
    public sealed virtual int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual void TryAddDocument(string documentId, DocumentNode document);
    public sealed virtual bool TryGetDocument(string documentId, DocumentNode& document);
    public sealed virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Caching.DefaultPreparedOperationCache : object {
    private Cache`1<IOperation> _cache;
    public int Capacity { get; }
    public int Count { get; }
    public DefaultPreparedOperationCache(int capacity);
    public sealed virtual int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual void TryAddOperation(string operationId, IOperation operation);
    public sealed virtual bool TryGetOperation(string operationId, IOperation& operation);
    public sealed virtual void Clear();
}
[NullableContextAttribute("1")]
internal interface HotChocolate.Execution.Caching.IComplexityAnalyzerCache {
    public int Capacity { get; }
    public int Count { get; }
    public abstract virtual int get_Capacity();
    public abstract virtual int get_Count();
    public abstract virtual bool TryGetAnalyzer(string operationId, ComplexityAnalyzerDelegate& analyzer);
    public abstract virtual void TryAddAnalyzer(string operationId, ComplexityAnalyzerDelegate analyzer);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Caching.IPreparedOperationCache {
    public int Capacity { get; }
    public int Count { get; }
    public abstract virtual int get_Capacity();
    public abstract virtual int get_Count();
    public abstract virtual bool TryGetOperation(string operationId, IOperation& operation);
    public abstract virtual void TryAddOperation(string operationId, IOperation operation);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Configuration.ConfigurationContext : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchemaBuilder <SchemaBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ApplicationServices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ContextData>k__BackingField;
    public string SchemaName { get; }
    public ISchemaBuilder SchemaBuilder { get; }
    public IServiceProvider ApplicationServices { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public ConfigurationContext(string schemaName, ISchemaBuilder schemaBuilder, IServiceProvider applicationServices);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public ISchemaBuilder get_SchemaBuilder();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ApplicationServices();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_ContextData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Configuration.ConfigureRequestExecutorSetup : object {
    private Action`1<RequestExecutorSetup> _configure;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    public string SchemaName { get; }
    public ConfigureRequestExecutorSetup(string schemaName, Action`1<RequestExecutorSetup> configure);
    public ConfigureRequestExecutorSetup(string schemaName, RequestExecutorSetup options);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SchemaName();
    public sealed virtual void Configure(RequestExecutorSetup options);
}
internal class HotChocolate.Execution.Configuration.DefaultApplicationServiceProvider : object {
    [NullableAttribute("1")]
private IServiceProvider _applicationServices;
    [NullableContextAttribute("1")]
public DefaultApplicationServiceProvider(IServiceProvider applicationServices);
    [NullableContextAttribute("1")]
public sealed virtual object GetService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Configuration.DefaultRequestExecutorBuilder : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public string Name { get; }
    public IServiceCollection Services { get; }
    public DefaultRequestExecutorBuilder(IServiceCollection services, string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Configuration.DefaultRequestExecutorOptionsMonitor : object {
    private SemaphoreSlim _semaphore;
    private IOptionsMonitor`1<RequestExecutorSetup> _optionsMonitor;
    private IRequestExecutorOptionsProvider[] _optionsProviders;
    private Dictionary`2<string, List`1<IConfigureRequestExecutorSetup>> _configs;
    private List`1<IDisposable> _disposables;
    private List`1<Action`1<string>> _listeners;
    private bool _initialized;
    private bool _disposed;
    public DefaultRequestExecutorOptionsMonitor(IOptionsMonitor`1<RequestExecutorSetup> optionsMonitor, IEnumerable`1<IRequestExecutorOptionsProvider> optionsProviders);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Configuration.DefaultRequestExecutorOptionsMonitor/<GetAsync>d__9")]
public sealed virtual ValueTask`1<RequestExecutorSetup> GetAsync(string schemaName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Configuration.DefaultRequestExecutorOptionsMonitor/<InitializeAsync>d__10")]
private ValueTask InitializeAsync(CancellationToken cancellationToken);
    public sealed virtual IDisposable OnChange(Action`1<string> listener);
    private void OnChange(IConfigureRequestExecutorSetup changes);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Implement IParameterExpressionBuilder")]
internal class HotChocolate.Execution.Configuration.DefaultResolverCompilerBuilder : object {
    [CompilerGeneratedAttribute]
private IRequestExecutorBuilder <RequestExecutorBuilder>k__BackingField;
    public IRequestExecutorBuilder RequestExecutorBuilder { get; }
    public DefaultResolverCompilerBuilder(IRequestExecutorBuilder requestExecutorBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual IRequestExecutorBuilder get_RequestExecutorBuilder();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Configuration.IConfigureRequestExecutorSetup {
    public string SchemaName { get; }
    public abstract virtual string get_SchemaName();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Configuration.IRequestExecutorOptionsMonitor {
    public abstract virtual ValueTask`1<RequestExecutorSetup> GetAsync(string schemaName, CancellationToken cancellationToken);
    public abstract virtual IDisposable OnChange(Action`1<string> listener);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Configuration.IRequestExecutorOptionsProvider {
    public abstract virtual ValueTask`1<IEnumerable`1<IConfigureRequestExecutorSetup>> GetOptionsAsync(CancellationToken cancellationToken);
    public abstract virtual IDisposable OnChange(Action`1<IConfigureRequestExecutorSetup> listener);
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Implement IParameterExpressionBuilder")]
public interface HotChocolate.Execution.Configuration.IResolverCompilerBuilder {
    public IRequestExecutorBuilder RequestExecutorBuilder { get; }
    public abstract virtual IRequestExecutorBuilder get_RequestExecutorBuilder();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Configuration.ITypeModule {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TypesChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TypesChanged(EventHandler`1<EventArgs> value);
    public abstract virtual ValueTask`1<IReadOnlyCollection`1<ITypeSystemMember>> CreateTypesAsync(IDescriptorContext context, CancellationToken cancellationToken);
}
public class HotChocolate.Execution.Configuration.OnConfigureRequestExecutorOptions : MulticastDelegate {
    public OnConfigureRequestExecutorOptions(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ConfigurationContext context, RequestExecutorOptions options);
    public virtual IAsyncResult BeginInvoke(ConfigurationContext context, RequestExecutorOptions options, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Configuration.OnConfigureRequestExecutorOptionsAction : ValueType {
    [CompilerGeneratedAttribute]
private OnConfigureRequestExecutorOptions <Configure>k__BackingField;
    [CompilerGeneratedAttribute]
private OnConfigureRequestExecutorOptionsAsync <ConfigureAsync>k__BackingField;
    public OnConfigureRequestExecutorOptions Configure { get; }
    public OnConfigureRequestExecutorOptionsAsync ConfigureAsync { get; }
    [NullableContextAttribute("1")]
public OnConfigureRequestExecutorOptionsAction(OnConfigureRequestExecutorOptions action);
    [NullableContextAttribute("1")]
public OnConfigureRequestExecutorOptionsAction(OnConfigureRequestExecutorOptionsAsync async);
    [CompilerGeneratedAttribute]
public OnConfigureRequestExecutorOptions get_Configure();
    [CompilerGeneratedAttribute]
public OnConfigureRequestExecutorOptionsAsync get_ConfigureAsync();
}
public class HotChocolate.Execution.Configuration.OnConfigureRequestExecutorOptionsAsync : MulticastDelegate {
    public OnConfigureRequestExecutorOptionsAsync(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueTask Invoke(ConfigurationContext context, RequestExecutorOptions options, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(ConfigurationContext context, RequestExecutorOptions options, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual ValueTask EndInvoke(IAsyncResult result);
}
public class HotChocolate.Execution.Configuration.OnConfigureSchemaBuilder : MulticastDelegate {
    public OnConfigureSchemaBuilder(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ConfigurationContext context, IServiceProvider schemaServices);
    public virtual IAsyncResult BeginInvoke(ConfigurationContext context, IServiceProvider schemaServices, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Configuration.OnConfigureSchemaBuilderAction : ValueType {
    [CompilerGeneratedAttribute]
private OnConfigureSchemaBuilder <Configure>k__BackingField;
    [CompilerGeneratedAttribute]
private OnConfigureSchemaBuilderAsync <ConfigureAsync>k__BackingField;
    public OnConfigureSchemaBuilder Configure { get; }
    public OnConfigureSchemaBuilderAsync ConfigureAsync { get; }
    [NullableContextAttribute("1")]
public OnConfigureSchemaBuilderAction(OnConfigureSchemaBuilder action);
    [NullableContextAttribute("1")]
public OnConfigureSchemaBuilderAction(OnConfigureSchemaBuilderAsync asyncAction);
    [CompilerGeneratedAttribute]
public OnConfigureSchemaBuilder get_Configure();
    [CompilerGeneratedAttribute]
public OnConfigureSchemaBuilderAsync get_ConfigureAsync();
}
public class HotChocolate.Execution.Configuration.OnConfigureSchemaBuilderAsync : MulticastDelegate {
    public OnConfigureSchemaBuilderAsync(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueTask Invoke(ConfigurationContext context, IServiceProvider schemaServices, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(ConfigurationContext context, IServiceProvider schemaServices, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual ValueTask EndInvoke(IAsyncResult result);
}
public class HotChocolate.Execution.Configuration.OnConfigureSchemaServices : MulticastDelegate {
    public OnConfigureSchemaServices(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ConfigurationContext context, IServiceCollection services);
    public virtual IAsyncResult BeginInvoke(ConfigurationContext context, IServiceCollection services, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HotChocolate.Execution.Configuration.OnRequestExecutorCreated : MulticastDelegate {
    public OnRequestExecutorCreated(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ConfigurationContext context, IRequestExecutor executor);
    public virtual IAsyncResult BeginInvoke(ConfigurationContext context, IRequestExecutor executor, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAction : ValueType {
    [CompilerGeneratedAttribute]
private OnRequestExecutorCreated <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private OnRequestExecutorCreatedAsync <CreatedAsync>k__BackingField;
    public OnRequestExecutorCreated Created { get; }
    public OnRequestExecutorCreatedAsync CreatedAsync { get; }
    [NullableContextAttribute("1")]
public OnRequestExecutorCreatedAction(OnRequestExecutorCreated created);
    [NullableContextAttribute("1")]
public OnRequestExecutorCreatedAction(OnRequestExecutorCreatedAsync createdAsync);
    [CompilerGeneratedAttribute]
public OnRequestExecutorCreated get_Created();
    [CompilerGeneratedAttribute]
public OnRequestExecutorCreatedAsync get_CreatedAsync();
}
public class HotChocolate.Execution.Configuration.OnRequestExecutorCreatedAsync : MulticastDelegate {
    public OnRequestExecutorCreatedAsync(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueTask Invoke(ConfigurationContext context, IRequestExecutor executor, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(ConfigurationContext context, IRequestExecutor executor, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual ValueTask EndInvoke(IAsyncResult result);
}
public class HotChocolate.Execution.Configuration.OnRequestExecutorEvicted : MulticastDelegate {
    public OnRequestExecutorEvicted(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(IRequestExecutor executor);
    public virtual IAsyncResult BeginInvoke(IRequestExecutor executor, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAction : ValueType {
    [CompilerGeneratedAttribute]
private OnRequestExecutorEvicted <Evicted>k__BackingField;
    [CompilerGeneratedAttribute]
private OnRequestExecutorEvictedAsync <EvictedAsync>k__BackingField;
    public OnRequestExecutorEvicted Evicted { get; }
    public OnRequestExecutorEvictedAsync EvictedAsync { get; }
    [NullableContextAttribute("1")]
public OnRequestExecutorEvictedAction(OnRequestExecutorEvicted evicted);
    [NullableContextAttribute("1")]
public OnRequestExecutorEvictedAction(OnRequestExecutorEvictedAsync evictedAsync);
    [CompilerGeneratedAttribute]
public OnRequestExecutorEvicted get_Evicted();
    [CompilerGeneratedAttribute]
public OnRequestExecutorEvictedAsync get_EvictedAsync();
}
public class HotChocolate.Execution.Configuration.OnRequestExecutorEvictedAsync : MulticastDelegate {
    public OnRequestExecutorEvictedAsync(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueTask Invoke(IRequestExecutor executor, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(IRequestExecutor executor, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual ValueTask EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper : object {
    [ObsoleteAttribute("This helper only exists to allow legacy schema handling. Consider moving to the new configuration API.")]
public static IRequestExecutorBuilder SetSchemaBuilder(IRequestExecutorBuilder builder, ISchemaBuilder schemaBuilder);
    [ObsoleteAttribute("This helper only exists to allow legacy schema handling. Consider moving to the new configuration API.")]
public static IRequestExecutorBuilder SetSchema(IRequestExecutorBuilder builder, ISchema schema);
    [ObsoleteAttribute("This helper only exists to allow legacy schema handling. Consider moving to the new configuration API.")]
public static IRequestExecutorBuilder SetSchema(IRequestExecutorBuilder builder, Func`2<IServiceProvider, ISchema> schemaFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Configuration.RequestExecutorSetup : object {
    private List`1<OnConfigureSchemaBuilderAction> _onConfigureSchemaBuilderHooks;
    private List`1<OnConfigureRequestExecutorOptionsAction> _onConfigureRequestExecutorOptionsHooks;
    private List`1<RequestCoreMiddleware> _pipeline;
    private List`1<OnConfigureSchemaServices> _onConfigureSchemaServicesHooks;
    private List`1<OnRequestExecutorCreatedAction> _onRequestExecutorCreatedHooks;
    private List`1<OnRequestExecutorEvictedAction> _onRequestExecutorEvictedHooks;
    private List`1<ITypeModule> _typeModules;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISchemaBuilder <SchemaBuilder>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RequestExecutorOptions <RequestExecutorOptions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IList`1<RequestCoreMiddleware>> <DefaultPipelineFactory>k__BackingField;
    [NullableAttribute("2")]
public ISchema Schema { get; public set; }
    [NullableAttribute("2")]
public ISchemaBuilder SchemaBuilder { get; public set; }
    [NullableAttribute("2")]
public RequestExecutorOptions RequestExecutorOptions { get; public set; }
    public IList`1<OnConfigureRequestExecutorOptionsAction> OnConfigureRequestExecutorOptionsHooks { get; }
    public IList`1<OnConfigureSchemaServices> OnConfigureSchemaServicesHooks { get; }
    public IList`1<OnConfigureSchemaBuilderAction> OnConfigureSchemaBuilderHooks { get; }
    public IList`1<OnRequestExecutorCreatedAction> OnRequestExecutorCreatedHooks { get; }
    public IList`1<OnRequestExecutorEvictedAction> OnRequestExecutorEvictedHooks { get; }
    public IList`1<ITypeModule> TypeModules { get; }
    public IList`1<RequestCoreMiddleware> Pipeline { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IList`1<RequestCoreMiddleware>> DefaultPipelineFactory { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISchema get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Schema(ISchema value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISchemaBuilder get_SchemaBuilder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SchemaBuilder(ISchemaBuilder value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RequestExecutorOptions get_RequestExecutorOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestExecutorOptions(RequestExecutorOptions value);
    public IList`1<OnConfigureRequestExecutorOptionsAction> get_OnConfigureRequestExecutorOptionsHooks();
    public IList`1<OnConfigureSchemaServices> get_OnConfigureSchemaServicesHooks();
    public IList`1<OnConfigureSchemaBuilderAction> get_OnConfigureSchemaBuilderHooks();
    public IList`1<OnRequestExecutorCreatedAction> get_OnRequestExecutorCreatedHooks();
    public IList`1<OnRequestExecutorEvictedAction> get_OnRequestExecutorEvictedHooks();
    public IList`1<ITypeModule> get_TypeModules();
    public IList`1<RequestCoreMiddleware> get_Pipeline();
    [CompilerGeneratedAttribute]
public Action`1<IList`1<RequestCoreMiddleware>> get_DefaultPipelineFactory();
    [CompilerGeneratedAttribute]
public void set_DefaultPipelineFactory(Action`1<IList`1<RequestCoreMiddleware>> value);
    public void CopyTo(RequestExecutorSetup options);
}
public abstract class HotChocolate.Execution.Configuration.TypeModule : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> TypesChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_TypesChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TypesChanged(EventHandler`1<EventArgs> value);
    [NullableContextAttribute("1")]
internal virtual ValueTask ConfigureAsync(ConfigurationContext context, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual ValueTask`1<IReadOnlyCollection`1<ITypeSystemMember>> CreateTypesAsync(IDescriptorContext context, CancellationToken cancellationToken);
    protected void OnTypesChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.DefaultRequestContextAccessor : object {
    private static AsyncLocal`1<RequestContextHolder> _requestContextCurrent;
    public IRequestContext RequestContext { get; public set; }
    private static DefaultRequestContextAccessor();
    public sealed virtual IRequestContext get_RequestContext();
    public void set_RequestContext(IRequestContext value);
}
[NullableContextAttribute("1")]
internal interface HotChocolate.Execution.DependencyInjection.IFactory`1 {
    public abstract virtual T Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.DependencyInjection.PooledServiceFactory`1 : object {
    private ObjectPool`1<T> _objectPool;
    public PooledServiceFactory`1(ObjectPool`1<T> objectPool);
    public sealed virtual T Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.ErrorHelper : object {
    public static IError ArgumentNonNullError(ArgumentNode argument, string responseName, ValidationResult validationResult);
    public static IError ArgumentValueIsInvalid(ArgumentNode argument, string responseName, GraphQLException exception);
    public static IError ArgumentDefaultValueIsInvalid(string responseName, GraphQLException exception);
    public static IError InvalidLeafValue(GraphQLException exception, FieldNode field, Path path);
    public static IError UnexpectedLeafValueSerializationError(Exception exception, IErrorHandler errorHandler, FieldNode field, Path path);
    public static IError UnableToResolveTheAbstractType(string typeName, FieldNode field, Path path);
    public static IError UnexpectedErrorWhileResolvingAbstractType(Exception exception, string typeName, FieldNode field, Path path);
    public static IError ListValueIsNotSupported(Type listType, FieldNode field, Path path);
    public static IError UnexpectedValueCompletionError(FieldNode field, Path path);
    public static IQueryResult RootTypeNotFound(OperationType operationType);
    public static IQueryResult StateInvalidForOperationResolver();
    public static IQueryResult StateInvalidForOperationVariableCoercion();
    public static IQueryResult StateInvalidForOperationExecution();
    public static IError ValueCompletion_CouldNotResolveAbstractType(FieldNode field, Path path, object result);
    public static IQueryResult StateInvalidForDocumentValidation();
    public static IQueryResult OperationKindNotAllowed();
    public static IQueryResult RequestTimeout(TimeSpan timeout);
    public static IQueryResult OperationCanceled();
    public static IQueryResult MaxComplexityReached(int complexity, int allowedComplexity);
    public static IError MaxComplexityReached();
    public static IQueryResult StateInvalidForComplexityAnalyzer();
    public static IError NonNullOutputFieldViolation(Path path, FieldNode selection);
    public static IError PersistedQueryNotFound(string requestedKey);
    public static IError OnlyPersistedQueriesAreAllowed();
    public static IError ReadPersistedQueryMiddleware_PersistedQueryNotFound();
    public static IError NoNullBubbling_ArgumentValue_NotAllowed(ArgumentNode argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Errors.DefaultErrorHandler : object {
    private static string _messageProperty;
    private static string _stackTraceProperty;
    private IErrorFilter[] _filters;
    private bool _includeExceptionDetails;
    [CompilerGeneratedAttribute]
private static DefaultErrorHandler <Default>k__BackingField;
    public static DefaultErrorHandler Default { get; }
    public DefaultErrorHandler(IEnumerable`1<IErrorFilter> errorFilters, IErrorHandlerOptionsAccessor options);
    private static DefaultErrorHandler();
    public sealed virtual IError Handle(IError error);
    public sealed virtual IErrorBuilder CreateUnexpectedError(Exception exception);
    private IErrorBuilder CreateErrorFromException(Exception exception);
    [CompilerGeneratedAttribute]
public static DefaultErrorHandler get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Errors.FuncErrorFilterWrapper : object {
    private Func`2<IError, IError> _errorFilter;
    public FuncErrorFilterWrapper(Func`2<IError, IError> errorFilter);
    public sealed virtual IError OnError(IError error);
}
[ExtensionAttribute]
public static class HotChocolate.Execution.ExecutionObjectFieldDescriptorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IObjectFieldDescriptor UseOptimizer(IObjectFieldDescriptor descriptor, IOperationCompilerOptimizer optimizer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Execution.ExecutionRequestExecutorExtensions : object {
    [ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteAsync(IRequestExecutor executor, IQueryRequest request);
    [ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteAsync(IRequestExecutor executor, string query);
    [ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteAsync(IRequestExecutor executor, string query, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteAsync(IRequestExecutor executor, string query, Dictionary`2<string, object> variableValues);
    [ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteAsync(IRequestExecutor executor, string query, IReadOnlyDictionary`2<string, object> variableValues, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IExecutionResult Execute(IRequestExecutor executor, IQueryRequest request);
    [ExtensionAttribute]
public static IExecutionResult Execute(IRequestExecutor executor, string query);
    [ExtensionAttribute]
public static IExecutionResult Execute(IRequestExecutor executor, string query, IReadOnlyDictionary`2<string, object> variableValues);
    [ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteAsync(IRequestExecutor executor, Action`1<IQueryRequestBuilder> buildRequest, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteAsync(IRequestExecutor executor, Action`1<IQueryRequestBuilder> buildRequest);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Instrumentation.AggregateDataLoaderDiagnosticEventListener : DataLoaderDiagnosticEventListener {
    private IDataLoaderDiagnosticEventListener[] _listeners;
    public AggregateDataLoaderDiagnosticEventListener(IDataLoaderDiagnosticEventListener[] listeners);
    public virtual void ResolvedTaskFromCache(IDataLoader dataLoader, TaskCacheKey cacheKey, Task task);
    public virtual IDisposable ExecuteBatch(IDataLoader dataLoader, IReadOnlyList`1<TKey> keys);
    public virtual void BatchResults(IReadOnlyList`1<TKey> keys, ReadOnlySpan`1<Result`1<TValue>> values);
    public virtual void BatchError(IReadOnlyList`1<TKey> keys, Exception error);
    public virtual void BatchItemError(TKey key, Exception error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Instrumentation.AggregateExecutionDiagnosticEvents : object {
    private IExecutionDiagnosticEventListener[] _listeners;
    private IExecutionDiagnosticEventListener[] _resolverListener;
    public AggregateExecutionDiagnosticEvents(IExecutionDiagnosticEventListener[] listeners);
    public sealed virtual IDisposable ExecuteRequest(IRequestContext context);
    public sealed virtual void RequestError(IRequestContext context, Exception exception);
    public sealed virtual IDisposable ParseDocument(IRequestContext context);
    public sealed virtual void SyntaxError(IRequestContext context, IError error);
    public sealed virtual IDisposable ValidateDocument(IRequestContext context);
    public sealed virtual void ValidationErrors(IRequestContext context, IReadOnlyList`1<IError> errors);
    public sealed virtual IDisposable AnalyzeOperationComplexity(IRequestContext context);
    public sealed virtual void OperationComplexityAnalyzerCompiled(IRequestContext context);
    public sealed virtual void OperationComplexityResult(IRequestContext context, int complexity, int allowedComplexity);
    public sealed virtual IDisposable CoerceVariables(IRequestContext context);
    public sealed virtual IDisposable CompileOperation(IRequestContext context);
    public sealed virtual IDisposable ExecuteOperation(IRequestContext context);
    public sealed virtual IDisposable ExecuteStream(IOperation operation);
    public sealed virtual IDisposable ExecuteDeferredTask();
    public sealed virtual IDisposable ResolveFieldValue(IMiddlewareContext context);
    public sealed virtual void ResolverError(IMiddlewareContext context, IError error);
    public sealed virtual void ResolverError(IRequestContext context, ISelection selection, IError error);
    public sealed virtual IDisposable RunTask(IExecutionTask task);
    public sealed virtual void TaskError(IExecutionTask task, IError error);
    public sealed virtual void StartProcessing(IRequestContext context);
    public sealed virtual void StopProcessing(IRequestContext context);
    public sealed virtual IDisposable ExecuteSubscription(ISubscription subscription);
    public sealed virtual IDisposable OnSubscriptionEvent(SubscriptionEventContext context);
    public sealed virtual void SubscriptionEventResult(SubscriptionEventContext context, IQueryResult result);
    public sealed virtual void SubscriptionEventError(SubscriptionEventContext context, Exception exception);
    public sealed virtual void SubscriptionEventError(ISubscription subscription, Exception exception);
    public sealed virtual void SubscriptionTransportError(ISubscription subscription, Exception exception);
    public sealed virtual void AddedDocumentToCache(IRequestContext context);
    public sealed virtual void RetrievedDocumentFromCache(IRequestContext context);
    public sealed virtual void RetrievedDocumentFromStorage(IRequestContext context);
    public sealed virtual void AddedOperationToCache(IRequestContext context);
    public sealed virtual void RetrievedOperationFromCache(IRequestContext context);
    public sealed virtual IDisposable DispatchBatch(IRequestContext context);
    public sealed virtual void ExecutorCreated(string name, IRequestExecutor executor);
    public sealed virtual void ExecutorEvicted(string name, IRequestExecutor executor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Instrumentation.ApolloTracingDiagnosticEventListener : ExecutionDiagnosticEventListener {
    private static string _extensionKey;
    private TracingPreference _tracingPreference;
    private ITimestampProvider _timestampProvider;
    public bool EnableResolveFieldValue { get; }
    [NullableContextAttribute("2")]
public ApolloTracingDiagnosticEventListener(TracingPreference tracingPreference, ITimestampProvider timestampProvider);
    public virtual bool get_EnableResolveFieldValue();
    public virtual IDisposable ExecuteRequest(IRequestContext context);
    public virtual IDisposable ParseDocument(IRequestContext context);
    public virtual IDisposable ValidateDocument(IRequestContext context);
    public virtual IDisposable ResolveFieldValue(IMiddlewareContext context);
    private static ApolloTracingResultBuilder CreateBuilder(IDictionary`2<string, object> contextData);
    [NullableContextAttribute("2")]
private static bool TryGetBuilder(IDictionary`2<string, object> contextData, ApolloTracingResultBuilder& builder);
    private bool IsEnabled(IDictionary`2<string, object> contextData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Instrumentation.ApolloTracingResolverRecord : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EndTimestamp>k__BackingField;
    public IReadOnlyList`1<object> Path { get; }
    public string ParentType { get; }
    public string FieldName { get; }
    public string ReturnType { get; }
    public long StartTimestamp { get; }
    public long EndTimestamp { get; }
    public ApolloTracingResolverRecord(IResolverContext context, long startTimestamp, long endTimestamp);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_Path();
    [CompilerGeneratedAttribute]
public string get_ParentType();
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public string get_ReturnType();
    [CompilerGeneratedAttribute]
public long get_StartTimestamp();
    [CompilerGeneratedAttribute]
public long get_EndTimestamp();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Instrumentation.ApolloTracingResultBuilder : object {
    private static int _apolloTracingVersion;
    private static long _ticksToNanosecondsMultiplier;
    private ConcurrentQueue`1<ApolloTracingResolverRecord> _resolverRecords;
    private TimeSpan _duration;
    [NullableAttribute("2")]
private ObjectResult _parsingResult;
    private DateTimeOffset _startTime;
    private long _startTimestamp;
    [NullableAttribute("2")]
private ObjectResult _validationResult;
    public void SetRequestStartTime(DateTimeOffset startTime, long startTimestamp);
    public void SetParsingResult(long startTimestamp, long endTimestamp);
    public void SetValidationResult(long startTimestamp, long endTimestamp);
    public void AddResolverResult(ApolloTracingResolverRecord record);
    public void SetRequestDuration(TimeSpan duration);
    public ObjectResult Build();
    private ObjectResult[] BuildResolverResults();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.Instrumentation.ApolloTracingResultKeys : object {
    public static string Duration;
    public static string EndTime;
    public static string Execution;
    public static string FieldName;
    public static string ParentType;
    public static string Parsing;
    public static string Path;
    public static string Resolvers;
    public static string ReturnType;
    public static string StartOffset;
    public static string StartTime;
    public static string Validation;
    public static string Version;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Execution.Instrumentation.DateTimeOffsetExtensions : object {
    private static string _rfc3339DateTimeFormat;
    [ExtensionAttribute]
public static string ToRfc3339DateTimeString(DateTimeOffset dateTimeOffset);
}
public class HotChocolate.Execution.Instrumentation.DefaultTimestampProvider : object {
    public sealed virtual DateTime UtcNow();
    public sealed virtual long NowInNanoseconds();
}
[ObsoleteAttribute("Use ExecutionDiagnosticEventListener")]
public class HotChocolate.Execution.Instrumentation.DiagnosticEventListener : ExecutionDiagnosticEventListener {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener : object {
    [CompilerGeneratedAttribute]
private static IDisposable <EmptyScope>k__BackingField;
    public bool EnableResolveFieldValue { get; }
    protected internal static IDisposable EmptyScope { get; }
    private static ExecutionDiagnosticEventListener();
    public virtual bool get_EnableResolveFieldValue();
    [CompilerGeneratedAttribute]
protected internal static IDisposable get_EmptyScope();
    public virtual IDisposable ExecuteRequest(IRequestContext context);
    public virtual void RequestError(IRequestContext context, Exception exception);
    public virtual IDisposable ParseDocument(IRequestContext context);
    public virtual void SyntaxError(IRequestContext context, IError error);
    public virtual IDisposable ValidateDocument(IRequestContext context);
    public virtual void ValidationErrors(IRequestContext context, IReadOnlyList`1<IError> errors);
    public virtual IDisposable AnalyzeOperationComplexity(IRequestContext context);
    public virtual void OperationComplexityAnalyzerCompiled(IRequestContext context);
    public virtual void OperationComplexityResult(IRequestContext context, int complexity, int allowedComplexity);
    public virtual IDisposable CoerceVariables(IRequestContext context);
    public virtual IDisposable CompileOperation(IRequestContext context);
    public virtual IDisposable ExecuteOperation(IRequestContext context);
    public virtual IDisposable ExecuteStream(IOperation operation);
    public virtual IDisposable ExecuteDeferredTask();
    public virtual IDisposable ResolveFieldValue(IMiddlewareContext context);
    public virtual void ResolverError(IMiddlewareContext context, IError error);
    public virtual void ResolverError(IRequestContext context, ISelection selection, IError error);
    public virtual IDisposable RunTask(IExecutionTask task);
    public virtual void TaskError(IExecutionTask task, IError error);
    public virtual void StartProcessing(IRequestContext context);
    public virtual void StopProcessing(IRequestContext context);
    public virtual IDisposable ExecuteSubscription(ISubscription subscription);
    public virtual IDisposable OnSubscriptionEvent(SubscriptionEventContext context);
    public virtual void SubscriptionEventResult(SubscriptionEventContext context, IQueryResult result);
    public virtual void SubscriptionEventError(SubscriptionEventContext context, Exception exception);
    public sealed virtual void SubscriptionEventError(ISubscription subscription, Exception exception);
    public virtual void SubscriptionTransportError(ISubscription subscription, Exception exception);
    public virtual void AddedDocumentToCache(IRequestContext context);
    public virtual void RetrievedDocumentFromCache(IRequestContext context);
    public virtual void RetrievedDocumentFromStorage(IRequestContext context);
    public virtual void AddedOperationToCache(IRequestContext context);
    public virtual void RetrievedOperationFromCache(IRequestContext context);
    public virtual IDisposable DispatchBatch(IRequestContext context);
    public virtual void ExecutorCreated(string name, IRequestExecutor executor);
    public virtual void ExecutorEvicted(string name, IRequestExecutor executor);
}
[ObsoleteAttribute("Use IExecutionDiagnosticEventListener")]
public interface HotChocolate.Execution.Instrumentation.IDiagnosticEventListener {
}
[ObsoleteAttribute("Use IExecutionDiagnosticEvents")]
public interface HotChocolate.Execution.Instrumentation.IDiagnosticEvents {
}
public interface HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener {
    public bool EnableResolveFieldValue { get; }
    public abstract virtual bool get_EnableResolveFieldValue();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents {
    public abstract virtual IDisposable ExecuteRequest(IRequestContext context);
    public abstract virtual void RequestError(IRequestContext context, Exception exception);
    public abstract virtual IDisposable ParseDocument(IRequestContext context);
    public abstract virtual void SyntaxError(IRequestContext context, IError error);
    public abstract virtual IDisposable ValidateDocument(IRequestContext context);
    public abstract virtual void ValidationErrors(IRequestContext context, IReadOnlyList`1<IError> errors);
    public abstract virtual IDisposable AnalyzeOperationComplexity(IRequestContext context);
    public abstract virtual void OperationComplexityAnalyzerCompiled(IRequestContext context);
    public abstract virtual void OperationComplexityResult(IRequestContext context, int complexity, int allowedComplexity);
    public abstract virtual IDisposable CoerceVariables(IRequestContext context);
    public abstract virtual IDisposable CompileOperation(IRequestContext context);
    public abstract virtual IDisposable ExecuteOperation(IRequestContext context);
    public abstract virtual IDisposable ExecuteStream(IOperation operation);
    public abstract virtual IDisposable ExecuteDeferredTask();
    public abstract virtual IDisposable ResolveFieldValue(IMiddlewareContext context);
    public abstract virtual void ResolverError(IMiddlewareContext context, IError error);
    public abstract virtual void ResolverError(IRequestContext context, ISelection selection, IError error);
    public abstract virtual IDisposable RunTask(IExecutionTask task);
    public abstract virtual void TaskError(IExecutionTask task, IError error);
    public abstract virtual void StartProcessing(IRequestContext context);
    public abstract virtual void StopProcessing(IRequestContext context);
    public abstract virtual IDisposable ExecuteSubscription(ISubscription subscription);
    public abstract virtual IDisposable OnSubscriptionEvent(SubscriptionEventContext context);
    public abstract virtual void SubscriptionEventResult(SubscriptionEventContext context, IQueryResult result);
    public abstract virtual void SubscriptionEventError(SubscriptionEventContext context, Exception exception);
    public abstract virtual void SubscriptionEventError(ISubscription subscription, Exception exception);
    public abstract virtual void SubscriptionTransportError(ISubscription subscription, Exception exception);
    public abstract virtual void AddedDocumentToCache(IRequestContext context);
    public abstract virtual void RetrievedDocumentFromCache(IRequestContext context);
    public abstract virtual void RetrievedDocumentFromStorage(IRequestContext context);
    public abstract virtual void AddedOperationToCache(IRequestContext context);
    public abstract virtual void RetrievedOperationFromCache(IRequestContext context);
    public abstract virtual IDisposable DispatchBatch(IRequestContext context);
    public abstract virtual void ExecutorCreated(string name, IRequestExecutor executor);
    public abstract virtual void ExecutorEvicted(string name, IRequestExecutor executor);
}
public interface HotChocolate.Execution.Instrumentation.ITimestampProvider {
    public abstract virtual DateTime UtcNow();
    public abstract virtual long NowInNanoseconds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Instrumentation.NoopExecutionDiagnosticEvents : object {
    public sealed virtual IDisposable ExecuteRequest(IRequestContext context);
    public sealed virtual void RequestError(IRequestContext context, Exception exception);
    public sealed virtual IDisposable ParseDocument(IRequestContext context);
    public sealed virtual void SyntaxError(IRequestContext context, IError error);
    public sealed virtual IDisposable ValidateDocument(IRequestContext context);
    public sealed virtual void ValidationErrors(IRequestContext context, IReadOnlyList`1<IError> errors);
    public sealed virtual IDisposable AnalyzeOperationComplexity(IRequestContext context);
    public sealed virtual void OperationComplexityAnalyzerCompiled(IRequestContext context);
    public sealed virtual void OperationComplexityResult(IRequestContext context, int complexity, int allowedComplexity);
    public sealed virtual IDisposable CoerceVariables(IRequestContext context);
    public sealed virtual IDisposable CompileOperation(IRequestContext context);
    public sealed virtual IDisposable ExecuteOperation(IRequestContext context);
    public sealed virtual IDisposable ExecuteStream(IOperation operation);
    public sealed virtual IDisposable ExecuteDeferredTask();
    public sealed virtual IDisposable ResolveFieldValue(IMiddlewareContext context);
    public sealed virtual void ResolverError(IMiddlewareContext context, IError error);
    public sealed virtual void ResolverError(IRequestContext context, ISelection selection, IError error);
    public sealed virtual IDisposable RunTask(IExecutionTask task);
    public sealed virtual void TaskError(IExecutionTask task, IError error);
    public sealed virtual void StartProcessing(IRequestContext context);
    public sealed virtual void StopProcessing(IRequestContext context);
    public sealed virtual IDisposable ExecuteSubscription(ISubscription subscription);
    public sealed virtual IDisposable OnSubscriptionEvent(SubscriptionEventContext context);
    public sealed virtual void SubscriptionEventResult(SubscriptionEventContext context, IQueryResult result);
    public sealed virtual void SubscriptionEventError(SubscriptionEventContext context, Exception exception);
    public sealed virtual void SubscriptionEventError(ISubscription subscription, Exception exception);
    public sealed virtual void SubscriptionTransportError(ISubscription subscription, Exception exception);
    public sealed virtual void AddedDocumentToCache(IRequestContext context);
    public sealed virtual void RetrievedDocumentFromCache(IRequestContext context);
    public sealed virtual void RetrievedDocumentFromStorage(IRequestContext context);
    public sealed virtual void AddedOperationToCache(IRequestContext context);
    public sealed virtual void RetrievedOperationFromCache(IRequestContext context);
    public sealed virtual IDisposable DispatchBatch(IRequestContext context);
    public sealed virtual void ExecutorCreated(string name, IRequestExecutor executor);
    public sealed virtual void ExecutorEvicted(string name, IRequestExecutor executor);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Instrumentation.SubscriptionEventContext : ValueType {
    [CompilerGeneratedAttribute]
private ISubscription <Subscription>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Payload>k__BackingField;
    public ISubscription Subscription { get; }
    public object Payload { get; }
    public SubscriptionEventContext(ISubscription subscription, object payload);
    [CompilerGeneratedAttribute]
public ISubscription get_Subscription();
    [CompilerGeneratedAttribute]
public object get_Payload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Execution.Internal.ArgumentCoercionHelper : object {
    [ExtensionAttribute]
public static bool TryCoerceArguments(ArgumentMap arguments, IResolverContext resolverContext, IReadOnlyDictionary`2& coercedArgs);
    [ExtensionAttribute]
internal static void CoerceArguments(ArgumentMap arguments, IVariableValueCollection variableValues, Dictionary`2<string, ArgumentValue> coercedArgs);
}
[NullableContextAttribute("2")]
public interface HotChocolate.Execution.Internal.IInternalRequestExecutorResolver {
    public abstract virtual ValueTask`1<IRequestExecutor> GetRequestExecutorNoLockAsync(string schemaName, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface HotChocolate.Execution.IRequestContext {
    [NullableAttribute("1")]
public ISchema Schema { get; }
    public ulong ExecutorVersion { get; }
    [NullableAttribute("1")]
public IServiceProvider Services { get; }
    [NullableAttribute("1")]
public IErrorHandler ErrorHandler { get; }
    [NullableAttribute("1")]
public IExecutionDiagnosticEvents DiagnosticEvents { get; }
    [NullableAttribute("1")]
public IActivator Activator { get; }
    [NullableAttribute("1")]
public IQueryRequest Request { get; }
    public CancellationToken RequestAborted { get; public set; }
    public string DocumentId { get; public set; }
    public string DocumentHash { get; public set; }
    public DocumentNode Document { get; public set; }
    public bool IsCachedDocument { get; public set; }
    public bool IsPersistedDocument { get; public set; }
    public DocumentValidatorResult ValidationResult { get; public set; }
    public bool IsValidDocument { get; }
    public string OperationId { get; public set; }
    public IOperation Operation { get; public set; }
    public IVariableValueCollection Variables { get; public set; }
    public IExecutionResult Result { get; public set; }
    public Exception Exception { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual ISchema get_Schema();
    public abstract virtual ulong get_ExecutorVersion();
    [NullableContextAttribute("1")]
public abstract virtual IServiceProvider get_Services();
    [NullableContextAttribute("1")]
public abstract virtual IErrorHandler get_ErrorHandler();
    [NullableContextAttribute("1")]
public abstract virtual IExecutionDiagnosticEvents get_DiagnosticEvents();
    [NullableContextAttribute("1")]
public abstract virtual IActivator get_Activator();
    [NullableContextAttribute("1")]
public abstract virtual IQueryRequest get_Request();
    public abstract virtual CancellationToken get_RequestAborted();
    public abstract virtual void set_RequestAborted(CancellationToken value);
    public abstract virtual string get_DocumentId();
    public abstract virtual void set_DocumentId(string value);
    public abstract virtual string get_DocumentHash();
    public abstract virtual void set_DocumentHash(string value);
    public abstract virtual DocumentNode get_Document();
    public abstract virtual void set_Document(DocumentNode value);
    public abstract virtual bool get_IsCachedDocument();
    public abstract virtual void set_IsCachedDocument(bool value);
    public abstract virtual bool get_IsPersistedDocument();
    public abstract virtual void set_IsPersistedDocument(bool value);
    public abstract virtual DocumentValidatorResult get_ValidationResult();
    public abstract virtual void set_ValidationResult(DocumentValidatorResult value);
    public abstract virtual bool get_IsValidDocument();
    public abstract virtual string get_OperationId();
    public abstract virtual void set_OperationId(string value);
    public abstract virtual IOperation get_Operation();
    public abstract virtual void set_Operation(IOperation value);
    public abstract virtual IVariableValueCollection get_Variables();
    public abstract virtual void set_Variables(IVariableValueCollection value);
    public abstract virtual IExecutionResult get_Result();
    public abstract virtual void set_Result(IExecutionResult value);
    public abstract virtual Exception get_Exception();
    public abstract virtual void set_Exception(Exception value);
    [NullableContextAttribute("1")]
public abstract virtual IRequestContext Clone();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IRequestContextAccessor {
    public IRequestContext RequestContext { get; }
    public abstract virtual IRequestContext get_RequestContext();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IRequestContextEnricher {
    public abstract virtual void Enrich(IRequestContext context);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IRequestCoreMiddlewareContext {
    public string SchemaName { get; }
    public IServiceProvider Services { get; }
    public IServiceProvider SchemaServices { get; }
    public IRequestExecutorOptionsAccessor Options { get; }
    public abstract virtual string get_SchemaName();
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual IServiceProvider get_SchemaServices();
    public abstract virtual IRequestExecutorOptionsAccessor get_Options();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IRequestExecutor {
    public ISchema Schema { get; }
    public IServiceProvider Services { get; }
    public ulong Version { get; }
    public abstract virtual ISchema get_Schema();
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual ulong get_Version();
    public abstract virtual Task`1<IExecutionResult> ExecuteAsync(IQueryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<IResponseStream> ExecuteBatchAsync(IReadOnlyList`1<IQueryRequest> requestBatch, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.IRequestExecutorResolver {
    public IObservable`1<RequestExecutorEvent> Events { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestExecutorEvicted(EventHandler`1<RequestExecutorEvictedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestExecutorEvicted(EventHandler`1<RequestExecutorEvictedEventArgs> value);
    public abstract virtual IObservable`1<RequestExecutorEvent> get_Events();
    [NullableContextAttribute("2")]
public abstract virtual ValueTask`1<IRequestExecutor> GetRequestExecutorAsync(string schemaName, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual void EvictRequestExecutor(string schemaName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Execution.OperationContextExtensions : object {
    [ExtensionAttribute]
public static OperationContext ReportError(OperationContext operationContext, Exception exception, MiddlewareContext resolverContext, ISelection selection, Path path);
    [ExtensionAttribute]
public static OperationContext ReportError(OperationContext operationContext, IError error, MiddlewareContext resolverContext, ISelection selection);
    private static void ReportSingleError(OperationContext operationContext, IError error, MiddlewareContext resolverContext, ISelection selection);
    [ExtensionAttribute]
public static OperationContext SetLabel(OperationContext context, string label);
    [ExtensionAttribute]
public static OperationContext SetPath(OperationContext context, Path path);
    [ExtensionAttribute]
public static OperationContext SetData(OperationContext context, ObjectResult objectResult);
    [ExtensionAttribute]
public static OperationContext SetItems(OperationContext context, IReadOnlyList`1<object> items);
    [ExtensionAttribute]
public static OperationContext SetPatchId(OperationContext context, UInt32 patchId);
    [ExtensionAttribute]
public static OperationContext ClearResult(OperationContext context);
    [ExtensionAttribute]
public static IQueryResult BuildResult(OperationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Options.ComplexityAnalyzerSettings : object {
    [CompilerGeneratedAttribute]
private bool <Enable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultComplexity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultResolverComplexity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextDataKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ComplexityCalculation <Calculation>k__BackingField;
    public bool Enable { get; public set; }
    public int MaximumAllowed { get; public set; }
    public bool ApplyDefaults { get; public set; }
    public int DefaultComplexity { get; public set; }
    public int DefaultResolverComplexity { get; public set; }
    public string ContextDataKey { get; public set; }
    public ComplexityCalculation Calculation { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Enable();
    [CompilerGeneratedAttribute]
public void set_Enable(bool value);
    [CompilerGeneratedAttribute]
public int get_MaximumAllowed();
    [CompilerGeneratedAttribute]
public void set_MaximumAllowed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ApplyDefaults();
    [CompilerGeneratedAttribute]
public void set_ApplyDefaults(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DefaultComplexity();
    [CompilerGeneratedAttribute]
public void set_DefaultComplexity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DefaultResolverComplexity();
    [CompilerGeneratedAttribute]
public void set_DefaultResolverComplexity(int value);
    [CompilerGeneratedAttribute]
public string get_ContextDataKey();
    [CompilerGeneratedAttribute]
public void set_ContextDataKey(string value);
    [CompilerGeneratedAttribute]
public ComplexityCalculation get_Calculation();
    [CompilerGeneratedAttribute]
public void set_Calculation(ComplexityCalculation value);
    public static int DefaultCalculation(ComplexityContext context);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Options.IComplexityAnalyzerOptionsAccessor {
    public ComplexityAnalyzerSettings Complexity { get; }
    public abstract virtual ComplexityAnalyzerSettings get_Complexity();
}
public interface HotChocolate.Execution.Options.IErrorHandlerOptionsAccessor {
    public bool IncludeExceptionDetails { get; }
    public abstract virtual bool get_IncludeExceptionDetails();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Options.IPersistedQueryOptionsAccessor {
    public bool OnlyAllowPersistedQueries { get; }
    public IError OnlyPersistedQueriesAreAllowedError { get; }
    public abstract virtual bool get_OnlyAllowPersistedQueries();
    public abstract virtual IError get_OnlyPersistedQueriesAreAllowedError();
}
public interface HotChocolate.Execution.Options.IRequestExecutorOptionsAccessor {
}
public interface HotChocolate.Execution.Options.IRequestTimeoutOptionsAccessor {
    public TimeSpan ExecutionTimeout { get; }
    public abstract virtual TimeSpan get_ExecutionTimeout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Options.RequestExecutorOptions : object {
    private static TimeSpan _minExecutionTimeout;
    private TimeSpan _executionTimeout;
    private IError _onlyPersistedQueriesAreAllowedError;
    [CompilerGeneratedAttribute]
private bool <IncludeExceptionDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private ComplexityAnalyzerSettings <Complexity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyAllowPersistedQueries>k__BackingField;
    public TimeSpan ExecutionTimeout { get; public set; }
    public bool IncludeExceptionDetails { get; public set; }
    public ComplexityAnalyzerSettings Complexity { get; }
    public bool OnlyAllowPersistedQueries { get; public set; }
    public IError OnlyPersistedQueriesAreAllowedError { get; public set; }
    private static RequestExecutorOptions();
    public sealed virtual TimeSpan get_ExecutionTimeout();
    public void set_ExecutionTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeExceptionDetails();
    [CompilerGeneratedAttribute]
public void set_IncludeExceptionDetails(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ComplexityAnalyzerSettings get_Complexity();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OnlyAllowPersistedQueries();
    [CompilerGeneratedAttribute]
public void set_OnlyAllowPersistedQueries(bool value);
    public sealed virtual IError get_OnlyPersistedQueriesAreAllowedError();
    public void set_OnlyPersistedQueriesAreAllowedError(IError value);
}
public class HotChocolate.Execution.Options.RequestParserOptions : object {
    [CompilerGeneratedAttribute]
private bool <IncludeLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAllowedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAllowedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAllowedFields>k__BackingField;
    public bool IncludeLocations { get; public set; }
    public int MaxAllowedNodes { get; public set; }
    public int MaxAllowedTokens { get; public set; }
    public int MaxAllowedFields { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeLocations();
    [CompilerGeneratedAttribute]
public void set_IncludeLocations(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxAllowedNodes();
    [CompilerGeneratedAttribute]
public void set_MaxAllowedNodes(int value);
    [CompilerGeneratedAttribute]
public int get_MaxAllowedTokens();
    [CompilerGeneratedAttribute]
public void set_MaxAllowedTokens(int value);
    [CompilerGeneratedAttribute]
public int get_MaxAllowedFields();
    [CompilerGeneratedAttribute]
public void set_MaxAllowedFields(int value);
}
public enum HotChocolate.Execution.Options.TracingPreference : Enum {
    public int value__;
    public static TracingPreference Never;
    public static TracingPreference OnDemand;
    public static TracingPreference Always;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.Complexity.ComplexityAnalyzerCompiler : TypeDocumentValidatorVisitor {
    private static MethodInfo _getService;
    private Expression _settings;
    private Expression _zero;
    private ParameterExpression _variables;
    private ParameterExpression _services;
    public ComplexityAnalyzerCompiler(ComplexityAnalyzerSettings settings);
    private static ComplexityAnalyzerCompiler();
    protected virtual ISyntaxVisitorAction Enter(DocumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
    private Expression CreateFieldComplexityExpression(IDocumentValidatorContext context, IOutputField field, FieldNode selection, List`1<Expression> children);
    private Expression CreateCalculateExpression(IDocumentValidatorContext context, IOutputField field, FieldNode selection, Expression childComplexity);
    private Expression GetInputParser();
    private Expression Combine(IReadOnlyList`1<Expression> expressions);
}
internal class HotChocolate.Execution.Pipeline.Complexity.ComplexityAnalyzerDelegate : MulticastDelegate {
    public ComplexityAnalyzerDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual int Invoke(IServiceProvider services, IVariableValueCollection variableValues);
    public virtual IAsyncResult BeginInvoke(IServiceProvider services, IVariableValueCollection variableValues, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class HotChocolate.Execution.Pipeline.Complexity.ComplexityCalculation : MulticastDelegate {
    public ComplexityCalculation(object object, IntPtr method);
    public virtual int Invoke(ComplexityContext context);
    public virtual IAsyncResult BeginInvoke(ComplexityContext context, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Pipeline.Complexity.ComplexityContext : ValueType {
    private IVariableValueCollection _valueCollection;
    private InputParser _inputParser;
    [CompilerGeneratedAttribute]
private IOutputField <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldNode <Selection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Complexity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildComplexity>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MultiplierPathString> <Multipliers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DefaultMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FieldDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeDepth>k__BackingField;
    public IOutputField Field { get; }
    public FieldNode Selection { get; }
    public IVariableValueCollection Variables { get; }
    public int Complexity { get; }
    public int ChildComplexity { get; }
    public IReadOnlyList`1<MultiplierPathString> Multipliers { get; }
    public Nullable`1<int> DefaultMultiplier { get; }
    public int FieldDepth { get; }
    public int NodeDepth { get; }
    public ComplexityContext(IOutputField field, FieldNode selection, CostDirective cost, int fieldDepth, int nodeDepth, int childComplexity, int defaultComplexity, IVariableValueCollection valueCollection, InputParser inputParser);
    [CompilerGeneratedAttribute]
public IOutputField get_Field();
    [CompilerGeneratedAttribute]
public FieldNode get_Selection();
    public IVariableValueCollection get_Variables();
    [CompilerGeneratedAttribute]
public int get_Complexity();
    [CompilerGeneratedAttribute]
public int get_ChildComplexity();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<MultiplierPathString> get_Multipliers();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DefaultMultiplier();
    [CompilerGeneratedAttribute]
public int get_FieldDepth();
    [CompilerGeneratedAttribute]
public int get_NodeDepth();
    [NullableContextAttribute("2")]
public bool TryGetArgumentValue(string name, T& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.Complexity.OperationComplexityAnalyzer : object {
    [CompilerGeneratedAttribute]
private OperationDefinitionNode <OperationDefinitionNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ComplexityAnalyzerDelegate <Analyzer>k__BackingField;
    public OperationDefinitionNode OperationDefinitionNode { get; }
    public ComplexityAnalyzerDelegate Analyzer { get; }
    public OperationComplexityAnalyzer(OperationDefinitionNode operationDefinitionNode, ComplexityAnalyzerDelegate analyzer);
    [CompilerGeneratedAttribute]
public OperationDefinitionNode get_OperationDefinitionNode();
    [CompilerGeneratedAttribute]
public ComplexityAnalyzerDelegate get_Analyzer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.DocumentCacheMiddleware : object {
    private RequestDelegate _next;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    private IDocumentCache _documentCache;
    private IDocumentHashProvider _documentHashProvider;
    public DocumentCacheMiddleware(RequestDelegate next, IExecutionDiagnosticEvents diagnosticEvents, IDocumentCache documentCache, IDocumentHashProvider documentHashProvider);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.DocumentCacheMiddleware/<InvokeAsync>d__5")]
public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.DocumentParserMiddleware : object {
    private RequestDelegate _next;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    private IDocumentHashProvider _documentHashProvider;
    private ParserOptions _parserOptions;
    public DocumentParserMiddleware(RequestDelegate next, IExecutionDiagnosticEvents diagnosticEvents, IDocumentHashProvider documentHashProvider, ParserOptions parserOptions);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.DocumentParserMiddleware/<InvokeAsync>d__5")]
public ValueTask InvokeAsync(IRequestContext context);
    private string ComputeDocumentHash(string documentHash, string queryHash, IQuery query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.DocumentValidationMiddleware : object {
    private RequestDelegate _next;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    private IDocumentValidator _documentValidator;
    public DocumentValidationMiddleware(RequestDelegate next, IExecutionDiagnosticEvents diagnosticEvents, IDocumentValidator documentValidator);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.DocumentValidationMiddleware/<InvokeAsync>d__4")]
public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.ExceptionMiddleware : object {
    private RequestDelegate _next;
    private IErrorHandler _errorHandler;
    public ExceptionMiddleware(RequestDelegate next, IErrorHandler errorHandler);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.ExceptionMiddleware/<InvokeAsync>d__3")]
public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.InstrumentationMiddleware : object {
    private RequestDelegate _next;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    public InstrumentationMiddleware(RequestDelegate next, IExecutionDiagnosticEvents diagnosticEvents);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.InstrumentationMiddleware/<InvokeAsync>d__3")]
public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.OnlyPersistedQueriesAllowedMiddleware : object {
    private RequestDelegate _next;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    private bool _allowAllQueries;
    private IQueryResult _errorResult;
    private GraphQLException _exception;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _statusCode;
    public OnlyPersistedQueriesAllowedMiddleware(RequestDelegate next, IExecutionDiagnosticEvents diagnosticEvents, IPersistedQueryOptionsAccessor options);
    public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.OperationCacheMiddleware : object {
    private RequestDelegate _next;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    private IPreparedOperationCache _operationCache;
    public OperationCacheMiddleware(RequestDelegate next, IExecutionDiagnosticEvents diagnosticEvents, IPreparedOperationCache operationCache);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.OperationCacheMiddleware/<InvokeAsync>d__4")]
public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.OperationComplexityMiddleware : object {
    private RequestDelegate _next;
    private DocumentValidatorContextPool _contextPool;
    private ComplexityAnalyzerSettings _settings;
    private IComplexityAnalyzerCache _cache;
    private ComplexityAnalyzerCompiler _compiler;
    private VariableCoercionHelper _coercionHelper;
    public OperationComplexityMiddleware(RequestDelegate next, DocumentValidatorContextPool contextPool, IComplexityAnalyzerOptionsAccessor options, IComplexityAnalyzerCache cache, VariableCoercionHelper coercionHelper);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.OperationComplexityMiddleware/<InvokeAsync>d__7")]
public ValueTask InvokeAsync(IRequestContext context);
    private ComplexityAnalyzerDelegate CompileAnalyzer(IRequestContext requestContext, DocumentNode document, OperationDefinitionNode operationDefinition, string operationId);
    private void PrepareContext(IRequestContext requestContext, DocumentNode document, DocumentValidatorContext validatorContext);
    private int GetMaximumAllowedComplexity(IRequestContext requestContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.OperationExecutionMiddleware : object {
    private RequestDelegate _next;
    private IFactory`1<OperationContextOwner> _contextFactory;
    private QueryExecutor _queryExecutor;
    private SubscriptionExecutor _subscriptionExecutor;
    private ITransactionScopeHandler _transactionScopeHandler;
    [NullableAttribute("2")]
private object _cachedQuery;
    [NullableAttribute("2")]
private object _cachedMutation;
    public OperationExecutionMiddleware(RequestDelegate next, IFactory`1<OperationContextOwner> contextFactory, QueryExecutor queryExecutor, SubscriptionExecutor subscriptionExecutor, ITransactionScopeHandler transactionScopeHandler);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.OperationExecutionMiddleware/<InvokeAsync>d__8")]
public ValueTask InvokeAsync(IRequestContext context, IBatchDispatcher batchDispatcher);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.OperationExecutionMiddleware/<ExecuteOperationAsync>d__9")]
private Task ExecuteOperationAsync(IRequestContext context, IBatchDispatcher batchDispatcher, IOperation operation);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.OperationExecutionMiddleware/<ExecuteQueryOrMutationAsync>d__10")]
private Task ExecuteQueryOrMutationAsync(IRequestContext context, IBatchDispatcher batchDispatcher, IOperation operation, OperationContext operationContext);
    private object GetQueryRootValue(IRequestContext context);
    private object GetMutationRootValue(IRequestContext context);
    private static bool IsOperationAllowed(IOperation operation, IQueryRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.OperationResolverMiddleware : object {
    private RequestDelegate _next;
    private ObjectPool`1<OperationCompiler> _operationCompilerPool;
    private VariableCoercionHelper _coercionHelper;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<IOperationCompilerOptimizer> _optimizers;
    public OperationResolverMiddleware(RequestDelegate next, ObjectPool`1<OperationCompiler> operationCompilerPool, IEnumerable`1<IOperationCompilerOptimizer> optimizers, VariableCoercionHelper coercionHelper);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.OperationResolverMiddleware/<InvokeAsync>d__5")]
public ValueTask InvokeAsync(IRequestContext context);
    private IOperation CompileOperation(IRequestContext context, string operationId, OperationDefinitionNode operationDefinition, ObjectType operationType);
    private static ObjectType ResolveOperationType(OperationType operationType, ISchema schema);
    private bool IsNullBubblingEnabled(IRequestContext context, OperationDefinitionNode operationDefinition);
    private bool CoerceVariable(IRequestContext context, OperationDefinitionNode operationDefinition, VariableNode variable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.OperationVariableCoercionMiddleware : object {
    private RequestDelegate _next;
    private VariableCoercionHelper _coercionHelper;
    public OperationVariableCoercionMiddleware(RequestDelegate next, VariableCoercionHelper coercionHelper);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.OperationVariableCoercionMiddleware/<InvokeAsync>d__3")]
public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.PersistedQueryNotFoundMiddleware : object {
    private RequestDelegate _next;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _statusCode;
    public PersistedQueryNotFoundMiddleware(RequestDelegate next, IExecutionDiagnosticEvents diagnosticEvents);
    public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Execution.Pipeline.PipelineTools : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, object> _empty;
    private static VariableValueCollection _noVariables;
    private static PipelineTools();
    public static string CreateOperationId(string documentId, string operationName);
    [ExtensionAttribute]
public static string CreateCacheId(IRequestContext context, string operationId);
    [ExtensionAttribute]
public static string CreateCacheId(IRequestContext context, string documentId, string operationName);
    public static IVariableValueCollection CoerceVariables(IRequestContext context, VariableCoercionHelper coercionHelper, IReadOnlyList`1<VariableDefinitionNode> variableDefinitions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.ReadPersistedQueryMiddleware : object {
    private RequestDelegate _next;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    private IReadStoredQueries _persistedQueryStore;
    public ReadPersistedQueryMiddleware(RequestDelegate next, IExecutionDiagnosticEvents diagnosticEvents, IReadStoredQueries persistedQueryStore);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.ReadPersistedQueryMiddleware/<InvokeAsync>d__4")]
public ValueTask InvokeAsync(IRequestContext context);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.ReadPersistedQueryMiddleware/<TryLoadQueryAsync>d__5")]
private ValueTask TryLoadQueryAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.Pipeline.RequestClassMiddlewareFactory : object {
    private static Type _validatorFactory;
    private static Type _requestOptions;
    private static PropertyInfo _getSchemaName;
    private static PropertyInfo _requestServices;
    private static PropertyInfo _appServices;
    private static PropertyInfo _schemaServices;
    private static MethodInfo _getService;
    private static MethodInfo _createValidator;
    private static RequestClassMiddlewareFactory();
    internal static RequestCoreMiddleware Create();
    private static List`1<IParameterHandler> CreateFactoryParameterHandlers(Expression context, IRequestExecutorOptionsAccessor options, Type middleware);
    private static void AddService(ICollection`1<IParameterHandler> parameterHandlers, Expression service);
    private static void AddService(ICollection`1<IParameterHandler> parameterHandlers, Expression service, Type serviceType);
    private static List`1<IParameterHandler> CreateDelegateParameterHandlers(Expression context, IRequestExecutorOptionsAccessor options);
    private static void AddOptions(IList`1<IParameterHandler> parameterHandlers, IRequestExecutorOptionsAccessor options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.TimeoutMiddleware : object {
    private RequestDelegate _next;
    private TimeSpan _timeout;
    public TimeoutMiddleware(RequestDelegate next, IRequestExecutorOptionsAccessor options);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.TimeoutMiddleware/<InvokeAsync>d__3")]
public ValueTask InvokeAsync(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Pipeline.WritePersistedQueryMiddleware : object {
    private static string _persistedQuery;
    private static string _persisted;
    private static string _expectedValue;
    private static string _expectedType;
    private static string _expectedFormat;
    private RequestDelegate _next;
    private IDocumentHashProvider _hashProvider;
    private IWriteStoredQueries _persistedQueryStore;
    public WritePersistedQueryMiddleware(RequestDelegate next, IDocumentHashProvider documentHashProvider, IWriteStoredQueries persistedQueryStore);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Pipeline.WritePersistedQueryMiddleware/<InvokeAsync>d__9")]
public ValueTask InvokeAsync(IRequestContext context);
    private static bool DoHashesMatch(IReadOnlyDictionary`2<string, object> settings, string expectedHash, string hashName, String& userHash);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.Processing.ArgumentNonNullValidator : object {
    public static ValidationResult Validate(IInputField field, IValueNode value, Path path);
    private static ValidationResult Validate(IType type, IValueNode value, Path path);
    private static ValidationResult ValidateInnerType(IType type, IValueNode value, Path path);
    private static ValidationResult ValidateObject(InputObjectType type, ObjectValueNode value, Path path);
    private static ValidationResult ValidateList(ListType type, ListValueNode list, Path path);
}
internal class HotChocolate.Execution.Processing.CreateFieldPipeline : MulticastDelegate {
    public CreateFieldPipeline(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual FieldDelegate Invoke(ISchema schema, IObjectField field, FieldNode selection);
    public virtual IAsyncResult BeginInvoke(ISchema schema, IObjectField field, FieldNode selection, AsyncCallback callback, object object);
    public virtual FieldDelegate EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.DefaultActivator : object {
    private ConcurrentDictionary`2<Type, Service> _instances;
    public sealed virtual T CreateInstance(IServiceProvider services);
    public sealed virtual object CreateInstance(Type type, IServiceProvider services);
    public sealed virtual T GetOrCreate(IServiceProvider services);
    public sealed virtual object GetOrCreate(Type type, IServiceProvider services);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Processing.DefaultTransactionScope : object {
    [CompilerGeneratedAttribute]
private IRequestContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionScope <Transaction>k__BackingField;
    protected IRequestContext Context { get; }
    protected TransactionScope Transaction { get; }
    public DefaultTransactionScope(IRequestContext context, TransactionScope transaction);
    [CompilerGeneratedAttribute]
protected IRequestContext get_Context();
    [CompilerGeneratedAttribute]
protected TransactionScope get_Transaction();
    public sealed virtual void Complete();
    public sealed virtual void Dispose();
}
public class HotChocolate.Execution.Processing.DefaultTransactionScopeHandler : object {
    [NullableContextAttribute("1")]
public virtual ITransactionScope Create(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class HotChocolate.Execution.Processing.DeferredExecutionTask : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, object> <ScopedContextData>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IImmutableDictionary`2<string, object> ScopedContextData { get; }
    protected DeferredExecutionTask(IImmutableDictionary`2<string, object> scopedContextData);
    [CompilerGeneratedAttribute]
public IImmutableDictionary`2<string, object> get_ScopedContextData();
    public void Begin(OperationContextOwner operationContextOwner, UInt32 resultId, UInt32 patchId);
    protected abstract virtual Task ExecuteAsync(OperationContextOwner operationContextOwner, UInt32 resultId, UInt32 parentResultId, UInt32 patchId);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class HotChocolate.Execution.Processing.DeferredExecutionTaskResult : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ParentTaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryResult <Result>k__BackingField;
    public UInt32 TaskId { get; }
    public UInt32 ParentTaskId { get; }
    public IQueryResult Result { get; }
    public DeferredExecutionTaskResult(UInt32 taskId, UInt32 parentTaskId, IQueryResult result);
    [CompilerGeneratedAttribute]
public UInt32 get_TaskId();
    [CompilerGeneratedAttribute]
public UInt32 get_ParentTaskId();
    [CompilerGeneratedAttribute]
public IQueryResult get_Result();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.DeferredFragment : DeferredExecutionTask {
    [CompilerGeneratedAttribute]
private IFragment <Fragment>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Path <Path>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    public IFragment Fragment { get; }
    [NullableAttribute("2")]
public string Label { get; }
    public Path Path { get; }
    [NullableAttribute("2")]
public object Parent { get; }
    public DeferredFragment(IFragment fragment, string label, Path path, object parent, IImmutableDictionary`2<string, object> scopedContextData);
    [CompilerGeneratedAttribute]
public IFragment get_Fragment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public Path get_Path();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Parent();
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.DeferredFragment/<ExecuteAsync>d__13")]
protected virtual Task ExecuteAsync(OperationContextOwner operationContextOwner, UInt32 resultId, UInt32 parentResultId, UInt32 patchId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.DeferredStream : DeferredExecutionTask {
    [NullableAttribute("2")]
private StreamExecutionTask _task;
    [CompilerGeneratedAttribute]
private ISelection <Selection>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Path <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IAsyncEnumerator`1<object> <Enumerator>k__BackingField;
    public ISelection Selection { get; }
    [NullableAttribute("2")]
public string Label { get; }
    public Path Path { get; }
    public int Index { get; private set; }
    [NullableAttribute("2")]
public object Parent { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncEnumerator`1<object> Enumerator { get; }
    public DeferredStream(ISelection selection, string label, Path path, object parent, int index, IAsyncEnumerator`1<object> enumerator, IImmutableDictionary`2<string, object> scopedContextData);
    [CompilerGeneratedAttribute]
public ISelection get_Selection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public Path get_Path();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Parent();
    [CompilerGeneratedAttribute]
public IAsyncEnumerator`1<object> get_Enumerator();
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.DeferredStream/<ExecuteAsync>d__21")]
protected virtual Task ExecuteAsync(OperationContextOwner operationContextOwner, UInt32 resultId, UInt32 parentResultId, UInt32 patchId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.DeferredWorkScheduler : object {
    private object _stateSync;
    private IFactory`1<OperationContextOwner> _operationContextFactory;
    private IFactory`1<DeferredWorkStateOwner> _deferredWorkStateFactory;
    private OperationContext _parentContext;
    [NullableAttribute("2")]
private DeferredWorkStateOwner _stateOwner;
    private DeferredWorkStateOwner StateOwner { get; }
    public bool HasResults { get; }
    private DeferredWorkStateOwner get_StateOwner();
    public bool get_HasResults();
    public void Initialize(OperationContext operationContext);
    public void InitializeFrom(OperationContext operationContext, DeferredWorkScheduler scheduler);
    public void Register(DeferredExecutionTask task, ResultData parentResult);
    public void Register(DeferredExecutionTask task, UInt32 patchId);
    public void Complete(DeferredExecutionTaskResult result);
    public IAsyncEnumerable`1<IQueryResult> CreateResultStream(IQueryResult initialResult);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.DeferredWorkState : object {
    private object _completeSync;
    private object _deliverSync;
    private object _patchSync;
    private List`1<DeferredExecutionTaskResult> _ready;
    private Queue`1<IQueryResult> _deliverable;
    private HashSet`1<UInt32> _completed;
    private HashSet`1<UInt32> _notPatchable;
    private SemaphoreSlim _semaphore;
    private UInt32 _taskId;
    private UInt32 _work;
    private UInt32 _patchId;
    public bool HasResults { get; }
    public bool IsCompleted { get; }
    public bool get_HasResults();
    public bool get_IsCompleted();
    public UInt32 CreateId();
    public UInt32 AssignPatchId(ResultData resultData);
    public void Complete(DeferredExecutionTaskResult result);
    [NullableContextAttribute("2")]
private void EnqueueResult(IQueryResult queryResult);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.DeferredWorkState/<TryDequeueResultsAsync>d__19")]
public ValueTask`1<IQueryResult> TryDequeueResultsAsync(CancellationToken cancellationToken);
    public void Reset();
    [CompilerGeneratedAttribute]
internal static void <TryDequeueResultsAsync>g__AddRemovedResultSetsToNotPatchable|19_0(IQueryResult result, HashSet`1<UInt32> notPatchable);
    [CompilerGeneratedAttribute]
internal static void <TryDequeueResultsAsync>g__AddAllResultSetsToNotPatchable|19_1(IQueryResult result, HashSet`1<UInt32> notPatchable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.DeferredWorkStateOwner : object {
    private ObjectPool`1<DeferredWorkState> _pool;
    private int _disposed;
    [CompilerGeneratedAttribute]
private DeferredWorkState <State>k__BackingField;
    public DeferredWorkState State { get; }
    public DeferredWorkStateOwner(ObjectPool`1<DeferredWorkState> pool);
    [CompilerGeneratedAttribute]
public DeferredWorkState get_State();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.Fragment : object {
    private long _includeCondition;
    private long _deferIfCondition;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectType <TypeCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private ISyntaxNode <SyntaxNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DirectiveNode> <Directives>k__BackingField;
    [CompilerGeneratedAttribute]
private ISelectionSet <SelectionSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    public int Id { get; }
    public IObjectType TypeCondition { get; }
    public ISyntaxNode SyntaxNode { get; }
    public IReadOnlyList`1<DirectiveNode> Directives { get; }
    public ISelectionSet SelectionSet { get; }
    public bool IsInternal { get; }
    public bool IsConditional { get; }
    public Fragment(int id, IObjectType typeCondition, ISyntaxNode syntaxNode, IReadOnlyList`1<DirectiveNode> directives, ISelectionSet selectionSet, long includeCondition, long deferIfCondition, bool isInternal);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IObjectType get_TypeCondition();
    [CompilerGeneratedAttribute]
public sealed virtual ISyntaxNode get_SyntaxNode();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<DirectiveNode> get_Directives();
    [CompilerGeneratedAttribute]
public sealed virtual ISelectionSet get_SelectionSet();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInternal();
    public sealed virtual bool get_IsConditional();
    public sealed virtual string GetLabel(IVariableValueCollection variables);
    public sealed virtual bool IsIncluded(long includeFlags, bool allowInternals);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Processing.IActivator {
    public abstract virtual T GetOrCreate(IServiceProvider services);
    public abstract virtual object GetOrCreate(Type type, IServiceProvider services);
    public abstract virtual T CreateInstance(IServiceProvider services);
    public abstract virtual object CreateInstance(Type type, IServiceProvider services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Processing.IncludeCondition : ValueType {
    [CompilerGeneratedAttribute]
private IValueNode <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <Include>k__BackingField;
    public IValueNode Skip { get; }
    public IValueNode Include { get; }
    public bool IsDefault { get; }
    internal IncludeCondition(IValueNode skip, IValueNode include);
    [CompilerGeneratedAttribute]
public IValueNode get_Skip();
    [CompilerGeneratedAttribute]
public IValueNode get_Include();
    public bool get_IsDefault();
    public bool IsIncluded(IVariableValueCollection variables);
    public sealed virtual bool Equals(IncludeCondition other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static IncludeCondition FromSelection(ISelectionNode selection);
}
public interface HotChocolate.Execution.Processing.IOperationCompilerOptimizer {
}
public interface HotChocolate.Execution.Processing.IOperationOptimizer {
    public abstract virtual void OptimizeOperation(OperationOptimizerContext context);
}
public interface HotChocolate.Execution.Processing.ISelectionSetOptimizer {
    public abstract virtual void OptimizeSelectionSet(SelectionSetOptimizerContext context);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Processing.ISubscription {
    public ulong Id { get; }
    public IOperation Operation { get; }
    public abstract virtual ulong get_Id();
    public abstract virtual IOperation get_Operation();
}
[NullableContextAttribute("1")]
internal interface HotChocolate.Execution.Processing.ITaskStatistics {
    public int NewTasks { get; }
    public int RunningTasks { get; }
    public int AllTasks { get; }
    public int CompletedTasks { get; }
    public bool IsCompleted { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AllTasksCompleted(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AllTasksCompleted(EventHandler`1<EventArgs> value);
    public abstract virtual int get_NewTasks();
    public abstract virtual int get_RunningTasks();
    public abstract virtual int get_AllTasks();
    public abstract virtual int get_CompletedTasks();
    public abstract virtual bool get_IsCompleted();
    public abstract virtual void TaskCreated();
    public abstract virtual void TaskStarted();
    public abstract virtual void TaskCompleted();
}
public interface HotChocolate.Execution.Processing.ITransactionScope {
    public abstract virtual void Complete();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Execution.Processing.ITransactionScopeHandler {
    public abstract virtual ITransactionScope Create(IRequestContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class HotChocolate.Execution.Processing.ListResult : ResultData {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] _buffer;
    private int _capacity;
    private int _count;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public int Capacity { get; }
    public int Count { get; }
    public object Item { get; }
    internal bool IsNullable { get; internal set; }
    public int get_Capacity();
    public sealed virtual int get_Count();
    public sealed virtual object get_Item(int index);
    [CompilerGeneratedAttribute]
internal bool get_IsNullable();
    [CompilerGeneratedAttribute]
internal void set_IsNullable(bool value);
    internal int AddUnsafe(object item);
    internal int AddUnsafe(ResultData item);
    internal void SetUnsafe(int index, object item);
    internal void SetUnsafe(int index, ResultData item);
    internal bool TrySetNull(int index);
    internal void EnsureCapacity(int requiredCapacity);
    internal void Grow();
    internal void Reset();
    internal Object& GetReference();
    [IteratorStateMachineAttribute("HotChocolate.Execution.Processing.ListResult/<GetEnumerator>d__22")]
public sealed virtual IEnumerator`1<object> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Execution.Processing.ListResultPool : DefaultObjectPool`1<ResultBucket`1<ListResult>> {
    public ListResultPool(int maximumRetained, int maxAllowedCapacity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.MiddlewareContext : object {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, ArgumentValue> <Arguments>k__BackingField;
    private OperationResultBuilderFacade _operationResultBuilder;
    private List`1<Func`1<ValueTask>> _cleanupTasks;
    private OperationContext _operationContext;
    private IServiceProvider _services;
    private InputParser _parser;
    [NullableAttribute("2")]
private object _resolverResult;
    private bool _hasResolverResult;
    [CompilerGeneratedAttribute]
private CancellationToken <RequestAborted>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableDictionary`2<string, object> _emptyLocalContextData;
    private PureResolverContext _childContext;
    private ISelection _selection;
    [CompilerGeneratedAttribute]
private int <ResponseIndex>k__BackingField;
    [NullableAttribute("2")]
private object _result;
    [NullableAttribute("2")]
private object _parent;
    [NullableAttribute("2")]
private Path _path;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, object> <ScopedContextData>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, object> <LocalContextData>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IType <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectResult <ParentResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResultModified>k__BackingField;
    public IReadOnlyDictionary`2<string, ArgumentValue> Arguments { get; public set; }
    public IServiceProvider Services { get; public set; }
    public IServiceProvider RequestServices { get; }
    public ISchema Schema { get; }
    public IOperation Operation { get; }
    public IOperationResultBuilder OperationResult { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public IVariableValueCollection Variables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, object> HotChocolate.Resolvers.IPureResolverContext.ScopedContextData { get; }
    public CancellationToken RequestAborted { get; private set; }
    public bool HasCleanupTasks { get; }
    public IObjectType ObjectType { get; }
    public IObjectField Field { get; }
    [ObsoleteAttribute("Use Selection.SyntaxNode.")]
public FieldNode FieldSelection { get; }
    public ISelection Selection { get; }
    public string ResponseName { get; }
    public int ResponseIndex { get; private set; }
    [NullableAttribute("2")]
public FieldDelegate ResolverPipeline { get; }
    [NullableAttribute("2")]
public PureFieldDelegate PureResolver { get; }
    public Path Path { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IImmutableDictionary`2<string, object> ScopedContextData { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IImmutableDictionary`2<string, object> LocalContextData { get; public set; }
    [NullableAttribute("2")]
public IType ValueType { get; public set; }
    public ObjectResult ParentResult { get; private set; }
    public bool HasErrors { get; private set; }
    [NullableAttribute("2")]
public object Result { get; public set; }
    public bool IsResultModified { get; private set; }
    private static MiddlewareContext();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, ArgumentValue> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IReadOnlyDictionary`2<string, ArgumentValue> value);
    public sealed virtual T ArgumentValue(string name);
    public sealed virtual Optional`1<T> ArgumentOptional(string name);
    public sealed virtual TValueNode ArgumentLiteral(string name);
    public sealed virtual ValueKind ArgumentKind(string name);
    private T CoerceArgumentValue(ArgumentValue argument);
    public sealed virtual IReadOnlyDictionary`2<string, ArgumentValue> ReplaceArguments(IReadOnlyDictionary`2<string, ArgumentValue> argumentValues);
    public sealed virtual IReadOnlyDictionary`2<string, ArgumentValue> ReplaceArguments(ReplaceArguments replace);
    public sealed virtual ArgumentValue ReplaceArgument(string argumentName, ArgumentValue newArgumentValue);
    public sealed virtual IServiceProvider get_Services();
    public sealed virtual void set_Services(IServiceProvider value);
    public sealed virtual IServiceProvider get_RequestServices();
    public sealed virtual ISchema get_Schema();
    public sealed virtual IOperation get_Operation();
    public sealed virtual IOperationResultBuilder get_OperationResult();
    public sealed virtual IDictionary`2<string, object> get_ContextData();
    public sealed virtual IVariableValueCollection get_Variables();
    private sealed virtual override IReadOnlyDictionary`2<string, object> HotChocolate.Resolvers.IPureResolverContext.get_ScopedContextData();
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_RequestAborted();
    [CompilerGeneratedAttribute]
private void set_RequestAborted(CancellationToken value);
    public bool get_HasCleanupTasks();
    public sealed virtual IReadOnlyList`1<ISelection> GetSelections(IObjectType typeContext, ISelection selection, bool allowInternals);
    public sealed virtual void ReportError(string errorMessage);
    public sealed virtual void ReportError(Exception exception, Action`1<IErrorBuilder> configure);
    public sealed virtual void ReportError(IError error);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("HotChocolate.Execution.Processing.MiddlewareContext/<ResolveAsync>d__46`1")]
public sealed virtual ValueTask`1<T> ResolveAsync();
    public sealed virtual T Resolver();
    public sealed virtual T Service();
    public sealed virtual object Service(Type service);
    public sealed virtual void RegisterForCleanup(Func`1<ValueTask> action, CleanAfter cleanAfter);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.MiddlewareContext/<ExecuteCleanupTasksAsync>d__51")]
public ValueTask ExecuteCleanupTasksAsync();
    public sealed virtual T GetQueryRoot();
    public sealed virtual IMiddlewareContext Clone();
    private sealed virtual override IResolverContext HotChocolate.Resolvers.IResolverContext.Clone();
    public void Initialize(OperationContext operationContext, ISelection selection, ObjectResult parentResult, int responseIndex, object parent, IImmutableDictionary`2<string, object> scopedContextData, Path path);
    public void Clean();
    public sealed virtual IObjectType get_ObjectType();
    public IObjectField get_Field();
    public FieldNode get_FieldSelection();
    public sealed virtual ISelection get_Selection();
    public sealed virtual string get_ResponseName();
    [CompilerGeneratedAttribute]
public int get_ResponseIndex();
    [CompilerGeneratedAttribute]
private void set_ResponseIndex(int value);
    [NullableContextAttribute("2")]
public FieldDelegate get_ResolverPipeline();
    [NullableContextAttribute("2")]
public PureFieldDelegate get_PureResolver();
    public bool TryCreatePureContext(ISelection selection, ObjectType parentType, ObjectResult parentResult, object parent, IPureResolverContext& context);
    public sealed virtual Path get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, object> get_ScopedContextData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScopedContextData(IImmutableDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, object> get_LocalContextData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LocalContextData(IImmutableDictionary`2<string, object> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IType get_ValueType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ValueType(IType value);
    [CompilerGeneratedAttribute]
public ObjectResult get_ParentResult();
    [CompilerGeneratedAttribute]
private void set_ParentResult(ObjectResult value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasErrors();
    [CompilerGeneratedAttribute]
private void set_HasErrors(bool value);
    [NullableContextAttribute("2")]
public sealed virtual object get_Result();
    [NullableContextAttribute("2")]
public sealed virtual void set_Result(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsResultModified();
    [CompilerGeneratedAttribute]
private void set_IsResultModified(bool value);
    public sealed virtual T Parent();
    [CompilerGeneratedAttribute]
private void <ReportError>g__ReportSingle|45_0(IError singleError);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.NoopBatchDispatcher : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler TaskEnqueued;
    [CompilerGeneratedAttribute]
private bool <DispatchOnSchedule>k__BackingField;
    [CompilerGeneratedAttribute]
private static NoopBatchDispatcher <Default>k__BackingField;
    public bool DispatchOnSchedule { get; public set; }
    public static NoopBatchDispatcher Default { get; }
    private static NoopBatchDispatcher();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_TaskEnqueued(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_TaskEnqueued(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DispatchOnSchedule();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DispatchOnSchedule(bool value);
    public sealed virtual void BeginDispatch(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public static NoopBatchDispatcher get_Default();
}
internal class HotChocolate.Execution.Processing.NoOpTransactionScope : object {
    public sealed virtual void Complete();
    public sealed virtual void Dispose();
}
internal class HotChocolate.Execution.Processing.NoOpTransactionScopeHandler : object {
    [NullableAttribute("1")]
private NoOpTransactionScope _noOpTransaction;
    [NullableContextAttribute("1")]
public sealed virtual ITransactionScope Create(IRequestContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Processing.ObjectFieldResult : object {
    private Flags _flags;
    private string _name;
    [NullableAttribute("2")]
private object _value;
    public string Name { get; }
    [NullableAttribute("2")]
public object Value { get; }
    internal bool IsNullable { get; }
    internal bool IsInitialized { get; }
    public string get_Name();
    [NullableContextAttribute("2")]
public object get_Value();
    internal bool get_IsNullable();
    internal bool get_IsInitialized();
    internal void Set(string name, object value, bool isNullable);
    internal bool TrySetNull();
    internal void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class HotChocolate.Execution.Processing.ObjectResult : ResultData {
    private ObjectFieldResult[] _buffer;
    private int _capacity;
    internal int Capacity { get; }
    internal ObjectFieldResult Item { get; }
    [NullableAttribute("2")]
private object System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Item { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Values { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    internal int get_Capacity();
    internal ObjectFieldResult get_Item(int index);
    internal ObjectFieldResult& GetReference();
    internal void SetValueUnsafe(int index, string name, object value, bool isNullable);
    internal void SetValueUnsafe(int index, string name, ResultData value, bool isNullable);
    internal void RemoveValueUnsafe(int index);
    internal ObjectFieldResult TryGetValue(string name, Int32& index);
    internal void EnsureCapacity(int capacity);
    internal void Reset();
    private sealed virtual override object System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Item(string key);
    [IteratorStateMachineAttribute("HotChocolate.Execution.Processing.ObjectResult/<System-Collections-Generic-IReadOnlyDictionary<System-String,System-Object>-get_Keys>d__16")]
private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Keys();
    [IteratorStateMachineAttribute("HotChocolate.Execution.Processing.ObjectResult/<System-Collections-Generic-IReadOnlyDictionary<System-String,System-Object>-get_Values>d__18")]
private sealed virtual override IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.ContainsKey(string key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.TryGetValue(string key, Object& value);
    [IteratorStateMachineAttribute("HotChocolate.Execution.Processing.ObjectResult/<GetEnumerator>d__23")]
public sealed virtual IEnumerator`1<ObjectFieldResult> GetEnumerator();
    [IteratorStateMachineAttribute("HotChocolate.Execution.Processing.ObjectResult/<System-Collections-Generic-IEnumerable<System-Collections-Generic-KeyValuePair<System-String,System-Object>>-GetEnumerator>d__24")]
private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class HotChocolate.Execution.Processing.ObjectResultExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void InitValueUnsafe(ObjectResult result, int index, ISelection selection);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Execution.Processing.ObjectResultPool : DefaultObjectPool`1<ResultBucket`1<ObjectResult>> {
    public ObjectResultPool(int maximumRetained, int maxAllowedCapacity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.Operation : object {
    private SelectionVariants[] _selectionVariants;
    private IncludeCondition[] _includeConditions;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentNode <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationDefinitionNode <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectType <RootType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ISelectionSet <RootSelectionSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIncrementalParts>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <ContextData>k__BackingField;
    public string Id { get; }
    public DocumentNode Document { get; }
    public OperationDefinitionNode Definition { get; }
    public ObjectType RootType { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public OperationType Type { get; }
    public ISelectionSet RootSelectionSet { get; }
    public IReadOnlyList`1<ISelectionVariants> SelectionVariants { get; }
    public bool HasIncrementalParts { get; }
    public IReadOnlyList`1<IncludeCondition> IncludeConditions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ContextData { get; }
    public Operation(string id, DocumentNode document, OperationDefinitionNode definition, ObjectType rootType, SelectionVariants[] selectionVariants, IncludeCondition[] includeConditions, Dictionary`2<string, object> contextData, bool hasIncrementalParts);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentNode get_Document();
    [CompilerGeneratedAttribute]
public sealed virtual OperationDefinitionNode get_Definition();
    [CompilerGeneratedAttribute]
public sealed virtual ObjectType get_RootType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual OperationType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual ISelectionSet get_RootSelectionSet();
    public sealed virtual IReadOnlyList`1<ISelectionVariants> get_SelectionVariants();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasIncrementalParts();
    public IReadOnlyList`1<IncludeCondition> get_IncludeConditions();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, object> get_ContextData();
    public sealed virtual ISelectionSet GetSelectionSet(ISelection selection, IObjectType typeContext);
    public sealed virtual IEnumerable`1<IObjectType> GetPossibleTypes(ISelection selection);
    public sealed virtual long CreateIncludeFlags(IVariableValueCollection variables);
    [IteratorStateMachineAttribute("HotChocolate.Execution.Processing.Operation/<GetEnumerator>d__37")]
public sealed virtual IEnumerator`1<ISelectionSet> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Processing.OperationCompiler : object {
    private static ImmutableList`1<ISelectionSetOptimizer> _emptyOptimizers;
    private InputParser _parser;
    private CreateFieldPipeline _createFieldPipeline;
    private Stack`1<BacklogItem> _backlog;
    private Dictionary`2<Selection, SelectionSetInfo[]> _selectionLookup;
    private Dictionary`2<SelectionSetRef, int> _selectionSetIdLookup;
    private Dictionary`2<int, SelectionVariants> _selectionVariants;
    private Dictionary`2<string, FragmentDefinitionNode> _fragmentDefinitions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _contextData;
    private List`1<IOperationOptimizer> _operationOptimizers;
    private List`1<ISelectionSetOptimizer> _selectionSetOptimizers;
    private List`1<Selection> _selections;
    private HashSet`1<string> _directiveNames;
    private List`1<FieldMiddleware> _pipelineComponents;
    private HashSet`1<int> _enqueuedSelectionSets;
    private IncludeCondition[] _includeConditions;
    [NullableAttribute("2")]
private CompilerContext _deferContext;
    private int _nextSelectionId;
    private int _nextSelectionSetRefId;
    private int _nextSelectionSetId;
    private int _nextFragmentId;
    private bool _hasIncrementalParts;
    public OperationCompiler(InputParser parser);
    private static OperationCompiler();
    private ArgumentMap CoerceArgumentValues(ObjectField field, FieldNode selection, string responseName);
    private ArgumentValue CreateArgumentValue(string responseName, IInputField argument, ArgumentNode argumentValue, IValueNode value, bool isDefaultValue);
    private static bool CanBeCompiled(IValueNode valueLiteral);
    internal static FieldDelegate CreateFieldPipeline(ISchema schema, IObjectField field, FieldNode selection, HashSet`1<string> processed, List`1<FieldMiddleware> pipelineComponents);
    private static PureFieldDelegate TryCreatePureField(ISchema schema, IObjectField field, FieldNode selection);
    private static void BuildDirectivePipeline(ISchema schema, FieldNode selection, HashSet`1<string> processed, List`1<FieldMiddleware> pipelineComponents);
    public IOperation Compile(string operationId, OperationDefinitionNode operationDefinition, ObjectType operationType, DocumentNode document, ISchema schema, IReadOnlyList`1<IOperationCompilerOptimizer> optimizers, bool enableNullBubbling);
    private Operation CreateOperation(string operationId, OperationDefinitionNode operationDefinition, ObjectType operationType, DocumentNode document, ISchema schema);
    private void CompleteResolvers(ISchema schema);
    private void CompileSelectionSet(CompilerContext context);
    private void CompleteSelectionSet(CompilerContext context);
    private void CollectFields(CompilerContext context);
    private void CollectFields(CompilerContext context, SelectionSetNode selectionSet, long includeCondition);
    private void ResolveFields(CompilerContext context, ISelectionNode selection, long includeCondition);
    private void ResolveField(CompilerContext context, FieldNode selection, long includeCondition);
    private void ResolveInlineFragment(CompilerContext context, InlineFragmentNode inlineFragment, long includeCondition);
    private void ResolveFragmentSpread(CompilerContext context, FragmentSpreadNode fragmentSpread, long includeCondition);
    private void ResolveFragment(CompilerContext context, ISelectionNode selection, NamedTypeNode typeCondition, SelectionSetNode selectionSet, IReadOnlyList`1<DirectiveNode> directives, long includeCondition);
    private static bool DoesTypeApply(IType typeCondition, IObjectType current);
    private FragmentDefinitionNode GetFragmentDefinition(CompilerContext context, FragmentSpreadNode fragmentSpread);
    internal int GetNextSelectionId();
    private int GetNextFragmentId();
    private int GetOrCreateSelectionSetRefId(SelectionSetNode selectionSet, string selectionSetType, SelectionPath path);
    private SelectionVariants GetOrCreateSelectionVariants(int selectionSetId);
    private long GetSelectionIncludeCondition(ISelectionNode selectionSyntax, long parentIncludeCondition);
    private long GetSelectionIncludeCondition(IncludeCondition condition, long parentIncludeCondition);
    private CompilerContext RentContext(CompilerContext context);
    private void ReturnContext(CompilerContext context);
    private void PrepareOptimizers(IReadOnlyList`1<IOperationCompilerOptimizer> optimizers);
    internal void RegisterNewSelection(Selection newSelection);
    private void OptimizeSelectionSet(CompilerContext context);
    private IImmutableList`1<ISelectionSetOptimizer> ResolveOptimizers(IImmutableList`1<ISelectionSetOptimizer> optimizers, IObjectField field);
    [CompilerGeneratedAttribute]
private FieldDelegate <.ctor>b__30_0(ISchema schema, IObjectField field, FieldNode selection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.Execution.Processing.OperationCompilerOptimizerHelper : object {
    private static string _key;
    public static void RegisterOptimizer(IDictionary`2<string, object> contextData, IOperationCompilerOptimizer optimizer);
    public static bool TryGetOptimizers(IReadOnlyDictionary`2<string, object> contextData, IReadOnlyList`1& optimizers);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Execution.Processing.OperationCompilerPool : DefaultObjectPool`1<OperationCompiler> {
    public OperationCompilerPool(InputParser inputParser);
    public OperationCompilerPool(InputParser inputParser, int maximumRetained);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.OperationContext : object {
    [CompilerGeneratedAttribute]
private long <IncludeFlags>k__BackingField;
    private IFactory`1<ResolverTask> _resolverTaskFactory;
    private WorkScheduler _workScheduler;
    private DeferredWorkScheduler _deferredWorkScheduler;
    private ResultBuilder _resultBuilder;
    private IRequestContext _requestContext;
    private ISchema _schema;
    private IErrorHandler _errorHandler;
    private IActivator _activator;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, object> _contextData;
    private CancellationToken _requestAborted;
    private IOperation _operation;
    private IVariableValueCollection _variables;
    private IServiceProvider _services;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> _resolveQueryRootValue;
    private IBatchDispatcher _batchDispatcher;
    private InputParser _inputParser;
    [NullableAttribute("2")]
private object _rootValue;
    private bool _isInitialized;
    [CompilerGeneratedAttribute]
private ITypeConverter <Converter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public CancellationToken RequestAborted { get; }
    public WorkScheduler Scheduler { get; }
    public DeferredWorkScheduler DeferredScheduler { get; }
    public ResultBuilder Result { get; }
    public ISchema Schema { get; }
    public IOperation Operation { get; }
    public IVariableValueCollection Variables { get; }
    public long IncludeFlags { get; private set; }
    [NullableAttribute("2")]
public object RootValue { get; }
    public bool IsInitialized { get; }
    public IServiceProvider Services { get; }
    public IActivator Activator { get; }
    public InputParser InputParser { get; }
    public IErrorHandler ErrorHandler { get; }
    public IExecutionDiagnosticEvents DiagnosticEvents { get; }
    public ITypeConverter Converter { get; }
    public OperationContext(IFactory`1<ResolverTask> resolverTaskFactory, ResultBuilder resultBuilder, ITypeConverter typeConverter);
    public IDictionary`2<string, object> get_ContextData();
    public CancellationToken get_RequestAborted();
    public WorkScheduler get_Scheduler();
    public DeferredWorkScheduler get_DeferredScheduler();
    public ResultBuilder get_Result();
    public ResolverTask CreateResolverTask(ISelection selection, object parent, ObjectResult parentResult, int responseIndex, IImmutableDictionary`2<string, object> scopedContextData, Path path);
    private sealed virtual override void HotChocolate.Execution.IExecutionTaskContext.ReportError(IExecutionTask task, IError error);
    private sealed virtual override void HotChocolate.Execution.IExecutionTaskContext.ReportError(IExecutionTask task, Exception exception);
    private sealed virtual override void HotChocolate.Execution.IExecutionTaskContext.Register(IExecutionTask task);
    private void ReportError(IExecutionTask task, IError error);
    private sealed virtual override void HotChocolate.Execution.IExecutionTaskContext.Completed(IExecutionTask task);
    private sealed virtual override IDisposable HotChocolate.Execution.IExecutionTaskContext.Track(IExecutionTask task);
    public ISchema get_Schema();
    public IOperation get_Operation();
    public IVariableValueCollection get_Variables();
    [CompilerGeneratedAttribute]
public long get_IncludeFlags();
    [CompilerGeneratedAttribute]
private void set_IncludeFlags(long value);
    [NullableContextAttribute("2")]
public object get_RootValue();
    public ISelectionSet CollectFields(ISelection selection, IObjectType typeContext);
    public T GetQueryRoot();
    public bool get_IsInitialized();
    public void Initialize(IRequestContext requestContext, IServiceProvider scopedServices, IBatchDispatcher batchDispatcher, IOperation operation, IVariableValueCollection variables, object rootValue, Func`1<object> resolveQueryRootValue);
    public void InitializeFrom(OperationContext context);
    public void Clean();
    private void AssertInitialized();
    public IServiceProvider get_Services();
    public IActivator get_Activator();
    public InputParser get_InputParser();
    public IErrorHandler get_ErrorHandler();
    public IExecutionDiagnosticEvents get_DiagnosticEvents();
    [CompilerGeneratedAttribute]
public ITypeConverter get_Converter();
    [CompilerGeneratedAttribute]
private void <ReportError>g__ReportSingle|14_0(IError singleError, <>c__DisplayClass14_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.OperationContextOwner : object {
    private ObjectPool`1<OperationContext> _pool;
    private OperationContext _context;
    private int _disposed;
    public OperationContext OperationContext { get; }
    public OperationContextOwner(ObjectPool`1<OperationContext> operationContextPool);
    public OperationContext get_OperationContext();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Processing.OperationOptimizerContext : ValueType {
    private SelectionVariants[] _variants;
    private IncludeCondition[] _includeConditions;
    private ObjectType _rootType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _contextData;
    private bool _hasIncrementalParts;
    private CreateFieldPipeline _createFieldPipeline;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentNode <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationDefinitionNode <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    public string Id { get; }
    public DocumentNode Document { get; }
    public OperationDefinitionNode Definition { get; }
    public ISchema Schema { get; }
    public IObjectType RootType { get; }
    public ISelectionSet RootSelectionSet { get; }
    public IReadOnlyList`1<ISelectionVariants> SelectionVariants { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public bool HasIncrementalParts { get; }
    internal OperationOptimizerContext(string id, DocumentNode document, OperationDefinitionNode definition, ISchema schema, ObjectType rootType, SelectionVariants[] variants, IncludeCondition[] includeConditions, Dictionary`2<string, object> contextData, bool hasIncrementalParts, CreateFieldPipeline createFieldPipeline);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public DocumentNode get_Document();
    [CompilerGeneratedAttribute]
public OperationDefinitionNode get_Definition();
    [CompilerGeneratedAttribute]
public ISchema get_Schema();
    public IObjectType get_RootType();
    public ISelectionSet get_RootSelectionSet();
    public IReadOnlyList`1<ISelectionVariants> get_SelectionVariants();
    public IDictionary`2<string, object> get_ContextData();
    public bool get_HasIncrementalParts();
    [NullableContextAttribute("2")]
public void SetResolver(ISelection selection, FieldDelegate resolverPipeline, PureFieldDelegate pureResolver);
    public FieldDelegate CompileResolverPipeline(IObjectField field, FieldNode selection);
    public IOperation CreateOperation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.Processing.OperationPrinter : object {
    public static string Print(Operation operation);
    private static SelectionSetNode Visit(PrintContext context);
    private static SelectionSetNode CreateSelectionSet(PrintContext context, ISelectionSet selectionSet, List`1<ISelectionNode> selections);
    private static FieldNode CreateSelection(ISelection selection, SelectionSetNode selectionSet);
    private static DirectiveNode CreateExecutionInfo(ISelection selection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Execution.Processing.OperationResolverHelper : object {
    [ExtensionAttribute]
public static OperationDefinitionNode GetOperation(DocumentNode document, string operationName);
    [ExtensionAttribute]
public static Dictionary`2<string, FragmentDefinitionNode> GetFragments(DocumentNode document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.Processing.PathHelper : object {
    public static Path CreatePathFromContext(ObjectResult parent);
    public static Path CreatePathFromContext(ISelection selection, ResultData parent, int index);
    private static Path CreatePath(ResultData parent, object segmentValue);
    private static Path CreatePath(ResultData parent);
    private static Path CreatePath(Path patchPath, Object[] segments, int length);
    private static int Build(Object[] segments, ResultData parent, int start);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.QueryExecutor : object {
    public Task`1<IQueryResult> ExecuteAsync(OperationContext operationContext);
    public Task`1<IQueryResult> ExecuteAsync(OperationContext operationContext, IImmutableDictionary`2<string, object> scopedContext);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.QueryExecutor/<ExecuteInternalAsync>d__2")]
private static Task`1<IQueryResult> ExecuteInternalAsync(OperationContext operationContext, IImmutableDictionary`2<string, object> scopedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.ResultBucket`1 : object {
    private int _capacity;
    private IPooledObjectPolicy`1<T> _policy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] _buffer;
    private int _index;
    public ResultBucket`1(int capacity, IPooledObjectPolicy`1<T> policy);
    public T Pop();
    [NullableContextAttribute("2")]
public bool TryPop(T& obj);
    public void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.ResultBuilder : object {
    private static Func`1[] _emptyCleanupTasks;
    private List`1<IError> _errors;
    private HashSet`1<ISelection> _fieldErrors;
    private List`1<NonNullViolation> _nonNullViolations;
    private HashSet`1<UInt32> _removedResults;
    private HashSet`1<UInt32> _patchIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _extensions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _contextData;
    private List`1<Func`1<ValueTask>> _cleanupTasks;
    private ResultMemoryOwner _resultOwner;
    [NullableAttribute("2")]
private ObjectResult _data;
    [NullableAttribute("2")]
private IReadOnlyList`1<object> _items;
    [NullableAttribute("2")]
private Path _path;
    [NullableAttribute("2")]
private string _label;
    private Nullable`1<bool> _hasNext;
    private ResultPool _resultPool;
    private object _objectSync;
    private ResultBucket`1<ObjectResult> _objectBucket;
    private object _listSync;
    private ResultBucket`1<ListResult> _listBucket;
    private IRequestContext _context;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    public IReadOnlyList`1<IError> Errors { get; }
    public ResultBuilder(ResultPool resultPool);
    private static ResultBuilder();
    public IReadOnlyList`1<IError> get_Errors();
    [NullableContextAttribute("2")]
public void SetData(ObjectResult data);
    public void SetItems(IReadOnlyList`1<object> items);
    public void SetExtension(string key, object value);
    public void SetExtension(string key, UpdateState`1<T> value);
    public void SetExtension(string key, TState state, UpdateState`2<T, TState> value);
    public void SetContextData(string key, object value);
    public void SetContextData(string key, UpdateState`1<object> value);
    public void SetContextData(string key, TState state, UpdateState`2<object, TState> value);
    public void RegisterForCleanup(Func`1<ValueTask> action);
    public void RegisterForCleanup(T state, Func`2<T, ValueTask> action);
    public void RegisterForCleanup(T state);
    [NullableContextAttribute("2")]
public void SetPath(Path path);
    [NullableContextAttribute("2")]
public void SetLabel(string label);
    public void SetHasNext(bool value);
    public void AddError(IError error, ISelection selection);
    public void AddNonNullViolation(ISelection selection, Path path);
    public void AddRemovedResult(ResultData result);
    public void AddPatchId(UInt32 patchId);
    public IQueryResult BuildResult();
    private static Dictionary`2<string, object> CreateExtensionData(Dictionary`2<string, object> data);
    public void DiscardResult();
    private void ApplyNonNullViolations(List`1<IError> errors, List`1<NonNullViolation> violations, HashSet`1<ISelection> fieldErrors);
    public ObjectResult RentObject(int capacity);
    public ListResult RentList(int capacity);
    public void Initialize(IRequestContext context, IExecutionDiagnosticEvents diagnosticEvents);
    public void Clear();
    private void InitializeResult();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class HotChocolate.Execution.Processing.ResultData : object {
    [CompilerGeneratedAttribute]
private ResultData <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInvalidated>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PatchId>k__BackingField;
    [CompilerGeneratedAttribute]
private Path <PatchPath>k__BackingField;
    protected internal ResultData Parent { get; protected set; }
    protected internal int ParentIndex { get; protected set; }
    protected internal bool IsInvalidated { get; protected internal set; }
    public UInt32 PatchId { get; public set; }
    protected internal Path PatchPath { get; protected internal set; }
    [CompilerGeneratedAttribute]
protected internal ResultData get_Parent();
    [CompilerGeneratedAttribute]
protected void set_Parent(ResultData value);
    [CompilerGeneratedAttribute]
protected internal int get_ParentIndex();
    [CompilerGeneratedAttribute]
protected void set_ParentIndex(int value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsInvalidated();
    [CompilerGeneratedAttribute]
protected internal void set_IsInvalidated(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_PatchId();
    [CompilerGeneratedAttribute]
public void set_PatchId(UInt32 value);
    [CompilerGeneratedAttribute]
protected internal Path get_PatchPath();
    [CompilerGeneratedAttribute]
protected internal void set_PatchPath(Path value);
    [NullableContextAttribute("1")]
public void SetParent(ResultData parent, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.ResultMemoryOwner : object {
    private ResultPool _resultPool;
    private bool _disposed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ObjectResult <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResultBucket`1<ObjectResult>> <ObjectBuckets>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResultBucket`1<ListResult>> <ListBuckets>k__BackingField;
    [NullableAttribute("2")]
public ObjectResult Data { get; public set; }
    public List`1<ResultBucket`1<ObjectResult>> ObjectBuckets { get; }
    public List`1<ResultBucket`1<ListResult>> ListBuckets { get; }
    public ResultMemoryOwner(ResultPool resultPool);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ObjectResult get_Data();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Data(ObjectResult value);
    [CompilerGeneratedAttribute]
public List`1<ResultBucket`1<ObjectResult>> get_ObjectBuckets();
    [CompilerGeneratedAttribute]
public List`1<ResultBucket`1<ListResult>> get_ListBuckets();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.ResultPool : object {
    private ObjectResultPool _objectResultPool;
    private ListResultPool _listResultPool;
    public ResultPool(ObjectResultPool objectResultPool, ListResultPool listResultPool);
    public ResultBucket`1<ObjectResult> GetObjectBucket();
    public ResultBucket`1<ListResult> GetListBucket();
    public void Return(IList`1<ResultBucket`1<ObjectResult>> buffers);
    public void Return(IList`1<ResultBucket`1<ListResult>> buffers);
}
internal static class HotChocolate.Execution.Processing.ResultPoolDefaults : object {
    public static int MaximumRetained;
    public static int BucketSize;
    public static int MaximumAllowedCapacity;
}
internal static class HotChocolate.Execution.Processing.RootValueResolver : object {
    [NullableContextAttribute("1")]
public static object Resolve(IRequestContext context, IServiceProvider services, ObjectType rootType, Object& cachedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Processing.Selection : object {
    private static ArgumentMap _emptyArguments;
    private Int64[] _includeConditions;
    private long _streamIfCondition;
    private Flags _flags;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomOptionsFlags <CustomOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionExecutionStrategy <Strategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectType <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private ISelectionSet <DeclaringSelectionSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectField <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldNode <SyntaxNode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectionSetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private FieldDelegate <ResolverPipeline>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PureFieldDelegate <PureResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentMap <Arguments>k__BackingField;
    public int Id { get; }
    public CustomOptionsFlags CustomOptions { get; private set; }
    public SelectionExecutionStrategy Strategy { get; private set; }
    public IObjectType DeclaringType { get; }
    public ISelectionSet DeclaringSelectionSet { get; private set; }
    public IObjectField Field { get; }
    public IType Type { get; }
    public TypeKind TypeKind { get; }
    public bool IsList { get; }
    public FieldNode SyntaxNode { get; private set; }
    public int SelectionSetId { get; private set; }
    [NullableAttribute("2")]
public SelectionSetNode SelectionSet { get; }
    public string ResponseName { get; }
    [NullableAttribute("2")]
public FieldDelegate ResolverPipeline { get; private set; }
    [NullableAttribute("2")]
public PureFieldDelegate PureResolver { get; private set; }
    public ArgumentMap Arguments { get; }
    public bool HasStreamResult { get; }
    public bool IsReadOnly { get; }
    public bool IsInternal { get; }
    public bool IsConditional { get; }
    [NullableAttribute("0")]
internal ReadOnlySpan`1<long> IncludeConditions { get; }
    public Selection(int id, IObjectType declaringType, IObjectField field, IType type, FieldNode syntaxNode, string responseName, ArgumentMap arguments, Int64[] includeConditions, bool isInternal, bool isParallelExecutable, FieldDelegate resolverPipeline, PureFieldDelegate pureResolver);
    protected Selection(Selection selection);
    private static Selection();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public CustomOptionsFlags get_CustomOptions();
    [CompilerGeneratedAttribute]
private void set_CustomOptions(CustomOptionsFlags value);
    [CompilerGeneratedAttribute]
public sealed virtual SelectionExecutionStrategy get_Strategy();
    [CompilerGeneratedAttribute]
private void set_Strategy(SelectionExecutionStrategy value);
    [CompilerGeneratedAttribute]
public sealed virtual IObjectType get_DeclaringType();
    [CompilerGeneratedAttribute]
public sealed virtual ISelectionSet get_DeclaringSelectionSet();
    [CompilerGeneratedAttribute]
private void set_DeclaringSelectionSet(ISelectionSet value);
    [CompilerGeneratedAttribute]
public sealed virtual IObjectField get_Field();
    [CompilerGeneratedAttribute]
public sealed virtual IType get_Type();
    public sealed virtual TypeKind get_TypeKind();
    public sealed virtual bool get_IsList();
    [CompilerGeneratedAttribute]
public sealed virtual FieldNode get_SyntaxNode();
    [CompilerGeneratedAttribute]
private void set_SyntaxNode(FieldNode value);
    [CompilerGeneratedAttribute]
public int get_SelectionSetId();
    [CompilerGeneratedAttribute]
private void set_SelectionSetId(int value);
    [NullableContextAttribute("2")]
public sealed virtual SelectionSetNode get_SelectionSet();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResponseName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual FieldDelegate get_ResolverPipeline();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ResolverPipeline(FieldDelegate value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual PureFieldDelegate get_PureResolver();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_PureResolver(PureFieldDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual ArgumentMap get_Arguments();
    public sealed virtual bool get_HasStreamResult();
    public sealed virtual bool HasStreamDirective(long includeFlags);
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsInternal();
    public sealed virtual bool get_IsConditional();
    [NullableContextAttribute("0")]
internal ReadOnlySpan`1<long> get_IncludeConditions();
    public sealed virtual bool IsIncluded(long includeFlags, bool allowInternals);
    public virtual string ToString();
    internal void AddSelection(FieldNode selectionSyntax, long includeCondition);
    private static FieldNode MergeField(FieldNode first, FieldNode other);
    [NullableContextAttribute("2")]
internal void SetResolvers(FieldDelegate resolverPipeline, PureFieldDelegate pureResolver);
    internal void SetSelectionSetId(int selectionSetId);
    internal void MarkAsStream(long ifCondition);
    public void SetOption(CustomOptionsFlags customOptions);
    internal void Complete(ISelectionSet declaringSelectionSet);
    internal void Seal(ISelectionSet declaringSelectionSet);
    private SelectionExecutionStrategy InferStrategy(bool isSerial, bool hasPureResolver);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Processing.SelectionIncludeCondition : object {
    [CompilerGeneratedAttribute]
private IValueNode <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionIncludeCondition <Parent>k__BackingField;
    public IValueNode Skip { get; }
    public IValueNode Include { get; }
    public SelectionIncludeCondition Parent { get; }
    public SelectionIncludeCondition(IValueNode skip, IValueNode include, SelectionIncludeCondition parent);
    [CompilerGeneratedAttribute]
public IValueNode get_Skip();
    [CompilerGeneratedAttribute]
public IValueNode get_Include();
    [CompilerGeneratedAttribute]
public SelectionIncludeCondition get_Parent();
    [NullableContextAttribute("1")]
public bool IsTrue(IVariableValueCollection variables);
    [NullableContextAttribute("1")]
private static bool IsTrue(IVariableValueCollection variables, IValueNode value);
    [NullableContextAttribute("1")]
public bool Equals(SelectionIncludeCondition visibility);
    public bool Equals(IValueNode skip, IValueNode include);
}
public enum HotChocolate.Execution.Processing.SelectionInclusionKind : Enum {
    public int value__;
    public static SelectionInclusionKind Always;
    public static SelectionInclusionKind Conditional;
    public static SelectionInclusionKind Internal;
    public static SelectionInclusionKind InternalConditional;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Processing.SelectionPath : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SelectionPath <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private static SelectionPath <Root>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public SelectionPath Parent { get; }
    public static SelectionPath Root { get; }
    private SelectionPath(string name, SelectionPath parent);
    private static SelectionPath();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SelectionPath get_Parent();
    [CompilerGeneratedAttribute]
public static SelectionPath get_Root();
    public SelectionPath Append(string name);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SelectionPath other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.SelectionSet : object {
    private static Fragment[] _empty;
    private Selection[] _selections;
    private Fragment[] _fragments;
    private Flags _flags;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public bool IsConditional { get; }
    public IReadOnlyList`1<ISelection> Selections { get; }
    public IReadOnlyList`1<IFragment> Fragments { get; }
    public SelectionSet(int id, Selection[] selections, Fragment[] fragments, bool isConditional);
    private static SelectionSet();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    public sealed virtual bool get_IsConditional();
    public sealed virtual IReadOnlyList`1<ISelection> get_Selections();
    public sealed virtual IReadOnlyList`1<IFragment> get_Fragments();
    internal void Complete();
    internal void Seal();
    internal Selection& GetSelectionsReference();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
public class HotChocolate.Execution.Processing.SelectionSetOptimizerContext : ValueType {
    private OperationCompiler _compiler;
    private CompilerContext _compilerContext;
    private Dictionary`2<Selection, SelectionSetInfo[]> _selectionLookup;
    private CreateFieldPipeline _createFieldPipeline;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ContextData>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionPath <Path>k__BackingField;
    public ISchema Schema { get; }
    public IObjectType Type { get; }
    public IReadOnlyDictionary`2<string, Selection> Selections { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public SelectionPath Path { get; }
    internal SelectionSetOptimizerContext(OperationCompiler compiler, CompilerContext compilerContext, Dictionary`2<Selection, SelectionSetInfo[]> selectionLookup, Dictionary`2<string, object> contextData, CreateFieldPipeline createFieldPipeline, SelectionPath path);
    public ISchema get_Schema();
    public IObjectType get_Type();
    public IReadOnlyDictionary`2<string, Selection> get_Selections();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_ContextData();
    [CompilerGeneratedAttribute]
public SelectionPath get_Path();
    public int GetNextSelectionId();
    [NullableContextAttribute("2")]
public void SetResolver(Selection selection, FieldDelegate resolverPipeline, PureFieldDelegate pureResolver);
    public FieldDelegate CompileResolverPipeline(IObjectField field, FieldNode selection);
    public void AddSelection(Selection newSelection);
    [ObsoleteAttribute("Use AddSelection(Selection) instead.")]
public void AddSelection(string responseName, Selection newSelection);
    public void ReplaceSelection(Selection newSelection);
    [ObsoleteAttribute("Use ReplaceSelection(Selection) instead.")]
public void ReplaceSelection(string responseName, Selection newSelection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.SelectionVariants : object {
    [NullableAttribute("2")]
private IObjectType _firstType;
    [NullableAttribute("2")]
private SelectionSet _firstSelectionSet;
    [NullableAttribute("2")]
private IObjectType _secondType;
    [NullableAttribute("2")]
private SelectionSet _secondSelectionSet;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IObjectType, SelectionSet> _map;
    private bool _readOnly;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public SelectionVariants(int id);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    public sealed virtual IEnumerable`1<IObjectType> GetPossibleTypes();
    public sealed virtual bool IsPossibleType(IObjectType typeContext);
    [IteratorStateMachineAttribute("HotChocolate.Execution.Processing.SelectionVariants/<GetPossibleTypesLazy>d__12")]
private IEnumerable`1<IObjectType> GetPossibleTypesLazy();
    public sealed virtual ISelectionSet GetSelectionSet(IObjectType typeContext);
    internal bool ContainsSelectionSet(IObjectType typeContext);
    internal void AddSelectionSet(int id, ObjectType typeContext, Selection[] selections, Fragment[] fragments, bool isConditional);
    internal void Complete();
    internal void Seal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.SubscriptionExecutor : object {
    private ObjectPool`1<OperationContext> _operationContextPool;
    private QueryExecutor _queryExecutor;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    public SubscriptionExecutor(ObjectPool`1<OperationContext> operationContextPool, QueryExecutor queryExecutor, IExecutionDiagnosticEvents diagnosticEvents);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.SubscriptionExecutor/<ExecuteAsync>d__4")]
public Task`1<IExecutionResult> ExecuteAsync(IRequestContext requestContext, Func`1<object> resolveQueryValue);
    [CompilerGeneratedAttribute]
internal static IReadOnlyList`1<IError> <ExecuteAsync>g__Unwrap|4_0(IError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Execution.Processing.Tasks.ExecutionTaskPool`2 : ObjectPool`1<T> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectWrapper[] _items;
    private TPolicy _policy;
    [NullableAttribute("2")]
private T _firstItem;
    public ExecutionTaskPool`2(TPolicy policy, int maximumRetained);
    public virtual T Get();
    public virtual void Return(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class HotChocolate.Execution.Processing.Tasks.ExecutionTaskPoolPolicy`1 : object {
    public abstract virtual T Create(ObjectPool`1<T> executionTaskPool);
    public abstract virtual bool Reset(T executionTask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.Tasks.ResolverTask : object {
    private ObjectPool`1<ResolverTask> _objectPool;
    private MiddlewareContext _context;
    private List`1<ResolverTask> _taskBuffer;
    private Dictionary`2<string, ArgumentValue> _args;
    private OperationContext _operationContext;
    private ISelection _selection;
    private ExecutionTaskStatus _completionStatus;
    [NullableAttribute("2")]
private Task _task;
    [CompilerGeneratedAttribute]
private ExecutionTaskStatus <Status>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IExecutionTask <Next>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IExecutionTask <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectResult <ParentResult>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSerial>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRegistered>k__BackingField;
    internal MiddlewareContext Context { get; }
    private IExecutionDiagnosticEvents DiagnosticEvents { get; }
    internal ISelection Selection { get; }
    public ExecutionTaskKind Kind { get; }
    public ExecutionTaskStatus Status { get; private set; }
    [NullableAttribute("2")]
public IExecutionTask Next { get; public set; }
    [NullableAttribute("2")]
public IExecutionTask Previous { get; public set; }
    public ObjectResult ParentResult { get; private set; }
    [NullableAttribute("2")]
public object State { get; public set; }
    public bool IsSerial { get; public set; }
    public bool IsRegistered { get; public set; }
    public ResolverTask(ObjectPool`1<ResolverTask> objectPool);
    private void CompleteValue(bool success, CancellationToken cancellationToken);
    internal MiddlewareContext get_Context();
    private IExecutionDiagnosticEvents get_DiagnosticEvents();
    internal ISelection get_Selection();
    public sealed virtual ExecutionTaskKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual ExecutionTaskStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ExecutionTaskStatus value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IExecutionTask get_Next();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Next(IExecutionTask value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IExecutionTask get_Previous();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Previous(IExecutionTask value);
    [CompilerGeneratedAttribute]
public ObjectResult get_ParentResult();
    [CompilerGeneratedAttribute]
private void set_ParentResult(ObjectResult value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_State();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_State(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSerial();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSerial(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRegistered();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsRegistered(bool value);
    public sealed virtual void BeginExecute(CancellationToken cancellationToken);
    public sealed virtual Task WaitForCompletionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.Tasks.ResolverTask/<ExecuteAsync>d__48")]
private Task ExecuteAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("HotChocolate.Execution.Processing.Tasks.ResolverTask/<TryExecuteAsync>d__49")]
private ValueTask`1<bool> TryExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.Tasks.ResolverTask/<ExecuteResolverPipelineAsync>d__50")]
private ValueTask ExecuteResolverPipelineAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.Tasks.ResolverTask/<CreateStreamResultAsync>d__51")]
private ValueTask`1<List`1<object>> CreateStreamResultAsync(object result);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.Tasks.ResolverTask/<CreateListFromStreamAsync>d__52")]
private ValueTask`1<List`1<object>> CreateListFromStreamAsync(object result);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.Tasks.ResolverTask/<CompleteUnsafeAsync>d__53")]
public ValueTask CompleteUnsafeAsync();
    public void Initialize(OperationContext operationContext, ISelection selection, ObjectResult parentResult, int responseIndex, object parent, IImmutableDictionary`2<string, object> scopedContextData, Path path);
    internal bool Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.Processing.Tasks.ResolverTaskFactory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<ResolverTask> _pooled;
    private static ResolverTaskFactory();
    public static ObjectResult EnqueueResolverTasks(OperationContext operationContext, ISelectionSet selectionSet, object parent, Path path, IImmutableDictionary`2<string, object> scopedContext, ObjectResult parentResult);
    public static ResolverTask EnqueueElementTasks(OperationContext operationContext, ISelection selection, object parent, Path path, int index, IAsyncEnumerator`1<object> value, IImmutableDictionary`2<string, object> scopedContext);
    public static ObjectResult EnqueueOrInlineResolverTasks(ValueCompletionContext context, ObjectType parentType, ResultData parentResult, int parentIndex, object parent, ISelectionSet selectionSet);
    private static void ResolveAndCompleteInline(ValueCompletionContext context, ISelection selection, int responseIndex, ObjectType parentType, object parent, ObjectResult parentResult);
    private static void CompleteInline(OperationContext operationContext, MiddlewareContext resolverContext, ISelection selection, IType type, int responseIndex, ObjectResult parentResult, object value, List`1<ResolverTask> bufferedTasks);
    private static void CommitValue(OperationContext operationContext, ISelection selection, int responseIndex, ObjectResult parentResult, object completedValue);
    private static void TryHandleDeferredFragments(OperationContext operationContext, ISelectionSet selectionSet, IImmutableDictionary`2<string, object> scopedContext, Path path, object parent, ObjectResult parentResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Execution.Processing.Tasks.ResolverTaskPoolPolicy : ExecutionTaskPoolPolicy`1<ResolverTask> {
    public virtual ResolverTask Create(ObjectPool`1<ResolverTask> executionTaskPool);
    public virtual bool Reset(ResolverTask executionTask);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.Processing.Tasks.StreamHelper : object {
    private static MethodInfo _createStreamFromAsyncEnumerable;
    private static MethodInfo _createStreamFromEnumerable;
    private static ConcurrentDictionary`2<Type, Factory> _streamFactories;
    private static StreamHelper();
    public static IAsyncEnumerable`1<object> CreateStream(object result);
    private static Factory CreateFactory(Type resultType);
    private static ResultTypeInfo CreateResultTypeInfo(Type resultType);
    private static IAsyncEnumerable`1<object> CreateStreamFromAsyncEnumerable(IAsyncEnumerable`1<T> asyncEnumerable);
    private static IAsyncEnumerable`1<object> CreateStreamFromEnumerable(IEnumerable`1<T> enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.Processing.ValueCompletion : object {
    public static object Complete(ValueCompletionContext context, ISelection selection, ResultData parent, int index, object result);
    public static object Complete(ValueCompletionContext context, ISelection selection, IType type, ResultData parent, int index, object result);
    private static object CompleteLeafValue(ValueCompletionContext context, ISelection selection, IType type, ResultData parent, int index, object result);
    private static object CompleteListValue(ValueCompletionContext context, ISelection selection, IType type, ResultData parent, int index, object result);
    private static bool TryCompleteElement(ValueCompletionContext context, ISelection selection, IType elementType, bool isLeafType, ListResult list, int parentIndex, object elementResult);
    internal static void PropagateNullValues(ResultData result);
    private static ObjectResult CompleteCompositeValue(ValueCompletionContext context, ISelection selection, IType type, ResultData parent, int index, object result);
    private static bool TryResolveObjectType(ValueCompletionContext context, ISelection selection, IType fieldType, ResultData parent, int index, object result, ObjectType& objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
internal class HotChocolate.Execution.Processing.ValueCompletionContext : ValueType {
    [CompilerGeneratedAttribute]
private OperationContext <OperationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private MiddlewareContext <ResolverContext>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResolverTask> <Tasks>k__BackingField;
    public OperationContext OperationContext { get; }
    public MiddlewareContext ResolverContext { get; }
    public List`1<ResolverTask> Tasks { get; }
    public ValueCompletionContext(OperationContext operationContext, MiddlewareContext resolverContext, List`1<ResolverTask> tasks);
    [CompilerGeneratedAttribute]
public OperationContext get_OperationContext();
    [CompilerGeneratedAttribute]
public MiddlewareContext get_ResolverContext();
    [CompilerGeneratedAttribute]
public List`1<ResolverTask> get_Tasks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.VariableCoercionHelper : object {
    private InputFormatter _inputFormatter;
    private InputParser _inputParser;
    public VariableCoercionHelper(InputFormatter inputFormatter, InputParser inputParser);
    public void CoerceVariableValues(ISchema schema, IReadOnlyList`1<VariableDefinitionNode> variableDefinitions, IReadOnlyDictionary`2<string, object> values, IDictionary`2<string, VariableValueOrLiteral> coercedValues);
    private VariableValueOrLiteral CoerceVariableValue(VariableDefinitionNode variableDefinition, IInputType variableType, object value);
    private static IInputType AssertInputType(ISchema schema, VariableDefinitionNode variableDefinition);
    private static IValueNode Rewrite(IType inputType, IValueNode node);
    private static ObjectValueNode Rewrite(IType inputType, ObjectValueNode node);
    private static ListValueNode Rewrite(IType inputType, ListValueNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.Execution.Processing.VariableRewriter : object {
    public static IValueNode Rewrite(IValueNode node, IType type, IValueNode defaultValue, IVariableValueCollection variableValues);
    private static ObjectValueNode Rewrite(ObjectValueNode node, InputObjectType type, IVariableValueCollection variableValues);
    private static bool TryRewriteField(ObjectFieldNode original, InputField field, IVariableValueCollection variableValues, ObjectFieldNode& rewritten);
    private static ObjectValueNode Rewrite(ObjectValueNode node, ListType type, IVariableValueCollection variableValues);
    private static ListValueNode Rewrite(ListValueNode node, ListType type, IVariableValueCollection variableValues);
    private static bool TryRewriteValue(IValueNode original, IType type, IValueNode defaultValue, IVariableValueCollection variableValues, IValueNode& rewritten);
    private static IValueNode Rewrite(VariableNode node, IValueNode defaultValue, IVariableValueCollection variableValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.VariableValueCollection : object {
    private Dictionary`2<string, VariableValueOrLiteral> _coercedValues;
    [CompilerGeneratedAttribute]
private static VariableValueCollection <Empty>k__BackingField;
    public static VariableValueCollection Empty { get; }
    public VariableValueCollection(Dictionary`2<string, VariableValueOrLiteral> coercedValues);
    private static VariableValueCollection();
    [CompilerGeneratedAttribute]
public static VariableValueCollection get_Empty();
    [NullableContextAttribute("2")]
public sealed virtual T GetVariable(string name);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetVariable(string name, T& value);
    [IteratorStateMachineAttribute("HotChocolate.Execution.Processing.VariableValueCollection/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<VariableValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class HotChocolate.Execution.Processing.VariableValueOrLiteral : ValueType {
    [CompilerGeneratedAttribute]
private IInputType <Type>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <ValueLiteral>k__BackingField;
    public IInputType Type { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public IValueNode ValueLiteral { get; }
    public VariableValueOrLiteral(IInputType type, object value, IValueNode valueLiteral);
    [CompilerGeneratedAttribute]
public IInputType get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public IValueNode get_ValueLiteral();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.WorkQueue : object {
    private Stack`1<IExecutionTask> _stack;
    private int _running;
    public bool IsEmpty { get; }
    public bool HasRunningTasks { get; }
    public bool get_IsEmpty();
    public bool get_HasRunningTasks();
    public bool Complete();
    public bool TryTake(IExecutionTask& executionTask);
    public void Push(IExecutionTask executionTask);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Processing.WorkScheduler : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IExecutionTask[] _buffer;
    private object _sync;
    private WorkQueue _work;
    private WorkQueue _serial;
    private ProcessingPause _pause;
    private OperationContext _operationContext;
    private IRequestContext _requestContext;
    private IBatchDispatcher _batchDispatcher;
    private IErrorHandler _errorHandler;
    private ResultBuilder _result;
    private IExecutionDiagnosticEvents _diagnosticEvents;
    private CancellationToken _ct;
    private bool _hasBatches;
    private bool _isCompleted;
    private bool _isInitialized;
    public bool IsCompleted { get; }
    public WorkScheduler(OperationContext operationContext);
    public bool get_IsCompleted();
    public void Register(IExecutionTask task);
    public void Register(IReadOnlyList`1<IExecutionTask> tasks);
    public void Register(ReadOnlySpan`1<ResolverTask> tasks);
    public void Complete(IExecutionTask task);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.WorkScheduler/<ExecuteAsync>d__7")]
public Task ExecuteAsync();
    [AsyncStateMachineAttribute("HotChocolate.Execution.Processing.WorkScheduler/<ExecuteInternalAsync>d__8")]
private Task ExecuteInternalAsync(IExecutionTask[] buffer);
    private int TryTake(IExecutionTask[] buffer);
    private void BatchDispatcherEventHandler(object source, EventArgs args);
    private void HandleError(Exception exception);
    private void TryDispatchOrComplete();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("HotChocolate.Execution.Processing.WorkScheduler/<TryPauseAsync>d__13")]
private ValueTask`1<bool> TryPauseAsync();
    public void Initialize(IBatchDispatcher batchDispatcher);
    public void Clear();
    private void AssertNotPooled();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Execution.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ThrowHelper_FieldDoesNotExistOnType { get; }
    internal static string ObjectBuffer_IsEmpty { get; }
    internal static string ObjectBuffer_IsUsedUp { get; }
    internal static string PreparedSelection_ReadOnly { get; }
    internal static string MiddlewareContext_ReportErrorCannotBeNull { get; }
    internal static string DeferredResult_ReadResultsAsync_ReadOnlyOnce { get; }
    internal static string ErrorHelper_ArgumentNonNullError_Message { get; }
    internal static string ErrorHelper_UnableToResolveTheAbstractType_Message { get; }
    internal static string ErrorHelper_ListValueIsNotSupported_Message { get; }
    internal static string ErrorHelper_UnexpectedValueCompletionError_Message { get; }
    internal static string ErrorHelper_RootTypeNotFound_Message { get; }
    internal static string ErrorHelper_StateInvalidForOperationResolver_Message { get; }
    internal static string ErrorHelper_StateInvalidForOperationVariableCoercion_Message { get; }
    internal static string ErrorHelper_StateInvalidForOperationExecution_Message { get; }
    internal static string ErrorHelper_ValueCompletion_CouldNotResolveAbstractType_Message { get; }
    internal static string ErrorHelper_StateInvalidForDocumentValidation_Message { get; }
    internal static string ThrowHelper_VariableIsNotAnInputType_Message { get; }
    internal static string ThrowHelper_NonNullVariableIsNull_Message { get; }
    internal static string ThrowHelper_VariableValueInvalidType_Message { get; }
    internal static string ThrowHelper_QueryTypeNotSupported_Message { get; }
    internal static string ThrowHelper_VariableNotFound_Message { get; }
    internal static string ThrowHelper_VariableNotOfType_Message { get; }
    internal static string ThrowHelper_RootTypeNotSupported_Message { get; }
    internal static string ThrowHelper_SubscriptionExecutor_ContextInvalidState_Message { get; }
    internal static string ThrowHelper_SubscriptionExecutor_SubscriptionsMustHaveOneField_Message { get; }
    internal static string ThrowHelper_SubscriptionExecutor_NoSubscribeResolver_Message { get; }
    internal static string ThrowHelper_ResolverContext_LiteralsNotSupported_Message { get; }
    internal static string ThrowHelper_ResolverContext_CannotConvertArgument_Message { get; }
    internal static string ThrowHelper_ResolverContext_LiteralNotCompatible_Message { get; }
    internal static string ThrowHelper_ResolverContext_ArgumentDoesNotExist_Message { get; }
    internal static string ThrowHelper_OperationResolverHelper_NoOperationFound_Message { get; }
    internal static string ThrowHelper_OperationResolverHelper_MultipleOperation_Message { get; }
    internal static string ThrowHelper_OperationResolverHelper_InvalidOperationName_Message { get; }
    internal static string ThrowHelper_BatchExecutor_CannotSerializeVariable_Message { get; }
    internal static string ThrowHelper_CollectVariablesVisitor_NoCompatibleType_Message { get; }
    internal static string ThrowHelper_FieldVisibility_ValueNotSupported_Message { get; }
    internal static string ThrowHelper_QueryCompiler_CompositeTypeSelectionSet_Message { get; }
    internal static string ThrowHelper_OperationExecutionMiddleware_NoBatchDispatcher_Message { get; }
    internal static string OperationCompiler_Compile_SelectionSetIsEmpty { get; }
    internal static string ExecutionRequestExecutorExtensions_ExecuteAsync_QueryCannotBeNullOrEmpty { get; }
    internal static string RequestExecutorBuilder_Convention_NotSuppported { get; }
    internal static string RootValueResolver_Resolve_CannotCreateInstance { get; }
    internal static string OperationContext_GetQueryRoot_InvalidCast { get; }
    internal static string ErrorHelper_RequestTimeout { get; }
    internal static string ResultHelper_BuildResult_InvalidResult { get; }
    internal static string ErrorHelper_MaxComplexityReached { get; }
    internal static string ErrorHelper_StateInvalidForComplexityAnalyzer_Message { get; }
    internal static string BatchExecutionTask_AddExecutionTask_SerialTasksNotAllowed { get; }
    internal static string QueryPlan_InvalidFragmentId { get; }
    internal static string WorkBacklog_NotFullyInitialized { get; }
    internal static string ErrorHelper_OperationCanceled_Message { get; }
    internal static string ThrowHelper_ResolverContext_CannotCastParent { get; }
    internal static string ExecutionResultExtensions_OnlyQueryResults { get; }
    internal static string SelectionVariants_ReadOnly { get; }
    internal static string OperationCompiler_FragmentNotFound { get; }
    internal static string SelectionSetOptimizerContext_InvalidFieldName { get; }
    internal static string OperationCompiler_ToManyIncludeConditions { get; }
    internal static string SelectionVariants_TypeContextInvalid { get; }
    internal static string ThrowHelper_SelectionSet_TypeAlreadyAdded { get; }
    internal static string ThrowHelper_OneOfFieldMustBeNonNull { get; }
    internal static string OperationCompiler_OperationIdNullOrEmpty { get; }
    internal static string ThrowHelper_Operation_NoSelectionSet { get; }
    internal static string ThrowHelper_JsonFormatter_ResultNotSupported { get; }
    internal static string ResultBuilder_DataAndItemsNotAllowed { get; }
    internal static string ErrorHelper_PersistedQueryNotFound { get; }
    internal static string ErrorHelper_OnlyPersistedQueriesAreAllowed { get; }
    internal static string MiddlewareContext_ReplaceArgument_InvalidKey { get; }
    internal static string VariableValueOrLiteral_NullNotAllowed { get; }
    internal static string Operation_GetPossibleTypes_NoSelectionSet { get; }
    internal static string MiddlewareContext_ReplaceArguments_NullNotAllowed { get; }
    internal static string SelectionSetOptimizerContext_AddSelection_ResponseNameNotTheSame { get; }
    internal static string ComplexityAnalyzerCompiler_Enter_OnlyOperations { get; }
    internal static string ErrorHelper_NoNullBubbling_ArgumentValue_NotAllowed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ThrowHelper_FieldDoesNotExistOnType();
    internal static string get_ObjectBuffer_IsEmpty();
    internal static string get_ObjectBuffer_IsUsedUp();
    internal static string get_PreparedSelection_ReadOnly();
    internal static string get_MiddlewareContext_ReportErrorCannotBeNull();
    internal static string get_DeferredResult_ReadResultsAsync_ReadOnlyOnce();
    internal static string get_ErrorHelper_ArgumentNonNullError_Message();
    internal static string get_ErrorHelper_UnableToResolveTheAbstractType_Message();
    internal static string get_ErrorHelper_ListValueIsNotSupported_Message();
    internal static string get_ErrorHelper_UnexpectedValueCompletionError_Message();
    internal static string get_ErrorHelper_RootTypeNotFound_Message();
    internal static string get_ErrorHelper_StateInvalidForOperationResolver_Message();
    internal static string get_ErrorHelper_StateInvalidForOperationVariableCoercion_Message();
    internal static string get_ErrorHelper_StateInvalidForOperationExecution_Message();
    internal static string get_ErrorHelper_ValueCompletion_CouldNotResolveAbstractType_Message();
    internal static string get_ErrorHelper_StateInvalidForDocumentValidation_Message();
    internal static string get_ThrowHelper_VariableIsNotAnInputType_Message();
    internal static string get_ThrowHelper_NonNullVariableIsNull_Message();
    internal static string get_ThrowHelper_VariableValueInvalidType_Message();
    internal static string get_ThrowHelper_QueryTypeNotSupported_Message();
    internal static string get_ThrowHelper_VariableNotFound_Message();
    internal static string get_ThrowHelper_VariableNotOfType_Message();
    internal static string get_ThrowHelper_RootTypeNotSupported_Message();
    internal static string get_ThrowHelper_SubscriptionExecutor_ContextInvalidState_Message();
    internal static string get_ThrowHelper_SubscriptionExecutor_SubscriptionsMustHaveOneField_Message();
    internal static string get_ThrowHelper_SubscriptionExecutor_NoSubscribeResolver_Message();
    internal static string get_ThrowHelper_ResolverContext_LiteralsNotSupported_Message();
    internal static string get_ThrowHelper_ResolverContext_CannotConvertArgument_Message();
    internal static string get_ThrowHelper_ResolverContext_LiteralNotCompatible_Message();
    internal static string get_ThrowHelper_ResolverContext_ArgumentDoesNotExist_Message();
    internal static string get_ThrowHelper_OperationResolverHelper_NoOperationFound_Message();
    internal static string get_ThrowHelper_OperationResolverHelper_MultipleOperation_Message();
    internal static string get_ThrowHelper_OperationResolverHelper_InvalidOperationName_Message();
    internal static string get_ThrowHelper_BatchExecutor_CannotSerializeVariable_Message();
    internal static string get_ThrowHelper_CollectVariablesVisitor_NoCompatibleType_Message();
    internal static string get_ThrowHelper_FieldVisibility_ValueNotSupported_Message();
    internal static string get_ThrowHelper_QueryCompiler_CompositeTypeSelectionSet_Message();
    internal static string get_ThrowHelper_OperationExecutionMiddleware_NoBatchDispatcher_Message();
    internal static string get_OperationCompiler_Compile_SelectionSetIsEmpty();
    internal static string get_ExecutionRequestExecutorExtensions_ExecuteAsync_QueryCannotBeNullOrEmpty();
    internal static string get_RequestExecutorBuilder_Convention_NotSuppported();
    internal static string get_RootValueResolver_Resolve_CannotCreateInstance();
    internal static string get_OperationContext_GetQueryRoot_InvalidCast();
    internal static string get_ErrorHelper_RequestTimeout();
    internal static string get_ResultHelper_BuildResult_InvalidResult();
    internal static string get_ErrorHelper_MaxComplexityReached();
    internal static string get_ErrorHelper_StateInvalidForComplexityAnalyzer_Message();
    internal static string get_BatchExecutionTask_AddExecutionTask_SerialTasksNotAllowed();
    internal static string get_QueryPlan_InvalidFragmentId();
    internal static string get_WorkBacklog_NotFullyInitialized();
    internal static string get_ErrorHelper_OperationCanceled_Message();
    internal static string get_ThrowHelper_ResolverContext_CannotCastParent();
    internal static string get_ExecutionResultExtensions_OnlyQueryResults();
    internal static string get_SelectionVariants_ReadOnly();
    internal static string get_OperationCompiler_FragmentNotFound();
    internal static string get_SelectionSetOptimizerContext_InvalidFieldName();
    internal static string get_OperationCompiler_ToManyIncludeConditions();
    internal static string get_SelectionVariants_TypeContextInvalid();
    internal static string get_ThrowHelper_SelectionSet_TypeAlreadyAdded();
    internal static string get_ThrowHelper_OneOfFieldMustBeNonNull();
    internal static string get_OperationCompiler_OperationIdNullOrEmpty();
    internal static string get_ThrowHelper_Operation_NoSelectionSet();
    internal static string get_ThrowHelper_JsonFormatter_ResultNotSupported();
    internal static string get_ResultBuilder_DataAndItemsNotAllowed();
    internal static string get_ErrorHelper_PersistedQueryNotFound();
    internal static string get_ErrorHelper_OnlyPersistedQueriesAreAllowed();
    internal static string get_MiddlewareContext_ReplaceArgument_InvalidKey();
    internal static string get_VariableValueOrLiteral_NullNotAllowed();
    internal static string get_Operation_GetPossibleTypes_NoSelectionSet();
    internal static string get_MiddlewareContext_ReplaceArguments_NullNotAllowed();
    internal static string get_SelectionSetOptimizerContext_AddSelection_ResponseNameNotTheSame();
    internal static string get_ComplexityAnalyzerCompiler_Enter_OnlyOperations();
    internal static string get_ErrorHelper_NoNullBubbling_ArgumentValue_NotAllowed();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.RequestContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, object> _contextData;
    private DocumentValidatorResult _validationResult;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ExecutorVersion>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IErrorHandler <ErrorHandler>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IActivator <Activator>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IExecutionDiagnosticEvents <DiagnosticEvents>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IQueryRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <RequestAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentHash>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentNode <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCachedDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPersistedDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValidDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private IOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private IVariableValueCollection <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("1")]
public ISchema Schema { get; }
    public ulong ExecutorVersion { get; }
    [NullableAttribute("1")]
public IServiceProvider Services { get; private set; }
    [NullableAttribute("1")]
public IErrorHandler ErrorHandler { get; }
    [NullableAttribute("1")]
public IActivator Activator { get; }
    [NullableAttribute("1")]
public IExecutionDiagnosticEvents DiagnosticEvents { get; }
    [NullableAttribute("1")]
public IQueryRequest Request { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public CancellationToken RequestAborted { get; public set; }
    public string DocumentId { get; public set; }
    public string DocumentHash { get; public set; }
    public DocumentNode Document { get; public set; }
    public bool IsCachedDocument { get; public set; }
    public bool IsPersistedDocument { get; public set; }
    public DocumentValidatorResult ValidationResult { get; public set; }
    public bool IsValidDocument { get; private set; }
    public string OperationId { get; public set; }
    public IOperation Operation { get; public set; }
    public IVariableValueCollection Variables { get; public set; }
    public IExecutionResult Result { get; public set; }
    public Exception Exception { get; public set; }
    [NullableContextAttribute("1")]
public RequestContext(ISchema schema, ulong executorVersion, IErrorHandler errorHandler, IActivator activator, IExecutionDiagnosticEvents diagnosticEvents);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ISchema get_Schema();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_ExecutorVersion();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Services();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Services(IServiceProvider value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IErrorHandler get_ErrorHandler();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IActivator get_Activator();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IExecutionDiagnosticEvents get_DiagnosticEvents();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IQueryRequest get_Request();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Request(IQueryRequest value);
    public sealed virtual IDictionary`2<string, object> get_ContextData();
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_RequestAborted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequestAborted(CancellationToken value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DocumentId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DocumentId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DocumentHash();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DocumentHash(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DocumentNode get_Document();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Document(DocumentNode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCachedDocument();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsCachedDocument(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPersistedDocument();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsPersistedDocument(bool value);
    public sealed virtual DocumentValidatorResult get_ValidationResult();
    public sealed virtual void set_ValidationResult(DocumentValidatorResult value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsValidDocument();
    [CompilerGeneratedAttribute]
private void set_IsValidDocument(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OperationId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IOperation get_Operation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Operation(IOperation value);
    [CompilerGeneratedAttribute]
public sealed virtual IVariableValueCollection get_Variables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Variables(IVariableValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual IExecutionResult get_Result();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Result(IExecutionResult value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Exception(Exception value);
    [NullableContextAttribute("1")]
public sealed virtual IRequestContext Clone();
    [NullableContextAttribute("1")]
public void Initialize(IQueryRequest request, IServiceProvider services);
    public void Reset();
}
public class HotChocolate.Execution.RequestCoreMiddleware : MulticastDelegate {
    public RequestCoreMiddleware(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual RequestDelegate Invoke(IRequestCoreMiddlewareContext context, RequestDelegate next);
    public virtual IAsyncResult BeginInvoke(IRequestCoreMiddlewareContext context, RequestDelegate next, AsyncCallback callback, object object);
    public virtual RequestDelegate EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.RequestCoreMiddlewareContext : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <SchemaServices>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestExecutorOptionsAccessor <Options>k__BackingField;
    public string SchemaName { get; }
    public IServiceProvider Services { get; }
    public IServiceProvider SchemaServices { get; }
    public IRequestExecutorOptionsAccessor Options { get; }
    public RequestCoreMiddlewareContext(string schemaName, IServiceProvider services, IServiceProvider schemaServices, IRequestExecutorOptionsAccessor options);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_SchemaServices();
    [CompilerGeneratedAttribute]
public sealed virtual IRequestExecutorOptionsAccessor get_Options();
}
public class HotChocolate.Execution.RequestDelegate : MulticastDelegate {
    public RequestDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ValueTask Invoke(IRequestContext context);
    public virtual IAsyncResult BeginInvoke(IRequestContext context, AsyncCallback callback, object object);
    public virtual ValueTask EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.RequestExecutor : object {
    private IServiceProvider _applicationServices;
    private RequestDelegate _requestDelegate;
    private BatchExecutor _batchExecutor;
    private ObjectPool`1<RequestContext> _contextPool;
    private DefaultRequestContextAccessor _contextAccessor;
    private IRequestContextEnricher[] _enricher;
    [CompilerGeneratedAttribute]
private ISchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Version>k__BackingField;
    public ISchema Schema { get; }
    public IServiceProvider Services { get; }
    public ulong Version { get; }
    public RequestExecutor(ISchema schema, IServiceProvider applicationServices, IServiceProvider executorServices, RequestDelegate requestDelegate, BatchExecutor batchExecutor, ObjectPool`1<RequestContext> contextPool, DefaultRequestContextAccessor contextAccessor, ulong version);
    [CompilerGeneratedAttribute]
public sealed virtual ISchema get_Schema();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Version();
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutor/<ExecuteAsync>d__16")]
public sealed virtual Task`1<IExecutionResult> ExecuteAsync(IQueryRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<IResponseStream> ExecuteBatchAsync(IReadOnlyList`1<IQueryRequest> requestBatch, CancellationToken cancellationToken);
    private void EnrichContext(IRequestContext context);
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__CollectEnricher|6_0(IServiceProvider services, List`1<IRequestContextEnricher> list);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.RequestExecutorEvent : EventArgs {
    [CompilerGeneratedAttribute]
private RequestExecutorEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestExecutor <Executor>k__BackingField;
    public RequestExecutorEventType Type { get; }
    public string Name { get; }
    public IRequestExecutor Executor { get; }
    internal RequestExecutorEvent(RequestExecutorEventType type, string name, IRequestExecutor executor);
    [CompilerGeneratedAttribute]
public RequestExecutorEventType get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IRequestExecutor get_Executor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.RequestExecutorEventObserver : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<RequestExecutorEvent> _onNext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> _onError;
    [NullableAttribute("2")]
private Action _onCompleted;
    [NullableContextAttribute("2")]
public RequestExecutorEventObserver(Action`1<RequestExecutorEvent> onNext, Action`1<Exception> onError, Action onCompleted);
    public sealed virtual void OnNext(RequestExecutorEvent value);
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnCompleted();
}
public enum HotChocolate.Execution.RequestExecutorEventType : Enum {
    public int value__;
    public static RequestExecutorEventType Created;
    public static RequestExecutorEventType Evicted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.RequestExecutorEvictedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestExecutor <EvictedExecutor>k__BackingField;
    public string Name { get; }
    public IRequestExecutor EvictedExecutor { get; }
    public RequestExecutorEvictedEventArgs(string name, IRequestExecutor evictedExecutor);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IRequestExecutor get_EvictedExecutor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.RequestExecutorProxy : object {
    private SemaphoreSlim _semaphore;
    private IRequestExecutorResolver _executorResolver;
    private string _schemaName;
    [NullableAttribute("2")]
private IRequestExecutor _executor;
    [NullableAttribute("2")]
private IDisposable _eventSubscription;
    private bool _disposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<RequestExecutorUpdatedEventArgs> ExecutorUpdated;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ExecutorEvicted;
    public RequestExecutorProxy(IRequestExecutorResolver executorResolver, string schemaName);
    [CompilerGeneratedAttribute]
public void add_ExecutorUpdated(EventHandler`1<RequestExecutorUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExecutorUpdated(EventHandler`1<RequestExecutorUpdatedEventArgs> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_ExecutorEvicted(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_ExecutorEvicted(EventHandler value);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorProxy/<ExecuteAsync>d__13")]
public Task`1<IExecutionResult> ExecuteAsync(IQueryRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorProxy/<ExecuteBatchAsync>d__14")]
public Task`1<IResponseStream> ExecuteBatchAsync(IReadOnlyList`1<IQueryRequest> requestBatch, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorProxy/<GetSchemaAsync>d__15")]
public ValueTask`1<ISchema> GetSchemaAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorProxy/<GetRequestExecutorAsync>d__16")]
public ValueTask`1<IRequestExecutor> GetRequestExecutorAsync(CancellationToken cancellationToken);
    private void EvictRequestExecutor(string schemaName);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_0(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.RequestExecutorResolver : object {
    private SemaphoreSlim _semaphore;
    private ConcurrentDictionary`2<string, RegisteredExecutor> _executors;
    private IRequestExecutorOptionsMonitor _optionsMonitor;
    private IServiceProvider _applicationServices;
    private EventObservable _events;
    private ulong _version;
    private bool _disposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<RequestExecutorEvictedEventArgs> RequestExecutorEvicted;
    public IObservable`1<RequestExecutorEvent> Events { get; }
    public RequestExecutorResolver(IRequestExecutorOptionsMonitor optionsMonitor, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RequestExecutorEvicted(EventHandler`1<RequestExecutorEvictedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RequestExecutorEvicted(EventHandler`1<RequestExecutorEvictedEventArgs> value);
    public sealed virtual IObservable`1<RequestExecutorEvent> get_Events();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorResolver/<GetRequestExecutorAsync>d__13")]
public sealed virtual ValueTask`1<IRequestExecutor> GetRequestExecutorAsync(string schemaName, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorResolver/<GetRequestExecutorNoLockAsync>d__14")]
public sealed virtual ValueTask`1<IRequestExecutor> GetRequestExecutorNoLockAsync(string schemaName, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual void EvictRequestExecutor(string schemaName);
    private void EvictAllRequestExecutors();
    private static void BeginRunEvictionEvents(RegisteredExecutor registeredExecutor);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorResolver/<CreateSchemaServicesAsync>d__18")]
private Task`1<IServiceProvider> CreateSchemaServicesAsync(ConfigurationContext context, RequestExecutorSetup setup, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorResolver/<CreateSchemaAsync>d__19")]
private static ValueTask`1<ISchema> CreateSchemaAsync(ConfigurationContext context, RequestExecutorSetup setup, RequestExecutorOptions executorOptions, IServiceProvider schemaServices, TypeModuleChangeMonitor typeModuleChangeMonitor, CancellationToken cancellationToken);
    private static void AssertSchemaNameValid(ISchema schema, string expectedSchemaName);
    private RequestDelegate CreatePipeline(string schemaName, Action`1<IList`1<RequestCoreMiddleware>> defaultPipelineFactory, IList`1<RequestCoreMiddleware> pipeline, IServiceProvider schemaServices, IRequestExecutorOptionsAccessor options);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorResolver/<OnConfigureRequestExecutorOptionsAsync>d__29")]
private static ValueTask`1<RequestExecutorOptions> OnConfigureRequestExecutorOptionsAsync(ConfigurationContext context, RequestExecutorSetup setup, CancellationToken cancellationToken);
    private static void OnConfigureSchemaServices(ConfigurationContext context, IServiceCollection schemaServices, RequestExecutorSetup setup);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorResolver/<OnConfigureSchemaBuilderAsync>d__31")]
private static ValueTask OnConfigureSchemaBuilderAsync(ConfigurationContext context, IServiceProvider schemaServices, RequestExecutorSetup setup, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorResolver/<OnRequestExecutorCreatedAsync>d__32")]
private static ValueTask OnRequestExecutorCreatedAsync(ConfigurationContext context, IRequestExecutor requestExecutor, RequestExecutorSetup setup, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorResolver/<OnRequestExecutorEvictedAsync>d__33")]
private static ValueTask OnRequestExecutorEvictedAsync(RegisteredExecutor registeredExecutor);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Execution.RequestExecutorServiceProviderExtensions : object {
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorServiceProviderExtensions/<GetSchemaAsync>d__0")]
[ExtensionAttribute]
public static ValueTask`1<ISchema> GetSchemaAsync(IServiceProvider services, string schemaName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorServiceProviderExtensions/<BuildSchemaAsync>d__1")]
[ExtensionAttribute]
public static ValueTask`1<ISchema> BuildSchemaAsync(IRequestExecutorBuilder builder, string schemaName, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<IRequestExecutor> GetRequestExecutorAsync(IServiceProvider services, string schemaName, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<IRequestExecutor> BuildRequestExecutorAsync(IRequestExecutorBuilder builder, string schemaName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorServiceProviderExtensions/<ExecuteRequestAsync>d__4")]
[ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteRequestAsync(IServiceProvider services, IQueryRequest request, string schemaName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorServiceProviderExtensions/<ExecuteRequestAsync>d__5")]
[ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteRequestAsync(IRequestExecutorBuilder builder, IQueryRequest request, string schemaName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorServiceProviderExtensions/<ExecuteRequestAsync>d__6")]
[ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteRequestAsync(IServiceProvider services, string query, string schemaName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorServiceProviderExtensions/<ExecuteRequestAsync>d__7")]
[ExtensionAttribute]
public static Task`1<IExecutionResult> ExecuteRequestAsync(IRequestExecutorBuilder builder, string query, string schemaName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.RequestExecutorServiceProviderExtensions/<ExecuteBatchRequestAsync>d__8")]
[ExtensionAttribute]
public static Task`1<IResponseStream> ExecuteBatchRequestAsync(IServiceProvider services, IReadOnlyList`1<IQueryRequest> requestBatch, string schemaName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.RequestExecutorUpdatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IRequestExecutor <Executor>k__BackingField;
    public IRequestExecutor Executor { get; }
    public RequestExecutorUpdatedEventArgs(IRequestExecutor executor);
    [CompilerGeneratedAttribute]
public IRequestExecutor get_Executor();
}
public class HotChocolate.Execution.RequestMiddleware : MulticastDelegate {
    public RequestMiddleware(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual RequestDelegate Invoke(RequestDelegate next);
    public virtual IAsyncResult BeginInvoke(RequestDelegate next, AsyncCallback callback, object object);
    public virtual RequestDelegate EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Serialization.EventStreamResultFormatter : object {
    private static TimeSpan _keepAliveTimeSpan;
    private static Byte[] _eventField;
    private static Byte[] _dataField;
    private static Byte[] _nextEvent;
    private static Byte[] _keepAlive;
    private static Byte[] _completeEvent;
    private static Byte[] _newLine;
    private JsonResultFormatter _payloadFormatter;
    private JsonWriterOptions _options;
    public EventStreamResultFormatter(JsonResultFormatterOptions options);
    private static EventStreamResultFormatter();
    public sealed virtual ValueTask FormatAsync(IExecutionResult result, Stream outputStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.EventStreamResultFormatter/<FormatInternalAsync>d__11")]
private ValueTask FormatInternalAsync(IExecutionResult result, Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.EventStreamResultFormatter/<SendKeepAliveMessagesAsync>d__12")]
private static Task SendKeepAliveMessagesAsync(SemaphoreSlim synchronization, TaskCompletionSource`1<bool> completion, Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.EventStreamResultFormatter/<ProcessResponseStreamAsync>d__13")]
private Task ProcessResponseStreamAsync(SemaphoreSlim synchronization, TaskCompletionSource`1<bool> completion, IResponseStream responseStream, Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.EventStreamResultFormatter/<WriteNextMessageAsync>d__14")]
private ValueTask WriteNextMessageAsync(IQueryResult result, Stream outputStream, CancellationToken ct);
    private void FormatPayload(ArrayWriter bufferWriter, IQueryResult result);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.EventStreamResultFormatter/<WriteCompleteMessage>d__16")]
private static ValueTask WriteCompleteMessage(Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.EventStreamResultFormatter/<WriteNewLineAndFlushAsync>d__17")]
private static ValueTask WriteNewLineAndFlushAsync(Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.EventStreamResultFormatter/<WriteKeepAliveAndFlush>d__18")]
private static ValueTask WriteKeepAliveAndFlush(Stream outputStream, CancellationToken ct);
}
public enum HotChocolate.Execution.Serialization.JsonNullIgnoreCondition : Enum {
    public int value__;
    public static JsonNullIgnoreCondition Default;
    public static JsonNullIgnoreCondition Fields;
    public static JsonNullIgnoreCondition Lists;
    public static JsonNullIgnoreCondition All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Serialization.JsonResultFormatter : object {
    private JsonWriterOptions _options;
    private JsonSerializerOptions _serializerOptions;
    private bool _stripNullProps;
    private bool _stripNullElements;
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Data { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Items { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Errors { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Extensions { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Message { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Locations { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Path { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Line { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Column { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> Incremental { get; }
    public JsonResultFormatter(JsonResultFormatterOptions options);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.JsonResultFormatter/<FormatAsync>d__5")]
public sealed virtual ValueTask FormatAsync(IExecutionResult result, Stream outputStream, CancellationToken cancellationToken);
    public string Format(IQueryResult result);
    public void Format(IQueryResult result, Utf8JsonWriter writer);
    public void FormatError(IError error, Utf8JsonWriter writer);
    public void FormatErrors(IReadOnlyList`1<IError> errors, Utf8JsonWriter writer);
    public sealed virtual void Format(IQueryResult result, IBufferWriter`1<byte> writer);
    private void FormatInternal(IQueryResult result, IBufferWriter`1<byte> writer);
    public sealed virtual ValueTask FormatAsync(IQueryResult result, Stream outputStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.JsonResultFormatter/<FormatInternalAsync>d__13")]
private ValueTask FormatInternalAsync(IQueryResult result, Stream outputStream, CancellationToken cancellationToken);
    private void WriteResult(Utf8JsonWriter writer, IQueryResult result);
    private static void WritePatchInfo(Utf8JsonWriter writer, IQueryResult result);
    private static void WriteHasNext(Utf8JsonWriter writer, IQueryResult result);
    private void WriteData(Utf8JsonWriter writer, IQueryResult result);
    private void WriteItems(Utf8JsonWriter writer, IReadOnlyList`1<object> items);
    private void WriteErrors(Utf8JsonWriter writer, IReadOnlyList`1<IError> errors);
    private void WriteError(Utf8JsonWriter writer, IError error);
    private static void WriteLocations(Utf8JsonWriter writer, IReadOnlyList`1<Location> locations);
    private static void WriteLocation(Utf8JsonWriter writer, Location location);
    private static void WritePath(Utf8JsonWriter writer, Path path);
    private static void WritePathValue(Utf8JsonWriter writer, Path path);
    private void WriteExtensions(Utf8JsonWriter writer, IReadOnlyDictionary`2<string, object> dict);
    private void WriteIncremental(Utf8JsonWriter writer, IReadOnlyList`1<IQueryResult> patches);
    private void WriteDictionary(Utf8JsonWriter writer, IReadOnlyDictionary`2<string, object> dict);
    private void WriteDictionary(Utf8JsonWriter writer, Dictionary`2<string, object> dict);
    private void WriteObjectResult(Utf8JsonWriter writer, ObjectResult objectResult);
    private void WriteListResult(Utf8JsonWriter writer, ListResult list);
    private void WriteList(Utf8JsonWriter writer, IList list);
    private void WriteJsonElement(Utf8JsonWriter writer, JsonElement element);
    private void WriteJsonObject(Utf8JsonWriter writer, JsonElement element);
    private void WriteJsonArray(Utf8JsonWriter writer, JsonElement element);
    private void WriteFieldValue(Utf8JsonWriter writer, object value);
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Data();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Items();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Errors();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Extensions();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Message();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Locations();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Path();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Line();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Column();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_Incremental();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Serialization.JsonResultFormatterOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <Indented>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonNullIgnoreCondition <NullIgnoreCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private JavaScriptEncoder <Encoder>k__BackingField;
    public bool Indented { get; public set; }
    public JsonNullIgnoreCondition NullIgnoreCondition { get; public set; }
    public JavaScriptEncoder Encoder { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Indented();
    [CompilerGeneratedAttribute]
public void set_Indented(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public JsonNullIgnoreCondition get_NullIgnoreCondition();
    [CompilerGeneratedAttribute]
public void set_NullIgnoreCondition(JsonNullIgnoreCondition value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public JavaScriptEncoder get_Encoder();
    [CompilerGeneratedAttribute]
public void set_Encoder(JavaScriptEncoder value);
    internal JsonWriterOptions CreateWriterOptions();
    [NullableContextAttribute("1")]
internal JsonSerializerOptions CreateSerializerOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Execution.Serialization.MultiPartResultFormatter : object {
    [CompilerGeneratedAttribute]
private static Byte[] <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <End>k__BackingField;
    [CompilerGeneratedAttribute]
private static Byte[] <CrLf>k__BackingField;
    private IQueryResultFormatter _payloadFormatter;
    private static Byte[] ContentType { get; }
    private static Byte[] Start { get; }
    private static Byte[] End { get; }
    private static Byte[] CrLf { get; }
    public MultiPartResultFormatter(JsonResultFormatterOptions options);
    public MultiPartResultFormatter(IQueryResultFormatter queryResultFormatter);
    private static MultiPartResultFormatter();
    [CompilerGeneratedAttribute]
private static Byte[] get_ContentType();
    [CompilerGeneratedAttribute]
private static Byte[] get_Start();
    [CompilerGeneratedAttribute]
private static Byte[] get_End();
    [CompilerGeneratedAttribute]
private static Byte[] get_CrLf();
    public sealed virtual ValueTask FormatAsync(IExecutionResult result, Stream outputStream, CancellationToken cancellationToken);
    public ValueTask FormatAsync(IResponseStream responseStream, Stream outputStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.MultiPartResultFormatter/<WriteManyResponsesAsync>d__17")]
private ValueTask WriteManyResponsesAsync(IResponseStream responseStream, Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.MultiPartResultFormatter/<WriteSingleResponseAsync>d__18")]
private ValueTask WriteSingleResponseAsync(IQueryResult queryResult, Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.MultiPartResultFormatter/<WriteResultAsync>d__19")]
private ValueTask WriteResultAsync(IQueryResult result, Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.MultiPartResultFormatter/<WriteResultHeaderAsync>d__20")]
private static ValueTask WriteResultHeaderAsync(Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.MultiPartResultFormatter/<WriteNextAsync>d__21")]
private static ValueTask WriteNextAsync(Stream outputStream, CancellationToken ct);
    [AsyncStateMachineAttribute("HotChocolate.Execution.Serialization.MultiPartResultFormatter/<WriteEndAsync>d__22")]
private static ValueTask WriteEndAsync(Stream outputStream, CancellationToken ct);
}
internal abstract class HotChocolate.Execution.Serialization.NeedsFormatting : object {
    [NullableContextAttribute("1")]
public abstract virtual void FormatValue(Utf8JsonWriter writer, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Execution.Serialization.NeedsFormatting`1 : NeedsFormatting {
    private TValue _value;
    public TValue Value { get; }
    public NeedsFormatting`1(TValue value);
    public TValue get_Value();
    public virtual void FormatValue(Utf8JsonWriter writer, JsonSerializerOptions options);
}
[IsReadOnlyAttribute]
internal class HotChocolate.Execution.Serialization.RawJsonValue : ValueType {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Value>k__BackingField;
    public ReadOnlyMemory`1<byte> Value { get; }
    public RawJsonValue(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Execution.ThrowHelper : object {
    public static GraphQLException VariableIsNotAnInputType(VariableDefinitionNode variableDefinition);
    public static GraphQLException NonNullVariableIsNull(VariableDefinitionNode variableDefinition);
    public static GraphQLException VariableValueInvalidType(VariableDefinitionNode variableDefinition, Exception exception);
    public static GraphQLException FieldDoesNotExistOnType(FieldNode selection, string typeName);
    public static NotSupportedException QueryTypeNotSupported();
    public static GraphQLException VariableNotFound(string variableName);
    public static GraphQLException VariableNotOfType(string variableName, Type type);
    public static GraphQLException RootTypeNotSupported(OperationType operationType);
    public static GraphQLException SubscriptionExecutor_ContextInvalidState();
    public static GraphQLException SubscriptionExecutor_SubscriptionsMustHaveOneField();
    public static GraphQLException SubscriptionExecutor_NoSubscribeResolver();
    public static GraphQLException ResolverContext_LiteralsNotSupported(FieldNode field, Path path, string argumentName, Type requestedType);
    public static GraphQLException ResolverContext_CannotConvertArgument(FieldNode field, Path path, string argumentName, Type requestedType);
    public static GraphQLException ResolverContext_LiteralNotCompatible(FieldNode field, Path path, string argumentName, Type requestedType, Type actualType);
    public static GraphQLException ResolverContext_ArgumentDoesNotExist(FieldNode field, Path path, string argumentName);
    public static InvalidOperationException RequestExecutorResolver_SchemaNameDoesNotMatch(string configurationSchemaName, string schemaName);
    public static GraphQLException OperationResolverHelper_NoOperationFound(DocumentNode documentNode);
    public static GraphQLException OperationResolverHelper_MultipleOperation(OperationDefinitionNode firstOperation, OperationDefinitionNode secondOperation);
    public static GraphQLException OperationResolverHelper_InvalidOperationName(DocumentNode documentNode, string operationName);
    public static GraphQLException BatchExecutor_CannotSerializeVariable(string variableName);
    public static GraphQLException CollectVariablesVisitor_NoCompatibleType(ISyntaxNode node, IReadOnlyList`1<object> path);
    public static GraphQLException FieldVisibility_ValueNotSupported(IValueNode value);
    public static GraphQLException QueryCompiler_CompositeTypeSelectionSet(FieldNode selection);
    public static GraphQLException OperationExecutionMiddleware_NoBatchDispatcher();
    public static SchemaException Convention_UnableToCreateConvention(Type convention);
    public static ObjectDisposedException Object_Not_Initialized();
    public static GraphQLException ResolverContext_CannotCastParent(FieldCoordinate field, Path path, Type requestType, Type parentType);
    public static GraphQLException OneOfFieldMustBeNonNull(FieldCoordinate field);
    public static ArgumentException SelectionSet_TypeContextInvalid(IObjectType typeContext);
    public static InvalidOperationException SelectionSet_TypeAlreadyAdded(IObjectType typeContext);
    public static ArgumentException Operation_NoSelectionSet();
    public static NotSupportedException JsonFormatter_ResultNotSupported(string typeName);
    public static NotSupportedException MultiPartFormatter_ResultNotSupported(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.ExecutionResultExtensions : object {
    private static JsonResultFormatter _formatter;
    private static JsonResultFormatter _formatterIndented;
    private static ExecutionResultExtensions();
    [ExtensionAttribute]
public static void WriteTo(IQueryResult result, IBufferWriter`1<byte> writer, bool withIndentations);
    [ExtensionAttribute]
public static string ToJson(IExecutionResult result, bool withIndentations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.ExecutionSchemaExtensions : object {
    [ExtensionAttribute]
public static IRequestExecutor MakeExecutable(ISchema schema);
    [ExtensionAttribute]
public static IRequestExecutor MakeExecutable(ISchema schema, RequestExecutorOptions options);
    [ExtensionAttribute]
public static bool IsRootType(ISchema schema, IType type);
    private static bool IsType(ObjectType left, IType right);
}
internal static class HotChocolate.Timestamp : object {
    private static long _nanosecondsPerSecond;
    public static long GetNowInNanoseconds();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.DeferredWorkStateOwnerFactory : object {
    private object _sync;
    private ObjectPool`1<DeferredWorkState> _pool;
    [NullableAttribute("2")]
private DeferredWorkStateOwner _owner;
    public DeferredWorkStateOwnerFactory(ObjectPool`1<DeferredWorkState> pool);
    public sealed virtual DeferredWorkStateOwner Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.InternalSchemaServiceCollectionExtensions : object {
    [ExtensionAttribute]
internal static IServiceCollection TryAddOperationExecutors(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDiagnosticEvents(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddTimespanProvider(IServiceCollection services);
    [ExtensionAttribute]
public static T GetApplicationService(IServiceProvider services);
    [ExtensionAttribute]
public static IServiceProvider GetApplicationServices(IServiceProvider services);
    [ExtensionAttribute]
public static IServiceProvider GetCombinedServices(IServiceProvider services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Extensions.DependencyInjection.InternalServiceCollectionExtensions : object {
    [ExtensionAttribute]
internal static IServiceCollection TryAddRequestExecutorFactoryOptionsMonitor(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddVariableCoercion(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddResultPool(IServiceCollection services, int maximumRetained, int maximumArrayCapacity);
    [ExtensionAttribute]
internal static IServiceCollection TryAddResolverTaskPool(IServiceCollection services, int maximumRetained);
    [ExtensionAttribute]
internal static IServiceCollection TryAddOperationCompilerPool(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddOperationContextPool(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDeferredWorkStatePool(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDataLoaderTaskCachePool(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDataLoaderOptions(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddTypeConverter(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddInputFormatter(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddInputParser(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddRequestExecutorResolver(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDefaultCaches(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDefaultDocumentHashProvider(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDefaultBatchDispatcher(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDefaultDataLoaderRegistry(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddIdSerializer(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddDataLoaderParameterExpressionBuilder(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection TryAddParameterExpressionBuilder(IServiceCollection services);
    [ExtensionAttribute]
internal static IServiceCollection AddParameterExpressionBuilder(IServiceCollection services, Func`2<IServiceProvider, T> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.OperationContextFactory : object {
    private IFactory`1<ResolverTask> _resolverTaskFactory;
    private ResultPool _resultPool;
    private ITypeConverter _typeConverter;
    public OperationContextFactory(IFactory`1<ResolverTask> resolverTaskFactory, ResultPool resultPool, ITypeConverter typeConverter);
    public sealed virtual OperationContext Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.OperationContextOwnerFactory : object {
    private ObjectPool`1<OperationContext> _pool;
    public OperationContextOwnerFactory(ObjectPool`1<OperationContext> pool);
    public sealed virtual OperationContextOwner Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions : object {
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureSchema(IRequestExecutorBuilder builder, Action`1<ISchemaBuilder> configureSchema);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureSchemaAsync(IRequestExecutorBuilder builder, Func`3<ISchemaBuilder, CancellationToken, ValueTask> configureSchema);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureSchema(IRequestExecutorBuilder builder, Action`2<IServiceProvider, ISchemaBuilder> configureSchema);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureSchemaAsync(IRequestExecutorBuilder builder, Func`4<IServiceProvider, ISchemaBuilder, CancellationToken, ValueTask> configureSchema);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ModifyRequestOptions(IRequestExecutorBuilder builder, Action`1<RequestExecutorOptions> modify);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ModifyRequestOptionsAsync(IRequestExecutorBuilder builder, Func`3<RequestExecutorOptions, CancellationToken, ValueTask> modify);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ModifyRequestOptions(IRequestExecutorBuilder builder, Action`2<IServiceProvider, RequestExecutorOptions> modify);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ModifyRequestOptionsAsync(IRequestExecutorBuilder builder, Func`4<IServiceProvider, RequestExecutorOptions, CancellationToken, ValueTask> modify);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ModifyParserOptions(IRequestExecutorBuilder builder, Action`1<RequestParserOptions> modify);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetRequestOptions(IRequestExecutorBuilder builder, Func`1<RequestExecutorOptions> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetRequestOptions(IRequestExecutorBuilder builder, Func`2<IServiceProvider, RequestExecutorOptions> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureSchemaServices(IRequestExecutorBuilder builder, Action`1<IServiceCollection> configureServices);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureOnRequestExecutorCreated(IRequestExecutorBuilder builder, Action`1<IRequestExecutor> action);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureOnRequestExecutorCreated(IRequestExecutorBuilder builder, Action`2<IServiceProvider, IRequestExecutor> action);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureOnRequestExecutorCreatedAsync(IRequestExecutorBuilder builder, Func`3<IRequestExecutor, CancellationToken, ValueTask> asyncAction);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ConfigureOnRequestExecutorCreatedAsync(IRequestExecutorBuilder builder, Func`4<IServiceProvider, IRequestExecutor, CancellationToken, ValueTask> asyncAction);
    [ExtensionAttribute]
internal static IRequestExecutorBuilder Configure(IRequestExecutorBuilder builder, Action`1<RequestExecutorSetup> configure);
    [ExtensionAttribute]
internal static IRequestExecutorBuilder Configure(IRequestExecutorBuilder builder, Action`2<IServiceProvider, RequestExecutorSetup> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDataLoader(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDataLoader(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDataLoader(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddErrorFilter(IRequestExecutorBuilder builder, Func`2<IError, IError> errorFilter);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddErrorFilter(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddErrorFilter(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IServiceCollection AddErrorFilter(IServiceCollection services, Func`2<IError, IError> errorFilter);
    [ExtensionAttribute]
public static IServiceCollection AddErrorFilter(IServiceCollection services, Func`2<IServiceProvider, IErrorFilter> factory);
    [ExtensionAttribute]
public static IServiceCollection AddErrorFilter(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddIdSerializer(IServiceCollection services, bool includeSchemaName);
    [ExtensionAttribute]
public static IServiceCollection AddIdSerializer(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddIdSerializer(IServiceCollection services, Func`2<IServiceProvider, IIdSerializer> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddIdSerializer(IRequestExecutorBuilder builder, bool includeSchemaName);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddIdSerializer(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddIdSerializer(IRequestExecutorBuilder builder, Func`2<IServiceProvider, IIdSerializer> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddInputParser(IRequestExecutorBuilder builder, Action`1<InputParserOptions> configure);
    [ExtensionAttribute]
public static IServiceCollection AddInputParser(IServiceCollection services, Action`1<InputParserOptions> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddApolloTracing(IRequestExecutorBuilder builder, TracingPreference tracingPreference, ITimestampProvider timestampProvider);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDiagnosticEventListener(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDiagnosticEventListener(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> diagnosticEventListener);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddOperationCompilerOptimizer(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddOperationCompilerOptimizer(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
[ObsoleteAttribute("Implement IParameterExpressionBuilder")]
public static IRequestExecutorBuilder ConfigureResolverCompiler(IRequestExecutorBuilder builder, Action`1<IResolverCompilerBuilder> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder RegisterService(IRequestExecutorBuilder builder, ServiceKind kind);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTransactionScopeHandler(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTransactionScopeHandler(IRequestExecutorBuilder builder, Func`2<IServiceProvider, ITransactionScopeHandler> create);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDefaultTransactionScopeHandler(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
internal static IRequestExecutorBuilder TryAddNoOpTransactionScopeHandler(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeConverter(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeConverter(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeConverter(IRequestExecutorBuilder builder, ChangeType`2<TSource, TTarget> changeType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeConverter(IRequestExecutorBuilder builder, ChangeTypeProvider changeType);
    [ExtensionAttribute]
public static IServiceCollection AddTypeConverter(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddTypeConverter(IServiceCollection services, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
public static IServiceCollection AddTypeConverter(IServiceCollection services, ChangeType`2<TSource, TTarget> changeType);
    [ExtensionAttribute]
public static IServiceCollection AddTypeConverter(IServiceCollection services, ChangeTypeProvider changeType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeDiscoveryHandler(IRequestExecutorBuilder builder, Func`2<IDescriptorContext, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseRequest(IRequestExecutorBuilder builder, RequestCoreMiddleware middleware);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseRequest(IRequestExecutorBuilder builder, RequestMiddleware middleware);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseRequest(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseDocumentCache(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseDocumentParser(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseDocumentValidation(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseExceptions(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseTimeout(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseInstrumentation(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseOperationCache(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseOperationComplexityAnalyzer(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseOperationExecution(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseOperationResolver(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseOperationVariableCoercion(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseReadPersistedQuery(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseAutomaticPersistedQueryNotFound(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseWritePersistedQuery(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UsePersistedQueryNotFound(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseOnlyPersistedQueriesAllowed(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseDefaultPipeline(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UsePersistedQueryPipeline(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
[ObsoleteAttribute("Use UseAutomaticPersistedQueryPipeline")]
public static IRequestExecutorBuilder UseActivePersistedQueryPipeline(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseAutomaticPersistedQueryPipeline(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
internal static void AddDefaultPipeline(IList`1<RequestCoreMiddleware> pipeline);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddValidationVisitor(IRequestExecutorBuilder builder, bool isCacheable);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddValidationVisitor(IRequestExecutorBuilder builder, Func`3<IServiceProvider, ValidationOptions, T> factory, bool isCacheable);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddValidationRule(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddValidationRule(IRequestExecutorBuilder builder, Func`3<IServiceProvider, ValidationOptions, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddValidationResultAggregator(IRequestExecutorBuilder builder, Func`3<IServiceProvider, ValidationOptions, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddMaxExecutionDepthRule(IRequestExecutorBuilder builder, int maxAllowedExecutionDepth, bool skipIntrospectionFields, bool allowRequestOverrides);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddIntrospectionAllowedRule(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AllowIntrospection(IRequestExecutorBuilder builder, bool allow);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetMaxAllowedValidationErrors(IRequestExecutorBuilder builder, int maxAllowedValidationErrors);
    private static IRequestExecutorBuilder ConfigureValidation(IRequestExecutorBuilder builder, Action`1<IValidationBuilder> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddGraphQLCore(IServiceCollection services);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddGraphQL(IServiceCollection services, string schemaName);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddGraphQL(IRequestExecutorBuilder builder, string schemaName);
    private static IRequestExecutorBuilder CreateBuilder(IServiceCollection services, string schemaName);
    [ExtensionAttribute]
public static IServiceCollection AddDocumentCache(IServiceCollection services, int capacity);
    [ExtensionAttribute]
public static IServiceCollection AddOperationCache(IServiceCollection services, int capacity);
    [ExtensionAttribute]
public static IServiceCollection AddMD5DocumentHashProvider(IServiceCollection services, HashFormat format);
    [ExtensionAttribute]
public static IServiceCollection AddSha1DocumentHashProvider(IServiceCollection services, HashFormat format);
    [ExtensionAttribute]
public static IServiceCollection AddSha256DocumentHashProvider(IServiceCollection services, HashFormat format);
    [ExtensionAttribute]
public static IServiceCollection AddBatchDispatcher(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddBatchScheduler(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddDefaultBatchDispatcher(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ResolverCompilerBuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Implement IParameterExpressionBuilder")]
public static IResolverCompilerBuilder AddParameter(IResolverCompilerBuilder builder, Expression`1<Func`2<IResolverContext, T>> expression, Func`2<ParameterInfo, bool> canHandle);
    [ExtensionAttribute]
[ObsoleteAttribute("Use RegisterService on the IRequestExecutorBuilder")]
public static IResolverCompilerBuilder AddService(IResolverCompilerBuilder builder);
    [ExtensionAttribute]
[ObsoleteAttribute("Use RegisterService on the IRequestExecutorBuilder")]
public static IResolverCompilerBuilder AddScopedService(IResolverCompilerBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions : object {
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddConvention(IRequestExecutorBuilder builder, Type convention, CreateConvention factory, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddConvention(IRequestExecutorBuilder builder, Type type, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddConvention(IRequestExecutorBuilder builder, CreateConvention conventionFactory, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddConvention(IRequestExecutorBuilder builder, Type convention, IConvention concreteConvention, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddConvention(IRequestExecutorBuilder builder, Type convention, Type concreteConvention, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddConvention(IRequestExecutorBuilder builder, IConvention convention, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddConvention(IRequestExecutorBuilder builder, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddConvention(IRequestExecutorBuilder builder, Type convention, CreateConvention factory, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddConvention(IRequestExecutorBuilder builder, Type convention, IConvention concreteConvention, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddConvention(IRequestExecutorBuilder builder, Type convention, Type concreteConvention, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddConvention(IRequestExecutorBuilder builder, CreateConvention conventionFactory, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddConvention(IRequestExecutorBuilder builder, Type type, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddConvention(IRequestExecutorBuilder builder, IConvention convention, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddConvention(IRequestExecutorBuilder builder, string scope);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetOptions(IRequestExecutorBuilder builder, IReadOnlySchemaOptions options);
    [ExtensionAttribute]
public static IRequestExecutorBuilder ModifyOptions(IRequestExecutorBuilder builder, Action`1<SchemaOptions> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetContextData(IRequestExecutorBuilder builder, string key, object value);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TrimTypes(IRequestExecutorBuilder builder, bool trim);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDocument(IRequestExecutorBuilder builder, LoadDocumentAsync loadDocumentAsync);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDocument(IRequestExecutorBuilder builder, DocumentNode document);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDocumentFromString(IRequestExecutorBuilder builder, string sdl);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDocumentFromFile(IRequestExecutorBuilder builder, string filePath);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseField(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseField(IRequestExecutorBuilder builder, Func`3<IServiceProvider, FieldDelegate, TMiddleware> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder MapField(IRequestExecutorBuilder builder, FieldReference fieldReference, FieldMiddleware middleware);
    [ExtensionAttribute]
public static IRequestExecutorBuilder MapField(IRequestExecutorBuilder builder, FieldReference fieldReference);
    [ExtensionAttribute]
public static IRequestExecutorBuilder MapField(IRequestExecutorBuilder builder, FieldReference fieldReference, Func`3<IServiceProvider, FieldDelegate, TMiddleware> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder UseField(IRequestExecutorBuilder builder, FieldMiddleware middleware);
    [ExtensionAttribute]
private static IRequestExecutorBuilder MapFieldMiddleware(IRequestExecutorBuilder builder, FieldReference fieldReference, FieldMiddleware middleware);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetPagingOptions(IRequestExecutorBuilder builder, PagingOptions options);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddGlobalObjectIdentification / AddQueryFieldToMutationPayloads")]
public static IRequestExecutorBuilder EnableRelaySupport(IRequestExecutorBuilder builder, RelayOptions options);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddGlobalObjectIdentification(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddGlobalObjectIdentification(IRequestExecutorBuilder builder, bool registerNodeInterface);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryFieldToMutationPayloads(IRequestExecutorBuilder builder, Action`1<MutationPayloadOptions> configureOptions);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`2<IResolverContext, object> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`2<IResolverContext, ValueTask`1<object>> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`2<IResolverContext, TResult> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`2<IResolverContext, ValueTask`1<TResult>> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`1<object> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`1<ValueTask`1<object>> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`1<TResult> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`1<ValueTask`1<TResult>> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`3<IResolverContext, CancellationToken, object> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`3<IResolverContext, CancellationToken, TResult> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, Func`3<IResolverContext, CancellationToken, ValueTask`1<TResult>> resolver);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, object constantResult);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName, string fieldName, TResult constantResult);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, string typeName);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddResolver(IRequestExecutorBuilder builder, Type resolverType, string typeName);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddParameterExpressionBuilder(IRequestExecutorBuilder builder, Expression`1<Func`2<IResolverContext, T>> expression, Func`2<ParameterInfo, bool> canHandle);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddTypeInterceptor(IRequestExecutorBuilder builder, TypeInterceptor typeInterceptor);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddTypeInterceptor(IRequestExecutorBuilder builder, Type typeInterceptor);
    [ExtensionAttribute]
public static IRequestExecutorBuilder TryAddTypeInterceptor(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeModule(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeModule(IRequestExecutorBuilder builder, Func`2<IServiceProvider, T> factory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddRootType(IRequestExecutorBuilder builder, Type rootType, OperationType operation);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddRootType(IRequestExecutorBuilder builder, ObjectType rootType, OperationType operation);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryType(IRequestExecutorBuilder builder, Action`1<IObjectTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryType(IRequestExecutorBuilder builder, Action`1<IObjectTypeDescriptor`1<T>> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryType(IRequestExecutorBuilder builder, Type queryType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryType(IRequestExecutorBuilder builder, ObjectType queryType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddMutationType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddMutationType(IRequestExecutorBuilder builder, Action`1<IObjectTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddMutationType(IRequestExecutorBuilder builder, Action`1<IObjectTypeDescriptor`1<T>> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddMutationType(IRequestExecutorBuilder builder, Type mutationType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddMutationType(IRequestExecutorBuilder builder, ObjectType mutationType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddMutationType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSubscriptionType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSubscriptionType(IRequestExecutorBuilder builder, Action`1<IObjectTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSubscriptionType(IRequestExecutorBuilder builder, Action`1<IObjectTypeDescriptor`1<T>> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSubscriptionType(IRequestExecutorBuilder builder, Type subscriptionType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSubscriptionType(IRequestExecutorBuilder builder, ObjectType subscriptionType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddSubscriptionType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddObjectType(IRequestExecutorBuilder builder, Action`1<IObjectTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddObjectType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddObjectType(IRequestExecutorBuilder builder, Action`1<IObjectTypeDescriptor`1<T>> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddUnionType(IRequestExecutorBuilder builder, Action`1<IUnionTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddUnionType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddUnionType(IRequestExecutorBuilder builder, Action`1<IUnionTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddEnumType(IRequestExecutorBuilder builder, Action`1<IEnumTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddEnumType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddEnumType(IRequestExecutorBuilder builder, Action`1<IEnumTypeDescriptor`1<T>> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddInterfaceType(IRequestExecutorBuilder builder, Action`1<IInterfaceTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddInterfaceType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddInterfaceType(IRequestExecutorBuilder builder, Action`1<IInterfaceTypeDescriptor`1<T>> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddInputObjectType(IRequestExecutorBuilder builder, Action`1<IInputObjectTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddInputObjectType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddInputObjectType(IRequestExecutorBuilder builder, Action`1<IInputObjectTypeDescriptor`1<T>> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddType(IRequestExecutorBuilder builder, Type type);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddType(IRequestExecutorBuilder builder, INamedType namedType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddType(IRequestExecutorBuilder builder, Func`1<INamedType> namedTypeFactory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddType(IRequestExecutorBuilder builder, Func`2<IServiceProvider, INamedType> namedTypeFactory);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypes(IRequestExecutorBuilder builder, Type[] types);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypes(IRequestExecutorBuilder builder, INamedType[] types);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDirectiveType(IRequestExecutorBuilder builder, Type directiveType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDirectiveType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddDirectiveType(IRequestExecutorBuilder builder, DirectiveType directiveType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetSchema(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetSchema(IRequestExecutorBuilder builder, Type schemaType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetSchema(IRequestExecutorBuilder builder, ISchema schema);
    [ExtensionAttribute]
public static IRequestExecutorBuilder SetSchema(IRequestExecutorBuilder builder, Action`1<ISchemaTypeDescriptor> configure);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeExtension(IRequestExecutorBuilder builder, INamedTypeExtension typeExtension);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeExtension(IRequestExecutorBuilder builder, Type typeExtension);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddTypeExtension(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindRuntimeType")]
public static IRequestExecutorBuilder BindClrType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
public static IRequestExecutorBuilder BindRuntimeType(IRequestExecutorBuilder builder);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindRuntimeType")]
public static IRequestExecutorBuilder BindClrType(IRequestExecutorBuilder builder, Type runtimeType, Type schemaType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder BindRuntimeType(IRequestExecutorBuilder builder, Type runtimeType, Type schemaType);
    [ExtensionAttribute]
public static IRequestExecutorBuilder BindRuntimeType(IRequestExecutorBuilder builder, string typeName);
    [ExtensionAttribute]
public static IRequestExecutorBuilder BindRuntimeType(IRequestExecutorBuilder builder, Type runtimeType, string typeName);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddExportDirectiveType(IRequestExecutorBuilder builder);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
