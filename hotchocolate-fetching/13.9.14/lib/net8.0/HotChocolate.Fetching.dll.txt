[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Fetching.BatchDispatcherResult : object {
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Exception> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static BatchDispatcherResult <Success>k__BackingField;
    public bool IsSuccessful { get; }
    public IReadOnlyList`1<Exception> Exceptions { get; }
    public static BatchDispatcherResult Success { get; }
    public BatchDispatcherResult(IReadOnlyList`1<Exception> exceptions);
    private static BatchDispatcherResult();
    [CompilerGeneratedAttribute]
public bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Exception> get_Exceptions();
    [CompilerGeneratedAttribute]
public static BatchDispatcherResult get_Success();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Fetching.BatchScheduler : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<Func`1<ValueTask>> _localTasks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<Task`1<Exception>> _localProcessing;
    private static int _waitTimeout;
    private SemaphoreSlim _semaphore;
    private object _sync;
    private object _syncTaskEnqueued;
    private List`1<Func`1<ValueTask>> _tasks;
    private bool _dispatchOnSchedule;
    private List`1<EventHandler> _listeners;
    public bool DispatchOnSchedule { get; public set; }
    public sealed virtual void add_TaskEnqueued(EventHandler value);
    public sealed virtual void remove_TaskEnqueued(EventHandler value);
    public sealed virtual bool get_DispatchOnSchedule();
    public sealed virtual void set_DispatchOnSchedule(bool value);
    public sealed virtual void Schedule(Func`1<ValueTask> dispatch);
    public sealed virtual void BeginDispatch(CancellationToken cancellationToken);
    private void BeginProcessTask(Func`1<ValueTask> task, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Fetching.BatchScheduler/<ProcessTaskAsync>d__18")]
private Task ProcessTaskAsync(Func`1<ValueTask> task, CancellationToken cancellationToken);
    private void BeginProcessTasks(List`1<Func`1<ValueTask>> tasks, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Fetching.BatchScheduler/<ProcessTasksAsync>d__20")]
private Task ProcessTasksAsync(List`1<Func`1<ValueTask>> tasks, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Fetching.BatchScheduler/<ExecuteBatchAsync>d__21")]
private static Task`1<Exception> ExecuteBatchAsync(Func`1<ValueTask> executeBatchAsync, CancellationToken cancellationToken);
    private void BeginDispatchOnEnqueue(Func`1<ValueTask> dispatch);
    [AsyncStateMachineAttribute("HotChocolate.Fetching.BatchScheduler/<DispatchOnEnqueue>d__23")]
private Task DispatchOnEnqueue(Func`1<ValueTask> dispatch);
}
internal static class HotChocolate.Fetching.DataLoaderDefaults : object {
    public static int CacheSize;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Fetching.DataLoaderParameterExpressionBuilder : CustomParameterExpressionBuilder {
    private static MethodInfo _dataLoader;
    private static DataLoaderParameterExpressionBuilder();
    public virtual bool CanHandle(ParameterInfo parameter);
    public virtual Expression Build(ParameterExpressionBuilderContext context);
}
public class HotChocolate.Fetching.DefaultDataLoaderRegistry : object {
    [NullableAttribute("1")]
private ConcurrentDictionary`2<string, IDataLoader> _dataLoaders;
    private bool _disposed;
    [NullableContextAttribute("1")]
public sealed virtual T GetOrRegister(string key, Func`1<T> createDataLoader);
    [NullableContextAttribute("1")]
public sealed virtual T GetOrRegister(Func`1<T> createDataLoader);
    public sealed virtual void Dispose();
}
public class HotChocolate.Fetching.FetchBatch`2 : MulticastDelegate {
    public FetchBatch`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<IReadOnlyDictionary`2<TKey, TValue>> Invoke(IReadOnlyList`1<TKey> keys, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(IReadOnlyList`1<TKey> keys, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<IReadOnlyDictionary`2<TKey, TValue>> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Fetching.FetchBatchDataLoader`2 : BatchDataLoader`2<TKey, TValue> {
    private FetchBatch`2<TKey, TValue> _fetch;
    [CompilerGeneratedAttribute]
private string <CacheKeyType>k__BackingField;
    protected string CacheKeyType { get; }
    public FetchBatchDataLoader`2(string key, FetchBatch`2<TKey, TValue> fetch, IBatchScheduler batchScheduler, DataLoaderOptions options);
    [CompilerGeneratedAttribute]
protected virtual string get_CacheKeyType();
    protected virtual Task`1<IReadOnlyDictionary`2<TKey, TValue>> LoadBatchAsync(IReadOnlyList`1<TKey> keys, CancellationToken cancellationToken);
}
public class HotChocolate.Fetching.FetchCache`2 : MulticastDelegate {
    public FetchCache`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<TValue> Invoke(TKey key, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(TKey key, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<TValue> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Fetching.FetchCacheDataLoader`2 : CacheDataLoader`2<TKey, TValue> {
    private FetchCache`2<TKey, TValue> _fetch;
    [CompilerGeneratedAttribute]
private string <CacheKeyType>k__BackingField;
    protected string CacheKeyType { get; }
    public FetchCacheDataLoader`2(string key, FetchCache`2<TKey, TValue> fetch, DataLoaderOptions options);
    [CompilerGeneratedAttribute]
protected virtual string get_CacheKeyType();
    protected virtual Task`1<TValue> LoadSingleAsync(TKey key, CancellationToken cancellationToken);
}
public class HotChocolate.Fetching.FetchGroup`2 : MulticastDelegate {
    public FetchGroup`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<ILookup`2<TKey, TValue>> Invoke(IReadOnlyList`1<TKey> keys, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(IReadOnlyList`1<TKey> keys, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<ILookup`2<TKey, TValue>> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Fetching.FetchGroupedDataLoader`2 : GroupedDataLoader`2<TKey, TValue> {
    private FetchGroup`2<TKey, TValue> _fetch;
    [CompilerGeneratedAttribute]
private string <CacheKeyType>k__BackingField;
    protected string CacheKeyType { get; }
    public FetchGroupedDataLoader`2(string key, FetchGroup`2<TKey, TValue> fetch, IBatchScheduler batchScheduler, DataLoaderOptions options);
    [CompilerGeneratedAttribute]
protected virtual string get_CacheKeyType();
    protected virtual Task`1<ILookup`2<TKey, TValue>> LoadGroupedBatchAsync(IReadOnlyList`1<TKey> keys, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Fetching.IBatchDispatcher {
    public bool DispatchOnSchedule { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskEnqueued(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskEnqueued(EventHandler value);
    public abstract virtual bool get_DispatchOnSchedule();
    public abstract virtual void set_DispatchOnSchedule(bool value);
    public abstract virtual void BeginDispatch(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Fetching.IDataLoaderRegistry {
    public abstract virtual T GetOrRegister(string key, Func`1<T> createDataLoader);
    public abstract virtual T GetOrRegister(Func`1<T> createDataLoader);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Fetching.Properties.FetchingResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DataLoaderRegistry_KeyNullOrEmpty { get; }
    internal static string DefaultDataLoaderRegistry_GetOrRegister { get; }
    internal static string DataLoaderResolverContextExtensions_CreateDataLoader_AbstractType { get; }
    internal static string DataLoaderResolverContextExtensions_CreateDataLoader_UnableToCreate { get; }
    internal static string DataLoaderResolverContextExtensions_RegistryIsNull { get; }
    internal static string DataLoaderResolverContextExtensions_UnableToRegister { get; }
    internal static string ThrowHelper_DataLoader_InvalidType { get; }
    internal static string BatchDispatcherResult_NoExceptions { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DataLoaderRegistry_KeyNullOrEmpty();
    internal static string get_DefaultDataLoaderRegistry_GetOrRegister();
    internal static string get_DataLoaderResolverContextExtensions_CreateDataLoader_AbstractType();
    internal static string get_DataLoaderResolverContextExtensions_CreateDataLoader_UnableToCreate();
    internal static string get_DataLoaderResolverContextExtensions_RegistryIsNull();
    internal static string get_DataLoaderResolverContextExtensions_UnableToRegister();
    internal static string get_ThrowHelper_DataLoader_InvalidType();
    internal static string get_BatchDispatcherResult_NoExceptions();
}
public class HotChocolate.Fetching.RegisterDataLoaderException : GraphQLException {
    [NullableContextAttribute("1")]
public RegisterDataLoaderException(string message);
}
internal static class HotChocolate.Fetching.Utilities.ThrowHelper : object {
    [NullableContextAttribute("1")]
public static SchemaException DataLoader_InvalidType(Type dataLoaderType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.DataLoaderObjectFieldExtensions : object {
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseDataloader(IObjectFieldDescriptor descriptor);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseDataloader(IObjectFieldDescriptor descriptor, Type dataLoaderType);
    private static void CompileMiddleware(ObjectFieldDefinition definition, FieldMiddlewareDefinition placeholder, Type keyType, Type valueType, Type dataLoaderType);
    [NullableContextAttribute("2")]
private static bool TryGetDataLoaderTypes(Type type, Type& key, Type& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.DataLoaderResolverContextExtensions : object {
    [ExtensionAttribute]
public static Task`1<TValue> BatchAsync(IResolverContext context, FetchBatch`2<TKey, TValue> fetch, TKey key, string dataLoaderName);
    [ExtensionAttribute]
public static IDataLoader`2<TKey, TValue> BatchDataLoader(IResolverContext context, FetchBatch`2<TKey, TValue> fetch, string dataLoaderName);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IDataLoader`2<TKey, TValue> BatchDataLoader(IResolverContext context, string dataLoaderName, FetchBatch`2<TKey, TValue> fetch);
    [ExtensionAttribute]
public static Task`1<TValue[]> GroupAsync(IResolverContext context, FetchGroup`2<TKey, TValue> fetch, TKey key, string dataLoaderName);
    [ExtensionAttribute]
public static IDataLoader`2<TKey, TValue[]> GroupDataLoader(IResolverContext context, FetchGroup`2<TKey, TValue> fetch, string dataLoaderName);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IDataLoader`2<TKey, TValue[]> GroupDataLoader(IResolverContext context, string dataLoaderName, FetchGroup`2<TKey, TValue> fetch);
    [ExtensionAttribute]
public static Task`1<TValue> CacheAsync(IResolverContext context, FetchCache`2<TKey, TValue> fetch, TKey key, string dataLoaderName);
    [ExtensionAttribute]
public static IDataLoader`2<TKey, TValue> CacheDataLoader(IResolverContext context, FetchCache`2<TKey, TValue> fetch, string key);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static IDataLoader`2<TKey, TValue> CacheDataLoader(IResolverContext context, string key, FetchCache`2<TKey, TValue> fetch);
    [ExtensionAttribute]
public static Task`1<TValue> CacheAsync(IResolverContext context, Func`2<CancellationToken, Task`1<TValue>> fetch, string dataLoaderName);
    [ExtensionAttribute]
public static Task`1<TValue> FetchOnceAsync(IResolverContext context, Func`2<CancellationToken, Task`1<TValue>> fetch, string key);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static Task`1<TValue> FetchOnceAsync(IResolverContext context, string key, Func`2<CancellationToken, Task`1<TValue>> fetch);
    [ExtensionAttribute]
[GetDataLoaderAttribute]
public static T DataLoader(IResolverContext context);
    private static T CreateDataLoader(IServiceProvider services);
}
internal class HotChocolate.Types.GetDataLoaderAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.UseDataLoaderAttribute : ObjectFieldDescriptorAttribute {
    private Type _dataLoaderType;
    public UseDataLoaderAttribute(Type dataLoaderType, int order);
    protected virtual void OnConfigure(IDescriptorContext context, IObjectFieldDescriptor descriptor, MemberInfo member);
}
