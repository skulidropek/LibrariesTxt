[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.ArgumentNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <Value>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public NameNode Name { get; }
    public IValueNode Value { get; }
    public ArgumentNode(string name, string value);
    public ArgumentNode(string name, int value);
    public ArgumentNode(string name, bool value);
    public ArgumentNode(string name, IValueNode value);
    public ArgumentNode(NameNode name, IValueNode value);
    public ArgumentNode(Location location, NameNode name, IValueNode value);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public NameNode get_Name();
    [CompilerGeneratedAttribute]
public IValueNode get_Value();
    [IteratorStateMachineAttribute("HotChocolate.Language.ArgumentNode/<GetNodes>d__17")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public ArgumentNode WithLocation(Location location);
    public ArgumentNode WithName(NameNode name);
    public ArgumentNode WithValue(IValueNode value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.BooleanValueNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private static BooleanValueNode <True>k__BackingField;
    [CompilerGeneratedAttribute]
private static BooleanValueNode <False>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public bool Value { get; }
    private object HotChocolate.Language.IValueNode.Value { get; }
    public static BooleanValueNode True { get; }
    public static BooleanValueNode False { get; }
    public BooleanValueNode(bool value);
    [NullableContextAttribute("2")]
public BooleanValueNode(Location location, bool value);
    private static BooleanValueNode();
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Value();
    private sealed virtual override object HotChocolate.Language.IValueNode.get_Value();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public BooleanValueNode WithLocation(Location location);
    public BooleanValueNode WithValue(bool value);
    [CompilerGeneratedAttribute]
public static BooleanValueNode get_True();
    [CompilerGeneratedAttribute]
public static BooleanValueNode get_False();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Language.ComplexTypeDefinitionNodeBase : NamedSyntaxNode {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NamedTypeNode> <Interfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<FieldDefinitionNode> <Fields>k__BackingField;
    public IReadOnlyList`1<NamedTypeNode> Interfaces { get; }
    public IReadOnlyList`1<FieldDefinitionNode> Fields { get; }
    protected ComplexTypeDefinitionNodeBase(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<NamedTypeNode> interfaces, IReadOnlyList`1<FieldDefinitionNode> fields);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NamedTypeNode> get_Interfaces();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<FieldDefinitionNode> get_Fields();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.DirectiveDefinitionNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRepeatable>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<InputValueDefinitionNode> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NameNode> <Locations>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public NameNode Name { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public bool IsRepeatable { get; }
    public IReadOnlyList`1<InputValueDefinitionNode> Arguments { get; }
    public IReadOnlyList`1<NameNode> Locations { get; }
    public DirectiveDefinitionNode(Location location, NameNode name, StringValueNode description, bool isRepeatable, IReadOnlyList`1<InputValueDefinitionNode> arguments, IReadOnlyList`1<NameNode> locations);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual NameNode get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StringValueNode get_Description();
    [CompilerGeneratedAttribute]
public bool get_IsRepeatable();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<InputValueDefinitionNode> get_Arguments();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NameNode> get_Locations();
    [IteratorStateMachineAttribute("HotChocolate.Language.DirectiveDefinitionNode/<GetNodes>d__21")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public DirectiveDefinitionNode WithLocation(Location location);
    public DirectiveDefinitionNode WithName(NameNode name);
    public DirectiveDefinitionNode WithDescription(StringValueNode description);
    public DirectiveDefinitionNode AsRepeatable(bool repeatable);
    public DirectiveDefinitionNode WithArguments(IReadOnlyList`1<InputValueDefinitionNode> arguments);
    public DirectiveDefinitionNode WithLocations(IReadOnlyList`1<NameNode> locations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.DirectiveLocation : object {
    private static Dictionary`2<string, DirectiveLocation> _cache;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Mutation>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Subscription>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <FragmentDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <FragmentSpread>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <InlineFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <VariableDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Scalar>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <FieldDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <ArgumentDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Interface>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <EnumValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <InputObject>k__BackingField;
    [CompilerGeneratedAttribute]
private static DirectiveLocation <InputFieldDefinition>k__BackingField;
    public string Value { get; }
    public static DirectiveLocation Query { get; }
    public static DirectiveLocation Mutation { get; }
    public static DirectiveLocation Subscription { get; }
    public static DirectiveLocation Field { get; }
    public static DirectiveLocation FragmentDefinition { get; }
    public static DirectiveLocation FragmentSpread { get; }
    public static DirectiveLocation InlineFragment { get; }
    public static DirectiveLocation VariableDefinition { get; }
    public static DirectiveLocation Schema { get; }
    public static DirectiveLocation Scalar { get; }
    public static DirectiveLocation Object { get; }
    public static DirectiveLocation FieldDefinition { get; }
    public static DirectiveLocation ArgumentDefinition { get; }
    public static DirectiveLocation Interface { get; }
    public static DirectiveLocation Union { get; }
    public static DirectiveLocation Enum { get; }
    public static DirectiveLocation EnumValue { get; }
    public static DirectiveLocation InputObject { get; }
    public static DirectiveLocation InputFieldDefinition { get; }
    private static DirectiveLocation();
    private DirectiveLocation(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(DirectiveLocation other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Query();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Mutation();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Subscription();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Field();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_FragmentDefinition();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_FragmentSpread();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_InlineFragment();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_VariableDefinition();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Schema();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Scalar();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Object();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_FieldDefinition();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_ArgumentDefinition();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Interface();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Union();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_Enum();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_EnumValue();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_InputObject();
    [CompilerGeneratedAttribute]
public static DirectiveLocation get_InputFieldDefinition();
    public static bool IsValidName(string value);
    public static bool TryParse(string value, DirectiveLocation& location);
    [IteratorStateMachineAttribute("HotChocolate.Language.DirectiveLocation/<GetAll>d__69")]
private static IEnumerable`1<DirectiveLocation> GetAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.DirectiveNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ArgumentNode> <Arguments>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public NameNode Name { get; }
    public IReadOnlyList`1<ArgumentNode> Arguments { get; }
    public DirectiveNode(string name, ArgumentNode[] arguments);
    public DirectiveNode(string name, IReadOnlyList`1<ArgumentNode> arguments);
    public DirectiveNode(NameNode name, IReadOnlyList`1<ArgumentNode> arguments);
    public DirectiveNode(Location location, NameNode name, IReadOnlyList`1<ArgumentNode> arguments);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public NameNode get_Name();
    [IteratorStateMachineAttribute("HotChocolate.Language.DirectiveNode/<GetNodes>d__12")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ArgumentNode> get_Arguments();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public DirectiveNode WithLocation(Location location);
    public DirectiveNode WithName(NameNode name);
    public DirectiveNode WithArguments(IReadOnlyList`1<ArgumentNode> arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.DocumentNode : object {
    private int _count;
    private int _fieldsCount;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IDefinitionNode> <Definitions>k__BackingField;
    [CompilerGeneratedAttribute]
private static DocumentNode <Empty>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public IReadOnlyList`1<IDefinitionNode> Definitions { get; }
    public int Count { get; }
    public int FieldsCount { get; }
    public static DocumentNode Empty { get; }
    public DocumentNode(IReadOnlyList`1<IDefinitionNode> definitions);
    public DocumentNode(Location location, IReadOnlyList`1<IDefinitionNode> definitions);
    internal DocumentNode(Location location, IReadOnlyList`1<IDefinitionNode> definitions, int nodesCount, int fieldsCount);
    private static DocumentNode();
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IDefinitionNode> get_Definitions();
    public int get_Count();
    public int get_FieldsCount();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public DocumentNode WithLocation(Location location);
    public DocumentNode WithDefinitions(IReadOnlyList`1<IDefinitionNode> definitions);
    [CompilerGeneratedAttribute]
public static DocumentNode get_Empty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.EnumTypeDefinitionNode : EnumTypeDefinitionNodeBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public EnumTypeDefinitionNode(Location location, NameNode name, StringValueNode description, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<EnumValueDefinitionNode> values);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual StringValueNode get_Description();
    [IteratorStateMachineAttribute("HotChocolate.Language.EnumTypeDefinitionNode/<GetNodes>d__6")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public EnumTypeDefinitionNode WithLocation(Location location);
    public EnumTypeDefinitionNode WithName(NameNode name);
    public EnumTypeDefinitionNode WithDescription(StringValueNode description);
    public EnumTypeDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public EnumTypeDefinitionNode WithValues(IReadOnlyList`1<EnumValueDefinitionNode> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Language.EnumTypeDefinitionNodeBase : NamedSyntaxNode {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<EnumValueDefinitionNode> <Values>k__BackingField;
    public IReadOnlyList`1<EnumValueDefinitionNode> Values { get; }
    protected EnumTypeDefinitionNodeBase(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<EnumValueDefinitionNode> values);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<EnumValueDefinitionNode> get_Values();
}
public class HotChocolate.Language.EnumTypeExtensionNode : EnumTypeDefinitionNodeBase {
    public SyntaxKind Kind { get; }
    [NullableContextAttribute("1")]
public EnumTypeExtensionNode(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<EnumValueDefinitionNode> values);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("HotChocolate.Language.EnumTypeExtensionNode/<GetNodes>d__3")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public virtual string ToString(bool indented);
    [NullableContextAttribute("1")]
public EnumTypeExtensionNode WithLocation(Location location);
    [NullableContextAttribute("1")]
public EnumTypeExtensionNode WithName(NameNode name);
    [NullableContextAttribute("1")]
public EnumTypeExtensionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    [NullableContextAttribute("1")]
public EnumTypeExtensionNode WithValues(IReadOnlyList`1<EnumValueDefinitionNode> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.EnumValueDefinitionNode : NamedSyntaxNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public EnumValueDefinitionNode(Location location, NameNode name, StringValueNode description, IReadOnlyList`1<DirectiveNode> directives);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StringValueNode get_Description();
    [IteratorStateMachineAttribute("HotChocolate.Language.EnumValueDefinitionNode/<GetNodes>d__6")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public EnumValueDefinitionNode WithLocation(Location location);
    public EnumValueDefinitionNode WithName(NameNode name);
    public EnumValueDefinitionNode WithDescription(StringValueNode description);
    public EnumValueDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.EnumValueNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public string Value { get; }
    private object HotChocolate.Language.IValueNode.Value { get; }
    public EnumValueNode(object value);
    public EnumValueNode(string value);
    public EnumValueNode(Location location, string value);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    private sealed virtual override object HotChocolate.Language.IValueNode.get_Value();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public EnumValueNode WithLocation(Location location);
    public EnumValueNode WithValue(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.FieldDefinitionNode : NamedSyntaxNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<InputValueDefinitionNode> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeNode <Type>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public IReadOnlyList`1<InputValueDefinitionNode> Arguments { get; }
    public ITypeNode Type { get; }
    public FieldDefinitionNode(Location location, NameNode name, StringValueNode description, IReadOnlyList`1<InputValueDefinitionNode> arguments, ITypeNode type, IReadOnlyList`1<DirectiveNode> directives);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StringValueNode get_Description();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<InputValueDefinitionNode> get_Arguments();
    [CompilerGeneratedAttribute]
public ITypeNode get_Type();
    [IteratorStateMachineAttribute("HotChocolate.Language.FieldDefinitionNode/<GetNodes>d__12")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public FieldDefinitionNode WithLocation(Location location);
    public FieldDefinitionNode WithName(NameNode name);
    public FieldDefinitionNode WithDescription(StringValueNode description);
    public FieldDefinitionNode WithArguments(IReadOnlyList`1<InputValueDefinitionNode> arguments);
    public FieldDefinitionNode WithType(ITypeNode type);
    public FieldDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.FieldNode : NamedSyntaxNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameNode <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ArgumentNode> <Arguments>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INullabilityNode <Required>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SelectionSetNode <SelectionSet>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public NameNode Alias { get; }
    public IReadOnlyList`1<ArgumentNode> Arguments { get; }
    [NullableAttribute("2")]
public INullabilityNode Required { get; }
    [NullableAttribute("2")]
public SelectionSetNode SelectionSet { get; }
    public FieldNode(string name);
    public FieldNode(NameNode name, NameNode alias, INullabilityNode required, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<ArgumentNode> arguments, SelectionSetNode selectionSet);
    [NullableContextAttribute("2")]
public FieldNode(Location location, NameNode name, NameNode alias, INullabilityNode required, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<ArgumentNode> arguments, SelectionSetNode selectionSet);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NameNode get_Alias();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ArgumentNode> get_Arguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INullabilityNode get_Required();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SelectionSetNode get_SelectionSet();
    [IteratorStateMachineAttribute("HotChocolate.Language.FieldNode/<GetNodes>d__17")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public FieldNode WithLocation(Location location);
    public FieldNode WithName(NameNode name);
    public FieldNode WithAlias(NameNode alias);
    public FieldNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public FieldNode WithArguments(IReadOnlyList`1<ArgumentNode> arguments);
    public FieldNode WithSelectionSet(SelectionSetNode selectionSet);
    public FieldNode WithRequired(INullabilityNode required);
}
public enum HotChocolate.Language.FloatFormat : Enum {
    public int value__;
    public static FloatFormat FixedPoint;
    public static FloatFormat Exponential;
}
public class HotChocolate.Language.FloatValueNode : object {
    private ReadOnlyMemory`1<byte> _memory;
    [NullableAttribute("2")]
private string _stringValue;
    private Nullable`1<float> _floatValue;
    private Nullable`1<double> _doubleValue;
    private Nullable`1<decimal> _decimalValue;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private FloatFormat <Format>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public FloatFormat Format { get; }
    [NullableAttribute("1")]
public string Value { get; }
    [NullableAttribute("1")]
private object HotChocolate.Language.IValueNode.Value { get; }
    public FloatValueNode(double value);
    [NullableContextAttribute("2")]
public FloatValueNode(Location location, double value);
    public FloatValueNode(decimal value);
    [NullableContextAttribute("2")]
public FloatValueNode(Location location, decimal value);
    public FloatValueNode(ReadOnlyMemory`1<byte> value, FloatFormat format);
    public FloatValueNode(Location location, ReadOnlyMemory`1<byte> value, FloatFormat format);
    [NullableContextAttribute("2")]
private FloatValueNode(Location location, FloatFormat format);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public FloatFormat get_Format();
    [NullableContextAttribute("1")]
public sealed virtual string get_Value();
    [NullableContextAttribute("1")]
private sealed virtual override object HotChocolate.Language.IValueNode.get_Value();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public sealed virtual string ToString(bool indented);
    public sealed virtual float ToSingle();
    public sealed virtual double ToDouble();
    public sealed virtual decimal ToDecimal();
    public sealed virtual ReadOnlySpan`1<byte> AsSpan();
    internal ReadOnlyMemory`1<byte> AsMemory();
    [NullableContextAttribute("1")]
public FloatValueNode WithLocation(Location location);
    [NullableContextAttribute("1")]
public FloatValueNode WithValue(double value);
    [NullableContextAttribute("1")]
public FloatValueNode WithValue(decimal value);
    public FloatValueNode WithValue(ReadOnlyMemory`1<byte> value, FloatFormat format);
    public FloatValueNode WithValue(ReadOnlySpan`1<byte> value, FloatFormat format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.FragmentDefinitionNode : NamedSyntaxNode {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<VariableDefinitionNode> <VariableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private NamedTypeNode <TypeCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionSetNode <SelectionSet>k__BackingField;
    public SyntaxKind Kind { get; }
    public IReadOnlyList`1<VariableDefinitionNode> VariableDefinitions { get; }
    public NamedTypeNode TypeCondition { get; }
    public SelectionSetNode SelectionSet { get; }
    public FragmentDefinitionNode(Location location, NameNode name, IReadOnlyList`1<VariableDefinitionNode> variableDefinitions, NamedTypeNode typeCondition, IReadOnlyList`1<DirectiveNode> directives, SelectionSetNode selectionSet);
    public virtual SyntaxKind get_Kind();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<VariableDefinitionNode> get_VariableDefinitions();
    [CompilerGeneratedAttribute]
public NamedTypeNode get_TypeCondition();
    [CompilerGeneratedAttribute]
public SelectionSetNode get_SelectionSet();
    [IteratorStateMachineAttribute("HotChocolate.Language.FragmentDefinitionNode/<GetNodes>d__12")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public FragmentDefinitionNode WithLocation(Location location);
    public FragmentDefinitionNode WithName(NameNode name);
    public FragmentDefinitionNode WithVariableDefinitions(IReadOnlyList`1<VariableDefinitionNode> variableDefinitions);
    public FragmentDefinitionNode WithTypeCondition(NamedTypeNode typeCondition);
    public FragmentDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public FragmentDefinitionNode WithSelectionSet(SelectionSetNode selectionSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.FragmentSpreadNode : NamedSyntaxNode {
    public SyntaxKind Kind { get; }
    public FragmentSpreadNode(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives);
    public virtual SyntaxKind get_Kind();
    [IteratorStateMachineAttribute("HotChocolate.Language.FragmentSpreadNode/<GetNodes>d__3")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public FragmentSpreadNode WithLocation(Location location);
    public FragmentSpreadNode WithName(NameNode name);
    public FragmentSpreadNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
}
internal static class HotChocolate.Language.HashCodeExtensions : object {
    public static void AddBytes(HashCode& hashCode, ReadOnlySpan`1<byte> value);
}
public interface HotChocolate.Language.IDefinitionNode {
}
public interface HotChocolate.Language.IExecutableDefinitionNode {
}
public interface HotChocolate.Language.IFloatValueLiteral {
    public abstract virtual float ToSingle();
    public abstract virtual double ToDouble();
    public abstract virtual decimal ToDecimal();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Language.IHasDirectives {
    public IReadOnlyList`1<DirectiveNode> Directives { get; }
    public abstract virtual IReadOnlyList`1<DirectiveNode> get_Directives();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Language.IHasName {
    public NameNode Name { get; }
    public abstract virtual NameNode get_Name();
}
public interface HotChocolate.Language.IHasSpan {
    public abstract virtual ReadOnlySpan`1<byte> AsSpan();
}
public interface HotChocolate.Language.IIntValueLiteral {
    public abstract virtual byte ToByte();
    public abstract virtual short ToInt16();
    public abstract virtual int ToInt32();
    public abstract virtual long ToInt64();
    public abstract virtual sbyte ToSByte();
    public abstract virtual ushort ToUInt16();
    public abstract virtual UInt32 ToUInt32();
    public abstract virtual ulong ToUInt64();
}
public interface HotChocolate.Language.INamedSyntaxNode {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.InlineFragmentNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamedTypeNode <TypeCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DirectiveNode> <Directives>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionSetNode <SelectionSet>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    [NullableAttribute("2")]
public NamedTypeNode TypeCondition { get; }
    public IReadOnlyList`1<DirectiveNode> Directives { get; }
    public SelectionSetNode SelectionSet { get; }
    public InlineFragmentNode(Location location, NamedTypeNode typeCondition, IReadOnlyList`1<DirectiveNode> directives, SelectionSetNode selectionSet);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamedTypeNode get_TypeCondition();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<DirectiveNode> get_Directives();
    [CompilerGeneratedAttribute]
public SelectionSetNode get_SelectionSet();
    [IteratorStateMachineAttribute("HotChocolate.Language.InlineFragmentNode/<GetNodes>d__15")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public InlineFragmentNode WithLocation(Location location);
    public InlineFragmentNode WithTypeCondition(NamedTypeNode typeCondition);
    public InlineFragmentNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public InlineFragmentNode WithSelectionSet(SelectionSetNode selectionSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.InputObjectTypeDefinitionNode : InputObjectTypeDefinitionNodeBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public InputObjectTypeDefinitionNode(Location location, NameNode name, StringValueNode description, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<InputValueDefinitionNode> fields);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual StringValueNode get_Description();
    [IteratorStateMachineAttribute("HotChocolate.Language.InputObjectTypeDefinitionNode/<GetNodes>d__6")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public InputObjectTypeDefinitionNode WithLocation(Location location);
    public InputObjectTypeDefinitionNode WithName(NameNode name);
    public InputObjectTypeDefinitionNode WithDescription(StringValueNode description);
    public InputObjectTypeDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public InputObjectTypeDefinitionNode WithFields(IReadOnlyList`1<InputValueDefinitionNode> fields);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Language.InputObjectTypeDefinitionNodeBase : NamedSyntaxNode {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<InputValueDefinitionNode> <Fields>k__BackingField;
    public IReadOnlyList`1<InputValueDefinitionNode> Fields { get; }
    protected InputObjectTypeDefinitionNodeBase(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<InputValueDefinitionNode> fields);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<InputValueDefinitionNode> get_Fields();
}
public class HotChocolate.Language.InputObjectTypeExtensionNode : InputObjectTypeDefinitionNodeBase {
    public SyntaxKind Kind { get; }
    [NullableContextAttribute("1")]
public InputObjectTypeExtensionNode(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<InputValueDefinitionNode> fields);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("HotChocolate.Language.InputObjectTypeExtensionNode/<GetNodes>d__3")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public virtual string ToString(bool indented);
    [NullableContextAttribute("1")]
public InputObjectTypeExtensionNode WithLocation(Location location);
    [NullableContextAttribute("1")]
public InputObjectTypeExtensionNode WithName(NameNode name);
    [NullableContextAttribute("1")]
public InputObjectTypeExtensionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    [NullableContextAttribute("1")]
public InputObjectTypeExtensionNode WithFields(IReadOnlyList`1<InputValueDefinitionNode> fields);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.InputValueDefinitionNode : NamedSyntaxNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeNode <Type>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IValueNode <DefaultValue>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public ITypeNode Type { get; }
    [NullableAttribute("2")]
public IValueNode DefaultValue { get; }
    public InputValueDefinitionNode(Location location, NameNode name, StringValueNode description, ITypeNode type, IValueNode defaultValue, IReadOnlyList`1<DirectiveNode> directives);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StringValueNode get_Description();
    [CompilerGeneratedAttribute]
public ITypeNode get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IValueNode get_DefaultValue();
    [IteratorStateMachineAttribute("HotChocolate.Language.InputValueDefinitionNode/<GetNodes>d__12")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public InputValueDefinitionNode WithLocation(Location location);
    public InputValueDefinitionNode WithName(NameNode name);
    public InputValueDefinitionNode WithDescription(StringValueNode description);
    public InputValueDefinitionNode WithType(ITypeNode type);
    public InputValueDefinitionNode WithDefaultValue(IValueNode defaultValue);
    public InputValueDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.InterfaceTypeDefinitionNode : ComplexTypeDefinitionNodeBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public InterfaceTypeDefinitionNode(Location location, NameNode name, StringValueNode description, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<NamedTypeNode> interfaces, IReadOnlyList`1<FieldDefinitionNode> fields);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual StringValueNode get_Description();
    [IteratorStateMachineAttribute("HotChocolate.Language.InterfaceTypeDefinitionNode/<GetNodes>d__6")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public InterfaceTypeDefinitionNode WithLocation(Location location);
    public InterfaceTypeDefinitionNode WithName(NameNode name);
    public InterfaceTypeDefinitionNode WithDescription(StringValueNode description);
    public InterfaceTypeDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public InterfaceTypeDefinitionNode WithFields(IReadOnlyList`1<FieldDefinitionNode> fields);
    public InterfaceTypeDefinitionNode WithInterfaces(IReadOnlyList`1<NamedTypeNode> interfaces);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.InterfaceTypeExtensionNode : ComplexTypeDefinitionNodeBase {
    public SyntaxKind Kind { get; }
    public InterfaceTypeExtensionNode(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<NamedTypeNode> interfaces, IReadOnlyList`1<FieldDefinitionNode> fields);
    public virtual SyntaxKind get_Kind();
    [IteratorStateMachineAttribute("HotChocolate.Language.InterfaceTypeExtensionNode/<GetNodes>d__3")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public InterfaceTypeExtensionNode WithLocation(Location location);
    public InterfaceTypeExtensionNode WithName(NameNode name);
    public InterfaceTypeExtensionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public InterfaceTypeExtensionNode WithFields(IReadOnlyList`1<FieldDefinitionNode> fields);
    public InterfaceTypeExtensionNode WithInterfaces(IReadOnlyList`1<NamedTypeNode> interfaces);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.IntValueNode : object {
    [NullableAttribute("0")]
private ReadOnlyMemory`1<byte> _memory;
    [NullableAttribute("2")]
private string _stringValue;
    private Nullable`1<byte> _byteValue;
    private Nullable`1<sbyte> _sbyteValue;
    private Nullable`1<short> _shortValue;
    private Nullable`1<int> _intValue;
    private Nullable`1<long> _longValue;
    private Nullable`1<float> _floatValue;
    private Nullable`1<double> _doubleValue;
    private Nullable`1<decimal> _decimalValue;
    private Nullable`1<ushort> _uShortValue;
    private Nullable`1<UInt32> _uIntValue;
    private Nullable`1<ulong> _uLongValue;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public string Value { get; }
    private object HotChocolate.Language.IValueNode.Value { get; }
    public IntValueNode(byte value);
    [NullableContextAttribute("2")]
public IntValueNode(Location location, byte value);
    public IntValueNode(short value);
    [NullableContextAttribute("2")]
public IntValueNode(Location location, short value);
    public IntValueNode(int value);
    [NullableContextAttribute("2")]
public IntValueNode(Location location, int value);
    public IntValueNode(long value);
    [NullableContextAttribute("2")]
public IntValueNode(Location location, long value);
    public IntValueNode(sbyte value);
    [NullableContextAttribute("2")]
public IntValueNode(Location location, sbyte value);
    public IntValueNode(ushort value);
    [NullableContextAttribute("2")]
public IntValueNode(Location location, ushort value);
    public IntValueNode(UInt32 value);
    [NullableContextAttribute("2")]
public IntValueNode(Location location, UInt32 value);
    public IntValueNode(ulong value);
    [NullableContextAttribute("2")]
public IntValueNode(Location location, ulong value);
    [NullableContextAttribute("0")]
public IntValueNode(ReadOnlyMemory`1<byte> value);
    [NullableContextAttribute("0")]
public IntValueNode(Location location, ReadOnlyMemory`1<byte> value);
    [NullableContextAttribute("2")]
private IntValueNode(Location location);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    public sealed virtual string get_Value();
    private sealed virtual override object HotChocolate.Language.IValueNode.get_Value();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public sealed virtual byte ToByte();
    public sealed virtual short ToInt16();
    public sealed virtual int ToInt32();
    public sealed virtual long ToInt64();
    public sealed virtual sbyte ToSByte();
    public sealed virtual ushort ToUInt16();
    public sealed virtual UInt32 ToUInt32();
    public sealed virtual ulong ToUInt64();
    public sealed virtual float ToSingle();
    public sealed virtual double ToDouble();
    public sealed virtual decimal ToDecimal();
    [NullableContextAttribute("0")]
public sealed virtual ReadOnlySpan`1<byte> AsSpan();
    [NullableContextAttribute("0")]
internal ReadOnlyMemory`1<byte> AsMemory();
    public IntValueNode WithLocation(Location location);
    public IntValueNode WithValue(byte value);
    public IntValueNode WithValue(sbyte value);
    public IntValueNode WithValue(short value);
    public IntValueNode WithValue(int value);
    public IntValueNode WithValue(long value);
    [NullableContextAttribute("0")]
public IntValueNode WithValue(ReadOnlyMemory`1<byte> value);
}
public interface HotChocolate.Language.INullabilityModifierNode {
    [NullableAttribute("2")]
public ListNullabilityNode Element { get; }
    [NullableContextAttribute("2")]
public abstract virtual ListNullabilityNode get_Element();
}
[NullableContextAttribute("2")]
public interface HotChocolate.Language.INullabilityNode {
    public INullabilityNode Element { get; }
    public abstract virtual INullabilityNode get_Element();
}
public interface HotChocolate.Language.INullableTypeNode {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.InvalidFormatException : LanguageException {
    public InvalidFormatException(string message);
    public InvalidFormatException(string message, Exception innerException);
    protected InvalidFormatException(SerializationInfo info, StreamingContext context);
}
public interface HotChocolate.Language.ISelectionNode {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Language.ISyntaxNode {
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public abstract virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
public abstract virtual Location get_Location();
    public abstract virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public abstract virtual string ToString();
    public abstract virtual string ToString(bool indented);
}
public interface HotChocolate.Language.ITypeDefinitionNode {
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    [NullableContextAttribute("2")]
public abstract virtual StringValueNode get_Description();
}
public interface HotChocolate.Language.ITypeExtensionNode {
}
public interface HotChocolate.Language.ITypeNode {
}
public interface HotChocolate.Language.ITypeSystemDefinitionNode {
}
public interface HotChocolate.Language.ITypeSystemExtensionNode {
}
[NullableContextAttribute("2")]
public interface HotChocolate.Language.IValueNode {
    public object Value { get; }
    public abstract virtual object get_Value();
}
public interface HotChocolate.Language.IValueNode`1 {
    [NullableAttribute("1")]
public T Value { get; }
    [NullableContextAttribute("1")]
public abstract virtual T get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.LanguageException : Exception {
    public LanguageException(string message);
    public LanguageException(string message, Exception inner);
    protected LanguageException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Language.ListNullabilityNode : object {
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private INullabilityNode <Element>k__BackingField;
    public SyntaxKind Kind { get; }
    public Location Location { get; }
    public INullabilityNode Element { get; }
    public ListNullabilityNode(Location location, INullabilityNode element);
    public sealed virtual SyntaxKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual INullabilityNode get_Element();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("HotChocolate.Language.ListNullabilityNode/<GetNodes>d__9")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public sealed virtual string ToString(bool indented);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.ListTypeNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeNode <Type>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public ITypeNode Type { get; }
    public ListTypeNode(ITypeNode type);
    public ListTypeNode(Location location, ITypeNode type);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public ITypeNode get_Type();
    [IteratorStateMachineAttribute("HotChocolate.Language.ListTypeNode/<GetNodes>d__10")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public ListTypeNode WithLocation(Location location);
    public ListTypeNode WithType(ITypeNode type);
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.ListValueNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IValueNode> <Items>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public IReadOnlyList`1<IValueNode> Items { get; }
    private IReadOnlyList`1<IValueNode> HotChocolate.Language.IValueNode<System.Collections.Generic.IReadOnlyList<HotChocolate.Language.IValueNode>>.Value { get; }
    private object HotChocolate.Language.IValueNode.Value { get; }
    public ListValueNode(IValueNode item);
    public ListValueNode(Location location, IValueNode item);
    public ListValueNode(IReadOnlyList`1<IValueNode> items);
    public ListValueNode(IValueNode[] items);
    public ListValueNode(Location location, IReadOnlyList`1<IValueNode> items);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IValueNode> get_Items();
    private sealed virtual override IReadOnlyList`1<IValueNode> HotChocolate.Language.IValueNode<System.Collections.Generic.IReadOnlyList<HotChocolate.Language.IValueNode>>.get_Value();
    private sealed virtual override object HotChocolate.Language.IValueNode.get_Value();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public ListValueNode WithLocation(Location location);
    public ListValueNode WithItems(IReadOnlyList`1<IValueNode> items);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Language.Location : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Start { get; }
    public int End { get; }
    public int Line { get; }
    public int Column { get; }
    public Location(int start, int end, int line, int column);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
    public sealed virtual bool Equals(Location other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Location left, Location right);
    public static bool op_Inequality(Location left, Location right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Language.NamedSyntaxNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DirectiveNode> <Directives>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public NameNode Name { get; }
    public IReadOnlyList`1<DirectiveNode> Directives { get; }
    protected NamedSyntaxNode(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives);
    public abstract virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual NameNode get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<DirectiveNode> get_Directives();
    public abstract virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public abstract virtual string ToString(bool indented);
    public abstract virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.NamedTypeNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public NameNode Name { get; }
    public NamedTypeNode(string name);
    public NamedTypeNode(NameNode name);
    public NamedTypeNode(Location location, NameNode name);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public NameNode get_Name();
    [IteratorStateMachineAttribute("HotChocolate.Language.NamedTypeNode/<GetNodes>d__11")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public NamedTypeNode WithLocation(Location location);
    public NamedTypeNode WithName(NameNode name);
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.NameNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public string Value { get; }
    public NameNode(string value);
    public NameNode(Location location, string value);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public string get_Value();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(NameNode other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public NameNode WithLocation(Location location);
    public NameNode WithValue(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.NonNullTypeNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private INullableTypeNode <Type>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public INullableTypeNode Type { get; }
    public NonNullTypeNode(INullableTypeNode type);
    public NonNullTypeNode(Location location, INullableTypeNode type);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public INullableTypeNode get_Type();
    [IteratorStateMachineAttribute("HotChocolate.Language.NonNullTypeNode/<GetNodes>d__10")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public NonNullTypeNode WithLocation(Location location);
    public NonNullTypeNode WithType(INullableTypeNode type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Language.NullValueNode : object {
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static NullValueNode <Default>k__BackingField;
    public SyntaxKind Kind { get; }
    public Location Location { get; }
    public object Value { get; }
    [NullableAttribute("1")]
public static NullValueNode Default { get; }
    public NullValueNode(Location location);
    private static NullValueNode();
    public sealed virtual SyntaxKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public sealed virtual bool Equals(NullValueNode other);
    public bool Equals(IValueNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public sealed virtual string ToString(bool indented);
    [NullableContextAttribute("1")]
public NullValueNode WithLocation(Location location);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NullValueNode get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.ObjectFieldNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueNode <Value>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public NameNode Name { get; }
    public IValueNode Value { get; }
    public ObjectFieldNode(string name, bool value);
    public ObjectFieldNode(string name, int value);
    public ObjectFieldNode(string name, double value);
    public ObjectFieldNode(string name, string value);
    public ObjectFieldNode(string name, IValueNode value);
    public ObjectFieldNode(Location location, NameNode name, IValueNode value);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public NameNode get_Name();
    [CompilerGeneratedAttribute]
public IValueNode get_Value();
    [IteratorStateMachineAttribute("HotChocolate.Language.ObjectFieldNode/<GetNodes>d__17")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("2")]
public bool Equals(ObjectFieldNode other);
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public ObjectFieldNode WithLocation(Location location);
    public ObjectFieldNode WithName(NameNode name);
    public ObjectFieldNode WithValue(IValueNode value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.ObjectTypeDefinitionNode : ComplexTypeDefinitionNodeBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public ObjectTypeDefinitionNode(Location location, NameNode name, StringValueNode description, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<NamedTypeNode> interfaces, IReadOnlyList`1<FieldDefinitionNode> fields);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual StringValueNode get_Description();
    [IteratorStateMachineAttribute("HotChocolate.Language.ObjectTypeDefinitionNode/<GetNodes>d__6")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public ObjectTypeDefinitionNode WithLocation(Location location);
    public ObjectTypeDefinitionNode WithName(NameNode name);
    public ObjectTypeDefinitionNode WithDescription(StringValueNode description);
    public ObjectTypeDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public ObjectTypeDefinitionNode WithInterfaces(IReadOnlyList`1<NamedTypeNode> interfaces);
    public ObjectTypeDefinitionNode WithFields(IReadOnlyList`1<FieldDefinitionNode> fields);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.ObjectTypeExtensionNode : ComplexTypeDefinitionNodeBase {
    public SyntaxKind Kind { get; }
    public ObjectTypeExtensionNode(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<NamedTypeNode> interfaces, IReadOnlyList`1<FieldDefinitionNode> fields);
    public virtual SyntaxKind get_Kind();
    [IteratorStateMachineAttribute("HotChocolate.Language.ObjectTypeExtensionNode/<GetNodes>d__3")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public ObjectTypeExtensionNode WithLocation(Location location);
    public ObjectTypeExtensionNode WithName(NameNode name);
    public ObjectTypeExtensionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public ObjectTypeExtensionNode WithInterfaces(IReadOnlyList`1<NamedTypeNode> interfaces);
    public ObjectTypeExtensionNode WithFields(IReadOnlyList`1<FieldDefinitionNode> fields);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.ObjectValueNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ObjectFieldNode> <Fields>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public IReadOnlyList`1<ObjectFieldNode> Fields { get; }
    private IReadOnlyList`1<ObjectFieldNode> HotChocolate.Language.IValueNode<System.Collections.Generic.IReadOnlyList<HotChocolate.Language.ObjectFieldNode>>.Value { get; }
    private object HotChocolate.Language.IValueNode.Value { get; }
    public ObjectValueNode(ObjectFieldNode[] fields);
    public ObjectValueNode(IReadOnlyList`1<ObjectFieldNode> fields);
    public ObjectValueNode(Location location, IReadOnlyList`1<ObjectFieldNode> fields);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ObjectFieldNode> get_Fields();
    private sealed virtual override IReadOnlyList`1<ObjectFieldNode> HotChocolate.Language.IValueNode<System.Collections.Generic.IReadOnlyList<HotChocolate.Language.ObjectFieldNode>>.get_Value();
    private sealed virtual override object HotChocolate.Language.IValueNode.get_Value();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public ObjectValueNode WithLocation(Location location);
    public ObjectValueNode WithFields(IReadOnlyList`1<ObjectFieldNode> fields);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.OperationDefinitionNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<VariableDefinitionNode> <VariableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DirectiveNode> <Directives>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionSetNode <SelectionSet>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    [NullableAttribute("2")]
public NameNode Name { get; }
    public OperationType Operation { get; }
    public IReadOnlyList`1<VariableDefinitionNode> VariableDefinitions { get; }
    public IReadOnlyList`1<DirectiveNode> Directives { get; }
    public SelectionSetNode SelectionSet { get; }
    public OperationDefinitionNode(Location location, NameNode name, OperationType operation, IReadOnlyList`1<VariableDefinitionNode> variableDefinitions, IReadOnlyList`1<DirectiveNode> directives, SelectionSetNode selectionSet);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NameNode get_Name();
    [CompilerGeneratedAttribute]
public OperationType get_Operation();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<VariableDefinitionNode> get_VariableDefinitions();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<DirectiveNode> get_Directives();
    [CompilerGeneratedAttribute]
public SelectionSetNode get_SelectionSet();
    [IteratorStateMachineAttribute("HotChocolate.Language.OperationDefinitionNode/<GetNodes>d__21")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public OperationDefinitionNode WithLocation(Location location);
    public OperationDefinitionNode WithName(NameNode name);
    public OperationDefinitionNode WithOperation(OperationType operation);
    public OperationDefinitionNode WithVariableDefinitions(IReadOnlyList`1<VariableDefinitionNode> variableDefinitions);
    public OperationDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public OperationDefinitionNode WithSelectionSet(SelectionSetNode selectionSet);
}
public enum HotChocolate.Language.OperationType : Enum {
    public int value__;
    public static OperationType Query;
    public static OperationType Mutation;
    public static OperationType Subscription;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.OperationTypeDefinitionNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private NamedTypeNode <Type>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public OperationType Operation { get; }
    public NamedTypeNode Type { get; }
    public OperationTypeDefinitionNode(Location location, OperationType operation, NamedTypeNode type);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public OperationType get_Operation();
    [CompilerGeneratedAttribute]
public NamedTypeNode get_Type();
    [IteratorStateMachineAttribute("HotChocolate.Language.OperationTypeDefinitionNode/<GetNodes>d__12")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public OperationTypeDefinitionNode WithLocation(Location location);
    public OperationTypeDefinitionNode WithOperation(OperationType operation);
    public OperationTypeDefinitionNode WithType(NamedTypeNode type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Language.OptionalModifierNode : object {
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ListNullabilityNode <Element>k__BackingField;
    public SyntaxKind Kind { get; }
    public Location Location { get; }
    public ListNullabilityNode Element { get; }
    private INullabilityNode HotChocolate.Language.INullabilityNode.Element { get; }
    [NullableContextAttribute("1")]
public OptionalModifierNode(ListNullabilityNode element);
    [NullableContextAttribute("1")]
public OptionalModifierNode(Location location);
    public OptionalModifierNode(Location location, ListNullabilityNode element);
    public sealed virtual SyntaxKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual ListNullabilityNode get_Element();
    private sealed virtual override INullabilityNode HotChocolate.Language.INullabilityNode.get_Element();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("HotChocolate.Language.OptionalModifierNode/<GetNodes>d__13")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public sealed virtual string ToString(bool indented);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Language.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DirectiveLocation_Value_CannotBeNullOrEmpty { get; }
    internal static string ThrowHelper_SchemaCoordinate_ArgumentNameCannotBeSetWithoutMemberName { get; }
    internal static string ThrowHelper_SchemaCoordinate_MemberNameCannotBeSetOnADirectiveCoordinate { get; }
    internal static string EnumValueNode_ValueIsNull { get; }
    internal static string EnumValueNode_ValueIsEmpty { get; }
    internal static string FloatValueNode_ValueEmpty { get; }
    internal static string IntValueNode_ValueCannotBeEmpty { get; }
    internal static string NameNode_Name_CannnotBeNullOrEmpty { get; }
    internal static string SyntaxWriterExtensions_WriteValue_ValueNodeNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DirectiveLocation_Value_CannotBeNullOrEmpty();
    internal static string get_ThrowHelper_SchemaCoordinate_ArgumentNameCannotBeSetWithoutMemberName();
    internal static string get_ThrowHelper_SchemaCoordinate_MemberNameCannotBeSetOnADirectiveCoordinate();
    internal static string get_EnumValueNode_ValueIsNull();
    internal static string get_EnumValueNode_ValueIsEmpty();
    internal static string get_FloatValueNode_ValueEmpty();
    internal static string get_IntValueNode_ValueCannotBeEmpty();
    internal static string get_NameNode_Name_CannnotBeNullOrEmpty();
    internal static string get_SyntaxWriterExtensions_WriteValue_ValueNodeNotSupported();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Language.RequiredModifierNode : object {
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ListNullabilityNode <Element>k__BackingField;
    public SyntaxKind Kind { get; }
    public Location Location { get; }
    public ListNullabilityNode Element { get; }
    private INullabilityNode HotChocolate.Language.INullabilityNode.Element { get; }
    public RequiredModifierNode(Location location, ListNullabilityNode element);
    public sealed virtual SyntaxKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual ListNullabilityNode get_Element();
    private sealed virtual override INullabilityNode HotChocolate.Language.INullabilityNode.get_Element();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("HotChocolate.Language.RequiredModifierNode/<GetNodes>d__11")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public sealed virtual string ToString(bool indented);
}
public class HotChocolate.Language.ScalarTypeDefinitionNode : NamedSyntaxNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    [NullableContextAttribute("1")]
public ScalarTypeDefinitionNode(Location location, NameNode name, StringValueNode description, IReadOnlyList`1<DirectiveNode> directives);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual StringValueNode get_Description();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("HotChocolate.Language.ScalarTypeDefinitionNode/<GetNodes>d__6")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public virtual string ToString(bool indented);
    [NullableContextAttribute("1")]
public ScalarTypeDefinitionNode WithLocation(Location location);
    [NullableContextAttribute("1")]
public ScalarTypeDefinitionNode WithName(NameNode name);
    [NullableContextAttribute("1")]
public ScalarTypeDefinitionNode WithDescription(StringValueNode description);
    [NullableContextAttribute("1")]
public ScalarTypeDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
}
public class HotChocolate.Language.ScalarTypeExtensionNode : NamedSyntaxNode {
    public SyntaxKind Kind { get; }
    [NullableContextAttribute("1")]
public ScalarTypeExtensionNode(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("HotChocolate.Language.ScalarTypeExtensionNode/<GetNodes>d__3")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public virtual string ToString(bool indented);
    [NullableContextAttribute("1")]
public ScalarTypeExtensionNode WithLocation(Location location);
    [NullableContextAttribute("1")]
public ScalarTypeExtensionNode WithName(NameNode name);
    [NullableContextAttribute("1")]
public ScalarTypeExtensionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.SchemaCoordinateNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OfDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameNode <MemberName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NameNode <ArgumentName>k__BackingField;
    [NullableAttribute("2")]
public Location Location { get; }
    public SyntaxKind Kind { get; }
    public bool OfDirective { get; }
    public NameNode Name { get; }
    [NullableAttribute("2")]
public NameNode MemberName { get; }
    [NullableAttribute("2")]
public NameNode ArgumentName { get; }
    [NullableContextAttribute("2")]
public SchemaCoordinateNode(Location location, bool ofDirective, NameNode name, NameNode memberName, NameNode argumentName);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    public sealed virtual SyntaxKind get_Kind();
    [CompilerGeneratedAttribute]
public bool get_OfDirective();
    [CompilerGeneratedAttribute]
public NameNode get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NameNode get_MemberName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NameNode get_ArgumentName();
    [IteratorStateMachineAttribute("HotChocolate.Language.SchemaCoordinateNode/<GetNodes>d__18")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public SchemaCoordinateNode WithLocation(Location location);
    public SchemaCoordinateNode WithOfDirective(bool ofDirective);
    public SchemaCoordinateNode WithName(NameNode name);
    public SchemaCoordinateNode WithMemberName(NameNode memberName);
    public SchemaCoordinateNode WithArgumentName(NameNode argumentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.SchemaDefinitionNode : SchemaDefinitionNodeBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public SchemaDefinitionNode(Location location, StringValueNode description, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<OperationTypeDefinitionNode> operationTypes);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public StringValueNode get_Description();
    [IteratorStateMachineAttribute("HotChocolate.Language.SchemaDefinitionNode/<GetNodes>d__6")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public SchemaDefinitionNode WithLocation(Location location);
    public SchemaDefinitionNode WithDescription(StringValueNode description);
    public SchemaDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public SchemaDefinitionNode WithOperationTypes(IReadOnlyList`1<OperationTypeDefinitionNode> operationTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Language.SchemaDefinitionNodeBase : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DirectiveNode> <Directives>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OperationTypeDefinitionNode> <OperationTypes>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public IReadOnlyList`1<DirectiveNode> Directives { get; }
    public IReadOnlyList`1<OperationTypeDefinitionNode> OperationTypes { get; }
    protected SchemaDefinitionNodeBase(Location location, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<OperationTypeDefinitionNode> operationTypes);
    public abstract virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<DirectiveNode> get_Directives();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<OperationTypeDefinitionNode> get_OperationTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.SchemaExtensionNode : SchemaDefinitionNodeBase {
    public SyntaxKind Kind { get; }
    public SchemaExtensionNode(Location location, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<OperationTypeDefinitionNode> operationTypes);
    public virtual SyntaxKind get_Kind();
    [IteratorStateMachineAttribute("HotChocolate.Language.SchemaExtensionNode/<GetNodes>d__3")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public SchemaExtensionNode WithLocation(Location location);
    public SchemaExtensionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public SchemaExtensionNode WithOperationTypes(IReadOnlyList`1<OperationTypeDefinitionNode> operationTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.SelectionSetNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ISelectionNode> <Selections>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public IReadOnlyList`1<ISelectionNode> Selections { get; }
    public SelectionSetNode(IReadOnlyList`1<ISelectionNode> selections);
    public SelectionSetNode(Location location, IReadOnlyList`1<ISelectionNode> selections);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ISelectionNode> get_Selections();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public SelectionSetNode WithLocation(Location location);
    public SelectionSetNode WithSelections(IReadOnlyList`1<ISelectionNode> selections);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.StringValueNode : object {
    [NullableAttribute("0")]
private ReadOnlyMemory`1<byte> _memory;
    [NullableAttribute("2")]
private string _value;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Block>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public string Value { get; }
    private object HotChocolate.Language.IValueNode.Value { get; }
    public bool Block { get; }
    internal bool IsMemory { get; }
    public StringValueNode(string value);
    public StringValueNode(Location location, string value, bool block);
    [NullableContextAttribute("0")]
public StringValueNode(Location location, ReadOnlyMemory`1<byte> value, bool block);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    public sealed virtual string get_Value();
    private sealed virtual override object HotChocolate.Language.IValueNode.get_Value();
    [CompilerGeneratedAttribute]
public bool get_Block();
    public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    [NullableContextAttribute("0")]
internal ReadOnlyMemory`1<byte> AsMemory();
    internal bool get_IsMemory();
    [NullableContextAttribute("0")]
public sealed virtual ReadOnlySpan`1<byte> AsSpan();
    public StringValueNode WithLocation(Location location);
    public StringValueNode WithValue(string value);
    public StringValueNode WithValue(string value, bool block);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class HotChocolate.Language.SyntaxComparer : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<ISyntaxNode> <BySyntax>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<ISyntaxNode> <ByReference>k__BackingField;
    public static IEqualityComparer`1<ISyntaxNode> BySyntax { get; }
    public static IEqualityComparer`1<ISyntaxNode> ByReference { get; }
    private static SyntaxComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<ISyntaxNode> get_BySyntax();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<ISyntaxNode> get_ByReference();
}
public enum HotChocolate.Language.SyntaxComparison : Enum {
    public int value__;
    public static SyntaxComparison Reference;
    public static SyntaxComparison Syntax;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Language.SyntaxEqualityComparer : object {
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ISyntaxNode x, ISyntaxNode y);
    private bool Equals(ArgumentNode x, ArgumentNode y);
    private bool Equals(BooleanValueNode x, BooleanValueNode y);
    private bool Equals(DirectiveDefinitionNode x, DirectiveDefinitionNode y);
    private bool Equals(DirectiveNode x, DirectiveNode y);
    private bool Equals(DocumentNode x, DocumentNode y);
    private bool Equals(EnumTypeDefinitionNode x, EnumTypeDefinitionNode y);
    private bool Equals(EnumTypeExtensionNode x, EnumTypeExtensionNode y);
    private bool Equals(EnumValueDefinitionNode x, EnumValueDefinitionNode y);
    private bool Equals(EnumValueNode x, EnumValueNode y);
    private bool Equals(FieldDefinitionNode x, FieldDefinitionNode y);
    private bool Equals(FieldNode x, FieldNode y);
    private bool Equals(FloatValueNode x, FloatValueNode y);
    private bool Equals(FragmentDefinitionNode x, FragmentDefinitionNode y);
    private bool Equals(FragmentSpreadNode x, FragmentSpreadNode y);
    private bool Equals(InlineFragmentNode x, InlineFragmentNode y);
    private bool Equals(InputObjectTypeDefinitionNode x, InputObjectTypeDefinitionNode y);
    private bool Equals(InputObjectTypeExtensionNode x, InputObjectTypeExtensionNode y);
    private bool Equals(InputValueDefinitionNode x, InputValueDefinitionNode y);
    private bool Equals(InterfaceTypeDefinitionNode x, InterfaceTypeDefinitionNode y);
    private bool Equals(InterfaceTypeExtensionNode x, InterfaceTypeExtensionNode y);
    private bool Equals(IntValueNode x, IntValueNode y);
    private bool Equals(ListNullabilityNode x, ListNullabilityNode y);
    private bool Equals(ListTypeNode x, ListTypeNode y);
    private bool Equals(ListValueNode x, ListValueNode y);
    private bool Equals(NamedTypeNode x, NamedTypeNode y);
    private bool Equals(NameNode x, NameNode y);
    private bool Equals(NonNullTypeNode x, NonNullTypeNode y);
    private bool Equals(ObjectFieldNode x, ObjectFieldNode y);
    private bool Equals(ObjectTypeDefinitionNode x, ObjectTypeDefinitionNode y);
    private bool Equals(ObjectTypeExtensionNode x, ObjectTypeExtensionNode y);
    private bool Equals(ObjectValueNode x, ObjectValueNode y);
    private bool Equals(OperationDefinitionNode x, OperationDefinitionNode y);
    private bool Equals(OperationTypeDefinitionNode x, OperationTypeDefinitionNode y);
    private bool Equals(OptionalModifierNode x, OptionalModifierNode y);
    private bool Equals(RequiredModifierNode x, RequiredModifierNode y);
    private bool Equals(ScalarTypeDefinitionNode x, ScalarTypeDefinitionNode y);
    private bool Equals(ScalarTypeExtensionNode x, ScalarTypeExtensionNode y);
    private bool Equals(SchemaCoordinateNode x, SchemaCoordinateNode y);
    private bool Equals(SchemaDefinitionNode x, SchemaDefinitionNode y);
    private bool Equals(SchemaExtensionNode x, SchemaExtensionNode y);
    private bool Equals(SelectionSetNode x, SelectionSetNode y);
    private bool Equals(StringValueNode x, StringValueNode y);
    private bool Equals(UnionTypeDefinitionNode x, UnionTypeDefinitionNode y);
    private bool Equals(UnionTypeExtensionNode x, UnionTypeExtensionNode y);
    private bool Equals(VariableDefinitionNode x, VariableDefinitionNode y);
    private bool Equals(VariableNode x, VariableNode y);
    private bool Equals(IReadOnlyList`1<ISyntaxNode> a, IReadOnlyList`1<ISyntaxNode> b);
    public sealed virtual int GetHashCode(ISyntaxNode obj);
    private int GetHashCode(ArgumentNode node);
    private int GetHashCode(BooleanValueNode node);
    private int GetHashCode(DirectiveDefinitionNode node);
    private int GetHashCode(DirectiveNode node);
    private int GetHashCode(DocumentNode node);
    private int GetHashCode(EnumTypeDefinitionNode node);
    private int GetHashCode(EnumTypeExtensionNode node);
    private int GetHashCode(EnumValueDefinitionNode node);
    private int GetHashCode(EnumValueNode node);
    private int GetHashCode(FieldDefinitionNode node);
    private int GetHashCode(FieldNode node);
    private int GetHashCode(FloatValueNode node);
    private int GetHashCode(FragmentDefinitionNode node);
    private int GetHashCode(FragmentSpreadNode node);
    private int GetHashCode(InlineFragmentNode node);
    private int GetHashCode(InputObjectTypeDefinitionNode node);
    private int GetHashCode(InputObjectTypeExtensionNode node);
    private int GetHashCode(InputValueDefinitionNode node);
    private int GetHashCode(InterfaceTypeDefinitionNode node);
    private int GetHashCode(InterfaceTypeExtensionNode node);
    private int GetHashCode(IntValueNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(INullabilityNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(IValueNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(ListNullabilityNode node);
    private int GetHashCode(ListTypeNode node);
    private int GetHashCode(ListValueNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(NamedTypeNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(NameNode node);
    private int GetHashCode(NonNullTypeNode node);
    private int GetHashCode(NullValueNode node);
    private int GetHashCode(ObjectFieldNode node);
    private int GetHashCode(ObjectTypeDefinitionNode node);
    private int GetHashCode(ObjectTypeExtensionNode node);
    private int GetHashCode(ObjectValueNode node);
    private int GetHashCode(OperationDefinitionNode node);
    private int GetHashCode(OperationTypeDefinitionNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(OptionalModifierNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(RequiredModifierNode node);
    private int GetHashCode(ScalarTypeDefinitionNode node);
    private int GetHashCode(ScalarTypeExtensionNode node);
    private int GetHashCode(SchemaCoordinateNode node);
    private int GetHashCode(SchemaDefinitionNode node);
    private int GetHashCode(SchemaExtensionNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(SelectionSetNode node);
    [NullableContextAttribute("2")]
private int GetHashCode(StringValueNode node);
    private int GetHashCode(UnionTypeDefinitionNode node);
    private int GetHashCode(UnionTypeExtensionNode node);
    private int GetHashCode(VariableDefinitionNode node);
    private int GetHashCode(VariableNode node);
}
public enum HotChocolate.Language.SyntaxKind : Enum {
    public int value__;
    public static SyntaxKind Name;
    public static SyntaxKind Document;
    public static SyntaxKind OperationDefinition;
    public static SyntaxKind VariableDefinition;
    public static SyntaxKind Variable;
    public static SyntaxKind SelectionSet;
    public static SyntaxKind Field;
    public static SyntaxKind Argument;
    public static SyntaxKind FragmentSpread;
    public static SyntaxKind InlineFragment;
    public static SyntaxKind FragmentDefinition;
    public static SyntaxKind IntValue;
    public static SyntaxKind StringValue;
    public static SyntaxKind BooleanValue;
    public static SyntaxKind NullValue;
    public static SyntaxKind EnumValue;
    public static SyntaxKind ListValue;
    public static SyntaxKind ObjectValue;
    public static SyntaxKind ObjectField;
    public static SyntaxKind Directive;
    public static SyntaxKind NamedType;
    public static SyntaxKind ListType;
    public static SyntaxKind NonNullType;
    public static SyntaxKind SchemaDefinition;
    public static SyntaxKind OperationTypeDefinition;
    public static SyntaxKind ScalarTypeDefinition;
    public static SyntaxKind ObjectTypeDefinition;
    public static SyntaxKind FieldDefinition;
    public static SyntaxKind InputValueDefinition;
    public static SyntaxKind InterfaceTypeDefinition;
    public static SyntaxKind UnionTypeDefinition;
    public static SyntaxKind EnumTypeDefinition;
    public static SyntaxKind EnumValueDefinition;
    public static SyntaxKind InputObjectTypeDefinition;
    public static SyntaxKind SchemaExtension;
    public static SyntaxKind ScalarTypeExtension;
    public static SyntaxKind ObjectTypeExtension;
    public static SyntaxKind InterfaceTypeExtension;
    public static SyntaxKind UnionTypeExtension;
    public static SyntaxKind EnumTypeExtension;
    public static SyntaxKind InputObjectTypeExtension;
    public static SyntaxKind DirectiveDefinition;
    public static SyntaxKind FloatValue;
    public static SyntaxKind ListNullability;
    public static SyntaxKind RequiredModifier;
    public static SyntaxKind OptionalModifier;
    public static SyntaxKind SchemaCoordinate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Language.SyntaxNodeExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNull(IValueNode value);
    [ExtensionAttribute]
public static bool IsNonNullType(ITypeNode type);
    [ExtensionAttribute]
public static bool IsListType(ITypeNode type);
    [ExtensionAttribute]
public static ITypeNode ElementType(ITypeNode type);
    [ExtensionAttribute]
public static ITypeNode InnerType(ITypeNode type);
    private static ITypeNode InnerTypeInternal(ITypeNode type);
    [ExtensionAttribute]
public static ITypeNode NullableType(ITypeNode type);
    [ExtensionAttribute]
public static NamedTypeNode NamedType(ITypeNode type);
    [ExtensionAttribute]
public static string Name(ITypeNode type);
    [ExtensionAttribute]
public static bool Equals(ISyntaxNode node, ISyntaxNode other, SyntaxComparison comparison);
    [ExtensionAttribute]
public static string ToString(ISyntaxNode node, SyntaxSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.UnionTypeDefinitionNode : UnionTypeDefinitionNodeBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private StringValueNode <Description>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public StringValueNode Description { get; }
    public UnionTypeDefinitionNode(Location location, NameNode name, StringValueNode description, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<NamedTypeNode> types);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual StringValueNode get_Description();
    [IteratorStateMachineAttribute("HotChocolate.Language.UnionTypeDefinitionNode/<GetNodes>d__6")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public virtual string ToString(bool indented);
    public UnionTypeDefinitionNode WithLocation(Location location);
    public UnionTypeDefinitionNode WithName(NameNode name);
    public UnionTypeDefinitionNode WithDescription(StringValueNode description);
    public UnionTypeDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    public UnionTypeDefinitionNode WithTypes(IReadOnlyList`1<NamedTypeNode> types);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Language.UnionTypeDefinitionNodeBase : NamedSyntaxNode {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NamedTypeNode> <Types>k__BackingField;
    public IReadOnlyList`1<NamedTypeNode> Types { get; }
    protected UnionTypeDefinitionNodeBase(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<NamedTypeNode> types);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NamedTypeNode> get_Types();
}
public class HotChocolate.Language.UnionTypeExtensionNode : UnionTypeDefinitionNodeBase {
    public SyntaxKind Kind { get; }
    [NullableContextAttribute("1")]
public UnionTypeExtensionNode(Location location, NameNode name, IReadOnlyList`1<DirectiveNode> directives, IReadOnlyList`1<NamedTypeNode> types);
    public virtual SyntaxKind get_Kind();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("HotChocolate.Language.UnionTypeExtensionNode/<GetNodes>d__3")]
public virtual IEnumerable`1<ISyntaxNode> GetNodes();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public virtual string ToString(bool indented);
    [NullableContextAttribute("1")]
public UnionTypeExtensionNode WithLocation(Location location);
    [NullableContextAttribute("1")]
public UnionTypeExtensionNode WithName(NameNode name);
    [NullableContextAttribute("1")]
public UnionTypeExtensionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
    [NullableContextAttribute("1")]
public UnionTypeExtensionNode WithTypes(IReadOnlyList`1<NamedTypeNode> types);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Language.Utilities.ISyntaxWriter {
    public abstract virtual void Indent();
    public abstract virtual void Unindent();
    public abstract virtual void Write(char c);
    public abstract virtual void Write(string s);
    public abstract virtual void WriteLine(bool condition);
    public abstract virtual void WriteSpace(bool condition);
    public abstract virtual void WriteIndent(bool condition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Language.Utilities.Keywords : object {
    public static string Schema;
    public static string Scalar;
    public static string Type;
    public static string Interface;
    public static string Union;
    public static string Enum;
    public static string Input;
    public static string Extend;
    public static string Directive;
    public static string Implements;
    public static string Repeatable;
    public static string Fragment;
    public static string On;
    public static string True;
    public static string False;
    public static string Null;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.Utilities.StringSyntaxWriter : object {
    private static StringSyntaxWriterPool _pool;
    private StringBuilder _stringBuilder;
    private int _indent;
    internal StringBuilder StringBuilder { get; }
    private static StringSyntaxWriter();
    public static StringSyntaxWriter Rent();
    public static void Return(StringSyntaxWriter writer);
    internal StringBuilder get_StringBuilder();
    public sealed virtual void Indent();
    public sealed virtual void Unindent();
    public sealed virtual void Write(char c);
    public sealed virtual void Write(string s);
    public sealed virtual void WriteIndent(bool condition);
    public sealed virtual void WriteLine(bool condition);
    public sealed virtual void WriteSpace(bool condition);
    public void Clear();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Language.Utilities.StringSyntaxWriterPool : DefaultObjectPool`1<StringSyntaxWriter> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Language.Utilities.SyntaxPrinter : object {
    private static SyntaxSerializer _serializer;
    private static SyntaxSerializer _serializerNoIndent;
    private static SyntaxPrinter();
    [ExtensionAttribute]
public static string Print(ISyntaxNode node, bool indented);
    [AsyncStateMachineAttribute("HotChocolate.Language.Utilities.SyntaxPrinter/<PrintToAsync>d__3")]
[ExtensionAttribute]
public static ValueTask PrintToAsync(ISyntaxNode node, Stream stream, bool indented, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.Utilities.SyntaxSerializer : object {
    private bool _indented;
    private int _maxDirectivesPerLine;
    public SyntaxSerializer(SyntaxSerializerOptions options);
    public void Serialize(ISyntaxNode node, ISyntaxWriter writer);
    private void VisitDocument(DocumentNode node, ISyntaxWriter writer);
    private void VisitDefinition(IDefinitionNode node, ISyntaxWriter writer);
    private void VisitOperationDefinition(OperationDefinitionNode node, ISyntaxWriter writer);
    private void VisitVariableDefinition(VariableDefinitionNode node, ISyntaxWriter writer);
    private void VisitFragmentDefinition(FragmentDefinitionNode node, ISyntaxWriter writer);
    private void VisitSelectionSet(SelectionSetNode node, ISyntaxWriter writer);
    private void VisitSelection(ISelectionNode node, ISyntaxWriter context);
    private void VisitField(FieldNode node, ISyntaxWriter writer);
    private void VisitNullability(INullabilityNode node, ISyntaxWriter writer);
    private void VisitFragmentSpread(FragmentSpreadNode node, ISyntaxWriter writer);
    private void VisitInlineFragment(InlineFragmentNode node, ISyntaxWriter writer);
    private void VisitSchemaDefinition(SchemaDefinitionNode node, ISyntaxWriter writer);
    private void VisitSchemaExtension(SchemaExtensionNode node, ISyntaxWriter writer);
    private void VisitSchemaDefinitionBase(SchemaDefinitionNodeBase node, ISyntaxWriter writer);
    private void VisitObjectTypeDefinition(ObjectTypeDefinitionNode node, ISyntaxWriter writer);
    private void VisitObjectTypeExtension(ObjectTypeExtensionNode node, ISyntaxWriter writer);
    private void VisitObjectTypeDefinitionBase(ComplexTypeDefinitionNodeBase node, ISyntaxWriter writer);
    private void VisitInterfaceTypeDefinition(InterfaceTypeDefinitionNode node, ISyntaxWriter writer);
    private void VisitInterfaceTypeExtension(InterfaceTypeExtensionNode node, ISyntaxWriter writer);
    private void VisitInterfaceTypeDefinitionBase(ComplexTypeDefinitionNodeBase node, ISyntaxWriter writer);
    private void VisitUnionTypeDefinition(UnionTypeDefinitionNode node, ISyntaxWriter writer);
    private void VisitUnionTypeExtension(UnionTypeExtensionNode node, ISyntaxWriter writer);
    private void VisitUnionTypeDefinitionBase(UnionTypeDefinitionNodeBase node, ISyntaxWriter writer);
    private void VisitEnumTypeDefinition(EnumTypeDefinitionNode node, ISyntaxWriter writer);
    private void VisitEnumTypeExtension(EnumTypeExtensionNode node, ISyntaxWriter writer);
    private void VisitEnumTypeDefinitionBase(EnumTypeDefinitionNodeBase node, ISyntaxWriter writer);
    private void VisitInputObjectTypeDefinition(InputObjectTypeDefinitionNode node, ISyntaxWriter writer);
    private void VisitInputObjectTypeExtension(InputObjectTypeExtensionNode node, ISyntaxWriter writer);
    private void VisitSchemaCoordinate(SchemaCoordinateNode node, ISyntaxWriter writer);
    private void VisitInputObjectTypeDefinitionBase(InputObjectTypeDefinitionNodeBase node, ISyntaxWriter writer);
    private void VisitScalarTypeDefinition(ScalarTypeDefinitionNode node, ISyntaxWriter writer);
    private void VisitScalarTypeExtension(ScalarTypeExtensionNode node, ISyntaxWriter writer);
    private void VisitScalarTypeDefinitionBase(NamedSyntaxNode node, ISyntaxWriter writer);
    private void VisitOperationTypeDefinition(OperationTypeDefinitionNode node, ISyntaxWriter writer);
    private void VisitFieldDefinition(FieldDefinitionNode node, ISyntaxWriter writer);
    private void VisitInputValueDefinition(InputValueDefinitionNode node, ISyntaxWriter writer);
    private void VisitDirectiveDefinition(DirectiveDefinitionNode node, ISyntaxWriter writer);
    private void VisitArgumentValueDefinition(InputValueDefinitionNode node, ISyntaxWriter writer);
    private void WriteInputValueDefinition(InputValueDefinitionNode node, ISyntaxWriter writer);
    private void VisitEnumValueDefinition(EnumValueDefinitionNode node, ISyntaxWriter writer);
    private void WriteDescription(StringValueNode description, ISyntaxWriter writer);
    private void WriteDirectives(IReadOnlyList`1<DirectiveNode> directives, ISyntaxWriter writer);
    private void WriteLeftBrace(ISyntaxWriter writer);
    private void WriteRightBrace(ISyntaxWriter writer);
    private void WriteLineOrSpace(ISyntaxWriter writer);
}
public class HotChocolate.Language.Utilities.SyntaxSerializerOptions : ValueType {
    private Nullable`1<int> _maxDirectivesPerLine;
    [CompilerGeneratedAttribute]
private bool <Indented>k__BackingField;
    public bool Indented { get; public set; }
    public int MaxDirectivesPerLine { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Indented();
    [CompilerGeneratedAttribute]
public void set_Indented(bool value);
    public int get_MaxDirectivesPerLine();
    public void set_MaxDirectivesPerLine(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Language.Utilities.SyntaxWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteName(ISyntaxWriter writer, NameNode nameNode);
    [ExtensionAttribute]
public static void WriteMany(ISyntaxWriter writer, IReadOnlyList`1<T> items, Action`2<T, ISyntaxWriter> action);
    [ExtensionAttribute]
public static void WriteMany(ISyntaxWriter writer, IReadOnlyList`1<T> items, Action`2<T, ISyntaxWriter> action, string separator);
    [ExtensionAttribute]
public static void WriteMany(ISyntaxWriter writer, IReadOnlyList`1<T> items, Action`2<T, ISyntaxWriter> action, Action`1<ISyntaxWriter> separator);
    [ExtensionAttribute]
public static void WriteValue(ISyntaxWriter writer, IValueNode node);
    [ExtensionAttribute]
public static void WriteIntValue(ISyntaxWriter writer, IntValueNode node);
    [ExtensionAttribute]
public static void WriteFloatValue(ISyntaxWriter writer, FloatValueNode node);
    [ExtensionAttribute]
public static void WriteStringValue(ISyntaxWriter writer, StringValueNode node);
    [ExtensionAttribute]
public static void WriteStringValue(ISyntaxWriter writer, string value);
    private static void WriteEscapeCharacters(ISyntaxWriter writer, string input);
    private static void WriteEscapeCharacter(ISyntaxWriter writer, Char& c);
    private static void WriteEscapeCharacterHelper(ISyntaxWriter writer, Char& c);
    [ExtensionAttribute]
public static void WriteBooleanValue(ISyntaxWriter writer, BooleanValueNode node);
    [ExtensionAttribute]
public static void WriteEnumValue(ISyntaxWriter writer, EnumValueNode node);
    [ExtensionAttribute]
public static void WriteNullValue(ISyntaxWriter writer);
    [ExtensionAttribute]
public static void WriteListValue(ISyntaxWriter writer, ListValueNode node);
    [ExtensionAttribute]
public static void WriteObjectValue(ISyntaxWriter writer, ObjectValueNode node);
    [ExtensionAttribute]
public static void WriteObjectField(ISyntaxWriter writer, ObjectFieldNode node);
    [ExtensionAttribute]
public static void WriteVariable(ISyntaxWriter writer, VariableNode node);
    [ExtensionAttribute]
public static void WriteField(ISyntaxWriter writer, NameNode name, IValueNode value);
    [ExtensionAttribute]
public static void WriteArgument(ISyntaxWriter writer, ArgumentNode node);
    [ExtensionAttribute]
public static void WriteType(ISyntaxWriter writer, ITypeNode node);
    [ExtensionAttribute]
public static void WriteNonNullType(ISyntaxWriter writer, NonNullTypeNode node);
    [ExtensionAttribute]
public static void WriteListType(ISyntaxWriter writer, ListTypeNode node);
    [ExtensionAttribute]
public static void WriteNamedType(ISyntaxWriter writer, NamedTypeNode node);
    [ExtensionAttribute]
public static void WriteDirective(ISyntaxWriter writer, DirectiveNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Language.Utilities.ThrowHelper : object {
    public static void NodeKindIsNotSupported(SyntaxKind kind);
    public static Exception SchemaCoordinate_MemberNameCannotBeSetOnADirectiveCoordinate(string argumentName);
    public static Exception SchemaCoordinate_ArgumentNameCannotBeSetWithoutMemberName(string argumentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.VariableDefinitionNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private VariableNode <Variable>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeNode <Type>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IValueNode <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DirectiveNode> <Directives>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public VariableNode Variable { get; }
    public ITypeNode Type { get; }
    [NullableAttribute("2")]
public IValueNode DefaultValue { get; }
    public IReadOnlyList`1<DirectiveNode> Directives { get; }
    public VariableDefinitionNode(Location location, VariableNode variable, ITypeNode type, IValueNode defaultValue, IReadOnlyList`1<DirectiveNode> directives);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public VariableNode get_Variable();
    [CompilerGeneratedAttribute]
public ITypeNode get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IValueNode get_DefaultValue();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<DirectiveNode> get_Directives();
    [IteratorStateMachineAttribute("HotChocolate.Language.VariableDefinitionNode/<GetNodes>d__18")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public VariableDefinitionNode WithLocation(Location location);
    public VariableDefinitionNode WithVariable(VariableNode variable);
    public VariableDefinitionNode WithType(ITypeNode type);
    public VariableDefinitionNode WithDefaultValue(IValueNode defaultValue);
    public VariableDefinitionNode WithDirectives(IReadOnlyList`1<DirectiveNode> directives);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.VariableNode : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private NameNode <Name>k__BackingField;
    public SyntaxKind Kind { get; }
    [NullableAttribute("2")]
public Location Location { get; }
    public NameNode Name { get; }
    private string HotChocolate.Language.IValueNode<System.String>.Value { get; }
    private object HotChocolate.Language.IValueNode.Value { get; }
    public VariableNode(string name);
    public VariableNode(NameNode name);
    public VariableNode(Location location, NameNode name);
    public sealed virtual SyntaxKind get_Kind();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Location get_Location();
    [CompilerGeneratedAttribute]
public NameNode get_Name();
    private sealed virtual override string HotChocolate.Language.IValueNode<System.String>.get_Value();
    private sealed virtual override object HotChocolate.Language.IValueNode.get_Value();
    [IteratorStateMachineAttribute("HotChocolate.Language.VariableNode/<GetNodes>d__15")]
public sealed virtual IEnumerable`1<ISyntaxNode> GetNodes();
    public virtual string ToString();
    public sealed virtual string ToString(bool indented);
    public VariableNode WithLocation(Location location);
    public VariableNode WithName(NameNode name);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
