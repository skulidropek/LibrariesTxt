[ExtensionAttribute]
internal static class HotChocolate.Language.GraphQLConstants : object {
    public static int StackallocThreshold;
    public static byte Null;
    public static byte StartOfHeading;
    public static byte StartOfText;
    public static byte EndOfText;
    public static byte EndOfTransmission;
    public static byte Enquiry;
    public static byte Acknowledgement;
    public static byte Bell;
    public static byte Backspace;
    public static byte HorizontalTab;
    public static byte LineFeed;
    public static byte VerticalTab;
    public static byte FormFeed;
    public static byte Return;
    public static byte ShiftOut;
    public static byte ShiftIn;
    public static byte DataLinkEscape;
    public static byte DeviceControl1;
    public static byte DeviceControl2;
    public static byte DeviceControl3;
    public static byte DeviceControl4;
    public static byte NegativeAcknowledgement;
    public static byte SynchronousIdle;
    public static byte EndOfTransmissionBlock;
    public static byte Cancel;
    public static byte EndOfMedium;
    public static byte Substitute;
    public static byte Escape;
    public static byte FileSeparator;
    public static byte GroupSeparator;
    public static byte RecordSeparator;
    public static byte UnitSeparator;
    public static byte Delete;
    public static byte A;
    public static byte B;
    public static byte E;
    public static byte F;
    public static byte N;
    public static byte R;
    public static byte T;
    public static byte U;
    public static byte Z;
    public static byte Hyphen;
    public static byte Underscore;
    public static byte Plus;
    public static byte Minus;
    public static byte Backslash;
    public static byte ForwardSlash;
    public static byte Bang;
    public static byte QuestionMark;
    public static byte Dollar;
    public static byte Ampersand;
    public static byte LeftParenthesis;
    public static byte RightParenthesis;
    public static byte Colon;
    public static byte Equal;
    public static byte At;
    public static byte LeftBracket;
    public static byte RightBracket;
    public static byte LeftBrace;
    public static byte RightBrace;
    public static byte Pipe;
    public static byte Dot;
    public static byte Space;
    public static byte Hash;
    public static byte Zero;
    public static byte Quote;
    public static byte Comma;
    [ExtensionAttribute]
public static bool IsLetterOrDigitOrUnderscore(byte c);
    [ExtensionAttribute]
public static bool IsLetterOrDigitOrUnderscore(char c);
    [ExtensionAttribute]
public static bool IsLetterOrUnderscore(byte c);
    [ExtensionAttribute]
public static bool IsLetterOrUnderscore(char c);
    [ExtensionAttribute]
public static bool IsDigit(byte c);
    [ExtensionAttribute]
public static bool IsDigitOrMinus(byte c);
    [ExtensionAttribute]
public static bool IsPunctuator(byte c);
    [ExtensionAttribute]
public static bool IsValidEscapeCharacter(byte c);
    [ExtensionAttribute]
public static byte EscapeCharacter(byte c);
}
internal static class HotChocolate.Language.GraphQLKeywords : object {
    public static ReadOnlySpan`1<byte> Schema { get; }
    public static ReadOnlySpan`1<byte> Scalar { get; }
    public static ReadOnlySpan`1<byte> Type { get; }
    public static ReadOnlySpan`1<byte> Interface { get; }
    public static ReadOnlySpan`1<byte> Union { get; }
    public static ReadOnlySpan`1<byte> Enum { get; }
    public static ReadOnlySpan`1<byte> Input { get; }
    public static ReadOnlySpan`1<byte> Extend { get; }
    public static ReadOnlySpan`1<byte> Implements { get; }
    public static ReadOnlySpan`1<byte> Repeatable { get; }
    public static ReadOnlySpan`1<byte> Directive { get; }
    public static ReadOnlySpan`1<byte> Query { get; }
    public static ReadOnlySpan`1<byte> Mutation { get; }
    public static ReadOnlySpan`1<byte> Subscription { get; }
    public static ReadOnlySpan`1<byte> Fragment { get; }
    public static ReadOnlySpan`1<byte> On { get; }
    public static ReadOnlySpan`1<byte> True { get; }
    public static ReadOnlySpan`1<byte> False { get; }
    public static ReadOnlySpan`1<byte> Null { get; }
    public static ReadOnlySpan`1<byte> get_Schema();
    public static ReadOnlySpan`1<byte> get_Scalar();
    public static ReadOnlySpan`1<byte> get_Type();
    public static ReadOnlySpan`1<byte> get_Interface();
    public static ReadOnlySpan`1<byte> get_Union();
    public static ReadOnlySpan`1<byte> get_Enum();
    public static ReadOnlySpan`1<byte> get_Input();
    public static ReadOnlySpan`1<byte> get_Extend();
    public static ReadOnlySpan`1<byte> get_Implements();
    public static ReadOnlySpan`1<byte> get_Repeatable();
    public static ReadOnlySpan`1<byte> get_Directive();
    public static ReadOnlySpan`1<byte> get_Query();
    public static ReadOnlySpan`1<byte> get_Mutation();
    public static ReadOnlySpan`1<byte> get_Subscription();
    public static ReadOnlySpan`1<byte> get_Fragment();
    public static ReadOnlySpan`1<byte> get_On();
    public static ReadOnlySpan`1<byte> get_True();
    public static ReadOnlySpan`1<byte> get_False();
    public static ReadOnlySpan`1<byte> get_Null();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.ParserOptions : object {
    [CompilerGeneratedAttribute]
private bool <NoLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAllowedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAllowedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAllowedFields>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserOptionsExperimental <Experimental>k__BackingField;
    [CompilerGeneratedAttribute]
private static ParserOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static ParserOptions <NoLocation>k__BackingField;
    public bool NoLocations { get; }
    public int MaxAllowedTokens { get; }
    public int MaxAllowedNodes { get; }
    public int MaxAllowedFields { get; }
    public ParserOptionsExperimental Experimental { get; }
    public static ParserOptions Default { get; }
    public static ParserOptions NoLocation { get; }
    public ParserOptions(bool noLocations, bool allowFragmentVariables, int maxAllowedNodes, int maxAllowedTokens, int maxAllowedFields);
    private static ParserOptions();
    [CompilerGeneratedAttribute]
public bool get_NoLocations();
    [CompilerGeneratedAttribute]
public int get_MaxAllowedTokens();
    [CompilerGeneratedAttribute]
public int get_MaxAllowedNodes();
    [CompilerGeneratedAttribute]
public int get_MaxAllowedFields();
    [CompilerGeneratedAttribute]
public ParserOptionsExperimental get_Experimental();
    [CompilerGeneratedAttribute]
public static ParserOptions get_Default();
    [CompilerGeneratedAttribute]
public static ParserOptions get_NoLocation();
}
public class HotChocolate.Language.ParserOptionsExperimental : object {
    [CompilerGeneratedAttribute]
private bool <AllowFragmentVariables>k__BackingField;
    public bool AllowFragmentVariables { get; }
    internal ParserOptionsExperimental(bool allowFragmentVariables);
    [CompilerGeneratedAttribute]
public bool get_AllowFragmentVariables();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Language.Properties.LangUtf8Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string GraphQLData_Empty { get; }
    internal static string ParseMany_InvalidOpenToken { get; }
    internal static string Parser_InvalidScalarToken { get; }
    internal static string Parser_InvalidToken { get; }
    internal static string ThrowHelper_Reader_InvalidToken { get; }
    internal static string Reader_UnexpectedDigitAfterDot { get; }
    internal static string Reader_UnexpectedPunctuatorToken { get; }
    internal static string SourceText_Empty { get; }
    internal static string Utf8Helper_InvalidEscapeChar { get; }
    internal static string Utf8Helper_InvalidQuoteEscapeCount { get; }
    internal static string NewLineMustBeGreaterOrEqualToOne { get; }
    internal static string UnexpectedDigit { get; }
    internal static string InvalidNumber { get; }
    internal static string UnexpectedCharacter { get; }
    internal static string InvalidCharacterEscapeSequence { get; }
    internal static string InvalidCharacterWithinString { get; }
    internal static string UnterminatedString { get; }
    internal static string UnexpectedToken { get; }
    internal static string Utf8GraphQLReader_ReadPunctuatorToken_InvalidState { get; }
    internal static string ThrowHelper_UnexpectedProperty { get; }
    internal static string ThrowHelper_InvalidRequestStructure { get; }
    internal static string ThrowHelper_NoIdAndNoQuery { get; }
    internal static string ThrowHelper_QueryMustBeStringOrNull { get; }
    internal static string ThrowHelper_ExpectedObjectOrNull { get; }
    internal static string ThrowHelper_ExpectedStringOrNull { get; }
    internal static string ThrowHelper_UnexpectedToken { get; }
    internal static string Utf8GraphQLReader_Read_MaxAllowedTokensReached { get; }
    internal static string Utf8GraphQLParser_Start_MaxAllowedNodesReached { get; }
    internal static string Utf8GraphQLParser_Start_MaxAllowedFieldsReached { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_GraphQLData_Empty();
    internal static string get_ParseMany_InvalidOpenToken();
    internal static string get_Parser_InvalidScalarToken();
    internal static string get_Parser_InvalidToken();
    internal static string get_ThrowHelper_Reader_InvalidToken();
    internal static string get_Reader_UnexpectedDigitAfterDot();
    internal static string get_Reader_UnexpectedPunctuatorToken();
    internal static string get_SourceText_Empty();
    internal static string get_Utf8Helper_InvalidEscapeChar();
    internal static string get_Utf8Helper_InvalidQuoteEscapeCount();
    internal static string get_NewLineMustBeGreaterOrEqualToOne();
    internal static string get_UnexpectedDigit();
    internal static string get_InvalidNumber();
    internal static string get_UnexpectedCharacter();
    internal static string get_InvalidCharacterEscapeSequence();
    internal static string get_InvalidCharacterWithinString();
    internal static string get_UnterminatedString();
    internal static string get_UnexpectedToken();
    internal static string get_Utf8GraphQLReader_ReadPunctuatorToken_InvalidState();
    internal static string get_ThrowHelper_UnexpectedProperty();
    internal static string get_ThrowHelper_InvalidRequestStructure();
    internal static string get_ThrowHelper_NoIdAndNoQuery();
    internal static string get_ThrowHelper_QueryMustBeStringOrNull();
    internal static string get_ThrowHelper_ExpectedObjectOrNull();
    internal static string get_ThrowHelper_ExpectedStringOrNull();
    internal static string get_ThrowHelper_UnexpectedToken();
    internal static string get_Utf8GraphQLReader_Read_MaxAllowedTokensReached();
    internal static string get_Utf8GraphQLParser_Start_MaxAllowedNodesReached();
    internal static string get_Utf8GraphQLParser_Start_MaxAllowedFieldsReached();
}
internal static class HotChocolate.Language.StringHelper : object {
    [NullableAttribute("1")]
public static UTF8Encoding UTF8Encoding;
    private static StringHelper();
    public static void TrimStringToken(ReadOnlySpan`1& data);
    public static void TrimBlockStringToken(ReadOnlySpan`1& data, Span`1& trimmedData);
    private static int GetLeadingWhitespace(ReadOnlySpan`1& chunk, Int32& position);
    private static int GetTrailingWhitespace(ReadOnlySpan`1& chunk);
    private static ReadOnlySpan`1<byte> GetNextLine(ReadOnlySpan`1& data, Int32& position);
    private static Span`1<byte> GetNextLine(Span`1& data, Int32& position);
    private static Span`1<byte> GetNextLineReverse(Span`1& data, Int32& position);
    private static int GoToNextLine(ReadOnlySpan`1& data, Int32& position);
    private static int GoToNextLine(Span`1& data, Int32& position);
    private static int GoToPreviousLine(Span`1& data, Int32& position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.SyntaxException : Exception {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Position { get; }
    public int Line { get; }
    public int Column { get; }
    internal SyntaxException(Utf8GraphQLReader reader, string message);
    internal SyntaxException(Utf8GraphQLReader reader, string message, Object[] args);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Language.ThrowHelper : object {
    public static SyntaxException InvalidRequestStructure(Utf8GraphQLReader reader);
    public static SyntaxException NoIdAndNoQuery(Utf8GraphQLReader reader);
    public static SyntaxException QueryMustBeStringOrNull(Utf8GraphQLReader reader);
    [NullableContextAttribute("0")]
public static SyntaxException UnexpectedProperty(Utf8GraphQLReader reader, ReadOnlySpan`1<byte> fieldName);
    public static SyntaxException ExpectedObjectOrNull(Utf8GraphQLReader reader);
    public static SyntaxException ExpectedStringOrNull(Utf8GraphQLReader reader);
    public static SyntaxException UnexpectedToken(Utf8GraphQLReader reader);
    public static SyntaxException Reader_UnexpectedDigitAfterDot(Utf8GraphQLReader reader);
    public static SyntaxException Reader_InvalidToken(Utf8GraphQLReader reader, TokenKind expected);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Language.TokenHelper : object {
    private static Boolean[] _isString;
    private static Boolean[] _isScalar;
    private static TokenHelper();
    public static bool IsDescription(Utf8GraphQLReader& reader);
    public static bool IsString(Utf8GraphQLReader& reader);
    public static bool IsScalarValue(Utf8GraphQLReader& reader);
}
public enum HotChocolate.Language.TokenKind : Enum {
    public byte value__;
    public static TokenKind StartOfFile;
    public static TokenKind EndOfFile;
    public static TokenKind Bang;
    public static TokenKind QuestionMark;
    public static TokenKind Dollar;
    public static TokenKind Ampersand;
    public static TokenKind LeftParenthesis;
    public static TokenKind RightParenthesis;
    public static TokenKind Spread;
    public static TokenKind Colon;
    public static TokenKind Equal;
    public static TokenKind At;
    public static TokenKind LeftBracket;
    public static TokenKind RightBracket;
    public static TokenKind LeftBrace;
    public static TokenKind RightBrace;
    public static TokenKind Pipe;
    public static TokenKind Name;
    public static TokenKind Integer;
    public static TokenKind Float;
    public static TokenKind String;
    public static TokenKind BlockString;
    public static TokenKind Comment;
    public static TokenKind Dot;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Language.TokenPrinter : object {
    private static Dictionary`2<TokenKind, string> _cachedStrings;
    private static TokenPrinter();
    public static string Print(Utf8GraphQLReader& reader);
    public static string Print(TokenKind tokenKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.Utf8EncodingException : Exception {
    public Utf8EncodingException(string message);
    public Utf8EncodingException(string message, Exception inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class HotChocolate.Language.Utf8GraphQLParser : ValueType {
    private bool _createLocation;
    private bool _allowFragmentVars;
    private int _maxAllowedNodes;
    private int _maxAllowedFields;
    private Utf8GraphQLReader _reader;
    [NullableAttribute("2")]
private StringValueNode _description;
    private int _parsedNodes;
    private int _parsedFields;
    private static List`1<DirectiveNode> _emptyDirectives;
    private static List`1<OperationTypeDefinitionNode> _emptyOpDefs;
    private static List`1<VariableDefinitionNode> _emptyVariableDefinitions;
    private static List`1<ArgumentNode> _emptyArguments;
    private static List`1<EnumValueDefinitionNode> _emptyEnumValues;
    private static List`1<InputValueDefinitionNode> _emptyInputValues;
    private static List`1<FieldDefinitionNode> _emptyFieldDefinitions;
    public int ParsedSyntaxNodes { get; }
    public bool IsEndOfFile { get; }
    internal Utf8GraphQLReader Reader { get; }
    [NullableContextAttribute("0")]
public Utf8GraphQLParser(ReadOnlySpan`1<byte> graphQLData, ParserOptions options);
    [NullableContextAttribute("2")]
internal Utf8GraphQLParser(Utf8GraphQLReader reader, ParserOptions options);
    private static Utf8GraphQLParser();
    public int get_ParsedSyntaxNodes();
    public bool get_IsEndOfFile();
    internal Utf8GraphQLReader get_Reader();
    public DocumentNode Parse();
    private IDefinitionNode ParseDefinition();
    [NullableContextAttribute("0")]
public static DocumentNode Parse(ReadOnlySpan`1<byte> graphQLData);
    public static DocumentNode Parse(ReadOnlySpan`1<byte> graphQLData, ParserOptions options);
    public static DocumentNode Parse(string sourceText);
    public static DocumentNode Parse(string sourceText, ParserOptions options);
    [NullableContextAttribute("0")]
internal static void ConvertToBytes(string text, Span`1& buffer);
    private DirectiveDefinitionNode ParseDirectiveDefinition();
    private List`1<NameNode> ParseDirectiveLocations();
    private NameNode ParseDirectiveLocation();
    private List`1<DirectiveNode> ParseDirectives(bool isConstant);
    private DirectiveNode ParseDirective(bool isConstant);
    private ITypeSystemExtensionNode ParseTypeExtension();
    private SchemaExtensionNode ParseSchemaExtension(TokenInfo& start);
    private List`1<OperationTypeDefinitionNode> ParseOperationTypeDefs();
    private ScalarTypeExtensionNode ParseScalarTypeExtension(TokenInfo& start);
    private ObjectTypeExtensionNode ParseObjectTypeExtension(TokenInfo& start);
    private InterfaceTypeExtensionNode ParseInterfaceTypeExtension(TokenInfo& start);
    private UnionTypeExtensionNode ParseUnionTypeExtension(TokenInfo& start);
    private EnumTypeExtensionNode ParseEnumTypeExtension(TokenInfo& start);
    private InputObjectTypeExtensionNode ParseInputObjectTypeExtension(TokenInfo& start);
    private ISelectionNode ParseFragment();
    private FragmentDefinitionNode ParseFragmentDefinition();
    private FragmentSpreadNode ParseFragmentSpread(TokenInfo& start);
    private InlineFragmentNode ParseInlineFragment(TokenInfo& start, NamedTypeNode typeCondition);
    private NameNode ParseFragmentName();
    private OperationDefinitionNode ParseOperationDefinition();
    private OperationDefinitionNode ParseShortOperationDefinition();
    private OperationType ParseOperationType();
    private List`1<VariableDefinitionNode> ParseVariableDefinitions();
    private VariableDefinitionNode ParseVariableDefinition();
    private VariableNode ParseVariable();
    private SelectionSetNode ParseSelectionSet();
    private ISelectionNode ParseSelection();
    private FieldNode ParseField();
    [NullableContextAttribute("2")]
private INullabilityNode ParseRequiredStatus();
    [NullableContextAttribute("2")]
private ListNullabilityNode ParseListNullability();
    [NullableContextAttribute("2")]
private INullabilityNode ParseModifier(ListNullabilityNode listNullabilityNode);
    private List`1<ArgumentNode> ParseArguments(bool isConstant);
    private ArgumentNode ParseArgument(bool isConstant);
    private SchemaCoordinateNode ParseSingleSchemaCoordinate();
    private SchemaCoordinateNode ParseSchemaCoordinate();
    [NullableContextAttribute("2")]
private StringValueNode ParseDescription();
    private SchemaDefinitionNode ParseSchemaDefinition();
    private OperationTypeDefinitionNode ParseOperationTypeDefinition();
    private ScalarTypeDefinitionNode ParseScalarTypeDefinition();
    private ObjectTypeDefinitionNode ParseObjectTypeDefinition();
    private List`1<NamedTypeNode> ParseImplementsInterfaces();
    private List`1<FieldDefinitionNode> ParseFieldsDefinition();
    private FieldDefinitionNode ParseFieldDefinition();
    private List`1<InputValueDefinitionNode> ParseArgumentDefinitions();
    private InputValueDefinitionNode ParseInputValueDefinition();
    private InterfaceTypeDefinitionNode ParseInterfaceTypeDefinition();
    private UnionTypeDefinitionNode ParseUnionTypeDefinition();
    private List`1<NamedTypeNode> ParseUnionMemberTypes();
    private EnumTypeDefinitionNode ParseEnumTypeDefinition();
    private List`1<EnumValueDefinitionNode> ParseEnumValuesDefinition();
    private EnumValueDefinitionNode ParseEnumValueDefinition();
    private InputObjectTypeDefinitionNode ParseInputObjectTypeDefinition();
    private List`1<InputValueDefinitionNode> ParseInputFieldsDefinition();
    private ITypeNode ParseTypeReference();
    private NamedTypeNode ParseNamedType();
    internal NameNode ParseName();
    internal bool MoveNext();
    private TokenInfo Start();
    [NullableContextAttribute("2")]
private Location CreateLocation(TokenInfo& start);
    private string ExpectName();
    internal void ExpectColon();
    internal void ExpectDollar();
    private void ExpectAt();
    private void ExpectRightBracket();
    private string ExpectString();
    private void ExpectSpread();
    internal void ExpectRightParenthesis();
    private void ExpectRightBrace();
    private void Expect(TokenKind kind);
    private void ExpectDirectiveKeyword();
    private void ExpectOnKeyword();
    private void ExpectFragmentKeyword();
    [NullableContextAttribute("0")]
private void ExpectKeyword(ReadOnlySpan`1<byte> keyword);
    private bool SkipPipe();
    private bool SkipEqual();
    private bool SkipColon();
    private bool SkipAmpersand();
    private bool SkipAt();
    private bool SkipDot();
    private bool SkipRepeatableKeyword();
    private bool SkipImplementsKeyword();
    [NullableContextAttribute("0")]
private bool SkipKeyword(ReadOnlySpan`1<byte> keyword);
    [NullableContextAttribute("2")]
private StringValueNode TakeDescription();
    private SyntaxException Unexpected(TokenKind kind);
    internal IValueNode ParseValueLiteral(bool isConstant);
    private StringValueNode ParseStringLiteral();
    private ListValueNode ParseList(bool isConstant);
    private ObjectValueNode ParseObject(bool isConstant);
    private IValueNode ParseScalarValue();
    private IValueNode ParseEnumValue();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class HotChocolate.Language.Utf8GraphQLReader : ValueType {
    private ReadOnlySpan`1<byte> _graphQLData;
    private int _length;
    private int _maxAllowedTokens;
    private int _nextNewLines;
    private ReadOnlySpan`1<byte> _value;
    private Nullable`1<FloatFormat> _floatFormat;
    private int _position;
    private TokenKind _kind;
    private int _start;
    private int _end;
    private int _line;
    private int _lineStart;
    private int _column;
    private int _tokenCount;
    public ReadOnlySpan`1<byte> GraphQLData { get; }
    public TokenKind Kind { get; }
    public int Start { get; }
    public int End { get; }
    public int Position { get; }
    public int Line { get; }
    public int LineStart { get; }
    public int Column { get; }
    public ReadOnlySpan`1<byte> Value { get; }
    public Nullable`1<FloatFormat> FloatFormat { get; }
    public Utf8GraphQLReader(ReadOnlySpan`1<byte> graphQLData, int maxAllowedTokens);
    public ReadOnlySpan`1<byte> get_GraphQLData();
    public TokenKind get_Kind();
    public int get_Start();
    public int get_End();
    public int get_Position();
    public int get_Line();
    public int get_LineStart();
    public int get_Column();
    public ReadOnlySpan`1<byte> get_Value();
    public Nullable`1<FloatFormat> get_FloatFormat();
    public bool Read();
    public int Count();
    private void ReadNameToken();
    private void ReadPunctuatorToken(byte code);
    private void ReadNumberToken(byte firstCode);
    private byte ReadDigits(byte firstCode);
    private void ReadCommentToken();
    private void ReadStringValueToken();
    private void ReadBlockStringToken();
    private void SkipWhitespaces();
    private void SkipBoml();
    private void NewLine();
    private void NewLine(int lines);
    private void UpdateColumn();
    private bool IsEndOfStream();
    private bool IsEndOfStream(int position);
    [NullableContextAttribute("1")]
public string GetString();
    public static string GetString(ReadOnlySpan`1<byte> escapedValue, bool isBlockString);
    public static string GetString(ReadOnlySpan`1<byte> unescapedValue);
    [NullableContextAttribute("1")]
public string GetComment();
    [NullableContextAttribute("1")]
public string GetName();
    [NullableContextAttribute("1")]
public string GetScalarValue();
    private static void UnescapeValue(ReadOnlySpan`1& escaped, Span`1& unescapedValue, bool isBlockString);
    public void UnescapeValue(Span`1& unescapedValue);
    internal bool MoveNext();
    internal bool Skip(TokenKind kind);
    internal ReadOnlySpan`1<byte> Expect(TokenKind kind);
}
internal static class HotChocolate.Language.Utf8Helper : object {
    public static void Unescape(ReadOnlySpan`1& escapedString, Span`1& unescapedString, bool isBlockString);
    public static int UnescapeUtf8Hex(byte a, byte b, byte c, byte d);
    public static void UnescapeUtf8Hex(int unicodeDecimal, Int32& writePosition, Span`1<byte> unescapedString);
    private static int HexToDecimal(int a);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
