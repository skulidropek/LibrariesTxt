public abstract class HotChocolate.Language.DocumentHashProviderBase : object {
    [CompilerGeneratedAttribute]
private HashFormat <Format>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; }
    public HashFormat Format { get; }
    internal DocumentHashProviderBase(HashFormat format);
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual HashFormat get_Format();
    public sealed virtual string ComputeHash(ReadOnlySpan`1<byte> document);
    protected abstract virtual string ComputeHash(ReadOnlySpan`1<byte> document, HashFormat format);
    protected static string ToHexString(ReadOnlySpan`1<byte> hash);
    private static char ToCharLower(int value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Language.GraphQLRequest : object {
    [CompilerGeneratedAttribute]
private string <QueryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryHash>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentNode <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Variables>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Extensions>k__BackingField;
    public string QueryId { get; }
    public string QueryHash { get; }
    public DocumentNode Query { get; }
    public string OperationName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Variables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> Extensions { get; }
    public GraphQLRequest(DocumentNode query, string queryId, string queryHash, string operationName, IReadOnlyDictionary`2<string, object> variables, IReadOnlyDictionary`2<string, object> extensions);
    [CompilerGeneratedAttribute]
public string get_QueryId();
    [CompilerGeneratedAttribute]
public string get_QueryHash();
    [CompilerGeneratedAttribute]
public DocumentNode get_Query();
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Variables();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Extensions();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
public class HotChocolate.Language.GraphQLSocketMessage : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySpan`1<byte> <Payload>k__BackingField;
    [NullableAttribute("2")]
public string Id { get; }
    [NullableAttribute("1")]
public string Type { get; }
    public ReadOnlySpan`1<byte> Payload { get; }
    public GraphQLSocketMessage(string type, string id, ReadOnlySpan`1<byte> payload);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Id();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public ReadOnlySpan`1<byte> get_Payload();
}
public enum HotChocolate.Language.HashFormat : Enum {
    public int value__;
    public static HashFormat Base64;
    public static HashFormat Hex;
}
[NullableContextAttribute("1")]
public interface HotChocolate.Language.IDocumentCache {
    public int Capacity { get; }
    public int Count { get; }
    public abstract virtual int get_Capacity();
    public abstract virtual int get_Count();
    public abstract virtual bool TryGetDocument(string documentId, DocumentNode& document);
    public abstract virtual void TryAddDocument(string documentId, DocumentNode document);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Language.IDocumentHashProvider {
    public string Name { get; }
    public HashFormat Format { get; }
    public abstract virtual string get_Name();
    public abstract virtual HashFormat get_Format();
    [NullableContextAttribute("0")]
public abstract virtual string ComputeHash(ReadOnlySpan`1<byte> document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.MD5DocumentHashProvider : DocumentHashProviderBase {
    private ThreadLocal`1<MD5> _md5;
    public string Name { get; }
    public MD5DocumentHashProvider(HashFormat format);
    public virtual string get_Name();
    [NullableContextAttribute("0")]
protected virtual string ComputeHash(ReadOnlySpan`1<byte> document, HashFormat format);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Language.Properties.LangWebResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SourceText_Empty { get; }
    internal static string ComputeHash_FormatNotSupported { get; }
    internal static string ParseMany_InvalidOpenToken { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SourceText_Empty();
    internal static string get_ComputeHash_FormatNotSupported();
    internal static string get_ParseMany_InvalidOpenToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.Sha1DocumentHashProvider : DocumentHashProviderBase {
    private ThreadLocal`1<SHA1> _sha;
    public string Name { get; }
    public Sha1DocumentHashProvider(HashFormat format);
    public virtual string get_Name();
    [NullableContextAttribute("0")]
protected virtual string ComputeHash(ReadOnlySpan`1<byte> document, HashFormat format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.Sha256DocumentHashProvider : DocumentHashProviderBase {
    private ThreadLocal`1<SHA256> _sha;
    public string Name { get; }
    public Sha256DocumentHashProvider(HashFormat format);
    public virtual string get_Name();
    [NullableContextAttribute("0")]
protected virtual string ComputeHash(ReadOnlySpan`1<byte> document, HashFormat format);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class HotChocolate.Language.Utf8GraphQLRequestParser : ValueType {
    private static byte _o;
    private static byte _n;
    private static byte _q;
    private static byte _v;
    private static byte _e;
    private static byte _t;
    private static byte _i;
    private static byte _p;
    [NullableAttribute("1")]
private static string _persistedQuery;
    [NullableAttribute("2")]
private IDocumentHashProvider _hashProvider;
    [NullableAttribute("2")]
private IDocumentCache _cache;
    private bool _useCache;
    [NullableAttribute("1")]
private ParserOptions _options;
    private Utf8GraphQLReader _reader;
    private static ReadOnlySpan`1<byte> OperationName { get; }
    private static ReadOnlySpan`1<byte> Query { get; }
    private static ReadOnlySpan`1<byte> Variables { get; }
    private static ReadOnlySpan`1<byte> Extensions { get; }
    private static ReadOnlySpan`1<byte> Type { get; }
    private static ReadOnlySpan`1<byte> Id { get; }
    private static ReadOnlySpan`1<byte> Payload { get; }
    [NullableContextAttribute("2")]
public Utf8GraphQLRequestParser(ReadOnlySpan`1<byte> requestData, ParserOptions options, IDocumentCache cache, IDocumentHashProvider hashProvider);
    private static ReadOnlySpan`1<byte> get_OperationName();
    private static ReadOnlySpan`1<byte> get_Query();
    private static ReadOnlySpan`1<byte> get_Variables();
    private static ReadOnlySpan`1<byte> get_Extensions();
    private static ReadOnlySpan`1<byte> get_Type();
    private static ReadOnlySpan`1<byte> get_Id();
    private static ReadOnlySpan`1<byte> get_Payload();
    [NullableContextAttribute("1")]
public IReadOnlyList`1<GraphQLRequest> Parse();
    public GraphQLSocketMessage ParseMessage();
    [NullableContextAttribute("2")]
public object ParseJson();
    [NullableContextAttribute("1")]
private IReadOnlyList`1<GraphQLRequest> ParseBatchRequest();
    [NullableContextAttribute("1")]
private GraphQLRequest ParseRequest();
    private void ParseRequestProperty(Request& request);
    private void ParseMessageProperty(Message& message);
    private void ParseQuery(Request& request);
    [NullableContextAttribute("2")]
public static IReadOnlyList`1<GraphQLRequest> Parse(ReadOnlySpan`1<byte> requestData, ParserOptions options, IDocumentCache cache, IDocumentHashProvider hashProvider);
    [NullableContextAttribute("2")]
public static IReadOnlyList`1<GraphQLRequest> Parse(string sourceText, ParserOptions options, IDocumentCache cache, IDocumentHashProvider hashProvider);
    public static GraphQLSocketMessage ParseMessage(ReadOnlySpan`1<byte> messageData);
    [NullableContextAttribute("2")]
public static object ParseJson(string sourceText, ParserOptions options);
    [NullableContextAttribute("2")]
public static object ParseJson(ReadOnlySpan`1<byte> sourceText, ParserOptions options);
    [NullableContextAttribute("1")]
public static IReadOnlyDictionary`2<string, object> ParseJsonObject(string sourceText, ParserOptions options);
    public static IReadOnlyDictionary`2<string, object> ParseJsonObject(ReadOnlySpan`1<byte> sourceText, ParserOptions options);
    [NullableContextAttribute("1")]
public static IReadOnlyDictionary`2<string, object> ParseVariables(string sourceText, ParserOptions options);
    public static IReadOnlyDictionary`2<string, object> ParseVariables(ReadOnlySpan`1<byte> sourceText, ParserOptions options);
    [NullableContextAttribute("1")]
public static IReadOnlyDictionary`2<string, object> ParseResponse(string sourceText, ParserOptions options);
    public static IReadOnlyDictionary`2<string, object> ParseResponse(ReadOnlySpan`1<byte> sourceText, ParserOptions options);
    [NullableContextAttribute("2")]
public static IReadOnlyList`1<object> ParseBatchResponse(string sourceText, ParserOptions options);
    [NullableContextAttribute("2")]
public static IReadOnlyList`1<object> ParseBatchResponse(ReadOnlySpan`1<byte> sourceText, ParserOptions options);
    [NullableContextAttribute("1")]
private object ParseResponseValue();
    private Dictionary`2<string, object> ParseResponseObject();
    private void ParseResponseObjectFieldSyntax(Dictionary`2<string, object> fields);
    [NullableContextAttribute("1")]
private List`1<object> ParseResponseList();
    [NullableContextAttribute("1")]
private IValueNode ParseValueSyntax();
    [NullableContextAttribute("1")]
private ObjectValueNode ParseObjectSyntax();
    [NullableContextAttribute("1")]
private ObjectFieldNode ParseObjectFieldSyntax();
    [NullableContextAttribute("1")]
private ListValueNode ParseListSyntax();
    [NullableContextAttribute("1")]
private IValueNode ParseScalarSyntax();
    [NullableContextAttribute("2")]
private string ParseStringOrNull();
    private IReadOnlyDictionary`2<string, object> ParseObjectOrNull();
    private IReadOnlyDictionary`2<string, object> ParseVariables();
    [NullableContextAttribute("2")]
private IReadOnlyList`1<object> ParseBatchResponse();
    private IReadOnlyDictionary`2<string, object> ParseResponse();
    private bool IsNullToken();
    [NullableContextAttribute("2")]
public static bool TryExtractHash(IReadOnlyDictionary`2<string, object> extensions, IDocumentHashProvider hashProvider, String& hash);
    [NullableContextAttribute("2")]
private object ParseValue();
    private int SkipValue();
    private IReadOnlyDictionary`2<string, object> ParseObject();
    private int SkipObject();
    private void ParseObjectField(IDictionary`2<string, object> obj);
    private void SkipObjectField();
    private IReadOnlyList`1<object> ParseList();
    private int SkipList();
    [NullableContextAttribute("2")]
private object ParseScalar();
    private int SkipScalar();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
