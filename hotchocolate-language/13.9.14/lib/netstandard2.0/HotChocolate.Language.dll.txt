public interface HotChocolate.Language.ISyntaxNodeVisitor {
}
[NullableContextAttribute("1")]
public interface HotChocolate.Language.ISyntaxNodeVisitor`1 {
    public abstract virtual VisitorAction Enter(T node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public abstract virtual VisitorAction Leave(T node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Language.IVisitationMap {
    public abstract virtual void ResolveChildren(ISyntaxNode node, IList`1<SyntaxNodeInfo> children);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Language.ListExtensions : object {
    [ExtensionAttribute]
public static T Pop(IList`1<T> list);
    [ExtensionAttribute]
public static bool TryPop(IList`1<T> list, T& item);
    [ExtensionAttribute]
public static T Peek(IList`1<T> list);
    [ExtensionAttribute]
public static bool TryPeek(IList`1<T> list, T& item);
    [ExtensionAttribute]
public static bool TryPeek(IList`1<T> list, int elements, T& item);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T PeekOrDefault(IList`1<T> list, T defaultValue);
    [ExtensionAttribute]
public static void Push(IList`1<T> list, T item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Language.QuerySyntaxWalker`1 : SyntaxWalkerBase`2<DocumentNode, TContext> {
    protected bool VisitFragmentDefinitions { get; }
    protected virtual bool get_VisitFragmentDefinitions();
    public virtual void Visit(DocumentNode node, TContext context);
    protected virtual void VisitDocument(DocumentNode node, TContext context);
    protected virtual void VisitDefinition(IDefinitionNode node, TContext context);
    protected virtual void VisitOperationDefinition(OperationDefinitionNode node, TContext context);
    protected virtual void VisitVariableDefinition(VariableDefinitionNode node, TContext context);
    protected virtual void VisitFragmentDefinition(FragmentDefinitionNode node, TContext context);
    protected virtual void VisitSelectionSet(SelectionSetNode node, TContext context);
    protected virtual void VisitField(FieldNode node, TContext context);
    protected virtual void VisitFragmentSpread(FragmentSpreadNode node, TContext context);
    protected virtual void VisitInlineFragment(InlineFragmentNode node, TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Language.SchemaSyntaxWalker`1 : SyntaxWalkerBase`2<DocumentNode, TContext> {
    public virtual void Visit(DocumentNode node, TContext context);
    protected virtual void VisitDocument(DocumentNode node, TContext context);
    protected virtual void VisitDefinition(IDefinitionNode node, TContext context);
    protected virtual void VisitTypeDefinition(IDefinitionNode node, TContext context);
    protected virtual void VisitTypeExtensionDefinition(IDefinitionNode node, TContext context);
    protected virtual void VisitSchemaDefinition(SchemaDefinitionNode node, TContext context);
    protected virtual void VisitSchemaExtension(SchemaExtensionNode node, TContext context);
    protected virtual void VisitOperationTypeDefinition(OperationTypeDefinitionNode node, TContext context);
    protected virtual void VisitDirectiveDefinition(DirectiveDefinitionNode node, TContext context);
    protected virtual void VisitScalarTypeDefinition(ScalarTypeDefinitionNode node, TContext context);
    protected virtual void VisitScalarTypeExtension(ScalarTypeExtensionNode node, TContext context);
    protected virtual void VisitObjectTypeDefinition(ObjectTypeDefinitionNode node, TContext context);
    protected virtual void VisitObjectTypeExtension(ObjectTypeExtensionNode node, TContext context);
    protected virtual void VisitFieldDefinition(FieldDefinitionNode node, TContext context);
    protected virtual void VisitInputObjectTypeDefinition(InputObjectTypeDefinitionNode node, TContext context);
    protected virtual void VisitInputObjectTypeExtension(InputObjectTypeExtensionNode node, TContext context);
    protected virtual void VisitInterfaceTypeDefinition(InterfaceTypeDefinitionNode node, TContext context);
    protected virtual void VisitInterfaceTypeExtension(InterfaceTypeExtensionNode node, TContext context);
    protected virtual void VisitUnionTypeDefinition(UnionTypeDefinitionNode node, TContext context);
    protected virtual void VisitUnionTypeExtension(UnionTypeExtensionNode node, TContext context);
    protected virtual void VisitEnumTypeDefinition(EnumTypeDefinitionNode node, TContext context);
    protected virtual void VisitEnumTypeExtension(EnumTypeExtensionNode node, TContext context);
    private static void VisitIfNotNull(T node, TContext context, Action`2<T, TContext> visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Language.SyntaxNodeInfo : ValueType {
    [CompilerGeneratedAttribute]
private ISyntaxNode <Node>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    public ISyntaxNode Node { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public Nullable`1<int> Index { get; }
    public SyntaxNodeInfo(ISyntaxNode node, string name);
    public SyntaxNodeInfo(ISyntaxNode node, string name, Nullable`1<int> index);
    [CompilerGeneratedAttribute]
public ISyntaxNode get_Node();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.SyntaxNodeVisitor : object {
    [NullableAttribute("2")]
private IReadOnlyDictionary`2<SyntaxKind, VisitorAction> _actions;
    private VisitorAction _defaultAction;
    protected SyntaxNodeVisitor(VisitorAction defaultAction);
    protected SyntaxNodeVisitor(IReadOnlyDictionary`2<SyntaxKind, VisitorAction> actions, VisitorAction defaultAction);
    protected SyntaxNodeVisitor(IReadOnlyDictionary`2<SyntaxKind, VisitorAction> actions);
    public virtual VisitorAction Enter(DocumentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(DocumentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(OperationDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(OperationDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(SelectionSetNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(SelectionSetNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(VariableDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(VariableDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(FieldNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(FieldNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(FragmentSpreadNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(FragmentSpreadNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(InlineFragmentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(InlineFragmentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ArgumentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ArgumentNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(FragmentDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(FragmentDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(DirectiveNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(DirectiveNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(NamedTypeNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(NamedTypeNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ListTypeNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ListTypeNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(NonNullTypeNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(NonNullTypeNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ObjectValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ObjectValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ObjectFieldNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ObjectFieldNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ListValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ListValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(StringValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(StringValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(IntValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(IntValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(FloatValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(FloatValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(BooleanValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(BooleanValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(EnumValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(EnumValueNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(VariableNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(VariableNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(InputObjectTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(InputObjectTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(EnumTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(EnumTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(InterfaceTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(InterfaceTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(UnionTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(UnionTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ScalarTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ScalarTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(DirectiveDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(DirectiveDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(EnumValueDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(EnumValueDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(UnionTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(UnionTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(InputValueDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(InputValueDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ObjectTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ObjectTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(OperationTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(OperationTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ScalarTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ScalarTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(SchemaDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(SchemaDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(FieldDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(FieldDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(InterfaceTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(InterfaceTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(EnumTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(EnumTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(InputObjectTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(InputObjectTypeDefinitionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(SchemaExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(SchemaExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Enter(ObjectTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public virtual VisitorAction Leave(ObjectTypeExtensionNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Enter(NameNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(NameNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    protected VisitorAction GetDefaultAction(SyntaxKind kind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.SyntaxVisitor`2 : object {
    public virtual void Visit(TStart node, TContext context);
    protected virtual void VisitName(NameNode node, TContext context);
    protected virtual void VisitDocument(DocumentNode node, TContext context);
    protected virtual void VisitOperationDefinition(OperationDefinitionNode node, TContext context);
    protected virtual void VisitVariableDefinition(VariableDefinitionNode node, TContext context);
    protected virtual void VisitVariable(VariableNode node, TContext context);
    protected virtual void VisitSelectionSet(SelectionSetNode node, TContext context);
    protected virtual void VisitField(FieldNode node, TContext context);
    protected virtual void VisitArgument(ArgumentNode node, TContext context);
    protected virtual void VisitFragmentSpread(FragmentSpreadNode node, TContext context);
    protected virtual void VisitInlineFragment(InlineFragmentNode node, TContext context);
    protected virtual void VisitFragmentDefinition(FragmentDefinitionNode node, TContext context);
    protected virtual void VisitIntValue(IntValueNode node, TContext context);
    protected virtual void VisitFloatValue(FloatValueNode node, TContext context);
    protected virtual void VisitStringValue(StringValueNode node, TContext context);
    protected virtual void VisitBooleanValue(BooleanValueNode node, TContext context);
    protected virtual void VisitEnumValue(EnumValueNode node, TContext context);
    protected virtual void VisitNullValue(NullValueNode node, TContext context);
    protected virtual void VisitListValue(ListValueNode node, TContext context);
    protected virtual void VisitObjectValue(ObjectValueNode node, TContext context);
    protected virtual void VisitObjectField(ObjectFieldNode node, TContext context);
    protected virtual void VisitDirective(DirectiveNode node, TContext context);
    protected virtual void VisitNamedType(NamedTypeNode node, TContext context);
    protected virtual void VisitListType(ListTypeNode node, TContext context);
    protected virtual void VisitNonNullType(NonNullTypeNode node, TContext context);
    protected virtual void VisitSchemaDefinition(SchemaDefinitionNode node, TContext context);
    protected virtual void VisitOperationTypeDefinition(OperationTypeDefinitionNode node, TContext context);
    protected virtual void VisitScalarTypeDefinition(ScalarTypeDefinitionNode node, TContext context);
    protected virtual void VisitObjectTypeDefinition(ObjectTypeDefinitionNode node, TContext context);
    protected virtual void VisitFieldDefinition(FieldDefinitionNode node, TContext context);
    protected virtual void VisitInputValueDefinition(InputValueDefinitionNode node, TContext context);
    protected virtual void VisitInterfaceTypeDefinition(InterfaceTypeDefinitionNode node, TContext context);
    protected virtual void VisitUnionTypeDefinition(UnionTypeDefinitionNode node, TContext context);
    protected virtual void VisitEnumTypeDefinition(EnumTypeDefinitionNode node, TContext context);
    protected virtual void VisitEnumValueDefinition(EnumValueDefinitionNode node, TContext context);
    protected virtual void VisitInputObjectTypeDefinition(InputObjectTypeDefinitionNode node, TContext context);
    protected virtual void VisitSchemaExtension(SchemaExtensionNode node, TContext context);
    protected virtual void VisitScalarTypeExtension(ScalarTypeExtensionNode node, TContext context);
    protected virtual void VisitObjectTypeExtension(ObjectTypeExtensionNode node, TContext context);
    protected virtual void VisitInterfaceTypeExtension(InterfaceTypeExtensionNode node, TContext context);
    protected virtual void VisitUnionTypeExtension(UnionTypeExtensionNode node, TContext context);
    protected virtual void VisitEnumTypeExtension(EnumTypeExtensionNode node, TContext context);
    protected virtual void VisitInputObjectTypeExtension(InputObjectTypeExtensionNode node, TContext context);
    protected virtual void VisitDirectiveDefinition(DirectiveDefinitionNode node, TContext context);
    protected virtual void VisitSelection(ISelectionNode node, TContext context);
    protected virtual void VisitValue(IValueNode node, TContext context);
    protected virtual void VisitType(ITypeNode node, TContext context);
    protected static void VisitMany(IEnumerable`1<T> items, TContext context, Action`2<T, TContext> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Language.SyntaxWalkerBase`2 : SyntaxVisitor`2<TStart, TContext> {
    protected virtual void VisitUnsupportedDefinitions(IDefinitionNode node, TContext context);
    protected virtual void VisitListValue(ListValueNode node, TContext context);
    protected virtual void VisitObjectValue(ObjectValueNode node, TContext context);
    protected virtual void VisitObjectField(ObjectFieldNode node, TContext context);
    protected virtual void VisitVariable(VariableNode node, TContext context);
    protected virtual void VisitDirective(DirectiveNode node, TContext context);
    protected virtual void VisitArgument(ArgumentNode node, TContext context);
    protected virtual void VisitListType(ListTypeNode node, TContext context);
    protected virtual void VisitNonNullType(NonNullTypeNode node, TContext context);
    protected virtual void VisitNamedType(NamedTypeNode node, TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Language.VisitationMap : object {
    public virtual void ResolveChildren(ISyntaxNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(DocumentNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(OperationDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(VariableDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(VariableNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(SelectionSetNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(FieldNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ArgumentNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(FragmentSpreadNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(InlineFragmentNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(FragmentDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(SchemaDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(OperationTypeDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ScalarTypeDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ObjectTypeDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(FieldDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(InputValueDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(InterfaceTypeDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(UnionTypeDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(EnumTypeDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(EnumValueDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(InputObjectTypeDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(DirectiveDefinitionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(SchemaExtensionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ScalarTypeExtensionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ObjectTypeExtensionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(InterfaceTypeExtensionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(UnionTypeExtensionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(EnumTypeExtensionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(InputObjectTypeExtensionNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(DirectiveNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(NamedTypeNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ListTypeNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(NonNullTypeNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ListValueNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ObjectValueNode node, IList`1<SyntaxNodeInfo> children);
    protected virtual void ResolveChildren(ObjectFieldNode node, IList`1<SyntaxNodeInfo> children);
    protected void ResolveChildren(string name, ISyntaxNode child, IList`1<SyntaxNodeInfo> children);
    protected void ResolveChildren(string name, IReadOnlyList`1<ISyntaxNode> items, IList`1<SyntaxNodeInfo> children);
}
public enum HotChocolate.Language.VisitorAction : Enum {
    public int value__;
    public static VisitorAction Default;
    public static VisitorAction Continue;
    public static VisitorAction Break;
    public static VisitorAction Skip;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Language.VisitorExtensions : object {
    private static VisitationMap _defaultVisitationMap;
    private static Dictionary`2<Type, IntVisitorFn> _enterVisitors;
    private static Dictionary`2<Type, IntVisitorFn> _leaveVisitors;
    private static VisitorExtensions();
    [ExtensionAttribute]
public static void Accept(ISyntaxNode node, VisitorFn`1<T> enter, VisitorFn`1<T> leave);
    [ExtensionAttribute]
public static void Accept(ISyntaxNode node, VisitorFn`1<T> enter, VisitorFn`1<T> leave, IVisitationMap visitationMap);
    [ExtensionAttribute]
public static void Accept(ISyntaxNode node, VisitorFn`1<T> enter, VisitorFn`1<T> leave, Func`2<ISyntaxNode, VisitorAction> defaultAction);
    [ExtensionAttribute]
public static void Accept(ISyntaxNode node, VisitorFn`1<T> enter, VisitorFn`1<T> leave, IVisitationMap visitationMap, Func`2<ISyntaxNode, VisitorAction> defaultAction);
    [ExtensionAttribute]
public static void Accept(ISyntaxNode node, ISyntaxNodeVisitor visitor);
    [ExtensionAttribute]
public static void Accept(ISyntaxNode node, ISyntaxNodeVisitor visitor, IVisitationMap visitationMap);
    [ExtensionAttribute]
public static void Accept(ISyntaxNode node, ISyntaxNodeVisitor visitor, Func`2<ISyntaxNode, VisitorAction> defaultAction);
    [ExtensionAttribute]
public static void Accept(ISyntaxNode node, ISyntaxNodeVisitor visitor, IVisitationMap visitationMap, Func`2<ISyntaxNode, VisitorAction> defaultAction);
    private static List`1<SyntaxNodeInfo> GetChildren(ISyntaxNode node, IVisitationMap visitationMap);
    private static VisitorAction Enter(ISyntaxNodeVisitor visitor, ISyntaxNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    private static VisitorAction Leave(ISyntaxNodeVisitor visitor, ISyntaxNode node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    private static Dictionary`2<Type, IntVisitorFn> CreateEnterVisitors();
    private static Dictionary`2<Type, IntVisitorFn> CreateLeaveVisitors();
    private static void AddEnterVisitor(IDictionary`2<Type, IntVisitorFn> dict);
    private static void AddLeaveVisitor(IDictionary`2<Type, IntVisitorFn> dict);
    private static IntVisitorFn CreateVisitor(bool enter);
}
public class HotChocolate.Language.VisitorFn`1 : MulticastDelegate {
    public VisitorFn`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual VisitorAction Invoke(T node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    [NullableContextAttribute("1")]
public virtual IAsyncResult BeginInvoke(T node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors, AsyncCallback callback, object object);
    public virtual VisitorAction EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Language.VisitorFnWrapper`1 : object {
    private VisitorFn`1<T> _enter;
    private VisitorFn`1<T> _leave;
    public VisitorFnWrapper`1(VisitorFn`1<T> enter, VisitorFn`1<T> leave);
    public sealed virtual VisitorAction Enter(T node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
    public sealed virtual VisitorAction Leave(T node, ISyntaxNode parent, IReadOnlyList`1<object> path, IReadOnlyList`1<ISyntaxNode> ancestors);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
