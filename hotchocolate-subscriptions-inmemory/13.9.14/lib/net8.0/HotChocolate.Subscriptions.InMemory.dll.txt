[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Subscriptions.InMemory.InMemoryPubSub : DefaultPubSub {
    private SubscriptionOptions _options;
    private ISubscriptionDiagnosticEvents _diagnosticEvents;
    public InMemoryPubSub(SubscriptionOptions options, ISubscriptionDiagnosticEvents diagnosticEvents);
    protected virtual ValueTask OnSendAsync(string formattedTopic, TMessage message, CancellationToken cancellationToken);
    protected virtual ValueTask OnCompleteAsync(string formattedTopic);
    protected virtual DefaultTopic`1<TMessage> OnCreateTopic(string formattedTopic, Nullable`1<int> bufferCapacity, Nullable`1<TopicBufferFullMode> bufferFullMode);
    protected virtual string FormatTopicName(string topic);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Subscriptions.InMemory.InMemoryTopic`1 : DefaultTopic`1<TMessage> {
    public InMemoryTopic`1(string name, int capacity, TopicBufferFullMode fullMode, ISubscriptionDiagnosticEvents diagnosticEvents);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Subscriptions.InMemory.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InMemorySourceStream_ReadEventsAsync_ReadOnlyOnce { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InMemorySourceStream_ReadEventsAsync_ReadOnlyOnce();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.InMemorySubscriptionsServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddInMemorySubscriptions(IRequestExecutorBuilder builder, SubscriptionOptions options);
    [ExtensionAttribute]
private static void AddInMemorySubscriptions(IServiceCollection services, SubscriptionOptions options);
}
