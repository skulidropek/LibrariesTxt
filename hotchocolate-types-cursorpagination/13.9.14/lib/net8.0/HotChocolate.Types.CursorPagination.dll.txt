public class HotChocolate.Types.GetCursorPagingProvider : MulticastDelegate {
    public GetCursorPagingProvider(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual CursorPagingProvider Invoke(IServiceProvider services, IExtendedType sourceType, string providerName);
    public virtual IAsyncResult BeginInvoke(IServiceProvider services, IExtendedType sourceType, string providerName, AsyncCallback callback, object object);
    public virtual CursorPagingProvider EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.Connection : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<CancellationToken, ValueTask`1<int>> _getTotalCount;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IEdge> <Edges>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionPageInfo <Info>k__BackingField;
    public IReadOnlyCollection`1<IEdge> Edges { get; }
    private IReadOnlyCollection`1<object> HotChocolate.Types.Pagination.IPage.Items { get; }
    public ConnectionPageInfo Info { get; }
    private IPageInfo HotChocolate.Types.Pagination.IPage.Info { get; }
    public Connection(IReadOnlyCollection`1<IEdge> edges, ConnectionPageInfo info, Func`2<CancellationToken, ValueTask`1<int>> getTotalCount);
    public Connection(IReadOnlyCollection`1<IEdge> edges, ConnectionPageInfo info, int totalCount);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IEdge> get_Edges();
    private sealed virtual override IReadOnlyCollection`1<object> HotChocolate.Types.Pagination.IPage.get_Items();
    [CompilerGeneratedAttribute]
public ConnectionPageInfo get_Info();
    private sealed virtual override IPageInfo HotChocolate.Types.Pagination.IPage.get_Info();
    [NullableContextAttribute("0")]
public sealed virtual ValueTask`1<int> GetTotalCountAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.Connection`1 : Connection {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Edge`1<T>> <Edges>k__BackingField;
    public IReadOnlyCollection`1<Edge`1<T>> Edges { get; }
    public Connection`1(IReadOnlyCollection`1<Edge`1<T>> edges, ConnectionPageInfo info, Func`2<CancellationToken, ValueTask`1<int>> getTotalCount);
    public Connection`1(IReadOnlyCollection`1<Edge`1<T>> edges, ConnectionPageInfo info, int totalCount);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<Edge`1<T>> get_Edges();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.ConnectionPageInfo : object {
    [CompilerGeneratedAttribute]
private bool <HasNextPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPreviousPage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartCursor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndCursor>k__BackingField;
    public bool HasNextPage { get; }
    public bool HasPreviousPage { get; }
    public string StartCursor { get; }
    public string EndCursor { get; }
    public ConnectionPageInfo(bool hasNextPage, bool hasPreviousPage, string startCursor, string endCursor);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasNextPage();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasPreviousPage();
    [CompilerGeneratedAttribute]
public string get_StartCursor();
    [CompilerGeneratedAttribute]
public string get_EndCursor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Types.Pagination.ConnectionType : ObjectType {
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEdgeType <EdgeType>k__BackingField;
    public string ConnectionName { get; private set; }
    public IEdgeType EdgeType { get; private set; }
    private IOutputType HotChocolate.Types.Pagination.IPageType.ItemType { get; }
    internal ConnectionType(string connectionName, TypeReference nodeType, bool withTotalCount);
    internal ConnectionType(TypeReference nodeType, bool withTotalCount);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionName();
    [CompilerGeneratedAttribute]
private void set_ConnectionName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEdgeType get_EdgeType();
    [CompilerGeneratedAttribute]
private void set_EdgeType(IEdgeType value);
    private sealed virtual override IOutputType HotChocolate.Types.Pagination.IPageType.get_ItemType();
    protected virtual void OnBeforeRegisterDependencies(ITypeDiscoveryContext context, DefinitionBase definition);
    private static ObjectTypeDefinition CreateTypeDefinition(bool withTotalCount, TypeReference edgesType);
    private static bool IsEdgesField(ObjectFieldDefinition field);
    private static bool IsNodesField(ObjectFieldDefinition field);
    private static IPageInfo GetPagingInfo(IPureResolverContext context);
    private static IReadOnlyCollection`1<IEdge> GetEdges(IPureResolverContext context);
    private static IEnumerable`1<object> GetNodes(IPureResolverContext context);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.ConnectionType/<GetTotalCountAsync>d__19")]
private static ValueTask`1<object> GetTotalCountAsync(IResolverContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Types.Pagination.CursorPaginationAlgorithm`2 : object {
    public ValueTask`1<Connection`1<TEntity>> ApplyPaginationAsync(TQuery query, CursorPagingArguments arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.CursorPaginationAlgorithm`2/<ApplyPaginationAsync>d__1")]
public ValueTask`1<Connection`1<TEntity>> ApplyPaginationAsync(TQuery query, CursorPagingArguments arguments, Nullable`1<int> totalCount, CancellationToken cancellationToken);
    protected abstract virtual TQuery ApplySkip(TQuery query, int skip);
    protected abstract virtual TQuery ApplyTake(TQuery query, int take);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<int> CountAsync(TQuery query, CancellationToken cancellationToken);
    protected abstract virtual ValueTask`1<IReadOnlyList`1<Edge`1<TEntity>>> ExecuteAsync(TQuery query, int offset, CancellationToken cancellationToken);
    private static ConnectionPageInfo CreatePageInfo(bool isSequenceFromStart, bool moreItemsReturnedThanRequested, IReadOnlyList`1<Edge`1<TEntity>> selectedEdges);
    private static CursorPagingRange SliceRange(CursorPagingArguments arguments, int maxElementCount);
    private static void ValidateFirst(CursorPagingArguments arguments, Nullable`1& first);
    private static void ValidateLast(CursorPagingArguments arguments, Nullable`1& last);
}
[ExtensionAttribute]
internal static class HotChocolate.Types.Pagination.CursorPaginationResolverContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsTotalCountSelected(IResolverContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Types.Pagination.CursorPagingArgumentNames : object {
    public static string First;
    public static string After;
    public static string Last;
    public static string Before;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Types.Pagination.CursorPagingArguments : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <First>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Last>k__BackingField;
    [CompilerGeneratedAttribute]
private string <After>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Before>k__BackingField;
    public Nullable`1<int> First { get; }
    public Nullable`1<int> Last { get; }
    public string After { get; }
    public string Before { get; }
    public CursorPagingArguments(Nullable`1<int> first, Nullable`1<int> last, string after, string before);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_First();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Last();
    [CompilerGeneratedAttribute]
public string get_After();
    [CompilerGeneratedAttribute]
public string get_Before();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Types.Pagination.CursorPagingHandler : object {
    [CompilerGeneratedAttribute]
private int <DefaultPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequirePagingBoundaries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBackwardPagination>k__BackingField;
    protected int DefaultPageSize { get; }
    protected int MaxPageSize { get; }
    protected bool RequirePagingBoundaries { get; }
    protected bool IncludeTotalCount { get; }
    protected bool AllowBackwardPagination { get; }
    protected CursorPagingHandler(PagingOptions options);
    [CompilerGeneratedAttribute]
protected int get_DefaultPageSize();
    [CompilerGeneratedAttribute]
protected int get_MaxPageSize();
    [CompilerGeneratedAttribute]
protected bool get_RequirePagingBoundaries();
    [CompilerGeneratedAttribute]
protected bool get_IncludeTotalCount();
    [CompilerGeneratedAttribute]
protected bool get_AllowBackwardPagination();
    public sealed virtual void ValidateContext(IResolverContext context);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.CursorPagingHandler/<HotChocolate-Types-Pagination-IPagingHandler-SliceAsync>d__17")]
private sealed virtual override ValueTask`1<IPage> HotChocolate.Types.Pagination.IPagingHandler.SliceAsync(IResolverContext context, object source);
    protected abstract virtual ValueTask`1<Connection> SliceAsync(IResolverContext context, object source, CursorPagingArguments arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Types.Pagination.CursorPagingProvider : object {
    public abstract virtual bool CanHandle(IExtendedType source);
    private sealed virtual override IPagingHandler HotChocolate.Types.Pagination.IPagingProvider.CreateHandler(IExtendedType source, PagingOptions options);
    protected abstract virtual CursorPagingHandler CreateHandler(IExtendedType source, PagingOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.Pagination.CursorPagingQueryableExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ValueTask`1<Connection`1<TEntity>> ApplyCursorPaginationAsync(IQueryable`1<TEntity> query, Nullable`1<int> first, Nullable`1<int> last, string after, string before, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<Connection`1<TEntity>> ApplyCursorPaginationAsync(IQueryable`1<TEntity> query, CursorPagingArguments arguments, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<Connection`1<TEntity>> ApplyCursorPaginationAsync(IQueryable`1<TEntity> query, IResolverContext context, Nullable`1<int> defaultPageSize, Nullable`1<int> totalCount, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<Connection`1<TEntity>> ApplyCursorPaginationAsync(IEnumerable`1<TEntity> enumerable, IResolverContext context, Nullable`1<int> defaultPageSize, Nullable`1<int> totalCount, CancellationToken cancellationToken);
}
internal class HotChocolate.Types.Pagination.CursorPagingRange : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public int Start { get; private set; }
    public int End { get; private set; }
    public CursorPagingRange(int start, int end);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
private void set_End(int value);
    public int Count();
    public void Take(Nullable`1<int> first);
    public void TakeLast(Nullable`1<int> last);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.Edge`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<T, string> _resolveCursor;
    [NullableAttribute("2")]
private string _cursor;
    [CompilerGeneratedAttribute]
private T <Node>k__BackingField;
    public T Node { get; }
    [NullableAttribute("2")]
private object HotChocolate.Types.Pagination.IEdge.Node { get; }
    public string Cursor { get; }
    public Edge`1(T node, string cursor);
    public Edge`1(T node, Func`2<T, string> resolveCursor);
    [CompilerGeneratedAttribute]
public T get_Node();
    [NullableContextAttribute("2")]
private sealed virtual override object HotChocolate.Types.Pagination.IEdge.get_Node();
    public sealed virtual string get_Cursor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Types.Pagination.EdgeType : ObjectType {
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private IOutputType <NodeType>k__BackingField;
    public string ConnectionName { get; private set; }
    public IOutputType NodeType { get; private set; }
    [ObsoleteAttribute("Use NodeType.")]
public IOutputType EntityType { get; }
    internal EdgeType(string connectionName, TypeReference nodeType);
    internal EdgeType(TypeReference nodeType);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionName();
    [CompilerGeneratedAttribute]
private void set_ConnectionName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IOutputType get_NodeType();
    [CompilerGeneratedAttribute]
private void set_NodeType(IOutputType value);
    public sealed virtual IOutputType get_EntityType();
    public virtual bool IsInstanceOfType(IResolverContext context, object resolverResult);
    private static ObjectTypeDefinition CreateTypeDefinition(TypeReference nodeType);
    private static string GetCursor(IPureResolverContext context);
    private static object GetNode(IPureResolverContext context);
}
public interface HotChocolate.Types.Pagination.IConnectionType {
    [NullableAttribute("1")]
public string ConnectionName { get; }
    [NullableAttribute("1")]
public IEdgeType EdgeType { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_ConnectionName();
    [NullableContextAttribute("1")]
public abstract virtual IEdgeType get_EdgeType();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Types.Pagination.IEdge {
    public string Cursor { get; }
    [NullableAttribute("2")]
public object Node { get; }
    public abstract virtual string get_Cursor();
    [NullableContextAttribute("2")]
public abstract virtual object get_Node();
}
public interface HotChocolate.Types.Pagination.IEdgeType {
    [NullableAttribute("1")]
public string ConnectionName { get; }
    [NullableAttribute("1")]
public IOutputType NodeType { get; }
    [NullableAttribute("1")]
[ObsoleteAttribute("Use NodeType.")]
public IOutputType EntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_ConnectionName();
    [NullableContextAttribute("1")]
public abstract virtual IOutputType get_NodeType();
    [NullableContextAttribute("1")]
public abstract virtual IOutputType get_EntityType();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Types.Pagination.IndexEdge`1 : Edge`1<T> {
    private static Encoding _utf8;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public int Index { get; }
    private IndexEdge`1(T node, string cursor, int index);
    private static IndexEdge`1();
    [CompilerGeneratedAttribute]
public int get_Index();
    public static IndexEdge`1<T> Create(T node, int index);
    [NullableContextAttribute("0")]
private static string CreateString(Span`1<byte> buffer);
    public static int DeserializeCursor(string cursor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Types.Pagination.NameHelper : object {
    public static string CreateConnectionName(string connectionName);
    public static string CreateEdgeName(string connectionName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Types.Pagination.PageInfoType : ObjectType`1<ConnectionPageInfo> {
    protected virtual void Configure(IObjectTypeDescriptor`1<ConnectionPageInfo> descriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Types.Pagination.PagingProviderEntry : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CursorPagingProvider <Provider>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; }
    public CursorPagingProvider Provider { get; }
    public PagingProviderEntry(string name, CursorPagingProvider provider);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public CursorPagingProvider get_Provider();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Types.Pagination.QueryableCursorPagination`1 : CursorPaginationAlgorithm`2<IQueryable`1<TEntity>, TEntity> {
    [CompilerGeneratedAttribute]
private static QueryableCursorPagination`1<TEntity> <Instance>k__BackingField;
    public static QueryableCursorPagination`1<TEntity> Instance { get; }
    private static QueryableCursorPagination`1();
    [CompilerGeneratedAttribute]
public static QueryableCursorPagination`1<TEntity> get_Instance();
    protected virtual IQueryable`1<TEntity> ApplySkip(IQueryable`1<TEntity> query, int skip);
    protected virtual IQueryable`1<TEntity> ApplyTake(IQueryable`1<TEntity> query, int take);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("HotChocolate.Types.Pagination.QueryableCursorPagination`1/<CountAsync>d__5")]
protected virtual ValueTask`1<int> CountAsync(IQueryable`1<TEntity> query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.QueryableCursorPagination`1/<ExecuteAsync>d__6")]
protected virtual ValueTask`1<IReadOnlyList`1<Edge`1<TEntity>>> ExecuteAsync(IQueryable`1<TEntity> query, int offset, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Types.Pagination.QueryableCursorPagingHandler`1 : CursorPagingHandler {
    private QueryableCursorPagination`1<TEntity> _pagination;
    public QueryableCursorPagingHandler`1(PagingOptions options);
    protected virtual ValueTask`1<Connection> SliceAsync(IResolverContext context, object source, CursorPagingArguments arguments);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.QueryableCursorPagingHandler`1/<ResolveAsync>d__3")]
private ValueTask`1<Connection> ResolveAsync(IResolverContext context, IQueryable`1<TEntity> source, CursorPagingArguments arguments, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.QueryableCursorPagingProvider : CursorPagingProvider {
    private static MethodInfo _createHandler;
    private static QueryableCursorPagingProvider();
    public virtual bool CanHandle(IExtendedType source);
    protected virtual CursorPagingHandler CreateHandler(IExtendedType source, PagingOptions options);
    private static QueryableCursorPagingHandler`1<TEntity> CreateHandlerInternal(PagingOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.PagingObjectFieldDescriptorExtensions : object {
    [ExtensionAttribute]
public static IObjectFieldDescriptor UsePaging(IObjectFieldDescriptor descriptor, GetCursorPagingProvider resolvePagingProvider, string connectionName, PagingOptions options);
    [ExtensionAttribute]
public static IObjectFieldDescriptor UsePaging(IObjectFieldDescriptor descriptor, Type entityType, GetCursorPagingProvider resolvePagingProvider, string connectionName, PagingOptions options);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObjectFieldDescriptor UsePaging(IObjectFieldDescriptor descriptor, Type nodeType, Type entityType, GetCursorPagingProvider resolvePagingProvider, string connectionName, PagingOptions options);
    [ExtensionAttribute]
public static IInterfaceFieldDescriptor UsePaging(IInterfaceFieldDescriptor descriptor, string connectionName, PagingOptions options);
    [ExtensionAttribute]
public static IInterfaceFieldDescriptor UsePaging(IInterfaceFieldDescriptor descriptor, Type nodeType, string connectionName, PagingOptions options);
    [ExtensionAttribute]
public static IObjectFieldDescriptor AddPagingArguments(IObjectFieldDescriptor descriptor);
    [ExtensionAttribute]
public static IObjectFieldDescriptor AddPagingArguments(IObjectFieldDescriptor descriptor, bool allowBackwardPagination);
    [ExtensionAttribute]
public static IObjectFieldDescriptor AddPagingArguments(IObjectFieldDescriptor descriptor, bool allowBackwardPagination, bool legacySupport);
    [ExtensionAttribute]
public static IInterfaceFieldDescriptor AddPagingArguments(IInterfaceFieldDescriptor descriptor);
    [ExtensionAttribute]
public static IInterfaceFieldDescriptor AddPagingArguments(IInterfaceFieldDescriptor descriptor, bool allowBackwardPagination);
    [ExtensionAttribute]
public static IInterfaceFieldDescriptor AddPagingArguments(IInterfaceFieldDescriptor descriptor, bool allowBackwardPagination, bool legacySupport);
    private static void CreatePagingArguments(IList`1<ArgumentDefinition> arguments, bool allowBackwardPagination, bool legacySupport);
    [ExtensionAttribute]
private static void AddOrUpdate(IList`1<ArgumentDefinition> arguments, string name, string description, TypeReference type);
    [NullableContextAttribute("2")]
private static TypeReference CreateConnectionTypeRef(IDescriptorContext context, MemberInfo resolverMember, string connectionName, TypeReference nodeType, PagingOptions options);
    private static CursorPagingProvider ResolvePagingProvider(IServiceProvider services, IExtendedType source, string providerName);
    private static TypeReference CreateConnectionType(string connectionName, TypeReference nodeType, bool withTotalCount);
    private static string EnsureConnectionNameCasing(string connectionName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Types.Properties.CursorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Edge_CursorNullOrEmpty { get; }
    internal static string PagingObjectFieldDescriptorExtensions_SchemaTypeNotValid { get; }
    internal static string PagingArguments_First_Description { get; }
    internal static string PagingArguments_After_Description { get; }
    internal static string PagingArguments_Last_Description { get; }
    internal static string PagingArguments_Before_Description { get; }
    internal static string ThrowHelper_PagingHandler_MaxPageSize { get; }
    internal static string ThrowHelper_PagingHandler_NoBoundariesSet { get; }
    internal static string Edge_Cursor_CursorAndResolverNull { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Edge_CursorNullOrEmpty();
    internal static string get_PagingObjectFieldDescriptorExtensions_SchemaTypeNotValid();
    internal static string get_PagingArguments_First_Description();
    internal static string get_PagingArguments_After_Description();
    internal static string get_PagingArguments_Last_Description();
    internal static string get_PagingArguments_Before_Description();
    internal static string get_ThrowHelper_PagingHandler_MaxPageSize();
    internal static string get_ThrowHelper_PagingHandler_NoBoundariesSet();
    internal static string get_Edge_Cursor_CursorAndResolverNull();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class HotChocolate.Types.UsePagingAttribute : DescriptorAttribute {
    private string _connectionName;
    private Nullable`1<int> _defaultPageSize;
    private Nullable`1<int> _maxPageSize;
    private Nullable`1<bool> _includeTotalCount;
    private Nullable`1<bool> _allowBackwardPagination;
    private Nullable`1<bool> _requirePagingBoundaries;
    private Nullable`1<bool> _inferConnectionNameFromField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public Type SchemaType { get; public set; }
    public Type Type { get; private set; }
    public string ConnectionName { get; public set; }
    public int DefaultPageSize { get; public set; }
    public int MaxPageSize { get; public set; }
    public bool IncludeTotalCount { get; public set; }
    public bool AllowBackwardPagination { get; public set; }
    public bool RequirePagingBoundaries { get; public set; }
    public bool InferConnectionNameFromField { get; public set; }
    public string ProviderName { get; public set; }
    public UsePagingAttribute(Type type, int order);
    [ObsoleteAttribute("Use Type.")]
public Type get_SchemaType();
    [ObsoleteAttribute("Use the new constructor.")]
public void set_SchemaType(Type value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public string get_ConnectionName();
    public void set_ConnectionName(string value);
    public int get_DefaultPageSize();
    public void set_DefaultPageSize(int value);
    public int get_MaxPageSize();
    public void set_MaxPageSize(int value);
    public bool get_IncludeTotalCount();
    public void set_IncludeTotalCount(bool value);
    public bool get_AllowBackwardPagination();
    public void set_AllowBackwardPagination(bool value);
    public bool get_RequirePagingBoundaries();
    public void set_RequirePagingBoundaries(bool value);
    public bool get_InferConnectionNameFromField();
    public void set_InferConnectionNameFromField(bool value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    [NullableContextAttribute("1")]
protected internal virtual void TryConfigure(IDescriptorContext context, IDescriptor descriptor, ICustomAttributeProvider element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Utilities.ThrowHelper : object {
    public static GraphQLException PagingHandler_MaxPageSize(int requestedItems, int maxAllowedItems, IObjectField field, Path path);
    public static GraphQLException PagingHandler_NoBoundariesSet(IObjectField field, Path path);
    public static SchemaException PagingObjectFieldDescriptorExtensions_InvalidType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CursorPagingRequestExecutorBuilderExtension : object {
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryableCursorPagingProvider(IRequestExecutorBuilder builder, string providerName, bool defaultProvider);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddCursorPagingProvider(IRequestExecutorBuilder builder, string providerName, bool defaultProvider);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddCursorPagingProvider(IRequestExecutorBuilder builder, Func`2<IServiceProvider, TProvider> factory, string providerName, bool defaultProvider);
}
