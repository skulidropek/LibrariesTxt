public class HotChocolate.Types.GetOffsetPagingProvider : MulticastDelegate {
    public GetOffsetPagingProvider(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual OffsetPagingProvider Invoke(IServiceProvider services, IExtendedType sourceType, string providerName);
    public virtual IAsyncResult BeginInvoke(IServiceProvider services, IExtendedType sourceType, string providerName, AsyncCallback callback, object object);
    public virtual OffsetPagingProvider EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.OffsetPagingObjectFieldDescriptorExtensions : object {
    [ExtensionAttribute]
public static IObjectFieldDescriptor UseOffsetPaging(IObjectFieldDescriptor descriptor, Type itemType, GetOffsetPagingProvider resolvePagingProvider, string collectionSegmentName, PagingOptions options);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IObjectFieldDescriptor UseOffsetPaging(IObjectFieldDescriptor descriptor, Type itemType, Type entityType, GetOffsetPagingProvider resolvePagingProvider, string collectionSegmentName, PagingOptions options);
    [ExtensionAttribute]
public static IInterfaceFieldDescriptor UseOffsetPaging(IInterfaceFieldDescriptor descriptor, string collectionSegmentName, PagingOptions options);
    [ExtensionAttribute]
public static IInterfaceFieldDescriptor UseOffsetPaging(IInterfaceFieldDescriptor descriptor, Type itemType, string collectionSegmentName, PagingOptions options);
    [ExtensionAttribute]
public static IObjectFieldDescriptor AddOffsetPagingArguments(IObjectFieldDescriptor descriptor);
    [ExtensionAttribute]
public static IInterfaceFieldDescriptor AddOffsetPagingArguments(IInterfaceFieldDescriptor descriptor);
    [NullableContextAttribute("2")]
private static TypeReference CreateTypeRef(IDescriptorContext context, MemberInfo resolverMember, string collectionSegmentName, TypeReference itemsType, PagingOptions options);
    private static OffsetPagingProvider ResolvePagingProvider(IServiceProvider services, IExtendedType source, string providerName);
    private static string EnsureCollectionSegmentNameCasing(string collectionSegmentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.CollectionSegment : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<CancellationToken, ValueTask`1<int>> _getTotalCount;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionSegmentInfo <Info>k__BackingField;
    public IReadOnlyCollection`1<object> Items { get; }
    public CollectionSegmentInfo Info { get; }
    private IPageInfo HotChocolate.Types.Pagination.IPage.Info { get; }
    public CollectionSegment(IReadOnlyCollection`1<object> items, CollectionSegmentInfo info, Func`2<CancellationToken, ValueTask`1<int>> getTotalCount);
    public CollectionSegment(IReadOnlyCollection`1<object> items, CollectionSegmentInfo info, int totalCount);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<object> get_Items();
    [CompilerGeneratedAttribute]
public CollectionSegmentInfo get_Info();
    private sealed virtual override IPageInfo HotChocolate.Types.Pagination.IPage.get_Info();
    [NullableContextAttribute("0")]
public sealed virtual ValueTask`1<int> GetTotalCountAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.CollectionSegment`1 : CollectionSegment {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<T> <Items>k__BackingField;
    public IReadOnlyCollection`1<T> Items { get; }
    public CollectionSegment`1(IReadOnlyCollection`1<T> items, CollectionSegmentInfo info, Func`2<CancellationToken, ValueTask`1<int>> getTotalCount);
    public CollectionSegment`1(IReadOnlyCollection`1<T> items, CollectionSegmentInfo info, int totalCount);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<T> get_Items();
}
public class HotChocolate.Types.Pagination.CollectionSegmentInfo : object {
    [CompilerGeneratedAttribute]
private bool <HasNextPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPreviousPage>k__BackingField;
    public bool HasNextPage { get; }
    public bool HasPreviousPage { get; }
    public CollectionSegmentInfo(bool hasNextPage, bool hasPreviousPage);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasNextPage();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasPreviousPage();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Types.Pagination.CollectionSegmentInfoType : ObjectType`1<CollectionSegmentInfo> {
    protected virtual void Configure(IObjectTypeDescriptor`1<CollectionSegmentInfo> descriptor);
}
internal class HotChocolate.Types.Pagination.CollectionSegmentType : ObjectType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IOutputType <ItemType>k__BackingField;
    [NullableAttribute("1")]
public IOutputType ItemType { get; private set; }
    [NullableContextAttribute("1")]
internal CollectionSegmentType(string collectionSegmentName, TypeReference nodeType, bool withTotalCount);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IOutputType get_ItemType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_ItemType(IOutputType value);
    [NullableContextAttribute("1")]
protected virtual void OnBeforeRegisterDependencies(ITypeDiscoveryContext context, DefinitionBase definition);
    [NullableContextAttribute("1")]
private static ObjectTypeDefinition CreateTypeDefinition(bool withTotalCount);
    [NullableContextAttribute("1")]
private static IPageInfo GetPagingInfo(IPureResolverContext context);
    [NullableContextAttribute("1")]
private static IEnumerable`1<object> GetItems(IPureResolverContext context);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("HotChocolate.Types.Pagination.CollectionSegmentType/<GetTotalCountAsync>d__9")]
private static ValueTask`1<object> GetTotalCountAsync(IResolverContext context);
    [NullableContextAttribute("1")]
private static bool IsItemsField(ObjectFieldDefinition field);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Types.Pagination.OffsetPaginationAlgorithm`2 : object {
    public ValueTask`1<CollectionSegment`1<TEntity>> ApplyPaginationAsync(TQuery query, OffsetPagingArguments arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.OffsetPaginationAlgorithm`2/<ApplyPaginationAsync>d__1")]
public ValueTask`1<CollectionSegment`1<TEntity>> ApplyPaginationAsync(TQuery query, OffsetPagingArguments arguments, Nullable`1<int> totalCount, CancellationToken cancellationToken);
    protected abstract virtual TQuery ApplySkip(TQuery query, int skip);
    protected abstract virtual TQuery ApplyTake(TQuery query, int take);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<int> CountAsync(TQuery query, CancellationToken cancellationToken);
    protected abstract virtual ValueTask`1<IReadOnlyList`1<TEntity>> ExecuteAsync(TQuery query, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
private static ValueTask`1<int> GetTotalCountAssert(CancellationToken _);
}
[ExtensionAttribute]
internal static class HotChocolate.Types.Pagination.OffsetPaginationResolverContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsTotalCountSelected(IResolverContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Types.Pagination.OffsetPagingArgumentNames : object {
    public static string Skip;
    public static string Take;
}
[IsReadOnlyAttribute]
public class HotChocolate.Types.Pagination.OffsetPagingArguments : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Take>k__BackingField;
    public Nullable`1<int> Skip { get; }
    public Nullable`1<int> Take { get; }
    public OffsetPagingArguments(Nullable`1<int> skip, Nullable`1<int> take);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Take();
}
internal static class HotChocolate.Types.Pagination.OffsetPagingFieldNames : object {
    [NullableAttribute("1")]
public static string TotalCount;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Types.Pagination.OffsetPagingHandler : object {
    [CompilerGeneratedAttribute]
private int <DefaultPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequirePagingBoundaries>k__BackingField;
    protected int DefaultPageSize { get; }
    protected int MaxPageSize { get; }
    protected bool IncludeTotalCount { get; }
    protected bool RequirePagingBoundaries { get; }
    protected OffsetPagingHandler(PagingOptions options);
    [CompilerGeneratedAttribute]
protected int get_DefaultPageSize();
    [CompilerGeneratedAttribute]
protected int get_MaxPageSize();
    [CompilerGeneratedAttribute]
protected bool get_IncludeTotalCount();
    [CompilerGeneratedAttribute]
protected bool get_RequirePagingBoundaries();
    public sealed virtual void ValidateContext(IResolverContext context);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.OffsetPagingHandler/<HotChocolate-Types-Pagination-IPagingHandler-SliceAsync>d__14")]
private sealed virtual override ValueTask`1<IPage> HotChocolate.Types.Pagination.IPagingHandler.SliceAsync(IResolverContext context, object source);
    protected abstract virtual ValueTask`1<CollectionSegment> SliceAsync(IResolverContext context, object source, OffsetPagingArguments arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class HotChocolate.Types.Pagination.OffsetPagingProvider : object {
    public abstract virtual bool CanHandle(IExtendedType source);
    private sealed virtual override IPagingHandler HotChocolate.Types.Pagination.IPagingProvider.CreateHandler(IExtendedType source, PagingOptions options);
    protected abstract virtual OffsetPagingHandler CreateHandler(IExtendedType source, PagingOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class HotChocolate.Types.Pagination.OffsetPagingQueryableExtensions : object {
    [ExtensionAttribute]
public static ValueTask`1<CollectionSegment`1<TEntity>> ApplyOffsetPaginationAsync(IQueryable`1<TEntity> query, Nullable`1<int> skip, Nullable`1<int> take, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<CollectionSegment`1<TEntity>> ApplyOffsetPaginationAsync(IQueryable`1<TEntity> query, OffsetPagingArguments arguments, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ValueTask`1<CollectionSegment`1<TEntity>> ApplyOffsetPaginationAsync(IQueryable`1<TEntity> query, IResolverContext context, Nullable`1<int> defaultPageSize, Nullable`1<int> totalCount, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Types.Pagination.PagingProviderEntry : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private OffsetPagingProvider <Provider>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; }
    public OffsetPagingProvider Provider { get; }
    public PagingProviderEntry(string name, OffsetPagingProvider provider);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public OffsetPagingProvider get_Provider();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Types.Pagination.Properties.OffsetResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PagingObjectFieldDescriptorExtensions_SchemaTypeNotValid { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PagingObjectFieldDescriptorExtensions_SchemaTypeNotValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Types.Pagination.QueryableOffsetPagination`1 : OffsetPaginationAlgorithm`2<IQueryable`1<TEntity>, TEntity> {
    [CompilerGeneratedAttribute]
private static QueryableOffsetPagination`1<TEntity> <Instance>k__BackingField;
    public static QueryableOffsetPagination`1<TEntity> Instance { get; }
    private static QueryableOffsetPagination`1();
    [CompilerGeneratedAttribute]
public static QueryableOffsetPagination`1<TEntity> get_Instance();
    protected virtual IQueryable`1<TEntity> ApplySkip(IQueryable`1<TEntity> query, int skip);
    protected virtual IQueryable`1<TEntity> ApplyTake(IQueryable`1<TEntity> query, int take);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("HotChocolate.Types.Pagination.QueryableOffsetPagination`1/<CountAsync>d__5")]
protected virtual ValueTask`1<int> CountAsync(IQueryable`1<TEntity> query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.QueryableOffsetPagination`1/<ExecuteAsync>d__6")]
protected virtual ValueTask`1<IReadOnlyList`1<TEntity>> ExecuteAsync(IQueryable`1<TEntity> query, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.QueryableOffsetPagingHandler`1 : OffsetPagingHandler {
    private QueryableOffsetPagination`1<TEntity> _pagination;
    public QueryableOffsetPagingHandler`1(PagingOptions options);
    protected virtual ValueTask`1<CollectionSegment> SliceAsync(IResolverContext context, object source, OffsetPagingArguments arguments);
    [AsyncStateMachineAttribute("HotChocolate.Types.Pagination.QueryableOffsetPagingHandler`1/<ResolveAsync>d__3")]
private ValueTask`1<CollectionSegment> ResolveAsync(IResolverContext context, IQueryable`1<TEntity> source, OffsetPagingArguments arguments, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Types.Pagination.QueryableOffsetPagingProvider : OffsetPagingProvider {
    private static MethodInfo _createHandler;
    private static QueryableOffsetPagingProvider();
    public virtual bool CanHandle(IExtendedType source);
    protected virtual OffsetPagingHandler CreateHandler(IExtendedType source, PagingOptions options);
    private static QueryableOffsetPagingHandler`1<TEntity> CreateHandlerInternal(PagingOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
public class HotChocolate.Types.UseOffsetPagingAttribute : DescriptorAttribute {
    private Nullable`1<int> _defaultPageSize;
    private Nullable`1<int> _maxPageSize;
    private Nullable`1<bool> _includeTotalCount;
    private Nullable`1<bool> _requirePagingBoundaries;
    private Nullable`1<bool> _inferCollectionSegmentNameFromField;
    private string _collectionSegmentName;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public Type Type { get; private set; }
    public string CollectionSegmentName { get; public set; }
    public int DefaultPageSize { get; public set; }
    public int MaxPageSize { get; public set; }
    public bool IncludeTotalCount { get; public set; }
    public bool RequirePagingBoundaries { get; public set; }
    public string ProviderName { get; public set; }
    public bool InferCollectionSegmentNameFromField { get; public set; }
    public UseOffsetPagingAttribute(Type type, int order);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public string get_CollectionSegmentName();
    public void set_CollectionSegmentName(string value);
    public int get_DefaultPageSize();
    public void set_DefaultPageSize(int value);
    public int get_MaxPageSize();
    public void set_MaxPageSize(int value);
    public bool get_IncludeTotalCount();
    public void set_IncludeTotalCount(bool value);
    public bool get_RequirePagingBoundaries();
    public void set_RequirePagingBoundaries(bool value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    public bool get_InferCollectionSegmentNameFromField();
    public void set_InferCollectionSegmentNameFromField(bool value);
    [NullableContextAttribute("1")]
protected internal virtual void TryConfigure(IDescriptorContext context, IDescriptor descriptor, ICustomAttributeProvider element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class HotChocolate.Utilities.ThrowHelper : object {
    public static GraphQLException OffsetPagingHandler_MaxPageSize(int requestedItems, int maxAllowedItems, IObjectField field, Path path);
    public static GraphQLException OffsetPagingHandler_NoBoundariesSet(IObjectField field, Path path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.OffsetPagingRequestExecutorBuilderExtension : object {
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddQueryableOffsetPagingProvider(IRequestExecutorBuilder builder, string providerName, bool defaultProvider);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddOffsetPagingProvider(IRequestExecutorBuilder builder, string providerName, bool defaultProvider);
    [ExtensionAttribute]
public static IRequestExecutorBuilder AddOffsetPagingProvider(IRequestExecutorBuilder builder, Func`2<IServiceProvider, TProvider> factory, string providerName, bool defaultProvider);
}
