internal class HotChocolate.Validation.CoordinateLimit : object {
    [CompilerGeneratedAttribute]
private ushort <MaxAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Count>k__BackingField;
    public ushort MaxAllowed { get; private set; }
    public ushort Count { get; private set; }
    [CompilerGeneratedAttribute]
public ushort get_MaxAllowed();
    [CompilerGeneratedAttribute]
private void set_MaxAllowed(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(ushort value);
    public bool Add();
    public void Remove();
    public void Reset(ushort maxAllowed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.DefaultDocumentValidatorFactory : object {
    private DocumentValidatorContextPool _contextPool;
    private IValidationConfiguration _configuration;
    public DefaultDocumentValidatorFactory(DocumentValidatorContextPool contextPool, IValidationConfiguration configuration);
    public sealed virtual IDocumentValidator CreateValidator(string schemaName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.DocumentValidator : object {
    private DocumentValidatorContextPool _contextPool;
    private IDocumentValidatorRule[] _allRules;
    private IDocumentValidatorRule[] _nonCachableRules;
    private IValidationResultAggregator[] _aggregators;
    private int _maxAllowedErrors;
    public bool HasDynamicRules { get; }
    public DocumentValidator(DocumentValidatorContextPool contextPool, IEnumerable`1<IDocumentValidatorRule> rules, IEnumerable`1<IValidationResultAggregator> resultAggregators, IErrorOptionsAccessor errorOptions);
    public sealed virtual bool get_HasDynamicRules();
    public sealed virtual ValueTask`1<DocumentValidatorResult> ValidateAsync(ISchema schema, DocumentNode document, string documentId, IDictionary`2<string, object> contextData, bool onlyNonCachable, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HotChocolate.Validation.DocumentValidator/<RunResultAggregators>d__9")]
private ValueTask`1<DocumentValidatorResult> RunResultAggregators(DocumentValidatorContext context, DocumentNode document, CancellationToken ct);
    private void PrepareContext(ISchema schema, DocumentNode document, string documentId, DocumentValidatorContext context, IDictionary`2<string, object> contextData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.DocumentValidatorContext : object {
    private static FieldInfoListBufferPool _fieldInfoPool;
    private List`1<FieldInfoListBuffer> _buffers;
    private List`1<IError> _errors;
    [NullableAttribute("2")]
private ISchema _schema;
    [NullableAttribute("2")]
private IOutputType _nonNullString;
    [CompilerGeneratedAttribute]
private string <DocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OperationType> <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxAllowedErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISyntaxNode> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SelectionSetNode> <SelectionSets>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<SelectionSetNode, IList`1<FieldInfo>> <FieldSets>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ISet`1<ValueTuple`2<FieldNode, FieldNode>> <FieldTuples>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <VisitedFragments>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IVariableValueCollection <VariableValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, VariableDefinitionNode> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, FragmentDefinitionNode> <Fragments>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Used>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Unused>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Declared>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IType> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DirectiveType> <Directives>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IOutputField> <OutputFields>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FieldNode> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IInputField> <InputFields>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<object> <List>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnexpectedErrorsDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FatalErrorDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Allowed>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ContextData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FieldInfoPair> <CurrentFieldPairs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FieldInfoPair> <NextFieldPairs>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<FieldInfoPair> <ProcessedFieldPairs>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDepthCycleTracker <FieldDepth>k__BackingField;
    public ISchema Schema { get; public set; }
    public string DocumentId { get; public set; }
    public Nullable`1<OperationType> OperationType { get; public set; }
    public IOutputType NonNullString { get; private set; }
    public int MaxAllowedErrors { get; public set; }
    public IList`1<ISyntaxNode> Path { get; }
    public IList`1<SelectionSetNode> SelectionSets { get; }
    public IDictionary`2<SelectionSetNode, IList`1<FieldInfo>> FieldSets { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISet`1<ValueTuple`2<FieldNode, FieldNode>> FieldTuples { get; }
    public ISet`1<string> VisitedFragments { get; }
    [NullableAttribute("2")]
public IVariableValueCollection VariableValues { get; public set; }
    public IDictionary`2<string, VariableDefinitionNode> Variables { get; }
    public IDictionary`2<string, FragmentDefinitionNode> Fragments { get; }
    public ISet`1<string> Used { get; }
    public ISet`1<string> Unused { get; }
    public ISet`1<string> Declared { get; }
    public ISet`1<string> Names { get; }
    public IList`1<IType> Types { get; }
    public IList`1<DirectiveType> Directives { get; }
    public IList`1<IOutputField> OutputFields { get; }
    public IList`1<FieldNode> Fields { get; }
    public IList`1<IInputField> InputFields { get; }
    public IReadOnlyCollection`1<IError> Errors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<object> List { get; }
    public bool UnexpectedErrorsDetected { get; public set; }
    public bool FatalErrorDetected { get; public set; }
    public int Count { get; public set; }
    public int Max { get; public set; }
    public int Allowed { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; public set; }
    public List`1<FieldInfoPair> CurrentFieldPairs { get; }
    public List`1<FieldInfoPair> NextFieldPairs { get; }
    public HashSet`1<FieldInfoPair> ProcessedFieldPairs { get; }
    public FieldDepthCycleTracker FieldDepth { get; }
    private static DocumentValidatorContext();
    public sealed virtual ISchema get_Schema();
    public void set_Schema(ISchema value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DocumentId();
    [CompilerGeneratedAttribute]
public void set_DocumentId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<OperationType> get_OperationType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OperationType(Nullable`1<OperationType> value);
    public sealed virtual IOutputType get_NonNullString();
    private void set_NonNullString(IOutputType value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxAllowedErrors();
    [CompilerGeneratedAttribute]
public void set_MaxAllowedErrors(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ISyntaxNode> get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<SelectionSetNode> get_SelectionSets();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<SelectionSetNode, IList`1<FieldInfo>> get_FieldSets();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<ValueTuple`2<FieldNode, FieldNode>> get_FieldTuples();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_VisitedFragments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IVariableValueCollection get_VariableValues();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_VariableValues(IVariableValueCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, VariableDefinitionNode> get_Variables();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, FragmentDefinitionNode> get_Fragments();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Used();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Unused();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Declared();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_Names();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IType> get_Types();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<DirectiveType> get_Directives();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IOutputField> get_OutputFields();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<FieldNode> get_Fields();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IInputField> get_InputFields();
    public sealed virtual IReadOnlyCollection`1<IError> get_Errors();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<object> get_List();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UnexpectedErrorsDetected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnexpectedErrorsDetected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FatalErrorDetected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FatalErrorDetected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Count(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Max();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Max(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Allowed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Allowed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_ContextData();
    [CompilerGeneratedAttribute]
public void set_ContextData(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<FieldInfoPair> get_CurrentFieldPairs();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<FieldInfoPair> get_NextFieldPairs();
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<FieldInfoPair> get_ProcessedFieldPairs();
    [CompilerGeneratedAttribute]
public sealed virtual FieldDepthCycleTracker get_FieldDepth();
    public sealed virtual IList`1<FieldInfo> RentFieldInfoList();
    public sealed virtual void ReportError(IError error);
    public void Clear();
    private void ClearBuffers();
}
[ExtensionAttribute]
internal static class HotChocolate.Validation.DocumentValidatorContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Path CreateErrorPath(IDocumentValidatorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Validation.DocumentValidatorContextPool : DefaultObjectPool`1<DocumentValidatorContext> {
    public DocumentValidatorContextPool(int size);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.DocumentValidatorResult : object {
    [CompilerGeneratedAttribute]
private bool <HasErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private static DocumentValidatorResult <Ok>k__BackingField;
    public bool HasErrors { get; }
    public IReadOnlyList`1<IError> Errors { get; }
    public static DocumentValidatorResult Ok { get; }
    public DocumentValidatorResult(IEnumerable`1<IError> errors);
    private static DocumentValidatorResult();
    [CompilerGeneratedAttribute]
public bool get_HasErrors();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IError> get_Errors();
    [CompilerGeneratedAttribute]
public static DocumentValidatorResult get_Ok();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.DocumentValidatorRule`1 : object {
    private TVisitor _visitor;
    [CompilerGeneratedAttribute]
private bool <IsCacheable>k__BackingField;
    public bool IsCacheable { get; }
    public DocumentValidatorRule`1(TVisitor visitor, bool isCacheable);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCacheable();
    public sealed virtual void Validate(IDocumentValidatorContext context, DocumentNode document);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class HotChocolate.Validation.DocumentValidatorVisitor : SyntaxWalker`1<IDocumentValidatorContext> {
    protected DocumentValidatorVisitor(SyntaxVisitorOptions options);
    protected virtual IDocumentValidatorContext OnAfterEnter(ISyntaxNode node, ISyntaxNode parent, IDocumentValidatorContext context, ISyntaxVisitorAction action);
    protected virtual IDocumentValidatorContext OnBeforeLeave(ISyntaxNode node, ISyntaxNode parent, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction VisitChildren(DocumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction VisitChildren(FragmentSpreadNode node, IDocumentValidatorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Validation.ErrorBuilderExtensions : object {
    [ExtensionAttribute]
public static IErrorBuilder SpecifiedBy(IErrorBuilder errorBuilder, string section, bool isDraft, Nullable`1<int> rfc);
    [ExtensionAttribute]
public static IErrorBuilder SetFragmentName(IErrorBuilder errorBuilder, ISyntaxNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class HotChocolate.Validation.ErrorHelper : object {
    [ExtensionAttribute]
public static IError VariableNotUsed(IDocumentValidatorContext context, OperationDefinitionNode node);
    [ExtensionAttribute]
public static IError VariableNotDeclared(IDocumentValidatorContext context, OperationDefinitionNode node);
    [ExtensionAttribute]
public static IError VariableIsNotCompatible(IDocumentValidatorContext context, VariableNode variable, VariableDefinitionNode variableDefinition);
    [ExtensionAttribute]
public static IError DirectiveNotValidInLocation(IDocumentValidatorContext context, DirectiveNode node);
    [ExtensionAttribute]
public static IError DirectiveNotSupported(IDocumentValidatorContext context, DirectiveNode node);
    [ExtensionAttribute]
public static IError DirectiveMustBeUniqueInLocation(IDocumentValidatorContext context, DirectiveNode node);
    [ExtensionAttribute]
public static IError TypeSystemDefinitionNotAllowed(IDocumentValidatorContext context, IDefinitionNode node);
    [ExtensionAttribute]
public static IError UnionFieldError(IDocumentValidatorContext context, SelectionSetNode node, UnionType type);
    [ExtensionAttribute]
public static IError FieldDoesNotExist(IDocumentValidatorContext context, FieldNode node, IComplexOutputType outputType);
    [ExtensionAttribute]
public static IError LeafFieldsCannotHaveSelections(IDocumentValidatorContext context, FieldNode node, IComplexOutputType declaringType, IType fieldType);
    [ExtensionAttribute]
public static IError ArgumentValueIsNotCompatible(IDocumentValidatorContext context, ArgumentNode node, IInputType locationType, IValueNode valueNode);
    [ExtensionAttribute]
public static IError FieldValueIsNotCompatible(IDocumentValidatorContext context, IInputField field, IInputType locationType, IValueNode valueNode);
    [ExtensionAttribute]
public static IError VariableDefaultValueIsNotCompatible(IDocumentValidatorContext context, VariableDefinitionNode node, IInputType locationType, IValueNode valueNode);
    [ExtensionAttribute]
public static IError NoSelectionOnCompositeField(IDocumentValidatorContext context, FieldNode node, IComplexOutputType declaringType, IType fieldType);
    [ExtensionAttribute]
public static IError NoSelectionOnRootType(IDocumentValidatorContext context, OperationDefinitionNode node, IType fieldType);
    [ExtensionAttribute]
public static IError FieldIsRequiredButNull(IDocumentValidatorContext context, ISyntaxNode node, string fieldName);
    [ExtensionAttribute]
public static IError FieldsAreNotMergeable(IDocumentValidatorContext context, FieldInfo fieldA, FieldInfo fieldB);
    [ExtensionAttribute]
public static IError FragmentNameNotUnique(IDocumentValidatorContext context, FragmentDefinitionNode fragmentDefinition);
    [ExtensionAttribute]
public static IError FragmentNotUsed(IDocumentValidatorContext context, FragmentDefinitionNode fragmentDefinition);
    [ExtensionAttribute]
public static IError FragmentCycleDetected(IDocumentValidatorContext context, FragmentSpreadNode fragmentSpread);
    [ExtensionAttribute]
public static IError FragmentDoesNotExist(IDocumentValidatorContext context, FragmentSpreadNode fragmentSpread);
    [ExtensionAttribute]
public static IError FragmentNotPossible(IDocumentValidatorContext context, ISyntaxNode node, INamedType typeCondition, INamedType parentType);
    [ExtensionAttribute]
public static IError FragmentTypeConditionUnknown(IDocumentValidatorContext context, ISyntaxNode node, NamedTypeNode typeCondition);
    [ExtensionAttribute]
public static IError FragmentOnlyCompositeType(IDocumentValidatorContext context, ISyntaxNode node, INamedType type);
    [ExtensionAttribute]
public static IError InputFieldAmbiguous(IDocumentValidatorContext context, ObjectFieldNode field);
    [ExtensionAttribute]
public static IError InputFieldDoesNotExist(IDocumentValidatorContext context, ObjectFieldNode field);
    [ExtensionAttribute]
public static IError InputFieldRequired(IDocumentValidatorContext context, ISyntaxNode node, string fieldName);
    [ExtensionAttribute]
public static IError OperationNameNotUnique(IDocumentValidatorContext context, OperationDefinitionNode operation, string operationName);
    [ExtensionAttribute]
public static IError OperationAnonymousMoreThanOne(IDocumentValidatorContext context, OperationDefinitionNode operation, int operations);
    [ExtensionAttribute]
public static IError VariableNotInputType(IDocumentValidatorContext context, VariableDefinitionNode node, string variableName);
    [ExtensionAttribute]
public static IError VariableNameNotUnique(IDocumentValidatorContext context, VariableDefinitionNode node, string variableName);
    [ExtensionAttribute]
public static IError ArgumentNotUnique(IDocumentValidatorContext context, ArgumentNode node, IOutputField field, DirectiveType directive);
    [ExtensionAttribute]
public static IError ArgumentRequired(IDocumentValidatorContext context, ISyntaxNode node, string argumentName, IOutputField field, DirectiveType directive);
    [ExtensionAttribute]
public static IError ArgumentDoesNotExist(IDocumentValidatorContext context, ArgumentNode node, IOutputField field, DirectiveType directive);
    [ExtensionAttribute]
public static IError SubscriptionSingleRootField(IDocumentValidatorContext context, OperationDefinitionNode operation);
    [ExtensionAttribute]
public static IError SubscriptionNoTopLevelIntrospectionField(IDocumentValidatorContext context, OperationDefinitionNode operation);
    [ExtensionAttribute]
public static IError MaxOperationComplexity(IDocumentValidatorContext context, OperationDefinitionNode operation, int allowedComplexity, int detectedComplexity);
    [ExtensionAttribute]
public static IError MaxExecutionDepth(IDocumentValidatorContext context, OperationDefinitionNode operation, int allowedExecutionDepth, int detectedExecutionDepth);
    [ExtensionAttribute]
public static IError IntrospectionNotAllowed(IDocumentValidatorContext context, FieldNode field);
    [ExtensionAttribute]
public static IError OneOfMustHaveExactlyOneField(IDocumentValidatorContext context, ISyntaxNode node, InputObjectType type);
    [ExtensionAttribute]
public static IError OneOfVariablesMustBeNonNull(IDocumentValidatorContext context, ISyntaxNode node, FieldCoordinate field, string variableName);
    public static IError DeferAndStreamNotAllowedOnMutationOrSubscriptionRoot(ISelectionNode selection);
    [ExtensionAttribute]
public static IError DeferAndStreamDuplicateLabel(IDocumentValidatorContext context, ISyntaxNode selection, string label);
    [ExtensionAttribute]
public static IError DeferAndStreamLabelIsVariable(IDocumentValidatorContext context, ISyntaxNode selection, string variable);
    [ExtensionAttribute]
public static IError StreamOnNonListField(IDocumentValidatorContext context, ISyntaxNode selection);
    [ExtensionAttribute]
public static void ReportMaxIntrospectionDepthOverflow(IDocumentValidatorContext context, ISyntaxNode selection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.FieldDepthCycleTracker : object {
    private Dictionary`2<FieldCoordinate, CoordinateLimit> _coordinates;
    private List`1<CoordinateLimit> _limits;
    private Nullable`1<ushort> _defaultMaxAllowed;
    public bool Add(FieldCoordinate coordinate);
    public void Remove(FieldCoordinate coordinate);
    public void Initialize(IEnumerable`1<ValueTuple`2<FieldCoordinate, ushort>> limits, Nullable`1<ushort> defaultMaxAllowed);
    public void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class HotChocolate.Validation.FieldInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <ResponseName>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldNode <Field>k__BackingField;
    public string ResponseName { get; }
    public IType DeclaringType { get; }
    public IType Type { get; }
    public FieldNode Field { get; }
    public FieldInfo(IType declaringType, IType type, FieldNode field);
    [CompilerGeneratedAttribute]
public string get_ResponseName();
    [CompilerGeneratedAttribute]
public IType get_DeclaringType();
    [CompilerGeneratedAttribute]
public IType get_Type();
    [CompilerGeneratedAttribute]
public FieldNode get_Field();
    public sealed virtual bool Equals(FieldInfo other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.FieldInfoListBuffer : object {
    private List`1[] _buffer;
    private int _max;
    private int _index;
    public IList`1<FieldInfo> Pop();
    [NullableContextAttribute("2")]
public bool TryPop(IList`1& list);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class HotChocolate.Validation.FieldInfoListBufferPool : DefaultObjectPool`1<FieldInfoListBuffer> {
    public FieldInfoListBufferPool(int size);
}
[IsReadOnlyAttribute]
public class HotChocolate.Validation.FieldInfoPair : ValueType {
    [CompilerGeneratedAttribute]
private FieldInfo <FieldA>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldInfo <FieldB>k__BackingField;
    public FieldInfo FieldA { get; }
    public FieldInfo FieldB { get; }
    public FieldInfoPair(FieldInfo fieldA, FieldInfo fieldB);
    [CompilerGeneratedAttribute]
public FieldInfo get_FieldA();
    [CompilerGeneratedAttribute]
public FieldInfo get_FieldB();
    public sealed virtual bool Equals(FieldInfoPair other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Validation.IDocumentValidator {
    public bool HasDynamicRules { get; }
    public abstract virtual bool get_HasDynamicRules();
    public abstract virtual ValueTask`1<DocumentValidatorResult> ValidateAsync(ISchema schema, DocumentNode document, string documentId, IDictionary`2<string, object> contextData, bool onlyNonCacheable, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Validation.IDocumentValidatorContext {
    public ISchema Schema { get; }
    public string DocumentId { get; }
    public Nullable`1<OperationType> OperationType { get; public set; }
    public IOutputType NonNullString { get; }
    public int MaxAllowedErrors { get; }
    public IList`1<ISyntaxNode> Path { get; }
    public IList`1<SelectionSetNode> SelectionSets { get; }
    public IDictionary`2<SelectionSetNode, IList`1<FieldInfo>> FieldSets { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISet`1<ValueTuple`2<FieldNode, FieldNode>> FieldTuples { get; }
    public ISet`1<string> VisitedFragments { get; }
    [NullableAttribute("2")]
public IVariableValueCollection VariableValues { get; }
    public IDictionary`2<string, VariableDefinitionNode> Variables { get; }
    public IDictionary`2<string, FragmentDefinitionNode> Fragments { get; }
    public ISet`1<string> Used { get; }
    public ISet`1<string> Unused { get; }
    public ISet`1<string> Declared { get; }
    public ISet`1<string> Names { get; }
    public IList`1<IType> Types { get; }
    public IList`1<DirectiveType> Directives { get; }
    public IList`1<IOutputField> OutputFields { get; }
    public IList`1<FieldNode> Fields { get; }
    public IList`1<IInputField> InputFields { get; }
    public IReadOnlyCollection`1<IError> Errors { get; }
    public int Count { get; public set; }
    public int Max { get; public set; }
    public int Allowed { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<object> List { get; }
    public bool UnexpectedErrorsDetected { get; public set; }
    public bool FatalErrorDetected { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> ContextData { get; }
    public List`1<FieldInfoPair> CurrentFieldPairs { get; }
    public List`1<FieldInfoPair> NextFieldPairs { get; }
    public HashSet`1<FieldInfoPair> ProcessedFieldPairs { get; }
    public FieldDepthCycleTracker FieldDepth { get; }
    public abstract virtual ISchema get_Schema();
    public abstract virtual string get_DocumentId();
    public abstract virtual Nullable`1<OperationType> get_OperationType();
    public abstract virtual void set_OperationType(Nullable`1<OperationType> value);
    public abstract virtual IOutputType get_NonNullString();
    public abstract virtual int get_MaxAllowedErrors();
    public abstract virtual IList`1<ISyntaxNode> get_Path();
    public abstract virtual IList`1<SelectionSetNode> get_SelectionSets();
    public abstract virtual IDictionary`2<SelectionSetNode, IList`1<FieldInfo>> get_FieldSets();
    public abstract virtual ISet`1<ValueTuple`2<FieldNode, FieldNode>> get_FieldTuples();
    public abstract virtual ISet`1<string> get_VisitedFragments();
    [NullableContextAttribute("2")]
public abstract virtual IVariableValueCollection get_VariableValues();
    public abstract virtual IDictionary`2<string, VariableDefinitionNode> get_Variables();
    public abstract virtual IDictionary`2<string, FragmentDefinitionNode> get_Fragments();
    public abstract virtual ISet`1<string> get_Used();
    public abstract virtual ISet`1<string> get_Unused();
    public abstract virtual ISet`1<string> get_Declared();
    public abstract virtual ISet`1<string> get_Names();
    public abstract virtual IList`1<IType> get_Types();
    public abstract virtual IList`1<DirectiveType> get_Directives();
    public abstract virtual IList`1<IOutputField> get_OutputFields();
    public abstract virtual IList`1<FieldNode> get_Fields();
    public abstract virtual IList`1<IInputField> get_InputFields();
    public abstract virtual IReadOnlyCollection`1<IError> get_Errors();
    public abstract virtual int get_Count();
    public abstract virtual void set_Count(int value);
    public abstract virtual int get_Max();
    public abstract virtual void set_Max(int value);
    public abstract virtual int get_Allowed();
    public abstract virtual void set_Allowed(int value);
    public abstract virtual IList`1<object> get_List();
    public abstract virtual bool get_UnexpectedErrorsDetected();
    public abstract virtual void set_UnexpectedErrorsDetected(bool value);
    public abstract virtual bool get_FatalErrorDetected();
    public abstract virtual void set_FatalErrorDetected(bool value);
    public abstract virtual IDictionary`2<string, object> get_ContextData();
    public abstract virtual List`1<FieldInfoPair> get_CurrentFieldPairs();
    public abstract virtual List`1<FieldInfoPair> get_NextFieldPairs();
    public abstract virtual HashSet`1<FieldInfoPair> get_ProcessedFieldPairs();
    public abstract virtual FieldDepthCycleTracker get_FieldDepth();
    public abstract virtual IList`1<FieldInfo> RentFieldInfoList();
    public abstract virtual void ReportError(IError error);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Validation.IDocumentValidatorFactory {
    public abstract virtual IDocumentValidator CreateValidator(string schemaName);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Validation.IDocumentValidatorRule {
    public bool IsCacheable { get; }
    public abstract virtual bool get_IsCacheable();
    public abstract virtual void Validate(IDocumentValidatorContext context, DocumentNode document);
}
[NullableContextAttribute("1")]
public interface HotChocolate.Validation.IValidationResultAggregator {
    public abstract virtual ValueTask AggregateAsync(IDocumentValidatorContext context, DocumentNode document, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.MaxValidationErrorsException : Exception {
    public MaxValidationErrorsException(string message);
    public MaxValidationErrorsException(string message, Exception inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Options.DefaultValidationBuilder : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public string Name { get; }
    public IServiceCollection Services { get; }
    public DefaultValidationBuilder(string name, IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
public interface HotChocolate.Validation.Options.IErrorOptionsAccessor {
    public int MaxAllowedErrors { get; }
    public abstract virtual int get_MaxAllowedErrors();
}
public interface HotChocolate.Validation.Options.IMaxExecutionDepthOptionsAccessor {
    public Nullable`1<int> MaxAllowedExecutionDepth { get; }
    public bool SkipIntrospectionFields { get; }
    public abstract virtual Nullable`1<int> get_MaxAllowedExecutionDepth();
    public abstract virtual bool get_SkipIntrospectionFields();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Validation.Options.IValidationBuilder {
    public string Name { get; }
    public IServiceCollection Services { get; }
    public abstract virtual string get_Name();
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
public interface HotChocolate.Validation.Options.IValidationConfiguration {
    public abstract virtual IEnumerable`1<IDocumentValidatorRule> GetRules(string schemaName);
    public abstract virtual IEnumerable`1<IValidationResultAggregator> GetResultAggregators(string schemaName);
    public abstract virtual ValidationOptions GetOptions(string schemaName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.Options.ValidationConfiguration : object {
    private ConcurrentDictionary`2<string, ValidationOptions> _optionsCache;
    private IOptionsMonitor`1<ValidationOptionsModifiers> _optionsMonitor;
    public ValidationConfiguration(IOptionsMonitor`1<ValidationOptionsModifiers> optionsMonitor);
    public sealed virtual IEnumerable`1<IDocumentValidatorRule> GetRules(string schemaName);
    public sealed virtual IEnumerable`1<IValidationResultAggregator> GetResultAggregators(string schemaName);
    public sealed virtual ValidationOptions GetOptions(string schemaName);
    private ValidationOptions CreateOptions(string schemaName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.Options.ValidationOptions : object {
    private Nullable`1<int> _maxAllowedExecutionDepth;
    private int _maxErrors;
    [CompilerGeneratedAttribute]
private IList`1<IDocumentValidatorRule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IValidationResultAggregator> <ResultAggregators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipIntrospectionFields>k__BackingField;
    public IList`1<IDocumentValidatorRule> Rules { get; }
    public IList`1<IValidationResultAggregator> ResultAggregators { get; }
    public Nullable`1<int> MaxAllowedExecutionDepth { get; public set; }
    public bool SkipIntrospectionFields { get; public set; }
    public int MaxAllowedErrors { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<IDocumentValidatorRule> get_Rules();
    [CompilerGeneratedAttribute]
public IList`1<IValidationResultAggregator> get_ResultAggregators();
    public sealed virtual Nullable`1<int> get_MaxAllowedExecutionDepth();
    public void set_MaxAllowedExecutionDepth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipIntrospectionFields();
    [CompilerGeneratedAttribute]
public void set_SkipIntrospectionFields(bool value);
    public sealed virtual int get_MaxAllowedErrors();
    public void set_MaxAllowedErrors(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.Options.ValidationOptionsModifiers : object {
    [CompilerGeneratedAttribute]
private IList`1<Action`1<ValidationOptions>> <Modifiers>k__BackingField;
    public IList`1<Action`1<ValidationOptions>> Modifiers { get; }
    [CompilerGeneratedAttribute]
public IList`1<Action`1<ValidationOptions>> get_Modifiers();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotChocolate.Validation.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ServiceCollectionExtensions_Schema_Name_Is_Mandatory { get; }
    internal static string DefaultDocumentValidatorFactory_Schema_Name_Is_Mandatory { get; }
    internal static string DocumentValidatorContext_Context_Invalid_State { get; }
    internal static string ErrorHelper_VariableIsNotCompatible { get; }
    internal static string ErrorHelper_DirectiveNotValidInLocation { get; }
    internal static string ErrorHelper_DirectiveNotSupported { get; }
    internal static string ErrorHelper_TypeSystemDefinitionNotAllowed { get; }
    internal static string ErrorHelper_UnionFieldError { get; }
    internal static string ErrorHelper_FieldDoesNotExist { get; }
    internal static string ErrorHelper_LeafFieldsCannotHaveSelections { get; }
    internal static string ErrorHelper_ArgumentValueIsNotCompatible { get; }
    internal static string ErrorHelper_FieldValueIsNotCompatible { get; }
    internal static string ErrorHelper_VariableDefaultValueIsNotCompatible { get; }
    internal static string ErrorHelper_NoSelectionOnCompositeField { get; }
    internal static string ErrorHelper_NoSelectionOnRootType { get; }
    internal static string ErrorHelper_FieldIsRequiredButNull { get; }
    internal static string ErrorHelper_FieldsAreNotMergable { get; }
    internal static string ErrorHelper_FragmentNameNotUnique { get; }
    internal static string ErrorHelper_FragmentNotUsed { get; }
    internal static string ErrorHelper_FragmentCycleDetected { get; }
    internal static string ErrorHelper_FragmentDoesNotExist { get; }
    internal static string ErrorHelper_FragmentNotPossible { get; }
    internal static string ErrorHelper_FragmentTypeConditionUnknown { get; }
    internal static string ErrorHelper_FragmentOnlyCompositeType { get; }
    internal static string ErrorHelper_InputFieldAmbiguous { get; }
    internal static string ErrorHelper_InputFieldDoesNotExist { get; }
    internal static string ErrorHelper_InputFieldRequired { get; }
    internal static string ErrorHelper_OperationNameNotUnique { get; }
    internal static string ErrorHelper_OperationAnonymousMoreThanOne { get; }
    internal static string ErrorHelper_VariableNotInputType { get; }
    internal static string ErrorHelper_VariableNameNotUnique { get; }
    internal static string ErrorHelper_ArgumentNotUnique { get; }
    internal static string ErrorHelper_ArgumentRequired { get; }
    internal static string ErrorHelper_ArgumentDoesNotExist { get; }
    internal static string ErrorHelper_SubscriptionSingleRootField { get; }
    internal static string ErrorHelper_SubscriptionNoTopLevelIntrospectionField { get; }
    internal static string ErrorHelper_MaxOperationComplexity { get; }
    internal static string ErrorHelper_MaxExecutionDepth { get; }
    internal static string ErrorHelper_DirectiveMustBeUniqueInLocation { get; }
    internal static string ErrorHelper_IntrospectionNotAllowed { get; }
    internal static string ErrorHelper_OneOfMustHaveExactlyOneField { get; }
    internal static string ErrorHelper_OneOfVariablesMustBeNonNull { get; }
    internal static string ErrorHelper_DeferAndStreamNotAllowedOnMutationOrSubscriptionRoot { get; }
    internal static string ErrorHelper_DeferAndStreamDuplicateLabel { get; }
    internal static string ErrorHelper_DeferAndStreamLabelIsVariable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ServiceCollectionExtensions_Schema_Name_Is_Mandatory();
    internal static string get_DefaultDocumentValidatorFactory_Schema_Name_Is_Mandatory();
    internal static string get_DocumentValidatorContext_Context_Invalid_State();
    internal static string get_ErrorHelper_VariableIsNotCompatible();
    internal static string get_ErrorHelper_DirectiveNotValidInLocation();
    internal static string get_ErrorHelper_DirectiveNotSupported();
    internal static string get_ErrorHelper_TypeSystemDefinitionNotAllowed();
    internal static string get_ErrorHelper_UnionFieldError();
    internal static string get_ErrorHelper_FieldDoesNotExist();
    internal static string get_ErrorHelper_LeafFieldsCannotHaveSelections();
    internal static string get_ErrorHelper_ArgumentValueIsNotCompatible();
    internal static string get_ErrorHelper_FieldValueIsNotCompatible();
    internal static string get_ErrorHelper_VariableDefaultValueIsNotCompatible();
    internal static string get_ErrorHelper_NoSelectionOnCompositeField();
    internal static string get_ErrorHelper_NoSelectionOnRootType();
    internal static string get_ErrorHelper_FieldIsRequiredButNull();
    internal static string get_ErrorHelper_FieldsAreNotMergable();
    internal static string get_ErrorHelper_FragmentNameNotUnique();
    internal static string get_ErrorHelper_FragmentNotUsed();
    internal static string get_ErrorHelper_FragmentCycleDetected();
    internal static string get_ErrorHelper_FragmentDoesNotExist();
    internal static string get_ErrorHelper_FragmentNotPossible();
    internal static string get_ErrorHelper_FragmentTypeConditionUnknown();
    internal static string get_ErrorHelper_FragmentOnlyCompositeType();
    internal static string get_ErrorHelper_InputFieldAmbiguous();
    internal static string get_ErrorHelper_InputFieldDoesNotExist();
    internal static string get_ErrorHelper_InputFieldRequired();
    internal static string get_ErrorHelper_OperationNameNotUnique();
    internal static string get_ErrorHelper_OperationAnonymousMoreThanOne();
    internal static string get_ErrorHelper_VariableNotInputType();
    internal static string get_ErrorHelper_VariableNameNotUnique();
    internal static string get_ErrorHelper_ArgumentNotUnique();
    internal static string get_ErrorHelper_ArgumentRequired();
    internal static string get_ErrorHelper_ArgumentDoesNotExist();
    internal static string get_ErrorHelper_SubscriptionSingleRootField();
    internal static string get_ErrorHelper_SubscriptionNoTopLevelIntrospectionField();
    internal static string get_ErrorHelper_MaxOperationComplexity();
    internal static string get_ErrorHelper_MaxExecutionDepth();
    internal static string get_ErrorHelper_DirectiveMustBeUniqueInLocation();
    internal static string get_ErrorHelper_IntrospectionNotAllowed();
    internal static string get_ErrorHelper_OneOfMustHaveExactlyOneField();
    internal static string get_ErrorHelper_OneOfVariablesMustBeNonNull();
    internal static string get_ErrorHelper_DeferAndStreamNotAllowedOnMutationOrSubscriptionRoot();
    internal static string get_ErrorHelper_DeferAndStreamDuplicateLabel();
    internal static string get_ErrorHelper_DeferAndStreamLabelIsVariable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.ArgumentVisitor : TypeDocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(DirectiveNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(DirectiveNode node, IDocumentValidatorContext context);
    private void ValidateArguments(IDocumentValidatorContext context, ISyntaxNode node, IReadOnlyList`1<ArgumentNode> argumentNodes, IFieldCollection`1<IInputField> arguments, IOutputField field, DirectiveType directive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.DirectiveVisitor : DocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(ISyntaxNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(VariableDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(InlineFragmentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FragmentDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FragmentSpreadNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(DirectiveNode node, IDocumentValidatorContext context);
    private static void ValidateDirectives(T node, IDocumentValidatorContext context);
    private static bool TryLookupLocation(ISyntaxNode node, DirectiveLocation& location);
}
internal class HotChocolate.Validation.Rules.DocumentRule : object {
    public bool IsCacheable { get; }
    public sealed virtual bool get_IsCacheable();
    [NullableContextAttribute("1")]
public sealed virtual void Validate(IDocumentValidatorContext context, DocumentNode document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.FieldVisitor : TypeDocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(SelectionSetNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(SelectionSetNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction VisitChildren(FragmentSpreadNode node, IDocumentValidatorContext context);
    private static bool HasFields(SelectionSetNode selectionSet);
    private static bool IsTypeNameField(string fieldName);
    private static void TryMergeFieldsInSet(IDocumentValidatorContext context, IList`1<FieldInfo> fields);
    private static void TryMergeFieldsInSet(IDocumentValidatorContext context, FieldInfo fieldA, FieldInfo fieldB);
    private static void CopyFieldInfos(List`1<FieldInfo> from, List`1<FieldInfo> to);
    private static bool IsParentTypeAligned(FieldInfo fieldA, FieldInfo fieldB);
    private static bool AreArgumentsIdentical(FieldNode fieldA, FieldNode fieldB);
    private static bool SameResponseShape(IType typeA, IType typeB);
    private static bool SameStreamDirective(FieldInfo fieldA, FieldInfo fieldB);
    private static void FillCurrentFieldPairs(IDocumentValidatorContext context);
    private static void ProcessCurrentFieldPairs(IDocumentValidatorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.FragmentVisitor : TypeDocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(DocumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(DocumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FragmentDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FragmentDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(InlineFragmentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FragmentSpreadNode node, IDocumentValidatorContext context);
    private void ValidateFragmentSpreadIsPossible(ISyntaxNode node, IDocumentValidatorContext context, INamedType parentType, INamedType typeCondition);
    private static bool IsCompatibleType(IDocumentValidatorContext context, INamedType parentType, INamedType typeCondition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.IntrospectionDepthVisitor : TypeDocumentValidatorVisitor {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] _limits;
    protected virtual ISyntaxVisitorAction Enter(DocumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.IntrospectionVisitor : TypeDocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.MaxExecutionDepthVisitor : DocumentValidatorVisitor {
    private IMaxExecutionDepthOptionsAccessor _options;
    public MaxExecutionDepthVisitor(IMaxExecutionDepthOptionsAccessor options);
    protected virtual ISyntaxVisitorAction Enter(DocumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.Rules.OperationVisitor : DocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(DocumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(InlineFragmentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FragmentSpreadNode node, IDocumentValidatorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.ValueVisitor : TypeDocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(VariableDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(VariableDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(DirectiveNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(DirectiveNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(ArgumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(ArgumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(ObjectValueNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(ObjectFieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(ObjectFieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(ListValueNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(ListValueNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(IValueNode valueNode, IDocumentValidatorContext context);
    private static bool TryCreateValueError(IDocumentValidatorContext context, IInputType locationType, IValueNode valueNode, ISyntaxNode node, IError& error);
    private bool TryPeekLastDefiningSyntaxNode(IDocumentValidatorContext context, ISyntaxNode& node);
    private bool TryIsInstanceOfType(IDocumentValidatorContext context, IInputType inputType, IValueNode value);
    private bool IsInstanceOfType(IDocumentValidatorContext context, IInputType inputType, IValueNode value);
    private bool IsTypeCompatible(IType left, ITypeNode right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class HotChocolate.Validation.Rules.VariableVisitor : TypeDocumentValidatorVisitor {
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(VariableDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(DirectiveNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(DirectiveNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(ArgumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(ArgumentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(ObjectFieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(ObjectFieldNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(VariableNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(ListValueNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(ListValueNode node, IDocumentValidatorContext context);
    private bool IsVariableUsageAllowed(VariableDefinitionNode variableDefinition, IType locationType, IValueNode locationDefault);
    private bool AreTypesCompatible(ITypeNode variableType, IType locationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class HotChocolate.Validation.TypeDocumentValidatorVisitor : DocumentValidatorVisitor {
    [CompilerGeneratedAttribute]
private static ObjectField <TypeNameField>k__BackingField;
    internal static ObjectField TypeNameField { get; }
    protected TypeDocumentValidatorVisitor(SyntaxVisitorOptions options);
    private static TypeDocumentValidatorVisitor();
    [CompilerGeneratedAttribute]
internal static ObjectField get_TypeNameField();
    protected virtual ISyntaxVisitorAction Enter(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(VariableDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(InlineFragmentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Enter(FragmentDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(OperationDefinitionNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(InlineFragmentNode node, IDocumentValidatorContext context);
    protected virtual ISyntaxVisitorAction Leave(FragmentDefinitionNode node, IDocumentValidatorContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HotChocolateValidationBuilderExtensions : object {
    [ExtensionAttribute]
public static IValidationBuilder AddArgumentRules(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddDirectiveRules(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddDocumentRules(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddFieldRules(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddFragmentRules(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddValueRules(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddVariableRules(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddOperationRules(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddMaxExecutionDepthRule(IValidationBuilder builder, int maxAllowedExecutionDepth, bool skipIntrospectionFields, bool allowRequestOverrides);
    [ExtensionAttribute]
public static IValidationBuilder AddIntrospectionAllowedRule(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder AddIntrospectionDepthRule(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder ConfigureValidation(IValidationBuilder builder, Action`1<ValidationOptionsModifiers> configure);
    [ExtensionAttribute]
public static IValidationBuilder ConfigureValidation(IValidationBuilder builder, Action`2<IServiceProvider, ValidationOptionsModifiers> configureClient);
    [ExtensionAttribute]
internal static IValidationBuilder ModifyValidationOptions(IValidationBuilder builder, Action`1<ValidationOptions> configure);
    [ExtensionAttribute]
public static IValidationBuilder TryAddValidationVisitor(IValidationBuilder builder, bool isCacheable);
    [ExtensionAttribute]
public static IValidationBuilder TryAddValidationVisitor(IValidationBuilder builder, Func`3<IServiceProvider, ValidationOptions, T> factory, bool isCacheable);
    [ExtensionAttribute]
public static IValidationBuilder TryAddValidationRule(IValidationBuilder builder);
    [ExtensionAttribute]
public static IValidationBuilder TryAddValidationRule(IValidationBuilder builder, Func`3<IServiceProvider, ValidationOptions, T> factory);
    [ExtensionAttribute]
public static IValidationBuilder TryAddValidationResultAggregator(IValidationBuilder builder, Func`3<IServiceProvider, ValidationOptions, T> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HotChocolateValidationServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddValidationCore(IServiceCollection services);
    [ExtensionAttribute]
public static IValidationBuilder AddValidation(IServiceCollection services, string schemaName);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
