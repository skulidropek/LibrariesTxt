public enum HtmlAgilityPack.AttributeValueQuote : Enum {
    public int value__;
    public static AttributeValueQuote SingleQuote;
    public static AttributeValueQuote DoubleQuote;
    public static AttributeValueQuote None;
    public static AttributeValueQuote WithoutValue;
    public static AttributeValueQuote Initial;
}
[ObsoleteAttribute("This type should not be used; it is intended for internal use in HTML Agility Pack.")]
public class HtmlAgilityPack.Crc32 : object {
    private UInt32 _crc32;
    private static UInt32[] crc_32_tab;
    internal UInt32 CheckSum { get; internal set; }
    private static Crc32();
    internal UInt32 get_CheckSum();
    internal void set_CheckSum(UInt32 value);
    public static UInt32 CRC32Bytes(Byte[] bytes);
    public static UInt32 CRC32String(string text);
    internal UInt32 AddToCRC32(int c);
    internal UInt32 AddToCRC32(ushort c);
    private static UInt32 UPDC32(byte octet, UInt32 crc);
}
internal class HtmlAgilityPack.EncodingFoundException : Exception {
    private Encoding _encoding;
    internal Encoding Encoding { get; }
    internal EncodingFoundException(Encoding encoding);
    internal Encoding get_Encoding();
}
[AttributeUsageAttribute("4")]
public class HtmlAgilityPack.HasXPathAttribute : Attribute {
}
[DebuggerDisplayAttribute("Name: {OriginalName}, Value: {Value}")]
public class HtmlAgilityPack.HtmlAttribute : object {
    private int _line;
    internal int _lineposition;
    internal string _name;
    internal int _namelength;
    internal int _namestartindex;
    internal HtmlDocument _ownerdocument;
    internal HtmlNode _ownernode;
    private AttributeValueQuote _quoteType;
    internal int _streamposition;
    internal string _value;
    internal int _valuelength;
    internal int _valuestartindex;
    internal bool _isFromParse;
    internal bool _hasEqual;
    private Nullable`1<bool> _localUseOriginalName;
    [CompilerGeneratedAttribute]
private AttributeValueQuote <InternalQuoteType>k__BackingField;
    public int Line { get; internal set; }
    public int LinePosition { get; }
    public int ValueStartIndex { get; }
    public int ValueLength { get; }
    public bool UseOriginalName { get; public set; }
    public string Name { get; public set; }
    public string OriginalName { get; }
    public HtmlDocument OwnerDocument { get; }
    public HtmlNode OwnerNode { get; }
    public AttributeValueQuote QuoteType { get; public set; }
    internal AttributeValueQuote InternalQuoteType { get; internal set; }
    public int StreamPosition { get; }
    public string Value { get; public set; }
    public string DeEntitizeValue { get; }
    internal string XmlName { get; }
    internal string XmlValue { get; }
    public string XPath { get; }
    internal HtmlAttribute(HtmlDocument ownerdocument);
    public int get_Line();
    internal void set_Line(int value);
    public int get_LinePosition();
    public int get_ValueStartIndex();
    public int get_ValueLength();
    public bool get_UseOriginalName();
    public void set_UseOriginalName(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_OriginalName();
    public HtmlDocument get_OwnerDocument();
    public HtmlNode get_OwnerNode();
    public AttributeValueQuote get_QuoteType();
    public void set_QuoteType(AttributeValueQuote value);
    [CompilerGeneratedAttribute]
internal AttributeValueQuote get_InternalQuoteType();
    [CompilerGeneratedAttribute]
internal void set_InternalQuoteType(AttributeValueQuote value);
    public int get_StreamPosition();
    public string get_Value();
    public void set_Value(string value);
    public string get_DeEntitizeValue();
    internal string get_XmlName();
    internal string get_XmlValue();
    public string get_XPath();
    public sealed virtual int CompareTo(object obj);
    public HtmlAttribute Clone();
    public void Remove();
    private string GetRelativeXpath();
}
[DefaultMemberAttribute("Item")]
public class HtmlAgilityPack.HtmlAttributeCollection : object {
    internal Dictionary`2<string, HtmlAttribute> Hashitems;
    private HtmlNode _ownernode;
    internal List`1<HtmlAttribute> items;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public HtmlAttribute Item { get; public set; }
    public HtmlAttribute Item { get; public set; }
    internal HtmlAttributeCollection(HtmlNode ownernode);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual HtmlAttribute get_Item(int index);
    public sealed virtual void set_Item(int index, HtmlAttribute value);
    public HtmlAttribute get_Item(string name);
    public void set_Item(string name, HtmlAttribute value);
    public void Add(string name, string value);
    public sealed virtual void Add(HtmlAttribute item);
    public void AddRange(IEnumerable`1<HtmlAttribute> items);
    public void AddRange(Dictionary`2<string, string> items);
    private sealed virtual override void System.Collections.Generic.ICollection<HtmlAgilityPack.HtmlAttribute>.Clear();
    public sealed virtual bool Contains(HtmlAttribute item);
    public sealed virtual void CopyTo(HtmlAttribute[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<HtmlAttribute> System.Collections.Generic.IEnumerable<HtmlAgilityPack.HtmlAttribute>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(HtmlAttribute item);
    public sealed virtual void Insert(int index, HtmlAttribute item);
    private sealed virtual override bool System.Collections.Generic.ICollection<HtmlAgilityPack.HtmlAttribute>.Remove(HtmlAttribute item);
    public sealed virtual void RemoveAt(int index);
    public HtmlAttribute Append(HtmlAttribute newAttribute);
    public HtmlAttribute Append(string name);
    public HtmlAttribute Append(string name, string value);
    public bool Contains(string name);
    public HtmlAttribute Prepend(HtmlAttribute newAttribute);
    public void Remove(HtmlAttribute attribute);
    public void Remove(string name);
    public void RemoveAll();
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlAttributeCollection/<AttributesWithName>d__35")]
public IEnumerable`1<HtmlAttribute> AttributesWithName(string attributeName);
    public void Remove();
    internal void Clear();
    internal int GetAttributeIndex(HtmlAttribute attribute);
    internal int GetAttributeIndex(string name);
}
internal class HtmlAgilityPack.HtmlCmdLine : object {
    internal static bool Help;
    private static HtmlCmdLine();
    internal static string GetOption(string name, string def);
    internal static string GetOption(int index, string def);
    internal static bool GetOption(string name, bool def);
    internal static int GetOption(string name, int def);
    private static void GetBoolArg(string Arg, string Name, Boolean& ArgValue);
    private static void GetIntArg(string Arg, string Name, Int32& ArgValue);
    private static bool GetStringArg(string Arg, String& ArgValue);
    private static void GetStringArg(string Arg, string Name, String& ArgValue);
    private static void ParseArgs();
}
public class HtmlAgilityPack.HtmlCommentNode : HtmlNode {
    private string _comment;
    public string Comment { get; public set; }
    public string InnerHtml { get; public set; }
    public string OuterHtml { get; }
    internal HtmlCommentNode(HtmlDocument ownerdocument, int index);
    public string get_Comment();
    public void set_Comment(string value);
    public virtual string get_InnerHtml();
    public virtual void set_InnerHtml(string value);
    public virtual string get_OuterHtml();
}
public class HtmlAgilityPack.HtmlDocument : object {
    internal static bool _disableBehaviorTagP;
    [CompilerGeneratedAttribute]
private static Action`1<HtmlDocument> <DefaultBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HtmlDocument> <ParseExecuting>k__BackingField;
    private static int _maxDepthLevel;
    private int _c;
    private Crc32 _crc32;
    private HtmlAttribute _currentattribute;
    private HtmlNode _currentnode;
    private Encoding _declaredencoding;
    private HtmlNode _documentnode;
    private bool _fullcomment;
    private int _index;
    internal Dictionary`2<string, HtmlNode> Lastnodes;
    private HtmlNode _lastparentnode;
    private int _line;
    private int _lineposition;
    private int _maxlineposition;
    internal Dictionary`2<string, HtmlNode> Nodesid;
    private ParseState _oldstate;
    private bool _onlyDetectEncoding;
    internal Dictionary`2<int, HtmlNode> Openednodes;
    private List`1<HtmlParseError> _parseerrors;
    private string _remainder;
    private int _remainderOffset;
    private ParseState _state;
    private Encoding _streamencoding;
    private bool _useHtmlEncodingForStream;
    public string Text;
    public bool BackwardCompatibility;
    public bool OptionAddDebuggingAttributes;
    public bool OptionAutoCloseOnEnd;
    public bool OptionCheckSyntax;
    public bool OptionComputeChecksum;
    public bool OptionEmptyCollection;
    public bool DisableServerSideCode;
    public Encoding OptionDefaultStreamEncoding;
    public bool OptionXmlForceOriginalComment;
    public bool OptionExtractErrorSourceText;
    public int OptionExtractErrorSourceTextMaxLength;
    public bool OptionFixNestedTags;
    public bool OptionOutputAsXml;
    public bool OptionPreserveXmlNamespaces;
    public bool OptionOutputOptimizeAttributeValues;
    public Nullable`1<AttributeValueQuote> GlobalAttributeValueQuote;
    public bool OptionOutputOriginalCase;
    public bool OptionOutputUpperCase;
    public bool OptionReadEncoding;
    public string OptionStopperNodeName;
    public bool OptionDefaultUseOriginalName;
    public bool OptionUseIdAttribute;
    public bool OptionWriteEmptyNodes;
    public int OptionMaxNestedChildNodes;
    internal static string HtmlExceptionRefNotChild;
    internal static string HtmlExceptionUseIdAttributeFalse;
    internal static string HtmlExceptionClassDoesNotExist;
    internal static string HtmlExceptionClassExists;
    internal static Dictionary`2<string, String[]> HtmlResetters;
    private static List`1<string> BlockAttributes;
    public static bool DisableBehaviorTagP { get; public set; }
    public static Action`1<HtmlDocument> DefaultBuilder { get; public set; }
    public Action`1<HtmlDocument> ParseExecuting { get; public set; }
    public string ParsedText { get; }
    public static int MaxDepthLevel { get; public set; }
    public int CheckSum { get; }
    public Encoding DeclaredEncoding { get; }
    public HtmlNode DocumentNode { get; }
    public Encoding Encoding { get; }
    public IEnumerable`1<HtmlParseError> ParseErrors { get; }
    public string Remainder { get; }
    public int RemainderOffset { get; }
    public Encoding StreamEncoding { get; }
    private static HtmlDocument();
    public static bool get_DisableBehaviorTagP();
    public static void set_DisableBehaviorTagP(bool value);
    [CompilerGeneratedAttribute]
public static Action`1<HtmlDocument> get_DefaultBuilder();
    [CompilerGeneratedAttribute]
public static void set_DefaultBuilder(Action`1<HtmlDocument> value);
    [CompilerGeneratedAttribute]
public Action`1<HtmlDocument> get_ParseExecuting();
    [CompilerGeneratedAttribute]
public void set_ParseExecuting(Action`1<HtmlDocument> value);
    public string get_ParsedText();
    public static int get_MaxDepthLevel();
    public static void set_MaxDepthLevel(int value);
    public int get_CheckSum();
    public Encoding get_DeclaredEncoding();
    public HtmlNode get_DocumentNode();
    public Encoding get_Encoding();
    public IEnumerable`1<HtmlParseError> get_ParseErrors();
    public string get_Remainder();
    public int get_RemainderOffset();
    public Encoding get_StreamEncoding();
    public static string GetXmlName(string name);
    public void UseAttributeOriginalName(string tagName);
    public static string GetXmlName(string name, bool isAttribute, bool preserveXmlNamespaces);
    public static string HtmlEncode(string html);
    internal static string HtmlEncodeWithCompatibility(string html, bool backwardCompatibility);
    public static bool IsWhiteSpace(int c);
    public HtmlAttribute CreateAttribute(string name);
    public HtmlAttribute CreateAttribute(string name, string value);
    public HtmlCommentNode CreateComment();
    public HtmlCommentNode CreateComment(string comment);
    public HtmlNode CreateElement(string name);
    public HtmlTextNode CreateTextNode();
    public HtmlTextNode CreateTextNode(string text);
    public Encoding DetectEncoding(Stream stream);
    public Encoding DetectEncoding(Stream stream, bool checkHtml);
    public Encoding DetectEncoding(TextReader reader);
    public Encoding DetectEncodingHtml(string html);
    public HtmlNode GetElementbyId(string id);
    public void Load(Stream stream);
    public void Load(Stream stream, bool detectEncodingFromByteOrderMarks);
    public void Load(Stream stream, Encoding encoding);
    public void Load(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks);
    public void Load(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int buffersize);
    public void Load(TextReader reader);
    public void LoadHtml(string html);
    public void Save(Stream outStream);
    public void Save(Stream outStream, Encoding encoding);
    public void Save(StreamWriter writer);
    public void Save(TextWriter writer);
    public void Save(XmlWriter writer);
    internal HtmlAttribute CreateAttribute();
    internal HtmlNode CreateNode(HtmlNodeType type);
    internal HtmlNode CreateNode(HtmlNodeType type, int index);
    internal Encoding GetOutEncoding();
    internal HtmlNode GetXmlDeclaration();
    internal void SetIdForNode(HtmlNode node, string id);
    internal void UpdateLastParentNode();
    private void AddError(HtmlParseErrorCode code, int line, int linePosition, int streamPosition, string sourceText, string reason);
    private void CloseCurrentNode();
    private string CurrentNodeName();
    private void DecrementPosition();
    private HtmlNode FindResetterNode(HtmlNode node, string name);
    private bool FindResetterNodes(HtmlNode node, String[] names);
    private void FixNestedTag(string name, String[] resetters);
    private void FixNestedTags();
    private String[] GetResetters(string name);
    private void IncrementPosition();
    private bool IsValidTag();
    private bool NewCheck();
    private void Parse();
    private void PushAttributeNameEnd(int index);
    private void PushAttributeNameStart(int index, int lineposition);
    private void PushAttributeValueEnd(int index);
    private void PushAttributeValueStart(int index);
    private void CloseParentImplicitExplicitNode();
    private bool IsParentImplicitEnd();
    private bool IsParentExplicitEnd();
    private void CloseParentImplicitEnd();
    private void CloseParentExplicitEnd();
    private void PushAttributeValueStart(int index, int quote);
    private bool PushNodeEnd(int index, bool close);
    private void PushNodeNameEnd(int index);
    private void PushNodeNameStart(bool starttag, int index);
    private void PushNodeStart(HtmlNodeType type, int index, int lineposition);
    private void ReadDocumentEncoding(HtmlNode node);
    public void DetectEncodingAndLoad(string path);
    public void DetectEncodingAndLoad(string path, bool detectEncoding);
    public Encoding DetectEncoding(string path);
    public void Load(string path);
    public void Load(string path, bool detectEncodingFromByteOrderMarks);
    public void Load(string path, Encoding encoding);
    public void Load(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks);
    public void Load(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int buffersize);
    public void Save(string filename);
    public void Save(string filename, Encoding encoding);
    public sealed virtual XPathNavigator CreateNavigator();
}
[FlagsAttribute]
public enum HtmlAgilityPack.HtmlElementFlag : Enum {
    public int value__;
    public static HtmlElementFlag CData;
    public static HtmlElementFlag Empty;
    public static HtmlElementFlag Closed;
    public static HtmlElementFlag CanOverlap;
}
public class HtmlAgilityPack.HtmlEntity : object {
    [CompilerGeneratedAttribute]
private static bool <UseWebUtility>k__BackingField;
    private static int _maxEntitySize;
    private static Dictionary`2<int, string> _entityName;
    private static Dictionary`2<string, int> _entityValue;
    public static bool UseWebUtility { get; public set; }
    public static Dictionary`2<int, string> EntityName { get; }
    public static Dictionary`2<string, int> EntityValue { get; }
    private static HtmlEntity();
    [CompilerGeneratedAttribute]
public static bool get_UseWebUtility();
    [CompilerGeneratedAttribute]
public static void set_UseWebUtility(bool value);
    public static Dictionary`2<int, string> get_EntityName();
    public static Dictionary`2<string, int> get_EntityValue();
    public static string DeEntitize(string text);
    public static HtmlNode Entitize(HtmlNode node);
    public static string Entitize(string text);
    public static string Entitize(string text, bool useNames);
    public static string Entitize(string text, bool useNames, bool entitizeQuotAmpAndLtGt);
    private static void Entitize(HtmlAttributeCollection collection);
    private static void Entitize(HtmlNodeCollection collection);
}
internal class HtmlAgilityPack.HtmlNameTable : XmlNameTable {
    private NameTable _nametable;
    public virtual string Add(string array);
    public virtual string Add(Char[] array, int offset, int length);
    public virtual string Get(string array);
    public virtual string Get(Char[] array, int offset, int length);
    internal string GetOrAdd(string array);
}
[DebuggerDisplayAttribute("Name: {OriginalName}")]
public class HtmlAgilityPack.HtmlNode : object {
    internal static string DepthLevelExceptionMessage;
    internal HtmlAttributeCollection _attributes;
    internal HtmlNodeCollection _childnodes;
    internal HtmlNode _endnode;
    private bool _changed;
    internal string _innerhtml;
    internal int _innerlength;
    internal int _innerstartindex;
    internal int _line;
    internal int _lineposition;
    private string _name;
    internal int _namelength;
    internal int _namestartindex;
    internal HtmlNode _nextnode;
    internal HtmlNodeType _nodetype;
    internal string _outerhtml;
    internal int _outerlength;
    internal int _outerstartindex;
    private string _optimizedName;
    internal HtmlDocument _ownerdocument;
    internal HtmlNode _parentnode;
    internal HtmlNode _prevnode;
    internal HtmlNode _prevwithsamename;
    internal bool _starttag;
    internal int _streamposition;
    internal bool _isImplicitEnd;
    internal bool _isHideInnerText;
    public static string HtmlNodeTypeNameComment;
    public static string HtmlNodeTypeNameDocument;
    public static string HtmlNodeTypeNameText;
    public static Dictionary`2<string, HtmlElementFlag> ElementsFlags;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    public HtmlAttributeCollection Attributes { get; internal set; }
    public HtmlNodeCollection ChildNodes { get; internal set; }
    public bool Closed { get; }
    public HtmlAttributeCollection ClosingAttributes { get; }
    public HtmlNode EndNode { get; }
    public HtmlNode FirstChild { get; }
    public bool HasAttributes { get; }
    public bool HasChildNodes { get; }
    public bool HasClosingAttributes { get; }
    public string Id { get; public set; }
    public string InnerHtml { get; public set; }
    public string InnerText { get; }
    public HtmlNode LastChild { get; }
    public int Line { get; internal set; }
    public int LinePosition { get; internal set; }
    public int InnerStartIndex { get; }
    public int OuterStartIndex { get; }
    public int InnerLength { get; }
    public int OuterLength { get; }
    public string Name { get; public set; }
    public HtmlNode NextSibling { get; internal set; }
    public HtmlNodeType NodeType { get; internal set; }
    public string OriginalName { get; }
    public string OuterHtml { get; }
    public HtmlDocument OwnerDocument { get; internal set; }
    public HtmlNode ParentNode { get; internal set; }
    public HtmlNode PreviousSibling { get; internal set; }
    public int StreamPosition { get; }
    public string XPath { get; }
    public int Depth { get; public set; }
    private static HtmlNode();
    public HtmlNode(HtmlNodeType type, HtmlDocument ownerdocument, int index);
    public HtmlAttributeCollection get_Attributes();
    internal void set_Attributes(HtmlAttributeCollection value);
    public HtmlNodeCollection get_ChildNodes();
    internal void set_ChildNodes(HtmlNodeCollection value);
    public bool get_Closed();
    public HtmlAttributeCollection get_ClosingAttributes();
    public HtmlNode get_EndNode();
    public HtmlNode get_FirstChild();
    public bool get_HasAttributes();
    public bool get_HasChildNodes();
    public bool get_HasClosingAttributes();
    public string get_Id();
    public void set_Id(string value);
    public virtual string get_InnerHtml();
    public virtual void set_InnerHtml(string value);
    public virtual string get_InnerText();
    internal virtual void InternalInnerText(StringBuilder sb, bool isDisplayScriptingText, int depthLevel);
    public virtual string GetDirectInnerText();
    internal string GetCurrentNodeText();
    internal void AppendDirectInnerText(StringBuilder sb);
    internal void AppendInnerText(StringBuilder sb, bool isShowHideInnerText);
    public HtmlNode get_LastChild();
    public int get_Line();
    internal void set_Line(int value);
    public int get_LinePosition();
    internal void set_LinePosition(int value);
    public int get_InnerStartIndex();
    public int get_OuterStartIndex();
    public int get_InnerLength();
    public int get_OuterLength();
    public string get_Name();
    public void set_Name(string value);
    internal void SetName(string value);
    public HtmlNode get_NextSibling();
    internal void set_NextSibling(HtmlNode value);
    public HtmlNodeType get_NodeType();
    internal void set_NodeType(HtmlNodeType value);
    public string get_OriginalName();
    public virtual string get_OuterHtml();
    public HtmlDocument get_OwnerDocument();
    internal void set_OwnerDocument(HtmlDocument value);
    public HtmlNode get_ParentNode();
    internal void set_ParentNode(HtmlNode value);
    public HtmlNode get_PreviousSibling();
    internal void set_PreviousSibling(HtmlNode value);
    public int get_StreamPosition();
    public string get_XPath();
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    public static bool CanOverlapElement(string name);
    public static HtmlNode CreateNode(string html);
    public static HtmlNode CreateNode(string html, Action`1<HtmlDocument> htmlDocumentBuilder);
    public static bool IsCDataElement(string name);
    public static bool IsClosedElement(string name);
    public static bool IsEmptyElement(string name);
    public static bool IsOverlappedClosingElement(string text);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<Ancestors>d__120")]
public IEnumerable`1<HtmlNode> Ancestors();
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<Ancestors>d__121")]
public IEnumerable`1<HtmlNode> Ancestors(string name);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<AncestorsAndSelf>d__122")]
public IEnumerable`1<HtmlNode> AncestorsAndSelf();
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<AncestorsAndSelf>d__123")]
public IEnumerable`1<HtmlNode> AncestorsAndSelf(string name);
    public HtmlNode AppendChild(HtmlNode newChild);
    public void SetChildNodesId(HtmlNode chilNode);
    public void AppendChildren(HtmlNodeCollection newChildren);
    public IEnumerable`1<HtmlAttribute> ChildAttributes(string name);
    public HtmlNode Clone();
    public HtmlNode CloneNode(string newName);
    public HtmlNode CloneNode(string newName, bool deep);
    public HtmlNode CloneNode(bool deep);
    public void CopyFrom(HtmlNode node);
    public void CopyFrom(HtmlNode node, bool deep);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<DescendantNodes>d__134")]
[ObsoleteAttribute("Use Descendants() instead, the results of this function will change in a future version")]
public IEnumerable`1<HtmlNode> DescendantNodes(int level);
    [ObsoleteAttribute("Use DescendantsAndSelf() instead, the results of this function will change in a future version")]
public IEnumerable`1<HtmlNode> DescendantNodesAndSelf();
    public IEnumerable`1<HtmlNode> Descendants();
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<Descendants>d__137")]
public IEnumerable`1<HtmlNode> Descendants(int level);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<Descendants>d__138")]
public IEnumerable`1<HtmlNode> Descendants(string name);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<DescendantsAndSelf>d__139")]
public IEnumerable`1<HtmlNode> DescendantsAndSelf();
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<DescendantsAndSelf>d__140")]
public IEnumerable`1<HtmlNode> DescendantsAndSelf(string name);
    public HtmlNode Element(string name);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<Elements>d__142")]
public IEnumerable`1<HtmlNode> Elements(string name);
    public HtmlAttribute GetDataAttribute(string key);
    public IEnumerable`1<HtmlAttribute> GetDataAttributes();
    public IEnumerable`1<HtmlAttribute> GetAttributes();
    public IEnumerable`1<HtmlAttribute> GetAttributes(String[] attributeNames);
    public string GetAttributeValue(string name, string def);
    public int GetAttributeValue(string name, int def);
    public bool GetAttributeValue(string name, bool def);
    public HtmlNode InsertAfter(HtmlNode newChild, HtmlNode refChild);
    public HtmlNode InsertBefore(HtmlNode newChild, HtmlNode refChild);
    public HtmlNode PrependChild(HtmlNode newChild);
    public void PrependChildren(HtmlNodeCollection newChildren);
    public void Remove();
    public void RemoveAll();
    public void RemoveAllChildren();
    public void RemoveAllIDforNode(HtmlNode node);
    public void MoveChild(HtmlNode child);
    public void MoveChildren(HtmlNodeCollection children);
    public void RemoveChildren(HtmlNodeCollection oldChildren);
    public HtmlNode RemoveChild(HtmlNode oldChild);
    public HtmlNode RemoveChild(HtmlNode oldChild, bool keepGrandChildren);
    public HtmlNode ReplaceChild(HtmlNode newChild, HtmlNode oldChild);
    public HtmlAttribute SetAttributeValue(string name, string value);
    public void WriteContentTo(TextWriter outText, int level);
    public string WriteContentTo();
    public virtual void WriteTo(TextWriter outText, int level);
    public void WriteTo(XmlWriter writer);
    public string WriteTo();
    public void SetParent(HtmlNode parent);
    internal void SetChanged();
    private void UpdateHtml();
    internal static string GetXmlComment(HtmlCommentNode comment);
    internal static void WriteAttributes(XmlWriter writer, HtmlNode node);
    internal void UpdateLastNode();
    internal void CloseNode(HtmlNode endnode, int level);
    internal string GetId();
    internal void SetId(string id);
    internal void WriteAttribute(TextWriter outText, HtmlAttribute att);
    internal void WriteAttributes(TextWriter outText, bool closing);
    private string GetRelativeXpath();
    private bool IsSingleElementNode();
    public void AddClass(string name);
    public void AddClass(string name, bool throwError);
    public void RemoveClass();
    public void RemoveClass(bool throwError);
    public void RemoveClass(string name);
    public void RemoveClass(string name, bool throwError);
    public void ReplaceClass(string newClass, string oldClass);
    public void ReplaceClass(string newClass, string oldClass, bool throwError);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNode/<GetClasses>d__191")]
public IEnumerable`1<string> GetClasses();
    public bool HasClass(string className);
    private bool IsEmpty(IEnumerable en);
    public T GetEncapsulatedData();
    public T GetEncapsulatedData(HtmlDocument htmlDocument);
    public object GetEncapsulatedData(Type targetType, HtmlDocument htmlDocument);
    private static void ThrowIfNodeReturnTypeIsExplicitlySetWhenAttributeNameIsGiven(XPathAttribute xPathAttr);
    public sealed virtual XPathNavigator CreateNavigator();
    public XPathNavigator CreateRootNavigator();
    public HtmlNodeCollection SelectNodes(string xpath);
    public HtmlNodeCollection SelectNodes(XPathExpression xpath);
    public HtmlNode SelectSingleNode(string xpath);
    public HtmlNode SelectSingleNode(XPathExpression xpath);
}
[DefaultMemberAttribute("Item")]
public class HtmlAgilityPack.HtmlNodeCollection : object {
    private HtmlNode _parentnode;
    private List`1<HtmlNode> _items;
    internal HtmlNode ParentNode { get; }
    public int Item { get; }
    public HtmlNode Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public HtmlNode Item { get; public set; }
    public HtmlNodeCollection(HtmlNode parentnode);
    internal HtmlNode get_ParentNode();
    public int get_Item(HtmlNode node);
    public HtmlNode get_Item(string nodeName);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual HtmlNode get_Item(int index);
    public sealed virtual void set_Item(int index, HtmlNode value);
    public sealed virtual void Add(HtmlNode node);
    public void Add(HtmlNode node, bool setParent);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(HtmlNode item);
    public sealed virtual void CopyTo(HtmlNode[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<HtmlNode> System.Collections.Generic.IEnumerable<HtmlAgilityPack.HtmlNode>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(HtmlNode item);
    public sealed virtual void Insert(int index, HtmlNode node);
    public sealed virtual bool Remove(HtmlNode item);
    public sealed virtual void RemoveAt(int index);
    public static HtmlNode FindFirst(HtmlNodeCollection items, string name);
    public void Append(HtmlNode node);
    public HtmlNode FindFirst(string name);
    public int GetNodeIndex(HtmlNode node);
    public void Prepend(HtmlNode node);
    public bool Remove(int index);
    public void Replace(int index, HtmlNode node);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNodeCollection/<Descendants>d__34")]
public IEnumerable`1<HtmlNode> Descendants();
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNodeCollection/<Descendants>d__35")]
public IEnumerable`1<HtmlNode> Descendants(string name);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNodeCollection/<Elements>d__36")]
public IEnumerable`1<HtmlNode> Elements();
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNodeCollection/<Elements>d__37")]
public IEnumerable`1<HtmlNode> Elements(string name);
    [IteratorStateMachineAttribute("HtmlAgilityPack.HtmlNodeCollection/<Nodes>d__38")]
public IEnumerable`1<HtmlNode> Nodes();
}
public class HtmlAgilityPack.HtmlNodeNavigator : XPathNavigator {
    private int _attindex;
    private HtmlNode _currentnode;
    private HtmlDocument _doc;
    private HtmlNameTable _nametable;
    internal bool Trace;
    public string BaseURI { get; }
    public HtmlDocument CurrentDocument { get; }
    public HtmlNode CurrentNode { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public string Value { get; }
    public string XmlLang { get; }
    internal HtmlNodeNavigator(HtmlDocument doc, HtmlNode currentNode);
    private HtmlNodeNavigator(HtmlNodeNavigator nav);
    public HtmlNodeNavigator(Stream stream);
    public HtmlNodeNavigator(Stream stream, bool detectEncodingFromByteOrderMarks);
    public HtmlNodeNavigator(Stream stream, Encoding encoding);
    public HtmlNodeNavigator(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks);
    public HtmlNodeNavigator(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int buffersize);
    public HtmlNodeNavigator(TextReader reader);
    public virtual string get_BaseURI();
    public HtmlDocument get_CurrentDocument();
    public HtmlNode get_CurrentNode();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasChildren();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual string get_XmlLang();
    public virtual XPathNavigator Clone();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetNamespace(string name);
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToNamespace(string name);
    public virtual bool MoveToNext();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToParent();
    public virtual bool MoveToPrevious();
    public virtual void MoveToRoot();
    private void Reset();
}
public enum HtmlAgilityPack.HtmlNodeType : Enum {
    public int value__;
    public static HtmlNodeType Document;
    public static HtmlNodeType Element;
    public static HtmlNodeType Comment;
    public static HtmlNodeType Text;
}
public class HtmlAgilityPack.HtmlParseError : object {
    private HtmlParseErrorCode _code;
    private int _line;
    private int _linePosition;
    private string _reason;
    private string _sourceText;
    private int _streamPosition;
    public HtmlParseErrorCode Code { get; }
    public int Line { get; }
    public int LinePosition { get; }
    public string Reason { get; }
    public string SourceText { get; }
    public int StreamPosition { get; }
    internal HtmlParseError(HtmlParseErrorCode code, int line, int linePosition, int streamPosition, string sourceText, string reason);
    public HtmlParseErrorCode get_Code();
    public int get_Line();
    public int get_LinePosition();
    public string get_Reason();
    public string get_SourceText();
    public int get_StreamPosition();
}
public enum HtmlAgilityPack.HtmlParseErrorCode : Enum {
    public int value__;
    public static HtmlParseErrorCode TagNotClosed;
    public static HtmlParseErrorCode TagNotOpened;
    public static HtmlParseErrorCode CharsetMismatch;
    public static HtmlParseErrorCode EndTagNotRequired;
    public static HtmlParseErrorCode EndTagInvalidHere;
}
public class HtmlAgilityPack.HtmlTextNode : HtmlNode {
    private string _text;
    public string InnerHtml { get; public set; }
    public string OuterHtml { get; }
    public string Text { get; public set; }
    internal HtmlTextNode(HtmlDocument ownerdocument, int index);
    public virtual string get_InnerHtml();
    public virtual void set_InnerHtml(string value);
    public virtual string get_OuterHtml();
    public string get_Text();
    public void set_Text(string value);
}
public class HtmlAgilityPack.HtmlWeb : object {
    private bool _autoDetectEncoding;
    private bool _cacheOnly;
    private string _cachePath;
    private bool _fromCache;
    private int _requestDuration;
    private Uri _responseUri;
    private HttpStatusCode _statusCode;
    private int _streamBufferSize;
    private bool _useCookies;
    private bool _usingCache;
    private bool _usingCacheAndLoad;
    private bool _usingCacheIfExists;
    private string _userAgent;
    private int _timeout;
    private Nullable`1<int> _maxAutoRedirects;
    public PostResponseHandler PostResponse;
    public PreHandleDocumentHandler PreHandleDocument;
    public PreRequestHandler PreRequest;
    internal static ConcurrentDictionary`2<string, HttpClient> SharedHttpClient;
    [CompilerGeneratedAttribute]
private DecompressionMethods <AutomaticDecompression>k__BackingField;
    private Encoding _encoding;
    [CompilerGeneratedAttribute]
private bool <CaptureRedirect>k__BackingField;
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public Nullable`1<int> MaxAutoRedirects { get; public set; }
    public int Timeout { get; public set; }
    public bool AutoDetectEncoding { get; public set; }
    public Encoding OverrideEncoding { get; public set; }
    public bool CacheOnly { get; public set; }
    public bool UsingCacheIfExists { get; public set; }
    public string CachePath { get; public set; }
    public bool FromCache { get; }
    public int RequestDuration { get; }
    public Uri ResponseUri { get; }
    public HttpStatusCode StatusCode { get; }
    public int StreamBufferSize { get; public set; }
    public bool UseCookies { get; public set; }
    public bool CaptureRedirect { get; public set; }
    public string UserAgent { get; public set; }
    public bool UsingCache { get; public set; }
    private static HtmlWeb();
    internal static HttpClient GetSharedHttpClient(string userAgent);
    [CompilerGeneratedAttribute]
public DecompressionMethods get_AutomaticDecompression();
    [CompilerGeneratedAttribute]
public void set_AutomaticDecompression(DecompressionMethods value);
    public void set_MaxAutoRedirects(Nullable`1<int> value);
    public Nullable`1<int> get_MaxAutoRedirects();
    public int get_Timeout();
    public void set_Timeout(int value);
    public bool get_AutoDetectEncoding();
    public void set_AutoDetectEncoding(bool value);
    public Encoding get_OverrideEncoding();
    public void set_OverrideEncoding(Encoding value);
    public bool get_CacheOnly();
    public void set_CacheOnly(bool value);
    public bool get_UsingCacheIfExists();
    public void set_UsingCacheIfExists(bool value);
    public string get_CachePath();
    public void set_CachePath(string value);
    public bool get_FromCache();
    public int get_RequestDuration();
    public Uri get_ResponseUri();
    public HttpStatusCode get_StatusCode();
    public int get_StreamBufferSize();
    public void set_StreamBufferSize(int value);
    public bool get_UseCookies();
    public void set_UseCookies(bool value);
    [CompilerGeneratedAttribute]
public bool get_CaptureRedirect();
    [CompilerGeneratedAttribute]
public void set_CaptureRedirect(bool value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
    public bool get_UsingCache();
    public void set_UsingCache(bool value);
    public void Get(string url, string path);
    public void Get(string url, string path, IWebProxy proxy, ICredentials credentials);
    public void Get(string url, string path, string method);
    public void Get(string url, string path, IWebProxy proxy, ICredentials credentials, string method);
    public string GetCachePath(Uri uri);
    public HtmlDocument Load(string url);
    public HtmlDocument Load(Uri uri);
    public HtmlDocument Load(string url, string method);
    public HtmlDocument Load(Uri uri, string method);
    public HtmlDocument Load(string url, string method, IWebProxy proxy, ICredentials credentials);
    public HtmlDocument Load(Uri uri, string method, IWebProxy proxy, ICredentials credentials);
    public void LoadHtmlAsXml(string htmlUrl, XmlWriter writer);
    private static void FilePreparePath(string target);
    private static DateTime RemoveMilliseconds(DateTime t);
    private static DateTime RemoveMilliseconds(Nullable`1<DateTimeOffset> offset);
    private static long SaveStream(Stream stream, string path, DateTime touchDate, int streamBufferSize);
    private HttpStatusCode Get(Uri uri, string method, string path, HtmlDocument doc, IWebProxy proxy, ICredentials creds);
    private string GetCacheHeader(Uri requestUri, string name, string def);
    private string GetCacheHeadersPath(Uri uri);
    private bool IsHtmlContent(string contentType);
    private bool IsGZipEncoding(string contentEncoding);
    private HtmlDocument LoadUrl(Uri uri, string method, IWebProxy proxy, ICredentials creds);
    private void SaveCacheHeaders(Uri requestUri, HttpResponseMessage resp);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, CancellationToken cancellationToken);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, Encoding encoding);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, Encoding encoding, CancellationToken cancellationToken);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, Encoding encoding, string userName, string password);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, Encoding encoding, string userName, string password, CancellationToken cancellationToken);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, Encoding encoding, string userName, string password, string domain);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, Encoding encoding, string userName, string password, string domain, CancellationToken cancellationToken);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, string userName, string password, string domain);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, string userName, string password, string domain, CancellationToken cancellationToken);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, string userName, string password);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, string userName, string password, CancellationToken cancellationToken);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, NetworkCredential credentials);
    public Task`1<HtmlDocument> LoadFromWebAsync(string url, NetworkCredential credentials, CancellationToken cancellationToken);
    public Task`1<HtmlDocument> LoadFromWebAsync(Uri uri, Encoding encoding, NetworkCredential credentials);
    [AsyncStateMachineAttribute("HtmlAgilityPack.HtmlWeb/<LoadFromWebAsync>d__111")]
public Task`1<HtmlDocument> LoadFromWebAsync(Uri uri, Encoding encoding, NetworkCredential credentials, CancellationToken cancellationToken);
}
public class HtmlAgilityPack.HtmlWebException : Exception {
    public HtmlWebException(string message);
}
public class HtmlAgilityPack.InvalidNodeReturnTypeException : Exception {
    public InvalidNodeReturnTypeException(string message);
    public InvalidNodeReturnTypeException(string message, Exception inner);
}
internal class HtmlAgilityPack.IOLibrary : ValueType {
    internal static void CopyAlways(string source, string target);
    internal static void MakeWritable(string path);
}
internal static class HtmlAgilityPack.MimeTypeMap : object {
    public static IDictionary`2<string, string> Mappings;
    private static MimeTypeMap();
}
public class HtmlAgilityPack.MissingXPathException : Exception {
    public MissingXPathException(string message);
    public MissingXPathException(string message, Exception inner);
}
public class HtmlAgilityPack.MixedCodeDocument : object {
    private int _c;
    internal MixedCodeDocumentFragmentList _codefragments;
    private MixedCodeDocumentFragment _currentfragment;
    internal MixedCodeDocumentFragmentList _fragments;
    private int _index;
    private int _line;
    private int _lineposition;
    private ParseState _state;
    private Encoding _streamencoding;
    internal string _text;
    internal MixedCodeDocumentFragmentList _textfragments;
    public string TokenCodeEnd;
    public string TokenCodeStart;
    public string TokenDirective;
    public string TokenResponseWrite;
    private string TokenTextBlock;
    public string Code { get; }
    public MixedCodeDocumentFragmentList CodeFragments { get; }
    public MixedCodeDocumentFragmentList Fragments { get; }
    public Encoding StreamEncoding { get; }
    public MixedCodeDocumentFragmentList TextFragments { get; }
    public string get_Code();
    public MixedCodeDocumentFragmentList get_CodeFragments();
    public MixedCodeDocumentFragmentList get_Fragments();
    public Encoding get_StreamEncoding();
    public MixedCodeDocumentFragmentList get_TextFragments();
    public MixedCodeDocumentCodeFragment CreateCodeFragment();
    public MixedCodeDocumentTextFragment CreateTextFragment();
    public void Load(Stream stream);
    public void Load(Stream stream, bool detectEncodingFromByteOrderMarks);
    public void Load(Stream stream, Encoding encoding);
    public void Load(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks);
    public void Load(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int buffersize);
    public void Load(string path);
    public void Load(string path, bool detectEncodingFromByteOrderMarks);
    public void Load(string path, Encoding encoding);
    public void Load(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks);
    public void Load(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int buffersize);
    public void Load(TextReader reader);
    public void LoadHtml(string html);
    public void Save(Stream outStream);
    public void Save(Stream outStream, Encoding encoding);
    public void Save(string filename);
    public void Save(string filename, Encoding encoding);
    public void Save(StreamWriter writer);
    public void Save(TextWriter writer);
    internal MixedCodeDocumentFragment CreateFragment(MixedCodeDocumentFragmentType type);
    internal Encoding GetOutEncoding();
    private void IncrementPosition();
    private void Parse();
    private void SetPosition();
}
public class HtmlAgilityPack.MixedCodeDocumentCodeFragment : MixedCodeDocumentFragment {
    private string _code;
    public string Code { get; public set; }
    internal MixedCodeDocumentCodeFragment(MixedCodeDocument doc);
    public string get_Code();
    public void set_Code(string value);
}
public abstract class HtmlAgilityPack.MixedCodeDocumentFragment : object {
    internal MixedCodeDocument Doc;
    private string _fragmentText;
    internal int Index;
    internal int Length;
    private int _line;
    internal int _lineposition;
    internal MixedCodeDocumentFragmentType _type;
    public string FragmentText { get; internal set; }
    public MixedCodeDocumentFragmentType FragmentType { get; }
    public int Line { get; internal set; }
    public int LinePosition { get; }
    public int StreamPosition { get; }
    internal MixedCodeDocumentFragment(MixedCodeDocument doc, MixedCodeDocumentFragmentType type);
    public string get_FragmentText();
    internal void set_FragmentText(string value);
    public MixedCodeDocumentFragmentType get_FragmentType();
    public int get_Line();
    internal void set_Line(int value);
    public int get_LinePosition();
    public int get_StreamPosition();
}
[DefaultMemberAttribute("Item")]
public class HtmlAgilityPack.MixedCodeDocumentFragmentList : object {
    private MixedCodeDocument _doc;
    private IList`1<MixedCodeDocumentFragment> _items;
    public MixedCodeDocument Doc { get; }
    public int Count { get; }
    public MixedCodeDocumentFragment Item { get; }
    internal MixedCodeDocumentFragmentList(MixedCodeDocument doc);
    public MixedCodeDocument get_Doc();
    public int get_Count();
    public MixedCodeDocumentFragment get_Item(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Append(MixedCodeDocumentFragment newFragment);
    public MixedCodeDocumentFragmentEnumerator GetEnumerator();
    public void Prepend(MixedCodeDocumentFragment newFragment);
    public void Remove(MixedCodeDocumentFragment fragment);
    public void RemoveAll();
    public void RemoveAt(int index);
    internal void Clear();
    internal int GetFragmentIndex(MixedCodeDocumentFragment fragment);
}
public enum HtmlAgilityPack.MixedCodeDocumentFragmentType : Enum {
    public int value__;
    public static MixedCodeDocumentFragmentType Code;
    public static MixedCodeDocumentFragmentType Text;
}
public class HtmlAgilityPack.MixedCodeDocumentTextFragment : MixedCodeDocumentFragment {
    public string Text { get; public set; }
    internal MixedCodeDocumentTextFragment(MixedCodeDocument doc);
    public string get_Text();
    public void set_Text(string value);
}
internal class HtmlAgilityPack.NameValuePairList : object {
    internal string Text;
    private List`1<KeyValuePair`2<string, string>> _allPairs;
    private Dictionary`2<string, List`1<KeyValuePair`2<string, string>>> _pairsWithName;
    internal NameValuePairList(string text);
    internal static string GetNameValuePairsValue(string text, string name);
    internal List`1<KeyValuePair`2<string, string>> GetNameValuePairs(string name);
    internal string GetNameValuePairValue(string name);
    private void Parse(string text);
}
public class HtmlAgilityPack.NodeAttributeNotFoundException : Exception {
    public NodeAttributeNotFoundException(string message);
    public NodeAttributeNotFoundException(string message, Exception inner);
}
public class HtmlAgilityPack.NodeNotFoundException : Exception {
    public NodeNotFoundException(string message);
    public NodeNotFoundException(string message, Exception inner);
}
public enum HtmlAgilityPack.ReturnType : Enum {
    public int value__;
    public static ReturnType InnerText;
    public static ReturnType InnerHtml;
    public static ReturnType OuterHtml;
}
[AttributeUsageAttribute("128")]
public class HtmlAgilityPack.SkipNodeNotFoundAttribute : Attribute {
}
[ExtensionAttribute]
internal static class HtmlAgilityPack.Tools : object {
    [ExtensionAttribute]
internal static bool IsDefinedAttribute(Type type, Type attributeType);
    [ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetPropertiesDefinedXPath(Type type);
    [ExtensionAttribute]
internal static bool IsIEnumerable(PropertyInfo propertyInfo);
    [ExtensionAttribute]
internal static IEnumerable`1<Type> GetGenericTypes(PropertyInfo propertyInfo);
    [ExtensionAttribute]
internal static MethodInfo GetMethodByItsName(Type type, string methodName);
    [ExtensionAttribute]
internal static IList CreateIListOfType(Type type);
    internal static T GetNodeValueBasedOnXPathReturnType(HtmlNode htmlNode, XPathAttribute xPathAttribute);
    internal static IList GetNodesValuesBasedOnXPathReturnType(HtmlNodeCollection htmlNodeCollection, XPathAttribute xPathAttribute, Type listGenericType);
    [IteratorStateMachineAttribute("HtmlAgilityPack.Tools/<HAPWhere>d__9`1")]
[ExtensionAttribute]
internal static IEnumerable`1<TSource> HAPWhere(IEnumerable`1<TSource> source, HAPFunc`2<TSource, bool> predicate);
    [ExtensionAttribute]
internal static bool IsInstantiable(Type type);
    [ExtensionAttribute]
internal static int CountOfIEnumerable(IEnumerable`1<T> source);
    internal static string GetHtmlForEncapsulation(HtmlNode node, ReturnType returnType);
}
internal class HtmlAgilityPack.Trace : object {
    internal static Trace _current;
    internal static Trace Current { get; }
    internal static Trace get_Current();
    private void WriteLineIntern(string message, string category);
    public static void WriteLine(string message, string category);
}
internal static class HtmlAgilityPack.Utilities : object {
    public static TValue GetDictionaryValueOrDefault(Dictionary`2<TKey, TValue> dict, TKey key, TValue defaultValue);
}
[AttributeUsageAttribute("128")]
public class HtmlAgilityPack.XPathAttribute : Attribute {
    private ReturnType _nodeReturnType;
    [CompilerGeneratedAttribute]
private bool <IsNodeReturnTypeExplicitlySet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    internal bool IsNodeReturnTypeExplicitlySet { get; private set; }
    public string XPath { get; }
    public string AttributeName { get; public set; }
    public ReturnType NodeReturnType { get; public set; }
    public XPathAttribute(string xpathString);
    public XPathAttribute(string xpathString, ReturnType nodeReturnType);
    public XPathAttribute(string xpathString, string attributeName);
    [CompilerGeneratedAttribute]
internal bool get_IsNodeReturnTypeExplicitlySet();
    [CompilerGeneratedAttribute]
private void set_IsNodeReturnTypeExplicitlySet(bool value);
    [CompilerGeneratedAttribute]
public string get_XPath();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    public ReturnType get_NodeReturnType();
    public void set_NodeReturnType(ReturnType value);
}
