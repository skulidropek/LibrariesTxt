public class TheArtOfDev.HtmlRenderer.Adapters.Entities.RColor : ValueType {
    public static RColor Empty;
    private long _value;
    public static RColor Transparent { get; }
    public static RColor Black { get; }
    public static RColor White { get; }
    public static RColor WhiteSmoke { get; }
    public static RColor LightGray { get; }
    public byte R { get; }
    public byte G { get; }
    public byte B { get; }
    public byte A { get; }
    public bool IsEmpty { get; }
    private RColor(long value);
    private static RColor();
    public static RColor get_Transparent();
    public static RColor get_Black();
    public static RColor get_White();
    public static RColor get_WhiteSmoke();
    public static RColor get_LightGray();
    public byte get_R();
    public byte get_G();
    public byte get_B();
    public byte get_A();
    public bool get_IsEmpty();
    public static bool op_Equality(RColor left, RColor right);
    public static bool op_Inequality(RColor left, RColor right);
    public static RColor FromArgb(int alpha, int red, int green, int blue);
    public static RColor FromArgb(int red, int green, int blue);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private static void CheckByte(int value);
}
public enum TheArtOfDev.HtmlRenderer.Adapters.Entities.RDashStyle : Enum {
    public int value__;
    public static RDashStyle Solid;
    public static RDashStyle Dash;
    public static RDashStyle Dot;
    public static RDashStyle DashDot;
    public static RDashStyle DashDotDot;
    public static RDashStyle Custom;
}
[FlagsAttribute]
public enum TheArtOfDev.HtmlRenderer.Adapters.Entities.RFontStyle : Enum {
    public int value__;
    public static RFontStyle Regular;
    public static RFontStyle Bold;
    public static RFontStyle Italic;
    public static RFontStyle Underline;
    public static RFontStyle Strikeout;
}
public class TheArtOfDev.HtmlRenderer.Adapters.Entities.RKeyEvent : object {
    private bool _control;
    private bool _aKeyCode;
    private bool _cKeyCode;
    public bool Control { get; }
    public bool AKeyCode { get; }
    public bool CKeyCode { get; }
    public RKeyEvent(bool control, bool aKeyCode, bool cKeyCode);
    public bool get_Control();
    public bool get_AKeyCode();
    public bool get_CKeyCode();
}
public class TheArtOfDev.HtmlRenderer.Adapters.Entities.RMouseEvent : object {
    private bool _leftButton;
    public bool LeftButton { get; }
    public RMouseEvent(bool leftButton);
    public bool get_LeftButton();
}
public class TheArtOfDev.HtmlRenderer.Adapters.Entities.RPoint : ValueType {
    public static RPoint Empty;
    private double _x;
    private double _y;
    public bool IsEmpty { get; }
    public double X { get; public set; }
    public double Y { get; public set; }
    private static RPoint();
    public RPoint(double x, double y);
    public bool get_IsEmpty();
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public static RPoint op_Addition(RPoint pt, RSize sz);
    public static RPoint op_Subtraction(RPoint pt, RSize sz);
    public static bool op_Equality(RPoint left, RPoint right);
    public static bool op_Inequality(RPoint left, RPoint right);
    public static RPoint Add(RPoint pt, RSize sz);
    public static RPoint Subtract(RPoint pt, RSize sz);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class TheArtOfDev.HtmlRenderer.Adapters.Entities.RRect : ValueType {
    public static RRect Empty;
    private double _height;
    private double _width;
    private double _x;
    private double _y;
    public RPoint Location { get; public set; }
    public RSize Size { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double Left { get; }
    public double Top { get; }
    public double Right { get; }
    public double Bottom { get; }
    public bool IsEmpty { get; }
    public RRect(double x, double y, double width, double height);
    public RRect(RPoint location, RSize size);
    private static RRect();
    public RPoint get_Location();
    public void set_Location(RPoint value);
    public RSize get_Size();
    public void set_Size(RSize value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public double get_Left();
    public double get_Top();
    public double get_Right();
    public double get_Bottom();
    public bool get_IsEmpty();
    public static bool op_Equality(RRect left, RRect right);
    public static bool op_Inequality(RRect left, RRect right);
    public static RRect FromLTRB(double left, double top, double right, double bottom);
    public virtual bool Equals(object obj);
    public bool Contains(double x, double y);
    public bool Contains(RPoint pt);
    public bool Contains(RRect rect);
    public void Inflate(double x, double y);
    public void Inflate(RSize size);
    public static RRect Inflate(RRect rect, double x, double y);
    public void Intersect(RRect rect);
    public static RRect Intersect(RRect a, RRect b);
    public bool IntersectsWith(RRect rect);
    public static RRect Union(RRect a, RRect b);
    public void Offset(RPoint pos);
    public void Offset(double x, double y);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class TheArtOfDev.HtmlRenderer.Adapters.Entities.RSize : ValueType {
    public static RSize Empty;
    private double _height;
    private double _width;
    public bool IsEmpty { get; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public RSize(RSize size);
    public RSize(RPoint pt);
    public RSize(double width, double height);
    private static RSize();
    public bool get_IsEmpty();
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public static RPoint op_Explicit(RSize size);
    public static RSize op_Addition(RSize sz1, RSize sz2);
    public static RSize op_Subtraction(RSize sz1, RSize sz2);
    public static bool op_Equality(RSize sz1, RSize sz2);
    public static bool op_Inequality(RSize sz1, RSize sz2);
    public static RSize Add(RSize sz1, RSize sz2);
    public static RSize Subtract(RSize sz1, RSize sz2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public RPoint ToPointF();
    public virtual string ToString();
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RAdapter : object {
    private Dictionary`2<RColor, RBrush> _brushesCache;
    private Dictionary`2<RColor, RPen> _penCache;
    private FontsHandler _fontsHandler;
    private CssData _defaultCssData;
    private RImage _loadImage;
    private RImage _errorImage;
    public CssData DefaultCssData { get; }
    public CssData get_DefaultCssData();
    public RColor GetColor(string colorName);
    public RPen GetPen(RColor color);
    public RBrush GetSolidBrush(RColor color);
    public RBrush GetLinearGradientBrush(RRect rect, RColor color1, RColor color2, double angle);
    public RImage ConvertImage(object image);
    public RImage ImageFromStream(Stream memoryStream);
    public bool IsFontExists(string font);
    public void AddFontFamily(RFontFamily fontFamily);
    public void AddFontFamilyMapping(string fromFamily, string toFamily);
    public RFont GetFont(string family, double size, RFontStyle style);
    public RImage GetLoadingImage();
    public RImage GetLoadingFailedImage();
    public object GetClipboardDataObject(string html, string plainText);
    public void SetToClipboard(string text);
    public void SetToClipboard(string html, string plainText);
    public void SetToClipboard(RImage image);
    public RContextMenu GetContextMenu();
    public void SaveToFile(RImage image, string name, string extension, RControl control);
    internal RFont CreateFont(string family, double size, RFontStyle style);
    internal RFont CreateFont(RFontFamily family, double size, RFontStyle style);
    protected abstract virtual RColor GetColorInt(string colorName);
    protected abstract virtual RPen CreatePen(RColor color);
    protected abstract virtual RBrush CreateSolidBrush(RColor color);
    protected abstract virtual RBrush CreateLinearGradientBrush(RRect rect, RColor color1, RColor color2, double angle);
    protected abstract virtual RImage ConvertImageInt(object image);
    protected abstract virtual RImage ImageFromStreamInt(Stream memoryStream);
    protected abstract virtual RFont CreateFontInt(string family, double size, RFontStyle style);
    protected abstract virtual RFont CreateFontInt(RFontFamily family, double size, RFontStyle style);
    protected virtual object GetClipboardDataObjectInt(string html, string plainText);
    protected virtual void SetToClipboardInt(string text);
    protected virtual void SetToClipboardInt(string html, string plainText);
    protected virtual void SetToClipboardInt(RImage image);
    protected virtual RContextMenu CreateContextMenuInt();
    protected virtual void SaveToFileInt(RImage image, string name, string extension, RControl control);
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RBrush : object {
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RContextMenu : object {
    public int ItemsCount { get; }
    public abstract virtual int get_ItemsCount();
    public abstract virtual void AddDivider();
    public abstract virtual void AddItem(string text, bool enabled, EventHandler onClick);
    public abstract virtual void RemoveLastDivider();
    public abstract virtual void Show(RControl parent, RPoint location);
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RControl : object {
    private RAdapter _adapter;
    public RAdapter Adapter { get; }
    public bool LeftMouseButton { get; }
    public bool RightMouseButton { get; }
    public RPoint MouseLocation { get; }
    protected RControl(RAdapter adapter);
    public RAdapter get_Adapter();
    public abstract virtual bool get_LeftMouseButton();
    public abstract virtual bool get_RightMouseButton();
    public abstract virtual RPoint get_MouseLocation();
    public abstract virtual void SetCursorDefault();
    public abstract virtual void SetCursorHand();
    public abstract virtual void SetCursorIBeam();
    public abstract virtual void DoDragDropCopy(object dragDropData);
    public abstract virtual void MeasureString(string str, RFont font, double maxWidth, Int32& charFit, Double& charFitWidth);
    public abstract virtual void Invalidate();
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RFont : object {
    public double Size { get; }
    public double Height { get; }
    public double UnderlineOffset { get; }
    public double LeftPadding { get; }
    public abstract virtual double get_Size();
    public abstract virtual double get_Height();
    public abstract virtual double get_UnderlineOffset();
    public abstract virtual double get_LeftPadding();
    public abstract virtual double GetWhitespaceWidth(RGraphics graphics);
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RFontFamily : object {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RGraphics : object {
    protected RAdapter _adapter;
    protected Stack`1<RRect> _clipStack;
    private Stack`1<RRect> _suspendedClips;
    protected RGraphics(RAdapter adapter, RRect initialClip);
    public RPen GetPen(RColor color);
    public RBrush GetSolidBrush(RColor color);
    public RBrush GetLinearGradientBrush(RRect rect, RColor color1, RColor color2, double angle);
    public RRect GetClip();
    public abstract virtual void PopClip();
    public abstract virtual void PushClip(RRect rect);
    public abstract virtual void PushClipExclude(RRect rect);
    public void SuspendClipping();
    public void ResumeClipping();
    public abstract virtual object SetAntiAliasSmoothingMode();
    public abstract virtual void ReturnPreviousSmoothingMode(object prevMode);
    public abstract virtual RBrush GetTextureBrush(RImage image, RRect dstRect, RPoint translateTransformLocation);
    public abstract virtual RGraphicsPath GetGraphicsPath();
    public abstract virtual RSize MeasureString(string str, RFont font);
    public abstract virtual void MeasureString(string str, RFont font, double maxWidth, Int32& charFit, Double& charFitWidth);
    public abstract virtual void DrawString(string str, RFont font, RColor color, RPoint point, RSize size, bool rtl);
    public abstract virtual void DrawLine(RPen pen, double x1, double y1, double x2, double y2);
    public abstract virtual void DrawRectangle(RPen pen, double x, double y, double width, double height);
    public abstract virtual void DrawRectangle(RBrush brush, double x, double y, double width, double height);
    public abstract virtual void DrawImage(RImage image, RRect destRect, RRect srcRect);
    public abstract virtual void DrawImage(RImage image, RRect destRect);
    public abstract virtual void DrawPath(RPen pen, RGraphicsPath path);
    public abstract virtual void DrawPath(RBrush brush, RGraphicsPath path);
    public abstract virtual void DrawPolygon(RBrush brush, RPoint[] points);
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RGraphicsPath : object {
    public abstract virtual void Start(double x, double y);
    public abstract virtual void LineTo(double x, double y);
    public abstract virtual void ArcTo(double x, double y, double size, Corner corner);
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RImage : object {
    public double Width { get; }
    public double Height { get; }
    public abstract virtual double get_Width();
    public abstract virtual double get_Height();
    public abstract virtual void Dispose();
}
public abstract class TheArtOfDev.HtmlRenderer.Adapters.RPen : object {
    public double Width { get; public set; }
    unknown RDashStyle DashStyle {public set; }
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual void set_DashStyle(RDashStyle value);
}
public class TheArtOfDev.HtmlRenderer.Core.CssData : object {
    private static List`1<CssBlock> _emptyArray;
    private Dictionary`2<string, Dictionary`2<string, List`1<CssBlock>>> _mediaBlocks;
    internal IDictionary`2<string, Dictionary`2<string, List`1<CssBlock>>> MediaBlocks { get; }
    private static CssData();
    public static CssData Parse(RAdapter adapter, string stylesheet, bool combineWithDefault);
    internal IDictionary`2<string, Dictionary`2<string, List`1<CssBlock>>> get_MediaBlocks();
    public bool ContainsCssBlock(string className, string media);
    public IEnumerable`1<CssBlock> GetCssBlock(string className, string media);
    public void AddCssBlock(string media, CssBlock cssBlock);
    public void Combine(CssData other);
    public CssData Clone();
}
internal static class TheArtOfDev.HtmlRenderer.Core.CssDefaults : object {
    public static string DefaultStyleSheet;
}
internal enum TheArtOfDev.HtmlRenderer.Core.Dom.Border : Enum {
    public int value__;
    public static Border Top;
    public static Border Right;
    public static Border Bottom;
    public static Border Left;
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssBox : CssBoxProperties {
    private CssBox _parentBox;
    protected HtmlContainerInt _htmlContainer;
    private HtmlTag _htmltag;
    private List`1<CssRect> _boxWords;
    private List`1<CssBox> _boxes;
    private List`1<CssLineBox> _lineBoxes;
    private List`1<CssLineBox> _parentLineBoxes;
    private Dictionary`2<CssLineBox, RRect> _rectangles;
    private SubString _text;
    internal bool _tableFixed;
    protected bool _wordsSizeMeasured;
    private CssBox _listItemBox;
    private CssLineBox _firstHostingLineBox;
    private CssLineBox _lastHostingLineBox;
    private ImageLoadHandler _imageLoadHandler;
    public HtmlContainerInt HtmlContainer { get; public set; }
    public CssBox ParentBox { get; public set; }
    public List`1<CssBox> Boxes { get; }
    public bool IsBrElement { get; }
    public bool IsInline { get; }
    public bool IsBlock { get; }
    public bool IsClickable { get; }
    public bool IsFixed { get; }
    public string HrefLink { get; }
    public CssBox ContainingBlock { get; }
    public HtmlTag HtmlTag { get; }
    public bool IsImage { get; }
    public bool IsSpaceOrEmpty { get; }
    public SubString Text { get; public set; }
    internal List`1<CssLineBox> LineBoxes { get; }
    internal List`1<CssLineBox> ParentLineBoxes { get; }
    internal Dictionary`2<CssLineBox, RRect> Rectangles { get; }
    internal List`1<CssRect> Words { get; }
    internal CssRect FirstWord { get; }
    internal CssLineBox FirstHostingLineBox { get; internal set; }
    internal CssLineBox LastHostingLineBox { get; internal set; }
    public CssBox(CssBox parentBox, HtmlTag tag);
    public HtmlContainerInt get_HtmlContainer();
    public void set_HtmlContainer(HtmlContainerInt value);
    public CssBox get_ParentBox();
    public void set_ParentBox(CssBox value);
    public List`1<CssBox> get_Boxes();
    public bool get_IsBrElement();
    public bool get_IsInline();
    public bool get_IsBlock();
    public virtual bool get_IsClickable();
    public virtual bool get_IsFixed();
    public virtual string get_HrefLink();
    public CssBox get_ContainingBlock();
    public HtmlTag get_HtmlTag();
    public bool get_IsImage();
    public bool get_IsSpaceOrEmpty();
    public SubString get_Text();
    public void set_Text(SubString value);
    internal List`1<CssLineBox> get_LineBoxes();
    internal List`1<CssLineBox> get_ParentLineBoxes();
    internal Dictionary`2<CssLineBox, RRect> get_Rectangles();
    internal List`1<CssRect> get_Words();
    internal CssRect get_FirstWord();
    internal CssLineBox get_FirstHostingLineBox();
    internal void set_FirstHostingLineBox(CssLineBox value);
    internal CssLineBox get_LastHostingLineBox();
    internal void set_LastHostingLineBox(CssLineBox value);
    public static CssBox CreateBox(HtmlTag tag, CssBox parent);
    public static CssBox CreateBox(CssBox parent, HtmlTag tag, CssBox before);
    public static CssBox CreateBlock();
    public static CssBox CreateBlock(CssBox parent, HtmlTag tag, CssBox before);
    public void PerformLayout(RGraphics g);
    public void Paint(RGraphics g);
    public void SetBeforeBox(CssBox before);
    public void SetAllBoxes(CssBox fromBox);
    public void ParseToWords();
    public virtual void Dispose();
    protected virtual void PerformLayoutImp(RGraphics g);
    internal virtual void MeasureWordsSize(RGraphics g);
    protected sealed virtual CssBoxProperties GetParent();
    private int GetIndexForList();
    private void CreateListItemBox(RGraphics g);
    internal CssRect FirstWordOccourence(CssBox b, CssLineBox line);
    internal string GetAttribute(string attribute);
    internal string GetAttribute(string attribute, string defaultValue);
    internal double GetMinimumWidth();
    private static void GetMinimumWidth_LongestWord(CssBox box, Double& maxWidth, CssRect& maxWidthWord);
    private static double GetWidthMarginDeep(CssBox box);
    internal double GetMaximumBottom(CssBox startBox, double currentMaxBottom);
    internal void GetMinMaxWidth(Double& minWidth, Double& maxWidth);
    private static void GetMinMaxSumWords(CssBox box, Double& min, Double& maxSum, Double& paddingSum, Double& marginSum);
    internal bool HasJustInlineSiblings();
    internal void InheritStyle(CssBox box, bool everything);
    protected double MarginTopCollapse(CssBoxProperties prevSibling);
    public bool BreakPage();
    private double CalculateActualRight();
    private double MarginBottomCollapse();
    internal void OffsetTop(double amount);
    protected virtual void PaintImp(RGraphics g);
    private bool IsRectVisible(RRect rect, RRect clip);
    protected void PaintBackground(RGraphics g, RRect rect, bool isFirst, bool isLast);
    private void PaintWords(RGraphics g, RPoint offset);
    protected void PaintDecoration(RGraphics g, RRect rectangle, bool isFirst, bool isLast);
    internal void OffsetRectangle(CssLineBox lineBox, double gap);
    internal void RectanglesReset();
    private void OnImageLoadComplete(RImage image, RRect rectangle, bool async);
    protected RColor GetSelectionForeBrush();
    protected RBrush GetSelectionBackBrush(RGraphics g, bool forceAlpha);
    protected virtual RFont GetCachedFont(string fontFamily, double fsize, RFontStyle st);
    protected virtual RColor GetActualColor(string colorStr);
    protected virtual RPoint GetActualLocation(string X, string Y);
    public virtual string ToString();
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssBoxFrame : CssBox {
    private CssRectImage _imageWord;
    private bool _isVideo;
    private string _videoTitle;
    private string _videoImageUrl;
    private string _videoLinkUrl;
    private ImageLoadHandler _imageLoadHandler;
    private bool _imageLoadingComplete;
    public bool IsClickable { get; }
    public string HrefLink { get; }
    public bool IsVideo { get; }
    public CssBoxFrame(CssBox parent, HtmlTag tag);
    public virtual bool get_IsClickable();
    public virtual string get_HrefLink();
    public bool get_IsVideo();
    public virtual void Dispose();
    private void LoadYoutubeDataAsync(Uri uri);
    private void OnDownloadYoutubeApiCompleted(object sender, DownloadStringCompletedEventArgs e);
    private void LoadVimeoDataAsync(Uri uri);
    private void OnDownloadVimeoApiCompleted(object sender, DownloadStringCompletedEventArgs e);
    private void HandleDataLoadFailure(Exception ex, string source);
    private void HandlePostApiCall(object sender);
    protected virtual void PaintImp(RGraphics g);
    private void DrawImage(RGraphics g, RPoint offset, RRect rect);
    private void DrawTitle(RGraphics g, RRect rect);
    private void DrawPlay(RGraphics g, RRect rect);
    internal virtual void MeasureWordsSize(RGraphics g);
    private void SetErrorBorder();
    private void OnLoadImageComplete(RImage image, RRect rectangle, bool async);
    private bool IsLayoutRequired();
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssBoxHr : CssBox {
    public CssBoxHr(CssBox parent, HtmlTag tag);
    protected virtual void PerformLayoutImp(RGraphics g);
    protected virtual void PaintImp(RGraphics g);
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssBoxImage : CssBox {
    private CssRectImage _imageWord;
    private ImageLoadHandler _imageLoadHandler;
    private bool _imageLoadingComplete;
    public RImage Image { get; }
    public CssBoxImage(CssBox parent, HtmlTag tag);
    public RImage get_Image();
    protected virtual void PaintImp(RGraphics g);
    internal virtual void MeasureWordsSize(RGraphics g);
    public virtual void Dispose();
    private void SetErrorBorder();
    private void OnLoadImageComplete(RImage image, RRect rectangle, bool async);
}
internal abstract class TheArtOfDev.HtmlRenderer.Core.Dom.CssBoxProperties : object {
    private string _backgroundColor;
    private string _backgroundGradient;
    private string _backgroundGradientAngle;
    private string _backgroundImage;
    private string _backgroundPosition;
    private string _backgroundRepeat;
    private string _borderTopWidth;
    private string _borderRightWidth;
    private string _borderBottomWidth;
    private string _borderLeftWidth;
    private string _borderTopColor;
    private string _borderRightColor;
    private string _borderBottomColor;
    private string _borderLeftColor;
    private string _borderTopStyle;
    private string _borderRightStyle;
    private string _borderBottomStyle;
    private string _borderLeftStyle;
    private string _borderSpacing;
    private string _borderCollapse;
    private string _bottom;
    private string _color;
    private string _content;
    private string _cornerNwRadius;
    private string _cornerNeRadius;
    private string _cornerSeRadius;
    private string _cornerSwRadius;
    private string _cornerRadius;
    private string _emptyCells;
    private string _direction;
    private string _display;
    private string _fontFamily;
    private string _fontSize;
    private string _fontStyle;
    private string _fontVariant;
    private string _fontWeight;
    private string _float;
    private string _height;
    private string _marginBottom;
    private string _marginLeft;
    private string _marginRight;
    private string _marginTop;
    private string _left;
    private string _lineHeight;
    private string _listStyleType;
    private string _listStyleImage;
    private string _listStylePosition;
    private string _listStyle;
    private string _overflow;
    private string _paddingLeft;
    private string _paddingBottom;
    private string _paddingRight;
    private string _paddingTop;
    private string _pageBreakInside;
    private string _right;
    private string _textAlign;
    private string _textDecoration;
    private string _textIndent;
    private string _top;
    private string _position;
    private string _verticalAlign;
    private string _width;
    private string _maxWidth;
    private string _wordSpacing;
    private string _wordBreak;
    private string _whiteSpace;
    private string _visibility;
    private RPoint _location;
    private RSize _size;
    private double _actualCornerNw;
    private double _actualCornerNe;
    private double _actualCornerSw;
    private double _actualCornerSe;
    private RColor _actualColor;
    private double _actualBackgroundGradientAngle;
    private double _actualHeight;
    private double _actualWidth;
    private double _actualPaddingTop;
    private double _actualPaddingBottom;
    private double _actualPaddingRight;
    private double _actualPaddingLeft;
    private double _actualMarginTop;
    private double _collapsedMarginTop;
    private double _actualMarginBottom;
    private double _actualMarginRight;
    private double _actualMarginLeft;
    private double _actualBorderTopWidth;
    private double _actualBorderLeftWidth;
    private double _actualBorderBottomWidth;
    private double _actualBorderRightWidth;
    private double _actualLineHeight;
    private double _actualWordSpacing;
    private double _actualTextIndent;
    private double _actualBorderSpacingHorizontal;
    private double _actualBorderSpacingVertical;
    private RColor _actualBackgroundGradient;
    private RColor _actualBorderTopColor;
    private RColor _actualBorderLeftColor;
    private RColor _actualBorderBottomColor;
    private RColor _actualBorderRightColor;
    private RColor _actualBackgroundColor;
    private RFont _actualFont;
    public string BorderBottomWidth { get; public set; }
    public string BorderLeftWidth { get; public set; }
    public string BorderRightWidth { get; public set; }
    public string BorderTopWidth { get; public set; }
    public string BorderBottomStyle { get; public set; }
    public string BorderLeftStyle { get; public set; }
    public string BorderRightStyle { get; public set; }
    public string BorderTopStyle { get; public set; }
    public string BorderBottomColor { get; public set; }
    public string BorderLeftColor { get; public set; }
    public string BorderRightColor { get; public set; }
    public string BorderTopColor { get; public set; }
    public string BorderSpacing { get; public set; }
    public string BorderCollapse { get; public set; }
    public string CornerRadius { get; public set; }
    public string CornerNwRadius { get; public set; }
    public string CornerNeRadius { get; public set; }
    public string CornerSeRadius { get; public set; }
    public string CornerSwRadius { get; public set; }
    public string MarginBottom { get; public set; }
    public string MarginLeft { get; public set; }
    public string MarginRight { get; public set; }
    public string MarginTop { get; public set; }
    public string PaddingBottom { get; public set; }
    public string PaddingLeft { get; public set; }
    public string PaddingRight { get; public set; }
    public string PaddingTop { get; public set; }
    public string PageBreakInside { get; public set; }
    public string Left { get; public set; }
    public string Top { get; public set; }
    public string Width { get; public set; }
    public string MaxWidth { get; public set; }
    public string Height { get; public set; }
    public string BackgroundColor { get; public set; }
    public string BackgroundImage { get; public set; }
    public string BackgroundPosition { get; public set; }
    public string BackgroundRepeat { get; public set; }
    public string BackgroundGradient { get; public set; }
    public string BackgroundGradientAngle { get; public set; }
    public string Color { get; public set; }
    public string Content { get; public set; }
    public string Display { get; public set; }
    public string Direction { get; public set; }
    public string EmptyCells { get; public set; }
    public string Float { get; public set; }
    public string Position { get; public set; }
    public string LineHeight { get; public set; }
    public string VerticalAlign { get; public set; }
    public string TextIndent { get; public set; }
    public string TextAlign { get; public set; }
    public string TextDecoration { get; public set; }
    public string WhiteSpace { get; public set; }
    public string Visibility { get; public set; }
    public string WordSpacing { get; public set; }
    public string WordBreak { get; public set; }
    public string FontFamily { get; public set; }
    public string FontSize { get; public set; }
    public string FontStyle { get; public set; }
    public string FontVariant { get; public set; }
    public string FontWeight { get; public set; }
    public string ListStyle { get; public set; }
    public string Overflow { get; public set; }
    public string ListStylePosition { get; public set; }
    public string ListStyleImage { get; public set; }
    public string ListStyleType { get; public set; }
    public RPoint Location { get; public set; }
    public RSize Size { get; public set; }
    public RRect Bounds { get; }
    public double AvailableWidth { get; }
    public double ActualRight { get; public set; }
    public double ActualBottom { get; public set; }
    public double ClientLeft { get; }
    public double ClientTop { get; }
    public double ClientRight { get; }
    public double ClientBottom { get; }
    public RRect ClientRectangle { get; }
    public double ActualHeight { get; }
    public double ActualWidth { get; }
    public double ActualPaddingTop { get; }
    public double ActualPaddingLeft { get; }
    public double ActualPaddingBottom { get; }
    public double ActualPaddingRight { get; }
    public double ActualMarginTop { get; }
    public double CollapsedMarginTop { get; public set; }
    public double ActualMarginLeft { get; }
    public double ActualMarginBottom { get; }
    public double ActualMarginRight { get; }
    public double ActualBorderTopWidth { get; }
    public double ActualBorderLeftWidth { get; }
    public double ActualBorderBottomWidth { get; }
    public double ActualBorderRightWidth { get; }
    public RColor ActualBorderTopColor { get; }
    public RColor ActualBorderLeftColor { get; }
    public RColor ActualBorderBottomColor { get; }
    public RColor ActualBorderRightColor { get; }
    public double ActualCornerNw { get; }
    public double ActualCornerNe { get; }
    public double ActualCornerSe { get; }
    public double ActualCornerSw { get; }
    public bool IsRounded { get; }
    public double ActualWordSpacing { get; }
    public RColor ActualColor { get; }
    public RColor ActualBackgroundColor { get; }
    public RColor ActualBackgroundGradient { get; }
    public double ActualBackgroundGradientAngle { get; }
    public RFont ActualParentFont { get; }
    public RFont ActualFont { get; }
    public double ActualLineHeight { get; }
    public double ActualTextIndent { get; }
    public double ActualBorderSpacingHorizontal { get; }
    public double ActualBorderSpacingVertical { get; }
    public string get_BorderBottomWidth();
    public void set_BorderBottomWidth(string value);
    public string get_BorderLeftWidth();
    public void set_BorderLeftWidth(string value);
    public string get_BorderRightWidth();
    public void set_BorderRightWidth(string value);
    public string get_BorderTopWidth();
    public void set_BorderTopWidth(string value);
    public string get_BorderBottomStyle();
    public void set_BorderBottomStyle(string value);
    public string get_BorderLeftStyle();
    public void set_BorderLeftStyle(string value);
    public string get_BorderRightStyle();
    public void set_BorderRightStyle(string value);
    public string get_BorderTopStyle();
    public void set_BorderTopStyle(string value);
    public string get_BorderBottomColor();
    public void set_BorderBottomColor(string value);
    public string get_BorderLeftColor();
    public void set_BorderLeftColor(string value);
    public string get_BorderRightColor();
    public void set_BorderRightColor(string value);
    public string get_BorderTopColor();
    public void set_BorderTopColor(string value);
    public string get_BorderSpacing();
    public void set_BorderSpacing(string value);
    public string get_BorderCollapse();
    public void set_BorderCollapse(string value);
    public string get_CornerRadius();
    public void set_CornerRadius(string value);
    public string get_CornerNwRadius();
    public void set_CornerNwRadius(string value);
    public string get_CornerNeRadius();
    public void set_CornerNeRadius(string value);
    public string get_CornerSeRadius();
    public void set_CornerSeRadius(string value);
    public string get_CornerSwRadius();
    public void set_CornerSwRadius(string value);
    public string get_MarginBottom();
    public void set_MarginBottom(string value);
    public string get_MarginLeft();
    public void set_MarginLeft(string value);
    public string get_MarginRight();
    public void set_MarginRight(string value);
    public string get_MarginTop();
    public void set_MarginTop(string value);
    public string get_PaddingBottom();
    public void set_PaddingBottom(string value);
    public string get_PaddingLeft();
    public void set_PaddingLeft(string value);
    public string get_PaddingRight();
    public void set_PaddingRight(string value);
    public string get_PaddingTop();
    public void set_PaddingTop(string value);
    public string get_PageBreakInside();
    public void set_PageBreakInside(string value);
    public string get_Left();
    public void set_Left(string value);
    public string get_Top();
    public void set_Top(string value);
    public string get_Width();
    public void set_Width(string value);
    public string get_MaxWidth();
    public void set_MaxWidth(string value);
    public string get_Height();
    public void set_Height(string value);
    public string get_BackgroundColor();
    public void set_BackgroundColor(string value);
    public string get_BackgroundImage();
    public void set_BackgroundImage(string value);
    public string get_BackgroundPosition();
    public void set_BackgroundPosition(string value);
    public string get_BackgroundRepeat();
    public void set_BackgroundRepeat(string value);
    public string get_BackgroundGradient();
    public void set_BackgroundGradient(string value);
    public string get_BackgroundGradientAngle();
    public void set_BackgroundGradientAngle(string value);
    public string get_Color();
    public void set_Color(string value);
    public string get_Content();
    public void set_Content(string value);
    public string get_Display();
    public void set_Display(string value);
    public string get_Direction();
    public void set_Direction(string value);
    public string get_EmptyCells();
    public void set_EmptyCells(string value);
    public string get_Float();
    public void set_Float(string value);
    public string get_Position();
    public void set_Position(string value);
    public string get_LineHeight();
    public void set_LineHeight(string value);
    public string get_VerticalAlign();
    public void set_VerticalAlign(string value);
    public string get_TextIndent();
    public void set_TextIndent(string value);
    public string get_TextAlign();
    public void set_TextAlign(string value);
    public string get_TextDecoration();
    public void set_TextDecoration(string value);
    public string get_WhiteSpace();
    public void set_WhiteSpace(string value);
    public string get_Visibility();
    public void set_Visibility(string value);
    public string get_WordSpacing();
    public void set_WordSpacing(string value);
    public string get_WordBreak();
    public void set_WordBreak(string value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_FontSize();
    public void set_FontSize(string value);
    public string get_FontStyle();
    public void set_FontStyle(string value);
    public string get_FontVariant();
    public void set_FontVariant(string value);
    public string get_FontWeight();
    public void set_FontWeight(string value);
    public string get_ListStyle();
    public void set_ListStyle(string value);
    public string get_Overflow();
    public void set_Overflow(string value);
    public string get_ListStylePosition();
    public void set_ListStylePosition(string value);
    public string get_ListStyleImage();
    public void set_ListStyleImage(string value);
    public string get_ListStyleType();
    public void set_ListStyleType(string value);
    public RPoint get_Location();
    public void set_Location(RPoint value);
    public RSize get_Size();
    public void set_Size(RSize value);
    public RRect get_Bounds();
    public double get_AvailableWidth();
    public double get_ActualRight();
    public void set_ActualRight(double value);
    public double get_ActualBottom();
    public void set_ActualBottom(double value);
    public double get_ClientLeft();
    public double get_ClientTop();
    public double get_ClientRight();
    public double get_ClientBottom();
    public RRect get_ClientRectangle();
    public double get_ActualHeight();
    public double get_ActualWidth();
    public double get_ActualPaddingTop();
    public double get_ActualPaddingLeft();
    public double get_ActualPaddingBottom();
    public double get_ActualPaddingRight();
    public double get_ActualMarginTop();
    public double get_CollapsedMarginTop();
    public void set_CollapsedMarginTop(double value);
    public double get_ActualMarginLeft();
    public double get_ActualMarginBottom();
    public double get_ActualMarginRight();
    public double get_ActualBorderTopWidth();
    public double get_ActualBorderLeftWidth();
    public double get_ActualBorderBottomWidth();
    public double get_ActualBorderRightWidth();
    public RColor get_ActualBorderTopColor();
    protected abstract virtual RPoint GetActualLocation(string X, string Y);
    protected abstract virtual RColor GetActualColor(string colorStr);
    public RColor get_ActualBorderLeftColor();
    public RColor get_ActualBorderBottomColor();
    public RColor get_ActualBorderRightColor();
    public double get_ActualCornerNw();
    public double get_ActualCornerNe();
    public double get_ActualCornerSe();
    public double get_ActualCornerSw();
    public bool get_IsRounded();
    public double get_ActualWordSpacing();
    public RColor get_ActualColor();
    public RColor get_ActualBackgroundColor();
    public RColor get_ActualBackgroundGradient();
    public double get_ActualBackgroundGradientAngle();
    public RFont get_ActualParentFont();
    public RFont get_ActualFont();
    protected abstract virtual RFont GetCachedFont(string fontFamily, double fsize, RFontStyle st);
    public double get_ActualLineHeight();
    public double get_ActualTextIndent();
    public double get_ActualBorderSpacingHorizontal();
    public double get_ActualBorderSpacingVertical();
    protected abstract virtual CssBoxProperties GetParent();
    public double GetEmHeight();
    protected string NoEms(string length);
    protected void SetAllBorders(string style, string width, string color);
    protected void MeasureWordSpacing(RGraphics g);
    protected void InheritStyle(CssBox p, bool everything);
}
internal static class TheArtOfDev.HtmlRenderer.Core.Dom.CssLayoutEngine : object {
    public static void MeasureImageSize(CssRectImage imageWord);
    public static void CreateLineBoxes(RGraphics g, CssBox blockBox);
    public static void ApplyCellVerticalAlignment(RGraphics g, CssBox cell);
    private static void FlowBox(RGraphics g, CssBox blockbox, CssBox box, double limitRight, double linespacing, double startx, CssLineBox& line, Double& curx, Double& cury, Double& maxRight, Double& maxbottom);
    private static void AdjustAbsolutePosition(CssBox box, double left, double top);
    private static void BubbleRectangles(CssBox box, CssLineBox line);
    private static void ApplyHorizontalAlignment(RGraphics g, CssLineBox lineBox);
    private static void ApplyRightToLeft(CssBox blockBox, CssLineBox lineBox);
    private static void ApplyRightToLeftOnLine(CssLineBox line);
    private static void ApplyRightToLeftOnSingleBox(CssLineBox lineBox, CssBox box);
    private static void ApplyVerticalAlignment(RGraphics g, CssLineBox lineBox);
    private static void ApplyJustifyAlignment(RGraphics g, CssLineBox lineBox);
    private static void ApplyCenterAlignment(RGraphics g, CssLineBox line);
    private static void ApplyRightAlignment(RGraphics g, CssLineBox line);
    private static void ApplyLeftAlignment(RGraphics g, CssLineBox line);
    private static List`1<T> ToList(IEnumerable`1<T> collection);
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssLayoutEngineTable : object {
    private CssBox _tableBox;
    private CssBox _caption;
    private CssBox _headerBox;
    private CssBox _footerBox;
    private List`1<CssBox> _bodyrows;
    private List`1<CssBox> _columns;
    private List`1<CssBox> _allRows;
    private int _columnCount;
    private bool _widthSpecified;
    private Double[] _columnWidths;
    private Double[] _columnMinWidths;
    private CssLayoutEngineTable(CssBox tableBox);
    public static double GetTableSpacing(CssBox tableBox);
    public static void PerformLayout(RGraphics g, CssBox tableBox);
    private void Layout(RGraphics g);
    private void AssignBoxKinds();
    private void InsertEmptyBoxes();
    private double CalculateCountAndWidth();
    private void DetermineMissingColumnWidths(double availCellSpace);
    private void EnforceMaximumSize();
    private void EnforceMinimumSize();
    private void LayoutCells(RGraphics g);
    private double GetSpannedMinWidth(CssBox row, CssBox cell, int realcolindex, int colspan);
    private static int GetCellRealColumnIndex(CssBox row, CssBox cell);
    private double GetCellWidth(int column, CssBox b);
    private static int GetColSpan(CssBox b);
    private static int GetRowSpan(CssBox b);
    private static void MeasureWords(CssBox box, RGraphics g);
    private bool CanReduceWidth();
    private bool CanReduceWidth(int columnIndex);
    private double GetAvailableTableWidth();
    private double GetMaxTableWidth();
    private void GetColumnsMinMaxWidthByContent(bool onlyNans, Double[]& minFullWidths, Double[]& maxFullWidths);
    private double GetAvailableCellWidth();
    private double GetWidthSum();
    private static int GetSpan(CssBox b);
    private Double[] GetColumnMinWidths();
    private double GetHorizontalSpacing();
    private static double GetHorizontalSpacing(CssBox box);
    private double GetVerticalSpacing();
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssLength : object {
    private double _number;
    private bool _isRelative;
    private CssUnit _unit;
    private string _length;
    private bool _isPercentage;
    private bool _hasError;
    public double Number { get; }
    public bool HasError { get; }
    public bool IsPercentage { get; }
    public bool IsRelative { get; }
    public CssUnit Unit { get; }
    public string Length { get; }
    public CssLength(string length);
    public double get_Number();
    public bool get_HasError();
    public bool get_IsPercentage();
    public bool get_IsRelative();
    public CssUnit get_Unit();
    public string get_Length();
    public CssLength ConvertEmToPoints(double emSize);
    public CssLength ConvertEmToPixels(double pixelFactor);
    public virtual string ToString();
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssLineBox : object {
    private List`1<CssRect> _words;
    private CssBox _ownerBox;
    private Dictionary`2<CssBox, RRect> _rects;
    private List`1<CssBox> _relatedBoxes;
    public List`1<CssBox> RelatedBoxes { get; }
    public List`1<CssRect> Words { get; }
    public CssBox OwnerBox { get; }
    public Dictionary`2<CssBox, RRect> Rectangles { get; }
    public double LineHeight { get; }
    public double LineBottom { get; }
    public CssLineBox(CssBox ownerBox);
    public List`1<CssBox> get_RelatedBoxes();
    public List`1<CssRect> get_Words();
    public CssBox get_OwnerBox();
    public Dictionary`2<CssBox, RRect> get_Rectangles();
    public double get_LineHeight();
    public double get_LineBottom();
    internal void ReportExistanceOf(CssRect word);
    internal List`1<CssRect> WordsOf(CssBox box);
    internal void UpdateRectangle(CssBox box, double x, double y, double r, double b);
    internal void AssignRectanglesToBoxes();
    internal void SetBaseLine(RGraphics g, CssBox b, double baseline);
    public bool IsLastSelectedWord(CssRect word);
    public virtual string ToString();
}
internal abstract class TheArtOfDev.HtmlRenderer.Core.Dom.CssRect : object {
    private CssBox _ownerBox;
    private RRect _rect;
    private SelectionHandler _selection;
    public CssBox OwnerBox { get; }
    public RRect Rectangle { get; public set; }
    public double Left { get; public set; }
    public double Top { get; public set; }
    public double Width { get; public set; }
    public double FullWidth { get; }
    public double ActualWordSpacing { get; }
    public double Height { get; public set; }
    public double Right { get; public set; }
    public double Bottom { get; public set; }
    public SelectionHandler Selection { get; public set; }
    public bool HasSpaceBefore { get; }
    public bool HasSpaceAfter { get; }
    public RImage Image { get; public set; }
    public bool IsImage { get; }
    public bool IsSpaces { get; }
    public bool IsLineBreak { get; }
    public string Text { get; }
    public bool Selected { get; }
    public int SelectedStartIndex { get; }
    public int SelectedEndIndexOffset { get; }
    public double SelectedStartOffset { get; }
    public double SelectedEndOffset { get; }
    internal double LeftGlyphPadding { get; }
    protected CssRect(CssBox owner);
    public CssBox get_OwnerBox();
    public RRect get_Rectangle();
    public void set_Rectangle(RRect value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Top();
    public void set_Top(double value);
    public double get_Width();
    public void set_Width(double value);
    public double get_FullWidth();
    public double get_ActualWordSpacing();
    public double get_Height();
    public void set_Height(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public SelectionHandler get_Selection();
    public void set_Selection(SelectionHandler value);
    public virtual bool get_HasSpaceBefore();
    public virtual bool get_HasSpaceAfter();
    public virtual RImage get_Image();
    public virtual void set_Image(RImage value);
    public virtual bool get_IsImage();
    public virtual bool get_IsSpaces();
    public virtual bool get_IsLineBreak();
    public virtual string get_Text();
    public bool get_Selected();
    public int get_SelectedStartIndex();
    public int get_SelectedEndIndexOffset();
    public double get_SelectedStartOffset();
    public double get_SelectedEndOffset();
    internal double get_LeftGlyphPadding();
    public virtual string ToString();
    public bool BreakPage();
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssRectImage : CssRect {
    private RImage _image;
    private RRect _imageRectangle;
    public RImage Image { get; public set; }
    public bool IsImage { get; }
    public RRect ImageRectangle { get; public set; }
    public CssRectImage(CssBox owner);
    public virtual RImage get_Image();
    public virtual void set_Image(RImage value);
    public virtual bool get_IsImage();
    public RRect get_ImageRectangle();
    public void set_ImageRectangle(RRect value);
    public virtual string ToString();
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssRectWord : CssRect {
    private string _text;
    private bool _hasSpaceBefore;
    private bool _hasSpaceAfter;
    public bool HasSpaceBefore { get; }
    public bool HasSpaceAfter { get; }
    public bool IsSpaces { get; }
    public bool IsLineBreak { get; }
    public string Text { get; }
    public CssRectWord(CssBox owner, string text, bool hasSpaceBefore, bool hasSpaceAfter);
    public virtual bool get_HasSpaceBefore();
    public virtual bool get_HasSpaceAfter();
    public virtual bool get_IsSpaces();
    public virtual bool get_IsLineBreak();
    public virtual string get_Text();
    public virtual string ToString();
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.CssSpacingBox : CssBox {
    private CssBox _extendedBox;
    private int _startRow;
    private int _endRow;
    public CssBox ExtendedBox { get; }
    public int StartRow { get; }
    public int EndRow { get; }
    public CssSpacingBox(CssBox tableBox, CssBox& extendedBox, int startRow);
    public CssBox get_ExtendedBox();
    public int get_StartRow();
    public int get_EndRow();
}
internal enum TheArtOfDev.HtmlRenderer.Core.Dom.CssUnit : Enum {
    public int value__;
    public static CssUnit None;
    public static CssUnit Ems;
    public static CssUnit Pixels;
    public static CssUnit Ex;
    public static CssUnit Inches;
    public static CssUnit Centimeters;
    public static CssUnit Milimeters;
    public static CssUnit Points;
    public static CssUnit Picas;
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.HoverBoxBlock : object {
    private CssBox _cssBox;
    private CssBlock _cssBlock;
    public CssBox CssBox { get; }
    public CssBlock CssBlock { get; }
    public HoverBoxBlock(CssBox cssBox, CssBlock cssBlock);
    public CssBox get_CssBox();
    public CssBlock get_CssBlock();
}
internal class TheArtOfDev.HtmlRenderer.Core.Dom.HtmlTag : object {
    private string _name;
    private bool _isSingle;
    private Dictionary`2<string, string> _attributes;
    public string Name { get; }
    public Dictionary`2<string, string> Attributes { get; }
    public bool IsSingle { get; }
    public HtmlTag(string name, bool isSingle, Dictionary`2<string, string> attributes);
    public string get_Name();
    public Dictionary`2<string, string> get_Attributes();
    public bool get_IsSingle();
    public bool HasAttributes();
    public bool HasAttribute(string attribute);
    public string TryGetAttribute(string attribute, string defaultValue);
    public virtual string ToString();
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.CssBlock : object {
    private string _class;
    private Dictionary`2<string, string> _properties;
    private List`1<CssBlockSelectorItem> _selectors;
    private bool _hover;
    public string Class { get; }
    public List`1<CssBlockSelectorItem> Selectors { get; }
    public IDictionary`2<string, string> Properties { get; }
    public bool Hover { get; }
    public CssBlock(string class, Dictionary`2<string, string> properties, List`1<CssBlockSelectorItem> selectors, bool hover);
    public string get_Class();
    public List`1<CssBlockSelectorItem> get_Selectors();
    public IDictionary`2<string, string> get_Properties();
    public bool get_Hover();
    public void Merge(CssBlock other);
    public CssBlock Clone();
    public bool Equals(CssBlock other);
    public bool EqualsSelector(CssBlock other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.CssBlockSelectorItem : ValueType {
    private string _class;
    private bool _directParent;
    public string Class { get; }
    public bool DirectParent { get; }
    public CssBlockSelectorItem(string class, bool directParent);
    public string get_Class();
    public bool get_DirectParent();
    public virtual string ToString();
}
public enum TheArtOfDev.HtmlRenderer.Core.Entities.HtmlGenerationStyle : Enum {
    public int value__;
    public static HtmlGenerationStyle None;
    public static HtmlGenerationStyle Inline;
    public static HtmlGenerationStyle InHeader;
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.HtmlImageLoadCallback : MulticastDelegate {
    public HtmlImageLoadCallback(object object, IntPtr method);
    public virtual void Invoke(string path, object image, RRect imageRectangle);
    public virtual IAsyncResult BeginInvoke(string path, object image, RRect imageRectangle, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.HtmlImageLoadEventArgs : EventArgs {
    private bool _handled;
    private string _src;
    private Dictionary`2<string, string> _attributes;
    private HtmlImageLoadCallback _callback;
    public string Src { get; }
    public Dictionary`2<string, string> Attributes { get; }
    public bool Handled { get; public set; }
    internal HtmlImageLoadEventArgs(string src, Dictionary`2<string, string> attributes, HtmlImageLoadCallback callback);
    public string get_Src();
    public Dictionary`2<string, string> get_Attributes();
    public bool get_Handled();
    public void set_Handled(bool value);
    public void Callback();
    public void Callback(string path);
    public void Callback(string path, double x, double y, double width, double height);
    public void Callback(object image);
    public void Callback(object image, double x, double y, double width, double height);
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.HtmlLinkClickedEventArgs : EventArgs {
    private string _link;
    private Dictionary`2<string, string> _attributes;
    private bool _handled;
    public string Link { get; }
    public Dictionary`2<string, string> Attributes { get; }
    public bool Handled { get; public set; }
    public HtmlLinkClickedEventArgs(string link, Dictionary`2<string, string> attributes);
    public string get_Link();
    public Dictionary`2<string, string> get_Attributes();
    public bool get_Handled();
    public void set_Handled(bool value);
    public virtual string ToString();
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.HtmlLinkClickedException : Exception {
    public HtmlLinkClickedException(string message);
    public HtmlLinkClickedException(string message, Exception innerException);
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.HtmlRefreshEventArgs : EventArgs {
    private bool _layout;
    public bool Layout { get; }
    public HtmlRefreshEventArgs(bool layout);
    public bool get_Layout();
    public virtual string ToString();
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.HtmlRenderErrorEventArgs : EventArgs {
    private HtmlRenderErrorType _type;
    private string _message;
    private Exception _exception;
    public HtmlRenderErrorType Type { get; }
    public string Message { get; }
    public Exception Exception { get; }
    public HtmlRenderErrorEventArgs(HtmlRenderErrorType type, string message, Exception exception);
    public HtmlRenderErrorType get_Type();
    public string get_Message();
    public Exception get_Exception();
    public virtual string ToString();
}
public enum TheArtOfDev.HtmlRenderer.Core.Entities.HtmlRenderErrorType : Enum {
    public int value__;
    public static HtmlRenderErrorType General;
    public static HtmlRenderErrorType CssParsing;
    public static HtmlRenderErrorType HtmlParsing;
    public static HtmlRenderErrorType Image;
    public static HtmlRenderErrorType Paint;
    public static HtmlRenderErrorType Layout;
    public static HtmlRenderErrorType KeyboardMouse;
    public static HtmlRenderErrorType Iframe;
    public static HtmlRenderErrorType ContextMenu;
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.HtmlScrollEventArgs : EventArgs {
    private RPoint _location;
    public double X { get; }
    public double Y { get; }
    public HtmlScrollEventArgs(RPoint location);
    public double get_X();
    public double get_Y();
    public virtual string ToString();
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.HtmlStylesheetLoadEventArgs : EventArgs {
    private string _src;
    private Dictionary`2<string, string> _attributes;
    private string _setSrc;
    private string _setStyleSheet;
    private CssData _setStyleSheetData;
    public string Src { get; }
    public Dictionary`2<string, string> Attributes { get; }
    public string SetSrc { get; public set; }
    public string SetStyleSheet { get; public set; }
    public CssData SetStyleSheetData { get; public set; }
    internal HtmlStylesheetLoadEventArgs(string src, Dictionary`2<string, string> attributes);
    public string get_Src();
    public Dictionary`2<string, string> get_Attributes();
    public string get_SetSrc();
    public void set_SetSrc(string value);
    public string get_SetStyleSheet();
    public void set_SetStyleSheet(string value);
    public CssData get_SetStyleSheetData();
    public void set_SetStyleSheetData(CssData value);
}
public class TheArtOfDev.HtmlRenderer.Core.Entities.LinkElementData`1 : object {
    private string _id;
    private string _href;
    private T _rectangle;
    public string Id { get; }
    public string Href { get; }
    public T Rectangle { get; }
    public bool IsAnchor { get; }
    public string AnchorId { get; }
    public LinkElementData`1(string id, string href, T rectangle);
    public string get_Id();
    public string get_Href();
    public T get_Rectangle();
    public bool get_IsAnchor();
    public string get_AnchorId();
    public virtual string ToString();
}
internal static class TheArtOfDev.HtmlRenderer.Core.Handlers.BackgroundImageDrawHandler : object {
    public static void DrawBackgroundImage(RGraphics g, CssBox box, ImageLoadHandler imageLoadHandler, RRect rectangle);
    private static RPoint GetLocation(string backgroundPosition, RRect rectangle, RSize imgSize);
    private static void DrawRepeatX(RGraphics g, ImageLoadHandler imageLoadHandler, RRect rectangle, RRect srcRect, RRect destRect, RSize imgSize);
    private static void DrawRepeatY(RGraphics g, ImageLoadHandler imageLoadHandler, RRect rectangle, RRect srcRect, RRect destRect, RSize imgSize);
    private static void DrawRepeat(RGraphics g, ImageLoadHandler imageLoadHandler, RRect rectangle, RRect srcRect, RRect destRect, RSize imgSize);
}
internal static class TheArtOfDev.HtmlRenderer.Core.Handlers.BordersDrawHandler : object {
    private static RPoint[] _borderPts;
    private static BordersDrawHandler();
    public static void DrawBoxBorders(RGraphics g, CssBox box, RRect rect, bool isFirst, bool isLast);
    public static void DrawBorder(Border border, RGraphics g, CssBox box, RBrush brush, RRect rectangle);
    private static void DrawBorder(Border border, CssBox box, RGraphics g, RRect rect, bool isLineStart, bool isLineEnd);
    private static void SetInOutsetRectanglePoints(Border border, CssBox b, RRect r, bool isLineStart, bool isLineEnd);
    private static RGraphicsPath GetRoundedBorderPath(RGraphics g, Border border, CssBox b, RRect r);
    private static RPen GetPen(RGraphics g, string style, RColor color, double width);
    private static RColor GetColor(Border border, CssBoxProperties box, string style);
    private static double GetWidth(Border border, CssBoxProperties box);
    private static string GetStyle(Border border, CssBoxProperties box);
    private static RColor Darken(RColor c);
}
internal class TheArtOfDev.HtmlRenderer.Core.Handlers.ContextMenuHandler : object {
    private static string _selectAll;
    private static string _copy;
    private static string _copyLink;
    private static string _openLink;
    private static string _copyImageLink;
    private static string _copyImage;
    private static string _saveImage;
    private static string _openVideo;
    private static string _copyVideoUrl;
    private SelectionHandler _selectionHandler;
    private HtmlContainerInt _htmlContainer;
    private RContextMenu _contextMenu;
    private RControl _parentControl;
    private CssRect _currentRect;
    private CssBox _currentLink;
    private static ContextMenuHandler();
    public ContextMenuHandler(SelectionHandler selectionHandler, HtmlContainerInt htmlContainer);
    public void ShowContextMenu(RControl parent, CssRect rect, CssBox link);
    public sealed virtual void Dispose();
    private void DisposeContextMenu();
    private void OnOpenLinkClick(object sender, EventArgs eventArgs);
    private void OnCopyLinkClick(object sender, EventArgs eventArgs);
    private void OnSaveImageClick(object sender, EventArgs eventArgs);
    private void OnCopyImageLinkClick(object sender, EventArgs eventArgs);
    private void OnCopyImageClick(object sender, EventArgs eventArgs);
    private void OnCopyClick(object sender, EventArgs eventArgs);
    private void OnSelectAllClick(object sender, EventArgs eventArgs);
}
public class TheArtOfDev.HtmlRenderer.Core.Handlers.DownloadFileAsyncCallback : MulticastDelegate {
    public DownloadFileAsyncCallback(object object, IntPtr method);
    public virtual void Invoke(Uri imageUri, string filePath, Exception error, bool canceled);
    public virtual IAsyncResult BeginInvoke(Uri imageUri, string filePath, Exception error, bool canceled, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class TheArtOfDev.HtmlRenderer.Core.Handlers.FontsHandler : object {
    private RAdapter _adapter;
    private Dictionary`2<string, string> _fontsMapping;
    private Dictionary`2<string, RFontFamily> _existingFontFamilies;
    private Dictionary`2<string, Dictionary`2<double, Dictionary`2<RFontStyle, RFont>>> _fontsCache;
    public FontsHandler(RAdapter adapter);
    public bool IsFontExists(string family);
    public void AddFontFamily(RFontFamily fontFamily);
    public void AddFontFamilyMapping(string fromFamily, string toFamily);
    public RFont GetCachedFont(string family, double size, RFontStyle style);
    private RFont TryGetFont(string family, double size, RFontStyle style);
    private RFont CreateFont(string family, double size, RFontStyle style);
}
internal class TheArtOfDev.HtmlRenderer.Core.Handlers.ImageDownloader : object {
    private List`1<WebClient> _clients;
    private Dictionary`2<string, List`1<DownloadFileAsyncCallback>> _imageDownloadCallbacks;
    public void DownloadImage(Uri imageUri, string filePath, bool async, DownloadFileAsyncCallback cachedFileCallback);
    public sealed virtual void Dispose();
    private void DownloadImageFromUrl(Uri source, string tempPath, string filePath);
    private void DownloadImageFromUrlAsync(object data);
    private void OnDownloadImageAsyncCompleted(object sender, AsyncCompletedEventArgs e);
    private void OnDownloadImageCompleted(WebClient client, Uri source, string tempPath, string filePath, Exception error, bool cancelled);
    private void ReleaseObjects();
}
internal class TheArtOfDev.HtmlRenderer.Core.Handlers.ImageLoadHandler : object {
    private HtmlContainerInt _htmlContainer;
    private ActionInt`3<RImage, RRect, bool> _loadCompleteCallback;
    private FileStream _imageFileStream;
    private RImage _image;
    private RRect _imageRectangle;
    private bool _asyncCallback;
    private bool _releaseImageObject;
    private bool _disposed;
    public RImage Image { get; }
    public RRect Rectangle { get; }
    public ImageLoadHandler(HtmlContainerInt htmlContainer, ActionInt`3<RImage, RRect, bool> loadCompleteCallback);
    public RImage get_Image();
    public RRect get_Rectangle();
    public void LoadImage(string src, Dictionary`2<string, string> attributes);
    public sealed virtual void Dispose();
    private void OnHtmlImageLoadEventCallback(string path, object image, RRect imageRectangle);
    private void SetFromInlineData(string src);
    private RImage GetImageFromData(string src);
    private void SetImageFromPath(string path);
    private void SetImageFromFile(FileInfo source);
    private void LoadImageFromFile(string source);
    private void SetImageFromUrl(Uri source);
    private void OnDownloadImageCompleted(Uri imageUri, string filePath, Exception error, bool canceled);
    private void ImageLoadComplete(bool async);
    private void ReleaseObjects();
}
internal class TheArtOfDev.HtmlRenderer.Core.Handlers.SelectionHandler : object {
    private CssBox _root;
    private ContextMenuHandler _contextMenuHandler;
    private RPoint _selectionStartPoint;
    private CssRect _selectionStart;
    private CssRect _selectionEnd;
    private int _selectionStartIndex;
    private int _selectionEndIndex;
    private double _selectionStartOffset;
    private double _selectionEndOffset;
    private bool _backwardSelection;
    private bool _inSelection;
    private bool _isDoubleClickSelect;
    private bool _mouseDownInControl;
    private bool _mouseDownOnSelectedWord;
    private bool _cursorChanged;
    private DateTime _lastMouseDown;
    private object _dragDropData;
    public SelectionHandler(CssBox root);
    public void SelectAll(RControl control);
    public void SelectWord(RControl control, RPoint loc);
    public void HandleMouseDown(RControl parent, RPoint loc, bool isMouseInContainer);
    public bool HandleMouseUp(RControl parent, bool leftMouseButton);
    public void HandleMouseMove(RControl parent, RPoint loc);
    public void HandleMouseLeave(RControl parent);
    public void CopySelectedHtml();
    public string GetSelectedText();
    public string GetSelectedHtml();
    public int GetSelectingStartIndex(CssRect word);
    public int GetSelectedEndIndexOffset(CssRect word);
    public double GetSelectedStartOffset(CssRect word);
    public double GetSelectedEndOffset(CssRect word);
    public void ClearSelection();
    public sealed virtual void Dispose();
    private void HandleSelection(RControl control, RPoint loc, bool allowPartialSelect);
    private static void ClearSelection(CssBox box);
    private void StartDragDrop(RControl control);
    public void SelectAllWords(CssBox box);
    private bool CheckNonEmptySelection(RPoint loc, bool allowPartialSelect);
    private void SelectWordsInRange(CssBox root, CssRect selectionStart, CssRect selectionEnd);
    private bool SelectWordsInRange(CssBox box, CssRect selectionStart, CssRect selectionEnd, Boolean& inSelection);
    private void CalculateWordCharIndexAndOffset(RControl control, CssRect word, RPoint loc, bool selectionStart);
    private static void CalculateWordCharIndexAndOffset(RControl control, CssRect word, RPoint loc, bool inclusive, Int32& selectionIndex, Double& selectionOffset);
    private void CheckSelectionDirection();
}
internal static class TheArtOfDev.HtmlRenderer.Core.Handlers.StylesheetLoadHandler : object {
    public static void LoadStylesheet(HtmlContainerInt htmlContainer, string src, Dictionary`2<string, string> attributes, String& stylesheet, CssData& stylesheetData);
    private static string LoadStylesheet(HtmlContainerInt htmlContainer, string src);
    private static string LoadStylesheetFromFile(HtmlContainerInt htmlContainer, string path);
    private static string LoadStylesheetFromUri(HtmlContainerInt htmlContainer, Uri uri);
    private static string CorrectRelativeUrls(string stylesheet, Uri baseUri);
}
public class TheArtOfDev.HtmlRenderer.Core.HtmlContainerInt : object {
    private RAdapter _adapter;
    private CssParser _cssParser;
    private CssBox _root;
    private List`1<HoverBoxBlock> _hoverBoxes;
    private SelectionHandler _selectionHandler;
    private ImageDownloader _imageDownloader;
    private RColor _selectionForeColor;
    private RColor _selectionBackColor;
    private CssData _cssData;
    private bool _isSelectionEnabled;
    private bool _isContextMenuEnabled;
    private bool _avoidGeometryAntialias;
    private bool _avoidAsyncImagesLoading;
    private bool _avoidImagesLateLoading;
    private bool _loadComplete;
    private RPoint _location;
    private RSize _maxSize;
    private RPoint _scrollOffset;
    private RSize _actualSize;
    private int _marginTop;
    private int _marginBottom;
    private int _marginLeft;
    private int _marginRight;
    private EventHandler LoadComplete;
    private EventHandler`1<HtmlLinkClickedEventArgs> LinkClicked;
    private EventHandler`1<HtmlRefreshEventArgs> Refresh;
    private EventHandler`1<HtmlScrollEventArgs> ScrollChange;
    private EventHandler`1<HtmlRenderErrorEventArgs> RenderError;
    private EventHandler`1<HtmlStylesheetLoadEventArgs> StylesheetLoad;
    private EventHandler`1<HtmlImageLoadEventArgs> ImageLoad;
    [CompilerGeneratedAttribute]
private RSize <PageSize>k__BackingField;
    internal RAdapter Adapter { get; }
    internal CssParser CssParser { get; }
    public CssData CssData { get; }
    public bool AvoidGeometryAntialias { get; public set; }
    public bool AvoidAsyncImagesLoading { get; public set; }
    public bool AvoidImagesLateLoading { get; public set; }
    public bool IsSelectionEnabled { get; public set; }
    public bool IsContextMenuEnabled { get; public set; }
    public RPoint ScrollOffset { get; public set; }
    public RPoint Location { get; public set; }
    public RSize MaxSize { get; public set; }
    public RSize ActualSize { get; public set; }
    public RSize PageSize { get; public set; }
    public int MarginTop { get; public set; }
    public int MarginBottom { get; public set; }
    public int MarginLeft { get; public set; }
    public int MarginRight { get; public set; }
    public string SelectedText { get; }
    public string SelectedHtml { get; }
    internal CssBox Root { get; }
    internal RColor SelectionForeColor { get; internal set; }
    internal RColor SelectionBackColor { get; internal set; }
    public HtmlContainerInt(RAdapter adapter);
    internal RAdapter get_Adapter();
    internal CssParser get_CssParser();
    public void add_LoadComplete(EventHandler value);
    public void remove_LoadComplete(EventHandler value);
    public void add_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    public void remove_LinkClicked(EventHandler`1<HtmlLinkClickedEventArgs> value);
    public void add_Refresh(EventHandler`1<HtmlRefreshEventArgs> value);
    public void remove_Refresh(EventHandler`1<HtmlRefreshEventArgs> value);
    public void add_ScrollChange(EventHandler`1<HtmlScrollEventArgs> value);
    public void remove_ScrollChange(EventHandler`1<HtmlScrollEventArgs> value);
    public void add_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    public void remove_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    public void add_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    public void remove_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    public void add_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    public void remove_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    public CssData get_CssData();
    public bool get_AvoidGeometryAntialias();
    public void set_AvoidGeometryAntialias(bool value);
    public bool get_AvoidAsyncImagesLoading();
    public void set_AvoidAsyncImagesLoading(bool value);
    public bool get_AvoidImagesLateLoading();
    public void set_AvoidImagesLateLoading(bool value);
    public bool get_IsSelectionEnabled();
    public void set_IsSelectionEnabled(bool value);
    public bool get_IsContextMenuEnabled();
    public void set_IsContextMenuEnabled(bool value);
    public RPoint get_ScrollOffset();
    public void set_ScrollOffset(RPoint value);
    public RPoint get_Location();
    public void set_Location(RPoint value);
    public RSize get_MaxSize();
    public void set_MaxSize(RSize value);
    public RSize get_ActualSize();
    public void set_ActualSize(RSize value);
    [CompilerGeneratedAttribute]
public RSize get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(RSize value);
    public int get_MarginTop();
    public void set_MarginTop(int value);
    public int get_MarginBottom();
    public void set_MarginBottom(int value);
    public int get_MarginLeft();
    public void set_MarginLeft(int value);
    public int get_MarginRight();
    public void set_MarginRight(int value);
    public void SetMargins(int value);
    public string get_SelectedText();
    public string get_SelectedHtml();
    internal CssBox get_Root();
    internal RColor get_SelectionForeColor();
    internal void set_SelectionForeColor(RColor value);
    internal RColor get_SelectionBackColor();
    internal void set_SelectionBackColor(RColor value);
    public void SetHtml(string htmlSource, CssData baseCssData);
    public void Clear();
    public void ClearSelection();
    public string GetHtml(HtmlGenerationStyle styleGen);
    public string GetAttributeAt(RPoint location, string attribute);
    public List`1<LinkElementData`1<RRect>> GetLinks();
    public string GetLinkAt(RPoint location);
    public Nullable`1<RRect> GetElementRectangle(string elementId);
    public void PerformLayout(RGraphics g);
    public void PerformPaint(RGraphics g);
    public void HandleMouseDown(RControl parent, RPoint location);
    public void HandleMouseUp(RControl parent, RPoint location, RMouseEvent e);
    public void HandleMouseDoubleClick(RControl parent, RPoint location);
    public void HandleMouseMove(RControl parent, RPoint location);
    public void HandleMouseLeave(RControl parent);
    public void HandleKeyDown(RControl parent, RKeyEvent e);
    internal void RaiseHtmlStylesheetLoadEvent(HtmlStylesheetLoadEventArgs args);
    internal void RaiseHtmlImageLoadEvent(HtmlImageLoadEventArgs args);
    public void RequestRefresh(bool layout);
    internal void ReportError(HtmlRenderErrorType type, string message, Exception exception);
    internal void HandleLinkClicked(RControl parent, RPoint location, CssBox link);
    internal void AddHoverBox(CssBox box, CssBlock block);
    internal ImageDownloader GetImageDownloader();
    public sealed virtual void Dispose();
    private RPoint OffsetByScroll(RPoint location);
    private bool IsMouseInContainer(RPoint location);
    private void Dispose(bool all);
}
public static class TheArtOfDev.HtmlRenderer.Core.HtmlRendererUtils : object {
    public static RSize MeasureHtmlByRestrictions(RGraphics g, HtmlContainerInt htmlContainer, RSize minSize, RSize maxSize);
    public static RSize Layout(RGraphics g, HtmlContainerInt htmlContainer, RSize size, RSize minSize, RSize maxSize, bool autoSize, bool autoSizeHeightOnly);
}
internal class TheArtOfDev.HtmlRenderer.Core.Parse.CssParser : object {
    private static Char[] _cssBlockSplitters;
    private RAdapter _adapter;
    private CssValueParser _valueParser;
    private static Char[] _cssClassTrimChars;
    public CssParser(RAdapter adapter);
    private static CssParser();
    public CssData ParseStyleSheet(string stylesheet, bool combineWithDefault);
    public void ParseStyleSheet(CssData cssData, string stylesheet);
    public CssBlock ParseCssBlock(string className, string blockSource);
    public string ParseFontFamily(string value);
    public RColor ParseColor(string colorStr);
    private static string RemoveStylesheetComments(string stylesheet);
    private void ParseStyleBlocks(CssData cssData, string stylesheet);
    private void ParseMediaStyleBlocks(CssData cssData, string stylesheet);
    private void FeedStyleBlock(CssData cssData, string block, string media);
    private CssBlock ParseCssBlockImp(string className, string blockSource);
    private static List`1<CssBlockSelectorItem> ParseCssBlockSelector(string className, String& firstClass);
    private Dictionary`2<string, string> ParseCssBlockProperties(string blockSource);
    private void AddProperty(string propName, string propValue, Dictionary`2<string, string> properties);
    private static void ParseLengthProperty(string propName, string propValue, Dictionary`2<string, string> properties);
    private void ParseColorProperty(string propName, string propValue, Dictionary`2<string, string> properties);
    private void ParseFontProperty(string propValue, Dictionary`2<string, string> properties);
    private static string ParseImageProperty(string propValue);
    private string ParseFontFamilyProperty(string propValue);
    private void ParseBorderProperty(string propValue, string direction, Dictionary`2<string, string> properties);
    private static void ParseMarginProperty(string propValue, Dictionary`2<string, string> properties);
    private static void ParseBorderStyleProperty(string propValue, Dictionary`2<string, string> properties);
    private static void ParseBorderWidthProperty(string propValue, Dictionary`2<string, string> properties);
    private static void ParseBorderColorProperty(string propValue, Dictionary`2<string, string> properties);
    private static void ParsePaddingProperty(string propValue, Dictionary`2<string, string> properties);
    private static void SplitMultiDirectionValues(string propValue, String& left, String& top, String& right, String& bottom);
    private static String[] SplitValues(string value, char separator);
    public void ParseBorder(string value, String& width, String& style, String& color);
    private static string ParseBorderWidth(string str, int idx, int length);
    private static string ParseBorderStyle(string str, int idx, int length);
    private string ParseBorderColor(string str, int idx, int length);
}
internal class TheArtOfDev.HtmlRenderer.Core.Parse.CssValueParser : object {
    private RAdapter _adapter;
    public CssValueParser(RAdapter adapter);
    public static bool IsFloat(string str, int idx, int length);
    public static bool IsInt(string str, int idx, int length);
    public static bool IsValidLength(string value);
    public static double ParseNumber(string number, double hundredPercent);
    public static double ParseLength(string length, double hundredPercent, CssBoxProperties box, bool fontAdjust);
    public static double ParseLength(string length, double hundredPercent, CssBoxProperties box, string defaultUnit);
    public static double ParseLength(string length, double hundredPercent, double emFactor, string defaultUnit, bool fontAdjust, bool returnPoints);
    private static string GetUnit(string length, string defaultUnit, Boolean& hasUnit);
    public bool IsColorValid(string colorValue);
    public RColor GetActualColor(string colorValue);
    public bool TryGetColor(string str, int idx, int length, RColor& color);
    public static double GetActualBorderWidth(string borderValue, CssBoxProperties b);
    private static bool GetColorByHex(string str, int idx, int length, RColor& color);
    private static bool GetColorByRgb(string str, int idx, int length, RColor& color);
    private static bool GetColorByRgba(string str, int idx, int length, RColor& color);
    private bool GetColorByName(string str, int idx, int length, RColor& color);
    private static int ParseIntAtIndex(string str, Int32& startIdx);
    private static int ParseInt(string str, int idx, int length);
    private static int ParseHexInt(string str, int idx, int length);
}
internal class TheArtOfDev.HtmlRenderer.Core.Parse.DomParser : object {
    private CssParser _cssParser;
    public DomParser(CssParser cssParser);
    public CssBox GenerateCssTree(string html, HtmlContainerInt htmlContainer, CssData& cssData);
    private void CascadeParseStyles(CssBox box, HtmlContainerInt htmlContainer, CssData& cssData, Boolean& cssDataChanged);
    private void CascadeApplyStyles(CssBox box, CssData cssData);
    private void SetTextSelectionStyle(HtmlContainerInt htmlContainer, CssData cssData);
    private static void AssignClassCssBlocks(CssBox box, CssData cssData);
    private static void AssignCssBlocks(CssBox box, CssData cssData, string className);
    private static bool IsBlockAssignableToBox(CssBox box, CssBlock block);
    private static bool IsBlockAssignableToBoxWithSelector(CssBox box, CssBlock block);
    private static void AssignCssBlock(CssBox box, CssBlock block);
    private static bool IsStyleOnElementAllowed(CssBox box, string key, string value);
    private static void CloneCssData(CssData& cssData, Boolean& cssDataChanged);
    private void TranslateAttributes(HtmlTag tag, CssBox box);
    private static string TranslateLength(string htmlLength);
    private static void ApplyTableBorder(CssBox table, string border);
    private static void ApplyTablePadding(CssBox table, string padding);
    private static void SetForAllCells(CssBox table, ActionInt`1<CssBox> action);
    private static void CorrectTextBoxes(CssBox box);
    private static void CorrectImgBoxes(CssBox box);
    private static void CorrectLineBreaksBlocks(CssBox box, Boolean& followingBlock);
    private static void CorrectBlockInsideInline(CssBox box);
    private static CssBox CorrectBlockInsideInlineImp(CssBox box);
    private static void CorrectBlockSplitBadBox(CssBox parentBox, CssBox badBox, CssBox leftBlock);
    private static void CorrectInlineBoxesParent(CssBox box);
    private static bool ContainsInlinesOnlyDeep(CssBox box);
    private static bool ContainsVariantBoxes(CssBox box);
}
internal static class TheArtOfDev.HtmlRenderer.Core.Parse.HtmlParser : object {
    public static CssBox ParseDocument(string source);
    private static void AddTextBox(string source, int startIdx, int tagIdx, CssBox& curBox);
    private static int ParseHtmlTag(string source, int tagIdx, CssBox& curBox);
    private static bool ParseHtmlTag(string source, int idx, int length, String& name, Dictionary`2& attributes);
    private static void ExtractAttributes(string source, int idx, int length, Dictionary`2& attributes);
}
internal static class TheArtOfDev.HtmlRenderer.Core.Parse.RegexParserUtils : object {
    public static string CssMediaTypes;
    public static string CssBlocks;
    public static string CssNumber;
    public static string CssPercentage;
    public static string CssLength;
    public static string CssLineHeight;
    public static string CssFontFamily;
    public static string CssFontStyle;
    public static string CssFontVariant;
    public static string CssFontWeight;
    public static string CssFontSize;
    public static string CssFontSizeAndLineHeight;
    private static Dictionary`2<string, Regex> _regexes;
    private static RegexParserUtils();
    public static string GetCssAtRules(string stylesheet, Int32& startIdx);
    public static MatchCollection Match(string regex, string source);
    public static string Search(string regex, string source);
    public static string Search(string regex, string source, Int32& position);
    private static Regex GetRegex(string regex);
}
internal class TheArtOfDev.HtmlRenderer.Core.Utils.ActionInt`1 : MulticastDelegate {
    public ActionInt`1(object object, IntPtr method);
    public virtual void Invoke(T obj);
    public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class TheArtOfDev.HtmlRenderer.Core.Utils.ActionInt`2 : MulticastDelegate {
    public ActionInt`2(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class TheArtOfDev.HtmlRenderer.Core.Utils.ActionInt`3 : MulticastDelegate {
    public ActionInt`3(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class TheArtOfDev.HtmlRenderer.Core.Utils.ArgChecker : object {
    public static void AssertIsTrue(bool condition, string message);
    public static void AssertArgNotNull(object arg, string argName);
    public static void AssertArgNotNull(IntPtr arg, string argName);
    public static void AssertArgNotNullOrEmpty(string arg, string argName);
    public static T AssertArgOfType(object arg, string argName);
    public static void AssertFileExist(string arg, string argName);
}
internal static class TheArtOfDev.HtmlRenderer.Core.Utils.CommonUtils : object {
    private static String[0...,0...] _romanDigitsTable;
    private static String[0...,0...] _hebrewDigitsTable;
    private static String[0...,0...] _georgianDigitsTable;
    private static String[0...,0...] _armenianDigitsTable;
    private static String[] _hiraganaDigitsTable;
    private static String[] _satakanaDigitsTable;
    public static string _tempPath;
    private static CommonUtils();
    public static bool IsAsianCharecter(char ch);
    public static bool IsDigit(char ch, bool hex);
    public static int ToDigit(char ch, bool hex);
    public static RSize Max(RSize size, RSize other);
    public static Uri TryGetUri(string path);
    public static TValue GetFirstValueOrDefault(IDictionary`2<TKey, TValue> dic, TValue defaultValue);
    public static FileInfo TryGetFileInfo(string path);
    public static string GetResponseContentType(WebClient client);
    public static FileInfo GetLocalfileName(Uri imageUri);
    public static int GetNextSubString(string str, int idx, Int32& length);
    public static bool SubStringEquals(string str, int idx, int length, string str2);
    private static string GetValidFileName(string source);
    public static string ConvertToAlphaNumber(int number, string style);
    private static string ConvertToEnglishNumber(int number, bool lowercase);
    private static string ConvertToGreekNumber(int number);
    private static string ConvertToRomanNumbers(int number, bool lowercase);
    private static string ConvertToSpecificNumbers(int number, String[0...,0...] alphabet);
    private static string ConvertToSpecificNumbers2(int number, String[] alphabet);
}
internal static class TheArtOfDev.HtmlRenderer.Core.Utils.CssConstants : object {
    public static string Absolute;
    public static string Auto;
    public static string Avoid;
    public static string Baseline;
    public static string Blink;
    public static string Block;
    public static string InlineBlock;
    public static string Bold;
    public static string Bolder;
    public static string Bottom;
    public static string BreakAll;
    public static string KeepAll;
    public static string Center;
    public static string Collapse;
    public static string Cursive;
    public static string Circle;
    public static string Decimal;
    public static string DecimalLeadingZero;
    public static string Disc;
    public static string Fantasy;
    public static string Fixed;
    public static string Hide;
    public static string Inherit;
    public static string Inline;
    public static string InlineTable;
    public static string Inset;
    public static string Italic;
    public static string Justify;
    public static string Large;
    public static string Larger;
    public static string Left;
    public static string Lighter;
    public static string LineThrough;
    public static string ListItem;
    public static string Ltr;
    public static string LowerAlpha;
    public static string LowerLatin;
    public static string LowerRoman;
    public static string LowerGreek;
    public static string Armenian;
    public static string Georgian;
    public static string Hebrew;
    public static string Hiragana;
    public static string HiraganaIroha;
    public static string Katakana;
    public static string KatakanaIroha;
    public static string Medium;
    public static string Middle;
    public static string Monospace;
    public static string None;
    public static string Normal;
    public static string NoWrap;
    public static string Oblique;
    public static string Outset;
    public static string Overline;
    public static string Pre;
    public static string PreWrap;
    public static string PreLine;
    public static string Right;
    public static string Rtl;
    public static string SansSerif;
    public static string Serif;
    public static string Show;
    public static string Small;
    public static string Smaller;
    public static string Solid;
    public static string Sub;
    public static string Super;
    public static string Square;
    public static string Table;
    public static string TableRow;
    public static string TableRowGroup;
    public static string TableHeaderGroup;
    public static string TableFooterGroup;
    public static string TableColumn;
    public static string TableColumnGroup;
    public static string TableCell;
    public static string TableCaption;
    public static string TextBottom;
    public static string TextTop;
    public static string Thin;
    public static string Thick;
    public static string Top;
    public static string Underline;
    public static string UpperAlpha;
    public static string UpperLatin;
    public static string UpperRoman;
    public static string XLarge;
    public static string XSmall;
    public static string XXLarge;
    public static string XXSmall;
    public static string Visible;
    public static string Hidden;
    public static string Dotted;
    public static string Dashed;
    public static string Double;
    public static string Groove;
    public static string Ridge;
    public static string Cm;
    public static string Mm;
    public static string Px;
    public static string In;
    public static string Em;
    public static string Ex;
    public static string Pt;
    public static string Pc;
    public static double FontSize;
    public static string DefaultFont;
}
internal static class TheArtOfDev.HtmlRenderer.Core.Utils.CssUtils : object {
    private static RColor _defaultSelectionBackcolor;
    public static RColor DefaultSelectionBackcolor { get; }
    private static CssUtils();
    public static RColor get_DefaultSelectionBackcolor();
    public static double WhiteSpace(RGraphics g, CssBoxProperties box);
    public static string GetPropertyValue(CssBox cssBox, string propName);
    public static void SetPropertyValue(CssBox cssBox, string propName, string value);
}
internal class TheArtOfDev.HtmlRenderer.Core.Utils.DomUtils : object {
    public static bool IsInBox(CssBox box, RPoint location);
    public static bool ContainsInlinesOnly(CssBox box);
    public static CssBox FindParent(CssBox root, string tagName, CssBox box);
    public static CssBox GetPreviousSibling(CssBox b);
    public static CssBox GetPreviousContainingBlockSibling(CssBox b);
    public static bool IsBoxHasWhitespace(CssBox box);
    public static CssBox GetNextSibling(CssBox b);
    public static string GetAttribute(CssBox box, string attribute);
    public static CssBox GetCssBox(CssBox box, RPoint location, bool visible);
    public static void GetAllLinkBoxes(CssBox box, List`1<CssBox> linkBoxes);
    public static CssBox GetLinkBox(CssBox box, RPoint location);
    public static CssBox GetBoxById(CssBox box, string id);
    public static CssLineBox GetCssLineBox(CssBox box, RPoint location);
    public static CssRect GetCssBoxWord(CssBox box, RPoint location);
    public static CssRect GetCssBoxWord(CssLineBox lineBox, RPoint location);
    public static CssLineBox GetCssLineBoxByWord(CssRect word);
    public static string GetSelectedPlainText(CssBox root);
    public static string GenerateHtml(CssBox root, HtmlGenerationStyle styleGen, bool onlySelected);
    public static string GenerateBoxTree(CssBox root);
    private static int GetSelectedPlainText(StringBuilder sb, CssBox box);
    private static Dictionary`2<CssBox, bool> CollectSelectedBoxes(CssBox root);
    private static bool CollectSelectedBoxes(CssBox box, Dictionary`2<CssBox, bool> selectedBoxes, Dictionary`2<CssBox, bool> maybeBoxes);
    private static CssBox GetSelectionRoot(CssBox root, Dictionary`2<CssBox, bool> selectedBoxes);
    private static bool ContainsNamedBox(CssBox box);
    private static void WriteHtml(CssParser cssParser, StringBuilder sb, CssBox box, HtmlGenerationStyle styleGen, Dictionary`2<CssBox, bool> selectedBoxes, CssBox selectionRoot);
    private static void WriteHtmlTag(CssParser cssParser, StringBuilder sb, CssBox box, HtmlGenerationStyle styleGen);
    private static Dictionary`2<string, string> StripDefaultStyles(CssBox box, Dictionary`2<string, string> tagStyles);
    private static void WriteStylesheet(StringBuilder sb, CssData cssData);
    private static string GetSelectedWord(CssRect rect, bool selectedText);
    private static void GenerateBoxTree(CssBox box, StringBuilder builder, int indent);
}
internal static class TheArtOfDev.HtmlRenderer.Core.Utils.HtmlConstants : object {
    public static string A;
    public static string Caption;
    public static string Col;
    public static string Colgroup;
    public static string Display;
    public static string Font;
    public static string Hr;
    public static string Iframe;
    public static string Img;
    public static string Li;
    public static string Style;
    public static string Table;
    public static string Tbody;
    public static string Td;
    public static string Tfoot;
    public static string Th;
    public static string Thead;
    public static string Tr;
    public static string Align;
    public static string Background;
    public static string Bgcolor;
    public static string Border;
    public static string Bordercolor;
    public static string Cellpadding;
    public static string Cellspacing;
    public static string Class;
    public static string Color;
    public static string content;
    public static string Dir;
    public static string Face;
    public static string Height;
    public static string Href;
    public static string Hspace;
    public static string Nowrap;
    public static string Size;
    public static string Valign;
    public static string Vspace;
    public static string Width;
    public static string Left;
    public static string Right;
    public static string Center;
    public static string Justify;
}
internal static class TheArtOfDev.HtmlRenderer.Core.Utils.HtmlUtils : object {
    private static List`1<string> _list;
    private static KeyValuePair`2[] _encodeDecode;
    private static Dictionary`2<string, char> _decodeOnly;
    private static HtmlUtils();
    public static bool IsSingleTag(string tagName);
    public static string DecodeHtml(string str);
    public static string EncodeHtml(string str);
    private static string DecodeHtmlCharByCode(string str);
    private static string DecodeHtmlCharByName(string str);
}
internal static class TheArtOfDev.HtmlRenderer.Core.Utils.RenderUtils : object {
    public static bool IsColorVisible(RColor color);
    public static bool ClipGraphicsByOverflow(RGraphics g, CssBox box);
    public static void DrawImageLoadingIcon(RGraphics g, HtmlContainerInt htmlContainer, RRect r);
    public static void DrawImageErrorIcon(RGraphics g, HtmlContainerInt htmlContainer, RRect r);
    public static RGraphicsPath GetRoundRect(RGraphics g, RRect rect, double nwRadius, double neRadius, double seRadius, double swRadius);
}
[DefaultMemberAttribute("Item")]
internal class TheArtOfDev.HtmlRenderer.Core.Utils.SubString : object {
    private string _fullString;
    private int _startIdx;
    private int _length;
    public string FullString { get; }
    public int StartIdx { get; }
    public int Length { get; }
    public char Item { get; }
    public SubString(string fullString);
    public SubString(string fullString, int startIdx, int length);
    public string get_FullString();
    public int get_StartIdx();
    public int get_Length();
    public char get_Item(int idx);
    public bool IsEmpty();
    public bool IsEmptyOrWhitespace();
    public bool IsWhitespace();
    public string CutSubstring();
    public string Substring(int startIdx, int length);
    public virtual string ToString();
}
