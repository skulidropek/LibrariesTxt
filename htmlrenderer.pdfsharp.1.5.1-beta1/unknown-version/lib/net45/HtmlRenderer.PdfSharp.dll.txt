internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.BrushAdapter : RBrush {
    private object _brush;
    public object Brush { get; }
    public BrushAdapter(object brush);
    public object get_Brush();
    public virtual void Dispose();
}
internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.FontAdapter : RFont {
    private XFont _font;
    private double _underlineOffset;
    private double _height;
    private double _whitespaceWidth;
    public XFont Font { get; }
    public double Size { get; }
    public double UnderlineOffset { get; }
    public double Height { get; }
    public double LeftPadding { get; }
    public FontAdapter(XFont font);
    public XFont get_Font();
    public virtual double get_Size();
    public virtual double get_UnderlineOffset();
    public virtual double get_Height();
    public virtual double get_LeftPadding();
    public virtual double GetWhitespaceWidth(RGraphics graphics);
    internal void SetMetrics(int height, int underlineOffset);
}
internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.FontFamilyAdapter : RFontFamily {
    private XFontFamily _fontFamily;
    public XFontFamily FontFamily { get; }
    public string Name { get; }
    public FontFamilyAdapter(XFontFamily fontFamily);
    public XFontFamily get_FontFamily();
    public virtual string get_Name();
}
internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.GraphicsAdapter : RGraphics {
    private XGraphics _g;
    private bool _releaseGraphics;
    private static XStringFormat _stringFormat;
    private static GraphicsAdapter();
    public GraphicsAdapter(XGraphics g, bool releaseGraphics);
    public virtual void PopClip();
    public virtual void PushClip(RRect rect);
    public virtual void PushClipExclude(RRect rect);
    public virtual object SetAntiAliasSmoothingMode();
    public virtual void ReturnPreviousSmoothingMode(object prevMode);
    public virtual RSize MeasureString(string str, RFont font);
    public virtual void MeasureString(string str, RFont font, double maxWidth, Int32& charFit, Double& charFitWidth);
    public virtual void DrawString(string str, RFont font, RColor color, RPoint point, RSize size, bool rtl);
    public virtual RBrush GetTextureBrush(RImage image, RRect dstRect, RPoint translateTransformLocation);
    public virtual RGraphicsPath GetGraphicsPath();
    public virtual void Dispose();
    public virtual void DrawLine(RPen pen, double x1, double y1, double x2, double y2);
    public virtual void DrawRectangle(RPen pen, double x, double y, double width, double height);
    public virtual void DrawRectangle(RBrush brush, double x, double y, double width, double height);
    public virtual void DrawImage(RImage image, RRect destRect, RRect srcRect);
    public virtual void DrawImage(RImage image, RRect destRect);
    public virtual void DrawPath(RPen pen, RGraphicsPath path);
    public virtual void DrawPath(RBrush brush, RGraphicsPath path);
    public virtual void DrawPolygon(RBrush brush, RPoint[] points);
}
internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.GraphicsPathAdapter : RGraphicsPath {
    private XGraphicsPath _graphicsPath;
    private RPoint _lastPoint;
    public XGraphicsPath GraphicsPath { get; }
    public XGraphicsPath get_GraphicsPath();
    public virtual void Start(double x, double y);
    public virtual void LineTo(double x, double y);
    public virtual void ArcTo(double x, double y, double size, Corner corner);
    public virtual void Dispose();
    private static int GetStartAngle(Corner corner);
}
internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.ImageAdapter : RImage {
    private XImage _image;
    public XImage Image { get; }
    public double Width { get; }
    public double Height { get; }
    public ImageAdapter(XImage image);
    public XImage get_Image();
    public virtual double get_Width();
    public virtual double get_Height();
    public virtual void Dispose();
}
internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.PdfSharpAdapter : RAdapter {
    private static PdfSharpAdapter _instance;
    public static PdfSharpAdapter Instance { get; }
    private static PdfSharpAdapter();
    public static PdfSharpAdapter get_Instance();
    protected virtual RColor GetColorInt(string colorName);
    protected virtual RPen CreatePen(RColor color);
    protected virtual RBrush CreateSolidBrush(RColor color);
    protected virtual RBrush CreateLinearGradientBrush(RRect rect, RColor color1, RColor color2, double angle);
    protected virtual RImage ConvertImageInt(object image);
    protected virtual RImage ImageFromStreamInt(Stream memoryStream);
    protected virtual RFont CreateFontInt(string family, double size, RFontStyle style);
    protected virtual RFont CreateFontInt(RFontFamily family, double size, RFontStyle style);
}
internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.PenAdapter : RPen {
    private XPen _pen;
    public XPen Pen { get; }
    public double Width { get; public set; }
    unknown RDashStyle DashStyle {public set; }
    public PenAdapter(XPen pen);
    public XPen get_Pen();
    public virtual double get_Width();
    public virtual void set_Width(double value);
    public virtual void set_DashStyle(RDashStyle value);
}
internal class TheArtOfDev.HtmlRenderer.PdfSharp.Adapters.XTextureBrush : object {
    private XImage _image;
    private XRect _dstRect;
    private XPoint _translateTransformLocation;
    public XTextureBrush(XImage image, XRect dstRect, XPoint translateTransformLocation);
    public void DrawRectangle(XGraphics g, double x, double y, double width, double height);
}
public class TheArtOfDev.HtmlRenderer.PdfSharp.HtmlContainer : object {
    private HtmlContainerInt _htmlContainerInt;
    internal HtmlContainerInt HtmlContainerInt { get; }
    public CssData CssData { get; }
    public bool AvoidGeometryAntialias { get; public set; }
    public XPoint ScrollOffset { get; public set; }
    public XPoint Location { get; public set; }
    public XSize MaxSize { get; public set; }
    public XSize ActualSize { get; internal set; }
    public XSize PageSize { get; public set; }
    public int MarginTop { get; public set; }
    public int MarginBottom { get; public set; }
    public int MarginLeft { get; public set; }
    public int MarginRight { get; public set; }
    public string SelectedText { get; }
    public string SelectedHtml { get; }
    public void add_LoadComplete(EventHandler value);
    public void remove_LoadComplete(EventHandler value);
    public void add_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    public void remove_RenderError(EventHandler`1<HtmlRenderErrorEventArgs> value);
    public void add_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    public void remove_StylesheetLoad(EventHandler`1<HtmlStylesheetLoadEventArgs> value);
    public void add_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    public void remove_ImageLoad(EventHandler`1<HtmlImageLoadEventArgs> value);
    internal HtmlContainerInt get_HtmlContainerInt();
    public CssData get_CssData();
    public bool get_AvoidGeometryAntialias();
    public void set_AvoidGeometryAntialias(bool value);
    public XPoint get_ScrollOffset();
    public void set_ScrollOffset(XPoint value);
    public XPoint get_Location();
    public void set_Location(XPoint value);
    public XSize get_MaxSize();
    public void set_MaxSize(XSize value);
    public XSize get_ActualSize();
    internal void set_ActualSize(XSize value);
    public XSize get_PageSize();
    public void set_PageSize(XSize value);
    public int get_MarginTop();
    public void set_MarginTop(int value);
    public int get_MarginBottom();
    public void set_MarginBottom(int value);
    public int get_MarginLeft();
    public void set_MarginLeft(int value);
    public int get_MarginRight();
    public void set_MarginRight(int value);
    public void SetMargins(int value);
    public string get_SelectedText();
    public string get_SelectedHtml();
    public void SetHtml(string htmlSource, CssData baseCssData);
    public string GetHtml(HtmlGenerationStyle styleGen);
    public string GetAttributeAt(XPoint location, string attribute);
    public List`1<LinkElementData`1<XRect>> GetLinks();
    public string GetLinkAt(XPoint location);
    public Nullable`1<XRect> GetElementRectangle(string elementId);
    public void PerformLayout(XGraphics g);
    public void PerformPaint(XGraphics g);
    public sealed virtual void Dispose();
}
public class TheArtOfDev.HtmlRenderer.PdfSharp.PdfGenerateConfig : object {
    private PageSize _pageSize;
    private XSize _xsize;
    private PageOrientation _pageOrientation;
    private int _marginTop;
    private int _marginBottom;
    private int _marginLeft;
    private int _marginRight;
    public PageSize PageSize { get; public set; }
    public XSize ManualPageSize { get; public set; }
    public PageOrientation PageOrientation { get; public set; }
    public int MarginTop { get; public set; }
    public int MarginBottom { get; public set; }
    public int MarginLeft { get; public set; }
    public int MarginRight { get; public set; }
    public PageSize get_PageSize();
    public void set_PageSize(PageSize value);
    public XSize get_ManualPageSize();
    public void set_ManualPageSize(XSize value);
    public PageOrientation get_PageOrientation();
    public void set_PageOrientation(PageOrientation value);
    public int get_MarginTop();
    public void set_MarginTop(int value);
    public int get_MarginBottom();
    public void set_MarginBottom(int value);
    public int get_MarginLeft();
    public void set_MarginLeft(int value);
    public int get_MarginRight();
    public void set_MarginRight(int value);
    public void SetMargins(int value);
    public static XSize MilimitersToUnits(double width, double height);
    public static XSize InchesToUnits(double width, double height);
}
public static class TheArtOfDev.HtmlRenderer.PdfSharp.PdfGenerator : object {
    public static void AddFontFamilyMapping(string fromFamily, string toFamily);
    public static CssData ParseStyleSheet(string stylesheet, bool combineWithDefault);
    public static PdfDocument GeneratePdf(string html, PageSize pageSize, int margin, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static PdfDocument GeneratePdf(string html, PdfGenerateConfig config, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static void AddPdfPages(PdfDocument document, string html, PageSize pageSize, int margin, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    public static void AddPdfPages(PdfDocument document, string html, PdfGenerateConfig config, CssData cssData, EventHandler`1<HtmlStylesheetLoadEventArgs> stylesheetLoad, EventHandler`1<HtmlImageLoadEventArgs> imageLoad);
    private static void HandleLinks(PdfDocument document, HtmlContainer container, XSize orgPageSize, XSize pageSize);
}
internal static class TheArtOfDev.HtmlRenderer.PdfSharp.Utilities.Utils : object {
    public static RPoint Convert(XPoint p);
    public static XPoint[] Convert(RPoint[] points);
    public static XPoint Convert(RPoint p);
    public static RSize Convert(XSize s);
    public static XSize Convert(RSize s);
    public static RRect Convert(XRect r);
    public static XRect Convert(RRect r);
    public static XColor Convert(RColor c);
    public static RColor Convert(Color c);
}
