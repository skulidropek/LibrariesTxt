public class HttpMultipartParser.BinaryParameterDelegate : MulticastDelegate {
    public BinaryParameterDelegate(object object, IntPtr method);
    public virtual void Invoke(ParameterPartBinary binaryPart);
    public virtual IAsyncResult BeginInvoke(ParameterPartBinary binaryPart, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HttpMultipartParser.BinaryStreamStack : object {
    private Stack`1<BinaryReader> streams;
    [CompilerGeneratedAttribute]
private Encoding <CurrentEncoding>k__BackingField;
    public Encoding CurrentEncoding { get; public set; }
    public BinaryStreamStack(Encoding encoding);
    [CompilerGeneratedAttribute]
public Encoding get_CurrentEncoding();
    [CompilerGeneratedAttribute]
public void set_CurrentEncoding(Encoding value);
    public bool HasData();
    public BinaryReader Peek();
    public BinaryReader Pop();
    public void Push(Byte[] data);
    public void Push(Byte[] data, int offset, int count);
    public int Read();
    public int Read(Byte[] buffer, int index, int count);
    public int Read(Char[] buffer, int index, int count);
    public Byte[] ReadByteLine();
    public Byte[] ReadByteLine(Boolean& hitStreamEnd);
    public string ReadLine();
    public string ReadLine(Boolean& hitStreamEnd);
    private BinaryReader NextStream();
}
internal static class HttpMultipartParser.Constants : object {
    internal static int DefaultBufferSize;
    internal static String[] DefaultBinaryMimeTypes;
    internal static Encoding DefaultEncoding;
    private static Constants();
}
[ExtensionAttribute]
public static class HttpMultipartParser.Extensions : object {
    [ExtensionAttribute]
public static bool HasParameter(IMultipartFormDataParser parser, string name);
    [ExtensionAttribute]
public static string GetParameterValue(IMultipartFormDataParser parser, string name, StringComparison comparisonType);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetParameterValues(IMultipartFormDataParser parser, string name, StringComparison comparisonType);
}
public class HttpMultipartParser.FilePart : object {
    private static string DefaultContentType;
    private static string DontentDisposition;
    [CompilerGeneratedAttribute]
private Stream <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <AdditionalProperties>k__BackingField;
    public Stream Data { get; }
    public string FileName { get; }
    public string Name { get; }
    public string ContentType { get; }
    public string ContentDisposition { get; }
    public IReadOnlyDictionary`2<string, string> AdditionalProperties { get; private set; }
    public FilePart(string name, string fileName, Stream data, string contentType, string contentDisposition);
    public FilePart(string name, string fileName, Stream data, IDictionary`2<string, string> additionalProperties, string contentType, string contentDisposition);
    [CompilerGeneratedAttribute]
public Stream get_Data();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public string get_ContentDisposition();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IReadOnlyDictionary`2<string, string> value);
    private static Char[] GetInvalidFileNameChars();
}
public class HttpMultipartParser.FileStreamDelegate : MulticastDelegate {
    public FileStreamDelegate(object object, IntPtr method);
    public virtual void Invoke(string name, string fileName, string contentType, string contentDisposition, Byte[] buffer, int bytes, int partNumber, IDictionary`2<string, string> additionalProperties);
    public virtual IAsyncResult BeginInvoke(string name, string fileName, string contentType, string contentDisposition, Byte[] buffer, int bytes, int partNumber, IDictionary`2<string, string> additionalProperties, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface HttpMultipartParser.IMultipartFormBinaryDataParser {
    public IReadOnlyList`1<FilePart> Files { get; }
    public IReadOnlyList`1<ParameterPartBinary> Parameters { get; }
    public abstract virtual IReadOnlyList`1<FilePart> get_Files();
    public abstract virtual IReadOnlyList`1<ParameterPartBinary> get_Parameters();
}
public interface HttpMultipartParser.IMultipartFormDataParser {
    public IReadOnlyList`1<FilePart> Files { get; }
    public IReadOnlyList`1<ParameterPart> Parameters { get; }
    public abstract virtual IReadOnlyList`1<FilePart> get_Files();
    public abstract virtual IReadOnlyList`1<ParameterPart> get_Parameters();
}
public interface HttpMultipartParser.IStreamingBinaryMultipartFormDataParser {
    public FileStreamDelegate FileHandler { get; public set; }
    public BinaryParameterDelegate ParameterHandler { get; public set; }
    public StreamClosedDelegate StreamClosedHandler { get; public set; }
    public abstract virtual FileStreamDelegate get_FileHandler();
    public abstract virtual void set_FileHandler(FileStreamDelegate value);
    public abstract virtual BinaryParameterDelegate get_ParameterHandler();
    public abstract virtual void set_ParameterHandler(BinaryParameterDelegate value);
    public abstract virtual StreamClosedDelegate get_StreamClosedHandler();
    public abstract virtual void set_StreamClosedHandler(StreamClosedDelegate value);
    public abstract virtual void Run();
    public abstract virtual Task RunAsync(CancellationToken cancellationToken);
}
public interface HttpMultipartParser.IStreamingMultipartFormDataParser {
    public FileStreamDelegate FileHandler { get; public set; }
    public ParameterDelegate ParameterHandler { get; public set; }
    public StreamClosedDelegate StreamClosedHandler { get; public set; }
    public abstract virtual FileStreamDelegate get_FileHandler();
    public abstract virtual void set_FileHandler(FileStreamDelegate value);
    public abstract virtual ParameterDelegate get_ParameterHandler();
    public abstract virtual void set_ParameterHandler(ParameterDelegate value);
    public abstract virtual StreamClosedDelegate get_StreamClosedHandler();
    public abstract virtual void set_StreamClosedHandler(StreamClosedDelegate value);
    public abstract virtual void Run();
    public abstract virtual Task RunAsync(CancellationToken cancellationToken);
}
public class HttpMultipartParser.MultipartFormBinaryDataParser : object {
    private List`1<FilePart> _files;
    private List`1<ParameterPartBinary> _parameters;
    public IReadOnlyList`1<FilePart> Files { get; }
    public IReadOnlyList`1<ParameterPartBinary> Parameters { get; }
    public sealed virtual IReadOnlyList`1<FilePart> get_Files();
    public sealed virtual IReadOnlyList`1<ParameterPartBinary> get_Parameters();
    public static MultipartFormBinaryDataParser Parse(Stream stream, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    public static MultipartFormBinaryDataParser Parse(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    public static Task`1<MultipartFormBinaryDataParser> ParseAsync(Stream stream, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HttpMultipartParser.MultipartFormBinaryDataParser/<ParseAsync>d__10")]
public static Task`1<MultipartFormBinaryDataParser> ParseAsync(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts, CancellationToken cancellationToken);
    private void ParseStream(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    [AsyncStateMachineAttribute("HttpMultipartParser.MultipartFormBinaryDataParser/<ParseStreamAsync>d__12")]
private Task ParseStreamAsync(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <ParseStream>b__11_0(ParameterPartBinary binaryParameterPart);
    [CompilerGeneratedAttribute]
private void <ParseStream>b__11_1(string name, string fileName, string type, string disposition, Byte[] buffer, int bytes, int partNumber, IDictionary`2<string, string> additionalProperties);
    [CompilerGeneratedAttribute]
private void <ParseStreamAsync>b__12_0(ParameterPartBinary binaryParameterPart);
    [CompilerGeneratedAttribute]
private void <ParseStreamAsync>b__12_1(string name, string fileName, string type, string disposition, Byte[] buffer, int bytes, int partNumber, IDictionary`2<string, string> additionalProperties);
}
public class HttpMultipartParser.MultipartFormDataParser : object {
    private List`1<FilePart> _files;
    private List`1<ParameterPart> _parameters;
    public IReadOnlyList`1<FilePart> Files { get; }
    public IReadOnlyList`1<ParameterPart> Parameters { get; }
    public sealed virtual IReadOnlyList`1<FilePart> get_Files();
    public sealed virtual IReadOnlyList`1<ParameterPart> get_Parameters();
    public static MultipartFormDataParser Parse(Stream stream, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    public static MultipartFormDataParser Parse(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    public static Task`1<MultipartFormDataParser> ParseAsync(Stream stream, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HttpMultipartParser.MultipartFormDataParser/<ParseAsync>d__10")]
public static Task`1<MultipartFormDataParser> ParseAsync(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts, CancellationToken cancellationToken);
    private void ParseStream(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    [AsyncStateMachineAttribute("HttpMultipartParser.MultipartFormDataParser/<ParseStreamAsync>d__12")]
private Task ParseStreamAsync(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts, CancellationToken cancellationToken);
}
public class HttpMultipartParser.MultipartParseException : Exception {
    public MultipartParseException(string message);
}
public class HttpMultipartParser.ParameterDelegate : MulticastDelegate {
    public ParameterDelegate(object object, IntPtr method);
    public virtual void Invoke(ParameterPart part);
    public virtual IAsyncResult BeginInvoke(ParameterPart part, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HttpMultipartParser.ParameterPart : object {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Data { get; }
    public string Name { get; }
    public ParameterPart(string name, string data);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class HttpMultipartParser.ParameterPartBinary : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Byte[]> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IEnumerable`1<Byte[]> Data { get; }
    public string Name { get; }
    public ParameterPartBinary(string name, IEnumerable`1<Byte[]> data);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Byte[]> get_Data();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string ToString();
    public string ToString(Encoding encoding);
}
public class HttpMultipartParser.RebufferableBinaryReader : object {
    private int bufferSize;
    private Encoding encoding;
    private Stream stream;
    private BinaryStreamStack streamStack;
    public RebufferableBinaryReader(Stream input);
    public RebufferableBinaryReader(Stream input, Encoding encoding, int bufferSize);
    public void Buffer(Byte[] data);
    public void Buffer(Byte[] data, int offset, int count);
    public void Buffer(string data);
    public int Read();
    public int Read(Byte[] buffer, int index, int count);
    public int Read(Char[] buffer, int index, int count);
    public Byte[] ReadByteLine();
    public string ReadLine();
    [AsyncStateMachineAttribute("HttpMultipartParser.RebufferableBinaryReader/<ReadAsync>d__14")]
public Task`1<int> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HttpMultipartParser.RebufferableBinaryReader/<ReadAsync>d__15")]
public Task`1<int> ReadAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HttpMultipartParser.RebufferableBinaryReader/<ReadAsync>d__16")]
public Task`1<int> ReadAsync(Char[] buffer, int index, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HttpMultipartParser.RebufferableBinaryReader/<ReadByteLineAsync>d__17")]
public Task`1<Byte[]> ReadByteLineAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("HttpMultipartParser.RebufferableBinaryReader/<ReadLineAsync>d__18")]
public Task`1<string> ReadLineAsync(CancellationToken cancellationToken);
    private int GetBomOffset(Byte[] buffer);
    private int StreamData();
    [AsyncStateMachineAttribute("HttpMultipartParser.RebufferableBinaryReader/<StreamDataAsync>d__21")]
private Task`1<int> StreamDataAsync(CancellationToken cancellationToken);
    private void PushToStack(Byte[] buffer, int amountRead);
}
public static class HttpMultipartParser.RFC5987 : object {
    private static Regex EncodedStringRegex;
    private static RFC5987();
    public static string Decode(string inputString);
    [IteratorStateMachineAttribute("HttpMultipartParser.RFC5987/<GetDecodedBytes>d__2")]
private static IEnumerable`1<byte> GetDecodedBytes(string encodedData);
    private static bool IsSupportedCharacterSet(string characterSet);
}
public class HttpMultipartParser.StreamClosedDelegate : MulticastDelegate {
    public StreamClosedDelegate(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class HttpMultipartParser.StreamingBinaryMultipartFormDataParser : object {
    private String[] binaryMimeTypes;
    private Stream stream;
    private bool ignoreInvalidParts;
    private string boundary;
    private Byte[] boundaryBinary;
    private string endBoundary;
    private Byte[] endBoundaryBinary;
    private bool readEndBoundary;
    [CompilerGeneratedAttribute]
private int <BinaryBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private FileStreamDelegate <FileHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryParameterDelegate <ParameterHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamClosedDelegate <StreamClosedHandler>k__BackingField;
    public int BinaryBufferSize { get; private set; }
    public Encoding Encoding { get; private set; }
    public FileStreamDelegate FileHandler { get; public set; }
    public BinaryParameterDelegate ParameterHandler { get; public set; }
    public StreamClosedDelegate StreamClosedHandler { get; public set; }
    public StreamingBinaryMultipartFormDataParser(Stream stream, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    public StreamingBinaryMultipartFormDataParser(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    public sealed virtual void Run();
    [AsyncStateMachineAttribute("HttpMultipartParser.StreamingBinaryMultipartFormDataParser/<RunAsync>d__11")]
public sealed virtual Task RunAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public int get_BinaryBufferSize();
    [CompilerGeneratedAttribute]
private void set_BinaryBufferSize(int value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual FileStreamDelegate get_FileHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileHandler(FileStreamDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual BinaryParameterDelegate get_ParameterHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParameterHandler(BinaryParameterDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual StreamClosedDelegate get_StreamClosedHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StreamClosedHandler(StreamClosedDelegate value);
    private static string DetectBoundary(RebufferableBinaryReader reader);
    [AsyncStateMachineAttribute("HttpMultipartParser.StreamingBinaryMultipartFormDataParser/<DetectBoundaryAsync>d__33")]
private static Task`1<string> DetectBoundaryAsync(RebufferableBinaryReader reader, CancellationToken cancellationToken);
    private bool IsFilePart(IDictionary`2<string, string> parameters);
    private bool IsParameterPart(IDictionary`2<string, string> parameters);
    private int FindNextNewline(Byte[]& data, int offset, int maxBytes);
    private int CalculateNewlineLength(Byte[]& data, int offset);
    private void Parse(RebufferableBinaryReader reader);
    [AsyncStateMachineAttribute("HttpMultipartParser.StreamingBinaryMultipartFormDataParser/<ParseAsync>d__39")]
private Task ParseAsync(RebufferableBinaryReader reader, CancellationToken cancellationToken);
    private void ParseFilePart(Dictionary`2<string, string> parameters, RebufferableBinaryReader reader);
    [AsyncStateMachineAttribute("HttpMultipartParser.StreamingBinaryMultipartFormDataParser/<ParseFilePartAsync>d__41")]
private Task ParseFilePartAsync(Dictionary`2<string, string> parameters, RebufferableBinaryReader reader, CancellationToken cancellationToken);
    private void ParseParameterPart(Dictionary`2<string, string> parameters, RebufferableBinaryReader reader);
    [AsyncStateMachineAttribute("HttpMultipartParser.StreamingBinaryMultipartFormDataParser/<ParseParameterPartAsync>d__43")]
private Task ParseParameterPartAsync(Dictionary`2<string, string> parameters, RebufferableBinaryReader reader, CancellationToken cancellationToken);
    private void SkipPart(RebufferableBinaryReader reader);
    [AsyncStateMachineAttribute("HttpMultipartParser.StreamingBinaryMultipartFormDataParser/<SkipPartAsync>d__45")]
private Task SkipPartAsync(RebufferableBinaryReader reader, CancellationToken cancellationToken);
    private void ParseSection(RebufferableBinaryReader reader);
    [AsyncStateMachineAttribute("HttpMultipartParser.StreamingBinaryMultipartFormDataParser/<ParseSectionAsync>d__47")]
private Task ParseSectionAsync(RebufferableBinaryReader reader, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("HttpMultipartParser.StreamingBinaryMultipartFormDataParser/<SplitBySemicolonIgnoringSemicolonsInQuotes>d__48")]
private IEnumerable`1<string> SplitBySemicolonIgnoringSemicolonsInQuotes(string line);
    private IDictionary`2<string, string> GetAdditionalParameters(IDictionary`2<string, string> parameters);
}
public class HttpMultipartParser.StreamingMultipartFormDataParser : object {
    private String[] binaryMimeTypes;
    private Stream stream;
    private bool ignoreInvalidParts;
    private string boundary;
    [CompilerGeneratedAttribute]
private int <BinaryBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private FileStreamDelegate <FileHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDelegate <ParameterHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamClosedDelegate <StreamClosedHandler>k__BackingField;
    public int BinaryBufferSize { get; private set; }
    public Encoding Encoding { get; private set; }
    public FileStreamDelegate FileHandler { get; public set; }
    public ParameterDelegate ParameterHandler { get; public set; }
    public StreamClosedDelegate StreamClosedHandler { get; public set; }
    public StreamingMultipartFormDataParser(Stream stream, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    public StreamingMultipartFormDataParser(Stream stream, string boundary, Encoding encoding, int binaryBufferSize, String[] binaryMimeTypes, bool ignoreInvalidParts);
    public sealed virtual void Run();
    [AsyncStateMachineAttribute("HttpMultipartParser.StreamingMultipartFormDataParser/<RunAsync>d__7")]
public sealed virtual Task RunAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public int get_BinaryBufferSize();
    [CompilerGeneratedAttribute]
private void set_BinaryBufferSize(int value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public sealed virtual FileStreamDelegate get_FileHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileHandler(FileStreamDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual ParameterDelegate get_ParameterHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParameterHandler(ParameterDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual StreamClosedDelegate get_StreamClosedHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StreamClosedHandler(StreamClosedDelegate value);
    [CompilerGeneratedAttribute]
private void <Run>b__6_0(ParameterPartBinary binaryParameterPart);
    [CompilerGeneratedAttribute]
private void <Run>b__6_1(string name, string fileName, string type, string disposition, Byte[] buffer, int bytes, int partNumber, IDictionary`2<string, string> additionalProperties);
    [CompilerGeneratedAttribute]
private void <RunAsync>b__7_0(ParameterPartBinary binaryParameterPart);
    [CompilerGeneratedAttribute]
private string <RunAsync>b__7_1(Byte[] binaryLine);
    [CompilerGeneratedAttribute]
private void <RunAsync>b__7_2(string name, string fileName, string type, string disposition, Byte[] buffer, int bytes, int partNumber, IDictionary`2<string, string> additionalProperties);
}
public class HttpMultipartParser.SubsequenceFinder : object {
    public static int Search(Byte[] haystack, Byte[] needle);
    public static int Search(Byte[] haystack, Byte[] needle, int haystackLength);
}
internal static class HttpMultipartParser.Utilities : object {
    [CompilerGeneratedAttribute]
private static RecyclableMemoryStreamManager <MemoryStreamManager>k__BackingField;
    [CompilerGeneratedAttribute]
private static ArrayPool`1<byte> <ArrayPool>k__BackingField;
    internal static RecyclableMemoryStreamManager MemoryStreamManager { get; }
    internal static ArrayPool`1<byte> ArrayPool { get; }
    private static Utilities();
    [CompilerGeneratedAttribute]
internal static RecyclableMemoryStreamManager get_MemoryStreamManager();
    [CompilerGeneratedAttribute]
internal static ArrayPool`1<byte> get_ArrayPool();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
