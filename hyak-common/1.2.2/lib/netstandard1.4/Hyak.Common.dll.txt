public class Hyak.Common.BasicAuthenticationCloudCredentials : CloudCredentials {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    public virtual Task ProcessHttpRequestAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public abstract class Hyak.Common.CloudCredentials : object {
    public virtual void InitializeServiceClient(ServiceClient`1<T> client);
    public virtual Task ProcessHttpRequestAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Hyak.Common.CloudError : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResponseBody>k__BackingField;
    public string Message { get; public set; }
    public string Code { get; public set; }
    public string OriginalMessage { get; public set; }
    public object ResponseBody { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalMessage();
    [CompilerGeneratedAttribute]
public void set_OriginalMessage(string value);
    [CompilerGeneratedAttribute]
public object get_ResponseBody();
    [CompilerGeneratedAttribute]
public void set_ResponseBody(object value);
}
public class Hyak.Common.CloudException : Exception {
    [CompilerGeneratedAttribute]
private CloudError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private CloudHttpRequestErrorInfo <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private CloudHttpResponseErrorInfo <Response>k__BackingField;
    public CloudError Error { get; public set; }
    public CloudHttpRequestErrorInfo Request { get; protected set; }
    public CloudHttpResponseErrorInfo Response { get; protected set; }
    public CloudException(string message);
    public CloudException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public CloudError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(CloudError value);
    [CompilerGeneratedAttribute]
public CloudHttpRequestErrorInfo get_Request();
    [CompilerGeneratedAttribute]
protected void set_Request(CloudHttpRequestErrorInfo value);
    [CompilerGeneratedAttribute]
public CloudHttpResponseErrorInfo get_Response();
    [CompilerGeneratedAttribute]
protected void set_Response(CloudHttpResponseErrorInfo value);
    public static CloudException Create(HttpRequestMessage request, string requestContent, HttpResponseMessage response, string responseContent, Exception innerException);
    [ObsoleteAttribute("This method is obsolete. Use Create without defaultTo parameter.")]
public static CloudException Create(HttpRequestMessage request, string requestContent, HttpResponseMessage response, string responseContent, CloudExceptionType defaultTo, Exception innerException);
    [ObsoleteAttribute("This method is obsolete. Use Create without defaultTo parameter.")]
public static CloudException CreateFromXml(HttpRequestMessage request, string requestContent, HttpResponseMessage response, string responseContent, Exception innerException);
    [ObsoleteAttribute("This method is obsolete. Use Create without defaultTo parameter.")]
public static CloudException CreateFromJson(HttpRequestMessage request, string requestContent, HttpResponseMessage response, string responseContent, Exception innerException);
    public static CloudError ParseXmlOrJsonError(string content);
    public static CloudError ParseXmlError(string content);
    public static CloudError ParseJsonError(string content);
    public static bool IsXml(string content, bool validate);
    public static bool IsJson(string content, bool validate);
    private static char FirstNonWhitespaceCharacter(string content);
}
public enum Hyak.Common.CloudExceptionType : Enum {
    public int value__;
    public static CloudExceptionType Xml;
    public static CloudExceptionType Json;
}
public abstract class Hyak.Common.CloudHttpErrorInfo : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IEnumerable`1<string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public string Content { get; protected set; }
    public IDictionary`2<string, IEnumerable`1<string>> Headers { get; private set; }
    public Version Version { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IEnumerable`1<string>> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IDictionary`2<string, IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
protected void set_Version(Version value);
    protected void CopyHeaders(HttpHeaders headers);
}
public class Hyak.Common.CloudHttpRequestErrorInfo : CloudHttpErrorInfo {
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    public HttpMethod Method { get; protected set; }
    public Uri RequestUri { get; protected set; }
    public IDictionary`2<string, object> Properties { get; private set; }
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
protected void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public Uri get_RequestUri();
    [CompilerGeneratedAttribute]
protected void set_RequestUri(Uri value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IDictionary`2<string, object> value);
    public static CloudHttpRequestErrorInfo Create(HttpRequestMessage request);
    public static CloudHttpRequestErrorInfo Create(HttpRequestMessage request, string content);
}
public class Hyak.Common.CloudHttpResponseErrorInfo : CloudHttpErrorInfo {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonPhrase>k__BackingField;
    public HttpStatusCode StatusCode { get; protected set; }
    public string ReasonPhrase { get; protected set; }
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
protected void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonPhrase();
    [CompilerGeneratedAttribute]
protected void set_ReasonPhrase(string value);
    public static CloudHttpResponseErrorInfo Create(HttpResponseMessage response);
    public static CloudHttpResponseErrorInfo Create(HttpResponseMessage response, string content);
}
public class Hyak.Common.HttpOperationResponse : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public HttpStatusCode StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
}
public interface Hyak.Common.ICloudTracingInterceptor {
    public abstract virtual void Information(string message);
    public abstract virtual void Configuration(string source, string name, string value);
    public abstract virtual void Enter(string invocationId, object instance, string method, IDictionary`2<string, object> parameters);
    public abstract virtual void SendRequest(string invocationId, HttpRequestMessage request);
    public abstract virtual void ReceiveResponse(string invocationId, HttpResponseMessage response);
    public abstract virtual void Error(string invocationId, Exception exception);
    public abstract virtual void Exit(string invocationId, object returnValue);
}
public interface Hyak.Common.ILazyCollection {
    public bool IsInitialized { get; }
    public abstract virtual bool get_IsInitialized();
}
internal class Hyak.Common.Internals.DisposableReference`1 : object {
    [CompilerGeneratedAttribute]
private T <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ReferenceCount>k__BackingField;
    private object _lock;
    public T Reference { get; private set; }
    public UInt32 ReferenceCount { get; private set; }
    public DisposableReference`1(T reference);
    [CompilerGeneratedAttribute]
public T get_Reference();
    [CompilerGeneratedAttribute]
private void set_Reference(T value);
    [CompilerGeneratedAttribute]
public UInt32 get_ReferenceCount();
    [CompilerGeneratedAttribute]
private void set_ReferenceCount(UInt32 value);
    public void AddReference();
    public void ReleaseReference();
    private sealed virtual override void System.IDisposable.Dispose();
}
[ExtensionAttribute]
public static class Hyak.Common.Internals.HttpExtensions : object {
    [ExtensionAttribute]
public static string AsString(HttpContent content);
    [ExtensionAttribute]
public static HttpHeaders GetContentHeaders(HttpRequestMessage request);
    [ExtensionAttribute]
public static HttpHeaders GetContentHeaders(HttpResponseMessage response);
    [ExtensionAttribute]
public static string AsString(HttpRequestMessage request);
    [ExtensionAttribute]
public static string AsString(CloudHttpRequestErrorInfo request);
    [ExtensionAttribute]
public static void AppendHttpRequest(StringBuilder text, HttpRequestMessage request);
    [ExtensionAttribute]
public static void AppendHttpRequest(StringBuilder text, CloudHttpRequestErrorInfo request);
    [ExtensionAttribute]
private static void AppendHttpRequest(StringBuilder text, HttpMethod method, Uri requestUri, Version version, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> headers, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> contentHeaders, IDictionary`2<string, object> properties, string content);
    [ExtensionAttribute]
public static string AsString(HttpResponseMessage response);
    [ExtensionAttribute]
public static string AsString(CloudHttpResponseErrorInfo response);
    [ExtensionAttribute]
public static void AppendHttpResponse(StringBuilder text, HttpResponseMessage response);
    [ExtensionAttribute]
public static void AppendHttpResponse(StringBuilder text, CloudHttpResponseErrorInfo response);
    [ExtensionAttribute]
private static void AppendHttpResponse(StringBuilder text, HttpStatusCode statusCode, string reasonPhrase, Version version, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> headers, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> contentHeaders, string content);
    [ExtensionAttribute]
private static void AppendHttpHeaders(StringBuilder text, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> headers);
}
internal class Hyak.Common.Internals.IndisposableDelegatingHandler : DelegatingHandler {
    public IndisposableDelegatingHandler(HttpMessageHandler innerHandler);
    protected virtual void Dispose(bool disposing);
}
public static class Hyak.Common.Internals.TypeConversion : object {
    public static string ToBase64String(string value);
    public static string BytesToString(Byte[] value);
    public static string FromBase64String(string value);
    public static Uri TryParseUri(string value);
}
public interface Hyak.Common.IServiceOperations`1 {
    public TClient Client { get; }
    public abstract virtual TClient get_Client();
}
[DefaultMemberAttribute("Item")]
public class Hyak.Common.LazyDictionary`2 : object {
    private IDictionary`2<TKey, TValue> _internalDictionary;
    private IDictionary`2<TKey, TValue> InternalDictionary { get; private set; }
    public bool IsInitialized { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public LazyDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public LazyDictionary`2(IDictionary`2<TKey, TValue> dictionary, IEqualityComparer`1<TKey> comparer);
    public LazyDictionary`2(IEqualityComparer`1<TKey> comparer);
    public LazyDictionary`2(int capacity);
    public LazyDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    private IDictionary`2<TKey, TValue> get_InternalDictionary();
    private void set_InternalDictionary(IDictionary`2<TKey, TValue> value);
    public sealed virtual bool get_IsInitialized();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Hyak.Common.LazyList`1 : object {
    private IList`1<T> _internalList;
    private IList`1<T> InternalList { get; private set; }
    public bool IsInitialized { get; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public LazyList`1(IEnumerable`1<T> collection);
    public LazyList`1(int capacity);
    private IList`1<T> get_InternalList();
    private void set_InternalList(IList`1<T> value);
    public sealed virtual bool get_IsInitialized();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Hyak.Common.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ArgumentCannotBeEmpty { get; }
    public static string ArgumentCannotBeGreaterThanBaseline { get; }
    public static string ArgumentCannotBeNegative { get; }
    public static string ConfigurationHelper_CreateCouldNotConvertException { get; }
    public static string ConfigurationHelper_CreateFromSettings_CreateSettingsFailedException { get; }
    public static string ConfigurationHelper_CreateFromSettings_NoConnectionSettingsFound { get; }
    public static string ConfigurationHelper_GetCredentials_NotFound { get; }
    public static string ConfigurationHelper_GetParameter_NotFound { get; }
    public static string DefaultRetryStrategyMappingNotFound { get; }
    public static string DefaultRetryStrategyNotFound { get; }
    public static string ExceptionRetryHandlerMissing { get; }
    public static string ExceptionRetryManagerAlreadySet { get; }
    public static string ExceptionRetryManagerNotSet { get; }
    public static string ResponseStatusCodeError { get; }
    public static string RetryLimitExceeded { get; }
    public static string RetryStrategyNotFound { get; }
    public static string StringCannotBeEmpty { get; }
    public static string TaskCannotBeNull { get; }
    public static string TaskMustBeScheduled { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ArgumentCannotBeEmpty();
    public static string get_ArgumentCannotBeGreaterThanBaseline();
    public static string get_ArgumentCannotBeNegative();
    public static string get_ConfigurationHelper_CreateCouldNotConvertException();
    public static string get_ConfigurationHelper_CreateFromSettings_CreateSettingsFailedException();
    public static string get_ConfigurationHelper_CreateFromSettings_NoConnectionSettingsFound();
    public static string get_ConfigurationHelper_GetCredentials_NotFound();
    public static string get_ConfigurationHelper_GetParameter_NotFound();
    public static string get_DefaultRetryStrategyMappingNotFound();
    public static string get_DefaultRetryStrategyNotFound();
    public static string get_ExceptionRetryHandlerMissing();
    public static string get_ExceptionRetryManagerAlreadySet();
    public static string get_ExceptionRetryManagerNotSet();
    public static string get_ResponseStatusCodeError();
    public static string get_RetryLimitExceeded();
    public static string get_RetryStrategyNotFound();
    public static string get_StringCannotBeEmpty();
    public static string get_TaskCannotBeNull();
    public static string get_TaskMustBeScheduled();
}
public class Hyak.Common.RetryHandler : DelegatingHandler {
    private static int DefaultNumberOfAttempts;
    private TimeSpan DefaultMinBackoff;
    private TimeSpan DefaultMaxBackoff;
    private TimeSpan DefaultBackoffDelta;
    [CompilerGeneratedAttribute]
private RetryPolicy <RetryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<RetryingEventArgs> Retrying;
    public RetryPolicy RetryPolicy { get; public set; }
    public RetryHandler(DelegatingHandler innerHandler);
    public RetryHandler(RetryPolicy retryPolicy, DelegatingHandler innerHandler);
    [CompilerGeneratedAttribute]
public RetryPolicy get_RetryPolicy();
    [CompilerGeneratedAttribute]
public void set_RetryPolicy(RetryPolicy value);
    [AsyncStateMachineAttribute("Hyak.Common.RetryHandler/<SendAsync>d__11")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public void add_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
private void <SendAsync>b__11_0(object sender, RetryingEventArgs args);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public abstract class Hyak.Common.ServiceClient`1 : object {
    internal bool _disposed;
    internal DisposableReference`1<HttpMessageHandler> _innerHandler;
    internal DisposableReference`1<HttpMessageHandler> _handler;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    public HttpClient HttpClient { get; public set; }
    protected internal HttpMessageHandler HttpMessageHandler { get; }
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> UserAgent { get; }
    public ServiceClient`1(HttpClient httpClient);
    [CompilerGeneratedAttribute]
public HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public void set_HttpClient(HttpClient value);
    protected internal HttpMessageHandler get_HttpMessageHandler();
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> get_UserAgent();
    public virtual void Dispose();
    public virtual T WithHandler(DelegatingHandler handler);
    public T WithHandlers(IEnumerable`1<DelegatingHandler> handlers);
    [IteratorStateMachineAttribute("Hyak.Common.ServiceClient`1/<GetHttpPipeline>d__16")]
public IEnumerable`1<HttpMessageHandler> GetHttpPipeline();
    public void AddHandlerToPipeline(DelegatingHandler handler);
    public void SetRetryPolicy(RetryPolicy retryPolicy);
    protected void InitializeHttpClient(HttpMessageHandler httpMessageHandler);
    private HttpClient CreateHttpClient();
    private string GetAssemblyVersion();
    protected virtual void Clone(ServiceClient`1<T> client);
    internal static void CloneHttpClient(HttpClient source, HttpClient destination);
    protected virtual T WithHandler(ServiceClient`1<T> newClient, DelegatingHandler handler);
}
public static class Hyak.Common.TracingAdapter : object {
    private static List`1<ICloudTracingInterceptor> _interceptors;
    private static List`1<ICloudTracingInterceptor> _threadSafeInterceptors;
    private static object _lock;
    [CompilerGeneratedAttribute]
private static bool <IsEnabled>k__BackingField;
    private static long _nextInvocationId;
    public static bool IsEnabled { get; public set; }
    internal static IEnumerable`1<ICloudTracingInterceptor> TracingInterceptors { get; }
    public static long NextInvocationId { get; }
    private static TracingAdapter();
    [CompilerGeneratedAttribute]
public static bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsEnabled(bool value);
    internal static IEnumerable`1<ICloudTracingInterceptor> get_TracingInterceptors();
    public static void AddTracingInterceptor(ICloudTracingInterceptor interceptor);
    public static bool RemoveTracingInterceptor(ICloudTracingInterceptor interceptor);
    public static long get_NextInvocationId();
    public static void Information(string message, Object[] parameters);
    public static void Configuration(string source, string name, string value);
    public static void Information(string message);
    public static void Enter(string invocationId, object instance, string method, IDictionary`2<string, object> parameters);
    public static void SendRequest(string invocationId, HttpRequestMessage request);
    public static void ReceiveResponse(string invocationId, HttpResponseMessage response);
    public static void Error(string invocationId, Exception ex);
    public static void Exit(string invocationId, object result);
}
[ExtensionAttribute]
public static class Hyak.Common.TracingExtensions : object {
    [ExtensionAttribute]
public static string AsFormattedString(HttpRequestMessage httpRequest);
    [ExtensionAttribute]
public static string AsFormattedString(HttpResponseMessage httpResponse);
    [ExtensionAttribute]
public static string AsFormattedString(IDictionary`2<TKey, TValue> dictionary);
}
internal class Hyak.Common.TransientFaultHandling.AsyncExecution : AsyncExecution`1<bool> {
    private static Task`1<bool> cachedBoolTask;
    public AsyncExecution(Func`1<Task> taskAction, ShouldRetry shouldRetry, Func`2<Exception, bool> isTransient, Action`3<int, Exception, TimeSpan> onRetrying, bool fastFirstRetry, CancellationToken cancellationToken);
    private static Task`1<bool> StartAsGenericTask(Func`1<Task> taskAction);
    private static Task`1<bool> GetCachedTask();
}
internal class Hyak.Common.TransientFaultHandling.AsyncExecution`1 : object {
    private Func`1<Task`1<TResult>> _taskFunc;
    private ShouldRetry _shouldRetry;
    private Func`2<Exception, bool> _isTransient;
    private Action`3<int, Exception, TimeSpan> _onRetrying;
    private bool _fastFirstRetry;
    private CancellationToken _cancellationToken;
    private Task`1<TResult> _previousTask;
    private int _retryCount;
    public AsyncExecution`1(Func`1<Task`1<TResult>> taskFunc, ShouldRetry shouldRetry, Func`2<Exception, bool> isTransient, Action`3<int, Exception, TimeSpan> onRetrying, bool fastFirstRetry, CancellationToken cancellationToken);
    internal Task`1<TResult> ExecuteAsync();
    private Task`1<TResult> ExecuteAsyncImpl(Task ignore);
    private Task`1<TResult> ExecuteAsyncContinueWith(Task`1<TResult> runningTask);
}
public class Hyak.Common.TransientFaultHandling.DefaultHttpErrorDetectionStrategy : object {
    public sealed virtual bool IsTransient(Exception ex);
}
public class Hyak.Common.TransientFaultHandling.ExponentialBackoff : RetryStrategy {
    private int _retryCount;
    private TimeSpan _minBackoff;
    private TimeSpan _maxBackoff;
    private TimeSpan _deltaBackoff;
    public ExponentialBackoff(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public ExponentialBackoff(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public ExponentialBackoff(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__8_0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
public class Hyak.Common.TransientFaultHandling.FixedInterval : RetryStrategy {
    private int _retryCount;
    private TimeSpan _retryInterval;
    public FixedInterval(int retryCount);
    public FixedInterval(int retryCount, TimeSpan retryInterval);
    public FixedInterval(string name, int retryCount, TimeSpan retryInterval);
    public FixedInterval(string name, int retryCount, TimeSpan retryInterval, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__7_1(int currentRetryCount, Exception lastException, TimeSpan& interval);
}
internal static class Hyak.Common.TransientFaultHandling.Guard : object {
    public static bool ArgumentNotNullOrEmptyString(string argumentValue, string argumentName);
    public static bool ArgumentNotNull(object argumentValue, string argumentName);
    public static void ArgumentNotNegativeValue(int argumentValue, string argumentName);
    public static void ArgumentNotNegativeValue(long argumentValue, string argumentName);
    public static void ArgumentNotGreaterThan(double argumentValue, double ceilingValue, string argumentName);
}
public class Hyak.Common.TransientFaultHandling.HttpRequestExceptionWithStatus : HttpRequestException {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public HttpStatusCode StatusCode { get; public set; }
    public HttpRequestExceptionWithStatus(string message);
    public HttpRequestExceptionWithStatus(string message, Exception inner);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
}
public class Hyak.Common.TransientFaultHandling.Incremental : RetryStrategy {
    private int _retryCount;
    private TimeSpan _initialInterval;
    private TimeSpan _increment;
    public Incremental(int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public Incremental(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public Incremental(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__7_0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
public interface Hyak.Common.TransientFaultHandling.ITransientErrorDetectionStrategy {
    public abstract virtual bool IsTransient(Exception ex);
}
public class Hyak.Common.TransientFaultHandling.RetryingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <CurrentRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <LastException>k__BackingField;
    public int CurrentRetryCount { get; private set; }
    public TimeSpan Delay { get; private set; }
    public Exception LastException { get; private set; }
    public RetryingEventArgs(int currentRetryCount, TimeSpan delay, Exception lastException);
    [CompilerGeneratedAttribute]
public int get_CurrentRetryCount();
    [CompilerGeneratedAttribute]
private void set_CurrentRetryCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
private void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public Exception get_LastException();
    [CompilerGeneratedAttribute]
private void set_LastException(Exception value);
}
[ObsoleteAttribute("You should use cancellation tokens or other means of stopping the retry loop.")]
public class Hyak.Common.TransientFaultHandling.RetryLimitExceededException : Exception {
    public RetryLimitExceededException(string message);
    public RetryLimitExceededException(Exception innerException);
    public RetryLimitExceededException(string message, Exception innerException);
}
public class Hyak.Common.TransientFaultHandling.RetryManager : object {
    private static RetryManager _defaultRetryManager;
    private IDictionary`2<string, RetryStrategy> _retryStrategies;
    private string _defaultRetryStrategyName;
    private IDictionary`2<string, string> _defaultRetryStrategyNamesMap;
    private IDictionary`2<string, RetryStrategy> _defaultRetryStrategiesMap;
    private RetryStrategy _defaultStrategy;
    public static RetryManager Instance { get; }
    public string DefaultRetryStrategyName { get; public set; }
    public RetryManager(IEnumerable`1<RetryStrategy> retryStrategies);
    public RetryManager(IEnumerable`1<RetryStrategy> retryStrategies, string defaultRetryStrategyName);
    public RetryManager(IEnumerable`1<RetryStrategy> retryStrategies, string defaultRetryStrategyName, IDictionary`2<string, string> defaultRetryStrategyNamesMap);
    public static void SetDefault(RetryManager retryManager, bool throwIfSet);
    public static RetryManager get_Instance();
    public string get_DefaultRetryStrategyName();
    public void set_DefaultRetryStrategyName(string value);
    public virtual RetryPolicy`1<T> GetRetryPolicy();
    public virtual RetryPolicy`1<T> GetRetryPolicy(string retryStrategyName);
    public virtual RetryStrategy GetRetryStrategy();
    public virtual RetryStrategy GetRetryStrategy(string retryStrategyName);
    public virtual RetryStrategy GetDefaultRetryStrategy(string technology);
}
public class Hyak.Common.TransientFaultHandling.RetryPolicy : object {
    private static RetryPolicy noRetry;
    private static RetryPolicy defaultFixed;
    private static RetryPolicy defaultProgressive;
    private static RetryPolicy defaultExponential;
    [CompilerGeneratedAttribute]
private EventHandler`1<RetryingEventArgs> Retrying;
    [CompilerGeneratedAttribute]
private RetryStrategy <RetryStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransientErrorDetectionStrategy <ErrorDetectionStrategy>k__BackingField;
    public static RetryPolicy NoRetry { get; }
    public static RetryPolicy DefaultFixed { get; }
    public static RetryPolicy DefaultProgressive { get; }
    public static RetryPolicy DefaultExponential { get; }
    public RetryStrategy RetryStrategy { get; private set; }
    public ITransientErrorDetectionStrategy ErrorDetectionStrategy { get; private set; }
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryStrategy retryStrategy);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan retryInterval);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    private static RetryPolicy();
    public static RetryPolicy get_NoRetry();
    public static RetryPolicy get_DefaultFixed();
    public static RetryPolicy get_DefaultProgressive();
    public static RetryPolicy get_DefaultExponential();
    [CompilerGeneratedAttribute]
public void add_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public RetryStrategy get_RetryStrategy();
    [CompilerGeneratedAttribute]
private void set_RetryStrategy(RetryStrategy value);
    [CompilerGeneratedAttribute]
public ITransientErrorDetectionStrategy get_ErrorDetectionStrategy();
    [CompilerGeneratedAttribute]
private void set_ErrorDetectionStrategy(ITransientErrorDetectionStrategy value);
    public virtual void ExecuteAction(Action action);
    public virtual TResult ExecuteAction(Func`1<TResult> func);
    public Task ExecuteAsync(Func`1<Task> taskAction);
    public Task ExecuteAsync(Func`1<Task> taskAction, CancellationToken cancellationToken);
    public Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> taskFunc);
    public Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> taskFunc, CancellationToken cancellationToken);
    protected virtual void OnRetrying(int retryCount, Exception lastError, TimeSpan delay);
}
public class Hyak.Common.TransientFaultHandling.RetryPolicy`1 : RetryPolicy {
    public RetryPolicy`1(RetryStrategy retryStrategy);
    public RetryPolicy`1(int retryCount);
    public RetryPolicy`1(int retryCount, TimeSpan retryInterval);
    public RetryPolicy`1(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public RetryPolicy`1(int retryCount, TimeSpan initialInterval, TimeSpan increment);
}
public abstract class Hyak.Common.TransientFaultHandling.RetryStrategy : object {
    public static int DefaultClientRetryCount;
    public static TimeSpan DefaultClientBackoff;
    public static TimeSpan DefaultMaxBackoff;
    public static TimeSpan DefaultMinBackoff;
    public static TimeSpan DefaultRetryInterval;
    public static TimeSpan DefaultRetryIncrement;
    public static bool DefaultFirstFastRetry;
    private static RetryStrategy noRetry;
    private static RetryStrategy defaultFixed;
    private static RetryStrategy defaultProgressive;
    private static RetryStrategy defaultExponential;
    [CompilerGeneratedAttribute]
private bool <FastFirstRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static RetryStrategy NoRetry { get; }
    public static RetryStrategy DefaultFixed { get; }
    public static RetryStrategy DefaultProgressive { get; }
    public static RetryStrategy DefaultExponential { get; }
    public bool FastFirstRetry { get; public set; }
    public string Name { get; private set; }
    protected RetryStrategy(string name, bool firstFastRetry);
    private static RetryStrategy();
    public static RetryStrategy get_NoRetry();
    public static RetryStrategy get_DefaultFixed();
    public static RetryStrategy get_DefaultProgressive();
    public static RetryStrategy get_DefaultExponential();
    [CompilerGeneratedAttribute]
public bool get_FastFirstRetry();
    [CompilerGeneratedAttribute]
public void set_FastFirstRetry(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public abstract virtual ShouldRetry GetShouldRetry();
}
public class Hyak.Common.TransientFaultHandling.ShouldRetry : MulticastDelegate {
    public ShouldRetry(object object, IntPtr method);
    public virtual bool Invoke(int retryCount, Exception lastException, TimeSpan& delay);
    public virtual IAsyncResult BeginInvoke(int retryCount, Exception lastException, TimeSpan& delay, AsyncCallback callback, object object);
    public virtual bool EndInvoke(TimeSpan& delay, IAsyncResult result);
}
