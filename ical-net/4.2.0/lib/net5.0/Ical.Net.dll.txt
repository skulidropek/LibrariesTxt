public static class Ical.Net.AlarmAction : object {
    public static string Name;
    public static string Key;
    public static StringComparison Comparison;
    public static string Audio;
    public static string Display;
    public static string Email;
    [ObsoleteAttribute("Procedure was deprecated by RFC-5545")]
public static string Procedure;
    private static AlarmAction();
}
public class Ical.Net.Calendar : CalendarComponent {
    private IUniqueComponentList`1<IUniqueComponent> _mUniqueComponents;
    private IUniqueComponentList`1<CalendarEvent> _mEvents;
    private IUniqueComponentList`1<Todo> _mTodos;
    private ICalendarObjectList`1<Journal> _mJournals;
    private IUniqueComponentList`1<FreeBusy> _mFreeBusy;
    private ICalendarObjectList`1<VTimeZone> _mTimeZones;
    public IUniqueComponentList`1<IUniqueComponent> UniqueComponents { get; }
    public IEnumerable`1<IRecurrable> RecurringItems { get; }
    public IUniqueComponentList`1<CalendarEvent> Events { get; }
    public IUniqueComponentList`1<FreeBusy> FreeBusy { get; }
    public ICalendarObjectList`1<Journal> Journals { get; }
    public ICalendarObjectList`1<VTimeZone> TimeZones { get; }
    public IUniqueComponentList`1<Todo> Todos { get; }
    public string Version { get; public set; }
    public string ProductId { get; public set; }
    public string Scale { get; public set; }
    public string Method { get; public set; }
    public RecurrenceRestrictionType RecurrenceRestriction { get; public set; }
    public RecurrenceEvaluationModeType RecurrenceEvaluationMode { get; public set; }
    public static Calendar Load(string iCalendarString);
    public static Calendar Load(Stream s);
    public static Calendar Load(TextReader tr);
    public static IList`1<T> Load(Stream s, Encoding e);
    public static IList`1<T> Load(TextReader tr);
    public static IList`1<T> Load(string ical);
    private void Initialize();
    protected virtual void OnDeserializing(StreamingContext context);
    protected bool Equals(Calendar other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual IUniqueComponentList`1<IUniqueComponent> get_UniqueComponents();
    public virtual IEnumerable`1<IRecurrable> get_RecurringItems();
    public virtual IUniqueComponentList`1<CalendarEvent> get_Events();
    public virtual IUniqueComponentList`1<FreeBusy> get_FreeBusy();
    public virtual ICalendarObjectList`1<Journal> get_Journals();
    public virtual ICalendarObjectList`1<VTimeZone> get_TimeZones();
    public virtual IUniqueComponentList`1<Todo> get_Todos();
    public virtual string get_Version();
    public virtual void set_Version(string value);
    public virtual string get_ProductId();
    public virtual void set_ProductId(string value);
    public virtual string get_Scale();
    public virtual void set_Scale(string value);
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual RecurrenceRestrictionType get_RecurrenceRestriction();
    public virtual void set_RecurrenceRestriction(RecurrenceRestrictionType value);
    public virtual RecurrenceEvaluationModeType get_RecurrenceEvaluationMode();
    public virtual void set_RecurrenceEvaluationMode(RecurrenceEvaluationModeType value);
    public VTimeZone AddTimeZone(VTimeZone tz);
    [ObsoleteAttribute("This method is no longer supported.  Use GetOccurrences() instead.")]
public void Evaluate(IDateTime fromDate, IDateTime toDate);
    [ObsoleteAttribute("This method is no longer supported.  Use GetOccurrences() instead.")]
public void Evaluate(IDateTime fromDate, IDateTime toDate);
    public sealed virtual void ClearEvaluation();
    public virtual HashSet`1<Occurrence> GetOccurrences(IDateTime dt);
    public virtual HashSet`1<Occurrence> GetOccurrences(DateTime dt);
    public virtual HashSet`1<Occurrence> GetOccurrences(IDateTime startTime, IDateTime endTime);
    public virtual HashSet`1<Occurrence> GetOccurrences(DateTime startTime, DateTime endTime);
    public virtual HashSet`1<Occurrence> GetOccurrences(IDateTime dt);
    public virtual HashSet`1<Occurrence> GetOccurrences(DateTime dt);
    public virtual HashSet`1<Occurrence> GetOccurrences(IDateTime startTime, IDateTime endTime);
    public virtual HashSet`1<Occurrence> GetOccurrences(DateTime startTime, DateTime endTime);
    public T Create();
    public void Dispose();
    public virtual void MergeWith(IMergeable obj);
    public virtual FreeBusy GetFreeBusy(FreeBusy freeBusyRequest);
    public virtual FreeBusy GetFreeBusy(IDateTime fromInclusive, IDateTime toExclusive);
    public virtual FreeBusy GetFreeBusy(Organizer organizer, IEnumerable`1<Attendee> contacts, IDateTime fromInclusive, IDateTime toExclusive);
    public VTimeZone AddTimeZone(TimeZoneInfo tzi);
    public VTimeZone AddTimeZone(TimeZoneInfo tzi, DateTime earliestDateTimeToSupport, bool includeHistoricalData);
    public VTimeZone AddTimeZone(string tzId);
    public VTimeZone AddTimeZone(string tzId, DateTime earliestDateTimeToSupport, bool includeHistoricalData);
    public VTimeZone AddLocalTimeZone(DateTime earliestDateTimeToSupport, bool includeHistoricalData);
    [CompilerGeneratedAttribute]
private bool <MergeWith>b__64_0(ICalendarProperty p);
}
public class Ical.Net.CalendarCollection : List`1<Calendar> {
    public static CalendarCollection Load(string iCalendarString);
    public static CalendarCollection Load(Stream s);
    public static CalendarCollection Load(TextReader tr);
    public void ClearEvaluation();
    public HashSet`1<Occurrence> GetOccurrences(IDateTime dt);
    public HashSet`1<Occurrence> GetOccurrences(DateTime dt);
    public HashSet`1<Occurrence> GetOccurrences(IDateTime startTime, IDateTime endTime);
    public HashSet`1<Occurrence> GetOccurrences(DateTime startTime, DateTime endTime);
    public HashSet`1<Occurrence> GetOccurrences(IDateTime dt);
    public HashSet`1<Occurrence> GetOccurrences(DateTime dt);
    public HashSet`1<Occurrence> GetOccurrences(IDateTime startTime, IDateTime endTime);
    public HashSet`1<Occurrence> GetOccurrences(DateTime startTime, DateTime endTime);
    private FreeBusy CombineFreeBusy(FreeBusy main, FreeBusy current);
    public FreeBusy GetFreeBusy(FreeBusy freeBusyRequest);
    public FreeBusy GetFreeBusy(IDateTime fromInclusive, IDateTime toExclusive);
    public FreeBusy GetFreeBusy(Organizer organizer, IEnumerable`1<Attendee> contacts, IDateTime fromInclusive, IDateTime toExclusive);
    public virtual int GetHashCode();
    protected bool Equals(CalendarCollection obj);
    public virtual bool Equals(object obj);
}
public class Ical.Net.CalendarComponents.Alarm : CalendarComponent {
    [CompilerGeneratedAttribute]
private IList`1<AlarmOccurrence> <Occurrences>k__BackingField;
    public string Action { get; public set; }
    public Attachment Attachment { get; public set; }
    public IList`1<Attendee> Attendees { get; public set; }
    public string Description { get; public set; }
    public TimeSpan Duration { get; public set; }
    public int Repeat { get; public set; }
    public string Summary { get; public set; }
    public Trigger Trigger { get; public set; }
    protected IList`1<AlarmOccurrence> Occurrences { get; protected set; }
    public virtual string get_Action();
    public virtual void set_Action(string value);
    public virtual Attachment get_Attachment();
    public virtual void set_Attachment(Attachment value);
    public virtual IList`1<Attendee> get_Attendees();
    public virtual void set_Attendees(IList`1<Attendee> value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual TimeSpan get_Duration();
    public virtual void set_Duration(TimeSpan value);
    public virtual int get_Repeat();
    public virtual void set_Repeat(int value);
    public virtual string get_Summary();
    public virtual void set_Summary(string value);
    public virtual Trigger get_Trigger();
    public virtual void set_Trigger(Trigger value);
    [CompilerGeneratedAttribute]
protected virtual IList`1<AlarmOccurrence> get_Occurrences();
    [CompilerGeneratedAttribute]
protected virtual void set_Occurrences(IList`1<AlarmOccurrence> value);
    public virtual IList`1<AlarmOccurrence> GetOccurrences(IRecurringComponent rc, IDateTime fromDate, IDateTime toDate);
    public virtual IList`1<AlarmOccurrence> Poll(IDateTime start, IDateTime end);
    protected virtual void AddRepeatedItems();
}
[DebuggerDisplayAttribute("Component: {Name}")]
public class Ical.Net.CalendarComponents.CalendarComponent : CalendarObject {
    [CompilerGeneratedAttribute]
private CalendarPropertyList <Properties>k__BackingField;
    public CalendarPropertyList Properties { get; protected set; }
    public CalendarComponent(string name);
    [CompilerGeneratedAttribute]
public virtual CalendarPropertyList get_Properties();
    [CompilerGeneratedAttribute]
protected virtual void set_Properties(CalendarPropertyList value);
    private void Initialize();
    protected virtual void OnDeserializing(StreamingContext context);
    public virtual void CopyFrom(ICopyable obj);
    public virtual void AddProperty(string name, string value);
    public virtual void AddProperty(ICalendarProperty p);
}
public class Ical.Net.CalendarComponents.CalendarEvent : RecurringComponent {
    internal static string ComponentName;
    private EventEvaluator _mEvaluator;
    public IDateTime DtStart { get; public set; }
    public IDateTime DtEnd { get; public set; }
    public TimeSpan Duration { get; public set; }
    public IDateTime End { get; public set; }
    public bool IsAllDay { get; public set; }
    public GeographicLocation GeographicLocation { get; public set; }
    public string Location { get; public set; }
    public IList`1<string> Resources { get; public set; }
    public string Status { get; public set; }
    public string Transparency { get; public set; }
    public bool IsActive { get; }
    protected bool EvaluationIncludesReferenceDate { get; }
    public virtual IDateTime get_DtStart();
    public virtual void set_DtStart(IDateTime value);
    public virtual IDateTime get_DtEnd();
    public virtual void set_DtEnd(IDateTime value);
    public virtual TimeSpan get_Duration();
    public virtual void set_Duration(TimeSpan value);
    public virtual IDateTime get_End();
    public virtual void set_End(IDateTime value);
    public virtual bool get_IsAllDay();
    public virtual void set_IsAllDay(bool value);
    public GeographicLocation get_GeographicLocation();
    public void set_GeographicLocation(GeographicLocation value);
    public string get_Location();
    public void set_Location(string value);
    public virtual IList`1<string> get_Resources();
    public virtual void set_Resources(IList`1<string> value);
    public string get_Status();
    public void set_Status(string value);
    public string get_Transparency();
    public void set_Transparency(string value);
    private void Initialize();
    public virtual bool OccursOn(IDateTime dateTime);
    public virtual bool OccursAt(IDateTime dateTime);
    public virtual bool get_IsActive();
    protected virtual bool get_EvaluationIncludesReferenceDate();
    protected virtual void OnDeserializing(StreamingContext context);
    protected virtual void OnDeserialized(StreamingContext context);
    private void ExtrapolateTimes(int source);
    protected bool Equals(CalendarEvent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CalendarEvent other);
}
public class Ical.Net.CalendarComponents.FreeBusy : UniqueComponent {
    public IList`1<FreeBusyEntry> Entries { get; public set; }
    public IDateTime DtStart { get; public set; }
    public IDateTime DtEnd { get; public set; }
    public IDateTime Start { get; public set; }
    public IDateTime End { get; public set; }
    public static FreeBusy Create(ICalendarObject obj, FreeBusy freeBusyRequest);
    public static FreeBusy CreateRequest(IDateTime fromInclusive, IDateTime toExclusive, Organizer organizer, IEnumerable`1<Attendee> contacts);
    public virtual IList`1<FreeBusyEntry> get_Entries();
    public virtual void set_Entries(IList`1<FreeBusyEntry> value);
    public virtual IDateTime get_DtStart();
    public virtual void set_DtStart(IDateTime value);
    public virtual IDateTime get_DtEnd();
    public virtual void set_DtEnd(IDateTime value);
    public virtual IDateTime get_Start();
    public virtual void set_Start(IDateTime value);
    public virtual IDateTime get_End();
    public virtual void set_End(IDateTime value);
    public virtual FreeBusyStatus GetFreeBusyStatus(Period period);
    public virtual FreeBusyStatus GetFreeBusyStatus(IDateTime dt);
    public virtual void MergeWith(IMergeable obj);
    [CompilerGeneratedAttribute]
private bool <MergeWith>b__20_0(FreeBusyEntry entry);
}
public interface Ical.Net.CalendarComponents.IAlarmContainer {
    public ICalendarObjectList`1<Alarm> Alarms { get; }
    public abstract virtual ICalendarObjectList`1<Alarm> get_Alarms();
    public abstract virtual IList`1<AlarmOccurrence> PollAlarms(IDateTime startTime, IDateTime endTime);
}
public interface Ical.Net.CalendarComponents.ICalendarComponent {
}
public interface Ical.Net.CalendarComponents.IRecurrable {
    public IDateTime Start { get; public set; }
    public IList`1<PeriodList> ExceptionDates { get; public set; }
    public IList`1<RecurrencePattern> ExceptionRules { get; public set; }
    public IList`1<PeriodList> RecurrenceDates { get; public set; }
    public IList`1<RecurrencePattern> RecurrenceRules { get; public set; }
    public IDateTime RecurrenceId { get; public set; }
    public abstract virtual IDateTime get_Start();
    public abstract virtual void set_Start(IDateTime value);
    public abstract virtual IList`1<PeriodList> get_ExceptionDates();
    public abstract virtual void set_ExceptionDates(IList`1<PeriodList> value);
    public abstract virtual IList`1<RecurrencePattern> get_ExceptionRules();
    public abstract virtual void set_ExceptionRules(IList`1<RecurrencePattern> value);
    public abstract virtual IList`1<PeriodList> get_RecurrenceDates();
    public abstract virtual void set_RecurrenceDates(IList`1<PeriodList> value);
    public abstract virtual IList`1<RecurrencePattern> get_RecurrenceRules();
    public abstract virtual void set_RecurrenceRules(IList`1<RecurrencePattern> value);
    public abstract virtual IDateTime get_RecurrenceId();
    public abstract virtual void set_RecurrenceId(IDateTime value);
}
public interface Ical.Net.CalendarComponents.IRecurringComponent {
    public IList`1<Attachment> Attachments { get; public set; }
    public IList`1<string> Categories { get; public set; }
    public string Class { get; public set; }
    public IList`1<string> Contacts { get; public set; }
    public IDateTime Created { get; public set; }
    public string Description { get; public set; }
    public IDateTime LastModified { get; public set; }
    public int Priority { get; public set; }
    public IList`1<string> RelatedComponents { get; public set; }
    public int Sequence { get; public set; }
    public string Summary { get; public set; }
    public abstract virtual IList`1<Attachment> get_Attachments();
    public abstract virtual void set_Attachments(IList`1<Attachment> value);
    public abstract virtual IList`1<string> get_Categories();
    public abstract virtual void set_Categories(IList`1<string> value);
    public abstract virtual string get_Class();
    public abstract virtual void set_Class(string value);
    public abstract virtual IList`1<string> get_Contacts();
    public abstract virtual void set_Contacts(IList`1<string> value);
    public abstract virtual IDateTime get_Created();
    public abstract virtual void set_Created(IDateTime value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual IDateTime get_LastModified();
    public abstract virtual void set_LastModified(IDateTime value);
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual IList`1<string> get_RelatedComponents();
    public abstract virtual void set_RelatedComponents(IList`1<string> value);
    public abstract virtual int get_Sequence();
    public abstract virtual void set_Sequence(int value);
    public abstract virtual string get_Summary();
    public abstract virtual void set_Summary(string value);
}
public interface Ical.Net.CalendarComponents.IUniqueComponent {
    public string Uid { get; public set; }
    public IList`1<Attendee> Attendees { get; public set; }
    public IList`1<string> Comments { get; public set; }
    public IDateTime DtStamp { get; public set; }
    public Organizer Organizer { get; public set; }
    public IList`1<RequestStatus> RequestStatuses { get; public set; }
    public Uri Url { get; public set; }
    public abstract virtual string get_Uid();
    public abstract virtual void set_Uid(string value);
    public abstract virtual IList`1<Attendee> get_Attendees();
    public abstract virtual void set_Attendees(IList`1<Attendee> value);
    public abstract virtual IList`1<string> get_Comments();
    public abstract virtual void set_Comments(IList`1<string> value);
    public abstract virtual IDateTime get_DtStamp();
    public abstract virtual void set_DtStamp(IDateTime value);
    public abstract virtual Organizer get_Organizer();
    public abstract virtual void set_Organizer(Organizer value);
    public abstract virtual IList`1<RequestStatus> get_RequestStatuses();
    public abstract virtual void set_RequestStatuses(IList`1<RequestStatus> value);
    public abstract virtual Uri get_Url();
    public abstract virtual void set_Url(Uri value);
}
public class Ical.Net.CalendarComponents.Journal : RecurringComponent {
    public string Status { get; public set; }
    protected bool EvaluationIncludesReferenceDate { get; }
    public string get_Status();
    public void set_Status(string value);
    protected virtual bool get_EvaluationIncludesReferenceDate();
    protected virtual void OnDeserializing(StreamingContext context);
    protected bool Equals(Journal other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Ical.Net.CalendarComponents.RecurringComponent : UniqueComponent {
    protected bool EvaluationIncludesReferenceDate { get; }
    public IList`1<Attachment> Attachments { get; public set; }
    public IList`1<string> Categories { get; public set; }
    public string Class { get; public set; }
    public IList`1<string> Contacts { get; public set; }
    public IDateTime Created { get; public set; }
    public string Description { get; public set; }
    public IDateTime DtStart { get; public set; }
    public IList`1<PeriodList> ExceptionDates { get; public set; }
    public IList`1<RecurrencePattern> ExceptionRules { get; public set; }
    public IDateTime LastModified { get; public set; }
    public int Priority { get; public set; }
    public IList`1<PeriodList> RecurrenceDates { get; public set; }
    public IList`1<RecurrencePattern> RecurrenceRules { get; public set; }
    public IDateTime RecurrenceId { get; public set; }
    public IList`1<string> RelatedComponents { get; public set; }
    public int Sequence { get; public set; }
    public IDateTime Start { get; public set; }
    public string Summary { get; public set; }
    public ICalendarObjectList`1<Alarm> Alarms { get; }
    public RecurringComponent(string name);
    public static IEnumerable`1<IRecurringComponent> SortByDate(IEnumerable`1<IRecurringComponent> list);
    public static IEnumerable`1<TRecurringComponent> SortByDate(IEnumerable`1<TRecurringComponent> list);
    protected virtual bool get_EvaluationIncludesReferenceDate();
    public virtual IList`1<Attachment> get_Attachments();
    public virtual void set_Attachments(IList`1<Attachment> value);
    public virtual IList`1<string> get_Categories();
    public virtual void set_Categories(IList`1<string> value);
    public virtual string get_Class();
    public virtual void set_Class(string value);
    public virtual IList`1<string> get_Contacts();
    public virtual void set_Contacts(IList`1<string> value);
    public virtual IDateTime get_Created();
    public virtual void set_Created(IDateTime value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual IDateTime get_DtStart();
    public virtual void set_DtStart(IDateTime value);
    public virtual IList`1<PeriodList> get_ExceptionDates();
    public virtual void set_ExceptionDates(IList`1<PeriodList> value);
    public virtual IList`1<RecurrencePattern> get_ExceptionRules();
    public virtual void set_ExceptionRules(IList`1<RecurrencePattern> value);
    public virtual IDateTime get_LastModified();
    public virtual void set_LastModified(IDateTime value);
    public virtual int get_Priority();
    public virtual void set_Priority(int value);
    public virtual IList`1<PeriodList> get_RecurrenceDates();
    public virtual void set_RecurrenceDates(IList`1<PeriodList> value);
    public virtual IList`1<RecurrencePattern> get_RecurrenceRules();
    public virtual void set_RecurrenceRules(IList`1<RecurrencePattern> value);
    public virtual IDateTime get_RecurrenceId();
    public virtual void set_RecurrenceId(IDateTime value);
    public virtual IList`1<string> get_RelatedComponents();
    public virtual void set_RelatedComponents(IList`1<string> value);
    public virtual int get_Sequence();
    public virtual void set_Sequence(int value);
    public virtual IDateTime get_Start();
    public virtual void set_Start(IDateTime value);
    public virtual string get_Summary();
    public virtual void set_Summary(string value);
    public virtual ICalendarObjectList`1<Alarm> get_Alarms();
    private void Initialize();
    private void EnsureProperties();
    protected virtual void OnDeserializing(StreamingContext context);
    public virtual void ClearEvaluation();
    public virtual HashSet`1<Occurrence> GetOccurrences(IDateTime dt);
    public virtual HashSet`1<Occurrence> GetOccurrences(DateTime dt);
    public virtual HashSet`1<Occurrence> GetOccurrences(IDateTime startTime, IDateTime endTime);
    public virtual HashSet`1<Occurrence> GetOccurrences(DateTime startTime, DateTime endTime);
    public virtual IList`1<AlarmOccurrence> PollAlarms();
    public virtual IList`1<AlarmOccurrence> PollAlarms(IDateTime startTime, IDateTime endTime);
    protected bool Equals(RecurringComponent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("{Summary} - {Status}")]
public class Ical.Net.CalendarComponents.Todo : RecurringComponent {
    private TodoEvaluator _mEvaluator;
    public IDateTime Completed { get; public set; }
    public IDateTime DtStart { get; public set; }
    public IDateTime Due { get; public set; }
    public TimeSpan Duration { get; public set; }
    public GeographicLocation GeographicLocation { get; public set; }
    public string Location { get; public set; }
    public int PercentComplete { get; public set; }
    public IList`1<string> Resources { get; public set; }
    public string Status { get; public set; }
    public bool IsCancelled { get; }
    protected bool EvaluationIncludesReferenceDate { get; }
    public virtual IDateTime get_Completed();
    public virtual void set_Completed(IDateTime value);
    public virtual IDateTime get_DtStart();
    public virtual void set_DtStart(IDateTime value);
    public virtual IDateTime get_Due();
    public virtual void set_Due(IDateTime value);
    public virtual TimeSpan get_Duration();
    public virtual void set_Duration(TimeSpan value);
    public virtual GeographicLocation get_GeographicLocation();
    public virtual void set_GeographicLocation(GeographicLocation value);
    public virtual string get_Location();
    public virtual void set_Location(string value);
    public virtual int get_PercentComplete();
    public virtual void set_PercentComplete(int value);
    public virtual IList`1<string> get_Resources();
    public virtual void set_Resources(IList`1<string> value);
    public virtual string get_Status();
    public virtual void set_Status(string value);
    public virtual bool IsCompleted(IDateTime currDt);
    public virtual bool IsActive(IDateTime currDt);
    public virtual bool get_IsCancelled();
    protected virtual bool get_EvaluationIncludesReferenceDate();
    protected virtual void OnDeserializing(StreamingContext context);
    private void ExtrapolateTimes(int source);
}
public class Ical.Net.CalendarComponents.UniqueComponent : CalendarComponent {
    public IList`1<Attendee> Attendees { get; public set; }
    public IList`1<string> Comments { get; public set; }
    public IDateTime DtStamp { get; public set; }
    public Organizer Organizer { get; public set; }
    public IList`1<RequestStatus> RequestStatuses { get; public set; }
    public Uri Url { get; public set; }
    public string Uid { get; public set; }
    public UniqueComponent(string name);
    private void EnsureProperties();
    public virtual IList`1<Attendee> get_Attendees();
    public virtual void set_Attendees(IList`1<Attendee> value);
    public virtual IList`1<string> get_Comments();
    public virtual void set_Comments(IList`1<string> value);
    public virtual IDateTime get_DtStamp();
    public virtual void set_DtStamp(IDateTime value);
    public virtual Organizer get_Organizer();
    public virtual void set_Organizer(Organizer value);
    public virtual IList`1<RequestStatus> get_RequestStatuses();
    public virtual void set_RequestStatuses(IList`1<RequestStatus> value);
    public virtual Uri get_Url();
    public virtual void set_Url(Uri value);
    protected virtual void OnDeserialized(StreamingContext context);
    public sealed virtual int CompareTo(UniqueComponent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string get_Uid();
    public virtual void set_Uid(string value);
}
public class Ical.Net.CalendarComponents.VTimeZone : CalendarComponent {
    private DateTimeZone _nodaZone;
    private string _tzId;
    private Uri _url;
    private string _location;
    public string TzId { get; public set; }
    public Uri Url { get; public set; }
    public string Location { get; public set; }
    public ICalendarObjectList`1<VTimeZoneInfo> TimeZoneInfos { get; }
    public VTimeZone(string tzId);
    public static VTimeZone FromLocalTimeZone();
    public static VTimeZone FromLocalTimeZone(DateTime earlistDateTimeToSupport, bool includeHistoricalData);
    public static VTimeZone FromSystemTimeZone(TimeZoneInfo tzinfo);
    public static VTimeZone FromSystemTimeZone(TimeZoneInfo tzinfo, DateTime earlistDateTimeToSupport, bool includeHistoricalData);
    public static VTimeZone FromDateTimeZone(string tzId);
    public static VTimeZone FromDateTimeZone(string tzId, DateTime earlistDateTimeToSupport, bool includeHistoricalData);
    private static VTimeZoneInfo CreateTimeZoneInfo(List`1<ZoneInterval> matchedIntervals, List`1<ZoneInterval> intervals, bool isRRule, bool isOnlyInterval);
    private static List`1<ZoneInterval> GetMatchingIntervals(List`1<ZoneInterval> intervals, ZoneInterval intervalToMatch, bool consecutiveOnly);
    private static void PopulateTimeZoneInfoRecurrenceDates(VTimeZoneInfo tzi, List`1<ZoneInterval> intervals, TimeSpan delta);
    private static void PopulateTimeZoneInfoRecurrenceRules(VTimeZoneInfo tzi, ZoneInterval interval);
    public virtual string get_TzId();
    public virtual void set_TzId(string value);
    public virtual Uri get_Url();
    public virtual void set_Url(Uri value);
    public string get_Location();
    public void set_Location(string value);
    public ICalendarObjectList`1<VTimeZoneInfo> get_TimeZoneInfos();
    protected bool Equals(VTimeZone other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Ical.Net.CalendarExtensions : object {
    [ExtensionAttribute]
public static int GetIso8601WeekOfYear(Calendar calendar, DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek);
}
public static class Ical.Net.CalendarMethods : object {
    public static string Publish;
    public static string Request;
    public static string Reply;
    public static string Add;
    public static string Cancel;
    public static string Refresh;
    public static string Counter;
    public static string DeclineCounter;
}
public class Ical.Net.CalendarObject : CalendarObjectBase {
    private ICalendarObjectList`1<ICalendarObject> _children;
    private ServiceProvider _serviceProvider;
    [CompilerGeneratedAttribute]
private ICalendarObject <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public ICalendarObject Parent { get; public set; }
    public ICalendarObjectList`1<ICalendarObject> Children { get; }
    public string Name { get; public set; }
    public Calendar Calendar { get; protected set; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public string Group { get; public set; }
    public CalendarObject(string name);
    public CalendarObject(int line, int col);
    private void Initialize();
    [OnDeserializingAttribute]
internal void DeserializingInternal(StreamingContext context);
    [OnDeserializedAttribute]
internal void DeserializedInternal(StreamingContext context);
    protected virtual void OnDeserializing(StreamingContext context);
    protected virtual void OnDeserialized(StreamingContext context);
    private void Children_ItemAdded(object sender, ObjectEventArgs`2<ICalendarObject, int> e);
    protected bool Equals(CalendarObject other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void CopyFrom(ICopyable c);
    [CompilerGeneratedAttribute]
public virtual ICalendarObject get_Parent();
    [CompilerGeneratedAttribute]
public virtual void set_Parent(ICalendarObject value);
    public virtual ICalendarObjectList`1<ICalendarObject> get_Children();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    public virtual Calendar get_Calendar();
    protected virtual void set_Calendar(Calendar value);
    [CompilerGeneratedAttribute]
public virtual int get_Line();
    [CompilerGeneratedAttribute]
public virtual void set_Line(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Column();
    [CompilerGeneratedAttribute]
public virtual void set_Column(int value);
    public virtual object GetService(Type serviceType);
    public virtual object GetService(string name);
    public virtual T GetService();
    public virtual T GetService(string name);
    public virtual void SetService(string name, object obj);
    public virtual void SetService(object obj);
    public virtual void RemoveService(Type type);
    public virtual void RemoveService(string name);
    public virtual string get_Group();
    public virtual void set_Group(string value);
}
public class Ical.Net.CalendarObjectBase : object {
    private bool _mIsLoaded;
    [CompilerGeneratedAttribute]
private EventHandler Loaded;
    public bool IsLoaded { get; }
    public virtual void CopyFrom(ICopyable c);
    public virtual T Copy();
    public virtual bool get_IsLoaded();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Loaded(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Loaded(EventHandler value);
    public virtual void OnLoaded();
}
[ExtensionAttribute]
public static class Ical.Net.CalendarObjectExtensions : object {
    [ExtensionAttribute]
public static void AddChild(ICalendarObject obj, TItem child);
    [ExtensionAttribute]
public static void RemoveChild(ICalendarObject obj, TItem child);
}
public class Ical.Net.CalendarObjectList : GroupedList`2<string, ICalendarObject> {
    public CalendarObjectList(ICalendarObject parent);
}
[DebuggerDisplayAttribute("{Name}={string.Join(",", Values)}")]
public class Ical.Net.CalendarParameter : CalendarObject {
    private HashSet`1<string> _values;
    public IEnumerable`1<string> Values { get; }
    public int ValueCount { get; }
    public string Value { get; public set; }
    public CalendarParameter(string name);
    public CalendarParameter(string name, string value);
    public CalendarParameter(string name, IEnumerable`1<string> values);
    private void Initialize();
    protected virtual void OnDeserializing(StreamingContext context);
    public virtual void CopyFrom(ICopyable c);
    public virtual IEnumerable`1<string> get_Values();
    public virtual bool ContainsValue(string value);
    public virtual int get_ValueCount();
    public virtual void SetValue(string value);
    public virtual void SetValue(IEnumerable`1<string> values);
    private bool IsValidValue(string value);
    public virtual void AddValue(string value);
    public virtual void RemoveValue(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
[DebuggerDisplayAttribute("{Name}:{Value}")]
public class Ical.Net.CalendarProperty : CalendarObject {
    private List`1<object> _values;
    [CompilerGeneratedAttribute]
private IParameterCollection <Parameters>k__BackingField;
    public IParameterCollection Parameters { get; protected set; }
    public IEnumerable`1<object> Values { get; }
    public object Value { get; public set; }
    public int ValueCount { get; }
    public CalendarProperty(string name);
    public CalendarProperty(string name, object value);
    public CalendarProperty(int line, int col);
    [CompilerGeneratedAttribute]
public virtual IParameterCollection get_Parameters();
    [CompilerGeneratedAttribute]
protected virtual void set_Parameters(IParameterCollection value);
    public virtual void AddParameter(string name, string value);
    public virtual void AddParameter(CalendarParameter p);
    public virtual void CopyFrom(ICopyable obj);
    public virtual IEnumerable`1<object> get_Values();
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public virtual bool ContainsValue(object value);
    public virtual int get_ValueCount();
    public virtual void SetValue(object value);
    public virtual void SetValue(IEnumerable`1<object> values);
    public virtual void AddValue(object value);
    public virtual void RemoveValue(object value);
}
[DefaultMemberAttribute("Item")]
public class Ical.Net.CalendarPropertyList : GroupedValueList`4<string, ICalendarProperty, CalendarProperty, object> {
    private ICalendarObject _mParent;
    public ICalendarProperty Item { get; }
    public CalendarPropertyList(ICalendarObject parent);
    private void CalendarPropertyList_ItemAdded(object sender, ObjectEventArgs`2<ICalendarProperty, int> e);
    public ICalendarProperty get_Item(string name);
}
public static class Ical.Net.CalendarScales : object {
    public static string Gregorian;
}
[DefaultMemberAttribute("Item")]
public class Ical.Net.Collections.GroupedList`2 : object {
    private List`1<IMultiLinkedList`1<TItem>> _lists;
    private Dictionary`2<TGroup, IMultiLinkedList`1<TItem>> _dictionary;
    [CompilerGeneratedAttribute]
private EventHandler`1<ObjectEventArgs`2<TItem, int>> ItemAdded;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TItem Item { get; public set; }
    private IMultiLinkedList`1<TItem> EnsureList(TGroup group);
    private IMultiLinkedList`1<TItem> ListForIndex(int index, Int32& relativeIndex);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ItemAdded(EventHandler`1<ObjectEventArgs`2<TItem, int>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ItemAdded(EventHandler`1<ObjectEventArgs`2<TItem, int>> value);
    protected void OnItemAdded(TItem obj, int index);
    public virtual void Add(TItem item);
    public virtual int IndexOf(TItem item);
    public virtual void Clear(TGroup group);
    public virtual void Clear();
    public virtual bool ContainsKey(TGroup group);
    public virtual int get_Count();
    public virtual int CountOf(TGroup group);
    public virtual IEnumerable`1<TItem> Values();
    public virtual IEnumerable`1<TItem> AllOf(TGroup group);
    public virtual bool Remove(TItem obj);
    public virtual bool Remove(TGroup group);
    public virtual bool Contains(TItem item);
    public virtual void CopyTo(TItem[] array, int arrayIndex);
    public virtual bool get_IsReadOnly();
    public virtual void Insert(int index, TItem item);
    public virtual void RemoveAt(int index);
    public virtual TItem get_Item(int index);
    public virtual void set_Item(int index, TItem value);
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Ical.Net.Collections.GroupedListEnumerator`1 : object {
    private IList`1<IMultiLinkedList`1<TType>> _lists;
    private IEnumerator`1<IMultiLinkedList`1<TType>> _listsEnumerator;
    private IEnumerator`1<TType> _listEnumerator;
    public TType Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public GroupedListEnumerator`1(IList`1<IMultiLinkedList`1<TType>> lists);
    public virtual TType get_Current();
    public virtual void Dispose();
    private void DisposeListEnumerator();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private bool MoveNextList();
    public virtual bool MoveNext();
    public virtual void Reset();
}
public class Ical.Net.Collections.GroupedValueList`4 : GroupedList`2<TGroup, TInterface> {
    public virtual void Set(TGroup group, TValueType value);
    public virtual void Set(TGroup group, IEnumerable`1<TValueType> values);
    public virtual TType Get(TGroup group);
    public virtual IList`1<TType> GetMany(TGroup group);
}
public interface Ical.Net.Collections.IGroupedCollection`2 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemAdded(EventHandler`1<ObjectEventArgs`2<TItem, int>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemAdded(EventHandler`1<ObjectEventArgs`2<TItem, int>> value);
    public abstract virtual bool Remove(TGroup group);
    public abstract virtual void Clear(TGroup group);
    public abstract virtual bool ContainsKey(TGroup group);
    public abstract virtual int CountOf(TGroup group);
    public abstract virtual IEnumerable`1<TItem> AllOf(TGroup group);
}
[DefaultMemberAttribute("Item")]
public interface Ical.Net.Collections.IGroupedList`2 {
    public TItem Item { get; }
    public abstract virtual int IndexOf(TItem obj);
    public abstract virtual TItem get_Item(int index);
}
public interface Ical.Net.Collections.IGroupedObject`1 {
    public TGroup Group { get; public set; }
    public abstract virtual TGroup get_Group();
    public abstract virtual void set_Group(TGroup value);
}
public interface Ical.Net.Collections.IMultiLinkedList`1 {
    public int StartIndex { get; }
    public int ExclusiveEnd { get; }
    public abstract virtual int get_StartIndex();
    public abstract virtual int get_ExclusiveEnd();
}
public interface Ical.Net.Collections.Interfaces.IValueObject`1 {
    public IEnumerable`1<T> Values { get; }
    public int ValueCount { get; }
    public abstract virtual IEnumerable`1<T> get_Values();
    public abstract virtual bool ContainsValue(T value);
    public abstract virtual void SetValue(T value);
    public abstract virtual void SetValue(IEnumerable`1<T> values);
    public abstract virtual void AddValue(T value);
    public abstract virtual void RemoveValue(T value);
    public abstract virtual int get_ValueCount();
}
public class Ical.Net.Collections.MultiLinkedList`1 : List`1<TType> {
    private IMultiLinkedList`1<TType> _previous;
    private IMultiLinkedList`1<TType> _next;
    public int StartIndex { get; }
    public int ExclusiveEnd { get; }
    public virtual void SetPrevious(IMultiLinkedList`1<TType> previous);
    public virtual void SetNext(IMultiLinkedList`1<TType> next);
    public virtual int get_StartIndex();
    public virtual int get_ExclusiveEnd();
}
public class Ical.Net.Collections.ObjectEventArgs`2 : EventArgs {
    [CompilerGeneratedAttribute]
private T <First>k__BackingField;
    [CompilerGeneratedAttribute]
private TU <Second>k__BackingField;
    public T First { get; public set; }
    public TU Second { get; public set; }
    public ObjectEventArgs`2(T first, TU second);
    [CompilerGeneratedAttribute]
public T get_First();
    [CompilerGeneratedAttribute]
public void set_First(T value);
    [CompilerGeneratedAttribute]
public TU get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(TU value);
}
public class Ical.Net.Collections.Proxies.GroupedCollectionProxy`3 : object {
    private Func`2<TNew, bool> _predicate;
    [CompilerGeneratedAttribute]
private EventHandler`1<ObjectEventArgs`2<TNew, int>> ItemAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<ObjectEventArgs`2<TNew, int>> ItemRemoved;
    [CompilerGeneratedAttribute]
private IGroupedCollection`2<TGroup, TOriginal> <RealObject>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IGroupedCollection`2<TGroup, TOriginal> RealObject { get; private set; }
    public GroupedCollectionProxy`3(IGroupedCollection`2<TGroup, TOriginal> realObject, Func`2<TNew, bool> predicate);
    [CompilerGeneratedAttribute]
public virtual void add_ItemAdded(EventHandler`1<ObjectEventArgs`2<TNew, int>> value);
    [CompilerGeneratedAttribute]
public virtual void remove_ItemAdded(EventHandler`1<ObjectEventArgs`2<TNew, int>> value);
    [CompilerGeneratedAttribute]
public virtual void add_ItemRemoved(EventHandler`1<ObjectEventArgs`2<TNew, int>> value);
    [CompilerGeneratedAttribute]
public virtual void remove_ItemRemoved(EventHandler`1<ObjectEventArgs`2<TNew, int>> value);
    protected void OnItemAdded(TNew item, int index);
    protected void OnItemRemoved(TNew item, int index);
    public virtual bool Remove(TGroup group);
    public virtual void Clear(TGroup group);
    public virtual bool ContainsKey(TGroup group);
    public virtual int CountOf(TGroup group);
    public virtual IEnumerable`1<TNew> AllOf(TGroup group);
    public virtual void Add(TNew item);
    public virtual void Clear();
    public virtual bool Contains(TNew item);
    public virtual void CopyTo(TNew[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(TNew item);
    public virtual IEnumerator`1<TNew> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public IGroupedCollection`2<TGroup, TOriginal> get_RealObject();
    [CompilerGeneratedAttribute]
private void set_RealObject(IGroupedCollection`2<TGroup, TOriginal> value);
    public virtual void SetProxiedObject(IGroupedCollection`2<TGroup, TOriginal> realObject);
}
[DefaultMemberAttribute("Item")]
public class Ical.Net.Collections.Proxies.GroupedValueListProxy`5 : object {
    private GroupedValueList`4<TGroup, TInterface, TItem, TOriginalValue> _realObject;
    private TGroup _group;
    private TInterface _container;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TNewValue Item { get; public set; }
    public IEnumerable`1<TInterface> Items { get; }
    public GroupedValueListProxy`5(GroupedValueList`4<TGroup, TInterface, TItem, TOriginalValue> realObject, TGroup group);
    private TInterface EnsureContainer();
    private void IterateValues(Func`4<IValueObject`1<TOriginalValue>, int, int, bool> action);
    private IEnumerator`1<TNewValue> GetEnumeratorInternal();
    public virtual void Add(TNewValue item);
    public virtual void Clear();
    public virtual bool Contains(TNewValue item);
    public virtual void CopyTo(TNewValue[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(TNewValue item);
    public virtual IEnumerator`1<TNewValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual int IndexOf(TNewValue item);
    public virtual void Insert(int index, TNewValue item);
    public virtual void RemoveAt(int index);
    public virtual TNewValue get_Item(int index);
    public virtual void set_Item(int index, TNewValue value);
    public virtual IEnumerable`1<TInterface> get_Items();
}
public static class Ical.Net.Components : object {
    public static string Alarm;
    public static string Calendar;
    public static string Freebusy;
    public static string Timezone;
    public static string Daylight;
    public static string Standard;
}
public class Ical.Net.DataTypes.AlarmOccurrence : object {
    [CompilerGeneratedAttribute]
private Period <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private IRecurringComponent <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private Alarm <Alarm>k__BackingField;
    public Period Period { get; public set; }
    public IRecurringComponent Component { get; public set; }
    public Alarm Alarm { get; public set; }
    public IDateTime DateTime { get; public set; }
    public AlarmOccurrence(AlarmOccurrence ao);
    public AlarmOccurrence(Alarm a, IDateTime dt, IRecurringComponent rc);
    [CompilerGeneratedAttribute]
public Period get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(Period value);
    [CompilerGeneratedAttribute]
public IRecurringComponent get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(IRecurringComponent value);
    [CompilerGeneratedAttribute]
public Alarm get_Alarm();
    [CompilerGeneratedAttribute]
public void set_Alarm(Alarm value);
    public IDateTime get_DateTime();
    public void set_DateTime(IDateTime value);
    public sealed virtual int CompareTo(AlarmOccurrence other);
    protected bool Equals(AlarmOccurrence other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Ical.Net.DataTypes.Attachment : EncodableDataType {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    private Encoding _valueEncoding;
    public Uri Uri { get; public set; }
    public Byte[] Data { get; }
    public Encoding ValueEncoding { get; public set; }
    public string FormatType { get; public set; }
    public Attachment(Byte[] value);
    public Attachment(string value);
    [CompilerGeneratedAttribute]
public virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
public virtual void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public virtual Byte[] get_Data();
    public virtual Encoding get_ValueEncoding();
    public virtual void set_ValueEncoding(Encoding value);
    public virtual string get_FormatType();
    public virtual void set_FormatType(string value);
    public virtual string ToString();
    public virtual void CopyFrom(ICopyable obj);
    protected bool Equals(Attachment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Ical.Net.DataTypes.Attendee : EncodableDataType {
    private Uri _sentBy;
    private string _commonName;
    private Uri _directoryEntry;
    private string _type;
    private List`1<string> _members;
    private string _role;
    private string _participationStatus;
    private Nullable`1<bool> _rsvp;
    private List`1<string> _delegatedTo;
    private List`1<string> _delegatedFrom;
    [CompilerGeneratedAttribute]
private Uri <Value>k__BackingField;
    public Uri SentBy { get; public set; }
    public string CommonName { get; public set; }
    public Uri DirectoryEntry { get; public set; }
    public string Type { get; public set; }
    public IList`1<string> Members { get; public set; }
    public string Role { get; public set; }
    public string ParticipationStatus { get; public set; }
    public bool Rsvp { get; public set; }
    public IList`1<string> DelegatedTo { get; public set; }
    public IList`1<string> DelegatedFrom { get; public set; }
    public Uri Value { get; public set; }
    public Attendee(Uri attendee);
    public Attendee(string attendeeUri);
    public virtual Uri get_SentBy();
    public virtual void set_SentBy(Uri value);
    public virtual string get_CommonName();
    public virtual void set_CommonName(string value);
    public virtual Uri get_DirectoryEntry();
    public virtual void set_DirectoryEntry(Uri value);
    public virtual string get_Type();
    public virtual void set_Type(string value);
    public virtual IList`1<string> get_Members();
    public virtual void set_Members(IList`1<string> value);
    public virtual string get_Role();
    public virtual void set_Role(string value);
    public virtual string get_ParticipationStatus();
    public virtual void set_ParticipationStatus(string value);
    public virtual bool get_Rsvp();
    public virtual void set_Rsvp(bool value);
    public virtual IList`1<string> get_DelegatedTo();
    public virtual void set_DelegatedTo(IList`1<string> value);
    public virtual IList`1<string> get_DelegatedFrom();
    public virtual void set_DelegatedFrom(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual Uri get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(Uri value);
    public virtual void CopyFrom(ICopyable obj);
    protected bool Equals(Attendee other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Ical.Net.DataTypes.CalDateTime : EncodableDataType {
    private bool _hasDate;
    private bool _hasTime;
    private DateTime _asUtc;
    private DateTime _value;
    private string _tzId;
    public static CalDateTime Now { get; }
    public static CalDateTime Today { get; }
    public ICalendarObject AssociatedObject { get; public set; }
    public DateTime AsSystemLocal { get; }
    public DateTime AsUtc { get; }
    public DateTime Value { get; public set; }
    public bool IsUtc { get; }
    public bool HasDate { get; public set; }
    public bool HasTime { get; public set; }
    public string TzId { get; public set; }
    public string TimeZoneName { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Millisecond { get; }
    public long Ticks { get; }
    public DayOfWeek DayOfWeek { get; }
    public int DayOfYear { get; }
    public DateTime Date { get; }
    public TimeSpan TimeOfDay { get; }
    public DateTimeOffset AsDateTimeOffset { get; }
    public CalDateTime(IDateTime value);
    public CalDateTime(DateTime value);
    public CalDateTime(DateTime value, string tzId);
    public CalDateTime(int year, int month, int day, int hour, int minute, int second);
    public CalDateTime(int year, int month, int day, int hour, int minute, int second, string tzId);
    public CalDateTime(int year, int month, int day, int hour, int minute, int second, string tzId, Calendar cal);
    public CalDateTime(int year, int month, int day);
    public CalDateTime(int year, int month, int day, string tzId);
    public CalDateTime(string value);
    public static CalDateTime get_Now();
    public static CalDateTime get_Today();
    private void Initialize(int year, int month, int day, int hour, int minute, int second, string tzId, Calendar cal);
    private void Initialize(DateTime value, string tzId, Calendar cal);
    private DateTime CoerceDateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);
    public virtual ICalendarObject get_AssociatedObject();
    public virtual void set_AssociatedObject(ICalendarObject value);
    public virtual void CopyFrom(ICopyable obj);
    public bool Equals(CalDateTime other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_LessThan(CalDateTime left, IDateTime right);
    public static bool op_GreaterThan(CalDateTime left, IDateTime right);
    public static bool op_LessThanOrEqual(CalDateTime left, IDateTime right);
    public static bool op_GreaterThanOrEqual(CalDateTime left, IDateTime right);
    public static bool op_Equality(CalDateTime left, IDateTime right);
    public static bool op_Inequality(CalDateTime left, IDateTime right);
    public static TimeSpan op_Subtraction(CalDateTime left, IDateTime right);
    public static IDateTime op_Subtraction(CalDateTime left, TimeSpan right);
    public static IDateTime op_Addition(CalDateTime left, TimeSpan right);
    public static CalDateTime op_Implicit(DateTime left);
    public sealed virtual DateTime get_AsSystemLocal();
    public sealed virtual DateTime get_AsUtc();
    public sealed virtual DateTime get_Value();
    public sealed virtual void set_Value(DateTime value);
    public sealed virtual bool get_IsUtc();
    public sealed virtual bool get_HasDate();
    public sealed virtual void set_HasDate(bool value);
    public sealed virtual bool get_HasTime();
    public sealed virtual void set_HasTime(bool value);
    public sealed virtual string get_TzId();
    public sealed virtual void set_TzId(string value);
    public sealed virtual string get_TimeZoneName();
    public sealed virtual int get_Year();
    public sealed virtual int get_Month();
    public sealed virtual int get_Day();
    public sealed virtual int get_Hour();
    public sealed virtual int get_Minute();
    public sealed virtual int get_Second();
    public sealed virtual int get_Millisecond();
    public sealed virtual long get_Ticks();
    public sealed virtual DayOfWeek get_DayOfWeek();
    public int get_DayOfYear();
    public sealed virtual DateTime get_Date();
    public TimeSpan get_TimeOfDay();
    public sealed virtual IDateTime ToTimeZone(string tzId);
    public sealed virtual DateTimeOffset get_AsDateTimeOffset();
    public sealed virtual IDateTime Add(TimeSpan ts);
    public sealed virtual IDateTime Subtract(TimeSpan ts);
    public sealed virtual TimeSpan Subtract(IDateTime dt);
    public sealed virtual IDateTime AddYears(int years);
    public sealed virtual IDateTime AddMonths(int months);
    public sealed virtual IDateTime AddDays(int days);
    public sealed virtual IDateTime AddHours(int hours);
    public sealed virtual IDateTime AddMinutes(int minutes);
    public sealed virtual IDateTime AddSeconds(int seconds);
    public sealed virtual IDateTime AddMilliseconds(int milliseconds);
    public sealed virtual IDateTime AddTicks(long ticks);
    public sealed virtual bool LessThan(IDateTime dt);
    public sealed virtual bool GreaterThan(IDateTime dt);
    public sealed virtual bool LessThanOrEqual(IDateTime dt);
    public sealed virtual bool GreaterThanOrEqual(IDateTime dt);
    public sealed virtual void AssociateWith(IDateTime dt);
    public sealed virtual int CompareTo(IDateTime dt);
    public virtual string ToString();
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
public abstract class Ical.Net.DataTypes.CalendarDataType : object {
    private IParameterCollection _parameters;
    private ParameterCollectionProxy _proxy;
    private ServiceProvider _serviceProvider;
    protected ICalendarObject _AssociatedObject;
    public ICalendarObject AssociatedObject { get; public set; }
    public Calendar Calendar { get; }
    public string Language { get; public set; }
    public IParameterCollection Parameters { get; }
    private void Initialize();
    [OnDeserializingAttribute]
internal void DeserializingInternal(StreamingContext context);
    [OnDeserializedAttribute]
internal void DeserializedInternal(StreamingContext context);
    protected virtual void OnDeserializing(StreamingContext context);
    protected virtual void OnDeserialized(StreamingContext context);
    public virtual Type GetValueType();
    public virtual void SetValueType(string type);
    public virtual ICalendarObject get_AssociatedObject();
    public virtual void set_AssociatedObject(ICalendarObject value);
    public virtual Calendar get_Calendar();
    public virtual string get_Language();
    public virtual void set_Language(string value);
    public virtual void CopyFrom(ICopyable obj);
    public virtual T Copy();
    public virtual IParameterCollection get_Parameters();
    public virtual object GetService(Type serviceType);
    public sealed virtual object GetService(string name);
    public sealed virtual T GetService();
    public sealed virtual T GetService(string name);
    public sealed virtual void SetService(string name, object obj);
    public sealed virtual void SetService(object obj);
    public sealed virtual void RemoveService(Type type);
    public sealed virtual void RemoveService(string name);
}
public class Ical.Net.DataTypes.EncodableDataType : CalendarDataType {
    public string Encoding { get; public set; }
    public virtual string get_Encoding();
    public virtual void set_Encoding(string value);
}
public class Ical.Net.DataTypes.FreeBusyEntry : Period {
    [CompilerGeneratedAttribute]
private FreeBusyStatus <Status>k__BackingField;
    public FreeBusyStatus Status { get; public set; }
    public FreeBusyEntry(Period period, FreeBusyStatus status);
    [CompilerGeneratedAttribute]
public virtual FreeBusyStatus get_Status();
    [CompilerGeneratedAttribute]
public virtual void set_Status(FreeBusyStatus value);
    public virtual void CopyFrom(ICopyable obj);
}
[DebuggerDisplayAttribute("{Latitude};{Longitude}")]
public class Ical.Net.DataTypes.GeographicLocation : EncodableDataType {
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public GeographicLocation(string value);
    public GeographicLocation(double latitude, double longitude);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    public virtual void CopyFrom(ICopyable obj);
    public virtual string ToString();
    protected bool Equals(GeographicLocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface Ical.Net.DataTypes.ICalendarDataType {
    public ICalendarObject AssociatedObject { get; public set; }
    public Calendar Calendar { get; }
    public string Language { get; public set; }
    public abstract virtual Type GetValueType();
    public abstract virtual void SetValueType(string type);
    public abstract virtual ICalendarObject get_AssociatedObject();
    public abstract virtual void set_AssociatedObject(ICalendarObject value);
    public abstract virtual Calendar get_Calendar();
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
}
public interface Ical.Net.DataTypes.ICalendarParameterCollectionContainer {
    public IParameterCollection Parameters { get; }
    public abstract virtual IParameterCollection get_Parameters();
}
public interface Ical.Net.DataTypes.IDateTime {
    public DateTime AsSystemLocal { get; }
    public DateTime AsUtc { get; }
    public DateTimeOffset AsDateTimeOffset { get; }
    public bool IsUtc { get; }
    public string TimeZoneName { get; }
    public DateTime Value { get; public set; }
    public bool HasDate { get; public set; }
    public bool HasTime { get; public set; }
    public string TzId { get; public set; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Millisecond { get; }
    public long Ticks { get; }
    public DayOfWeek DayOfWeek { get; }
    public DateTime Date { get; }
    public abstract virtual DateTime get_AsSystemLocal();
    public abstract virtual DateTime get_AsUtc();
    public abstract virtual DateTimeOffset get_AsDateTimeOffset();
    public abstract virtual bool get_IsUtc();
    public abstract virtual string get_TimeZoneName();
    public abstract virtual DateTime get_Value();
    public abstract virtual void set_Value(DateTime value);
    public abstract virtual bool get_HasDate();
    public abstract virtual void set_HasDate(bool value);
    public abstract virtual bool get_HasTime();
    public abstract virtual void set_HasTime(bool value);
    public abstract virtual string get_TzId();
    public abstract virtual void set_TzId(string value);
    public abstract virtual int get_Year();
    public abstract virtual int get_Month();
    public abstract virtual int get_Day();
    public abstract virtual int get_Hour();
    public abstract virtual int get_Minute();
    public abstract virtual int get_Second();
    public abstract virtual int get_Millisecond();
    public abstract virtual long get_Ticks();
    public abstract virtual DayOfWeek get_DayOfWeek();
    public abstract virtual DateTime get_Date();
    public abstract virtual IDateTime ToTimeZone(string tzId);
    public abstract virtual IDateTime Add(TimeSpan ts);
    public abstract virtual IDateTime Subtract(TimeSpan ts);
    public abstract virtual TimeSpan Subtract(IDateTime dt);
    public abstract virtual IDateTime AddYears(int years);
    public abstract virtual IDateTime AddMonths(int months);
    public abstract virtual IDateTime AddDays(int days);
    public abstract virtual IDateTime AddHours(int hours);
    public abstract virtual IDateTime AddMinutes(int minutes);
    public abstract virtual IDateTime AddSeconds(int seconds);
    public abstract virtual IDateTime AddMilliseconds(int milliseconds);
    public abstract virtual IDateTime AddTicks(long ticks);
    public abstract virtual bool LessThan(IDateTime dt);
    public abstract virtual bool GreaterThan(IDateTime dt);
    public abstract virtual bool LessThanOrEqual(IDateTime dt);
    public abstract virtual bool GreaterThanOrEqual(IDateTime dt);
    public abstract virtual void AssociateWith(IDateTime dt);
}
public interface Ical.Net.DataTypes.IEncodableDataType {
    public string Encoding { get; public set; }
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
}
public class Ical.Net.DataTypes.Occurrence : object {
    [CompilerGeneratedAttribute]
private Period <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private IRecurrable <Source>k__BackingField;
    public Period Period { get; public set; }
    public IRecurrable Source { get; public set; }
    public Occurrence(Occurrence ao);
    public Occurrence(IRecurrable recurrable, Period period);
    [CompilerGeneratedAttribute]
public Period get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(Period value);
    [CompilerGeneratedAttribute]
public IRecurrable get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(IRecurrable value);
    public bool Equals(Occurrence other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual int CompareTo(Occurrence other);
}
[DebuggerDisplayAttribute("{Value}")]
public class Ical.Net.DataTypes.Organizer : EncodableDataType {
    [CompilerGeneratedAttribute]
private Uri <Value>k__BackingField;
    public Uri SentBy { get; public set; }
    public string CommonName { get; public set; }
    public Uri DirectoryEntry { get; public set; }
    public Uri Value { get; public set; }
    public Organizer(string value);
    public virtual Uri get_SentBy();
    public virtual void set_SentBy(Uri value);
    public virtual string get_CommonName();
    public virtual void set_CommonName(string value);
    public virtual Uri get_DirectoryEntry();
    public virtual void set_DirectoryEntry(Uri value);
    [CompilerGeneratedAttribute]
public virtual Uri get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(Uri value);
    protected bool Equals(Organizer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void CopyFrom(ICopyable obj);
}
public class Ical.Net.DataTypes.Period : EncodableDataType {
    private IDateTime _startTime;
    private IDateTime _endTime;
    private TimeSpan _duration;
    public IDateTime StartTime { get; public set; }
    public IDateTime EndTime { get; public set; }
    public TimeSpan Duration { get; public set; }
    public Period(IDateTime occurs);
    public Period(IDateTime start, IDateTime end);
    public Period(IDateTime start, TimeSpan duration);
    public virtual void CopyFrom(ICopyable obj);
    protected bool Equals(Period other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private void ExtrapolateTimes();
    public virtual IDateTime get_StartTime();
    public virtual void set_StartTime(IDateTime value);
    public virtual IDateTime get_EndTime();
    public virtual void set_EndTime(IDateTime value);
    public virtual TimeSpan get_Duration();
    public virtual void set_Duration(TimeSpan value);
    public virtual bool Contains(IDateTime dt);
    public virtual bool CollidesWith(Period period);
    public sealed virtual int CompareTo(Period other);
}
[DefaultMemberAttribute("Item")]
public class Ical.Net.DataTypes.PeriodList : EncodableDataType {
    [CompilerGeneratedAttribute]
private string <TzId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Period> <Periods>k__BackingField;
    public string TzId { get; public set; }
    public int Count { get; }
    protected IList`1<Period> Periods { get; protected set; }
    public Period Item { get; public set; }
    public bool IsReadOnly { get; }
    public PeriodList(string value);
    [CompilerGeneratedAttribute]
public string get_TzId();
    [CompilerGeneratedAttribute]
public void set_TzId(string value);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
protected IList`1<Period> get_Periods();
    [CompilerGeneratedAttribute]
protected void set_Periods(IList`1<Period> value);
    public virtual void CopyFrom(ICopyable obj);
    public virtual string ToString();
    public void Add(IDateTime dt);
    public static Dictionary`2<string, List`1<Period>> GetGroupedPeriods(IList`1<PeriodList> periodLists);
    protected bool Equals(PeriodList other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual Period get_Item(int index);
    public sealed virtual void set_Item(int index, Period value);
    public sealed virtual bool Remove(Period item);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(Period item);
    public sealed virtual void Insert(int index, Period item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(Period item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Period item);
    public sealed virtual void CopyTo(Period[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<Period> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Ical.Net.DataTypes.RecurrencePattern : EncodableDataType {
    private int _interval;
    private Nullable`1<RecurrenceRestrictionType> _restrictionType;
    private Nullable`1<RecurrenceEvaluationModeType> _evaluationMode;
    [CompilerGeneratedAttribute]
private FrequencyType <Frequency>k__BackingField;
    private DateTime _until;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <BySecond>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ByMinute>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ByHour>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WeekDay> <ByDay>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ByMonthDay>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ByYearDay>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ByWeekNo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ByMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <BySetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private DayOfWeek <FirstDayOfWeek>k__BackingField;
    public FrequencyType Frequency { get; public set; }
    public DateTime Until { get; public set; }
    public int Count { get; public set; }
    public int Interval { get; public set; }
    public List`1<int> BySecond { get; public set; }
    public List`1<int> ByMinute { get; public set; }
    public List`1<int> ByHour { get; public set; }
    public List`1<WeekDay> ByDay { get; public set; }
    public List`1<int> ByMonthDay { get; public set; }
    public List`1<int> ByYearDay { get; public set; }
    public List`1<int> ByWeekNo { get; public set; }
    public List`1<int> ByMonth { get; public set; }
    public List`1<int> BySetPosition { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public RecurrenceRestrictionType RestrictionType { get; public set; }
    public RecurrenceEvaluationModeType EvaluationMode { get; public set; }
    public RecurrencePattern(FrequencyType frequency);
    public RecurrencePattern(FrequencyType frequency, int interval);
    public RecurrencePattern(string value);
    [CompilerGeneratedAttribute]
public FrequencyType get_Frequency();
    [CompilerGeneratedAttribute]
public void set_Frequency(FrequencyType value);
    public DateTime get_Until();
    public void set_Until(DateTime value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    public int get_Interval();
    public void set_Interval(int value);
    [CompilerGeneratedAttribute]
public List`1<int> get_BySecond();
    [CompilerGeneratedAttribute]
public void set_BySecond(List`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<int> get_ByMinute();
    [CompilerGeneratedAttribute]
public void set_ByMinute(List`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<int> get_ByHour();
    [CompilerGeneratedAttribute]
public void set_ByHour(List`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<WeekDay> get_ByDay();
    [CompilerGeneratedAttribute]
public void set_ByDay(List`1<WeekDay> value);
    [CompilerGeneratedAttribute]
public List`1<int> get_ByMonthDay();
    [CompilerGeneratedAttribute]
public void set_ByMonthDay(List`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<int> get_ByYearDay();
    [CompilerGeneratedAttribute]
public void set_ByYearDay(List`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<int> get_ByWeekNo();
    [CompilerGeneratedAttribute]
public void set_ByWeekNo(List`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<int> get_ByMonth();
    [CompilerGeneratedAttribute]
public void set_ByMonth(List`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<int> get_BySetPosition();
    [CompilerGeneratedAttribute]
public void set_BySetPosition(List`1<int> value);
    [CompilerGeneratedAttribute]
public DayOfWeek get_FirstDayOfWeek();
    [CompilerGeneratedAttribute]
public void set_FirstDayOfWeek(DayOfWeek value);
    public RecurrenceRestrictionType get_RestrictionType();
    public void set_RestrictionType(RecurrenceRestrictionType value);
    public RecurrenceEvaluationModeType get_EvaluationMode();
    public void set_EvaluationMode(RecurrenceEvaluationModeType value);
    public virtual string ToString();
    protected bool Equals(RecurrencePattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void CopyFrom(ICopyable obj);
    private static bool CollectionEquals(IEnumerable`1<T> c1, IEnumerable`1<T> c2);
}
public class Ical.Net.DataTypes.RequestStatus : EncodableDataType {
    private string _mDescription;
    private string _mExtraData;
    private StatusCode _mStatusCode;
    public string Description { get; public set; }
    public string ExtraData { get; public set; }
    public StatusCode StatusCode { get; public set; }
    public RequestStatus(string value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_ExtraData();
    public virtual void set_ExtraData(string value);
    public virtual StatusCode get_StatusCode();
    public virtual void set_StatusCode(StatusCode value);
    public virtual void CopyFrom(ICopyable obj);
    public virtual string ToString();
    protected bool Equals(RequestStatus other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Ical.Net.DataTypes.StatusCode : EncodableDataType {
    [CompilerGeneratedAttribute]
private Int32[] <Parts>k__BackingField;
    public Int32[] Parts { get; private set; }
    public int Primary { get; }
    public int Secondary { get; }
    public int Tertiary { get; }
    public StatusCode(Int32[] parts);
    public StatusCode(string value);
    [CompilerGeneratedAttribute]
public Int32[] get_Parts();
    [CompilerGeneratedAttribute]
private void set_Parts(Int32[] value);
    public int get_Primary();
    public int get_Secondary();
    public int get_Tertiary();
    public virtual void CopyFrom(ICopyable obj);
    public virtual string ToString();
    protected bool Equals(StatusCode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Ical.Net.DataTypes.Trigger : EncodableDataType {
    private IDateTime _mDateTime;
    private Nullable`1<TimeSpan> _mDuration;
    private string _mRelated;
    public IDateTime DateTime { get; public set; }
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public string Related { get; public set; }
    public bool IsRelative { get; }
    public Trigger(TimeSpan ts);
    public Trigger(string value);
    public virtual IDateTime get_DateTime();
    public virtual void set_DateTime(IDateTime value);
    public virtual Nullable`1<TimeSpan> get_Duration();
    public virtual void set_Duration(Nullable`1<TimeSpan> value);
    public virtual string get_Related();
    public virtual void set_Related(string value);
    public virtual bool get_IsRelative();
    public virtual void CopyFrom(ICopyable obj);
    protected bool Equals(Trigger other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Ical.Net.DataTypes.UtcOffset : EncodableDataType {
    [CompilerGeneratedAttribute]
private TimeSpan <Offset>k__BackingField;
    public TimeSpan Offset { get; }
    public bool Positive { get; }
    public int Hours { get; }
    public int Minutes { get; }
    public int Seconds { get; }
    public UtcOffset(string value);
    public UtcOffset(TimeSpan ts);
    [CompilerGeneratedAttribute]
public TimeSpan get_Offset();
    public bool get_Positive();
    public int get_Hours();
    public int get_Minutes();
    public int get_Seconds();
    public static UtcOffset op_Implicit(TimeSpan ts);
    public static TimeSpan op_Explicit(UtcOffset o);
    public virtual DateTime ToUtc(DateTime dt);
    public virtual DateTime ToLocal(DateTime dt);
    protected bool Equals(UtcOffset other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Ical.Net.DataTypes.WeekDay : EncodableDataType {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private DayOfWeek <DayOfWeek>k__BackingField;
    public int Offset { get; public set; }
    public DayOfWeek DayOfWeek { get; public set; }
    public WeekDay(DayOfWeek day);
    public WeekDay(DayOfWeek day, int num);
    public WeekDay(DayOfWeek day, FrequencyOccurrence type);
    public WeekDay(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Offset();
    [CompilerGeneratedAttribute]
public virtual void set_Offset(int value);
    [CompilerGeneratedAttribute]
public virtual DayOfWeek get_DayOfWeek();
    [CompilerGeneratedAttribute]
public virtual void set_DayOfWeek(DayOfWeek value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void CopyFrom(ICopyable obj);
    public int CompareTo(object obj);
}
public abstract class Ical.Net.Evaluation.Evaluator : object {
    private DateTime _mEvaluationStartBounds;
    private DateTime _mEvaluationEndBounds;
    private ICalendarObject _mAssociatedObject;
    private ICalendarDataType _mAssociatedDataType;
    protected HashSet`1<Period> MPeriods;
    [CompilerGeneratedAttribute]
private Calendar <Calendar>k__BackingField;
    public Calendar Calendar { get; private set; }
    public DateTime EvaluationStartBounds { get; public set; }
    public DateTime EvaluationEndBounds { get; public set; }
    public ICalendarObject AssociatedObject { get; protected set; }
    public HashSet`1<Period> Periods { get; }
    protected Evaluator(ICalendarObject associatedObject);
    protected Evaluator(ICalendarDataType dataType);
    private void Initialize();
    protected IDateTime ConvertToIDateTime(DateTime dt, IDateTime referenceDate);
    protected void IncrementDate(DateTime& dt, RecurrencePattern pattern, int interval);
    [CompilerGeneratedAttribute]
public sealed virtual Calendar get_Calendar();
    [CompilerGeneratedAttribute]
private void set_Calendar(Calendar value);
    public virtual DateTime get_EvaluationStartBounds();
    public virtual void set_EvaluationStartBounds(DateTime value);
    public virtual DateTime get_EvaluationEndBounds();
    public virtual void set_EvaluationEndBounds(DateTime value);
    public virtual ICalendarObject get_AssociatedObject();
    protected virtual void set_AssociatedObject(ICalendarObject value);
    public virtual HashSet`1<Period> get_Periods();
    public virtual void Clear();
    public abstract virtual HashSet`1<Period> Evaluate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
}
public class Ical.Net.Evaluation.EventEvaluator : RecurringEvaluator {
    protected CalendarEvent CalendarEvent { get; protected set; }
    public EventEvaluator(CalendarEvent evt);
    protected CalendarEvent get_CalendarEvent();
    protected void set_CalendarEvent(CalendarEvent value);
    public virtual HashSet`1<Period> Evaluate(IDateTime referenceTime, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
}
public interface Ical.Net.Evaluation.IEvaluator {
    public Calendar Calendar { get; }
    public DateTime EvaluationStartBounds { get; }
    public DateTime EvaluationEndBounds { get; }
    public HashSet`1<Period> Periods { get; }
    public ICalendarObject AssociatedObject { get; }
    public abstract virtual Calendar get_Calendar();
    public abstract virtual DateTime get_EvaluationStartBounds();
    public abstract virtual DateTime get_EvaluationEndBounds();
    public abstract virtual HashSet`1<Period> get_Periods();
    public abstract virtual ICalendarObject get_AssociatedObject();
    public abstract virtual void Clear();
    public abstract virtual HashSet`1<Period> Evaluate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
}
public class Ical.Net.Evaluation.PeriodListEvaluator : Evaluator {
    private PeriodList _mPeriodList;
    public PeriodListEvaluator(PeriodList rdt);
    public virtual HashSet`1<Period> Evaluate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
}
public class Ical.Net.Evaluation.RecurrencePatternEvaluator : Evaluator {
    private static int _maxIncrementCount;
    [CompilerGeneratedAttribute]
private RecurrencePattern <Pattern>k__BackingField;
    protected RecurrencePattern Pattern { get; protected set; }
    public RecurrencePatternEvaluator(RecurrencePattern pattern);
    [CompilerGeneratedAttribute]
protected RecurrencePattern get_Pattern();
    [CompilerGeneratedAttribute]
protected void set_Pattern(RecurrencePattern value);
    private RecurrencePattern ProcessRecurrencePattern(IDateTime referenceDate);
    private void EnforceEvaluationRestrictions(RecurrencePattern pattern);
    private HashSet`1<DateTime> GetDates(IDateTime seed, DateTime periodStart, DateTime periodEnd, int maxCount, RecurrencePattern pattern, bool includeReferenceDateInResults);
    private List`1<DateTime> GetCandidates(DateTime date, RecurrencePattern pattern, Nullable`1[] expandBehaviors);
    private List`1<DateTime> ApplySetPosRules(List`1<DateTime> dates, RecurrencePattern pattern);
    private List`1<DateTime> GetMonthVariants(List`1<DateTime> dates, RecurrencePattern pattern, Nullable`1<bool> expand);
    private List`1<DateTime> GetWeekNoVariants(List`1<DateTime> dates, RecurrencePattern pattern, Nullable`1<bool> expand);
    private List`1<DateTime> GetYearDayVariants(List`1<DateTime> dates, RecurrencePattern pattern, Nullable`1<bool> expand);
    private List`1<DateTime> GetMonthDayVariants(List`1<DateTime> dates, RecurrencePattern pattern, Nullable`1<bool> expand);
    private List`1<DateTime> GetDayVariants(List`1<DateTime> dates, RecurrencePattern pattern, Nullable`1<bool> expand);
    private List`1<DateTime> GetAbsWeekDays(DateTime date, WeekDay weekDay, RecurrencePattern pattern);
    private List`1<DateTime> GetOffsetDates(List`1<DateTime> dates, int offset);
    private List`1<DateTime> GetHourVariants(List`1<DateTime> dates, RecurrencePattern pattern, Nullable`1<bool> expand);
    private List`1<DateTime> GetMinuteVariants(List`1<DateTime> dates, RecurrencePattern pattern, Nullable`1<bool> expand);
    private List`1<DateTime> GetSecondVariants(List`1<DateTime> dates, RecurrencePattern pattern, Nullable`1<bool> expand);
    private Period CreatePeriod(DateTime dt, IDateTime referenceDate);
    public virtual HashSet`1<Period> Evaluate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
}
internal class Ical.Net.Evaluation.RecurrenceUtil : object {
    public static void ClearEvaluation(IRecurrable recurrable);
    public static HashSet`1<Occurrence> GetOccurrences(IRecurrable recurrable, IDateTime dt, bool includeReferenceDateInResults);
    public static HashSet`1<Occurrence> GetOccurrences(IRecurrable recurrable, IDateTime periodStart, IDateTime periodEnd, bool includeReferenceDateInResults);
    public static Nullable`1[] GetExpandBehaviorList(RecurrencePattern p);
}
public class Ical.Net.Evaluation.RecurringEvaluator : Evaluator {
    [CompilerGeneratedAttribute]
private IRecurrable <Recurrable>k__BackingField;
    protected IRecurrable Recurrable { get; protected set; }
    public RecurringEvaluator(IRecurrable obj);
    [CompilerGeneratedAttribute]
protected IRecurrable get_Recurrable();
    [CompilerGeneratedAttribute]
protected void set_Recurrable(IRecurrable value);
    protected HashSet`1<Period> EvaluateRRule(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
    protected HashSet`1<Period> EvaluateRDate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd);
    protected HashSet`1<Period> EvaluateExRule(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd);
    protected HashSet`1<Period> EvaluateExDate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd);
    public virtual HashSet`1<Period> Evaluate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
    private HashSet`1<Period> FindDateOverlaps(HashSet`1<Period> dates);
}
public class Ical.Net.Evaluation.TimeZoneEvaluator : Evaluator {
    [CompilerGeneratedAttribute]
private VTimeZone <TimeZone>k__BackingField;
    private List`1<Occurrence> _occurrences;
    protected VTimeZone TimeZone { get; protected set; }
    public List`1<Occurrence> Occurrences { get; public set; }
    public TimeZoneEvaluator(VTimeZone tz);
    [CompilerGeneratedAttribute]
protected VTimeZone get_TimeZone();
    [CompilerGeneratedAttribute]
protected void set_TimeZone(VTimeZone value);
    public virtual List`1<Occurrence> get_Occurrences();
    public virtual void set_Occurrences(List`1<Occurrence> value);
    private void ProcessOccurrences(IDateTime referenceDate);
    public virtual void Clear();
    public virtual HashSet`1<Period> Evaluate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
}
public class Ical.Net.Evaluation.TimeZoneInfoEvaluator : RecurringEvaluator {
    protected VTimeZoneInfo TimeZoneInfo { get; protected set; }
    public TimeZoneInfoEvaluator(IRecurrable tzi);
    protected VTimeZoneInfo get_TimeZoneInfo();
    protected void set_TimeZoneInfo(VTimeZoneInfo value);
    public virtual HashSet`1<Period> Evaluate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
}
public class Ical.Net.Evaluation.TodoEvaluator : RecurringEvaluator {
    protected Todo Todo { get; }
    public TodoEvaluator(Todo todo);
    protected Todo get_Todo();
    public void EvaluateToPreviousOccurrence(IDateTime completedDate, IDateTime currDt);
    public void DetermineStartingRecurrence(PeriodList rdate, IDateTime& referenceDateTime);
    public void DetermineStartingRecurrence(RecurrencePattern recur, IDateTime& referenceDateTime);
    public virtual HashSet`1<Period> Evaluate(IDateTime referenceDate, DateTime periodStart, DateTime periodEnd, bool includeReferenceDateInResults);
}
public static class Ical.Net.EventParticipationStatus : object {
    public static string Name;
    public static string Key;
    public static StringComparison Comparison;
    public static string NeedsAction;
    public static string Accepted;
    public static string Declined;
    public static string Tentative;
    public static string Delegated;
    public static string Default { get; }
    private static EventParticipationStatus();
    public static string get_Default();
}
public static class Ical.Net.EventStatus : object {
    public static string Name;
    public static StringComparison Comparison;
    public static string Tentative;
    public static string Confirmed;
    public static string Cancelled;
    private static EventStatus();
}
public enum Ical.Net.FreeBusyStatus : Enum {
    public int value__;
    public static FreeBusyStatus Free;
    public static FreeBusyStatus BusyTentative;
    public static FreeBusyStatus BusyUnavailable;
    public static FreeBusyStatus Busy;
}
public enum Ical.Net.FrequencyOccurrence : Enum {
    public int value__;
    public static FrequencyOccurrence None;
    public static FrequencyOccurrence Last;
    public static FrequencyOccurrence SecondToLast;
    public static FrequencyOccurrence ThirdToLast;
    public static FrequencyOccurrence FourthToLast;
    public static FrequencyOccurrence FifthToLast;
    public static FrequencyOccurrence First;
    public static FrequencyOccurrence Second;
    public static FrequencyOccurrence Third;
    public static FrequencyOccurrence Fourth;
    public static FrequencyOccurrence Fifth;
}
public enum Ical.Net.FrequencyType : Enum {
    public int value__;
    public static FrequencyType None;
    public static FrequencyType Secondly;
    public static FrequencyType Minutely;
    public static FrequencyType Hourly;
    public static FrequencyType Daily;
    public static FrequencyType Weekly;
    public static FrequencyType Monthly;
    public static FrequencyType Yearly;
}
public interface Ical.Net.ICalendarObject {
    public string Name { get; public set; }
    public ICalendarObject Parent { get; public set; }
    public ICalendarObjectList`1<ICalendarObject> Children { get; }
    public Calendar Calendar { get; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ICalendarObject get_Parent();
    public abstract virtual void set_Parent(ICalendarObject value);
    public abstract virtual ICalendarObjectList`1<ICalendarObject> get_Children();
    public abstract virtual Calendar get_Calendar();
    public abstract virtual int get_Line();
    public abstract virtual void set_Line(int value);
    public abstract virtual int get_Column();
    public abstract virtual void set_Column(int value);
}
[DefaultMemberAttribute("Item")]
public interface Ical.Net.ICalendarObjectList`1 {
    public TType Item { get; }
    public abstract virtual TType get_Item(int index);
}
public interface Ical.Net.ICalendarProperty {
    public object Value { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
public interface Ical.Net.ICalendarPropertyListContainer {
    public CalendarPropertyList Properties { get; }
    public abstract virtual CalendarPropertyList get_Properties();
}
public interface Ical.Net.ICopyable {
    public abstract virtual void CopyFrom(ICopyable obj);
    public abstract virtual T Copy();
}
public interface Ical.Net.IGetFreeBusy {
    public abstract virtual FreeBusy GetFreeBusy(FreeBusy freeBusyRequest);
    public abstract virtual FreeBusy GetFreeBusy(IDateTime fromInclusive, IDateTime toExclusive);
    public abstract virtual FreeBusy GetFreeBusy(Organizer organizer, IEnumerable`1<Attendee> contacts, IDateTime fromInclusive, IDateTime toExclusive);
}
public interface Ical.Net.IGetOccurrences {
    public abstract virtual void ClearEvaluation();
    public abstract virtual HashSet`1<Occurrence> GetOccurrences(IDateTime dt);
    public abstract virtual HashSet`1<Occurrence> GetOccurrences(DateTime dt);
    public abstract virtual HashSet`1<Occurrence> GetOccurrences(IDateTime startTime, IDateTime endTime);
    public abstract virtual HashSet`1<Occurrence> GetOccurrences(DateTime startTime, DateTime endTime);
}
public interface Ical.Net.IGetOccurrencesTyped {
    public abstract virtual HashSet`1<Occurrence> GetOccurrences(IDateTime dt);
    public abstract virtual HashSet`1<Occurrence> GetOccurrences(DateTime dt);
    public abstract virtual HashSet`1<Occurrence> GetOccurrences(IDateTime startTime, IDateTime endTime);
    public abstract virtual HashSet`1<Occurrence> GetOccurrences(DateTime startTime, DateTime endTime);
}
public interface Ical.Net.ILoadable {
    public bool IsLoaded { get; }
    public abstract virtual bool get_IsLoaded();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Loaded(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Loaded(EventHandler value);
    public abstract virtual void OnLoaded();
}
public interface Ical.Net.IMergeable {
    public abstract virtual void MergeWith(IMergeable obj);
}
public interface Ical.Net.IParameterCollection {
    public abstract virtual void SetParent(ICalendarObject parent);
    public abstract virtual void Add(string name, string value);
    public abstract virtual string Get(string name);
    public abstract virtual IList`1<string> GetMany(string name);
    public abstract virtual void Set(string name, string value);
    public abstract virtual void Set(string name, IEnumerable`1<string> values);
}
public interface Ical.Net.IServiceProvider {
    public abstract virtual object GetService(string name);
    public abstract virtual object GetService(Type type);
    public abstract virtual T GetService();
    public abstract virtual T GetService(string name);
    public abstract virtual void SetService(string name, object obj);
    public abstract virtual void SetService(object obj);
    public abstract virtual void RemoveService(Type type);
    public abstract virtual void RemoveService(string name);
}
public static class Ical.Net.JournalParticipationStatus : object {
    public static string Name;
    public static string Key;
    public static StringComparison Comparison;
    public static string NeedsAction;
    public static string Accepted;
    public static string Declined;
    public static string Default { get; }
    private static JournalParticipationStatus();
    public static string get_Default();
}
public static class Ical.Net.JournalStatus : object {
    public static string Name;
    public static string Key;
    public static StringComparison Comparison;
    public static string Draft;
    public static string Final;
    public static string Cancelled;
    private static JournalStatus();
}
public static class Ical.Net.LibraryMetadata : object {
    public static string Version;
    public static string ProdId;
    private static LibraryMetadata();
}
public class Ical.Net.ParameterList : GroupedValueList`4<string, CalendarParameter, CalendarParameter, string> {
    public virtual void SetParent(ICalendarObject parent);
    public virtual void Add(string name, string value);
    public virtual string Get(string name);
    public virtual IList`1<string> GetMany(string name);
}
public static class Ical.Net.ParticipationRole : object {
    public static string Role;
    public static string Chair;
    public static string RequiredParticipant;
    public static string OptionalParticipant;
    public static string NonParticipant;
    public static string Default { get; }
    public static string ParamName { get; }
    public static string get_Default();
    public static string get_ParamName();
}
[DefaultMemberAttribute("Item")]
public class Ical.Net.Proxies.CalendarObjectListProxy`1 : GroupedCollectionProxy`3<string, ICalendarObject, TType> {
    public TType Item { get; }
    public CalendarObjectListProxy`1(IGroupedCollection`2<string, ICalendarObject> list);
    public virtual TType get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public interface Ical.Net.Proxies.IUniqueComponentList`1 {
    public TComponentType Item { get; public set; }
    public abstract virtual TComponentType get_Item(string uid);
    public abstract virtual void set_Item(string uid, TComponentType value);
    public abstract virtual void AddRange(IEnumerable`1<TComponentType> collection);
}
[DefaultMemberAttribute("Item")]
public class Ical.Net.Proxies.ParameterCollectionProxy : GroupedCollectionProxy`3<string, CalendarParameter, CalendarParameter> {
    protected GroupedValueList`4<string, CalendarParameter, CalendarParameter, string> Parameters { get; }
    public CalendarParameter Item { get; public set; }
    public ParameterCollectionProxy(IGroupedList`2<string, CalendarParameter> realObject);
    protected GroupedValueList`4<string, CalendarParameter, CalendarParameter, string> get_Parameters();
    public virtual void SetParent(ICalendarObject parent);
    public virtual void Add(string name, string value);
    public virtual string Get(string name);
    public virtual IList`1<string> GetMany(string name);
    public virtual void Set(string name, string value);
    public virtual void Set(string name, IEnumerable`1<string> values);
    public virtual int IndexOf(CalendarParameter obj);
    public virtual void Insert(int index, CalendarParameter item);
    public virtual void RemoveAt(int index);
    public virtual CalendarParameter get_Item(int index);
    public virtual void set_Item(int index, CalendarParameter value);
}
[DefaultMemberAttribute("Item")]
public class Ical.Net.Proxies.UniqueComponentListProxy`1 : CalendarObjectListProxy`1<TComponentType> {
    private Dictionary`2<string, TComponentType> _lookup;
    public TComponentType Item { get; public set; }
    public UniqueComponentListProxy`1(IGroupedCollection`2<string, ICalendarObject> children);
    private TComponentType Search(string uid);
    public virtual TComponentType get_Item(string uid);
    public virtual void set_Item(string uid, TComponentType value);
    public sealed virtual void AddRange(IEnumerable`1<TComponentType> collection);
}
public enum Ical.Net.RecurrenceEvaluationModeType : Enum {
    public int value__;
    public static RecurrenceEvaluationModeType Default;
    public static RecurrenceEvaluationModeType AdjustAutomatically;
    public static RecurrenceEvaluationModeType ThrowException;
}
public enum Ical.Net.RecurrenceRestrictionType : Enum {
    public int value__;
    public static RecurrenceRestrictionType Default;
    public static RecurrenceRestrictionType NoRestriction;
    public static RecurrenceRestrictionType RestrictSecondly;
    public static RecurrenceRestrictionType RestrictMinutely;
    public static RecurrenceRestrictionType RestrictHourly;
}
public class Ical.Net.Serialization.CalendarComponentFactory : object {
    public virtual ICalendarComponent Build(string objectName);
}
public class Ical.Net.Serialization.CalendarSerializer : ComponentSerializer {
    private Calendar _calendar;
    protected IComparer`1<ICalendarProperty> PropertySorter { get; }
    public CalendarSerializer(Calendar cal);
    public CalendarSerializer(SerializationContext ctx);
    public virtual string SerializeToString();
    protected virtual IComparer`1<ICalendarProperty> get_PropertySorter();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.ComponentSerializer : SerializerBase {
    protected IComparer`1<ICalendarProperty> PropertySorter { get; }
    public Type TargetType { get; }
    public ComponentSerializer(SerializationContext ctx);
    protected virtual IComparer`1<ICalendarProperty> get_PropertySorter();
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataMapSerializer : SerializerBase {
    public Type TargetType { get; }
    public DataMapSerializer(SerializationContext ctx);
    protected IStringSerializer GetMappedSerializer();
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
internal class Ical.Net.Serialization.DataTypeMapper : object {
    private IDictionary`2<string, PropertyMapping> _propertyMap;
    protected Type ResolveStatusProperty(object context);
    public void AddPropertyMapping(string name, Type objectType, bool allowsMultipleValues);
    public void AddPropertyMapping(string name, TypeResolverDelegate resolver, bool allowsMultipleValues);
    public void RemovePropertyMapping(string name);
    public virtual bool GetPropertyAllowsMultipleValues(object obj);
    public virtual Type GetPropertyMapping(object obj);
}
public class Ical.Net.Serialization.DataTypes.AttachmentSerializer : EncodableDataTypeSerializer {
    public Type TargetType { get; }
    public AttachmentSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public Attachment Deserialize(string attachment);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.AttendeeSerializer : StringSerializer {
    public Type TargetType { get; }
    public AttendeeSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public Attendee Deserialize(string attendee);
    public virtual object Deserialize(TextReader tr);
}
public abstract class Ical.Net.Serialization.DataTypes.DataTypeSerializer : SerializerBase {
    protected DataTypeSerializer(SerializationContext ctx);
    protected virtual ICalendarDataType CreateAndAssociate();
}
public class Ical.Net.Serialization.DataTypes.DateTimeSerializer : EncodableDataTypeSerializer {
    private static RegexOptions _ciCompiled;
    internal static Regex DateOnlyMatch;
    internal static Regex FullDateTimePatternMatch;
    public Type TargetType { get; }
    public DateTimeSerializer(SerializationContext ctx);
    private static DateTimeSerializer();
    private DateTime CoerceDateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public abstract class Ical.Net.Serialization.DataTypes.EncodableDataTypeSerializer : DataTypeSerializer {
    protected EncodableDataTypeSerializer(SerializationContext ctx);
    protected string Encode(IEncodableDataType dt, string value);
    protected string Encode(IEncodableDataType dt, Byte[] data);
    protected string Decode(IEncodableDataType dt, string value);
    protected Byte[] DecodeData(IEncodableDataType dt, string value);
}
public class Ical.Net.Serialization.DataTypes.EnumSerializer : EncodableDataTypeSerializer {
    private Type _mEnumType;
    public Type TargetType { get; }
    public EnumSerializer(Type enumType);
    public EnumSerializer(Type enumType, SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object enumValue);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.FreeBusyEntrySerializer : PeriodSerializer {
    public Type TargetType { get; }
    public FreeBusyEntrySerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.GeographicLocationSerializer : EncodableDataTypeSerializer {
    public Type TargetType { get; }
    public GeographicLocationSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public GeographicLocation Deserialize(string value);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.IntegerSerializer : EncodableDataTypeSerializer {
    public Type TargetType { get; }
    public IntegerSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object integer);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.OrganizerSerializer : StringSerializer {
    public Type TargetType { get; }
    public OrganizerSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.PeriodListSerializer : EncodableDataTypeSerializer {
    public Type TargetType { get; }
    public PeriodListSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.PeriodSerializer : EncodableDataTypeSerializer {
    public Type TargetType { get; }
    public PeriodSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.RecurrencePatternSerializer : EncodableDataTypeSerializer {
    private static RegexOptions _ciCompiled;
    internal static Regex OtherInterval;
    internal static Regex AdverbFrequencies;
    internal static Regex NumericTemporalUnits;
    internal static Regex TemporalUnitType;
    internal static Regex RelativeDaysOfWeek;
    internal static Regex Time;
    internal static Regex RecurUntil;
    internal static Regex SpecificRecurrenceCount;
    public Type TargetType { get; }
    public RecurrencePatternSerializer(SerializationContext ctx);
    private static RecurrencePatternSerializer();
    public static DayOfWeek GetDayOfWeek(string value);
    protected static void AddInt32Values(IList`1<int> list, string value);
    public virtual void CheckRange(string name, IList`1<int> values, int min, int max);
    public virtual void CheckRange(string name, int value, int min, int max);
    public virtual void CheckRange(string name, int value, int min, int max, bool allowZero);
    public virtual void CheckMutuallyExclusive(string name1, string name2, T obj1, TU obj2);
    private void SerializeByValue(List`1<string> aggregate, IList`1<int> byValue, string name);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.RequestStatusSerializer : StringSerializer {
    internal static Regex NarrowRequestMatch;
    internal static Regex BroadRequestMatch;
    public Type TargetType { get; }
    public RequestStatusSerializer(SerializationContext ctx);
    private static RequestStatusSerializer();
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.StatusCodeSerializer : StringSerializer {
    internal static Regex StatusCode;
    public Type TargetType { get; }
    public StatusCodeSerializer(SerializationContext ctx);
    private static StatusCodeSerializer();
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.StringSerializer : EncodableDataTypeSerializer {
    internal static Regex SingleBackslashMatch;
    internal static Regex UnescapedCommas;
    public Type TargetType { get; }
    public StringSerializer(SerializationContext ctx);
    private static StringSerializer();
    protected virtual string Unescape(string value);
    protected virtual string Escape(string value);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.TimeSpanSerializer : SerializerBase {
    internal static Regex TimespanMatch;
    public Type TargetType { get; }
    public TimeSpanSerializer(SerializationContext ctx);
    private static TimeSpanSerializer();
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.TriggerSerializer : StringSerializer {
    public Type TargetType { get; }
    public TriggerSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.UriSerializer : EncodableDataTypeSerializer {
    public Type TargetType { get; }
    public UriSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypes.UtcOffsetSerializer : EncodableDataTypeSerializer {
    internal static Regex DecodeOffset;
    public Type TargetType { get; }
    public UtcOffsetSerializer(SerializationContext ctx);
    private static UtcOffsetSerializer();
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
    public static TimeSpan GetOffset(string rawOffset);
}
public class Ical.Net.Serialization.DataTypes.WeekDaySerializer : EncodableDataTypeSerializer {
    private static Regex _dayOfWeek;
    public Type TargetType { get; }
    public WeekDaySerializer(SerializationContext ctx);
    private static WeekDaySerializer();
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.DataTypeSerializerFactory : object {
    public virtual ISerializer Build(Type objectType, SerializationContext ctx);
}
internal class Ical.Net.Serialization.EncodingProvider : object {
    private SerializationContext _mSerializationContext;
    public EncodingProvider(SerializationContext ctx);
    protected Byte[] Decode7Bit(string value);
    protected Byte[] Decode8Bit(string value);
    protected Byte[] DecodeBase64(string value);
    protected virtual DecoderDelegate GetDecoderFor(string encoding);
    protected string Encode7Bit(Byte[] data);
    protected string Encode8Bit(Byte[] data);
    protected string EncodeBase64(Byte[] data);
    protected virtual EncoderDelegate GetEncoderFor(string encoding);
    public sealed virtual string Encode(string encoding, Byte[] data);
    public sealed virtual string DecodeString(string encoding, string value);
    public sealed virtual Byte[] DecodeData(string encoding, string value);
}
internal class Ical.Net.Serialization.EncodingStack : object {
    private Stack`1<Encoding> _mStack;
    public Encoding Current { get; }
    public Encoding get_Current();
    public void Push(Encoding encoding);
    public Encoding Pop();
}
public class Ical.Net.Serialization.EventSerializer : ComponentSerializer {
    public Type TargetType { get; }
    public EventSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
}
public class Ical.Net.Serialization.GenericListSerializer : SerializerBase {
    private Type _innerType;
    private Type _objectType;
    private MethodInfo _addMethodInfo;
    public Type TargetType { get; }
    public GenericListSerializer(Type objectType);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
internal interface Ical.Net.Serialization.IEncodingProvider {
    public abstract virtual string Encode(string encoding, Byte[] data);
    public abstract virtual string DecodeString(string encoding, string value);
    public abstract virtual Byte[] DecodeData(string encoding, string value);
}
public interface Ical.Net.Serialization.ISerializer {
    public SerializationContext SerializationContext { get; public set; }
    public Type TargetType { get; }
    public abstract virtual SerializationContext get_SerializationContext();
    public abstract virtual void set_SerializationContext(SerializationContext value);
    public abstract virtual Type get_TargetType();
    public abstract virtual void Serialize(object obj, Stream stream, Encoding encoding);
    public abstract virtual object Deserialize(Stream stream, Encoding encoding);
}
public interface Ical.Net.Serialization.ISerializerFactory {
    public abstract virtual ISerializer Build(Type objectType, SerializationContext ctx);
}
public interface Ical.Net.Serialization.IStringSerializer {
    public abstract virtual string SerializeToString(object obj);
    public abstract virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.ParameterSerializer : SerializerBase {
    public Type TargetType { get; }
    public ParameterSerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.PropertySerializer : SerializerBase {
    public Type TargetType { get; }
    public PropertySerializer(SerializationContext ctx);
    public virtual Type get_TargetType();
    public virtual string SerializeToString(object obj);
    public virtual object Deserialize(TextReader tr);
}
public class Ical.Net.Serialization.SerializationContext : object {
    private static SerializationContext _default;
    private Stack`1<WeakReference> _mStack;
    private ServiceProvider _mServiceProvider;
    public static SerializationContext Default { get; }
    public static SerializationContext get_Default();
    public virtual void Push(object item);
    public virtual object Pop();
    public virtual object Peek();
    public virtual object GetService(Type serviceType);
    public virtual object GetService(string name);
    public virtual T GetService();
    public virtual T GetService(string name);
    public virtual void SetService(string name, object obj);
    public virtual void SetService(object obj);
    public virtual void RemoveService(Type type);
    public virtual void RemoveService(string name);
}
internal class Ical.Net.Serialization.SerializationUtil : object {
    private static BindingFlags _bindingFlags;
    private static ConcurrentDictionary`2<Type, List`1<MethodInfo>> _onDeserializingMethods;
    private static ConcurrentDictionary`2<Type, List`1<MethodInfo>> _onDeserializedMethods;
    private static SerializationUtil();
    public static void OnDeserializing(object obj);
    public static void OnDeserialized(object obj);
    private static List`1<MethodInfo> GetDeserializingMethods(Type targetType);
    private static List`1<MethodInfo> GetDeserializedMethods(Type targetType);
}
public abstract class Ical.Net.Serialization.SerializerBase : object {
    private SerializationContext _mSerializationContext;
    public SerializationContext SerializationContext { get; public set; }
    public Type TargetType { get; }
    protected SerializerBase(SerializationContext ctx);
    public virtual SerializationContext get_SerializationContext();
    public virtual void set_SerializationContext(SerializationContext value);
    public abstract virtual Type get_TargetType();
    public abstract virtual string SerializeToString(object obj);
    public abstract virtual object Deserialize(TextReader tr);
    public sealed virtual object Deserialize(Stream stream, Encoding encoding);
    public sealed virtual void Serialize(object obj, Stream stream, Encoding encoding);
    public virtual object GetService(Type serviceType);
    public virtual object GetService(string name);
    public virtual T GetService();
    public virtual T GetService(string name);
    public sealed virtual void SetService(string name, object obj);
    public sealed virtual void SetService(object obj);
    public sealed virtual void RemoveService(Type type);
    public sealed virtual void RemoveService(string name);
}
public class Ical.Net.Serialization.SerializerFactory : object {
    private ISerializerFactory _mDataTypeSerializerFactory;
    public virtual ISerializer Build(Type objectType, SerializationContext ctx);
}
public class Ical.Net.Serialization.SimpleDeserializer : object {
    public static SimpleDeserializer Default;
    private static string _nameGroup;
    private static string _valueGroup;
    private static string _paramNameGroup;
    private static string _paramValueGroup;
    private static Regex _contentLineRegex;
    private DataTypeMapper _dataTypeMapper;
    private ISerializerFactory _serializerFactory;
    private CalendarComponentFactory _componentFactory;
    internal SimpleDeserializer(DataTypeMapper dataTypeMapper, ISerializerFactory serializerFactory, CalendarComponentFactory componentFactory);
    private static SimpleDeserializer();
    private static string BuildContentLineRegex();
    [IteratorStateMachineAttribute("Ical.Net.Serialization.SimpleDeserializer/<Deserialize>d__11")]
public IEnumerable`1<ICalendarComponent> Deserialize(TextReader reader);
    private CalendarProperty ParseContentLine(SerializationContext context, string input);
    private static void SetPropertyParameters(CalendarProperty property, CaptureCollection paramNames, CaptureCollection paramValues);
    private void SetPropertyValue(SerializationContext context, CalendarProperty property, string value);
    [IteratorStateMachineAttribute("Ical.Net.Serialization.SimpleDeserializer/<GetContentLines>d__15")]
private static IEnumerable`1<string> GetContentLines(TextReader reader);
}
public class Ical.Net.Serialization.TypeResolverDelegate : MulticastDelegate {
    public TypeResolverDelegate(object object, IntPtr method);
    public virtual Type Invoke(object context);
    public virtual IAsyncResult BeginInvoke(object context, AsyncCallback callback, object object);
    public virtual Type EndInvoke(IAsyncResult result);
}
public class Ical.Net.SerializationConstants : object {
    public static string LineBreak;
}
public class Ical.Net.ServiceProvider : object {
    private IDictionary`2<Type, object> _mTypedServices;
    private IDictionary`2<string, object> _mNamedServices;
    public virtual object GetService(Type serviceType);
    public virtual object GetService(string name);
    public virtual T GetService();
    public virtual T GetService(string name);
    public virtual void SetService(string name, object obj);
    public virtual void SetService(object obj);
    public virtual void RemoveService(Type type);
    public virtual void RemoveService(string name);
    [CompilerGeneratedAttribute]
private bool <RemoveService>b__8_0(Type iface);
}
public static class Ical.Net.ToDoParticipationStatus : object {
    public static string Name;
    public static string Key;
    public static StringComparison Comparison;
    public static string NeedsAction;
    public static string Accepted;
    public static string Declined;
    public static string Tentative;
    public static string Delegated;
    public static string Completed;
    public static string InProcess;
    public static string Default { get; }
    private static ToDoParticipationStatus();
    public static string get_Default();
}
public static class Ical.Net.TodoStatus : object {
    public static string Name;
    public static string Key;
    public static StringComparison Comparison;
    public static string NeedsAction;
    public static string Completed;
    public static string InProcess;
    public static string Cancelled;
    private static TodoStatus();
}
public static class Ical.Net.TransparencyType : object {
    public static string Name;
    public static string Key;
    public static StringComparison Comparison;
    public static string Opaque;
    public static string Transparent;
    private static TransparencyType();
}
public static class Ical.Net.TriggerRelation : object {
    public static string Name;
    public static string Key;
    public static StringComparison Comparison;
    public static string Start;
    public static string End;
    private static TriggerRelation();
}
[ExtensionAttribute]
internal static class Ical.Net.Utility.CollectionHelpers : object {
    public static int GetHashCode(IEnumerable`1<T> collection);
    public static int GetHashCodeForNestedCollection(IEnumerable`1<IEnumerable`1<T>> nestedCollection);
    public static bool Equals(IEnumerable`1<T> left, IEnumerable`1<T> right, bool orderSignificant);
    [ExtensionAttribute]
public static void AddRange(ICollection`1<T> destination, IEnumerable`1<T> source);
}
[ExtensionAttribute]
internal static class Ical.Net.Utility.DateUtil : object {
    private static Lazy`1<Dictionary`2<string, string>> _windowsMapping;
    public static DateTimeZone LocalDateTimeZone;
    private static DateUtil();
    public static IDateTime StartOfDay(IDateTime dt);
    public static IDateTime EndOfDay(IDateTime dt);
    public static DateTime GetSimpleDateTimeData(IDateTime dt);
    public static DateTime SimpleDateTimeToMatch(IDateTime dt, IDateTime toMatch);
    public static IDateTime MatchTimeZone(IDateTime dt1, IDateTime dt2);
    public static DateTime AddWeeks(DateTime dt, int interval, DayOfWeek firstDayOfWeek);
    public static DateTime FirstDayOfWeek(DateTime dt, DayOfWeek firstDayOfWeek, Int32& offset);
    private static Dictionary`2<string, string> InitializeWindowsMappings();
    public static DateTimeZone GetZone(string tzId, bool useLocalIfNotFound);
    public static ZonedDateTime AddYears(ZonedDateTime zonedDateTime, int years);
    public static ZonedDateTime AddMonths(ZonedDateTime zonedDateTime, int months);
    public static ZonedDateTime ToZonedDateTimeLeniently(DateTime dateTime, string tzId);
    public static ZonedDateTime FromTimeZoneToTimeZone(DateTime dateTime, string fromZoneId, string toZoneId);
    public static ZonedDateTime FromTimeZoneToTimeZone(DateTime dateTime, DateTimeZone fromZone, DateTimeZone toZone);
    public static bool IsSerializationTimeZone(DateTimeZone zone);
    [ExtensionAttribute]
public static DateTime Truncate(DateTime dateTime, TimeSpan timeSpan);
    public static int WeekOfMonth(DateTime d);
}
[ExtensionAttribute]
internal static class Ical.Net.Utility.TextUtil : object {
    internal static Regex NormalizeToCrLf;
    internal static Regex NewLineMatch;
    private static TextUtil();
    public static string FoldLines(string incoming);
    [IteratorStateMachineAttribute("Ical.Net.Utility.TextUtil/<Chunk>d__1")]
public static IEnumerable`1<string> Chunk(string str, int chunkSize);
    public static string RemoveEmptyLines(string s);
    public static TextReader Normalize(string s, SerializationContext ctx);
    public static string UnwrapLines(string s);
    [ExtensionAttribute]
public static bool Contains(string haystack, string needle, StringComparison stringComparison);
}
public class Ical.Net.VTimeZoneInfo : CalendarComponent {
    private TimeZoneInfoEvaluator _evaluator;
    public string TzId { get; }
    public string TimeZoneName { get; public set; }
    public UtcOffset TZOffsetFrom { get; public set; }
    public UtcOffset OffsetFrom { get; public set; }
    public UtcOffset OffsetTo { get; public set; }
    public UtcOffset TZOffsetTo { get; public set; }
    public IList`1<string> TimeZoneNames { get; public set; }
    public IDateTime DtStart { get; public set; }
    public IDateTime Start { get; public set; }
    public IList`1<PeriodList> ExceptionDates { get; public set; }
    public IList`1<RecurrencePattern> ExceptionRules { get; public set; }
    public IList`1<PeriodList> RecurrenceDates { get; public set; }
    public IList`1<RecurrencePattern> RecurrenceRules { get; public set; }
    public IDateTime RecurrenceId { get; public set; }
    public VTimeZoneInfo(string name);
    private void Initialize();
    protected virtual void OnDeserializing(StreamingContext context);
    public virtual bool Equals(object obj);
    public virtual string get_TzId();
    public virtual string get_TimeZoneName();
    public virtual void set_TimeZoneName(string value);
    public virtual UtcOffset get_TZOffsetFrom();
    public virtual void set_TZOffsetFrom(UtcOffset value);
    public virtual UtcOffset get_OffsetFrom();
    public virtual void set_OffsetFrom(UtcOffset value);
    public virtual UtcOffset get_OffsetTo();
    public virtual void set_OffsetTo(UtcOffset value);
    public virtual UtcOffset get_TZOffsetTo();
    public virtual void set_TZOffsetTo(UtcOffset value);
    public virtual IList`1<string> get_TimeZoneNames();
    public virtual void set_TimeZoneNames(IList`1<string> value);
    public virtual IDateTime get_DtStart();
    public virtual void set_DtStart(IDateTime value);
    public virtual IDateTime get_Start();
    public virtual void set_Start(IDateTime value);
    public virtual IList`1<PeriodList> get_ExceptionDates();
    public virtual void set_ExceptionDates(IList`1<PeriodList> value);
    public virtual IList`1<RecurrencePattern> get_ExceptionRules();
    public virtual void set_ExceptionRules(IList`1<RecurrencePattern> value);
    public virtual IList`1<PeriodList> get_RecurrenceDates();
    public virtual void set_RecurrenceDates(IList`1<PeriodList> value);
    public virtual IList`1<RecurrencePattern> get_RecurrenceRules();
    public virtual void set_RecurrenceRules(IList`1<RecurrencePattern> value);
    public virtual IDateTime get_RecurrenceId();
    public virtual void set_RecurrenceId(IDateTime value);
    public virtual void ClearEvaluation();
    public virtual HashSet`1<Occurrence> GetOccurrences(IDateTime dt);
    public virtual HashSet`1<Occurrence> GetOccurrences(DateTime dt);
    public virtual HashSet`1<Occurrence> GetOccurrences(IDateTime startTime, IDateTime endTime);
    public virtual HashSet`1<Occurrence> GetOccurrences(DateTime startTime, DateTime endTime);
}
