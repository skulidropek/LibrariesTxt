[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.Assembler : object {
    private InstructionList instructions;
    private ulong currentLabelId;
    private Label currentLabel;
    private Label currentAnonLabel;
    private Label nextAnonLabel;
    private bool definedAnonLabel;
    private PrefixFlags prefixFlags;
    [CompilerGeneratedAttribute]
private int <Bitness>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferVex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferShortBranch>k__BackingField;
    public int Bitness { get; }
    public bool PreferVex { get; public set; }
    public bool PreferShortBranch { get; public set; }
    internal bool InstructionPreferVex { get; }
    public IReadOnlyList`1<Instruction> Instructions { get; }
    public Label CurrentLabel { get; }
    [DebuggerBrowsableAttribute("0")]
public Label B { get; }
    [DebuggerBrowsableAttribute("0")]
public Label F { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler lock { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler xacquire { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler xrelease { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler rep { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler repe { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler repz { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler repne { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler repnz { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler bnd { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler notrack { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler vex { get; }
    [DebuggerBrowsableAttribute("0")]
public Assembler evex { get; }
    public Assembler(int bitness);
    [CompilerGeneratedAttribute]
public int get_Bitness();
    [CompilerGeneratedAttribute]
public bool get_PreferVex();
    [CompilerGeneratedAttribute]
public void set_PreferVex(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreferShortBranch();
    [CompilerGeneratedAttribute]
public void set_PreferShortBranch(bool value);
    internal bool get_InstructionPreferVex();
    public IReadOnlyList`1<Instruction> get_Instructions();
    public void Reset();
    [NullableContextAttribute("2")]
public Label CreateLabel(string name);
    public Label get_CurrentLabel();
    public void Label(Label& label);
    public void AnonymousLabel();
    public Label get_B();
    public Label get_F();
    public void AddInstruction(Instruction instruction);
    public void AddInstruction(Instruction& instruction);
    private void AddInstruction(Instruction instruction, AssemblerOperandFlags flags);
    public Assembler get_lock();
    public Assembler get_xacquire();
    public Assembler get_xrelease();
    public Assembler get_rep();
    public Assembler get_repe();
    public Assembler get_repz();
    public Assembler get_repne();
    public Assembler get_repnz();
    public Assembler get_bnd();
    public Assembler get_notrack();
    public Assembler get_vex();
    public Assembler get_evex();
    public void db(Byte[] array);
    public void db(Byte[] array, int index, int length);
    [NullableContextAttribute("0")]
public void db(ReadOnlySpan`1<byte> data);
    public void call(ushort selector, UInt32 offset);
    public void jmp(ushort selector, UInt32 offset);
    public void xlatb();
    public void nop(int sizeInBytes);
    public AssemblerResult Assemble(CodeWriter writer, ulong rip, BlockEncoderOptions options);
    public bool TryAssemble(CodeWriter writer, ulong rip, String& errorMessage, AssemblerResult& assemblerResult, BlockEncoderOptions options);
    private InvalidOperationException NoOpCodeFoundFor(Mnemonic mnemonic, Object[] argNames);
    public void aaa();
    public void aad(sbyte imm);
    public void aad(byte imm);
    public void aadd(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void aadd(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void aam(sbyte imm);
    public void aam(byte imm);
    public void aand(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void aand(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void aas();
    public void adc(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void adc(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void adc(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void adc(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void adc(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void adc(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void adc(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void adc(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void adc(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void adc(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void adc(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void adc(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void adc(AssemblerRegister8 dst, sbyte imm);
    public void adc(AssemblerRegister16 dst, short imm);
    public void adc(AssemblerRegister32 dst, int imm);
    public void adc(AssemblerRegister64 dst, int imm);
    public void adc(AssemblerMemoryOperand dst, int imm);
    public void adc(AssemblerRegister8 dst, byte imm);
    public void adc(AssemblerRegister16 dst, ushort imm);
    public void adc(AssemblerRegister32 dst, UInt32 imm);
    public void adc(AssemblerMemoryOperand dst, UInt32 imm);
    public void adcx(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void adcx(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void adcx(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void adcx(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void add(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void add(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void add(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void add(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void add(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void add(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void add(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void add(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void add(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void add(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void add(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void add(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void add(AssemblerRegister8 dst, sbyte imm);
    public void add(AssemblerRegister16 dst, short imm);
    public void add(AssemblerRegister32 dst, int imm);
    public void add(AssemblerRegister64 dst, int imm);
    public void add(AssemblerMemoryOperand dst, int imm);
    public void add(AssemblerRegister8 dst, byte imm);
    public void add(AssemblerRegister16 dst, ushort imm);
    public void add(AssemblerRegister32 dst, UInt32 imm);
    public void add(AssemblerMemoryOperand dst, UInt32 imm);
    public void addpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void addpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void addps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void addps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void addsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void addsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void addss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void addss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void addsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void addsubpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void addsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void addsubps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void adox(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void adox(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void adox(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void adox(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void aesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void aesdec(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aesdec128kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aesdec256kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void aesdeclast(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aesdecwide128kl(AssemblerMemoryOperand dst);
    public void aesdecwide256kl(AssemblerMemoryOperand dst);
    public void aesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void aesenc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aesenc128kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aesenc256kl(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void aesenclast(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aesencwide128kl(AssemblerMemoryOperand dst);
    public void aesencwide256kl(AssemblerMemoryOperand dst);
    public void aesimc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void aesimc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void aeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void altinst();
    public void and(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void and(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void and(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void and(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void and(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void and(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void and(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void and(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void and(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void and(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void and(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void and(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void and(AssemblerRegister8 dst, sbyte imm);
    public void and(AssemblerRegister16 dst, short imm);
    public void and(AssemblerRegister32 dst, int imm);
    public void and(AssemblerRegister64 dst, int imm);
    public void and(AssemblerMemoryOperand dst, int imm);
    public void and(AssemblerRegister8 dst, byte imm);
    public void and(AssemblerRegister16 dst, ushort imm);
    public void and(AssemblerRegister32 dst, UInt32 imm);
    public void and(AssemblerMemoryOperand dst, UInt32 imm);
    public void andn(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void andn(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void andn(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2);
    public void andn(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2);
    public void andnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void andnpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void andnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void andnps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void andpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void andpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void andps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void andps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void aor(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void aor(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void arpl(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void arpl(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void arpl(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void arpl(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void axor(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void axor(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void bb0_reset();
    public void bb1_reset();
    public void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
    public void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
    public void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, int imm);
    public void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, int imm);
    public void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, int imm);
    public void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, int imm);
    public void bextr(AssemblerRegister32 dst, AssemblerRegister32 src1, UInt32 imm);
    public void bextr(AssemblerRegister64 dst, AssemblerRegister64 src1, UInt32 imm);
    public void bextr(AssemblerRegister32 dst, AssemblerMemoryOperand src1, UInt32 imm);
    public void bextr(AssemblerRegister64 dst, AssemblerMemoryOperand src1, UInt32 imm);
    public void blcfill(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blcfill(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blcfill(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blcfill(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blci(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blci(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blci(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blci(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blcic(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blcic(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blcic(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blcic(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blcmsk(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blcmsk(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blcmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blcmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blcs(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blcs(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blcs(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blcs(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void blendpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void blendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void blendpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void blendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void blendps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void blendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void blendps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void blendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void blendvpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void blendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void blendvps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void blsfill(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blsfill(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blsfill(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blsfill(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blsi(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blsi(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blsi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blsi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blsic(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blsic(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blsic(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blsic(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blsmsk(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blsmsk(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blsmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blsmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void blsr(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void blsr(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void blsr(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void blsr(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void bndcl(AssemblerRegisterBND dst, AssemblerRegister32 src);
    public void bndcl(AssemblerRegisterBND dst, AssemblerRegister64 src);
    public void bndcl(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
    public void bndcn(AssemblerRegisterBND dst, AssemblerRegister32 src);
    public void bndcn(AssemblerRegisterBND dst, AssemblerRegister64 src);
    public void bndcn(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
    public void bndcu(AssemblerRegisterBND dst, AssemblerRegister32 src);
    public void bndcu(AssemblerRegisterBND dst, AssemblerRegister64 src);
    public void bndcu(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
    public void bndldx(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
    public void bndmk(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
    public void bndmov(AssemblerRegisterBND dst, AssemblerRegisterBND src);
    public void bndmov(AssemblerMemoryOperand dst, AssemblerRegisterBND src);
    public void bndmov(AssemblerRegisterBND dst, AssemblerMemoryOperand src);
    public void bndstx(AssemblerMemoryOperand dst, AssemblerRegisterBND src);
    public void bound(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void bound(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void bsf(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void bsf(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void bsf(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void bsf(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void bsf(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void bsf(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void bsr(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void bsr(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void bsr(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void bsr(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void bsr(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void bsr(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void bswap(AssemblerRegister16 dst);
    public void bswap(AssemblerRegister32 dst);
    public void bswap(AssemblerRegister64 dst);
    public void bt(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void bt(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void bt(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void bt(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void bt(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void bt(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void bt(AssemblerRegister16 dst, sbyte imm);
    public void bt(AssemblerRegister32 dst, sbyte imm);
    public void bt(AssemblerRegister64 dst, sbyte imm);
    public void bt(AssemblerMemoryOperand dst, sbyte imm);
    public void bt(AssemblerRegister16 dst, byte imm);
    public void bt(AssemblerRegister32 dst, byte imm);
    public void bt(AssemblerRegister64 dst, byte imm);
    public void bt(AssemblerMemoryOperand dst, byte imm);
    public void btc(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void btc(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void btc(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void btc(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void btc(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void btc(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void btc(AssemblerRegister16 dst, sbyte imm);
    public void btc(AssemblerRegister32 dst, sbyte imm);
    public void btc(AssemblerRegister64 dst, sbyte imm);
    public void btc(AssemblerMemoryOperand dst, sbyte imm);
    public void btc(AssemblerRegister16 dst, byte imm);
    public void btc(AssemblerRegister32 dst, byte imm);
    public void btc(AssemblerRegister64 dst, byte imm);
    public void btc(AssemblerMemoryOperand dst, byte imm);
    public void btr(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void btr(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void btr(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void btr(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void btr(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void btr(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void btr(AssemblerRegister16 dst, sbyte imm);
    public void btr(AssemblerRegister32 dst, sbyte imm);
    public void btr(AssemblerRegister64 dst, sbyte imm);
    public void btr(AssemblerMemoryOperand dst, sbyte imm);
    public void btr(AssemblerRegister16 dst, byte imm);
    public void btr(AssemblerRegister32 dst, byte imm);
    public void btr(AssemblerRegister64 dst, byte imm);
    public void btr(AssemblerMemoryOperand dst, byte imm);
    public void bts(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void bts(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void bts(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void bts(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void bts(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void bts(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void bts(AssemblerRegister16 dst, sbyte imm);
    public void bts(AssemblerRegister32 dst, sbyte imm);
    public void bts(AssemblerRegister64 dst, sbyte imm);
    public void bts(AssemblerMemoryOperand dst, sbyte imm);
    public void bts(AssemblerRegister16 dst, byte imm);
    public void bts(AssemblerRegister32 dst, byte imm);
    public void bts(AssemblerRegister64 dst, byte imm);
    public void bts(AssemblerMemoryOperand dst, byte imm);
    public void bzhi(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void bzhi(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
    public void bzhi(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void bzhi(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
    public void call(AssemblerRegister16 dst);
    public void call(AssemblerRegister32 dst);
    public void call(AssemblerRegister64 dst);
    public void call(AssemblerMemoryOperand dst);
    public void call(Label dst);
    public void call(ulong dst);
    public void cbw();
    public void ccs_encrypt();
    public void ccs_hash();
    public void cdq();
    public void cdqe();
    public void cl1invmb();
    public void clac();
    public void clc();
    public void cld();
    public void cldemote(AssemblerMemoryOperand dst);
    public void clflush(AssemblerMemoryOperand dst);
    public void clflushopt(AssemblerMemoryOperand dst);
    public void clgi();
    public void cli();
    public void clrssbsy(AssemblerMemoryOperand dst);
    public void clts();
    public void clui();
    public void clwb(AssemblerMemoryOperand dst);
    public void clzero();
    public void cmc();
    public void cmova(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmova(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmova(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmova(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmova(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmova(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovae(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovae(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovae(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovae(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovae(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovae(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovb(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovb(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovb(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovb(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovb(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovb(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovbe(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovbe(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovbe(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovbe(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovbe(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovbe(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovc(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovc(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovc(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovc(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovc(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovc(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmove(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmove(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmove(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmove(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmove(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmove(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovg(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovg(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovg(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovg(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovg(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovg(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovge(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovge(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovge(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovge(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovge(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovge(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovl(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovl(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovl(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovl(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovl(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovl(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovle(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovle(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovle(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovle(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovle(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovle(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovna(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovna(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovna(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovna(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovna(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovna(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnae(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnae(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnae(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnae(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnae(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnae(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnb(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnb(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnb(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnb(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnb(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnb(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnbe(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnbe(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnbe(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnbe(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnbe(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnbe(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnc(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnc(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnc(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnc(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnc(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnc(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovne(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovne(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovne(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovne(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovne(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovne(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovng(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovng(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovng(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovng(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovng(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovng(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnge(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnge(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnge(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnge(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnge(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnge(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnl(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnl(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnl(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnl(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnl(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnl(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnle(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnle(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnle(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnle(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnle(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnle(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovno(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovno(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovno(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovno(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovno(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovno(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnp(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnp(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnp(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnp(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnp(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnp(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovns(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovns(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovns(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovns(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovns(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovns(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovnz(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovnz(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovnz(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovnz(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovnz(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovnz(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovo(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovo(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovo(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovo(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovo(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovo(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovp(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovp(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovp(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovp(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovp(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovp(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovpe(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovpe(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovpe(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovpe(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovpe(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovpe(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovpo(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovpo(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovpo(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovpo(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovpo(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovpo(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovs(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovs(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovs(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovs(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovs(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovs(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmovz(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmovz(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmovz(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmovz(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmovz(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmovz(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmp(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void cmp(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void cmp(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmp(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void cmp(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmp(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void cmp(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmp(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void cmp(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void cmp(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void cmp(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cmp(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cmp(AssemblerRegister8 dst, sbyte imm);
    public void cmp(AssemblerRegister16 dst, short imm);
    public void cmp(AssemblerRegister32 dst, int imm);
    public void cmp(AssemblerRegister64 dst, int imm);
    public void cmp(AssemblerMemoryOperand dst, int imm);
    public void cmp(AssemblerRegister8 dst, byte imm);
    public void cmp(AssemblerRegister16 dst, ushort imm);
    public void cmp(AssemblerRegister32 dst, UInt32 imm);
    public void cmp(AssemblerMemoryOperand dst, UInt32 imm);
    public void cmpbexadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpbexadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpbxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpbxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpcxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpcxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpeqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpeqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpeqsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpeqss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmplepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmplesd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpless(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmplexadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmplexadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpltpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpltps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpltsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpltss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmplxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmplxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnaexadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnaexadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnaxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnaxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnbexadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnbexadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnbxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnbxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpncxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpncxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpneqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpneqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpneqsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpneqss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpngexadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpngexadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpngxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpngxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpnlepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpnleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpnlesd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpnless(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpnlexadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnlexadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpnltpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpnltps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpnltsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpnltss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpnlxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnlxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnoxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnoxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnpxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnpxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnsxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnsxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpnzxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpnzxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpordpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpordps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpordsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpordss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpoxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpoxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void cmppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void cmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void cmppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void cmppexadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmppexadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmppoxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmppoxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void cmpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void cmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void cmpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void cmppxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmppxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpsb();
    public void cmpsd();
    public void cmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void cmpsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void cmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void cmpsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void cmpsq();
    public void cmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void cmpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void cmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void cmpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void cmpsw();
    public void cmpsxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpsxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void cmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpunordpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpunordps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpunordsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cmpunordss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cmpxchg(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void cmpxchg(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void cmpxchg(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void cmpxchg(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void cmpxchg(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void cmpxchg16b(AssemblerMemoryOperand dst);
    public void cmpxchg8b(AssemblerMemoryOperand dst);
    public void cmpzxadd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void cmpzxadd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void comisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void comisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void comiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void comiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cpu_read();
    public void cpu_write();
    public void cpuid();
    public void cqo();
    public void crc32(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void crc32(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void crc32(AssemblerRegister32 dst, AssemblerRegister16 src);
    public void crc32(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void crc32(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void crc32(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void crc32(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cvtdq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvtdq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtdq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvtdq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvtpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtpd2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
    public void cvtpd2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void cvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvtpd2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtpi2pd(AssemblerRegisterXMM dst, AssemblerRegisterMM src);
    public void cvtpi2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtpi2ps(AssemblerRegisterXMM dst, AssemblerRegisterMM src);
    public void cvtpi2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvtps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtps2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvtps2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtps2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
    public void cvtps2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void cvtsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void cvtsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void cvtsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cvtsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvtsd2ss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegister32 src);
    public void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegister64 src);
    public void cvtsi2sd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegister32 src);
    public void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegister64 src);
    public void cvtsi2ss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvtss2sd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvtss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void cvtss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void cvtss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cvtss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvttpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvttpd2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
    public void cvttpd2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void cvttps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void cvttps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void cvttps2pi(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
    public void cvttps2pi(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void cvttsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void cvttsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void cvttsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cvttsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cvttss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void cvttss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void cvttss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void cvttss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void cwd();
    public void cwde();
    public void daa();
    public void das();
    public void dec(AssemblerRegister8 dst);
    public void dec(AssemblerRegister16 dst);
    public void dec(AssemblerRegister32 dst);
    public void dec(AssemblerRegister64 dst);
    public void dec(AssemblerMemoryOperand dst);
    public void div(AssemblerRegister8 dst);
    public void div(AssemblerRegister16 dst);
    public void div(AssemblerRegister32 dst);
    public void div(AssemblerRegister64 dst);
    public void div(AssemblerMemoryOperand dst);
    public void divpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void divpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void divps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void divps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void divsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void divsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void divss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void divss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void dmint();
    public void dppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void dppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void dppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void dppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void dpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void dpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void dpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void dpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void emms();
    public void encls();
    public void enclu();
    public void enclv();
    public void encodekey128(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void encodekey256(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void endbr32();
    public void endbr64();
    public void enqcmd(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void enqcmd(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void enqcmd(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void enqcmds(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void enqcmds(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void enqcmds(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void enter(short imm, sbyte imm1);
    public void enter(ushort imm, byte imm1);
    public void erets();
    public void eretu();
    public void extractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void extractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void extractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void extractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm);
    public void extractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm);
    public void extractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void extrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void extrq(AssemblerRegisterXMM dst, sbyte imm, sbyte imm1);
    public void extrq(AssemblerRegisterXMM dst, byte imm, byte imm1);
    public void f2xm1();
    public void fabs();
    public void fadd(AssemblerMemoryOperand dst);
    public void fadd(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void faddp(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fbld(AssemblerMemoryOperand dst);
    public void fbstp(AssemblerMemoryOperand dst);
    public void fchs();
    public void fclex();
    public void fcmovb(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcmovbe(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcmove(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcmovnb(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcmovnbe(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcmovne(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcmovnu(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcmovu(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcom(AssemblerMemoryOperand dst);
    public void fcom(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcomi(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcomip(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcomp(AssemblerMemoryOperand dst);
    public void fcomp(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fcompp();
    public void fcos();
    public void fdecstp();
    public void fdisi();
    public void fdiv(AssemblerMemoryOperand dst);
    public void fdiv(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fdivp(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fdivr(AssemblerMemoryOperand dst);
    public void fdivr(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fdivrp(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void femms();
    public void feni();
    public void ffree(AssemblerRegisterST dst);
    public void ffreep(AssemblerRegisterST dst);
    public void fiadd(AssemblerMemoryOperand dst);
    public void ficom(AssemblerMemoryOperand dst);
    public void ficomp(AssemblerMemoryOperand dst);
    public void fidiv(AssemblerMemoryOperand dst);
    public void fidivr(AssemblerMemoryOperand dst);
    public void fild(AssemblerMemoryOperand dst);
    public void fimul(AssemblerMemoryOperand dst);
    public void fincstp();
    public void finit();
    public void fist(AssemblerMemoryOperand dst);
    public void fistp(AssemblerMemoryOperand dst);
    public void fisttp(AssemblerMemoryOperand dst);
    public void fisub(AssemblerMemoryOperand dst);
    public void fisubr(AssemblerMemoryOperand dst);
    public void fld(AssemblerRegisterST dst);
    public void fld(AssemblerMemoryOperand dst);
    public void fld1();
    public void fldcw(AssemblerMemoryOperand dst);
    public void fldenv(AssemblerMemoryOperand dst);
    public void fldl2e();
    public void fldl2t();
    public void fldlg2();
    public void fldln2();
    public void fldpi();
    public void fldz();
    public void fmul(AssemblerMemoryOperand dst);
    public void fmul(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fmulp(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fnclex();
    public void fndisi();
    public void fneni();
    public void fninit();
    public void fnop();
    public void fnsave(AssemblerMemoryOperand dst);
    public void fnsetpm();
    public void fnstcw(AssemblerMemoryOperand dst);
    public void fnstdw(AssemblerRegister16 dst);
    public void fnstenv(AssemblerMemoryOperand dst);
    public void fnstsg(AssemblerRegister16 dst);
    public void fnstsw(AssemblerRegister16 dst);
    public void fnstsw(AssemblerMemoryOperand dst);
    public void fpatan();
    public void fprem();
    public void fprem1();
    public void fptan();
    public void frndint();
    public void frstor(AssemblerMemoryOperand dst);
    public void frstpm();
    public void fsave(AssemblerMemoryOperand dst);
    public void fscale();
    public void fsetpm();
    public void fsin();
    public void fsincos();
    public void fsqrt();
    public void fst(AssemblerRegisterST dst);
    public void fst(AssemblerMemoryOperand dst);
    public void fstcw(AssemblerMemoryOperand dst);
    public void fstdw(AssemblerRegister16 dst);
    public void fstenv(AssemblerMemoryOperand dst);
    public void fstp(AssemblerRegisterST dst);
    public void fstp(AssemblerMemoryOperand dst);
    public void fstpnce(AssemblerRegisterST dst);
    public void fstsg(AssemblerRegister16 dst);
    public void fstsw(AssemblerRegister16 dst);
    public void fstsw(AssemblerMemoryOperand dst);
    public void fsub(AssemblerMemoryOperand dst);
    public void fsub(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fsubp(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fsubr(AssemblerMemoryOperand dst);
    public void fsubr(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fsubrp(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void ftst();
    public void fucom(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fucomi(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fucomip(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fucomp(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fucompp();
    public void fxam();
    public void fxch(AssemblerRegisterST dst, AssemblerRegisterST src);
    public void fxrstor(AssemblerMemoryOperand dst);
    public void fxrstor64(AssemblerMemoryOperand dst);
    public void fxsave(AssemblerMemoryOperand dst);
    public void fxsave64(AssemblerMemoryOperand dst);
    public void fxtract();
    public void fyl2x();
    public void fyl2xp1();
    public void getsec();
    public void getsecq();
    public void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void gf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void gf2p8affineqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void gf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void gf2p8mulb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void haddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void haddpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void haddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void haddps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void hlt();
    public void hreset(sbyte imm);
    public void hreset(byte imm);
    public void hsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void hsubpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void hsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void hsubps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void ibts(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void ibts(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void ibts(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void ibts(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void idiv(AssemblerRegister8 dst);
    public void idiv(AssemblerRegister16 dst);
    public void idiv(AssemblerRegister32 dst);
    public void idiv(AssemblerRegister64 dst);
    public void idiv(AssemblerMemoryOperand dst);
    public void imul(AssemblerRegister8 dst);
    public void imul(AssemblerRegister16 dst);
    public void imul(AssemblerRegister32 dst);
    public void imul(AssemblerRegister64 dst);
    public void imul(AssemblerMemoryOperand dst);
    public void imul(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void imul(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void imul(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void imul(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void imul(AssemblerRegister16 dst, AssemblerRegister16 src1, short imm);
    public void imul(AssemblerRegister32 dst, AssemblerRegister32 src1, int imm);
    public void imul(AssemblerRegister64 dst, AssemblerRegister64 src1, int imm);
    public void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src1, short imm);
    public void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src1, int imm);
    public void imul(AssemblerRegister64 dst, AssemblerMemoryOperand src1, int imm);
    public void imul(AssemblerRegister16 dst, AssemblerRegister16 src1, ushort imm);
    public void imul(AssemblerRegister32 dst, AssemblerRegister32 src1, UInt32 imm);
    public void imul(AssemblerRegister16 dst, AssemblerMemoryOperand src1, ushort imm);
    public void imul(AssemblerRegister32 dst, AssemblerMemoryOperand src1, UInt32 imm);
    public void in(AssemblerRegister8 dst, AssemblerRegister16 src);
    public void in(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void in(AssemblerRegister32 dst, AssemblerRegister16 src);
    public void in(AssemblerRegister8 dst, sbyte imm);
    public void in(AssemblerRegister16 dst, sbyte imm);
    public void in(AssemblerRegister32 dst, sbyte imm);
    public void in(AssemblerRegister8 dst, byte imm);
    public void in(AssemblerRegister16 dst, byte imm);
    public void in(AssemblerRegister32 dst, byte imm);
    public void inc(AssemblerRegister8 dst);
    public void inc(AssemblerRegister16 dst);
    public void inc(AssemblerRegister32 dst);
    public void inc(AssemblerRegister64 dst);
    public void inc(AssemblerMemoryOperand dst);
    public void incsspd(AssemblerRegister32 dst);
    public void incsspq(AssemblerRegister64 dst);
    public void insb();
    public void insd();
    public void insertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void insertps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void insertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void insertps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm, sbyte imm1);
    public void insertq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm, byte imm1);
    public void insw();
    public void int(sbyte imm);
    public void int(byte imm);
    public void int1();
    public void int3();
    public void into();
    public void invd();
    public void invept(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void invept(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void invlpg(AssemblerMemoryOperand dst);
    public void invlpga();
    public void invlpgb();
    public void invpcid(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void invpcid(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void invvpid(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void invvpid(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void iret();
    public void iretd();
    public void iretq();
    public void ja(Label dst);
    public void ja(ulong dst);
    public void jae(Label dst);
    public void jae(ulong dst);
    public void jb(Label dst);
    public void jb(ulong dst);
    public void jbe(Label dst);
    public void jbe(ulong dst);
    public void jc(Label dst);
    public void jc(ulong dst);
    public void jcxz(Label dst);
    public void jcxz(ulong dst);
    public void je(Label dst);
    public void je(ulong dst);
    public void jecxz(Label dst);
    public void jecxz(ulong dst);
    public void jg(Label dst);
    public void jg(ulong dst);
    public void jge(Label dst);
    public void jge(ulong dst);
    public void jl(Label dst);
    public void jl(ulong dst);
    public void jle(Label dst);
    public void jle(ulong dst);
    public void jmp(AssemblerRegister16 dst);
    public void jmp(AssemblerRegister32 dst);
    public void jmp(AssemblerRegister64 dst);
    public void jmp(AssemblerMemoryOperand dst);
    public void jmp(Label dst);
    public void jmp(ulong dst);
    public void jmpe(AssemblerRegister16 dst);
    public void jmpe(AssemblerRegister32 dst);
    public void jmpe(AssemblerMemoryOperand dst);
    public void jmpe(Label dst);
    public void jmpe(ulong dst);
    public void jna(Label dst);
    public void jna(ulong dst);
    public void jnae(Label dst);
    public void jnae(ulong dst);
    public void jnb(Label dst);
    public void jnb(ulong dst);
    public void jnbe(Label dst);
    public void jnbe(ulong dst);
    public void jnc(Label dst);
    public void jnc(ulong dst);
    public void jne(Label dst);
    public void jne(ulong dst);
    public void jng(Label dst);
    public void jng(ulong dst);
    public void jnge(Label dst);
    public void jnge(ulong dst);
    public void jnl(Label dst);
    public void jnl(ulong dst);
    public void jnle(Label dst);
    public void jnle(ulong dst);
    public void jno(Label dst);
    public void jno(ulong dst);
    public void jnp(Label dst);
    public void jnp(ulong dst);
    public void jns(Label dst);
    public void jns(ulong dst);
    public void jnz(Label dst);
    public void jnz(ulong dst);
    public void jo(Label dst);
    public void jo(ulong dst);
    public void jp(Label dst);
    public void jp(ulong dst);
    public void jpe(Label dst);
    public void jpe(ulong dst);
    public void jpo(Label dst);
    public void jpo(ulong dst);
    public void jrcxz(Label dst);
    public void jrcxz(ulong dst);
    public void js(Label dst);
    public void js(ulong dst);
    public void jz(Label dst);
    public void jz(ulong dst);
    public void kaddb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kaddd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kaddq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kaddw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kandb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kandd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kandnb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kandnd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kandnq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kandnw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kandq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kandw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kmovb(AssemblerRegisterK dst, AssemblerRegister32 src);
    public void kmovb(AssemblerRegister32 dst, AssemblerRegisterK src);
    public void kmovb(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void kmovb(AssemblerMemoryOperand dst, AssemblerRegisterK src);
    public void kmovb(AssemblerRegisterK dst, AssemblerMemoryOperand src);
    public void kmovd(AssemblerRegisterK dst, AssemblerRegister32 src);
    public void kmovd(AssemblerRegister32 dst, AssemblerRegisterK src);
    public void kmovd(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void kmovd(AssemblerMemoryOperand dst, AssemblerRegisterK src);
    public void kmovd(AssemblerRegisterK dst, AssemblerMemoryOperand src);
    public void kmovq(AssemblerRegisterK dst, AssemblerRegister64 src);
    public void kmovq(AssemblerRegister64 dst, AssemblerRegisterK src);
    public void kmovq(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void kmovq(AssemblerMemoryOperand dst, AssemblerRegisterK src);
    public void kmovq(AssemblerRegisterK dst, AssemblerMemoryOperand src);
    public void kmovw(AssemblerRegisterK dst, AssemblerRegister32 src);
    public void kmovw(AssemblerRegister32 dst, AssemblerRegisterK src);
    public void kmovw(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void kmovw(AssemblerMemoryOperand dst, AssemblerRegisterK src);
    public void kmovw(AssemblerRegisterK dst, AssemblerMemoryOperand src);
    public void knotb(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void knotd(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void knotq(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void knotw(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void korb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void korq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kortestb(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void kortestd(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void kortestq(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void kortestw(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void korw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kshiftlb(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm);
    public void kshiftlb(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm);
    public void kshiftld(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm);
    public void kshiftld(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm);
    public void kshiftlq(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm);
    public void kshiftlq(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm);
    public void kshiftlw(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm);
    public void kshiftlw(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm);
    public void kshiftrb(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm);
    public void kshiftrb(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm);
    public void kshiftrd(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm);
    public void kshiftrd(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm);
    public void kshiftrq(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm);
    public void kshiftrq(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm);
    public void kshiftrw(AssemblerRegisterK dst, AssemblerRegisterK src1, sbyte imm);
    public void kshiftrw(AssemblerRegisterK dst, AssemblerRegisterK src1, byte imm);
    public void ktestb(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void ktestd(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void ktestq(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void ktestw(AssemblerRegisterK dst, AssemblerRegisterK src);
    public void kunpckbw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kunpckdq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kunpckwd(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kxnorb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kxnord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kxnorq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kxnorw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kxorb(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kxord(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kxorq(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void kxorw(AssemblerRegisterK dst, AssemblerRegisterK src1, AssemblerRegisterK src2);
    public void lahf();
    public void lar(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void lar(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void lar(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void lar(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void lar(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void lddqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void ldmxcsr(AssemblerMemoryOperand dst);
    public void lds(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void lds(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void ldtilecfg(AssemblerMemoryOperand dst);
    public void lea(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void lea(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void lea(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void leave();
    public void les(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void les(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void lfence();
    public void lfs(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void lfs(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void lfs(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void lgdt(AssemblerMemoryOperand dst);
    public void lgs(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void lgs(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void lgs(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void lidt(AssemblerMemoryOperand dst);
    public void lkgs(AssemblerRegister16 dst);
    public void lkgs(AssemblerRegister32 dst);
    public void lkgs(AssemblerRegister64 dst);
    public void lkgs(AssemblerMemoryOperand dst);
    public void lldt(AssemblerRegister16 dst);
    public void lldt(AssemblerRegister32 dst);
    public void lldt(AssemblerRegister64 dst);
    public void lldt(AssemblerMemoryOperand dst);
    public void llwpcb(AssemblerRegister32 dst);
    public void llwpcb(AssemblerRegister64 dst);
    public void lmsw(AssemblerRegister16 dst);
    public void lmsw(AssemblerRegister32 dst);
    public void lmsw(AssemblerRegister64 dst);
    public void lmsw(AssemblerMemoryOperand dst);
    public void loadall();
    public void loadiwkey(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void lodsb();
    public void lodsd();
    public void lodsq();
    public void lodsw();
    public void loop(Label dst);
    public void loop(ulong dst);
    public void loope(Label dst);
    public void loope(ulong dst);
    public void loopne(Label dst);
    public void loopne(ulong dst);
    public void loopnz(Label dst);
    public void loopnz(ulong dst);
    public void loopz(Label dst);
    public void loopz(ulong dst);
    public void lsl(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void lsl(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void lsl(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void lsl(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void lsl(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void lss(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void lss(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void lss(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void ltr(AssemblerRegister16 dst);
    public void ltr(AssemblerRegister32 dst);
    public void ltr(AssemblerRegister64 dst);
    public void ltr(AssemblerMemoryOperand dst);
    public void lwpins(AssemblerRegister32 dst, AssemblerRegister32 src1, int imm);
    public void lwpins(AssemblerRegister64 dst, AssemblerRegister32 src1, int imm);
    public void lwpins(AssemblerRegister32 dst, AssemblerMemoryOperand src1, int imm);
    public void lwpins(AssemblerRegister64 dst, AssemblerMemoryOperand src1, int imm);
    public void lwpins(AssemblerRegister32 dst, AssemblerRegister32 src1, UInt32 imm);
    public void lwpins(AssemblerRegister64 dst, AssemblerRegister32 src1, UInt32 imm);
    public void lwpins(AssemblerRegister32 dst, AssemblerMemoryOperand src1, UInt32 imm);
    public void lwpins(AssemblerRegister64 dst, AssemblerMemoryOperand src1, UInt32 imm);
    public void lwpval(AssemblerRegister32 dst, AssemblerRegister32 src1, int imm);
    public void lwpval(AssemblerRegister64 dst, AssemblerRegister32 src1, int imm);
    public void lwpval(AssemblerRegister32 dst, AssemblerMemoryOperand src1, int imm);
    public void lwpval(AssemblerRegister64 dst, AssemblerMemoryOperand src1, int imm);
    public void lwpval(AssemblerRegister32 dst, AssemblerRegister32 src1, UInt32 imm);
    public void lwpval(AssemblerRegister64 dst, AssemblerRegister32 src1, UInt32 imm);
    public void lwpval(AssemblerRegister32 dst, AssemblerMemoryOperand src1, UInt32 imm);
    public void lwpval(AssemblerRegister64 dst, AssemblerMemoryOperand src1, UInt32 imm);
    public void lzcnt(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void lzcnt(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void lzcnt(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void lzcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void lzcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void lzcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void maskmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void maskmovq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void maxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void maxpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void maxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void maxps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void maxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void maxsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void maxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void maxss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void mcommit();
    public void mfence();
    public void minpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void minpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void minps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void minps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void minsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void minsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void minss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void minss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void monitor();
    public void monitorx();
    public void montmul();
    public void mov(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void mov(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void mov(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void mov(AssemblerRegisterSegment dst, AssemblerRegister16 src);
    public void mov(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void mov(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void mov(AssemblerRegisterSegment dst, AssemblerRegister32 src);
    public void mov(AssemblerRegisterCR dst, AssemblerRegister32 src);
    public void mov(AssemblerRegisterDR dst, AssemblerRegister32 src);
    public void mov(AssemblerRegisterTR dst, AssemblerRegister32 src);
    public void mov(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void mov(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void mov(AssemblerRegisterSegment dst, AssemblerRegister64 src);
    public void mov(AssemblerRegisterCR dst, AssemblerRegister64 src);
    public void mov(AssemblerRegisterDR dst, AssemblerRegister64 src);
    public void mov(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void mov(AssemblerRegister16 dst, AssemblerRegisterSegment src);
    public void mov(AssemblerRegister32 dst, AssemblerRegisterSegment src);
    public void mov(AssemblerRegister64 dst, AssemblerRegisterSegment src);
    public void mov(AssemblerMemoryOperand dst, AssemblerRegisterSegment src);
    public void mov(AssemblerRegister32 dst, AssemblerRegisterCR src);
    public void mov(AssemblerRegister64 dst, AssemblerRegisterCR src);
    public void mov(AssemblerRegister32 dst, AssemblerRegisterDR src);
    public void mov(AssemblerRegister64 dst, AssemblerRegisterDR src);
    public void mov(AssemblerRegister32 dst, AssemblerRegisterTR src);
    public void mov(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void mov(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void mov(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void mov(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void mov(AssemblerRegisterSegment dst, AssemblerMemoryOperand src);
    public void mov(AssemblerRegister8 dst, sbyte imm);
    public void mov(AssemblerRegister16 dst, short imm);
    public void mov(AssemblerRegister32 dst, int imm);
    public void mov(AssemblerRegister64 dst, long imm);
    public void mov(AssemblerMemoryOperand dst, int imm);
    public void mov(AssemblerRegister8 dst, byte imm);
    public void mov(AssemblerRegister16 dst, ushort imm);
    public void mov(AssemblerRegister32 dst, UInt32 imm);
    public void mov(AssemblerRegister64 dst, ulong imm);
    public void mov(AssemblerMemoryOperand dst, UInt32 imm);
    public void movapd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movapd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movapd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movaps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movaps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movaps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movbe(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void movbe(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void movbe(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void movbe(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void movbe(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void movbe(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void movd(AssemblerRegisterMM dst, AssemblerRegister32 src);
    public void movd(AssemblerRegisterXMM dst, AssemblerRegister32 src);
    public void movd(AssemblerRegister32 dst, AssemblerRegisterMM src);
    public void movd(AssemblerMemoryOperand dst, AssemblerRegisterMM src);
    public void movd(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void movd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void movd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movddup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movddup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movdir64b(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void movdir64b(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void movdir64b(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void movdiri(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void movdiri(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void movdq2q(AssemblerRegisterMM dst, AssemblerRegisterXMM src);
    public void movdqa(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movdqa(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movdqu(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movdqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movhlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movhpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movhpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movhps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movhps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movlhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movlpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movlpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movlps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movlps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movmskpd(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void movmskpd(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void movmskps(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void movmskps(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void movntdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movntdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movnti(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void movnti(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void movntpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movntps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movntq(AssemblerMemoryOperand dst, AssemblerRegisterMM src);
    public void movntsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movntss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movq(AssemblerRegisterMM dst, AssemblerRegister64 src);
    public void movq(AssemblerRegisterXMM dst, AssemblerRegister64 src);
    public void movq(AssemblerRegister64 dst, AssemblerRegisterMM src);
    public void movq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void movq(AssemblerMemoryOperand dst, AssemblerRegisterMM src);
    public void movq(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void movq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void movq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movq2dq(AssemblerRegisterXMM dst, AssemblerRegisterMM src);
    public void movsb();
    public void movsd();
    public void movsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movshdup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movshdup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movsldup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movsldup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movsq();
    public void movss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movsw();
    public void movsx(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void movsx(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void movsx(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void movsx(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void movsx(AssemblerRegister32 dst, AssemblerRegister16 src);
    public void movsx(AssemblerRegister64 dst, AssemblerRegister16 src);
    public void movsx(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void movsx(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void movsx(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void movsxd(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void movsxd(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void movsxd(AssemblerRegister64 dst, AssemblerRegister32 src);
    public void movsxd(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void movsxd(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void movsxd(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void movupd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movupd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movupd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movups(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void movups(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void movups(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void movzx(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void movzx(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void movzx(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void movzx(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void movzx(AssemblerRegister32 dst, AssemblerRegister16 src);
    public void movzx(AssemblerRegister64 dst, AssemblerRegister16 src);
    public void movzx(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void movzx(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void movzx(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void mpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void mpsadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void mpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void mpsadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void mul(AssemblerRegister8 dst);
    public void mul(AssemblerRegister16 dst);
    public void mul(AssemblerRegister32 dst);
    public void mul(AssemblerRegister64 dst);
    public void mul(AssemblerMemoryOperand dst);
    public void mulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void mulpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void mulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void mulps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void mulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void mulsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void mulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void mulss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void mulx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void mulx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void mulx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2);
    public void mulx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2);
    public void mwait();
    public void mwaitx();
    public void neg(AssemblerRegister8 dst);
    public void neg(AssemblerRegister16 dst);
    public void neg(AssemblerRegister32 dst);
    public void neg(AssemblerRegister64 dst);
    public void neg(AssemblerMemoryOperand dst);
    public void nop();
    public void nop(AssemblerRegister16 dst);
    public void nop(AssemblerRegister32 dst);
    public void nop(AssemblerRegister64 dst);
    public void nop(AssemblerMemoryOperand dst);
    public void not(AssemblerRegister8 dst);
    public void not(AssemblerRegister16 dst);
    public void not(AssemblerRegister32 dst);
    public void not(AssemblerRegister64 dst);
    public void not(AssemblerMemoryOperand dst);
    public void or(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void or(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void or(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void or(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void or(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void or(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void or(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void or(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void or(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void or(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void or(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void or(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void or(AssemblerRegister8 dst, sbyte imm);
    public void or(AssemblerRegister16 dst, short imm);
    public void or(AssemblerRegister32 dst, int imm);
    public void or(AssemblerRegister64 dst, int imm);
    public void or(AssemblerMemoryOperand dst, int imm);
    public void or(AssemblerRegister8 dst, byte imm);
    public void or(AssemblerRegister16 dst, ushort imm);
    public void or(AssemblerRegister32 dst, UInt32 imm);
    public void or(AssemblerMemoryOperand dst, UInt32 imm);
    public void orpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void orpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void orps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void orps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void out(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void out(sbyte imm, AssemblerRegister8 src);
    public void out(byte imm, AssemblerRegister8 src);
    public void out(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void out(sbyte imm, AssemblerRegister16 src);
    public void out(byte imm, AssemblerRegister16 src);
    public void out(AssemblerRegister16 dst, AssemblerRegister32 src);
    public void out(sbyte imm, AssemblerRegister32 src);
    public void out(byte imm, AssemblerRegister32 src);
    public void outsb();
    public void outsd();
    public void outsw();
    public void pabsb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pabsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pabsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pabsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pabsd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pabsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pabsd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pabsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pabsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pabsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pabsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pabsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void packssdw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void packssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void packssdw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void packssdw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void packsswb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void packsswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void packsswb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void packsswb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void packusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void packusdw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void packuswb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void packuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void packuswb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void packuswb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void paddb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void paddb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void paddd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void paddd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void paddq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void paddq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void paddsb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void paddsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void paddsiw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddsiw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void paddsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void paddusb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void paddusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddusb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void paddusw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void paddusw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddusw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void paddw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void paddw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void paddw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void palignr(AssemblerRegisterMM dst, AssemblerRegisterMM src1, sbyte imm);
    public void palignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void palignr(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void palignr(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void palignr(AssemblerRegisterMM dst, AssemblerRegisterMM src1, byte imm);
    public void palignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void palignr(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, byte imm);
    public void palignr(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pand(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pand(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pand(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pandn(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pandn(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pandn(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pause();
    public void paveb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void paveb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pavgb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pavgb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pavgb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pavgusb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pavgusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pavgw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pavgw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pavgw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pblendvb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pblendw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pblendw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pbndkb();
    public void pclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pclmullqhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pclmullqlqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pclmulqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pclmulqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pcmpeqb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pcmpeqb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pcmpeqb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pcmpeqd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pcmpeqd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pcmpeqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pcmpeqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pcmpeqw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pcmpeqw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pcmpeqw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pcmpgtb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pcmpgtb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pcmpgtb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pcmpgtd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pcmpgtd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pcmpgtd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pcmpgtq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pcmpgtw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pcmpgtw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pcmpgtw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pcommit();
    public void pconfig();
    public void pdep(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void pdep(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void pdep(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2);
    public void pdep(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2);
    public void pdistib(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pext(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void pext(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void pext(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerMemoryOperand src2);
    public void pext(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerMemoryOperand src2);
    public void pextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrw(AssemblerRegister32 dst, AssemblerRegisterMM src1, sbyte imm);
    public void pextrw(AssemblerRegister64 dst, AssemblerRegisterMM src1, sbyte imm);
    public void pextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pextrw(AssemblerRegister32 dst, AssemblerRegisterMM src1, byte imm);
    public void pextrw(AssemblerRegister64 dst, AssemblerRegisterMM src1, byte imm);
    public void pextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm);
    public void pextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void pf2id(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pf2id(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pf2iw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pf2iw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfacc(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfadd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfadd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfcmpeq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfcmpeq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfcmpge(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfcmpge(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfcmpgt(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfcmpgt(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfmax(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfmax(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfmin(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfmin(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfmul(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfmul(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfnacc(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfnacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfpnacc(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfpnacc(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfrcp(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfrcp(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfrcpit1(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfrcpit1(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfrcpit2(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfrcpit2(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfrcpv(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfrcpv(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfrsqit1(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfrsqit1(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfrsqrt(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfrsqrt(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfrsqrtv(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfrsqrtv(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfsub(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfsub(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pfsubr(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pfsubr(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void phaddd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void phaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void phaddd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void phaddd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void phaddsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void phaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void phaddsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void phaddsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void phaddw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void phaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void phaddw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void phaddw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void phminposuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void phminposuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void phsubd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void phsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void phsubd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void phsubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void phsubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void phsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void phsubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void phsubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void phsubw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void phsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void phsubw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void phsubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pi2fd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pi2fd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pi2fw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pi2fw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister32 src1, sbyte imm);
    public void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister64 src1, sbyte imm);
    public void pinsrb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister32 src1, byte imm);
    public void pinsrb(AssemblerRegisterXMM dst, AssemblerRegister64 src1, byte imm);
    public void pinsrb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pinsrd(AssemblerRegisterXMM dst, AssemblerRegister32 src1, sbyte imm);
    public void pinsrd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pinsrd(AssemblerRegisterXMM dst, AssemblerRegister32 src1, byte imm);
    public void pinsrd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pinsrq(AssemblerRegisterXMM dst, AssemblerRegister64 src1, sbyte imm);
    public void pinsrq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pinsrq(AssemblerRegisterXMM dst, AssemblerRegister64 src1, byte imm);
    public void pinsrq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pinsrw(AssemblerRegisterMM dst, AssemblerRegister32 src1, sbyte imm);
    public void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister32 src1, sbyte imm);
    public void pinsrw(AssemblerRegisterMM dst, AssemblerRegister64 src1, sbyte imm);
    public void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister64 src1, sbyte imm);
    public void pinsrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pinsrw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pinsrw(AssemblerRegisterMM dst, AssemblerRegister32 src1, byte imm);
    public void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister32 src1, byte imm);
    public void pinsrw(AssemblerRegisterMM dst, AssemblerRegister64 src1, byte imm);
    public void pinsrw(AssemblerRegisterXMM dst, AssemblerRegister64 src1, byte imm);
    public void pinsrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pinsrw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pmachriw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmaddubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmaddubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmaddubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmaddwd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmaddwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmaddwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmagw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmagw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmaxsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmaxsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmaxsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmaxsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmaxsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmaxub(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmaxub(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmaxub(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmaxud(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmaxuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pminsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pminsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pminsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pminsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pminsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pminub(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pminub(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pminub(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pminud(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pminuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovmskb(AssemblerRegister32 dst, AssemblerRegisterMM src);
    public void pmovmskb(AssemblerRegister64 dst, AssemblerRegisterMM src);
    public void pmovmskb(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void pmovmskb(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void pmovsxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovsxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovsxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovsxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovsxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovsxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovsxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovsxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovsxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovsxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovsxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovsxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovzxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovzxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovzxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovzxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovzxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovzxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovzxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovzxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovzxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovzxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmovzxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmovzxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmuldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmulhriw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmulhriw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmulhrsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmulhrsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmulhrsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmulhrw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmulhrw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmulhrw_cyrix(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmulhrw_cyrix(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmulhuw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmulhuw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmulhuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmulhw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmulhw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmulhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmulld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmullw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmullw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmullw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmuludq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pmuludq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmuludq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pmvgezb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmvlzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmvnzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pmvzb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pop(AssemblerRegister16 dst);
    public void pop(AssemblerRegister32 dst);
    public void pop(AssemblerRegister64 dst);
    public void pop(AssemblerRegisterSegment dst);
    public void pop(AssemblerMemoryOperand dst);
    public void popa();
    public void popad();
    public void popcnt(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void popcnt(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void popcnt(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void popcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void popcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void popcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void popf();
    public void popfd();
    public void popfq();
    public void por(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void por(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void por(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void por(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void prefetch(AssemblerMemoryOperand dst);
    public void prefetchit0(AssemblerMemoryOperand dst);
    public void prefetchit1(AssemblerMemoryOperand dst);
    public void prefetchnta(AssemblerMemoryOperand dst);
    public void prefetcht0(AssemblerMemoryOperand dst);
    public void prefetcht1(AssemblerMemoryOperand dst);
    public void prefetcht2(AssemblerMemoryOperand dst);
    public void prefetchw(AssemblerMemoryOperand dst);
    public void prefetchwt1(AssemblerMemoryOperand dst);
    public void psadbw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psadbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psadbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pshufb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pshufb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pshufb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void pshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void pshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void pshufw(AssemblerRegisterMM dst, AssemblerRegisterMM src1, sbyte imm);
    public void pshufw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void pshufw(AssemblerRegisterMM dst, AssemblerRegisterMM src1, byte imm);
    public void pshufw(AssemblerRegisterMM dst, AssemblerMemoryOperand src1, byte imm);
    public void psignb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psignb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psignb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psignd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psignd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psignd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psignw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psignw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psignw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pslld(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pslld(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pslld(AssemblerRegisterMM dst, sbyte imm);
    public void pslld(AssemblerRegisterXMM dst, sbyte imm);
    public void pslld(AssemblerRegisterMM dst, byte imm);
    public void pslld(AssemblerRegisterXMM dst, byte imm);
    public void pslldq(AssemblerRegisterXMM dst, sbyte imm);
    public void pslldq(AssemblerRegisterXMM dst, byte imm);
    public void psllq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psllq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psllq(AssemblerRegisterMM dst, sbyte imm);
    public void psllq(AssemblerRegisterXMM dst, sbyte imm);
    public void psllq(AssemblerRegisterMM dst, byte imm);
    public void psllq(AssemblerRegisterXMM dst, byte imm);
    public void psllw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psllw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psllw(AssemblerRegisterMM dst, sbyte imm);
    public void psllw(AssemblerRegisterXMM dst, sbyte imm);
    public void psllw(AssemblerRegisterMM dst, byte imm);
    public void psllw(AssemblerRegisterXMM dst, byte imm);
    public void psmash();
    public void psrad(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psrad(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psrad(AssemblerRegisterMM dst, sbyte imm);
    public void psrad(AssemblerRegisterXMM dst, sbyte imm);
    public void psrad(AssemblerRegisterMM dst, byte imm);
    public void psrad(AssemblerRegisterXMM dst, byte imm);
    public void psraw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psraw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psraw(AssemblerRegisterMM dst, sbyte imm);
    public void psraw(AssemblerRegisterXMM dst, sbyte imm);
    public void psraw(AssemblerRegisterMM dst, byte imm);
    public void psraw(AssemblerRegisterXMM dst, byte imm);
    public void psrld(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psrld(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psrld(AssemblerRegisterMM dst, sbyte imm);
    public void psrld(AssemblerRegisterXMM dst, sbyte imm);
    public void psrld(AssemblerRegisterMM dst, byte imm);
    public void psrld(AssemblerRegisterXMM dst, byte imm);
    public void psrldq(AssemblerRegisterXMM dst, sbyte imm);
    public void psrldq(AssemblerRegisterXMM dst, byte imm);
    public void psrlq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psrlq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psrlq(AssemblerRegisterMM dst, sbyte imm);
    public void psrlq(AssemblerRegisterXMM dst, sbyte imm);
    public void psrlq(AssemblerRegisterMM dst, byte imm);
    public void psrlq(AssemblerRegisterXMM dst, byte imm);
    public void psrlw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psrlw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psrlw(AssemblerRegisterMM dst, sbyte imm);
    public void psrlw(AssemblerRegisterXMM dst, sbyte imm);
    public void psrlw(AssemblerRegisterMM dst, byte imm);
    public void psrlw(AssemblerRegisterXMM dst, byte imm);
    public void psubb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psubb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psubd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psubd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psubq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psubq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psubsb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psubsb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psubsiw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubsiw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubsw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psubsw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psubusb(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psubusb(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubusb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psubusw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psubusw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubusw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void psubw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void psubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void psubw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void psubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void pswapd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pswapd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void ptest(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void ptest(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void ptwrite(AssemblerRegister32 dst);
    public void ptwrite(AssemblerRegister64 dst);
    public void ptwrite(AssemblerMemoryOperand dst);
    public void punpckhbw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void punpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void punpckhbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void punpckhbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void punpckhdq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void punpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void punpckhdq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void punpckhdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void punpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void punpckhqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void punpckhwd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void punpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void punpckhwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void punpckhwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void punpcklbw(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void punpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void punpcklbw(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void punpcklbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void punpckldq(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void punpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void punpckldq(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void punpckldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void punpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void punpcklqdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void punpcklwd(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void punpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void punpcklwd(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void punpcklwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void push(AssemblerRegister16 dst);
    public void push(AssemblerRegister32 dst);
    public void push(AssemblerRegister64 dst);
    public void push(AssemblerRegisterSegment dst);
    public void push(AssemblerMemoryOperand dst);
    public void push(int imm);
    public void push(UInt32 imm);
    public void pusha();
    public void pushad();
    public void pushf();
    public void pushfd();
    public void pushfq();
    public void pvalidate();
    public void pxor(AssemblerRegisterMM dst, AssemblerRegisterMM src);
    public void pxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void pxor(AssemblerRegisterMM dst, AssemblerMemoryOperand src);
    public void pxor(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void rcl(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void rcl(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void rcl(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void rcl(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void rcl(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void rcl(AssemblerRegister8 dst, sbyte imm);
    public void rcl(AssemblerRegister16 dst, sbyte imm);
    public void rcl(AssemblerRegister32 dst, sbyte imm);
    public void rcl(AssemblerRegister64 dst, sbyte imm);
    public void rcl(AssemblerMemoryOperand dst, sbyte imm);
    public void rcl(AssemblerRegister8 dst, byte imm);
    public void rcl(AssemblerRegister16 dst, byte imm);
    public void rcl(AssemblerRegister32 dst, byte imm);
    public void rcl(AssemblerRegister64 dst, byte imm);
    public void rcl(AssemblerMemoryOperand dst, byte imm);
    public void rcpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void rcpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void rcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void rcpss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void rcr(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void rcr(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void rcr(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void rcr(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void rcr(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void rcr(AssemblerRegister8 dst, sbyte imm);
    public void rcr(AssemblerRegister16 dst, sbyte imm);
    public void rcr(AssemblerRegister32 dst, sbyte imm);
    public void rcr(AssemblerRegister64 dst, sbyte imm);
    public void rcr(AssemblerMemoryOperand dst, sbyte imm);
    public void rcr(AssemblerRegister8 dst, byte imm);
    public void rcr(AssemblerRegister16 dst, byte imm);
    public void rcr(AssemblerRegister32 dst, byte imm);
    public void rcr(AssemblerRegister64 dst, byte imm);
    public void rcr(AssemblerMemoryOperand dst, byte imm);
    public void rdfsbase(AssemblerRegister32 dst);
    public void rdfsbase(AssemblerRegister64 dst);
    public void rdgsbase(AssemblerRegister32 dst);
    public void rdgsbase(AssemblerRegister64 dst);
    public void rdm();
    public void rdmsr();
    public void rdmsrlist();
    public void rdpid(AssemblerRegister32 dst);
    public void rdpid(AssemblerRegister64 dst);
    public void rdpkru();
    public void rdpmc();
    public void rdpru();
    public void rdrand(AssemblerRegister16 dst);
    public void rdrand(AssemblerRegister32 dst);
    public void rdrand(AssemblerRegister64 dst);
    public void rdseed(AssemblerRegister16 dst);
    public void rdseed(AssemblerRegister32 dst);
    public void rdseed(AssemblerRegister64 dst);
    public void rdshr(AssemblerRegister32 dst);
    public void rdshr(AssemblerMemoryOperand dst);
    public void rdsspd(AssemblerRegister32 dst);
    public void rdsspq(AssemblerRegister64 dst);
    public void rdtsc();
    public void rdtscp();
    public void rdudbg();
    public void reservednop_0f0d(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f0d(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f0d(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f0d(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void reservednop_0f18(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f18(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f18(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f18(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void reservednop_0f19(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f19(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f19(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f19(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void reservednop_0f1a(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f1a(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f1a(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f1a(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void reservednop_0f1b(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f1b(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f1b(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f1b(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void reservednop_0f1c(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f1c(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f1c(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f1c(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void reservednop_0f1d(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f1d(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f1d(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f1d(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void reservednop_0f1e(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f1e(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f1e(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f1e(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void reservednop_0f1f(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void reservednop_0f1f(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void reservednop_0f1f(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void reservednop_0f1f(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void ret();
    public void ret(short imm);
    public void ret(ushort imm);
    public void retf();
    public void retf(short imm);
    public void retf(ushort imm);
    public void rmpadjust();
    public void rmpquery();
    public void rmpupdate();
    public void rol(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void rol(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void rol(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void rol(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void rol(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void rol(AssemblerRegister8 dst, sbyte imm);
    public void rol(AssemblerRegister16 dst, sbyte imm);
    public void rol(AssemblerRegister32 dst, sbyte imm);
    public void rol(AssemblerRegister64 dst, sbyte imm);
    public void rol(AssemblerMemoryOperand dst, sbyte imm);
    public void rol(AssemblerRegister8 dst, byte imm);
    public void rol(AssemblerRegister16 dst, byte imm);
    public void rol(AssemblerRegister32 dst, byte imm);
    public void rol(AssemblerRegister64 dst, byte imm);
    public void rol(AssemblerMemoryOperand dst, byte imm);
    public void ror(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void ror(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void ror(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void ror(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void ror(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void ror(AssemblerRegister8 dst, sbyte imm);
    public void ror(AssemblerRegister16 dst, sbyte imm);
    public void ror(AssemblerRegister32 dst, sbyte imm);
    public void ror(AssemblerRegister64 dst, sbyte imm);
    public void ror(AssemblerMemoryOperand dst, sbyte imm);
    public void ror(AssemblerRegister8 dst, byte imm);
    public void ror(AssemblerRegister16 dst, byte imm);
    public void ror(AssemblerRegister32 dst, byte imm);
    public void ror(AssemblerRegister64 dst, byte imm);
    public void ror(AssemblerMemoryOperand dst, byte imm);
    public void rorx(AssemblerRegister32 dst, AssemblerRegister32 src1, sbyte imm);
    public void rorx(AssemblerRegister64 dst, AssemblerRegister64 src1, sbyte imm);
    public void rorx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, sbyte imm);
    public void rorx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, sbyte imm);
    public void rorx(AssemblerRegister32 dst, AssemblerRegister32 src1, byte imm);
    public void rorx(AssemblerRegister64 dst, AssemblerRegister64 src1, byte imm);
    public void rorx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, byte imm);
    public void rorx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, byte imm);
    public void roundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void roundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void roundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void roundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void roundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void roundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void roundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void roundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void roundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void roundsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void roundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void roundsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void roundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void roundss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void roundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void roundss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void rsdc(AssemblerRegisterSegment dst, AssemblerMemoryOperand src);
    public void rsldt(AssemblerMemoryOperand dst);
    public void rsm();
    public void rsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void rsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void rsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void rsqrtss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void rstorssp(AssemblerMemoryOperand dst);
    public void rsts(AssemblerMemoryOperand dst);
    public void sahf();
    public void sal(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void sal(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void sal(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void sal(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void sal(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void sal(AssemblerRegister8 dst, sbyte imm);
    public void sal(AssemblerRegister16 dst, sbyte imm);
    public void sal(AssemblerRegister32 dst, sbyte imm);
    public void sal(AssemblerRegister64 dst, sbyte imm);
    public void sal(AssemblerMemoryOperand dst, sbyte imm);
    public void sal(AssemblerRegister8 dst, byte imm);
    public void sal(AssemblerRegister16 dst, byte imm);
    public void sal(AssemblerRegister32 dst, byte imm);
    public void sal(AssemblerRegister64 dst, byte imm);
    public void sal(AssemblerMemoryOperand dst, byte imm);
    public void salc();
    public void sar(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void sar(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void sar(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void sar(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void sar(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void sar(AssemblerRegister8 dst, sbyte imm);
    public void sar(AssemblerRegister16 dst, sbyte imm);
    public void sar(AssemblerRegister32 dst, sbyte imm);
    public void sar(AssemblerRegister64 dst, sbyte imm);
    public void sar(AssemblerMemoryOperand dst, sbyte imm);
    public void sar(AssemblerRegister8 dst, byte imm);
    public void sar(AssemblerRegister16 dst, byte imm);
    public void sar(AssemblerRegister32 dst, byte imm);
    public void sar(AssemblerRegister64 dst, byte imm);
    public void sar(AssemblerMemoryOperand dst, byte imm);
    public void sarx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void sarx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
    public void sarx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void sarx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
    public void saveprevssp();
    public void sbb(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void sbb(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void sbb(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void sbb(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void sbb(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void sbb(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void sbb(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void sbb(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void sbb(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void sbb(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void sbb(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void sbb(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void sbb(AssemblerRegister8 dst, sbyte imm);
    public void sbb(AssemblerRegister16 dst, short imm);
    public void sbb(AssemblerRegister32 dst, int imm);
    public void sbb(AssemblerRegister64 dst, int imm);
    public void sbb(AssemblerMemoryOperand dst, int imm);
    public void sbb(AssemblerRegister8 dst, byte imm);
    public void sbb(AssemblerRegister16 dst, ushort imm);
    public void sbb(AssemblerRegister32 dst, UInt32 imm);
    public void sbb(AssemblerMemoryOperand dst, UInt32 imm);
    public void scasb();
    public void scasd();
    public void scasq();
    public void scasw();
    public void seamcall();
    public void seamops();
    public void seamret();
    public void senduipi(AssemblerRegister64 dst);
    public void serialize();
    public void seta(AssemblerRegister8 dst);
    public void seta(AssemblerMemoryOperand dst);
    public void setae(AssemblerRegister8 dst);
    public void setae(AssemblerMemoryOperand dst);
    public void setb(AssemblerRegister8 dst);
    public void setb(AssemblerMemoryOperand dst);
    public void setbe(AssemblerRegister8 dst);
    public void setbe(AssemblerMemoryOperand dst);
    public void setc(AssemblerRegister8 dst);
    public void setc(AssemblerMemoryOperand dst);
    public void sete(AssemblerRegister8 dst);
    public void sete(AssemblerMemoryOperand dst);
    public void setg(AssemblerRegister8 dst);
    public void setg(AssemblerMemoryOperand dst);
    public void setge(AssemblerRegister8 dst);
    public void setge(AssemblerMemoryOperand dst);
    public void setl(AssemblerRegister8 dst);
    public void setl(AssemblerMemoryOperand dst);
    public void setle(AssemblerRegister8 dst);
    public void setle(AssemblerMemoryOperand dst);
    public void setna(AssemblerRegister8 dst);
    public void setna(AssemblerMemoryOperand dst);
    public void setnae(AssemblerRegister8 dst);
    public void setnae(AssemblerMemoryOperand dst);
    public void setnb(AssemblerRegister8 dst);
    public void setnb(AssemblerMemoryOperand dst);
    public void setnbe(AssemblerRegister8 dst);
    public void setnbe(AssemblerMemoryOperand dst);
    public void setnc(AssemblerRegister8 dst);
    public void setnc(AssemblerMemoryOperand dst);
    public void setne(AssemblerRegister8 dst);
    public void setne(AssemblerMemoryOperand dst);
    public void setng(AssemblerRegister8 dst);
    public void setng(AssemblerMemoryOperand dst);
    public void setnge(AssemblerRegister8 dst);
    public void setnge(AssemblerMemoryOperand dst);
    public void setnl(AssemblerRegister8 dst);
    public void setnl(AssemblerMemoryOperand dst);
    public void setnle(AssemblerRegister8 dst);
    public void setnle(AssemblerMemoryOperand dst);
    public void setno(AssemblerRegister8 dst);
    public void setno(AssemblerMemoryOperand dst);
    public void setnp(AssemblerRegister8 dst);
    public void setnp(AssemblerMemoryOperand dst);
    public void setns(AssemblerRegister8 dst);
    public void setns(AssemblerMemoryOperand dst);
    public void setnz(AssemblerRegister8 dst);
    public void setnz(AssemblerMemoryOperand dst);
    public void seto(AssemblerRegister8 dst);
    public void seto(AssemblerMemoryOperand dst);
    public void setp(AssemblerRegister8 dst);
    public void setp(AssemblerMemoryOperand dst);
    public void setpe(AssemblerRegister8 dst);
    public void setpe(AssemblerMemoryOperand dst);
    public void setpo(AssemblerRegister8 dst);
    public void setpo(AssemblerMemoryOperand dst);
    public void sets(AssemblerRegister8 dst);
    public void sets(AssemblerMemoryOperand dst);
    public void setssbsy();
    public void setz(AssemblerRegister8 dst);
    public void setz(AssemblerMemoryOperand dst);
    public void sfence();
    public void sgdt(AssemblerMemoryOperand dst);
    public void sha1msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sha1msg1(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void sha1msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sha1msg2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void sha1nexte(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sha1nexte(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void sha1rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void sha1rnds4(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void sha1rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void sha1rnds4(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void sha256msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sha256msg1(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void sha256msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sha256msg2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void sha256rnds2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sha256rnds2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void shl(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void shl(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void shl(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void shl(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void shl(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void shl(AssemblerRegister8 dst, sbyte imm);
    public void shl(AssemblerRegister16 dst, sbyte imm);
    public void shl(AssemblerRegister32 dst, sbyte imm);
    public void shl(AssemblerRegister64 dst, sbyte imm);
    public void shl(AssemblerMemoryOperand dst, sbyte imm);
    public void shl(AssemblerRegister8 dst, byte imm);
    public void shl(AssemblerRegister16 dst, byte imm);
    public void shl(AssemblerRegister32 dst, byte imm);
    public void shl(AssemblerRegister64 dst, byte imm);
    public void shl(AssemblerMemoryOperand dst, byte imm);
    public void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, AssemblerRegister8 src2);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, AssemblerRegister8 src2);
    public void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister8 src2);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister8 src2);
    public void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister8 src2);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister8 src2);
    public void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, sbyte imm);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, sbyte imm);
    public void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, sbyte imm);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, sbyte imm);
    public void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, sbyte imm);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, sbyte imm);
    public void shld(AssemblerRegister16 dst, AssemblerRegister16 src1, byte imm);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister16 src1, byte imm);
    public void shld(AssemblerRegister32 dst, AssemblerRegister32 src1, byte imm);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister32 src1, byte imm);
    public void shld(AssemblerRegister64 dst, AssemblerRegister64 src1, byte imm);
    public void shld(AssemblerMemoryOperand dst, AssemblerRegister64 src1, byte imm);
    public void shlx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void shlx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
    public void shlx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void shlx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
    public void shr(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void shr(AssemblerRegister16 dst, AssemblerRegister8 src);
    public void shr(AssemblerRegister32 dst, AssemblerRegister8 src);
    public void shr(AssemblerRegister64 dst, AssemblerRegister8 src);
    public void shr(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void shr(AssemblerRegister8 dst, sbyte imm);
    public void shr(AssemblerRegister16 dst, sbyte imm);
    public void shr(AssemblerRegister32 dst, sbyte imm);
    public void shr(AssemblerRegister64 dst, sbyte imm);
    public void shr(AssemblerMemoryOperand dst, sbyte imm);
    public void shr(AssemblerRegister8 dst, byte imm);
    public void shr(AssemblerRegister16 dst, byte imm);
    public void shr(AssemblerRegister32 dst, byte imm);
    public void shr(AssemblerRegister64 dst, byte imm);
    public void shr(AssemblerMemoryOperand dst, byte imm);
    public void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, AssemblerRegister8 src2);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, AssemblerRegister8 src2);
    public void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister8 src2);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, AssemblerRegister8 src2);
    public void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister8 src2);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, AssemblerRegister8 src2);
    public void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, sbyte imm);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, sbyte imm);
    public void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, sbyte imm);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, sbyte imm);
    public void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, sbyte imm);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, sbyte imm);
    public void shrd(AssemblerRegister16 dst, AssemblerRegister16 src1, byte imm);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister16 src1, byte imm);
    public void shrd(AssemblerRegister32 dst, AssemblerRegister32 src1, byte imm);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister32 src1, byte imm);
    public void shrd(AssemblerRegister64 dst, AssemblerRegister64 src1, byte imm);
    public void shrd(AssemblerMemoryOperand dst, AssemblerRegister64 src1, byte imm);
    public void shrx(AssemblerRegister32 dst, AssemblerRegister32 src1, AssemblerRegister32 src2);
    public void shrx(AssemblerRegister32 dst, AssemblerMemoryOperand src1, AssemblerRegister32 src2);
    public void shrx(AssemblerRegister64 dst, AssemblerRegister64 src1, AssemblerRegister64 src2);
    public void shrx(AssemblerRegister64 dst, AssemblerMemoryOperand src1, AssemblerRegister64 src2);
    public void shufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void shufpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void shufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void shufpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void shufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void shufps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void shufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void shufps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void sidt(AssemblerMemoryOperand dst);
    public void skinit();
    public void sldt(AssemblerRegister16 dst);
    public void sldt(AssemblerRegister32 dst);
    public void sldt(AssemblerRegister64 dst);
    public void sldt(AssemblerMemoryOperand dst);
    public void slwpcb(AssemblerRegister32 dst);
    public void slwpcb(AssemblerRegister64 dst);
    public void smint();
    public void smint_0f7e();
    public void smsw(AssemblerRegister16 dst);
    public void smsw(AssemblerRegister32 dst);
    public void smsw(AssemblerRegister64 dst);
    public void smsw(AssemblerMemoryOperand dst);
    public void sqrtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sqrtpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void sqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void sqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sqrtsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void sqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void sqrtss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void stac();
    public void stc();
    public void std();
    public void stgi();
    public void sti();
    public void stmxcsr(AssemblerMemoryOperand dst);
    public void stosb();
    public void stosd();
    public void stosq();
    public void stosw();
    public void str(AssemblerRegister16 dst);
    public void str(AssemblerRegister32 dst);
    public void str(AssemblerRegister64 dst);
    public void str(AssemblerMemoryOperand dst);
    public void sttilecfg(AssemblerMemoryOperand dst);
    public void stui();
    public void sub(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void sub(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void sub(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void sub(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void sub(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void sub(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void sub(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void sub(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void sub(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void sub(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void sub(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void sub(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void sub(AssemblerRegister8 dst, sbyte imm);
    public void sub(AssemblerRegister16 dst, short imm);
    public void sub(AssemblerRegister32 dst, int imm);
    public void sub(AssemblerRegister64 dst, int imm);
    public void sub(AssemblerMemoryOperand dst, int imm);
    public void sub(AssemblerRegister8 dst, byte imm);
    public void sub(AssemblerRegister16 dst, ushort imm);
    public void sub(AssemblerRegister32 dst, UInt32 imm);
    public void sub(AssemblerMemoryOperand dst, UInt32 imm);
    public void subpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void subpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void subps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void subps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void subsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void subsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void subss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void subss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void svdc(AssemblerMemoryOperand dst, AssemblerRegisterSegment src);
    public void svldt(AssemblerMemoryOperand dst);
    public void svts(AssemblerMemoryOperand dst);
    public void swapgs();
    public void syscall();
    public void sysenter();
    public void sysexit();
    public void sysexitq();
    public void sysret();
    public void sysretq();
    public void t1mskc(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void t1mskc(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void t1mskc(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void t1mskc(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void tcmmimfp16ps(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
    public void tcmmrlfp16ps(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
    public void tdcall();
    public void tdpbf16ps(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
    public void tdpbssd(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
    public void tdpbsud(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
    public void tdpbusd(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
    public void tdpbuud(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
    public void tdpfp16ps(AssemblerRegisterTMM dst, AssemblerRegisterTMM src1, AssemblerRegisterTMM src2);
    public void test(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void test(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void test(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void test(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void test(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void test(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void test(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void test(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void test(AssemblerRegister8 dst, sbyte imm);
    public void test(AssemblerRegister16 dst, short imm);
    public void test(AssemblerRegister32 dst, int imm);
    public void test(AssemblerRegister64 dst, int imm);
    public void test(AssemblerMemoryOperand dst, int imm);
    public void test(AssemblerRegister8 dst, byte imm);
    public void test(AssemblerRegister16 dst, ushort imm);
    public void test(AssemblerRegister32 dst, UInt32 imm);
    public void test(AssemblerMemoryOperand dst, UInt32 imm);
    public void testui();
    public void tileloadd(AssemblerRegisterTMM dst, AssemblerMemoryOperand src);
    public void tileloaddt1(AssemblerRegisterTMM dst, AssemblerMemoryOperand src);
    public void tilerelease();
    public void tilestored(AssemblerMemoryOperand dst, AssemblerRegisterTMM src);
    public void tilezero(AssemblerRegisterTMM dst);
    public void tlbsync();
    public void tpause(AssemblerRegister32 dst);
    public void tpause(AssemblerRegister64 dst);
    public void tzcnt(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void tzcnt(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void tzcnt(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void tzcnt(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void tzcnt(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void tzcnt(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void tzmsk(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void tzmsk(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void tzmsk(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void tzmsk(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void ucomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void ucomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void ucomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void ucomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void ud0();
    public void ud0(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void ud0(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void ud0(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void ud0(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void ud0(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void ud0(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void ud1(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void ud1(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void ud1(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void ud1(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void ud1(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void ud1(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void ud2();
    public void uiret();
    public void umonitor(AssemblerRegister16 dst);
    public void umonitor(AssemblerRegister32 dst);
    public void umonitor(AssemblerRegister64 dst);
    public void umov(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void umov(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void umov(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void umov(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void umov(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void umov(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void umov(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void umov(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void umov(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void umwait(AssemblerRegister32 dst);
    public void umwait(AssemblerRegister64 dst);
    public void unpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void unpckhpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void unpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void unpckhps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void unpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void unpcklpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void unpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void unpcklps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void v4fmaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void v4fmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void v4fnmaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void v4fnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaddpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaddpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vaddph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaddph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaddph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vaddph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaddph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaddps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaddsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaesdec(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaesdec(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vaesdec(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaesdec(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaesdec(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vaesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaesdeclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaesdeclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vaesdeclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaesdeclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaesdeclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vaesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaesenc(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaesenc(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vaesenc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaesenc(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaesenc(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vaesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vaesenclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vaesenclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vaesenclast(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vaesenclast(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vaesenclast(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vaesimc(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vaesimc(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vaeskeygenassist(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void valignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void valignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void valignd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void valignq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void valignq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void valignq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vandnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vandnpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vandnpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vandnpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vandnpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vandnpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vandnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vandnps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vandnps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vandnps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vandnps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vandnps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vbcstnebf162ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vbcstnebf162ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbcstnesh2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vbcstnesh2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vblendmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vblendmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vblendmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vblendmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vblendmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vblendmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vblendmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vblendmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vblendmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vblendmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vblendmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vblendmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vblendpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vblendpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vblendps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vblendps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vblendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vblendvpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vblendvpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vblendvpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vblendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vblendvps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vblendvps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vblendvps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vbroadcastf128(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcastf32x2(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vbroadcastf32x2(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vbroadcastf32x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcastf32x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcastf32x4(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcastf32x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcastf32x8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcastf64x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcastf64x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcastf64x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti128(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti32x2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vbroadcasti32x2(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vbroadcasti32x2(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vbroadcasti32x2(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti32x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti32x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti32x4(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti32x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti32x8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti64x2(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti64x2(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcasti64x4(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcastsd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vbroadcastsd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vbroadcastsd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcastsd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vbroadcastss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vbroadcastss(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vbroadcastss(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vbroadcastss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vbroadcastss(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vbroadcastss(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpeqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpeqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalse_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalse_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalse_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalse_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalsepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalsepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalseph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalseps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalseps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalseps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalseps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalseps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalsesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalsesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalsesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalsess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpfalsess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpfalsess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpge_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpge_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpge_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpge_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpgtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpgtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmple_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmple_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmple_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmple_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmplepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmplepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmplepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmplesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmplt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmplt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmplt_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmplt_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_oqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_oqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ospd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ospd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ospd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_ossd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ossd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_ossh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_osss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_osss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneq_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneq_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpneqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpneqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnge_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnge_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnge_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnge_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngeph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngeps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpngtss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpngtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnle_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnle_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnle_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnle_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnlepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnleph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnleps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnless(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnlt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnlt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnlt_uqss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnlt_uqss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpnltss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpnltss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmppd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmpsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmpsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vcmpss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptrue_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_uspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_uspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_uspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptrue_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_ussd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_ussd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_ussh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrue_usss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrue_usss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptruepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptruepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptruepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptruepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptruepd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptrueph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrueps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptrueps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrueps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptrueps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmptrueps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmptruesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptruesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptruesd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptruesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptruesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptruesh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptruess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptruess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmptruess(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmptruess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_spd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_spd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_spd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_ssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_ssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_ssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunord_sss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunord_sss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordsd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordsh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcmpunordss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcmpunordss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcomish(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcomish(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcompresspd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vcompresspd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vcompresspd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcompresspd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vcompressps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vcompressps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vcompressps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcompressps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vcvtdq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtdq2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtdq2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtdq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtdq2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtdq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtdq2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtdq2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtdq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtdq2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtne2ps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcvtne2ps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vcvtne2ps2bf16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vcvtne2ps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtne2ps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vcvtne2ps2bf16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vcvtneebf162ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtneebf162ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtneeph2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtneeph2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtneobf162ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtneobf162ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtneoph2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtneoph2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtneps2bf16(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtneps2bf16(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtneps2bf16(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtneps2bf16x(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtneps2bf16y(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtpd2dq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2dqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2dqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vcvtpd2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtpd2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtpd2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtpd2qq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtpd2qq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtpd2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtpd2udq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtpd2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2udqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2udqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtpd2uqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtpd2uqq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtpd2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtpd2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2dq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtph2dq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtph2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtph2pd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vcvtph2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2ps(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtph2ps(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtph2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2psx(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2psx(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtph2psx(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtph2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2psx(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2psx(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtph2qq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vcvtph2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2udq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtph2udq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtph2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtph2uqq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vcvtph2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2uw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2uw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtph2uw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtph2uw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2uw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2uw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtph2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtph2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtph2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtph2w(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtph2w(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtph2w(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtps2dq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtps2dq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtps2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtps2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtps2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtps2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtps2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtps2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtps2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtps2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vcvtps2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void vcvtps2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm);
    public void vcvtps2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vcvtps2ph(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vcvtps2phx(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtps2phx(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtps2phx(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtps2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtps2phx(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtps2phxx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtps2phxy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtps2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtps2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtps2qq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtps2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtps2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtps2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtps2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtps2udq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtps2udq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtps2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtps2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtps2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtps2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtps2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtps2uqq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtps2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtps2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtps2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtqq2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtqq2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtqq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vcvtqq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtqq2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtqq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtqq2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtsd2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcvtsd2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvtsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvtsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvtsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcvtsd2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtsd2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvtsd2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvtsd2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvtsd2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvtsh2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcvtsh2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtsh2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvtsh2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvtsh2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvtsh2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvtsh2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcvtsh2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtsh2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvtsh2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvtsh2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvtsh2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
    public void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
    public void vcvtsi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
    public void vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
    public void vcvtsi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
    public void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
    public void vcvtsi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcvtss2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtss2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vcvtss2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvtss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvtss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvtss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvtss2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvtss2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvtss2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvtss2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvttpd2dq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvttpd2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2dqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2dqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttpd2qq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvttpd2qq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvttpd2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvttpd2udq(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvttpd2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2udqx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2udqy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttpd2uqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvttpd2uqq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvttpd2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttpd2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttph2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttph2dq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvttph2dq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvttph2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttph2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttph2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttph2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttph2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvttph2qq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vcvttph2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttph2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttph2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttph2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttph2udq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvttph2udq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvttph2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttph2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttph2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttph2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttph2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvttph2uqq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vcvttph2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttph2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttph2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttph2uw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttph2uw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvttph2uw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvttph2uw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttph2uw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttph2uw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttph2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttph2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvttph2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvttph2w(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttph2w(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttph2w(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttps2dq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttps2dq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvttps2dq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvttps2dq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttps2dq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttps2dq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttps2qq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttps2qq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvttps2qq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvttps2qq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttps2qq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttps2qq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttps2udq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttps2udq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvttps2udq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvttps2udq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttps2udq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttps2udq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttps2uqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvttps2uqq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvttps2uqq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvttps2uqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvttps2uqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvttps2uqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvttsd2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvttsd2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvttsd2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvttsd2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvttsd2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvttsd2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvttsd2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvttsd2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvttsh2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvttsh2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvttsh2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvttsh2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvttsh2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvttsh2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvttsh2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvttsh2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvttss2si(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvttss2si(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvttss2si(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvttss2si(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvttss2usi(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vcvttss2usi(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vcvttss2usi(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vcvttss2usi(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vcvtudq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtudq2pd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vcvtudq2pd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vcvtudq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtudq2ph(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtudq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtudq2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtudq2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtudq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtudq2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtuqq2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtuqq2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtuqq2pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vcvtuqq2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2phx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2phy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2phz(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vcvtuqq2ps(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vcvtuqq2ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2psx(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtuqq2psy(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
    public void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
    public void vcvtusi2sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
    public void vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
    public void vcvtusi2sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2);
    public void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2);
    public void vcvtusi2ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vcvtuw2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtuw2ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtuw2ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtuw2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtuw2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtuw2ph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vcvtw2ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vcvtw2ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vcvtw2ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vcvtw2ph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vcvtw2ph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vcvtw2ph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vdbpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vdbpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vdbpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vdivpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vdivpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vdivpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vdivpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vdivpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vdivpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vdivph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vdivph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vdivph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vdivph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vdivph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vdivph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vdivps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vdivps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vdivps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vdivps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vdivps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vdivps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vdivsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vdivsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vdivsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vdivsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vdivss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vdivss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vdpbf16ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vdpbf16ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vdpbf16ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vdpbf16ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vdpbf16ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vdpbf16ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vdppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vdpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vdpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void verr(AssemblerRegister16 dst);
    public void verr(AssemblerRegister32 dst);
    public void verr(AssemblerRegister64 dst);
    public void verr(AssemblerMemoryOperand dst);
    public void verw(AssemblerRegister16 dst);
    public void verw(AssemblerRegister32 dst);
    public void verw(AssemblerRegister64 dst);
    public void verw(AssemblerMemoryOperand dst);
    public void vexp2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vexp2pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vexp2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vexp2ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vexpandpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vexpandpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vexpandpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vexpandpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vexpandpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vexpandpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vexpandps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vexpandps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vexpandps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vexpandps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vexpandps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vexpandps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vextractf128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextractf128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextractf128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vextractf128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm);
    public void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm);
    public void vextractf32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vextractf32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vextractf32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextractf32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextractf32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vextractf32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm);
    public void vextractf64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vextractf64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vextractf64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextractf64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextractf64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vextractf64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vextracti128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextracti128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextracti128(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vextracti128(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm);
    public void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm);
    public void vextracti32x4(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vextracti32x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vextracti32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextracti32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextracti32x8(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vextracti32x8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, byte imm);
    public void vextracti64x2(AssemblerRegisterXMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vextracti64x2(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vextracti64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextracti64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vextracti64x4(AssemblerRegisterYMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vextracti64x4(AssemblerMemoryOperand dst, AssemblerRegisterZMM src1, byte imm);
    public void vextractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vextractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vextractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vextractps(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm);
    public void vextractps(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm);
    public void vextractps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void vfcmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfcmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfcmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfcmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfcmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfcmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfcmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfcmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfcmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfcmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfcmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfcmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfcmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfcmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfcmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfcmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vfixupimmpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vfixupimmpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vfixupimmpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vfixupimmps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vfixupimmps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vfixupimmps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vfixupimmsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vfixupimmss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vfmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmaddsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmaddsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmaddsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmaddsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfmaddsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmaddsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfmaddsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmaddsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmsubadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmsubadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmsubadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmsubadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfmsubaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmsubaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfmsubaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmsubaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfmulcph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfmulcph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfmulcph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfmulcsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmadd231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmadd231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfnmaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfnmaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfnmaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfnmaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfnmaddsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfnmaddss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfnmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub132pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub132ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub132ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub132sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub132sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub132ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub213pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub213ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub213ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub213sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub213sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub213ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub231pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub231ph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231ph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231ph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vfnmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vfnmsub231ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub231sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub231sh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vfnmsub231ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfnmsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfnmsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vfnmsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfnmsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfnmsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vfnmsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vfpclasspd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm);
    public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, byte imm);
    public void vfpclasspd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, byte imm);
    public void vfpclasspd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclasspdx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasspdx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclasspdy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasspdy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclasspdz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasspdz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vfpclassph(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm);
    public void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterYMM src1, byte imm);
    public void vfpclassph(AssemblerRegisterK dst, AssemblerRegisterZMM src1, byte imm);
    public void vfpclassph(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclassphx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclassphx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclassphy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclassphy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclassphz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclassphz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vfpclassps(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm);
    public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterYMM src1, byte imm);
    public void vfpclassps(AssemblerRegisterK dst, AssemblerRegisterZMM src1, byte imm);
    public void vfpclassps(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclasspsx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasspsx(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclasspsy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasspsy(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclasspsz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasspsz(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclasssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vfpclasssd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasssd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm);
    public void vfpclasssd(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclasssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vfpclasssh(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclasssh(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm);
    public void vfpclasssh(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfpclassss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vfpclassss(AssemblerRegisterK dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vfpclassss(AssemblerRegisterK dst, AssemblerRegisterXMM src1, byte imm);
    public void vfpclassss(AssemblerRegisterK dst, AssemblerMemoryOperand src1, byte imm);
    public void vfrczpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vfrczpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vfrczpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vfrczpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vfrczps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vfrczps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vfrczps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vfrczps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vfrczsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vfrczsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vfrczss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vfrczss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vgatherdpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vgatherdpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vgatherdpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vgatherdpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vgatherdpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
    public void vgatherdps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vgatherdps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vgatherdps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vgatherdps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vgatherdps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
    public void vgatherpf0dpd(AssemblerMemoryOperand dst);
    public void vgatherpf0dps(AssemblerMemoryOperand dst);
    public void vgatherpf0qpd(AssemblerMemoryOperand dst);
    public void vgatherpf0qps(AssemblerMemoryOperand dst);
    public void vgatherpf1dpd(AssemblerMemoryOperand dst);
    public void vgatherpf1dps(AssemblerMemoryOperand dst);
    public void vgatherpf1qpd(AssemblerMemoryOperand dst);
    public void vgatherpf1qps(AssemblerMemoryOperand dst);
    public void vgatherqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vgatherqpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vgatherqpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vgatherqpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vgatherqpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
    public void vgatherqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vgatherqps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vgatherqps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vgetexppd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vgetexppd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vgetexppd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vgetexppd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vgetexppd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vgetexppd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vgetexpph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vgetexpph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vgetexpph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vgetexpph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vgetexpph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vgetexpph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vgetexpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vgetexpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vgetexpps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vgetexpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vgetexpps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vgetexpps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vgetexpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vgetexpsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vgetexpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vgetexpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vgetexpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vgetexpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vgetmantpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vgetmantpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vgetmantpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vgetmantpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vgetmantpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vgetmantpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vgetmantpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vgetmantph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vgetmantph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vgetmantph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vgetmantph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vgetmantph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vgetmantph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vgetmantps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vgetmantps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vgetmantps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vgetmantps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vgetmantps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vgetmantps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vgetmantps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vgetmantsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vgetmantsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vgetmantss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgf2p8affineinvqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vgf2p8affineqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgf2p8affineqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgf2p8affineqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vgf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vgf2p8mulb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vgf2p8mulb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vgf2p8mulb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vgf2p8mulb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vgf2p8mulb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vhaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vhaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vhaddpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vhaddpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vhaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vhaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vhaddps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vhaddps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vhsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vhsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vhsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vhsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vhsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vhsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vhsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vhsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinsertf128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinsertf32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinsertf32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vinsertf32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinsertf64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinsertf64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vinsertf64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinserti128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinserti32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinserti32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vinserti32x8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinserti64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinserti64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vinserti64x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vinsertps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vlddqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vlddqu(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vldmxcsr(AssemblerMemoryOperand dst);
    public void vmaskmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmaskmovpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmaskmovpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vmaskmovpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmaskmovpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vmaskmovps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmaskmovps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vmaskmovps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmaskmovps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vmaxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmaxpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vmaxpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vmaxpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmaxpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vmaxpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vmaxph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmaxph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vmaxph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vmaxph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmaxph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vmaxph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vmaxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmaxps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vmaxps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vmaxps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmaxps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vmaxps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmaxsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmaxsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmaxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmaxss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmcall();
    public void vmclear(AssemblerMemoryOperand dst);
    public void vmfunc();
    public void vmgexit();
    public void vminpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vminpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vminpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vminpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vminpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vminpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vminph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vminph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vminph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vminph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vminph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vminph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vminps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vminps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vminps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vminps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vminps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vminps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vminsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vminsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vminss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vminss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmlaunch();
    public void vmload();
    public void vmmcall();
    public void vmovapd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovapd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovapd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovapd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovapd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovapd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovapd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovaps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovaps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovaps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovaps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovaps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovaps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovaps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovd(AssemblerRegisterXMM dst, AssemblerRegister32 src);
    public void vmovd(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vmovd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovddup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovddup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovddup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovddup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovddup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovddup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovdqa(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovdqa(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovdqa(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovdqa(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovdqa(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovdqa32(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovdqa32(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovdqa32(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovdqa32(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovdqa32(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovdqa32(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovdqa32(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovdqa64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovdqa64(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovdqa64(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovdqa64(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovdqa64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovdqa64(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovdqa64(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovdqu(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovdqu(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovdqu(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovdqu(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovdqu(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovdqu(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovdqu16(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovdqu16(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovdqu16(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovdqu16(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovdqu16(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovdqu16(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovdqu16(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovdqu32(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovdqu32(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovdqu32(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovdqu32(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovdqu32(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovdqu32(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovdqu32(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovdqu64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovdqu64(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovdqu64(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovdqu64(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovdqu64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovdqu64(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovdqu64(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovdqu8(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovdqu8(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovdqu8(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovdqu8(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovdqu8(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovdqu8(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovdqu8(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovhlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmovhpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmovhps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmovlhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmovlpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovlpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmovlps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovlps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmovmskpd(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vmovmskpd(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vmovmskpd(AssemblerRegister32 dst, AssemblerRegisterYMM src);
    public void vmovmskpd(AssemblerRegister64 dst, AssemblerRegisterYMM src);
    public void vmovmskps(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vmovmskps(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vmovmskps(AssemblerRegister32 dst, AssemblerRegisterYMM src);
    public void vmovmskps(AssemblerRegister64 dst, AssemblerRegisterYMM src);
    public void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovntdq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovntdqa(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovntdqa(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovntdqa(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovntpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovntps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovq(AssemblerRegisterXMM dst, AssemblerRegister64 src);
    public void vmovq(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vmovq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovsd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmovsh(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovsh(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmovshdup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovshdup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovshdup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovshdup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovshdup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovshdup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovsldup(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovsldup(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovsldup(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovsldup(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovsldup(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovsldup(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovss(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmovupd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovupd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovupd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovupd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovupd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovupd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovupd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovups(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovups(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vmovups(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vmovups(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vmovups(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmovups(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vmovups(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vmovw(AssemblerRegisterXMM dst, AssemblerRegister32 src);
    public void vmovw(AssemblerRegisterXMM dst, AssemblerRegister64 src);
    public void vmovw(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vmovw(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vmovw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vmovw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vmpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vmpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vmptrld(AssemblerMemoryOperand dst);
    public void vmptrst(AssemblerMemoryOperand dst);
    public void vmread(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void vmread(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void vmread(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void vmread(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void vmresume();
    public void vmrun();
    public void vmsave();
    public void vmulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmulpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vmulpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vmulpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmulpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vmulpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vmulph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmulph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vmulph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vmulph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmulph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vmulph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vmulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmulps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vmulps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vmulps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmulps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vmulps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vmulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmulsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmulsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmulsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vmulss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vmwrite(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void vmwrite(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void vmwrite(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void vmwrite(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void vmxoff();
    public void vmxon(AssemblerMemoryOperand dst);
    public void vorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vp2intersectd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vp2intersectq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vp4dpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vp4dpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpabsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpabsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpabsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpabsb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpabsb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpabsb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpabsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpabsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpabsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpabsd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpabsd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpabsd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpabsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpabsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpabsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpabsq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpabsq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpabsq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpabsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpabsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpabsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpabsw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpabsw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpabsw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpackssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpackssdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpackssdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpackssdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpackssdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpackssdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpacksswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpacksswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpacksswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpacksswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpacksswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpacksswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpackusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpackusdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpackusdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpackusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpackusdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpackusdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpackuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpackuswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpackuswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpackuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpackuswb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpackuswb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpaddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpaddb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpaddb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpaddb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpaddb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpaddb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpaddd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpaddd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpaddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpaddq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpaddq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpaddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpaddq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpaddq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpaddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpaddsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpaddsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpaddsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpaddsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpaddsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpaddsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpaddsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpaddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpaddusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpaddusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpaddusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpaddusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpaddusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpaddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpaddusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpaddusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpaddusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpaddusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpaddusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpaddw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpaddw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpalignr(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpalignr(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpalignr(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpand(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpand(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpand(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpandn(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpandn(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpandn(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpandnd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpandnd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpandnd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpandnd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpandnd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpandnd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpandnq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpandnq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpandnq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpandnq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpandnq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpandnq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpavgb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpavgb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpavgb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpavgb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpavgb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpavgw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpavgw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpavgw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpavgw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpavgw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpblendd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpblendd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpblendmb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpblendmb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpblendmb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpblendmb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpblendmb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpblendmb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpblendmd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpblendmd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpblendmd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpblendmd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpblendmd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpblendmd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpblendmq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpblendmq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpblendmq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpblendmq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpblendmq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpblendmq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpblendmw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpblendmw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpblendmw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpblendmw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpblendmw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpblendmw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpblendvb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpblendvb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vpblendvb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpblendw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpblendw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerRegister32 src);
    public void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerRegister32 src);
    public void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerRegister32 src);
    public void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerRegister32 src);
    public void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerRegister32 src);
    public void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerRegister32 src);
    public void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastmb2q(AssemblerRegisterXMM dst, AssemblerRegisterK src);
    public void vpbroadcastmb2q(AssemblerRegisterYMM dst, AssemblerRegisterK src);
    public void vpbroadcastmb2q(AssemblerRegisterZMM dst, AssemblerRegisterK src);
    public void vpbroadcastmw2d(AssemblerRegisterXMM dst, AssemblerRegisterK src);
    public void vpbroadcastmw2d(AssemblerRegisterYMM dst, AssemblerRegisterK src);
    public void vpbroadcastmw2d(AssemblerRegisterZMM dst, AssemblerRegisterK src);
    public void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerRegister64 src);
    public void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerRegister64 src);
    public void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerRegister64 src);
    public void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerRegister32 src);
    public void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerRegister32 src);
    public void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerRegister32 src);
    public void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpbroadcastw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpbroadcastw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpclmulhqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpclmulhqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpclmulhqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpclmulhqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpclmulhqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpclmulhqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpclmulhqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpclmulhqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpclmulhqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpclmulhqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpclmullqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpclmullqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpclmullqhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpclmullqhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpclmullqhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpclmullqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpclmullqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpclmullqlqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpclmullqlqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpclmullqlqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpclmulqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpclmulqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpclmulqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3);
    public void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3);
    public void vpcmov(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vpcmov(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpeqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpeqd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpeqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpeqw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpeqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpcmpestri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpcmpestri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpcmpestri64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpcmpestrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpcmpestrm64(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalsed(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalseuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpfalsew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpgtb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpgtd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpgtq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpgtw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpgtw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpcmpistri(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpcmpistri(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpcmpistrm(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmplew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnequw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpneqw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnled(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnleuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnlew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmpnltw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrued(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmptrueuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpcmptruew(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpub(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpud(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpuq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpuw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcmpw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcomb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcomd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcomeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomeqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomeqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomeqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomeqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomfalseb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomfalseb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomfalsed(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomfalsed(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomfalseq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomfalseq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomfalseub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomfalseub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomfalseud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomfalseud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomfalseuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomfalseuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomfalseuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomfalseuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomfalsew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomfalsew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgeb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgeb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomged(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomged(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgeq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgeq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgeub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgeub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgeud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgeud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgeuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgeuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgeuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgeuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgtb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgtd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgtq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgtub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgtub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgtud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgtud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgtuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgtuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgtuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgtuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomgtw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomleb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomleb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomled(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomled(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomleq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomleq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomleub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomleub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomleud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomleud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomleuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomleuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomleuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomleuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomlew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomlew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomltb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomltb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomltd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomltd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomltq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomltq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomltub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomltub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomltud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomltud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomltuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomltuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomltuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomltuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomltw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomltw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomneqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomneqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomneqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomneqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomneqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomneqq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomnequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomnequb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomnequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomnequd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomnequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomnequq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomnequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomnequw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomneqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomneqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcompressb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpcompressb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpcompressb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpcompressb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpcompressd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpcompressd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpcompressd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpcompressd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpcompressq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpcompressq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpcompressq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpcompressq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpcompressw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpcompressw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpcompressw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpcompressw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcomq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcomtrueb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomtrueb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomtrued(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomtrued(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomtrueq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomtrueq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomtrueub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomtrueub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomtrueud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomtrueud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomtrueuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomtrueuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomtrueuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomtrueuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomtruew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpcomtruew(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcomub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcomud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcomuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcomuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpcomw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpconflictd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpconflictd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpconflictd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpconflictd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpconflictd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpconflictd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpconflictq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpconflictq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpconflictq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpconflictq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpconflictq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpconflictq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpdpbssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpbssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpbssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpbssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpbssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpbssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpbssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpbssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpbsud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpbsud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpbsud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpbsud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpbsuds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpbsuds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpbsuds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpbsuds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpbusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpbusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpbusd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpdpbusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpbusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpbusd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpdpbusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpbusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpbusds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpdpbusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpbusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpbusds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpdpbuud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpbuud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpbuud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpbuud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpbuuds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpbuuds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpbuuds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpbuuds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpwssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpwssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpdpwssd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpwssd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpwssd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpdpwssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpwssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpdpwssds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpwssds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpwssds(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpdpwsud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpwsud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpwsud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpwsud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpwsuds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpwsuds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpwsuds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpwsuds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpwusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpwusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpwusd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpwusd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpwusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpwusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpwusds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpwusds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpwuud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpwuud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpwuud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpwuud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpdpwuuds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpdpwuuds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpdpwuuds(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpdpwuuds(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vperm2f128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vperm2i128(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpermb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermi2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermi2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermi2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermi2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermi2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermi2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermi2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermi2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermi2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermi2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermi2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermi2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermi2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermi2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermi2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermi2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermi2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermi2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermi2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermi2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermi2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermi2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermi2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermi2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermi2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermi2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermi2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermi2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermi2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermi2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermi2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermi2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermi2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermi2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermi2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermi2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, sbyte imm);
    public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, sbyte imm);
    public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, sbyte imm);
    public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, sbyte imm);
    public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, sbyte imm);
    public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, sbyte imm);
    public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, byte imm);
    public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, byte imm);
    public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, byte imm);
    public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, byte imm);
    public void vpermil2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, byte imm);
    public void vpermil2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, byte imm);
    public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, sbyte imm);
    public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, sbyte imm);
    public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, sbyte imm);
    public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, sbyte imm);
    public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, sbyte imm);
    public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, sbyte imm);
    public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3, byte imm);
    public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3, byte imm);
    public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerRegisterYMM src3, byte imm);
    public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, AssemblerRegisterYMM src3, byte imm);
    public void vpermil2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3, byte imm);
    public void vpermil2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, AssemblerMemoryOperand src3, byte imm);
    public void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpermilpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermilpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermilpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermilpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpermilpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpermilpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpermilpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermilpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermilpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpermilps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermilps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermilps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermilps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpermilps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpermilps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpermilps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermilps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermilps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpermpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpermpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpermpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpermq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpermq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpermq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpermq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpermt2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermt2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermt2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermt2b(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermt2b(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermt2b(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermt2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermt2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermt2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermt2d(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermt2d(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermt2d(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermt2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermt2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermt2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermt2pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermt2pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermt2pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermt2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermt2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermt2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermt2ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermt2ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermt2ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermt2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermt2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermt2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermt2q(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermt2q(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermt2q(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermt2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermt2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermt2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermt2w(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermt2w(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermt2w(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpermw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpermw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpermw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpermw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpermw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpermw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpexpandb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpexpandb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpexpandb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpexpandb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpexpandb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpexpandb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpexpandd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpexpandd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpexpandd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpexpandd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpexpandd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpexpandd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpexpandq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpexpandq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpexpandq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpexpandq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpexpandq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpexpandq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpexpandw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpexpandw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpexpandw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpexpandw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpexpandw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpexpandw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrb(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrb(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrd(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrq(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpextrw(AssemblerRegister32 dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrw(AssemblerRegister64 dst, AssemblerRegisterXMM src1, byte imm);
    public void vpextrw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, byte imm);
    public void vpgatherdd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpgatherdd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpgatherdd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpgatherdd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpgatherdd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
    public void vpgatherdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpgatherdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpgatherdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpgatherdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpgatherdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
    public void vpgatherqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpgatherqd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpgatherqd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpgatherqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpgatherqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpgatherqq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpgatherqq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpgatherqq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, AssemblerRegisterYMM src2);
    public void vphaddbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vphaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vphaddd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vphaddd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vphadddq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphadddq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vphaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vphaddsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vphaddsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vphaddubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddubd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddubq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddubw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddudq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddudq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphadduwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphadduwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphadduwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphadduwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vphaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vphaddw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vphaddw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vphaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphaddwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphaddwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphminposuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphminposuw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphsubbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphsubbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vphsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vphsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vphsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vphsubdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphsubdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vphsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vphsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vphsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vphsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vphsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vphsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vphsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vphsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vphsubwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vphsubwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, sbyte imm);
    public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, sbyte imm);
    public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, byte imm);
    public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, byte imm);
    public void vpinsrb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, sbyte imm);
    public void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, byte imm);
    public void vpinsrd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, sbyte imm);
    public void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, byte imm);
    public void vpinsrq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, sbyte imm);
    public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, sbyte imm);
    public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister32 src2, byte imm);
    public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegister64 src2, byte imm);
    public void vpinsrw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vplzcntd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vplzcntd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vplzcntd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vplzcntd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vplzcntd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vplzcntd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vplzcntq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vplzcntq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vplzcntq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vplzcntq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vplzcntq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vplzcntq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmacsdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacsdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacsdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacsdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacsdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacsdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacssdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacssdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacssdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacssdqh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacssdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacssdql(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacssww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacssww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmacsww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmacsww(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmadcsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmadcsswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmadcswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpmadcswd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpmadd52huq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmadd52huq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmadd52huq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmadd52huq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmadd52huq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmadd52huq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmadd52luq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmadd52luq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmadd52luq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmadd52luq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmadd52luq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmadd52luq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaddubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaddubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaddubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaddubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaddubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaddwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaddwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaddwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaddwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaddwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaskmovd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaskmovd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaskmovd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaskmovd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaskmovq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaskmovq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaskmovq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaskmovq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaxsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaxsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaxsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaxsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaxsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaxsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaxsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaxsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaxsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaxsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaxsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaxsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaxub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaxub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaxub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaxub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaxud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaxud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaxud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaxud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaxuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaxuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaxuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaxuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaxuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmaxuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmaxuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmaxuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmaxuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmaxuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpminsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpminsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpminsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpminsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpminsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpminsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpminsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpminsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpminsd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpminsd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpminsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpminsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpminsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpminsq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpminsq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpminsq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpminsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpminsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpminsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpminsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpminsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpminub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpminub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpminub(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpminub(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpminub(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpminud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpminud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpminud(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpminud(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpminud(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpminuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpminuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpminuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpminuq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpminuq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpminuq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpminuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpminuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpminuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpminuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpminuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterXMM src);
    public void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterYMM src);
    public void vpmovb2m(AssemblerRegisterK dst, AssemblerRegisterZMM src);
    public void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterXMM src);
    public void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterYMM src);
    public void vpmovd2m(AssemblerRegisterK dst, AssemblerRegisterZMM src);
    public void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovm2b(AssemblerRegisterXMM dst, AssemblerRegisterK src);
    public void vpmovm2b(AssemblerRegisterYMM dst, AssemblerRegisterK src);
    public void vpmovm2b(AssemblerRegisterZMM dst, AssemblerRegisterK src);
    public void vpmovm2d(AssemblerRegisterXMM dst, AssemblerRegisterK src);
    public void vpmovm2d(AssemblerRegisterYMM dst, AssemblerRegisterK src);
    public void vpmovm2d(AssemblerRegisterZMM dst, AssemblerRegisterK src);
    public void vpmovm2q(AssemblerRegisterXMM dst, AssemblerRegisterK src);
    public void vpmovm2q(AssemblerRegisterYMM dst, AssemblerRegisterK src);
    public void vpmovm2q(AssemblerRegisterZMM dst, AssemblerRegisterK src);
    public void vpmovm2w(AssemblerRegisterXMM dst, AssemblerRegisterK src);
    public void vpmovm2w(AssemblerRegisterYMM dst, AssemblerRegisterK src);
    public void vpmovm2w(AssemblerRegisterZMM dst, AssemblerRegisterK src);
    public void vpmovmskb(AssemblerRegister32 dst, AssemblerRegisterXMM src);
    public void vpmovmskb(AssemblerRegister64 dst, AssemblerRegisterXMM src);
    public void vpmovmskb(AssemblerRegister32 dst, AssemblerRegisterYMM src);
    public void vpmovmskb(AssemblerRegister64 dst, AssemblerRegisterYMM src);
    public void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterXMM src);
    public void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterYMM src);
    public void vpmovq2m(AssemblerRegisterK dst, AssemblerRegisterZMM src);
    public void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovsdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovsdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovsdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovsdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovsdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovsdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovsqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovsqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovsqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovsqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovsqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovsqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovsqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovsqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovswb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovswb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovswb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovsxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsxbd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovsxbd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpmovsxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovsxbd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovsxbd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovsxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsxbq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovsxbq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpmovsxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovsxbq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovsxbq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovsxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsxbw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovsxbw(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vpmovsxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovsxbw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovsxbw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovsxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsxdq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovsxdq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vpmovsxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovsxdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovsxdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovsxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsxwd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovsxwd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vpmovsxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovsxwd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovsxwd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovsxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovsxwq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovsxwq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpmovsxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovsxwq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovsxwq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovusdb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovusdb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovusdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovusdw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovusdw(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovusdw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovusqb(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovusqb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovusqd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovusqd(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovusqd(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovusqd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovusqw(AssemblerRegisterXMM dst, AssemblerRegisterZMM src);
    public void vpmovusqw(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovuswb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovuswb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovuswb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovuswb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterXMM src);
    public void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterYMM src);
    public void vpmovw2m(AssemblerRegisterK dst, AssemblerRegisterZMM src);
    public void vpmovwb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpmovwb(AssemblerRegisterXMM dst, AssemblerRegisterYMM src);
    public void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpmovwb(AssemblerRegisterYMM dst, AssemblerRegisterZMM src);
    public void vpmovwb(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpmovzxbd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovzxbd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovzxbd(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpmovzxbd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovzxbd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovzxbd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovzxbq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovzxbq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovzxbq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpmovzxbq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovzxbq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovzxbq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovzxbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovzxbw(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovzxbw(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vpmovzxbw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovzxbw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovzxbw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovzxdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovzxdq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovzxdq(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vpmovzxdq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovzxdq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovzxdq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovzxwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovzxwd(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovzxwd(AssemblerRegisterZMM dst, AssemblerRegisterYMM src);
    public void vpmovzxwd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovzxwd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovzxwd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmovzxwq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpmovzxwq(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vpmovzxwq(AssemblerRegisterZMM dst, AssemblerRegisterXMM src);
    public void vpmovzxwq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpmovzxwq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpmovzxwq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmuldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmuldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmuldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmuldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmuldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmulhrsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmulhrsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmulhrsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmulhrsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmulhrsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmulhuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmulhuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmulhuw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmulhuw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmulhuw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmulhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmulhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmulhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmulhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmulhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmulld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmulld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmulld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmulld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmulld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmullq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmullq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmullq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmullq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmullq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmullq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmullw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmullw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmullw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmullw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmullw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmultishiftqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmultishiftqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmultishiftqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmultishiftqb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmultishiftqb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmultishiftqb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpmuludq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpmuludq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpmuludq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpmuludq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpmuludq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpopcntb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpopcntb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpopcntb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpopcntb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpopcntb(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpopcntb(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpopcntd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpopcntd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpopcntd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpopcntd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpopcntd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpopcntd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpopcntq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpopcntq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpopcntq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpopcntq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpopcntq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpopcntq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpopcntw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vpopcntw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vpopcntw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vpopcntw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vpopcntw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vpopcntw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vpor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vporq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vporq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vporq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vporq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vporq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vporq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerRegisterXMM src3);
    public void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, AssemblerRegisterXMM src3);
    public void vpperm(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, AssemblerMemoryOperand src3);
    public void vprold(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vprold(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vprold(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vprold(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprold(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprold(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprold(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vprold(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vprold(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vprold(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprold(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprold(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprolq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vprolq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vprolq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vprolq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprolq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprolq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprolq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vprolq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vprolq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vprolq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprolq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprolq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprolvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vprolvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vprolvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vprolvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vprolvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vprolvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vprolvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vprolvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vprolvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vprolvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vprolvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vprolvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vprord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vprord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vprord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vprord(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprord(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprord(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vprord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vprord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vprord(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprord(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprord(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vprorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vprorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vprorq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprorq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprorq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vprorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vprorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vprorq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprorq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprorq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprorvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vprorvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vprorvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vprorvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vprorvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vprorvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vprorvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vprorvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vprorvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vprorvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vprorvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vprorvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprotb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vprotb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprotd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vprotd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprotq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vprotq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vprotw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vprotw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsadbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsadbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsadbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpscatterdd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpscatterdq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpscatterqd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpscatterqd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vpscatterqq(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vpshab(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshab(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpshab(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpshad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshaq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshaq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpshaq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshaw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshaw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpshaw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshlb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshlb(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpshlb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpshld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpshldd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshldd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshldd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpshldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshldvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshldvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpshldvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpshldvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshldvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpshldvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpshldvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshldvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpshldvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpshldvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshldvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpshldvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpshldvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshldvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpshldvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpshldvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshldvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpshldvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpshldw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshldw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshldw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpshlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, AssemblerRegisterXMM src2);
    public void vpshlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpshrdd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshrdd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshrdd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpshrdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshrdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshrdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshrdvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshrdvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpshrdvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpshrdvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshrdvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpshrdvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpshrdvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshrdvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpshrdvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpshrdvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshrdvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpshrdvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpshrdvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshrdvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpshrdvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpshrdvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshrdvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpshrdvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpshrdw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshrdw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshrdw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshufb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpshufb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpshufb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshufb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpshufb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpshufbitqmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpshufd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpshufd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshufd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshufd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshufd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpshufd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpshufd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpshufd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpshufd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpshufd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpshufhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpshufhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshufhw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshufhw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshufhw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpshufhw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpshufhw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpshufhw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpshufhw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpshufhw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpshuflw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpshuflw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshuflw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshuflw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpshuflw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpshuflw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpshuflw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpshuflw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpshuflw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpshuflw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsignb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsignb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsignb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsignd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsignd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsignw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsignw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsignw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpslld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpslld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpslld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpslld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpslld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpslld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpslld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpslld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpslldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpslldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpslldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpslldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpslldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpslldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpslldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpslldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpslldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpslldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpslldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpslldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsllq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsllq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsllq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsllq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsllq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsllq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsllq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsllq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsllvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsllvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsllvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsllvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsllvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsllvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsllvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsllvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsllvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsllvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsllvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsllvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsllvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsllvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsllvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsllvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsllvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsllvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsllw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsllw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsllw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsllw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsllw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsllw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsllw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsllw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrad(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrad(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrad(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsrad(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsrad(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsrad(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrad(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrad(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsraq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsraq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsraq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsraq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsraq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsraq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsraq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsraq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsraq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsravd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsravd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsravd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsravd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsravd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsravd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsravq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsravq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsravq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsravq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsravq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsravq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsravw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsravw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsravw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsravw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsravw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsravw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsraw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsraw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsraw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsraw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsraw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsraw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsraw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsraw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrld(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsrld(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsrld(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsrld(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrld(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrld(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsrldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsrldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsrldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsrldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsrldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsrldq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrldq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrldq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrlq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrlq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrlq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsrlq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsrlq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsrlq(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrlq(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrlq(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrlvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsrlvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsrlvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsrlvd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsrlvd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsrlvd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsrlvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsrlvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsrlvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsrlvq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsrlvq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsrlvq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsrlvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsrlvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsrlvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsrlvw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsrlvw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsrlvw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterXMM src2);
    public void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vpsrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrlw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrlw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vpsrlw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vpsrlw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vpsrlw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vpsrlw(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrlw(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsrlw(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vpsubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsubb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsubb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsubb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsubb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsubb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsubd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsubd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsubd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsubd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsubq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsubq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsubq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsubq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsubq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsubsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsubsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsubsb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsubsb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsubsb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsubsw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsubsw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsubsw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsubusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsubusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsubusb(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsubusb(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsubusb(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsubusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsubusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsubusw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsubusw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsubusw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpsubw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpsubw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpsubw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpsubw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpternlogd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpternlogd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpternlogd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vpternlogq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpternlogq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vpternlogq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vptest(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vptest(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vptest(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vptest(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vptestmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vptestmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vptestmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vptestmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vptestnmb(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vptestnmd(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vptestnmq(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vptestnmw(AssemblerRegisterK dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpunpckhbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpunpckhbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpunpckhbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpunpckhdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpunpckhdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpunpckhdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpunpckhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpunpckhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpunpckhqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpunpckhwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpunpckhwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpunpckhwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpunpckhwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpunpcklbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpunpcklbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpunpcklbw(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklbw(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklbw(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpunpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpunpckldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpunpckldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpunpckldq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpunpckldq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpunpckldq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpunpcklqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpunpcklqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpunpcklqdq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklqdq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklqdq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpunpcklwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpunpcklwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpunpcklwd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklwd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpunpcklwd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpxor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpxor(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpxor(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpxord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpxord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpxord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpxord(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpxord(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpxord(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vpxorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vpxorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vpxorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vpxorq(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vpxorq(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vpxorq(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vrangepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrangepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrangepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vrangeps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrangeps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrangeps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vrangesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vrangess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrcp14pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vrcp14pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vrcp14pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrcp14pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vrcp14pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vrcp14pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrcp14ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vrcp14ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vrcp14ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrcp14ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vrcp14ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vrcp14ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrcp14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrcp14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrcp14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrcp14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrcp28pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrcp28pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrcp28ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrcp28ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrcp28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrcp28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrcp28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrcp28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrcpph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vrcpph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vrcpph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrcpph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vrcpph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vrcpph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrcpps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vrcpps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vrcpps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vrcpps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vrcpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrcpsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrcpss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vreducepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vreducepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vreducepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vreducepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreducepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreducepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreducepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vreducepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vreducepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vreducepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreducepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreducepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreduceph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vreduceph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vreduceph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vreduceph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreduceph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreduceph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreduceph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vreduceph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vreduceph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vreduceph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreduceph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreduceph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreduceps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vreduceps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vreduceps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vreduceps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreduceps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreduceps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vreduceps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vreduceps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vreduceps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vreduceps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreduceps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreduceps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vreducesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vreducesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vreducess(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrndscalepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vrndscalepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vrndscalepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vrndscalepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscalepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscalepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscalepd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vrndscalepd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vrndscalepd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vrndscalepd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscalepd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscalepd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscaleph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vrndscaleph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vrndscaleph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vrndscaleph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscaleph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscaleph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscaleph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vrndscaleph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vrndscaleph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vrndscaleph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscaleph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscaleph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscaleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vrndscaleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vrndscaleps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, sbyte imm);
    public void vrndscaleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscaleps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscaleps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vrndscaleps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vrndscaleps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vrndscaleps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, byte imm);
    public void vrndscaleps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscaleps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscaleps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vrndscalesd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vrndscalesh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vrndscaless(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vroundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vroundpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vroundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vroundpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vroundpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vroundpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vroundpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vroundpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vroundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, sbyte imm);
    public void vroundps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, sbyte imm);
    public void vroundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vroundps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, sbyte imm);
    public void vroundps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, byte imm);
    public void vroundps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, byte imm);
    public void vroundps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vroundps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src1, byte imm);
    public void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vroundsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vroundss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vrsqrt14pd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vrsqrt14pd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vrsqrt14pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrsqrt14pd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vrsqrt14pd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vrsqrt14pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrsqrt14ps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vrsqrt14ps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vrsqrt14ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrsqrt14ps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vrsqrt14ps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vrsqrt14ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrsqrt14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrsqrt14sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrsqrt14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrsqrt14ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrsqrt28pd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrsqrt28pd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrsqrt28ps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrsqrt28ps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrsqrt28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrsqrt28sd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrsqrt28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrsqrt28ss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrsqrtph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vrsqrtph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vrsqrtph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vrsqrtph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vrsqrtph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vrsqrtph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vrsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vrsqrtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vrsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vrsqrtps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vrsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vrsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vrsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vscalefpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vscalefpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vscalefpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vscalefpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vscalefpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vscalefpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vscalefph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vscalefph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vscalefph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vscalefph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vscalefph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vscalefph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vscalefps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vscalefps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vscalefps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vscalefps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vscalefps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vscalefps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vscalefsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vscalefsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vscalefsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vscalefsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vscalefss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vscalefss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vscatterdpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vscatterdps(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vscatterpf0dpd(AssemblerMemoryOperand dst);
    public void vscatterpf0dps(AssemblerMemoryOperand dst);
    public void vscatterpf0qpd(AssemblerMemoryOperand dst);
    public void vscatterpf0qps(AssemblerMemoryOperand dst);
    public void vscatterpf1dpd(AssemblerMemoryOperand dst);
    public void vscatterpf1dps(AssemblerMemoryOperand dst);
    public void vscatterpf1qpd(AssemblerMemoryOperand dst);
    public void vscatterpf1qps(AssemblerMemoryOperand dst);
    public void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vscatterqpd(AssemblerMemoryOperand dst, AssemblerRegisterZMM src);
    public void vscatterqps(AssemblerMemoryOperand dst, AssemblerRegisterXMM src);
    public void vscatterqps(AssemblerMemoryOperand dst, AssemblerRegisterYMM src);
    public void vsha512msg1(AssemblerRegisterYMM dst, AssemblerRegisterXMM src);
    public void vsha512msg2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vsha512rnds2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterXMM src2);
    public void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vshuff32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshuff32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vshuff64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshuff64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vshufi32x4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufi32x4(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vshufi64x2(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufi64x2(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vshufpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, sbyte imm);
    public void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, sbyte imm);
    public void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2, byte imm);
    public void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2, byte imm);
    public void vshufps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vshufps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vsm3msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsm3msg1(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsm3msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsm3msg2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsm3rnds2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, sbyte imm);
    public void vsm3rnds2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, sbyte imm);
    public void vsm3rnds2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2, byte imm);
    public void vsm3rnds2(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2, byte imm);
    public void vsm4key4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsm4key4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vsm4key4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsm4key4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vsm4rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsm4rnds4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vsm4rnds4(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsm4rnds4(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vsqrtpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vsqrtpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vsqrtpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vsqrtpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vsqrtpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vsqrtpd(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vsqrtph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vsqrtph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vsqrtph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vsqrtph(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vsqrtph(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vsqrtph(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vsqrtps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vsqrtps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vsqrtps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src);
    public void vsqrtps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vsqrtps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vsqrtps(AssemblerRegisterZMM dst, AssemblerMemoryOperand src);
    public void vsqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsqrtsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsqrtsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsqrtss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vstmxcsr(AssemblerMemoryOperand dst);
    public void vsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vsubpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vsubpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsubpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vsubpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vsubph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsubph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vsubph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vsubph(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsubph(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vsubph(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vsubps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vsubps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsubps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vsubps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsubsd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsubsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsubsh(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vsubss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vtestpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vtestpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vtestpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vtestpd(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vtestps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vtestps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src);
    public void vtestps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vtestps(AssemblerRegisterYMM dst, AssemblerMemoryOperand src);
    public void vucomisd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vucomisd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vucomish(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vucomish(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vucomiss(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void vucomiss(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void vunpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vunpckhpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vunpckhpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vunpckhpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vunpckhpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vunpckhpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vunpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vunpckhps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vunpckhps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vunpckhps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vunpckhps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vunpckhps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vunpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vunpcklpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vunpcklpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vunpcklpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vunpcklpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vunpcklpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vunpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vunpcklps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vunpcklps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vunpcklps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vunpcklps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vunpcklps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vxorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vxorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vxorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vxorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vxorpd(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vxorpd(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vxorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerRegisterXMM src2);
    public void vxorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerRegisterYMM src2);
    public void vxorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerRegisterZMM src2);
    public void vxorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src1, AssemblerMemoryOperand src2);
    public void vxorps(AssemblerRegisterYMM dst, AssemblerRegisterYMM src1, AssemblerMemoryOperand src2);
    public void vxorps(AssemblerRegisterZMM dst, AssemblerRegisterZMM src1, AssemblerMemoryOperand src2);
    public void vzeroall();
    public void vzeroupper();
    public void wait();
    public void wbinvd();
    public void wbnoinvd();
    public void wrfsbase(AssemblerRegister32 dst);
    public void wrfsbase(AssemblerRegister64 dst);
    public void wrgsbase(AssemblerRegister32 dst);
    public void wrgsbase(AssemblerRegister64 dst);
    public void wrmsr();
    public void wrmsrlist();
    public void wrmsrns();
    public void wrpkru();
    public void wrshr(AssemblerRegister32 dst);
    public void wrshr(AssemblerMemoryOperand dst);
    public void wrssd(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void wrssq(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void wrudbg();
    public void wrussd(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void wrussq(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void xabort(sbyte imm);
    public void xabort(byte imm);
    public void xadd(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void xadd(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void xadd(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void xadd(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void xadd(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void xadd(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void xadd(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void xadd(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void xbegin(Label dst);
    public void xbegin(ulong dst);
    public void xbts(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void xbts(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void xbts(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void xbts(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void xchg(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void xchg(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void xchg(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void xchg(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void xchg(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void xchg(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void xchg(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void xchg(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void xcryptcbc();
    public void xcryptcfb();
    public void xcryptctr();
    public void xcryptecb();
    public void xcryptofb();
    public void xend();
    public void xgetbv();
    public void xor(AssemblerRegister8 dst, AssemblerRegister8 src);
    public void xor(AssemblerMemoryOperand dst, AssemblerRegister8 src);
    public void xor(AssemblerRegister16 dst, AssemblerRegister16 src);
    public void xor(AssemblerMemoryOperand dst, AssemblerRegister16 src);
    public void xor(AssemblerRegister32 dst, AssemblerRegister32 src);
    public void xor(AssemblerMemoryOperand dst, AssemblerRegister32 src);
    public void xor(AssemblerRegister64 dst, AssemblerRegister64 src);
    public void xor(AssemblerMemoryOperand dst, AssemblerRegister64 src);
    public void xor(AssemblerRegister8 dst, AssemblerMemoryOperand src);
    public void xor(AssemblerRegister16 dst, AssemblerMemoryOperand src);
    public void xor(AssemblerRegister32 dst, AssemblerMemoryOperand src);
    public void xor(AssemblerRegister64 dst, AssemblerMemoryOperand src);
    public void xor(AssemblerRegister8 dst, sbyte imm);
    public void xor(AssemblerRegister16 dst, short imm);
    public void xor(AssemblerRegister32 dst, int imm);
    public void xor(AssemblerRegister64 dst, int imm);
    public void xor(AssemblerMemoryOperand dst, int imm);
    public void xor(AssemblerRegister8 dst, byte imm);
    public void xor(AssemblerRegister16 dst, ushort imm);
    public void xor(AssemblerRegister32 dst, UInt32 imm);
    public void xor(AssemblerMemoryOperand dst, UInt32 imm);
    public void xorpd(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void xorpd(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void xorps(AssemblerRegisterXMM dst, AssemblerRegisterXMM src);
    public void xorps(AssemblerRegisterXMM dst, AssemblerMemoryOperand src);
    public void xresldtrk();
    public void xrstor(AssemblerMemoryOperand dst);
    public void xrstor64(AssemblerMemoryOperand dst);
    public void xrstors(AssemblerMemoryOperand dst);
    public void xrstors64(AssemblerMemoryOperand dst);
    public void xsave(AssemblerMemoryOperand dst);
    public void xsave64(AssemblerMemoryOperand dst);
    public void xsavec(AssemblerMemoryOperand dst);
    public void xsavec64(AssemblerMemoryOperand dst);
    public void xsaveopt(AssemblerMemoryOperand dst);
    public void xsaveopt64(AssemblerMemoryOperand dst);
    public void xsaves(AssemblerMemoryOperand dst);
    public void xsaves64(AssemblerMemoryOperand dst);
    public void xsetbv();
    public void xsha1();
    public void xsha256();
    public void xsha512();
    public void xsha512_alt();
    public void xstore();
    public void xstore_alt();
    public void xsusldtrk();
    public void xtest();
    public void zero_bytes();
    public void db(byte imm0);
    public void db(byte imm0, byte imm1);
    public void db(byte imm0, byte imm1, byte imm2);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11, byte imm12);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11, byte imm12, byte imm13);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11, byte imm12, byte imm13, byte imm14);
    public void db(byte imm0, byte imm1, byte imm2, byte imm3, byte imm4, byte imm5, byte imm6, byte imm7, byte imm8, byte imm9, byte imm10, byte imm11, byte imm12, byte imm13, byte imm14, byte imm15);
    public void db(sbyte imm0);
    public void db(sbyte imm0, sbyte imm1);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11, sbyte imm12);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11, sbyte imm12, sbyte imm13);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11, sbyte imm12, sbyte imm13, sbyte imm14);
    public void db(sbyte imm0, sbyte imm1, sbyte imm2, sbyte imm3, sbyte imm4, sbyte imm5, sbyte imm6, sbyte imm7, sbyte imm8, sbyte imm9, sbyte imm10, sbyte imm11, sbyte imm12, sbyte imm13, sbyte imm14, sbyte imm15);
    public void dw(ushort imm0);
    public void dw(ushort imm0, ushort imm1);
    public void dw(ushort imm0, ushort imm1, ushort imm2);
    public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3);
    public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3, ushort imm4);
    public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3, ushort imm4, ushort imm5);
    public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3, ushort imm4, ushort imm5, ushort imm6);
    public void dw(ushort imm0, ushort imm1, ushort imm2, ushort imm3, ushort imm4, ushort imm5, ushort imm6, ushort imm7);
    public void dw(short imm0);
    public void dw(short imm0, short imm1);
    public void dw(short imm0, short imm1, short imm2);
    public void dw(short imm0, short imm1, short imm2, short imm3);
    public void dw(short imm0, short imm1, short imm2, short imm3, short imm4);
    public void dw(short imm0, short imm1, short imm2, short imm3, short imm4, short imm5);
    public void dw(short imm0, short imm1, short imm2, short imm3, short imm4, short imm5, short imm6);
    public void dw(short imm0, short imm1, short imm2, short imm3, short imm4, short imm5, short imm6, short imm7);
    public void dd(UInt32 imm0);
    public void dd(UInt32 imm0, UInt32 imm1);
    public void dd(UInt32 imm0, UInt32 imm1, UInt32 imm2);
    public void dd(UInt32 imm0, UInt32 imm1, UInt32 imm2, UInt32 imm3);
    public void dd(int imm0);
    public void dd(int imm0, int imm1);
    public void dd(int imm0, int imm1, int imm2);
    public void dd(int imm0, int imm1, int imm2, int imm3);
    public void dd(float imm0);
    public void dd(float imm0, float imm1);
    public void dd(float imm0, float imm1, float imm2);
    public void dd(float imm0, float imm1, float imm2, float imm3);
    public void dq(ulong imm0);
    public void dq(ulong imm0, ulong imm1);
    public void dq(long imm0);
    public void dq(long imm0, long imm1);
    public void dq(double imm0);
    public void dq(double imm0, double imm1);
    [CompilerGeneratedAttribute]
private void <nop>g__AppendNop|66_0(int amount);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Base} + {Index} * {Scale} + {Displacement}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerMemoryOperand : ValueType {
    internal MemoryOperandSize Size;
    public Register Segment;
    public Register Base;
    public Register Index;
    public int Scale;
    public long Displacement;
    internal AssemblerOperandFlags Flags;
    public bool IsBroadcast { get; }
    internal bool IsDisplacementOnly { get; }
    public AssemblerMemoryOperand k1 { get; }
    public AssemblerMemoryOperand k2 { get; }
    public AssemblerMemoryOperand k3 { get; }
    public AssemblerMemoryOperand k4 { get; }
    public AssemblerMemoryOperand k5 { get; }
    public AssemblerMemoryOperand k6 { get; }
    public AssemblerMemoryOperand k7 { get; }
    internal AssemblerMemoryOperand(MemoryOperandSize size, Register segment, Register base, Register index, int scale, long displacement, AssemblerOperandFlags flags);
    public bool get_IsBroadcast();
    internal bool get_IsDisplacementOnly();
    public AssemblerMemoryOperand get_k1();
    public AssemblerMemoryOperand get_k2();
    public AssemblerMemoryOperand get_k3();
    public AssemblerMemoryOperand get_k4();
    public AssemblerMemoryOperand get_k5();
    public AssemblerMemoryOperand get_k6();
    public AssemblerMemoryOperand get_k7();
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister16 left, AssemblerMemoryOperand right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister32 left, AssemblerMemoryOperand right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister64 left, AssemblerMemoryOperand right);
    public static AssemblerMemoryOperand op_Addition(AssemblerMemoryOperand left, long displacement);
    public static AssemblerMemoryOperand op_Subtraction(AssemblerMemoryOperand left, long displacement);
    public MemoryOperand ToMemoryOperand(int bitness);
    public sealed virtual bool Equals(AssemblerMemoryOperand other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(AssemblerMemoryOperand left, AssemblerMemoryOperand right);
    public static bool op_Inequality(AssemblerMemoryOperand left, AssemblerMemoryOperand right);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerMemoryOperandFactory : ValueType {
    internal MemoryOperandSize Size;
    internal Register Segment;
    internal AssemblerOperandFlags Flags;
    public AssemblerMemoryOperandFactory es { get; }
    public AssemblerMemoryOperandFactory cs { get; }
    public AssemblerMemoryOperandFactory ss { get; }
    public AssemblerMemoryOperandFactory ds { get; }
    public AssemblerMemoryOperandFactory fs { get; }
    public AssemblerMemoryOperandFactory gs { get; }
    public AssemblerMemoryOperand Item { get; }
    public AssemblerMemoryOperand Item { get; }
    public AssemblerMemoryOperand Item { get; }
    public AssemblerMemoryOperand Item { get; }
    public AssemblerMemoryOperand Item { get; }
    public AssemblerMemoryOperand Item { get; }
    public AssemblerMemoryOperand Item { get; }
    internal AssemblerMemoryOperandFactory(MemoryOperandSize size);
    internal AssemblerMemoryOperandFactory(MemoryOperandSize size, Register segment, AssemblerOperandFlags flags);
    public AssemblerMemoryOperandFactory get_es();
    public AssemblerMemoryOperandFactory get_cs();
    public AssemblerMemoryOperandFactory get_ss();
    public AssemblerMemoryOperandFactory get_ds();
    public AssemblerMemoryOperandFactory get_fs();
    public AssemblerMemoryOperandFactory get_gs();
    public AssemblerMemoryOperand get_Item(AssemblerMemoryOperand operand);
    public AssemblerMemoryOperand get_Item(long offset);
    public AssemblerMemoryOperand get_Item(ulong offset);
    public AssemblerMemoryOperand get_Item(Label label);
    public AssemblerMemoryOperand get_Item(AssemblerRegister16 register);
    public AssemblerMemoryOperand get_Item(AssemblerRegister32 register);
    public AssemblerMemoryOperand get_Item(AssemblerRegister64 register);
}
[FlagsAttribute]
public enum Iced.Intel.AssemblerOperandFlags : Enum {
    public int value__;
    public static AssemblerOperandFlags None;
    public static AssemblerOperandFlags Broadcast;
    public static AssemblerOperandFlags Zeroing;
    public static AssemblerOperandFlags SuppressAllExceptions;
    public static AssemblerOperandFlags RoundToNearest;
    public static AssemblerOperandFlags RoundDown;
    public static AssemblerOperandFlags RoundUp;
    public static AssemblerOperandFlags RoundTowardZero;
    public static AssemblerOperandFlags RoundingControlMask;
    public static AssemblerOperandFlags K1;
    public static AssemblerOperandFlags K2;
    public static AssemblerOperandFlags K3;
    public static AssemblerOperandFlags K4;
    public static AssemblerOperandFlags K5;
    public static AssemblerOperandFlags K6;
    public static AssemblerOperandFlags K7;
    public static AssemblerOperandFlags RegisterMask;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegister16 : ValueType {
    public Register Value;
    public AssemblerRegister16(Register value);
    public static Register op_Implicit(AssemblerRegister16 reg);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister16 left, AssemblerRegister16 right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister16 left, long displacement);
    public static AssemblerMemoryOperand op_Subtraction(AssemblerRegister16 left, long displacement);
    public static AssemblerMemoryOperand op_Multiply(AssemblerRegister16 left, int scale);
    public sealed virtual bool Equals(AssemblerRegister16 other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegister16 left, AssemblerRegister16 right);
    public static bool op_Inequality(AssemblerRegister16 left, AssemblerRegister16 right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegister32 : ValueType {
    public Register Value;
    internal AssemblerOperandFlags Flags;
    public AssemblerRegister32 k1 { get; }
    public AssemblerRegister32 k2 { get; }
    public AssemblerRegister32 k3 { get; }
    public AssemblerRegister32 k4 { get; }
    public AssemblerRegister32 k5 { get; }
    public AssemblerRegister32 k6 { get; }
    public AssemblerRegister32 k7 { get; }
    public AssemblerRegister32 z { get; }
    public AssemblerRegister32 sae { get; }
    public AssemblerRegister32 rn_sae { get; }
    public AssemblerRegister32 rd_sae { get; }
    public AssemblerRegister32 ru_sae { get; }
    public AssemblerRegister32 rz_sae { get; }
    public AssemblerRegister32(Register value);
    public AssemblerRegister32(Register value, AssemblerOperandFlags flags);
    public AssemblerRegister32 get_k1();
    public AssemblerRegister32 get_k2();
    public AssemblerRegister32 get_k3();
    public AssemblerRegister32 get_k4();
    public AssemblerRegister32 get_k5();
    public AssemblerRegister32 get_k6();
    public AssemblerRegister32 get_k7();
    public AssemblerRegister32 get_z();
    public AssemblerRegister32 get_sae();
    public AssemblerRegister32 get_rn_sae();
    public AssemblerRegister32 get_rd_sae();
    public AssemblerRegister32 get_ru_sae();
    public AssemblerRegister32 get_rz_sae();
    public static Register op_Implicit(AssemblerRegister32 reg);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister32 left, AssemblerRegister32 right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister32 left, AssemblerRegisterXMM right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister32 left, AssemblerRegisterYMM right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister32 left, AssemblerRegisterZMM right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister32 left, long displacement);
    public static AssemblerMemoryOperand op_Subtraction(AssemblerRegister32 left, long displacement);
    public static AssemblerMemoryOperand op_Multiply(AssemblerRegister32 left, int scale);
    public sealed virtual bool Equals(AssemblerRegister32 other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegister32 left, AssemblerRegister32 right);
    public static bool op_Inequality(AssemblerRegister32 left, AssemblerRegister32 right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegister64 : ValueType {
    public Register Value;
    internal AssemblerOperandFlags Flags;
    public AssemblerRegister64 k1 { get; }
    public AssemblerRegister64 k2 { get; }
    public AssemblerRegister64 k3 { get; }
    public AssemblerRegister64 k4 { get; }
    public AssemblerRegister64 k5 { get; }
    public AssemblerRegister64 k6 { get; }
    public AssemblerRegister64 k7 { get; }
    public AssemblerRegister64 z { get; }
    public AssemblerRegister64 sae { get; }
    public AssemblerRegister64 rn_sae { get; }
    public AssemblerRegister64 rd_sae { get; }
    public AssemblerRegister64 ru_sae { get; }
    public AssemblerRegister64 rz_sae { get; }
    public AssemblerRegister64(Register value);
    public AssemblerRegister64(Register value, AssemblerOperandFlags flags);
    public AssemblerRegister64 get_k1();
    public AssemblerRegister64 get_k2();
    public AssemblerRegister64 get_k3();
    public AssemblerRegister64 get_k4();
    public AssemblerRegister64 get_k5();
    public AssemblerRegister64 get_k6();
    public AssemblerRegister64 get_k7();
    public AssemblerRegister64 get_z();
    public AssemblerRegister64 get_sae();
    public AssemblerRegister64 get_rn_sae();
    public AssemblerRegister64 get_rd_sae();
    public AssemblerRegister64 get_ru_sae();
    public AssemblerRegister64 get_rz_sae();
    public static Register op_Implicit(AssemblerRegister64 reg);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister64 left, AssemblerRegister64 right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister64 left, AssemblerRegisterXMM right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister64 left, AssemblerRegisterYMM right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister64 left, AssemblerRegisterZMM right);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegister64 left, long displacement);
    public static AssemblerMemoryOperand op_Subtraction(AssemblerRegister64 left, long displacement);
    public static AssemblerMemoryOperand op_Multiply(AssemblerRegister64 left, int scale);
    public sealed virtual bool Equals(AssemblerRegister64 other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegister64 left, AssemblerRegister64 right);
    public static bool op_Inequality(AssemblerRegister64 left, AssemblerRegister64 right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegister8 : ValueType {
    public Register Value;
    public AssemblerRegister8(Register value);
    public static Register op_Implicit(AssemblerRegister8 reg);
    public sealed virtual bool Equals(AssemblerRegister8 other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegister8 left, AssemblerRegister8 right);
    public static bool op_Inequality(AssemblerRegister8 left, AssemblerRegister8 right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterBND : ValueType {
    public Register Value;
    public AssemblerRegisterBND(Register value);
    public static Register op_Implicit(AssemblerRegisterBND reg);
    public sealed virtual bool Equals(AssemblerRegisterBND other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterBND left, AssemblerRegisterBND right);
    public static bool op_Inequality(AssemblerRegisterBND left, AssemblerRegisterBND right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterCR : ValueType {
    public Register Value;
    public AssemblerRegisterCR(Register value);
    public static Register op_Implicit(AssemblerRegisterCR reg);
    public sealed virtual bool Equals(AssemblerRegisterCR other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterCR left, AssemblerRegisterCR right);
    public static bool op_Inequality(AssemblerRegisterCR left, AssemblerRegisterCR right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterDR : ValueType {
    public Register Value;
    public AssemblerRegisterDR(Register value);
    public static Register op_Implicit(AssemblerRegisterDR reg);
    public sealed virtual bool Equals(AssemblerRegisterDR other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterDR left, AssemblerRegisterDR right);
    public static bool op_Inequality(AssemblerRegisterDR left, AssemblerRegisterDR right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterK : ValueType {
    public Register Value;
    internal AssemblerOperandFlags Flags;
    public AssemblerRegisterK k1 { get; }
    public AssemblerRegisterK k2 { get; }
    public AssemblerRegisterK k3 { get; }
    public AssemblerRegisterK k4 { get; }
    public AssemblerRegisterK k5 { get; }
    public AssemblerRegisterK k6 { get; }
    public AssemblerRegisterK k7 { get; }
    public AssemblerRegisterK z { get; }
    public AssemblerRegisterK(Register value);
    public AssemblerRegisterK(Register value, AssemblerOperandFlags flags);
    public AssemblerRegisterK get_k1();
    public AssemblerRegisterK get_k2();
    public AssemblerRegisterK get_k3();
    public AssemblerRegisterK get_k4();
    public AssemblerRegisterK get_k5();
    public AssemblerRegisterK get_k6();
    public AssemblerRegisterK get_k7();
    public AssemblerRegisterK get_z();
    public static Register op_Implicit(AssemblerRegisterK reg);
    public sealed virtual bool Equals(AssemblerRegisterK other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterK left, AssemblerRegisterK right);
    public static bool op_Inequality(AssemblerRegisterK left, AssemblerRegisterK right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterMM : ValueType {
    public Register Value;
    public AssemblerRegisterMM(Register value);
    public static Register op_Implicit(AssemblerRegisterMM reg);
    public sealed virtual bool Equals(AssemblerRegisterMM other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterMM left, AssemblerRegisterMM right);
    public static bool op_Inequality(AssemblerRegisterMM left, AssemblerRegisterMM right);
}
public static class Iced.Intel.AssemblerRegisters : object {
    public static AssemblerRegister8 al;
    public static AssemblerRegister8 cl;
    public static AssemblerRegister8 dl;
    public static AssemblerRegister8 bl;
    public static AssemblerRegister8 ah;
    public static AssemblerRegister8 ch;
    public static AssemblerRegister8 dh;
    public static AssemblerRegister8 bh;
    public static AssemblerRegister8 spl;
    public static AssemblerRegister8 bpl;
    public static AssemblerRegister8 sil;
    public static AssemblerRegister8 dil;
    public static AssemblerRegister8 r8b;
    public static AssemblerRegister8 r9b;
    public static AssemblerRegister8 r10b;
    public static AssemblerRegister8 r11b;
    public static AssemblerRegister8 r12b;
    public static AssemblerRegister8 r13b;
    public static AssemblerRegister8 r14b;
    public static AssemblerRegister8 r15b;
    public static AssemblerRegister16 ax;
    public static AssemblerRegister16 cx;
    public static AssemblerRegister16 dx;
    public static AssemblerRegister16 bx;
    public static AssemblerRegister16 sp;
    public static AssemblerRegister16 bp;
    public static AssemblerRegister16 si;
    public static AssemblerRegister16 di;
    public static AssemblerRegister16 r8w;
    public static AssemblerRegister16 r9w;
    public static AssemblerRegister16 r10w;
    public static AssemblerRegister16 r11w;
    public static AssemblerRegister16 r12w;
    public static AssemblerRegister16 r13w;
    public static AssemblerRegister16 r14w;
    public static AssemblerRegister16 r15w;
    public static AssemblerRegister32 eax;
    public static AssemblerRegister32 ecx;
    public static AssemblerRegister32 edx;
    public static AssemblerRegister32 ebx;
    public static AssemblerRegister32 esp;
    public static AssemblerRegister32 ebp;
    public static AssemblerRegister32 esi;
    public static AssemblerRegister32 edi;
    public static AssemblerRegister32 r8d;
    public static AssemblerRegister32 r9d;
    public static AssemblerRegister32 r10d;
    public static AssemblerRegister32 r11d;
    public static AssemblerRegister32 r12d;
    public static AssemblerRegister32 r13d;
    public static AssemblerRegister32 r14d;
    public static AssemblerRegister32 r15d;
    public static AssemblerRegister64 rax;
    public static AssemblerRegister64 rcx;
    public static AssemblerRegister64 rdx;
    public static AssemblerRegister64 rbx;
    public static AssemblerRegister64 rsp;
    public static AssemblerRegister64 rbp;
    public static AssemblerRegister64 rsi;
    public static AssemblerRegister64 rdi;
    public static AssemblerRegister64 r8;
    public static AssemblerRegister64 r9;
    public static AssemblerRegister64 r10;
    public static AssemblerRegister64 r11;
    public static AssemblerRegister64 r12;
    public static AssemblerRegister64 r13;
    public static AssemblerRegister64 r14;
    public static AssemblerRegister64 r15;
    public static AssemblerRegisterSegment es;
    public static AssemblerRegisterSegment cs;
    public static AssemblerRegisterSegment ss;
    public static AssemblerRegisterSegment ds;
    public static AssemblerRegisterSegment fs;
    public static AssemblerRegisterSegment gs;
    public static AssemblerRegisterST st0;
    public static AssemblerRegisterST st1;
    public static AssemblerRegisterST st2;
    public static AssemblerRegisterST st3;
    public static AssemblerRegisterST st4;
    public static AssemblerRegisterST st5;
    public static AssemblerRegisterST st6;
    public static AssemblerRegisterST st7;
    public static AssemblerRegisterCR cr0;
    public static AssemblerRegisterCR cr1;
    public static AssemblerRegisterCR cr2;
    public static AssemblerRegisterCR cr3;
    public static AssemblerRegisterCR cr4;
    public static AssemblerRegisterCR cr5;
    public static AssemblerRegisterCR cr6;
    public static AssemblerRegisterCR cr7;
    public static AssemblerRegisterCR cr8;
    public static AssemblerRegisterCR cr9;
    public static AssemblerRegisterCR cr10;
    public static AssemblerRegisterCR cr11;
    public static AssemblerRegisterCR cr12;
    public static AssemblerRegisterCR cr13;
    public static AssemblerRegisterCR cr14;
    public static AssemblerRegisterCR cr15;
    public static AssemblerRegisterDR dr0;
    public static AssemblerRegisterDR dr1;
    public static AssemblerRegisterDR dr2;
    public static AssemblerRegisterDR dr3;
    public static AssemblerRegisterDR dr4;
    public static AssemblerRegisterDR dr5;
    public static AssemblerRegisterDR dr6;
    public static AssemblerRegisterDR dr7;
    public static AssemblerRegisterDR dr8;
    public static AssemblerRegisterDR dr9;
    public static AssemblerRegisterDR dr10;
    public static AssemblerRegisterDR dr11;
    public static AssemblerRegisterDR dr12;
    public static AssemblerRegisterDR dr13;
    public static AssemblerRegisterDR dr14;
    public static AssemblerRegisterDR dr15;
    public static AssemblerRegisterTR tr0;
    public static AssemblerRegisterTR tr1;
    public static AssemblerRegisterTR tr2;
    public static AssemblerRegisterTR tr3;
    public static AssemblerRegisterTR tr4;
    public static AssemblerRegisterTR tr5;
    public static AssemblerRegisterTR tr6;
    public static AssemblerRegisterTR tr7;
    public static AssemblerRegisterBND bnd0;
    public static AssemblerRegisterBND bnd1;
    public static AssemblerRegisterBND bnd2;
    public static AssemblerRegisterBND bnd3;
    public static AssemblerRegisterK k0;
    public static AssemblerRegisterK k1;
    public static AssemblerRegisterK k2;
    public static AssemblerRegisterK k3;
    public static AssemblerRegisterK k4;
    public static AssemblerRegisterK k5;
    public static AssemblerRegisterK k6;
    public static AssemblerRegisterK k7;
    public static AssemblerRegisterMM mm0;
    public static AssemblerRegisterMM mm1;
    public static AssemblerRegisterMM mm2;
    public static AssemblerRegisterMM mm3;
    public static AssemblerRegisterMM mm4;
    public static AssemblerRegisterMM mm5;
    public static AssemblerRegisterMM mm6;
    public static AssemblerRegisterMM mm7;
    public static AssemblerRegisterXMM xmm0;
    public static AssemblerRegisterXMM xmm1;
    public static AssemblerRegisterXMM xmm2;
    public static AssemblerRegisterXMM xmm3;
    public static AssemblerRegisterXMM xmm4;
    public static AssemblerRegisterXMM xmm5;
    public static AssemblerRegisterXMM xmm6;
    public static AssemblerRegisterXMM xmm7;
    public static AssemblerRegisterXMM xmm8;
    public static AssemblerRegisterXMM xmm9;
    public static AssemblerRegisterXMM xmm10;
    public static AssemblerRegisterXMM xmm11;
    public static AssemblerRegisterXMM xmm12;
    public static AssemblerRegisterXMM xmm13;
    public static AssemblerRegisterXMM xmm14;
    public static AssemblerRegisterXMM xmm15;
    public static AssemblerRegisterXMM xmm16;
    public static AssemblerRegisterXMM xmm17;
    public static AssemblerRegisterXMM xmm18;
    public static AssemblerRegisterXMM xmm19;
    public static AssemblerRegisterXMM xmm20;
    public static AssemblerRegisterXMM xmm21;
    public static AssemblerRegisterXMM xmm22;
    public static AssemblerRegisterXMM xmm23;
    public static AssemblerRegisterXMM xmm24;
    public static AssemblerRegisterXMM xmm25;
    public static AssemblerRegisterXMM xmm26;
    public static AssemblerRegisterXMM xmm27;
    public static AssemblerRegisterXMM xmm28;
    public static AssemblerRegisterXMM xmm29;
    public static AssemblerRegisterXMM xmm30;
    public static AssemblerRegisterXMM xmm31;
    public static AssemblerRegisterYMM ymm0;
    public static AssemblerRegisterYMM ymm1;
    public static AssemblerRegisterYMM ymm2;
    public static AssemblerRegisterYMM ymm3;
    public static AssemblerRegisterYMM ymm4;
    public static AssemblerRegisterYMM ymm5;
    public static AssemblerRegisterYMM ymm6;
    public static AssemblerRegisterYMM ymm7;
    public static AssemblerRegisterYMM ymm8;
    public static AssemblerRegisterYMM ymm9;
    public static AssemblerRegisterYMM ymm10;
    public static AssemblerRegisterYMM ymm11;
    public static AssemblerRegisterYMM ymm12;
    public static AssemblerRegisterYMM ymm13;
    public static AssemblerRegisterYMM ymm14;
    public static AssemblerRegisterYMM ymm15;
    public static AssemblerRegisterYMM ymm16;
    public static AssemblerRegisterYMM ymm17;
    public static AssemblerRegisterYMM ymm18;
    public static AssemblerRegisterYMM ymm19;
    public static AssemblerRegisterYMM ymm20;
    public static AssemblerRegisterYMM ymm21;
    public static AssemblerRegisterYMM ymm22;
    public static AssemblerRegisterYMM ymm23;
    public static AssemblerRegisterYMM ymm24;
    public static AssemblerRegisterYMM ymm25;
    public static AssemblerRegisterYMM ymm26;
    public static AssemblerRegisterYMM ymm27;
    public static AssemblerRegisterYMM ymm28;
    public static AssemblerRegisterYMM ymm29;
    public static AssemblerRegisterYMM ymm30;
    public static AssemblerRegisterYMM ymm31;
    public static AssemblerRegisterZMM zmm0;
    public static AssemblerRegisterZMM zmm1;
    public static AssemblerRegisterZMM zmm2;
    public static AssemblerRegisterZMM zmm3;
    public static AssemblerRegisterZMM zmm4;
    public static AssemblerRegisterZMM zmm5;
    public static AssemblerRegisterZMM zmm6;
    public static AssemblerRegisterZMM zmm7;
    public static AssemblerRegisterZMM zmm8;
    public static AssemblerRegisterZMM zmm9;
    public static AssemblerRegisterZMM zmm10;
    public static AssemblerRegisterZMM zmm11;
    public static AssemblerRegisterZMM zmm12;
    public static AssemblerRegisterZMM zmm13;
    public static AssemblerRegisterZMM zmm14;
    public static AssemblerRegisterZMM zmm15;
    public static AssemblerRegisterZMM zmm16;
    public static AssemblerRegisterZMM zmm17;
    public static AssemblerRegisterZMM zmm18;
    public static AssemblerRegisterZMM zmm19;
    public static AssemblerRegisterZMM zmm20;
    public static AssemblerRegisterZMM zmm21;
    public static AssemblerRegisterZMM zmm22;
    public static AssemblerRegisterZMM zmm23;
    public static AssemblerRegisterZMM zmm24;
    public static AssemblerRegisterZMM zmm25;
    public static AssemblerRegisterZMM zmm26;
    public static AssemblerRegisterZMM zmm27;
    public static AssemblerRegisterZMM zmm28;
    public static AssemblerRegisterZMM zmm29;
    public static AssemblerRegisterZMM zmm30;
    public static AssemblerRegisterZMM zmm31;
    public static AssemblerRegisterTMM tmm0;
    public static AssemblerRegisterTMM tmm1;
    public static AssemblerRegisterTMM tmm2;
    public static AssemblerRegisterTMM tmm3;
    public static AssemblerRegisterTMM tmm4;
    public static AssemblerRegisterTMM tmm5;
    public static AssemblerRegisterTMM tmm6;
    public static AssemblerRegisterTMM tmm7;
    public static AssemblerMemoryOperandFactory __;
    public static AssemblerMemoryOperandFactory __byte_ptr;
    public static AssemblerMemoryOperandFactory __word_ptr;
    public static AssemblerMemoryOperandFactory __dword_ptr;
    public static AssemblerMemoryOperandFactory __qword_ptr;
    public static AssemblerMemoryOperandFactory __mmword_ptr;
    public static AssemblerMemoryOperandFactory __tbyte_ptr;
    public static AssemblerMemoryOperandFactory __tword_ptr;
    public static AssemblerMemoryOperandFactory __fword_ptr;
    public static AssemblerMemoryOperandFactory __oword_ptr;
    public static AssemblerMemoryOperandFactory __xmmword_ptr;
    public static AssemblerMemoryOperandFactory __ymmword_ptr;
    public static AssemblerMemoryOperandFactory __zmmword_ptr;
    public static AssemblerMemoryOperandFactory __bcst;
    public static AssemblerMemoryOperandFactory __word_bcst;
    public static AssemblerMemoryOperandFactory __dword_bcst;
    public static AssemblerMemoryOperandFactory __qword_bcst;
    private static AssemblerRegisters();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterSegment : ValueType {
    public Register Value;
    public AssemblerRegisterSegment(Register value);
    public static Register op_Implicit(AssemblerRegisterSegment reg);
    public sealed virtual bool Equals(AssemblerRegisterSegment other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterSegment left, AssemblerRegisterSegment right);
    public static bool op_Inequality(AssemblerRegisterSegment left, AssemblerRegisterSegment right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterST : ValueType {
    public Register Value;
    public AssemblerRegisterST(Register value);
    public static Register op_Implicit(AssemblerRegisterST reg);
    public sealed virtual bool Equals(AssemblerRegisterST other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterST left, AssemblerRegisterST right);
    public static bool op_Inequality(AssemblerRegisterST left, AssemblerRegisterST right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterTMM : ValueType {
    public Register Value;
    public AssemblerRegisterTMM(Register value);
    public static Register op_Implicit(AssemblerRegisterTMM reg);
    public sealed virtual bool Equals(AssemblerRegisterTMM other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterTMM left, AssemblerRegisterTMM right);
    public static bool op_Inequality(AssemblerRegisterTMM left, AssemblerRegisterTMM right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterTR : ValueType {
    public Register Value;
    public AssemblerRegisterTR(Register value);
    public static Register op_Implicit(AssemblerRegisterTR reg);
    public sealed virtual bool Equals(AssemblerRegisterTR other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterTR left, AssemblerRegisterTR right);
    public static bool op_Inequality(AssemblerRegisterTR left, AssemblerRegisterTR right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterXMM : ValueType {
    public Register Value;
    internal AssemblerOperandFlags Flags;
    public AssemblerRegisterXMM k1 { get; }
    public AssemblerRegisterXMM k2 { get; }
    public AssemblerRegisterXMM k3 { get; }
    public AssemblerRegisterXMM k4 { get; }
    public AssemblerRegisterXMM k5 { get; }
    public AssemblerRegisterXMM k6 { get; }
    public AssemblerRegisterXMM k7 { get; }
    public AssemblerRegisterXMM z { get; }
    public AssemblerRegisterXMM sae { get; }
    public AssemblerRegisterXMM rn_sae { get; }
    public AssemblerRegisterXMM rd_sae { get; }
    public AssemblerRegisterXMM ru_sae { get; }
    public AssemblerRegisterXMM rz_sae { get; }
    public AssemblerRegisterXMM(Register value);
    public AssemblerRegisterXMM(Register value, AssemblerOperandFlags flags);
    public AssemblerRegisterXMM get_k1();
    public AssemblerRegisterXMM get_k2();
    public AssemblerRegisterXMM get_k3();
    public AssemblerRegisterXMM get_k4();
    public AssemblerRegisterXMM get_k5();
    public AssemblerRegisterXMM get_k6();
    public AssemblerRegisterXMM get_k7();
    public AssemblerRegisterXMM get_z();
    public AssemblerRegisterXMM get_sae();
    public AssemblerRegisterXMM get_rn_sae();
    public AssemblerRegisterXMM get_rd_sae();
    public AssemblerRegisterXMM get_ru_sae();
    public AssemblerRegisterXMM get_rz_sae();
    public static Register op_Implicit(AssemblerRegisterXMM reg);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegisterXMM left, long displacement);
    public static AssemblerMemoryOperand op_Subtraction(AssemblerRegisterXMM left, long displacement);
    public static AssemblerMemoryOperand op_Multiply(AssemblerRegisterXMM left, int scale);
    public sealed virtual bool Equals(AssemblerRegisterXMM other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterXMM left, AssemblerRegisterXMM right);
    public static bool op_Inequality(AssemblerRegisterXMM left, AssemblerRegisterXMM right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterYMM : ValueType {
    public Register Value;
    internal AssemblerOperandFlags Flags;
    public AssemblerRegisterYMM k1 { get; }
    public AssemblerRegisterYMM k2 { get; }
    public AssemblerRegisterYMM k3 { get; }
    public AssemblerRegisterYMM k4 { get; }
    public AssemblerRegisterYMM k5 { get; }
    public AssemblerRegisterYMM k6 { get; }
    public AssemblerRegisterYMM k7 { get; }
    public AssemblerRegisterYMM z { get; }
    public AssemblerRegisterYMM sae { get; }
    public AssemblerRegisterYMM rn_sae { get; }
    public AssemblerRegisterYMM rd_sae { get; }
    public AssemblerRegisterYMM ru_sae { get; }
    public AssemblerRegisterYMM rz_sae { get; }
    public AssemblerRegisterYMM(Register value);
    public AssemblerRegisterYMM(Register value, AssemblerOperandFlags flags);
    public AssemblerRegisterYMM get_k1();
    public AssemblerRegisterYMM get_k2();
    public AssemblerRegisterYMM get_k3();
    public AssemblerRegisterYMM get_k4();
    public AssemblerRegisterYMM get_k5();
    public AssemblerRegisterYMM get_k6();
    public AssemblerRegisterYMM get_k7();
    public AssemblerRegisterYMM get_z();
    public AssemblerRegisterYMM get_sae();
    public AssemblerRegisterYMM get_rn_sae();
    public AssemblerRegisterYMM get_rd_sae();
    public AssemblerRegisterYMM get_ru_sae();
    public AssemblerRegisterYMM get_rz_sae();
    public static Register op_Implicit(AssemblerRegisterYMM reg);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegisterYMM left, long displacement);
    public static AssemblerMemoryOperand op_Subtraction(AssemblerRegisterYMM left, long displacement);
    public static AssemblerMemoryOperand op_Multiply(AssemblerRegisterYMM left, int scale);
    public sealed virtual bool Equals(AssemblerRegisterYMM other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterYMM left, AssemblerRegisterYMM right);
    public static bool op_Inequality(AssemblerRegisterYMM left, AssemblerRegisterYMM right);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.AssemblerRegisterZMM : ValueType {
    public Register Value;
    internal AssemblerOperandFlags Flags;
    public AssemblerRegisterZMM k1 { get; }
    public AssemblerRegisterZMM k2 { get; }
    public AssemblerRegisterZMM k3 { get; }
    public AssemblerRegisterZMM k4 { get; }
    public AssemblerRegisterZMM k5 { get; }
    public AssemblerRegisterZMM k6 { get; }
    public AssemblerRegisterZMM k7 { get; }
    public AssemblerRegisterZMM z { get; }
    public AssemblerRegisterZMM sae { get; }
    public AssemblerRegisterZMM rn_sae { get; }
    public AssemblerRegisterZMM rd_sae { get; }
    public AssemblerRegisterZMM ru_sae { get; }
    public AssemblerRegisterZMM rz_sae { get; }
    public AssemblerRegisterZMM(Register value);
    public AssemblerRegisterZMM(Register value, AssemblerOperandFlags flags);
    public AssemblerRegisterZMM get_k1();
    public AssemblerRegisterZMM get_k2();
    public AssemblerRegisterZMM get_k3();
    public AssemblerRegisterZMM get_k4();
    public AssemblerRegisterZMM get_k5();
    public AssemblerRegisterZMM get_k6();
    public AssemblerRegisterZMM get_k7();
    public AssemblerRegisterZMM get_z();
    public AssemblerRegisterZMM get_sae();
    public AssemblerRegisterZMM get_rn_sae();
    public AssemblerRegisterZMM get_rd_sae();
    public AssemblerRegisterZMM get_ru_sae();
    public AssemblerRegisterZMM get_rz_sae();
    public static Register op_Implicit(AssemblerRegisterZMM reg);
    public static AssemblerMemoryOperand op_Addition(AssemblerRegisterZMM left, long displacement);
    public static AssemblerMemoryOperand op_Subtraction(AssemblerRegisterZMM left, long displacement);
    public static AssemblerMemoryOperand op_Multiply(AssemblerRegisterZMM left, int scale);
    public sealed virtual bool Equals(AssemblerRegisterZMM other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(AssemblerRegisterZMM left, AssemblerRegisterZMM right);
    public static bool op_Inequality(AssemblerRegisterZMM left, AssemblerRegisterZMM right);
}
[IsReadOnlyAttribute]
public class Iced.Intel.AssemblerResult : ValueType {
    [NullableAttribute("1")]
public BlockEncoderResult[] Result;
    internal AssemblerResult(BlockEncoderResult[] result);
    public ulong GetLabelRIP(Label& label, int index);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Iced.Intel.BlockEncoder : object {
    private int bitness;
    private BlockEncoderOptions options;
    private Block[] blocks;
    private Encoder nullEncoder;
    private Dictionary`2<ulong, Instr> toInstr;
    internal int Bitness { get; }
    internal bool FixBranches { get; }
    private bool ReturnRelocInfos { get; }
    private bool ReturnNewInstructionOffsets { get; }
    private bool ReturnConstantOffsets { get; }
    private BlockEncoder(int bitness, InstructionBlock[] instrBlocks, BlockEncoderOptions options);
    internal int get_Bitness();
    internal bool get_FixBranches();
    private bool get_ReturnRelocInfos();
    private bool get_ReturnNewInstructionOffsets();
    private bool get_ReturnConstantOffsets();
    public static bool TryEncode(int bitness, InstructionBlock block, String& errorMessage, BlockEncoderResult& result, BlockEncoderOptions options);
    public static bool TryEncode(int bitness, InstructionBlock[] blocks, String& errorMessage, BlockEncoderResult[]& result, BlockEncoderOptions options);
    private bool Encode(String& errorMessage, BlockEncoderResult[]& result);
    internal TargetInstr GetTarget(ulong address);
    internal UInt32 GetInstructionSize(Instruction& instruction, ulong ip);
}
internal class Iced.Intel.BlockEncoderInternal.Block : object {
    public CodeWriterImpl CodeWriter;
    public ulong RIP;
    public List`1<RelocInfo> relocInfos;
    private Instr[] instructions;
    private List`1<BlockData> dataList;
    private ulong alignment;
    private List`1<BlockData> validData;
    private ulong validDataAddress;
    private ulong validDataAddressAligned;
    public Instr[] Instructions { get; }
    public bool CanAddRelocInfos { get; }
    public Block(BlockEncoder blockEncoder, CodeWriter codeWriter, ulong rip, List`1<RelocInfo> relocInfos);
    public Instr[] get_Instructions();
    internal void SetInstructions(Instr[] instructions);
    public BlockData AllocPointerLocation();
    public void InitializeData();
    public void WriteData();
    public bool get_CanAddRelocInfos();
    public void AddRelocInfo(RelocInfo relocInfo);
}
internal class Iced.Intel.BlockEncoderInternal.BlockData : object {
    internal ulong __dont_use_address;
    internal bool __dont_use_address_initd;
    public bool IsValid;
    public ulong Data;
    public ulong Address { get; }
    public ulong get_Address();
}
internal class Iced.Intel.BlockEncoderInternal.CallInstr : Instr {
    private byte bitness;
    private Instruction instruction;
    private TargetInstr targetInstr;
    private byte origInstructionSize;
    private BlockData pointerData;
    private bool useOrigInstruction;
    public CallInstr(BlockEncoder blockEncoder, Block block, Instruction& instruction);
    public virtual void Initialize(BlockEncoder blockEncoder);
    public virtual bool Optimize(ulong gained);
    private bool TryOptimize(ulong gained);
    public virtual string TryEncode(Encoder encoder, ConstantOffsets& constantOffsets, Boolean& isOriginalInstruction);
}
internal class Iced.Intel.BlockEncoderInternal.CodeWriterImpl : CodeWriter {
    public UInt32 BytesWritten;
    private CodeWriter codeWriter;
    public CodeWriterImpl(CodeWriter codeWriter);
    public virtual void WriteByte(byte value);
}
internal abstract class Iced.Intel.BlockEncoderInternal.Instr : object {
    public Block Block;
    public UInt32 Size;
    public ulong IP;
    public ulong OrigIP;
    public bool Done;
    protected static UInt32 CallOrJmpPointerDataInstructionSize64;
    protected Instr(Block block, ulong origIp);
    public abstract virtual void Initialize(BlockEncoder blockEncoder);
    public abstract virtual bool Optimize(ulong gained);
    public abstract virtual string TryEncode(Encoder encoder, ConstantOffsets& constantOffsets, Boolean& isOriginalInstruction);
    protected static string CreateErrorMessage(string errorMessage, Instruction& instruction);
    public static Instr Create(BlockEncoder blockEncoder, Block block, Instruction& instruction);
    protected string EncodeBranchToPointerData(Encoder encoder, bool isCall, ulong ip, BlockData pointerData, UInt32& size, UInt32 minSize);
    protected static long CorrectDiff(bool inBlock, long diff, ulong gained);
    protected static long ConvertDiffToBitnessDiff(int bitness, long diff);
}
internal class Iced.Intel.BlockEncoderInternal.IpRelMemOpInstr : Instr {
    private Instruction instruction;
    private InstrKind instrKind;
    private byte eipInstructionSize;
    private byte ripInstructionSize;
    private TargetInstr targetInstr;
    public IpRelMemOpInstr(BlockEncoder blockEncoder, Block block, Instruction& instruction);
    public virtual void Initialize(BlockEncoder blockEncoder);
    public virtual bool Optimize(ulong gained);
    private bool TryOptimize(ulong gained);
    public virtual string TryEncode(Encoder encoder, ConstantOffsets& constantOffsets, Boolean& isOriginalInstruction);
}
internal class Iced.Intel.BlockEncoderInternal.JccInstr : Instr {
    private byte bitness;
    private Instruction instruction;
    private TargetInstr targetInstr;
    private BlockData pointerData;
    private InstrKind instrKind;
    private byte shortInstructionSize;
    private byte nearInstructionSize;
    private byte longInstructionSize64;
    public JccInstr(BlockEncoder blockEncoder, Block block, Instruction& instruction);
    private static UInt32 GetLongInstructionSize64(Instruction& instruction);
    public virtual void Initialize(BlockEncoder blockEncoder);
    public virtual bool Optimize(ulong gained);
    private bool TryOptimize(ulong gained);
    public virtual string TryEncode(Encoder encoder, ConstantOffsets& constantOffsets, Boolean& isOriginalInstruction);
    private static Code ShortBrToNativeBr(Code code, int bitness);
}
internal class Iced.Intel.BlockEncoderInternal.JmpInstr : Instr {
    private byte bitness;
    private Instruction instruction;
    private TargetInstr targetInstr;
    private BlockData pointerData;
    private InstrKind instrKind;
    private byte shortInstructionSize;
    private byte nearInstructionSize;
    public JmpInstr(BlockEncoder blockEncoder, Block block, Instruction& instruction);
    public virtual void Initialize(BlockEncoder blockEncoder);
    public virtual bool Optimize(ulong gained);
    private bool TryOptimize(ulong gained);
    public virtual string TryEncode(Encoder encoder, ConstantOffsets& constantOffsets, Boolean& isOriginalInstruction);
}
internal class Iced.Intel.BlockEncoderInternal.SimpleBranchInstr : Instr {
    private byte bitness;
    private Instruction instruction;
    private TargetInstr targetInstr;
    private BlockData pointerData;
    private InstrKind instrKind;
    private byte shortInstructionSize;
    private byte nearInstructionSize;
    private byte longInstructionSize;
    private byte nativeInstructionSize;
    private Code nativeCode;
    public SimpleBranchInstr(BlockEncoder blockEncoder, Block block, Instruction& instruction);
    private static Code ToNativeBranchCode(Code code, int bitness);
    public virtual void Initialize(BlockEncoder blockEncoder);
    public virtual bool Optimize(ulong gained);
    private bool TryOptimize(ulong gained);
    public virtual string TryEncode(Encoder encoder, ConstantOffsets& constantOffsets, Boolean& isOriginalInstruction);
}
internal class Iced.Intel.BlockEncoderInternal.SimpleInstr : Instr {
    private Instruction instruction;
    public SimpleInstr(BlockEncoder blockEncoder, Block block, Instruction& instruction);
    public virtual void Initialize(BlockEncoder blockEncoder);
    public virtual bool Optimize(ulong gained);
    public virtual string TryEncode(Encoder encoder, ConstantOffsets& constantOffsets, Boolean& isOriginalInstruction);
}
[IsReadOnlyAttribute]
internal class Iced.Intel.BlockEncoderInternal.TargetInstr : ValueType {
    private Instr instruction;
    private ulong address;
    public TargetInstr(Instr instruction);
    public TargetInstr(ulong address);
    public bool IsInBlock(Block block);
    public ulong GetAddress();
}
internal class Iced.Intel.BlockEncoderInternal.XbeginInstr : Instr {
    private Instruction instruction;
    private TargetInstr targetInstr;
    private InstrKind instrKind;
    private byte shortInstructionSize;
    private byte nearInstructionSize;
    public XbeginInstr(BlockEncoder blockEncoder, Block block, Instruction& instruction);
    public virtual void Initialize(BlockEncoder blockEncoder);
    public virtual bool Optimize(ulong gained);
    private bool TryOptimize(ulong gained);
    public virtual string TryEncode(Encoder encoder, ConstantOffsets& constantOffsets, Boolean& isOriginalInstruction);
}
[FlagsAttribute]
public enum Iced.Intel.BlockEncoderOptions : Enum {
    public int value__;
    public static BlockEncoderOptions None;
    public static BlockEncoderOptions DontFixBranches;
    public static BlockEncoderOptions ReturnRelocInfos;
    public static BlockEncoderOptions ReturnNewInstructionOffsets;
    public static BlockEncoderOptions ReturnConstantOffsets;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Iced.Intel.BlockEncoderResult : ValueType {
    public ulong RIP;
    [NullableAttribute("2")]
public List`1<RelocInfo> RelocInfos;
    public UInt32[] NewInstructionOffsets;
    public ConstantOffsets[] ConstantOffsets;
    internal BlockEncoderResult(ulong rip, List`1<RelocInfo> relocInfos, UInt32[] newInstructionOffsets, ConstantOffsets[] constantOffsets);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.ByteArrayCodeReader : CodeReader {
    private Byte[] data;
    private int currentPosition;
    private int startPosition;
    private int endPosition;
    public int Position { get; public set; }
    public int Count { get; }
    public bool CanReadByte { get; }
    public ByteArrayCodeReader(string hexData);
    public ByteArrayCodeReader(Byte[] data);
    public ByteArrayCodeReader(Byte[] data, int index, int count);
    [NullableContextAttribute("0")]
public ByteArrayCodeReader(ArraySegment`1<byte> data);
    public int get_Position();
    public void set_Position(int value);
    public int get_Count();
    public bool get_CanReadByte();
    public virtual int ReadByte();
}
public enum Iced.Intel.CC_a : Enum {
    public byte value__;
    public static CC_a a;
    public static CC_a nbe;
}
public enum Iced.Intel.CC_ae : Enum {
    public byte value__;
    public static CC_ae ae;
    public static CC_ae nb;
    public static CC_ae nc;
}
public enum Iced.Intel.CC_b : Enum {
    public byte value__;
    public static CC_b b;
    public static CC_b c;
    public static CC_b nae;
}
public enum Iced.Intel.CC_be : Enum {
    public byte value__;
    public static CC_be be;
    public static CC_be na;
}
public enum Iced.Intel.CC_e : Enum {
    public byte value__;
    public static CC_e e;
    public static CC_e z;
}
public enum Iced.Intel.CC_g : Enum {
    public byte value__;
    public static CC_g g;
    public static CC_g nle;
}
public enum Iced.Intel.CC_ge : Enum {
    public byte value__;
    public static CC_ge ge;
    public static CC_ge nl;
}
public enum Iced.Intel.CC_l : Enum {
    public byte value__;
    public static CC_l l;
    public static CC_l nge;
}
public enum Iced.Intel.CC_le : Enum {
    public byte value__;
    public static CC_le le;
    public static CC_le ng;
}
public enum Iced.Intel.CC_ne : Enum {
    public byte value__;
    public static CC_ne ne;
    public static CC_ne nz;
}
public enum Iced.Intel.CC_np : Enum {
    public byte value__;
    public static CC_np np;
    public static CC_np po;
}
public enum Iced.Intel.CC_p : Enum {
    public byte value__;
    public static CC_p p;
    public static CC_p pe;
}
public enum Iced.Intel.Code : Enum {
    public int value__;
    public static Code INVALID;
    public static Code DeclareByte;
    public static Code DeclareWord;
    public static Code DeclareDword;
    public static Code DeclareQword;
    public static Code Add_rm8_r8;
    public static Code Add_rm16_r16;
    public static Code Add_rm32_r32;
    public static Code Add_rm64_r64;
    public static Code Add_r8_rm8;
    public static Code Add_r16_rm16;
    public static Code Add_r32_rm32;
    public static Code Add_r64_rm64;
    public static Code Add_AL_imm8;
    public static Code Add_AX_imm16;
    public static Code Add_EAX_imm32;
    public static Code Add_RAX_imm32;
    public static Code Pushw_ES;
    public static Code Pushd_ES;
    public static Code Popw_ES;
    public static Code Popd_ES;
    public static Code Or_rm8_r8;
    public static Code Or_rm16_r16;
    public static Code Or_rm32_r32;
    public static Code Or_rm64_r64;
    public static Code Or_r8_rm8;
    public static Code Or_r16_rm16;
    public static Code Or_r32_rm32;
    public static Code Or_r64_rm64;
    public static Code Or_AL_imm8;
    public static Code Or_AX_imm16;
    public static Code Or_EAX_imm32;
    public static Code Or_RAX_imm32;
    public static Code Pushw_CS;
    public static Code Pushd_CS;
    public static Code Popw_CS;
    public static Code Adc_rm8_r8;
    public static Code Adc_rm16_r16;
    public static Code Adc_rm32_r32;
    public static Code Adc_rm64_r64;
    public static Code Adc_r8_rm8;
    public static Code Adc_r16_rm16;
    public static Code Adc_r32_rm32;
    public static Code Adc_r64_rm64;
    public static Code Adc_AL_imm8;
    public static Code Adc_AX_imm16;
    public static Code Adc_EAX_imm32;
    public static Code Adc_RAX_imm32;
    public static Code Pushw_SS;
    public static Code Pushd_SS;
    public static Code Popw_SS;
    public static Code Popd_SS;
    public static Code Sbb_rm8_r8;
    public static Code Sbb_rm16_r16;
    public static Code Sbb_rm32_r32;
    public static Code Sbb_rm64_r64;
    public static Code Sbb_r8_rm8;
    public static Code Sbb_r16_rm16;
    public static Code Sbb_r32_rm32;
    public static Code Sbb_r64_rm64;
    public static Code Sbb_AL_imm8;
    public static Code Sbb_AX_imm16;
    public static Code Sbb_EAX_imm32;
    public static Code Sbb_RAX_imm32;
    public static Code Pushw_DS;
    public static Code Pushd_DS;
    public static Code Popw_DS;
    public static Code Popd_DS;
    public static Code And_rm8_r8;
    public static Code And_rm16_r16;
    public static Code And_rm32_r32;
    public static Code And_rm64_r64;
    public static Code And_r8_rm8;
    public static Code And_r16_rm16;
    public static Code And_r32_rm32;
    public static Code And_r64_rm64;
    public static Code And_AL_imm8;
    public static Code And_AX_imm16;
    public static Code And_EAX_imm32;
    public static Code And_RAX_imm32;
    public static Code Daa;
    public static Code Sub_rm8_r8;
    public static Code Sub_rm16_r16;
    public static Code Sub_rm32_r32;
    public static Code Sub_rm64_r64;
    public static Code Sub_r8_rm8;
    public static Code Sub_r16_rm16;
    public static Code Sub_r32_rm32;
    public static Code Sub_r64_rm64;
    public static Code Sub_AL_imm8;
    public static Code Sub_AX_imm16;
    public static Code Sub_EAX_imm32;
    public static Code Sub_RAX_imm32;
    public static Code Das;
    public static Code Xor_rm8_r8;
    public static Code Xor_rm16_r16;
    public static Code Xor_rm32_r32;
    public static Code Xor_rm64_r64;
    public static Code Xor_r8_rm8;
    public static Code Xor_r16_rm16;
    public static Code Xor_r32_rm32;
    public static Code Xor_r64_rm64;
    public static Code Xor_AL_imm8;
    public static Code Xor_AX_imm16;
    public static Code Xor_EAX_imm32;
    public static Code Xor_RAX_imm32;
    public static Code Aaa;
    public static Code Cmp_rm8_r8;
    public static Code Cmp_rm16_r16;
    public static Code Cmp_rm32_r32;
    public static Code Cmp_rm64_r64;
    public static Code Cmp_r8_rm8;
    public static Code Cmp_r16_rm16;
    public static Code Cmp_r32_rm32;
    public static Code Cmp_r64_rm64;
    public static Code Cmp_AL_imm8;
    public static Code Cmp_AX_imm16;
    public static Code Cmp_EAX_imm32;
    public static Code Cmp_RAX_imm32;
    public static Code Aas;
    public static Code Inc_r16;
    public static Code Inc_r32;
    public static Code Dec_r16;
    public static Code Dec_r32;
    public static Code Push_r16;
    public static Code Push_r32;
    public static Code Push_r64;
    public static Code Pop_r16;
    public static Code Pop_r32;
    public static Code Pop_r64;
    public static Code Pushaw;
    public static Code Pushad;
    public static Code Popaw;
    public static Code Popad;
    public static Code Bound_r16_m1616;
    public static Code Bound_r32_m3232;
    public static Code Arpl_rm16_r16;
    public static Code Arpl_r32m16_r32;
    public static Code Movsxd_r16_rm16;
    public static Code Movsxd_r32_rm32;
    public static Code Movsxd_r64_rm32;
    public static Code Push_imm16;
    public static Code Pushd_imm32;
    public static Code Pushq_imm32;
    public static Code Imul_r16_rm16_imm16;
    public static Code Imul_r32_rm32_imm32;
    public static Code Imul_r64_rm64_imm32;
    public static Code Pushw_imm8;
    public static Code Pushd_imm8;
    public static Code Pushq_imm8;
    public static Code Imul_r16_rm16_imm8;
    public static Code Imul_r32_rm32_imm8;
    public static Code Imul_r64_rm64_imm8;
    public static Code Insb_m8_DX;
    public static Code Insw_m16_DX;
    public static Code Insd_m32_DX;
    public static Code Outsb_DX_m8;
    public static Code Outsw_DX_m16;
    public static Code Outsd_DX_m32;
    public static Code Jo_rel8_16;
    public static Code Jo_rel8_32;
    public static Code Jo_rel8_64;
    public static Code Jno_rel8_16;
    public static Code Jno_rel8_32;
    public static Code Jno_rel8_64;
    public static Code Jb_rel8_16;
    public static Code Jb_rel8_32;
    public static Code Jb_rel8_64;
    public static Code Jae_rel8_16;
    public static Code Jae_rel8_32;
    public static Code Jae_rel8_64;
    public static Code Je_rel8_16;
    public static Code Je_rel8_32;
    public static Code Je_rel8_64;
    public static Code Jne_rel8_16;
    public static Code Jne_rel8_32;
    public static Code Jne_rel8_64;
    public static Code Jbe_rel8_16;
    public static Code Jbe_rel8_32;
    public static Code Jbe_rel8_64;
    public static Code Ja_rel8_16;
    public static Code Ja_rel8_32;
    public static Code Ja_rel8_64;
    public static Code Js_rel8_16;
    public static Code Js_rel8_32;
    public static Code Js_rel8_64;
    public static Code Jns_rel8_16;
    public static Code Jns_rel8_32;
    public static Code Jns_rel8_64;
    public static Code Jp_rel8_16;
    public static Code Jp_rel8_32;
    public static Code Jp_rel8_64;
    public static Code Jnp_rel8_16;
    public static Code Jnp_rel8_32;
    public static Code Jnp_rel8_64;
    public static Code Jl_rel8_16;
    public static Code Jl_rel8_32;
    public static Code Jl_rel8_64;
    public static Code Jge_rel8_16;
    public static Code Jge_rel8_32;
    public static Code Jge_rel8_64;
    public static Code Jle_rel8_16;
    public static Code Jle_rel8_32;
    public static Code Jle_rel8_64;
    public static Code Jg_rel8_16;
    public static Code Jg_rel8_32;
    public static Code Jg_rel8_64;
    public static Code Add_rm8_imm8;
    public static Code Or_rm8_imm8;
    public static Code Adc_rm8_imm8;
    public static Code Sbb_rm8_imm8;
    public static Code And_rm8_imm8;
    public static Code Sub_rm8_imm8;
    public static Code Xor_rm8_imm8;
    public static Code Cmp_rm8_imm8;
    public static Code Add_rm16_imm16;
    public static Code Add_rm32_imm32;
    public static Code Add_rm64_imm32;
    public static Code Or_rm16_imm16;
    public static Code Or_rm32_imm32;
    public static Code Or_rm64_imm32;
    public static Code Adc_rm16_imm16;
    public static Code Adc_rm32_imm32;
    public static Code Adc_rm64_imm32;
    public static Code Sbb_rm16_imm16;
    public static Code Sbb_rm32_imm32;
    public static Code Sbb_rm64_imm32;
    public static Code And_rm16_imm16;
    public static Code And_rm32_imm32;
    public static Code And_rm64_imm32;
    public static Code Sub_rm16_imm16;
    public static Code Sub_rm32_imm32;
    public static Code Sub_rm64_imm32;
    public static Code Xor_rm16_imm16;
    public static Code Xor_rm32_imm32;
    public static Code Xor_rm64_imm32;
    public static Code Cmp_rm16_imm16;
    public static Code Cmp_rm32_imm32;
    public static Code Cmp_rm64_imm32;
    public static Code Add_rm8_imm8_82;
    public static Code Or_rm8_imm8_82;
    public static Code Adc_rm8_imm8_82;
    public static Code Sbb_rm8_imm8_82;
    public static Code And_rm8_imm8_82;
    public static Code Sub_rm8_imm8_82;
    public static Code Xor_rm8_imm8_82;
    public static Code Cmp_rm8_imm8_82;
    public static Code Add_rm16_imm8;
    public static Code Add_rm32_imm8;
    public static Code Add_rm64_imm8;
    public static Code Or_rm16_imm8;
    public static Code Or_rm32_imm8;
    public static Code Or_rm64_imm8;
    public static Code Adc_rm16_imm8;
    public static Code Adc_rm32_imm8;
    public static Code Adc_rm64_imm8;
    public static Code Sbb_rm16_imm8;
    public static Code Sbb_rm32_imm8;
    public static Code Sbb_rm64_imm8;
    public static Code And_rm16_imm8;
    public static Code And_rm32_imm8;
    public static Code And_rm64_imm8;
    public static Code Sub_rm16_imm8;
    public static Code Sub_rm32_imm8;
    public static Code Sub_rm64_imm8;
    public static Code Xor_rm16_imm8;
    public static Code Xor_rm32_imm8;
    public static Code Xor_rm64_imm8;
    public static Code Cmp_rm16_imm8;
    public static Code Cmp_rm32_imm8;
    public static Code Cmp_rm64_imm8;
    public static Code Test_rm8_r8;
    public static Code Test_rm16_r16;
    public static Code Test_rm32_r32;
    public static Code Test_rm64_r64;
    public static Code Xchg_rm8_r8;
    public static Code Xchg_rm16_r16;
    public static Code Xchg_rm32_r32;
    public static Code Xchg_rm64_r64;
    public static Code Mov_rm8_r8;
    public static Code Mov_rm16_r16;
    public static Code Mov_rm32_r32;
    public static Code Mov_rm64_r64;
    public static Code Mov_r8_rm8;
    public static Code Mov_r16_rm16;
    public static Code Mov_r32_rm32;
    public static Code Mov_r64_rm64;
    public static Code Mov_rm16_Sreg;
    public static Code Mov_r32m16_Sreg;
    public static Code Mov_r64m16_Sreg;
    public static Code Lea_r16_m;
    public static Code Lea_r32_m;
    public static Code Lea_r64_m;
    public static Code Mov_Sreg_rm16;
    public static Code Mov_Sreg_r32m16;
    public static Code Mov_Sreg_r64m16;
    public static Code Pop_rm16;
    public static Code Pop_rm32;
    public static Code Pop_rm64;
    public static Code Nopw;
    public static Code Nopd;
    public static Code Nopq;
    public static Code Xchg_r16_AX;
    public static Code Xchg_r32_EAX;
    public static Code Xchg_r64_RAX;
    public static Code Pause;
    public static Code Cbw;
    public static Code Cwde;
    public static Code Cdqe;
    public static Code Cwd;
    public static Code Cdq;
    public static Code Cqo;
    public static Code Call_ptr1616;
    public static Code Call_ptr1632;
    public static Code Wait;
    public static Code Pushfw;
    public static Code Pushfd;
    public static Code Pushfq;
    public static Code Popfw;
    public static Code Popfd;
    public static Code Popfq;
    public static Code Sahf;
    public static Code Lahf;
    public static Code Mov_AL_moffs8;
    public static Code Mov_AX_moffs16;
    public static Code Mov_EAX_moffs32;
    public static Code Mov_RAX_moffs64;
    public static Code Mov_moffs8_AL;
    public static Code Mov_moffs16_AX;
    public static Code Mov_moffs32_EAX;
    public static Code Mov_moffs64_RAX;
    public static Code Movsb_m8_m8;
    public static Code Movsw_m16_m16;
    public static Code Movsd_m32_m32;
    public static Code Movsq_m64_m64;
    public static Code Cmpsb_m8_m8;
    public static Code Cmpsw_m16_m16;
    public static Code Cmpsd_m32_m32;
    public static Code Cmpsq_m64_m64;
    public static Code Test_AL_imm8;
    public static Code Test_AX_imm16;
    public static Code Test_EAX_imm32;
    public static Code Test_RAX_imm32;
    public static Code Stosb_m8_AL;
    public static Code Stosw_m16_AX;
    public static Code Stosd_m32_EAX;
    public static Code Stosq_m64_RAX;
    public static Code Lodsb_AL_m8;
    public static Code Lodsw_AX_m16;
    public static Code Lodsd_EAX_m32;
    public static Code Lodsq_RAX_m64;
    public static Code Scasb_AL_m8;
    public static Code Scasw_AX_m16;
    public static Code Scasd_EAX_m32;
    public static Code Scasq_RAX_m64;
    public static Code Mov_r8_imm8;
    public static Code Mov_r16_imm16;
    public static Code Mov_r32_imm32;
    public static Code Mov_r64_imm64;
    public static Code Rol_rm8_imm8;
    public static Code Ror_rm8_imm8;
    public static Code Rcl_rm8_imm8;
    public static Code Rcr_rm8_imm8;
    public static Code Shl_rm8_imm8;
    public static Code Shr_rm8_imm8;
    public static Code Sal_rm8_imm8;
    public static Code Sar_rm8_imm8;
    public static Code Rol_rm16_imm8;
    public static Code Rol_rm32_imm8;
    public static Code Rol_rm64_imm8;
    public static Code Ror_rm16_imm8;
    public static Code Ror_rm32_imm8;
    public static Code Ror_rm64_imm8;
    public static Code Rcl_rm16_imm8;
    public static Code Rcl_rm32_imm8;
    public static Code Rcl_rm64_imm8;
    public static Code Rcr_rm16_imm8;
    public static Code Rcr_rm32_imm8;
    public static Code Rcr_rm64_imm8;
    public static Code Shl_rm16_imm8;
    public static Code Shl_rm32_imm8;
    public static Code Shl_rm64_imm8;
    public static Code Shr_rm16_imm8;
    public static Code Shr_rm32_imm8;
    public static Code Shr_rm64_imm8;
    public static Code Sal_rm16_imm8;
    public static Code Sal_rm32_imm8;
    public static Code Sal_rm64_imm8;
    public static Code Sar_rm16_imm8;
    public static Code Sar_rm32_imm8;
    public static Code Sar_rm64_imm8;
    public static Code Retnw_imm16;
    public static Code Retnd_imm16;
    public static Code Retnq_imm16;
    public static Code Retnw;
    public static Code Retnd;
    public static Code Retnq;
    public static Code Les_r16_m1616;
    public static Code Les_r32_m1632;
    public static Code Lds_r16_m1616;
    public static Code Lds_r32_m1632;
    public static Code Mov_rm8_imm8;
    public static Code Xabort_imm8;
    public static Code Mov_rm16_imm16;
    public static Code Mov_rm32_imm32;
    public static Code Mov_rm64_imm32;
    public static Code Xbegin_rel16;
    public static Code Xbegin_rel32;
    public static Code Enterw_imm16_imm8;
    public static Code Enterd_imm16_imm8;
    public static Code Enterq_imm16_imm8;
    public static Code Leavew;
    public static Code Leaved;
    public static Code Leaveq;
    public static Code Retfw_imm16;
    public static Code Retfd_imm16;
    public static Code Retfq_imm16;
    public static Code Retfw;
    public static Code Retfd;
    public static Code Retfq;
    public static Code Int3;
    public static Code Int_imm8;
    public static Code Into;
    public static Code Iretw;
    public static Code Iretd;
    public static Code Iretq;
    public static Code Rol_rm8_1;
    public static Code Ror_rm8_1;
    public static Code Rcl_rm8_1;
    public static Code Rcr_rm8_1;
    public static Code Shl_rm8_1;
    public static Code Shr_rm8_1;
    public static Code Sal_rm8_1;
    public static Code Sar_rm8_1;
    public static Code Rol_rm16_1;
    public static Code Rol_rm32_1;
    public static Code Rol_rm64_1;
    public static Code Ror_rm16_1;
    public static Code Ror_rm32_1;
    public static Code Ror_rm64_1;
    public static Code Rcl_rm16_1;
    public static Code Rcl_rm32_1;
    public static Code Rcl_rm64_1;
    public static Code Rcr_rm16_1;
    public static Code Rcr_rm32_1;
    public static Code Rcr_rm64_1;
    public static Code Shl_rm16_1;
    public static Code Shl_rm32_1;
    public static Code Shl_rm64_1;
    public static Code Shr_rm16_1;
    public static Code Shr_rm32_1;
    public static Code Shr_rm64_1;
    public static Code Sal_rm16_1;
    public static Code Sal_rm32_1;
    public static Code Sal_rm64_1;
    public static Code Sar_rm16_1;
    public static Code Sar_rm32_1;
    public static Code Sar_rm64_1;
    public static Code Rol_rm8_CL;
    public static Code Ror_rm8_CL;
    public static Code Rcl_rm8_CL;
    public static Code Rcr_rm8_CL;
    public static Code Shl_rm8_CL;
    public static Code Shr_rm8_CL;
    public static Code Sal_rm8_CL;
    public static Code Sar_rm8_CL;
    public static Code Rol_rm16_CL;
    public static Code Rol_rm32_CL;
    public static Code Rol_rm64_CL;
    public static Code Ror_rm16_CL;
    public static Code Ror_rm32_CL;
    public static Code Ror_rm64_CL;
    public static Code Rcl_rm16_CL;
    public static Code Rcl_rm32_CL;
    public static Code Rcl_rm64_CL;
    public static Code Rcr_rm16_CL;
    public static Code Rcr_rm32_CL;
    public static Code Rcr_rm64_CL;
    public static Code Shl_rm16_CL;
    public static Code Shl_rm32_CL;
    public static Code Shl_rm64_CL;
    public static Code Shr_rm16_CL;
    public static Code Shr_rm32_CL;
    public static Code Shr_rm64_CL;
    public static Code Sal_rm16_CL;
    public static Code Sal_rm32_CL;
    public static Code Sal_rm64_CL;
    public static Code Sar_rm16_CL;
    public static Code Sar_rm32_CL;
    public static Code Sar_rm64_CL;
    public static Code Aam_imm8;
    public static Code Aad_imm8;
    public static Code Salc;
    public static Code Xlat_m8;
    public static Code Fadd_m32fp;
    public static Code Fmul_m32fp;
    public static Code Fcom_m32fp;
    public static Code Fcomp_m32fp;
    public static Code Fsub_m32fp;
    public static Code Fsubr_m32fp;
    public static Code Fdiv_m32fp;
    public static Code Fdivr_m32fp;
    public static Code Fadd_st0_sti;
    public static Code Fmul_st0_sti;
    public static Code Fcom_st0_sti;
    public static Code Fcomp_st0_sti;
    public static Code Fsub_st0_sti;
    public static Code Fsubr_st0_sti;
    public static Code Fdiv_st0_sti;
    public static Code Fdivr_st0_sti;
    public static Code Fld_m32fp;
    public static Code Fst_m32fp;
    public static Code Fstp_m32fp;
    public static Code Fldenv_m14byte;
    public static Code Fldenv_m28byte;
    public static Code Fldcw_m2byte;
    public static Code Fnstenv_m14byte;
    public static Code Fstenv_m14byte;
    public static Code Fnstenv_m28byte;
    public static Code Fstenv_m28byte;
    public static Code Fnstcw_m2byte;
    public static Code Fstcw_m2byte;
    public static Code Fld_sti;
    public static Code Fxch_st0_sti;
    public static Code Fnop;
    public static Code Fstpnce_sti;
    public static Code Fchs;
    public static Code Fabs;
    public static Code Ftst;
    public static Code Fxam;
    public static Code Fld1;
    public static Code Fldl2t;
    public static Code Fldl2e;
    public static Code Fldpi;
    public static Code Fldlg2;
    public static Code Fldln2;
    public static Code Fldz;
    public static Code F2xm1;
    public static Code Fyl2x;
    public static Code Fptan;
    public static Code Fpatan;
    public static Code Fxtract;
    public static Code Fprem1;
    public static Code Fdecstp;
    public static Code Fincstp;
    public static Code Fprem;
    public static Code Fyl2xp1;
    public static Code Fsqrt;
    public static Code Fsincos;
    public static Code Frndint;
    public static Code Fscale;
    public static Code Fsin;
    public static Code Fcos;
    public static Code Fiadd_m32int;
    public static Code Fimul_m32int;
    public static Code Ficom_m32int;
    public static Code Ficomp_m32int;
    public static Code Fisub_m32int;
    public static Code Fisubr_m32int;
    public static Code Fidiv_m32int;
    public static Code Fidivr_m32int;
    public static Code Fcmovb_st0_sti;
    public static Code Fcmove_st0_sti;
    public static Code Fcmovbe_st0_sti;
    public static Code Fcmovu_st0_sti;
    public static Code Fucompp;
    public static Code Fild_m32int;
    public static Code Fisttp_m32int;
    public static Code Fist_m32int;
    public static Code Fistp_m32int;
    public static Code Fld_m80fp;
    public static Code Fstp_m80fp;
    public static Code Fcmovnb_st0_sti;
    public static Code Fcmovne_st0_sti;
    public static Code Fcmovnbe_st0_sti;
    public static Code Fcmovnu_st0_sti;
    public static Code Fneni;
    public static Code Feni;
    public static Code Fndisi;
    public static Code Fdisi;
    public static Code Fnclex;
    public static Code Fclex;
    public static Code Fninit;
    public static Code Finit;
    public static Code Fnsetpm;
    public static Code Fsetpm;
    public static Code Frstpm;
    public static Code Fucomi_st0_sti;
    public static Code Fcomi_st0_sti;
    public static Code Fadd_m64fp;
    public static Code Fmul_m64fp;
    public static Code Fcom_m64fp;
    public static Code Fcomp_m64fp;
    public static Code Fsub_m64fp;
    public static Code Fsubr_m64fp;
    public static Code Fdiv_m64fp;
    public static Code Fdivr_m64fp;
    public static Code Fadd_sti_st0;
    public static Code Fmul_sti_st0;
    public static Code Fcom_st0_sti_DCD0;
    public static Code Fcomp_st0_sti_DCD8;
    public static Code Fsubr_sti_st0;
    public static Code Fsub_sti_st0;
    public static Code Fdivr_sti_st0;
    public static Code Fdiv_sti_st0;
    public static Code Fld_m64fp;
    public static Code Fisttp_m64int;
    public static Code Fst_m64fp;
    public static Code Fstp_m64fp;
    public static Code Frstor_m94byte;
    public static Code Frstor_m108byte;
    public static Code Fnsave_m94byte;
    public static Code Fsave_m94byte;
    public static Code Fnsave_m108byte;
    public static Code Fsave_m108byte;
    public static Code Fnstsw_m2byte;
    public static Code Fstsw_m2byte;
    public static Code Ffree_sti;
    public static Code Fxch_st0_sti_DDC8;
    public static Code Fst_sti;
    public static Code Fstp_sti;
    public static Code Fucom_st0_sti;
    public static Code Fucomp_st0_sti;
    public static Code Fiadd_m16int;
    public static Code Fimul_m16int;
    public static Code Ficom_m16int;
    public static Code Ficomp_m16int;
    public static Code Fisub_m16int;
    public static Code Fisubr_m16int;
    public static Code Fidiv_m16int;
    public static Code Fidivr_m16int;
    public static Code Faddp_sti_st0;
    public static Code Fmulp_sti_st0;
    public static Code Fcomp_st0_sti_DED0;
    public static Code Fcompp;
    public static Code Fsubrp_sti_st0;
    public static Code Fsubp_sti_st0;
    public static Code Fdivrp_sti_st0;
    public static Code Fdivp_sti_st0;
    public static Code Fild_m16int;
    public static Code Fisttp_m16int;
    public static Code Fist_m16int;
    public static Code Fistp_m16int;
    public static Code Fbld_m80bcd;
    public static Code Fild_m64int;
    public static Code Fbstp_m80bcd;
    public static Code Fistp_m64int;
    public static Code Ffreep_sti;
    public static Code Fxch_st0_sti_DFC8;
    public static Code Fstp_sti_DFD0;
    public static Code Fstp_sti_DFD8;
    public static Code Fnstsw_AX;
    public static Code Fstsw_AX;
    public static Code Fstdw_AX;
    public static Code Fstsg_AX;
    public static Code Fucomip_st0_sti;
    public static Code Fcomip_st0_sti;
    public static Code Loopne_rel8_16_CX;
    public static Code Loopne_rel8_32_CX;
    public static Code Loopne_rel8_16_ECX;
    public static Code Loopne_rel8_32_ECX;
    public static Code Loopne_rel8_64_ECX;
    public static Code Loopne_rel8_16_RCX;
    public static Code Loopne_rel8_64_RCX;
    public static Code Loope_rel8_16_CX;
    public static Code Loope_rel8_32_CX;
    public static Code Loope_rel8_16_ECX;
    public static Code Loope_rel8_32_ECX;
    public static Code Loope_rel8_64_ECX;
    public static Code Loope_rel8_16_RCX;
    public static Code Loope_rel8_64_RCX;
    public static Code Loop_rel8_16_CX;
    public static Code Loop_rel8_32_CX;
    public static Code Loop_rel8_16_ECX;
    public static Code Loop_rel8_32_ECX;
    public static Code Loop_rel8_64_ECX;
    public static Code Loop_rel8_16_RCX;
    public static Code Loop_rel8_64_RCX;
    public static Code Jcxz_rel8_16;
    public static Code Jcxz_rel8_32;
    public static Code Jecxz_rel8_16;
    public static Code Jecxz_rel8_32;
    public static Code Jecxz_rel8_64;
    public static Code Jrcxz_rel8_16;
    public static Code Jrcxz_rel8_64;
    public static Code In_AL_imm8;
    public static Code In_AX_imm8;
    public static Code In_EAX_imm8;
    public static Code Out_imm8_AL;
    public static Code Out_imm8_AX;
    public static Code Out_imm8_EAX;
    public static Code Call_rel16;
    public static Code Call_rel32_32;
    public static Code Call_rel32_64;
    public static Code Jmp_rel16;
    public static Code Jmp_rel32_32;
    public static Code Jmp_rel32_64;
    public static Code Jmp_ptr1616;
    public static Code Jmp_ptr1632;
    public static Code Jmp_rel8_16;
    public static Code Jmp_rel8_32;
    public static Code Jmp_rel8_64;
    public static Code In_AL_DX;
    public static Code In_AX_DX;
    public static Code In_EAX_DX;
    public static Code Out_DX_AL;
    public static Code Out_DX_AX;
    public static Code Out_DX_EAX;
    public static Code Int1;
    public static Code Hlt;
    public static Code Cmc;
    public static Code Test_rm8_imm8;
    public static Code Test_rm8_imm8_F6r1;
    public static Code Not_rm8;
    public static Code Neg_rm8;
    public static Code Mul_rm8;
    public static Code Imul_rm8;
    public static Code Div_rm8;
    public static Code Idiv_rm8;
    public static Code Test_rm16_imm16;
    public static Code Test_rm32_imm32;
    public static Code Test_rm64_imm32;
    public static Code Test_rm16_imm16_F7r1;
    public static Code Test_rm32_imm32_F7r1;
    public static Code Test_rm64_imm32_F7r1;
    public static Code Not_rm16;
    public static Code Not_rm32;
    public static Code Not_rm64;
    public static Code Neg_rm16;
    public static Code Neg_rm32;
    public static Code Neg_rm64;
    public static Code Mul_rm16;
    public static Code Mul_rm32;
    public static Code Mul_rm64;
    public static Code Imul_rm16;
    public static Code Imul_rm32;
    public static Code Imul_rm64;
    public static Code Div_rm16;
    public static Code Div_rm32;
    public static Code Div_rm64;
    public static Code Idiv_rm16;
    public static Code Idiv_rm32;
    public static Code Idiv_rm64;
    public static Code Clc;
    public static Code Stc;
    public static Code Cli;
    public static Code Sti;
    public static Code Cld;
    public static Code Std;
    public static Code Inc_rm8;
    public static Code Dec_rm8;
    public static Code Inc_rm16;
    public static Code Inc_rm32;
    public static Code Inc_rm64;
    public static Code Dec_rm16;
    public static Code Dec_rm32;
    public static Code Dec_rm64;
    public static Code Call_rm16;
    public static Code Call_rm32;
    public static Code Call_rm64;
    public static Code Call_m1616;
    public static Code Call_m1632;
    public static Code Call_m1664;
    public static Code Jmp_rm16;
    public static Code Jmp_rm32;
    public static Code Jmp_rm64;
    public static Code Jmp_m1616;
    public static Code Jmp_m1632;
    public static Code Jmp_m1664;
    public static Code Push_rm16;
    public static Code Push_rm32;
    public static Code Push_rm64;
    public static Code Sldt_rm16;
    public static Code Sldt_r32m16;
    public static Code Sldt_r64m16;
    public static Code Str_rm16;
    public static Code Str_r32m16;
    public static Code Str_r64m16;
    public static Code Lldt_rm16;
    public static Code Lldt_r32m16;
    public static Code Lldt_r64m16;
    public static Code Ltr_rm16;
    public static Code Ltr_r32m16;
    public static Code Ltr_r64m16;
    public static Code Verr_rm16;
    public static Code Verr_r32m16;
    public static Code Verr_r64m16;
    public static Code Verw_rm16;
    public static Code Verw_r32m16;
    public static Code Verw_r64m16;
    public static Code Jmpe_rm16;
    public static Code Jmpe_rm32;
    public static Code Sgdt_m1632_16;
    public static Code Sgdt_m1632;
    public static Code Sgdt_m1664;
    public static Code Sidt_m1632_16;
    public static Code Sidt_m1632;
    public static Code Sidt_m1664;
    public static Code Lgdt_m1632_16;
    public static Code Lgdt_m1632;
    public static Code Lgdt_m1664;
    public static Code Lidt_m1632_16;
    public static Code Lidt_m1632;
    public static Code Lidt_m1664;
    public static Code Smsw_rm16;
    public static Code Smsw_r32m16;
    public static Code Smsw_r64m16;
    public static Code Rstorssp_m64;
    public static Code Lmsw_rm16;
    public static Code Lmsw_r32m16;
    public static Code Lmsw_r64m16;
    public static Code Invlpg_m;
    public static Code Enclv;
    public static Code Vmcall;
    public static Code Vmlaunch;
    public static Code Vmresume;
    public static Code Vmxoff;
    public static Code Pconfig;
    public static Code Monitorw;
    public static Code Monitord;
    public static Code Monitorq;
    public static Code Mwait;
    public static Code Clac;
    public static Code Stac;
    public static Code Encls;
    public static Code Xgetbv;
    public static Code Xsetbv;
    public static Code Vmfunc;
    public static Code Xend;
    public static Code Xtest;
    public static Code Enclu;
    public static Code Vmrunw;
    public static Code Vmrund;
    public static Code Vmrunq;
    public static Code Vmmcall;
    public static Code Vmloadw;
    public static Code Vmloadd;
    public static Code Vmloadq;
    public static Code Vmsavew;
    public static Code Vmsaved;
    public static Code Vmsaveq;
    public static Code Stgi;
    public static Code Clgi;
    public static Code Skinit;
    public static Code Invlpgaw;
    public static Code Invlpgad;
    public static Code Invlpgaq;
    public static Code Setssbsy;
    public static Code Saveprevssp;
    public static Code Rdpkru;
    public static Code Wrpkru;
    public static Code Swapgs;
    public static Code Rdtscp;
    public static Code Monitorxw;
    public static Code Monitorxd;
    public static Code Monitorxq;
    public static Code Mcommit;
    public static Code Mwaitx;
    public static Code Clzerow;
    public static Code Clzerod;
    public static Code Clzeroq;
    public static Code Rdpru;
    public static Code Lar_r16_rm16;
    public static Code Lar_r32_r32m16;
    public static Code Lar_r64_r64m16;
    public static Code Lsl_r16_rm16;
    public static Code Lsl_r32_r32m16;
    public static Code Lsl_r64_r64m16;
    public static Code Storeall;
    public static Code Loadall286;
    public static Code Syscall;
    public static Code Clts;
    public static Code Loadall386;
    public static Code Sysretd;
    public static Code Sysretq;
    public static Code Invd;
    public static Code Wbinvd;
    public static Code Wbnoinvd;
    public static Code Cl1invmb;
    public static Code Ud2;
    public static Code Reservednop_rm16_r16_0F0D;
    public static Code Reservednop_rm32_r32_0F0D;
    public static Code Reservednop_rm64_r64_0F0D;
    public static Code Prefetch_m8;
    public static Code Prefetchw_m8;
    public static Code Prefetchwt1_m8;
    public static Code Femms;
    public static Code Umov_rm8_r8;
    public static Code Umov_rm16_r16;
    public static Code Umov_rm32_r32;
    public static Code Umov_r8_rm8;
    public static Code Umov_r16_rm16;
    public static Code Umov_r32_rm32;
    public static Code Movups_xmm_xmmm128;
    public static Code VEX_Vmovups_xmm_xmmm128;
    public static Code VEX_Vmovups_ymm_ymmm256;
    public static Code EVEX_Vmovups_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovups_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovups_zmm_k1z_zmmm512;
    public static Code Movupd_xmm_xmmm128;
    public static Code VEX_Vmovupd_xmm_xmmm128;
    public static Code VEX_Vmovupd_ymm_ymmm256;
    public static Code EVEX_Vmovupd_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovupd_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovupd_zmm_k1z_zmmm512;
    public static Code Movss_xmm_xmmm32;
    public static Code VEX_Vmovss_xmm_xmm_xmm;
    public static Code VEX_Vmovss_xmm_m32;
    public static Code EVEX_Vmovss_xmm_k1z_xmm_xmm;
    public static Code EVEX_Vmovss_xmm_k1z_m32;
    public static Code Movsd_xmm_xmmm64;
    public static Code VEX_Vmovsd_xmm_xmm_xmm;
    public static Code VEX_Vmovsd_xmm_m64;
    public static Code EVEX_Vmovsd_xmm_k1z_xmm_xmm;
    public static Code EVEX_Vmovsd_xmm_k1z_m64;
    public static Code Movups_xmmm128_xmm;
    public static Code VEX_Vmovups_xmmm128_xmm;
    public static Code VEX_Vmovups_ymmm256_ymm;
    public static Code EVEX_Vmovups_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovups_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovups_zmmm512_k1z_zmm;
    public static Code Movupd_xmmm128_xmm;
    public static Code VEX_Vmovupd_xmmm128_xmm;
    public static Code VEX_Vmovupd_ymmm256_ymm;
    public static Code EVEX_Vmovupd_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovupd_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovupd_zmmm512_k1z_zmm;
    public static Code Movss_xmmm32_xmm;
    public static Code VEX_Vmovss_xmm_xmm_xmm_0F11;
    public static Code VEX_Vmovss_m32_xmm;
    public static Code EVEX_Vmovss_xmm_k1z_xmm_xmm_0F11;
    public static Code EVEX_Vmovss_m32_k1_xmm;
    public static Code Movsd_xmmm64_xmm;
    public static Code VEX_Vmovsd_xmm_xmm_xmm_0F11;
    public static Code VEX_Vmovsd_m64_xmm;
    public static Code EVEX_Vmovsd_xmm_k1z_xmm_xmm_0F11;
    public static Code EVEX_Vmovsd_m64_k1_xmm;
    public static Code Movhlps_xmm_xmm;
    public static Code Movlps_xmm_m64;
    public static Code VEX_Vmovhlps_xmm_xmm_xmm;
    public static Code VEX_Vmovlps_xmm_xmm_m64;
    public static Code EVEX_Vmovhlps_xmm_xmm_xmm;
    public static Code EVEX_Vmovlps_xmm_xmm_m64;
    public static Code Movlpd_xmm_m64;
    public static Code VEX_Vmovlpd_xmm_xmm_m64;
    public static Code EVEX_Vmovlpd_xmm_xmm_m64;
    public static Code Movsldup_xmm_xmmm128;
    public static Code VEX_Vmovsldup_xmm_xmmm128;
    public static Code VEX_Vmovsldup_ymm_ymmm256;
    public static Code EVEX_Vmovsldup_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovsldup_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovsldup_zmm_k1z_zmmm512;
    public static Code Movddup_xmm_xmmm64;
    public static Code VEX_Vmovddup_xmm_xmmm64;
    public static Code VEX_Vmovddup_ymm_ymmm256;
    public static Code EVEX_Vmovddup_xmm_k1z_xmmm64;
    public static Code EVEX_Vmovddup_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovddup_zmm_k1z_zmmm512;
    public static Code Movlps_m64_xmm;
    public static Code VEX_Vmovlps_m64_xmm;
    public static Code EVEX_Vmovlps_m64_xmm;
    public static Code Movlpd_m64_xmm;
    public static Code VEX_Vmovlpd_m64_xmm;
    public static Code EVEX_Vmovlpd_m64_xmm;
    public static Code Unpcklps_xmm_xmmm128;
    public static Code VEX_Vunpcklps_xmm_xmm_xmmm128;
    public static Code VEX_Vunpcklps_ymm_ymm_ymmm256;
    public static Code EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32;
    public static Code Unpcklpd_xmm_xmmm128;
    public static Code VEX_Vunpcklpd_xmm_xmm_xmmm128;
    public static Code VEX_Vunpcklpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64;
    public static Code Unpckhps_xmm_xmmm128;
    public static Code VEX_Vunpckhps_xmm_xmm_xmmm128;
    public static Code VEX_Vunpckhps_ymm_ymm_ymmm256;
    public static Code EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32;
    public static Code Unpckhpd_xmm_xmmm128;
    public static Code VEX_Vunpckhpd_xmm_xmm_xmmm128;
    public static Code VEX_Vunpckhpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64;
    public static Code Movlhps_xmm_xmm;
    public static Code VEX_Vmovlhps_xmm_xmm_xmm;
    public static Code EVEX_Vmovlhps_xmm_xmm_xmm;
    public static Code Movhps_xmm_m64;
    public static Code VEX_Vmovhps_xmm_xmm_m64;
    public static Code EVEX_Vmovhps_xmm_xmm_m64;
    public static Code Movhpd_xmm_m64;
    public static Code VEX_Vmovhpd_xmm_xmm_m64;
    public static Code EVEX_Vmovhpd_xmm_xmm_m64;
    public static Code Movshdup_xmm_xmmm128;
    public static Code VEX_Vmovshdup_xmm_xmmm128;
    public static Code VEX_Vmovshdup_ymm_ymmm256;
    public static Code EVEX_Vmovshdup_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovshdup_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovshdup_zmm_k1z_zmmm512;
    public static Code Movhps_m64_xmm;
    public static Code VEX_Vmovhps_m64_xmm;
    public static Code EVEX_Vmovhps_m64_xmm;
    public static Code Movhpd_m64_xmm;
    public static Code VEX_Vmovhpd_m64_xmm;
    public static Code EVEX_Vmovhpd_m64_xmm;
    public static Code Reservednop_rm16_r16_0F18;
    public static Code Reservednop_rm32_r32_0F18;
    public static Code Reservednop_rm64_r64_0F18;
    public static Code Reservednop_rm16_r16_0F19;
    public static Code Reservednop_rm32_r32_0F19;
    public static Code Reservednop_rm64_r64_0F19;
    public static Code Reservednop_rm16_r16_0F1A;
    public static Code Reservednop_rm32_r32_0F1A;
    public static Code Reservednop_rm64_r64_0F1A;
    public static Code Reservednop_rm16_r16_0F1B;
    public static Code Reservednop_rm32_r32_0F1B;
    public static Code Reservednop_rm64_r64_0F1B;
    public static Code Reservednop_rm16_r16_0F1C;
    public static Code Reservednop_rm32_r32_0F1C;
    public static Code Reservednop_rm64_r64_0F1C;
    public static Code Reservednop_rm16_r16_0F1D;
    public static Code Reservednop_rm32_r32_0F1D;
    public static Code Reservednop_rm64_r64_0F1D;
    public static Code Reservednop_rm16_r16_0F1E;
    public static Code Reservednop_rm32_r32_0F1E;
    public static Code Reservednop_rm64_r64_0F1E;
    public static Code Reservednop_rm16_r16_0F1F;
    public static Code Reservednop_rm32_r32_0F1F;
    public static Code Reservednop_rm64_r64_0F1F;
    public static Code Prefetchnta_m8;
    public static Code Prefetcht0_m8;
    public static Code Prefetcht1_m8;
    public static Code Prefetcht2_m8;
    public static Code Bndldx_bnd_mib;
    public static Code Bndmov_bnd_bndm64;
    public static Code Bndmov_bnd_bndm128;
    public static Code Bndcl_bnd_rm32;
    public static Code Bndcl_bnd_rm64;
    public static Code Bndcu_bnd_rm32;
    public static Code Bndcu_bnd_rm64;
    public static Code Bndstx_mib_bnd;
    public static Code Bndmov_bndm64_bnd;
    public static Code Bndmov_bndm128_bnd;
    public static Code Bndmk_bnd_m32;
    public static Code Bndmk_bnd_m64;
    public static Code Bndcn_bnd_rm32;
    public static Code Bndcn_bnd_rm64;
    public static Code Cldemote_m8;
    public static Code Rdsspd_r32;
    public static Code Rdsspq_r64;
    public static Code Endbr64;
    public static Code Endbr32;
    public static Code Nop_rm16;
    public static Code Nop_rm32;
    public static Code Nop_rm64;
    public static Code Mov_r32_cr;
    public static Code Mov_r64_cr;
    public static Code Mov_r32_dr;
    public static Code Mov_r64_dr;
    public static Code Mov_cr_r32;
    public static Code Mov_cr_r64;
    public static Code Mov_dr_r32;
    public static Code Mov_dr_r64;
    public static Code Mov_r32_tr;
    public static Code Mov_tr_r32;
    public static Code Movaps_xmm_xmmm128;
    public static Code VEX_Vmovaps_xmm_xmmm128;
    public static Code VEX_Vmovaps_ymm_ymmm256;
    public static Code EVEX_Vmovaps_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovaps_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovaps_zmm_k1z_zmmm512;
    public static Code Movapd_xmm_xmmm128;
    public static Code VEX_Vmovapd_xmm_xmmm128;
    public static Code VEX_Vmovapd_ymm_ymmm256;
    public static Code EVEX_Vmovapd_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovapd_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovapd_zmm_k1z_zmmm512;
    public static Code Movaps_xmmm128_xmm;
    public static Code VEX_Vmovaps_xmmm128_xmm;
    public static Code VEX_Vmovaps_ymmm256_ymm;
    public static Code EVEX_Vmovaps_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovaps_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovaps_zmmm512_k1z_zmm;
    public static Code Movapd_xmmm128_xmm;
    public static Code VEX_Vmovapd_xmmm128_xmm;
    public static Code VEX_Vmovapd_ymmm256_ymm;
    public static Code EVEX_Vmovapd_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovapd_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovapd_zmmm512_k1z_zmm;
    public static Code Cvtpi2ps_xmm_mmm64;
    public static Code Cvtpi2pd_xmm_mmm64;
    public static Code Cvtsi2ss_xmm_rm32;
    public static Code Cvtsi2ss_xmm_rm64;
    public static Code VEX_Vcvtsi2ss_xmm_xmm_rm32;
    public static Code VEX_Vcvtsi2ss_xmm_xmm_rm64;
    public static Code EVEX_Vcvtsi2ss_xmm_xmm_rm32_er;
    public static Code EVEX_Vcvtsi2ss_xmm_xmm_rm64_er;
    public static Code Cvtsi2sd_xmm_rm32;
    public static Code Cvtsi2sd_xmm_rm64;
    public static Code VEX_Vcvtsi2sd_xmm_xmm_rm32;
    public static Code VEX_Vcvtsi2sd_xmm_xmm_rm64;
    public static Code EVEX_Vcvtsi2sd_xmm_xmm_rm32_er;
    public static Code EVEX_Vcvtsi2sd_xmm_xmm_rm64_er;
    public static Code Movntps_m128_xmm;
    public static Code VEX_Vmovntps_m128_xmm;
    public static Code VEX_Vmovntps_m256_ymm;
    public static Code EVEX_Vmovntps_m128_xmm;
    public static Code EVEX_Vmovntps_m256_ymm;
    public static Code EVEX_Vmovntps_m512_zmm;
    public static Code Movntpd_m128_xmm;
    public static Code VEX_Vmovntpd_m128_xmm;
    public static Code VEX_Vmovntpd_m256_ymm;
    public static Code EVEX_Vmovntpd_m128_xmm;
    public static Code EVEX_Vmovntpd_m256_ymm;
    public static Code EVEX_Vmovntpd_m512_zmm;
    public static Code Movntss_m32_xmm;
    public static Code Movntsd_m64_xmm;
    public static Code Cvttps2pi_mm_xmmm64;
    public static Code Cvttpd2pi_mm_xmmm128;
    public static Code Cvttss2si_r32_xmmm32;
    public static Code Cvttss2si_r64_xmmm32;
    public static Code VEX_Vcvttss2si_r32_xmmm32;
    public static Code VEX_Vcvttss2si_r64_xmmm32;
    public static Code EVEX_Vcvttss2si_r32_xmmm32_sae;
    public static Code EVEX_Vcvttss2si_r64_xmmm32_sae;
    public static Code Cvttsd2si_r32_xmmm64;
    public static Code Cvttsd2si_r64_xmmm64;
    public static Code VEX_Vcvttsd2si_r32_xmmm64;
    public static Code VEX_Vcvttsd2si_r64_xmmm64;
    public static Code EVEX_Vcvttsd2si_r32_xmmm64_sae;
    public static Code EVEX_Vcvttsd2si_r64_xmmm64_sae;
    public static Code Cvtps2pi_mm_xmmm64;
    public static Code Cvtpd2pi_mm_xmmm128;
    public static Code Cvtss2si_r32_xmmm32;
    public static Code Cvtss2si_r64_xmmm32;
    public static Code VEX_Vcvtss2si_r32_xmmm32;
    public static Code VEX_Vcvtss2si_r64_xmmm32;
    public static Code EVEX_Vcvtss2si_r32_xmmm32_er;
    public static Code EVEX_Vcvtss2si_r64_xmmm32_er;
    public static Code Cvtsd2si_r32_xmmm64;
    public static Code Cvtsd2si_r64_xmmm64;
    public static Code VEX_Vcvtsd2si_r32_xmmm64;
    public static Code VEX_Vcvtsd2si_r64_xmmm64;
    public static Code EVEX_Vcvtsd2si_r32_xmmm64_er;
    public static Code EVEX_Vcvtsd2si_r64_xmmm64_er;
    public static Code Ucomiss_xmm_xmmm32;
    public static Code VEX_Vucomiss_xmm_xmmm32;
    public static Code EVEX_Vucomiss_xmm_xmmm32_sae;
    public static Code Ucomisd_xmm_xmmm64;
    public static Code VEX_Vucomisd_xmm_xmmm64;
    public static Code EVEX_Vucomisd_xmm_xmmm64_sae;
    public static Code Comiss_xmm_xmmm32;
    public static Code Comisd_xmm_xmmm64;
    public static Code VEX_Vcomiss_xmm_xmmm32;
    public static Code VEX_Vcomisd_xmm_xmmm64;
    public static Code EVEX_Vcomiss_xmm_xmmm32_sae;
    public static Code EVEX_Vcomisd_xmm_xmmm64_sae;
    public static Code Wrmsr;
    public static Code Rdtsc;
    public static Code Rdmsr;
    public static Code Rdpmc;
    public static Code Sysenter;
    public static Code Sysexitd;
    public static Code Sysexitq;
    public static Code Getsecd;
    public static Code Cmovo_r16_rm16;
    public static Code Cmovo_r32_rm32;
    public static Code Cmovo_r64_rm64;
    public static Code Cmovno_r16_rm16;
    public static Code Cmovno_r32_rm32;
    public static Code Cmovno_r64_rm64;
    public static Code Cmovb_r16_rm16;
    public static Code Cmovb_r32_rm32;
    public static Code Cmovb_r64_rm64;
    public static Code Cmovae_r16_rm16;
    public static Code Cmovae_r32_rm32;
    public static Code Cmovae_r64_rm64;
    public static Code Cmove_r16_rm16;
    public static Code Cmove_r32_rm32;
    public static Code Cmove_r64_rm64;
    public static Code Cmovne_r16_rm16;
    public static Code Cmovne_r32_rm32;
    public static Code Cmovne_r64_rm64;
    public static Code Cmovbe_r16_rm16;
    public static Code Cmovbe_r32_rm32;
    public static Code Cmovbe_r64_rm64;
    public static Code Cmova_r16_rm16;
    public static Code Cmova_r32_rm32;
    public static Code Cmova_r64_rm64;
    public static Code Cmovs_r16_rm16;
    public static Code Cmovs_r32_rm32;
    public static Code Cmovs_r64_rm64;
    public static Code Cmovns_r16_rm16;
    public static Code Cmovns_r32_rm32;
    public static Code Cmovns_r64_rm64;
    public static Code Cmovp_r16_rm16;
    public static Code Cmovp_r32_rm32;
    public static Code Cmovp_r64_rm64;
    public static Code Cmovnp_r16_rm16;
    public static Code Cmovnp_r32_rm32;
    public static Code Cmovnp_r64_rm64;
    public static Code Cmovl_r16_rm16;
    public static Code Cmovl_r32_rm32;
    public static Code Cmovl_r64_rm64;
    public static Code Cmovge_r16_rm16;
    public static Code Cmovge_r32_rm32;
    public static Code Cmovge_r64_rm64;
    public static Code Cmovle_r16_rm16;
    public static Code Cmovle_r32_rm32;
    public static Code Cmovle_r64_rm64;
    public static Code Cmovg_r16_rm16;
    public static Code Cmovg_r32_rm32;
    public static Code Cmovg_r64_rm64;
    public static Code VEX_Kandw_kr_kr_kr;
    public static Code VEX_Kandq_kr_kr_kr;
    public static Code VEX_Kandb_kr_kr_kr;
    public static Code VEX_Kandd_kr_kr_kr;
    public static Code VEX_Kandnw_kr_kr_kr;
    public static Code VEX_Kandnq_kr_kr_kr;
    public static Code VEX_Kandnb_kr_kr_kr;
    public static Code VEX_Kandnd_kr_kr_kr;
    public static Code VEX_Knotw_kr_kr;
    public static Code VEX_Knotq_kr_kr;
    public static Code VEX_Knotb_kr_kr;
    public static Code VEX_Knotd_kr_kr;
    public static Code VEX_Korw_kr_kr_kr;
    public static Code VEX_Korq_kr_kr_kr;
    public static Code VEX_Korb_kr_kr_kr;
    public static Code VEX_Kord_kr_kr_kr;
    public static Code VEX_Kxnorw_kr_kr_kr;
    public static Code VEX_Kxnorq_kr_kr_kr;
    public static Code VEX_Kxnorb_kr_kr_kr;
    public static Code VEX_Kxnord_kr_kr_kr;
    public static Code VEX_Kxorw_kr_kr_kr;
    public static Code VEX_Kxorq_kr_kr_kr;
    public static Code VEX_Kxorb_kr_kr_kr;
    public static Code VEX_Kxord_kr_kr_kr;
    public static Code VEX_Kaddw_kr_kr_kr;
    public static Code VEX_Kaddq_kr_kr_kr;
    public static Code VEX_Kaddb_kr_kr_kr;
    public static Code VEX_Kaddd_kr_kr_kr;
    public static Code VEX_Kunpckwd_kr_kr_kr;
    public static Code VEX_Kunpckdq_kr_kr_kr;
    public static Code VEX_Kunpckbw_kr_kr_kr;
    public static Code Movmskps_r32_xmm;
    public static Code Movmskps_r64_xmm;
    public static Code VEX_Vmovmskps_r32_xmm;
    public static Code VEX_Vmovmskps_r64_xmm;
    public static Code VEX_Vmovmskps_r32_ymm;
    public static Code VEX_Vmovmskps_r64_ymm;
    public static Code Movmskpd_r32_xmm;
    public static Code Movmskpd_r64_xmm;
    public static Code VEX_Vmovmskpd_r32_xmm;
    public static Code VEX_Vmovmskpd_r64_xmm;
    public static Code VEX_Vmovmskpd_r32_ymm;
    public static Code VEX_Vmovmskpd_r64_ymm;
    public static Code Sqrtps_xmm_xmmm128;
    public static Code VEX_Vsqrtps_xmm_xmmm128;
    public static Code VEX_Vsqrtps_ymm_ymmm256;
    public static Code EVEX_Vsqrtps_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vsqrtps_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er;
    public static Code Sqrtpd_xmm_xmmm128;
    public static Code VEX_Vsqrtpd_xmm_xmmm128;
    public static Code VEX_Vsqrtpd_ymm_ymmm256;
    public static Code EVEX_Vsqrtpd_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vsqrtpd_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er;
    public static Code Sqrtss_xmm_xmmm32;
    public static Code VEX_Vsqrtss_xmm_xmm_xmmm32;
    public static Code EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er;
    public static Code Sqrtsd_xmm_xmmm64;
    public static Code VEX_Vsqrtsd_xmm_xmm_xmmm64;
    public static Code EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er;
    public static Code Rsqrtps_xmm_xmmm128;
    public static Code VEX_Vrsqrtps_xmm_xmmm128;
    public static Code VEX_Vrsqrtps_ymm_ymmm256;
    public static Code Rsqrtss_xmm_xmmm32;
    public static Code VEX_Vrsqrtss_xmm_xmm_xmmm32;
    public static Code Rcpps_xmm_xmmm128;
    public static Code VEX_Vrcpps_xmm_xmmm128;
    public static Code VEX_Vrcpps_ymm_ymmm256;
    public static Code Rcpss_xmm_xmmm32;
    public static Code VEX_Vrcpss_xmm_xmm_xmmm32;
    public static Code Andps_xmm_xmmm128;
    public static Code VEX_Vandps_xmm_xmm_xmmm128;
    public static Code VEX_Vandps_ymm_ymm_ymmm256;
    public static Code EVEX_Vandps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vandps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vandps_zmm_k1z_zmm_zmmm512b32;
    public static Code Andpd_xmm_xmmm128;
    public static Code VEX_Vandpd_xmm_xmm_xmmm128;
    public static Code VEX_Vandpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64;
    public static Code Andnps_xmm_xmmm128;
    public static Code VEX_Vandnps_xmm_xmm_xmmm128;
    public static Code VEX_Vandnps_ymm_ymm_ymmm256;
    public static Code EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32;
    public static Code Andnpd_xmm_xmmm128;
    public static Code VEX_Vandnpd_xmm_xmm_xmmm128;
    public static Code VEX_Vandnpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64;
    public static Code Orps_xmm_xmmm128;
    public static Code VEX_Vorps_xmm_xmm_xmmm128;
    public static Code VEX_Vorps_ymm_ymm_ymmm256;
    public static Code EVEX_Vorps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vorps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vorps_zmm_k1z_zmm_zmmm512b32;
    public static Code Orpd_xmm_xmmm128;
    public static Code VEX_Vorpd_xmm_xmm_xmmm128;
    public static Code VEX_Vorpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64;
    public static Code Xorps_xmm_xmmm128;
    public static Code VEX_Vxorps_xmm_xmm_xmmm128;
    public static Code VEX_Vxorps_ymm_ymm_ymmm256;
    public static Code EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32;
    public static Code Xorpd_xmm_xmmm128;
    public static Code VEX_Vxorpd_xmm_xmm_xmmm128;
    public static Code VEX_Vxorpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64;
    public static Code Addps_xmm_xmmm128;
    public static Code VEX_Vaddps_xmm_xmm_xmmm128;
    public static Code VEX_Vaddps_ymm_ymm_ymmm256;
    public static Code EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code Addpd_xmm_xmmm128;
    public static Code VEX_Vaddpd_xmm_xmm_xmmm128;
    public static Code VEX_Vaddpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code Addss_xmm_xmmm32;
    public static Code VEX_Vaddss_xmm_xmm_xmmm32;
    public static Code EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er;
    public static Code Addsd_xmm_xmmm64;
    public static Code VEX_Vaddsd_xmm_xmm_xmmm64;
    public static Code EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er;
    public static Code Mulps_xmm_xmmm128;
    public static Code VEX_Vmulps_xmm_xmm_xmmm128;
    public static Code VEX_Vmulps_ymm_ymm_ymmm256;
    public static Code EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code Mulpd_xmm_xmmm128;
    public static Code VEX_Vmulpd_xmm_xmm_xmmm128;
    public static Code VEX_Vmulpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code Mulss_xmm_xmmm32;
    public static Code VEX_Vmulss_xmm_xmm_xmmm32;
    public static Code EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er;
    public static Code Mulsd_xmm_xmmm64;
    public static Code VEX_Vmulsd_xmm_xmm_xmmm64;
    public static Code EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er;
    public static Code Cvtps2pd_xmm_xmmm64;
    public static Code VEX_Vcvtps2pd_xmm_xmmm64;
    public static Code VEX_Vcvtps2pd_ymm_xmmm128;
    public static Code EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32;
    public static Code EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae;
    public static Code Cvtpd2ps_xmm_xmmm128;
    public static Code VEX_Vcvtpd2ps_xmm_xmmm128;
    public static Code VEX_Vcvtpd2ps_xmm_ymmm256;
    public static Code EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er;
    public static Code Cvtss2sd_xmm_xmmm32;
    public static Code VEX_Vcvtss2sd_xmm_xmm_xmmm32;
    public static Code EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae;
    public static Code Cvtsd2ss_xmm_xmmm64;
    public static Code VEX_Vcvtsd2ss_xmm_xmm_xmmm64;
    public static Code EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er;
    public static Code Cvtdq2ps_xmm_xmmm128;
    public static Code VEX_Vcvtdq2ps_xmm_xmmm128;
    public static Code VEX_Vcvtdq2ps_ymm_ymmm256;
    public static Code EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er;
    public static Code EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er;
    public static Code Cvtps2dq_xmm_xmmm128;
    public static Code VEX_Vcvtps2dq_xmm_xmmm128;
    public static Code VEX_Vcvtps2dq_ymm_ymmm256;
    public static Code EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er;
    public static Code Cvttps2dq_xmm_xmmm128;
    public static Code VEX_Vcvttps2dq_xmm_xmmm128;
    public static Code VEX_Vcvttps2dq_ymm_ymmm256;
    public static Code EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae;
    public static Code Subps_xmm_xmmm128;
    public static Code VEX_Vsubps_xmm_xmm_xmmm128;
    public static Code VEX_Vsubps_ymm_ymm_ymmm256;
    public static Code EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code Subpd_xmm_xmmm128;
    public static Code VEX_Vsubpd_xmm_xmm_xmmm128;
    public static Code VEX_Vsubpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code Subss_xmm_xmmm32;
    public static Code VEX_Vsubss_xmm_xmm_xmmm32;
    public static Code EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er;
    public static Code Subsd_xmm_xmmm64;
    public static Code VEX_Vsubsd_xmm_xmm_xmmm64;
    public static Code EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er;
    public static Code Minps_xmm_xmmm128;
    public static Code VEX_Vminps_xmm_xmm_xmmm128;
    public static Code VEX_Vminps_ymm_ymm_ymmm256;
    public static Code EVEX_Vminps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vminps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae;
    public static Code Minpd_xmm_xmmm128;
    public static Code VEX_Vminpd_xmm_xmm_xmmm128;
    public static Code VEX_Vminpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae;
    public static Code Minss_xmm_xmmm32;
    public static Code VEX_Vminss_xmm_xmm_xmmm32;
    public static Code EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae;
    public static Code Minsd_xmm_xmmm64;
    public static Code VEX_Vminsd_xmm_xmm_xmmm64;
    public static Code EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae;
    public static Code Divps_xmm_xmmm128;
    public static Code VEX_Vdivps_xmm_xmm_xmmm128;
    public static Code VEX_Vdivps_ymm_ymm_ymmm256;
    public static Code EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code Divpd_xmm_xmmm128;
    public static Code VEX_Vdivpd_xmm_xmm_xmmm128;
    public static Code VEX_Vdivpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code Divss_xmm_xmmm32;
    public static Code VEX_Vdivss_xmm_xmm_xmmm32;
    public static Code EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er;
    public static Code Divsd_xmm_xmmm64;
    public static Code VEX_Vdivsd_xmm_xmm_xmmm64;
    public static Code EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er;
    public static Code Maxps_xmm_xmmm128;
    public static Code VEX_Vmaxps_xmm_xmm_xmmm128;
    public static Code VEX_Vmaxps_ymm_ymm_ymmm256;
    public static Code EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae;
    public static Code Maxpd_xmm_xmmm128;
    public static Code VEX_Vmaxpd_xmm_xmm_xmmm128;
    public static Code VEX_Vmaxpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae;
    public static Code Maxss_xmm_xmmm32;
    public static Code VEX_Vmaxss_xmm_xmm_xmmm32;
    public static Code EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae;
    public static Code Maxsd_xmm_xmmm64;
    public static Code VEX_Vmaxsd_xmm_xmm_xmmm64;
    public static Code EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae;
    public static Code Punpcklbw_mm_mmm32;
    public static Code Punpcklbw_xmm_xmmm128;
    public static Code VEX_Vpunpcklbw_xmm_xmm_xmmm128;
    public static Code VEX_Vpunpcklbw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512;
    public static Code Punpcklwd_mm_mmm32;
    public static Code Punpcklwd_xmm_xmmm128;
    public static Code VEX_Vpunpcklwd_xmm_xmm_xmmm128;
    public static Code VEX_Vpunpcklwd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512;
    public static Code Punpckldq_mm_mmm32;
    public static Code Punpckldq_xmm_xmmm128;
    public static Code VEX_Vpunpckldq_xmm_xmm_xmmm128;
    public static Code VEX_Vpunpckldq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32;
    public static Code Packsswb_mm_mmm64;
    public static Code Packsswb_xmm_xmmm128;
    public static Code VEX_Vpacksswb_xmm_xmm_xmmm128;
    public static Code VEX_Vpacksswb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512;
    public static Code Pcmpgtb_mm_mmm64;
    public static Code Pcmpgtb_xmm_xmmm128;
    public static Code VEX_Vpcmpgtb_xmm_xmm_xmmm128;
    public static Code VEX_Vpcmpgtb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512;
    public static Code Pcmpgtw_mm_mmm64;
    public static Code Pcmpgtw_xmm_xmmm128;
    public static Code VEX_Vpcmpgtw_xmm_xmm_xmmm128;
    public static Code VEX_Vpcmpgtw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512;
    public static Code Pcmpgtd_mm_mmm64;
    public static Code Pcmpgtd_xmm_xmmm128;
    public static Code VEX_Vpcmpgtd_xmm_xmm_xmmm128;
    public static Code VEX_Vpcmpgtd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32;
    public static Code EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32;
    public static Code EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32;
    public static Code Packuswb_mm_mmm64;
    public static Code Packuswb_xmm_xmmm128;
    public static Code VEX_Vpackuswb_xmm_xmm_xmmm128;
    public static Code VEX_Vpackuswb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512;
    public static Code Punpckhbw_mm_mmm64;
    public static Code Punpckhbw_xmm_xmmm128;
    public static Code VEX_Vpunpckhbw_xmm_xmm_xmmm128;
    public static Code VEX_Vpunpckhbw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512;
    public static Code Punpckhwd_mm_mmm64;
    public static Code Punpckhwd_xmm_xmmm128;
    public static Code VEX_Vpunpckhwd_xmm_xmm_xmmm128;
    public static Code VEX_Vpunpckhwd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512;
    public static Code Punpckhdq_mm_mmm64;
    public static Code Punpckhdq_xmm_xmmm128;
    public static Code VEX_Vpunpckhdq_xmm_xmm_xmmm128;
    public static Code VEX_Vpunpckhdq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32;
    public static Code Packssdw_mm_mmm64;
    public static Code Packssdw_xmm_xmmm128;
    public static Code VEX_Vpackssdw_xmm_xmm_xmmm128;
    public static Code VEX_Vpackssdw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32;
    public static Code Punpcklqdq_xmm_xmmm128;
    public static Code VEX_Vpunpcklqdq_xmm_xmm_xmmm128;
    public static Code VEX_Vpunpcklqdq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64;
    public static Code Punpckhqdq_xmm_xmmm128;
    public static Code VEX_Vpunpckhqdq_xmm_xmm_xmmm128;
    public static Code VEX_Vpunpckhqdq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64;
    public static Code Movd_mm_rm32;
    public static Code Movq_mm_rm64;
    public static Code Movd_xmm_rm32;
    public static Code Movq_xmm_rm64;
    public static Code VEX_Vmovd_xmm_rm32;
    public static Code VEX_Vmovq_xmm_rm64;
    public static Code EVEX_Vmovd_xmm_rm32;
    public static Code EVEX_Vmovq_xmm_rm64;
    public static Code Movq_mm_mmm64;
    public static Code Movdqa_xmm_xmmm128;
    public static Code VEX_Vmovdqa_xmm_xmmm128;
    public static Code VEX_Vmovdqa_ymm_ymmm256;
    public static Code EVEX_Vmovdqa32_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovdqa32_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovdqa32_zmm_k1z_zmmm512;
    public static Code EVEX_Vmovdqa64_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovdqa64_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovdqa64_zmm_k1z_zmmm512;
    public static Code Movdqu_xmm_xmmm128;
    public static Code VEX_Vmovdqu_xmm_xmmm128;
    public static Code VEX_Vmovdqu_ymm_ymmm256;
    public static Code EVEX_Vmovdqu32_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovdqu32_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovdqu32_zmm_k1z_zmmm512;
    public static Code EVEX_Vmovdqu64_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovdqu64_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovdqu64_zmm_k1z_zmmm512;
    public static Code EVEX_Vmovdqu8_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovdqu8_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovdqu8_zmm_k1z_zmmm512;
    public static Code EVEX_Vmovdqu16_xmm_k1z_xmmm128;
    public static Code EVEX_Vmovdqu16_ymm_k1z_ymmm256;
    public static Code EVEX_Vmovdqu16_zmm_k1z_zmmm512;
    public static Code Pshufw_mm_mmm64_imm8;
    public static Code Pshufd_xmm_xmmm128_imm8;
    public static Code VEX_Vpshufd_xmm_xmmm128_imm8;
    public static Code VEX_Vpshufd_ymm_ymmm256_imm8;
    public static Code EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8;
    public static Code Pshufhw_xmm_xmmm128_imm8;
    public static Code VEX_Vpshufhw_xmm_xmmm128_imm8;
    public static Code VEX_Vpshufhw_ymm_ymmm256_imm8;
    public static Code EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8;
    public static Code EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8;
    public static Code EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8;
    public static Code Pshuflw_xmm_xmmm128_imm8;
    public static Code VEX_Vpshuflw_xmm_xmmm128_imm8;
    public static Code VEX_Vpshuflw_ymm_ymmm256_imm8;
    public static Code EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8;
    public static Code EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8;
    public static Code EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8;
    public static Code Psrlw_mm_imm8;
    public static Code Psrlw_xmm_imm8;
    public static Code VEX_Vpsrlw_xmm_xmm_imm8;
    public static Code VEX_Vpsrlw_ymm_ymm_imm8;
    public static Code EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8;
    public static Code EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8;
    public static Code EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8;
    public static Code Psraw_mm_imm8;
    public static Code Psraw_xmm_imm8;
    public static Code VEX_Vpsraw_xmm_xmm_imm8;
    public static Code VEX_Vpsraw_ymm_ymm_imm8;
    public static Code EVEX_Vpsraw_xmm_k1z_xmmm128_imm8;
    public static Code EVEX_Vpsraw_ymm_k1z_ymmm256_imm8;
    public static Code EVEX_Vpsraw_zmm_k1z_zmmm512_imm8;
    public static Code Psllw_mm_imm8;
    public static Code Psllw_xmm_imm8;
    public static Code VEX_Vpsllw_xmm_xmm_imm8;
    public static Code VEX_Vpsllw_ymm_ymm_imm8;
    public static Code EVEX_Vpsllw_xmm_k1z_xmmm128_imm8;
    public static Code EVEX_Vpsllw_ymm_k1z_ymmm256_imm8;
    public static Code EVEX_Vpsllw_zmm_k1z_zmmm512_imm8;
    public static Code EVEX_Vprord_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vprord_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vprord_zmm_k1z_zmmm512b32_imm8;
    public static Code EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8;
    public static Code EVEX_Vprold_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vprold_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vprold_zmm_k1z_zmmm512b32_imm8;
    public static Code EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8;
    public static Code Psrld_mm_imm8;
    public static Code Psrld_xmm_imm8;
    public static Code VEX_Vpsrld_xmm_xmm_imm8;
    public static Code VEX_Vpsrld_ymm_ymm_imm8;
    public static Code EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8;
    public static Code Psrad_mm_imm8;
    public static Code Psrad_xmm_imm8;
    public static Code VEX_Vpsrad_xmm_xmm_imm8;
    public static Code VEX_Vpsrad_ymm_ymm_imm8;
    public static Code EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8;
    public static Code EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8;
    public static Code Pslld_mm_imm8;
    public static Code Pslld_xmm_imm8;
    public static Code VEX_Vpslld_xmm_xmm_imm8;
    public static Code VEX_Vpslld_ymm_ymm_imm8;
    public static Code EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8;
    public static Code Psrlq_mm_imm8;
    public static Code Psrlq_xmm_imm8;
    public static Code VEX_Vpsrlq_xmm_xmm_imm8;
    public static Code VEX_Vpsrlq_ymm_ymm_imm8;
    public static Code EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8;
    public static Code Psrldq_xmm_imm8;
    public static Code VEX_Vpsrldq_xmm_xmm_imm8;
    public static Code VEX_Vpsrldq_ymm_ymm_imm8;
    public static Code EVEX_Vpsrldq_xmm_xmmm128_imm8;
    public static Code EVEX_Vpsrldq_ymm_ymmm256_imm8;
    public static Code EVEX_Vpsrldq_zmm_zmmm512_imm8;
    public static Code Psllq_mm_imm8;
    public static Code Psllq_xmm_imm8;
    public static Code VEX_Vpsllq_xmm_xmm_imm8;
    public static Code VEX_Vpsllq_ymm_ymm_imm8;
    public static Code EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8;
    public static Code Pslldq_xmm_imm8;
    public static Code VEX_Vpslldq_xmm_xmm_imm8;
    public static Code VEX_Vpslldq_ymm_ymm_imm8;
    public static Code EVEX_Vpslldq_xmm_xmmm128_imm8;
    public static Code EVEX_Vpslldq_ymm_ymmm256_imm8;
    public static Code EVEX_Vpslldq_zmm_zmmm512_imm8;
    public static Code Pcmpeqb_mm_mmm64;
    public static Code Pcmpeqb_xmm_xmmm128;
    public static Code VEX_Vpcmpeqb_xmm_xmm_xmmm128;
    public static Code VEX_Vpcmpeqb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512;
    public static Code Pcmpeqw_mm_mmm64;
    public static Code Pcmpeqw_xmm_xmmm128;
    public static Code VEX_Vpcmpeqw_xmm_xmm_xmmm128;
    public static Code VEX_Vpcmpeqw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512;
    public static Code Pcmpeqd_mm_mmm64;
    public static Code Pcmpeqd_xmm_xmmm128;
    public static Code VEX_Vpcmpeqd_xmm_xmm_xmmm128;
    public static Code VEX_Vpcmpeqd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32;
    public static Code EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32;
    public static Code EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32;
    public static Code Emms;
    public static Code VEX_Vzeroupper;
    public static Code VEX_Vzeroall;
    public static Code Vmread_rm32_r32;
    public static Code Vmread_rm64_r64;
    public static Code EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae;
    public static Code EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae;
    public static Code Extrq_xmm_imm8_imm8;
    public static Code EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32;
    public static Code EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32;
    public static Code EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae;
    public static Code EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae;
    public static Code EVEX_Vcvttss2usi_r32_xmmm32_sae;
    public static Code EVEX_Vcvttss2usi_r64_xmmm32_sae;
    public static Code Insertq_xmm_xmm_imm8_imm8;
    public static Code EVEX_Vcvttsd2usi_r32_xmmm64_sae;
    public static Code EVEX_Vcvttsd2usi_r64_xmmm64_sae;
    public static Code Vmwrite_r32_rm32;
    public static Code Vmwrite_r64_rm64;
    public static Code EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er;
    public static Code EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er;
    public static Code Extrq_xmm_xmm;
    public static Code EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32;
    public static Code EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er;
    public static Code EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er;
    public static Code EVEX_Vcvtss2usi_r32_xmmm32_er;
    public static Code EVEX_Vcvtss2usi_r64_xmmm32_er;
    public static Code Insertq_xmm_xmm;
    public static Code EVEX_Vcvtsd2usi_r32_xmmm64_er;
    public static Code EVEX_Vcvtsd2usi_r64_xmmm64_er;
    public static Code EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32;
    public static Code EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32;
    public static Code EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae;
    public static Code EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae;
    public static Code EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32;
    public static Code EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er;
    public static Code EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er;
    public static Code EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er;
    public static Code EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er;
    public static Code EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32;
    public static Code EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er;
    public static Code EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er;
    public static Code EVEX_Vcvtusi2ss_xmm_xmm_rm32_er;
    public static Code EVEX_Vcvtusi2ss_xmm_xmm_rm64_er;
    public static Code EVEX_Vcvtusi2sd_xmm_xmm_rm32_er;
    public static Code EVEX_Vcvtusi2sd_xmm_xmm_rm64_er;
    public static Code Haddpd_xmm_xmmm128;
    public static Code VEX_Vhaddpd_xmm_xmm_xmmm128;
    public static Code VEX_Vhaddpd_ymm_ymm_ymmm256;
    public static Code Haddps_xmm_xmmm128;
    public static Code VEX_Vhaddps_xmm_xmm_xmmm128;
    public static Code VEX_Vhaddps_ymm_ymm_ymmm256;
    public static Code Hsubpd_xmm_xmmm128;
    public static Code VEX_Vhsubpd_xmm_xmm_xmmm128;
    public static Code VEX_Vhsubpd_ymm_ymm_ymmm256;
    public static Code Hsubps_xmm_xmmm128;
    public static Code VEX_Vhsubps_xmm_xmm_xmmm128;
    public static Code VEX_Vhsubps_ymm_ymm_ymmm256;
    public static Code Movd_rm32_mm;
    public static Code Movq_rm64_mm;
    public static Code Movd_rm32_xmm;
    public static Code Movq_rm64_xmm;
    public static Code VEX_Vmovd_rm32_xmm;
    public static Code VEX_Vmovq_rm64_xmm;
    public static Code EVEX_Vmovd_rm32_xmm;
    public static Code EVEX_Vmovq_rm64_xmm;
    public static Code Movq_xmm_xmmm64;
    public static Code VEX_Vmovq_xmm_xmmm64;
    public static Code EVEX_Vmovq_xmm_xmmm64;
    public static Code Movq_mmm64_mm;
    public static Code Movdqa_xmmm128_xmm;
    public static Code VEX_Vmovdqa_xmmm128_xmm;
    public static Code VEX_Vmovdqa_ymmm256_ymm;
    public static Code EVEX_Vmovdqa32_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovdqa32_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovdqa32_zmmm512_k1z_zmm;
    public static Code EVEX_Vmovdqa64_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovdqa64_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovdqa64_zmmm512_k1z_zmm;
    public static Code Movdqu_xmmm128_xmm;
    public static Code VEX_Vmovdqu_xmmm128_xmm;
    public static Code VEX_Vmovdqu_ymmm256_ymm;
    public static Code EVEX_Vmovdqu32_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovdqu32_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovdqu32_zmmm512_k1z_zmm;
    public static Code EVEX_Vmovdqu64_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovdqu64_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovdqu64_zmmm512_k1z_zmm;
    public static Code EVEX_Vmovdqu8_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovdqu8_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovdqu8_zmmm512_k1z_zmm;
    public static Code EVEX_Vmovdqu16_xmmm128_k1z_xmm;
    public static Code EVEX_Vmovdqu16_ymmm256_k1z_ymm;
    public static Code EVEX_Vmovdqu16_zmmm512_k1z_zmm;
    public static Code Jo_rel16;
    public static Code Jo_rel32_32;
    public static Code Jo_rel32_64;
    public static Code Jno_rel16;
    public static Code Jno_rel32_32;
    public static Code Jno_rel32_64;
    public static Code Jb_rel16;
    public static Code Jb_rel32_32;
    public static Code Jb_rel32_64;
    public static Code Jae_rel16;
    public static Code Jae_rel32_32;
    public static Code Jae_rel32_64;
    public static Code Je_rel16;
    public static Code Je_rel32_32;
    public static Code Je_rel32_64;
    public static Code Jne_rel16;
    public static Code Jne_rel32_32;
    public static Code Jne_rel32_64;
    public static Code Jbe_rel16;
    public static Code Jbe_rel32_32;
    public static Code Jbe_rel32_64;
    public static Code Ja_rel16;
    public static Code Ja_rel32_32;
    public static Code Ja_rel32_64;
    public static Code Js_rel16;
    public static Code Js_rel32_32;
    public static Code Js_rel32_64;
    public static Code Jns_rel16;
    public static Code Jns_rel32_32;
    public static Code Jns_rel32_64;
    public static Code Jp_rel16;
    public static Code Jp_rel32_32;
    public static Code Jp_rel32_64;
    public static Code Jnp_rel16;
    public static Code Jnp_rel32_32;
    public static Code Jnp_rel32_64;
    public static Code Jl_rel16;
    public static Code Jl_rel32_32;
    public static Code Jl_rel32_64;
    public static Code Jge_rel16;
    public static Code Jge_rel32_32;
    public static Code Jge_rel32_64;
    public static Code Jle_rel16;
    public static Code Jle_rel32_32;
    public static Code Jle_rel32_64;
    public static Code Jg_rel16;
    public static Code Jg_rel32_32;
    public static Code Jg_rel32_64;
    public static Code Seto_rm8;
    public static Code Setno_rm8;
    public static Code Setb_rm8;
    public static Code Setae_rm8;
    public static Code Sete_rm8;
    public static Code Setne_rm8;
    public static Code Setbe_rm8;
    public static Code Seta_rm8;
    public static Code Sets_rm8;
    public static Code Setns_rm8;
    public static Code Setp_rm8;
    public static Code Setnp_rm8;
    public static Code Setl_rm8;
    public static Code Setge_rm8;
    public static Code Setle_rm8;
    public static Code Setg_rm8;
    public static Code VEX_Kmovw_kr_km16;
    public static Code VEX_Kmovq_kr_km64;
    public static Code VEX_Kmovb_kr_km8;
    public static Code VEX_Kmovd_kr_km32;
    public static Code VEX_Kmovw_m16_kr;
    public static Code VEX_Kmovq_m64_kr;
    public static Code VEX_Kmovb_m8_kr;
    public static Code VEX_Kmovd_m32_kr;
    public static Code VEX_Kmovw_kr_r32;
    public static Code VEX_Kmovb_kr_r32;
    public static Code VEX_Kmovd_kr_r32;
    public static Code VEX_Kmovq_kr_r64;
    public static Code VEX_Kmovw_r32_kr;
    public static Code VEX_Kmovb_r32_kr;
    public static Code VEX_Kmovd_r32_kr;
    public static Code VEX_Kmovq_r64_kr;
    public static Code VEX_Kortestw_kr_kr;
    public static Code VEX_Kortestq_kr_kr;
    public static Code VEX_Kortestb_kr_kr;
    public static Code VEX_Kortestd_kr_kr;
    public static Code VEX_Ktestw_kr_kr;
    public static Code VEX_Ktestq_kr_kr;
    public static Code VEX_Ktestb_kr_kr;
    public static Code VEX_Ktestd_kr_kr;
    public static Code Pushw_FS;
    public static Code Pushd_FS;
    public static Code Pushq_FS;
    public static Code Popw_FS;
    public static Code Popd_FS;
    public static Code Popq_FS;
    public static Code Cpuid;
    public static Code Bt_rm16_r16;
    public static Code Bt_rm32_r32;
    public static Code Bt_rm64_r64;
    public static Code Shld_rm16_r16_imm8;
    public static Code Shld_rm32_r32_imm8;
    public static Code Shld_rm64_r64_imm8;
    public static Code Shld_rm16_r16_CL;
    public static Code Shld_rm32_r32_CL;
    public static Code Shld_rm64_r64_CL;
    public static Code Montmul_16;
    public static Code Montmul_32;
    public static Code Montmul_64;
    public static Code Xsha1_16;
    public static Code Xsha1_32;
    public static Code Xsha1_64;
    public static Code Xsha256_16;
    public static Code Xsha256_32;
    public static Code Xsha256_64;
    public static Code Xbts_r16_rm16;
    public static Code Xbts_r32_rm32;
    public static Code Xstore_16;
    public static Code Xstore_32;
    public static Code Xstore_64;
    public static Code Xcryptecb_16;
    public static Code Xcryptecb_32;
    public static Code Xcryptecb_64;
    public static Code Xcryptcbc_16;
    public static Code Xcryptcbc_32;
    public static Code Xcryptcbc_64;
    public static Code Xcryptctr_16;
    public static Code Xcryptctr_32;
    public static Code Xcryptctr_64;
    public static Code Xcryptcfb_16;
    public static Code Xcryptcfb_32;
    public static Code Xcryptcfb_64;
    public static Code Xcryptofb_16;
    public static Code Xcryptofb_32;
    public static Code Xcryptofb_64;
    public static Code Ibts_rm16_r16;
    public static Code Ibts_rm32_r32;
    public static Code Cmpxchg486_rm8_r8;
    public static Code Cmpxchg486_rm16_r16;
    public static Code Cmpxchg486_rm32_r32;
    public static Code Pushw_GS;
    public static Code Pushd_GS;
    public static Code Pushq_GS;
    public static Code Popw_GS;
    public static Code Popd_GS;
    public static Code Popq_GS;
    public static Code Rsm;
    public static Code Bts_rm16_r16;
    public static Code Bts_rm32_r32;
    public static Code Bts_rm64_r64;
    public static Code Shrd_rm16_r16_imm8;
    public static Code Shrd_rm32_r32_imm8;
    public static Code Shrd_rm64_r64_imm8;
    public static Code Shrd_rm16_r16_CL;
    public static Code Shrd_rm32_r32_CL;
    public static Code Shrd_rm64_r64_CL;
    public static Code Fxsave_m512byte;
    public static Code Fxsave64_m512byte;
    public static Code Rdfsbase_r32;
    public static Code Rdfsbase_r64;
    public static Code Fxrstor_m512byte;
    public static Code Fxrstor64_m512byte;
    public static Code Rdgsbase_r32;
    public static Code Rdgsbase_r64;
    public static Code Ldmxcsr_m32;
    public static Code Wrfsbase_r32;
    public static Code Wrfsbase_r64;
    public static Code VEX_Vldmxcsr_m32;
    public static Code Stmxcsr_m32;
    public static Code Wrgsbase_r32;
    public static Code Wrgsbase_r64;
    public static Code VEX_Vstmxcsr_m32;
    public static Code Xsave_mem;
    public static Code Xsave64_mem;
    public static Code Ptwrite_rm32;
    public static Code Ptwrite_rm64;
    public static Code Xrstor_mem;
    public static Code Xrstor64_mem;
    public static Code Incsspd_r32;
    public static Code Incsspq_r64;
    public static Code Xsaveopt_mem;
    public static Code Xsaveopt64_mem;
    public static Code Clwb_m8;
    public static Code Tpause_r32;
    public static Code Tpause_r64;
    public static Code Clrssbsy_m64;
    public static Code Umonitor_r16;
    public static Code Umonitor_r32;
    public static Code Umonitor_r64;
    public static Code Umwait_r32;
    public static Code Umwait_r64;
    public static Code Clflush_m8;
    public static Code Clflushopt_m8;
    public static Code Lfence;
    public static Code Lfence_E9;
    public static Code Lfence_EA;
    public static Code Lfence_EB;
    public static Code Lfence_EC;
    public static Code Lfence_ED;
    public static Code Lfence_EE;
    public static Code Lfence_EF;
    public static Code Mfence;
    public static Code Mfence_F1;
    public static Code Mfence_F2;
    public static Code Mfence_F3;
    public static Code Mfence_F4;
    public static Code Mfence_F5;
    public static Code Mfence_F6;
    public static Code Mfence_F7;
    public static Code Sfence;
    public static Code Sfence_F9;
    public static Code Sfence_FA;
    public static Code Sfence_FB;
    public static Code Sfence_FC;
    public static Code Sfence_FD;
    public static Code Sfence_FE;
    public static Code Sfence_FF;
    public static Code Pcommit;
    public static Code Imul_r16_rm16;
    public static Code Imul_r32_rm32;
    public static Code Imul_r64_rm64;
    public static Code Cmpxchg_rm8_r8;
    public static Code Cmpxchg_rm16_r16;
    public static Code Cmpxchg_rm32_r32;
    public static Code Cmpxchg_rm64_r64;
    public static Code Lss_r16_m1616;
    public static Code Lss_r32_m1632;
    public static Code Lss_r64_m1664;
    public static Code Btr_rm16_r16;
    public static Code Btr_rm32_r32;
    public static Code Btr_rm64_r64;
    public static Code Lfs_r16_m1616;
    public static Code Lfs_r32_m1632;
    public static Code Lfs_r64_m1664;
    public static Code Lgs_r16_m1616;
    public static Code Lgs_r32_m1632;
    public static Code Lgs_r64_m1664;
    public static Code Movzx_r16_rm8;
    public static Code Movzx_r32_rm8;
    public static Code Movzx_r64_rm8;
    public static Code Movzx_r16_rm16;
    public static Code Movzx_r32_rm16;
    public static Code Movzx_r64_rm16;
    public static Code Jmpe_disp16;
    public static Code Jmpe_disp32;
    public static Code Popcnt_r16_rm16;
    public static Code Popcnt_r32_rm32;
    public static Code Popcnt_r64_rm64;
    public static Code Ud1_r16_rm16;
    public static Code Ud1_r32_rm32;
    public static Code Ud1_r64_rm64;
    public static Code Bt_rm16_imm8;
    public static Code Bt_rm32_imm8;
    public static Code Bt_rm64_imm8;
    public static Code Bts_rm16_imm8;
    public static Code Bts_rm32_imm8;
    public static Code Bts_rm64_imm8;
    public static Code Btr_rm16_imm8;
    public static Code Btr_rm32_imm8;
    public static Code Btr_rm64_imm8;
    public static Code Btc_rm16_imm8;
    public static Code Btc_rm32_imm8;
    public static Code Btc_rm64_imm8;
    public static Code Btc_rm16_r16;
    public static Code Btc_rm32_r32;
    public static Code Btc_rm64_r64;
    public static Code Bsf_r16_rm16;
    public static Code Bsf_r32_rm32;
    public static Code Bsf_r64_rm64;
    public static Code Tzcnt_r16_rm16;
    public static Code Tzcnt_r32_rm32;
    public static Code Tzcnt_r64_rm64;
    public static Code Bsr_r16_rm16;
    public static Code Bsr_r32_rm32;
    public static Code Bsr_r64_rm64;
    public static Code Lzcnt_r16_rm16;
    public static Code Lzcnt_r32_rm32;
    public static Code Lzcnt_r64_rm64;
    public static Code Movsx_r16_rm8;
    public static Code Movsx_r32_rm8;
    public static Code Movsx_r64_rm8;
    public static Code Movsx_r16_rm16;
    public static Code Movsx_r32_rm16;
    public static Code Movsx_r64_rm16;
    public static Code Xadd_rm8_r8;
    public static Code Xadd_rm16_r16;
    public static Code Xadd_rm32_r32;
    public static Code Xadd_rm64_r64;
    public static Code Cmpps_xmm_xmmm128_imm8;
    public static Code VEX_Vcmpps_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vcmpps_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae;
    public static Code Cmppd_xmm_xmmm128_imm8;
    public static Code VEX_Vcmppd_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vcmppd_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae;
    public static Code Cmpss_xmm_xmmm32_imm8;
    public static Code VEX_Vcmpss_xmm_xmm_xmmm32_imm8;
    public static Code EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae;
    public static Code Cmpsd_xmm_xmmm64_imm8;
    public static Code VEX_Vcmpsd_xmm_xmm_xmmm64_imm8;
    public static Code EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae;
    public static Code Movnti_m32_r32;
    public static Code Movnti_m64_r64;
    public static Code Pinsrw_mm_r32m16_imm8;
    public static Code Pinsrw_mm_r64m16_imm8;
    public static Code Pinsrw_xmm_r32m16_imm8;
    public static Code Pinsrw_xmm_r64m16_imm8;
    public static Code VEX_Vpinsrw_xmm_xmm_r32m16_imm8;
    public static Code VEX_Vpinsrw_xmm_xmm_r64m16_imm8;
    public static Code EVEX_Vpinsrw_xmm_xmm_r32m16_imm8;
    public static Code EVEX_Vpinsrw_xmm_xmm_r64m16_imm8;
    public static Code Pextrw_r32_mm_imm8;
    public static Code Pextrw_r64_mm_imm8;
    public static Code Pextrw_r32_xmm_imm8;
    public static Code Pextrw_r64_xmm_imm8;
    public static Code VEX_Vpextrw_r32_xmm_imm8;
    public static Code VEX_Vpextrw_r64_xmm_imm8;
    public static Code EVEX_Vpextrw_r32_xmm_imm8;
    public static Code EVEX_Vpextrw_r64_xmm_imm8;
    public static Code Shufps_xmm_xmmm128_imm8;
    public static Code VEX_Vshufps_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vshufps_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8;
    public static Code Shufpd_xmm_xmmm128_imm8;
    public static Code VEX_Vshufpd_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vshufpd_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code Cmpxchg8b_m64;
    public static Code Cmpxchg16b_m128;
    public static Code Xrstors_mem;
    public static Code Xrstors64_mem;
    public static Code Xsavec_mem;
    public static Code Xsavec64_mem;
    public static Code Xsaves_mem;
    public static Code Xsaves64_mem;
    public static Code Vmptrld_m64;
    public static Code Vmclear_m64;
    public static Code Vmxon_m64;
    public static Code Rdrand_r16;
    public static Code Rdrand_r32;
    public static Code Rdrand_r64;
    public static Code Vmptrst_m64;
    public static Code Rdseed_r16;
    public static Code Rdseed_r32;
    public static Code Rdseed_r64;
    public static Code Rdpid_r32;
    public static Code Rdpid_r64;
    public static Code Bswap_r16;
    public static Code Bswap_r32;
    public static Code Bswap_r64;
    public static Code Addsubpd_xmm_xmmm128;
    public static Code VEX_Vaddsubpd_xmm_xmm_xmmm128;
    public static Code VEX_Vaddsubpd_ymm_ymm_ymmm256;
    public static Code Addsubps_xmm_xmmm128;
    public static Code VEX_Vaddsubps_xmm_xmm_xmmm128;
    public static Code VEX_Vaddsubps_ymm_ymm_ymmm256;
    public static Code Psrlw_mm_mmm64;
    public static Code Psrlw_xmm_xmmm128;
    public static Code VEX_Vpsrlw_xmm_xmm_xmmm128;
    public static Code VEX_Vpsrlw_ymm_ymm_xmmm128;
    public static Code EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128;
    public static Code Psrld_mm_mmm64;
    public static Code Psrld_xmm_xmmm128;
    public static Code VEX_Vpsrld_xmm_xmm_xmmm128;
    public static Code VEX_Vpsrld_ymm_ymm_xmmm128;
    public static Code EVEX_Vpsrld_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsrld_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpsrld_zmm_k1z_zmm_xmmm128;
    public static Code Psrlq_mm_mmm64;
    public static Code Psrlq_xmm_xmmm128;
    public static Code VEX_Vpsrlq_xmm_xmm_xmmm128;
    public static Code VEX_Vpsrlq_ymm_ymm_xmmm128;
    public static Code EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128;
    public static Code Paddq_mm_mmm64;
    public static Code Paddq_xmm_xmmm128;
    public static Code VEX_Vpaddq_xmm_xmm_xmmm128;
    public static Code VEX_Vpaddq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64;
    public static Code Pmullw_mm_mmm64;
    public static Code Pmullw_xmm_xmmm128;
    public static Code VEX_Vpmullw_xmm_xmm_xmmm128;
    public static Code VEX_Vpmullw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmullw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmullw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmullw_zmm_k1z_zmm_zmmm512;
    public static Code Movq_xmmm64_xmm;
    public static Code VEX_Vmovq_xmmm64_xmm;
    public static Code EVEX_Vmovq_xmmm64_xmm;
    public static Code Movq2dq_xmm_mm;
    public static Code Movdq2q_mm_xmm;
    public static Code Pmovmskb_r32_mm;
    public static Code Pmovmskb_r64_mm;
    public static Code Pmovmskb_r32_xmm;
    public static Code Pmovmskb_r64_xmm;
    public static Code VEX_Vpmovmskb_r32_xmm;
    public static Code VEX_Vpmovmskb_r64_xmm;
    public static Code VEX_Vpmovmskb_r32_ymm;
    public static Code VEX_Vpmovmskb_r64_ymm;
    public static Code Psubusb_mm_mmm64;
    public static Code Psubusb_xmm_xmmm128;
    public static Code VEX_Vpsubusb_xmm_xmm_xmmm128;
    public static Code VEX_Vpsubusb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512;
    public static Code Psubusw_mm_mmm64;
    public static Code Psubusw_xmm_xmmm128;
    public static Code VEX_Vpsubusw_xmm_xmm_xmmm128;
    public static Code VEX_Vpsubusw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512;
    public static Code Pminub_mm_mmm64;
    public static Code Pminub_xmm_xmmm128;
    public static Code VEX_Vpminub_xmm_xmm_xmmm128;
    public static Code VEX_Vpminub_ymm_ymm_ymmm256;
    public static Code EVEX_Vpminub_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpminub_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpminub_zmm_k1z_zmm_zmmm512;
    public static Code Pand_mm_mmm64;
    public static Code Pand_xmm_xmmm128;
    public static Code VEX_Vpand_xmm_xmm_xmmm128;
    public static Code VEX_Vpand_ymm_ymm_ymmm256;
    public static Code EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64;
    public static Code Paddusb_mm_mmm64;
    public static Code Paddusb_xmm_xmmm128;
    public static Code VEX_Vpaddusb_xmm_xmm_xmmm128;
    public static Code VEX_Vpaddusb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512;
    public static Code Paddusw_mm_mmm64;
    public static Code Paddusw_xmm_xmmm128;
    public static Code VEX_Vpaddusw_xmm_xmm_xmmm128;
    public static Code VEX_Vpaddusw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512;
    public static Code Pmaxub_mm_mmm64;
    public static Code Pmaxub_xmm_xmmm128;
    public static Code VEX_Vpmaxub_xmm_xmm_xmmm128;
    public static Code VEX_Vpmaxub_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512;
    public static Code Pandn_mm_mmm64;
    public static Code Pandn_xmm_xmmm128;
    public static Code VEX_Vpandn_xmm_xmm_xmmm128;
    public static Code VEX_Vpandn_ymm_ymm_ymmm256;
    public static Code EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64;
    public static Code Pavgb_mm_mmm64;
    public static Code Pavgb_xmm_xmmm128;
    public static Code VEX_Vpavgb_xmm_xmm_xmmm128;
    public static Code VEX_Vpavgb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpavgb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpavgb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpavgb_zmm_k1z_zmm_zmmm512;
    public static Code Psraw_mm_mmm64;
    public static Code Psraw_xmm_xmmm128;
    public static Code VEX_Vpsraw_xmm_xmm_xmmm128;
    public static Code VEX_Vpsraw_ymm_ymm_xmmm128;
    public static Code EVEX_Vpsraw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsraw_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpsraw_zmm_k1z_zmm_xmmm128;
    public static Code Psrad_mm_mmm64;
    public static Code Psrad_xmm_xmmm128;
    public static Code VEX_Vpsrad_xmm_xmm_xmmm128;
    public static Code VEX_Vpsrad_ymm_ymm_xmmm128;
    public static Code EVEX_Vpsrad_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsrad_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpsrad_zmm_k1z_zmm_xmmm128;
    public static Code EVEX_Vpsraq_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsraq_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpsraq_zmm_k1z_zmm_xmmm128;
    public static Code Pavgw_mm_mmm64;
    public static Code Pavgw_xmm_xmmm128;
    public static Code VEX_Vpavgw_xmm_xmm_xmmm128;
    public static Code VEX_Vpavgw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpavgw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpavgw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpavgw_zmm_k1z_zmm_zmmm512;
    public static Code Pmulhuw_mm_mmm64;
    public static Code Pmulhuw_xmm_xmmm128;
    public static Code VEX_Vpmulhuw_xmm_xmm_xmmm128;
    public static Code VEX_Vpmulhuw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512;
    public static Code Pmulhw_mm_mmm64;
    public static Code Pmulhw_xmm_xmmm128;
    public static Code VEX_Vpmulhw_xmm_xmm_xmmm128;
    public static Code VEX_Vpmulhw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512;
    public static Code Cvttpd2dq_xmm_xmmm128;
    public static Code VEX_Vcvttpd2dq_xmm_xmmm128;
    public static Code VEX_Vcvttpd2dq_xmm_ymmm256;
    public static Code EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae;
    public static Code Cvtdq2pd_xmm_xmmm64;
    public static Code VEX_Vcvtdq2pd_xmm_xmmm64;
    public static Code VEX_Vcvtdq2pd_ymm_xmmm128;
    public static Code EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32;
    public static Code EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er;
    public static Code EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er;
    public static Code Cvtpd2dq_xmm_xmmm128;
    public static Code VEX_Vcvtpd2dq_xmm_xmmm128;
    public static Code VEX_Vcvtpd2dq_xmm_ymmm256;
    public static Code EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er;
    public static Code Movntq_m64_mm;
    public static Code Movntdq_m128_xmm;
    public static Code VEX_Vmovntdq_m128_xmm;
    public static Code VEX_Vmovntdq_m256_ymm;
    public static Code EVEX_Vmovntdq_m128_xmm;
    public static Code EVEX_Vmovntdq_m256_ymm;
    public static Code EVEX_Vmovntdq_m512_zmm;
    public static Code Psubsb_mm_mmm64;
    public static Code Psubsb_xmm_xmmm128;
    public static Code VEX_Vpsubsb_xmm_xmm_xmmm128;
    public static Code VEX_Vpsubsb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512;
    public static Code Psubsw_mm_mmm64;
    public static Code Psubsw_xmm_xmmm128;
    public static Code VEX_Vpsubsw_xmm_xmm_xmmm128;
    public static Code VEX_Vpsubsw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512;
    public static Code Pminsw_mm_mmm64;
    public static Code Pminsw_xmm_xmmm128;
    public static Code VEX_Vpminsw_xmm_xmm_xmmm128;
    public static Code VEX_Vpminsw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpminsw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpminsw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpminsw_zmm_k1z_zmm_zmmm512;
    public static Code Por_mm_mmm64;
    public static Code Por_xmm_xmmm128;
    public static Code VEX_Vpor_xmm_xmm_xmmm128;
    public static Code VEX_Vpor_ymm_ymm_ymmm256;
    public static Code EVEX_Vpord_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpord_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpord_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vporq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vporq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vporq_zmm_k1z_zmm_zmmm512b64;
    public static Code Paddsb_mm_mmm64;
    public static Code Paddsb_xmm_xmmm128;
    public static Code VEX_Vpaddsb_xmm_xmm_xmmm128;
    public static Code VEX_Vpaddsb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512;
    public static Code Paddsw_mm_mmm64;
    public static Code Paddsw_xmm_xmmm128;
    public static Code VEX_Vpaddsw_xmm_xmm_xmmm128;
    public static Code VEX_Vpaddsw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512;
    public static Code Pmaxsw_mm_mmm64;
    public static Code Pmaxsw_xmm_xmmm128;
    public static Code VEX_Vpmaxsw_xmm_xmm_xmmm128;
    public static Code VEX_Vpmaxsw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512;
    public static Code Pxor_mm_mmm64;
    public static Code Pxor_xmm_xmmm128;
    public static Code VEX_Vpxor_xmm_xmm_xmmm128;
    public static Code VEX_Vpxor_ymm_ymm_ymmm256;
    public static Code EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64;
    public static Code Lddqu_xmm_m128;
    public static Code VEX_Vlddqu_xmm_m128;
    public static Code VEX_Vlddqu_ymm_m256;
    public static Code Psllw_mm_mmm64;
    public static Code Psllw_xmm_xmmm128;
    public static Code VEX_Vpsllw_xmm_xmm_xmmm128;
    public static Code VEX_Vpsllw_ymm_ymm_xmmm128;
    public static Code EVEX_Vpsllw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsllw_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpsllw_zmm_k1z_zmm_xmmm128;
    public static Code Pslld_mm_mmm64;
    public static Code Pslld_xmm_xmmm128;
    public static Code VEX_Vpslld_xmm_xmm_xmmm128;
    public static Code VEX_Vpslld_ymm_ymm_xmmm128;
    public static Code EVEX_Vpslld_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpslld_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpslld_zmm_k1z_zmm_xmmm128;
    public static Code Psllq_mm_mmm64;
    public static Code Psllq_xmm_xmmm128;
    public static Code VEX_Vpsllq_xmm_xmm_xmmm128;
    public static Code VEX_Vpsllq_ymm_ymm_xmmm128;
    public static Code EVEX_Vpsllq_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsllq_ymm_k1z_ymm_xmmm128;
    public static Code EVEX_Vpsllq_zmm_k1z_zmm_xmmm128;
    public static Code Pmuludq_mm_mmm64;
    public static Code Pmuludq_xmm_xmmm128;
    public static Code VEX_Vpmuludq_xmm_xmm_xmmm128;
    public static Code VEX_Vpmuludq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64;
    public static Code Pmaddwd_mm_mmm64;
    public static Code Pmaddwd_xmm_xmmm128;
    public static Code VEX_Vpmaddwd_xmm_xmm_xmmm128;
    public static Code VEX_Vpmaddwd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512;
    public static Code Psadbw_mm_mmm64;
    public static Code Psadbw_xmm_xmmm128;
    public static Code VEX_Vpsadbw_xmm_xmm_xmmm128;
    public static Code VEX_Vpsadbw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsadbw_xmm_xmm_xmmm128;
    public static Code EVEX_Vpsadbw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsadbw_zmm_zmm_zmmm512;
    public static Code Maskmovq_rDI_mm_mm;
    public static Code Maskmovdqu_rDI_xmm_xmm;
    public static Code VEX_Vmaskmovdqu_rDI_xmm_xmm;
    public static Code Psubb_mm_mmm64;
    public static Code Psubb_xmm_xmmm128;
    public static Code VEX_Vpsubb_xmm_xmm_xmmm128;
    public static Code VEX_Vpsubb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsubb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsubb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsubb_zmm_k1z_zmm_zmmm512;
    public static Code Psubw_mm_mmm64;
    public static Code Psubw_xmm_xmmm128;
    public static Code VEX_Vpsubw_xmm_xmm_xmmm128;
    public static Code VEX_Vpsubw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsubw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsubw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsubw_zmm_k1z_zmm_zmmm512;
    public static Code Psubd_mm_mmm64;
    public static Code Psubd_xmm_xmmm128;
    public static Code VEX_Vpsubd_xmm_xmm_xmmm128;
    public static Code VEX_Vpsubd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32;
    public static Code Psubq_mm_mmm64;
    public static Code Psubq_xmm_xmmm128;
    public static Code VEX_Vpsubq_xmm_xmm_xmmm128;
    public static Code VEX_Vpsubq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64;
    public static Code Paddb_mm_mmm64;
    public static Code Paddb_xmm_xmmm128;
    public static Code VEX_Vpaddb_xmm_xmm_xmmm128;
    public static Code VEX_Vpaddb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpaddb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpaddb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpaddb_zmm_k1z_zmm_zmmm512;
    public static Code Paddw_mm_mmm64;
    public static Code Paddw_xmm_xmmm128;
    public static Code VEX_Vpaddw_xmm_xmm_xmmm128;
    public static Code VEX_Vpaddw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpaddw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpaddw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpaddw_zmm_k1z_zmm_zmmm512;
    public static Code Paddd_mm_mmm64;
    public static Code Paddd_xmm_xmmm128;
    public static Code VEX_Vpaddd_xmm_xmm_xmmm128;
    public static Code VEX_Vpaddd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32;
    public static Code Ud0_r16_rm16;
    public static Code Ud0_r32_rm32;
    public static Code Ud0_r64_rm64;
    public static Code Pshufb_mm_mmm64;
    public static Code Pshufb_xmm_xmmm128;
    public static Code VEX_Vpshufb_xmm_xmm_xmmm128;
    public static Code VEX_Vpshufb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpshufb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpshufb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpshufb_zmm_k1z_zmm_zmmm512;
    public static Code Phaddw_mm_mmm64;
    public static Code Phaddw_xmm_xmmm128;
    public static Code VEX_Vphaddw_xmm_xmm_xmmm128;
    public static Code VEX_Vphaddw_ymm_ymm_ymmm256;
    public static Code Phaddd_mm_mmm64;
    public static Code Phaddd_xmm_xmmm128;
    public static Code VEX_Vphaddd_xmm_xmm_xmmm128;
    public static Code VEX_Vphaddd_ymm_ymm_ymmm256;
    public static Code Phaddsw_mm_mmm64;
    public static Code Phaddsw_xmm_xmmm128;
    public static Code VEX_Vphaddsw_xmm_xmm_xmmm128;
    public static Code VEX_Vphaddsw_ymm_ymm_ymmm256;
    public static Code Pmaddubsw_mm_mmm64;
    public static Code Pmaddubsw_xmm_xmmm128;
    public static Code VEX_Vpmaddubsw_xmm_xmm_xmmm128;
    public static Code VEX_Vpmaddubsw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512;
    public static Code Phsubw_mm_mmm64;
    public static Code Phsubw_xmm_xmmm128;
    public static Code VEX_Vphsubw_xmm_xmm_xmmm128;
    public static Code VEX_Vphsubw_ymm_ymm_ymmm256;
    public static Code Phsubd_mm_mmm64;
    public static Code Phsubd_xmm_xmmm128;
    public static Code VEX_Vphsubd_xmm_xmm_xmmm128;
    public static Code VEX_Vphsubd_ymm_ymm_ymmm256;
    public static Code Phsubsw_mm_mmm64;
    public static Code Phsubsw_xmm_xmmm128;
    public static Code VEX_Vphsubsw_xmm_xmm_xmmm128;
    public static Code VEX_Vphsubsw_ymm_ymm_ymmm256;
    public static Code Psignb_mm_mmm64;
    public static Code Psignb_xmm_xmmm128;
    public static Code VEX_Vpsignb_xmm_xmm_xmmm128;
    public static Code VEX_Vpsignb_ymm_ymm_ymmm256;
    public static Code Psignw_mm_mmm64;
    public static Code Psignw_xmm_xmmm128;
    public static Code VEX_Vpsignw_xmm_xmm_xmmm128;
    public static Code VEX_Vpsignw_ymm_ymm_ymmm256;
    public static Code Psignd_mm_mmm64;
    public static Code Psignd_xmm_xmmm128;
    public static Code VEX_Vpsignd_xmm_xmm_xmmm128;
    public static Code VEX_Vpsignd_ymm_ymm_ymmm256;
    public static Code Pmulhrsw_mm_mmm64;
    public static Code Pmulhrsw_xmm_xmmm128;
    public static Code VEX_Vpmulhrsw_xmm_xmm_xmmm128;
    public static Code VEX_Vpmulhrsw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512;
    public static Code VEX_Vpermilps_xmm_xmm_xmmm128;
    public static Code VEX_Vpermilps_ymm_ymm_ymmm256;
    public static Code EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32;
    public static Code VEX_Vpermilpd_xmm_xmm_xmmm128;
    public static Code VEX_Vpermilpd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64;
    public static Code VEX_Vtestps_xmm_xmmm128;
    public static Code VEX_Vtestps_ymm_ymmm256;
    public static Code VEX_Vtestpd_xmm_xmmm128;
    public static Code VEX_Vtestpd_ymm_ymmm256;
    public static Code Pblendvb_xmm_xmmm128;
    public static Code EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpmovuswb_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovuswb_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovuswb_ymmm256_k1z_zmm;
    public static Code EVEX_Vpsravw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsravw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsravw_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpmovusdb_xmmm32_k1z_xmm;
    public static Code EVEX_Vpmovusdb_xmmm64_k1z_ymm;
    public static Code EVEX_Vpmovusdb_xmmm128_k1z_zmm;
    public static Code EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpmovusqb_xmmm16_k1z_xmm;
    public static Code EVEX_Vpmovusqb_xmmm32_k1z_ymm;
    public static Code EVEX_Vpmovusqb_xmmm64_k1z_zmm;
    public static Code VEX_Vcvtph2ps_xmm_xmmm64;
    public static Code VEX_Vcvtph2ps_ymm_xmmm128;
    public static Code EVEX_Vcvtph2ps_xmm_k1z_xmmm64;
    public static Code EVEX_Vcvtph2ps_ymm_k1z_xmmm128;
    public static Code EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae;
    public static Code EVEX_Vpmovusdw_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovusdw_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovusdw_ymmm256_k1z_zmm;
    public static Code Blendvps_xmm_xmmm128;
    public static Code EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpmovusqw_xmmm32_k1z_xmm;
    public static Code EVEX_Vpmovusqw_xmmm64_k1z_ymm;
    public static Code EVEX_Vpmovusqw_xmmm128_k1z_zmm;
    public static Code Blendvpd_xmm_xmmm128;
    public static Code EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpmovusqd_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovusqd_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovusqd_ymmm256_k1z_zmm;
    public static Code VEX_Vpermps_ymm_ymm_ymmm256;
    public static Code EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64;
    public static Code Ptest_xmm_xmmm128;
    public static Code VEX_Vptest_xmm_xmmm128;
    public static Code VEX_Vptest_ymm_ymmm256;
    public static Code VEX_Vbroadcastss_xmm_m32;
    public static Code VEX_Vbroadcastss_ymm_m32;
    public static Code EVEX_Vbroadcastss_xmm_k1z_xmmm32;
    public static Code EVEX_Vbroadcastss_ymm_k1z_xmmm32;
    public static Code EVEX_Vbroadcastss_zmm_k1z_xmmm32;
    public static Code VEX_Vbroadcastsd_ymm_m64;
    public static Code EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64;
    public static Code EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64;
    public static Code EVEX_Vbroadcastsd_ymm_k1z_xmmm64;
    public static Code EVEX_Vbroadcastsd_zmm_k1z_xmmm64;
    public static Code VEX_Vbroadcastf128_ymm_m128;
    public static Code EVEX_Vbroadcastf32x4_ymm_k1z_m128;
    public static Code EVEX_Vbroadcastf32x4_zmm_k1z_m128;
    public static Code EVEX_Vbroadcastf64x2_ymm_k1z_m128;
    public static Code EVEX_Vbroadcastf64x2_zmm_k1z_m128;
    public static Code EVEX_Vbroadcastf32x8_zmm_k1z_m256;
    public static Code EVEX_Vbroadcastf64x4_zmm_k1z_m256;
    public static Code Pabsb_mm_mmm64;
    public static Code Pabsb_xmm_xmmm128;
    public static Code VEX_Vpabsb_xmm_xmmm128;
    public static Code VEX_Vpabsb_ymm_ymmm256;
    public static Code EVEX_Vpabsb_xmm_k1z_xmmm128;
    public static Code EVEX_Vpabsb_ymm_k1z_ymmm256;
    public static Code EVEX_Vpabsb_zmm_k1z_zmmm512;
    public static Code Pabsw_mm_mmm64;
    public static Code Pabsw_xmm_xmmm128;
    public static Code VEX_Vpabsw_xmm_xmmm128;
    public static Code VEX_Vpabsw_ymm_ymmm256;
    public static Code EVEX_Vpabsw_xmm_k1z_xmmm128;
    public static Code EVEX_Vpabsw_ymm_k1z_ymmm256;
    public static Code EVEX_Vpabsw_zmm_k1z_zmmm512;
    public static Code Pabsd_mm_mmm64;
    public static Code Pabsd_xmm_xmmm128;
    public static Code VEX_Vpabsd_xmm_xmmm128;
    public static Code VEX_Vpabsd_ymm_ymmm256;
    public static Code EVEX_Vpabsd_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vpabsd_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vpabsd_zmm_k1z_zmmm512b32;
    public static Code EVEX_Vpabsq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vpabsq_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vpabsq_zmm_k1z_zmmm512b64;
    public static Code Pmovsxbw_xmm_xmmm64;
    public static Code VEX_Vpmovsxbw_xmm_xmmm64;
    public static Code VEX_Vpmovsxbw_ymm_xmmm128;
    public static Code EVEX_Vpmovsxbw_xmm_k1z_xmmm64;
    public static Code EVEX_Vpmovsxbw_ymm_k1z_xmmm128;
    public static Code EVEX_Vpmovsxbw_zmm_k1z_ymmm256;
    public static Code EVEX_Vpmovswb_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovswb_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovswb_ymmm256_k1z_zmm;
    public static Code Pmovsxbd_xmm_xmmm32;
    public static Code VEX_Vpmovsxbd_xmm_xmmm32;
    public static Code VEX_Vpmovsxbd_ymm_xmmm64;
    public static Code EVEX_Vpmovsxbd_xmm_k1z_xmmm32;
    public static Code EVEX_Vpmovsxbd_ymm_k1z_xmmm64;
    public static Code EVEX_Vpmovsxbd_zmm_k1z_xmmm128;
    public static Code EVEX_Vpmovsdb_xmmm32_k1z_xmm;
    public static Code EVEX_Vpmovsdb_xmmm64_k1z_ymm;
    public static Code EVEX_Vpmovsdb_xmmm128_k1z_zmm;
    public static Code Pmovsxbq_xmm_xmmm16;
    public static Code VEX_Vpmovsxbq_xmm_xmmm16;
    public static Code VEX_Vpmovsxbq_ymm_xmmm32;
    public static Code EVEX_Vpmovsxbq_xmm_k1z_xmmm16;
    public static Code EVEX_Vpmovsxbq_ymm_k1z_xmmm32;
    public static Code EVEX_Vpmovsxbq_zmm_k1z_xmmm64;
    public static Code EVEX_Vpmovsqb_xmmm16_k1z_xmm;
    public static Code EVEX_Vpmovsqb_xmmm32_k1z_ymm;
    public static Code EVEX_Vpmovsqb_xmmm64_k1z_zmm;
    public static Code Pmovsxwd_xmm_xmmm64;
    public static Code VEX_Vpmovsxwd_xmm_xmmm64;
    public static Code VEX_Vpmovsxwd_ymm_xmmm128;
    public static Code EVEX_Vpmovsxwd_xmm_k1z_xmmm64;
    public static Code EVEX_Vpmovsxwd_ymm_k1z_xmmm128;
    public static Code EVEX_Vpmovsxwd_zmm_k1z_ymmm256;
    public static Code EVEX_Vpmovsdw_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovsdw_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovsdw_ymmm256_k1z_zmm;
    public static Code Pmovsxwq_xmm_xmmm32;
    public static Code VEX_Vpmovsxwq_xmm_xmmm32;
    public static Code VEX_Vpmovsxwq_ymm_xmmm64;
    public static Code EVEX_Vpmovsxwq_xmm_k1z_xmmm32;
    public static Code EVEX_Vpmovsxwq_ymm_k1z_xmmm64;
    public static Code EVEX_Vpmovsxwq_zmm_k1z_xmmm128;
    public static Code EVEX_Vpmovsqw_xmmm32_k1z_xmm;
    public static Code EVEX_Vpmovsqw_xmmm64_k1z_ymm;
    public static Code EVEX_Vpmovsqw_xmmm128_k1z_zmm;
    public static Code Pmovsxdq_xmm_xmmm64;
    public static Code VEX_Vpmovsxdq_xmm_xmmm64;
    public static Code VEX_Vpmovsxdq_ymm_xmmm128;
    public static Code EVEX_Vpmovsxdq_xmm_k1z_xmmm64;
    public static Code EVEX_Vpmovsxdq_ymm_k1z_xmmm128;
    public static Code EVEX_Vpmovsxdq_zmm_k1z_ymmm256;
    public static Code EVEX_Vpmovsqd_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovsqd_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovsqd_ymmm256_k1z_zmm;
    public static Code EVEX_Vptestmb_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vptestmb_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vptestmb_kr_k1_zmm_zmmm512;
    public static Code EVEX_Vptestmw_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vptestmw_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vptestmw_kr_k1_zmm_zmmm512;
    public static Code EVEX_Vptestnmb_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vptestnmb_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vptestnmb_kr_k1_zmm_zmmm512;
    public static Code EVEX_Vptestnmw_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vptestnmw_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vptestnmw_kr_k1_zmm_zmmm512;
    public static Code EVEX_Vptestmd_kr_k1_xmm_xmmm128b32;
    public static Code EVEX_Vptestmd_kr_k1_ymm_ymmm256b32;
    public static Code EVEX_Vptestmd_kr_k1_zmm_zmmm512b32;
    public static Code EVEX_Vptestmq_kr_k1_xmm_xmmm128b64;
    public static Code EVEX_Vptestmq_kr_k1_ymm_ymmm256b64;
    public static Code EVEX_Vptestmq_kr_k1_zmm_zmmm512b64;
    public static Code EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32;
    public static Code EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32;
    public static Code EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32;
    public static Code EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64;
    public static Code EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64;
    public static Code EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64;
    public static Code Pmuldq_xmm_xmmm128;
    public static Code VEX_Vpmuldq_xmm_xmm_xmmm128;
    public static Code VEX_Vpmuldq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpmovm2b_xmm_kr;
    public static Code EVEX_Vpmovm2b_ymm_kr;
    public static Code EVEX_Vpmovm2b_zmm_kr;
    public static Code EVEX_Vpmovm2w_xmm_kr;
    public static Code EVEX_Vpmovm2w_ymm_kr;
    public static Code EVEX_Vpmovm2w_zmm_kr;
    public static Code Pcmpeqq_xmm_xmmm128;
    public static Code VEX_Vpcmpeqq_xmm_xmm_xmmm128;
    public static Code VEX_Vpcmpeqq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64;
    public static Code EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64;
    public static Code EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64;
    public static Code EVEX_Vpmovb2m_kr_xmm;
    public static Code EVEX_Vpmovb2m_kr_ymm;
    public static Code EVEX_Vpmovb2m_kr_zmm;
    public static Code EVEX_Vpmovw2m_kr_xmm;
    public static Code EVEX_Vpmovw2m_kr_ymm;
    public static Code EVEX_Vpmovw2m_kr_zmm;
    public static Code Movntdqa_xmm_m128;
    public static Code VEX_Vmovntdqa_xmm_m128;
    public static Code VEX_Vmovntdqa_ymm_m256;
    public static Code EVEX_Vmovntdqa_xmm_m128;
    public static Code EVEX_Vmovntdqa_ymm_m256;
    public static Code EVEX_Vmovntdqa_zmm_m512;
    public static Code EVEX_Vpbroadcastmb2q_xmm_kr;
    public static Code EVEX_Vpbroadcastmb2q_ymm_kr;
    public static Code EVEX_Vpbroadcastmb2q_zmm_kr;
    public static Code Packusdw_xmm_xmmm128;
    public static Code VEX_Vpackusdw_xmm_xmm_xmmm128;
    public static Code VEX_Vpackusdw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32;
    public static Code VEX_Vmaskmovps_xmm_xmm_m128;
    public static Code VEX_Vmaskmovps_ymm_ymm_m256;
    public static Code EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vmaskmovpd_xmm_xmm_m128;
    public static Code VEX_Vmaskmovpd_ymm_ymm_m256;
    public static Code EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er;
    public static Code VEX_Vmaskmovps_m128_xmm_xmm;
    public static Code VEX_Vmaskmovps_m256_ymm_ymm;
    public static Code VEX_Vmaskmovpd_m128_xmm_xmm;
    public static Code VEX_Vmaskmovpd_m256_ymm_ymm;
    public static Code Pmovzxbw_xmm_xmmm64;
    public static Code VEX_Vpmovzxbw_xmm_xmmm64;
    public static Code VEX_Vpmovzxbw_ymm_xmmm128;
    public static Code EVEX_Vpmovzxbw_xmm_k1z_xmmm64;
    public static Code EVEX_Vpmovzxbw_ymm_k1z_xmmm128;
    public static Code EVEX_Vpmovzxbw_zmm_k1z_ymmm256;
    public static Code EVEX_Vpmovwb_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovwb_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovwb_ymmm256_k1z_zmm;
    public static Code Pmovzxbd_xmm_xmmm32;
    public static Code VEX_Vpmovzxbd_xmm_xmmm32;
    public static Code VEX_Vpmovzxbd_ymm_xmmm64;
    public static Code EVEX_Vpmovzxbd_xmm_k1z_xmmm32;
    public static Code EVEX_Vpmovzxbd_ymm_k1z_xmmm64;
    public static Code EVEX_Vpmovzxbd_zmm_k1z_xmmm128;
    public static Code EVEX_Vpmovdb_xmmm32_k1z_xmm;
    public static Code EVEX_Vpmovdb_xmmm64_k1z_ymm;
    public static Code EVEX_Vpmovdb_xmmm128_k1z_zmm;
    public static Code Pmovzxbq_xmm_xmmm16;
    public static Code VEX_Vpmovzxbq_xmm_xmmm16;
    public static Code VEX_Vpmovzxbq_ymm_xmmm32;
    public static Code EVEX_Vpmovzxbq_xmm_k1z_xmmm16;
    public static Code EVEX_Vpmovzxbq_ymm_k1z_xmmm32;
    public static Code EVEX_Vpmovzxbq_zmm_k1z_xmmm64;
    public static Code EVEX_Vpmovqb_xmmm16_k1z_xmm;
    public static Code EVEX_Vpmovqb_xmmm32_k1z_ymm;
    public static Code EVEX_Vpmovqb_xmmm64_k1z_zmm;
    public static Code Pmovzxwd_xmm_xmmm64;
    public static Code VEX_Vpmovzxwd_xmm_xmmm64;
    public static Code VEX_Vpmovzxwd_ymm_xmmm128;
    public static Code EVEX_Vpmovzxwd_xmm_k1z_xmmm64;
    public static Code EVEX_Vpmovzxwd_ymm_k1z_xmmm128;
    public static Code EVEX_Vpmovzxwd_zmm_k1z_ymmm256;
    public static Code EVEX_Vpmovdw_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovdw_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovdw_ymmm256_k1z_zmm;
    public static Code Pmovzxwq_xmm_xmmm32;
    public static Code VEX_Vpmovzxwq_xmm_xmmm32;
    public static Code VEX_Vpmovzxwq_ymm_xmmm64;
    public static Code EVEX_Vpmovzxwq_xmm_k1z_xmmm32;
    public static Code EVEX_Vpmovzxwq_ymm_k1z_xmmm64;
    public static Code EVEX_Vpmovzxwq_zmm_k1z_xmmm128;
    public static Code EVEX_Vpmovqw_xmmm32_k1z_xmm;
    public static Code EVEX_Vpmovqw_xmmm64_k1z_ymm;
    public static Code EVEX_Vpmovqw_xmmm128_k1z_zmm;
    public static Code Pmovzxdq_xmm_xmmm64;
    public static Code VEX_Vpmovzxdq_xmm_xmmm64;
    public static Code VEX_Vpmovzxdq_ymm_xmmm128;
    public static Code EVEX_Vpmovzxdq_xmm_k1z_xmmm64;
    public static Code EVEX_Vpmovzxdq_ymm_k1z_xmmm128;
    public static Code EVEX_Vpmovzxdq_zmm_k1z_ymmm256;
    public static Code EVEX_Vpmovqd_xmmm64_k1z_xmm;
    public static Code EVEX_Vpmovqd_xmmm128_k1z_ymm;
    public static Code EVEX_Vpmovqd_ymmm256_k1z_zmm;
    public static Code VEX_Vpermd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64;
    public static Code Pcmpgtq_xmm_xmmm128;
    public static Code VEX_Vpcmpgtq_xmm_xmm_xmmm128;
    public static Code VEX_Vpcmpgtq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64;
    public static Code EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64;
    public static Code EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64;
    public static Code Pminsb_xmm_xmmm128;
    public static Code VEX_Vpminsb_xmm_xmm_xmmm128;
    public static Code VEX_Vpminsb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpminsb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpminsb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpminsb_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpmovm2d_xmm_kr;
    public static Code EVEX_Vpmovm2d_ymm_kr;
    public static Code EVEX_Vpmovm2d_zmm_kr;
    public static Code EVEX_Vpmovm2q_xmm_kr;
    public static Code EVEX_Vpmovm2q_ymm_kr;
    public static Code EVEX_Vpmovm2q_zmm_kr;
    public static Code Pminsd_xmm_xmmm128;
    public static Code VEX_Vpminsd_xmm_xmm_xmmm128;
    public static Code VEX_Vpminsd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpmovd2m_kr_xmm;
    public static Code EVEX_Vpmovd2m_kr_ymm;
    public static Code EVEX_Vpmovd2m_kr_zmm;
    public static Code EVEX_Vpmovq2m_kr_xmm;
    public static Code EVEX_Vpmovq2m_kr_ymm;
    public static Code EVEX_Vpmovq2m_kr_zmm;
    public static Code Pminuw_xmm_xmmm128;
    public static Code VEX_Vpminuw_xmm_xmm_xmmm128;
    public static Code VEX_Vpminuw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpminuw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpminuw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpminuw_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpbroadcastmw2d_xmm_kr;
    public static Code EVEX_Vpbroadcastmw2d_ymm_kr;
    public static Code EVEX_Vpbroadcastmw2d_zmm_kr;
    public static Code Pminud_xmm_xmmm128;
    public static Code VEX_Vpminud_xmm_xmm_xmmm128;
    public static Code VEX_Vpminud_ymm_ymm_ymmm256;
    public static Code EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64;
    public static Code Pmaxsb_xmm_xmmm128;
    public static Code VEX_Vpmaxsb_xmm_xmm_xmmm128;
    public static Code VEX_Vpmaxsb_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512;
    public static Code Pmaxsd_xmm_xmmm128;
    public static Code VEX_Vpmaxsd_xmm_xmm_xmmm128;
    public static Code VEX_Vpmaxsd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64;
    public static Code Pmaxuw_xmm_xmmm128;
    public static Code VEX_Vpmaxuw_xmm_xmm_xmmm128;
    public static Code VEX_Vpmaxuw_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512;
    public static Code Pmaxud_xmm_xmmm128;
    public static Code VEX_Vpmaxud_xmm_xmm_xmmm128;
    public static Code VEX_Vpmaxud_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64;
    public static Code Pmulld_xmm_xmmm128;
    public static Code VEX_Vpmulld_xmm_xmm_xmmm128;
    public static Code VEX_Vpmulld_ymm_ymm_ymmm256;
    public static Code EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64;
    public static Code Phminposuw_xmm_xmmm128;
    public static Code VEX_Vphminposuw_xmm_xmmm128;
    public static Code EVEX_Vgetexpps_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vgetexpps_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae;
    public static Code EVEX_Vgetexppd_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vgetexppd_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae;
    public static Code EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae;
    public static Code EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae;
    public static Code EVEX_Vplzcntd_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vplzcntd_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vplzcntd_zmm_k1z_zmmm512b32;
    public static Code EVEX_Vplzcntq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vplzcntq_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vplzcntq_zmm_k1z_zmmm512b64;
    public static Code VEX_Vpsrlvd_xmm_xmm_xmmm128;
    public static Code VEX_Vpsrlvd_ymm_ymm_ymmm256;
    public static Code VEX_Vpsrlvq_xmm_xmm_xmmm128;
    public static Code VEX_Vpsrlvq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64;
    public static Code VEX_Vpsravd_xmm_xmm_xmmm128;
    public static Code VEX_Vpsravd_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64;
    public static Code VEX_Vpsllvd_xmm_xmm_xmmm128;
    public static Code VEX_Vpsllvd_ymm_ymm_ymmm256;
    public static Code VEX_Vpsllvq_xmm_xmm_xmmm128;
    public static Code VEX_Vpsllvq_ymm_ymm_ymmm256;
    public static Code EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vrcp14ps_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vrcp14ps_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vrcp14ps_zmm_k1z_zmmm512b32;
    public static Code EVEX_Vrcp14pd_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vrcp14pd_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vrcp14pd_zmm_k1z_zmmm512b64;
    public static Code EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32;
    public static Code EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64;
    public static Code EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32;
    public static Code EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64;
    public static Code EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32;
    public static Code EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64;
    public static Code EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vp4dpwssd_zmm_k1z_zmmp3_m128;
    public static Code EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vp4dpwssds_zmm_k1z_zmmp3_m128;
    public static Code EVEX_Vpopcntb_xmm_k1z_xmmm128;
    public static Code EVEX_Vpopcntb_ymm_k1z_ymmm256;
    public static Code EVEX_Vpopcntb_zmm_k1z_zmmm512;
    public static Code EVEX_Vpopcntw_xmm_k1z_xmmm128;
    public static Code EVEX_Vpopcntw_ymm_k1z_ymmm256;
    public static Code EVEX_Vpopcntw_zmm_k1z_zmmm512;
    public static Code EVEX_Vpopcntd_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vpopcntd_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vpopcntd_zmm_k1z_zmmm512b32;
    public static Code EVEX_Vpopcntq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vpopcntq_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vpopcntq_zmm_k1z_zmmm512b64;
    public static Code VEX_Vpbroadcastd_xmm_xmmm32;
    public static Code VEX_Vpbroadcastd_ymm_xmmm32;
    public static Code EVEX_Vpbroadcastd_xmm_k1z_xmmm32;
    public static Code EVEX_Vpbroadcastd_ymm_k1z_xmmm32;
    public static Code EVEX_Vpbroadcastd_zmm_k1z_xmmm32;
    public static Code VEX_Vpbroadcastq_xmm_xmmm64;
    public static Code VEX_Vpbroadcastq_ymm_xmmm64;
    public static Code EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64;
    public static Code EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64;
    public static Code EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64;
    public static Code EVEX_Vpbroadcastq_xmm_k1z_xmmm64;
    public static Code EVEX_Vpbroadcastq_ymm_k1z_xmmm64;
    public static Code EVEX_Vpbroadcastq_zmm_k1z_xmmm64;
    public static Code VEX_Vbroadcasti128_ymm_m128;
    public static Code EVEX_Vbroadcasti32x4_ymm_k1z_m128;
    public static Code EVEX_Vbroadcasti32x4_zmm_k1z_m128;
    public static Code EVEX_Vbroadcasti64x2_ymm_k1z_m128;
    public static Code EVEX_Vbroadcasti64x2_zmm_k1z_m128;
    public static Code EVEX_Vbroadcasti32x8_zmm_k1z_m256;
    public static Code EVEX_Vbroadcasti64x4_zmm_k1z_m256;
    public static Code EVEX_Vpexpandb_xmm_k1z_xmmm128;
    public static Code EVEX_Vpexpandb_ymm_k1z_ymmm256;
    public static Code EVEX_Vpexpandb_zmm_k1z_zmmm512;
    public static Code EVEX_Vpexpandw_xmm_k1z_xmmm128;
    public static Code EVEX_Vpexpandw_ymm_k1z_ymmm256;
    public static Code EVEX_Vpexpandw_zmm_k1z_zmmm512;
    public static Code EVEX_Vpcompressb_xmmm128_k1z_xmm;
    public static Code EVEX_Vpcompressb_ymmm256_k1z_ymm;
    public static Code EVEX_Vpcompressb_zmmm512_k1z_zmm;
    public static Code EVEX_Vpcompressw_xmmm128_k1z_xmm;
    public static Code EVEX_Vpcompressw_ymmm256_k1z_ymm;
    public static Code EVEX_Vpcompressw_zmmm512_k1z_zmm;
    public static Code EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vp2intersectd_kp1_xmm_xmmm128b32;
    public static Code EVEX_Vp2intersectd_kp1_ymm_ymmm256b32;
    public static Code EVEX_Vp2intersectd_kp1_zmm_zmmm512b32;
    public static Code EVEX_Vp2intersectq_kp1_xmm_xmmm128b64;
    public static Code EVEX_Vp2intersectq_kp1_ymm_ymmm256b64;
    public static Code EVEX_Vp2intersectq_kp1_zmm_zmmm512b64;
    public static Code EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32;
    public static Code EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32;
    public static Code EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64;
    public static Code VEX_Vpbroadcastb_xmm_xmmm8;
    public static Code VEX_Vpbroadcastb_ymm_xmmm8;
    public static Code EVEX_Vpbroadcastb_xmm_k1z_xmmm8;
    public static Code EVEX_Vpbroadcastb_ymm_k1z_xmmm8;
    public static Code EVEX_Vpbroadcastb_zmm_k1z_xmmm8;
    public static Code VEX_Vpbroadcastw_xmm_xmmm16;
    public static Code VEX_Vpbroadcastw_ymm_xmmm16;
    public static Code EVEX_Vpbroadcastw_xmm_k1z_xmmm16;
    public static Code EVEX_Vpbroadcastw_ymm_k1z_xmmm16;
    public static Code EVEX_Vpbroadcastw_zmm_k1z_xmmm16;
    public static Code EVEX_Vpbroadcastb_xmm_k1z_r32;
    public static Code EVEX_Vpbroadcastb_ymm_k1z_r32;
    public static Code EVEX_Vpbroadcastb_zmm_k1z_r32;
    public static Code EVEX_Vpbroadcastw_xmm_k1z_r32;
    public static Code EVEX_Vpbroadcastw_ymm_k1z_r32;
    public static Code EVEX_Vpbroadcastw_zmm_k1z_r32;
    public static Code EVEX_Vpbroadcastd_xmm_k1z_r32;
    public static Code EVEX_Vpbroadcastd_ymm_k1z_r32;
    public static Code EVEX_Vpbroadcastd_zmm_k1z_r32;
    public static Code EVEX_Vpbroadcastq_xmm_k1z_r64;
    public static Code EVEX_Vpbroadcastq_ymm_k1z_r64;
    public static Code EVEX_Vpbroadcastq_zmm_k1z_r64;
    public static Code EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32;
    public static Code EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64;
    public static Code Invept_r32_m128;
    public static Code Invept_r64_m128;
    public static Code Invvpid_r32_m128;
    public static Code Invvpid_r64_m128;
    public static Code Invpcid_r32_m128;
    public static Code Invpcid_r64_m128;
    public static Code EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vexpandps_xmm_k1z_xmmm128;
    public static Code EVEX_Vexpandps_ymm_k1z_ymmm256;
    public static Code EVEX_Vexpandps_zmm_k1z_zmmm512;
    public static Code EVEX_Vexpandpd_xmm_k1z_xmmm128;
    public static Code EVEX_Vexpandpd_ymm_k1z_ymmm256;
    public static Code EVEX_Vexpandpd_zmm_k1z_zmmm512;
    public static Code EVEX_Vpexpandd_xmm_k1z_xmmm128;
    public static Code EVEX_Vpexpandd_ymm_k1z_ymmm256;
    public static Code EVEX_Vpexpandd_zmm_k1z_zmmm512;
    public static Code EVEX_Vpexpandq_xmm_k1z_xmmm128;
    public static Code EVEX_Vpexpandq_ymm_k1z_ymmm256;
    public static Code EVEX_Vpexpandq_zmm_k1z_zmmm512;
    public static Code EVEX_Vcompressps_xmmm128_k1z_xmm;
    public static Code EVEX_Vcompressps_ymmm256_k1z_ymm;
    public static Code EVEX_Vcompressps_zmmm512_k1z_zmm;
    public static Code EVEX_Vcompresspd_xmmm128_k1z_xmm;
    public static Code EVEX_Vcompresspd_ymmm256_k1z_ymm;
    public static Code EVEX_Vcompresspd_zmmm512_k1z_zmm;
    public static Code EVEX_Vpcompressd_xmmm128_k1z_xmm;
    public static Code EVEX_Vpcompressd_ymmm256_k1z_ymm;
    public static Code EVEX_Vpcompressd_zmmm512_k1z_zmm;
    public static Code EVEX_Vpcompressq_xmmm128_k1z_xmm;
    public static Code EVEX_Vpcompressq_ymmm256_k1z_ymm;
    public static Code EVEX_Vpcompressq_zmmm512_k1z_zmm;
    public static Code VEX_Vpmaskmovd_xmm_xmm_m128;
    public static Code VEX_Vpmaskmovd_ymm_ymm_m256;
    public static Code VEX_Vpmaskmovq_xmm_xmm_m128;
    public static Code VEX_Vpmaskmovq_ymm_ymm_m256;
    public static Code EVEX_Vpermb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpermb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpermb_zmm_k1z_zmm_zmmm512;
    public static Code EVEX_Vpermw_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vpermw_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vpermw_zmm_k1z_zmm_zmmm512;
    public static Code VEX_Vpmaskmovd_m128_xmm_xmm;
    public static Code VEX_Vpmaskmovd_m256_ymm_ymm;
    public static Code VEX_Vpmaskmovq_m128_xmm_xmm;
    public static Code VEX_Vpmaskmovq_m256_ymm_ymm;
    public static Code EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128;
    public static Code EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256;
    public static Code EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512;
    public static Code VEX_Vpgatherdd_xmm_vm32x_xmm;
    public static Code VEX_Vpgatherdd_ymm_vm32y_ymm;
    public static Code VEX_Vpgatherdq_xmm_vm32x_xmm;
    public static Code VEX_Vpgatherdq_ymm_vm32x_ymm;
    public static Code EVEX_Vpgatherdd_xmm_k1_vm32x;
    public static Code EVEX_Vpgatherdd_ymm_k1_vm32y;
    public static Code EVEX_Vpgatherdd_zmm_k1_vm32z;
    public static Code EVEX_Vpgatherdq_xmm_k1_vm32x;
    public static Code EVEX_Vpgatherdq_ymm_k1_vm32x;
    public static Code EVEX_Vpgatherdq_zmm_k1_vm32y;
    public static Code VEX_Vpgatherqd_xmm_vm64x_xmm;
    public static Code VEX_Vpgatherqd_xmm_vm64y_xmm;
    public static Code VEX_Vpgatherqq_xmm_vm64x_xmm;
    public static Code VEX_Vpgatherqq_ymm_vm64y_ymm;
    public static Code EVEX_Vpgatherqd_xmm_k1_vm64x;
    public static Code EVEX_Vpgatherqd_xmm_k1_vm64y;
    public static Code EVEX_Vpgatherqd_ymm_k1_vm64z;
    public static Code EVEX_Vpgatherqq_xmm_k1_vm64x;
    public static Code EVEX_Vpgatherqq_ymm_k1_vm64y;
    public static Code EVEX_Vpgatherqq_zmm_k1_vm64z;
    public static Code VEX_Vgatherdps_xmm_vm32x_xmm;
    public static Code VEX_Vgatherdps_ymm_vm32y_ymm;
    public static Code VEX_Vgatherdpd_xmm_vm32x_xmm;
    public static Code VEX_Vgatherdpd_ymm_vm32x_ymm;
    public static Code EVEX_Vgatherdps_xmm_k1_vm32x;
    public static Code EVEX_Vgatherdps_ymm_k1_vm32y;
    public static Code EVEX_Vgatherdps_zmm_k1_vm32z;
    public static Code EVEX_Vgatherdpd_xmm_k1_vm32x;
    public static Code EVEX_Vgatherdpd_ymm_k1_vm32x;
    public static Code EVEX_Vgatherdpd_zmm_k1_vm32y;
    public static Code VEX_Vgatherqps_xmm_vm64x_xmm;
    public static Code VEX_Vgatherqps_xmm_vm64y_xmm;
    public static Code VEX_Vgatherqpd_xmm_vm64x_xmm;
    public static Code VEX_Vgatherqpd_ymm_vm64y_ymm;
    public static Code EVEX_Vgatherqps_xmm_k1_vm64x;
    public static Code EVEX_Vgatherqps_xmm_k1_vm64y;
    public static Code EVEX_Vgatherqps_ymm_k1_vm64z;
    public static Code EVEX_Vgatherqpd_xmm_k1_vm64x;
    public static Code EVEX_Vgatherqpd_ymm_k1_vm64y;
    public static Code EVEX_Vgatherqpd_zmm_k1_vm64z;
    public static Code VEX_Vfmaddsub132ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddsub132ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmaddsub132pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddsub132pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmsubadd132ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubadd132ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsubadd132pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubadd132pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmadd132ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmadd132ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmadd132pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmadd132pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmadd132ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfmadd132sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er;
    public static Code VEX_Vfmsub132ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsub132ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsub132pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsub132pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code EVEX_V4fmaddps_zmm_k1z_zmmp3_m128;
    public static Code VEX_Vfmsub132ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfmsub132sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er;
    public static Code EVEX_V4fmaddss_xmm_k1z_xmmp3_m128;
    public static Code VEX_Vfnmadd132ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmadd132ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmadd132pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmadd132pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfnmadd132ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfnmadd132sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er;
    public static Code VEX_Vfnmsub132ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmsub132ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmsub132pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmsub132pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfnmsub132ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfnmsub132sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er;
    public static Code EVEX_Vpscatterdd_vm32x_k1_xmm;
    public static Code EVEX_Vpscatterdd_vm32y_k1_ymm;
    public static Code EVEX_Vpscatterdd_vm32z_k1_zmm;
    public static Code EVEX_Vpscatterdq_vm32x_k1_xmm;
    public static Code EVEX_Vpscatterdq_vm32x_k1_ymm;
    public static Code EVEX_Vpscatterdq_vm32y_k1_zmm;
    public static Code EVEX_Vpscatterqd_vm64x_k1_xmm;
    public static Code EVEX_Vpscatterqd_vm64y_k1_xmm;
    public static Code EVEX_Vpscatterqd_vm64z_k1_ymm;
    public static Code EVEX_Vpscatterqq_vm64x_k1_xmm;
    public static Code EVEX_Vpscatterqq_vm64y_k1_ymm;
    public static Code EVEX_Vpscatterqq_vm64z_k1_zmm;
    public static Code EVEX_Vscatterdps_vm32x_k1_xmm;
    public static Code EVEX_Vscatterdps_vm32y_k1_ymm;
    public static Code EVEX_Vscatterdps_vm32z_k1_zmm;
    public static Code EVEX_Vscatterdpd_vm32x_k1_xmm;
    public static Code EVEX_Vscatterdpd_vm32x_k1_ymm;
    public static Code EVEX_Vscatterdpd_vm32y_k1_zmm;
    public static Code EVEX_Vscatterqps_vm64x_k1_xmm;
    public static Code EVEX_Vscatterqps_vm64y_k1_xmm;
    public static Code EVEX_Vscatterqps_vm64z_k1_ymm;
    public static Code EVEX_Vscatterqpd_vm64x_k1_xmm;
    public static Code EVEX_Vscatterqpd_vm64y_k1_ymm;
    public static Code EVEX_Vscatterqpd_vm64z_k1_zmm;
    public static Code VEX_Vfmaddsub213ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddsub213ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmaddsub213pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddsub213pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmsubadd213ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubadd213ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsubadd213pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubadd213pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmadd213ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmadd213ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmadd213pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmadd213pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmadd213ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfmadd213sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er;
    public static Code VEX_Vfmsub213ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsub213ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsub213pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsub213pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code EVEX_V4fnmaddps_zmm_k1z_zmmp3_m128;
    public static Code VEX_Vfmsub213ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfmsub213sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er;
    public static Code EVEX_V4fnmaddss_xmm_k1z_xmmp3_m128;
    public static Code VEX_Vfnmadd213ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmadd213ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmadd213pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmadd213pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfnmadd213ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfnmadd213sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er;
    public static Code VEX_Vfnmsub213ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmsub213ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmsub213pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmsub213pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfnmsub213ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfnmsub213sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er;
    public static Code EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64;
    public static Code EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64;
    public static Code VEX_Vfmaddsub231ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddsub231ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmaddsub231pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddsub231pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmsubadd231ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubadd231ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsubadd231pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubadd231pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmadd231ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmadd231ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmadd231pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmadd231pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmadd231ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfmadd231sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er;
    public static Code VEX_Vfmsub231ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsub231ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsub231pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsub231pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfmsub231ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfmsub231sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er;
    public static Code VEX_Vfnmadd231ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmadd231ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmadd231pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmadd231pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfnmadd231ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfnmadd231sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er;
    public static Code VEX_Vfnmsub231ps_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmsub231ps_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmsub231pd_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmsub231pd_ymm_ymm_ymmm256;
    public static Code EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64;
    public static Code EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64;
    public static Code EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er;
    public static Code VEX_Vfnmsub231ss_xmm_xmm_xmmm32;
    public static Code VEX_Vfnmsub231sd_xmm_xmm_xmmm64;
    public static Code EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er;
    public static Code EVEX_Vpconflictd_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vpconflictd_ymm_k1z_ymmm256b32;
    public static Code EVEX_Vpconflictd_zmm_k1z_zmmm512b32;
    public static Code EVEX_Vpconflictq_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vpconflictq_ymm_k1z_ymmm256b64;
    public static Code EVEX_Vpconflictq_zmm_k1z_zmmm512b64;
    public static Code EVEX_Vgatherpf0dps_vm32z_k1;
    public static Code EVEX_Vgatherpf0dpd_vm32y_k1;
    public static Code EVEX_Vgatherpf1dps_vm32z_k1;
    public static Code EVEX_Vgatherpf1dpd_vm32y_k1;
    public static Code EVEX_Vscatterpf0dps_vm32z_k1;
    public static Code EVEX_Vscatterpf0dpd_vm32y_k1;
    public static Code EVEX_Vscatterpf1dps_vm32z_k1;
    public static Code EVEX_Vscatterpf1dpd_vm32y_k1;
    public static Code EVEX_Vgatherpf0qps_vm64z_k1;
    public static Code EVEX_Vgatherpf0qpd_vm64z_k1;
    public static Code EVEX_Vgatherpf1qps_vm64z_k1;
    public static Code EVEX_Vgatherpf1qpd_vm64z_k1;
    public static Code EVEX_Vscatterpf0qps_vm64z_k1;
    public static Code EVEX_Vscatterpf0qpd_vm64z_k1;
    public static Code EVEX_Vscatterpf1qps_vm64z_k1;
    public static Code EVEX_Vscatterpf1qpd_vm64z_k1;
    public static Code Sha1nexte_xmm_xmmm128;
    public static Code EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae;
    public static Code EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae;
    public static Code Sha1msg1_xmm_xmmm128;
    public static Code Sha1msg2_xmm_xmmm128;
    public static Code EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae;
    public static Code EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae;
    public static Code Sha256rnds2_xmm_xmmm128;
    public static Code EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae;
    public static Code EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae;
    public static Code Sha256msg1_xmm_xmmm128;
    public static Code EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae;
    public static Code EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae;
    public static Code Sha256msg2_xmm_xmmm128;
    public static Code EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae;
    public static Code EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae;
    public static Code Gf2p8mulb_xmm_xmmm128;
    public static Code VEX_Vgf2p8mulb_xmm_xmm_xmmm128;
    public static Code VEX_Vgf2p8mulb_ymm_ymm_ymmm256;
    public static Code EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128;
    public static Code EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256;
    public static Code EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512;
    public static Code Aesimc_xmm_xmmm128;
    public static Code VEX_Vaesimc_xmm_xmmm128;
    public static Code Aesenc_xmm_xmmm128;
    public static Code VEX_Vaesenc_xmm_xmm_xmmm128;
    public static Code VEX_Vaesenc_ymm_ymm_ymmm256;
    public static Code EVEX_Vaesenc_xmm_xmm_xmmm128;
    public static Code EVEX_Vaesenc_ymm_ymm_ymmm256;
    public static Code EVEX_Vaesenc_zmm_zmm_zmmm512;
    public static Code Aesenclast_xmm_xmmm128;
    public static Code VEX_Vaesenclast_xmm_xmm_xmmm128;
    public static Code VEX_Vaesenclast_ymm_ymm_ymmm256;
    public static Code EVEX_Vaesenclast_xmm_xmm_xmmm128;
    public static Code EVEX_Vaesenclast_ymm_ymm_ymmm256;
    public static Code EVEX_Vaesenclast_zmm_zmm_zmmm512;
    public static Code Aesdec_xmm_xmmm128;
    public static Code VEX_Vaesdec_xmm_xmm_xmmm128;
    public static Code VEX_Vaesdec_ymm_ymm_ymmm256;
    public static Code EVEX_Vaesdec_xmm_xmm_xmmm128;
    public static Code EVEX_Vaesdec_ymm_ymm_ymmm256;
    public static Code EVEX_Vaesdec_zmm_zmm_zmmm512;
    public static Code Aesdeclast_xmm_xmmm128;
    public static Code VEX_Vaesdeclast_xmm_xmm_xmmm128;
    public static Code VEX_Vaesdeclast_ymm_ymm_ymmm256;
    public static Code EVEX_Vaesdeclast_xmm_xmm_xmmm128;
    public static Code EVEX_Vaesdeclast_ymm_ymm_ymmm256;
    public static Code EVEX_Vaesdeclast_zmm_zmm_zmmm512;
    public static Code Movbe_r16_m16;
    public static Code Movbe_r32_m32;
    public static Code Movbe_r64_m64;
    public static Code Crc32_r32_rm8;
    public static Code Crc32_r64_rm8;
    public static Code Movbe_m16_r16;
    public static Code Movbe_m32_r32;
    public static Code Movbe_m64_r64;
    public static Code Crc32_r32_rm16;
    public static Code Crc32_r32_rm32;
    public static Code Crc32_r64_rm64;
    public static Code VEX_Andn_r32_r32_rm32;
    public static Code VEX_Andn_r64_r64_rm64;
    public static Code VEX_Blsr_r32_rm32;
    public static Code VEX_Blsr_r64_rm64;
    public static Code VEX_Blsmsk_r32_rm32;
    public static Code VEX_Blsmsk_r64_rm64;
    public static Code VEX_Blsi_r32_rm32;
    public static Code VEX_Blsi_r64_rm64;
    public static Code VEX_Bzhi_r32_rm32_r32;
    public static Code VEX_Bzhi_r64_rm64_r64;
    public static Code Wrussd_m32_r32;
    public static Code Wrussq_m64_r64;
    public static Code VEX_Pext_r32_r32_rm32;
    public static Code VEX_Pext_r64_r64_rm64;
    public static Code VEX_Pdep_r32_r32_rm32;
    public static Code VEX_Pdep_r64_r64_rm64;
    public static Code Wrssd_m32_r32;
    public static Code Wrssq_m64_r64;
    public static Code Adcx_r32_rm32;
    public static Code Adcx_r64_rm64;
    public static Code Adox_r32_rm32;
    public static Code Adox_r64_rm64;
    public static Code VEX_Mulx_r32_r32_rm32;
    public static Code VEX_Mulx_r64_r64_rm64;
    public static Code VEX_Bextr_r32_rm32_r32;
    public static Code VEX_Bextr_r64_rm64_r64;
    public static Code VEX_Shlx_r32_rm32_r32;
    public static Code VEX_Shlx_r64_rm64_r64;
    public static Code VEX_Sarx_r32_rm32_r32;
    public static Code VEX_Sarx_r64_rm64_r64;
    public static Code VEX_Shrx_r32_rm32_r32;
    public static Code VEX_Shrx_r64_rm64_r64;
    public static Code Movdir64b_r16_m512;
    public static Code Movdir64b_r32_m512;
    public static Code Movdir64b_r64_m512;
    public static Code Enqcmds_r16_m512;
    public static Code Enqcmds_r32_m512;
    public static Code Enqcmds_r64_m512;
    public static Code Enqcmd_r16_m512;
    public static Code Enqcmd_r32_m512;
    public static Code Enqcmd_r64_m512;
    public static Code Movdiri_m32_r32;
    public static Code Movdiri_m64_r64;
    public static Code VEX_Vpermq_ymm_ymmm256_imm8;
    public static Code EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8;
    public static Code VEX_Vpermpd_ymm_ymmm256_imm8;
    public static Code EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8;
    public static Code VEX_Vpblendd_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vpblendd_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8;
    public static Code EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8;
    public static Code EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code VEX_Vpermilps_xmm_xmmm128_imm8;
    public static Code VEX_Vpermilps_ymm_ymmm256_imm8;
    public static Code EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8;
    public static Code VEX_Vpermilpd_xmm_xmmm128_imm8;
    public static Code VEX_Vpermilpd_ymm_ymmm256_imm8;
    public static Code EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8;
    public static Code VEX_Vperm2f128_ymm_ymm_ymmm256_imm8;
    public static Code Roundps_xmm_xmmm128_imm8;
    public static Code VEX_Vroundps_xmm_xmmm128_imm8;
    public static Code VEX_Vroundps_ymm_ymmm256_imm8;
    public static Code EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae;
    public static Code Roundpd_xmm_xmmm128_imm8;
    public static Code VEX_Vroundpd_xmm_xmmm128_imm8;
    public static Code VEX_Vroundpd_ymm_ymmm256_imm8;
    public static Code EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae;
    public static Code Roundss_xmm_xmmm32_imm8;
    public static Code VEX_Vroundss_xmm_xmm_xmmm32_imm8;
    public static Code EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae;
    public static Code Roundsd_xmm_xmmm64_imm8;
    public static Code VEX_Vroundsd_xmm_xmm_xmmm64_imm8;
    public static Code EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae;
    public static Code Blendps_xmm_xmmm128_imm8;
    public static Code VEX_Vblendps_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vblendps_ymm_ymm_ymmm256_imm8;
    public static Code Blendpd_xmm_xmmm128_imm8;
    public static Code VEX_Vblendpd_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vblendpd_ymm_ymm_ymmm256_imm8;
    public static Code Pblendw_xmm_xmmm128_imm8;
    public static Code VEX_Vpblendw_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vpblendw_ymm_ymm_ymmm256_imm8;
    public static Code Palignr_mm_mmm64_imm8;
    public static Code Palignr_xmm_xmmm128_imm8;
    public static Code VEX_Vpalignr_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vpalignr_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8;
    public static Code EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8;
    public static Code EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8;
    public static Code Pextrb_r32m8_xmm_imm8;
    public static Code Pextrb_r64m8_xmm_imm8;
    public static Code VEX_Vpextrb_r32m8_xmm_imm8;
    public static Code VEX_Vpextrb_r64m8_xmm_imm8;
    public static Code EVEX_Vpextrb_r32m8_xmm_imm8;
    public static Code EVEX_Vpextrb_r64m8_xmm_imm8;
    public static Code Pextrw_r32m16_xmm_imm8;
    public static Code Pextrw_r64m16_xmm_imm8;
    public static Code VEX_Vpextrw_r32m16_xmm_imm8;
    public static Code VEX_Vpextrw_r64m16_xmm_imm8;
    public static Code EVEX_Vpextrw_r32m16_xmm_imm8;
    public static Code EVEX_Vpextrw_r64m16_xmm_imm8;
    public static Code Pextrd_rm32_xmm_imm8;
    public static Code Pextrq_rm64_xmm_imm8;
    public static Code VEX_Vpextrd_rm32_xmm_imm8;
    public static Code VEX_Vpextrq_rm64_xmm_imm8;
    public static Code EVEX_Vpextrd_rm32_xmm_imm8;
    public static Code EVEX_Vpextrq_rm64_xmm_imm8;
    public static Code Extractps_rm32_xmm_imm8;
    public static Code Extractps_r64m32_xmm_imm8;
    public static Code VEX_Vextractps_rm32_xmm_imm8;
    public static Code VEX_Vextractps_r64m32_xmm_imm8;
    public static Code EVEX_Vextractps_rm32_xmm_imm8;
    public static Code EVEX_Vextractps_r64m32_xmm_imm8;
    public static Code VEX_Vinsertf128_ymm_ymm_xmmm128_imm8;
    public static Code EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8;
    public static Code EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8;
    public static Code EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8;
    public static Code EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8;
    public static Code VEX_Vextractf128_xmmm128_ymm_imm8;
    public static Code EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8;
    public static Code EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8;
    public static Code EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8;
    public static Code EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8;
    public static Code EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8;
    public static Code EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8;
    public static Code EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8;
    public static Code EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8;
    public static Code VEX_Vcvtps2ph_xmmm64_xmm_imm8;
    public static Code VEX_Vcvtps2ph_xmmm128_ymm_imm8;
    public static Code EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8;
    public static Code EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8;
    public static Code EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae;
    public static Code EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8;
    public static Code EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8;
    public static Code EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8;
    public static Code EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8;
    public static Code Pinsrb_xmm_r32m8_imm8;
    public static Code Pinsrb_xmm_r64m8_imm8;
    public static Code VEX_Vpinsrb_xmm_xmm_r32m8_imm8;
    public static Code VEX_Vpinsrb_xmm_xmm_r64m8_imm8;
    public static Code EVEX_Vpinsrb_xmm_xmm_r32m8_imm8;
    public static Code EVEX_Vpinsrb_xmm_xmm_r64m8_imm8;
    public static Code Insertps_xmm_xmmm32_imm8;
    public static Code VEX_Vinsertps_xmm_xmm_xmmm32_imm8;
    public static Code EVEX_Vinsertps_xmm_xmm_xmmm32_imm8;
    public static Code Pinsrd_xmm_rm32_imm8;
    public static Code Pinsrq_xmm_rm64_imm8;
    public static Code VEX_Vpinsrd_xmm_xmm_rm32_imm8;
    public static Code VEX_Vpinsrq_xmm_xmm_rm64_imm8;
    public static Code EVEX_Vpinsrd_xmm_xmm_rm32_imm8;
    public static Code EVEX_Vpinsrq_xmm_xmm_rm64_imm8;
    public static Code EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8;
    public static Code EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8;
    public static Code EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae;
    public static Code EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae;
    public static Code EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae;
    public static Code EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae;
    public static Code VEX_Kshiftrb_kr_kr_imm8;
    public static Code VEX_Kshiftrw_kr_kr_imm8;
    public static Code VEX_Kshiftrd_kr_kr_imm8;
    public static Code VEX_Kshiftrq_kr_kr_imm8;
    public static Code VEX_Kshiftlb_kr_kr_imm8;
    public static Code VEX_Kshiftlw_kr_kr_imm8;
    public static Code VEX_Kshiftld_kr_kr_imm8;
    public static Code VEX_Kshiftlq_kr_kr_imm8;
    public static Code VEX_Vinserti128_ymm_ymm_xmmm128_imm8;
    public static Code EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8;
    public static Code EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8;
    public static Code EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8;
    public static Code EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8;
    public static Code VEX_Vextracti128_xmmm128_ymm_imm8;
    public static Code EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8;
    public static Code EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8;
    public static Code EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8;
    public static Code EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8;
    public static Code EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8;
    public static Code EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8;
    public static Code EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8;
    public static Code EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8;
    public static Code EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8;
    public static Code EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8;
    public static Code EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8;
    public static Code EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8;
    public static Code EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8;
    public static Code EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8;
    public static Code EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8;
    public static Code EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8;
    public static Code EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8;
    public static Code EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8;
    public static Code EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8;
    public static Code EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8;
    public static Code Dpps_xmm_xmmm128_imm8;
    public static Code VEX_Vdpps_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vdpps_ymm_ymm_ymmm256_imm8;
    public static Code Dppd_xmm_xmmm128_imm8;
    public static Code VEX_Vdppd_xmm_xmm_xmmm128_imm8;
    public static Code Mpsadbw_xmm_xmmm128_imm8;
    public static Code VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8;
    public static Code EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8;
    public static Code EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8;
    public static Code EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8;
    public static Code EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code Pclmulqdq_xmm_xmmm128_imm8;
    public static Code VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8;
    public static Code EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8;
    public static Code VEX_Vperm2i128_ymm_ymm_ymmm256_imm8;
    public static Code VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4;
    public static Code VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4;
    public static Code VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4;
    public static Code VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4;
    public static Code VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4;
    public static Code VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4;
    public static Code VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4;
    public static Code VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4;
    public static Code VEX_Vblendvps_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vblendvps_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vblendvpd_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vblendvpd_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vpblendvb_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vpblendvb_ymm_ymm_ymmm256_ymm;
    public static Code EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
    public static Code EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
    public static Code EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae;
    public static Code EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae;
    public static Code EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae;
    public static Code EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae;
    public static Code EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae;
    public static Code EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae;
    public static Code EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8;
    public static Code EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8;
    public static Code EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae;
    public static Code EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8;
    public static Code EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8;
    public static Code EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae;
    public static Code EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae;
    public static Code EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae;
    public static Code VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfmaddsubps_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddsubps_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfmaddsubpd_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddsubpd_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfmsubaddps_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubaddps_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfmsubaddpd_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubaddpd_ymm_ymm_ymm_ymmm256;
    public static Code Pcmpestrm_xmm_xmmm128_imm8;
    public static Code Pcmpestrm64_xmm_xmmm128_imm8;
    public static Code VEX_Vpcmpestrm_xmm_xmmm128_imm8;
    public static Code VEX_Vpcmpestrm64_xmm_xmmm128_imm8;
    public static Code Pcmpestri_xmm_xmmm128_imm8;
    public static Code Pcmpestri64_xmm_xmmm128_imm8;
    public static Code VEX_Vpcmpestri_xmm_xmmm128_imm8;
    public static Code VEX_Vpcmpestri64_xmm_xmmm128_imm8;
    public static Code Pcmpistrm_xmm_xmmm128_imm8;
    public static Code VEX_Vpcmpistrm_xmm_xmmm128_imm8;
    public static Code Pcmpistri_xmm_xmmm128_imm8;
    public static Code VEX_Vpcmpistri_xmm_xmmm128_imm8;
    public static Code EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8;
    public static Code EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8;
    public static Code EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8;
    public static Code EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8;
    public static Code EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8;
    public static Code EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8;
    public static Code EVEX_Vfpclassss_kr_k1_xmmm32_imm8;
    public static Code EVEX_Vfpclasssd_kr_k1_xmmm64_imm8;
    public static Code VEX_Vfmaddps_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfmaddps_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfmaddps_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddps_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfmaddpd_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfmaddpd_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfmaddss_xmm_xmm_xmmm32_xmm;
    public static Code VEX_Vfmaddss_xmm_xmm_xmm_xmmm32;
    public static Code VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm;
    public static Code VEX_Vfmaddsd_xmm_xmm_xmm_xmmm64;
    public static Code VEX_Vfmsubps_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfmsubps_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfmsubps_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubps_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfmsubpd_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfmsubpd_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfmsubss_xmm_xmm_xmmm32_xmm;
    public static Code VEX_Vfmsubss_xmm_xmm_xmm_xmmm32;
    public static Code VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm;
    public static Code VEX_Vfmsubsd_xmm_xmm_xmm_xmmm64;
    public static Code EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8;
    public static Code EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8;
    public static Code EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8;
    public static Code EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8;
    public static Code EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8;
    public static Code EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8;
    public static Code EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8;
    public static Code EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8;
    public static Code EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8;
    public static Code EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8;
    public static Code EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfnmaddps_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmaddps_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfnmaddpd_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmaddpd_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm;
    public static Code VEX_Vfnmaddss_xmm_xmm_xmm_xmmm32;
    public static Code VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm;
    public static Code VEX_Vfnmaddsd_xmm_xmm_xmm_xmmm64;
    public static Code VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfnmsubps_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmsubps_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm;
    public static Code VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm;
    public static Code VEX_Vfnmsubpd_xmm_xmm_xmm_xmmm128;
    public static Code VEX_Vfnmsubpd_ymm_ymm_ymm_ymmm256;
    public static Code VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm;
    public static Code VEX_Vfnmsubss_xmm_xmm_xmm_xmmm32;
    public static Code VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm;
    public static Code VEX_Vfnmsubsd_xmm_xmm_xmm_xmmm64;
    public static Code Sha1rnds4_xmm_xmmm128_imm8;
    public static Code Gf2p8affineqb_xmm_xmmm128_imm8;
    public static Code VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code Gf2p8affineinvqb_xmm_xmmm128_imm8;
    public static Code VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8;
    public static Code VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8;
    public static Code EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8;
    public static Code EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8;
    public static Code EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8;
    public static Code Aeskeygenassist_xmm_xmmm128_imm8;
    public static Code VEX_Vaeskeygenassist_xmm_xmmm128_imm8;
    public static Code VEX_Rorx_r32_rm32_imm8;
    public static Code VEX_Rorx_r64_rm64_imm8;
    public static Code XOP_Vpmacssww_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacsww_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacswd_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpcmov_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpcmov_ymm_ymm_ymmm256_ymm;
    public static Code XOP_Vpcmov_xmm_xmm_xmm_xmmm128;
    public static Code XOP_Vpcmov_ymm_ymm_ymm_ymmm256;
    public static Code XOP_Vpperm_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpperm_xmm_xmm_xmm_xmmm128;
    public static Code XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm;
    public static Code XOP_Vprotb_xmm_xmmm128_imm8;
    public static Code XOP_Vprotw_xmm_xmmm128_imm8;
    public static Code XOP_Vprotd_xmm_xmmm128_imm8;
    public static Code XOP_Vprotq_xmm_xmmm128_imm8;
    public static Code XOP_Vpcomb_xmm_xmm_xmmm128_imm8;
    public static Code XOP_Vpcomw_xmm_xmm_xmmm128_imm8;
    public static Code XOP_Vpcomd_xmm_xmm_xmmm128_imm8;
    public static Code XOP_Vpcomq_xmm_xmm_xmmm128_imm8;
    public static Code XOP_Vpcomub_xmm_xmm_xmmm128_imm8;
    public static Code XOP_Vpcomuw_xmm_xmm_xmmm128_imm8;
    public static Code XOP_Vpcomud_xmm_xmm_xmmm128_imm8;
    public static Code XOP_Vpcomuq_xmm_xmm_xmmm128_imm8;
    public static Code XOP_Blcfill_r32_rm32;
    public static Code XOP_Blcfill_r64_rm64;
    public static Code XOP_Blsfill_r32_rm32;
    public static Code XOP_Blsfill_r64_rm64;
    public static Code XOP_Blcs_r32_rm32;
    public static Code XOP_Blcs_r64_rm64;
    public static Code XOP_Tzmsk_r32_rm32;
    public static Code XOP_Tzmsk_r64_rm64;
    public static Code XOP_Blcic_r32_rm32;
    public static Code XOP_Blcic_r64_rm64;
    public static Code XOP_Blsic_r32_rm32;
    public static Code XOP_Blsic_r64_rm64;
    public static Code XOP_T1mskc_r32_rm32;
    public static Code XOP_T1mskc_r64_rm64;
    public static Code XOP_Blcmsk_r32_rm32;
    public static Code XOP_Blcmsk_r64_rm64;
    public static Code XOP_Blci_r32_rm32;
    public static Code XOP_Blci_r64_rm64;
    public static Code XOP_Llwpcb_r32;
    public static Code XOP_Llwpcb_r64;
    public static Code XOP_Slwpcb_r32;
    public static Code XOP_Slwpcb_r64;
    public static Code XOP_Vfrczps_xmm_xmmm128;
    public static Code XOP_Vfrczps_ymm_ymmm256;
    public static Code XOP_Vfrczpd_xmm_xmmm128;
    public static Code XOP_Vfrczpd_ymm_ymmm256;
    public static Code XOP_Vfrczss_xmm_xmmm32;
    public static Code XOP_Vfrczsd_xmm_xmmm64;
    public static Code XOP_Vprotb_xmm_xmmm128_xmm;
    public static Code XOP_Vprotb_xmm_xmm_xmmm128;
    public static Code XOP_Vprotw_xmm_xmmm128_xmm;
    public static Code XOP_Vprotw_xmm_xmm_xmmm128;
    public static Code XOP_Vprotd_xmm_xmmm128_xmm;
    public static Code XOP_Vprotd_xmm_xmm_xmmm128;
    public static Code XOP_Vprotq_xmm_xmmm128_xmm;
    public static Code XOP_Vprotq_xmm_xmm_xmmm128;
    public static Code XOP_Vpshlb_xmm_xmmm128_xmm;
    public static Code XOP_Vpshlb_xmm_xmm_xmmm128;
    public static Code XOP_Vpshlw_xmm_xmmm128_xmm;
    public static Code XOP_Vpshlw_xmm_xmm_xmmm128;
    public static Code XOP_Vpshld_xmm_xmmm128_xmm;
    public static Code XOP_Vpshld_xmm_xmm_xmmm128;
    public static Code XOP_Vpshlq_xmm_xmmm128_xmm;
    public static Code XOP_Vpshlq_xmm_xmm_xmmm128;
    public static Code XOP_Vpshab_xmm_xmmm128_xmm;
    public static Code XOP_Vpshab_xmm_xmm_xmmm128;
    public static Code XOP_Vpshaw_xmm_xmmm128_xmm;
    public static Code XOP_Vpshaw_xmm_xmm_xmmm128;
    public static Code XOP_Vpshad_xmm_xmmm128_xmm;
    public static Code XOP_Vpshad_xmm_xmm_xmmm128;
    public static Code XOP_Vpshaq_xmm_xmmm128_xmm;
    public static Code XOP_Vpshaq_xmm_xmm_xmmm128;
    public static Code XOP_Vphaddbw_xmm_xmmm128;
    public static Code XOP_Vphaddbd_xmm_xmmm128;
    public static Code XOP_Vphaddbq_xmm_xmmm128;
    public static Code XOP_Vphaddwd_xmm_xmmm128;
    public static Code XOP_Vphaddwq_xmm_xmmm128;
    public static Code XOP_Vphadddq_xmm_xmmm128;
    public static Code XOP_Vphaddubw_xmm_xmmm128;
    public static Code XOP_Vphaddubd_xmm_xmmm128;
    public static Code XOP_Vphaddubq_xmm_xmmm128;
    public static Code XOP_Vphadduwd_xmm_xmmm128;
    public static Code XOP_Vphadduwq_xmm_xmmm128;
    public static Code XOP_Vphaddudq_xmm_xmmm128;
    public static Code XOP_Vphsubbw_xmm_xmmm128;
    public static Code XOP_Vphsubwd_xmm_xmmm128;
    public static Code XOP_Vphsubdq_xmm_xmmm128;
    public static Code XOP_Bextr_r32_rm32_imm32;
    public static Code XOP_Bextr_r64_rm64_imm32;
    public static Code XOP_Lwpins_r32_rm32_imm32;
    public static Code XOP_Lwpins_r64_rm32_imm32;
    public static Code XOP_Lwpval_r32_rm32_imm32;
    public static Code XOP_Lwpval_r64_rm32_imm32;
    public static Code D3NOW_Pi2fw_mm_mmm64;
    public static Code D3NOW_Pi2fd_mm_mmm64;
    public static Code D3NOW_Pf2iw_mm_mmm64;
    public static Code D3NOW_Pf2id_mm_mmm64;
    public static Code D3NOW_Pfrcpv_mm_mmm64;
    public static Code D3NOW_Pfrsqrtv_mm_mmm64;
    public static Code D3NOW_Pfnacc_mm_mmm64;
    public static Code D3NOW_Pfpnacc_mm_mmm64;
    public static Code D3NOW_Pfcmpge_mm_mmm64;
    public static Code D3NOW_Pfmin_mm_mmm64;
    public static Code D3NOW_Pfrcp_mm_mmm64;
    public static Code D3NOW_Pfrsqrt_mm_mmm64;
    public static Code D3NOW_Pfsub_mm_mmm64;
    public static Code D3NOW_Pfadd_mm_mmm64;
    public static Code D3NOW_Pfcmpgt_mm_mmm64;
    public static Code D3NOW_Pfmax_mm_mmm64;
    public static Code D3NOW_Pfrcpit1_mm_mmm64;
    public static Code D3NOW_Pfrsqit1_mm_mmm64;
    public static Code D3NOW_Pfsubr_mm_mmm64;
    public static Code D3NOW_Pfacc_mm_mmm64;
    public static Code D3NOW_Pfcmpeq_mm_mmm64;
    public static Code D3NOW_Pfmul_mm_mmm64;
    public static Code D3NOW_Pfrcpit2_mm_mmm64;
    public static Code D3NOW_Pmulhrw_mm_mmm64;
    public static Code D3NOW_Pswapd_mm_mmm64;
    public static Code D3NOW_Pavgusb_mm_mmm64;
    public static Code Rmpadjust;
    public static Code Rmpupdate;
    public static Code Psmash;
    public static Code Pvalidatew;
    public static Code Pvalidated;
    public static Code Pvalidateq;
    public static Code Serialize;
    public static Code Xsusldtrk;
    public static Code Xresldtrk;
    public static Code Invlpgbw;
    public static Code Invlpgbd;
    public static Code Invlpgbq;
    public static Code Tlbsync;
    public static Code Prefetchreserved3_m8;
    public static Code Prefetchreserved4_m8;
    public static Code Prefetchreserved5_m8;
    public static Code Prefetchreserved6_m8;
    public static Code Prefetchreserved7_m8;
    public static Code Ud0;
    public static Code Vmgexit;
    public static Code Getsecq;
    public static Code VEX_Ldtilecfg_m512;
    public static Code VEX_Tilerelease;
    public static Code VEX_Sttilecfg_m512;
    public static Code VEX_Tilezero_tmm;
    public static Code VEX_Tileloaddt1_tmm_sibmem;
    public static Code VEX_Tilestored_sibmem_tmm;
    public static Code VEX_Tileloadd_tmm_sibmem;
    public static Code VEX_Tdpbf16ps_tmm_tmm_tmm;
    public static Code VEX_Tdpbuud_tmm_tmm_tmm;
    public static Code VEX_Tdpbusd_tmm_tmm_tmm;
    public static Code VEX_Tdpbsud_tmm_tmm_tmm;
    public static Code VEX_Tdpbssd_tmm_tmm_tmm;
    public static Code Fnstdw_AX;
    public static Code Fnstsg_AX;
    public static Code Rdshr_rm32;
    public static Code Wrshr_rm32;
    public static Code Smint;
    public static Code Dmint;
    public static Code Rdm;
    public static Code Svdc_m80_Sreg;
    public static Code Rsdc_Sreg_m80;
    public static Code Svldt_m80;
    public static Code Rsldt_m80;
    public static Code Svts_m80;
    public static Code Rsts_m80;
    public static Code Smint_0F7E;
    public static Code Bb0_reset;
    public static Code Bb1_reset;
    public static Code Cpu_write;
    public static Code Cpu_read;
    public static Code Altinst;
    public static Code Paveb_mm_mmm64;
    public static Code Paddsiw_mm_mmm64;
    public static Code Pmagw_mm_mmm64;
    public static Code Pdistib_mm_m64;
    public static Code Psubsiw_mm_mmm64;
    public static Code Pmvzb_mm_m64;
    public static Code Pmulhrw_mm_mmm64;
    public static Code Pmvnzb_mm_m64;
    public static Code Pmvlzb_mm_m64;
    public static Code Pmvgezb_mm_m64;
    public static Code Pmulhriw_mm_mmm64;
    public static Code Pmachriw_mm_m64;
    public static Code Cyrix_D9D7;
    public static Code Cyrix_D9E2;
    public static Code Ftstp;
    public static Code Cyrix_D9E7;
    public static Code Frint2;
    public static Code Frichop;
    public static Code Cyrix_DED8;
    public static Code Cyrix_DEDA;
    public static Code Cyrix_DEDC;
    public static Code Cyrix_DEDD;
    public static Code Cyrix_DEDE;
    public static Code Frinear;
    public static Code Tdcall;
    public static Code Seamret;
    public static Code Seamops;
    public static Code Seamcall;
    public static Code Aesencwide128kl_m384;
    public static Code Aesdecwide128kl_m384;
    public static Code Aesencwide256kl_m512;
    public static Code Aesdecwide256kl_m512;
    public static Code Loadiwkey_xmm_xmm;
    public static Code Aesenc128kl_xmm_m384;
    public static Code Aesdec128kl_xmm_m384;
    public static Code Aesenc256kl_xmm_m512;
    public static Code Aesdec256kl_xmm_m512;
    public static Code Encodekey128_r32_r32;
    public static Code Encodekey256_r32_r32;
    public static Code VEX_Vbroadcastss_xmm_xmm;
    public static Code VEX_Vbroadcastss_ymm_xmm;
    public static Code VEX_Vbroadcastsd_ymm_xmm;
    public static Code Vmgexit_F2;
    public static Code Uiret;
    public static Code Testui;
    public static Code Clui;
    public static Code Stui;
    public static Code Senduipi_r64;
    public static Code Hreset_imm8;
    public static Code VEX_Vpdpbusd_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpbusd_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpbusds_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpbusds_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpwssd_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpwssd_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpwssds_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpwssds_ymm_ymm_ymmm256;
    public static Code Ccs_hash_16;
    public static Code Ccs_hash_32;
    public static Code Ccs_hash_64;
    public static Code Ccs_encrypt_16;
    public static Code Ccs_encrypt_32;
    public static Code Ccs_encrypt_64;
    public static Code Lkgs_rm16;
    public static Code Lkgs_r32m16;
    public static Code Lkgs_r64m16;
    public static Code Eretu;
    public static Code Erets;
    public static Code EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8;
    public static Code EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8;
    public static Code EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae;
    public static Code EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae;
    public static Code EVEX_Vcomish_xmm_xmmm16_sae;
    public static Code EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32;
    public static Code EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er;
    public static Code EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er;
    public static Code EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16;
    public static Code EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16;
    public static Code EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er;
    public static Code EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16;
    public static Code EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16;
    public static Code EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae;
    public static Code EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16;
    public static Code EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16;
    public static Code EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae;
    public static Code EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16;
    public static Code EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16;
    public static Code EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er;
    public static Code EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16;
    public static Code EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16;
    public static Code EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er;
    public static Code EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16;
    public static Code EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16;
    public static Code EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er;
    public static Code EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er;
    public static Code EVEX_Vcvtph2w_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vcvtph2w_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er;
    public static Code EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32;
    public static Code EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er;
    public static Code EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er;
    public static Code EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er;
    public static Code EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae;
    public static Code EVEX_Vcvtsh2si_r32_xmmm16_er;
    public static Code EVEX_Vcvtsh2si_r64_xmmm16_er;
    public static Code EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae;
    public static Code EVEX_Vcvtsh2usi_r32_xmmm16_er;
    public static Code EVEX_Vcvtsh2usi_r64_xmmm16_er;
    public static Code EVEX_Vcvtsi2sh_xmm_xmm_rm32_er;
    public static Code EVEX_Vcvtsi2sh_xmm_xmm_rm64_er;
    public static Code EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16;
    public static Code EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16;
    public static Code EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae;
    public static Code EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16;
    public static Code EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16;
    public static Code EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae;
    public static Code EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16;
    public static Code EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16;
    public static Code EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae;
    public static Code EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16;
    public static Code EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16;
    public static Code EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae;
    public static Code EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae;
    public static Code EVEX_Vcvttph2w_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vcvttph2w_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae;
    public static Code EVEX_Vcvttsh2si_r32_xmmm16_sae;
    public static Code EVEX_Vcvttsh2si_r64_xmmm16_sae;
    public static Code EVEX_Vcvttsh2usi_r32_xmmm16_sae;
    public static Code EVEX_Vcvttsh2usi_r64_xmmm16_sae;
    public static Code EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32;
    public static Code EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32;
    public static Code EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er;
    public static Code EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64;
    public static Code EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64;
    public static Code EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er;
    public static Code EVEX_Vcvtusi2sh_xmm_xmm_rm32_er;
    public static Code EVEX_Vcvtusi2sh_xmm_xmm_rm64_er;
    public static Code EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er;
    public static Code EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er;
    public static Code EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32;
    public static Code EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32;
    public static Code EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er;
    public static Code EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er;
    public static Code EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8;
    public static Code EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8;
    public static Code EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8;
    public static Code EVEX_Vfpclasssh_kr_k1_xmmm16_imm8;
    public static Code EVEX_Vgetexpph_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vgetexpph_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae;
    public static Code EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae;
    public static Code EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8;
    public static Code EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8;
    public static Code EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae;
    public static Code EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae;
    public static Code EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae;
    public static Code EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae;
    public static Code EVEX_Vminph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vminph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae;
    public static Code EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae;
    public static Code EVEX_Vmovsh_xmm_k1z_m16;
    public static Code EVEX_Vmovsh_m16_k1_xmm;
    public static Code EVEX_Vmovsh_xmm_k1z_xmm_xmm;
    public static Code EVEX_Vmovsh_xmm_k1z_xmm_xmm_MAP5_11;
    public static Code EVEX_Vmovw_xmm_r32m16;
    public static Code EVEX_Vmovw_xmm_r64m16;
    public static Code EVEX_Vmovw_r32m16_xmm;
    public static Code EVEX_Vmovw_r64m16_xmm;
    public static Code EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vrcpph_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vrcpph_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vrcpph_zmm_k1z_zmmm512b16;
    public static Code EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16;
    public static Code EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8;
    public static Code EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8;
    public static Code EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae;
    public static Code EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae;
    public static Code EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8;
    public static Code EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8;
    public static Code EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae;
    public static Code EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae;
    public static Code EVEX_Vrsqrtph_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vrsqrtph_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vrsqrtph_zmm_k1z_zmmm512b16;
    public static Code EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16;
    public static Code EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vsqrtph_xmm_k1z_xmmm128b16;
    public static Code EVEX_Vsqrtph_ymm_k1z_ymmm256b16;
    public static Code EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er;
    public static Code EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16;
    public static Code EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16;
    public static Code EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er;
    public static Code EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er;
    public static Code EVEX_Vucomish_xmm_xmmm16_sae;
    public static Code Rdudbg;
    public static Code Wrudbg;
    public static Code VEX_KNC_Jkzd_kr_rel8_64;
    public static Code VEX_KNC_Jknzd_kr_rel8_64;
    public static Code VEX_KNC_Vprefetchnta_m8;
    public static Code VEX_KNC_Vprefetch0_m8;
    public static Code VEX_KNC_Vprefetch1_m8;
    public static Code VEX_KNC_Vprefetch2_m8;
    public static Code VEX_KNC_Vprefetchenta_m8;
    public static Code VEX_KNC_Vprefetche0_m8;
    public static Code VEX_KNC_Vprefetche1_m8;
    public static Code VEX_KNC_Vprefetche2_m8;
    public static Code VEX_KNC_Kand_kr_kr;
    public static Code VEX_KNC_Kandn_kr_kr;
    public static Code VEX_KNC_Kandnr_kr_kr;
    public static Code VEX_KNC_Knot_kr_kr;
    public static Code VEX_KNC_Kor_kr_kr;
    public static Code VEX_KNC_Kxnor_kr_kr;
    public static Code VEX_KNC_Kxor_kr_kr;
    public static Code VEX_KNC_Kmerge2l1h_kr_kr;
    public static Code VEX_KNC_Kmerge2l1l_kr_kr;
    public static Code VEX_KNC_Jkzd_kr_rel32_64;
    public static Code VEX_KNC_Jknzd_kr_rel32_64;
    public static Code VEX_KNC_Kmov_kr_kr;
    public static Code VEX_KNC_Kmov_kr_r32;
    public static Code VEX_KNC_Kmov_r32_kr;
    public static Code VEX_KNC_Kconcath_r64_kr_kr;
    public static Code VEX_KNC_Kconcatl_r64_kr_kr;
    public static Code VEX_KNC_Kortest_kr_kr;
    public static Code VEX_KNC_Delay_r32;
    public static Code VEX_KNC_Delay_r64;
    public static Code VEX_KNC_Spflt_r32;
    public static Code VEX_KNC_Spflt_r64;
    public static Code VEX_KNC_Clevict1_m8;
    public static Code VEX_KNC_Clevict0_m8;
    public static Code VEX_KNC_Popcnt_r32_r32;
    public static Code VEX_KNC_Popcnt_r64_r64;
    public static Code VEX_KNC_Tzcnt_r32_r32;
    public static Code VEX_KNC_Tzcnt_r64_r64;
    public static Code VEX_KNC_Tzcnti_r32_r32;
    public static Code VEX_KNC_Tzcnti_r64_r64;
    public static Code VEX_KNC_Lzcnt_r32_r32;
    public static Code VEX_KNC_Lzcnt_r64_r64;
    public static Code VEX_KNC_Undoc_r32_rm32_128_F3_0F38_W0_F0;
    public static Code VEX_KNC_Undoc_r64_rm64_128_F3_0F38_W1_F0;
    public static Code VEX_KNC_Undoc_r32_rm32_128_F2_0F38_W0_F0;
    public static Code VEX_KNC_Undoc_r64_rm64_128_F2_0F38_W1_F0;
    public static Code VEX_KNC_Undoc_r32_rm32_128_F2_0F38_W0_F1;
    public static Code VEX_KNC_Undoc_r64_rm64_128_F2_0F38_W1_F1;
    public static Code VEX_KNC_Kextract_kr_r64_imm8;
    public static Code MVEX_Vprefetchnta_m;
    public static Code MVEX_Vprefetch0_m;
    public static Code MVEX_Vprefetch1_m;
    public static Code MVEX_Vprefetch2_m;
    public static Code MVEX_Vprefetchenta_m;
    public static Code MVEX_Vprefetche0_m;
    public static Code MVEX_Vprefetche1_m;
    public static Code MVEX_Vprefetche2_m;
    public static Code MVEX_Vmovaps_zmm_k1_zmmmt;
    public static Code MVEX_Vmovapd_zmm_k1_zmmmt;
    public static Code MVEX_Vmovaps_mt_k1_zmm;
    public static Code MVEX_Vmovapd_mt_k1_zmm;
    public static Code MVEX_Vmovnrapd_m_k1_zmm;
    public static Code MVEX_Vmovnrngoapd_m_k1_zmm;
    public static Code MVEX_Vmovnraps_m_k1_zmm;
    public static Code MVEX_Vmovnrngoaps_m_k1_zmm;
    public static Code MVEX_Vaddps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vaddpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vmulps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vmulpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vcvtps2pd_zmm_k1_zmmmt;
    public static Code MVEX_Vcvtpd2ps_zmm_k1_zmmmt;
    public static Code MVEX_Vsubps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vsubpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpcmpgtd_kr_k1_zmm_zmmmt;
    public static Code MVEX_Vmovdqa32_zmm_k1_zmmmt;
    public static Code MVEX_Vmovdqa64_zmm_k1_zmmmt;
    public static Code MVEX_Vpshufd_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vpsrld_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vpsrad_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vpslld_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vpcmpeqd_kr_k1_zmm_zmmmt;
    public static Code MVEX_Vcvtudq2pd_zmm_k1_zmmmt;
    public static Code MVEX_Vmovdqa32_mt_k1_zmm;
    public static Code MVEX_Vmovdqa64_mt_k1_zmm;
    public static Code MVEX_Clevict1_m;
    public static Code MVEX_Clevict0_m;
    public static Code MVEX_Vcmpps_kr_k1_zmm_zmmmt_imm8;
    public static Code MVEX_Vcmppd_kr_k1_zmm_zmmmt_imm8;
    public static Code MVEX_Vpandd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpandq_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpandnd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpandnq_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vcvtdq2pd_zmm_k1_zmmmt;
    public static Code MVEX_Vpord_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vporq_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpxord_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpxorq_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpsubd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpaddd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vbroadcastss_zmm_k1_mt;
    public static Code MVEX_Vbroadcastsd_zmm_k1_mt;
    public static Code MVEX_Vbroadcastf32x4_zmm_k1_mt;
    public static Code MVEX_Vbroadcastf64x4_zmm_k1_mt;
    public static Code MVEX_Vptestmd_kr_k1_zmm_zmmmt;
    public static Code MVEX_Vpermd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpminsd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpminud_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpmaxsd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpmaxud_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpmulld_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vgetexpps_zmm_k1_zmmmt;
    public static Code MVEX_Vgetexppd_zmm_k1_zmmmt;
    public static Code MVEX_Vpsrlvd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpsravd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpsllvd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_48;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_49;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_4A;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_4B;
    public static Code MVEX_Vaddnps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vaddnpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vgmaxabsps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vgminps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vgminpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vgmaxps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vgmaxpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_54;
    public static Code MVEX_Vfixupnanps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfixupnanpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_56;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_57;
    public static Code MVEX_Vpbroadcastd_zmm_k1_mt;
    public static Code MVEX_Vpbroadcastq_zmm_k1_mt;
    public static Code MVEX_Vbroadcasti32x4_zmm_k1_mt;
    public static Code MVEX_Vbroadcasti64x4_zmm_k1_mt;
    public static Code MVEX_Vpadcd_zmm_k1_kr_zmmmt;
    public static Code MVEX_Vpaddsetcd_zmm_k1_kr_zmmmt;
    public static Code MVEX_Vpsbbd_zmm_k1_kr_zmmmt;
    public static Code MVEX_Vpsubsetbd_zmm_k1_kr_zmmmt;
    public static Code MVEX_Vpblendmd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpblendmq_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vblendmps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vblendmpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_67;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_68;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_69;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_6A;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_6B;
    public static Code MVEX_Vpsubrd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vsubrps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vsubrpd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpsbbrd_zmm_k1_kr_zmmmt;
    public static Code MVEX_Vpsubrsetbd_zmm_k1_kr_zmmmt;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_70;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_71;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_72;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_73;
    public static Code MVEX_Vpcmpltd_kr_k1_zmm_zmmmt;
    public static Code MVEX_Vscaleps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpmulhud_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpmulhd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpgatherdd_zmm_k1_mvt;
    public static Code MVEX_Vpgatherdq_zmm_k1_mvt;
    public static Code MVEX_Vgatherdps_zmm_k1_mvt;
    public static Code MVEX_Vgatherdpd_zmm_k1_mvt;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_94;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W1_94;
    public static Code MVEX_Vfmadd132ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmadd132pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmsub132ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmsub132pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmadd132ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmadd132pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmsub132ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmsub132pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpscatterdd_mvt_k1_zmm;
    public static Code MVEX_Vpscatterdq_mvt_k1_zmm;
    public static Code MVEX_Vscatterdps_mvt_k1_zmm;
    public static Code MVEX_Vscatterdpd_mvt_k1_zmm;
    public static Code MVEX_Vfmadd233ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmadd213ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmadd213pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmsub213ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmsub213pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmadd213ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmadd213pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmsub213ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmsub213pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Undoc_zmm_k1_mvt_512_66_0F38_W0_B0;
    public static Code MVEX_Undoc_zmm_k1_mvt_512_66_0F38_W0_B2;
    public static Code MVEX_Vpmadd233d_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpmadd231d_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmadd231ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmadd231pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmsub231ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfmsub231pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmadd231ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmadd231pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmsub231ps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vfnmsub231pd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Undoc_zmm_k1_mvt_512_66_0F38_W0_C0;
    public static Code MVEX_Vgatherpf0hintdps_mvt_k1;
    public static Code MVEX_Vgatherpf0hintdpd_mvt_k1;
    public static Code MVEX_Vgatherpf0dps_mvt_k1;
    public static Code MVEX_Vgatherpf1dps_mvt_k1;
    public static Code MVEX_Vscatterpf0hintdps_mvt_k1;
    public static Code MVEX_Vscatterpf0hintdpd_mvt_k1;
    public static Code MVEX_Vscatterpf0dps_mvt_k1;
    public static Code MVEX_Vscatterpf1dps_mvt_k1;
    public static Code MVEX_Vexp223ps_zmm_k1_zmmmt;
    public static Code MVEX_Vlog2ps_zmm_k1_zmmmt;
    public static Code MVEX_Vrcp23ps_zmm_k1_zmmmt;
    public static Code MVEX_Vrsqrt23ps_zmm_k1_zmmmt;
    public static Code MVEX_Vaddsetsps_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Vpaddsetsd_zmm_k1_zmm_zmmmt;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_CE;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W1_CE;
    public static Code MVEX_Undoc_zmm_k1_zmm_zmmmt_512_66_0F38_W0_CF;
    public static Code MVEX_Vloadunpackld_zmm_k1_mt;
    public static Code MVEX_Vloadunpacklq_zmm_k1_mt;
    public static Code MVEX_Vpackstoreld_mt_k1_zmm;
    public static Code MVEX_Vpackstorelq_mt_k1_zmm;
    public static Code MVEX_Vloadunpacklps_zmm_k1_mt;
    public static Code MVEX_Vloadunpacklpd_zmm_k1_mt;
    public static Code MVEX_Vpackstorelps_mt_k1_zmm;
    public static Code MVEX_Vpackstorelpd_mt_k1_zmm;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_0F38_W0_D2;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_D2;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_0F38_W0_D3;
    public static Code MVEX_Vloadunpackhd_zmm_k1_mt;
    public static Code MVEX_Vloadunpackhq_zmm_k1_mt;
    public static Code MVEX_Vpackstorehd_mt_k1_zmm;
    public static Code MVEX_Vpackstorehq_mt_k1_zmm;
    public static Code MVEX_Vloadunpackhps_zmm_k1_mt;
    public static Code MVEX_Vloadunpackhpd_zmm_k1_mt;
    public static Code MVEX_Vpackstorehps_mt_k1_zmm;
    public static Code MVEX_Vpackstorehpd_mt_k1_zmm;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_0F38_W0_D6;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_66_0F38_W0_D6;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_512_0F38_W0_D7;
    public static Code MVEX_Valignd_zmm_k1_zmm_zmmmt_imm8;
    public static Code MVEX_Vpermf32x4_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vpcmpud_kr_k1_zmm_zmmmt_imm8;
    public static Code MVEX_Vpcmpd_kr_k1_zmm_zmmmt_imm8;
    public static Code MVEX_Vgetmantps_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vgetmantpd_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vrndfxpntps_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vrndfxpntpd_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vcvtfxpntudq2ps_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vcvtfxpntps2udq_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vcvtfxpntpd2udq_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vcvtfxpntdq2ps_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Vcvtfxpntps2dq_zmm_k1_zmmmt_imm8;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_imm8_512_66_0F3A_W0_D0;
    public static Code MVEX_Undoc_zmm_k1_zmmmt_imm8_512_66_0F3A_W0_D1;
    public static Code MVEX_Vcvtfxpntpd2dq_zmm_k1_zmmmt_imm8;
    public static Code Via_undoc_F30FA6F0_16;
    public static Code Via_undoc_F30FA6F0_32;
    public static Code Via_undoc_F30FA6F0_64;
    public static Code Via_undoc_F30FA6F8_16;
    public static Code Via_undoc_F30FA6F8_32;
    public static Code Via_undoc_F30FA6F8_64;
    public static Code Xsha512_16;
    public static Code Xsha512_32;
    public static Code Xsha512_64;
    public static Code Xstore_alt_16;
    public static Code Xstore_alt_32;
    public static Code Xstore_alt_64;
    public static Code Xsha512_alt_16;
    public static Code Xsha512_alt_32;
    public static Code Xsha512_alt_64;
    public static Code Zero_bytes;
    public static Code Wrmsrns;
    public static Code Wrmsrlist;
    public static Code Rdmsrlist;
    public static Code Rmpquery;
    public static Code Prefetchit1_m8;
    public static Code Prefetchit0_m8;
    public static Code Aadd_m32_r32;
    public static Code Aadd_m64_r64;
    public static Code Aand_m32_r32;
    public static Code Aand_m64_r64;
    public static Code Axor_m32_r32;
    public static Code Axor_m64_r64;
    public static Code Aor_m32_r32;
    public static Code Aor_m64_r64;
    public static Code VEX_Vpdpbuud_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpbuud_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpbsud_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpbsud_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpbssd_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpbssd_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpbuuds_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpbuuds_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpbsuds_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpbsuds_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpbssds_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpbssds_ymm_ymm_ymmm256;
    public static Code VEX_Tdpfp16ps_tmm_tmm_tmm;
    public static Code VEX_Vcvtneps2bf16_xmm_xmmm128;
    public static Code VEX_Vcvtneps2bf16_xmm_ymmm256;
    public static Code VEX_Vcvtneoph2ps_xmm_m128;
    public static Code VEX_Vcvtneoph2ps_ymm_m256;
    public static Code VEX_Vcvtneeph2ps_xmm_m128;
    public static Code VEX_Vcvtneeph2ps_ymm_m256;
    public static Code VEX_Vcvtneebf162ps_xmm_m128;
    public static Code VEX_Vcvtneebf162ps_ymm_m256;
    public static Code VEX_Vcvtneobf162ps_xmm_m128;
    public static Code VEX_Vcvtneobf162ps_ymm_m256;
    public static Code VEX_Vbcstnesh2ps_xmm_m16;
    public static Code VEX_Vbcstnesh2ps_ymm_m16;
    public static Code VEX_Vbcstnebf162ps_xmm_m16;
    public static Code VEX_Vbcstnebf162ps_ymm_m16;
    public static Code VEX_Vpmadd52luq_xmm_xmm_xmmm128;
    public static Code VEX_Vpmadd52luq_ymm_ymm_ymmm256;
    public static Code VEX_Vpmadd52huq_xmm_xmm_xmmm128;
    public static Code VEX_Vpmadd52huq_ymm_ymm_ymmm256;
    public static Code VEX_Cmpoxadd_m32_r32_r32;
    public static Code VEX_Cmpoxadd_m64_r64_r64;
    public static Code VEX_Cmpnoxadd_m32_r32_r32;
    public static Code VEX_Cmpnoxadd_m64_r64_r64;
    public static Code VEX_Cmpbxadd_m32_r32_r32;
    public static Code VEX_Cmpbxadd_m64_r64_r64;
    public static Code VEX_Cmpnbxadd_m32_r32_r32;
    public static Code VEX_Cmpnbxadd_m64_r64_r64;
    public static Code VEX_Cmpzxadd_m32_r32_r32;
    public static Code VEX_Cmpzxadd_m64_r64_r64;
    public static Code VEX_Cmpnzxadd_m32_r32_r32;
    public static Code VEX_Cmpnzxadd_m64_r64_r64;
    public static Code VEX_Cmpbexadd_m32_r32_r32;
    public static Code VEX_Cmpbexadd_m64_r64_r64;
    public static Code VEX_Cmpnbexadd_m32_r32_r32;
    public static Code VEX_Cmpnbexadd_m64_r64_r64;
    public static Code VEX_Cmpsxadd_m32_r32_r32;
    public static Code VEX_Cmpsxadd_m64_r64_r64;
    public static Code VEX_Cmpnsxadd_m32_r32_r32;
    public static Code VEX_Cmpnsxadd_m64_r64_r64;
    public static Code VEX_Cmppxadd_m32_r32_r32;
    public static Code VEX_Cmppxadd_m64_r64_r64;
    public static Code VEX_Cmpnpxadd_m32_r32_r32;
    public static Code VEX_Cmpnpxadd_m64_r64_r64;
    public static Code VEX_Cmplxadd_m32_r32_r32;
    public static Code VEX_Cmplxadd_m64_r64_r64;
    public static Code VEX_Cmpnlxadd_m32_r32_r32;
    public static Code VEX_Cmpnlxadd_m64_r64_r64;
    public static Code VEX_Cmplexadd_m32_r32_r32;
    public static Code VEX_Cmplexadd_m64_r64_r64;
    public static Code VEX_Cmpnlexadd_m32_r32_r32;
    public static Code VEX_Cmpnlexadd_m64_r64_r64;
    public static Code VEX_Tcmmrlfp16ps_tmm_tmm_tmm;
    public static Code VEX_Tcmmimfp16ps_tmm_tmm_tmm;
    public static Code Pbndkb;
    public static Code VEX_Vsha512rnds2_ymm_ymm_xmm;
    public static Code VEX_Vsha512msg1_ymm_xmm;
    public static Code VEX_Vsha512msg2_ymm_ymm;
    public static Code VEX_Vpdpwuud_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpwuud_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpwusd_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpwusd_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpwsud_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpwsud_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpwuuds_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpwuuds_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpwusds_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpwusds_ymm_ymm_ymmm256;
    public static Code VEX_Vpdpwsuds_xmm_xmm_xmmm128;
    public static Code VEX_Vpdpwsuds_ymm_ymm_ymmm256;
    public static Code VEX_Vsm3msg1_xmm_xmm_xmmm128;
    public static Code VEX_Vsm3msg2_xmm_xmm_xmmm128;
    public static Code VEX_Vsm4key4_xmm_xmm_xmmm128;
    public static Code VEX_Vsm4key4_ymm_ymm_ymmm256;
    public static Code VEX_Vsm4rnds4_xmm_xmm_xmmm128;
    public static Code VEX_Vsm4rnds4_ymm_ymm_ymmm256;
    public static Code VEX_Vsm3rnds2_xmm_xmm_xmmm128_imm8;
}
[ExtensionAttribute]
internal static class Iced.Intel.CodeExtensions : object {
    [ExtensionAttribute]
internal static bool IgnoresSegment(Code code);
    [ExtensionAttribute]
internal static bool IgnoresIndex(Code code);
    [ExtensionAttribute]
internal static bool IsTileStrideIndex(Code code);
}
public abstract class Iced.Intel.CodeReader : object {
    public abstract virtual int ReadByte();
}
public enum Iced.Intel.CodeSize : Enum {
    public int value__;
    public static CodeSize Unknown;
    public static CodeSize Code16;
    public static CodeSize Code32;
    public static CodeSize Code64;
}
public abstract class Iced.Intel.CodeWriter : object {
    public abstract virtual void WriteByte(byte value);
}
public enum Iced.Intel.ConditionCode : Enum {
    public int value__;
    public static ConditionCode None;
    public static ConditionCode o;
    public static ConditionCode no;
    public static ConditionCode b;
    public static ConditionCode ae;
    public static ConditionCode e;
    public static ConditionCode ne;
    public static ConditionCode be;
    public static ConditionCode a;
    public static ConditionCode s;
    public static ConditionCode ns;
    public static ConditionCode p;
    public static ConditionCode np;
    public static ConditionCode l;
    public static ConditionCode ge;
    public static ConditionCode le;
    public static ConditionCode g;
}
public class Iced.Intel.ConstantOffsets : ValueType {
    public byte DisplacementOffset;
    public byte DisplacementSize;
    public byte ImmediateOffset;
    public byte ImmediateSize;
    public byte ImmediateOffset2;
    public byte ImmediateSize2;
    private byte pad1;
    private byte pad2;
    public bool HasDisplacement { get; }
    public bool HasImmediate { get; }
    public bool HasImmediate2 { get; }
    [IsReadOnlyAttribute]
public bool get_HasDisplacement();
    [IsReadOnlyAttribute]
public bool get_HasImmediate();
    [IsReadOnlyAttribute]
public bool get_HasImmediate2();
}
public enum Iced.Intel.CpuidFeature : Enum {
    public int value__;
    public static CpuidFeature INTEL8086;
    public static CpuidFeature INTEL8086_ONLY;
    public static CpuidFeature INTEL186;
    public static CpuidFeature INTEL286;
    public static CpuidFeature INTEL286_ONLY;
    public static CpuidFeature INTEL386;
    public static CpuidFeature INTEL386_ONLY;
    public static CpuidFeature INTEL386_A0_ONLY;
    public static CpuidFeature INTEL486;
    public static CpuidFeature INTEL486_A_ONLY;
    public static CpuidFeature UMOV;
    public static CpuidFeature IA64;
    public static CpuidFeature X64;
    public static CpuidFeature ADX;
    public static CpuidFeature AES;
    public static CpuidFeature AVX;
    public static CpuidFeature AVX2;
    public static CpuidFeature AVX512_4FMAPS;
    public static CpuidFeature AVX512_4VNNIW;
    public static CpuidFeature AVX512_BF16;
    public static CpuidFeature AVX512_BITALG;
    public static CpuidFeature AVX512_IFMA;
    public static CpuidFeature AVX512_VBMI;
    public static CpuidFeature AVX512_VBMI2;
    public static CpuidFeature AVX512_VNNI;
    public static CpuidFeature AVX512_VP2INTERSECT;
    public static CpuidFeature AVX512_VPOPCNTDQ;
    public static CpuidFeature AVX512BW;
    public static CpuidFeature AVX512CD;
    public static CpuidFeature AVX512DQ;
    public static CpuidFeature AVX512ER;
    public static CpuidFeature AVX512F;
    public static CpuidFeature AVX512PF;
    public static CpuidFeature AVX512VL;
    public static CpuidFeature BMI1;
    public static CpuidFeature BMI2;
    public static CpuidFeature CET_IBT;
    public static CpuidFeature CET_SS;
    public static CpuidFeature CL1INVMB;
    public static CpuidFeature CLDEMOTE;
    public static CpuidFeature CLFLUSHOPT;
    public static CpuidFeature CLFSH;
    public static CpuidFeature CLWB;
    public static CpuidFeature CLZERO;
    public static CpuidFeature CMOV;
    public static CpuidFeature CMPXCHG16B;
    public static CpuidFeature CPUID;
    public static CpuidFeature CX8;
    public static CpuidFeature D3NOW;
    public static CpuidFeature D3NOWEXT;
    public static CpuidFeature OSS;
    public static CpuidFeature ENQCMD;
    public static CpuidFeature F16C;
    public static CpuidFeature FMA;
    public static CpuidFeature FMA4;
    public static CpuidFeature FPU;
    public static CpuidFeature FPU287;
    public static CpuidFeature FPU287XL_ONLY;
    public static CpuidFeature FPU387;
    public static CpuidFeature FPU387SL_ONLY;
    public static CpuidFeature FSGSBASE;
    public static CpuidFeature FXSR;
    public static CpuidFeature CYRIX_D3NOW;
    public static CpuidFeature GFNI;
    public static CpuidFeature HLE;
    public static CpuidFeature HLE_or_RTM;
    public static CpuidFeature INVEPT;
    public static CpuidFeature INVPCID;
    public static CpuidFeature INVVPID;
    public static CpuidFeature LWP;
    public static CpuidFeature LZCNT;
    public static CpuidFeature MCOMMIT;
    public static CpuidFeature MMX;
    public static CpuidFeature MONITOR;
    public static CpuidFeature MONITORX;
    public static CpuidFeature MOVBE;
    public static CpuidFeature MOVDIR64B;
    public static CpuidFeature MOVDIRI;
    public static CpuidFeature MPX;
    public static CpuidFeature MSR;
    public static CpuidFeature MULTIBYTENOP;
    public static CpuidFeature PADLOCK_ACE;
    public static CpuidFeature PADLOCK_PHE;
    public static CpuidFeature PADLOCK_PMM;
    public static CpuidFeature PADLOCK_RNG;
    public static CpuidFeature PAUSE;
    public static CpuidFeature PCLMULQDQ;
    public static CpuidFeature PCOMMIT;
    public static CpuidFeature PCONFIG;
    public static CpuidFeature PKU;
    public static CpuidFeature POPCNT;
    public static CpuidFeature PREFETCHW;
    public static CpuidFeature PREFETCHWT1;
    public static CpuidFeature PTWRITE;
    public static CpuidFeature RDPID;
    public static CpuidFeature RDPMC;
    public static CpuidFeature RDPRU;
    public static CpuidFeature RDRAND;
    public static CpuidFeature RDSEED;
    public static CpuidFeature RDTSCP;
    public static CpuidFeature RTM;
    public static CpuidFeature SEP;
    public static CpuidFeature SGX1;
    public static CpuidFeature SHA;
    public static CpuidFeature SKINIT;
    public static CpuidFeature SKINIT_or_SVM;
    public static CpuidFeature SMAP;
    public static CpuidFeature SMX;
    public static CpuidFeature SSE;
    public static CpuidFeature SSE2;
    public static CpuidFeature SSE3;
    public static CpuidFeature SSE4_1;
    public static CpuidFeature SSE4_2;
    public static CpuidFeature SSE4A;
    public static CpuidFeature SSSE3;
    public static CpuidFeature SVM;
    public static CpuidFeature SEV_ES;
    public static CpuidFeature SYSCALL;
    public static CpuidFeature TBM;
    public static CpuidFeature TSC;
    public static CpuidFeature VAES;
    public static CpuidFeature VMX;
    public static CpuidFeature VPCLMULQDQ;
    public static CpuidFeature WAITPKG;
    public static CpuidFeature WBNOINVD;
    public static CpuidFeature XOP;
    public static CpuidFeature XSAVE;
    public static CpuidFeature XSAVEC;
    public static CpuidFeature XSAVEOPT;
    public static CpuidFeature XSAVES;
    public static CpuidFeature SEV_SNP;
    public static CpuidFeature SERIALIZE;
    public static CpuidFeature TSXLDTRK;
    public static CpuidFeature INVLPGB;
    public static CpuidFeature AMX_BF16;
    public static CpuidFeature AMX_TILE;
    public static CpuidFeature AMX_INT8;
    public static CpuidFeature CYRIX_FPU;
    public static CpuidFeature CYRIX_SMM;
    public static CpuidFeature CYRIX_SMINT;
    public static CpuidFeature CYRIX_SMINT_0F7E;
    public static CpuidFeature CYRIX_SHR;
    public static CpuidFeature CYRIX_DDI;
    public static CpuidFeature CYRIX_EMMI;
    public static CpuidFeature CYRIX_DMI;
    public static CpuidFeature CENTAUR_AIS;
    public static CpuidFeature MOV_TR;
    public static CpuidFeature SMM;
    public static CpuidFeature TDX;
    public static CpuidFeature KL;
    public static CpuidFeature AESKLE;
    public static CpuidFeature WIDE_KL;
    public static CpuidFeature UINTR;
    public static CpuidFeature HRESET;
    public static CpuidFeature AVX_VNNI;
    public static CpuidFeature PADLOCK_GMI;
    public static CpuidFeature FRED;
    public static CpuidFeature LKGS;
    public static CpuidFeature AVX512_FP16;
    public static CpuidFeature UDBG;
    public static CpuidFeature KNC;
    public static CpuidFeature PADLOCK_UNDOC;
    public static CpuidFeature RMPQUERY;
    public static CpuidFeature RAO_INT;
    public static CpuidFeature PREFETCHITI;
    public static CpuidFeature AMX_FP16;
    public static CpuidFeature CMPCCXADD;
    public static CpuidFeature AVX_IFMA;
    public static CpuidFeature AVX_NE_CONVERT;
    public static CpuidFeature AVX_VNNI_INT8;
    public static CpuidFeature MSRLIST;
    public static CpuidFeature WRMSRNS;
    public static CpuidFeature AMX_COMPLEX;
    public static CpuidFeature SHA512;
    public static CpuidFeature SM3;
    public static CpuidFeature SM4;
    public static CpuidFeature TSE;
    public static CpuidFeature AVX_VNNI_INT16;
}
public class Iced.Intel.Decoder : object {
    private ulong instructionPointer;
    private CodeReader reader;
    private RegInfo2[] memRegs16;
    private OpCodeHandler[] handlers_MAP0;
    private OpCodeHandler[] handlers_VEX_MAP0;
    private OpCodeHandler[] handlers_VEX_0F;
    private OpCodeHandler[] handlers_VEX_0F38;
    private OpCodeHandler[] handlers_VEX_0F3A;
    private OpCodeHandler[] handlers_EVEX_0F;
    private OpCodeHandler[] handlers_EVEX_0F38;
    private OpCodeHandler[] handlers_EVEX_0F3A;
    private OpCodeHandler[] handlers_EVEX_MAP5;
    private OpCodeHandler[] handlers_EVEX_MAP6;
    private OpCodeHandler[] handlers_XOP_MAP8;
    private OpCodeHandler[] handlers_XOP_MAP9;
    private OpCodeHandler[] handlers_XOP_MAP10;
    private OpCodeHandler[] handlers_MVEX_0F;
    private OpCodeHandler[] handlers_MVEX_0F38;
    private OpCodeHandler[] handlers_MVEX_0F3A;
    internal State state;
    internal UInt32 displIndex;
    internal DecoderOptions options;
    internal UInt32 invalidCheckMask;
    internal UInt32 is64bMode_and_W;
    internal UInt32 reg15Mask;
    private UInt32 maskE0;
    private UInt32 rexMask;
    internal CodeSize defaultCodeSize;
    internal OpSize defaultOperandSize;
    private OpSize defaultAddressSize;
    internal OpSize defaultInvertedOperandSize;
    internal OpSize defaultInvertedAddressSize;
    internal bool is64bMode;
    [CompilerGeneratedAttribute]
private int <Bitness>k__BackingField;
    private static RegInfo2[] s_memRegs16;
    public ulong IP { get; public set; }
    public int Bitness { get; }
    public DecoderError LastError { get; }
    private static Decoder();
    private Decoder(CodeReader reader, ulong ip, DecoderOptions options, int bitness);
    public ulong get_IP();
    public void set_IP(ulong value);
    [CompilerGeneratedAttribute]
public int get_Bitness();
    [NullableContextAttribute("1")]
public static Decoder Create(int bitness, CodeReader reader, ulong ip, DecoderOptions options);
    [NullableContextAttribute("1")]
public static Decoder Create(int bitness, Byte[] data, ulong ip, DecoderOptions options);
    [NullableContextAttribute("1")]
public static Decoder Create(int bitness, CodeReader reader, DecoderOptions options);
    [NullableContextAttribute("1")]
public static Decoder Create(int bitness, Byte[] data, DecoderOptions options);
    internal UInt32 ReadByte();
    internal UInt32 ReadUInt16();
    internal UInt32 ReadUInt32();
    internal ulong ReadUInt64();
    public DecoderError get_LastError();
    public Instruction Decode();
    public void Decode(Instruction& instruction);
    internal void ResetRexPrefixState();
    internal void CallOpCodeHandlerXXTable(Instruction& instruction);
    internal UInt32 GetCurrentInstructionPointer32();
    internal ulong GetCurrentInstructionPointer64();
    internal void ClearMandatoryPrefix(Instruction& instruction);
    internal void SetXacquireXrelease(Instruction& instruction);
    internal void ClearMandatoryPrefixF3(Instruction& instruction);
    internal void ClearMandatoryPrefixF2(Instruction& instruction);
    internal void SetInvalidInstruction();
    internal void DecodeTable(OpCodeHandler[] table, Instruction& instruction);
    private void DecodeTable(OpCodeHandler handler, Instruction& instruction);
    internal void ReadModRM();
    internal void VEX2(Instruction& instruction);
    internal void VEX3(Instruction& instruction);
    internal void XOP(Instruction& instruction);
    internal void EVEX_MVEX(Instruction& instruction);
    internal Register ReadOpSegReg();
    internal bool ReadOpMem(Instruction& instruction);
    internal void ReadOpMemSib(Instruction& instruction);
    internal void ReadOpMem_MPX(Instruction& instruction);
    internal void ReadOpMem(Instruction& instruction, TupleType tupleType);
    internal void ReadOpMem_VSIB(Instruction& instruction, Register vsibIndex, TupleType tupleType);
    private void ReadOpMem16(Instruction& instruction, TupleType tupleType);
    private bool ReadOpMem32Or64(Instruction& instruction, Register baseReg, Register indexReg, TupleType tupleType, bool isVsib);
    private UInt32 GetDisp8N(TupleType tupleType);
    public ConstantOffsets GetConstantOffsets(Instruction& instruction);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<Instruction> System.Collections.Generic.IEnumerable<Iced.Intel.Instruction>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Iced.Intel.DecoderError : Enum {
    public int value__;
    public static DecoderError None;
    public static DecoderError InvalidInstruction;
    public static DecoderError NoMoreBytes;
}
internal class Iced.Intel.DecoderInternal.Code3 : ValueType {
    [FixedBufferAttribute("System.UInt16", "3")]
public <codes>e__FixedBuffer codes;
    public Code3(Code code16, Code code32, Code code64);
}
internal enum Iced.Intel.DecoderInternal.EvexOpCodeHandlerKind : Enum {
    public byte value__;
    public static EvexOpCodeHandlerKind Invalid;
    public static EvexOpCodeHandlerKind Invalid2;
    public static EvexOpCodeHandlerKind Dup;
    public static EvexOpCodeHandlerKind HandlerReference;
    public static EvexOpCodeHandlerKind ArrayReference;
    public static EvexOpCodeHandlerKind RM;
    public static EvexOpCodeHandlerKind Group;
    public static EvexOpCodeHandlerKind W;
    public static EvexOpCodeHandlerKind MandatoryPrefix2;
    public static EvexOpCodeHandlerKind VectorLength;
    public static EvexOpCodeHandlerKind VectorLength_er;
    public static EvexOpCodeHandlerKind Ed_V_Ib;
    public static EvexOpCodeHandlerKind Ev_VX;
    public static EvexOpCodeHandlerKind Ev_VX_Ib;
    public static EvexOpCodeHandlerKind Gv_W_er;
    public static EvexOpCodeHandlerKind GvM_VX_Ib;
    public static EvexOpCodeHandlerKind HkWIb_3;
    public static EvexOpCodeHandlerKind HkWIb_3b;
    public static EvexOpCodeHandlerKind HWIb;
    public static EvexOpCodeHandlerKind KkHW_3;
    public static EvexOpCodeHandlerKind KkHW_3b;
    public static EvexOpCodeHandlerKind KkHWIb_sae_3;
    public static EvexOpCodeHandlerKind KkHWIb_sae_3b;
    public static EvexOpCodeHandlerKind KkHWIb_3;
    public static EvexOpCodeHandlerKind KkHWIb_3b;
    public static EvexOpCodeHandlerKind KkWIb_3;
    public static EvexOpCodeHandlerKind KkWIb_3b;
    public static EvexOpCodeHandlerKind KP1HW;
    public static EvexOpCodeHandlerKind KR;
    public static EvexOpCodeHandlerKind MV;
    public static EvexOpCodeHandlerKind V_H_Ev_er;
    public static EvexOpCodeHandlerKind V_H_Ev_Ib;
    public static EvexOpCodeHandlerKind VHM;
    public static EvexOpCodeHandlerKind VHW_3;
    public static EvexOpCodeHandlerKind VHW_4;
    public static EvexOpCodeHandlerKind VHWIb;
    public static EvexOpCodeHandlerKind VK;
    public static EvexOpCodeHandlerKind Vk_VSIB;
    public static EvexOpCodeHandlerKind VkEv_REXW_2;
    public static EvexOpCodeHandlerKind VkEv_REXW_3;
    public static EvexOpCodeHandlerKind VkHM;
    public static EvexOpCodeHandlerKind VkHW_3;
    public static EvexOpCodeHandlerKind VkHW_3b;
    public static EvexOpCodeHandlerKind VkHW_5;
    public static EvexOpCodeHandlerKind VkHW_er_4;
    public static EvexOpCodeHandlerKind VkHW_er_4b;
    public static EvexOpCodeHandlerKind VkHWIb_3;
    public static EvexOpCodeHandlerKind VkHWIb_3b;
    public static EvexOpCodeHandlerKind VkHWIb_5;
    public static EvexOpCodeHandlerKind VkHWIb_er_4;
    public static EvexOpCodeHandlerKind VkHWIb_er_4b;
    public static EvexOpCodeHandlerKind VkM;
    public static EvexOpCodeHandlerKind VkW_3;
    public static EvexOpCodeHandlerKind VkW_3b;
    public static EvexOpCodeHandlerKind VkW_4;
    public static EvexOpCodeHandlerKind VkW_4b;
    public static EvexOpCodeHandlerKind VkW_er_4;
    public static EvexOpCodeHandlerKind VkW_er_5;
    public static EvexOpCodeHandlerKind VkW_er_6;
    public static EvexOpCodeHandlerKind VkWIb_3;
    public static EvexOpCodeHandlerKind VkWIb_3b;
    public static EvexOpCodeHandlerKind VkWIb_er;
    public static EvexOpCodeHandlerKind VM;
    public static EvexOpCodeHandlerKind VSIB_k1;
    public static EvexOpCodeHandlerKind VSIB_k1_VX;
    public static EvexOpCodeHandlerKind VW;
    public static EvexOpCodeHandlerKind VW_er;
    public static EvexOpCodeHandlerKind VX_Ev;
    public static EvexOpCodeHandlerKind WkHV;
    public static EvexOpCodeHandlerKind WkV_3;
    public static EvexOpCodeHandlerKind WkV_4a;
    public static EvexOpCodeHandlerKind WkV_4b;
    public static EvexOpCodeHandlerKind WkVIb;
    public static EvexOpCodeHandlerKind WkVIb_er;
    public static EvexOpCodeHandlerKind WV;
    public static EvexOpCodeHandlerKind VkHW_er_ur_3;
    public static EvexOpCodeHandlerKind VkHW_er_ur_3b;
}
internal class Iced.Intel.DecoderInternal.EvexOpCodeHandlerReader : OpCodeHandlerReader {
    public virtual int ReadHandlers(TableDeserializer& deserializer, OpCodeHandler[] result, int resultIndex);
}
[FlagsAttribute]
internal enum Iced.Intel.DecoderInternal.HandlerFlags : Enum {
    public UInt32 value__;
    public static HandlerFlags None;
    public static HandlerFlags Xacquire;
    public static HandlerFlags Xrelease;
    public static HandlerFlags XacquireXreleaseNoLock;
    public static HandlerFlags Lock;
}
[IsReadOnlyAttribute]
internal class Iced.Intel.DecoderInternal.HandlerInfo : ValueType {
    public OpCodeHandler handler;
    public OpCodeHandler[] handlers;
    public HandlerInfo(OpCodeHandler handler);
    public HandlerInfo(OpCodeHandler[] handlers);
}
[IsReadOnlyAttribute]
internal class Iced.Intel.DecoderInternal.HandlerOptions : ValueType {
    public OpCodeHandler handler;
    public DecoderOptions options;
    public HandlerOptions(OpCodeHandler handler, DecoderOptions options);
}
[FlagsAttribute]
internal enum Iced.Intel.DecoderInternal.LegacyHandlerFlags : Enum {
    public UInt32 value__;
    public static LegacyHandlerFlags HandlerReg;
    public static LegacyHandlerFlags HandlerMem;
    public static LegacyHandlerFlags Handler66Reg;
    public static LegacyHandlerFlags Handler66Mem;
    public static LegacyHandlerFlags HandlerF3Reg;
    public static LegacyHandlerFlags HandlerF3Mem;
    public static LegacyHandlerFlags HandlerF2Reg;
    public static LegacyHandlerFlags HandlerF2Mem;
}
internal enum Iced.Intel.DecoderInternal.LegacyOpCodeHandlerKind : Enum {
    public byte value__;
    public static LegacyOpCodeHandlerKind Bitness;
    public static LegacyOpCodeHandlerKind Bitness_DontReadModRM;
    public static LegacyOpCodeHandlerKind Invalid;
    public static LegacyOpCodeHandlerKind Invalid_NoModRM;
    public static LegacyOpCodeHandlerKind Invalid2;
    public static LegacyOpCodeHandlerKind Dup;
    public static LegacyOpCodeHandlerKind Null;
    public static LegacyOpCodeHandlerKind HandlerReference;
    public static LegacyOpCodeHandlerKind ArrayReference;
    public static LegacyOpCodeHandlerKind RM;
    public static LegacyOpCodeHandlerKind Options3;
    public static LegacyOpCodeHandlerKind Options5;
    public static LegacyOpCodeHandlerKind Options_DontReadModRM;
    public static LegacyOpCodeHandlerKind AnotherTable;
    public static LegacyOpCodeHandlerKind Group;
    public static LegacyOpCodeHandlerKind Group8x64;
    public static LegacyOpCodeHandlerKind Group8x8;
    public static LegacyOpCodeHandlerKind MandatoryPrefix;
    public static LegacyOpCodeHandlerKind MandatoryPrefix4;
    public static LegacyOpCodeHandlerKind Ev_REXW_1a;
    public static LegacyOpCodeHandlerKind MandatoryPrefix_NoModRM;
    public static LegacyOpCodeHandlerKind MandatoryPrefix3;
    public static LegacyOpCodeHandlerKind D3NOW;
    public static LegacyOpCodeHandlerKind EVEX;
    public static LegacyOpCodeHandlerKind VEX2;
    public static LegacyOpCodeHandlerKind VEX3;
    public static LegacyOpCodeHandlerKind XOP;
    public static LegacyOpCodeHandlerKind AL_DX;
    public static LegacyOpCodeHandlerKind Ap;
    public static LegacyOpCodeHandlerKind B_BM;
    public static LegacyOpCodeHandlerKind B_Ev;
    public static LegacyOpCodeHandlerKind B_MIB;
    public static LegacyOpCodeHandlerKind BM_B;
    public static LegacyOpCodeHandlerKind BranchIw;
    public static LegacyOpCodeHandlerKind BranchSimple;
    public static LegacyOpCodeHandlerKind C_R_3a;
    public static LegacyOpCodeHandlerKind C_R_3b;
    public static LegacyOpCodeHandlerKind DX_AL;
    public static LegacyOpCodeHandlerKind DX_eAX;
    public static LegacyOpCodeHandlerKind eAX_DX;
    public static LegacyOpCodeHandlerKind Eb_1;
    public static LegacyOpCodeHandlerKind Eb_2;
    public static LegacyOpCodeHandlerKind Eb_CL;
    public static LegacyOpCodeHandlerKind Eb_Gb_1;
    public static LegacyOpCodeHandlerKind Eb_Gb_2;
    public static LegacyOpCodeHandlerKind Eb_Ib_1;
    public static LegacyOpCodeHandlerKind Eb_Ib_2;
    public static LegacyOpCodeHandlerKind Eb1;
    public static LegacyOpCodeHandlerKind Ed_V_Ib;
    public static LegacyOpCodeHandlerKind Ep;
    public static LegacyOpCodeHandlerKind Ev_3a;
    public static LegacyOpCodeHandlerKind Ev_3b;
    public static LegacyOpCodeHandlerKind Ev_4;
    public static LegacyOpCodeHandlerKind Ev_CL;
    public static LegacyOpCodeHandlerKind Ev_Gv_32_64;
    public static LegacyOpCodeHandlerKind Ev_Gv_3a;
    public static LegacyOpCodeHandlerKind Ev_Gv_3b;
    public static LegacyOpCodeHandlerKind Ev_Gv_4;
    public static LegacyOpCodeHandlerKind Ev_Gv_CL;
    public static LegacyOpCodeHandlerKind Ev_Gv_Ib;
    public static LegacyOpCodeHandlerKind Ev_Gv_REX;
    public static LegacyOpCodeHandlerKind Ev_Ib_3;
    public static LegacyOpCodeHandlerKind Ev_Ib_4;
    public static LegacyOpCodeHandlerKind Ev_Ib2_3;
    public static LegacyOpCodeHandlerKind Ev_Ib2_4;
    public static LegacyOpCodeHandlerKind Ev_Iz_3;
    public static LegacyOpCodeHandlerKind Ev_Iz_4;
    public static LegacyOpCodeHandlerKind Ev_P;
    public static LegacyOpCodeHandlerKind Ev_REXW;
    public static LegacyOpCodeHandlerKind Ev_Sw;
    public static LegacyOpCodeHandlerKind Ev_VX;
    public static LegacyOpCodeHandlerKind Ev1;
    public static LegacyOpCodeHandlerKind Evj;
    public static LegacyOpCodeHandlerKind Evw;
    public static LegacyOpCodeHandlerKind Ew;
    public static LegacyOpCodeHandlerKind Gb_Eb;
    public static LegacyOpCodeHandlerKind Gdq_Ev;
    public static LegacyOpCodeHandlerKind Gv_Eb;
    public static LegacyOpCodeHandlerKind Gv_Eb_REX;
    public static LegacyOpCodeHandlerKind Gv_Ev_32_64;
    public static LegacyOpCodeHandlerKind Gv_Ev_3a;
    public static LegacyOpCodeHandlerKind Gv_Ev_3b;
    public static LegacyOpCodeHandlerKind Gv_Ev_Ib;
    public static LegacyOpCodeHandlerKind Gv_Ev_Ib_REX;
    public static LegacyOpCodeHandlerKind Gv_Ev_Iz;
    public static LegacyOpCodeHandlerKind Gv_Ev_REX;
    public static LegacyOpCodeHandlerKind Gv_Ev2;
    public static LegacyOpCodeHandlerKind Gv_Ev3;
    public static LegacyOpCodeHandlerKind Gv_Ew;
    public static LegacyOpCodeHandlerKind Gv_M;
    public static LegacyOpCodeHandlerKind Gv_M_as;
    public static LegacyOpCodeHandlerKind Gv_Ma;
    public static LegacyOpCodeHandlerKind Gv_Mp_2;
    public static LegacyOpCodeHandlerKind Gv_Mp_3;
    public static LegacyOpCodeHandlerKind Gv_Mv;
    public static LegacyOpCodeHandlerKind Gv_N;
    public static LegacyOpCodeHandlerKind Gv_N_Ib_REX;
    public static LegacyOpCodeHandlerKind Gv_RX;
    public static LegacyOpCodeHandlerKind Gv_W;
    public static LegacyOpCodeHandlerKind GvM_VX_Ib;
    public static LegacyOpCodeHandlerKind Ib;
    public static LegacyOpCodeHandlerKind Ib3;
    public static LegacyOpCodeHandlerKind IbReg;
    public static LegacyOpCodeHandlerKind IbReg2;
    public static LegacyOpCodeHandlerKind Iw_Ib;
    public static LegacyOpCodeHandlerKind Jb;
    public static LegacyOpCodeHandlerKind Jb2;
    public static LegacyOpCodeHandlerKind Jdisp;
    public static LegacyOpCodeHandlerKind Jx;
    public static LegacyOpCodeHandlerKind Jz;
    public static LegacyOpCodeHandlerKind M_1;
    public static LegacyOpCodeHandlerKind M_2;
    public static LegacyOpCodeHandlerKind M_REXW_2;
    public static LegacyOpCodeHandlerKind M_REXW_4;
    public static LegacyOpCodeHandlerKind MemBx;
    public static LegacyOpCodeHandlerKind Mf_1;
    public static LegacyOpCodeHandlerKind Mf_2a;
    public static LegacyOpCodeHandlerKind Mf_2b;
    public static LegacyOpCodeHandlerKind MIB_B;
    public static LegacyOpCodeHandlerKind MP;
    public static LegacyOpCodeHandlerKind Ms;
    public static LegacyOpCodeHandlerKind MV;
    public static LegacyOpCodeHandlerKind Mv_Gv;
    public static LegacyOpCodeHandlerKind Mv_Gv_REXW;
    public static LegacyOpCodeHandlerKind NIb;
    public static LegacyOpCodeHandlerKind Ob_Reg;
    public static LegacyOpCodeHandlerKind Ov_Reg;
    public static LegacyOpCodeHandlerKind P_Ev;
    public static LegacyOpCodeHandlerKind P_Ev_Ib;
    public static LegacyOpCodeHandlerKind P_Q;
    public static LegacyOpCodeHandlerKind P_Q_Ib;
    public static LegacyOpCodeHandlerKind P_R;
    public static LegacyOpCodeHandlerKind P_W;
    public static LegacyOpCodeHandlerKind PushEv;
    public static LegacyOpCodeHandlerKind PushIb2;
    public static LegacyOpCodeHandlerKind PushIz;
    public static LegacyOpCodeHandlerKind PushOpSizeReg_4a;
    public static LegacyOpCodeHandlerKind PushOpSizeReg_4b;
    public static LegacyOpCodeHandlerKind PushSimple2;
    public static LegacyOpCodeHandlerKind PushSimpleReg;
    public static LegacyOpCodeHandlerKind Q_P;
    public static LegacyOpCodeHandlerKind R_C_3a;
    public static LegacyOpCodeHandlerKind R_C_3b;
    public static LegacyOpCodeHandlerKind rDI_P_N;
    public static LegacyOpCodeHandlerKind rDI_VX_RX;
    public static LegacyOpCodeHandlerKind Reg;
    public static LegacyOpCodeHandlerKind Reg_Ib2;
    public static LegacyOpCodeHandlerKind Reg_Iz;
    public static LegacyOpCodeHandlerKind Reg_Ob;
    public static LegacyOpCodeHandlerKind Reg_Ov;
    public static LegacyOpCodeHandlerKind Reg_Xb;
    public static LegacyOpCodeHandlerKind Reg_Xv;
    public static LegacyOpCodeHandlerKind Reg_Xv2;
    public static LegacyOpCodeHandlerKind Reg_Yb;
    public static LegacyOpCodeHandlerKind Reg_Yv;
    public static LegacyOpCodeHandlerKind RegIb;
    public static LegacyOpCodeHandlerKind RegIb3;
    public static LegacyOpCodeHandlerKind RegIz2;
    public static LegacyOpCodeHandlerKind Reservednop;
    public static LegacyOpCodeHandlerKind RIb;
    public static LegacyOpCodeHandlerKind RIbIb;
    public static LegacyOpCodeHandlerKind Rv;
    public static LegacyOpCodeHandlerKind Rv_32_64;
    public static LegacyOpCodeHandlerKind RvMw_Gw;
    public static LegacyOpCodeHandlerKind Simple;
    public static LegacyOpCodeHandlerKind Simple_ModRM;
    public static LegacyOpCodeHandlerKind Simple2_3a;
    public static LegacyOpCodeHandlerKind Simple2_3b;
    public static LegacyOpCodeHandlerKind Simple2Iw;
    public static LegacyOpCodeHandlerKind Simple3;
    public static LegacyOpCodeHandlerKind Simple4;
    public static LegacyOpCodeHandlerKind Simple5;
    public static LegacyOpCodeHandlerKind Simple5_ModRM_as;
    public static LegacyOpCodeHandlerKind SimpleReg;
    public static LegacyOpCodeHandlerKind ST_STi;
    public static LegacyOpCodeHandlerKind STi;
    public static LegacyOpCodeHandlerKind STi_ST;
    public static LegacyOpCodeHandlerKind Sw_Ev;
    public static LegacyOpCodeHandlerKind V_Ev;
    public static LegacyOpCodeHandlerKind VM;
    public static LegacyOpCodeHandlerKind VN;
    public static LegacyOpCodeHandlerKind VQ;
    public static LegacyOpCodeHandlerKind VRIbIb;
    public static LegacyOpCodeHandlerKind VW_2;
    public static LegacyOpCodeHandlerKind VW_3;
    public static LegacyOpCodeHandlerKind VWIb_2;
    public static LegacyOpCodeHandlerKind VWIb_3;
    public static LegacyOpCodeHandlerKind VX_E_Ib;
    public static LegacyOpCodeHandlerKind VX_Ev;
    public static LegacyOpCodeHandlerKind Wbinvd;
    public static LegacyOpCodeHandlerKind WV;
    public static LegacyOpCodeHandlerKind Xb_Yb;
    public static LegacyOpCodeHandlerKind Xchg_Reg_rAX;
    public static LegacyOpCodeHandlerKind Xv_Yv;
    public static LegacyOpCodeHandlerKind Yb_Reg;
    public static LegacyOpCodeHandlerKind Yb_Xb;
    public static LegacyOpCodeHandlerKind Yv_Reg;
    public static LegacyOpCodeHandlerKind Yv_Reg2;
    public static LegacyOpCodeHandlerKind Yv_Xv;
    public static LegacyOpCodeHandlerKind Simple4b;
    public static LegacyOpCodeHandlerKind Options1632_1;
    public static LegacyOpCodeHandlerKind Options1632_2;
    public static LegacyOpCodeHandlerKind M_Sw;
    public static LegacyOpCodeHandlerKind Sw_M;
    public static LegacyOpCodeHandlerKind Rq;
    public static LegacyOpCodeHandlerKind Gd_Rd;
    public static LegacyOpCodeHandlerKind PrefixEsCsSsDs;
    public static LegacyOpCodeHandlerKind PrefixFsGs;
    public static LegacyOpCodeHandlerKind Prefix66;
    public static LegacyOpCodeHandlerKind Prefix67;
    public static LegacyOpCodeHandlerKind PrefixF0;
    public static LegacyOpCodeHandlerKind PrefixF2;
    public static LegacyOpCodeHandlerKind PrefixF3;
    public static LegacyOpCodeHandlerKind PrefixREX;
    public static LegacyOpCodeHandlerKind Simple5_a32;
}
internal class Iced.Intel.DecoderInternal.LegacyOpCodeHandlerReader : OpCodeHandlerReader {
    public virtual int ReadHandlers(TableDeserializer& deserializer, OpCodeHandler[] result, int resultIndex);
}
internal enum Iced.Intel.DecoderInternal.MvexOpCodeHandlerKind : Enum {
    public byte value__;
    public static MvexOpCodeHandlerKind Invalid;
    public static MvexOpCodeHandlerKind Invalid2;
    public static MvexOpCodeHandlerKind Dup;
    public static MvexOpCodeHandlerKind HandlerReference;
    public static MvexOpCodeHandlerKind ArrayReference;
    public static MvexOpCodeHandlerKind RM;
    public static MvexOpCodeHandlerKind Group;
    public static MvexOpCodeHandlerKind W;
    public static MvexOpCodeHandlerKind MandatoryPrefix2;
    public static MvexOpCodeHandlerKind EH;
    public static MvexOpCodeHandlerKind M;
    public static MvexOpCodeHandlerKind MV;
    public static MvexOpCodeHandlerKind VW;
    public static MvexOpCodeHandlerKind HWIb;
    public static MvexOpCodeHandlerKind VWIb;
    public static MvexOpCodeHandlerKind VHW;
    public static MvexOpCodeHandlerKind VHWIb;
    public static MvexOpCodeHandlerKind VKW;
    public static MvexOpCodeHandlerKind KHW;
    public static MvexOpCodeHandlerKind KHWIb;
    public static MvexOpCodeHandlerKind VSIB;
    public static MvexOpCodeHandlerKind VSIB_V;
    public static MvexOpCodeHandlerKind V_VSIB;
}
internal class Iced.Intel.DecoderInternal.MvexOpCodeHandlerReader : OpCodeHandlerReader {
    public virtual int ReadHandlers(TableDeserializer& deserializer, OpCodeHandler[] result, int resultIndex);
}
internal abstract class Iced.Intel.DecoderInternal.OpCodeHandler : object {
    public bool HasModRM;
    protected OpCodeHandler(bool hasModRM);
    public abstract virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_AL_DX : OpCodeHandler {
    private Code code;
    public OpCodeHandler_AL_DX(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_AnotherTable : OpCodeHandler {
    private OpCodeHandler[] otherTable;
    public OpCodeHandler_AnotherTable(OpCodeHandler[] otherTable);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ap : OpCodeHandler {
    private Code code16;
    private Code code32;
    public OpCodeHandler_Ap(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_B_BM : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_B_BM(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_B_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    private UInt32 ripRelMask;
    public OpCodeHandler_B_Ev(Code code32, Code code64, bool supportsRipRel);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_B_MIB : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_B_MIB(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Bitness : OpCodeHandler {
    private OpCodeHandler handler1632;
    private OpCodeHandler handler64;
    public OpCodeHandler_Bitness(OpCodeHandler handler1632, OpCodeHandler handler64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Bitness_DontReadModRM : OpCodeHandlerModRM {
    private OpCodeHandler handler1632;
    private OpCodeHandler handler64;
    public OpCodeHandler_Bitness_DontReadModRM(OpCodeHandler handler1632, OpCodeHandler handler64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_BM_B : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_BM_B(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_BranchIw : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_BranchIw(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_BranchSimple : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_BranchSimple(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_C_R : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    private Register baseReg;
    public OpCodeHandler_C_R(Code code32, Code code64, Register baseReg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_D3NOW : OpCodeHandlerModRM {
    internal static Code[] CodeValues;
    private Code[] codeValues;
    private static OpCodeHandler_D3NOW();
    private static Code[] CreateCodeValues();
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_DX_AL : OpCodeHandler {
    private Code code;
    public OpCodeHandler_DX_AL(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_DX_eAX : OpCodeHandler {
    private Code code16;
    private Code code32;
    public OpCodeHandler_DX_eAX(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_eAX_DX : OpCodeHandler {
    private Code code16;
    private Code code32;
    public OpCodeHandler_eAX_DX(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Eb : OpCodeHandlerModRM {
    private Code code;
    private HandlerFlags flags;
    public OpCodeHandler_Eb(Code code);
    public OpCodeHandler_Eb(Code code, HandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Eb_1 : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Eb_1(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Eb_CL : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Eb_CL(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Eb_Gb : OpCodeHandlerModRM {
    private Code code;
    private HandlerFlags flags;
    public OpCodeHandler_Eb_Gb(Code code);
    public OpCodeHandler_Eb_Gb(Code code, HandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Eb_Ib : OpCodeHandlerModRM {
    private Code code;
    private HandlerFlags flags;
    public OpCodeHandler_Eb_Ib(Code code);
    public OpCodeHandler_Eb_Ib(Code code, HandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ed_V_Ib : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Ed_V_Ib(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EH : OpCodeHandlerModRM {
    private OpCodeHandler handlerEH0;
    private OpCodeHandler handlerEH1;
    public OpCodeHandler_EH(OpCodeHandler handlerEH0, OpCodeHandler handlerEH1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ep : OpCodeHandlerModRM {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Ep(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev : OpCodeHandlerModRM {
    private Code3 codes;
    private HandlerFlags flags;
    public OpCodeHandler_Ev(Code code16, Code code32, Code code64);
    public OpCodeHandler_Ev(Code code16, Code code32, Code code64, HandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_1 : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Ev_1(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_CL : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Ev_CL(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Gv : OpCodeHandlerModRM {
    private Code3 codes;
    private HandlerFlags flags;
    public OpCodeHandler_Ev_Gv(Code code16, Code code32, Code code64);
    public OpCodeHandler_Ev_Gv(Code code16, Code code32, Code code64, HandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Gv_32_64 : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Ev_Gv_32_64(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Gv_CL : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Ev_Gv_CL(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Gv_Ib : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Ev_Gv_Ib(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Gv_REX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Ev_Gv_REX(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Ib : OpCodeHandlerModRM {
    private Code3 codes;
    private HandlerFlags flags;
    public OpCodeHandler_Ev_Ib(Code code16, Code code32, Code code64);
    public OpCodeHandler_Ev_Ib(Code code16, Code code32, Code code64, HandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Ib2 : OpCodeHandlerModRM {
    private Code3 codes;
    private HandlerFlags flags;
    public OpCodeHandler_Ev_Ib2(Code code16, Code code32, Code code64);
    public OpCodeHandler_Ev_Ib2(Code code16, Code code32, Code code64, HandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Iz : OpCodeHandlerModRM {
    private Code3 codes;
    private HandlerFlags flags;
    public OpCodeHandler_Ev_Iz(Code code16, Code code32, Code code64);
    public OpCodeHandler_Ev_Iz(Code code16, Code code32, Code code64, HandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_P : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Ev_P(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_REXW : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    private UInt32 flags;
    private UInt32 disallowReg;
    private UInt32 disallowMem;
    public OpCodeHandler_Ev_REXW(Code code32, Code code64, UInt32 flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_Sw : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Ev_Sw(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ev_VX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Ev_VX(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX : OpCodeHandlerModRM {
    private OpCodeHandler handlerMem;
    public OpCodeHandler_EVEX(OpCodeHandler handlerMem);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_Ed_V_Ib : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code32;
    private Code code64;
    private TupleType tupleType32;
    private TupleType tupleType64;
    public OpCodeHandler_EVEX_Ed_V_Ib(Register baseReg, Code code32, Code code64, TupleType tupleType32, TupleType tupleType64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_Ev_VX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    private TupleType tupleTypeW0;
    private TupleType tupleTypeW1;
    public OpCodeHandler_EVEX_Ev_VX(Code code32, Code code64, TupleType tupleTypeW0, TupleType tupleTypeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_Ev_VX_Ib : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code32;
    private Code code64;
    public OpCodeHandler_EVEX_Ev_VX_Ib(Register baseReg, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_Gv_W_er : OpCodeHandlerModRM {
    private Register baseReg;
    private Code codeW0;
    private Code codeW1;
    private TupleType tupleType;
    private bool onlySAE;
    public OpCodeHandler_EVEX_Gv_W_er(Register baseReg, Code codeW0, Code codeW1, TupleType tupleType, bool onlySAE);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_GvM_VX_Ib : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code32;
    private Code code64;
    private TupleType tupleType32;
    private TupleType tupleType64;
    public OpCodeHandler_EVEX_GvM_VX_Ib(Register baseReg, Code code32, Code code64, TupleType tupleType32, TupleType tupleType64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_HkWIb : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_HkWIb(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_HWIb : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_HWIb(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_KkHW : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_KkHW(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_KkHWIb : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_KkHWIb(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_KkHWIb_sae : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_KkHWIb_sae(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_KkWIb : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_KkWIb(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_KP1HW : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_KP1HW(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_KR : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_EVEX_KR(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_MV : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_MV(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_V_H_Ev_er : OpCodeHandlerModRM {
    private Register baseReg;
    private Code codeW0;
    private Code codeW1;
    private TupleType tupleTypeW0;
    private TupleType tupleTypeW1;
    public OpCodeHandler_EVEX_V_H_Ev_er(Register baseReg, Code codeW0, Code codeW1, TupleType tupleTypeW0, TupleType tupleTypeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_V_H_Ev_Ib : OpCodeHandlerModRM {
    private Register baseReg;
    private Code codeW0;
    private Code codeW1;
    private TupleType tupleTypeW0;
    private TupleType tupleTypeW1;
    public OpCodeHandler_EVEX_V_H_Ev_Ib(Register baseReg, Code codeW0, Code codeW1, TupleType tupleTypeW0, TupleType tupleTypeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VHM : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VHM(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VHW : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Register baseReg3;
    private Code codeR;
    private Code codeM;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VHW(Register baseReg, Code codeR, Code codeM, TupleType tupleType);
    public OpCodeHandler_EVEX_VHW(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VHWIb : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VHWIb(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VK : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_EVEX_VK(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_Vk_VSIB : OpCodeHandlerModRM {
    private Register baseReg;
    private Register vsibBase;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_Vk_VSIB(Register baseReg, Register vsibBase, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkEv_REXW : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code32;
    private Code code64;
    public OpCodeHandler_EVEX_VkEv_REXW(Register baseReg, Code code32);
    public OpCodeHandler_EVEX_VkEv_REXW(Register baseReg, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkHM : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VkHM(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkHW : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Register baseReg3;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_VkHW(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public OpCodeHandler_EVEX_VkHW(Register baseReg1, Register baseReg2, Register baseReg3, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkHW_er : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    private bool onlySAE;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_VkHW_er(Register baseReg, Code code, TupleType tupleType, bool onlySAE, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkHW_er_ur : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_VkHW_er_ur(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkHWIb : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Register baseReg3;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_VkHWIb(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public OpCodeHandler_EVEX_VkHWIb(Register baseReg1, Register baseReg2, Register baseReg3, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkHWIb_er : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Register baseReg3;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_VkHWIb_er(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkM : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VkM(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkW : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_VkW(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public OpCodeHandler_EVEX_VkW(Register baseReg1, Register baseReg2, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkW_er : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    private bool onlySAE;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_VkW_er(Register baseReg, Code code, TupleType tupleType, bool onlySAE);
    public OpCodeHandler_EVEX_VkW_er(Register baseReg1, Register baseReg2, Code code, TupleType tupleType, bool onlySAE);
    public OpCodeHandler_EVEX_VkW_er(Register baseReg1, Register baseReg2, Code code, TupleType tupleType, bool onlySAE, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkWIb : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    private bool canBroadcast;
    public OpCodeHandler_EVEX_VkWIb(Register baseReg, Code code, TupleType tupleType, bool canBroadcast);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VkWIb_er : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VkWIb_er(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VM : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VM(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VSIB_k1 : OpCodeHandlerModRM {
    private Register vsibIndex;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VSIB_k1(Register vsibIndex, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VSIB_k1_VX : OpCodeHandlerModRM {
    private Register vsibIndex;
    private Register baseReg;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VSIB_k1_VX(Register vsibIndex, Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VW : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VW(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VW_er : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_VW_er(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_VX_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    private TupleType tupleTypeW0;
    private TupleType tupleTypeW1;
    public OpCodeHandler_EVEX_VX_Ev(Code code32, Code code64, TupleType tupleTypeW0, TupleType tupleTypeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_WkHV : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_EVEX_WkHV(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_WkV : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    private UInt32 disallowZeroingMasking;
    public OpCodeHandler_EVEX_WkV(Register baseReg, Code code, TupleType tupleType);
    public OpCodeHandler_EVEX_WkV(Register baseReg, Code code, TupleType tupleType, bool allowZeroingMasking);
    public OpCodeHandler_EVEX_WkV(Register baseReg1, Register baseReg2, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_WkVIb : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_WkVIb(Register baseReg1, Register baseReg2, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_WkVIb_er : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_WkVIb_er(Register baseReg1, Register baseReg2, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_EVEX_WV : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    private TupleType tupleType;
    public OpCodeHandler_EVEX_WV(Register baseReg, Code code, TupleType tupleType);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Evj : OpCodeHandlerModRM {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Evj(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Evw : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Evw(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ew : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Ew(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gb_Eb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Gb_Eb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gd_Rd : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Gd_Rd(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gdq_Ev : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gdq_Ev(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Group : OpCodeHandlerModRM {
    private OpCodeHandler[] groupHandlers;
    public OpCodeHandler_Group(OpCodeHandler[] groupHandlers);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Group8x64 : OpCodeHandlerModRM {
    private OpCodeHandler[] tableLow;
    private OpCodeHandler[] tableHigh;
    public OpCodeHandler_Group8x64(OpCodeHandler[] tableLow, OpCodeHandler[] tableHigh);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Group8x8 : OpCodeHandlerModRM {
    private OpCodeHandler[] tableLow;
    private OpCodeHandler[] tableHigh;
    public OpCodeHandler_Group8x8(OpCodeHandler[] tableLow, OpCodeHandler[] tableHigh);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Eb : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_Eb(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Eb_REX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Gv_Eb_REX(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ev : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_Ev(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ev_32_64 : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    private UInt32 disallowReg;
    private UInt32 disallowMem;
    public OpCodeHandler_Gv_Ev_32_64(Code code32, Code code64, bool allowReg, bool allowMem);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ev_Ib : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_Ev_Ib(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ev_Ib_REX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Gv_Ev_Ib_REX(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ev_Iz : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_Ev_Iz(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ev_REX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Gv_Ev_REX(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ev2 : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_Ev2(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ev3 : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_Ev3(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ew : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_Ew(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_M : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_M(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_M_as : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_M_as(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Ma : OpCodeHandlerModRM {
    private Code code16;
    private Code code32;
    public OpCodeHandler_Gv_Ma(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Mp : OpCodeHandlerModRM {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Gv_Mp(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_Mv : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Gv_Mv(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_N : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Gv_N(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_N_Ib_REX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Gv_N_Ib_REX(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_RX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Gv_RX(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Gv_W : OpCodeHandlerModRM {
    private Code codeW0;
    private Code codeW1;
    public OpCodeHandler_Gv_W(Code codeW0, Code codeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_GvM_VX_Ib : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_GvM_VX_Ib(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ib : OpCodeHandler {
    private Code code;
    public OpCodeHandler_Ib(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ib3 : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Ib3(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_IbReg : OpCodeHandler {
    private Code code;
    private Register reg;
    public OpCodeHandler_IbReg(Code code, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_IbReg2 : OpCodeHandler {
    private Code code16;
    private Code code32;
    public OpCodeHandler_IbReg2(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Invalid : OpCodeHandlerModRM {
    public static OpCodeHandler_Invalid Instance;
    private static OpCodeHandler_Invalid();
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Invalid_NoModRM : OpCodeHandler {
    public static OpCodeHandler_Invalid_NoModRM Instance;
    private static OpCodeHandler_Invalid_NoModRM();
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Iw_Ib : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Iw_Ib(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Jb : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Jb(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Jb2 : OpCodeHandler {
    private Code code16_16;
    private Code code16_32;
    private Code code16_64;
    private Code code32_16;
    private Code code32_32;
    private Code code64_32;
    private Code code64_64;
    public OpCodeHandler_Jb2(Code code16_16, Code code16_32, Code code16_64, Code code32_16, Code code32_32, Code code64_32, Code code64_64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Jdisp : OpCodeHandler {
    private Code code16;
    private Code code32;
    public OpCodeHandler_Jdisp(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Jx : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Jx(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Jz : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Jz(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_M : OpCodeHandlerModRM {
    private Code codeW0;
    private Code codeW1;
    public OpCodeHandler_M(Code codeW0, Code codeW1);
    public OpCodeHandler_M(Code codeW0);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_M_REXW : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    private HandlerFlags flags32;
    private HandlerFlags flags64;
    public OpCodeHandler_M_REXW(Code code32, Code code64);
    public OpCodeHandler_M_REXW(Code code32, Code code64, HandlerFlags flags32, HandlerFlags flags64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_M_Sw : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_M_Sw(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MandatoryPrefix : OpCodeHandlerModRM {
    private OpCodeHandler[] handlers;
    public OpCodeHandler_MandatoryPrefix(OpCodeHandler handler, OpCodeHandler handler66, OpCodeHandler handlerF3, OpCodeHandler handlerF2);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MandatoryPrefix_NoModRM : OpCodeHandler {
    private OpCodeHandler[] handlers;
    public OpCodeHandler_MandatoryPrefix_NoModRM(OpCodeHandler handler, OpCodeHandler handler66, OpCodeHandler handlerF3, OpCodeHandler handlerF2);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MandatoryPrefix2 : OpCodeHandlerModRM {
    private OpCodeHandler[] handlers;
    public OpCodeHandler_MandatoryPrefix2(OpCodeHandler handler);
    public OpCodeHandler_MandatoryPrefix2(OpCodeHandler handler, OpCodeHandler handler66, OpCodeHandler handlerF3, OpCodeHandler handlerF2);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MandatoryPrefix2_NoModRM : OpCodeHandler {
    private OpCodeHandler[] handlers;
    public OpCodeHandler_MandatoryPrefix2_NoModRM(OpCodeHandler handler, OpCodeHandler handler66, OpCodeHandler handlerF3, OpCodeHandler handlerF2);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MandatoryPrefix3 : OpCodeHandlerModRM {
    private Info[] handlers_reg;
    private Info[] handlers_mem;
    public OpCodeHandler_MandatoryPrefix3(OpCodeHandler handler_reg, OpCodeHandler handler_mem, OpCodeHandler handler66_reg, OpCodeHandler handler66_mem, OpCodeHandler handlerF3_reg, OpCodeHandler handlerF3_mem, OpCodeHandler handlerF2_reg, OpCodeHandler handlerF2_mem, LegacyHandlerFlags flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MandatoryPrefix4 : OpCodeHandler {
    private OpCodeHandler handlerNP;
    private OpCodeHandler handler66;
    private OpCodeHandler handlerF3;
    private OpCodeHandler handlerF2;
    private UInt32 flags;
    public OpCodeHandler_MandatoryPrefix4(OpCodeHandler handlerNP, OpCodeHandler handler66, OpCodeHandler handlerF3, OpCodeHandler handlerF2, UInt32 flags);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MemBx : OpCodeHandler {
    private Code code;
    public OpCodeHandler_MemBx(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Mf : OpCodeHandlerModRM {
    private Code code16;
    private Code code32;
    public OpCodeHandler_Mf(Code code);
    public OpCodeHandler_Mf(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MIB_B : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MIB_B(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MP : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MP(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ms : OpCodeHandlerModRM {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Ms(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MV : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MV(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Mv_Gv : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Mv_Gv(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Mv_Gv_REXW : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Mv_Gv_REXW(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_HWIb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_HWIb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_KHW : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_KHW(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_KHWIb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_KHWIb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_M : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_M(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_MV : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_MV(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_V_VSIB : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_V_VSIB(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_VHW : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_VHW(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_VHWIb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_VHWIb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_VKW : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_VKW(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_VSIB : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_VSIB(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_VSIB_V : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_VSIB_V(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_VW : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_VW(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_MVEX_VWIb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_MVEX_VWIb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_NIb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_NIb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ob_Reg : OpCodeHandler {
    private Code code;
    private Register reg;
    public OpCodeHandler_Ob_Reg(Code code, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Options : OpCodeHandler {
    private OpCodeHandler defaultHandler;
    private HandlerOptions[] infos;
    private DecoderOptions infoOptions;
    public OpCodeHandler_Options(OpCodeHandler defaultHandler, OpCodeHandler handler1, DecoderOptions options1);
    public OpCodeHandler_Options(OpCodeHandler defaultHandler, OpCodeHandler handler1, DecoderOptions options1, OpCodeHandler handler2, DecoderOptions options2);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Options_DontReadModRM : OpCodeHandlerModRM {
    private OpCodeHandler defaultHandler;
    private HandlerOptions[] infos;
    public OpCodeHandler_Options_DontReadModRM(OpCodeHandler defaultHandler, OpCodeHandler handler1, DecoderOptions options1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Options1632 : OpCodeHandler {
    private OpCodeHandler defaultHandler;
    private HandlerOptions[] infos;
    private DecoderOptions infoOptions;
    public OpCodeHandler_Options1632(OpCodeHandler defaultHandler, OpCodeHandler handler1, DecoderOptions options1);
    public OpCodeHandler_Options1632(OpCodeHandler defaultHandler, OpCodeHandler handler1, DecoderOptions options1, OpCodeHandler handler2, DecoderOptions options2);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Ov_Reg : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Ov_Reg(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_P_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_P_Ev(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_P_Ev_Ib : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_P_Ev_Ib(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_P_Q : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_P_Q(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_P_Q_Ib : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_P_Q_Ib(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_P_R : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_P_R(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_P_W : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_P_W(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Prefix66 : OpCodeHandler {
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Prefix67 : OpCodeHandler {
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PrefixEsCsSsDs : OpCodeHandler {
    private Register seg;
    public OpCodeHandler_PrefixEsCsSsDs(Register seg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PrefixF0 : OpCodeHandler {
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PrefixF2 : OpCodeHandler {
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PrefixF3 : OpCodeHandler {
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PrefixFsGs : OpCodeHandler {
    private Register seg;
    public OpCodeHandler_PrefixFsGs(Register seg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PrefixREX : OpCodeHandler {
    private OpCodeHandler handler;
    private UInt32 rex;
    public OpCodeHandler_PrefixREX(OpCodeHandler handler, UInt32 rex);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PushEv : OpCodeHandlerModRM {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_PushEv(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PushIb2 : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_PushIb2(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PushIz : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_PushIz(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PushOpSizeReg : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    private Register reg;
    public OpCodeHandler_PushOpSizeReg(Code code16, Code code32, Code code64, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PushSimple2 : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_PushSimple2(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_PushSimpleReg : OpCodeHandler {
    private int index;
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_PushSimpleReg(int index, Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Q_P : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Q_P(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_R_C : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    private Register baseReg;
    public OpCodeHandler_R_C(Code code32, Code code64, Register baseReg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_rDI_P_N : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_rDI_P_N(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_rDI_VX_RX : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_rDI_VX_RX(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg : OpCodeHandler {
    private Code code;
    private Register reg;
    public OpCodeHandler_Reg(Code code, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Ib2 : OpCodeHandler {
    private Code code16;
    private Code code32;
    public OpCodeHandler_Reg_Ib2(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Iz : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Reg_Iz(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Ob : OpCodeHandler {
    private Code code;
    private Register reg;
    public OpCodeHandler_Reg_Ob(Code code, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Ov : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Reg_Ov(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Xb : OpCodeHandler {
    private Code code;
    private Register reg;
    public OpCodeHandler_Reg_Xb(Code code, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Xv : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Reg_Xv(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Xv2 : OpCodeHandler {
    private Code code16;
    private Code code32;
    public OpCodeHandler_Reg_Xv2(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Yb : OpCodeHandler {
    private Code code;
    private Register reg;
    public OpCodeHandler_Reg_Yb(Code code, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reg_Yv : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Reg_Yv(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_RegIb : OpCodeHandler {
    private Code code;
    private Register reg;
    public OpCodeHandler_RegIb(Code code, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_RegIb3 : OpCodeHandler {
    private int index;
    private Register[] withRexPrefix;
    private static Register[] s_withRexPrefix;
    public OpCodeHandler_RegIb3(int index);
    private static OpCodeHandler_RegIb3();
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_RegIz2 : OpCodeHandler {
    private int index;
    public OpCodeHandler_RegIz2(int index);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Reservednop : OpCodeHandlerModRM {
    private OpCodeHandler reservedNopHandler;
    private OpCodeHandler otherHandler;
    public OpCodeHandler_Reservednop(OpCodeHandler reservedNopHandler, OpCodeHandler otherHandler);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_RIb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_RIb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_RIbIb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_RIbIb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_RM : OpCodeHandlerModRM {
    private OpCodeHandler reg;
    private OpCodeHandler mem;
    public OpCodeHandler_RM(OpCodeHandler reg, OpCodeHandler mem);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Rq : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Rq(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Rv : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Rv(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Rv_32_64 : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Rv_32_64(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_RvMw_Gw : OpCodeHandlerModRM {
    private Code code16;
    private Code code32;
    public OpCodeHandler_RvMw_Gw(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple : OpCodeHandler {
    private Code code;
    public OpCodeHandler_Simple(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple_ModRM : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Simple_ModRM(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple2 : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Simple2(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple2Iw : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Simple2Iw(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple3 : OpCodeHandler {
    private Code code16;
    private Code code32;
    private Code code64;
    public OpCodeHandler_Simple3(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple4 : OpCodeHandler {
    private Code code32;
    private Code code64;
    public OpCodeHandler_Simple4(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple5 : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Simple5(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple5_a32 : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Simple5_a32(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Simple5_ModRM_as : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Simple5_ModRM_as(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_SimpleReg : OpCodeHandler {
    private Code code;
    private int index;
    public OpCodeHandler_SimpleReg(Code code, int index);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_ST_STi : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_ST_STi(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_STi : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_STi(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_STi_ST : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_STi_ST(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Sw_Ev : OpCodeHandlerModRM {
    private Code3 codes;
    public OpCodeHandler_Sw_Ev(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Sw_M : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_Sw_M(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_V_Ev : OpCodeHandlerModRM {
    private Code codeW0;
    private Code codeW1;
    public OpCodeHandler_V_Ev(Code codeW0, Code codeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VectorLength_EVEX : OpCodeHandlerModRM {
    private OpCodeHandler[] handlers;
    public OpCodeHandler_VectorLength_EVEX(OpCodeHandler handler128, OpCodeHandler handler256, OpCodeHandler handler512);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VectorLength_EVEX_er : OpCodeHandlerModRM {
    private OpCodeHandler[] handlers;
    public OpCodeHandler_VectorLength_EVEX_er(OpCodeHandler handler128, OpCodeHandler handler256, OpCodeHandler handler512);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VectorLength_NoModRM_VEX : OpCodeHandler {
    private OpCodeHandler[] handlers;
    public OpCodeHandler_VectorLength_NoModRM_VEX(OpCodeHandler handler128, OpCodeHandler handler256);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VectorLength_VEX : OpCodeHandlerModRM {
    private OpCodeHandler[] handlers;
    public OpCodeHandler_VectorLength_VEX(OpCodeHandler handler128, OpCodeHandler handler256);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Ed_V_Ib : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Ed_V_Ib(Register baseReg, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Ev(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Ev_Gv_Gv : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Ev_Gv_Gv(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Ev_VX : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Ev_VX(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_G_VK : OpCodeHandlerModRM {
    private Code code;
    private Register gpr;
    public OpCodeHandler_VEX_G_VK(Code code, Register gpr);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gq_HK_RK : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_Gq_HK_RK(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gv_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Gv_Ev(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gv_Ev_Gv : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Gv_Ev_Gv(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gv_Ev_Ib : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Gv_Ev_Ib(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gv_Ev_Id : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Gv_Ev_Id(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gv_GPR_Ib : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Gv_GPR_Ib(Register baseReg, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gv_Gv_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Gv_Gv_Ev(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gv_RX : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Gv_RX(Register baseReg, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Gv_W : OpCodeHandlerModRM {
    private Register baseReg;
    private Code codeW0;
    private Code codeW1;
    public OpCodeHandler_VEX_Gv_W(Register baseReg, Code codeW0, Code codeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_GvM_VX_Ib : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_GvM_VX_Ib(Register baseReg, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_HRIb : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_HRIb(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Hv_Ed_Id : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Hv_Ed_Id(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Hv_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_Hv_Ev(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_K_Jb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_K_Jb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_K_Jz : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_K_Jz(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_M : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_M(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_M_VK : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_M_VK(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_MHV : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_MHV(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_MV : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_MV(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_rDI_VX_RX : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_rDI_VX_RX(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_RdRq : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_RdRq(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_SIBMEM_VT : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_SIBMEM_VT(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_Simple : OpCodeHandler {
    private Code code;
    public OpCodeHandler_VEX_Simple(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHEv : OpCodeHandlerModRM {
    private Register baseReg;
    private Code codeW0;
    private Code codeW1;
    public OpCodeHandler_VEX_VHEv(Register baseReg, Code codeW0, Code codeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHEvIb : OpCodeHandlerModRM {
    private Register baseReg;
    private Code codeW0;
    private Code codeW1;
    public OpCodeHandler_VEX_VHEvIb(Register baseReg, Code codeW0, Code codeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHIs4W : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_VHIs4W(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHIs5W : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_VHIs5W(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHM : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_VHM(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHW : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Register baseReg3;
    private Code codeR;
    private Code codeM;
    public OpCodeHandler_VEX_VHW(Register baseReg, Code codeR, Code codeM);
    public OpCodeHandler_VEX_VHW(Register baseReg, Code code);
    public OpCodeHandler_VEX_VHW(Register baseReg1, Register baseReg2, Register baseReg3, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHWIb : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Register baseReg3;
    private Code code;
    public OpCodeHandler_VEX_VHWIb(Register baseReg, Code code);
    public OpCodeHandler_VEX_VHWIb(Register baseReg1, Register baseReg2, Register baseReg3, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHWIs4 : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_VHWIs4(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VHWIs5 : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_VHWIs5(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VK_HK_RK : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_VK_HK_RK(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VK_R : OpCodeHandlerModRM {
    private Code code;
    private Register gpr;
    public OpCodeHandler_VEX_VK_R(Code code, Register gpr);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VK_R_Ib : OpCodeHandlerModRM {
    private Code code;
    private Register gpr;
    public OpCodeHandler_VEX_VK_R_Ib(Code code, Register gpr);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VK_RK : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_VK_RK(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VK_RK_Ib : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_VK_RK_Ib(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VK_WK : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_VK_WK(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VM : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_VM(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VT : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_VT(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VT_RT_HT : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_VT_RT_HT(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VT_SIBMEM : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VEX_VT_SIBMEM(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VW : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    public OpCodeHandler_VEX_VW(Register baseReg, Code code);
    public OpCodeHandler_VEX_VW(Register baseReg1, Register baseReg2, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VWH : OpCodeHandlerModRM {
    private Register baseReg;
    private Code code;
    public OpCodeHandler_VEX_VWH(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VWIb : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code codeW0;
    private Code codeW1;
    public OpCodeHandler_VEX_VWIb(Register baseReg, Code code);
    public OpCodeHandler_VEX_VWIb(Register baseReg, Code codeW0, Code codeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VX_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VEX_VX_Ev(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_VX_VSIB_HX : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register vsibIndex;
    private Register baseReg3;
    private Code code;
    public OpCodeHandler_VEX_VX_VSIB_HX(Register baseReg1, Register vsibIndex, Register baseReg3, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_WHV : OpCodeHandlerModRM {
    private Register baseReg;
    private Code codeR;
    public OpCodeHandler_VEX_WHV(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_WV : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    public OpCodeHandler_VEX_WV(Register baseReg, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX_WVIb : OpCodeHandlerModRM {
    private Register baseReg1;
    private Register baseReg2;
    private Code code;
    public OpCodeHandler_VEX_WVIb(Register baseReg1, Register baseReg2, Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX2 : OpCodeHandlerModRM {
    private OpCodeHandler handlerMem;
    public OpCodeHandler_VEX2(OpCodeHandler handlerMem);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VEX3 : OpCodeHandlerModRM {
    private OpCodeHandler handlerMem;
    public OpCodeHandler_VEX3(OpCodeHandler handlerMem);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VM : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VM(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VN : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VN(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VQ : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VQ(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VRIbIb : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_VRIbIb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VW : OpCodeHandlerModRM {
    private Code codeR;
    private Code codeM;
    public OpCodeHandler_VW(Code codeR, Code codeM);
    public OpCodeHandler_VW(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VWIb : OpCodeHandlerModRM {
    private Code codeW0;
    private Code codeW1;
    public OpCodeHandler_VWIb(Code code);
    public OpCodeHandler_VWIb(Code codeW0, Code codeW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VX_E_Ib : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VX_E_Ib(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_VX_Ev : OpCodeHandlerModRM {
    private Code code32;
    private Code code64;
    public OpCodeHandler_VX_Ev(Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_W : OpCodeHandlerModRM {
    private OpCodeHandler handlerW0;
    private OpCodeHandler handlerW1;
    public OpCodeHandler_W(OpCodeHandler handlerW0, OpCodeHandler handlerW1);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Wbinvd : OpCodeHandler {
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_WV : OpCodeHandlerModRM {
    private Code code;
    public OpCodeHandler_WV(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Xb_Yb : OpCodeHandler {
    private Code code;
    public OpCodeHandler_Xb_Yb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Xchg_Reg_rAX : OpCodeHandler {
    private int index;
    private Code[] codes;
    private static Code[] s_codes;
    public OpCodeHandler_Xchg_Reg_rAX(int index);
    private static OpCodeHandler_Xchg_Reg_rAX();
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_XOP : OpCodeHandlerModRM {
    private OpCodeHandler handler_reg0;
    public OpCodeHandler_XOP(OpCodeHandler handler_reg0);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Xv_Yv : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Xv_Yv(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Yb_Reg : OpCodeHandler {
    private Code code;
    private Register reg;
    public OpCodeHandler_Yb_Reg(Code code, Register reg);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Yb_Xb : OpCodeHandler {
    private Code code;
    public OpCodeHandler_Yb_Xb(Code code);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Yv_Reg : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Yv_Reg(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Yv_Reg2 : OpCodeHandler {
    private Code code16;
    private Code code32;
    public OpCodeHandler_Yv_Reg2(Code code16, Code code32);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal class Iced.Intel.DecoderInternal.OpCodeHandler_Yv_Xv : OpCodeHandler {
    private Code3 codes;
    public OpCodeHandler_Yv_Xv(Code code16, Code code32, Code code64);
    public virtual void Decode(Decoder decoder, Instruction& instruction);
}
internal abstract class Iced.Intel.DecoderInternal.OpCodeHandlerModRM : OpCodeHandler {
}
internal abstract class Iced.Intel.DecoderInternal.OpCodeHandlerReader : object {
    public abstract virtual int ReadHandlers(TableDeserializer& deserializer, OpCodeHandler[] result, int resultIndex);
}
internal static class Iced.Intel.DecoderInternal.OpCodeHandlersTables_EVEX : object {
    internal static OpCodeHandler[] Handlers_0F;
    internal static OpCodeHandler[] Handlers_0F38;
    internal static OpCodeHandler[] Handlers_0F3A;
    internal static OpCodeHandler[] Handlers_MAP5;
    internal static OpCodeHandler[] Handlers_MAP6;
    private static int MaxIdNames;
    private static UInt32 Handlers_0FIndex;
    private static UInt32 Handlers_0F38Index;
    private static UInt32 Handlers_0F3AIndex;
    private static UInt32 Handlers_MAP5Index;
    private static UInt32 Handlers_MAP6Index;
    private static OpCodeHandlersTables_EVEX();
    private static ReadOnlySpan`1<byte> GetSerializedTables();
}
internal static class Iced.Intel.DecoderInternal.OpCodeHandlersTables_Legacy : object {
    internal static OpCodeHandler[] Handlers_MAP0;
    private static int MaxIdNames;
    private static UInt32 Handlers_MAP0Index;
    private static OpCodeHandlersTables_Legacy();
    private static ReadOnlySpan`1<byte> GetSerializedTables();
}
internal static class Iced.Intel.DecoderInternal.OpCodeHandlersTables_MVEX : object {
    internal static OpCodeHandler[] Handlers_0F;
    internal static OpCodeHandler[] Handlers_0F38;
    internal static OpCodeHandler[] Handlers_0F3A;
    private static int MaxIdNames;
    private static UInt32 Handlers_0FIndex;
    private static UInt32 Handlers_0F38Index;
    private static UInt32 Handlers_0F3AIndex;
    private static OpCodeHandlersTables_MVEX();
    private static ReadOnlySpan`1<byte> GetSerializedTables();
}
internal static class Iced.Intel.DecoderInternal.OpCodeHandlersTables_VEX : object {
    internal static OpCodeHandler[] Handlers_MAP0;
    internal static OpCodeHandler[] Handlers_0F;
    internal static OpCodeHandler[] Handlers_0F38;
    internal static OpCodeHandler[] Handlers_0F3A;
    private static int MaxIdNames;
    private static UInt32 Handlers_MAP0Index;
    private static UInt32 Handlers_0FIndex;
    private static UInt32 Handlers_0F38Index;
    private static UInt32 Handlers_0F3AIndex;
    private static OpCodeHandlersTables_VEX();
    private static ReadOnlySpan`1<byte> GetSerializedTables();
}
internal static class Iced.Intel.DecoderInternal.OpCodeHandlersTables_XOP : object {
    internal static OpCodeHandler[] Handlers_MAP8;
    internal static OpCodeHandler[] Handlers_MAP9;
    internal static OpCodeHandler[] Handlers_MAP10;
    private static int MaxIdNames;
    private static UInt32 Handlers_MAP8Index;
    private static UInt32 Handlers_MAP9Index;
    private static UInt32 Handlers_MAP10Index;
    private static OpCodeHandlersTables_XOP();
    private static ReadOnlySpan`1<byte> GetSerializedTables();
}
internal enum Iced.Intel.DecoderInternal.SerializedDataKind : Enum {
    public byte value__;
    public static SerializedDataKind HandlerReference;
    public static SerializedDataKind ArrayReference;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Iced.Intel.DecoderInternal.TableDeserializer : ValueType {
    private DataReader reader;
    private OpCodeHandlerReader handlerReader;
    private List`1<HandlerInfo> idToHandler;
    private OpCodeHandler[] handlerArray;
    public TableDeserializer(OpCodeHandlerReader handlerReader, int maxIds, ReadOnlySpan`1<byte> data);
    public void Deserialize();
    public LegacyOpCodeHandlerKind ReadLegacyOpCodeHandlerKind();
    public VexOpCodeHandlerKind ReadVexOpCodeHandlerKind();
    public EvexOpCodeHandlerKind ReadEvexOpCodeHandlerKind();
    public MvexOpCodeHandlerKind ReadMvexOpCodeHandlerKind();
    public Code ReadCode();
    public Register ReadRegister();
    public DecoderOptions ReadDecoderOptions();
    public HandlerFlags ReadHandlerFlags();
    public LegacyHandlerFlags ReadLegacyHandlerFlags();
    public TupleType ReadTupleType();
    public bool ReadBoolean();
    public int ReadInt32();
    public OpCodeHandler ReadHandler();
    public OpCodeHandler ReadHandlerOrNull();
    public OpCodeHandler[] ReadHandlers(int count);
    public OpCodeHandler ReadHandlerReference();
    public OpCodeHandler[] ReadArrayReference(UInt32 kind);
    public OpCodeHandler[] GetTable(UInt32 index);
}
internal enum Iced.Intel.DecoderInternal.VexOpCodeHandlerKind : Enum {
    public byte value__;
    public static VexOpCodeHandlerKind Invalid;
    public static VexOpCodeHandlerKind Invalid2;
    public static VexOpCodeHandlerKind Dup;
    public static VexOpCodeHandlerKind Invalid_NoModRM;
    public static VexOpCodeHandlerKind Bitness_DontReadModRM;
    public static VexOpCodeHandlerKind HandlerReference;
    public static VexOpCodeHandlerKind ArrayReference;
    public static VexOpCodeHandlerKind RM;
    public static VexOpCodeHandlerKind Group;
    public static VexOpCodeHandlerKind W;
    public static VexOpCodeHandlerKind MandatoryPrefix2_1;
    public static VexOpCodeHandlerKind MandatoryPrefix2_4;
    public static VexOpCodeHandlerKind MandatoryPrefix2_NoModRM;
    public static VexOpCodeHandlerKind VectorLength_NoModRM;
    public static VexOpCodeHandlerKind VectorLength;
    public static VexOpCodeHandlerKind Ed_V_Ib;
    public static VexOpCodeHandlerKind Ev_VX;
    public static VexOpCodeHandlerKind G_VK;
    public static VexOpCodeHandlerKind Gv_Ev_Gv;
    public static VexOpCodeHandlerKind Gv_Ev_Ib;
    public static VexOpCodeHandlerKind Gv_Ev_Id;
    public static VexOpCodeHandlerKind Gv_GPR_Ib;
    public static VexOpCodeHandlerKind Gv_Gv_Ev;
    public static VexOpCodeHandlerKind Gv_RX;
    public static VexOpCodeHandlerKind Gv_W;
    public static VexOpCodeHandlerKind GvM_VX_Ib;
    public static VexOpCodeHandlerKind HRIb;
    public static VexOpCodeHandlerKind Hv_Ed_Id;
    public static VexOpCodeHandlerKind Hv_Ev;
    public static VexOpCodeHandlerKind M;
    public static VexOpCodeHandlerKind MHV;
    public static VexOpCodeHandlerKind M_VK;
    public static VexOpCodeHandlerKind MV;
    public static VexOpCodeHandlerKind rDI_VX_RX;
    public static VexOpCodeHandlerKind RdRq;
    public static VexOpCodeHandlerKind Simple;
    public static VexOpCodeHandlerKind VHEv;
    public static VexOpCodeHandlerKind VHEvIb;
    public static VexOpCodeHandlerKind VHIs4W;
    public static VexOpCodeHandlerKind VHIs5W;
    public static VexOpCodeHandlerKind VHM;
    public static VexOpCodeHandlerKind VHW_2;
    public static VexOpCodeHandlerKind VHW_3;
    public static VexOpCodeHandlerKind VHW_4;
    public static VexOpCodeHandlerKind VHWIb_2;
    public static VexOpCodeHandlerKind VHWIb_4;
    public static VexOpCodeHandlerKind VHWIs4;
    public static VexOpCodeHandlerKind VHWIs5;
    public static VexOpCodeHandlerKind VK_HK_RK;
    public static VexOpCodeHandlerKind VK_R;
    public static VexOpCodeHandlerKind VK_RK;
    public static VexOpCodeHandlerKind VK_RK_Ib;
    public static VexOpCodeHandlerKind VK_WK;
    public static VexOpCodeHandlerKind VM;
    public static VexOpCodeHandlerKind VW_2;
    public static VexOpCodeHandlerKind VW_3;
    public static VexOpCodeHandlerKind VWH;
    public static VexOpCodeHandlerKind VWIb_2;
    public static VexOpCodeHandlerKind VWIb_3;
    public static VexOpCodeHandlerKind VX_Ev;
    public static VexOpCodeHandlerKind VX_VSIB_HX;
    public static VexOpCodeHandlerKind WHV;
    public static VexOpCodeHandlerKind WV;
    public static VexOpCodeHandlerKind WVIb;
    public static VexOpCodeHandlerKind VT_SIBMEM;
    public static VexOpCodeHandlerKind SIBMEM_VT;
    public static VexOpCodeHandlerKind VT;
    public static VexOpCodeHandlerKind VT_RT_HT;
    public static VexOpCodeHandlerKind Group8x64;
    public static VexOpCodeHandlerKind Bitness;
    public static VexOpCodeHandlerKind Null;
    public static VexOpCodeHandlerKind Options_DontReadModRM;
    public static VexOpCodeHandlerKind Gq_HK_RK;
    public static VexOpCodeHandlerKind VK_R_Ib;
    public static VexOpCodeHandlerKind Gv_Ev;
    public static VexOpCodeHandlerKind Ev;
    public static VexOpCodeHandlerKind K_Jb;
    public static VexOpCodeHandlerKind K_Jz;
    public static VexOpCodeHandlerKind Ev_Gv_Gv;
}
internal class Iced.Intel.DecoderInternal.VexOpCodeHandlerReader : OpCodeHandlerReader {
    public virtual int ReadHandlers(TableDeserializer& deserializer, OpCodeHandler[] result, int resultIndex);
}
[FlagsAttribute]
public enum Iced.Intel.DecoderOptions : Enum {
    public UInt32 value__;
    public static DecoderOptions None;
    public static DecoderOptions NoInvalidCheck;
    public static DecoderOptions AMD;
    public static DecoderOptions ForceReservedNop;
    public static DecoderOptions Umov;
    public static DecoderOptions Xbts;
    public static DecoderOptions Cmpxchg486A;
    public static DecoderOptions OldFpu;
    public static DecoderOptions Pcommit;
    public static DecoderOptions Loadall286;
    public static DecoderOptions Loadall386;
    public static DecoderOptions Cl1invmb;
    public static DecoderOptions MovTr;
    public static DecoderOptions Jmpe;
    public static DecoderOptions NoPause;
    public static DecoderOptions NoWbnoinvd;
    public static DecoderOptions Udbg;
    public static DecoderOptions NoMPFX_0FBC;
    public static DecoderOptions NoMPFX_0FBD;
    public static DecoderOptions NoLahfSahf64;
    public static DecoderOptions MPX;
    public static DecoderOptions Cyrix;
    public static DecoderOptions Cyrix_SMINT_0F7E;
    public static DecoderOptions Cyrix_DMI;
    public static DecoderOptions ALTINST;
    public static DecoderOptions KNC;
}
public enum Iced.Intel.DecoratorKind : Enum {
    public int value__;
    public static DecoratorKind Broadcast;
    public static DecoratorKind RoundingControl;
    public static DecoratorKind SuppressAllExceptions;
    public static DecoratorKind ZeroingMasking;
    public static DecoratorKind SwizzleMemConv;
    public static DecoratorKind EvictionHint;
}
public class Iced.Intel.Encoder : object {
    private static UInt32[] s_immSizes;
    internal UInt32 Internal_PreventVEX2;
    internal UInt32 Internal_VEX_WIG_LIG;
    internal UInt32 Internal_VEX_LIG;
    internal UInt32 Internal_EVEX_WIG;
    internal UInt32 Internal_EVEX_LIG;
    internal UInt32 Internal_MVEX_WIG;
    internal static string ERROR_ONLY_1632_BIT_MODE;
    internal static string ERROR_ONLY_64_BIT_MODE;
    private CodeWriter writer;
    private int bitness;
    private OpCodeHandler[] handlers;
    private UInt32[] immSizes;
    private ulong currentRip;
    private string errorMessage;
    private OpCodeHandler handler;
    private UInt32 eip;
    private UInt32 displAddr;
    private UInt32 immAddr;
    internal UInt32 Immediate;
    internal UInt32 ImmediateHi;
    private UInt32 Displ;
    private UInt32 DisplHi;
    private EncoderFlags opSize16Flags;
    private EncoderFlags opSize32Flags;
    private EncoderFlags adrSize16Flags;
    private EncoderFlags adrSize32Flags;
    internal UInt32 OpCode;
    internal EncoderFlags EncoderFlags;
    private DisplSize DisplSize;
    internal ImmSize ImmSize;
    private byte ModRM;
    private byte Sib;
    public bool PreventVEX2 { get; public set; }
    public UInt32 VEX_WIG { get; public set; }
    public UInt32 VEX_LIG { get; public set; }
    public UInt32 EVEX_WIG { get; public set; }
    public UInt32 EVEX_LIG { get; public set; }
    public UInt32 MVEX_WIG { get; public set; }
    public int Bitness { get; }
    [NullableAttribute("2")]
unknown string ErrorMessage {internal set; }
    private static ReadOnlySpan`1<byte> SegmentOverrides { get; }
    private Encoder(CodeWriter writer, int bitness);
    private static Encoder();
    public bool get_PreventVEX2();
    public void set_PreventVEX2(bool value);
    public UInt32 get_VEX_WIG();
    public void set_VEX_WIG(UInt32 value);
    public UInt32 get_VEX_LIG();
    public void set_VEX_LIG(UInt32 value);
    public UInt32 get_EVEX_WIG();
    public void set_EVEX_WIG(UInt32 value);
    public UInt32 get_EVEX_LIG();
    public void set_EVEX_LIG(UInt32 value);
    public UInt32 get_MVEX_WIG();
    public void set_MVEX_WIG(UInt32 value);
    public int get_Bitness();
    [NullableContextAttribute("1")]
public static Encoder Create(int bitness, CodeWriter writer);
    public UInt32 Encode(Instruction& instruction, ulong rip);
    private static void ThrowEncoderException(Instruction& instruction, string errorMessage);
    [NullableContextAttribute("2")]
public bool TryEncode(Instruction& instruction, ulong rip, UInt32& encodedLength, String& errorMessage);
    internal void set_ErrorMessage(string value);
    internal bool Verify(int operand, OpKind expected, OpKind actual);
    internal bool Verify(int operand, Register expected, Register actual);
    internal bool Verify(int operand, Register register, Register regLo, Register regHi);
    internal void AddBranch(OpKind opKind, int immSize, Instruction& instruction, int operand);
    internal void AddBranchX(int immSize, Instruction& instruction, int operand);
    internal void AddBranchDisp(int displSize, Instruction& instruction, int operand);
    internal void AddFarBranch(Instruction& instruction, int operand, int size);
    internal void SetAddrSize(int regSize);
    internal void AddAbsMem(Instruction& instruction, int operand);
    internal void AddModRMRegister(Instruction& instruction, int operand, Register regLo, Register regHi);
    internal void AddReg(Instruction& instruction, int operand, Register regLo, Register regHi);
    internal void AddRegOrMem(Instruction& instruction, int operand, Register regLo, Register regHi, bool allowMemOp, bool allowRegOp);
    internal void AddRegOrMem(Instruction& instruction, int operand, Register regLo, Register regHi, Register vsibIndexRegLo, Register vsibIndexRegHi, bool allowMemOp, bool allowRegOp);
    private static int GetRegisterOpSize(Instruction& instruction);
    private bool TryConvertToDisp8N(Instruction& instruction, int displ, SByte& compressedValue);
    private void AddMemOp16(Instruction& instruction, int operand);
    private void AddMemOp(Instruction& instruction, int operand, int addrSize, Register vsibIndexRegLo, Register vsibIndexRegHi);
    private static ReadOnlySpan`1<byte> get_SegmentOverrides();
    internal void WritePrefixes(Instruction& instruction, bool canWriteF3);
    private void WriteModRM();
    private void WriteImmediate();
    public void WriteByte(byte value);
    internal void WriteByteInternal(UInt32 value);
    public ConstantOffsets GetConstantOffsets();
}
[ExtensionAttribute]
public static class Iced.Intel.EncoderCodeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static OpCodeInfo ToOpCode(Code code);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.EncoderException : Exception {
    [CompilerGeneratedAttribute]
private Instruction <Instruction>k__BackingField;
    public Instruction Instruction { get; }
    public EncoderException(string message, Instruction& instruction);
    protected EncoderException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public Instruction get_Instruction();
}
internal class Iced.Intel.EncoderInternal.D3nowHandler : OpCodeHandler {
    private static Op[] operands;
    private UInt32 immediate;
    public D3nowHandler(EncFlags2 encFlags2, EncFlags3 encFlags3);
    private static D3nowHandler();
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal class Iced.Intel.EncoderInternal.DeclareDataHandler : OpCodeHandler {
    private int elemLength;
    private int maxLength;
    public DeclareDataHandler(Code code);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal enum Iced.Intel.EncoderInternal.DisplSize : Enum {
    public int value__;
    public static DisplSize None;
    public static DisplSize Size1;
    public static DisplSize Size2;
    public static DisplSize Size4;
    public static DisplSize Size8;
    public static DisplSize RipRelSize4_Target32;
    public static DisplSize RipRelSize4_Target64;
}
[FlagsAttribute]
internal enum Iced.Intel.EncoderInternal.EncFlags1 : Enum {
    public UInt32 value__;
    public static EncFlags1 None;
    public static EncFlags1 Legacy_OpMask;
    public static EncFlags1 Legacy_Op0Shift;
    public static EncFlags1 Legacy_Op1Shift;
    public static EncFlags1 Legacy_Op2Shift;
    public static EncFlags1 Legacy_Op3Shift;
    public static EncFlags1 VEX_OpMask;
    public static EncFlags1 VEX_Op0Shift;
    public static EncFlags1 VEX_Op1Shift;
    public static EncFlags1 VEX_Op2Shift;
    public static EncFlags1 VEX_Op3Shift;
    public static EncFlags1 VEX_Op4Shift;
    public static EncFlags1 XOP_OpMask;
    public static EncFlags1 XOP_Op0Shift;
    public static EncFlags1 XOP_Op1Shift;
    public static EncFlags1 XOP_Op2Shift;
    public static EncFlags1 XOP_Op3Shift;
    public static EncFlags1 EVEX_OpMask;
    public static EncFlags1 EVEX_Op0Shift;
    public static EncFlags1 EVEX_Op1Shift;
    public static EncFlags1 EVEX_Op2Shift;
    public static EncFlags1 EVEX_Op3Shift;
    public static EncFlags1 MVEX_OpMask;
    public static EncFlags1 MVEX_Op0Shift;
    public static EncFlags1 MVEX_Op1Shift;
    public static EncFlags1 MVEX_Op2Shift;
    public static EncFlags1 MVEX_Op3Shift;
    public static EncFlags1 IgnoresRoundingControl;
    public static EncFlags1 AmdLockRegBit;
}
[FlagsAttribute]
internal enum Iced.Intel.EncoderInternal.EncFlags2 : Enum {
    public UInt32 value__;
    public static EncFlags2 None;
    public static EncFlags2 OpCodeShift;
    public static EncFlags2 OpCodeIs2Bytes;
    public static EncFlags2 TableShift;
    public static EncFlags2 TableMask;
    public static EncFlags2 MandatoryPrefixShift;
    public static EncFlags2 MandatoryPrefixMask;
    public static EncFlags2 WBitShift;
    public static EncFlags2 WBitMask;
    public static EncFlags2 LBitShift;
    public static EncFlags2 LBitMask;
    public static EncFlags2 GroupIndexShift;
    public static EncFlags2 GroupIndexMask;
    public static EncFlags2 HasMandatoryPrefix;
    public static EncFlags2 HasGroupIndex;
}
[FlagsAttribute]
internal enum Iced.Intel.EncoderInternal.EncFlags3 : Enum {
    public UInt32 value__;
    public static EncFlags3 None;
    public static EncFlags3 EncodingShift;
    public static EncFlags3 EncodingMask;
    public static EncFlags3 OperandSizeShift;
    public static EncFlags3 OperandSizeMask;
    public static EncFlags3 AddressSizeShift;
    public static EncFlags3 AddressSizeMask;
    public static EncFlags3 TupleTypeShift;
    public static EncFlags3 TupleTypeMask;
    public static EncFlags3 DefaultOpSize64;
    public static EncFlags3 HasRmGroupIndex;
    public static EncFlags3 IntelForceOpSize64;
    public static EncFlags3 Fwait;
    public static EncFlags3 Bit16or32;
    public static EncFlags3 Bit64;
    public static EncFlags3 Lock;
    public static EncFlags3 Xacquire;
    public static EncFlags3 Xrelease;
    public static EncFlags3 Rep;
    public static EncFlags3 Repne;
    public static EncFlags3 Bnd;
    public static EncFlags3 HintTaken;
    public static EncFlags3 Notrack;
    public static EncFlags3 Broadcast;
    public static EncFlags3 RoundingControl;
    public static EncFlags3 SuppressAllExceptions;
    public static EncFlags3 OpMaskRegister;
    public static EncFlags3 ZeroingMasking;
    public static EncFlags3 RequireOpMaskRegister;
}
internal static class Iced.Intel.EncoderInternal.EncoderData : object {
    internal static UInt32[] EncFlags1;
    internal static UInt32[] EncFlags2;
    internal static UInt32[] EncFlags3;
    private static EncoderData();
    private static UInt32[] GetEncFlags1();
    private static UInt32[] GetEncFlags2();
    private static UInt32[] GetEncFlags3();
}
[FlagsAttribute]
internal enum Iced.Intel.EncoderInternal.EncoderFlags : Enum {
    public UInt32 value__;
    public static EncoderFlags None;
    public static EncoderFlags B;
    public static EncoderFlags X;
    public static EncoderFlags R;
    public static EncoderFlags W;
    public static EncoderFlags ModRM;
    public static EncoderFlags Sib;
    public static EncoderFlags REX;
    public static EncoderFlags P66;
    public static EncoderFlags P67;
    public static EncoderFlags R2;
    public static EncoderFlags Broadcast;
    public static EncoderFlags HighLegacy8BitRegs;
    public static EncoderFlags Displ;
    public static EncoderFlags PF0;
    public static EncoderFlags RegIsMemory;
    public static EncoderFlags MustUseSib;
    public static EncoderFlags VvvvvShift;
    public static EncoderFlags VvvvvMask;
}
internal class Iced.Intel.EncoderInternal.EvexHandler : OpCodeHandler {
    private WBit wbit;
    private TupleType tupleType;
    private UInt32 table;
    private UInt32 p1Bits;
    private UInt32 llBits;
    private UInt32 mask_W;
    private UInt32 mask_LL;
    private static TryConvertToDisp8N tryConvertToDisp8N;
    public EvexHandler(EncFlags1 encFlags1, EncFlags2 encFlags2, EncFlags3 encFlags3);
    private static EvexHandler();
    private static Op[] CreateOps(EncFlags1 encFlags1);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal enum Iced.Intel.EncoderInternal.EvexOpCodeTable : Enum {
    public int value__;
    public static EvexOpCodeTable MAP0F;
    public static EvexOpCodeTable MAP0F38;
    public static EvexOpCodeTable MAP0F3A;
    public static EvexOpCodeTable MAP5;
    public static EvexOpCodeTable MAP6;
}
internal enum Iced.Intel.EncoderInternal.ImmSize : Enum {
    public int value__;
    public static ImmSize None;
    public static ImmSize Size1;
    public static ImmSize Size2;
    public static ImmSize Size4;
    public static ImmSize Size8;
    public static ImmSize Size2_1;
    public static ImmSize Size1_1;
    public static ImmSize Size2_2;
    public static ImmSize Size4_2;
    public static ImmSize RipRelSize1_Target16;
    public static ImmSize RipRelSize1_Target32;
    public static ImmSize RipRelSize1_Target64;
    public static ImmSize RipRelSize2_Target16;
    public static ImmSize RipRelSize2_Target32;
    public static ImmSize RipRelSize2_Target64;
    public static ImmSize RipRelSize4_Target32;
    public static ImmSize RipRelSize4_Target64;
    public static ImmSize SizeIbReg;
    public static ImmSize Size1OpCode;
}
internal enum Iced.Intel.EncoderInternal.InstrStrFmtOption : Enum {
    public int value__;
    public static InstrStrFmtOption None;
    public static InstrStrFmtOption OpMaskIsK1_or_NoGprSuffix;
    public static InstrStrFmtOption IncVecIndex;
    public static InstrStrFmtOption NoVecIndex;
    public static InstrStrFmtOption SwapVecIndex12;
    public static InstrStrFmtOption SkipOp0;
    public static InstrStrFmtOption VecIndexSameAsOpIndex;
}
internal class Iced.Intel.EncoderInternal.InstructionFormatter : ValueType {
    private OpCodeInfo opCode;
    private StringBuilder sb;
    private int r32_count;
    private int r64_count;
    private int bnd_count;
    private int startOpIndex;
    private int r32_index;
    private int r64_index;
    private int bnd_index;
    private int k_index;
    private int vec_index;
    private int tmm_index;
    private int opCount;
    private bool opMaskIsK1;
    private bool noVecIndex;
    private bool swapVecIndex12;
    private bool noGprSuffix;
    private bool vecIndexSameAsOpIndex;
    private static String[] ConvFnNames;
    public InstructionFormatter(OpCodeInfo opCode, InstrStrFmtOption fmtOption, StringBuilder sb);
    private static InstructionFormatter();
    private int GetKIndex();
    private int GetBndIndex();
    private int GetVecIndex(int opIndex);
    private int GetTmmIndex();
    private MemorySize GetMemorySize(bool isBroadcast);
    public string Format();
    private void WriteMemorySize(MemorySize memorySize);
    private bool IsSgdtOrSidt();
    private void WriteRegister(string register);
    private void WriteRegOp(string register);
    private void WriteRegOp(string register, int index);
    private void WriteDecorator(string decorator);
    private void WriteRegDecorator(string register, int index);
    private void AppendGprSuffix(int count, Int32& index);
    private void WriteOpSeparator();
    private void Write(string s, bool upper);
    private void WriteGprMem(int regSize);
    private void WriteRegMem(string register, int index);
    private void WriteMemory();
    private void WriteMemory(bool isBroadcast);
    private static bool IsFpuInstruction(Code code);
}
internal class Iced.Intel.EncoderInternal.InvalidHandler : OpCodeHandler {
    internal static string ERROR_MESSAGE;
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal enum Iced.Intel.EncoderInternal.LBit : Enum {
    public UInt32 value__;
    public static LBit L0;
    public static LBit L1;
    public static LBit LIG;
    public static LBit LZ;
    public static LBit L128;
    public static LBit L256;
    public static LBit L512;
}
internal class Iced.Intel.EncoderInternal.LegacyHandler : OpCodeHandler {
    private UInt32 tableByte1;
    private UInt32 tableByte2;
    private UInt32 mandatoryPrefix;
    public LegacyHandler(EncFlags1 encFlags1, EncFlags2 encFlags2, EncFlags3 encFlags3);
    private static Op[] CreateOps(EncFlags1 encFlags1);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal enum Iced.Intel.EncoderInternal.LegacyOpCodeTable : Enum {
    public int value__;
    public static LegacyOpCodeTable MAP0;
    public static LegacyOpCodeTable MAP0F;
    public static LegacyOpCodeTable MAP0F38;
    public static LegacyOpCodeTable MAP0F3A;
}
internal enum Iced.Intel.EncoderInternal.LKind : Enum {
    public byte value__;
    public static LKind None;
    public static LKind L128;
    public static LKind L0;
    public static LKind LZ;
}
internal class Iced.Intel.EncoderInternal.MvexHandler : OpCodeHandler {
    private WBit wbit;
    private UInt32 table;
    private UInt32 p1Bits;
    private UInt32 mask_W;
    private static TryConvertToDisp8N tryConvertToDisp8N;
    public MvexHandler(EncFlags1 encFlags1, EncFlags2 encFlags2, EncFlags3 encFlags3);
    private static MvexHandler();
    private static Op[] CreateOps(EncFlags1 encFlags1);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal enum Iced.Intel.EncoderInternal.MvexOpCodeTable : Enum {
    public int value__;
    public static MvexOpCodeTable MAP0F;
    public static MvexOpCodeTable MAP0F38;
    public static MvexOpCodeTable MAP0F3A;
}
internal abstract class Iced.Intel.EncoderInternal.Op : object {
    public abstract virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetImmediateOpKind();
    public virtual OpKind GetNearBranchOpKind();
    public virtual OpKind GetFarBranchOpKind();
}
internal class Iced.Intel.EncoderInternal.OpA : Op {
    private int size;
    public OpA(int size);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetFarBranchOpKind();
}
[IsReadOnlyAttribute]
internal class Iced.Intel.EncoderInternal.OpCodeFormatter : ValueType {
    private OpCodeInfo opCode;
    private StringBuilder sb;
    private LKind lkind;
    private bool hasModrmInfo;
    public OpCodeFormatter(OpCodeInfo opCode, StringBuilder sb, LKind lkind, bool hasModrmInfo);
    public string Format();
    private void AppendHexByte(byte value);
    private void AppendOpCode(UInt32 value, int valueLen, bool sep);
    private void AppendTable(bool sep);
    private bool HasModRM();
    private bool HasVsib();
    private OpCodeOperandKind GetOpCodeBitsOperand();
    private bool TryGetModrmInfo(Boolean& isRegOnly, Int32& rrr, Int32& bbb);
    private void AppendBits(string name, int bits, int numBits);
    private void AppendRest();
    private string Format_Legacy();
    private string Format_3DNow();
    private string FormatVecEncoding(string encodingName);
}
internal abstract class Iced.Intel.EncoderInternal.OpCodeHandler : object {
    internal UInt32 OpCode;
    internal bool Is2ByteOpCode;
    internal int GroupIndex;
    internal int RmGroupIndex;
    internal bool IsSpecialInstr;
    internal EncFlags3 EncFlags3;
    internal CodeSize OpSize;
    internal CodeSize AddrSize;
    internal TryConvertToDisp8N TryConvertToDisp8N;
    internal Op[] Operands;
    protected OpCodeHandler(EncFlags2 encFlags2, EncFlags3 encFlags3, bool isSpecialInstr, TryConvertToDisp8N tryConvertToDisp8N, Op[] operands);
    protected static UInt32 GetOpCode(EncFlags2 encFlags2);
    public abstract virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal static class Iced.Intel.EncoderInternal.OpCodeHandlers : object {
    public static OpCodeHandler[] Handlers;
    private static OpCodeHandlers();
}
internal static class Iced.Intel.EncoderInternal.OpCodeInfoData : object {
    internal static UInt32[] OpcFlags1;
    internal static UInt32[] OpcFlags2;
    private static OpCodeInfoData();
    private static UInt32[] GetOpcFlags1();
    private static UInt32[] GetOpcFlags2();
}
[FlagsAttribute]
internal enum Iced.Intel.EncoderInternal.OpCodeInfoFlags1 : Enum {
    public UInt32 value__;
    public static OpCodeInfoFlags1 None;
    public static OpCodeInfoFlags1 Cpl0Only;
    public static OpCodeInfoFlags1 Cpl3Only;
    public static OpCodeInfoFlags1 InputOutput;
    public static OpCodeInfoFlags1 Nop;
    public static OpCodeInfoFlags1 ReservedNop;
    public static OpCodeInfoFlags1 SerializingIntel;
    public static OpCodeInfoFlags1 SerializingAmd;
    public static OpCodeInfoFlags1 MayRequireCpl0;
    public static OpCodeInfoFlags1 CetTracked;
    public static OpCodeInfoFlags1 NonTemporal;
    public static OpCodeInfoFlags1 FpuNoWait;
    public static OpCodeInfoFlags1 IgnoresModBits;
    public static OpCodeInfoFlags1 No66;
    public static OpCodeInfoFlags1 NFx;
    public static OpCodeInfoFlags1 RequiresUniqueRegNums;
    public static OpCodeInfoFlags1 Privileged;
    public static OpCodeInfoFlags1 SaveRestore;
    public static OpCodeInfoFlags1 StackInstruction;
    public static OpCodeInfoFlags1 IgnoresSegment;
    public static OpCodeInfoFlags1 OpMaskReadWrite;
    public static OpCodeInfoFlags1 ModRegRmString;
    public static OpCodeInfoFlags1 DecOptionValueMask;
    public static OpCodeInfoFlags1 DecOptionValueShift;
    public static OpCodeInfoFlags1 ForceOpSize64;
    public static OpCodeInfoFlags1 RequiresUniqueDestRegNum;
}
[FlagsAttribute]
internal enum Iced.Intel.EncoderInternal.OpCodeInfoFlags2 : Enum {
    public UInt32 value__;
    public static OpCodeInfoFlags2 None;
    public static OpCodeInfoFlags2 RealMode;
    public static OpCodeInfoFlags2 ProtectedMode;
    public static OpCodeInfoFlags2 Virtual8086Mode;
    public static OpCodeInfoFlags2 CompatibilityMode;
    public static OpCodeInfoFlags2 UseOutsideSmm;
    public static OpCodeInfoFlags2 UseInSmm;
    public static OpCodeInfoFlags2 UseOutsideEnclaveSgx;
    public static OpCodeInfoFlags2 UseInEnclaveSgx1;
    public static OpCodeInfoFlags2 UseInEnclaveSgx2;
    public static OpCodeInfoFlags2 UseOutsideVmxOp;
    public static OpCodeInfoFlags2 UseInVmxRootOp;
    public static OpCodeInfoFlags2 UseInVmxNonRootOp;
    public static OpCodeInfoFlags2 UseOutsideSeam;
    public static OpCodeInfoFlags2 UseInSeam;
    public static OpCodeInfoFlags2 TdxNonRootGenUd;
    public static OpCodeInfoFlags2 TdxNonRootGenVe;
    public static OpCodeInfoFlags2 TdxNonRootMayGenEx;
    public static OpCodeInfoFlags2 IntelVmExit;
    public static OpCodeInfoFlags2 IntelMayVmExit;
    public static OpCodeInfoFlags2 IntelSmmVmExit;
    public static OpCodeInfoFlags2 AmdVmExit;
    public static OpCodeInfoFlags2 AmdMayVmExit;
    public static OpCodeInfoFlags2 TsxAbort;
    public static OpCodeInfoFlags2 TsxImplAbort;
    public static OpCodeInfoFlags2 TsxMayAbort;
    public static OpCodeInfoFlags2 IntelDecoder16or32;
    public static OpCodeInfoFlags2 IntelDecoder64;
    public static OpCodeInfoFlags2 AmdDecoder16or32;
    public static OpCodeInfoFlags2 AmdDecoder64;
    public static OpCodeInfoFlags2 InstrStrFmtOptionMask;
    public static OpCodeInfoFlags2 InstrStrFmtOptionShift;
}
internal static class Iced.Intel.EncoderInternal.OpCodeInfos : object {
    public static OpCodeInfo[] Infos;
    private static OpCodeInfos();
    private static OpCodeInfo[] CreateInfos();
}
internal static class Iced.Intel.EncoderInternal.OpCodeOperandKinds : object {
    public static ReadOnlySpan`1<byte> LegacyOpKinds { get; }
    public static ReadOnlySpan`1<byte> VexOpKinds { get; }
    public static ReadOnlySpan`1<byte> XopOpKinds { get; }
    public static ReadOnlySpan`1<byte> EvexOpKinds { get; }
    public static ReadOnlySpan`1<byte> MvexOpKinds { get; }
    public static ReadOnlySpan`1<byte> get_LegacyOpKinds();
    public static ReadOnlySpan`1<byte> get_VexOpKinds();
    public static ReadOnlySpan`1<byte> get_XopOpKinds();
    public static ReadOnlySpan`1<byte> get_EvexOpKinds();
    public static ReadOnlySpan`1<byte> get_MvexOpKinds();
}
internal static class Iced.Intel.EncoderInternal.OpHandlerData : object {
    public static Op[] LegacyOps;
    public static Op[] VexOps;
    public static Op[] XopOps;
    public static Op[] EvexOps;
    public static Op[] MvexOps;
    private static OpHandlerData();
}
internal class Iced.Intel.EncoderInternal.OpHx : Op {
    private Register regLo;
    private Register regHi;
    public OpHx(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpI4 : Op {
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetImmediateOpKind();
}
internal class Iced.Intel.EncoderInternal.OpIb : Op {
    private OpKind opKind;
    public OpIb(OpKind opKind);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetImmediateOpKind();
}
internal class Iced.Intel.EncoderInternal.OpId : Op {
    private OpKind opKind;
    public OpId(OpKind opKind);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetImmediateOpKind();
}
internal class Iced.Intel.EncoderInternal.OpImm : Op {
    private byte value;
    public OpImm(byte value);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetImmediateOpKind();
}
internal class Iced.Intel.EncoderInternal.OpIq : Op {
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetImmediateOpKind();
}
internal class Iced.Intel.EncoderInternal.OpIsX : Op {
    private Register regLo;
    private Register regHi;
    public OpIsX(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpIw : Op {
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetImmediateOpKind();
}
internal class Iced.Intel.EncoderInternal.OpJ : Op {
    private OpKind opKind;
    private int immSize;
    public OpJ(OpKind opKind, int immSize);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetNearBranchOpKind();
}
internal class Iced.Intel.EncoderInternal.OpJdisp : Op {
    private int displSize;
    public OpJdisp(int displSize);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetNearBranchOpKind();
}
internal class Iced.Intel.EncoderInternal.OpJx : Op {
    private int immSize;
    public OpJx(int immSize);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual OpKind GetNearBranchOpKind();
}
internal class Iced.Intel.EncoderInternal.OpModRM_reg : Op {
    private Register regLo;
    private Register regHi;
    public OpModRM_reg(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpModRM_reg_mem : Op {
    private Register regLo;
    private Register regHi;
    public OpModRM_reg_mem(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpModRM_regF0 : Op {
    private Register regLo;
    private Register regHi;
    public OpModRM_regF0(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpModRM_rm : Op {
    private Register regLo;
    private Register regHi;
    public OpModRM_rm(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpModRM_rm_mem_only : Op {
    private bool mustUseSib;
    public OpModRM_rm_mem_only(bool mustUseSib);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpModRM_rm_reg_only : Op {
    private Register regLo;
    private Register regHi;
    public OpModRM_rm_reg_only(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpMRBX : Op {
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpO : Op {
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OprDI : Op {
    private static int GetRegSize(OpKind opKind);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpReg : Op {
    private Register register;
    public OpReg(Register register);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpRegEmbed8 : Op {
    private Register regLo;
    private Register regHi;
    public OpRegEmbed8(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpRegSTi : Op {
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpVsib : Op {
    private Register vsibIndexRegLo;
    private Register vsibIndexRegHi;
    public OpVsib(Register regLo, Register regHi);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpX : Op {
    internal static int GetXRegSize(OpKind opKind);
    internal static int GetYRegSize(OpKind opKind);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.OpY : Op {
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
}
internal class Iced.Intel.EncoderInternal.TryConvertToDisp8N : MulticastDelegate {
    public TryConvertToDisp8N(object object, IntPtr method);
    public virtual bool Invoke(Encoder encoder, OpCodeHandler handler, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int displ, SByte& compressedValue);
    public virtual IAsyncResult BeginInvoke(Encoder encoder, OpCodeHandler handler, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int displ, SByte& compressedValue, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, SByte& compressedValue, IAsyncResult result);
}
internal class Iced.Intel.EncoderInternal.VexHandler : OpCodeHandler {
    private UInt32 table;
    private UInt32 lastByte;
    private UInt32 mask_W_L;
    private UInt32 mask_L;
    private UInt32 W1;
    public VexHandler(EncFlags1 encFlags1, EncFlags2 encFlags2, EncFlags3 encFlags3);
    private static Op[] CreateOps(EncFlags1 encFlags1);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal enum Iced.Intel.EncoderInternal.VexOpCodeTable : Enum {
    public int value__;
    public static VexOpCodeTable MAP0;
    public static VexOpCodeTable MAP0F;
    public static VexOpCodeTable MAP0F38;
    public static VexOpCodeTable MAP0F3A;
}
internal enum Iced.Intel.EncoderInternal.WBit : Enum {
    public UInt32 value__;
    public static WBit W0;
    public static WBit W1;
    public static WBit WIG;
    public static WBit WIG32;
}
internal class Iced.Intel.EncoderInternal.XopHandler : OpCodeHandler {
    private UInt32 table;
    private UInt32 lastByte;
    public XopHandler(EncFlags1 encFlags1, EncFlags2 encFlags2, EncFlags3 encFlags3);
    private static Op[] CreateOps(EncFlags1 encFlags1);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
internal enum Iced.Intel.EncoderInternal.XopOpCodeTable : Enum {
    public int value__;
    public static XopOpCodeTable MAP8;
    public static XopOpCodeTable MAP9;
    public static XopOpCodeTable MAP10;
}
internal class Iced.Intel.EncoderInternal.ZeroBytesHandler : OpCodeHandler {
    public ZeroBytesHandler(Code code);
    public virtual void Encode(Encoder encoder, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
}
public enum Iced.Intel.EncodingKind : Enum {
    public int value__;
    public static EncodingKind Legacy;
    public static EncodingKind VEX;
    public static EncodingKind EVEX;
    public static EncodingKind XOP;
    public static EncodingKind D3NOW;
    public static EncodingKind MVEX;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.FastFormatter : object {
    private FastFormatterOptions options;
    private ISymbolResolver symbolResolver;
    private FormatterString[] allRegisters;
    private String[] codeMnemonics;
    private FastFmtFlags[] codeFlags;
    private String[] allMemorySizes;
    private String[] rcStrings;
    private String[] rcSaeStrings;
    private String[] scaleNumbers;
    private String[] mvexRegMemConsts32;
    private String[] mvexRegMemConsts64;
    private static bool ShowUselessPrefixes;
    private static String[] s_rcStrings;
    private static String[] s_rcSaeStrings;
    private static String[] s_scaleNumbers;
    private static String[] s_mvexRegMemConsts32;
    private static String[] s_mvexRegMemConsts64;
    public FastFormatterOptions Options { get; }
    [NullableContextAttribute("2")]
public FastFormatter(ISymbolResolver symbolResolver);
    private static FastFormatter();
    public FastFormatterOptions get_Options();
    public void Format(Instruction& instruction, FastStringOutput output);
    private static bool ShowSegmentPrefix(Instruction& instruction, int opCount);
    private void FormatRegister(FastStringOutput output, Register register);
    private void FormatNumber(FastStringOutput output, ulong value);
    private void WriteSymbol(FastStringOutput output, ulong address, SymbolResult& symbol);
    private void WriteSymbol(FastStringOutput output, ulong address, SymbolResult& symbol, bool writeMinusIfSigned);
    private void FormatMemory(FastStringOutput output, Instruction& instruction, int operand, Register segReg, Register baseReg, Register indexReg, int scale, int displSize, long displ, int addrSize);
}
[FlagsAttribute]
internal enum Iced.Intel.FastFormatterInternal.FastFmtFlags : Enum {
    public byte value__;
    public static FastFmtFlags None;
    public static FastFmtFlags HasVPrefix;
    public static FastFmtFlags SameAsPrev;
    public static FastFmtFlags ForceMemSize;
    public static FastFmtFlags PseudoOpsKindShift;
    public static FastFmtFlags cmpps;
    public static FastFmtFlags vcmpps;
    public static FastFmtFlags cmppd;
    public static FastFmtFlags vcmppd;
    public static FastFmtFlags cmpss;
    public static FastFmtFlags vcmpss;
    public static FastFmtFlags cmpsd;
    public static FastFmtFlags vcmpsd;
    public static FastFmtFlags pclmulqdq;
    public static FastFmtFlags vpclmulqdq;
    public static FastFmtFlags vpcomb;
    public static FastFmtFlags vpcomw;
    public static FastFmtFlags vpcomd;
    public static FastFmtFlags vpcomq;
    public static FastFmtFlags vpcomub;
    public static FastFmtFlags vpcomuw;
    public static FastFmtFlags vpcomud;
    public static FastFmtFlags vpcomuq;
    public static FastFmtFlags vpcmpb;
    public static FastFmtFlags vpcmpw;
    public static FastFmtFlags vpcmpd;
    public static FastFmtFlags vpcmpq;
    public static FastFmtFlags vpcmpub;
    public static FastFmtFlags vpcmpuw;
    public static FastFmtFlags vpcmpud;
    public static FastFmtFlags vpcmpuq;
    public static FastFmtFlags vcmpph;
    public static FastFmtFlags vcmpsh;
    public static FastFmtFlags vcmpps8;
    public static FastFmtFlags vcmppd8;
    public static FastFmtFlags vpcmpd6;
}
internal static class Iced.Intel.FastFormatterInternal.FmtData : object {
    public static String[] Mnemonics;
    public static FastFmtFlags[] Flags;
    private static FmtData();
    private static String[] ParseData(FastFmtFlags[]& outFlags);
    private static ReadOnlySpan`1<byte> GetSerializedData();
}
internal static class Iced.Intel.FastFormatterInternal.MemorySizes : object {
    public static String[] AllMemorySizes;
    private static MemorySizes();
    private static String[] GetMemorySizes();
}
internal static class Iced.Intel.FastFormatterInternal.Registers : object {
    public static FormatterString[] AllRegisters;
    private static Registers();
}
public class Iced.Intel.FastFormatterOptions : object {
    private Flags1 flags1;
    public bool SpaceAfterOperandSeparator { get; public set; }
    public bool RipRelativeAddresses { get; public set; }
    public bool UsePseudoOps { get; public set; }
    public bool ShowSymbolAddress { get; public set; }
    public bool AlwaysShowSegmentRegister { get; public set; }
    public bool AlwaysShowMemorySize { get; public set; }
    public bool UppercaseHex { get; public set; }
    public bool UseHexPrefix { get; public set; }
    public bool get_SpaceAfterOperandSeparator();
    public void set_SpaceAfterOperandSeparator(bool value);
    public bool get_RipRelativeAddresses();
    public void set_RipRelativeAddresses(bool value);
    public bool get_UsePseudoOps();
    public void set_UsePseudoOps(bool value);
    public bool get_ShowSymbolAddress();
    public void set_ShowSymbolAddress(bool value);
    public bool get_AlwaysShowSegmentRegister();
    public void set_AlwaysShowSegmentRegister(bool value);
    public bool get_AlwaysShowMemorySize();
    public void set_AlwaysShowMemorySize(bool value);
    public bool get_UppercaseHex();
    public void set_UppercaseHex(bool value);
    public bool get_UseHexPrefix();
    public void set_UseHexPrefix(bool value);
}
public class Iced.Intel.FastStringOutput : object {
    private Char[] buffer;
    private int bufferLen;
    public int Length { get; }
    public FastStringOutput(int capacity);
    public int get_Length();
    public void Append(char c);
    [NullableContextAttribute("2")]
public void Append(string value);
    internal void AppendNotNull(string value);
    private void Resize(int extraCount);
    public ReadOnlySpan`1<char> AsSpan();
    [NullableContextAttribute("1")]
public void CopyTo(Char[] array, int arrayIndex);
    public void Clear();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum Iced.Intel.FlowControl : Enum {
    public int value__;
    public static FlowControl Next;
    public static FlowControl UnconditionalBranch;
    public static FlowControl IndirectBranch;
    public static FlowControl ConditionalBranch;
    public static FlowControl Return;
    public static FlowControl Call;
    public static FlowControl IndirectCall;
    public static FlowControl Interrupt;
    public static FlowControl XbeginXabortXend;
    public static FlowControl Exception;
}
[FlagsAttribute]
public enum Iced.Intel.FormatMnemonicOptions : Enum {
    public UInt32 value__;
    public static FormatMnemonicOptions None;
    public static FormatMnemonicOptions NoPrefixes;
    public static FormatMnemonicOptions NoMnemonic;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Iced.Intel.Formatter : object {
    public FormatterOptions Options { get; }
    public abstract virtual FormatterOptions get_Options();
    public void FormatMnemonic(Instruction& instruction, FormatterOutput output);
    public abstract virtual void FormatMnemonic(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, FormatMnemonicOptions options);
    public abstract virtual int GetOperandCount(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
    public abstract virtual bool TryGetOpAccess(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, OpAccess& access);
    public abstract virtual int GetInstructionOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public abstract virtual int GetFormatterOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int instructionOperand);
    public abstract virtual void FormatOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, int operand);
    public abstract virtual void FormatOperandSeparator(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public abstract virtual void FormatAllOperands(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public abstract virtual void Format(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public abstract virtual string Format(Register register);
    public string FormatInt8(sbyte value);
    public string FormatInt16(short value);
    public string FormatInt32(int value);
    public string FormatInt64(long value);
    public string FormatUInt8(byte value);
    public string FormatUInt16(ushort value);
    public string FormatUInt32(UInt32 value);
    public string FormatUInt64(ulong value);
    public abstract virtual string FormatInt8(sbyte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public abstract virtual string FormatInt16(short value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public abstract virtual string FormatInt32(int value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public abstract virtual string FormatInt64(long value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public abstract virtual string FormatUInt8(byte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public abstract virtual string FormatUInt16(ushort value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public abstract virtual string FormatUInt32(UInt32 value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public abstract virtual string FormatUInt64(ulong value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
}
internal static class Iced.Intel.FormatterConstants : object {
    private static FormatterString[] cmpps_pseudo_ops;
    private static FormatterString[] vcmpps_pseudo_ops;
    private static FormatterString[] cmppd_pseudo_ops;
    private static FormatterString[] vcmppd_pseudo_ops;
    private static FormatterString[] cmpss_pseudo_ops;
    private static FormatterString[] vcmpss_pseudo_ops;
    private static FormatterString[] cmpsd_pseudo_ops;
    private static FormatterString[] vcmpsd_pseudo_ops;
    private static FormatterString[] vcmpph_pseudo_ops;
    private static FormatterString[] vcmpsh_pseudo_ops;
    private static FormatterString[] vcmpps8_pseudo_ops;
    private static FormatterString[] vcmppd8_pseudo_ops;
    private static FormatterString[] vpcmpd6_pseudo_ops;
    private static FormatterString[] vpcmpud6_pseudo_ops;
    private static FormatterString[] pclmulqdq_pseudo_ops;
    private static FormatterString[] vpclmulqdq_pseudo_ops;
    private static FormatterString[] vpcomb_pseudo_ops;
    private static FormatterString[] vpcomw_pseudo_ops;
    private static FormatterString[] vpcomd_pseudo_ops;
    private static FormatterString[] vpcomq_pseudo_ops;
    private static FormatterString[] vpcomub_pseudo_ops;
    private static FormatterString[] vpcomuw_pseudo_ops;
    private static FormatterString[] vpcomud_pseudo_ops;
    private static FormatterString[] vpcomuq_pseudo_ops;
    private static FormatterString[] vpcmpb_pseudo_ops;
    private static FormatterString[] vpcmpw_pseudo_ops;
    private static FormatterString[] vpcmpd_pseudo_ops;
    private static FormatterString[] vpcmpq_pseudo_ops;
    private static FormatterString[] vpcmpub_pseudo_ops;
    private static FormatterString[] vpcmpuw_pseudo_ops;
    private static FormatterString[] vpcmpud_pseudo_ops;
    private static FormatterString[] vpcmpuq_pseudo_ops;
    private static FormatterConstants();
    public static FormatterString[] GetPseudoOps(PseudoOpsKind kind);
    private static FormatterString[] Create(String[] cc, int size, string prefix, string suffix);
}
internal enum Iced.Intel.FormatterInternal.FormatterFlowControl : Enum {
    public int value__;
    public static FormatterFlowControl AlwaysShortBranch;
    public static FormatterFlowControl ShortBranch;
    public static FormatterFlowControl NearBranch;
    public static FormatterFlowControl NearCall;
    public static FormatterFlowControl FarBranch;
    public static FormatterFlowControl FarCall;
    public static FormatterFlowControl Xbegin;
}
[IsReadOnlyAttribute]
internal class Iced.Intel.FormatterInternal.FormatterString : ValueType {
    private string lower;
    private string upper;
    public int Length { get; }
    public string Lower { get; }
    public FormatterString(string lower);
    public int get_Length();
    public static FormatterString[] Create(String[] strings);
    public string Get(bool upper);
    public string get_Lower();
}
internal static class Iced.Intel.FormatterInternal.FormatterStringsTable : object {
    private static int MaxStringLength;
    private static int StringsCount;
    public static String[] GetStringsTable();
    private static ReadOnlySpan`1<byte> GetSerializedStrings();
}
internal static class Iced.Intel.FormatterInternal.FormatterUtils : object {
    private static String[] spaceStrings;
    private static String[] tabStrings;
    private static FormatterUtils();
    public static bool IsNotrackPrefixBranch(Code code);
    private static bool IsCode64(CodeSize codeSize);
    private static Register GetDefaultSegmentRegister(Instruction& instruction);
    public static bool ShowSegmentPrefix(Register defaultSegReg, Instruction& instruction, bool showUselessPrefixes);
    public static bool ShowRepOrRepePrefix(Code code, bool showUselessPrefixes);
    public static bool ShowRepnePrefix(Code code, bool showUselessPrefixes);
    public static bool IsRepeOrRepneInstruction(Code code);
    private static bool IsRepRepeRepneInstruction(Code code);
    private static String[] CreateStrings(char c, int max);
    public static void AddTabs(FormatterOutput output, int column, int firstOperandCharIndex, int tabSize);
    private static void AddStrings(FormatterOutput output, String[] strings, int count);
    public static bool IsCall(FormatterFlowControl kind);
    public static FormatterFlowControl GetFlowControl(Instruction& instruction);
    public static bool ShowRepOrRepePrefix(Code code, FormatterOptions options);
    public static bool ShowRepnePrefix(Code code, FormatterOptions options);
    public static PrefixKind GetSegmentRegisterPrefixKind(Register register);
    public static bool ShowIndexScale(Instruction& instruction, FormatterOptions options);
    public static bool ShowSegmentPrefix(Register defaultSegReg, Instruction& instruction, FormatterOptions options);
    public static bool CanShowRoundingControl(Instruction& instruction, FormatterOptions options);
}
internal static class Iced.Intel.FormatterInternal.MnemonicCC : object {
    public static FormatterString GetMnemonicCC(FormatterOptions options, int ccIndex, FormatterString[] mnemonics);
}
internal enum Iced.Intel.FormatterInternal.PseudoOpsKind : Enum {
    public int value__;
    public static PseudoOpsKind cmpps;
    public static PseudoOpsKind vcmpps;
    public static PseudoOpsKind cmppd;
    public static PseudoOpsKind vcmppd;
    public static PseudoOpsKind cmpss;
    public static PseudoOpsKind vcmpss;
    public static PseudoOpsKind cmpsd;
    public static PseudoOpsKind vcmpsd;
    public static PseudoOpsKind pclmulqdq;
    public static PseudoOpsKind vpclmulqdq;
    public static PseudoOpsKind vpcomb;
    public static PseudoOpsKind vpcomw;
    public static PseudoOpsKind vpcomd;
    public static PseudoOpsKind vpcomq;
    public static PseudoOpsKind vpcomub;
    public static PseudoOpsKind vpcomuw;
    public static PseudoOpsKind vpcomud;
    public static PseudoOpsKind vpcomuq;
    public static PseudoOpsKind vpcmpb;
    public static PseudoOpsKind vpcmpw;
    public static PseudoOpsKind vpcmpd;
    public static PseudoOpsKind vpcmpq;
    public static PseudoOpsKind vpcmpub;
    public static PseudoOpsKind vpcmpuw;
    public static PseudoOpsKind vpcmpud;
    public static PseudoOpsKind vpcmpuq;
    public static PseudoOpsKind vcmpph;
    public static PseudoOpsKind vcmpsh;
    public static PseudoOpsKind vcmpps8;
    public static PseudoOpsKind vcmppd8;
    public static PseudoOpsKind vpcmpd6;
    public static PseudoOpsKind vpcmpud6;
}
internal static class Iced.Intel.FormatterInternal.RegistersTable : object {
    private static int MaxStringLength;
    private static ReadOnlySpan`1<byte> GetRegistersData();
    public static FormatterString[] GetRegisters();
}
public class Iced.Intel.FormatterOperandOptions : ValueType {
    private UInt32 flags;
    public bool BranchSize { get; public set; }
    public bool RipRelativeAddresses { get; public set; }
    public MemorySizeOptions MemorySizeOptions { get; public set; }
    internal FormatterOperandOptions(Flags flags);
    internal FormatterOperandOptions(MemorySizeOptions options);
    [IsReadOnlyAttribute]
public bool get_BranchSize();
    public void set_BranchSize(bool value);
    [IsReadOnlyAttribute]
public bool get_RipRelativeAddresses();
    public void set_RipRelativeAddresses(bool value);
    [IsReadOnlyAttribute]
public MemorySizeOptions get_MemorySizeOptions();
    public void set_MemorySizeOptions(MemorySizeOptions value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Iced.Intel.FormatterOptions : object {
    private Flags1 flags1;
    private Flags2 flags2;
    [CompilerGeneratedAttribute]
private int <FirstOperandCharIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TabSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HexPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HexSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HexDigitGroupSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecimalPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecimalSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DecimalDigitGroupSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OctalPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OctalSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OctalDigitGroupSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinaryPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinarySuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BinaryDigitGroupSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DigitSeparator>k__BackingField;
    private NumberBase numberBase;
    private MemorySizeOptions memorySizeOptions;
    private CC_b cc_b;
    private CC_ae cc_ae;
    private CC_e cc_e;
    private CC_ne cc_ne;
    private CC_be cc_be;
    private CC_a cc_a;
    private CC_p cc_p;
    private CC_np cc_np;
    private CC_l cc_l;
    private CC_ge cc_ge;
    private CC_le cc_le;
    private CC_g cc_g;
    public bool UppercasePrefixes { get; public set; }
    public bool UppercaseMnemonics { get; public set; }
    public bool UppercaseRegisters { get; public set; }
    public bool UppercaseKeywords { get; public set; }
    public bool UppercaseDecorators { get; public set; }
    public bool UppercaseAll { get; public set; }
    public int FirstOperandCharIndex { get; public set; }
    public int TabSize { get; public set; }
    public bool SpaceAfterOperandSeparator { get; public set; }
    public bool SpaceAfterMemoryBracket { get; public set; }
    public bool SpaceBetweenMemoryAddOperators { get; public set; }
    public bool SpaceBetweenMemoryMulOperators { get; public set; }
    public bool ScaleBeforeIndex { get; public set; }
    public bool AlwaysShowScale { get; public set; }
    public bool AlwaysShowSegmentRegister { get; public set; }
    public bool ShowZeroDisplacements { get; public set; }
    public string HexPrefix { get; public set; }
    public string HexSuffix { get; public set; }
    public int HexDigitGroupSize { get; public set; }
    public string DecimalPrefix { get; public set; }
    public string DecimalSuffix { get; public set; }
    public int DecimalDigitGroupSize { get; public set; }
    public string OctalPrefix { get; public set; }
    public string OctalSuffix { get; public set; }
    public int OctalDigitGroupSize { get; public set; }
    public string BinaryPrefix { get; public set; }
    public string BinarySuffix { get; public set; }
    public int BinaryDigitGroupSize { get; public set; }
    public string DigitSeparator { get; public set; }
    public bool LeadingZeros { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool LeadingZeroes { get; public set; }
    public bool UppercaseHex { get; public set; }
    public bool SmallHexNumbersInDecimal { get; public set; }
    public bool AddLeadingZeroToHexNumbers { get; public set; }
    public NumberBase NumberBase { get; public set; }
    public bool BranchLeadingZeros { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool BranchLeadingZeroes { get; public set; }
    public bool SignedImmediateOperands { get; public set; }
    public bool SignedMemoryDisplacements { get; public set; }
    public bool DisplacementLeadingZeros { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool DisplacementLeadingZeroes { get; public set; }
    public MemorySizeOptions MemorySizeOptions { get; public set; }
    public bool RipRelativeAddresses { get; public set; }
    public bool ShowBranchSize { get; public set; }
    public bool UsePseudoOps { get; public set; }
    public bool ShowSymbolAddress { get; public set; }
    public bool GasNakedRegisters { get; public set; }
    public bool GasShowMnemonicSizeSuffix { get; public set; }
    public bool GasSpaceAfterMemoryOperandComma { get; public set; }
    public bool MasmAddDsPrefix32 { get; public set; }
    public bool MasmSymbolDisplInBrackets { get; public set; }
    public bool MasmDisplInBrackets { get; public set; }
    public bool NasmShowSignExtendedImmediateSize { get; public set; }
    public bool PreferST0 { get; public set; }
    public bool ShowUselessPrefixes { get; public set; }
    public CC_b CC_b { get; public set; }
    public CC_ae CC_ae { get; public set; }
    public CC_e CC_e { get; public set; }
    public CC_ne CC_ne { get; public set; }
    public CC_be CC_be { get; public set; }
    public CC_a CC_a { get; public set; }
    public CC_p CC_p { get; public set; }
    public CC_np CC_np { get; public set; }
    public CC_l CC_l { get; public set; }
    public CC_ge CC_ge { get; public set; }
    public CC_le CC_le { get; public set; }
    public CC_g CC_g { get; public set; }
    public bool get_UppercasePrefixes();
    public void set_UppercasePrefixes(bool value);
    public bool get_UppercaseMnemonics();
    public void set_UppercaseMnemonics(bool value);
    public bool get_UppercaseRegisters();
    public void set_UppercaseRegisters(bool value);
    public bool get_UppercaseKeywords();
    public void set_UppercaseKeywords(bool value);
    public bool get_UppercaseDecorators();
    public void set_UppercaseDecorators(bool value);
    public bool get_UppercaseAll();
    public void set_UppercaseAll(bool value);
    [CompilerGeneratedAttribute]
public int get_FirstOperandCharIndex();
    [CompilerGeneratedAttribute]
public void set_FirstOperandCharIndex(int value);
    [CompilerGeneratedAttribute]
public int get_TabSize();
    [CompilerGeneratedAttribute]
public void set_TabSize(int value);
    public bool get_SpaceAfterOperandSeparator();
    public void set_SpaceAfterOperandSeparator(bool value);
    public bool get_SpaceAfterMemoryBracket();
    public void set_SpaceAfterMemoryBracket(bool value);
    public bool get_SpaceBetweenMemoryAddOperators();
    public void set_SpaceBetweenMemoryAddOperators(bool value);
    public bool get_SpaceBetweenMemoryMulOperators();
    public void set_SpaceBetweenMemoryMulOperators(bool value);
    public bool get_ScaleBeforeIndex();
    public void set_ScaleBeforeIndex(bool value);
    public bool get_AlwaysShowScale();
    public void set_AlwaysShowScale(bool value);
    public bool get_AlwaysShowSegmentRegister();
    public void set_AlwaysShowSegmentRegister(bool value);
    public bool get_ShowZeroDisplacements();
    public void set_ShowZeroDisplacements(bool value);
    [CompilerGeneratedAttribute]
public string get_HexPrefix();
    [CompilerGeneratedAttribute]
public void set_HexPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_HexSuffix();
    [CompilerGeneratedAttribute]
public void set_HexSuffix(string value);
    [CompilerGeneratedAttribute]
public int get_HexDigitGroupSize();
    [CompilerGeneratedAttribute]
public void set_HexDigitGroupSize(int value);
    [CompilerGeneratedAttribute]
public string get_DecimalPrefix();
    [CompilerGeneratedAttribute]
public void set_DecimalPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_DecimalSuffix();
    [CompilerGeneratedAttribute]
public void set_DecimalSuffix(string value);
    [CompilerGeneratedAttribute]
public int get_DecimalDigitGroupSize();
    [CompilerGeneratedAttribute]
public void set_DecimalDigitGroupSize(int value);
    [CompilerGeneratedAttribute]
public string get_OctalPrefix();
    [CompilerGeneratedAttribute]
public void set_OctalPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_OctalSuffix();
    [CompilerGeneratedAttribute]
public void set_OctalSuffix(string value);
    [CompilerGeneratedAttribute]
public int get_OctalDigitGroupSize();
    [CompilerGeneratedAttribute]
public void set_OctalDigitGroupSize(int value);
    [CompilerGeneratedAttribute]
public string get_BinaryPrefix();
    [CompilerGeneratedAttribute]
public void set_BinaryPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_BinarySuffix();
    [CompilerGeneratedAttribute]
public void set_BinarySuffix(string value);
    [CompilerGeneratedAttribute]
public int get_BinaryDigitGroupSize();
    [CompilerGeneratedAttribute]
public void set_BinaryDigitGroupSize(int value);
    [CompilerGeneratedAttribute]
public string get_DigitSeparator();
    [CompilerGeneratedAttribute]
public void set_DigitSeparator(string value);
    public bool get_LeadingZeros();
    public void set_LeadingZeros(bool value);
    public bool get_LeadingZeroes();
    public void set_LeadingZeroes(bool value);
    public bool get_UppercaseHex();
    public void set_UppercaseHex(bool value);
    public bool get_SmallHexNumbersInDecimal();
    public void set_SmallHexNumbersInDecimal(bool value);
    public bool get_AddLeadingZeroToHexNumbers();
    public void set_AddLeadingZeroToHexNumbers(bool value);
    public NumberBase get_NumberBase();
    public void set_NumberBase(NumberBase value);
    public bool get_BranchLeadingZeros();
    public void set_BranchLeadingZeros(bool value);
    public bool get_BranchLeadingZeroes();
    public void set_BranchLeadingZeroes(bool value);
    public bool get_SignedImmediateOperands();
    public void set_SignedImmediateOperands(bool value);
    public bool get_SignedMemoryDisplacements();
    public void set_SignedMemoryDisplacements(bool value);
    public bool get_DisplacementLeadingZeros();
    public void set_DisplacementLeadingZeros(bool value);
    public bool get_DisplacementLeadingZeroes();
    public void set_DisplacementLeadingZeroes(bool value);
    public MemorySizeOptions get_MemorySizeOptions();
    public void set_MemorySizeOptions(MemorySizeOptions value);
    public bool get_RipRelativeAddresses();
    public void set_RipRelativeAddresses(bool value);
    public bool get_ShowBranchSize();
    public void set_ShowBranchSize(bool value);
    public bool get_UsePseudoOps();
    public void set_UsePseudoOps(bool value);
    public bool get_ShowSymbolAddress();
    public void set_ShowSymbolAddress(bool value);
    public bool get_GasNakedRegisters();
    public void set_GasNakedRegisters(bool value);
    public bool get_GasShowMnemonicSizeSuffix();
    public void set_GasShowMnemonicSizeSuffix(bool value);
    public bool get_GasSpaceAfterMemoryOperandComma();
    public void set_GasSpaceAfterMemoryOperandComma(bool value);
    public bool get_MasmAddDsPrefix32();
    public void set_MasmAddDsPrefix32(bool value);
    public bool get_MasmSymbolDisplInBrackets();
    public void set_MasmSymbolDisplInBrackets(bool value);
    public bool get_MasmDisplInBrackets();
    public void set_MasmDisplInBrackets(bool value);
    public bool get_NasmShowSignExtendedImmediateSize();
    public void set_NasmShowSignExtendedImmediateSize(bool value);
    public bool get_PreferST0();
    public void set_PreferST0(bool value);
    public bool get_ShowUselessPrefixes();
    public void set_ShowUselessPrefixes(bool value);
    public CC_b get_CC_b();
    public void set_CC_b(CC_b value);
    public CC_ae get_CC_ae();
    public void set_CC_ae(CC_ae value);
    public CC_e get_CC_e();
    public void set_CC_e(CC_e value);
    public CC_ne get_CC_ne();
    public void set_CC_ne(CC_ne value);
    public CC_be get_CC_be();
    public void set_CC_be(CC_be value);
    public CC_a get_CC_a();
    public void set_CC_a(CC_a value);
    public CC_p get_CC_p();
    public void set_CC_p(CC_p value);
    public CC_np get_CC_np();
    public void set_CC_np(CC_np value);
    public CC_l get_CC_l();
    public void set_CC_l(CC_l value);
    public CC_ge get_CC_ge();
    public void set_CC_ge(CC_ge value);
    public CC_le get_CC_le();
    public void set_CC_le(CC_le value);
    public CC_g get_CC_g();
    public void set_CC_g(CC_g value);
    [NullableContextAttribute("1")]
public static FormatterOptions CreateGas();
    [NullableContextAttribute("1")]
public static FormatterOptions CreateIntel();
    [NullableContextAttribute("1")]
public static FormatterOptions CreateMasm();
    [NullableContextAttribute("1")]
public static FormatterOptions CreateNasm();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Iced.Intel.FormatterOutput : object {
    public abstract virtual void Write(string text, FormatterTextKind kind);
    public virtual void WritePrefix(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, string text, PrefixKind prefix);
    public virtual void WriteMnemonic(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, string text);
    public virtual void WriteNumber(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, int instructionOperand, string text, ulong value, NumberKind numberKind, FormatterTextKind kind);
    public virtual void WriteDecorator(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, int instructionOperand, string text, DecoratorKind decorator);
    public virtual void WriteRegister(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, int instructionOperand, string text, Register register);
    public virtual void WriteSymbol(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, int instructionOperand, ulong address, SymbolResult& modreq(System.Runtime.InteropServices.InAttribute) symbol);
    internal void Write(Instruction& instruction, int operand, int instructionOperand, FormatterOptions options, NumberFormatter& numberFormatter, NumberFormattingOptions& numberOptions, ulong address, SymbolResult& symbol, bool showSymbolAddress);
    internal void Write(Instruction& instruction, int operand, int instructionOperand, FormatterOptions options, NumberFormatter& numberFormatter, NumberFormattingOptions& numberOptions, ulong address, SymbolResult& symbol, bool showSymbolAddress, bool writeMinusIfSigned, bool spacesBetweenOp);
}
public enum Iced.Intel.FormatterTextKind : Enum {
    public int value__;
    public static FormatterTextKind Text;
    public static FormatterTextKind Directive;
    public static FormatterTextKind Prefix;
    public static FormatterTextKind Mnemonic;
    public static FormatterTextKind Keyword;
    public static FormatterTextKind Operator;
    public static FormatterTextKind Punctuation;
    public static FormatterTextKind Number;
    public static FormatterTextKind Register;
    public static FormatterTextKind Decorator;
    public static FormatterTextKind SelectorValue;
    public static FormatterTextKind LabelAddress;
    public static FormatterTextKind FunctionAddress;
    public static FormatterTextKind Data;
    public static FormatterTextKind Label;
    public static FormatterTextKind Function;
}
[IsReadOnlyAttribute]
public class Iced.Intel.FpuStackIncrementInfo : ValueType {
    public int Increment;
    public bool Conditional;
    public bool WritesTop;
    public FpuStackIncrementInfo(int increment, bool conditional, bool writesTop);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.GasFormatter : Formatter {
    private static string ImmediateValuePrefix;
    private FormatterOptions options;
    private ISymbolResolver symbolResolver;
    private IFormatterOptionsProvider optionsProvider;
    private FormatterString[] allRegisters;
    private FormatterString[] allRegistersNaked;
    private InstrInfo[] instrInfos;
    private FormatterString[] allMemorySizes;
    private NumberFormatter numberFormatter;
    private FormatterString[] opSizeStrings;
    private FormatterString[] addrSizeStrings;
    private String[] scaleNumbers;
    private FormatterString[] mvexRegMemConsts32;
    private FormatterString[] mvexRegMemConsts64;
    private static FormatterString str_bnd;
    private static FormatterString str_dot_byte;
    private static FormatterString str_lock;
    private static FormatterString str_notrack;
    private static FormatterString str_pn;
    private static FormatterString str_pt;
    private static FormatterString str_rep;
    private static FormatterString[] str_repe;
    private static FormatterString[] str_repne;
    private static FormatterString str_rex_w;
    private static FormatterString str_rn_sae;
    private static FormatterString str_rd_sae;
    private static FormatterString str_ru_sae;
    private static FormatterString str_rz_sae;
    private static FormatterString str_sae;
    private static FormatterString str_rn;
    private static FormatterString str_rd;
    private static FormatterString str_ru;
    private static FormatterString str_rz;
    private static FormatterString str_xacquire;
    private static FormatterString str_xrelease;
    private static FormatterString str_z;
    private static FormatterString[] s_opSizeStrings;
    private static FormatterString[] s_addrSizeStrings;
    private static String[] s_scaleNumbers;
    private static FormatterString[] s_mvexRegMemConsts32;
    private static FormatterString[] s_mvexRegMemConsts64;
    private static FormatterString str_eh;
    public FormatterOptions Options { get; }
    private FormatterString[] AllRegisters { get; }
    [NullableContextAttribute("2")]
public GasFormatter(ISymbolResolver symbolResolver, IFormatterOptionsProvider optionsProvider);
    [NullableContextAttribute("2")]
public GasFormatter(FormatterOptions options, ISymbolResolver symbolResolver, IFormatterOptionsProvider optionsProvider);
    private static GasFormatter();
    public virtual FormatterOptions get_Options();
    private FormatterString[] get_AllRegisters();
    public virtual void FormatMnemonic(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, FormatMnemonicOptions options);
    public virtual int GetOperandCount(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
    public virtual bool TryGetOpAccess(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, OpAccess& access);
    public virtual int GetInstructionOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual int GetFormatterOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int instructionOperand);
    public virtual void FormatOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, int operand);
    public virtual void FormatOperandSeparator(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public virtual void FormatAllOperands(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public virtual void Format(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    private void FormatMnemonic(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo, Int32& column, FormatMnemonicOptions mnemonicOptions);
    private void FormatBranchHint(FormatterOutput output, Int32& column, FormatterString brHint);
    private bool ShowSegmentPrefix(Instruction& instruction, InstrOpInfo& opInfo);
    private void FormatPrefix(FormatterOutput output, Instruction& instruction, Int32& column, FormatterString prefix, PrefixKind prefixKind, Boolean& needSpace);
    private void FormatOperands(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo);
    private void FormatOperand(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo, int operand);
    private void FormatDecorator(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, FormatterString text, DecoratorKind decorator);
    private string ToRegisterString(Register reg);
    private void FormatRegister(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, Register reg);
    private void FormatMemory(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, Register segReg, Register baseReg, Register indexReg, int scale, int displSize, long displ, int addrSize);
    public virtual string Format(Register register);
    public virtual string FormatInt8(sbyte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt16(short value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt32(int value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt64(long value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt8(byte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt16(ushort value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt32(UInt32 value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt64(ulong value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
}
internal enum Iced.Intel.GasFormatterInternal.CtorKind : Enum {
    public int value__;
    public static CtorKind Previous;
    public static CtorKind Normal_1;
    public static CtorKind Normal_2a;
    public static CtorKind Normal_2b;
    public static CtorKind Normal_2c;
    public static CtorKind Normal_3;
    public static CtorKind AamAad;
    public static CtorKind asz;
    public static CtorKind bnd;
    public static CtorKind ST_STi;
    public static CtorKind DeclareData;
    public static CtorKind er_2;
    public static CtorKind er_4;
    public static CtorKind far;
    public static CtorKind imul;
    public static CtorKind maskmovq;
    public static CtorKind movabs;
    public static CtorKind nop;
    public static CtorKind OpSize;
    public static CtorKind OpSize2_bnd;
    public static CtorKind OpSize3;
    public static CtorKind os;
    public static CtorKind STi_ST;
    public static CtorKind sae;
    public static CtorKind CC_1;
    public static CtorKind CC_2;
    public static CtorKind CC_3;
    public static CtorKind os_jcc_1;
    public static CtorKind os_jcc_2;
    public static CtorKind os_jcc_3;
    public static CtorKind os_loopcc;
    public static CtorKind os_loop;
    public static CtorKind os_mem;
    public static CtorKind Reg16;
    public static CtorKind os_mem2;
    public static CtorKind os2_3;
    public static CtorKind os2_4;
    public static CtorKind STIG1;
    public static CtorKind pblendvb;
    public static CtorKind pclmulqdq;
    public static CtorKind pops;
    public static CtorKind mem16;
    public static CtorKind Reg32;
}
internal abstract class Iced.Intel.GasFormatterInternal.InstrInfo : object {
    public static int OpAccess_INVALID;
    public static int OpAccess_None;
    public static int OpAccess_Read;
    public static int OpAccess_CondRead;
    public static int OpAccess_Write;
    public static int OpAccess_CondWrite;
    public static int OpAccess_ReadWrite;
    public static int OpAccess_ReadCondWrite;
    public static int OpAccess_NoMemAccess;
    public abstract virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    protected static int GetBitness(CodeSize codeSize);
    protected static FormatterString GetMnemonic(FormatterOptions options, Instruction& instruction, FormatterString mnemonic, FormatterString mnemonic_suffix, InstrOpInfoFlags flags);
}
internal static class Iced.Intel.GasFormatterInternal.InstrInfos : object {
    public static InstrInfo[] AllInfos;
    private static InstrInfos();
    private static string AddSuffix(string s, Char[] ca);
    private static string AddPrefix(string s, Char[] ca);
    private static InstrInfo[] ReadInfos();
    private static ReadOnlySpan`1<byte> GetSerializedInstrInfos();
}
internal class Iced.Intel.GasFormatterInternal.InstrOpInfo : ValueType {
    internal static int TEST_RegisterBits;
    public FormatterString Mnemonic;
    public InstrOpInfoFlags Flags;
    public byte OpCount;
    public InstrOpKind Op0Kind;
    public InstrOpKind Op1Kind;
    public InstrOpKind Op2Kind;
    public InstrOpKind Op3Kind;
    public InstrOpKind Op4Kind;
    public byte Op0Register;
    public byte Op1Register;
    public byte Op2Register;
    public byte Op3Register;
    public byte Op4Register;
    public sbyte Op0Index;
    public sbyte Op1Index;
    public sbyte Op2Index;
    public sbyte Op3Index;
    public sbyte Op4Index;
    public InstrOpInfo(FormatterString mnemonic, Instruction& instruction, InstrOpInfoFlags flags);
    [IsReadOnlyAttribute]
public Register GetOpRegister(int operand);
    [IsReadOnlyAttribute]
public InstrOpKind GetOpKind(int operand);
    [IsReadOnlyAttribute]
public int GetInstructionIndex(int operand);
    [IsReadOnlyAttribute]
public bool TryGetOpAccess(int operand, OpAccess& access);
    [IsReadOnlyAttribute]
public int GetOperandIndex(int instructionOperand);
}
[FlagsAttribute]
internal enum Iced.Intel.GasFormatterInternal.InstrOpInfoFlags : Enum {
    public ushort value__;
    public static InstrOpInfoFlags None;
    public static InstrOpInfoFlags MnemonicSuffixIfMem;
    public static InstrOpInfoFlags SizeOverrideMask;
    public static InstrOpInfoFlags OpSizeShift;
    public static InstrOpInfoFlags OpSize16;
    public static InstrOpInfoFlags OpSize32;
    public static InstrOpInfoFlags OpSize64;
    public static InstrOpInfoFlags AddrSizeShift;
    public static InstrOpInfoFlags AddrSize16;
    public static InstrOpInfoFlags AddrSize32;
    public static InstrOpInfoFlags AddrSize64;
    public static InstrOpInfoFlags IndirectOperand;
    public static InstrOpInfoFlags OpSizeIsByteDirective;
    public static InstrOpInfoFlags KeepOperandOrder;
    public static InstrOpInfoFlags JccNotTaken;
    public static InstrOpInfoFlags JccTaken;
    public static InstrOpInfoFlags BndPrefix;
    public static InstrOpInfoFlags IgnoreIndexReg;
    public static InstrOpInfoFlags MnemonicIsDirective;
}
internal enum Iced.Intel.GasFormatterInternal.InstrOpKind : Enum {
    public byte value__;
    public static InstrOpKind Register;
    public static InstrOpKind NearBranch16;
    public static InstrOpKind NearBranch32;
    public static InstrOpKind NearBranch64;
    public static InstrOpKind FarBranch16;
    public static InstrOpKind FarBranch32;
    public static InstrOpKind Immediate8;
    public static InstrOpKind Immediate8_2nd;
    public static InstrOpKind Immediate16;
    public static InstrOpKind Immediate32;
    public static InstrOpKind Immediate64;
    public static InstrOpKind Immediate8to16;
    public static InstrOpKind Immediate8to32;
    public static InstrOpKind Immediate8to64;
    public static InstrOpKind Immediate32to64;
    public static InstrOpKind MemorySegSI;
    public static InstrOpKind MemorySegESI;
    public static InstrOpKind MemorySegRSI;
    public static InstrOpKind MemorySegDI;
    public static InstrOpKind MemorySegEDI;
    public static InstrOpKind MemorySegRDI;
    public static InstrOpKind MemoryESDI;
    public static InstrOpKind MemoryESEDI;
    public static InstrOpKind MemoryESRDI;
    public static InstrOpKind Memory;
    public static InstrOpKind Sae;
    public static InstrOpKind RnSae;
    public static InstrOpKind RdSae;
    public static InstrOpKind RuSae;
    public static InstrOpKind RzSae;
    public static InstrOpKind Rn;
    public static InstrOpKind Rd;
    public static InstrOpKind Ru;
    public static InstrOpKind Rz;
    public static InstrOpKind DeclareByte;
    public static InstrOpKind DeclareWord;
    public static InstrOpKind DeclareDword;
    public static InstrOpKind DeclareQword;
}
internal static class Iced.Intel.GasFormatterInternal.MemorySizes : object {
    public static FormatterString[] AllMemorySizes;
    private static MemorySizes();
    private static FormatterString[] GetMemorySizes();
}
internal static class Iced.Intel.GasFormatterInternal.Registers : object {
    public static Register Register_ST;
    public static FormatterString[] AllRegistersNaked;
    public static FormatterString[] AllRegisters;
    private static Registers();
    private static FormatterString[] GetRegistersWithPrefix();
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo(string mnemonic);
    public SimpleInstrInfo(string mnemonic, InstrOpInfoFlags flags);
    public SimpleInstrInfo(string mnemonic, string mnemonic_suffix);
    public SimpleInstrInfo(string mnemonic, string mnemonic_suffix, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_AamAad : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_AamAad(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_as : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_as(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_bnd : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_bnd(string mnemonic, string mnemonic_suffix, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_cc : InstrInfo {
    private int ccIndex;
    private FormatterString[] mnemonics;
    private FormatterString[] mnemonics_suffix;
    public SimpleInstrInfo_cc(int ccIndex, String[] mnemonics, String[] mnemonics_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_DeclareData : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpKind opKind;
    public SimpleInstrInfo_DeclareData(Code code, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_er : InstrInfo {
    private int erIndex;
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_er(int erIndex, string mnemonic);
    public SimpleInstrInfo_er(int erIndex, string mnemonic, string mnemonic_suffix, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    internal static void MoveOperands(InstrOpInfo& info, int index, InstrOpKind newOpKind);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_far : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    public SimpleInstrInfo_far(int bitness, string mnemonic, string mnemonic_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_imul : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    public SimpleInstrInfo_imul(string mnemonic, string mnemonic_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_maskmovq : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_maskmovq(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_mem16 : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString mnemonic_reg_suffix;
    private FormatterString mnemonic_mem_suffix;
    public SimpleInstrInfo_mem16(string mnemonic, string mnemonic_reg_suffix, string mnemonic_mem_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_movabs : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    private FormatterString mnemonic64;
    private FormatterString mnemonic_suffix64;
    public SimpleInstrInfo_movabs(string mnemonic, string mnemonic_suffix, string mnemonic64, string mnemonic_suffix64);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_nop : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private Register register;
    private static FormatterString str_xchg;
    private static FormatterString str_xchgw;
    private static FormatterString str_xchgl;
    private static FormatterString str_xchgq;
    public SimpleInstrInfo_nop(int bitness, string mnemonic, Register register);
    private static SimpleInstrInfo_nop();
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_OpSize : InstrInfo {
    private CodeSize codeSize;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_OpSize(CodeSize codeSize, string mnemonic, string mnemonic16, string mnemonic32, string mnemonic64);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_OpSize2_bnd : InstrInfo {
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_OpSize2_bnd(string mnemonic, string mnemonic16, string mnemonic32, string mnemonic64);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_OpSize3 : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    public SimpleInstrInfo_OpSize3(int bitness, string mnemonic, string mnemonic_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_os : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private bool canUseBnd;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_os(int bitness, string mnemonic, bool canUseBnd, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_os_jcc : InstrInfo {
    private int bitness;
    private int ccIndex;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_os_jcc(int bitness, int ccIndex, String[] mnemonics);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_os_loop : InstrInfo {
    private int bitness;
    private int regSize;
    private int ccIndex;
    private FormatterString[] mnemonics;
    private FormatterString[] mnemonics_suffix;
    public SimpleInstrInfo_os_loop(int bitness, int regSize, int ccIndex, String[] mnemonics, String[] mnemonics_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_os_mem : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    public SimpleInstrInfo_os_mem(int bitness, string mnemonic, string mnemonic_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_os_mem2 : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    public SimpleInstrInfo_os_mem2(int bitness, string mnemonic, string mnemonic_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_os2 : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    private bool canUseBnd;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_os2(int bitness, string mnemonic, string mnemonic_suffix, bool canUseBnd, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_pblendvb : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_pblendvb(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_pclmulqdq : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString[] pseudo_ops;
    public SimpleInstrInfo_pclmulqdq(string mnemonic, FormatterString[] pseudo_ops);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_pops : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString[] pseudo_ops;
    private bool canUseSae;
    public SimpleInstrInfo_pops(string mnemonic, FormatterString[] pseudo_ops, bool canUseSae);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    internal static void RemoveFirstImm8Operand(InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_Reg16 : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString mnemonic_suffix;
    public SimpleInstrInfo_Reg16(string mnemonic, string mnemonic_suffix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_Reg32 : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_Reg32(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_sae : InstrInfo {
    private int saeIndex;
    private FormatterString mnemonic;
    public SimpleInstrInfo_sae(int saeIndex, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_ST_STi : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_ST_STi(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_STi_ST : InstrInfo {
    private FormatterString mnemonic;
    private bool pseudoOp;
    public SimpleInstrInfo_STi_ST(string mnemonic, bool pseudoOp);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.GasFormatterInternal.SimpleInstrInfo_STIG1 : InstrInfo {
    private FormatterString mnemonic;
    private bool pseudoOp;
    public SimpleInstrInfo_STIG1(string mnemonic, bool pseudoOp);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal enum Iced.Intel.GasFormatterInternal.SizeOverride : Enum {
    public int value__;
    public static SizeOverride None;
    public static SizeOverride Size16;
    public static SizeOverride Size32;
    public static SizeOverride Size64;
}
internal static class Iced.Intel.HexUtils : object {
    public static Byte[] ToByteArray(string hexData);
    private static int TryParseHexChar(char c);
}
internal static class Iced.Intel.IcedConstants : object {
    internal static int MaxOpCount;
    internal static int MaxInstructionLength;
    internal static int RegisterBits;
    internal static Register VMM_first;
    internal static Register VMM_last;
    internal static int VMM_count;
    internal static Register XMM_last;
    internal static Register YMM_last;
    internal static Register ZMM_last;
    internal static Register TMM_last;
    internal static int MaxCpuidFeatureInternalValues;
    internal static MemorySize FirstBroadcastMemorySize;
    internal static UInt32 MvexStart;
    internal static UInt32 MvexLength;
    internal static int CC_a_EnumCount;
    internal static int CC_ae_EnumCount;
    internal static int CC_b_EnumCount;
    internal static int CC_be_EnumCount;
    internal static int CC_e_EnumCount;
    internal static int CC_g_EnumCount;
    internal static int CC_ge_EnumCount;
    internal static int CC_l_EnumCount;
    internal static int CC_le_EnumCount;
    internal static int CC_ne_EnumCount;
    internal static int CC_np_EnumCount;
    internal static int CC_p_EnumCount;
    internal static int CodeEnumCount;
    internal static int CodeSizeEnumCount;
    internal static int ConditionCodeEnumCount;
    internal static int CpuidFeatureEnumCount;
    internal static int DecoderErrorEnumCount;
    internal static int DecoratorKindEnumCount;
    internal static int EncodingKindEnumCount;
    internal static int FlowControlEnumCount;
    internal static int FormatterSyntaxEnumCount;
    internal static int FormatterTextKindEnumCount;
    internal static int MandatoryPrefixEnumCount;
    internal static int MemorySizeEnumCount;
    internal static int MemorySizeOptionsEnumCount;
    internal static int MnemonicEnumCount;
    internal static int MvexConvFnEnumCount;
    internal static int MvexEHBitEnumCount;
    internal static int MvexRegMemConvEnumCount;
    internal static int MvexTupleTypeLutKindEnumCount;
    internal static int NumberBaseEnumCount;
    internal static int NumberKindEnumCount;
    internal static int OpAccessEnumCount;
    internal static int OpCodeOperandKindEnumCount;
    internal static int OpCodeTableKindEnumCount;
    internal static int OpKindEnumCount;
    internal static int PrefixKindEnumCount;
    internal static int RegisterEnumCount;
    internal static int RelocKindEnumCount;
    internal static int RepPrefixKindEnumCount;
    internal static int RoundingControlEnumCount;
    internal static int TupleTypeEnumCount;
    public static bool IsMvex(Code code);
}
public static class Iced.Intel.IcedFeatures : object {
    public static bool HasGasFormatter { get; }
    public static bool HasIntelFormatter { get; }
    public static bool HasMasmFormatter { get; }
    public static bool HasNasmFormatter { get; }
    public static bool HasFastFormatter { get; }
    public static bool HasDecoder { get; }
    public static bool HasEncoder { get; }
    public static bool HasBlockEncoder { get; }
    public static bool HasOpCodeInfo { get; }
    public static bool HasInstructionInfo { get; }
    public static bool get_HasGasFormatter();
    public static bool get_HasIntelFormatter();
    public static bool get_HasMasmFormatter();
    public static bool get_HasNasmFormatter();
    public static bool get_HasFastFormatter();
    public static bool get_HasDecoder();
    public static bool get_HasEncoder();
    public static bool get_HasBlockEncoder();
    public static bool get_HasOpCodeInfo();
    public static bool get_HasInstructionInfo();
    public static void Initialize();
}
public interface Iced.Intel.IFormatterOptionsProvider {
    public abstract virtual void GetOperandOptions(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, int instructionOperand, FormatterOperandOptions& options, NumberFormattingOptions& numberOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.Instruction : ValueType {
    internal static int TOTAL_SIZE;
    private ulong nextRip;
    private ulong memDispl;
    private UInt32 flags1;
    private UInt32 immediate;
    private ushort code;
    private byte memBaseReg;
    private byte memIndexReg;
    private byte reg0;
    private byte reg1;
    private byte reg2;
    private byte reg3;
    private byte opKind0;
    private byte opKind1;
    private byte opKind2;
    private byte opKind3;
    private byte scale;
    private byte displSize;
    private byte len;
    private byte pad;
    public ushort IP16 { get; public set; }
    public UInt32 IP32 { get; public set; }
    public ulong IP { get; public set; }
    public ushort NextIP16 { get; public set; }
    public UInt32 NextIP32 { get; public set; }
    public ulong NextIP { get; public set; }
    public CodeSize CodeSize { get; public set; }
    unknown CodeSize InternalCodeSize {internal set; }
    public bool IsInvalid { get; }
    public Code Code { get; public set; }
    public Mnemonic Mnemonic { get; }
    public int OpCount { get; }
    public int Length { get; public set; }
    internal bool Internal_HasRepeOrRepnePrefix { get; }
    internal UInt32 HasAnyOf_Lock_Rep_Repne_Prefix { get; }
    public bool HasXacquirePrefix { get; public set; }
    public bool HasXreleasePrefix { get; public set; }
    public bool HasRepPrefix { get; public set; }
    public bool HasRepePrefix { get; public set; }
    public bool HasRepnePrefix { get; public set; }
    public bool HasLockPrefix { get; public set; }
    public OpKind Op0Kind { get; public set; }
    internal bool Internal_Op0IsNotReg_or_Op1IsNotReg { get; }
    public OpKind Op1Kind { get; public set; }
    public OpKind Op2Kind { get; public set; }
    public OpKind Op3Kind { get; public set; }
    public OpKind Op4Kind { get; public set; }
    public bool HasSegmentPrefix { get; }
    public Register SegmentPrefix { get; public set; }
    public Register MemorySegment { get; }
    public int MemoryDisplSize { get; public set; }
    public bool IsBroadcast { get; public set; }
    public bool IsMvexEvictionHint { get; public set; }
    public MvexRegMemConv MvexRegMemConv { get; public set; }
    public MemorySize MemorySize { get; }
    public int MemoryIndexScale { get; public set; }
    internal int InternalMemoryIndexScale { get; internal set; }
    public UInt32 MemoryDisplacement32 { get; public set; }
    public ulong MemoryDisplacement64 { get; public set; }
    public byte Immediate8 { get; public set; }
    unknown UInt32 InternalImmediate8 {internal set; }
    public byte Immediate8_2nd { get; public set; }
    unknown UInt32 InternalImmediate8_2nd {internal set; }
    public ushort Immediate16 { get; public set; }
    unknown UInt32 InternalImmediate16 {internal set; }
    public UInt32 Immediate32 { get; public set; }
    public ulong Immediate64 { get; public set; }
    unknown UInt32 InternalImmediate64_lo {internal set; }
    unknown UInt32 InternalImmediate64_hi {internal set; }
    public short Immediate8to16 { get; public set; }
    public int Immediate8to32 { get; public set; }
    public long Immediate8to64 { get; public set; }
    public long Immediate32to64 { get; public set; }
    public ushort NearBranch16 { get; public set; }
    unknown UInt32 InternalNearBranch16 {internal set; }
    public UInt32 NearBranch32 { get; public set; }
    public ulong NearBranch64 { get; public set; }
    public ulong NearBranchTarget { get; }
    public ushort FarBranch16 { get; public set; }
    unknown UInt32 InternalFarBranch16 {internal set; }
    public UInt32 FarBranch32 { get; public set; }
    public ushort FarBranchSelector { get; public set; }
    unknown UInt32 InternalFarBranchSelector {internal set; }
    public Register MemoryBase { get; public set; }
    unknown Register InternalMemoryBase {internal set; }
    public Register MemoryIndex { get; public set; }
    unknown Register InternalMemoryIndex {internal set; }
    public Register Op0Register { get; public set; }
    unknown Register InternalOp0Register {internal set; }
    public Register Op1Register { get; public set; }
    unknown Register InternalOp1Register {internal set; }
    public Register Op2Register { get; public set; }
    unknown Register InternalOp2Register {internal set; }
    public Register Op3Register { get; public set; }
    unknown Register InternalOp3Register {internal set; }
    public Register Op4Register { get; public set; }
    public Register OpMask { get; public set; }
    internal UInt32 InternalOpMask { get; internal set; }
    public bool HasOpMask { get; }
    internal bool HasOpMask_or_ZeroingMasking { get; }
    public bool ZeroingMasking { get; public set; }
    public bool MergingMasking { get; public set; }
    public RoundingControl RoundingControl { get; public set; }
    unknown UInt32 InternalRoundingControl {internal set; }
    internal bool HasRoundingControlOrSae { get; }
    public int DeclareDataCount { get; public set; }
    unknown UInt32 InternalDeclareDataCount {internal set; }
    public bool IsVsib { get; }
    public bool IsVsib32 { get; }
    public bool IsVsib64 { get; }
    public bool SuppressAllExceptions { get; public set; }
    public bool IsIPRelativeMemoryOperand { get; }
    public ulong IPRelativeMemoryAddress { get; }
    public OpCodeInfo OpCode { get; }
    public int StackPointerIncrement { get; }
    public EncodingKind Encoding { get; }
    public CpuidFeature[] CpuidFeatures { get; }
    public FlowControl FlowControl { get; }
    public bool IsPrivileged { get; }
    public bool IsStackInstruction { get; }
    public bool IsSaveRestoreInstruction { get; }
    public RflagsBits RflagsRead { get; }
    public RflagsBits RflagsWritten { get; }
    public RflagsBits RflagsCleared { get; }
    public RflagsBits RflagsSet { get; }
    public RflagsBits RflagsUndefined { get; }
    public RflagsBits RflagsModified { get; }
    public bool IsJccShortOrNear { get; }
    public bool IsJccNear { get; }
    public bool IsJccShort { get; }
    public bool IsJmpShort { get; }
    public bool IsJmpNear { get; }
    public bool IsJmpShortOrNear { get; }
    public bool IsJmpFar { get; }
    public bool IsCallNear { get; }
    public bool IsCallFar { get; }
    public bool IsJmpNearIndirect { get; }
    public bool IsJmpFarIndirect { get; }
    public bool IsCallNearIndirect { get; }
    public bool IsCallFarIndirect { get; }
    public bool IsJkccShortOrNear { get; }
    public bool IsJkccNear { get; }
    public bool IsJkccShort { get; }
    public bool IsJcxShort { get; }
    public bool IsLoopcc { get; }
    public bool IsLoop { get; }
    public ConditionCode ConditionCode { get; }
    public bool IsStringInstruction { get; }
    private static void InitializeSignedImmediate(Instruction& instruction, int operand, long immediate);
    private static void InitializeUnsignedImmediate(Instruction& instruction, int operand, ulong immediate);
    private static OpKind GetImmediateOpKind(Code code, int operand);
    private static OpKind GetNearBranchOpKind(Code code, int operand);
    private static OpKind GetFarBranchOpKind(Code code, int operand);
    private static Instruction CreateString_Reg_SegRSI(Code code, int addressSize, Register register, Register segmentPrefix, RepPrefixKind repPrefix);
    private static Instruction CreateString_Reg_ESRDI(Code code, int addressSize, Register register, RepPrefixKind repPrefix);
    private static Instruction CreateString_ESRDI_Reg(Code code, int addressSize, Register register, RepPrefixKind repPrefix);
    private static Instruction CreateString_SegRSI_ESRDI(Code code, int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    private static Instruction CreateString_ESRDI_SegRSI(Code code, int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    private static Instruction CreateMaskmov(Code code, int addressSize, Register register1, Register register2, Register segmentPrefix);
    private static void InitMemoryOperand(Instruction& instruction, MemoryOperand& memory);
    public static Instruction Create(Code code);
    public static Instruction Create(Code code, Register register);
    public static Instruction Create(Code code, int immediate);
    public static Instruction Create(Code code, UInt32 immediate);
    public static Instruction Create(Code code, MemoryOperand& memory);
    public static Instruction Create(Code code, Register register1, Register register2);
    public static Instruction Create(Code code, Register register, int immediate);
    public static Instruction Create(Code code, Register register, UInt32 immediate);
    public static Instruction Create(Code code, Register register, long immediate);
    public static Instruction Create(Code code, Register register, ulong immediate);
    public static Instruction Create(Code code, Register register, MemoryOperand& memory);
    public static Instruction Create(Code code, int immediate, Register register);
    public static Instruction Create(Code code, UInt32 immediate, Register register);
    public static Instruction Create(Code code, int immediate1, int immediate2);
    public static Instruction Create(Code code, UInt32 immediate1, UInt32 immediate2);
    public static Instruction Create(Code code, MemoryOperand& memory, Register register);
    public static Instruction Create(Code code, MemoryOperand& memory, int immediate);
    public static Instruction Create(Code code, MemoryOperand& memory, UInt32 immediate);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3);
    public static Instruction Create(Code code, Register register1, Register register2, int immediate);
    public static Instruction Create(Code code, Register register1, Register register2, UInt32 immediate);
    public static Instruction Create(Code code, Register register1, Register register2, MemoryOperand& memory);
    public static Instruction Create(Code code, Register register, int immediate1, int immediate2);
    public static Instruction Create(Code code, Register register, UInt32 immediate1, UInt32 immediate2);
    public static Instruction Create(Code code, Register register1, MemoryOperand& memory, Register register2);
    public static Instruction Create(Code code, Register register, MemoryOperand& memory, int immediate);
    public static Instruction Create(Code code, Register register, MemoryOperand& memory, UInt32 immediate);
    public static Instruction Create(Code code, MemoryOperand& memory, Register register1, Register register2);
    public static Instruction Create(Code code, MemoryOperand& memory, Register register, int immediate);
    public static Instruction Create(Code code, MemoryOperand& memory, Register register, UInt32 immediate);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3, Register register4);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3, int immediate);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3, UInt32 immediate);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3, MemoryOperand& memory);
    public static Instruction Create(Code code, Register register1, Register register2, int immediate1, int immediate2);
    public static Instruction Create(Code code, Register register1, Register register2, UInt32 immediate1, UInt32 immediate2);
    public static Instruction Create(Code code, Register register1, Register register2, MemoryOperand& memory, Register register3);
    public static Instruction Create(Code code, Register register1, Register register2, MemoryOperand& memory, int immediate);
    public static Instruction Create(Code code, Register register1, Register register2, MemoryOperand& memory, UInt32 immediate);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3, Register register4, int immediate);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3, Register register4, UInt32 immediate);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3, MemoryOperand& memory, int immediate);
    public static Instruction Create(Code code, Register register1, Register register2, Register register3, MemoryOperand& memory, UInt32 immediate);
    public static Instruction Create(Code code, Register register1, Register register2, MemoryOperand& memory, Register register3, int immediate);
    public static Instruction Create(Code code, Register register1, Register register2, MemoryOperand& memory, Register register3, UInt32 immediate);
    public static Instruction CreateBranch(Code code, ulong target);
    public static Instruction CreateBranch(Code code, ushort selector, UInt32 offset);
    public static Instruction CreateXbegin(int bitness, ulong target);
    public static Instruction CreateOutsb(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepOutsb(int addressSize);
    public static Instruction CreateOutsw(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepOutsw(int addressSize);
    public static Instruction CreateOutsd(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepOutsd(int addressSize);
    public static Instruction CreateLodsb(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepLodsb(int addressSize);
    public static Instruction CreateLodsw(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepLodsw(int addressSize);
    public static Instruction CreateLodsd(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepLodsd(int addressSize);
    public static Instruction CreateLodsq(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepLodsq(int addressSize);
    public static Instruction CreateScasb(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepeScasb(int addressSize);
    public static Instruction CreateRepneScasb(int addressSize);
    public static Instruction CreateScasw(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepeScasw(int addressSize);
    public static Instruction CreateRepneScasw(int addressSize);
    public static Instruction CreateScasd(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepeScasd(int addressSize);
    public static Instruction CreateRepneScasd(int addressSize);
    public static Instruction CreateScasq(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepeScasq(int addressSize);
    public static Instruction CreateRepneScasq(int addressSize);
    public static Instruction CreateInsb(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepInsb(int addressSize);
    public static Instruction CreateInsw(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepInsw(int addressSize);
    public static Instruction CreateInsd(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepInsd(int addressSize);
    public static Instruction CreateStosb(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepStosb(int addressSize);
    public static Instruction CreateStosw(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepStosw(int addressSize);
    public static Instruction CreateStosd(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepStosd(int addressSize);
    public static Instruction CreateStosq(int addressSize, RepPrefixKind repPrefix);
    public static Instruction CreateRepStosq(int addressSize);
    public static Instruction CreateCmpsb(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepeCmpsb(int addressSize);
    public static Instruction CreateRepneCmpsb(int addressSize);
    public static Instruction CreateCmpsw(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepeCmpsw(int addressSize);
    public static Instruction CreateRepneCmpsw(int addressSize);
    public static Instruction CreateCmpsd(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepeCmpsd(int addressSize);
    public static Instruction CreateRepneCmpsd(int addressSize);
    public static Instruction CreateCmpsq(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepeCmpsq(int addressSize);
    public static Instruction CreateRepneCmpsq(int addressSize);
    public static Instruction CreateMovsb(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepMovsb(int addressSize);
    public static Instruction CreateMovsw(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepMovsw(int addressSize);
    public static Instruction CreateMovsd(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepMovsd(int addressSize);
    public static Instruction CreateMovsq(int addressSize, Register segmentPrefix, RepPrefixKind repPrefix);
    public static Instruction CreateRepMovsq(int addressSize);
    public static Instruction CreateMaskmovq(int addressSize, Register register1, Register register2, Register segmentPrefix);
    public static Instruction CreateMaskmovdqu(int addressSize, Register register1, Register register2, Register segmentPrefix);
    public static Instruction CreateVmaskmovdqu(int addressSize, Register register1, Register register2, Register segmentPrefix);
    public static Instruction CreateDeclareByte(byte b0);
    public static Instruction CreateDeclareByte(byte b0, byte b1);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8, byte b9);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8, byte b9, byte b10);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8, byte b9, byte b10, byte b11);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8, byte b9, byte b10, byte b11, byte b12);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8, byte b9, byte b10, byte b11, byte b12, byte b13);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8, byte b9, byte b10, byte b11, byte b12, byte b13, byte b14);
    public static Instruction CreateDeclareByte(byte b0, byte b1, byte b2, byte b3, byte b4, byte b5, byte b6, byte b7, byte b8, byte b9, byte b10, byte b11, byte b12, byte b13, byte b14, byte b15);
    [NullableContextAttribute("0")]
public static Instruction CreateDeclareByte(ReadOnlySpan`1<byte> data);
    public static Instruction CreateDeclareByte(Byte[] data);
    public static Instruction CreateDeclareByte(Byte[] data, int index, int length);
    public static Instruction CreateDeclareWord(ushort w0);
    public static Instruction CreateDeclareWord(ushort w0, ushort w1);
    public static Instruction CreateDeclareWord(ushort w0, ushort w1, ushort w2);
    public static Instruction CreateDeclareWord(ushort w0, ushort w1, ushort w2, ushort w3);
    public static Instruction CreateDeclareWord(ushort w0, ushort w1, ushort w2, ushort w3, ushort w4);
    public static Instruction CreateDeclareWord(ushort w0, ushort w1, ushort w2, ushort w3, ushort w4, ushort w5);
    public static Instruction CreateDeclareWord(ushort w0, ushort w1, ushort w2, ushort w3, ushort w4, ushort w5, ushort w6);
    public static Instruction CreateDeclareWord(ushort w0, ushort w1, ushort w2, ushort w3, ushort w4, ushort w5, ushort w6, ushort w7);
    [NullableContextAttribute("0")]
public static Instruction CreateDeclareWord(ReadOnlySpan`1<byte> data);
    public static Instruction CreateDeclareWord(Byte[] data);
    public static Instruction CreateDeclareWord(Byte[] data, int index, int length);
    [NullableContextAttribute("0")]
public static Instruction CreateDeclareWord(ReadOnlySpan`1<ushort> data);
    public static Instruction CreateDeclareWord(UInt16[] data);
    public static Instruction CreateDeclareWord(UInt16[] data, int index, int length);
    public static Instruction CreateDeclareDword(UInt32 d0);
    public static Instruction CreateDeclareDword(UInt32 d0, UInt32 d1);
    public static Instruction CreateDeclareDword(UInt32 d0, UInt32 d1, UInt32 d2);
    public static Instruction CreateDeclareDword(UInt32 d0, UInt32 d1, UInt32 d2, UInt32 d3);
    [NullableContextAttribute("0")]
public static Instruction CreateDeclareDword(ReadOnlySpan`1<byte> data);
    public static Instruction CreateDeclareDword(Byte[] data);
    public static Instruction CreateDeclareDword(Byte[] data, int index, int length);
    [NullableContextAttribute("0")]
public static Instruction CreateDeclareDword(ReadOnlySpan`1<UInt32> data);
    public static Instruction CreateDeclareDword(UInt32[] data);
    public static Instruction CreateDeclareDword(UInt32[] data, int index, int length);
    public static Instruction CreateDeclareQword(ulong q0);
    public static Instruction CreateDeclareQword(ulong q0, ulong q1);
    [NullableContextAttribute("0")]
public static Instruction CreateDeclareQword(ReadOnlySpan`1<byte> data);
    public static Instruction CreateDeclareQword(Byte[] data);
    public static Instruction CreateDeclareQword(Byte[] data, int index, int length);
    [NullableContextAttribute("0")]
public static Instruction CreateDeclareQword(ReadOnlySpan`1<ulong> data);
    public static Instruction CreateDeclareQword(UInt64[] data);
    public static Instruction CreateDeclareQword(UInt64[] data, int index, int length);
    public static bool op_Equality(Instruction& left, Instruction& right);
    public static bool op_Inequality(Instruction& left, Instruction& right);
    [IsReadOnlyAttribute]
public bool Equals(Instruction& other);
    [IsReadOnlyAttribute]
private sealed virtual override bool System.IEquatable<Iced.Intel.Instruction>.Equals(Instruction other);
    private static bool EqualsInternal(Instruction& a, Instruction& b);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool EqualsAllBits(Instruction& a, Instruction& b);
    [IsReadOnlyAttribute]
public ushort get_IP16();
    public void set_IP16(ushort value);
    [IsReadOnlyAttribute]
public UInt32 get_IP32();
    public void set_IP32(UInt32 value);
    [IsReadOnlyAttribute]
public ulong get_IP();
    public void set_IP(ulong value);
    [IsReadOnlyAttribute]
public ushort get_NextIP16();
    public void set_NextIP16(ushort value);
    [IsReadOnlyAttribute]
public UInt32 get_NextIP32();
    public void set_NextIP32(UInt32 value);
    [IsReadOnlyAttribute]
public ulong get_NextIP();
    public void set_NextIP(ulong value);
    [IsReadOnlyAttribute]
public CodeSize get_CodeSize();
    public void set_CodeSize(CodeSize value);
    internal void set_InternalCodeSize(CodeSize value);
    [IsReadOnlyAttribute]
public bool get_IsInvalid();
    [IsReadOnlyAttribute]
public Code get_Code();
    public void set_Code(Code value);
    internal void InternalSetCodeNoCheck(Code code);
    [IsReadOnlyAttribute]
public Mnemonic get_Mnemonic();
    [IsReadOnlyAttribute]
public int get_OpCount();
    [IsReadOnlyAttribute]
public int get_Length();
    public void set_Length(int value);
    [IsReadOnlyAttribute]
internal bool get_Internal_HasRepeOrRepnePrefix();
    [IsReadOnlyAttribute]
internal UInt32 get_HasAnyOf_Lock_Rep_Repne_Prefix();
    [IsReadOnlyAttribute]
private bool IsXacquireInstr();
    [IsReadOnlyAttribute]
private bool IsXreleaseInstr();
    [IsReadOnlyAttribute]
public bool get_HasXacquirePrefix();
    public void set_HasXacquirePrefix(bool value);
    internal void InternalSetHasXacquirePrefix();
    [IsReadOnlyAttribute]
public bool get_HasXreleasePrefix();
    public void set_HasXreleasePrefix(bool value);
    internal void InternalSetHasXreleasePrefix();
    [IsReadOnlyAttribute]
public bool get_HasRepPrefix();
    public void set_HasRepPrefix(bool value);
    [IsReadOnlyAttribute]
public bool get_HasRepePrefix();
    public void set_HasRepePrefix(bool value);
    internal void InternalSetHasRepePrefix();
    internal void InternalClearHasRepePrefix();
    internal void InternalClearHasRepeRepnePrefix();
    [IsReadOnlyAttribute]
public bool get_HasRepnePrefix();
    public void set_HasRepnePrefix(bool value);
    internal void InternalSetHasRepnePrefix();
    internal void InternalClearHasRepnePrefix();
    [IsReadOnlyAttribute]
public bool get_HasLockPrefix();
    public void set_HasLockPrefix(bool value);
    internal void InternalSetHasLockPrefix();
    internal void InternalClearHasLockPrefix();
    [IsReadOnlyAttribute]
public OpKind get_Op0Kind();
    public void set_Op0Kind(OpKind value);
    [IsReadOnlyAttribute]
internal bool get_Internal_Op0IsNotReg_or_Op1IsNotReg();
    [IsReadOnlyAttribute]
public OpKind get_Op1Kind();
    public void set_Op1Kind(OpKind value);
    [IsReadOnlyAttribute]
public OpKind get_Op2Kind();
    public void set_Op2Kind(OpKind value);
    [IsReadOnlyAttribute]
public OpKind get_Op3Kind();
    public void set_Op3Kind(OpKind value);
    [IsReadOnlyAttribute]
public OpKind get_Op4Kind();
    public void set_Op4Kind(OpKind value);
    [IsReadOnlyAttribute]
public OpKind GetOpKind(int operand);
    [IsReadOnlyAttribute]
public bool HasOpKind(OpKind opKind);
    public void SetOpKind(int operand, OpKind opKind);
    [IsReadOnlyAttribute]
public bool get_HasSegmentPrefix();
    [IsReadOnlyAttribute]
public Register get_SegmentPrefix();
    public void set_SegmentPrefix(Register value);
    [IsReadOnlyAttribute]
public Register get_MemorySegment();
    [IsReadOnlyAttribute]
public int get_MemoryDisplSize();
    public void set_MemoryDisplSize(int value);
    internal void InternalSetMemoryDisplSize(UInt32 scale);
    [IsReadOnlyAttribute]
public bool get_IsBroadcast();
    public void set_IsBroadcast(bool value);
    internal void InternalSetIsBroadcast();
    [IsReadOnlyAttribute]
public bool get_IsMvexEvictionHint();
    public void set_IsMvexEvictionHint(bool value);
    internal void InternalSetIsMvexEvictionHint();
    [IsReadOnlyAttribute]
public MvexRegMemConv get_MvexRegMemConv();
    public void set_MvexRegMemConv(MvexRegMemConv value);
    internal void InternalSetMvexRegMemConv(MvexRegMemConv newValue);
    [IsReadOnlyAttribute]
public MemorySize get_MemorySize();
    [IsReadOnlyAttribute]
public int get_MemoryIndexScale();
    public void set_MemoryIndexScale(int value);
    [IsReadOnlyAttribute]
internal int get_InternalMemoryIndexScale();
    internal void set_InternalMemoryIndexScale(int value);
    [IsReadOnlyAttribute]
public UInt32 get_MemoryDisplacement32();
    public void set_MemoryDisplacement32(UInt32 value);
    [IsReadOnlyAttribute]
public ulong get_MemoryDisplacement64();
    public void set_MemoryDisplacement64(ulong value);
    [IsReadOnlyAttribute]
public ulong GetImmediate(int operand);
    public void SetImmediate(int operand, int immediate);
    public void SetImmediate(int operand, UInt32 immediate);
    public void SetImmediate(int operand, long immediate);
    public void SetImmediate(int operand, ulong immediate);
    [IsReadOnlyAttribute]
public byte get_Immediate8();
    public void set_Immediate8(byte value);
    internal void set_InternalImmediate8(UInt32 value);
    [IsReadOnlyAttribute]
public byte get_Immediate8_2nd();
    public void set_Immediate8_2nd(byte value);
    internal void set_InternalImmediate8_2nd(UInt32 value);
    [IsReadOnlyAttribute]
public ushort get_Immediate16();
    public void set_Immediate16(ushort value);
    internal void set_InternalImmediate16(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_Immediate32();
    public void set_Immediate32(UInt32 value);
    [IsReadOnlyAttribute]
public ulong get_Immediate64();
    public void set_Immediate64(ulong value);
    internal void set_InternalImmediate64_lo(UInt32 value);
    internal void set_InternalImmediate64_hi(UInt32 value);
    [IsReadOnlyAttribute]
public short get_Immediate8to16();
    public void set_Immediate8to16(short value);
    [IsReadOnlyAttribute]
public int get_Immediate8to32();
    public void set_Immediate8to32(int value);
    [IsReadOnlyAttribute]
public long get_Immediate8to64();
    public void set_Immediate8to64(long value);
    [IsReadOnlyAttribute]
public long get_Immediate32to64();
    public void set_Immediate32to64(long value);
    [IsReadOnlyAttribute]
public ushort get_NearBranch16();
    public void set_NearBranch16(ushort value);
    internal void set_InternalNearBranch16(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_NearBranch32();
    public void set_NearBranch32(UInt32 value);
    [IsReadOnlyAttribute]
public ulong get_NearBranch64();
    public void set_NearBranch64(ulong value);
    [IsReadOnlyAttribute]
public ulong get_NearBranchTarget();
    [IsReadOnlyAttribute]
public ushort get_FarBranch16();
    public void set_FarBranch16(ushort value);
    internal void set_InternalFarBranch16(UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 get_FarBranch32();
    public void set_FarBranch32(UInt32 value);
    [IsReadOnlyAttribute]
public ushort get_FarBranchSelector();
    public void set_FarBranchSelector(ushort value);
    internal void set_InternalFarBranchSelector(UInt32 value);
    [IsReadOnlyAttribute]
public Register get_MemoryBase();
    public void set_MemoryBase(Register value);
    internal void set_InternalMemoryBase(Register value);
    [IsReadOnlyAttribute]
public Register get_MemoryIndex();
    public void set_MemoryIndex(Register value);
    internal void set_InternalMemoryIndex(Register value);
    [IsReadOnlyAttribute]
public Register get_Op0Register();
    public void set_Op0Register(Register value);
    internal void set_InternalOp0Register(Register value);
    [IsReadOnlyAttribute]
public Register get_Op1Register();
    public void set_Op1Register(Register value);
    internal void set_InternalOp1Register(Register value);
    [IsReadOnlyAttribute]
public Register get_Op2Register();
    public void set_Op2Register(Register value);
    internal void set_InternalOp2Register(Register value);
    [IsReadOnlyAttribute]
public Register get_Op3Register();
    public void set_Op3Register(Register value);
    internal void set_InternalOp3Register(Register value);
    [IsReadOnlyAttribute]
public Register get_Op4Register();
    public void set_Op4Register(Register value);
    [IsReadOnlyAttribute]
public Register GetOpRegister(int operand);
    public void SetOpRegister(int operand, Register register);
    [IsReadOnlyAttribute]
public Register get_OpMask();
    public void set_OpMask(Register value);
    [IsReadOnlyAttribute]
internal UInt32 get_InternalOpMask();
    internal void set_InternalOpMask(UInt32 value);
    [IsReadOnlyAttribute]
public bool get_HasOpMask();
    [IsReadOnlyAttribute]
internal bool get_HasOpMask_or_ZeroingMasking();
    [IsReadOnlyAttribute]
public bool get_ZeroingMasking();
    public void set_ZeroingMasking(bool value);
    internal void InternalSetZeroingMasking();
    [IsReadOnlyAttribute]
public bool get_MergingMasking();
    public void set_MergingMasking(bool value);
    [IsReadOnlyAttribute]
public RoundingControl get_RoundingControl();
    public void set_RoundingControl(RoundingControl value);
    internal void set_InternalRoundingControl(UInt32 value);
    [IsReadOnlyAttribute]
internal bool get_HasRoundingControlOrSae();
    [IsReadOnlyAttribute]
public int get_DeclareDataCount();
    public void set_DeclareDataCount(int value);
    internal void set_InternalDeclareDataCount(UInt32 value);
    public void SetDeclareByteValue(int index, sbyte value);
    public void SetDeclareByteValue(int index, byte value);
    [IsReadOnlyAttribute]
public byte GetDeclareByteValue(int index);
    public void SetDeclareWordValue(int index, short value);
    public void SetDeclareWordValue(int index, ushort value);
    [IsReadOnlyAttribute]
public ushort GetDeclareWordValue(int index);
    public void SetDeclareDwordValue(int index, int value);
    public void SetDeclareDwordValue(int index, UInt32 value);
    [IsReadOnlyAttribute]
public UInt32 GetDeclareDwordValue(int index);
    public void SetDeclareQwordValue(int index, long value);
    public void SetDeclareQwordValue(int index, ulong value);
    [IsReadOnlyAttribute]
public ulong GetDeclareQwordValue(int index);
    [IsReadOnlyAttribute]
public bool get_IsVsib();
    [IsReadOnlyAttribute]
public bool get_IsVsib32();
    [IsReadOnlyAttribute]
public bool get_IsVsib64();
    [IsReadOnlyAttribute]
public bool TryGetVsib64(Boolean& vsib64);
    [IsReadOnlyAttribute]
public bool get_SuppressAllExceptions();
    public void set_SuppressAllExceptions(bool value);
    internal void InternalSetSuppressAllExceptions();
    [IsReadOnlyAttribute]
public bool get_IsIPRelativeMemoryOperand();
    [IsReadOnlyAttribute]
public ulong get_IPRelativeMemoryAddress();
    [IsReadOnlyAttribute]
public OpCodeInfo get_OpCode();
    [IsReadOnlyAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
public int get_StackPointerIncrement();
    [IsReadOnlyAttribute]
public FpuStackIncrementInfo GetFpuStackIncrementInfo();
    [IsReadOnlyAttribute]
public EncodingKind get_Encoding();
    [IsReadOnlyAttribute]
public CpuidFeature[] get_CpuidFeatures();
    [IsReadOnlyAttribute]
public FlowControl get_FlowControl();
    [IsReadOnlyAttribute]
public bool get_IsPrivileged();
    [IsReadOnlyAttribute]
public bool get_IsStackInstruction();
    [IsReadOnlyAttribute]
public bool get_IsSaveRestoreInstruction();
    [IsReadOnlyAttribute]
private RflagsInfo GetRflagsInfo();
    [IsReadOnlyAttribute]
public RflagsBits get_RflagsRead();
    [IsReadOnlyAttribute]
public RflagsBits get_RflagsWritten();
    [IsReadOnlyAttribute]
public RflagsBits get_RflagsCleared();
    [IsReadOnlyAttribute]
public RflagsBits get_RflagsSet();
    [IsReadOnlyAttribute]
public RflagsBits get_RflagsUndefined();
    [IsReadOnlyAttribute]
public RflagsBits get_RflagsModified();
    [IsReadOnlyAttribute]
public bool get_IsJccShortOrNear();
    [IsReadOnlyAttribute]
public bool get_IsJccNear();
    [IsReadOnlyAttribute]
public bool get_IsJccShort();
    [IsReadOnlyAttribute]
public bool get_IsJmpShort();
    [IsReadOnlyAttribute]
public bool get_IsJmpNear();
    [IsReadOnlyAttribute]
public bool get_IsJmpShortOrNear();
    [IsReadOnlyAttribute]
public bool get_IsJmpFar();
    [IsReadOnlyAttribute]
public bool get_IsCallNear();
    [IsReadOnlyAttribute]
public bool get_IsCallFar();
    [IsReadOnlyAttribute]
public bool get_IsJmpNearIndirect();
    [IsReadOnlyAttribute]
public bool get_IsJmpFarIndirect();
    [IsReadOnlyAttribute]
public bool get_IsCallNearIndirect();
    [IsReadOnlyAttribute]
public bool get_IsCallFarIndirect();
    [IsReadOnlyAttribute]
public bool get_IsJkccShortOrNear();
    [IsReadOnlyAttribute]
public bool get_IsJkccNear();
    [IsReadOnlyAttribute]
public bool get_IsJkccShort();
    [IsReadOnlyAttribute]
public bool get_IsJcxShort();
    [IsReadOnlyAttribute]
public bool get_IsLoopcc();
    [IsReadOnlyAttribute]
public bool get_IsLoop();
    public void NegateConditionCode();
    public void ToShortBranch();
    public void ToNearBranch();
    [IsReadOnlyAttribute]
public ConditionCode get_ConditionCode();
    [IsReadOnlyAttribute]
public bool get_IsStringInstruction();
    [IsReadOnlyAttribute]
public ulong GetVirtualAddress(int operand, int elementIndex, VAGetRegisterValue getRegisterValue);
    [IsReadOnlyAttribute]
public ulong GetVirtualAddress(int operand, int elementIndex, IVARegisterValueProvider registerValueProvider);
    [IsReadOnlyAttribute]
public bool TryGetVirtualAddress(int operand, int elementIndex, UInt64& result, VATryGetRegisterValue getRegisterValue);
    [IsReadOnlyAttribute]
public bool TryGetVirtualAddress(int operand, int elementIndex, IVATryGetRegisterValueProvider registerValueProvider, UInt64& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Iced.Intel.InstructionBlock : ValueType {
    public CodeWriter CodeWriter;
    public IList`1<Instruction> Instructions;
    public ulong RIP;
    public InstructionBlock(CodeWriter codeWriter, IList`1<Instruction> instructions, ulong rip);
}
public class Iced.Intel.InstructionInfo : ValueType {
    internal SimpleList`1<UsedRegister> usedRegisters;
    internal SimpleList`1<UsedMemory> usedMemoryLocations;
    [FixedBufferAttribute("System.Byte", "5")]
internal <opAccesses>e__FixedBuffer opAccesses;
    public OpAccess Op0Access { get; }
    public OpAccess Op1Access { get; }
    public OpAccess Op2Access { get; }
    public OpAccess Op3Access { get; }
    public OpAccess Op4Access { get; }
    internal InstructionInfo(bool dummy);
    [IsReadOnlyAttribute]
public UsedRegisterIterator GetUsedRegisters();
    [IsReadOnlyAttribute]
public UsedMemoryIterator GetUsedMemory();
    [IsReadOnlyAttribute]
public OpAccess get_Op0Access();
    [IsReadOnlyAttribute]
public OpAccess get_Op1Access();
    [IsReadOnlyAttribute]
public OpAccess get_Op2Access();
    [IsReadOnlyAttribute]
public OpAccess get_Op3Access();
    [IsReadOnlyAttribute]
public OpAccess get_Op4Access();
    [IsReadOnlyAttribute]
public OpAccess GetOpAccess(int operand);
}
[ExtensionAttribute]
public static class Iced.Intel.InstructionInfoExtensions : object {
    [ExtensionAttribute]
public static EncodingKind Encoding(Code code);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static CpuidFeature[] CpuidFeatures(Code code);
    [ExtensionAttribute]
public static FlowControl FlowControl(Code code);
    [ExtensionAttribute]
public static bool IsPrivileged(Code code);
    [ExtensionAttribute]
public static bool IsStackInstruction(Code code);
    [ExtensionAttribute]
public static bool IsSaveRestoreInstruction(Code code);
    [ExtensionAttribute]
public static bool IsJccNear(Code code);
    [ExtensionAttribute]
public static bool IsJccShort(Code code);
    [ExtensionAttribute]
public static bool IsJmpShort(Code code);
    [ExtensionAttribute]
public static bool IsJmpNear(Code code);
    [ExtensionAttribute]
public static bool IsJmpShortOrNear(Code code);
    [ExtensionAttribute]
public static bool IsJmpFar(Code code);
    [ExtensionAttribute]
public static bool IsCallNear(Code code);
    [ExtensionAttribute]
public static bool IsCallFar(Code code);
    [ExtensionAttribute]
public static bool IsJmpNearIndirect(Code code);
    [ExtensionAttribute]
public static bool IsJmpFarIndirect(Code code);
    [ExtensionAttribute]
public static bool IsCallNearIndirect(Code code);
    [ExtensionAttribute]
public static bool IsCallFarIndirect(Code code);
    [ExtensionAttribute]
public static bool IsJkccShortOrNear(Code code);
    [ExtensionAttribute]
public static bool IsJkccNear(Code code);
    [ExtensionAttribute]
public static bool IsJkccShort(Code code);
    [ExtensionAttribute]
public static ConditionCode ConditionCode(Code code);
    [ExtensionAttribute]
public static bool IsStringInstruction(Code code);
    [ExtensionAttribute]
public static bool IsJcxShort(Code code);
    [ExtensionAttribute]
public static bool IsLoopcc(Code code);
    [ExtensionAttribute]
public static bool IsLoop(Code code);
    [ExtensionAttribute]
public static Code NegateConditionCode(Code code);
    [ExtensionAttribute]
public static Code ToShortBranch(Code code);
    [ExtensionAttribute]
public static Code ToNearBranch(Code code);
    [ExtensionAttribute]
public static bool IsJccShortOrNear(Code code);
}
public class Iced.Intel.InstructionInfoFactory : object {
    private static int defaultRegisterArrayCount;
    private static int defaultMemoryArrayCount;
    private InstructionInfo info;
    public InstructionInfo& modreq(System.Runtime.InteropServices.InAttribute) GetInfo(Instruction& instruction);
    public InstructionInfo& modreq(System.Runtime.InteropServices.InAttribute) GetInfo(Instruction& instruction, InstructionInfoOptions options);
    private InstructionInfo& modreq(System.Runtime.InteropServices.InAttribute) Create(Instruction& instruction, InstructionInfoOptions options);
    private static Register GetXSP(CodeSize codeSize, UInt64& xspMask, CodeSize& addressSize);
    private void AddImpliedAccesses(ImpliedAccess impliedAccess, Instruction& instruction, Flags flags);
    private static Register GetARDI(Instruction instruction);
    private static Register GetSegDefaultDS(Instruction instruction);
    private void CommandPush(Instruction& instruction, Flags flags, int count, UInt32 opSize);
    private void CommandPop(Instruction& instruction, Flags flags, int count, UInt32 opSize);
    private void CommandPopRm(Instruction& instruction, Flags flags, UInt32 opSize);
    private void CommandPusha(Instruction& instruction, Flags flags, UInt32 opSize);
    private void CommandPopa(Instruction& instruction, Flags flags, UInt32 opSize);
    private void CommandIns(Instruction& instruction, Flags flags);
    private void CommandOuts(Instruction& instruction, Flags flags);
    private void CommandMovs(Instruction& instruction, Flags flags);
    private void CommandCmps(Instruction& instruction, Flags flags);
    private void CommandStos(Instruction& instruction, Flags flags);
    private void CommandLods(Instruction& instruction, Flags flags);
    private void CommandScas(Instruction& instruction, Flags flags);
    private void CommandXstore(Instruction& instruction, Flags flags, UInt32 size);
    private void CommandEnter(Instruction& instruction, Flags flags, UInt32 opSize);
    private void CommandLeave(Instruction& instruction, Flags flags, UInt32 opSize);
    private void CommandClearRflags(Instruction& instruction, Flags flags);
    private static bool IsClearInstr(Instruction& instruction);
    private void CommandClearRegRegmem(Instruction& instruction, Flags flags);
    private void CommandClearRegRegRegmem(Instruction& instruction, Flags flags);
    private void CommandArpl(Instruction& instruction, Flags flags);
    private void CommandLastGpr(Instruction& instruction, Flags flags, Register baseReg);
    private void CommandLea(Instruction& instruction, Flags flags);
    private void CommandEmmi(Instruction& instruction, Flags flags, OpAccess opAccess);
    private void CommandMemDispl(Flags flags, int extraDispl);
    private static int TryGetGpr163264Index(Register register);
    private void AddMemory(Register segReg, Register baseReg, Register indexReg, int scale, ulong displ, MemorySize memorySize, OpAccess access, CodeSize addressSize, int vsibSize);
    private void AddMemorySegmentRegister(Flags flags, Register seg, OpAccess access);
    private void AddRegister(Flags flags, Register reg, OpAccess access);
}
internal enum Iced.Intel.InstructionInfoInternal.CpuidFeatureInternal : Enum {
    public int value__;
    public static CpuidFeatureInternal INTEL8086;
    public static CpuidFeatureInternal INTEL8086_ONLY;
    public static CpuidFeatureInternal INTEL186;
    public static CpuidFeatureInternal INTEL286;
    public static CpuidFeatureInternal INTEL286_ONLY;
    public static CpuidFeatureInternal INTEL386;
    public static CpuidFeatureInternal INTEL386_ONLY;
    public static CpuidFeatureInternal INTEL386_A0_ONLY;
    public static CpuidFeatureInternal INTEL486;
    public static CpuidFeatureInternal INTEL486_A_ONLY;
    public static CpuidFeatureInternal UMOV;
    public static CpuidFeatureInternal IA64;
    public static CpuidFeatureInternal X64;
    public static CpuidFeatureInternal ADX;
    public static CpuidFeatureInternal AES;
    public static CpuidFeatureInternal AVX;
    public static CpuidFeatureInternal AES_and_AVX;
    public static CpuidFeatureInternal AVX2;
    public static CpuidFeatureInternal AVX512_4FMAPS;
    public static CpuidFeatureInternal AVX512_4VNNIW;
    public static CpuidFeatureInternal AVX512_BITALG;
    public static CpuidFeatureInternal AVX512_IFMA;
    public static CpuidFeatureInternal AVX512_VBMI;
    public static CpuidFeatureInternal AVX512_VBMI2;
    public static CpuidFeatureInternal AVX512_VNNI;
    public static CpuidFeatureInternal AVX512_VPOPCNTDQ;
    public static CpuidFeatureInternal AVX512BW;
    public static CpuidFeatureInternal AVX512CD;
    public static CpuidFeatureInternal AVX512DQ;
    public static CpuidFeatureInternal AVX512ER;
    public static CpuidFeatureInternal AVX512F;
    public static CpuidFeatureInternal AVX512F_and_AVX512_BF16;
    public static CpuidFeatureInternal AVX512F_and_AVX512_VP2INTERSECT;
    public static CpuidFeatureInternal AVX512PF;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_BF16;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_BITALG;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_IFMA;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_VBMI;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_VBMI2;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_VNNI;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_VP2INTERSECT;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_VPOPCNTDQ;
    public static CpuidFeatureInternal AVX512VL_and_AVX512BW;
    public static CpuidFeatureInternal AVX512VL_and_AVX512CD;
    public static CpuidFeatureInternal AVX512VL_and_AVX512DQ;
    public static CpuidFeatureInternal AVX512VL_and_AVX512F;
    public static CpuidFeatureInternal BMI1;
    public static CpuidFeatureInternal BMI2;
    public static CpuidFeatureInternal CET_IBT;
    public static CpuidFeatureInternal CET_SS;
    public static CpuidFeatureInternal CL1INVMB;
    public static CpuidFeatureInternal CLDEMOTE;
    public static CpuidFeatureInternal CLFLUSHOPT;
    public static CpuidFeatureInternal CLFSH;
    public static CpuidFeatureInternal CLWB;
    public static CpuidFeatureInternal CLZERO;
    public static CpuidFeatureInternal CMOV;
    public static CpuidFeatureInternal CMPXCHG16B;
    public static CpuidFeatureInternal CPUID;
    public static CpuidFeatureInternal CX8;
    public static CpuidFeatureInternal D3NOW;
    public static CpuidFeatureInternal D3NOWEXT;
    public static CpuidFeatureInternal OSS;
    public static CpuidFeatureInternal ENQCMD;
    public static CpuidFeatureInternal F16C;
    public static CpuidFeatureInternal FMA;
    public static CpuidFeatureInternal FMA4;
    public static CpuidFeatureInternal FPU;
    public static CpuidFeatureInternal FPU_and_CMOV;
    public static CpuidFeatureInternal FPU287;
    public static CpuidFeatureInternal FPU287XL_ONLY;
    public static CpuidFeatureInternal FPU387;
    public static CpuidFeatureInternal FPU387SL_ONLY;
    public static CpuidFeatureInternal FSGSBASE;
    public static CpuidFeatureInternal FXSR;
    public static CpuidFeatureInternal CYRIX_D3NOW;
    public static CpuidFeatureInternal GFNI;
    public static CpuidFeatureInternal AVX_and_GFNI;
    public static CpuidFeatureInternal AVX512F_and_GFNI;
    public static CpuidFeatureInternal AVX512VL_and_GFNI;
    public static CpuidFeatureInternal HLE_or_RTM;
    public static CpuidFeatureInternal INVPCID;
    public static CpuidFeatureInternal LWP;
    public static CpuidFeatureInternal LZCNT;
    public static CpuidFeatureInternal MCOMMIT;
    public static CpuidFeatureInternal MMX;
    public static CpuidFeatureInternal MONITOR;
    public static CpuidFeatureInternal MONITORX;
    public static CpuidFeatureInternal MOVBE;
    public static CpuidFeatureInternal MOVDIR64B;
    public static CpuidFeatureInternal MOVDIRI;
    public static CpuidFeatureInternal MPX;
    public static CpuidFeatureInternal MSR;
    public static CpuidFeatureInternal MULTIBYTENOP;
    public static CpuidFeatureInternal PADLOCK_ACE;
    public static CpuidFeatureInternal PADLOCK_PHE;
    public static CpuidFeatureInternal PADLOCK_PMM;
    public static CpuidFeatureInternal PADLOCK_RNG;
    public static CpuidFeatureInternal PAUSE;
    public static CpuidFeatureInternal PCLMULQDQ;
    public static CpuidFeatureInternal PCLMULQDQ_and_AVX;
    public static CpuidFeatureInternal PCOMMIT;
    public static CpuidFeatureInternal PCONFIG;
    public static CpuidFeatureInternal PKU;
    public static CpuidFeatureInternal POPCNT;
    public static CpuidFeatureInternal PREFETCHW;
    public static CpuidFeatureInternal PREFETCHWT1;
    public static CpuidFeatureInternal PTWRITE;
    public static CpuidFeatureInternal RDPID;
    public static CpuidFeatureInternal RDPMC;
    public static CpuidFeatureInternal RDPRU;
    public static CpuidFeatureInternal RDRAND;
    public static CpuidFeatureInternal RDSEED;
    public static CpuidFeatureInternal RDTSCP;
    public static CpuidFeatureInternal RTM;
    public static CpuidFeatureInternal SEP;
    public static CpuidFeatureInternal SGX1;
    public static CpuidFeatureInternal SHA;
    public static CpuidFeatureInternal SKINIT_or_SVM;
    public static CpuidFeatureInternal SMAP;
    public static CpuidFeatureInternal SMX;
    public static CpuidFeatureInternal SSE;
    public static CpuidFeatureInternal SSE2;
    public static CpuidFeatureInternal SSE3;
    public static CpuidFeatureInternal FPU_and_SSE3;
    public static CpuidFeatureInternal SSE4_1;
    public static CpuidFeatureInternal SSE4_2;
    public static CpuidFeatureInternal SSE4A;
    public static CpuidFeatureInternal SSSE3;
    public static CpuidFeatureInternal SVM;
    public static CpuidFeatureInternal SEV_ES;
    public static CpuidFeatureInternal SYSCALL;
    public static CpuidFeatureInternal TBM;
    public static CpuidFeatureInternal TSC;
    public static CpuidFeatureInternal VAES;
    public static CpuidFeatureInternal AVX512F_and_VAES;
    public static CpuidFeatureInternal AVX512VL_and_VAES;
    public static CpuidFeatureInternal VMX;
    public static CpuidFeatureInternal VMX_and_INVEPT;
    public static CpuidFeatureInternal VMX_and_INVVPID;
    public static CpuidFeatureInternal VPCLMULQDQ;
    public static CpuidFeatureInternal AVX512F_and_VPCLMULQDQ;
    public static CpuidFeatureInternal AVX512VL_and_VPCLMULQDQ;
    public static CpuidFeatureInternal WAITPKG;
    public static CpuidFeatureInternal WBNOINVD;
    public static CpuidFeatureInternal XOP;
    public static CpuidFeatureInternal XSAVE;
    public static CpuidFeatureInternal XSAVEC;
    public static CpuidFeatureInternal XSAVEOPT;
    public static CpuidFeatureInternal XSAVES;
    public static CpuidFeatureInternal SEV_SNP;
    public static CpuidFeatureInternal SERIALIZE;
    public static CpuidFeatureInternal TSXLDTRK;
    public static CpuidFeatureInternal INVLPGB;
    public static CpuidFeatureInternal AMX_BF16;
    public static CpuidFeatureInternal AMX_TILE;
    public static CpuidFeatureInternal AMX_INT8;
    public static CpuidFeatureInternal CYRIX_FPU;
    public static CpuidFeatureInternal CYRIX_SMM;
    public static CpuidFeatureInternal CYRIX_SMINT;
    public static CpuidFeatureInternal CYRIX_SMINT_0F7E;
    public static CpuidFeatureInternal CYRIX_SHR;
    public static CpuidFeatureInternal CYRIX_DDI;
    public static CpuidFeatureInternal CYRIX_EMMI;
    public static CpuidFeatureInternal CYRIX_DMI;
    public static CpuidFeatureInternal CENTAUR_AIS;
    public static CpuidFeatureInternal MOV_TR;
    public static CpuidFeatureInternal SMM;
    public static CpuidFeatureInternal TDX;
    public static CpuidFeatureInternal KL;
    public static CpuidFeatureInternal AESKLE;
    public static CpuidFeatureInternal AESKLE_and_WIDE_KL;
    public static CpuidFeatureInternal UINTR;
    public static CpuidFeatureInternal HRESET;
    public static CpuidFeatureInternal AVX_VNNI;
    public static CpuidFeatureInternal PADLOCK_GMI;
    public static CpuidFeatureInternal FRED;
    public static CpuidFeatureInternal LKGS;
    public static CpuidFeatureInternal AVX512_FP16;
    public static CpuidFeatureInternal AVX512VL_and_AVX512_FP16;
    public static CpuidFeatureInternal UDBG;
    public static CpuidFeatureInternal KNC;
    public static CpuidFeatureInternal PADLOCK_UNDOC;
    public static CpuidFeatureInternal RMPQUERY;
    public static CpuidFeatureInternal RAO_INT;
    public static CpuidFeatureInternal PREFETCHITI;
    public static CpuidFeatureInternal AMX_FP16;
    public static CpuidFeatureInternal CMPCCXADD;
    public static CpuidFeatureInternal AVX_IFMA;
    public static CpuidFeatureInternal AVX_NE_CONVERT;
    public static CpuidFeatureInternal AVX_VNNI_INT8;
    public static CpuidFeatureInternal MSRLIST;
    public static CpuidFeatureInternal WRMSRNS;
    public static CpuidFeatureInternal AMX_COMPLEX;
    public static CpuidFeatureInternal AVX_and_SHA512;
    public static CpuidFeatureInternal AVX_and_SM3;
    public static CpuidFeatureInternal AVX_and_SM4;
    public static CpuidFeatureInternal TSE;
    public static CpuidFeatureInternal AVX_VNNI_INT16;
}
internal static class Iced.Intel.InstructionInfoInternal.CpuidFeatureInternalData : object {
    public static CpuidFeature[][] ToCpuidFeatures;
    private static CpuidFeatureInternalData();
    private static CpuidFeature[][] GetCpuidFeatures();
    internal static ReadOnlySpan`1<byte> GetCpuidFeaturesData();
}
internal enum Iced.Intel.InstructionInfoInternal.ImpliedAccess : Enum {
    public int value__;
    public static ImpliedAccess None;
    public static ImpliedAccess Shift_Ib_MASK1FMOD9;
    public static ImpliedAccess Shift_Ib_MASK1FMOD11;
    public static ImpliedAccess Shift_Ib_MASK1F;
    public static ImpliedAccess Shift_Ib_MASK3F;
    public static ImpliedAccess Clear_rflags;
    public static ImpliedAccess t_push1x2;
    public static ImpliedAccess t_push1x4;
    public static ImpliedAccess t_pop1x2;
    public static ImpliedAccess t_pop1x4;
    public static ImpliedAccess t_RWal;
    public static ImpliedAccess t_RWax;
    public static ImpliedAccess t_push1x8;
    public static ImpliedAccess t_pop1x8;
    public static ImpliedAccess t_pusha2;
    public static ImpliedAccess t_pusha4;
    public static ImpliedAccess t_popa2;
    public static ImpliedAccess t_popa4;
    public static ImpliedAccess t_arpl;
    public static ImpliedAccess t_ins;
    public static ImpliedAccess t_outs;
    public static ImpliedAccess t_lea;
    public static ImpliedAccess t_gpr16;
    public static ImpliedAccess t_poprm2;
    public static ImpliedAccess t_poprm4;
    public static ImpliedAccess t_poprm8;
    public static ImpliedAccess t_Ral_Wah;
    public static ImpliedAccess t_Rax_Weax;
    public static ImpliedAccess t_RWeax;
    public static ImpliedAccess t_Rax_Wdx;
    public static ImpliedAccess t_Reax_Wedx;
    public static ImpliedAccess t_Rrax_Wrdx;
    public static ImpliedAccess t_push2x2;
    public static ImpliedAccess t_push2x4;
    public static ImpliedAccess t_Rah;
    public static ImpliedAccess t_Wah;
    public static ImpliedAccess t_movs;
    public static ImpliedAccess t_cmps;
    public static ImpliedAccess t_stos;
    public static ImpliedAccess t_lods;
    public static ImpliedAccess t_scas;
    public static ImpliedAccess t_Wes;
    public static ImpliedAccess t_Wds;
    public static ImpliedAccess t_CWeax;
    public static ImpliedAccess t_enter2;
    public static ImpliedAccess t_enter4;
    public static ImpliedAccess t_enter8;
    public static ImpliedAccess t_leave2;
    public static ImpliedAccess t_leave4;
    public static ImpliedAccess t_leave8;
    public static ImpliedAccess t_pop2x2;
    public static ImpliedAccess t_pop2x4;
    public static ImpliedAccess t_pop2x8;
    public static ImpliedAccess b64_t_Wss_pop5x2_f_pop3x2;
    public static ImpliedAccess b64_t_Wss_pop5x4_f_pop3x4;
    public static ImpliedAccess t_Wss_pop5x8;
    public static ImpliedAccess t_Ral_Wax;
    public static ImpliedAccess t_Wal;
    public static ImpliedAccess t_RWst0;
    public static ImpliedAccess t_Rst0;
    public static ImpliedAccess t_Rst0_RWst1;
    public static ImpliedAccess t_RCWst0;
    public static ImpliedAccess t_Rst1_RWst0;
    public static ImpliedAccess t_Rst0_Rst1;
    public static ImpliedAccess t_Wst0TOst7_Wmm0TOmm7;
    public static ImpliedAccess t_Rst0TOst7_Rmm0TOmm7;
    public static ImpliedAccess t_RWcx;
    public static ImpliedAccess t_RWecx;
    public static ImpliedAccess t_RWrcx;
    public static ImpliedAccess t_Rcx;
    public static ImpliedAccess t_Recx;
    public static ImpliedAccess t_Rrcx;
    public static ImpliedAccess t_Wdx_RWax;
    public static ImpliedAccess t_Wedx_RWeax;
    public static ImpliedAccess t_Wrdx_RWrax;
    public static ImpliedAccess t_RWax_RWdx;
    public static ImpliedAccess t_RWeax_RWedx;
    public static ImpliedAccess t_RWrax_RWrdx;
    public static ImpliedAccess t_push2x8;
    public static ImpliedAccess t_Rcr0;
    public static ImpliedAccess t_RWcr0;
    public static ImpliedAccess t_gpr16_RWcr0;
    public static ImpliedAccess t_RCWeax_b64_t_CRrcx_CRrdx_CRrbx_CWrcx_CWrdx_CWrbx_f_CRecx_CRedx_CRebx_CRds_CWecx_CWedx_CWebx;
    public static ImpliedAccess t_CWecx_CWedx_CWebx_RWeax_b64_t_CRrcx_CRrdx_CRrbx_f_CRecx_CRedx_CRebx_CRds;
    public static ImpliedAccess t_Rax_Recx_Redx_Rseg;
    public static ImpliedAccess t_Reax_Recx_Redx_Rseg;
    public static ImpliedAccess t_Recx_Redx_Rrax_Rseg;
    public static ImpliedAccess t_Reax_Recx;
    public static ImpliedAccess t_Recx_Weax_Wedx;
    public static ImpliedAccess t_Reax_Recx_Redx;
    public static ImpliedAccess t_Rax;
    public static ImpliedAccess t_Reax;
    public static ImpliedAccess t_Rrax;
    public static ImpliedAccess t_Rax_Wfs_Wgs;
    public static ImpliedAccess t_Reax_Wfs_Wgs;
    public static ImpliedAccess t_Rrax_Wfs_Wgs;
    public static ImpliedAccess t_Rax_Rfs_Rgs;
    public static ImpliedAccess t_Reax_Rfs_Rgs;
    public static ImpliedAccess t_Rrax_Rfs_Rgs;
    public static ImpliedAccess t_Reax_Wcr0_Wdr6_Wdr7_WesTOgs_Wcr2TOcr4_Wdr0TOdr3_b64_t_WraxTOr15_f_WeaxTOedi;
    public static ImpliedAccess t_Rax_Recx;
    public static ImpliedAccess t_Recx_Rrax;
    public static ImpliedAccess t_Weax_Wecx_Wedx;
    public static ImpliedAccess t_Reax_Recx_CRebx;
    public static ImpliedAccess t_Rax_Rseg;
    public static ImpliedAccess t_Reax_Rseg;
    public static ImpliedAccess t_Rrax_Rseg;
    public static ImpliedAccess t_Wecx_b64_t_Wr11;
    public static ImpliedAccess t_Redi_Res;
    public static ImpliedAccess t_Recx_Wcs_Wss_b64_t_Rr11d;
    public static ImpliedAccess t_Rr11d_Rrcx_Wcs_Wss;
    public static ImpliedAccess t_Weax_Wedx;
    public static ImpliedAccess t_Wesp;
    public static ImpliedAccess t_Recx_Redx_Wesp_Wcs_Wss;
    public static ImpliedAccess t_Rrcx_Rrdx_Wrsp_Wcs_Wss;
    public static ImpliedAccess t_zrrm;
    public static ImpliedAccess t_zrrrm;
    public static ImpliedAccess b64_t_RWxmm0TOxmm15_f_RWxmm0TOxmm7;
    public static ImpliedAccess b64_t_Wzmm0TOzmm15_f_Wzmm0TOzmm7;
    public static ImpliedAccess t_CRecx_Wecx_Wedx_Webx_RWeax;
    public static ImpliedAccess t_CRmem_CRsi_CReax_CRes_CWeax_CWedx_RCWecx;
    public static ImpliedAccess t_CRmem_CReax_CResi_CRes_CWeax_CWedx_RCWecx;
    public static ImpliedAccess t_CRmem_CReax_CRrsi_CRes_CWeax_CWedx_RCWrcx;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CRsi_CRdi_CRes_CWsi_RCWax_RCWcx;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CResi_CRedi_CRes_CWesi_RCWeax_RCWecx;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CRrsi_CRrdi_CRes_CWrsi_RCWrax_RCWrcx;
    public static ImpliedAccess t_Rcl_Rax;
    public static ImpliedAccess t_Rcl_Reax;
    public static ImpliedAccess t_xstore2;
    public static ImpliedAccess t_xstore4;
    public static ImpliedAccess t_xstore8;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CWmem_CRdx_CRbx_CRsi_CRdi_CRes_CWsi_CWdi_RCWcx;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CWmem_CRedx_CRebx_CResi_CRedi_CRes_CWesi_CWedi_RCWecx;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CWmem_CRrdx_CRrbx_CRrsi_CRrdi_CRes_CWrsi_CWrdi_RCWrcx;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CRmem_CWmem_CWmem_CRax_CRdx_CRbx_CRsi_CRdi_CRes_CWsi_CWdi_RCWcx;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CRmem_CWmem_CWmem_CReax_CRedx_CRebx_CResi_CRedi_CRes_CWesi_CWedi_RCWecx;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CRmem_CWmem_CWmem_CRrax_CRrdx_CRrbx_CRrsi_CRrdi_CRes_CWrsi_CWrdi_RCWrcx;
    public static ImpliedAccess t_RCWal;
    public static ImpliedAccess t_RCWax;
    public static ImpliedAccess t_RCWeax;
    public static ImpliedAccess t_Reax_Redx;
    public static ImpliedAccess t_gpr8;
    public static ImpliedAccess t_gpr32_Reax_Redx;
    public static ImpliedAccess t_Rmem_Rseg;
    public static ImpliedAccess t_RCWrax;
    public static ImpliedAccess t_Wss;
    public static ImpliedAccess t_Wfs;
    public static ImpliedAccess t_Wgs;
    public static ImpliedAccess t_CRecx_CRebx_RCWeax_RCWedx;
    public static ImpliedAccess t_CRrcx_CRrbx_RCWrax_RCWrdx;
    public static ImpliedAccess t_Wmem_RarDI_Rseg;
    public static ImpliedAccess t_Rxmm0;
    public static ImpliedAccess t_Redx;
    public static ImpliedAccess t_Rrdx;
    public static ImpliedAccess t_Wmem_Res;
    public static ImpliedAccess t_Reax_Redx_Wxmm0;
    public static ImpliedAccess t_Rrax_Rrdx_Wxmm0;
    public static ImpliedAccess t_Reax_Redx_Wecx;
    public static ImpliedAccess t_Rrax_Rrdx_Wecx;
    public static ImpliedAccess t_Wxmm0;
    public static ImpliedAccess t_Wecx;
    public static ImpliedAccess t_Rmem_Rds;
    public static ImpliedAccess t_Rrcx_Rrdx_RWrax;
    public static ImpliedAccess t_Rmem_Rrcx_Rseg_RWrax;
    public static ImpliedAccess t_RWrax;
    public static ImpliedAccess t_Rax_Recx_Redx_Weax;
    public static ImpliedAccess t_Recx_Redx_RWeax;
    public static ImpliedAccess t_Recx_Redx_RWrax;
    public static ImpliedAccess t_Rax_Recx_Redx;
    public static ImpliedAccess t_Recx_Redx_Rrax;
    public static ImpliedAccess t_Wtmm0TOtmm7;
    public static ImpliedAccess t_Reax_Rebx;
    public static ImpliedAccess t_Rebx_Weax;
    public static ImpliedAccess t_emmiW;
    public static ImpliedAccess t_emmiRW;
    public static ImpliedAccess t_emmiR;
    public static ImpliedAccess t_CRrcx_CRrdx_CRr8_CRr9_RWrax;
    public static ImpliedAccess t_RWxmm0TOxmm7;
    public static ImpliedAccess t_Reax_Rxmm0;
    public static ImpliedAccess t_Wxmm1_Wxmm2_RWxmm0_Wxmm4TOxmm6;
    public static ImpliedAccess t_RWxmm0_RWxmm1_Wxmm2TOxmm6;
    public static ImpliedAccess t_pop3x8;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CRbx_CRsi_CRdi_CRes_CWsi_RCWax_RCWcx;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CRebx_CResi_CRedi_CRes_CWesi_RCWeax_RCWecx;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CRrbx_CRrsi_CRrdi_CRes_CWrsi_RCWrax_RCWrcx;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CWmem_CRax_CRdx_CRbx_CRsi_CRdi_CRes_CWsi_CWdi_RCWcx;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CWmem_CReax_CRedx_CRebx_CResi_CRedi_CRes_CWesi_CWedi_RCWecx;
    public static ImpliedAccess t_CRmem_CRmem_CRmem_CWmem_CRrax_CRrdx_CRrbx_CRrsi_CRrdi_CRes_CWrsi_CWrdi_RCWrcx;
    public static ImpliedAccess t_gpr16_Wgs;
    public static ImpliedAccess t_Wrsp_Wcs_Wss_pop6x8;
    public static ImpliedAccess t_Rcs_Rss_Wrsp_pop6x8;
    public static ImpliedAccess t_Reax_Recx_Wedx_Webx;
    public static ImpliedAccess t_Reax_Recx_Redx_CRebx_CWedx_CWebx;
    public static ImpliedAccess t_memdisplm64;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CRsi_CRdi_CRes_CWsi_RCWcx;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CResi_CRedi_CRes_CWesi_RCWecx;
    public static ImpliedAccess t_CRmem_CRmem_CWmem_CRrsi_CRrdi_CRes_CWrsi_RCWrcx;
    public static ImpliedAccess t_CRmem_CRmem_Rrcx_CRrsi_CRrdi_CRes_CRds_CWrcx;
    public static ImpliedAccess t_CRmem_CWmem_Rrcx_CRrsi_CRrdi_CRes_CRds_CWrcx;
    public static ImpliedAccess t_Rdl_Rrax_Weax_Wrcx_Wrdx;
    public static ImpliedAccess t_Rmem_Wmem_Rrcx_Rrbx_Rds_Weax;
}
[FlagsAttribute]
internal enum Iced.Intel.InstructionInfoInternal.InfoFlags1 : Enum {
    public UInt32 value__;
    public static InfoFlags1 OpInfo0Shift;
    public static InfoFlags1 OpInfo0Mask;
    public static InfoFlags1 OpInfo1Shift;
    public static InfoFlags1 OpInfo1Mask;
    public static InfoFlags1 OpInfo2Shift;
    public static InfoFlags1 OpInfo2Mask;
    public static InfoFlags1 OpInfo3Shift;
    public static InfoFlags1 OpInfo3Mask;
    public static InfoFlags1 OpInfo4Shift;
    public static InfoFlags1 OpInfo4Mask;
    public static InfoFlags1 RflagsInfoShift;
    public static InfoFlags1 RflagsInfoMask;
    public static InfoFlags1 ImpliedAccessShift;
    public static InfoFlags1 ImpliedAccessMask;
    public static InfoFlags1 IgnoresIndexVA;
    public static InfoFlags1 OpMaskReadWrite;
    public static InfoFlags1 IgnoresSegment;
}
[FlagsAttribute]
internal enum Iced.Intel.InstructionInfoInternal.InfoFlags2 : Enum {
    public UInt32 value__;
    public static InfoFlags2 EncodingShift;
    public static InfoFlags2 EncodingMask;
    public static InfoFlags2 SaveRestore;
    public static InfoFlags2 StackInstruction;
    public static InfoFlags2 Privileged;
    public static InfoFlags2 FlowControlShift;
    public static InfoFlags2 FlowControlMask;
    public static InfoFlags2 CpuidFeatureInternalShift;
    public static InfoFlags2 CpuidFeatureInternalMask;
}
internal static class Iced.Intel.InstructionInfoInternal.InstrInfoConstants : object {
    internal static int OpInfo0_Count;
    internal static int OpInfo1_Count;
    internal static int OpInfo2_Count;
    internal static int OpInfo3_Count;
    internal static int OpInfo4_Count;
    internal static int RflagsInfo_Count;
    internal static int DefaultUsedRegisterCollCapacity;
    internal static int DefaultUsedMemoryCollCapacity;
}
internal static class Iced.Intel.InstructionInfoInternal.InstrInfoTable : object {
    internal static UInt32[] Data;
    private static InstrInfoTable();
}
internal static class Iced.Intel.InstructionInfoInternal.OpAccesses : object {
    public static OpAccess[] Op1;
    public static OpAccess[] Op2;
    private static OpAccesses();
}
internal enum Iced.Intel.InstructionInfoInternal.OpInfo0 : Enum {
    public int value__;
    public static OpInfo0 None;
    public static OpInfo0 CondWrite;
    public static OpInfo0 CondWrite32_ReadWrite64;
    public static OpInfo0 NoMemAccess;
    public static OpInfo0 Read;
    public static OpInfo0 ReadCondWrite;
    public static OpInfo0 ReadWrite;
    public static OpInfo0 Write;
    public static OpInfo0 WriteVmm;
    public static OpInfo0 ReadWriteVmm;
    public static OpInfo0 WriteForce;
    public static OpInfo0 WriteMem_ReadWriteReg;
    public static OpInfo0 WriteForceP1;
}
internal enum Iced.Intel.InstructionInfoInternal.OpInfo1 : Enum {
    public int value__;
    public static OpInfo1 None;
    public static OpInfo1 CondRead;
    public static OpInfo1 NoMemAccess;
    public static OpInfo1 Read;
    public static OpInfo1 ReadP3;
    public static OpInfo1 ReadWrite;
    public static OpInfo1 Write;
}
internal enum Iced.Intel.InstructionInfoInternal.OpInfo2 : Enum {
    public int value__;
    public static OpInfo2 None;
    public static OpInfo2 Read;
    public static OpInfo2 ReadWrite;
}
internal enum Iced.Intel.InstructionInfoInternal.OpInfo3 : Enum {
    public int value__;
    public static OpInfo3 None;
    public static OpInfo3 Read;
}
internal enum Iced.Intel.InstructionInfoInternal.OpInfo4 : Enum {
    public int value__;
    public static OpInfo4 None;
    public static OpInfo4 Read;
}
internal enum Iced.Intel.InstructionInfoInternal.RflagsInfo : Enum {
    public int value__;
    public static RflagsInfo None;
    public static RflagsInfo C_0123;
    public static RflagsInfo C_1_U_023;
    public static RflagsInfo C_A;
    public static RflagsInfo C_acopsz;
    public static RflagsInfo C_acopszidA;
    public static RflagsInfo C_acos_S_pz;
    public static RflagsInfo C_c;
    public static RflagsInfo C_cos_S_pz_U_a;
    public static RflagsInfo C_d;
    public static RflagsInfo C_i;
    public static RflagsInfo C_u;
    public static RflagsInfo R_0123_C_0123;
    public static RflagsInfo R_0123_U_0123;
    public static RflagsInfo R_a_W_ac_U_opsz;
    public static RflagsInfo R_ac_W_acpsz_U_o;
    public static RflagsInfo R_acopszid;
    public static RflagsInfo R_acopszidA;
    public static RflagsInfo R_acopszidA_W_acopszidA;
    public static RflagsInfo R_acpsz;
    public static RflagsInfo R_c;
    public static RflagsInfo R_c_C_1_U_023;
    public static RflagsInfo R_c_W_acopsz;
    public static RflagsInfo R_c_W_c;
    public static RflagsInfo R_c_W_c_U_o;
    public static RflagsInfo R_c_W_co;
    public static RflagsInfo R_cz;
    public static RflagsInfo R_cz_C_1_U_023;
    public static RflagsInfo R_d;
    public static RflagsInfo R_d_W_acopsz;
    public static RflagsInfo R_o;
    public static RflagsInfo R_o_W_o;
    public static RflagsInfo R_os;
    public static RflagsInfo R_osz;
    public static RflagsInfo R_p;
    public static RflagsInfo R_p_C_1_U_023;
    public static RflagsInfo R_s;
    public static RflagsInfo R_u_W_c_C_aopsz;
    public static RflagsInfo R_z;
    public static RflagsInfo R_z_C_1_U_023;
    public static RflagsInfo S_A;
    public static RflagsInfo S_c;
    public static RflagsInfo S_d;
    public static RflagsInfo S_i;
    public static RflagsInfo S_u;
    public static RflagsInfo U_0123;
    public static RflagsInfo U_acopsz;
    public static RflagsInfo W_0123;
    public static RflagsInfo W_023_C_1;
    public static RflagsInfo W_12_U_03;
    public static RflagsInfo W_1_U_023;
    public static RflagsInfo W_acopsz;
    public static RflagsInfo W_acopszdA_S_u;
    public static RflagsInfo W_acopszid;
    public static RflagsInfo W_acopszidA;
    public static RflagsInfo W_acpsz;
    public static RflagsInfo W_aopsz;
    public static RflagsInfo W_c;
    public static RflagsInfo W_c_C_aopsz;
    public static RflagsInfo W_c_U_aops;
    public static RflagsInfo W_c_U_o;
    public static RflagsInfo W_co;
    public static RflagsInfo W_co_U_apsz;
    public static RflagsInfo W_copsz_U_a;
    public static RflagsInfo W_cosz_C_ap;
    public static RflagsInfo W_cpsz_U_ao;
    public static RflagsInfo W_cpz_C_aos;
    public static RflagsInfo W_cpz_C_aos1;
    public static RflagsInfo W_cs_C_oz_U_ap;
    public static RflagsInfo W_csz_C_o_U_ap;
    public static RflagsInfo W_cz_C_aops;
    public static RflagsInfo W_cz_U_aops;
    public static RflagsInfo W_psz_C_co_U_a;
    public static RflagsInfo W_psz_U_aco;
    public static RflagsInfo W_sz_C_co_U_ap;
    public static RflagsInfo W_z;
    public static RflagsInfo W_z_C_acops;
    public static RflagsInfo W_z_C_co_U_aps;
    public static RflagsInfo W_z_U_acops;
}
internal static class Iced.Intel.InstructionInfoInternal.RflagsInfoConstants : object {
    public static UInt16[] flagsRead;
    public static UInt16[] flagsUndefined;
    public static UInt16[] flagsWritten;
    public static UInt16[] flagsCleared;
    public static UInt16[] flagsSet;
    public static UInt16[] flagsModified;
    private static RflagsInfoConstants();
}
internal class Iced.Intel.InstructionInfoInternal.SimpleList`1 : ValueType {
    public static SimpleList`1<T> Empty;
    public T[] Array;
    public int ValidLength;
    public SimpleList`1(T[] array);
    private static SimpleList`1();
}
[FlagsAttribute]
public enum Iced.Intel.InstructionInfoOptions : Enum {
    public UInt32 value__;
    public static InstructionInfoOptions None;
    public static InstructionInfoOptions NoMemoryUsage;
    public static InstructionInfoOptions NoRegisterUsage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("Iced.Intel.InstructionListDebugView")]
[EditorBrowsableAttribute("1")]
public class Iced.Intel.InstructionList : object {
    private Instruction[] elements;
    private int count;
    public int Count { get; }
    private int System.Collections.Generic.ICollection<Iced.Intel.Instruction>.Count { get; }
    private int System.Collections.ICollection.Count { get; }
    private int System.Collections.Generic.IReadOnlyCollection<Iced.Intel.Instruction>.Count { get; }
    public int Capacity { get; }
    private bool System.Collections.Generic.ICollection<Iced.Intel.Instruction>.IsReadOnly { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public Instruction& Item { get; }
    private Instruction System.Collections.Generic.IList<Iced.Intel.Instruction>.Item { get; private set; }
    private Instruction System.Collections.Generic.IReadOnlyList<Iced.Intel.Instruction>.Item { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public InstructionList(int capacity);
    public InstructionList(InstructionList list);
    public InstructionList(IEnumerable`1<Instruction> collection);
    public int get_Count();
    private sealed virtual override int System.Collections.Generic.ICollection<Iced.Intel.Instruction>.get_Count();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<Iced.Intel.Instruction>.get_Count();
    public int get_Capacity();
    private sealed virtual override bool System.Collections.Generic.ICollection<Iced.Intel.Instruction>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public Instruction& get_Item(int index);
    private sealed virtual override Instruction System.Collections.Generic.IList<Iced.Intel.Instruction>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Iced.Intel.Instruction>.set_Item(int index, Instruction value);
    private sealed virtual override Instruction System.Collections.Generic.IReadOnlyList<Iced.Intel.Instruction>.get_Item(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private void SetMinCapacity(int minCapacity);
    public Instruction& AllocUninitializedElement();
    private void MakeRoom(int index, int extraLength);
    public void Insert(int index, Instruction& instruction);
    private sealed virtual override void System.Collections.Generic.IList<Iced.Intel.Instruction>.Insert(int index, Instruction instruction);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public void RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.IList<Iced.Intel.Instruction>.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public void AddRange(IEnumerable`1<Instruction> collection);
    public void InsertRange(int index, IEnumerable`1<Instruction> collection);
    public void RemoveRange(int index, int count);
    public void Add(Instruction& instruction);
    private sealed virtual override void System.Collections.Generic.ICollection<Iced.Intel.Instruction>.Add(Instruction instruction);
    private sealed virtual override int System.Collections.IList.Add(object value);
    public void Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<Iced.Intel.Instruction>.Clear();
    private sealed virtual override void System.Collections.IList.Clear();
    public bool Contains(Instruction& instruction);
    private sealed virtual override bool System.Collections.Generic.ICollection<Iced.Intel.Instruction>.Contains(Instruction instruction);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public int IndexOf(Instruction& instruction);
    private sealed virtual override int System.Collections.Generic.IList<Iced.Intel.Instruction>.IndexOf(Instruction instruction);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public int IndexOf(Instruction& instruction, int index);
    public int IndexOf(Instruction& instruction, int index, int count);
    public int LastIndexOf(Instruction& instruction);
    public int LastIndexOf(Instruction& instruction, int index);
    public int LastIndexOf(Instruction& instruction, int index, int count);
    public bool Remove(Instruction& instruction);
    private sealed virtual override bool System.Collections.Generic.ICollection<Iced.Intel.Instruction>.Remove(Instruction instruction);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public void CopyTo(Instruction[] array);
    public void CopyTo(Instruction[] array, int arrayIndex);
    private sealed virtual override void System.Collections.Generic.ICollection<Iced.Intel.Instruction>.CopyTo(Instruction[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(int index, Instruction[] array, int arrayIndex, int count);
    public InstructionList GetRange(int index, int count);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<Instruction> System.Collections.Generic.IEnumerable<Iced.Intel.Instruction>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public ReadOnlyCollection`1<Instruction> AsReadOnly();
    public Instruction[] ToArray();
}
internal class Iced.Intel.InstructionListDebugView : object {
    private InstructionList list;
    [DebuggerBrowsableAttribute("3")]
public Instruction[] Items { get; }
    public InstructionListDebugView(InstructionList list);
    public Instruction[] get_Items();
}
internal static class Iced.Intel.InstructionMemorySizes : object {
    internal static ReadOnlySpan`1<byte> SizesNormal { get; }
    internal static ReadOnlySpan`1<byte> SizesBcst { get; }
    internal static ReadOnlySpan`1<byte> get_SizesNormal();
    internal static ReadOnlySpan`1<byte> get_SizesBcst();
}
internal static class Iced.Intel.InstructionOpCounts : object {
    internal static ReadOnlySpan`1<byte> OpCount { get; }
    internal static ReadOnlySpan`1<byte> get_OpCount();
}
internal static class Iced.Intel.InstructionUtils : object {
    public static int GetAddressSizeInBytes(Register baseReg, Register indexReg, int displSize, CodeSize codeSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.IntelFormatter : Formatter {
    private FormatterOptions options;
    private ISymbolResolver symbolResolver;
    private IFormatterOptionsProvider optionsProvider;
    private FormatterString[] allRegisters;
    private InstrInfo[] instrInfos;
    private Info[] allMemorySizes;
    private NumberFormatter numberFormatter;
    private FormatterString[] opSizeStrings;
    private FormatterString[] addrSizeStrings;
    private FormatterString[] rcStrings;
    private FormatterString[] rcSaeStrings;
    private FormatterString[][] branchInfos;
    private String[] scaleNumbers;
    private FormatterString[] mvexRegMemConsts32;
    private FormatterString[] mvexRegMemConsts64;
    private static FormatterString str_bnd;
    private static FormatterString str_far;
    private static FormatterString str_hint_not_taken;
    private static FormatterString str_hint_taken;
    private static FormatterString str_lock;
    private static FormatterString str_notrack;
    private static FormatterString str_rep;
    private static FormatterString[] str_repe;
    private static FormatterString[] str_repne;
    private static FormatterString str_sae;
    private static FormatterString str_xacquire;
    private static FormatterString str_xrelease;
    private static FormatterString str_z;
    private static FormatterString[] s_opSizeStrings;
    private static FormatterString[] s_addrSizeStrings;
    private static FormatterString[] s_rcStrings;
    private static FormatterString[] s_rcSaeStrings;
    private static FormatterString[][] s_branchInfos;
    private static String[] s_scaleNumbers;
    private static FormatterString[] s_mvexRegMemConsts32;
    private static FormatterString[] s_mvexRegMemConsts64;
    private static FormatterString str_eh;
    public FormatterOptions Options { get; }
    [NullableContextAttribute("2")]
public IntelFormatter(ISymbolResolver symbolResolver, IFormatterOptionsProvider optionsProvider);
    [NullableContextAttribute("2")]
public IntelFormatter(FormatterOptions options, ISymbolResolver symbolResolver, IFormatterOptionsProvider optionsProvider);
    private static IntelFormatter();
    public virtual FormatterOptions get_Options();
    public virtual void FormatMnemonic(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, FormatMnemonicOptions options);
    public virtual int GetOperandCount(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
    public virtual bool TryGetOpAccess(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, OpAccess& access);
    public virtual int GetInstructionOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual int GetFormatterOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int instructionOperand);
    public virtual void FormatOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, int operand);
    public virtual void FormatOperandSeparator(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public virtual void FormatAllOperands(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public virtual void Format(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    private void FormatMnemonic(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo, Int32& column, FormatMnemonicOptions mnemonicOptions);
    private bool ShowSegmentPrefix(Instruction& instruction, InstrOpInfo& opInfo);
    private void FormatPrefix(FormatterOutput output, Instruction& instruction, Int32& column, FormatterString prefix, PrefixKind prefixKind, Boolean& needSpace);
    private void FormatOperands(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo);
    private void FormatOperand(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo, int operand);
    private void FormatFlowControl(FormatterOutput output, InstrOpInfoFlags flags, FormatterOperandOptions operandOptions);
    private void FormatDecorator(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, FormatterString text, DecoratorKind decorator);
    private string ToRegisterString(Register reg);
    private void FormatRegister(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, Register reg);
    private void FormatMemory(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, Register segReg, Register baseReg, Register indexReg, int scale, int displSize, long displ, int addrSize, InstrOpInfoFlags flags);
    private void FormatMemorySize(FormatterOutput output, SymbolResult& symbol, MemorySize memSize, InstrOpInfoFlags flags, FormatterOperandOptions operandOptions, bool useSymbol);
    private bool IsSameMemSize(FormatterString[] memSizeStrings, SymbolResult& symbol);
    private static bool IsSameMemSize(FormatterString[] a, FormatterString[] b);
    private void FormatKeyword(FormatterOutput output, FormatterString keyword);
    public virtual string Format(Register register);
    public virtual string FormatInt8(sbyte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt16(short value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt32(int value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt64(long value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt8(byte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt16(ushort value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt32(UInt32 value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt64(ulong value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
}
internal enum Iced.Intel.IntelFormatterInternal.BranchSizeInfo : Enum {
    public int value__;
    public static BranchSizeInfo None;
    public static BranchSizeInfo Short;
}
internal enum Iced.Intel.IntelFormatterInternal.CtorKind : Enum {
    public int value__;
    public static CtorKind Previous;
    public static CtorKind Normal_1;
    public static CtorKind Normal_2;
    public static CtorKind asz;
    public static CtorKind StringIg0;
    public static CtorKind StringIg1;
    public static CtorKind bcst;
    public static CtorKind bnd;
    public static CtorKind ST2;
    public static CtorKind DeclareData;
    public static CtorKind ST_STi;
    public static CtorKind STi_ST;
    public static CtorKind imul;
    public static CtorKind opmask_op;
    public static CtorKind invlpga;
    public static CtorKind maskmovq;
    public static CtorKind memsize;
    public static CtorKind movabs;
    public static CtorKind nop;
    public static CtorKind os2;
    public static CtorKind os3;
    public static CtorKind os_bnd;
    public static CtorKind CC_1;
    public static CtorKind CC_2;
    public static CtorKind CC_3;
    public static CtorKind os_jcc_a_1;
    public static CtorKind os_jcc_a_2;
    public static CtorKind os_jcc_a_3;
    public static CtorKind os_jcc_b_1;
    public static CtorKind os_jcc_b_2;
    public static CtorKind os_jcc_b_3;
    public static CtorKind os_loopcc;
    public static CtorKind os_loop;
    public static CtorKind pclmulqdq;
    public static CtorKind pops;
    public static CtorKind reg;
    public static CtorKind Reg16;
    public static CtorKind Reg32;
    public static CtorKind ST1_2;
    public static CtorKind ST1_3;
}
internal abstract class Iced.Intel.IntelFormatterInternal.InstrInfo : object {
    public static int OpAccess_INVALID;
    public static int OpAccess_None;
    public static int OpAccess_Read;
    public static int OpAccess_CondRead;
    public static int OpAccess_Write;
    public static int OpAccess_CondWrite;
    public static int OpAccess_ReadWrite;
    public static int OpAccess_ReadCondWrite;
    public static int OpAccess_NoMemAccess;
    public abstract virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    protected static int GetBitness(CodeSize codeSize);
}
internal static class Iced.Intel.IntelFormatterInternal.InstrInfos : object {
    public static InstrInfo[] AllInfos;
    private static InstrInfos();
    private static string AddPrefix(string s, Char[] ca);
    private static InstrInfo[] ReadInfos();
    private static ReadOnlySpan`1<byte> GetSerializedInstrInfos();
}
internal class Iced.Intel.IntelFormatterInternal.InstrOpInfo : ValueType {
    internal static int TEST_RegisterBits;
    public FormatterString Mnemonic;
    public InstrOpInfoFlags Flags;
    public byte OpCount;
    public InstrOpKind Op0Kind;
    public InstrOpKind Op1Kind;
    public InstrOpKind Op2Kind;
    public InstrOpKind Op3Kind;
    public InstrOpKind Op4Kind;
    public byte Op0Register;
    public byte Op1Register;
    public byte Op2Register;
    public byte Op3Register;
    public byte Op4Register;
    public sbyte Op0Index;
    public sbyte Op1Index;
    public sbyte Op2Index;
    public sbyte Op3Index;
    public sbyte Op4Index;
    public InstrOpInfo(FormatterString mnemonic, Instruction& instruction, InstrOpInfoFlags flags);
    [IsReadOnlyAttribute]
public Register GetOpRegister(int operand);
    [IsReadOnlyAttribute]
public InstrOpKind GetOpKind(int operand);
    [IsReadOnlyAttribute]
public int GetInstructionIndex(int operand);
    [IsReadOnlyAttribute]
public bool TryGetOpAccess(int operand, OpAccess& access);
    [IsReadOnlyAttribute]
public int GetOperandIndex(int instructionOperand);
}
[FlagsAttribute]
internal enum Iced.Intel.IntelFormatterInternal.InstrOpInfoFlags : Enum {
    public ushort value__;
    public static InstrOpInfoFlags None;
    public static InstrOpInfoFlags MemSize_Nothing;
    public static InstrOpInfoFlags ShowNoMemSize_ForceSize;
    public static InstrOpInfoFlags ShowMinMemSize_ForceSize;
    public static InstrOpInfoFlags BranchSizeInfoShift;
    public static InstrOpInfoFlags BranchSizeInfoMask;
    public static InstrOpInfoFlags BranchSizeInfo_Short;
    public static InstrOpInfoFlags SizeOverrideMask;
    public static InstrOpInfoFlags OpSizeShift;
    public static InstrOpInfoFlags OpSize16;
    public static InstrOpInfoFlags OpSize32;
    public static InstrOpInfoFlags OpSize64;
    public static InstrOpInfoFlags AddrSizeShift;
    public static InstrOpInfoFlags AddrSize16;
    public static InstrOpInfoFlags AddrSize32;
    public static InstrOpInfoFlags AddrSize64;
    public static InstrOpInfoFlags IgnoreOpMask;
    public static InstrOpInfoFlags FarMnemonic;
    public static InstrOpInfoFlags JccNotTaken;
    public static InstrOpInfoFlags JccTaken;
    public static InstrOpInfoFlags BndPrefix;
    public static InstrOpInfoFlags IgnoreIndexReg;
    public static InstrOpInfoFlags IgnoreSegmentPrefix;
    public static InstrOpInfoFlags MnemonicIsDirective;
}
internal enum Iced.Intel.IntelFormatterInternal.InstrOpKind : Enum {
    public byte value__;
    public static InstrOpKind Register;
    public static InstrOpKind NearBranch16;
    public static InstrOpKind NearBranch32;
    public static InstrOpKind NearBranch64;
    public static InstrOpKind FarBranch16;
    public static InstrOpKind FarBranch32;
    public static InstrOpKind Immediate8;
    public static InstrOpKind Immediate8_2nd;
    public static InstrOpKind Immediate16;
    public static InstrOpKind Immediate32;
    public static InstrOpKind Immediate64;
    public static InstrOpKind Immediate8to16;
    public static InstrOpKind Immediate8to32;
    public static InstrOpKind Immediate8to64;
    public static InstrOpKind Immediate32to64;
    public static InstrOpKind MemorySegSI;
    public static InstrOpKind MemorySegESI;
    public static InstrOpKind MemorySegRSI;
    public static InstrOpKind MemorySegDI;
    public static InstrOpKind MemorySegEDI;
    public static InstrOpKind MemorySegRDI;
    public static InstrOpKind MemoryESDI;
    public static InstrOpKind MemoryESEDI;
    public static InstrOpKind MemoryESRDI;
    public static InstrOpKind Memory;
    public static InstrOpKind DeclareByte;
    public static InstrOpKind DeclareWord;
    public static InstrOpKind DeclareDword;
    public static InstrOpKind DeclareQword;
}
internal static class Iced.Intel.IntelFormatterInternal.MemorySizes : object {
    public static Info[] AllMemorySizes;
    private static MemorySizes();
    private static Info[] GetMemorySizes();
}
internal static class Iced.Intel.IntelFormatterInternal.Registers : object {
    public static Register Register_ST;
    public static FormatterString[] AllRegisters;
    private static Registers();
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo(string mnemonic);
    public SimpleInstrInfo(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_as : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_as(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_bcst : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flagsNoBroadcast;
    public SimpleInstrInfo_bcst(string mnemonic, InstrOpInfoFlags flagsNoBroadcast);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_bnd : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_bnd(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_cc : InstrInfo {
    private int ccIndex;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_cc(int ccIndex, String[] mnemonics);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_DeclareData : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpKind opKind;
    public SimpleInstrInfo_DeclareData(Code code, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_imul : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_imul(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_invlpga : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_invlpga(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_maskmovq : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_maskmovq(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_memsize : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_memsize(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_movabs : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_movabs(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_nop : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private Register register;
    private static FormatterString str_xchg;
    public SimpleInstrInfo_nop(int bitness, string mnemonic, Register register);
    private static SimpleInstrInfo_nop();
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_opmask_op : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_opmask_op(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_os : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_os(int bitness, string mnemonic);
    public SimpleInstrInfo_os(int bitness, string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_os_bnd : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_os_bnd(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_os_jcc : InstrInfo {
    private int bitness;
    private int ccIndex;
    private FormatterString[] mnemonics;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_os_jcc(int bitness, int ccIndex, String[] mnemonics);
    public SimpleInstrInfo_os_jcc(int bitness, int ccIndex, String[] mnemonics, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_os_loop : InstrInfo {
    private int bitness;
    private int ccIndex;
    private Register register;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_os_loop(int bitness, int ccIndex, Register register, String[] mnemonics);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_pclmulqdq : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString[] pseudo_ops;
    public SimpleInstrInfo_pclmulqdq(string mnemonic, FormatterString[] pseudo_ops);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_pops : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString[] pseudo_ops;
    public SimpleInstrInfo_pops(string mnemonic, FormatterString[] pseudo_ops);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    internal static void RemoveLastOp(InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_reg : InstrInfo {
    private FormatterString mnemonic;
    private Register register;
    public SimpleInstrInfo_reg(string mnemonic, Register register);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_Reg16 : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_Reg16(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_Reg32 : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_Reg32(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_ST_STi : InstrInfo {
    private FormatterString mnemonic;
    private bool pseudoOp;
    public SimpleInstrInfo_ST_STi(string mnemonic, bool pseudoOp);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_ST1 : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    private int op0Access;
    public SimpleInstrInfo_ST1(string mnemonic, InstrOpInfoFlags flags);
    public SimpleInstrInfo_ST1(string mnemonic, InstrOpInfoFlags flags, bool isLoad);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_ST2 : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_ST2(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_STi_ST : InstrInfo {
    private FormatterString mnemonic;
    private bool pseudoOp;
    public SimpleInstrInfo_STi_ST(string mnemonic, bool pseudoOp);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_StringIg0 : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_StringIg0(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.IntelFormatterInternal.SimpleInstrInfo_StringIg1 : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_StringIg1(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal enum Iced.Intel.IntelFormatterInternal.SizeOverride : Enum {
    public int value__;
    public static SizeOverride None;
    public static SizeOverride Size16;
    public static SizeOverride Size32;
    public static SizeOverride Size64;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Iced.Intel.Internal.DataReader : ValueType {
    private ReadOnlySpan`1<byte> data;
    private Char[] stringData;
    private int index;
    public int Index { get; public set; }
    public bool CanRead { get; }
    public DataReader(ReadOnlySpan`1<byte> data);
    public DataReader(ReadOnlySpan`1<byte> data, int maxStringLength);
    [IsReadOnlyAttribute]
public int get_Index();
    public void set_Index(int value);
    [IsReadOnlyAttribute]
public bool get_CanRead();
    public byte ReadByte();
    public UInt32 ReadCompressedUInt32();
    public string ReadAsciiString();
}
public interface Iced.Intel.ISymbolResolver {
    public abstract virtual bool TryGetSymbol(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, int instructionOperand, ulong address, int addressSize, SymbolResult& symbol);
}
public interface Iced.Intel.IVARegisterValueProvider {
    public abstract virtual ulong GetRegisterValue(Register register, int elementIndex, int elementSize);
}
public interface Iced.Intel.IVATryGetRegisterValueProvider {
    public abstract virtual bool TryGetRegisterValue(Register register, int elementIndex, int elementSize, UInt64& value);
}
public class Iced.Intel.Label : ValueType {
    [NullableAttribute("1")]
public string Name;
    public ulong Id;
    [CompilerGeneratedAttribute]
private int <InstructionIndex>k__BackingField;
    public int InstructionIndex { get; internal set; }
    public bool IsEmpty { get; }
    internal Label(string name, ulong id);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_InstructionIndex();
    [CompilerGeneratedAttribute]
internal void set_InstructionIndex(int value);
    [IsReadOnlyAttribute]
public bool get_IsEmpty();
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(Label other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(Label left, Label right);
    public static bool op_Inequality(Label left, Label right);
}
public enum Iced.Intel.MandatoryPrefix : Enum {
    public int value__;
    public static MandatoryPrefix None;
    public static MandatoryPrefix PNP;
    public static MandatoryPrefix P66;
    public static MandatoryPrefix PF3;
    public static MandatoryPrefix PF2;
}
internal enum Iced.Intel.MandatoryPrefixByte : Enum {
    public UInt32 value__;
    public static MandatoryPrefixByte None;
    public static MandatoryPrefixByte P66;
    public static MandatoryPrefixByte PF3;
    public static MandatoryPrefixByte PF2;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.MasmFormatter : Formatter {
    private FormatterOptions options;
    private ISymbolResolver symbolResolver;
    private IFormatterOptionsProvider optionsProvider;
    private FormatterString[] allRegisters;
    private InstrInfo[] instrInfos;
    private Info[] allMemorySizes;
    private NumberFormatter numberFormatter;
    private FormatterString[] rcStrings;
    private FormatterString[] rcSaeStrings;
    private String[] scaleNumbers;
    private FormatterString[] mvexRegMemConsts32;
    private FormatterString[] mvexRegMemConsts64;
    private static FormatterString str_bnd;
    private static FormatterString str_far;
    private static FormatterString str_hnt;
    private static FormatterString str_ht;
    private static FormatterString str_lock;
    private static FormatterString str_near;
    private static FormatterString str_notrack;
    private static FormatterString str_offset;
    private static FormatterString str_ptr;
    private static FormatterString str_rep;
    private static FormatterString[] str_repe;
    private static FormatterString[] str_repne;
    private static FormatterString str_sae;
    private static FormatterString str_short;
    private static FormatterString str_xacquire;
    private static FormatterString str_xrelease;
    private static FormatterString str_z;
    private static FormatterString[] s_rcStrings;
    private static FormatterString[] s_rcSaeStrings;
    private static String[] s_scaleNumbers;
    private static FormatterString[] s_mvexRegMemConsts32;
    private static FormatterString[] s_mvexRegMemConsts64;
    private static FormatterString str_eh;
    public FormatterOptions Options { get; }
    [NullableContextAttribute("2")]
public MasmFormatter(ISymbolResolver symbolResolver, IFormatterOptionsProvider optionsProvider);
    [NullableContextAttribute("2")]
public MasmFormatter(FormatterOptions options, ISymbolResolver symbolResolver, IFormatterOptionsProvider optionsProvider);
    private static MasmFormatter();
    public virtual FormatterOptions get_Options();
    public virtual void FormatMnemonic(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, FormatMnemonicOptions options);
    public virtual int GetOperandCount(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
    public virtual bool TryGetOpAccess(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, OpAccess& access);
    public virtual int GetInstructionOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual int GetFormatterOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int instructionOperand);
    public virtual void FormatOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, int operand);
    public virtual void FormatOperandSeparator(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public virtual void FormatAllOperands(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public virtual void Format(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    private void FormatMnemonic(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo, Int32& column, FormatMnemonicOptions mnemonicOptions);
    private bool ShowSegmentPrefix(Instruction& instruction, InstrOpInfo& opInfo);
    private void FormatPrefix(FormatterOutput output, Instruction& instruction, Int32& column, FormatterString prefix, PrefixKind prefixKind, Boolean& needSpace);
    private void FormatOperands(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo);
    private void FormatOperand(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo, int operand);
    private void FormatDecorator(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, FormatterString text, DecoratorKind decorator);
    private string ToRegisterString(Register reg);
    private void FormatRegister(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, Register reg);
    private void FormatMemory(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, Register segReg, Register baseReg, Register indexReg, int scale, int displSize, long displ, int addrSize, InstrOpInfoFlags flags);
    private void FormatMemoryDispl(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, SymbolResult& symbol, NumberFormattingOptions& numberOptions, ulong absAddr, long displ, int displSize, int addrSize, bool useSymbol, bool needPlus, bool forceDispl);
    private void FormatMemorySize(FormatterOutput output, Instruction& instruction, SymbolResult& symbol, MemorySize memSize, InstrOpInfoFlags flags, FormatterOperandOptions operandOptions, bool useSymbol);
    private bool IsSameMemSize(FormatterString[] memSizeStrings, bool isBroadcast, SymbolResult& symbol);
    private static bool IsSameMemSize(FormatterString[] a, FormatterString[] b);
    private void FormatKeyword(FormatterOutput output, FormatterString keyword);
    private void FormatFlowControl(FormatterOutput output, FormatterFlowControl kind, FormatterOperandOptions operandOptions);
    public virtual string Format(Register register);
    public virtual string FormatInt8(sbyte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt16(short value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt32(int value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt64(long value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt8(byte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt16(ushort value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt32(UInt32 value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt64(ulong value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
}
internal enum Iced.Intel.MasmFormatterInternal.CtorKind : Enum {
    public int value__;
    public static CtorKind Previous;
    public static CtorKind Normal_1;
    public static CtorKind Normal_2;
    public static CtorKind AamAad;
    public static CtorKind AX;
    public static CtorKind AY;
    public static CtorKind bnd;
    public static CtorKind STIG1;
    public static CtorKind DeclareData;
    public static CtorKind DX;
    public static CtorKind fword;
    public static CtorKind Int3;
    public static CtorKind imul;
    public static CtorKind invlpga;
    public static CtorKind CCa_1;
    public static CtorKind CCa_2;
    public static CtorKind CCa_3;
    public static CtorKind CCb_1;
    public static CtorKind CCb_2;
    public static CtorKind CCb_3;
    public static CtorKind jcc_1;
    public static CtorKind jcc_2;
    public static CtorKind jcc_3;
    public static CtorKind Loopcc1;
    public static CtorKind Loopcc2;
    public static CtorKind maskmovq;
    public static CtorKind memsize;
    public static CtorKind YD;
    public static CtorKind YX;
    public static CtorKind monitor;
    public static CtorKind mwait;
    public static CtorKind mwaitx;
    public static CtorKind nop;
    public static CtorKind OpSize_1;
    public static CtorKind OpSize_2;
    public static CtorKind OpSize2;
    public static CtorKind YA;
    public static CtorKind pblendvb;
    public static CtorKind pclmulqdq;
    public static CtorKind pops_2;
    public static CtorKind pops_3;
    public static CtorKind XY;
    public static CtorKind reg;
    public static CtorKind Reg16;
    public static CtorKind Reg32;
    public static CtorKind reverse;
    public static CtorKind ST_STi;
    public static CtorKind STi_ST;
    public static CtorKind XLAT;
}
internal abstract class Iced.Intel.MasmFormatterInternal.InstrInfo : object {
    public static int OpAccess_INVALID;
    public static int OpAccess_None;
    public static int OpAccess_Read;
    public static int OpAccess_CondRead;
    public static int OpAccess_Write;
    public static int OpAccess_CondWrite;
    public static int OpAccess_ReadWrite;
    public static int OpAccess_ReadCondWrite;
    public static int OpAccess_NoMemAccess;
    public abstract virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    protected static int GetBitness(CodeSize codeSize);
}
internal static class Iced.Intel.MasmFormatterInternal.InstrInfos : object {
    public static InstrInfo[] AllInfos;
    private static InstrInfos();
    private static string AddSuffix(string s, Char[] ca);
    private static string AddPrefix(string s, Char[] ca);
    private static InstrInfo[] ReadInfos();
    private static ReadOnlySpan`1<byte> GetSerializedInstrInfos();
}
internal class Iced.Intel.MasmFormatterInternal.InstrOpInfo : ValueType {
    internal static int TEST_RegisterBits;
    public FormatterString Mnemonic;
    public InstrOpInfoFlags Flags;
    public byte OpCount;
    public InstrOpKind Op0Kind;
    public InstrOpKind Op1Kind;
    public InstrOpKind Op2Kind;
    public InstrOpKind Op3Kind;
    public InstrOpKind Op4Kind;
    public byte Op0Register;
    public byte Op1Register;
    public byte Op2Register;
    public byte Op3Register;
    public byte Op4Register;
    public sbyte Op0Index;
    public sbyte Op1Index;
    public sbyte Op2Index;
    public sbyte Op3Index;
    public sbyte Op4Index;
    public InstrOpInfo(FormatterString mnemonic, Instruction& instruction, InstrOpInfoFlags flags);
    [IsReadOnlyAttribute]
public Register GetOpRegister(int operand);
    [IsReadOnlyAttribute]
public InstrOpKind GetOpKind(int operand);
    [IsReadOnlyAttribute]
public int GetInstructionIndex(int operand);
    [IsReadOnlyAttribute]
public bool TryGetOpAccess(int operand, OpAccess& access);
    [IsReadOnlyAttribute]
public int GetOperandIndex(int instructionOperand);
}
[FlagsAttribute]
internal enum Iced.Intel.MasmFormatterInternal.InstrOpInfoFlags : Enum {
    public ushort value__;
    public static InstrOpInfoFlags None;
    public static InstrOpInfoFlags MemSize_Mask;
    public static InstrOpInfoFlags MemSize_Sse;
    public static InstrOpInfoFlags MemSize_Mmx;
    public static InstrOpInfoFlags MemSize_Normal;
    public static InstrOpInfoFlags MemSize_Nothing;
    public static InstrOpInfoFlags MemSize_XmmwordPtr;
    public static InstrOpInfoFlags MemSize_DwordOrQword;
    public static InstrOpInfoFlags ShowNoMemSize_ForceSize;
    public static InstrOpInfoFlags ShowMinMemSize_ForceSize;
    public static InstrOpInfoFlags JccNotTaken;
    public static InstrOpInfoFlags JccTaken;
    public static InstrOpInfoFlags BndPrefix;
    public static InstrOpInfoFlags IgnoreIndexReg;
    public static InstrOpInfoFlags MnemonicIsDirective;
}
internal enum Iced.Intel.MasmFormatterInternal.InstrOpKind : Enum {
    public byte value__;
    public static InstrOpKind Register;
    public static InstrOpKind NearBranch16;
    public static InstrOpKind NearBranch32;
    public static InstrOpKind NearBranch64;
    public static InstrOpKind FarBranch16;
    public static InstrOpKind FarBranch32;
    public static InstrOpKind Immediate8;
    public static InstrOpKind Immediate8_2nd;
    public static InstrOpKind Immediate16;
    public static InstrOpKind Immediate32;
    public static InstrOpKind Immediate64;
    public static InstrOpKind Immediate8to16;
    public static InstrOpKind Immediate8to32;
    public static InstrOpKind Immediate8to64;
    public static InstrOpKind Immediate32to64;
    public static InstrOpKind MemorySegSI;
    public static InstrOpKind MemorySegESI;
    public static InstrOpKind MemorySegRSI;
    public static InstrOpKind MemorySegDI;
    public static InstrOpKind MemorySegEDI;
    public static InstrOpKind MemorySegRDI;
    public static InstrOpKind MemoryESDI;
    public static InstrOpKind MemoryESEDI;
    public static InstrOpKind MemoryESRDI;
    public static InstrOpKind Memory;
    public static InstrOpKind ExtraImmediate8_Value3;
    public static InstrOpKind DeclareByte;
    public static InstrOpKind DeclareWord;
    public static InstrOpKind DeclareDword;
    public static InstrOpKind DeclareQword;
}
internal static class Iced.Intel.MasmFormatterInternal.MemorySizes : object {
    internal static FormatterString[] dword_ptr;
    internal static FormatterString[] qword_ptr;
    internal static FormatterString[] mmword_ptr;
    internal static FormatterString[] xmmword_ptr;
    internal static FormatterString[] oword_ptr;
    public static Info[] AllMemorySizes;
    private static MemorySizes();
    private static Info[] GetMemorySizes();
}
internal static class Iced.Intel.MasmFormatterInternal.Registers : object {
    public static Register Register_ST;
    public static FormatterString[] AllRegisters;
    private static Registers();
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo(string mnemonic);
    public SimpleInstrInfo(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_AamAad : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_AamAad(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_AX : InstrInfo {
    private FormatterString mnemonic_args;
    private FormatterString mnemonic_no_args;
    private static InstrOpInfoFlags flags;
    public SimpleInstrInfo_AX(string mnemonic_args, string mnemonic_no_args);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_AY : InstrInfo {
    private FormatterString mnemonic_args;
    private FormatterString mnemonic_no_args;
    private static InstrOpInfoFlags flags;
    public SimpleInstrInfo_AY(string mnemonic_args, string mnemonic_no_args);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_bnd : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_bnd(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_cc : InstrInfo {
    private int ccIndex;
    private FormatterString[] mnemonics;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_cc(int ccIndex, String[] mnemonics);
    public SimpleInstrInfo_cc(int ccIndex, String[] mnemonics, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_DeclareData : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpKind opKind;
    public SimpleInstrInfo_DeclareData(Code code, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_DX : InstrInfo {
    private FormatterString mnemonic_args;
    private FormatterString mnemonic_no_args;
    private static InstrOpInfoFlags flags;
    public SimpleInstrInfo_DX(string mnemonic_args, string mnemonic_no_args);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_fword : InstrInfo {
    private CodeSize codeSize;
    private InstrOpInfoFlags flags;
    private FormatterString mnemonic;
    private FormatterString mnemonic2;
    public SimpleInstrInfo_fword(CodeSize codeSize, InstrOpInfoFlags flags, string mnemonic, string mnemonic2);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_imul : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_imul(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_Int3 : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_Int3(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_invlpga : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_invlpga(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_jcc : InstrInfo {
    private int ccIndex;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_jcc(int ccIndex, String[] mnemonics);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_maskmovq : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_maskmovq(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_memsize : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_memsize(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_monitor : InstrInfo {
    private FormatterString mnemonic;
    private Register register1;
    private Register register2;
    private Register register3;
    public SimpleInstrInfo_monitor(string mnemonic, Register register1, Register register2, Register register3);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_mwait : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_mwait(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_mwaitx : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_mwaitx(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_nop : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private Register register;
    private static FormatterString str_xchg;
    public SimpleInstrInfo_nop(int bitness, string mnemonic, Register register);
    private static SimpleInstrInfo_nop();
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_OpSize : InstrInfo {
    private CodeSize codeSize;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_OpSize(CodeSize codeSize, string mnemonic, string mnemonic16, string mnemonic32, string mnemonic64);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_OpSize_cc : InstrInfo {
    private CodeSize codeSize;
    private int ccIndex;
    private FormatterString[] mnemonics;
    private FormatterString[] mnemonics_other;
    public SimpleInstrInfo_OpSize_cc(CodeSize codeSize, int ccIndex, String[] mnemonics, String[] mnemonics_other);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_OpSize2 : InstrInfo {
    private FormatterString[] mnemonics;
    private bool canUseBnd;
    public SimpleInstrInfo_OpSize2(string mnemonic, string mnemonic16, string mnemonic32, string mnemonic64, bool canUseBnd);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_pblendvb : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_pblendvb(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_pclmulqdq : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString[] pseudo_ops;
    public SimpleInstrInfo_pclmulqdq(string mnemonic, FormatterString[] pseudo_ops);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_pops : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString[] pseudo_ops;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_pops(string mnemonic, FormatterString[] pseudo_ops);
    public SimpleInstrInfo_pops(string mnemonic, FormatterString[] pseudo_ops, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    internal static void RemoveLastOp(InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_reg : InstrInfo {
    private FormatterString mnemonic;
    private Register register;
    public SimpleInstrInfo_reg(string mnemonic, Register register);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_Reg16 : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_Reg16(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_Reg32 : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_Reg32(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_reverse : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_reverse(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_ST_STi : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_ST_STi(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_STi_ST : InstrInfo {
    private FormatterString mnemonic;
    private bool pseudoOp;
    public SimpleInstrInfo_STi_ST(string mnemonic, bool pseudoOp);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_STIG1 : InstrInfo {
    private FormatterString mnemonic;
    private bool pseudoOp;
    public SimpleInstrInfo_STIG1(string mnemonic, bool pseudoOp);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_XLAT : InstrInfo {
    private FormatterString mnemonic_args;
    private FormatterString mnemonic_no_args;
    public SimpleInstrInfo_XLAT(string mnemonic_args, string mnemonic_no_args);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_XY : InstrInfo {
    private FormatterString mnemonic_args;
    private FormatterString mnemonic_no_args;
    private static InstrOpInfoFlags flags;
    public SimpleInstrInfo_XY(string mnemonic_args, string mnemonic_no_args);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_YA : InstrInfo {
    private FormatterString mnemonic_args;
    private FormatterString mnemonic_no_args;
    private static InstrOpInfoFlags flags;
    public SimpleInstrInfo_YA(string mnemonic_args, string mnemonic_no_args);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_YD : InstrInfo {
    private FormatterString mnemonic_args;
    private FormatterString mnemonic_no_args;
    private static InstrOpInfoFlags flags;
    public SimpleInstrInfo_YD(string mnemonic_args, string mnemonic_no_args);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.MasmFormatterInternal.SimpleInstrInfo_YX : InstrInfo {
    private FormatterString mnemonic_args;
    private FormatterString mnemonic_no_args;
    private static InstrOpInfoFlags flags;
    public SimpleInstrInfo_YX(string mnemonic_args, string mnemonic_no_args);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
[IsReadOnlyAttribute]
public class Iced.Intel.MemoryOperand : ValueType {
    public Register SegmentPrefix;
    public Register Base;
    public Register Index;
    public int Scale;
    public long Displacement;
    public int DisplSize;
    public bool IsBroadcast;
    public MemoryOperand(Register base, Register index, int scale, long displacement, int displSize, bool isBroadcast, Register segmentPrefix);
    public MemoryOperand(Register base, Register index, int scale, bool isBroadcast, Register segmentPrefix);
    public MemoryOperand(Register base, long displacement, int displSize, bool isBroadcast, Register segmentPrefix);
    public MemoryOperand(Register index, int scale, long displacement, int displSize, bool isBroadcast, Register segmentPrefix);
    public MemoryOperand(Register base, long displacement, bool isBroadcast, Register segmentPrefix);
    public MemoryOperand(Register base, Register index, int scale, long displacement, int displSize);
    public MemoryOperand(Register base, Register index, int scale);
    public MemoryOperand(Register base, Register index);
    public MemoryOperand(Register base, long displacement, int displSize);
    public MemoryOperand(Register index, int scale, long displacement, int displSize);
    public MemoryOperand(Register base, long displacement);
    public MemoryOperand(Register base);
    public MemoryOperand(ulong displacement, int displSize);
}
internal enum Iced.Intel.MemoryOperandSize : Enum {
    public int value__;
    public static MemoryOperandSize None;
    public static MemoryOperandSize Byte;
    public static MemoryOperandSize Word;
    public static MemoryOperandSize Dword;
    public static MemoryOperandSize Qword;
    public static MemoryOperandSize Tbyte;
    public static MemoryOperandSize Fword;
    public static MemoryOperandSize Xword;
    public static MemoryOperandSize Yword;
    public static MemoryOperandSize Zword;
}
public enum Iced.Intel.MemorySize : Enum {
    public int value__;
    public static MemorySize Unknown;
    public static MemorySize UInt8;
    public static MemorySize UInt16;
    public static MemorySize UInt32;
    public static MemorySize UInt52;
    public static MemorySize UInt64;
    public static MemorySize UInt128;
    public static MemorySize UInt256;
    public static MemorySize UInt512;
    public static MemorySize Int8;
    public static MemorySize Int16;
    public static MemorySize Int32;
    public static MemorySize Int64;
    public static MemorySize Int128;
    public static MemorySize Int256;
    public static MemorySize Int512;
    public static MemorySize SegPtr16;
    public static MemorySize SegPtr32;
    public static MemorySize SegPtr64;
    public static MemorySize WordOffset;
    public static MemorySize DwordOffset;
    public static MemorySize QwordOffset;
    public static MemorySize Bound16_WordWord;
    public static MemorySize Bound32_DwordDword;
    public static MemorySize Bnd32;
    public static MemorySize Bnd64;
    public static MemorySize Fword6;
    public static MemorySize Fword10;
    public static MemorySize Float16;
    public static MemorySize Float32;
    public static MemorySize Float64;
    public static MemorySize Float80;
    public static MemorySize Float128;
    public static MemorySize BFloat16;
    public static MemorySize FpuEnv14;
    public static MemorySize FpuEnv28;
    public static MemorySize FpuState94;
    public static MemorySize FpuState108;
    public static MemorySize Fxsave_512Byte;
    public static MemorySize Fxsave64_512Byte;
    public static MemorySize Xsave;
    public static MemorySize Xsave64;
    public static MemorySize Bcd;
    public static MemorySize Tilecfg;
    public static MemorySize Tile;
    public static MemorySize SegmentDescSelector;
    public static MemorySize KLHandleAes128;
    public static MemorySize KLHandleAes256;
    public static MemorySize Packed16_UInt8;
    public static MemorySize Packed16_Int8;
    public static MemorySize Packed32_UInt8;
    public static MemorySize Packed32_Int8;
    public static MemorySize Packed32_UInt16;
    public static MemorySize Packed32_Int16;
    public static MemorySize Packed32_Float16;
    public static MemorySize Packed32_BFloat16;
    public static MemorySize Packed64_UInt8;
    public static MemorySize Packed64_Int8;
    public static MemorySize Packed64_UInt16;
    public static MemorySize Packed64_Int16;
    public static MemorySize Packed64_UInt32;
    public static MemorySize Packed64_Int32;
    public static MemorySize Packed64_Float16;
    public static MemorySize Packed64_Float32;
    public static MemorySize Packed128_UInt8;
    public static MemorySize Packed128_Int8;
    public static MemorySize Packed128_UInt16;
    public static MemorySize Packed128_Int16;
    public static MemorySize Packed128_UInt32;
    public static MemorySize Packed128_Int32;
    public static MemorySize Packed128_UInt52;
    public static MemorySize Packed128_UInt64;
    public static MemorySize Packed128_Int64;
    public static MemorySize Packed128_Float16;
    public static MemorySize Packed128_Float32;
    public static MemorySize Packed128_Float64;
    public static MemorySize Packed128_BFloat16;
    public static MemorySize Packed128_2xFloat16;
    public static MemorySize Packed128_2xBFloat16;
    public static MemorySize Packed256_UInt8;
    public static MemorySize Packed256_Int8;
    public static MemorySize Packed256_UInt16;
    public static MemorySize Packed256_Int16;
    public static MemorySize Packed256_UInt32;
    public static MemorySize Packed256_Int32;
    public static MemorySize Packed256_UInt52;
    public static MemorySize Packed256_UInt64;
    public static MemorySize Packed256_Int64;
    public static MemorySize Packed256_UInt128;
    public static MemorySize Packed256_Int128;
    public static MemorySize Packed256_Float16;
    public static MemorySize Packed256_Float32;
    public static MemorySize Packed256_Float64;
    public static MemorySize Packed256_Float128;
    public static MemorySize Packed256_BFloat16;
    public static MemorySize Packed256_2xFloat16;
    public static MemorySize Packed256_2xBFloat16;
    public static MemorySize Packed512_UInt8;
    public static MemorySize Packed512_Int8;
    public static MemorySize Packed512_UInt16;
    public static MemorySize Packed512_Int16;
    public static MemorySize Packed512_UInt32;
    public static MemorySize Packed512_Int32;
    public static MemorySize Packed512_UInt52;
    public static MemorySize Packed512_UInt64;
    public static MemorySize Packed512_Int64;
    public static MemorySize Packed512_UInt128;
    public static MemorySize Packed512_Float16;
    public static MemorySize Packed512_Float32;
    public static MemorySize Packed512_Float64;
    public static MemorySize Packed512_2xFloat16;
    public static MemorySize Packed512_2xBFloat16;
    public static MemorySize Broadcast32_Float16;
    public static MemorySize Broadcast64_UInt32;
    public static MemorySize Broadcast64_Int32;
    public static MemorySize Broadcast64_Float16;
    public static MemorySize Broadcast64_Float32;
    public static MemorySize Broadcast128_Int16;
    public static MemorySize Broadcast128_UInt16;
    public static MemorySize Broadcast128_UInt32;
    public static MemorySize Broadcast128_Int32;
    public static MemorySize Broadcast128_UInt52;
    public static MemorySize Broadcast128_UInt64;
    public static MemorySize Broadcast128_Int64;
    public static MemorySize Broadcast128_Float16;
    public static MemorySize Broadcast128_Float32;
    public static MemorySize Broadcast128_Float64;
    public static MemorySize Broadcast128_2xInt16;
    public static MemorySize Broadcast128_2xInt32;
    public static MemorySize Broadcast128_2xUInt32;
    public static MemorySize Broadcast128_2xFloat16;
    public static MemorySize Broadcast128_2xBFloat16;
    public static MemorySize Broadcast256_Int16;
    public static MemorySize Broadcast256_UInt16;
    public static MemorySize Broadcast256_UInt32;
    public static MemorySize Broadcast256_Int32;
    public static MemorySize Broadcast256_UInt52;
    public static MemorySize Broadcast256_UInt64;
    public static MemorySize Broadcast256_Int64;
    public static MemorySize Broadcast256_Float16;
    public static MemorySize Broadcast256_Float32;
    public static MemorySize Broadcast256_Float64;
    public static MemorySize Broadcast256_2xInt16;
    public static MemorySize Broadcast256_2xInt32;
    public static MemorySize Broadcast256_2xUInt32;
    public static MemorySize Broadcast256_2xFloat16;
    public static MemorySize Broadcast256_2xBFloat16;
    public static MemorySize Broadcast512_Int16;
    public static MemorySize Broadcast512_UInt16;
    public static MemorySize Broadcast512_UInt32;
    public static MemorySize Broadcast512_Int32;
    public static MemorySize Broadcast512_UInt52;
    public static MemorySize Broadcast512_UInt64;
    public static MemorySize Broadcast512_Int64;
    public static MemorySize Broadcast512_Float16;
    public static MemorySize Broadcast512_Float32;
    public static MemorySize Broadcast512_Float64;
    public static MemorySize Broadcast512_2xFloat16;
    public static MemorySize Broadcast512_2xInt16;
    public static MemorySize Broadcast512_2xUInt32;
    public static MemorySize Broadcast512_2xInt32;
    public static MemorySize Broadcast512_2xBFloat16;
}
[ExtensionAttribute]
public static class Iced.Intel.MemorySizeExtensions : object {
    internal static MemorySizeInfo[] MemorySizeInfos;
    private static MemorySizeExtensions();
    [ExtensionAttribute]
public static bool IsBroadcast(MemorySize memorySize);
    private static MemorySizeInfo[] GetMemorySizeInfos();
    [ExtensionAttribute]
public static MemorySizeInfo GetInfo(MemorySize memorySize);
    [ExtensionAttribute]
public static int GetSize(MemorySize memorySize);
    [ExtensionAttribute]
public static int GetElementSize(MemorySize memorySize);
    [ExtensionAttribute]
public static MemorySize GetElementType(MemorySize memorySize);
    [ExtensionAttribute]
public static MemorySizeInfo GetElementTypeInfo(MemorySize memorySize);
    [ExtensionAttribute]
public static bool IsSigned(MemorySize memorySize);
    [ExtensionAttribute]
public static bool IsPacked(MemorySize memorySize);
    [ExtensionAttribute]
public static int GetElementCount(MemorySize memorySize);
}
[IsReadOnlyAttribute]
public class Iced.Intel.MemorySizeInfo : ValueType {
    private ushort size;
    private ushort elementSize;
    private byte memorySize;
    private byte elementType;
    private bool isSigned;
    private bool isBroadcast;
    public MemorySize MemorySize { get; }
    public int Size { get; }
    public int ElementSize { get; }
    public MemorySize ElementType { get; }
    public bool IsSigned { get; }
    public bool IsBroadcast { get; }
    public bool IsPacked { get; }
    public int ElementCount { get; }
    public MemorySizeInfo(MemorySize memorySize, int size, int elementSize, MemorySize elementType, bool isSigned, bool isBroadcast);
    public MemorySize get_MemorySize();
    public int get_Size();
    public int get_ElementSize();
    public MemorySize get_ElementType();
    public bool get_IsSigned();
    public bool get_IsBroadcast();
    public bool get_IsPacked();
    public int get_ElementCount();
}
public enum Iced.Intel.MemorySizeOptions : Enum {
    public int value__;
    public static MemorySizeOptions Default;
    public static MemorySizeOptions Always;
    public static MemorySizeOptions Minimal;
    public static MemorySizeOptions Never;
}
public enum Iced.Intel.Mnemonic : Enum {
    public int value__;
    public static Mnemonic INVALID;
    public static Mnemonic Aaa;
    public static Mnemonic Aad;
    public static Mnemonic Aam;
    public static Mnemonic Aas;
    public static Mnemonic Adc;
    public static Mnemonic Adcx;
    public static Mnemonic Add;
    public static Mnemonic Addpd;
    public static Mnemonic Addps;
    public static Mnemonic Addsd;
    public static Mnemonic Addss;
    public static Mnemonic Addsubpd;
    public static Mnemonic Addsubps;
    public static Mnemonic Adox;
    public static Mnemonic Aesdec;
    public static Mnemonic Aesdeclast;
    public static Mnemonic Aesenc;
    public static Mnemonic Aesenclast;
    public static Mnemonic Aesimc;
    public static Mnemonic Aeskeygenassist;
    public static Mnemonic And;
    public static Mnemonic Andn;
    public static Mnemonic Andnpd;
    public static Mnemonic Andnps;
    public static Mnemonic Andpd;
    public static Mnemonic Andps;
    public static Mnemonic Arpl;
    public static Mnemonic Bextr;
    public static Mnemonic Blcfill;
    public static Mnemonic Blci;
    public static Mnemonic Blcic;
    public static Mnemonic Blcmsk;
    public static Mnemonic Blcs;
    public static Mnemonic Blendpd;
    public static Mnemonic Blendps;
    public static Mnemonic Blendvpd;
    public static Mnemonic Blendvps;
    public static Mnemonic Blsfill;
    public static Mnemonic Blsi;
    public static Mnemonic Blsic;
    public static Mnemonic Blsmsk;
    public static Mnemonic Blsr;
    public static Mnemonic Bndcl;
    public static Mnemonic Bndcn;
    public static Mnemonic Bndcu;
    public static Mnemonic Bndldx;
    public static Mnemonic Bndmk;
    public static Mnemonic Bndmov;
    public static Mnemonic Bndstx;
    public static Mnemonic Bound;
    public static Mnemonic Bsf;
    public static Mnemonic Bsr;
    public static Mnemonic Bswap;
    public static Mnemonic Bt;
    public static Mnemonic Btc;
    public static Mnemonic Btr;
    public static Mnemonic Bts;
    public static Mnemonic Bzhi;
    public static Mnemonic Call;
    public static Mnemonic Cbw;
    public static Mnemonic Cdq;
    public static Mnemonic Cdqe;
    public static Mnemonic Cl1invmb;
    public static Mnemonic Clac;
    public static Mnemonic Clc;
    public static Mnemonic Cld;
    public static Mnemonic Cldemote;
    public static Mnemonic Clflush;
    public static Mnemonic Clflushopt;
    public static Mnemonic Clgi;
    public static Mnemonic Cli;
    public static Mnemonic Clrssbsy;
    public static Mnemonic Clts;
    public static Mnemonic Clwb;
    public static Mnemonic Clzero;
    public static Mnemonic Cmc;
    public static Mnemonic Cmova;
    public static Mnemonic Cmovae;
    public static Mnemonic Cmovb;
    public static Mnemonic Cmovbe;
    public static Mnemonic Cmove;
    public static Mnemonic Cmovg;
    public static Mnemonic Cmovge;
    public static Mnemonic Cmovl;
    public static Mnemonic Cmovle;
    public static Mnemonic Cmovne;
    public static Mnemonic Cmovno;
    public static Mnemonic Cmovnp;
    public static Mnemonic Cmovns;
    public static Mnemonic Cmovo;
    public static Mnemonic Cmovp;
    public static Mnemonic Cmovs;
    public static Mnemonic Cmp;
    public static Mnemonic Cmppd;
    public static Mnemonic Cmpps;
    public static Mnemonic Cmpsb;
    public static Mnemonic Cmpsd;
    public static Mnemonic Cmpsq;
    public static Mnemonic Cmpss;
    public static Mnemonic Cmpsw;
    public static Mnemonic Cmpxchg;
    public static Mnemonic Cmpxchg16b;
    public static Mnemonic Cmpxchg8b;
    public static Mnemonic Comisd;
    public static Mnemonic Comiss;
    public static Mnemonic Cpuid;
    public static Mnemonic Cqo;
    public static Mnemonic Crc32;
    public static Mnemonic Cvtdq2pd;
    public static Mnemonic Cvtdq2ps;
    public static Mnemonic Cvtpd2dq;
    public static Mnemonic Cvtpd2pi;
    public static Mnemonic Cvtpd2ps;
    public static Mnemonic Cvtpi2pd;
    public static Mnemonic Cvtpi2ps;
    public static Mnemonic Cvtps2dq;
    public static Mnemonic Cvtps2pd;
    public static Mnemonic Cvtps2pi;
    public static Mnemonic Cvtsd2si;
    public static Mnemonic Cvtsd2ss;
    public static Mnemonic Cvtsi2sd;
    public static Mnemonic Cvtsi2ss;
    public static Mnemonic Cvtss2sd;
    public static Mnemonic Cvtss2si;
    public static Mnemonic Cvttpd2dq;
    public static Mnemonic Cvttpd2pi;
    public static Mnemonic Cvttps2dq;
    public static Mnemonic Cvttps2pi;
    public static Mnemonic Cvttsd2si;
    public static Mnemonic Cvttss2si;
    public static Mnemonic Cwd;
    public static Mnemonic Cwde;
    public static Mnemonic Daa;
    public static Mnemonic Das;
    public static Mnemonic Db;
    public static Mnemonic Dd;
    public static Mnemonic Dec;
    public static Mnemonic Div;
    public static Mnemonic Divpd;
    public static Mnemonic Divps;
    public static Mnemonic Divsd;
    public static Mnemonic Divss;
    public static Mnemonic Dppd;
    public static Mnemonic Dpps;
    public static Mnemonic Dq;
    public static Mnemonic Dw;
    public static Mnemonic Emms;
    public static Mnemonic Encls;
    public static Mnemonic Enclu;
    public static Mnemonic Enclv;
    public static Mnemonic Endbr32;
    public static Mnemonic Endbr64;
    public static Mnemonic Enqcmd;
    public static Mnemonic Enqcmds;
    public static Mnemonic Enter;
    public static Mnemonic Extractps;
    public static Mnemonic Extrq;
    public static Mnemonic F2xm1;
    public static Mnemonic Fabs;
    public static Mnemonic Fadd;
    public static Mnemonic Faddp;
    public static Mnemonic Fbld;
    public static Mnemonic Fbstp;
    public static Mnemonic Fchs;
    public static Mnemonic Fclex;
    public static Mnemonic Fcmovb;
    public static Mnemonic Fcmovbe;
    public static Mnemonic Fcmove;
    public static Mnemonic Fcmovnb;
    public static Mnemonic Fcmovnbe;
    public static Mnemonic Fcmovne;
    public static Mnemonic Fcmovnu;
    public static Mnemonic Fcmovu;
    public static Mnemonic Fcom;
    public static Mnemonic Fcomi;
    public static Mnemonic Fcomip;
    public static Mnemonic Fcomp;
    public static Mnemonic Fcompp;
    public static Mnemonic Fcos;
    public static Mnemonic Fdecstp;
    public static Mnemonic Fdisi;
    public static Mnemonic Fdiv;
    public static Mnemonic Fdivp;
    public static Mnemonic Fdivr;
    public static Mnemonic Fdivrp;
    public static Mnemonic Femms;
    public static Mnemonic Feni;
    public static Mnemonic Ffree;
    public static Mnemonic Ffreep;
    public static Mnemonic Fiadd;
    public static Mnemonic Ficom;
    public static Mnemonic Ficomp;
    public static Mnemonic Fidiv;
    public static Mnemonic Fidivr;
    public static Mnemonic Fild;
    public static Mnemonic Fimul;
    public static Mnemonic Fincstp;
    public static Mnemonic Finit;
    public static Mnemonic Fist;
    public static Mnemonic Fistp;
    public static Mnemonic Fisttp;
    public static Mnemonic Fisub;
    public static Mnemonic Fisubr;
    public static Mnemonic Fld;
    public static Mnemonic Fld1;
    public static Mnemonic Fldcw;
    public static Mnemonic Fldenv;
    public static Mnemonic Fldl2e;
    public static Mnemonic Fldl2t;
    public static Mnemonic Fldlg2;
    public static Mnemonic Fldln2;
    public static Mnemonic Fldpi;
    public static Mnemonic Fldz;
    public static Mnemonic Fmul;
    public static Mnemonic Fmulp;
    public static Mnemonic Fnclex;
    public static Mnemonic Fndisi;
    public static Mnemonic Fneni;
    public static Mnemonic Fninit;
    public static Mnemonic Fnop;
    public static Mnemonic Fnsave;
    public static Mnemonic Fnsetpm;
    public static Mnemonic Fnstcw;
    public static Mnemonic Fnstenv;
    public static Mnemonic Fnstsw;
    public static Mnemonic Fpatan;
    public static Mnemonic Fprem;
    public static Mnemonic Fprem1;
    public static Mnemonic Fptan;
    public static Mnemonic Frndint;
    public static Mnemonic Frstor;
    public static Mnemonic Frstpm;
    public static Mnemonic Fsave;
    public static Mnemonic Fscale;
    public static Mnemonic Fsetpm;
    public static Mnemonic Fsin;
    public static Mnemonic Fsincos;
    public static Mnemonic Fsqrt;
    public static Mnemonic Fst;
    public static Mnemonic Fstcw;
    public static Mnemonic Fstdw;
    public static Mnemonic Fstenv;
    public static Mnemonic Fstp;
    public static Mnemonic Fstpnce;
    public static Mnemonic Fstsg;
    public static Mnemonic Fstsw;
    public static Mnemonic Fsub;
    public static Mnemonic Fsubp;
    public static Mnemonic Fsubr;
    public static Mnemonic Fsubrp;
    public static Mnemonic Ftst;
    public static Mnemonic Fucom;
    public static Mnemonic Fucomi;
    public static Mnemonic Fucomip;
    public static Mnemonic Fucomp;
    public static Mnemonic Fucompp;
    public static Mnemonic Fxam;
    public static Mnemonic Fxch;
    public static Mnemonic Fxrstor;
    public static Mnemonic Fxrstor64;
    public static Mnemonic Fxsave;
    public static Mnemonic Fxsave64;
    public static Mnemonic Fxtract;
    public static Mnemonic Fyl2x;
    public static Mnemonic Fyl2xp1;
    public static Mnemonic Getsec;
    public static Mnemonic Gf2p8affineinvqb;
    public static Mnemonic Gf2p8affineqb;
    public static Mnemonic Gf2p8mulb;
    public static Mnemonic Haddpd;
    public static Mnemonic Haddps;
    public static Mnemonic Hlt;
    public static Mnemonic Hsubpd;
    public static Mnemonic Hsubps;
    public static Mnemonic Ibts;
    public static Mnemonic Idiv;
    public static Mnemonic Imul;
    public static Mnemonic In;
    public static Mnemonic Inc;
    public static Mnemonic Incsspd;
    public static Mnemonic Incsspq;
    public static Mnemonic Insb;
    public static Mnemonic Insd;
    public static Mnemonic Insertps;
    public static Mnemonic Insertq;
    public static Mnemonic Insw;
    public static Mnemonic Int;
    public static Mnemonic Int1;
    public static Mnemonic Into;
    public static Mnemonic Invd;
    public static Mnemonic Invept;
    public static Mnemonic Invlpg;
    public static Mnemonic Invlpga;
    public static Mnemonic Invpcid;
    public static Mnemonic Invvpid;
    public static Mnemonic Iret;
    public static Mnemonic Ja;
    public static Mnemonic Jae;
    public static Mnemonic Jb;
    public static Mnemonic Jbe;
    public static Mnemonic Jcxz;
    public static Mnemonic Je;
    public static Mnemonic Jecxz;
    public static Mnemonic Jg;
    public static Mnemonic Jge;
    public static Mnemonic Jl;
    public static Mnemonic Jle;
    public static Mnemonic Jmp;
    public static Mnemonic Jmpe;
    public static Mnemonic Jne;
    public static Mnemonic Jno;
    public static Mnemonic Jnp;
    public static Mnemonic Jns;
    public static Mnemonic Jo;
    public static Mnemonic Jp;
    public static Mnemonic Jrcxz;
    public static Mnemonic Js;
    public static Mnemonic Kaddb;
    public static Mnemonic Kaddd;
    public static Mnemonic Kaddq;
    public static Mnemonic Kaddw;
    public static Mnemonic Kandb;
    public static Mnemonic Kandd;
    public static Mnemonic Kandnb;
    public static Mnemonic Kandnd;
    public static Mnemonic Kandnq;
    public static Mnemonic Kandnw;
    public static Mnemonic Kandq;
    public static Mnemonic Kandw;
    public static Mnemonic Kmovb;
    public static Mnemonic Kmovd;
    public static Mnemonic Kmovq;
    public static Mnemonic Kmovw;
    public static Mnemonic Knotb;
    public static Mnemonic Knotd;
    public static Mnemonic Knotq;
    public static Mnemonic Knotw;
    public static Mnemonic Korb;
    public static Mnemonic Kord;
    public static Mnemonic Korq;
    public static Mnemonic Kortestb;
    public static Mnemonic Kortestd;
    public static Mnemonic Kortestq;
    public static Mnemonic Kortestw;
    public static Mnemonic Korw;
    public static Mnemonic Kshiftlb;
    public static Mnemonic Kshiftld;
    public static Mnemonic Kshiftlq;
    public static Mnemonic Kshiftlw;
    public static Mnemonic Kshiftrb;
    public static Mnemonic Kshiftrd;
    public static Mnemonic Kshiftrq;
    public static Mnemonic Kshiftrw;
    public static Mnemonic Ktestb;
    public static Mnemonic Ktestd;
    public static Mnemonic Ktestq;
    public static Mnemonic Ktestw;
    public static Mnemonic Kunpckbw;
    public static Mnemonic Kunpckdq;
    public static Mnemonic Kunpckwd;
    public static Mnemonic Kxnorb;
    public static Mnemonic Kxnord;
    public static Mnemonic Kxnorq;
    public static Mnemonic Kxnorw;
    public static Mnemonic Kxorb;
    public static Mnemonic Kxord;
    public static Mnemonic Kxorq;
    public static Mnemonic Kxorw;
    public static Mnemonic Lahf;
    public static Mnemonic Lar;
    public static Mnemonic Lddqu;
    public static Mnemonic Ldmxcsr;
    public static Mnemonic Lds;
    public static Mnemonic Lea;
    public static Mnemonic Leave;
    public static Mnemonic Les;
    public static Mnemonic Lfence;
    public static Mnemonic Lfs;
    public static Mnemonic Lgdt;
    public static Mnemonic Lgs;
    public static Mnemonic Lidt;
    public static Mnemonic Lldt;
    public static Mnemonic Llwpcb;
    public static Mnemonic Lmsw;
    public static Mnemonic Loadall;
    public static Mnemonic Lodsb;
    public static Mnemonic Lodsd;
    public static Mnemonic Lodsq;
    public static Mnemonic Lodsw;
    public static Mnemonic Loop;
    public static Mnemonic Loope;
    public static Mnemonic Loopne;
    public static Mnemonic Lsl;
    public static Mnemonic Lss;
    public static Mnemonic Ltr;
    public static Mnemonic Lwpins;
    public static Mnemonic Lwpval;
    public static Mnemonic Lzcnt;
    public static Mnemonic Maskmovdqu;
    public static Mnemonic Maskmovq;
    public static Mnemonic Maxpd;
    public static Mnemonic Maxps;
    public static Mnemonic Maxsd;
    public static Mnemonic Maxss;
    public static Mnemonic Mcommit;
    public static Mnemonic Mfence;
    public static Mnemonic Minpd;
    public static Mnemonic Minps;
    public static Mnemonic Minsd;
    public static Mnemonic Minss;
    public static Mnemonic Monitor;
    public static Mnemonic Monitorx;
    public static Mnemonic Montmul;
    public static Mnemonic Mov;
    public static Mnemonic Movapd;
    public static Mnemonic Movaps;
    public static Mnemonic Movbe;
    public static Mnemonic Movd;
    public static Mnemonic Movddup;
    public static Mnemonic Movdir64b;
    public static Mnemonic Movdiri;
    public static Mnemonic Movdq2q;
    public static Mnemonic Movdqa;
    public static Mnemonic Movdqu;
    public static Mnemonic Movhlps;
    public static Mnemonic Movhpd;
    public static Mnemonic Movhps;
    public static Mnemonic Movlhps;
    public static Mnemonic Movlpd;
    public static Mnemonic Movlps;
    public static Mnemonic Movmskpd;
    public static Mnemonic Movmskps;
    public static Mnemonic Movntdq;
    public static Mnemonic Movntdqa;
    public static Mnemonic Movnti;
    public static Mnemonic Movntpd;
    public static Mnemonic Movntps;
    public static Mnemonic Movntq;
    public static Mnemonic Movntsd;
    public static Mnemonic Movntss;
    public static Mnemonic Movq;
    public static Mnemonic Movq2dq;
    public static Mnemonic Movsb;
    public static Mnemonic Movsd;
    public static Mnemonic Movshdup;
    public static Mnemonic Movsldup;
    public static Mnemonic Movsq;
    public static Mnemonic Movss;
    public static Mnemonic Movsw;
    public static Mnemonic Movsx;
    public static Mnemonic Movsxd;
    public static Mnemonic Movupd;
    public static Mnemonic Movups;
    public static Mnemonic Movzx;
    public static Mnemonic Mpsadbw;
    public static Mnemonic Mul;
    public static Mnemonic Mulpd;
    public static Mnemonic Mulps;
    public static Mnemonic Mulsd;
    public static Mnemonic Mulss;
    public static Mnemonic Mulx;
    public static Mnemonic Mwait;
    public static Mnemonic Mwaitx;
    public static Mnemonic Neg;
    public static Mnemonic Nop;
    public static Mnemonic Not;
    public static Mnemonic Or;
    public static Mnemonic Orpd;
    public static Mnemonic Orps;
    public static Mnemonic Out;
    public static Mnemonic Outsb;
    public static Mnemonic Outsd;
    public static Mnemonic Outsw;
    public static Mnemonic Pabsb;
    public static Mnemonic Pabsd;
    public static Mnemonic Pabsw;
    public static Mnemonic Packssdw;
    public static Mnemonic Packsswb;
    public static Mnemonic Packusdw;
    public static Mnemonic Packuswb;
    public static Mnemonic Paddb;
    public static Mnemonic Paddd;
    public static Mnemonic Paddq;
    public static Mnemonic Paddsb;
    public static Mnemonic Paddsw;
    public static Mnemonic Paddusb;
    public static Mnemonic Paddusw;
    public static Mnemonic Paddw;
    public static Mnemonic Palignr;
    public static Mnemonic Pand;
    public static Mnemonic Pandn;
    public static Mnemonic Pause;
    public static Mnemonic Pavgb;
    public static Mnemonic Pavgusb;
    public static Mnemonic Pavgw;
    public static Mnemonic Pblendvb;
    public static Mnemonic Pblendw;
    public static Mnemonic Pclmulqdq;
    public static Mnemonic Pcmpeqb;
    public static Mnemonic Pcmpeqd;
    public static Mnemonic Pcmpeqq;
    public static Mnemonic Pcmpeqw;
    public static Mnemonic Pcmpestri;
    public static Mnemonic Pcmpestri64;
    public static Mnemonic Pcmpestrm;
    public static Mnemonic Pcmpestrm64;
    public static Mnemonic Pcmpgtb;
    public static Mnemonic Pcmpgtd;
    public static Mnemonic Pcmpgtq;
    public static Mnemonic Pcmpgtw;
    public static Mnemonic Pcmpistri;
    public static Mnemonic Pcmpistrm;
    public static Mnemonic Pcommit;
    public static Mnemonic Pconfig;
    public static Mnemonic Pdep;
    public static Mnemonic Pext;
    public static Mnemonic Pextrb;
    public static Mnemonic Pextrd;
    public static Mnemonic Pextrq;
    public static Mnemonic Pextrw;
    public static Mnemonic Pf2id;
    public static Mnemonic Pf2iw;
    public static Mnemonic Pfacc;
    public static Mnemonic Pfadd;
    public static Mnemonic Pfcmpeq;
    public static Mnemonic Pfcmpge;
    public static Mnemonic Pfcmpgt;
    public static Mnemonic Pfmax;
    public static Mnemonic Pfmin;
    public static Mnemonic Pfmul;
    public static Mnemonic Pfnacc;
    public static Mnemonic Pfpnacc;
    public static Mnemonic Pfrcp;
    public static Mnemonic Pfrcpit1;
    public static Mnemonic Pfrcpit2;
    public static Mnemonic Pfrcpv;
    public static Mnemonic Pfrsqit1;
    public static Mnemonic Pfrsqrt;
    public static Mnemonic Pfrsqrtv;
    public static Mnemonic Pfsub;
    public static Mnemonic Pfsubr;
    public static Mnemonic Phaddd;
    public static Mnemonic Phaddsw;
    public static Mnemonic Phaddw;
    public static Mnemonic Phminposuw;
    public static Mnemonic Phsubd;
    public static Mnemonic Phsubsw;
    public static Mnemonic Phsubw;
    public static Mnemonic Pi2fd;
    public static Mnemonic Pi2fw;
    public static Mnemonic Pinsrb;
    public static Mnemonic Pinsrd;
    public static Mnemonic Pinsrq;
    public static Mnemonic Pinsrw;
    public static Mnemonic Pmaddubsw;
    public static Mnemonic Pmaddwd;
    public static Mnemonic Pmaxsb;
    public static Mnemonic Pmaxsd;
    public static Mnemonic Pmaxsw;
    public static Mnemonic Pmaxub;
    public static Mnemonic Pmaxud;
    public static Mnemonic Pmaxuw;
    public static Mnemonic Pminsb;
    public static Mnemonic Pminsd;
    public static Mnemonic Pminsw;
    public static Mnemonic Pminub;
    public static Mnemonic Pminud;
    public static Mnemonic Pminuw;
    public static Mnemonic Pmovmskb;
    public static Mnemonic Pmovsxbd;
    public static Mnemonic Pmovsxbq;
    public static Mnemonic Pmovsxbw;
    public static Mnemonic Pmovsxdq;
    public static Mnemonic Pmovsxwd;
    public static Mnemonic Pmovsxwq;
    public static Mnemonic Pmovzxbd;
    public static Mnemonic Pmovzxbq;
    public static Mnemonic Pmovzxbw;
    public static Mnemonic Pmovzxdq;
    public static Mnemonic Pmovzxwd;
    public static Mnemonic Pmovzxwq;
    public static Mnemonic Pmuldq;
    public static Mnemonic Pmulhrsw;
    public static Mnemonic Pmulhrw;
    public static Mnemonic Pmulhuw;
    public static Mnemonic Pmulhw;
    public static Mnemonic Pmulld;
    public static Mnemonic Pmullw;
    public static Mnemonic Pmuludq;
    public static Mnemonic Pop;
    public static Mnemonic Popa;
    public static Mnemonic Popcnt;
    public static Mnemonic Popf;
    public static Mnemonic Por;
    public static Mnemonic Prefetch;
    public static Mnemonic Prefetchnta;
    public static Mnemonic Prefetcht0;
    public static Mnemonic Prefetcht1;
    public static Mnemonic Prefetcht2;
    public static Mnemonic Prefetchw;
    public static Mnemonic Prefetchwt1;
    public static Mnemonic Psadbw;
    public static Mnemonic Pshufb;
    public static Mnemonic Pshufd;
    public static Mnemonic Pshufhw;
    public static Mnemonic Pshuflw;
    public static Mnemonic Pshufw;
    public static Mnemonic Psignb;
    public static Mnemonic Psignd;
    public static Mnemonic Psignw;
    public static Mnemonic Pslld;
    public static Mnemonic Pslldq;
    public static Mnemonic Psllq;
    public static Mnemonic Psllw;
    public static Mnemonic Psrad;
    public static Mnemonic Psraw;
    public static Mnemonic Psrld;
    public static Mnemonic Psrldq;
    public static Mnemonic Psrlq;
    public static Mnemonic Psrlw;
    public static Mnemonic Psubb;
    public static Mnemonic Psubd;
    public static Mnemonic Psubq;
    public static Mnemonic Psubsb;
    public static Mnemonic Psubsw;
    public static Mnemonic Psubusb;
    public static Mnemonic Psubusw;
    public static Mnemonic Psubw;
    public static Mnemonic Pswapd;
    public static Mnemonic Ptest;
    public static Mnemonic Ptwrite;
    public static Mnemonic Punpckhbw;
    public static Mnemonic Punpckhdq;
    public static Mnemonic Punpckhqdq;
    public static Mnemonic Punpckhwd;
    public static Mnemonic Punpcklbw;
    public static Mnemonic Punpckldq;
    public static Mnemonic Punpcklqdq;
    public static Mnemonic Punpcklwd;
    public static Mnemonic Push;
    public static Mnemonic Pusha;
    public static Mnemonic Pushf;
    public static Mnemonic Pxor;
    public static Mnemonic Rcl;
    public static Mnemonic Rcpps;
    public static Mnemonic Rcpss;
    public static Mnemonic Rcr;
    public static Mnemonic Rdfsbase;
    public static Mnemonic Rdgsbase;
    public static Mnemonic Rdmsr;
    public static Mnemonic Rdpid;
    public static Mnemonic Rdpkru;
    public static Mnemonic Rdpmc;
    public static Mnemonic Rdpru;
    public static Mnemonic Rdrand;
    public static Mnemonic Rdseed;
    public static Mnemonic Rdsspd;
    public static Mnemonic Rdsspq;
    public static Mnemonic Rdtsc;
    public static Mnemonic Rdtscp;
    public static Mnemonic Reservednop;
    public static Mnemonic Ret;
    public static Mnemonic Retf;
    public static Mnemonic Rol;
    public static Mnemonic Ror;
    public static Mnemonic Rorx;
    public static Mnemonic Roundpd;
    public static Mnemonic Roundps;
    public static Mnemonic Roundsd;
    public static Mnemonic Roundss;
    public static Mnemonic Rsm;
    public static Mnemonic Rsqrtps;
    public static Mnemonic Rsqrtss;
    public static Mnemonic Rstorssp;
    public static Mnemonic Sahf;
    public static Mnemonic Sal;
    public static Mnemonic Salc;
    public static Mnemonic Sar;
    public static Mnemonic Sarx;
    public static Mnemonic Saveprevssp;
    public static Mnemonic Sbb;
    public static Mnemonic Scasb;
    public static Mnemonic Scasd;
    public static Mnemonic Scasq;
    public static Mnemonic Scasw;
    public static Mnemonic Seta;
    public static Mnemonic Setae;
    public static Mnemonic Setb;
    public static Mnemonic Setbe;
    public static Mnemonic Sete;
    public static Mnemonic Setg;
    public static Mnemonic Setge;
    public static Mnemonic Setl;
    public static Mnemonic Setle;
    public static Mnemonic Setne;
    public static Mnemonic Setno;
    public static Mnemonic Setnp;
    public static Mnemonic Setns;
    public static Mnemonic Seto;
    public static Mnemonic Setp;
    public static Mnemonic Sets;
    public static Mnemonic Setssbsy;
    public static Mnemonic Sfence;
    public static Mnemonic Sgdt;
    public static Mnemonic Sha1msg1;
    public static Mnemonic Sha1msg2;
    public static Mnemonic Sha1nexte;
    public static Mnemonic Sha1rnds4;
    public static Mnemonic Sha256msg1;
    public static Mnemonic Sha256msg2;
    public static Mnemonic Sha256rnds2;
    public static Mnemonic Shl;
    public static Mnemonic Shld;
    public static Mnemonic Shlx;
    public static Mnemonic Shr;
    public static Mnemonic Shrd;
    public static Mnemonic Shrx;
    public static Mnemonic Shufpd;
    public static Mnemonic Shufps;
    public static Mnemonic Sidt;
    public static Mnemonic Skinit;
    public static Mnemonic Sldt;
    public static Mnemonic Slwpcb;
    public static Mnemonic Smsw;
    public static Mnemonic Sqrtpd;
    public static Mnemonic Sqrtps;
    public static Mnemonic Sqrtsd;
    public static Mnemonic Sqrtss;
    public static Mnemonic Stac;
    public static Mnemonic Stc;
    public static Mnemonic Std;
    public static Mnemonic Stgi;
    public static Mnemonic Sti;
    public static Mnemonic Stmxcsr;
    public static Mnemonic Stosb;
    public static Mnemonic Stosd;
    public static Mnemonic Stosq;
    public static Mnemonic Stosw;
    public static Mnemonic Str;
    public static Mnemonic Sub;
    public static Mnemonic Subpd;
    public static Mnemonic Subps;
    public static Mnemonic Subsd;
    public static Mnemonic Subss;
    public static Mnemonic Swapgs;
    public static Mnemonic Syscall;
    public static Mnemonic Sysenter;
    public static Mnemonic Sysexit;
    public static Mnemonic Sysret;
    public static Mnemonic T1mskc;
    public static Mnemonic Test;
    public static Mnemonic Tpause;
    public static Mnemonic Tzcnt;
    public static Mnemonic Tzmsk;
    public static Mnemonic Ucomisd;
    public static Mnemonic Ucomiss;
    public static Mnemonic Ud0;
    public static Mnemonic Ud1;
    public static Mnemonic Ud2;
    public static Mnemonic Umonitor;
    public static Mnemonic Umov;
    public static Mnemonic Umwait;
    public static Mnemonic Unpckhpd;
    public static Mnemonic Unpckhps;
    public static Mnemonic Unpcklpd;
    public static Mnemonic Unpcklps;
    public static Mnemonic V4fmaddps;
    public static Mnemonic V4fmaddss;
    public static Mnemonic V4fnmaddps;
    public static Mnemonic V4fnmaddss;
    public static Mnemonic Vaddpd;
    public static Mnemonic Vaddps;
    public static Mnemonic Vaddsd;
    public static Mnemonic Vaddss;
    public static Mnemonic Vaddsubpd;
    public static Mnemonic Vaddsubps;
    public static Mnemonic Vaesdec;
    public static Mnemonic Vaesdeclast;
    public static Mnemonic Vaesenc;
    public static Mnemonic Vaesenclast;
    public static Mnemonic Vaesimc;
    public static Mnemonic Vaeskeygenassist;
    public static Mnemonic Valignd;
    public static Mnemonic Valignq;
    public static Mnemonic Vandnpd;
    public static Mnemonic Vandnps;
    public static Mnemonic Vandpd;
    public static Mnemonic Vandps;
    public static Mnemonic Vblendmpd;
    public static Mnemonic Vblendmps;
    public static Mnemonic Vblendpd;
    public static Mnemonic Vblendps;
    public static Mnemonic Vblendvpd;
    public static Mnemonic Vblendvps;
    public static Mnemonic Vbroadcastf128;
    public static Mnemonic Vbroadcastf32x2;
    public static Mnemonic Vbroadcastf32x4;
    public static Mnemonic Vbroadcastf32x8;
    public static Mnemonic Vbroadcastf64x2;
    public static Mnemonic Vbroadcastf64x4;
    public static Mnemonic Vbroadcasti128;
    public static Mnemonic Vbroadcasti32x2;
    public static Mnemonic Vbroadcasti32x4;
    public static Mnemonic Vbroadcasti32x8;
    public static Mnemonic Vbroadcasti64x2;
    public static Mnemonic Vbroadcasti64x4;
    public static Mnemonic Vbroadcastsd;
    public static Mnemonic Vbroadcastss;
    public static Mnemonic Vcmppd;
    public static Mnemonic Vcmpps;
    public static Mnemonic Vcmpsd;
    public static Mnemonic Vcmpss;
    public static Mnemonic Vcomisd;
    public static Mnemonic Vcomiss;
    public static Mnemonic Vcompresspd;
    public static Mnemonic Vcompressps;
    public static Mnemonic Vcvtdq2pd;
    public static Mnemonic Vcvtdq2ps;
    public static Mnemonic Vcvtne2ps2bf16;
    public static Mnemonic Vcvtneps2bf16;
    public static Mnemonic Vcvtpd2dq;
    public static Mnemonic Vcvtpd2ps;
    public static Mnemonic Vcvtpd2qq;
    public static Mnemonic Vcvtpd2udq;
    public static Mnemonic Vcvtpd2uqq;
    public static Mnemonic Vcvtph2ps;
    public static Mnemonic Vcvtps2dq;
    public static Mnemonic Vcvtps2pd;
    public static Mnemonic Vcvtps2ph;
    public static Mnemonic Vcvtps2qq;
    public static Mnemonic Vcvtps2udq;
    public static Mnemonic Vcvtps2uqq;
    public static Mnemonic Vcvtqq2pd;
    public static Mnemonic Vcvtqq2ps;
    public static Mnemonic Vcvtsd2si;
    public static Mnemonic Vcvtsd2ss;
    public static Mnemonic Vcvtsd2usi;
    public static Mnemonic Vcvtsi2sd;
    public static Mnemonic Vcvtsi2ss;
    public static Mnemonic Vcvtss2sd;
    public static Mnemonic Vcvtss2si;
    public static Mnemonic Vcvtss2usi;
    public static Mnemonic Vcvttpd2dq;
    public static Mnemonic Vcvttpd2qq;
    public static Mnemonic Vcvttpd2udq;
    public static Mnemonic Vcvttpd2uqq;
    public static Mnemonic Vcvttps2dq;
    public static Mnemonic Vcvttps2qq;
    public static Mnemonic Vcvttps2udq;
    public static Mnemonic Vcvttps2uqq;
    public static Mnemonic Vcvttsd2si;
    public static Mnemonic Vcvttsd2usi;
    public static Mnemonic Vcvttss2si;
    public static Mnemonic Vcvttss2usi;
    public static Mnemonic Vcvtudq2pd;
    public static Mnemonic Vcvtudq2ps;
    public static Mnemonic Vcvtuqq2pd;
    public static Mnemonic Vcvtuqq2ps;
    public static Mnemonic Vcvtusi2sd;
    public static Mnemonic Vcvtusi2ss;
    public static Mnemonic Vdbpsadbw;
    public static Mnemonic Vdivpd;
    public static Mnemonic Vdivps;
    public static Mnemonic Vdivsd;
    public static Mnemonic Vdivss;
    public static Mnemonic Vdpbf16ps;
    public static Mnemonic Vdppd;
    public static Mnemonic Vdpps;
    public static Mnemonic Verr;
    public static Mnemonic Verw;
    public static Mnemonic Vexp2pd;
    public static Mnemonic Vexp2ps;
    public static Mnemonic Vexpandpd;
    public static Mnemonic Vexpandps;
    public static Mnemonic Vextractf128;
    public static Mnemonic Vextractf32x4;
    public static Mnemonic Vextractf32x8;
    public static Mnemonic Vextractf64x2;
    public static Mnemonic Vextractf64x4;
    public static Mnemonic Vextracti128;
    public static Mnemonic Vextracti32x4;
    public static Mnemonic Vextracti32x8;
    public static Mnemonic Vextracti64x2;
    public static Mnemonic Vextracti64x4;
    public static Mnemonic Vextractps;
    public static Mnemonic Vfixupimmpd;
    public static Mnemonic Vfixupimmps;
    public static Mnemonic Vfixupimmsd;
    public static Mnemonic Vfixupimmss;
    public static Mnemonic Vfmadd132pd;
    public static Mnemonic Vfmadd132ps;
    public static Mnemonic Vfmadd132sd;
    public static Mnemonic Vfmadd132ss;
    public static Mnemonic Vfmadd213pd;
    public static Mnemonic Vfmadd213ps;
    public static Mnemonic Vfmadd213sd;
    public static Mnemonic Vfmadd213ss;
    public static Mnemonic Vfmadd231pd;
    public static Mnemonic Vfmadd231ps;
    public static Mnemonic Vfmadd231sd;
    public static Mnemonic Vfmadd231ss;
    public static Mnemonic Vfmaddpd;
    public static Mnemonic Vfmaddps;
    public static Mnemonic Vfmaddsd;
    public static Mnemonic Vfmaddss;
    public static Mnemonic Vfmaddsub132pd;
    public static Mnemonic Vfmaddsub132ps;
    public static Mnemonic Vfmaddsub213pd;
    public static Mnemonic Vfmaddsub213ps;
    public static Mnemonic Vfmaddsub231pd;
    public static Mnemonic Vfmaddsub231ps;
    public static Mnemonic Vfmaddsubpd;
    public static Mnemonic Vfmaddsubps;
    public static Mnemonic Vfmsub132pd;
    public static Mnemonic Vfmsub132ps;
    public static Mnemonic Vfmsub132sd;
    public static Mnemonic Vfmsub132ss;
    public static Mnemonic Vfmsub213pd;
    public static Mnemonic Vfmsub213ps;
    public static Mnemonic Vfmsub213sd;
    public static Mnemonic Vfmsub213ss;
    public static Mnemonic Vfmsub231pd;
    public static Mnemonic Vfmsub231ps;
    public static Mnemonic Vfmsub231sd;
    public static Mnemonic Vfmsub231ss;
    public static Mnemonic Vfmsubadd132pd;
    public static Mnemonic Vfmsubadd132ps;
    public static Mnemonic Vfmsubadd213pd;
    public static Mnemonic Vfmsubadd213ps;
    public static Mnemonic Vfmsubadd231pd;
    public static Mnemonic Vfmsubadd231ps;
    public static Mnemonic Vfmsubaddpd;
    public static Mnemonic Vfmsubaddps;
    public static Mnemonic Vfmsubpd;
    public static Mnemonic Vfmsubps;
    public static Mnemonic Vfmsubsd;
    public static Mnemonic Vfmsubss;
    public static Mnemonic Vfnmadd132pd;
    public static Mnemonic Vfnmadd132ps;
    public static Mnemonic Vfnmadd132sd;
    public static Mnemonic Vfnmadd132ss;
    public static Mnemonic Vfnmadd213pd;
    public static Mnemonic Vfnmadd213ps;
    public static Mnemonic Vfnmadd213sd;
    public static Mnemonic Vfnmadd213ss;
    public static Mnemonic Vfnmadd231pd;
    public static Mnemonic Vfnmadd231ps;
    public static Mnemonic Vfnmadd231sd;
    public static Mnemonic Vfnmadd231ss;
    public static Mnemonic Vfnmaddpd;
    public static Mnemonic Vfnmaddps;
    public static Mnemonic Vfnmaddsd;
    public static Mnemonic Vfnmaddss;
    public static Mnemonic Vfnmsub132pd;
    public static Mnemonic Vfnmsub132ps;
    public static Mnemonic Vfnmsub132sd;
    public static Mnemonic Vfnmsub132ss;
    public static Mnemonic Vfnmsub213pd;
    public static Mnemonic Vfnmsub213ps;
    public static Mnemonic Vfnmsub213sd;
    public static Mnemonic Vfnmsub213ss;
    public static Mnemonic Vfnmsub231pd;
    public static Mnemonic Vfnmsub231ps;
    public static Mnemonic Vfnmsub231sd;
    public static Mnemonic Vfnmsub231ss;
    public static Mnemonic Vfnmsubpd;
    public static Mnemonic Vfnmsubps;
    public static Mnemonic Vfnmsubsd;
    public static Mnemonic Vfnmsubss;
    public static Mnemonic Vfpclasspd;
    public static Mnemonic Vfpclassps;
    public static Mnemonic Vfpclasssd;
    public static Mnemonic Vfpclassss;
    public static Mnemonic Vfrczpd;
    public static Mnemonic Vfrczps;
    public static Mnemonic Vfrczsd;
    public static Mnemonic Vfrczss;
    public static Mnemonic Vgatherdpd;
    public static Mnemonic Vgatherdps;
    public static Mnemonic Vgatherpf0dpd;
    public static Mnemonic Vgatherpf0dps;
    public static Mnemonic Vgatherpf0qpd;
    public static Mnemonic Vgatherpf0qps;
    public static Mnemonic Vgatherpf1dpd;
    public static Mnemonic Vgatherpf1dps;
    public static Mnemonic Vgatherpf1qpd;
    public static Mnemonic Vgatherpf1qps;
    public static Mnemonic Vgatherqpd;
    public static Mnemonic Vgatherqps;
    public static Mnemonic Vgetexppd;
    public static Mnemonic Vgetexpps;
    public static Mnemonic Vgetexpsd;
    public static Mnemonic Vgetexpss;
    public static Mnemonic Vgetmantpd;
    public static Mnemonic Vgetmantps;
    public static Mnemonic Vgetmantsd;
    public static Mnemonic Vgetmantss;
    public static Mnemonic Vgf2p8affineinvqb;
    public static Mnemonic Vgf2p8affineqb;
    public static Mnemonic Vgf2p8mulb;
    public static Mnemonic Vhaddpd;
    public static Mnemonic Vhaddps;
    public static Mnemonic Vhsubpd;
    public static Mnemonic Vhsubps;
    public static Mnemonic Vinsertf128;
    public static Mnemonic Vinsertf32x4;
    public static Mnemonic Vinsertf32x8;
    public static Mnemonic Vinsertf64x2;
    public static Mnemonic Vinsertf64x4;
    public static Mnemonic Vinserti128;
    public static Mnemonic Vinserti32x4;
    public static Mnemonic Vinserti32x8;
    public static Mnemonic Vinserti64x2;
    public static Mnemonic Vinserti64x4;
    public static Mnemonic Vinsertps;
    public static Mnemonic Vlddqu;
    public static Mnemonic Vldmxcsr;
    public static Mnemonic Vmaskmovdqu;
    public static Mnemonic Vmaskmovpd;
    public static Mnemonic Vmaskmovps;
    public static Mnemonic Vmaxpd;
    public static Mnemonic Vmaxps;
    public static Mnemonic Vmaxsd;
    public static Mnemonic Vmaxss;
    public static Mnemonic Vmcall;
    public static Mnemonic Vmclear;
    public static Mnemonic Vmfunc;
    public static Mnemonic Vminpd;
    public static Mnemonic Vminps;
    public static Mnemonic Vminsd;
    public static Mnemonic Vminss;
    public static Mnemonic Vmlaunch;
    public static Mnemonic Vmload;
    public static Mnemonic Vmmcall;
    public static Mnemonic Vmovapd;
    public static Mnemonic Vmovaps;
    public static Mnemonic Vmovd;
    public static Mnemonic Vmovddup;
    public static Mnemonic Vmovdqa;
    public static Mnemonic Vmovdqa32;
    public static Mnemonic Vmovdqa64;
    public static Mnemonic Vmovdqu;
    public static Mnemonic Vmovdqu16;
    public static Mnemonic Vmovdqu32;
    public static Mnemonic Vmovdqu64;
    public static Mnemonic Vmovdqu8;
    public static Mnemonic Vmovhlps;
    public static Mnemonic Vmovhpd;
    public static Mnemonic Vmovhps;
    public static Mnemonic Vmovlhps;
    public static Mnemonic Vmovlpd;
    public static Mnemonic Vmovlps;
    public static Mnemonic Vmovmskpd;
    public static Mnemonic Vmovmskps;
    public static Mnemonic Vmovntdq;
    public static Mnemonic Vmovntdqa;
    public static Mnemonic Vmovntpd;
    public static Mnemonic Vmovntps;
    public static Mnemonic Vmovq;
    public static Mnemonic Vmovsd;
    public static Mnemonic Vmovshdup;
    public static Mnemonic Vmovsldup;
    public static Mnemonic Vmovss;
    public static Mnemonic Vmovupd;
    public static Mnemonic Vmovups;
    public static Mnemonic Vmpsadbw;
    public static Mnemonic Vmptrld;
    public static Mnemonic Vmptrst;
    public static Mnemonic Vmread;
    public static Mnemonic Vmresume;
    public static Mnemonic Vmrun;
    public static Mnemonic Vmsave;
    public static Mnemonic Vmulpd;
    public static Mnemonic Vmulps;
    public static Mnemonic Vmulsd;
    public static Mnemonic Vmulss;
    public static Mnemonic Vmwrite;
    public static Mnemonic Vmxoff;
    public static Mnemonic Vmxon;
    public static Mnemonic Vorpd;
    public static Mnemonic Vorps;
    public static Mnemonic Vp2intersectd;
    public static Mnemonic Vp2intersectq;
    public static Mnemonic Vp4dpwssd;
    public static Mnemonic Vp4dpwssds;
    public static Mnemonic Vpabsb;
    public static Mnemonic Vpabsd;
    public static Mnemonic Vpabsq;
    public static Mnemonic Vpabsw;
    public static Mnemonic Vpackssdw;
    public static Mnemonic Vpacksswb;
    public static Mnemonic Vpackusdw;
    public static Mnemonic Vpackuswb;
    public static Mnemonic Vpaddb;
    public static Mnemonic Vpaddd;
    public static Mnemonic Vpaddq;
    public static Mnemonic Vpaddsb;
    public static Mnemonic Vpaddsw;
    public static Mnemonic Vpaddusb;
    public static Mnemonic Vpaddusw;
    public static Mnemonic Vpaddw;
    public static Mnemonic Vpalignr;
    public static Mnemonic Vpand;
    public static Mnemonic Vpandd;
    public static Mnemonic Vpandn;
    public static Mnemonic Vpandnd;
    public static Mnemonic Vpandnq;
    public static Mnemonic Vpandq;
    public static Mnemonic Vpavgb;
    public static Mnemonic Vpavgw;
    public static Mnemonic Vpblendd;
    public static Mnemonic Vpblendmb;
    public static Mnemonic Vpblendmd;
    public static Mnemonic Vpblendmq;
    public static Mnemonic Vpblendmw;
    public static Mnemonic Vpblendvb;
    public static Mnemonic Vpblendw;
    public static Mnemonic Vpbroadcastb;
    public static Mnemonic Vpbroadcastd;
    public static Mnemonic Vpbroadcastmb2q;
    public static Mnemonic Vpbroadcastmw2d;
    public static Mnemonic Vpbroadcastq;
    public static Mnemonic Vpbroadcastw;
    public static Mnemonic Vpclmulqdq;
    public static Mnemonic Vpcmov;
    public static Mnemonic Vpcmpb;
    public static Mnemonic Vpcmpd;
    public static Mnemonic Vpcmpeqb;
    public static Mnemonic Vpcmpeqd;
    public static Mnemonic Vpcmpeqq;
    public static Mnemonic Vpcmpeqw;
    public static Mnemonic Vpcmpestri;
    public static Mnemonic Vpcmpestri64;
    public static Mnemonic Vpcmpestrm;
    public static Mnemonic Vpcmpestrm64;
    public static Mnemonic Vpcmpgtb;
    public static Mnemonic Vpcmpgtd;
    public static Mnemonic Vpcmpgtq;
    public static Mnemonic Vpcmpgtw;
    public static Mnemonic Vpcmpistri;
    public static Mnemonic Vpcmpistrm;
    public static Mnemonic Vpcmpq;
    public static Mnemonic Vpcmpub;
    public static Mnemonic Vpcmpud;
    public static Mnemonic Vpcmpuq;
    public static Mnemonic Vpcmpuw;
    public static Mnemonic Vpcmpw;
    public static Mnemonic Vpcomb;
    public static Mnemonic Vpcomd;
    public static Mnemonic Vpcompressb;
    public static Mnemonic Vpcompressd;
    public static Mnemonic Vpcompressq;
    public static Mnemonic Vpcompressw;
    public static Mnemonic Vpcomq;
    public static Mnemonic Vpcomub;
    public static Mnemonic Vpcomud;
    public static Mnemonic Vpcomuq;
    public static Mnemonic Vpcomuw;
    public static Mnemonic Vpcomw;
    public static Mnemonic Vpconflictd;
    public static Mnemonic Vpconflictq;
    public static Mnemonic Vpdpbusd;
    public static Mnemonic Vpdpbusds;
    public static Mnemonic Vpdpwssd;
    public static Mnemonic Vpdpwssds;
    public static Mnemonic Vperm2f128;
    public static Mnemonic Vperm2i128;
    public static Mnemonic Vpermb;
    public static Mnemonic Vpermd;
    public static Mnemonic Vpermi2b;
    public static Mnemonic Vpermi2d;
    public static Mnemonic Vpermi2pd;
    public static Mnemonic Vpermi2ps;
    public static Mnemonic Vpermi2q;
    public static Mnemonic Vpermi2w;
    public static Mnemonic Vpermil2pd;
    public static Mnemonic Vpermil2ps;
    public static Mnemonic Vpermilpd;
    public static Mnemonic Vpermilps;
    public static Mnemonic Vpermpd;
    public static Mnemonic Vpermps;
    public static Mnemonic Vpermq;
    public static Mnemonic Vpermt2b;
    public static Mnemonic Vpermt2d;
    public static Mnemonic Vpermt2pd;
    public static Mnemonic Vpermt2ps;
    public static Mnemonic Vpermt2q;
    public static Mnemonic Vpermt2w;
    public static Mnemonic Vpermw;
    public static Mnemonic Vpexpandb;
    public static Mnemonic Vpexpandd;
    public static Mnemonic Vpexpandq;
    public static Mnemonic Vpexpandw;
    public static Mnemonic Vpextrb;
    public static Mnemonic Vpextrd;
    public static Mnemonic Vpextrq;
    public static Mnemonic Vpextrw;
    public static Mnemonic Vpgatherdd;
    public static Mnemonic Vpgatherdq;
    public static Mnemonic Vpgatherqd;
    public static Mnemonic Vpgatherqq;
    public static Mnemonic Vphaddbd;
    public static Mnemonic Vphaddbq;
    public static Mnemonic Vphaddbw;
    public static Mnemonic Vphaddd;
    public static Mnemonic Vphadddq;
    public static Mnemonic Vphaddsw;
    public static Mnemonic Vphaddubd;
    public static Mnemonic Vphaddubq;
    public static Mnemonic Vphaddubw;
    public static Mnemonic Vphaddudq;
    public static Mnemonic Vphadduwd;
    public static Mnemonic Vphadduwq;
    public static Mnemonic Vphaddw;
    public static Mnemonic Vphaddwd;
    public static Mnemonic Vphaddwq;
    public static Mnemonic Vphminposuw;
    public static Mnemonic Vphsubbw;
    public static Mnemonic Vphsubd;
    public static Mnemonic Vphsubdq;
    public static Mnemonic Vphsubsw;
    public static Mnemonic Vphsubw;
    public static Mnemonic Vphsubwd;
    public static Mnemonic Vpinsrb;
    public static Mnemonic Vpinsrd;
    public static Mnemonic Vpinsrq;
    public static Mnemonic Vpinsrw;
    public static Mnemonic Vplzcntd;
    public static Mnemonic Vplzcntq;
    public static Mnemonic Vpmacsdd;
    public static Mnemonic Vpmacsdqh;
    public static Mnemonic Vpmacsdql;
    public static Mnemonic Vpmacssdd;
    public static Mnemonic Vpmacssdqh;
    public static Mnemonic Vpmacssdql;
    public static Mnemonic Vpmacsswd;
    public static Mnemonic Vpmacssww;
    public static Mnemonic Vpmacswd;
    public static Mnemonic Vpmacsww;
    public static Mnemonic Vpmadcsswd;
    public static Mnemonic Vpmadcswd;
    public static Mnemonic Vpmadd52huq;
    public static Mnemonic Vpmadd52luq;
    public static Mnemonic Vpmaddubsw;
    public static Mnemonic Vpmaddwd;
    public static Mnemonic Vpmaskmovd;
    public static Mnemonic Vpmaskmovq;
    public static Mnemonic Vpmaxsb;
    public static Mnemonic Vpmaxsd;
    public static Mnemonic Vpmaxsq;
    public static Mnemonic Vpmaxsw;
    public static Mnemonic Vpmaxub;
    public static Mnemonic Vpmaxud;
    public static Mnemonic Vpmaxuq;
    public static Mnemonic Vpmaxuw;
    public static Mnemonic Vpminsb;
    public static Mnemonic Vpminsd;
    public static Mnemonic Vpminsq;
    public static Mnemonic Vpminsw;
    public static Mnemonic Vpminub;
    public static Mnemonic Vpminud;
    public static Mnemonic Vpminuq;
    public static Mnemonic Vpminuw;
    public static Mnemonic Vpmovb2m;
    public static Mnemonic Vpmovd2m;
    public static Mnemonic Vpmovdb;
    public static Mnemonic Vpmovdw;
    public static Mnemonic Vpmovm2b;
    public static Mnemonic Vpmovm2d;
    public static Mnemonic Vpmovm2q;
    public static Mnemonic Vpmovm2w;
    public static Mnemonic Vpmovmskb;
    public static Mnemonic Vpmovq2m;
    public static Mnemonic Vpmovqb;
    public static Mnemonic Vpmovqd;
    public static Mnemonic Vpmovqw;
    public static Mnemonic Vpmovsdb;
    public static Mnemonic Vpmovsdw;
    public static Mnemonic Vpmovsqb;
    public static Mnemonic Vpmovsqd;
    public static Mnemonic Vpmovsqw;
    public static Mnemonic Vpmovswb;
    public static Mnemonic Vpmovsxbd;
    public static Mnemonic Vpmovsxbq;
    public static Mnemonic Vpmovsxbw;
    public static Mnemonic Vpmovsxdq;
    public static Mnemonic Vpmovsxwd;
    public static Mnemonic Vpmovsxwq;
    public static Mnemonic Vpmovusdb;
    public static Mnemonic Vpmovusdw;
    public static Mnemonic Vpmovusqb;
    public static Mnemonic Vpmovusqd;
    public static Mnemonic Vpmovusqw;
    public static Mnemonic Vpmovuswb;
    public static Mnemonic Vpmovw2m;
    public static Mnemonic Vpmovwb;
    public static Mnemonic Vpmovzxbd;
    public static Mnemonic Vpmovzxbq;
    public static Mnemonic Vpmovzxbw;
    public static Mnemonic Vpmovzxdq;
    public static Mnemonic Vpmovzxwd;
    public static Mnemonic Vpmovzxwq;
    public static Mnemonic Vpmuldq;
    public static Mnemonic Vpmulhrsw;
    public static Mnemonic Vpmulhuw;
    public static Mnemonic Vpmulhw;
    public static Mnemonic Vpmulld;
    public static Mnemonic Vpmullq;
    public static Mnemonic Vpmullw;
    public static Mnemonic Vpmultishiftqb;
    public static Mnemonic Vpmuludq;
    public static Mnemonic Vpopcntb;
    public static Mnemonic Vpopcntd;
    public static Mnemonic Vpopcntq;
    public static Mnemonic Vpopcntw;
    public static Mnemonic Vpor;
    public static Mnemonic Vpord;
    public static Mnemonic Vporq;
    public static Mnemonic Vpperm;
    public static Mnemonic Vprold;
    public static Mnemonic Vprolq;
    public static Mnemonic Vprolvd;
    public static Mnemonic Vprolvq;
    public static Mnemonic Vprord;
    public static Mnemonic Vprorq;
    public static Mnemonic Vprorvd;
    public static Mnemonic Vprorvq;
    public static Mnemonic Vprotb;
    public static Mnemonic Vprotd;
    public static Mnemonic Vprotq;
    public static Mnemonic Vprotw;
    public static Mnemonic Vpsadbw;
    public static Mnemonic Vpscatterdd;
    public static Mnemonic Vpscatterdq;
    public static Mnemonic Vpscatterqd;
    public static Mnemonic Vpscatterqq;
    public static Mnemonic Vpshab;
    public static Mnemonic Vpshad;
    public static Mnemonic Vpshaq;
    public static Mnemonic Vpshaw;
    public static Mnemonic Vpshlb;
    public static Mnemonic Vpshld;
    public static Mnemonic Vpshldd;
    public static Mnemonic Vpshldq;
    public static Mnemonic Vpshldvd;
    public static Mnemonic Vpshldvq;
    public static Mnemonic Vpshldvw;
    public static Mnemonic Vpshldw;
    public static Mnemonic Vpshlq;
    public static Mnemonic Vpshlw;
    public static Mnemonic Vpshrdd;
    public static Mnemonic Vpshrdq;
    public static Mnemonic Vpshrdvd;
    public static Mnemonic Vpshrdvq;
    public static Mnemonic Vpshrdvw;
    public static Mnemonic Vpshrdw;
    public static Mnemonic Vpshufb;
    public static Mnemonic Vpshufbitqmb;
    public static Mnemonic Vpshufd;
    public static Mnemonic Vpshufhw;
    public static Mnemonic Vpshuflw;
    public static Mnemonic Vpsignb;
    public static Mnemonic Vpsignd;
    public static Mnemonic Vpsignw;
    public static Mnemonic Vpslld;
    public static Mnemonic Vpslldq;
    public static Mnemonic Vpsllq;
    public static Mnemonic Vpsllvd;
    public static Mnemonic Vpsllvq;
    public static Mnemonic Vpsllvw;
    public static Mnemonic Vpsllw;
    public static Mnemonic Vpsrad;
    public static Mnemonic Vpsraq;
    public static Mnemonic Vpsravd;
    public static Mnemonic Vpsravq;
    public static Mnemonic Vpsravw;
    public static Mnemonic Vpsraw;
    public static Mnemonic Vpsrld;
    public static Mnemonic Vpsrldq;
    public static Mnemonic Vpsrlq;
    public static Mnemonic Vpsrlvd;
    public static Mnemonic Vpsrlvq;
    public static Mnemonic Vpsrlvw;
    public static Mnemonic Vpsrlw;
    public static Mnemonic Vpsubb;
    public static Mnemonic Vpsubd;
    public static Mnemonic Vpsubq;
    public static Mnemonic Vpsubsb;
    public static Mnemonic Vpsubsw;
    public static Mnemonic Vpsubusb;
    public static Mnemonic Vpsubusw;
    public static Mnemonic Vpsubw;
    public static Mnemonic Vpternlogd;
    public static Mnemonic Vpternlogq;
    public static Mnemonic Vptest;
    public static Mnemonic Vptestmb;
    public static Mnemonic Vptestmd;
    public static Mnemonic Vptestmq;
    public static Mnemonic Vptestmw;
    public static Mnemonic Vptestnmb;
    public static Mnemonic Vptestnmd;
    public static Mnemonic Vptestnmq;
    public static Mnemonic Vptestnmw;
    public static Mnemonic Vpunpckhbw;
    public static Mnemonic Vpunpckhdq;
    public static Mnemonic Vpunpckhqdq;
    public static Mnemonic Vpunpckhwd;
    public static Mnemonic Vpunpcklbw;
    public static Mnemonic Vpunpckldq;
    public static Mnemonic Vpunpcklqdq;
    public static Mnemonic Vpunpcklwd;
    public static Mnemonic Vpxor;
    public static Mnemonic Vpxord;
    public static Mnemonic Vpxorq;
    public static Mnemonic Vrangepd;
    public static Mnemonic Vrangeps;
    public static Mnemonic Vrangesd;
    public static Mnemonic Vrangess;
    public static Mnemonic Vrcp14pd;
    public static Mnemonic Vrcp14ps;
    public static Mnemonic Vrcp14sd;
    public static Mnemonic Vrcp14ss;
    public static Mnemonic Vrcp28pd;
    public static Mnemonic Vrcp28ps;
    public static Mnemonic Vrcp28sd;
    public static Mnemonic Vrcp28ss;
    public static Mnemonic Vrcpps;
    public static Mnemonic Vrcpss;
    public static Mnemonic Vreducepd;
    public static Mnemonic Vreduceps;
    public static Mnemonic Vreducesd;
    public static Mnemonic Vreducess;
    public static Mnemonic Vrndscalepd;
    public static Mnemonic Vrndscaleps;
    public static Mnemonic Vrndscalesd;
    public static Mnemonic Vrndscaless;
    public static Mnemonic Vroundpd;
    public static Mnemonic Vroundps;
    public static Mnemonic Vroundsd;
    public static Mnemonic Vroundss;
    public static Mnemonic Vrsqrt14pd;
    public static Mnemonic Vrsqrt14ps;
    public static Mnemonic Vrsqrt14sd;
    public static Mnemonic Vrsqrt14ss;
    public static Mnemonic Vrsqrt28pd;
    public static Mnemonic Vrsqrt28ps;
    public static Mnemonic Vrsqrt28sd;
    public static Mnemonic Vrsqrt28ss;
    public static Mnemonic Vrsqrtps;
    public static Mnemonic Vrsqrtss;
    public static Mnemonic Vscalefpd;
    public static Mnemonic Vscalefps;
    public static Mnemonic Vscalefsd;
    public static Mnemonic Vscalefss;
    public static Mnemonic Vscatterdpd;
    public static Mnemonic Vscatterdps;
    public static Mnemonic Vscatterpf0dpd;
    public static Mnemonic Vscatterpf0dps;
    public static Mnemonic Vscatterpf0qpd;
    public static Mnemonic Vscatterpf0qps;
    public static Mnemonic Vscatterpf1dpd;
    public static Mnemonic Vscatterpf1dps;
    public static Mnemonic Vscatterpf1qpd;
    public static Mnemonic Vscatterpf1qps;
    public static Mnemonic Vscatterqpd;
    public static Mnemonic Vscatterqps;
    public static Mnemonic Vshuff32x4;
    public static Mnemonic Vshuff64x2;
    public static Mnemonic Vshufi32x4;
    public static Mnemonic Vshufi64x2;
    public static Mnemonic Vshufpd;
    public static Mnemonic Vshufps;
    public static Mnemonic Vsqrtpd;
    public static Mnemonic Vsqrtps;
    public static Mnemonic Vsqrtsd;
    public static Mnemonic Vsqrtss;
    public static Mnemonic Vstmxcsr;
    public static Mnemonic Vsubpd;
    public static Mnemonic Vsubps;
    public static Mnemonic Vsubsd;
    public static Mnemonic Vsubss;
    public static Mnemonic Vtestpd;
    public static Mnemonic Vtestps;
    public static Mnemonic Vucomisd;
    public static Mnemonic Vucomiss;
    public static Mnemonic Vunpckhpd;
    public static Mnemonic Vunpckhps;
    public static Mnemonic Vunpcklpd;
    public static Mnemonic Vunpcklps;
    public static Mnemonic Vxorpd;
    public static Mnemonic Vxorps;
    public static Mnemonic Vzeroall;
    public static Mnemonic Vzeroupper;
    public static Mnemonic Wait;
    public static Mnemonic Wbinvd;
    public static Mnemonic Wbnoinvd;
    public static Mnemonic Wrfsbase;
    public static Mnemonic Wrgsbase;
    public static Mnemonic Wrmsr;
    public static Mnemonic Wrpkru;
    public static Mnemonic Wrssd;
    public static Mnemonic Wrssq;
    public static Mnemonic Wrussd;
    public static Mnemonic Wrussq;
    public static Mnemonic Xabort;
    public static Mnemonic Xadd;
    public static Mnemonic Xbegin;
    public static Mnemonic Xbts;
    public static Mnemonic Xchg;
    public static Mnemonic Xcryptcbc;
    public static Mnemonic Xcryptcfb;
    public static Mnemonic Xcryptctr;
    public static Mnemonic Xcryptecb;
    public static Mnemonic Xcryptofb;
    public static Mnemonic Xend;
    public static Mnemonic Xgetbv;
    public static Mnemonic Xlatb;
    public static Mnemonic Xor;
    public static Mnemonic Xorpd;
    public static Mnemonic Xorps;
    public static Mnemonic Xrstor;
    public static Mnemonic Xrstor64;
    public static Mnemonic Xrstors;
    public static Mnemonic Xrstors64;
    public static Mnemonic Xsave;
    public static Mnemonic Xsave64;
    public static Mnemonic Xsavec;
    public static Mnemonic Xsavec64;
    public static Mnemonic Xsaveopt;
    public static Mnemonic Xsaveopt64;
    public static Mnemonic Xsaves;
    public static Mnemonic Xsaves64;
    public static Mnemonic Xsetbv;
    public static Mnemonic Xsha1;
    public static Mnemonic Xsha256;
    public static Mnemonic Xstore;
    public static Mnemonic Xtest;
    public static Mnemonic Rmpadjust;
    public static Mnemonic Rmpupdate;
    public static Mnemonic Psmash;
    public static Mnemonic Pvalidate;
    public static Mnemonic Serialize;
    public static Mnemonic Xsusldtrk;
    public static Mnemonic Xresldtrk;
    public static Mnemonic Invlpgb;
    public static Mnemonic Tlbsync;
    public static Mnemonic Vmgexit;
    public static Mnemonic Getsecq;
    public static Mnemonic Sysexitq;
    public static Mnemonic Ldtilecfg;
    public static Mnemonic Tilerelease;
    public static Mnemonic Sttilecfg;
    public static Mnemonic Tilezero;
    public static Mnemonic Tileloaddt1;
    public static Mnemonic Tilestored;
    public static Mnemonic Tileloadd;
    public static Mnemonic Tdpbf16ps;
    public static Mnemonic Tdpbuud;
    public static Mnemonic Tdpbusd;
    public static Mnemonic Tdpbsud;
    public static Mnemonic Tdpbssd;
    public static Mnemonic Sysretq;
    public static Mnemonic Fnstdw;
    public static Mnemonic Fnstsg;
    public static Mnemonic Rdshr;
    public static Mnemonic Wrshr;
    public static Mnemonic Smint;
    public static Mnemonic Dmint;
    public static Mnemonic Rdm;
    public static Mnemonic Svdc;
    public static Mnemonic Rsdc;
    public static Mnemonic Svldt;
    public static Mnemonic Rsldt;
    public static Mnemonic Svts;
    public static Mnemonic Rsts;
    public static Mnemonic Bb0_reset;
    public static Mnemonic Bb1_reset;
    public static Mnemonic Cpu_write;
    public static Mnemonic Cpu_read;
    public static Mnemonic Altinst;
    public static Mnemonic Paveb;
    public static Mnemonic Paddsiw;
    public static Mnemonic Pmagw;
    public static Mnemonic Pdistib;
    public static Mnemonic Psubsiw;
    public static Mnemonic Pmvzb;
    public static Mnemonic Pmvnzb;
    public static Mnemonic Pmvlzb;
    public static Mnemonic Pmvgezb;
    public static Mnemonic Pmulhriw;
    public static Mnemonic Pmachriw;
    public static Mnemonic Ftstp;
    public static Mnemonic Frint2;
    public static Mnemonic Frichop;
    public static Mnemonic Frinear;
    public static Mnemonic Undoc;
    public static Mnemonic Tdcall;
    public static Mnemonic Seamret;
    public static Mnemonic Seamops;
    public static Mnemonic Seamcall;
    public static Mnemonic Aesencwide128kl;
    public static Mnemonic Aesdecwide128kl;
    public static Mnemonic Aesencwide256kl;
    public static Mnemonic Aesdecwide256kl;
    public static Mnemonic Loadiwkey;
    public static Mnemonic Aesenc128kl;
    public static Mnemonic Aesdec128kl;
    public static Mnemonic Aesenc256kl;
    public static Mnemonic Aesdec256kl;
    public static Mnemonic Encodekey128;
    public static Mnemonic Encodekey256;
    public static Mnemonic Pushad;
    public static Mnemonic Popad;
    public static Mnemonic Pushfd;
    public static Mnemonic Pushfq;
    public static Mnemonic Popfd;
    public static Mnemonic Popfq;
    public static Mnemonic Iretd;
    public static Mnemonic Iretq;
    public static Mnemonic Int3;
    public static Mnemonic Uiret;
    public static Mnemonic Testui;
    public static Mnemonic Clui;
    public static Mnemonic Stui;
    public static Mnemonic Senduipi;
    public static Mnemonic Hreset;
    public static Mnemonic Ccs_hash;
    public static Mnemonic Ccs_encrypt;
    public static Mnemonic Lkgs;
    public static Mnemonic Eretu;
    public static Mnemonic Erets;
    public static Mnemonic Storeall;
    public static Mnemonic Vaddph;
    public static Mnemonic Vaddsh;
    public static Mnemonic Vcmpph;
    public static Mnemonic Vcmpsh;
    public static Mnemonic Vcomish;
    public static Mnemonic Vcvtdq2ph;
    public static Mnemonic Vcvtpd2ph;
    public static Mnemonic Vcvtph2dq;
    public static Mnemonic Vcvtph2pd;
    public static Mnemonic Vcvtph2psx;
    public static Mnemonic Vcvtph2qq;
    public static Mnemonic Vcvtph2udq;
    public static Mnemonic Vcvtph2uqq;
    public static Mnemonic Vcvtph2uw;
    public static Mnemonic Vcvtph2w;
    public static Mnemonic Vcvtps2phx;
    public static Mnemonic Vcvtqq2ph;
    public static Mnemonic Vcvtsd2sh;
    public static Mnemonic Vcvtsh2sd;
    public static Mnemonic Vcvtsh2si;
    public static Mnemonic Vcvtsh2ss;
    public static Mnemonic Vcvtsh2usi;
    public static Mnemonic Vcvtsi2sh;
    public static Mnemonic Vcvtss2sh;
    public static Mnemonic Vcvttph2dq;
    public static Mnemonic Vcvttph2qq;
    public static Mnemonic Vcvttph2udq;
    public static Mnemonic Vcvttph2uqq;
    public static Mnemonic Vcvttph2uw;
    public static Mnemonic Vcvttph2w;
    public static Mnemonic Vcvttsh2si;
    public static Mnemonic Vcvttsh2usi;
    public static Mnemonic Vcvtudq2ph;
    public static Mnemonic Vcvtuqq2ph;
    public static Mnemonic Vcvtusi2sh;
    public static Mnemonic Vcvtuw2ph;
    public static Mnemonic Vcvtw2ph;
    public static Mnemonic Vdivph;
    public static Mnemonic Vdivsh;
    public static Mnemonic Vfcmaddcph;
    public static Mnemonic Vfmaddcph;
    public static Mnemonic Vfcmaddcsh;
    public static Mnemonic Vfmaddcsh;
    public static Mnemonic Vfcmulcph;
    public static Mnemonic Vfmulcph;
    public static Mnemonic Vfcmulcsh;
    public static Mnemonic Vfmulcsh;
    public static Mnemonic Vfmaddsub132ph;
    public static Mnemonic Vfmaddsub213ph;
    public static Mnemonic Vfmaddsub231ph;
    public static Mnemonic Vfmsubadd132ph;
    public static Mnemonic Vfmsubadd213ph;
    public static Mnemonic Vfmsubadd231ph;
    public static Mnemonic Vfmadd132ph;
    public static Mnemonic Vfmadd213ph;
    public static Mnemonic Vfmadd231ph;
    public static Mnemonic Vfnmadd132ph;
    public static Mnemonic Vfnmadd213ph;
    public static Mnemonic Vfnmadd231ph;
    public static Mnemonic Vfmadd132sh;
    public static Mnemonic Vfmadd213sh;
    public static Mnemonic Vfmadd231sh;
    public static Mnemonic Vfnmadd132sh;
    public static Mnemonic Vfnmadd213sh;
    public static Mnemonic Vfnmadd231sh;
    public static Mnemonic Vfmsub132ph;
    public static Mnemonic Vfmsub213ph;
    public static Mnemonic Vfmsub231ph;
    public static Mnemonic Vfnmsub132ph;
    public static Mnemonic Vfnmsub213ph;
    public static Mnemonic Vfnmsub231ph;
    public static Mnemonic Vfmsub132sh;
    public static Mnemonic Vfmsub213sh;
    public static Mnemonic Vfmsub231sh;
    public static Mnemonic Vfnmsub132sh;
    public static Mnemonic Vfnmsub213sh;
    public static Mnemonic Vfnmsub231sh;
    public static Mnemonic Vfpclassph;
    public static Mnemonic Vfpclasssh;
    public static Mnemonic Vgetexpph;
    public static Mnemonic Vgetexpsh;
    public static Mnemonic Vgetmantph;
    public static Mnemonic Vgetmantsh;
    public static Mnemonic Vmaxph;
    public static Mnemonic Vmaxsh;
    public static Mnemonic Vminph;
    public static Mnemonic Vminsh;
    public static Mnemonic Vmovsh;
    public static Mnemonic Vmovw;
    public static Mnemonic Vmulph;
    public static Mnemonic Vmulsh;
    public static Mnemonic Vrcpph;
    public static Mnemonic Vrcpsh;
    public static Mnemonic Vreduceph;
    public static Mnemonic Vreducesh;
    public static Mnemonic Vrndscaleph;
    public static Mnemonic Vrndscalesh;
    public static Mnemonic Vrsqrtph;
    public static Mnemonic Vrsqrtsh;
    public static Mnemonic Vscalefph;
    public static Mnemonic Vscalefsh;
    public static Mnemonic Vsqrtph;
    public static Mnemonic Vsqrtsh;
    public static Mnemonic Vsubph;
    public static Mnemonic Vsubsh;
    public static Mnemonic Vucomish;
    public static Mnemonic Rdudbg;
    public static Mnemonic Wrudbg;
    public static Mnemonic Clevict0;
    public static Mnemonic Clevict1;
    public static Mnemonic Delay;
    public static Mnemonic Jknzd;
    public static Mnemonic Jkzd;
    public static Mnemonic Kand;
    public static Mnemonic Kandn;
    public static Mnemonic Kandnr;
    public static Mnemonic Kconcath;
    public static Mnemonic Kconcatl;
    public static Mnemonic Kextract;
    public static Mnemonic Kmerge2l1h;
    public static Mnemonic Kmerge2l1l;
    public static Mnemonic Kmov;
    public static Mnemonic Knot;
    public static Mnemonic Kor;
    public static Mnemonic Kortest;
    public static Mnemonic Kxnor;
    public static Mnemonic Kxor;
    public static Mnemonic Spflt;
    public static Mnemonic Tzcnti;
    public static Mnemonic Vaddnpd;
    public static Mnemonic Vaddnps;
    public static Mnemonic Vaddsetsps;
    public static Mnemonic Vcvtfxpntdq2ps;
    public static Mnemonic Vcvtfxpntpd2dq;
    public static Mnemonic Vcvtfxpntpd2udq;
    public static Mnemonic Vcvtfxpntps2dq;
    public static Mnemonic Vcvtfxpntps2udq;
    public static Mnemonic Vcvtfxpntudq2ps;
    public static Mnemonic Vexp223ps;
    public static Mnemonic Vfixupnanpd;
    public static Mnemonic Vfixupnanps;
    public static Mnemonic Vfmadd233ps;
    public static Mnemonic Vgatherpf0hintdpd;
    public static Mnemonic Vgatherpf0hintdps;
    public static Mnemonic Vgmaxabsps;
    public static Mnemonic Vgmaxpd;
    public static Mnemonic Vgmaxps;
    public static Mnemonic Vgminpd;
    public static Mnemonic Vgminps;
    public static Mnemonic Vloadunpackhd;
    public static Mnemonic Vloadunpackhpd;
    public static Mnemonic Vloadunpackhps;
    public static Mnemonic Vloadunpackhq;
    public static Mnemonic Vloadunpackld;
    public static Mnemonic Vloadunpacklpd;
    public static Mnemonic Vloadunpacklps;
    public static Mnemonic Vloadunpacklq;
    public static Mnemonic Vlog2ps;
    public static Mnemonic Vmovnrapd;
    public static Mnemonic Vmovnraps;
    public static Mnemonic Vmovnrngoapd;
    public static Mnemonic Vmovnrngoaps;
    public static Mnemonic Vpackstorehd;
    public static Mnemonic Vpackstorehpd;
    public static Mnemonic Vpackstorehps;
    public static Mnemonic Vpackstorehq;
    public static Mnemonic Vpackstoreld;
    public static Mnemonic Vpackstorelpd;
    public static Mnemonic Vpackstorelps;
    public static Mnemonic Vpackstorelq;
    public static Mnemonic Vpadcd;
    public static Mnemonic Vpaddsetcd;
    public static Mnemonic Vpaddsetsd;
    public static Mnemonic Vpcmpltd;
    public static Mnemonic Vpermf32x4;
    public static Mnemonic Vpmadd231d;
    public static Mnemonic Vpmadd233d;
    public static Mnemonic Vpmulhd;
    public static Mnemonic Vpmulhud;
    public static Mnemonic Vprefetch0;
    public static Mnemonic Vprefetch1;
    public static Mnemonic Vprefetch2;
    public static Mnemonic Vprefetche0;
    public static Mnemonic Vprefetche1;
    public static Mnemonic Vprefetche2;
    public static Mnemonic Vprefetchenta;
    public static Mnemonic Vprefetchnta;
    public static Mnemonic Vpsbbd;
    public static Mnemonic Vpsbbrd;
    public static Mnemonic Vpsubrd;
    public static Mnemonic Vpsubrsetbd;
    public static Mnemonic Vpsubsetbd;
    public static Mnemonic Vrcp23ps;
    public static Mnemonic Vrndfxpntpd;
    public static Mnemonic Vrndfxpntps;
    public static Mnemonic Vrsqrt23ps;
    public static Mnemonic Vscaleps;
    public static Mnemonic Vscatterpf0hintdpd;
    public static Mnemonic Vscatterpf0hintdps;
    public static Mnemonic Vsubrpd;
    public static Mnemonic Vsubrps;
    public static Mnemonic Xsha512;
    public static Mnemonic Xstore_alt;
    public static Mnemonic Xsha512_alt;
    public static Mnemonic Zero_bytes;
    public static Mnemonic Aadd;
    public static Mnemonic Aand;
    public static Mnemonic Aor;
    public static Mnemonic Axor;
    public static Mnemonic Cmpbexadd;
    public static Mnemonic Cmpbxadd;
    public static Mnemonic Cmplexadd;
    public static Mnemonic Cmplxadd;
    public static Mnemonic Cmpnbexadd;
    public static Mnemonic Cmpnbxadd;
    public static Mnemonic Cmpnlexadd;
    public static Mnemonic Cmpnlxadd;
    public static Mnemonic Cmpnoxadd;
    public static Mnemonic Cmpnpxadd;
    public static Mnemonic Cmpnsxadd;
    public static Mnemonic Cmpnzxadd;
    public static Mnemonic Cmpoxadd;
    public static Mnemonic Cmppxadd;
    public static Mnemonic Cmpsxadd;
    public static Mnemonic Cmpzxadd;
    public static Mnemonic Prefetchit0;
    public static Mnemonic Prefetchit1;
    public static Mnemonic Rdmsrlist;
    public static Mnemonic Rmpquery;
    public static Mnemonic Tdpfp16ps;
    public static Mnemonic Vbcstnebf162ps;
    public static Mnemonic Vbcstnesh2ps;
    public static Mnemonic Vcvtneebf162ps;
    public static Mnemonic Vcvtneeph2ps;
    public static Mnemonic Vcvtneobf162ps;
    public static Mnemonic Vcvtneoph2ps;
    public static Mnemonic Vpdpbssd;
    public static Mnemonic Vpdpbssds;
    public static Mnemonic Vpdpbsud;
    public static Mnemonic Vpdpbsuds;
    public static Mnemonic Vpdpbuud;
    public static Mnemonic Vpdpbuuds;
    public static Mnemonic Wrmsrlist;
    public static Mnemonic Wrmsrns;
    public static Mnemonic Tcmmrlfp16ps;
    public static Mnemonic Tcmmimfp16ps;
    public static Mnemonic Pbndkb;
    public static Mnemonic Vpdpwsud;
    public static Mnemonic Vpdpwsuds;
    public static Mnemonic Vpdpwusd;
    public static Mnemonic Vpdpwusds;
    public static Mnemonic Vpdpwuud;
    public static Mnemonic Vpdpwuuds;
    public static Mnemonic Vsha512msg1;
    public static Mnemonic Vsha512msg2;
    public static Mnemonic Vsha512rnds2;
    public static Mnemonic Vsm3msg1;
    public static Mnemonic Vsm3msg2;
    public static Mnemonic Vsm3rnds2;
    public static Mnemonic Vsm4key4;
    public static Mnemonic Vsm4rnds4;
}
[ExtensionAttribute]
public static class Iced.Intel.MnemonicUtils : object {
    [ExtensionAttribute]
public static Mnemonic Mnemonic(Code code);
}
internal static class Iced.Intel.MnemonicUtilsData : object {
    internal static UInt16[] toMnemonic;
    private static MnemonicUtilsData();
}
public enum Iced.Intel.MvexConvFn : Enum {
    public int value__;
    public static MvexConvFn None;
    public static MvexConvFn Sf32;
    public static MvexConvFn Sf64;
    public static MvexConvFn Si32;
    public static MvexConvFn Si64;
    public static MvexConvFn Uf32;
    public static MvexConvFn Uf64;
    public static MvexConvFn Ui32;
    public static MvexConvFn Ui64;
    public static MvexConvFn Df32;
    public static MvexConvFn Df64;
    public static MvexConvFn Di32;
    public static MvexConvFn Di64;
}
public enum Iced.Intel.MvexEHBit : Enum {
    public int value__;
    public static MvexEHBit None;
    public static MvexEHBit EH0;
    public static MvexEHBit EH1;
}
[IsReadOnlyAttribute]
internal class Iced.Intel.MvexInfo : ValueType {
    private int index;
    public MvexTupleTypeLutKind TupleTypeLutKind { get; }
    public MvexEHBit EHBit { get; }
    public MvexConvFn ConvFn { get; }
    public UInt32 InvalidConvFns { get; }
    public UInt32 InvalidSwizzleFns { get; }
    public bool IsNDD { get; }
    public bool IsNDS { get; }
    public bool CanUseEvictionHint { get; }
    public bool CanUseImmRoundingControl { get; }
    public bool CanUseRoundingControl { get; }
    public bool CanUseSuppressAllExceptions { get; }
    public bool IgnoresOpMaskRegister { get; }
    public bool RequireOpMaskRegister { get; }
    public bool NoSaeRc { get; }
    public bool IsConvFn32 { get; }
    public bool IgnoresEvictionHint { get; }
    public MvexInfo(Code code);
    public MvexTupleTypeLutKind get_TupleTypeLutKind();
    public MvexEHBit get_EHBit();
    public MvexConvFn get_ConvFn();
    public UInt32 get_InvalidConvFns();
    public UInt32 get_InvalidSwizzleFns();
    public bool get_IsNDD();
    public bool get_IsNDS();
    public bool get_CanUseEvictionHint();
    public bool get_CanUseImmRoundingControl();
    public bool get_CanUseRoundingControl();
    public bool get_CanUseSuppressAllExceptions();
    public bool get_IgnoresOpMaskRegister();
    public bool get_RequireOpMaskRegister();
    public bool get_NoSaeRc();
    public bool get_IsConvFn32();
    public bool get_IgnoresEvictionHint();
    public TupleType GetTupleType(int sss);
}
internal static class Iced.Intel.MvexInfoData : object {
    public static int StructSize;
    public static int TupleTypeLutKindIndex;
    public static int EHBitIndex;
    public static int ConvFnIndex;
    public static int InvalidConvFnsIndex;
    public static int InvalidSwizzleFnsIndex;
    public static int Flags1Index;
    public static int Flags2Index;
    internal static Byte[] Data;
    private static MvexInfoData();
}
[FlagsAttribute]
internal enum Iced.Intel.MvexInfoFlags1 : Enum {
    public int value__;
    public static MvexInfoFlags1 None;
    public static MvexInfoFlags1 NDD;
    public static MvexInfoFlags1 NDS;
    public static MvexInfoFlags1 EvictionHint;
    public static MvexInfoFlags1 ImmRoundingControl;
    public static MvexInfoFlags1 RoundingControl;
    public static MvexInfoFlags1 SuppressAllExceptions;
    public static MvexInfoFlags1 IgnoresOpMaskRegister;
    public static MvexInfoFlags1 RequireOpMaskRegister;
}
[FlagsAttribute]
internal enum Iced.Intel.MvexInfoFlags2 : Enum {
    public int value__;
    public static MvexInfoFlags2 None;
    public static MvexInfoFlags2 NoSaeRoundingControl;
    public static MvexInfoFlags2 ConvFn32;
    public static MvexInfoFlags2 IgnoresEvictionHint;
}
internal static class Iced.Intel.MvexMemorySizeLut : object {
    public static Byte[] Data;
    private static MvexMemorySizeLut();
}
public enum Iced.Intel.MvexRegMemConv : Enum {
    public int value__;
    public static MvexRegMemConv None;
    public static MvexRegMemConv RegSwizzleNone;
    public static MvexRegMemConv RegSwizzleCdab;
    public static MvexRegMemConv RegSwizzleBadc;
    public static MvexRegMemConv RegSwizzleDacb;
    public static MvexRegMemConv RegSwizzleAaaa;
    public static MvexRegMemConv RegSwizzleBbbb;
    public static MvexRegMemConv RegSwizzleCccc;
    public static MvexRegMemConv RegSwizzleDddd;
    public static MvexRegMemConv MemConvNone;
    public static MvexRegMemConv MemConvBroadcast1;
    public static MvexRegMemConv MemConvBroadcast4;
    public static MvexRegMemConv MemConvFloat16;
    public static MvexRegMemConv MemConvUint8;
    public static MvexRegMemConv MemConvSint8;
    public static MvexRegMemConv MemConvUint16;
    public static MvexRegMemConv MemConvSint16;
}
internal static class Iced.Intel.MvexTupleTypeLut : object {
    public static Byte[] Data;
    private static MvexTupleTypeLut();
}
public enum Iced.Intel.MvexTupleTypeLutKind : Enum {
    public int value__;
    public static MvexTupleTypeLutKind Int32;
    public static MvexTupleTypeLutKind Int32_Half;
    public static MvexTupleTypeLutKind Int32_4to16;
    public static MvexTupleTypeLutKind Int32_1to16_or_elem;
    public static MvexTupleTypeLutKind Int64;
    public static MvexTupleTypeLutKind Int64_4to8;
    public static MvexTupleTypeLutKind Int64_1to8_or_elem;
    public static MvexTupleTypeLutKind Float32;
    public static MvexTupleTypeLutKind Float32_Half;
    public static MvexTupleTypeLutKind Float32_4to16;
    public static MvexTupleTypeLutKind Float32_1to16_or_elem;
    public static MvexTupleTypeLutKind Float64;
    public static MvexTupleTypeLutKind Float64_4to8;
    public static MvexTupleTypeLutKind Float64_1to8_or_elem;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.NasmFormatter : Formatter {
    private FormatterOptions options;
    private ISymbolResolver symbolResolver;
    private IFormatterOptionsProvider optionsProvider;
    private FormatterString[] allRegisters;
    private InstrInfo[] instrInfos;
    private Info[] allMemorySizes;
    private NumberFormatter numberFormatter;
    private FormatterString[] opSizeStrings;
    private FormatterString[] addrSizeStrings;
    private FormatterString[][] branchInfos;
    private String[] scaleNumbers;
    private FormatterString[] mvexRegMemConsts32;
    private FormatterString[] mvexRegMemConsts64;
    private FormatterString[] memSizeInfos;
    private FormatterString[] farMemSizeInfos;
    private static FormatterString str_bnd;
    private static FormatterString str_byte;
    private static FormatterString str_dword;
    private static FormatterString str_lock;
    private static FormatterString str_notrack;
    private static FormatterString str_qword;
    private static FormatterString str_rel;
    private static FormatterString str_rep;
    private static FormatterString[] str_repe;
    private static FormatterString[] str_repne;
    private static FormatterString str_rn_sae;
    private static FormatterString str_rd_sae;
    private static FormatterString str_ru_sae;
    private static FormatterString str_rz_sae;
    private static FormatterString str_sae;
    private static FormatterString str_rn;
    private static FormatterString str_rd;
    private static FormatterString str_ru;
    private static FormatterString str_rz;
    private static FormatterString str_to;
    private static FormatterString str_word;
    private static FormatterString str_xacquire;
    private static FormatterString str_xrelease;
    private static FormatterString str_z;
    private static FormatterString[] s_opSizeStrings;
    private static FormatterString[] s_addrSizeStrings;
    private static FormatterString[][] s_branchInfos;
    private static FormatterString[] s_memSizeInfos;
    private static FormatterString[] s_farMemSizeInfos;
    private static String[] s_scaleNumbers;
    private static FormatterString[] s_mvexRegMemConsts32;
    private static FormatterString[] s_mvexRegMemConsts64;
    private static FormatterString str_eh;
    public FormatterOptions Options { get; }
    [NullableContextAttribute("2")]
public NasmFormatter(ISymbolResolver symbolResolver, IFormatterOptionsProvider optionsProvider);
    [NullableContextAttribute("2")]
public NasmFormatter(FormatterOptions options, ISymbolResolver symbolResolver, IFormatterOptionsProvider optionsProvider);
    private static NasmFormatter();
    public virtual FormatterOptions get_Options();
    public virtual void FormatMnemonic(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, FormatMnemonicOptions options);
    public virtual int GetOperandCount(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction);
    public virtual bool TryGetOpAccess(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand, OpAccess& access);
    public virtual int GetInstructionOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int operand);
    public virtual int GetFormatterOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, int instructionOperand);
    public virtual void FormatOperand(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output, int operand);
    public virtual void FormatOperandSeparator(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public virtual void FormatAllOperands(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    public virtual void Format(Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, FormatterOutput output);
    private void FormatMnemonic(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo, Int32& column, FormatMnemonicOptions mnemonicOptions);
    private bool ShowSegmentPrefix(Instruction& instruction, InstrOpInfo& opInfo);
    private void FormatPrefix(FormatterOutput output, Instruction& instruction, Int32& column, FormatterString prefix, PrefixKind prefixKind, Boolean& needSpace);
    private void FormatOperands(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo);
    private void FormatOperand(Instruction& instruction, FormatterOutput output, InstrOpInfo& opInfo, int operand);
    private void ShowSignExtendInfo(FormatterOutput output, InstrOpInfoFlags flags);
    private void FormatFlowControl(FormatterOutput output, InstrOpInfoFlags flags, FormatterOperandOptions operandOptions);
    private void FormatDecorator(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, FormatterString text, DecoratorKind decorator);
    private string ToRegisterString(Register reg);
    private void FormatRegister(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, Register reg);
    private void FormatMemory(FormatterOutput output, Instruction& instruction, int operand, int instructionOperand, MemorySize memSize, Register segReg, Register baseReg, Register indexReg, int scale, int displSize, long displ, int addrSize, InstrOpInfoFlags flags);
    private void FormatMemorySize(FormatterOutput output, MemorySize memSize, InstrOpInfoFlags flags, FormatterOperandOptions operandOptions);
    private void FormatKeyword(FormatterOutput output, FormatterString keyword);
    public virtual string Format(Register register);
    public virtual string FormatInt8(sbyte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt16(short value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt32(int value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatInt64(long value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt8(byte value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt16(ushort value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt32(UInt32 value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
    public virtual string FormatUInt64(ulong value, NumberFormattingOptions& modreq(System.Runtime.InteropServices.InAttribute) numberOptions);
}
internal enum Iced.Intel.NasmFormatterInternal.BranchSizeInfo : Enum {
    public int value__;
    public static BranchSizeInfo None;
    public static BranchSizeInfo Near;
    public static BranchSizeInfo NearWord;
    public static BranchSizeInfo NearDword;
    public static BranchSizeInfo Word;
    public static BranchSizeInfo Dword;
    public static BranchSizeInfo Short;
}
internal enum Iced.Intel.NasmFormatterInternal.CtorKind : Enum {
    public int value__;
    public static CtorKind Previous;
    public static CtorKind Normal_1;
    public static CtorKind Normal_2;
    public static CtorKind AamAad;
    public static CtorKind asz;
    public static CtorKind String;
    public static CtorKind STIG2_2b;
    public static CtorKind bcst;
    public static CtorKind bnd;
    public static CtorKind SignExt_4;
    public static CtorKind DeclareData;
    public static CtorKind XLAT;
    public static CtorKind er_2;
    public static CtorKind er_3;
    public static CtorKind far;
    public static CtorKind far_mem;
    public static CtorKind invlpga;
    public static CtorKind maskmovq;
    public static CtorKind SignExt_3;
    public static CtorKind STIG1;
    public static CtorKind STIG2_2a;
    public static CtorKind movabs;
    public static CtorKind sae;
    public static CtorKind nop;
    public static CtorKind OpSize;
    public static CtorKind OpSize2_bnd;
    public static CtorKind OpSize3;
    public static CtorKind os_2;
    public static CtorKind os_3;
    public static CtorKind os_call;
    public static CtorKind push_imm;
    public static CtorKind CC_1;
    public static CtorKind CC_2;
    public static CtorKind CC_3;
    public static CtorKind os_jcc_a_1;
    public static CtorKind os_jcc_a_2;
    public static CtorKind os_jcc_a_3;
    public static CtorKind os_jcc_b_1;
    public static CtorKind os_jcc_b_2;
    public static CtorKind os_jcc_b_3;
    public static CtorKind os_loopcc;
    public static CtorKind os_loop;
    public static CtorKind os_mem;
    public static CtorKind os_mem_reg16;
    public static CtorKind os_mem2;
    public static CtorKind pblendvb;
    public static CtorKind push_imm8;
    public static CtorKind pclmulqdq;
    public static CtorKind pops;
    public static CtorKind imul;
    public static CtorKind Reg16;
    public static CtorKind Reg32;
    public static CtorKind reverse;
}
internal enum Iced.Intel.NasmFormatterInternal.FarMemorySizeInfo : Enum {
    public int value__;
    public static FarMemorySizeInfo None;
    public static FarMemorySizeInfo Word;
    public static FarMemorySizeInfo Dword;
}
internal abstract class Iced.Intel.NasmFormatterInternal.InstrInfo : object {
    public static int OpAccess_INVALID;
    public static int OpAccess_None;
    public static int OpAccess_Read;
    public static int OpAccess_CondRead;
    public static int OpAccess_Write;
    public static int OpAccess_CondWrite;
    public static int OpAccess_ReadWrite;
    public static int OpAccess_ReadCondWrite;
    public static int OpAccess_NoMemAccess;
    public abstract virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    protected static int GetBitness(CodeSize codeSize);
}
internal static class Iced.Intel.NasmFormatterInternal.InstrInfos : object {
    public static InstrInfo[] AllInfos;
    private static InstrInfos();
    private static string AddSuffix(string s, Char[] ca);
    private static string AddPrefix(string s, Char[] ca);
    private static InstrInfo[] ReadInfos();
    private static ReadOnlySpan`1<byte> GetSerializedInstrInfos();
}
internal class Iced.Intel.NasmFormatterInternal.InstrOpInfo : ValueType {
    internal static int TEST_RegisterBits;
    public FormatterString Mnemonic;
    public InstrOpInfoFlags Flags;
    public byte OpCount;
    public InstrOpKind Op0Kind;
    public InstrOpKind Op1Kind;
    public InstrOpKind Op2Kind;
    public InstrOpKind Op3Kind;
    public InstrOpKind Op4Kind;
    public byte Op0Register;
    public byte Op1Register;
    public byte Op2Register;
    public byte Op3Register;
    public byte Op4Register;
    public sbyte Op0Index;
    public sbyte Op1Index;
    public sbyte Op2Index;
    public sbyte Op3Index;
    public sbyte Op4Index;
    public MemorySize MemorySize { get; public set; }
    public InstrOpInfo(FormatterString mnemonic, Instruction& instruction, InstrOpInfoFlags flags);
    [IsReadOnlyAttribute]
public MemorySize get_MemorySize();
    public void set_MemorySize(MemorySize value);
    [IsReadOnlyAttribute]
public Register GetOpRegister(int operand);
    [IsReadOnlyAttribute]
public InstrOpKind GetOpKind(int operand);
    [IsReadOnlyAttribute]
public int GetInstructionIndex(int operand);
    [IsReadOnlyAttribute]
public bool TryGetOpAccess(int operand, OpAccess& access);
    [IsReadOnlyAttribute]
public int GetOperandIndex(int instructionOperand);
}
[FlagsAttribute]
internal enum Iced.Intel.NasmFormatterInternal.InstrOpInfoFlags : Enum {
    public UInt32 value__;
    public static InstrOpInfoFlags None;
    public static InstrOpInfoFlags MemSize_Nothing;
    public static InstrOpInfoFlags ShowNoMemSize_ForceSize;
    public static InstrOpInfoFlags ShowMinMemSize_ForceSize;
    public static InstrOpInfoFlags SizeOverrideMask;
    public static InstrOpInfoFlags OpSizeShift;
    public static InstrOpInfoFlags OpSize16;
    public static InstrOpInfoFlags OpSize32;
    public static InstrOpInfoFlags OpSize64;
    public static InstrOpInfoFlags AddrSizeShift;
    public static InstrOpInfoFlags AddrSize16;
    public static InstrOpInfoFlags AddrSize32;
    public static InstrOpInfoFlags AddrSize64;
    public static InstrOpInfoFlags BranchSizeInfoShift;
    public static InstrOpInfoFlags BranchSizeInfoMask;
    public static InstrOpInfoFlags BranchSizeInfo_Short;
    public static InstrOpInfoFlags SignExtendInfoShift;
    public static InstrOpInfoFlags SignExtendInfoMask;
    public static InstrOpInfoFlags MemorySizeInfoShift;
    public static InstrOpInfoFlags MemorySizeInfoMask;
    public static InstrOpInfoFlags FarMemorySizeInfoShift;
    public static InstrOpInfoFlags FarMemorySizeInfoMask;
    public static InstrOpInfoFlags RegisterTo;
    public static InstrOpInfoFlags BndPrefix;
    public static InstrOpInfoFlags MnemonicIsDirective;
    public static InstrOpInfoFlags JccNotTaken;
    public static InstrOpInfoFlags JccTaken;
    public static InstrOpInfoFlags MemorySizeBits;
    public static InstrOpInfoFlags MemorySizeShift;
    public static InstrOpInfoFlags MemorySizeMask;
}
internal enum Iced.Intel.NasmFormatterInternal.InstrOpKind : Enum {
    public byte value__;
    public static InstrOpKind Register;
    public static InstrOpKind NearBranch16;
    public static InstrOpKind NearBranch32;
    public static InstrOpKind NearBranch64;
    public static InstrOpKind FarBranch16;
    public static InstrOpKind FarBranch32;
    public static InstrOpKind Immediate8;
    public static InstrOpKind Immediate8_2nd;
    public static InstrOpKind Immediate16;
    public static InstrOpKind Immediate32;
    public static InstrOpKind Immediate64;
    public static InstrOpKind Immediate8to16;
    public static InstrOpKind Immediate8to32;
    public static InstrOpKind Immediate8to64;
    public static InstrOpKind Immediate32to64;
    public static InstrOpKind MemorySegSI;
    public static InstrOpKind MemorySegESI;
    public static InstrOpKind MemorySegRSI;
    public static InstrOpKind MemorySegDI;
    public static InstrOpKind MemorySegEDI;
    public static InstrOpKind MemorySegRDI;
    public static InstrOpKind MemoryESDI;
    public static InstrOpKind MemoryESEDI;
    public static InstrOpKind MemoryESRDI;
    public static InstrOpKind Memory;
    public static InstrOpKind Sae;
    public static InstrOpKind RnSae;
    public static InstrOpKind RdSae;
    public static InstrOpKind RuSae;
    public static InstrOpKind RzSae;
    public static InstrOpKind Rn;
    public static InstrOpKind Rd;
    public static InstrOpKind Ru;
    public static InstrOpKind Rz;
    public static InstrOpKind DeclareByte;
    public static InstrOpKind DeclareWord;
    public static InstrOpKind DeclareDword;
    public static InstrOpKind DeclareQword;
}
internal enum Iced.Intel.NasmFormatterInternal.MemorySizeInfo : Enum {
    public int value__;
    public static MemorySizeInfo None;
    public static MemorySizeInfo Word;
    public static MemorySizeInfo Dword;
    public static MemorySizeInfo Qword;
}
internal static class Iced.Intel.NasmFormatterInternal.MemorySizes : object {
    public static Info[] AllMemorySizes;
    private static MemorySizes();
    private static Info[] GetMemorySizes();
}
internal static class Iced.Intel.NasmFormatterInternal.Registers : object {
    public static FormatterString[] AllRegisters;
    private static Registers();
    private static FormatterString[] GetRegisters();
}
internal enum Iced.Intel.NasmFormatterInternal.SignExtendInfo : Enum {
    public int value__;
    public static SignExtendInfo None;
    public static SignExtendInfo Sex1to2;
    public static SignExtendInfo Sex1to4;
    public static SignExtendInfo Sex1to8;
    public static SignExtendInfo Sex4to8;
    public static SignExtendInfo Sex2;
    public static SignExtendInfo Sex4;
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo(string mnemonic);
    public SimpleInstrInfo(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_AamAad : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_AamAad(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_as : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_as(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_bcst : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flagsNoBroadcast;
    public SimpleInstrInfo_bcst(string mnemonic, InstrOpInfoFlags flagsNoBroadcast);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_bnd : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_bnd(string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_cc : InstrInfo {
    private int ccIndex;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_cc(int ccIndex, String[] mnemonics);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_DeclareData : InstrInfo {
    private FormatterString mnemonic;
    private InstrOpKind opKind;
    public SimpleInstrInfo_DeclareData(Code code, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_er : InstrInfo {
    private int erIndex;
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_er(int erIndex, string mnemonic);
    public SimpleInstrInfo_er(int erIndex, string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    internal static void MoveOperands(InstrOpInfo& info, int index, InstrOpKind newOpKind);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_far : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_far(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_far_mem : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_far_mem(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_imul : InstrInfo {
    private SignExtendInfo sexInfo;
    private FormatterString mnemonic;
    public SimpleInstrInfo_imul(SignExtendInfo sexInfo, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_invlpga : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_invlpga(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_maskmovq : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_maskmovq(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_movabs : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_movabs(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_nop : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private Register register;
    private static FormatterString str_xchg;
    public SimpleInstrInfo_nop(int bitness, string mnemonic, Register register);
    private static SimpleInstrInfo_nop();
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_OpSize : InstrInfo {
    private CodeSize codeSize;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_OpSize(CodeSize codeSize, string mnemonic, string mnemonic16, string mnemonic32, string mnemonic64);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_OpSize2_bnd : InstrInfo {
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_OpSize2_bnd(string mnemonic, string mnemonic16, string mnemonic32, string mnemonic64);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_OpSize3 : InstrInfo {
    private int bitness;
    private FormatterString mnemonicDefault;
    private FormatterString mnemonicFull;
    public SimpleInstrInfo_OpSize3(int bitness, string mnemonicDefault, string mnemonicFull);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_os : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_os(int bitness, string mnemonic);
    public SimpleInstrInfo_os(int bitness, string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_os_call : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    private bool canHaveBndPrefix;
    public SimpleInstrInfo_os_call(int bitness, string mnemonic, bool canHaveBndPrefix);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_os_jcc : InstrInfo {
    private int bitness;
    private int ccIndex;
    private FormatterString[] mnemonics;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_os_jcc(int bitness, int ccIndex, String[] mnemonics);
    public SimpleInstrInfo_os_jcc(int bitness, int ccIndex, String[] mnemonics, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_os_loop : InstrInfo {
    private int bitness;
    private int ccIndex;
    private Register register;
    private FormatterString[] mnemonics;
    public SimpleInstrInfo_os_loop(int bitness, int ccIndex, Register register, String[] mnemonics);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_os_mem : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_os_mem(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_os_mem_reg16 : InstrInfo {
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_os_mem_reg16(int bitness, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_os_mem2 : InstrInfo {
    private InstrOpInfoFlags flags;
    private int bitness;
    private FormatterString mnemonic;
    public SimpleInstrInfo_os_mem2(int bitness, string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_pblendvb : InstrInfo {
    private FormatterString mnemonic;
    private MemorySize memSize;
    public SimpleInstrInfo_pblendvb(string mnemonic, MemorySize memSize);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_pclmulqdq : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString[] pseudo_ops;
    public SimpleInstrInfo_pclmulqdq(string mnemonic, FormatterString[] pseudo_ops);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_pops : InstrInfo {
    private FormatterString mnemonic;
    private FormatterString[] pseudo_ops;
    public SimpleInstrInfo_pops(string mnemonic, FormatterString[] pseudo_ops);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
    internal static void RemoveLastOp(InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_push_imm : InstrInfo {
    private int bitness;
    private SignExtendInfo sexInfo;
    private FormatterString mnemonic;
    public SimpleInstrInfo_push_imm(int bitness, SignExtendInfo sexInfo, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_push_imm8 : InstrInfo {
    private int bitness;
    private SignExtendInfo sexInfo;
    private FormatterString mnemonic;
    public SimpleInstrInfo_push_imm8(int bitness, SignExtendInfo sexInfo, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_Reg16 : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_Reg16(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_Reg32 : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_Reg32(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_reverse : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_reverse(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_sae : InstrInfo {
    private int saeIndex;
    private FormatterString mnemonic;
    public SimpleInstrInfo_sae(int saeIndex, string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_SignExt : InstrInfo {
    private SignExtendInfo sexInfoReg;
    private SignExtendInfo sexInfoMem;
    private FormatterString mnemonic;
    private InstrOpInfoFlags flags;
    public SimpleInstrInfo_SignExt(SignExtendInfo sexInfo, string mnemonic, InstrOpInfoFlags flags);
    public SimpleInstrInfo_SignExt(SignExtendInfo sexInfoReg, SignExtendInfo sexInfoMem, string mnemonic, InstrOpInfoFlags flags);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_STIG1 : InstrInfo {
    private FormatterString mnemonic;
    private bool pseudoOp;
    public SimpleInstrInfo_STIG1(string mnemonic, bool pseudoOp);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_STIG2 : InstrInfo {
    private InstrOpInfoFlags flags;
    private FormatterString mnemonic;
    private bool pseudoOp;
    public SimpleInstrInfo_STIG2(string mnemonic, bool pseudoOp);
    public SimpleInstrInfo_STIG2(string mnemonic, InstrOpInfoFlags flags);
    private SimpleInstrInfo_STIG2(string mnemonic, InstrOpInfoFlags flags, bool pseudoOp);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_String : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_String(string mnemonic);
    private static InstrOpInfoFlags GetAddressSizeFlags(OpKind opKind);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal class Iced.Intel.NasmFormatterInternal.SimpleInstrInfo_XLAT : InstrInfo {
    private FormatterString mnemonic;
    public SimpleInstrInfo_XLAT(string mnemonic);
    public virtual void GetOpInfo(FormatterOptions options, Instruction& modreq(System.Runtime.InteropServices.InAttribute) instruction, InstrOpInfo& info);
}
internal enum Iced.Intel.NasmFormatterInternal.SizeOverride : Enum {
    public int value__;
    public static SizeOverride None;
    public static SizeOverride Size16;
    public static SizeOverride Size32;
    public static SizeOverride Size64;
}
public enum Iced.Intel.NumberBase : Enum {
    public int value__;
    public static NumberBase Hexadecimal;
    public static NumberBase Decimal;
    public static NumberBase Octal;
    public static NumberBase Binary;
}
[IsReadOnlyAttribute]
internal class Iced.Intel.NumberFormatter : ValueType {
    private static ulong SmallPositiveNumber;
    private StringBuilder sb;
    private static UInt64[] divs;
    private static String[] smallDecimalValues;
    public NumberFormatter(bool dummy);
    private static NumberFormatter();
    private static void ToHexadecimal(StringBuilder sb, ulong value, int digitGroupSize, string digitSeparator, int digits, bool upper, bool leadingZero);
    private static void ToDecimal(StringBuilder sb, ulong value, int digitGroupSize, string digitSeparator, int digits);
    private static void ToOctal(StringBuilder sb, ulong value, int digitGroupSize, string digitSeparator, int digits, string prefix);
    private static void ToBinary(StringBuilder sb, ulong value, int digitGroupSize, string digitSeparator, int digits);
    private static NumberFormatterFlags GetFlags(bool leadingZeros, bool smallHexNumbersInDecimal);
    public string FormatInt8(FormatterOptions formatterOptions, NumberFormattingOptions& options, sbyte value);
    public string FormatInt16(FormatterOptions formatterOptions, NumberFormattingOptions& options, short value);
    public string FormatInt32(FormatterOptions formatterOptions, NumberFormattingOptions& options, int value);
    public string FormatInt64(FormatterOptions formatterOptions, NumberFormattingOptions& options, long value);
    public string FormatUInt8(FormatterOptions formatterOptions, NumberFormattingOptions& options, byte value);
    public string FormatUInt16(FormatterOptions formatterOptions, NumberFormattingOptions& options, ushort value);
    public string FormatUInt32(FormatterOptions formatterOptions, NumberFormattingOptions& options, UInt32 value);
    public string FormatUInt64(FormatterOptions formatterOptions, NumberFormattingOptions& options, ulong value);
    public string FormatDisplUInt8(FormatterOptions formatterOptions, NumberFormattingOptions& options, byte value);
    public string FormatDisplUInt16(FormatterOptions formatterOptions, NumberFormattingOptions& options, ushort value);
    public string FormatDisplUInt32(FormatterOptions formatterOptions, NumberFormattingOptions& options, UInt32 value);
    public string FormatDisplUInt64(FormatterOptions formatterOptions, NumberFormattingOptions& options, ulong value);
    public string FormatUInt16(FormatterOptions formatterOptions, NumberFormattingOptions& options, ushort value, bool leadingZeros);
    public string FormatUInt32(FormatterOptions formatterOptions, NumberFormattingOptions& options, UInt32 value, bool leadingZeros);
    public string FormatUInt64(FormatterOptions formatterOptions, NumberFormattingOptions& options, ulong value, bool leadingZeros);
    private string FormatUnsignedInteger(FormatterOptions formatterOptions, NumberFormattingOptions& options, ulong value, int valueSize, NumberFormatterFlags flags);
}
[FlagsAttribute]
internal enum Iced.Intel.NumberFormatterFlags : Enum {
    public int value__;
    public static NumberFormatterFlags None;
    public static NumberFormatterFlags AddMinusSign;
    public static NumberFormatterFlags LeadingZeros;
    public static NumberFormatterFlags SmallHexNumbersInDecimal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.NumberFormattingOptions : ValueType {
    [NullableAttribute("2")]
public string DigitSeparator;
    [NullableAttribute("2")]
public string Prefix;
    [NullableAttribute("2")]
public string Suffix;
    public byte DigitGroupSize;
    private byte numberBaseByteValue;
    public bool UppercaseHex;
    public bool SmallHexNumbersInDecimal;
    public bool AddLeadingZeroToHexNumbers;
    public bool LeadingZeros;
    public bool SignedNumber;
    public bool DisplacementLeadingZeros;
    public NumberBase NumberBase { get; public set; }
    public NumberFormattingOptions(FormatterOptions options, bool leadingZeros, bool signedNumber, bool displacementLeadingZeros);
    [IsReadOnlyAttribute]
public NumberBase get_NumberBase();
    public void set_NumberBase(NumberBase value);
    public static NumberFormattingOptions CreateImmediate(FormatterOptions options);
    internal static NumberFormattingOptions CreateImmediateInternal(FormatterOptions options);
    public static NumberFormattingOptions CreateDisplacement(FormatterOptions options);
    internal static NumberFormattingOptions CreateDisplacementInternal(FormatterOptions options);
    public static NumberFormattingOptions CreateBranch(FormatterOptions options);
    internal static NumberFormattingOptions CreateBranchInternal(FormatterOptions options);
}
public enum Iced.Intel.NumberKind : Enum {
    public int value__;
    public static NumberKind Int8;
    public static NumberKind UInt8;
    public static NumberKind Int16;
    public static NumberKind UInt16;
    public static NumberKind Int32;
    public static NumberKind UInt32;
    public static NumberKind Int64;
    public static NumberKind UInt64;
}
public enum Iced.Intel.OpAccess : Enum {
    public int value__;
    public static OpAccess None;
    public static OpAccess Read;
    public static OpAccess CondRead;
    public static OpAccess Write;
    public static OpAccess CondWrite;
    public static OpAccess ReadWrite;
    public static OpAccess ReadCondWrite;
    public static OpAccess NoMemAccess;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.OpCodeInfo : object {
    private string toOpCodeStringValue;
    private string toInstructionStringValue;
    private EncFlags2 encFlags2;
    private EncFlags3 encFlags3;
    private OpCodeInfoFlags1 opcFlags1;
    private OpCodeInfoFlags2 opcFlags2;
    private ushort code;
    private byte encoding;
    private byte operandSize;
    private byte addressSize;
    private byte l;
    private byte tupleType;
    private byte table;
    private byte mandatoryPrefix;
    private sbyte groupIndex;
    private sbyte rmGroupIndex;
    private byte op0Kind;
    private byte op1Kind;
    private byte op2Kind;
    private byte op3Kind;
    private byte op4Kind;
    private Flags flags;
    private static DecoderOptions[] toDecoderOptions;
    public Code Code { get; }
    public Mnemonic Mnemonic { get; }
    public EncodingKind Encoding { get; }
    public bool IsInstruction { get; }
    public bool Mode16 { get; }
    public bool Mode32 { get; }
    public bool Mode64 { get; }
    public bool Fwait { get; }
    public int OperandSize { get; }
    public int AddressSize { get; }
    public UInt32 L { get; }
    public UInt32 W { get; }
    public bool IsLIG { get; }
    public bool IsWIG { get; }
    public bool IsWIG32 { get; }
    public TupleType TupleType { get; }
    public MvexEHBit MvexEHBit { get; }
    public bool MvexCanUseEvictionHint { get; }
    public bool MvexCanUseImmRoundingControl { get; }
    public bool MvexIgnoresOpMaskRegister { get; }
    public bool MvexNoSaeRc { get; }
    public MvexTupleTypeLutKind MvexTupleTypeLutKind { get; }
    public MvexConvFn MvexConversionFunc { get; }
    public byte MvexValidConversionFuncsMask { get; }
    public byte MvexValidSwizzleFuncsMask { get; }
    public MemorySize MemorySize { get; }
    public MemorySize BroadcastMemorySize { get; }
    public bool CanBroadcast { get; }
    public bool CanUseRoundingControl { get; }
    public bool CanSuppressAllExceptions { get; }
    public bool CanUseOpMaskRegister { get; }
    public bool RequireOpMaskRegister { get; }
    public bool CanUseZeroingMasking { get; }
    public bool CanUseLockPrefix { get; }
    public bool CanUseXacquirePrefix { get; }
    public bool CanUseXreleasePrefix { get; }
    public bool CanUseRepPrefix { get; }
    public bool CanUseRepnePrefix { get; }
    public bool CanUseBndPrefix { get; }
    public bool CanUseHintTakenPrefix { get; }
    public bool CanUseNotrackPrefix { get; }
    public bool IgnoresRoundingControl { get; }
    public bool AmdLockRegBit { get; }
    public bool DefaultOpSize64 { get; }
    public bool ForceOpSize64 { get; }
    public bool IntelForceOpSize64 { get; }
    public bool MustBeCpl0 { get; }
    public bool Cpl0 { get; }
    public bool Cpl1 { get; }
    public bool Cpl2 { get; }
    public bool Cpl3 { get; }
    public bool IsInputOutput { get; }
    public bool IsNop { get; }
    public bool IsReservedNop { get; }
    public bool IsSerializingIntel { get; }
    public bool IsSerializingAmd { get; }
    public bool MayRequireCpl0 { get; }
    public bool IsCetTracked { get; }
    public bool IsNonTemporal { get; }
    public bool IsFpuNoWait { get; }
    public bool IgnoresModBits { get; }
    public bool No66 { get; }
    public bool NFx { get; }
    public bool RequiresUniqueRegNums { get; }
    public bool RequiresUniqueDestRegNum { get; }
    public bool IsPrivileged { get; }
    public bool IsSaveRestore { get; }
    public bool IsStackInstruction { get; }
    public bool IgnoresSegment { get; }
    public bool IsOpMaskReadWrite { get; }
    public bool RealMode { get; }
    public bool ProtectedMode { get; }
    public bool Virtual8086Mode { get; }
    public bool CompatibilityMode { get; }
    public bool LongMode { get; }
    public bool UseOutsideSmm { get; }
    public bool UseInSmm { get; }
    public bool UseOutsideEnclaveSgx { get; }
    public bool UseInEnclaveSgx1 { get; }
    public bool UseInEnclaveSgx2 { get; }
    public bool UseOutsideVmxOp { get; }
    public bool UseInVmxRootOp { get; }
    public bool UseInVmxNonRootOp { get; }
    public bool UseOutsideSeam { get; }
    public bool UseInSeam { get; }
    public bool TdxNonRootGenUd { get; }
    public bool TdxNonRootGenVe { get; }
    public bool TdxNonRootMayGenEx { get; }
    public bool IntelVmExit { get; }
    public bool IntelMayVmExit { get; }
    public bool IntelSmmVmExit { get; }
    public bool AmdVmExit { get; }
    public bool AmdMayVmExit { get; }
    public bool TsxAbort { get; }
    public bool TsxImplAbort { get; }
    public bool TsxMayAbort { get; }
    public bool IntelDecoder16 { get; }
    public bool IntelDecoder32 { get; }
    public bool IntelDecoder64 { get; }
    public bool AmdDecoder16 { get; }
    public bool AmdDecoder32 { get; }
    public bool AmdDecoder64 { get; }
    public DecoderOptions DecoderOption { get; }
    public OpCodeTableKind Table { get; }
    public MandatoryPrefix MandatoryPrefix { get; }
    public UInt32 OpCode { get; }
    public int OpCodeLength { get; }
    public bool IsGroup { get; }
    public int GroupIndex { get; }
    public bool IsRmGroup { get; }
    public int RmGroupIndex { get; }
    public int OpCount { get; }
    public OpCodeOperandKind Op0Kind { get; }
    public OpCodeOperandKind Op1Kind { get; }
    public OpCodeOperandKind Op2Kind { get; }
    public OpCodeOperandKind Op3Kind { get; }
    public OpCodeOperandKind Op4Kind { get; }
    internal OpCodeInfo(Code code, EncFlags1 encFlags1, EncFlags2 encFlags2, EncFlags3 encFlags3, OpCodeInfoFlags1 opcFlags1, OpCodeInfoFlags2 opcFlags2, StringBuilder sb);
    private static OpCodeInfo();
    public Code get_Code();
    public Mnemonic get_Mnemonic();
    public EncodingKind get_Encoding();
    public bool get_IsInstruction();
    public bool get_Mode16();
    public bool get_Mode32();
    public bool get_Mode64();
    public bool get_Fwait();
    public int get_OperandSize();
    public int get_AddressSize();
    public UInt32 get_L();
    public UInt32 get_W();
    public bool get_IsLIG();
    public bool get_IsWIG();
    public bool get_IsWIG32();
    public TupleType get_TupleType();
    public MvexEHBit get_MvexEHBit();
    public bool get_MvexCanUseEvictionHint();
    public bool get_MvexCanUseImmRoundingControl();
    public bool get_MvexIgnoresOpMaskRegister();
    public bool get_MvexNoSaeRc();
    public MvexTupleTypeLutKind get_MvexTupleTypeLutKind();
    public MvexConvFn get_MvexConversionFunc();
    public byte get_MvexValidConversionFuncsMask();
    public byte get_MvexValidSwizzleFuncsMask();
    public MemorySize get_MemorySize();
    public MemorySize get_BroadcastMemorySize();
    public bool get_CanBroadcast();
    public bool get_CanUseRoundingControl();
    public bool get_CanSuppressAllExceptions();
    public bool get_CanUseOpMaskRegister();
    public bool get_RequireOpMaskRegister();
    public bool get_CanUseZeroingMasking();
    public bool get_CanUseLockPrefix();
    public bool get_CanUseXacquirePrefix();
    public bool get_CanUseXreleasePrefix();
    public bool get_CanUseRepPrefix();
    public bool get_CanUseRepnePrefix();
    public bool get_CanUseBndPrefix();
    public bool get_CanUseHintTakenPrefix();
    public bool get_CanUseNotrackPrefix();
    public bool get_IgnoresRoundingControl();
    public bool get_AmdLockRegBit();
    public bool get_DefaultOpSize64();
    public bool get_ForceOpSize64();
    public bool get_IntelForceOpSize64();
    public bool get_MustBeCpl0();
    public bool get_Cpl0();
    public bool get_Cpl1();
    public bool get_Cpl2();
    public bool get_Cpl3();
    public bool get_IsInputOutput();
    public bool get_IsNop();
    public bool get_IsReservedNop();
    public bool get_IsSerializingIntel();
    public bool get_IsSerializingAmd();
    public bool get_MayRequireCpl0();
    public bool get_IsCetTracked();
    public bool get_IsNonTemporal();
    public bool get_IsFpuNoWait();
    public bool get_IgnoresModBits();
    public bool get_No66();
    public bool get_NFx();
    public bool get_RequiresUniqueRegNums();
    public bool get_RequiresUniqueDestRegNum();
    public bool get_IsPrivileged();
    public bool get_IsSaveRestore();
    public bool get_IsStackInstruction();
    public bool get_IgnoresSegment();
    public bool get_IsOpMaskReadWrite();
    public bool get_RealMode();
    public bool get_ProtectedMode();
    public bool get_Virtual8086Mode();
    public bool get_CompatibilityMode();
    public bool get_LongMode();
    public bool get_UseOutsideSmm();
    public bool get_UseInSmm();
    public bool get_UseOutsideEnclaveSgx();
    public bool get_UseInEnclaveSgx1();
    public bool get_UseInEnclaveSgx2();
    public bool get_UseOutsideVmxOp();
    public bool get_UseInVmxRootOp();
    public bool get_UseInVmxNonRootOp();
    public bool get_UseOutsideSeam();
    public bool get_UseInSeam();
    public bool get_TdxNonRootGenUd();
    public bool get_TdxNonRootGenVe();
    public bool get_TdxNonRootMayGenEx();
    public bool get_IntelVmExit();
    public bool get_IntelMayVmExit();
    public bool get_IntelSmmVmExit();
    public bool get_AmdVmExit();
    public bool get_AmdMayVmExit();
    public bool get_TsxAbort();
    public bool get_TsxImplAbort();
    public bool get_TsxMayAbort();
    public bool get_IntelDecoder16();
    public bool get_IntelDecoder32();
    public bool get_IntelDecoder64();
    public bool get_AmdDecoder16();
    public bool get_AmdDecoder32();
    public bool get_AmdDecoder64();
    public DecoderOptions get_DecoderOption();
    public OpCodeTableKind get_Table();
    public MandatoryPrefix get_MandatoryPrefix();
    public UInt32 get_OpCode();
    public int get_OpCodeLength();
    public bool get_IsGroup();
    public int get_GroupIndex();
    public bool get_IsRmGroup();
    public int get_RmGroupIndex();
    public int get_OpCount();
    public OpCodeOperandKind get_Op0Kind();
    public OpCodeOperandKind get_Op1Kind();
    public OpCodeOperandKind get_Op2Kind();
    public OpCodeOperandKind get_Op3Kind();
    public OpCodeOperandKind get_Op4Kind();
    public OpCodeOperandKind GetOpKind(int operand);
    public bool IsAvailableInMode(int bitness);
    public string ToOpCodeString();
    public string ToInstructionString();
    public virtual string ToString();
}
public enum Iced.Intel.OpCodeOperandKind : Enum {
    public int value__;
    public static OpCodeOperandKind None;
    public static OpCodeOperandKind farbr2_2;
    public static OpCodeOperandKind farbr4_2;
    public static OpCodeOperandKind mem_offs;
    public static OpCodeOperandKind mem;
    public static OpCodeOperandKind mem_mpx;
    public static OpCodeOperandKind mem_mib;
    public static OpCodeOperandKind mem_vsib32x;
    public static OpCodeOperandKind mem_vsib64x;
    public static OpCodeOperandKind mem_vsib32y;
    public static OpCodeOperandKind mem_vsib64y;
    public static OpCodeOperandKind mem_vsib32z;
    public static OpCodeOperandKind mem_vsib64z;
    public static OpCodeOperandKind r8_or_mem;
    public static OpCodeOperandKind r16_or_mem;
    public static OpCodeOperandKind r32_or_mem;
    public static OpCodeOperandKind r32_or_mem_mpx;
    public static OpCodeOperandKind r64_or_mem;
    public static OpCodeOperandKind r64_or_mem_mpx;
    public static OpCodeOperandKind mm_or_mem;
    public static OpCodeOperandKind xmm_or_mem;
    public static OpCodeOperandKind ymm_or_mem;
    public static OpCodeOperandKind zmm_or_mem;
    public static OpCodeOperandKind bnd_or_mem_mpx;
    public static OpCodeOperandKind k_or_mem;
    public static OpCodeOperandKind r8_reg;
    public static OpCodeOperandKind r8_opcode;
    public static OpCodeOperandKind r16_reg;
    public static OpCodeOperandKind r16_reg_mem;
    public static OpCodeOperandKind r16_rm;
    public static OpCodeOperandKind r16_opcode;
    public static OpCodeOperandKind r32_reg;
    public static OpCodeOperandKind r32_reg_mem;
    public static OpCodeOperandKind r32_rm;
    public static OpCodeOperandKind r32_opcode;
    public static OpCodeOperandKind r32_vvvv;
    public static OpCodeOperandKind r64_reg;
    public static OpCodeOperandKind r64_reg_mem;
    public static OpCodeOperandKind r64_rm;
    public static OpCodeOperandKind r64_opcode;
    public static OpCodeOperandKind r64_vvvv;
    public static OpCodeOperandKind seg_reg;
    public static OpCodeOperandKind k_reg;
    public static OpCodeOperandKind kp1_reg;
    public static OpCodeOperandKind k_rm;
    public static OpCodeOperandKind k_vvvv;
    public static OpCodeOperandKind mm_reg;
    public static OpCodeOperandKind mm_rm;
    public static OpCodeOperandKind xmm_reg;
    public static OpCodeOperandKind xmm_rm;
    public static OpCodeOperandKind xmm_vvvv;
    public static OpCodeOperandKind xmmp3_vvvv;
    public static OpCodeOperandKind xmm_is4;
    public static OpCodeOperandKind xmm_is5;
    public static OpCodeOperandKind ymm_reg;
    public static OpCodeOperandKind ymm_rm;
    public static OpCodeOperandKind ymm_vvvv;
    public static OpCodeOperandKind ymm_is4;
    public static OpCodeOperandKind ymm_is5;
    public static OpCodeOperandKind zmm_reg;
    public static OpCodeOperandKind zmm_rm;
    public static OpCodeOperandKind zmm_vvvv;
    public static OpCodeOperandKind zmmp3_vvvv;
    public static OpCodeOperandKind cr_reg;
    public static OpCodeOperandKind dr_reg;
    public static OpCodeOperandKind tr_reg;
    public static OpCodeOperandKind bnd_reg;
    public static OpCodeOperandKind es;
    public static OpCodeOperandKind cs;
    public static OpCodeOperandKind ss;
    public static OpCodeOperandKind ds;
    public static OpCodeOperandKind fs;
    public static OpCodeOperandKind gs;
    public static OpCodeOperandKind al;
    public static OpCodeOperandKind cl;
    public static OpCodeOperandKind ax;
    public static OpCodeOperandKind dx;
    public static OpCodeOperandKind eax;
    public static OpCodeOperandKind rax;
    public static OpCodeOperandKind st0;
    public static OpCodeOperandKind sti_opcode;
    public static OpCodeOperandKind imm4_m2z;
    public static OpCodeOperandKind imm8;
    public static OpCodeOperandKind imm8_const_1;
    public static OpCodeOperandKind imm8sex16;
    public static OpCodeOperandKind imm8sex32;
    public static OpCodeOperandKind imm8sex64;
    public static OpCodeOperandKind imm16;
    public static OpCodeOperandKind imm32;
    public static OpCodeOperandKind imm32sex64;
    public static OpCodeOperandKind imm64;
    public static OpCodeOperandKind seg_rSI;
    public static OpCodeOperandKind es_rDI;
    public static OpCodeOperandKind seg_rDI;
    public static OpCodeOperandKind seg_rBX_al;
    public static OpCodeOperandKind br16_1;
    public static OpCodeOperandKind br32_1;
    public static OpCodeOperandKind br64_1;
    public static OpCodeOperandKind br16_2;
    public static OpCodeOperandKind br32_4;
    public static OpCodeOperandKind br64_4;
    public static OpCodeOperandKind xbegin_2;
    public static OpCodeOperandKind xbegin_4;
    public static OpCodeOperandKind brdisp_2;
    public static OpCodeOperandKind brdisp_4;
    public static OpCodeOperandKind sibmem;
    public static OpCodeOperandKind tmm_reg;
    public static OpCodeOperandKind tmm_rm;
    public static OpCodeOperandKind tmm_vvvv;
}
public enum Iced.Intel.OpCodeTableKind : Enum {
    public int value__;
    public static OpCodeTableKind Normal;
    public static OpCodeTableKind T0F;
    public static OpCodeTableKind T0F38;
    public static OpCodeTableKind T0F3A;
    public static OpCodeTableKind MAP5;
    public static OpCodeTableKind MAP6;
    public static OpCodeTableKind MAP8;
    public static OpCodeTableKind MAP9;
    public static OpCodeTableKind MAP10;
}
public enum Iced.Intel.OpKind : Enum {
    public int value__;
    public static OpKind Register;
    public static OpKind NearBranch16;
    public static OpKind NearBranch32;
    public static OpKind NearBranch64;
    public static OpKind FarBranch16;
    public static OpKind FarBranch32;
    public static OpKind Immediate8;
    public static OpKind Immediate8_2nd;
    public static OpKind Immediate16;
    public static OpKind Immediate32;
    public static OpKind Immediate64;
    public static OpKind Immediate8to16;
    public static OpKind Immediate8to32;
    public static OpKind Immediate8to64;
    public static OpKind Immediate32to64;
    public static OpKind MemorySegSI;
    public static OpKind MemorySegESI;
    public static OpKind MemorySegRSI;
    public static OpKind MemorySegDI;
    public static OpKind MemorySegEDI;
    public static OpKind MemorySegRDI;
    public static OpKind MemoryESDI;
    public static OpKind MemoryESEDI;
    public static OpKind MemoryESRDI;
    public static OpKind Memory;
}
internal enum Iced.Intel.OpSize : Enum {
    public byte value__;
    public static OpSize Size16;
    public static OpSize Size32;
    public static OpSize Size64;
}
public enum Iced.Intel.PrefixKind : Enum {
    public int value__;
    public static PrefixKind ES;
    public static PrefixKind CS;
    public static PrefixKind SS;
    public static PrefixKind DS;
    public static PrefixKind FS;
    public static PrefixKind GS;
    public static PrefixKind Lock;
    public static PrefixKind Rep;
    public static PrefixKind Repe;
    public static PrefixKind Repne;
    public static PrefixKind OperandSize;
    public static PrefixKind AddressSize;
    public static PrefixKind HintNotTaken;
    public static PrefixKind HintTaken;
    public static PrefixKind Bnd;
    public static PrefixKind Notrack;
    public static PrefixKind Xacquire;
    public static PrefixKind Xrelease;
}
public enum Iced.Intel.Register : Enum {
    public int value__;
    public static Register None;
    public static Register AL;
    public static Register CL;
    public static Register DL;
    public static Register BL;
    public static Register AH;
    public static Register CH;
    public static Register DH;
    public static Register BH;
    public static Register SPL;
    public static Register BPL;
    public static Register SIL;
    public static Register DIL;
    public static Register R8L;
    public static Register R9L;
    public static Register R10L;
    public static Register R11L;
    public static Register R12L;
    public static Register R13L;
    public static Register R14L;
    public static Register R15L;
    public static Register AX;
    public static Register CX;
    public static Register DX;
    public static Register BX;
    public static Register SP;
    public static Register BP;
    public static Register SI;
    public static Register DI;
    public static Register R8W;
    public static Register R9W;
    public static Register R10W;
    public static Register R11W;
    public static Register R12W;
    public static Register R13W;
    public static Register R14W;
    public static Register R15W;
    public static Register EAX;
    public static Register ECX;
    public static Register EDX;
    public static Register EBX;
    public static Register ESP;
    public static Register EBP;
    public static Register ESI;
    public static Register EDI;
    public static Register R8D;
    public static Register R9D;
    public static Register R10D;
    public static Register R11D;
    public static Register R12D;
    public static Register R13D;
    public static Register R14D;
    public static Register R15D;
    public static Register RAX;
    public static Register RCX;
    public static Register RDX;
    public static Register RBX;
    public static Register RSP;
    public static Register RBP;
    public static Register RSI;
    public static Register RDI;
    public static Register R8;
    public static Register R9;
    public static Register R10;
    public static Register R11;
    public static Register R12;
    public static Register R13;
    public static Register R14;
    public static Register R15;
    public static Register EIP;
    public static Register RIP;
    public static Register ES;
    public static Register CS;
    public static Register SS;
    public static Register DS;
    public static Register FS;
    public static Register GS;
    public static Register XMM0;
    public static Register XMM1;
    public static Register XMM2;
    public static Register XMM3;
    public static Register XMM4;
    public static Register XMM5;
    public static Register XMM6;
    public static Register XMM7;
    public static Register XMM8;
    public static Register XMM9;
    public static Register XMM10;
    public static Register XMM11;
    public static Register XMM12;
    public static Register XMM13;
    public static Register XMM14;
    public static Register XMM15;
    public static Register XMM16;
    public static Register XMM17;
    public static Register XMM18;
    public static Register XMM19;
    public static Register XMM20;
    public static Register XMM21;
    public static Register XMM22;
    public static Register XMM23;
    public static Register XMM24;
    public static Register XMM25;
    public static Register XMM26;
    public static Register XMM27;
    public static Register XMM28;
    public static Register XMM29;
    public static Register XMM30;
    public static Register XMM31;
    public static Register YMM0;
    public static Register YMM1;
    public static Register YMM2;
    public static Register YMM3;
    public static Register YMM4;
    public static Register YMM5;
    public static Register YMM6;
    public static Register YMM7;
    public static Register YMM8;
    public static Register YMM9;
    public static Register YMM10;
    public static Register YMM11;
    public static Register YMM12;
    public static Register YMM13;
    public static Register YMM14;
    public static Register YMM15;
    public static Register YMM16;
    public static Register YMM17;
    public static Register YMM18;
    public static Register YMM19;
    public static Register YMM20;
    public static Register YMM21;
    public static Register YMM22;
    public static Register YMM23;
    public static Register YMM24;
    public static Register YMM25;
    public static Register YMM26;
    public static Register YMM27;
    public static Register YMM28;
    public static Register YMM29;
    public static Register YMM30;
    public static Register YMM31;
    public static Register ZMM0;
    public static Register ZMM1;
    public static Register ZMM2;
    public static Register ZMM3;
    public static Register ZMM4;
    public static Register ZMM5;
    public static Register ZMM6;
    public static Register ZMM7;
    public static Register ZMM8;
    public static Register ZMM9;
    public static Register ZMM10;
    public static Register ZMM11;
    public static Register ZMM12;
    public static Register ZMM13;
    public static Register ZMM14;
    public static Register ZMM15;
    public static Register ZMM16;
    public static Register ZMM17;
    public static Register ZMM18;
    public static Register ZMM19;
    public static Register ZMM20;
    public static Register ZMM21;
    public static Register ZMM22;
    public static Register ZMM23;
    public static Register ZMM24;
    public static Register ZMM25;
    public static Register ZMM26;
    public static Register ZMM27;
    public static Register ZMM28;
    public static Register ZMM29;
    public static Register ZMM30;
    public static Register ZMM31;
    public static Register K0;
    public static Register K1;
    public static Register K2;
    public static Register K3;
    public static Register K4;
    public static Register K5;
    public static Register K6;
    public static Register K7;
    public static Register BND0;
    public static Register BND1;
    public static Register BND2;
    public static Register BND3;
    public static Register CR0;
    public static Register CR1;
    public static Register CR2;
    public static Register CR3;
    public static Register CR4;
    public static Register CR5;
    public static Register CR6;
    public static Register CR7;
    public static Register CR8;
    public static Register CR9;
    public static Register CR10;
    public static Register CR11;
    public static Register CR12;
    public static Register CR13;
    public static Register CR14;
    public static Register CR15;
    public static Register DR0;
    public static Register DR1;
    public static Register DR2;
    public static Register DR3;
    public static Register DR4;
    public static Register DR5;
    public static Register DR6;
    public static Register DR7;
    public static Register DR8;
    public static Register DR9;
    public static Register DR10;
    public static Register DR11;
    public static Register DR12;
    public static Register DR13;
    public static Register DR14;
    public static Register DR15;
    public static Register ST0;
    public static Register ST1;
    public static Register ST2;
    public static Register ST3;
    public static Register ST4;
    public static Register ST5;
    public static Register ST6;
    public static Register ST7;
    public static Register MM0;
    public static Register MM1;
    public static Register MM2;
    public static Register MM3;
    public static Register MM4;
    public static Register MM5;
    public static Register MM6;
    public static Register MM7;
    public static Register TR0;
    public static Register TR1;
    public static Register TR2;
    public static Register TR3;
    public static Register TR4;
    public static Register TR5;
    public static Register TR6;
    public static Register TR7;
    public static Register TMM0;
    public static Register TMM1;
    public static Register TMM2;
    public static Register TMM3;
    public static Register TMM4;
    public static Register TMM5;
    public static Register TMM6;
    public static Register TMM7;
    [ObsoleteAttribute("Not part of the public API", "False")]
[EditorBrowsableAttribute("1")]
public static Register DontUse0;
    [ObsoleteAttribute("Not part of the public API", "False")]
[EditorBrowsableAttribute("1")]
public static Register DontUseFA;
    [ObsoleteAttribute("Not part of the public API", "False")]
[EditorBrowsableAttribute("1")]
public static Register DontUseFB;
    [ObsoleteAttribute("Not part of the public API", "False")]
[EditorBrowsableAttribute("1")]
public static Register DontUseFC;
    [ObsoleteAttribute("Not part of the public API", "False")]
[EditorBrowsableAttribute("1")]
public static Register DontUseFD;
    [ObsoleteAttribute("Not part of the public API", "False")]
[EditorBrowsableAttribute("1")]
public static Register DontUseFE;
    [ObsoleteAttribute("Not part of the public API", "False")]
[EditorBrowsableAttribute("1")]
public static Register DontUseFF;
}
[ExtensionAttribute]
public static class Iced.Intel.RegisterExtensions : object {
    internal static RegisterInfo[] RegisterInfos;
    private static RegisterExtensions();
    private static RegisterInfo[] GetRegisterInfos();
    [ExtensionAttribute]
public static RegisterInfo GetInfo(Register register);
    [ExtensionAttribute]
public static Register GetBaseRegister(Register register);
    [ExtensionAttribute]
public static int GetNumber(Register register);
    [ExtensionAttribute]
public static Register GetFullRegister(Register register);
    [ExtensionAttribute]
public static Register GetFullRegister32(Register register);
    [ExtensionAttribute]
public static int GetSize(Register register);
    [ExtensionAttribute]
public static bool IsSegmentRegister(Register register);
    [ExtensionAttribute]
public static bool IsGPR(Register register);
    [ExtensionAttribute]
public static bool IsGPR8(Register register);
    [ExtensionAttribute]
public static bool IsGPR16(Register register);
    [ExtensionAttribute]
public static bool IsGPR32(Register register);
    [ExtensionAttribute]
public static bool IsGPR64(Register register);
    [ExtensionAttribute]
public static bool IsXMM(Register register);
    [ExtensionAttribute]
public static bool IsYMM(Register register);
    [ExtensionAttribute]
public static bool IsZMM(Register register);
    [ExtensionAttribute]
public static bool IsIP(Register register);
    [ExtensionAttribute]
public static bool IsK(Register register);
    [ExtensionAttribute]
public static bool IsCR(Register register);
    [ExtensionAttribute]
public static bool IsDR(Register register);
    [ExtensionAttribute]
public static bool IsTR(Register register);
    [ExtensionAttribute]
public static bool IsST(Register register);
    [ExtensionAttribute]
public static bool IsBND(Register register);
    [ExtensionAttribute]
public static bool IsMM(Register register);
    [ExtensionAttribute]
public static bool IsTMM(Register register);
    [ExtensionAttribute]
public static bool IsVectorRegister(Register register);
}
[IsReadOnlyAttribute]
public class Iced.Intel.RegisterInfo : ValueType {
    private byte register;
    private byte baseRegister;
    private byte fullRegister;
    private ushort size;
    private byte pad1;
    private byte pad2;
    private byte pad3;
    public Register Register { get; }
    public Register Base { get; }
    public int Number { get; }
    public Register FullRegister { get; }
    public Register FullRegister32 { get; }
    public int Size { get; }
    public RegisterInfo(Register register, Register baseRegister, Register fullRegister, int size);
    public Register get_Register();
    public Register get_Base();
    public int get_Number();
    public Register get_FullRegister();
    public Register get_FullRegister32();
    public int get_Size();
}
[IsReadOnlyAttribute]
public class Iced.Intel.RelocInfo : ValueType {
    public ulong Address;
    public RelocKind Kind;
    public RelocInfo(RelocKind kind, ulong address);
}
public enum Iced.Intel.RelocKind : Enum {
    public int value__;
    public static RelocKind Offset64;
}
public enum Iced.Intel.RepPrefixKind : Enum {
    public int value__;
    public static RepPrefixKind None;
    public static RepPrefixKind Repe;
    public static RepPrefixKind Repne;
}
[FlagsAttribute]
public enum Iced.Intel.RflagsBits : Enum {
    public int value__;
    public static RflagsBits None;
    public static RflagsBits OF;
    public static RflagsBits SF;
    public static RflagsBits ZF;
    public static RflagsBits AF;
    public static RflagsBits CF;
    public static RflagsBits PF;
    public static RflagsBits DF;
    public static RflagsBits IF;
    public static RflagsBits AC;
    public static RflagsBits UIF;
    public static RflagsBits C0;
    public static RflagsBits C1;
    public static RflagsBits C2;
    public static RflagsBits C3;
}
public enum Iced.Intel.RoundingControl : Enum {
    public int value__;
    public static RoundingControl None;
    public static RoundingControl RoundToNearest;
    public static RoundingControl RoundDown;
    public static RoundingControl RoundUp;
    public static RoundingControl RoundTowardZero;
}
[FlagsAttribute]
internal enum Iced.Intel.StateFlags : Enum {
    public UInt32 value__;
    public static StateFlags IpRel64;
    public static StateFlags IpRel32;
    public static StateFlags HasRex;
    public static StateFlags b;
    public static StateFlags z;
    public static StateFlags IsInvalid;
    public static StateFlags W;
    public static StateFlags NoImm;
    public static StateFlags Addr64;
    public static StateFlags BranchImm8;
    public static StateFlags Xbegin;
    public static StateFlags Lock;
    public static StateFlags AllowLock;
    public static StateFlags NoMoreBytes;
    public static StateFlags Has66;
    public static StateFlags MvexSssMask;
    public static StateFlags MvexSssShift;
    public static StateFlags MvexEH;
    public static StateFlags EncodingMask;
    public static StateFlags EncodingShift;
}
internal static class Iced.Intel.Static : object {
    [ConditionalAttribute("E3967789CA584C48B3D02600CAB3C7B2")]
public static void Assert(byte ignored);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.StreamCodeReader : CodeReader {
    public Stream Stream;
    public StreamCodeReader(Stream stream);
    public virtual int ReadByte();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.StreamCodeWriter : CodeWriter {
    public Stream Stream;
    public StreamCodeWriter(Stream stream);
    public virtual void WriteByte(byte value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iced.Intel.StringOutput : FormatterOutput {
    private StringBuilder sb;
    public StringOutput(StringBuilder sb);
    public virtual void Write(string text, FormatterTextKind kind);
    public void Reset();
    public string ToStringAndReset();
    public virtual string ToString();
}
[FlagsAttribute]
public enum Iced.Intel.SymbolFlags : Enum {
    public UInt32 value__;
    public static SymbolFlags None;
    public static SymbolFlags Relative;
    public static SymbolFlags Signed;
    public static SymbolFlags HasSymbolSize;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Iced.Intel.SymbolResult : ValueType {
    private static FormatterTextKind DefaultKind;
    public ulong Address;
    public TextInfo Text;
    public SymbolFlags Flags;
    public MemorySize SymbolSize;
    public bool HasSymbolSize { get; }
    public SymbolResult(ulong address, string text);
    public SymbolResult(ulong address, string text, MemorySize size);
    public SymbolResult(ulong address, string text, FormatterTextKind color);
    public SymbolResult(ulong address, string text, FormatterTextKind color, SymbolFlags flags);
    public SymbolResult(ulong address, TextInfo text);
    public SymbolResult(ulong address, TextInfo text, MemorySize size);
    public SymbolResult(ulong address, TextInfo text, SymbolFlags flags);
    public SymbolResult(ulong address, TextInfo text, SymbolFlags flags, MemorySize size);
    public bool get_HasSymbolSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Iced.Intel.TextInfo : ValueType {
    public TextPart Text;
    [NullableAttribute("2")]
public TextPart[] TextArray;
    public bool IsDefault { get; }
    public TextInfo(string text, FormatterTextKind color);
    public TextInfo(TextPart text);
    public TextInfo(TextPart[] text);
    public bool get_IsDefault();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Iced.Intel.TextPart : ValueType {
    public string Text;
    public FormatterTextKind Color;
    public TextPart(string text, FormatterTextKind color);
}
internal static class Iced.Intel.ThrowHelper : object {
    [DoesNotReturnAttribute]
internal static void ThrowArgumentException();
    [DoesNotReturnAttribute]
internal static void ThrowInvalidOperationException();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_codeWriter();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_data();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_writer();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_options();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_value();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_list();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_collection();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_array();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_sb();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException_output();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_value();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_index();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_count();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_length();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_operand();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_instructionOperand();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_capacity();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_memorySize();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_size();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_elementSize();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_register();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_code();
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException_data();
}
public enum Iced.Intel.TupleType : Enum {
    public int value__;
    public static TupleType N1;
    public static TupleType N2;
    public static TupleType N4;
    public static TupleType N8;
    public static TupleType N16;
    public static TupleType N32;
    public static TupleType N64;
    public static TupleType N8b4;
    public static TupleType N16b4;
    public static TupleType N32b4;
    public static TupleType N64b4;
    public static TupleType N16b8;
    public static TupleType N32b8;
    public static TupleType N64b8;
    public static TupleType N4b2;
    public static TupleType N8b2;
    public static TupleType N16b2;
    public static TupleType N32b2;
    public static TupleType N64b2;
}
internal static class Iced.Intel.TupleTypeTable : object {
    private static ReadOnlySpan`1<byte> tupleTypeData { get; }
    private static ReadOnlySpan`1<byte> get_tupleTypeData();
    public static UInt32 GetDisp8N(TupleType tupleType, bool bcst);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Iced.Intel.UsedMemory : ValueType {
    private ulong displ;
    private byte segReg;
    private byte baseReg;
    private byte indexReg;
    private byte memorySize;
    private byte scale;
    private byte access;
    private byte addressSize;
    private byte vsibSize;
    public Register Segment { get; }
    public Register Base { get; }
    public Register Index { get; }
    public int Scale { get; }
    public ulong Displacement { get; }
    public MemorySize MemorySize { get; }
    public OpAccess Access { get; }
    public CodeSize AddressSize { get; }
    public int VsibSize { get; }
    public UsedMemory(Register segReg, Register baseReg, Register indexReg, int scale, long displ, MemorySize memorySize, OpAccess access);
    public UsedMemory(Register segReg, Register baseReg, Register indexReg, int scale, ulong displ, MemorySize memorySize, OpAccess access);
    public UsedMemory(Register segReg, Register baseReg, Register indexReg, int scale, long displ, MemorySize memorySize, OpAccess access, CodeSize addressSize, int vsibSize);
    public UsedMemory(Register segReg, Register baseReg, Register indexReg, int scale, ulong displ, MemorySize memorySize, OpAccess access, CodeSize addressSize, int vsibSize);
    public Register get_Segment();
    public Register get_Base();
    public Register get_Index();
    public int get_Scale();
    public ulong get_Displacement();
    public MemorySize get_MemorySize();
    public OpAccess get_Access();
    public CodeSize get_AddressSize();
    public int get_VsibSize();
    public ulong GetVirtualAddress(int elementIndex, VAGetRegisterValue getRegisterValue);
    public ulong GetVirtualAddress(int elementIndex, IVARegisterValueProvider registerValueProvider);
    public bool TryGetVirtualAddress(int elementIndex, UInt64& result, VATryGetRegisterValue getRegisterValue);
    public bool TryGetVirtualAddress(int elementIndex, IVATryGetRegisterValueProvider registerValueProvider, UInt64& result);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Iced.Intel.UsedRegister : ValueType {
    private Register register;
    private OpAccess access;
    public Register Register { get; }
    public OpAccess Access { get; }
    public UsedRegister(Register register, OpAccess access);
    public Register get_Register();
    public OpAccess get_Access();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Iced.Intel.VAGetRegisterValue : MulticastDelegate {
    public VAGetRegisterValue(object object, IntPtr method);
    public virtual ulong Invoke(Register register, int elementIndex, int elementSize);
    public virtual IAsyncResult BeginInvoke(Register register, int elementIndex, int elementSize, AsyncCallback callback, object object);
    public virtual ulong EndInvoke(IAsyncResult result);
}
internal class Iced.Intel.VARegisterValueProviderAdapter : object {
    private IVARegisterValueProvider provider;
    public VARegisterValueProviderAdapter(IVARegisterValueProvider provider);
    public sealed virtual bool TryGetRegisterValue(Register register, int elementIndex, int elementSize, UInt64& value);
}
internal class Iced.Intel.VARegisterValueProviderDelegateImpl : object {
    private VAGetRegisterValue getRegisterValue;
    public VARegisterValueProviderDelegateImpl(VAGetRegisterValue getRegisterValue);
    public sealed virtual bool TryGetRegisterValue(Register register, int elementIndex, int elementSize, UInt64& value);
}
public class Iced.Intel.VATryGetRegisterValue : MulticastDelegate {
    public VATryGetRegisterValue(object object, IntPtr method);
    public virtual bool Invoke(Register register, int elementIndex, int elementSize, UInt64& value);
    public virtual IAsyncResult BeginInvoke(Register register, int elementIndex, int elementSize, UInt64& value, AsyncCallback callback, object object);
    public virtual bool EndInvoke(UInt64& value, IAsyncResult result);
}
internal class Iced.Intel.VATryGetRegisterValueDelegateImpl : object {
    private VATryGetRegisterValue getRegisterValue;
    public VATryGetRegisterValueDelegateImpl(VATryGetRegisterValue getRegisterValue);
    public sealed virtual bool TryGetRegisterValue(Register register, int elementIndex, int elementSize, UInt64& value);
}
internal enum Iced.Intel.VectorLength : Enum {
    public int value__;
    public static VectorLength L128;
    public static VectorLength L256;
    public static VectorLength L512;
    public static VectorLength Unknown;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.Array2 : object {
    public static T[] Empty();
}
internal static class System.Diagnostics.Debug2 : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.string2 : object {
    public static bool IsNullOrEmpty(string value);
}
