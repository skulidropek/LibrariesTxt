[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IdentityModel.AspNetCore.AccessTokenManagement.AccessTokenManagementDefaults : object {
    public static string DefaultTokenClientName;
    public static string BackChannelHttpClientName;
    public static string AccessTokenParametersOptionsName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.AccessTokenManagementOptions : object {
    [CompilerGeneratedAttribute]
private UserAccessTokenManagementOptions <User>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientAccessTokenManagementOptions <Client>k__BackingField;
    public UserAccessTokenManagementOptions User { get; public set; }
    public ClientAccessTokenManagementOptions Client { get; public set; }
    [CompilerGeneratedAttribute]
public UserAccessTokenManagementOptions get_User();
    [CompilerGeneratedAttribute]
public void set_User(UserAccessTokenManagementOptions value);
    [CompilerGeneratedAttribute]
public ClientAccessTokenManagementOptions get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(ClientAccessTokenManagementOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.AuthenticationSessionUserAccessTokenStore : object {
    private static string TokenPrefix;
    private static string TokenNamesKey;
    private IHttpContextAccessor _contextAccessor;
    private ILogger`1<AuthenticationSessionUserAccessTokenStore> _logger;
    private UserAccessTokenManagementOptions _options;
    public AuthenticationSessionUserAccessTokenStore(IHttpContextAccessor contextAccessor, ILogger`1<AuthenticationSessionUserAccessTokenStore> logger, UserAccessTokenManagementOptions options);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.AuthenticationSessionUserAccessTokenStore/<GetTokenAsync>d__6")]
public sealed virtual Task`1<UserAccessToken> GetTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.AuthenticationSessionUserAccessTokenStore/<StoreTokenAsync>d__7")]
public sealed virtual Task StoreTokenAsync(ClaimsPrincipal user, string accessToken, DateTimeOffset expiration, string refreshToken, UserAccessTokenParameters parameters);
    public sealed virtual Task ClearTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters);
    protected virtual Task`1<ClaimsPrincipal> FilterPrincipalAsync(ClaimsPrincipal principal);
    protected virtual bool AppendChallengeSchemeToTokenNames(UserAccessTokenParameters parameters);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessToken : object {
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Expiration>k__BackingField;
    public string AccessToken { get; public set; }
    public DateTimeOffset Expiration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(DateTimeOffset value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenCache : object {
    private IDistributedCache _cache;
    private ILogger`1<ClientAccessTokenCache> _logger;
    private ClientAccessTokenManagementOptions _options;
    private static string EntrySeparator;
    public ClientAccessTokenCache(IDistributedCache cache, ClientAccessTokenManagementOptions options, ILogger`1<ClientAccessTokenCache> logger);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenCache/<GetAsync>d__5")]
public sealed virtual Task`1<ClientAccessToken> GetAsync(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenCache/<SetAsync>d__6")]
public sealed virtual Task SetAsync(string clientName, string accessToken, int expiresIn, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    public sealed virtual Task DeleteAsync(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    protected virtual string GenerateCacheKey(ClientAccessTokenManagementOptions options, string clientName, ClientAccessTokenParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenHandler : DelegatingHandler {
    private IClientAccessTokenManagementService _accessTokenManagementService;
    private string _tokenClientName;
    public ClientAccessTokenHandler(IClientAccessTokenManagementService accessTokenManagementService, string tokenClientName);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenHandler/<SetTokenAsync>d__4")]
protected virtual Task SetTokenAsync(HttpRequestMessage request, bool forceRenewal, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenManagementOptions : object {
    [CompilerGeneratedAttribute]
private DefaultClientOptions <DefaultClient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheKeyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CacheLifetimeBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCredentialStyle <ClientCredentialStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ClientCredentialsTokenRequest> <Clients>k__BackingField;
    public DefaultClientOptions DefaultClient { get; public set; }
    public string CacheKeyPrefix { get; public set; }
    public int CacheLifetimeBuffer { get; public set; }
    public ClientCredentialStyle ClientCredentialStyle { get; public set; }
    public IDictionary`2<string, ClientCredentialsTokenRequest> Clients { get; public set; }
    [CompilerGeneratedAttribute]
public DefaultClientOptions get_DefaultClient();
    [CompilerGeneratedAttribute]
public void set_DefaultClient(DefaultClientOptions value);
    [CompilerGeneratedAttribute]
public string get_CacheKeyPrefix();
    [CompilerGeneratedAttribute]
public void set_CacheKeyPrefix(string value);
    [CompilerGeneratedAttribute]
public int get_CacheLifetimeBuffer();
    [CompilerGeneratedAttribute]
public void set_CacheLifetimeBuffer(int value);
    [CompilerGeneratedAttribute]
public ClientCredentialStyle get_ClientCredentialStyle();
    [CompilerGeneratedAttribute]
public void set_ClientCredentialStyle(ClientCredentialStyle value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ClientCredentialsTokenRequest> get_Clients();
    [CompilerGeneratedAttribute]
public void set_Clients(IDictionary`2<string, ClientCredentialsTokenRequest> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenManagementService : object {
    private IClientAccessTokenRequestSynchronization _sync;
    private ITokenEndpointService _tokenEndpointService;
    private IClientAccessTokenCache _clientAccessTokenCache;
    private ILogger`1<ClientAccessTokenManagementService> _logger;
    public ClientAccessTokenManagementService(IClientAccessTokenRequestSynchronization sync, ITokenEndpointService tokenEndpointService, IClientAccessTokenCache clientAccessTokenCache, ILogger`1<ClientAccessTokenManagementService> logger);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenManagementService/<GetClientAccessTokenAsync>d__5")]
public sealed virtual Task`1<string> GetClientAccessTokenAsync(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    public sealed virtual Task DeleteClientAccessTokenAsync(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.ClientAccessTokenParameters : object {
    [CompilerGeneratedAttribute]
private bool <ForceRenewal>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private Parameters <Context>k__BackingField;
    public bool ForceRenewal { get; public set; }
    [NullableAttribute("2")]
public string Resource { get; public set; }
    public Parameters Context { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceRenewal();
    [CompilerGeneratedAttribute]
public void set_ForceRenewal(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Resource();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public Parameters get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(Parameters value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.DefaultTokenClientConfigurationService : object {
    private UserAccessTokenManagementOptions _userAccessTokenManagementOptions;
    private ClientAccessTokenManagementOptions _clientAccessTokenManagementOptions;
    private IOptionsMonitor`1<OpenIdConnectOptions> _oidcOptions;
    private IAuthenticationSchemeProvider _schemeProvider;
    private ILogger`1<DefaultTokenClientConfigurationService> _logger;
    public DefaultTokenClientConfigurationService(UserAccessTokenManagementOptions userAccessTokenManagementOptions, ClientAccessTokenManagementOptions clientAccessTokenManagementOptions, IOptionsMonitor`1<OpenIdConnectOptions> oidcOptions, IAuthenticationSchemeProvider schemeProvider, ILogger`1<DefaultTokenClientConfigurationService> logger);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.DefaultTokenClientConfigurationService/<GetClientCredentialsRequestAsync>d__6")]
public virtual Task`1<ClientCredentialsTokenRequest> GetClientCredentialsRequestAsync(string clientName, ClientAccessTokenParameters parameters);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.DefaultTokenClientConfigurationService/<GetRefreshTokenRequestAsync>d__7")]
public virtual Task`1<RefreshTokenRequest> GetRefreshTokenRequestAsync(UserAccessTokenParameters parameters);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.DefaultTokenClientConfigurationService/<GetTokenRevocationRequestAsync>d__8")]
public virtual Task`1<TokenRevocationRequest> GetTokenRevocationRequestAsync(UserAccessTokenParameters parameters);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.DefaultTokenClientConfigurationService/<GetOpenIdConnectSettingsAsync>d__9")]
public virtual Task`1<ValueTuple`2<OpenIdConnectOptions, OpenIdConnectConfiguration>> GetOpenIdConnectSettingsAsync(string schemeName);
    [NullableContextAttribute("2")]
protected virtual Task`1<ClientAssertion> CreateAssertionAsync(string clientName);
}
[NullableContextAttribute("1")]
public interface IdentityModel.AspNetCore.AccessTokenManagement.IClientAccessTokenCache {
    public abstract virtual Task SetAsync(string clientName, string accessToken, int expiresIn, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<ClientAccessToken> GetAsync(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface IdentityModel.AspNetCore.AccessTokenManagement.IClientAccessTokenManagementService {
    public abstract virtual Task`1<string> GetClientAccessTokenAsync(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    public abstract virtual Task DeleteClientAccessTokenAsync(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface IdentityModel.AspNetCore.AccessTokenManagement.ITokenClientConfigurationService {
    public abstract virtual Task`1<ClientCredentialsTokenRequest> GetClientCredentialsRequestAsync(string clientName, ClientAccessTokenParameters parameters);
    public abstract virtual Task`1<RefreshTokenRequest> GetRefreshTokenRequestAsync(UserAccessTokenParameters parameters);
    public abstract virtual Task`1<TokenRevocationRequest> GetTokenRevocationRequestAsync(UserAccessTokenParameters parameters);
}
[NullableContextAttribute("1")]
public interface IdentityModel.AspNetCore.AccessTokenManagement.ITokenEndpointService {
    public abstract virtual Task`1<TokenResponse> RefreshUserAccessTokenAsync(string refreshToken, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<TokenResponse> RequestClientAccessToken(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<TokenRevocationResponse> RevokeRefreshTokenAsync(string refreshToken, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface IdentityModel.AspNetCore.AccessTokenManagement.IUserAccessTokenManagementService {
    public abstract virtual Task`1<string> GetUserAccessTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
    public abstract virtual Task RevokeRefreshTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface IdentityModel.AspNetCore.AccessTokenManagement.IUserAccessTokenStore {
    public abstract virtual Task StoreTokenAsync(ClaimsPrincipal user, string accessToken, DateTimeOffset expiration, string refreshToken, UserAccessTokenParameters parameters);
    public abstract virtual Task`1<UserAccessToken> GetTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters);
    public abstract virtual Task ClearTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.TokenEndpointService : object {
    private ITokenClientConfigurationService _configService;
    private IHttpClientFactory _httpClientFactory;
    private ILogger`1<TokenEndpointService> _logger;
    public TokenEndpointService(ITokenClientConfigurationService configService, IHttpClientFactory httpClientFactory, ILogger`1<TokenEndpointService> logger);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.TokenEndpointService/<RequestClientAccessToken>d__4")]
public sealed virtual Task`1<TokenResponse> RequestClientAccessToken(string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.TokenEndpointService/<RefreshUserAccessTokenAsync>d__5")]
public sealed virtual Task`1<TokenResponse> RefreshUserAccessTokenAsync(string refreshToken, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.TokenEndpointService/<RevokeRefreshTokenAsync>d__6")]
public sealed virtual Task`1<TokenRevocationResponse> RevokeRefreshTokenAsync(string refreshToken, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.TokenManagementBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public TokenManagementBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    public IHttpClientBuilder ConfigureBackchannelHttpClient(Action`1<HttpClient> configureClient);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.UserAccessAccessTokenManagementService : object {
    private IUserAccessTokenRequestSynchronization _sync;
    private IUserAccessTokenStore _userAccessTokenStore;
    private ISystemClock _clock;
    private UserAccessTokenManagementOptions _options;
    private ITokenEndpointService _tokenEndpointService;
    private ILogger`1<UserAccessAccessTokenManagementService> _logger;
    public UserAccessAccessTokenManagementService(IUserAccessTokenRequestSynchronization sync, IUserAccessTokenStore userAccessTokenStore, ISystemClock clock, UserAccessTokenManagementOptions options, ITokenEndpointService tokenEndpointService, ILogger`1<UserAccessAccessTokenManagementService> logger);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.UserAccessAccessTokenManagementService/<GetUserAccessTokenAsync>d__7")]
public sealed virtual Task`1<string> GetUserAccessTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.UserAccessAccessTokenManagementService/<RevokeRefreshTokenAsync>d__8")]
public sealed virtual Task RevokeRefreshTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.UserAccessAccessTokenManagementService/<RefreshUserAccessTokenAsync>d__9")]
private Task`1<TokenResponse> RefreshUserAccessTokenAsync(ClaimsPrincipal user, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.UserAccessToken : object {
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    public string AccessToken { get; public set; }
    public Nullable`1<DateTimeOffset> Expiration { get; public set; }
    public string RefreshToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.UserAccessTokenHandler : DelegatingHandler {
    private IHttpContextAccessor _httpContextAccessor;
    private UserAccessTokenParameters _parameters;
    public UserAccessTokenHandler(IHttpContextAccessor httpContextAccessor, UserAccessTokenParameters parameters);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.UserAccessTokenHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("IdentityModel.AspNetCore.AccessTokenManagement.UserAccessTokenHandler/<SetTokenAsync>d__4")]
protected virtual Task SetTokenAsync(HttpRequestMessage request, bool forceRenewal);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.UserAccessTokenManagementOptions : object {
    [CompilerGeneratedAttribute]
private ClientCredentialStyle <ClientCredentialStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseChallengeSchemeScopedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RefreshBeforeExpiration>k__BackingField;
    public ClientCredentialStyle ClientCredentialStyle { get; public set; }
    public string SchemeName { get; public set; }
    public bool UseChallengeSchemeScopedTokens { get; public set; }
    public TimeSpan RefreshBeforeExpiration { get; public set; }
    [CompilerGeneratedAttribute]
public ClientCredentialStyle get_ClientCredentialStyle();
    [CompilerGeneratedAttribute]
public void set_ClientCredentialStyle(ClientCredentialStyle value);
    [CompilerGeneratedAttribute]
public string get_SchemeName();
    [CompilerGeneratedAttribute]
public void set_SchemeName(string value);
    [CompilerGeneratedAttribute]
public bool get_UseChallengeSchemeScopedTokens();
    [CompilerGeneratedAttribute]
public void set_UseChallengeSchemeScopedTokens(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RefreshBeforeExpiration();
    [CompilerGeneratedAttribute]
public void set_RefreshBeforeExpiration(TimeSpan value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IdentityModel.AspNetCore.AccessTokenManagement.UserAccessTokenParameters : object {
    [CompilerGeneratedAttribute]
private string <SignInScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChallengeScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceRenewal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Parameters <Context>k__BackingField;
    public string SignInScheme { get; public set; }
    public string ChallengeScheme { get; public set; }
    public bool ForceRenewal { get; public set; }
    public string Resource { get; public set; }
    [NullableAttribute("1")]
public Parameters Context { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SignInScheme();
    [CompilerGeneratedAttribute]
public void set_SignInScheme(string value);
    [CompilerGeneratedAttribute]
public string get_ChallengeScheme();
    [CompilerGeneratedAttribute]
public void set_ChallengeScheme(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceRenewal();
    [CompilerGeneratedAttribute]
public void set_ForceRenewal(bool value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Parameters get_Context();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Context(Parameters value);
}
public class IdentityModel.AspNetCore.AccessTokenRequestSynchronization : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, Lazy`1<Task`1<string>>> <Dictionary>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ConcurrentDictionary`2<string, Lazy`1<Task`1<string>>> Dictionary { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ConcurrentDictionary`2<string, Lazy`1<Task`1<string>>> get_Dictionary();
}
internal class IdentityModel.AspNetCore.ConfigMarker : object {
}
public interface IdentityModel.AspNetCore.IAccessTokenRequestSynchronization {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ConcurrentDictionary`2<string, Lazy`1<Task`1<string>>> Dictionary { get; }
    public abstract virtual ConcurrentDictionary`2<string, Lazy`1<Task`1<string>>> get_Dictionary();
}
public interface IdentityModel.AspNetCore.IClientAccessTokenRequestSynchronization {
}
public interface IdentityModel.AspNetCore.IUserAccessTokenRequestSynchronization {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class IdentityModel.AspNetCore.StringExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool IsMissing(string value);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool IsPresent(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authentication.TokenManagementHttpContextExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.TokenManagementHttpContextExtensions/<GetUserAccessTokenAsync>d__0")]
[ExtensionAttribute]
public static Task`1<string> GetUserAccessTokenAsync(HttpContext httpContext, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.TokenManagementHttpContextExtensions/<GetClientAccessTokenAsync>d__1")]
[ExtensionAttribute]
public static Task`1<string> GetClientAccessTokenAsync(HttpContext httpContext, string clientName, ClientAccessTokenParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authentication.TokenManagementHttpContextExtensions/<RevokeUserRefreshTokenAsync>d__2")]
[ExtensionAttribute]
public static Task RevokeUserRefreshTokenAsync(HttpContext httpContext, UserAccessTokenParameters parameters, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.TokenManagementServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static TokenManagementBuilder AddAccessTokenManagement(IServiceCollection services);
    [ExtensionAttribute]
public static TokenManagementBuilder AddAccessTokenManagement(IServiceCollection services, Action`1<AccessTokenManagementOptions> configureAction);
    [ExtensionAttribute]
public static TokenManagementBuilder AddAccessTokenManagement(IServiceCollection services, Action`2<IServiceProvider, AccessTokenManagementOptions> configureAction);
    [ExtensionAttribute]
public static TokenManagementBuilder AddClientAccessTokenManagement(IServiceCollection services);
    [ExtensionAttribute]
public static TokenManagementBuilder AddClientAccessTokenManagement(IServiceCollection services, Action`1<ClientAccessTokenManagementOptions> configureAction);
    [ExtensionAttribute]
public static TokenManagementBuilder AddClientAccessTokenManagement(IServiceCollection services, Action`2<IServiceProvider, ClientAccessTokenManagementOptions> configureAction);
    [ExtensionAttribute]
public static TokenManagementBuilder AddUserAccessTokenManagement(IServiceCollection services);
    [ExtensionAttribute]
public static TokenManagementBuilder AddUserAccessTokenManagement(IServiceCollection services, Action`1<UserAccessTokenManagementOptions> configureAction);
    [ExtensionAttribute]
public static TokenManagementBuilder AddUserAccessTokenManagement(IServiceCollection services, Action`2<IServiceProvider, UserAccessTokenManagementOptions> configureAction);
    [ExtensionAttribute]
private static TokenManagementBuilder AddUserAccessTokenManagementInternal(IServiceCollection services);
    [ExtensionAttribute]
private static void AddSharedServices(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddUserAccessTokenHttpClient(IServiceCollection services, string name, UserAccessTokenParameters parameters, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddUserAccessTokenHttpClient(IServiceCollection services, string name, UserAccessTokenParameters parameters, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddClientAccessTokenHttpClient(IServiceCollection services, string clientName, string tokenClientName, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddClientAccessTokenHttpClient(IServiceCollection services, string clientName, string tokenClientName, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddClientAccessTokenHandler(IHttpClientBuilder httpClientBuilder, string tokenClientName);
    [ExtensionAttribute]
public static IHttpClientBuilder AddUserAccessTokenHandler(IHttpClientBuilder httpClientBuilder, UserAccessTokenParameters parameters);
    [ExtensionAttribute]
private static TokenManagementBuilder AddClientAccessTokenManagementInternal(IServiceCollection services);
    private static void CheckConfigMarker(IServiceCollection services);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
