internal static class IdentityServer3.AccessTokenValidation.AsyncHelper : object {
    private static TaskFactory _myTaskFactory;
    private static AsyncHelper();
    public static void RunSync(Func`1<Task> func);
    public static TResult RunSync(Func`1<Task`1<TResult>> func);
}
public class IdentityServer3.AccessTokenValidation.Cache : object {
    private static string CacheName;
    private MemoryCache _cache;
    public sealed virtual bool Add(string key, object value, DateTimeOffset absoluteExpiration);
    public sealed virtual object Get(string key);
}
public class IdentityServer3.AccessTokenValidation.Clock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
public class IdentityServer3.AccessTokenValidation.ContextTokenProvider : object {
    private IOAuthBearerAuthenticationProvider _inner;
    public ContextTokenProvider(IOAuthBearerAuthenticationProvider inner);
    public sealed virtual Task RequestToken(OAuthRequestTokenContext context);
    public sealed virtual Task ApplyChallenge(OAuthChallengeContext context);
    public sealed virtual Task ValidateIdentity(OAuthValidateIdentityContext context);
}
internal class IdentityServer3.AccessTokenValidation.DiscoveryDocumentIssuerSecurityTokenProvider : object {
    private TimeSpan _refreshInterval;
    private ReaderWriterLockSlim _synclock;
    private ConfigurationManager`1<OpenIdConnectConfiguration> _configurationManager;
    private ILogger _logger;
    private DateTimeOffset _syncAfter;
    private string _issuer;
    private IEnumerable`1<SecurityToken> _tokens;
    public string Issuer { get; }
    public string Audience { get; }
    public IEnumerable`1<SecurityToken> SecurityTokens { get; }
    public DiscoveryDocumentIssuerSecurityTokenProvider(string discoveryEndpoint, IdentityServerBearerTokenAuthenticationOptions options, ILoggerFactory loggerFactory);
    public sealed virtual string get_Issuer();
    public string get_Audience();
    public sealed virtual IEnumerable`1<SecurityToken> get_SecurityTokens();
    private void RetrieveMetadata();
    [AsyncStateMachineAttribute("IdentityServer3.AccessTokenValidation.DiscoveryDocumentIssuerSecurityTokenProvider/<<RetrieveMetadata>b__1>d__3")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private Task`1<OpenIdConnectConfiguration> <RetrieveMetadata>b__1();
}
[ExtensionAttribute]
internal static class IdentityServer3.AccessTokenValidation.EpochTimeExtensions : object {
    [ExtensionAttribute]
public static long ToEpochTime(DateTime dateTime);
    [ExtensionAttribute]
public static long ToEpochTime(DateTimeOffset dateTime);
    [ExtensionAttribute]
public static DateTime ToDateTimeFromEpoch(long intDate);
    [ExtensionAttribute]
public static DateTimeOffset ToDateTimeOffsetFromEpoch(long intDate);
}
public interface IdentityServer3.AccessTokenValidation.ICache {
    public abstract virtual bool Add(string key, object value, DateTimeOffset absoluteExpiration);
    public abstract virtual object Get(string key);
}
public interface IdentityServer3.AccessTokenValidation.IClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
public class IdentityServer3.AccessTokenValidation.IdentityServerBearerTokenAuthenticationOptions : AuthenticationOptions {
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuerName>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <SigningCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidationMode <ValidationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <BackchannelHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertificateValidator <BackchannelCertificateValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private IOAuthBearerAuthenticationProvider <TokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ValidationResultCacheDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableValidationResultCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IValidationResultCache <ValidationResultCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RequiredScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveAccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <IntrospectionHttpHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelayLoadMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerSigningKeyResolver <IssuerSigningKeyResolver>k__BackingField;
    public string Authority { get; public set; }
    public string IssuerName { get; public set; }
    public X509Certificate2 SigningCertificate { get; public set; }
    public ValidationMode ValidationMode { get; public set; }
    public HttpMessageHandler BackchannelHttpHandler { get; public set; }
    public ICertificateValidator BackchannelCertificateValidator { get; public set; }
    public string NameClaimType { get; public set; }
    public string RoleClaimType { get; public set; }
    public IOAuthBearerAuthenticationProvider TokenProvider { get; public set; }
    public TimeSpan ValidationResultCacheDuration { get; public set; }
    public bool EnableValidationResultCache { get; public set; }
    public IValidationResultCache ValidationResultCache { get; public set; }
    public IEnumerable`1<string> RequiredScopes { get; public set; }
    public bool PreserveAccessToken { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    public HttpMessageHandler IntrospectionHttpHandler { get; public set; }
    public bool DelayLoadMetadata { get; public set; }
    public IssuerSigningKeyResolver IssuerSigningKeyResolver { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(string value);
    [CompilerGeneratedAttribute]
public string get_IssuerName();
    [CompilerGeneratedAttribute]
public void set_IssuerName(string value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_SigningCertificate();
    [CompilerGeneratedAttribute]
public void set_SigningCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public ValidationMode get_ValidationMode();
    [CompilerGeneratedAttribute]
public void set_ValidationMode(ValidationMode value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_BackchannelHttpHandler();
    [CompilerGeneratedAttribute]
public void set_BackchannelHttpHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public ICertificateValidator get_BackchannelCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_BackchannelCertificateValidator(ICertificateValidator value);
    [CompilerGeneratedAttribute]
public string get_NameClaimType();
    [CompilerGeneratedAttribute]
public void set_NameClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_RoleClaimType();
    [CompilerGeneratedAttribute]
public void set_RoleClaimType(string value);
    [CompilerGeneratedAttribute]
public IOAuthBearerAuthenticationProvider get_TokenProvider();
    [CompilerGeneratedAttribute]
public void set_TokenProvider(IOAuthBearerAuthenticationProvider value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ValidationResultCacheDuration();
    [CompilerGeneratedAttribute]
public void set_ValidationResultCacheDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_EnableValidationResultCache();
    [CompilerGeneratedAttribute]
public void set_EnableValidationResultCache(bool value);
    [CompilerGeneratedAttribute]
public IValidationResultCache get_ValidationResultCache();
    [CompilerGeneratedAttribute]
public void set_ValidationResultCache(IValidationResultCache value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RequiredScopes();
    [CompilerGeneratedAttribute]
public void set_RequiredScopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_PreserveAccessToken();
    [CompilerGeneratedAttribute]
public void set_PreserveAccessToken(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_IntrospectionHttpHandler();
    [CompilerGeneratedAttribute]
public void set_IntrospectionHttpHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public bool get_DelayLoadMetadata();
    [CompilerGeneratedAttribute]
public void set_DelayLoadMetadata(bool value);
    [CompilerGeneratedAttribute]
public IssuerSigningKeyResolver get_IssuerSigningKeyResolver();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyResolver(IssuerSigningKeyResolver value);
}
public class IdentityServer3.AccessTokenValidation.IdentityServerBearerTokenValidationMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private Lazy`1<Func`2<IDictionary`2<string, object>, Task>> _localValidationFunc;
    private Lazy`1<Func`2<IDictionary`2<string, object>, Task>> _endpointValidationFunc;
    private IdentityServerOAuthBearerAuthenticationOptions _options;
    private ILogger _logger;
    public IdentityServerBearerTokenValidationMiddleware(Func`2<IDictionary`2<string, object>, Task> next, IAppBuilder app, IdentityServerOAuthBearerAuthenticationOptions options, ILoggerFactory loggerFactory);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.AccessTokenValidation.IdentityServerBearerTokenValidationMiddleware/<Invoke>d__8")]
public Task Invoke(IDictionary`2<string, object> environment);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.AccessTokenValidation.IdentityServerBearerTokenValidationMiddleware/<GetTokenAsync>d__e")]
private Task`1<string> GetTokenAsync(OwinContext context);
}
public class IdentityServer3.AccessTokenValidation.IdentityServerOAuthBearerAuthenticationOptions : object {
    [CompilerGeneratedAttribute]
private IOAuthBearerAuthenticationProvider <TokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<OAuthBearerAuthenticationOptions> <LocalValidationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<OAuthBearerAuthenticationOptions> <EndpointValidationOptions>k__BackingField;
    public IOAuthBearerAuthenticationProvider TokenProvider { get; public set; }
    public Lazy`1<OAuthBearerAuthenticationOptions> LocalValidationOptions { get; public set; }
    public Lazy`1<OAuthBearerAuthenticationOptions> EndpointValidationOptions { get; public set; }
    [CompilerGeneratedAttribute]
public IOAuthBearerAuthenticationProvider get_TokenProvider();
    [CompilerGeneratedAttribute]
public void set_TokenProvider(IOAuthBearerAuthenticationProvider value);
    [CompilerGeneratedAttribute]
public Lazy`1<OAuthBearerAuthenticationOptions> get_LocalValidationOptions();
    [CompilerGeneratedAttribute]
public void set_LocalValidationOptions(Lazy`1<OAuthBearerAuthenticationOptions> value);
    [CompilerGeneratedAttribute]
public Lazy`1<OAuthBearerAuthenticationOptions> get_EndpointValidationOptions();
    [CompilerGeneratedAttribute]
public void set_EndpointValidationOptions(Lazy`1<OAuthBearerAuthenticationOptions> value);
}
public class IdentityServer3.AccessTokenValidation.InMemoryValidationResultCache : object {
    private IdentityServerBearerTokenAuthenticationOptions _options;
    private ICache _cache;
    private IClock _clock;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public InMemoryValidationResultCache(IdentityServerBearerTokenAuthenticationOptions options);
    public InMemoryValidationResultCache(IdentityServerBearerTokenAuthenticationOptions options, IClock clock, ICache cache);
    public sealed virtual Task AddAsync(string token, IEnumerable`1<Claim> claims);
    public sealed virtual Task`1<IEnumerable`1<Claim>> GetAsync(string token);
    [CompilerGeneratedAttribute]
private static bool <AddAsync>b__0(Claim c);
}
internal class IdentityServer3.AccessTokenValidation.IntrospectionEndpointTokenProvider : AuthenticationTokenProvider {
    private IntrospectionClient _client;
    private IdentityServerBearerTokenAuthenticationOptions _options;
    private ILogger _logger;
    public IntrospectionEndpointTokenProvider(IdentityServerBearerTokenAuthenticationOptions options, ILoggerFactory loggerFactory);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.AccessTokenValidation.IntrospectionEndpointTokenProvider/<ReceiveAsync>d__1")]
public virtual Task ReceiveAsync(AuthenticationTokenReceiveContext context);
    private void SetAuthenticationTicket(AuthenticationTokenReceiveContext context, IEnumerable`1<Claim> claims);
}
public interface IdentityServer3.AccessTokenValidation.IValidationResultCache {
    public abstract virtual Task AddAsync(string token, IEnumerable`1<Claim> claims);
    public abstract virtual Task`1<IEnumerable`1<Claim>> GetAsync(string token);
}
internal class IdentityServer3.AccessTokenValidation.PreserveAccessTokenMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public PreserveAccessTokenMiddleware(Func`2<IDictionary`2<string, object>, Task> next);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.AccessTokenValidation.PreserveAccessTokenMiddleware/<Invoke>d__0")]
public Task Invoke(IDictionary`2<string, object> env);
}
public class IdentityServer3.AccessTokenValidation.ScopeRequirementMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private ScopeRequirementOptions _options;
    public ScopeRequirementMiddleware(Func`2<IDictionary`2<string, object>, Task> next, ScopeRequirementOptions options);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.AccessTokenValidation.ScopeRequirementMiddleware/<Invoke>d__0")]
public Task Invoke(IDictionary`2<string, object> env);
    private void EmitCorsResponseHeaders(IDictionary`2<string, object> env);
    private bool ScopesFound(OwinContext context);
    private static void SetHeaderIfNotAlreadyPresent(IHeaderDictionary headers, string headerName, String[] headerValues);
}
public class IdentityServer3.AccessTokenValidation.ScopeRequirementOptions : object {
    [CompilerGeneratedAttribute]
private string <AuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RequiredScopes>k__BackingField;
    public string AuthenticationType { get; public set; }
    public IEnumerable`1<string> RequiredScopes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AuthenticationType();
    [CompilerGeneratedAttribute]
public void set_AuthenticationType(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RequiredScopes();
    [CompilerGeneratedAttribute]
public void set_RequiredScopes(IEnumerable`1<string> value);
}
[ExtensionAttribute]
internal static class IdentityServer3.AccessTokenValidation.StringExtensions : object {
    [ExtensionAttribute]
public static string EnsureTrailingSlash(string input);
}
internal class IdentityServer3.AccessTokenValidation.ValidationEndpointTokenProvider : AuthenticationTokenProvider {
    private HttpClient _client;
    private string _tokenValidationEndpoint;
    private IdentityServerBearerTokenAuthenticationOptions _options;
    private ILogger _logger;
    public ValidationEndpointTokenProvider(IdentityServerBearerTokenAuthenticationOptions options, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("IdentityServer3.AccessTokenValidation.ValidationEndpointTokenProvider/<ReceiveAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task ReceiveAsync(AuthenticationTokenReceiveContext context);
    private void SetAuthenticationTicket(AuthenticationTokenReceiveContext context, IEnumerable`1<Claim> claims);
}
public enum IdentityServer3.AccessTokenValidation.ValidationMode : Enum {
    public int value__;
    public static ValidationMode Both;
    public static ValidationMode Local;
    public static ValidationMode ValidationEndpoint;
}
[ExtensionAttribute]
public static class Owin.IdentityServerBearerTokenValidationAppBuilderExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseIdentityServerBearerTokenAuthentication(IAppBuilder app, IdentityServerBearerTokenAuthenticationOptions options);
    private static Lazy`1<OAuthBearerAuthenticationOptions> ConfigureEndpointValidation(IdentityServerBearerTokenAuthenticationOptions options, ILoggerFactory loggerFactory);
    internal static Lazy`1<OAuthBearerAuthenticationOptions> ConfigureLocalValidation(IdentityServerBearerTokenAuthenticationOptions options, ILoggerFactory loggerFactory);
    private static SecurityKey ResolveRsaKeys(string token, SecurityToken securityToken, SecurityKeyIdentifier keyIdentifier, TokenValidationParameters validationParameters);
}
