internal class Autofac.Builder.ConcreteReflectionActivatorData : ReflectionActivatorData {
    public IInstanceActivator Activator { get; }
    public ConcreteReflectionActivatorData(Type implementer);
    public sealed virtual IInstanceActivator get_Activator();
}
[FlagsAttribute]
internal enum Autofac.Builder.ContainerBuildOptions : Enum {
    public int value__;
    public static ContainerBuildOptions None;
    public static ContainerBuildOptions ExcludeDefaultModules;
    public static ContainerBuildOptions IgnoreStartableComponents;
}
internal class Autofac.Builder.DynamicRegistrationStyle : object {
}
internal interface Autofac.Builder.IConcreteActivatorData {
    public IInstanceActivator Activator { get; }
    public abstract virtual IInstanceActivator get_Activator();
}
[EditorBrowsableAttribute("1")]
internal interface Autofac.Builder.IHideObjectMembers {
    [SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
[EditorBrowsableAttribute("1")]
public abstract virtual Type GetType();
    [EditorBrowsableAttribute("1")]
public abstract virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public abstract virtual string ToString();
    [EditorBrowsableAttribute("1")]
public abstract virtual bool Equals(object other);
}
internal interface Autofac.Builder.IRegistrationBuilder`3 {
    [EditorBrowsableAttribute("1")]
public TActivatorData ActivatorData { get; }
    [EditorBrowsableAttribute("1")]
public TRegistrationStyle RegistrationStyle { get; }
    [EditorBrowsableAttribute("1")]
public RegistrationData RegistrationData { get; }
    public abstract virtual TActivatorData get_ActivatorData();
    public abstract virtual TRegistrationStyle get_RegistrationStyle();
    public abstract virtual RegistrationData get_RegistrationData();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> ExternallyOwned();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OwnedByLifetimeScope();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerDependency();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> SingleInstance();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerLifetimeScope();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerMatchingLifetimeScope(Object[] lifetimeScopeTag);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(Type serviceType);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(object serviceKey);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(object serviceKey, Type serviceType);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Type[] services);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Service[] services);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Named(string serviceName, Type serviceType);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Named(string serviceName);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Keyed(object serviceKey, Type serviceType);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Keyed(object serviceKey);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnPreparing(Action`1<PreparingEventArgs> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivating(Action`1<IActivatingEventArgs`1<TLimit>> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivated(Action`1<IActivatedEventArgs`1<TLimit>> handler);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> PropertiesAutowired(PropertyWiringOptions options);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(string key, object value);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(IEnumerable`1<KeyValuePair`2<string, object>> properties);
    public abstract virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(Action`1<MetadataConfiguration`1<TMetadata>> configurationAction);
}
internal class Autofac.Builder.MetadataConfiguration`1 : object {
    private IDictionary`2<string, object> _properties;
    internal IEnumerable`1<KeyValuePair`2<string, object>> Properties { get; }
    internal IEnumerable`1<KeyValuePair`2<string, object>> get_Properties();
    public MetadataConfiguration`1<TMetadata> For(Expression`1<Func`2<TMetadata, TProperty>> propertyAccessor, TProperty value);
}
internal class Autofac.Builder.ReflectionActivatorData : object {
    private Type _implementer;
    private IConstructorFinder _constructorFinder;
    private IConstructorSelector _constructorSelector;
    private IList`1<Parameter> _configuredParameters;
    private IList`1<Parameter> _configuredProperties;
    public Type ImplementationType { get; public set; }
    public IConstructorFinder ConstructorFinder { get; public set; }
    public IConstructorSelector ConstructorSelector { get; public set; }
    public IList`1<Parameter> ConfiguredParameters { get; }
    public IList`1<Parameter> ConfiguredProperties { get; }
    public ReflectionActivatorData(Type implementer);
    public Type get_ImplementationType();
    public void set_ImplementationType(Type value);
    public IConstructorFinder get_ConstructorFinder();
    public void set_ConstructorFinder(IConstructorFinder value);
    public IConstructorSelector get_ConstructorSelector();
    public void set_ConstructorSelector(IConstructorSelector value);
    public IList`1<Parameter> get_ConfiguredParameters();
    public IList`1<Parameter> get_ConfiguredProperties();
}
[ExtensionAttribute]
internal static class Autofac.Builder.RegistrationBuilder : object {
    public static IRegistrationBuilder`3<T, SimpleActivatorData, SingleRegistrationStyle> ForDelegate(Func`3<IComponentContext, IEnumerable`1<Parameter>, T> delegate);
    public static IRegistrationBuilder`3<object, SimpleActivatorData, SingleRegistrationStyle> ForDelegate(Type limitType, Func`3<IComponentContext, IEnumerable`1<Parameter>, object> delegate);
    public static IRegistrationBuilder`3<TImplementer, ConcreteReflectionActivatorData, SingleRegistrationStyle> ForType();
    public static IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle> ForType(Type implementationType);
    [ExtensionAttribute]
public static IComponentRegistration CreateRegistration(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> builder);
    public static IComponentRegistration CreateRegistration(Guid id, RegistrationData data, IInstanceActivator activator, IEnumerable`1<Service> services);
    public static IComponentRegistration CreateRegistration(Guid id, RegistrationData data, IInstanceActivator activator, IEnumerable`1<Service> services, IComponentRegistration target);
    public static void RegisterSingleComponent(IComponentRegistry cr, IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> builder);
}
internal class Autofac.Builder.RegistrationBuilder`3 : object {
    private TActivatorData _activatorData;
    private TRegistrationStyle _registrationStyle;
    private RegistrationData _registrationData;
    [CompilerGeneratedAttribute]
private static Func`2<Type, TypedService> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("1")]
public TActivatorData ActivatorData { get; }
    [EditorBrowsableAttribute("1")]
public TRegistrationStyle RegistrationStyle { get; }
    [EditorBrowsableAttribute("1")]
public RegistrationData RegistrationData { get; }
    public RegistrationBuilder`3(Service defaultService, TActivatorData activatorData, TRegistrationStyle style);
    public sealed virtual TActivatorData get_ActivatorData();
    public sealed virtual TRegistrationStyle get_RegistrationStyle();
    public sealed virtual RegistrationData get_RegistrationData();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> ExternallyOwned();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OwnedByLifetimeScope();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerDependency();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> SingleInstance();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerLifetimeScope();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerMatchingLifetimeScope(Object[] lifetimeScopeTag);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(Type serviceType);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(object serviceKey);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InstancePerOwned(object serviceKey, Type serviceType);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As();
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Type[] services);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> As(Service[] services);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Named(string serviceName, Type serviceType);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Named(string serviceName);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Keyed(object serviceKey, Type serviceType);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> Keyed(object serviceKey);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnPreparing(Action`1<PreparingEventArgs> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivating(Action`1<IActivatingEventArgs`1<TLimit>> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnActivated(Action`1<IActivatedEventArgs`1<TLimit>> handler);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> PropertiesAutowired(PropertyWiringOptions wiringFlags);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(string key, object value);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(IEnumerable`1<KeyValuePair`2<string, object>> properties);
    public sealed virtual IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> WithMetadata(Action`1<MetadataConfiguration`1<TMetadata>> configurationAction);
    private sealed virtual override Type Autofac.Builder.IHideObjectMembers.GetType();
    [CompilerGeneratedAttribute]
private static TypedService <As>b__0(Type t);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.Builder.RegistrationBuilderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ComponentDoesNotSupportService { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ComponentDoesNotSupportService();
}
internal class Autofac.Builder.RegistrationData : object {
    private bool _defaultServiceOverridden;
    private Service _defaultService;
    private ICollection`1<Service> _services;
    private InstanceOwnership _ownership;
    private IComponentLifetime _lifetime;
    private InstanceSharing _sharing;
    private IDictionary`2<string, object> _metadata;
    private ICollection`1<EventHandler`1<PreparingEventArgs>> _preparingHandlers;
    private ICollection`1<EventHandler`1<ActivatingEventArgs`1<object>>> _activatingHandlers;
    private ICollection`1<EventHandler`1<ActivatedEventArgs`1<object>>> _activatedHandlers;
    public IEnumerable`1<Service> Services { get; }
    public InstanceOwnership Ownership { get; public set; }
    public IComponentLifetime Lifetime { get; public set; }
    public InstanceSharing Sharing { get; public set; }
    public IDictionary`2<string, object> Metadata { get; }
    public ICollection`1<EventHandler`1<PreparingEventArgs>> PreparingHandlers { get; }
    public ICollection`1<EventHandler`1<ActivatingEventArgs`1<object>>> ActivatingHandlers { get; }
    public ICollection`1<EventHandler`1<ActivatedEventArgs`1<object>>> ActivatedHandlers { get; }
    public RegistrationData(Service defaultService);
    public IEnumerable`1<Service> get_Services();
    public void AddServices(IEnumerable`1<Service> services);
    public void AddService(Service service);
    public InstanceOwnership get_Ownership();
    public void set_Ownership(InstanceOwnership value);
    public IComponentLifetime get_Lifetime();
    public void set_Lifetime(IComponentLifetime value);
    public InstanceSharing get_Sharing();
    public void set_Sharing(InstanceSharing value);
    public IDictionary`2<string, object> get_Metadata();
    public ICollection`1<EventHandler`1<PreparingEventArgs>> get_PreparingHandlers();
    public ICollection`1<EventHandler`1<ActivatingEventArgs`1<object>>> get_ActivatingHandlers();
    public ICollection`1<EventHandler`1<ActivatedEventArgs`1<object>>> get_ActivatedHandlers();
    public void CopyFrom(RegistrationData that, bool includeDefaultService);
    private static void AddAll(ICollection`1<T> to, IEnumerable`1<T> from);
    public void ClearServices();
}
[ExtensionAttribute]
internal static class Autofac.Builder.RegistrationExtensions : object {
    [ExtensionAttribute]
public static IRegistrationBuilder`3<Delegate, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder, Type delegateType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<Delegate, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder, Type delegateType, Service service);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TDelegate, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder, Service service);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TDelegate, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> NamedParameterMapping(IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> PositionalParameterMapping(IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> TypedParameterMapping(IRegistrationBuilder`3<TDelegate, TGeneratedFactoryActivatorData, TSingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<Object[], SimpleActivatorData, SingleRegistrationStyle> RegisterCollection(ContainerBuilder builder, string collectionName, Type elementType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<T[], SimpleActivatorData, SingleRegistrationStyle> RegisterCollection(ContainerBuilder builder, string collectionName);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> MemberOf(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration, string collectionName);
}
internal class Autofac.Builder.SimpleActivatorData : object {
    private IInstanceActivator _activator;
    public IInstanceActivator Activator { get; }
    public SimpleActivatorData(IInstanceActivator activator);
    public sealed virtual IInstanceActivator get_Activator();
}
internal class Autofac.Builder.SingleRegistrationStyle : object {
    private Guid _id;
    private ICollection`1<EventHandler`1<ComponentRegisteredEventArgs>> _registeredHandlers;
    private bool _preserveDefaults;
    [CompilerGeneratedAttribute]
private IComponentRegistration <Target>k__BackingField;
    public Guid Id { get; public set; }
    public ICollection`1<EventHandler`1<ComponentRegisteredEventArgs>> RegisteredHandlers { get; }
    public bool PreserveDefaults { get; public set; }
    public IComponentRegistration Target { get; public set; }
    public Guid get_Id();
    public void set_Id(Guid value);
    public ICollection`1<EventHandler`1<ComponentRegisteredEventArgs>> get_RegisteredHandlers();
    public bool get_PreserveDefaults();
    public void set_PreserveDefaults(bool value);
    [CompilerGeneratedAttribute]
public IComponentRegistration get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(IComponentRegistration value);
}
internal class Autofac.ContainerBuilder : object {
    private IList`1<Action`1<IComponentRegistry>> _configurationCallbacks;
    private bool _wasBuilt;
    public virtual void RegisterCallback(Action`1<IComponentRegistry> configurationCallback);
    public IContainer Build(ContainerBuildOptions options);
    private static void StartStartableComponents(IComponentContext componentContext);
    [SuppressMessageAttribute("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
public void Update(IContainer container);
    [SuppressMessageAttribute("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
public void Update(IContainer container, ContainerBuildOptions options);
    public void Update(IComponentRegistry componentRegistry);
    private void Build(IComponentRegistry componentRegistry, bool excludeDefaultModules);
    private void RegisterDefaultAdapters(IComponentRegistry componentRegistry);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.ContainerBuilderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BuildCanOnlyBeCalledOnce { get; }
    internal static string ErrorAutoActivating { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BuildCanOnlyBeCalledOnce();
    internal static string get_ErrorAutoActivating();
}
internal class Autofac.Core.ActivatedEventArgs`1 : EventArgs {
    private IComponentContext _context;
    private IComponentRegistration _component;
    private IEnumerable`1<Parameter> _parameters;
    private T _instance;
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public T Instance { get; }
    public ActivatedEventArgs`1(IComponentContext context, IComponentRegistration component, IEnumerable`1<Parameter> parameters, T instance);
    public sealed virtual IComponentContext get_Context();
    public sealed virtual IComponentRegistration get_Component();
    public sealed virtual IEnumerable`1<Parameter> get_Parameters();
    public sealed virtual T get_Instance();
}
internal class Autofac.Core.ActivatingEventArgs`1 : EventArgs {
    private IComponentContext _context;
    private IComponentRegistration _component;
    private T _instance;
    private IEnumerable`1<Parameter> _parameters;
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public T Instance { get; public set; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public ActivatingEventArgs`1(IComponentContext context, IComponentRegistration component, IEnumerable`1<Parameter> parameters, T instance);
    public sealed virtual IComponentContext get_Context();
    public sealed virtual IComponentRegistration get_Component();
    public sealed virtual T get_Instance();
    public void set_Instance(T value);
    public sealed virtual void ReplaceInstance(object instance);
    public sealed virtual IEnumerable`1<Parameter> get_Parameters();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly")]
internal class Autofac.Core.Activators.Delegate.DelegateActivator : InstanceActivator {
    private Func`3<IComponentContext, IEnumerable`1<Parameter>, object> _activationFunction;
    public DelegateActivator(Type limitType, Func`3<IComponentContext, IEnumerable`1<Parameter>, object> activationFunction);
    public sealed virtual object ActivateInstance(IComponentContext context, IEnumerable`1<Parameter> parameters);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Delegate.DelegateActivatorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NullFromActivationDelegateFor { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NullFromActivationDelegateFor();
}
internal abstract class Autofac.Core.Activators.InstanceActivator : Disposable {
    private Type _limitType;
    public Type LimitType { get; }
    protected InstanceActivator(Type limitType);
    public sealed virtual Type get_LimitType();
    public virtual string ToString();
}
internal class Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator : InstanceActivator {
    private object _instance;
    private bool _activated;
    private bool _disposeInstance;
    public bool DisposeInstance { get; public set; }
    public ProvidedInstanceActivator(object instance);
    public sealed virtual object ActivateInstance(IComponentContext context, IEnumerable`1<Parameter> parameters);
    public bool get_DisposeInstance();
    public void set_DisposeInstance(bool value);
    protected virtual void Dispose(bool disposing);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InstanceAlreadyActivated { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InstanceAlreadyActivated();
}
internal class Autofac.Core.Activators.Reflection.AutowiringParameter : Parameter {
    public virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
}
internal class Autofac.Core.Activators.Reflection.AutowiringPropertyInjector : object {
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public static void InjectProperties(IComponentContext context, object instance, bool overrideSetValues);
    [CompilerGeneratedAttribute]
private static bool <InjectProperties>b__0(PropertyInfo pi);
}
internal class Autofac.Core.Activators.Reflection.ConstructorParameterBinding : object {
    private ConstructorInfo _ci;
    private Func`1[] _valueRetrievers;
    private bool _canInstantiate;
    private static SafeDictionary`2<ConstructorInfo, Func`2<Object[], object>> _constructorInvokers;
    private ParameterInfo _firstNonBindableParameter;
    public ConstructorInfo TargetConstructor { get; }
    public bool CanInstantiate { get; }
    public string Description { get; }
    public ConstructorParameterBinding(ConstructorInfo ci, IEnumerable`1<Parameter> availableParameters, IComponentContext context);
    private static ConstructorParameterBinding();
    public ConstructorInfo get_TargetConstructor();
    public bool get_CanInstantiate();
    public object Instantiate();
    public string get_Description();
    public virtual string ToString();
    private static Func`2<Object[], object> GetConstructorInvoker(ConstructorInfo constructorInfo);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BoundConstructor { get; }
    internal static string CannotInstantitate { get; }
    internal static string ExceptionDuringInstantiation { get; }
    internal static string NonBindableConstructor { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BoundConstructor();
    internal static string get_CannotInstantitate();
    internal static string get_ExceptionDuringInstantiation();
    internal static string get_NonBindableConstructor();
}
internal class Autofac.Core.Activators.Reflection.DefaultConstructorFinder : object {
    private Func`2<Type, ConstructorInfo[]> _finder;
    [CompilerGeneratedAttribute]
private static Func`2<Type, ConstructorInfo[]> CS$<>9__CachedAnonymousMethodDelegate1;
    public DefaultConstructorFinder(Func`2<Type, ConstructorInfo[]> finder);
    public sealed virtual ConstructorInfo[] FindConstructors(Type targetType);
    [CompilerGeneratedAttribute]
private static ConstructorInfo[] <.ctor>b__0(Type type);
}
internal class Autofac.Core.Activators.Reflection.DefaultValueParameter : Parameter {
    public virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
}
internal interface Autofac.Core.Activators.Reflection.IConstructorFinder {
    public abstract virtual ConstructorInfo[] FindConstructors(Type targetType);
}
internal interface Autofac.Core.Activators.Reflection.IConstructorSelector {
    public abstract virtual ConstructorParameterBinding SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings);
}
internal class Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector : object {
    private Type[] _signature;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, Type> CS$<>9__CachedAnonymousMethodDelegate4;
    public MatchingSignatureConstructorSelector(Type[] signature);
    public sealed virtual ConstructorParameterBinding SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings);
    [CompilerGeneratedAttribute]
private bool <SelectConstructorBinding>b__0(ConstructorParameterBinding b);
    [CompilerGeneratedAttribute]
private static string <SelectConstructorBinding>b__2(Type t);
    [CompilerGeneratedAttribute]
private static Type <SelectConstructorBinding>b__1(ParameterInfo p);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AtLeastOneBindingRequired { get; }
    internal static string RequiredConstructorNotAvailable { get; }
    internal static string TooManyConstructorsMatch { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AtLeastOneBindingRequired();
    internal static string get_RequiredConstructorNotAvailable();
    internal static string get_TooManyConstructorsMatch();
}
internal class Autofac.Core.Activators.Reflection.MostParametersConstructorSelector : object {
    [CompilerGeneratedAttribute]
private static Func`2<ConstructorParameterBinding, Autofac.<>f__AnonymousType2`2<ConstructorParameterBinding, int>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Autofac.<>f__AnonymousType2`2<ConstructorParameterBinding, int>, int> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<Autofac.<>f__AnonymousType2`2<ConstructorParameterBinding, int>, ConstructorParameterBinding> CS$<>9__CachedAnonymousMethodDelegate6;
    public sealed virtual ConstructorParameterBinding SelectConstructorBinding(ConstructorParameterBinding[] constructorBindings);
    [CompilerGeneratedAttribute]
private static Autofac.<>f__AnonymousType2`2<ConstructorParameterBinding, int> <SelectConstructorBinding>b__0(ConstructorParameterBinding binding);
    [CompilerGeneratedAttribute]
private static int <SelectConstructorBinding>b__1(Autofac.<>f__AnonymousType2`2<ConstructorParameterBinding, int> binding);
    [CompilerGeneratedAttribute]
private static ConstructorParameterBinding <SelectConstructorBinding>b__3(Autofac.<>f__AnonymousType2`2<ConstructorParameterBinding, int> ctor);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string UnableToChooseFromMultipleConstructors { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_UnableToChooseFromMultipleConstructors();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly")]
internal class Autofac.Core.Activators.Reflection.ReflectionActivator : InstanceActivator {
    private Type _implementationType;
    private IConstructorSelector _constructorSelector;
    private IConstructorFinder _constructorFinder;
    private IEnumerable`1<Parameter> _configuredParameters;
    private IEnumerable`1<Parameter> _configuredProperties;
    private IEnumerable`1<Parameter> _defaultParameters;
    [CompilerGeneratedAttribute]
private static Func`2<ConstructorParameterBinding, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ConstructorParameterBinding, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    public IConstructorFinder ConstructorFinder { get; }
    public IConstructorSelector ConstructorSelector { get; }
    public ReflectionActivator(Type implementationType, IConstructorFinder constructorFinder, IConstructorSelector constructorSelector, IEnumerable`1<Parameter> configuredParameters, IEnumerable`1<Parameter> configuredProperties);
    public IConstructorFinder get_ConstructorFinder();
    public IConstructorSelector get_ConstructorSelector();
    public sealed virtual object ActivateInstance(IComponentContext context, IEnumerable`1<Parameter> parameters);
    private string GetBindingFailureMessage(IEnumerable`1<ConstructorParameterBinding> constructorBindings);
    private IEnumerable`1<ConstructorParameterBinding> GetConstructorBindings(IComponentContext context, IEnumerable`1<Parameter> parameters, IEnumerable`1<ConstructorInfo> constructorInfo);
    private void InjectProperties(object instance, IComponentContext context);
    [CompilerGeneratedAttribute]
private static bool <ActivateInstance>b__0(ConstructorParameterBinding cb);
    [CompilerGeneratedAttribute]
private static bool <GetBindingFailureMessage>b__2(ConstructorParameterBinding cb);
    [CompilerGeneratedAttribute]
private static bool <InjectProperties>b__7(PropertyInfo pi);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Activators.Reflection.ReflectionActivatorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NoConstructorsAvailable { get; }
    internal static string NoConstructorsBindable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NoConstructorsAvailable();
    internal static string get_NoConstructorsBindable();
}
internal class Autofac.Core.AutoActivateService : Service {
    public string Description { get; }
    public virtual string get_Description();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Autofac.Core.ComponentRegisteredEventArgs : EventArgs {
    private IComponentRegistry _componentRegistry;
    private IComponentRegistration _componentRegistration;
    public IComponentRegistry ComponentRegistry { get; }
    public IComponentRegistration ComponentRegistration { get; }
    public ComponentRegisteredEventArgs(IComponentRegistry registry, IComponentRegistration componentRegistration);
    public IComponentRegistry get_ComponentRegistry();
    public IComponentRegistration get_ComponentRegistration();
}
internal abstract class Autofac.Core.ConstantParameter : Parameter {
    private Predicate`1<ParameterInfo> _predicate;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; private set; }
    protected ConstantParameter(object value, Predicate`1<ParameterInfo> predicate);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    public virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
    [CompilerGeneratedAttribute]
private object <CanSupplyValue>b__0();
}
[DebuggerDisplayAttribute("Tag = {Tag}, IsDisposed = {IsDisposed}")]
internal class Autofac.Core.Container : Disposable {
    private IComponentRegistry _componentRegistry;
    private ILifetimeScope _rootLifetimeScope;
    [CompilerGeneratedAttribute]
private static Func`3<IComponentContext, IEnumerable`1<Parameter>, object> CS$<>9__CachedAnonymousMethodDelegate1;
    public IDisposer Disposer { get; }
    public object Tag { get; }
    public IComponentRegistry ComponentRegistry { get; }
    public sealed virtual ILifetimeScope BeginLifetimeScope();
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag);
    public sealed virtual ILifetimeScope BeginLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag, Action`1<ContainerBuilder> configurationAction);
    public sealed virtual IDisposer get_Disposer();
    public sealed virtual object get_Tag();
    public sealed virtual void add_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public sealed virtual void remove_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public sealed virtual void add_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public sealed virtual void remove_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public sealed virtual void add_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    public sealed virtual void remove_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    public sealed virtual IComponentRegistry get_ComponentRegistry();
    public sealed virtual object ResolveComponent(IComponentRegistration registration, IEnumerable`1<Parameter> parameters);
    protected virtual void Dispose(bool disposing);
    public sealed virtual object GetService(Type serviceType);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__0(IComponentContext c, IEnumerable`1<Parameter> p);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.Core.ContainerResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SelfRegistrationCannotBeActivated { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SelfRegistrationCannotBeActivated();
}
internal class Autofac.Core.DependencyResolutionException : Exception {
    public string Message { get; }
    public DependencyResolutionException(string message);
    public DependencyResolutionException(string message, Exception innerException);
    [SecuritySafeCriticalAttribute]
public virtual string get_Message();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Core.DependencyResolutionExceptionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MessageNestingFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MessageNestingFormat();
}
[ObsoleteAttribute("Use the more general Autofac.IStartable interface instead. The IContainer parameter can be emulated when implementing IStartable by taking a dependency on IComponentContext or ILifetimeScope.", "True")]
internal interface Autofac.Core.Diagnostics.IContainerAwareComponent {
    public abstract virtual void SetContainer(IContainer container);
}
internal class Autofac.Core.Disposer : Disposable {
    private Stack`1<IDisposable> _items;
    private object _synchRoot;
    protected virtual void Dispose(bool disposing);
    public sealed virtual void AddInstanceForDisposal(IDisposable instance);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
internal interface Autofac.Core.IActivatedEventArgs`1 {
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public T Instance { get; }
    public abstract virtual IComponentContext get_Context();
    public abstract virtual IComponentRegistration get_Component();
    public abstract virtual IEnumerable`1<Parameter> get_Parameters();
    public abstract virtual T get_Instance();
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
internal interface Autofac.Core.IActivatingEventArgs`1 {
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public T Instance { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public abstract virtual IComponentContext get_Context();
    public abstract virtual IComponentRegistration get_Component();
    public abstract virtual T get_Instance();
    public abstract virtual void ReplaceInstance(object instance);
    public abstract virtual IEnumerable`1<Parameter> get_Parameters();
}
internal interface Autofac.Core.IComponentLifetime {
    public abstract virtual ISharingLifetimeScope FindScope(ISharingLifetimeScope mostNestedVisibleScope);
}
internal interface Autofac.Core.IComponentRegistration {
    public Guid Id { get; }
    public IInstanceActivator Activator { get; }
    public IComponentLifetime Lifetime { get; }
    public InstanceSharing Sharing { get; }
    public InstanceOwnership Ownership { get; }
    public IEnumerable`1<Service> Services { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public IComponentRegistration Target { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual IInstanceActivator get_Activator();
    public abstract virtual IComponentLifetime get_Lifetime();
    public abstract virtual InstanceSharing get_Sharing();
    public abstract virtual InstanceOwnership get_Ownership();
    public abstract virtual IEnumerable`1<Service> get_Services();
    public abstract virtual IDictionary`2<string, object> get_Metadata();
    public abstract virtual IComponentRegistration get_Target();
    public abstract virtual void add_Preparing(EventHandler`1<PreparingEventArgs> value);
    public abstract virtual void remove_Preparing(EventHandler`1<PreparingEventArgs> value);
    [SuppressMessageAttribute("Microsoft.Design", "CA1030:UseEventsWhereAppropriate")]
[SuppressMessageAttribute("Microsoft.Design", "CA1045:DoNotPassTypesByReference")]
public abstract virtual void RaisePreparing(IComponentContext context, IEnumerable`1& parameters);
    public abstract virtual void add_Activating(EventHandler`1<ActivatingEventArgs`1<object>> value);
    public abstract virtual void remove_Activating(EventHandler`1<ActivatingEventArgs`1<object>> value);
    [SuppressMessageAttribute("Microsoft.Design", "CA1030:UseEventsWhereAppropriate")]
[SuppressMessageAttribute("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]
[SuppressMessageAttribute("Microsoft.Design", "CA1045:DoNotPassTypesByReference")]
public abstract virtual void RaiseActivating(IComponentContext context, IEnumerable`1<Parameter> parameters, Object& instance);
    public abstract virtual void add_Activated(EventHandler`1<ActivatedEventArgs`1<object>> value);
    public abstract virtual void remove_Activated(EventHandler`1<ActivatedEventArgs`1<object>> value);
    [SuppressMessageAttribute("Microsoft.Design", "CA1030:UseEventsWhereAppropriate")]
public abstract virtual void RaiseActivated(IComponentContext context, IEnumerable`1<Parameter> parameters, object instance);
}
internal interface Autofac.Core.IComponentRegistry {
    public IEnumerable`1<IComponentRegistration> Registrations { get; }
    public IEnumerable`1<IRegistrationSource> Sources { get; }
    public bool HasLocalComponents { get; }
    public abstract virtual bool TryGetRegistration(Service service, IComponentRegistration& registration);
    public abstract virtual bool IsRegistered(Service service);
    public abstract virtual void Register(IComponentRegistration registration);
    public abstract virtual void Register(IComponentRegistration registration, bool preserveDefaults);
    public abstract virtual IEnumerable`1<IComponentRegistration> get_Registrations();
    public abstract virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service);
    public abstract virtual void add_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public abstract virtual void remove_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public abstract virtual void AddRegistrationSource(IRegistrationSource source);
    public abstract virtual IEnumerable`1<IRegistrationSource> get_Sources();
    public abstract virtual bool get_HasLocalComponents();
    public abstract virtual void add_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
    public abstract virtual void remove_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
}
internal interface Autofac.Core.IDisposer {
    public abstract virtual void AddInstanceForDisposal(IDisposable instance);
}
internal interface Autofac.Core.IInstanceActivator {
    public Type LimitType { get; }
    public abstract virtual object ActivateInstance(IComponentContext context, IEnumerable`1<Parameter> parameters);
    public abstract virtual Type get_LimitType();
}
internal interface Autofac.Core.IModule {
    public abstract virtual void Configure(IComponentRegistry componentRegistry);
}
internal enum Autofac.Core.InstanceOwnership : Enum {
    public int value__;
    public static InstanceOwnership ExternallyOwned;
    public static InstanceOwnership OwnedByLifetimeScope;
}
internal enum Autofac.Core.InstanceSharing : Enum {
    public int value__;
    public static InstanceSharing None;
    public static InstanceSharing Shared;
}
internal interface Autofac.Core.IRegistrationSource {
    public bool IsAdapterForIndividualComponents { get; }
    public abstract virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public abstract virtual bool get_IsAdapterForIndividualComponents();
}
internal interface Autofac.Core.IServiceWithType {
    public Type ServiceType { get; }
    public abstract virtual Type get_ServiceType();
    public abstract virtual Service ChangeType(Type newType);
}
internal interface Autofac.Core.ISharingLifetimeScope {
    public ISharingLifetimeScope RootLifetimeScope { get; }
    public ISharingLifetimeScope ParentLifetimeScope { get; }
    public abstract virtual ISharingLifetimeScope get_RootLifetimeScope();
    public abstract virtual ISharingLifetimeScope get_ParentLifetimeScope();
    public abstract virtual object GetOrCreateAndShare(Guid id, Func`1<object> creator);
}
internal class Autofac.Core.KeyedService : Service {
    private object _serviceKey;
    private Type _serviceType;
    public object ServiceKey { get; }
    public Type ServiceType { get; }
    public string Description { get; }
    public KeyedService(object serviceKey, Type serviceType);
    public object get_ServiceKey();
    public sealed virtual Type get_ServiceType();
    public virtual string get_Description();
    public sealed virtual bool Equals(KeyedService other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual Service ChangeType(Type newType);
}
internal class Autofac.Core.Lifetime.CurrentScopeLifetime : object {
    public sealed virtual ISharingLifetimeScope FindScope(ISharingLifetimeScope mostNestedVisibleScope);
}
[DebuggerDisplayAttribute("Tag = {Tag}, IsDisposed = {IsDisposed}")]
internal class Autofac.Core.Lifetime.LifetimeScope : Disposable {
    private object _synchRoot;
    private IDictionary`2<Guid, object> _sharedInstances;
    private IComponentRegistry _componentRegistry;
    private ISharingLifetimeScope _root;
    private ISharingLifetimeScope _parent;
    private IDisposer _disposer;
    private object _tag;
    internal static Guid SelfRegistrationId;
    private static Action`1<ContainerBuilder> NoConfiguration;
    public static object RootTag;
    private EventHandler`1<LifetimeScopeBeginningEventArgs> ChildLifetimeScopeBeginning;
    private EventHandler`1<LifetimeScopeEndingEventArgs> CurrentScopeEnding;
    private EventHandler`1<ResolveOperationBeginningEventArgs> ResolveOperationBeginning;
    [CompilerGeneratedAttribute]
private static Func`2<IRegistrationSource, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ISharingLifetimeScope, ISharingLifetimeScope> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<ISharingLifetimeScope, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<ISharingLifetimeScope, ExternalRegistrySource> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Action`1<ContainerBuilder> CS$<>9__CachedAnonymousMethodDelegated;
    public ISharingLifetimeScope ParentLifetimeScope { get; }
    public ISharingLifetimeScope RootLifetimeScope { get; }
    public IDisposer Disposer { get; }
    public object Tag { get; }
    public IComponentRegistry ComponentRegistry { get; }
    protected LifetimeScope(IComponentRegistry componentRegistry, LifetimeScope parent, object tag);
    public LifetimeScope(IComponentRegistry componentRegistry, object tag);
    public LifetimeScope(IComponentRegistry componentRegistry);
    private static LifetimeScope();
    private static object MakeAnonymousTag();
    public sealed virtual ILifetimeScope BeginLifetimeScope();
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag);
    private void RaiseBeginning(ILifetimeScope scope);
    public sealed virtual ILifetimeScope BeginLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public sealed virtual ILifetimeScope BeginLifetimeScope(object tag, Action`1<ContainerBuilder> configurationAction);
    private ScopeRestrictedRegistry CreateScopeRestrictedRegistry(object tag, Action`1<ContainerBuilder> configurationAction);
    public sealed virtual object ResolveComponent(IComponentRegistration registration, IEnumerable`1<Parameter> parameters);
    public sealed virtual ISharingLifetimeScope get_ParentLifetimeScope();
    public sealed virtual ISharingLifetimeScope get_RootLifetimeScope();
    public sealed virtual object GetOrCreateAndShare(Guid id, Func`1<object> creator);
    public sealed virtual IDisposer get_Disposer();
    public sealed virtual object get_Tag();
    public sealed virtual IComponentRegistry get_ComponentRegistry();
    protected virtual void Dispose(bool disposing);
    private void CheckNotDisposed();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual void add_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public sealed virtual void remove_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public sealed virtual void add_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public sealed virtual void remove_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public sealed virtual void add_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    public sealed virtual void remove_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    [CompilerGeneratedAttribute]
private static bool <CreateScopeRestrictedRegistry>b__3(IRegistrationSource src);
    [CompilerGeneratedAttribute]
private static ISharingLifetimeScope <CreateScopeRestrictedRegistry>b__4(ISharingLifetimeScope s);
    [CompilerGeneratedAttribute]
private static bool <CreateScopeRestrictedRegistry>b__5(ISharingLifetimeScope s);
    [CompilerGeneratedAttribute]
private static ExternalRegistrySource <CreateScopeRestrictedRegistry>b__6(ISharingLifetimeScope s);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__c(ContainerBuilder b);
}
internal class Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs : EventArgs {
    private ILifetimeScope _lifetimeScope;
    public ILifetimeScope LifetimeScope { get; }
    public LifetimeScopeBeginningEventArgs(ILifetimeScope lifetimeScope);
    public ILifetimeScope get_LifetimeScope();
}
internal class Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs : EventArgs {
    private ILifetimeScope _lifetimeScope;
    public ILifetimeScope LifetimeScope { get; }
    public LifetimeScopeEndingEventArgs(ILifetimeScope lifetimeScope);
    public ILifetimeScope get_LifetimeScope();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Core.Lifetime.LifetimeScopeResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ScopeIsDisposed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ScopeIsDisposed();
}
internal class Autofac.Core.Lifetime.MatchingScopeLifetime : object {
    private Object[] _tagsToMatch;
    public MatchingScopeLifetime(Object[] lifetimeScopeTagsToMatch);
    public sealed virtual ISharingLifetimeScope FindScope(ISharingLifetimeScope mostNestedVisibleScope);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Core.Lifetime.MatchingScopeLifetimeResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MatchingScopeNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MatchingScopeNotFound();
}
internal static class Autofac.Core.Lifetime.MatchingScopeLifetimeTags : object {
    public static object RequestLifetimeScopeTag;
    private static MatchingScopeLifetimeTags();
}
internal class Autofac.Core.Lifetime.RootScopeLifetime : object {
    public sealed virtual ISharingLifetimeScope FindScope(ISharingLifetimeScope mostNestedVisibleScope);
}
internal class Autofac.Core.NamedPropertyParameter : ConstantParameter {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public NamedPropertyParameter(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
internal abstract class Autofac.Core.Parameter : object {
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public abstract virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
}
internal class Autofac.Core.PreparingEventArgs : EventArgs {
    private IComponentContext _context;
    private IComponentRegistration _component;
    private IEnumerable`1<Parameter> _parameters;
    public IComponentContext Context { get; }
    public IComponentRegistration Component { get; }
    public IEnumerable`1<Parameter> Parameters { get; public set; }
    public PreparingEventArgs(IComponentContext context, IComponentRegistration component, IEnumerable`1<Parameter> parameters);
    public IComponentContext get_Context();
    public IComponentRegistration get_Component();
    public IEnumerable`1<Parameter> get_Parameters();
    public void set_Parameters(IEnumerable`1<Parameter> value);
}
internal class Autofac.Core.Registration.AdaptationSandbox : object {
    private IEnumerable`1<IRegistrationSource> _adapters;
    private IComponentRegistration _registration;
    private IEnumerable`1<Service> _adapterServices;
    private IDictionary`2<Service, IList`1<IRegistrationSource>> _adaptersToQuery;
    private IList`1<IComponentRegistration> _registrations;
    public AdaptationSandbox(IEnumerable`1<IRegistrationSource> adapters, IComponentRegistration registration, IEnumerable`1<Service> adapterServices);
    public IEnumerable`1<IComponentRegistration> GetAdapters();
    private IEnumerable`1<IComponentRegistration> GetAndInitialiseRegistrationsFor(Service service);
    [CompilerGeneratedAttribute]
private bool <GetAdapters>b__0(IComponentRegistration r);
}
internal class Autofac.Core.Registration.ComponentNotRegisteredException : DependencyResolutionException {
    public ComponentNotRegisteredException(Service service);
    public ComponentNotRegisteredException(Service service, Exception innerException);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Registration.ComponentNotRegisteredExceptionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Message { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Message();
}
internal class Autofac.Core.Registration.ComponentRegistration : Disposable {
    private IComponentRegistration _target;
    private EventHandler`1<PreparingEventArgs> Preparing;
    private EventHandler`1<ActivatingEventArgs`1<object>> Activating;
    private EventHandler`1<ActivatedEventArgs`1<object>> Activated;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IInstanceActivator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentLifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceSharing <Sharing>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceOwnership <Ownership>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Service> <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Service, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public IComponentRegistration Target { get; }
    public Guid Id { get; private set; }
    public IInstanceActivator Activator { get; public set; }
    public IComponentLifetime Lifetime { get; private set; }
    public InstanceSharing Sharing { get; private set; }
    public InstanceOwnership Ownership { get; private set; }
    public IEnumerable`1<Service> Services { get; private set; }
    public IDictionary`2<string, object> Metadata { get; private set; }
    public ComponentRegistration(Guid id, IInstanceActivator activator, IComponentLifetime lifetime, InstanceSharing sharing, InstanceOwnership ownership, IEnumerable`1<Service> services, IDictionary`2<string, object> metadata);
    public ComponentRegistration(Guid id, IInstanceActivator activator, IComponentLifetime lifetime, InstanceSharing sharing, InstanceOwnership ownership, IEnumerable`1<Service> services, IDictionary`2<string, object> metadata, IComponentRegistration target);
    public sealed virtual IComponentRegistration get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual IInstanceActivator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(IInstanceActivator value);
    [CompilerGeneratedAttribute]
public sealed virtual IComponentLifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(IComponentLifetime value);
    [CompilerGeneratedAttribute]
public sealed virtual InstanceSharing get_Sharing();
    [CompilerGeneratedAttribute]
private void set_Sharing(InstanceSharing value);
    [CompilerGeneratedAttribute]
public sealed virtual InstanceOwnership get_Ownership();
    [CompilerGeneratedAttribute]
private void set_Ownership(InstanceOwnership value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Service> get_Services();
    [CompilerGeneratedAttribute]
private void set_Services(IEnumerable`1<Service> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(IDictionary`2<string, object> value);
    public sealed virtual void add_Preparing(EventHandler`1<PreparingEventArgs> value);
    public sealed virtual void remove_Preparing(EventHandler`1<PreparingEventArgs> value);
    public sealed virtual void RaisePreparing(IComponentContext context, IEnumerable`1& parameters);
    public sealed virtual void add_Activating(EventHandler`1<ActivatingEventArgs`1<object>> value);
    public sealed virtual void remove_Activating(EventHandler`1<ActivatingEventArgs`1<object>> value);
    public sealed virtual void RaiseActivating(IComponentContext context, IEnumerable`1<Parameter> parameters, Object& instance);
    public sealed virtual void add_Activated(EventHandler`1<ActivatedEventArgs`1<object>> value);
    public sealed virtual void remove_Activated(EventHandler`1<ActivatedEventArgs`1<object>> value);
    public sealed virtual void RaiseActivated(IComponentContext context, IEnumerable`1<Parameter> parameters, object instance);
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private static string <ToString>b__0(Service s);
}
[ExtensionAttribute]
internal static class Autofac.Core.Registration.ComponentRegistrationExtensions : object {
    [ExtensionAttribute]
public static bool IsAdapting(IComponentRegistration componentRegistration);
}
internal class Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator : Disposable {
    private IComponentLifetime _lifetime;
    private IComponentRegistration _inner;
    public Guid Id { get; }
    public IInstanceActivator Activator { get; }
    public IComponentLifetime Lifetime { get; }
    public InstanceSharing Sharing { get; }
    public InstanceOwnership Ownership { get; }
    public IEnumerable`1<Service> Services { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public IComponentRegistration Target { get; }
    public ComponentRegistrationLifetimeDecorator(IComponentRegistration inner, IComponentLifetime lifetime);
    public sealed virtual Guid get_Id();
    public sealed virtual IInstanceActivator get_Activator();
    public sealed virtual IComponentLifetime get_Lifetime();
    public sealed virtual InstanceSharing get_Sharing();
    public sealed virtual InstanceOwnership get_Ownership();
    public sealed virtual IEnumerable`1<Service> get_Services();
    public sealed virtual IDictionary`2<string, object> get_Metadata();
    public sealed virtual IComponentRegistration get_Target();
    public sealed virtual void add_Preparing(EventHandler`1<PreparingEventArgs> value);
    public sealed virtual void remove_Preparing(EventHandler`1<PreparingEventArgs> value);
    public sealed virtual void RaisePreparing(IComponentContext context, IEnumerable`1& parameters);
    public sealed virtual void add_Activating(EventHandler`1<ActivatingEventArgs`1<object>> value);
    public sealed virtual void remove_Activating(EventHandler`1<ActivatingEventArgs`1<object>> value);
    public sealed virtual void RaiseActivating(IComponentContext context, IEnumerable`1<Parameter> parameters, Object& instance);
    public sealed virtual void add_Activated(EventHandler`1<ActivatedEventArgs`1<object>> value);
    public sealed virtual void remove_Activated(EventHandler`1<ActivatedEventArgs`1<object>> value);
    public sealed virtual void RaiseActivated(IComponentContext context, IEnumerable`1<Parameter> parameters, object instance);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Registration.ComponentRegistrationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ToStringFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ToStringFormat();
}
internal class Autofac.Core.Registration.ComponentRegistry : Disposable {
    private object _synchRoot;
    private IList`1<IRegistrationSource> _dynamicRegistrationSources;
    private ICollection`1<IComponentRegistration> _registrations;
    private IDictionary`2<Service, ServiceRegistrationInfo> _serviceInfo;
    private EventHandler`1<ComponentRegisteredEventArgs> Registered;
    private EventHandler`1<RegistrationSourceAddedEventArgs> RegistrationSourceAdded;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Service, ServiceRegistrationInfo>, Service> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IRegistrationSource, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    public IEnumerable`1<IComponentRegistration> Registrations { get; }
    public IEnumerable`1<IRegistrationSource> Sources { get; }
    public bool HasLocalComponents { get; }
    protected virtual void Dispose(bool disposing);
    public sealed virtual bool TryGetRegistration(Service service, IComponentRegistration& registration);
    public sealed virtual bool IsRegistered(Service service);
    public sealed virtual void Register(IComponentRegistration registration);
    public virtual void Register(IComponentRegistration registration, bool preserveDefaults);
    private void UpdateInitialisedAdapters(IComponentRegistration registration);
    private void AddRegistration(IComponentRegistration registration, bool preserveDefaults);
    public sealed virtual IEnumerable`1<IComponentRegistration> get_Registrations();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service);
    public sealed virtual void add_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public sealed virtual void remove_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public sealed virtual void AddRegistrationSource(IRegistrationSource source);
    public sealed virtual IEnumerable`1<IRegistrationSource> get_Sources();
    public sealed virtual bool get_HasLocalComponents();
    public sealed virtual void add_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
    public sealed virtual void remove_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
    private ServiceRegistrationInfo GetInitializedServiceInfo(Service service);
    private ServiceRegistrationInfo GetServiceInfo(Service service);
    [CompilerGeneratedAttribute]
private static Service <UpdateInitialisedAdapters>b__4(KeyValuePair`2<Service, ServiceRegistrationInfo> si);
    [CompilerGeneratedAttribute]
private static bool <UpdateInitialisedAdapters>b__5(IRegistrationSource rs);
}
internal class Autofac.Core.Registration.CopyOnWriteRegistry : object {
    private IComponentRegistry _readRegistry;
    private Func`1<IComponentRegistry> _createWriteRegistry;
    private IComponentRegistry _writeRegistry;
    private IComponentRegistry Registry { get; }
    private IComponentRegistry WriteRegistry { get; }
    public IEnumerable`1<IComponentRegistration> Registrations { get; }
    public IEnumerable`1<IRegistrationSource> Sources { get; }
    public bool HasLocalComponents { get; }
    public CopyOnWriteRegistry(IComponentRegistry readRegistry, Func`1<IComponentRegistry> createWriteRegistry);
    private IComponentRegistry get_Registry();
    private IComponentRegistry get_WriteRegistry();
    public sealed virtual void Dispose();
    public sealed virtual bool TryGetRegistration(Service service, IComponentRegistration& registration);
    public sealed virtual bool IsRegistered(Service service);
    public sealed virtual void Register(IComponentRegistration registration);
    public sealed virtual void Register(IComponentRegistration registration, bool preserveDefaults);
    public sealed virtual IEnumerable`1<IComponentRegistration> get_Registrations();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service);
    public sealed virtual void add_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public sealed virtual void remove_Registered(EventHandler`1<ComponentRegisteredEventArgs> value);
    public sealed virtual void AddRegistrationSource(IRegistrationSource source);
    public sealed virtual IEnumerable`1<IRegistrationSource> get_Sources();
    public sealed virtual bool get_HasLocalComponents();
    public sealed virtual void add_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
    public sealed virtual void remove_RegistrationSourceAdded(EventHandler`1<RegistrationSourceAddedEventArgs> value);
}
internal class Autofac.Core.Registration.ExternalRegistrySource : object {
    private IComponentRegistry _registry;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentRegistration, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public bool IsAdapterForIndividualComponents { get; }
    public ExternalRegistrySource(IComponentRegistry registry);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    [CompilerGeneratedAttribute]
private static bool <RegistrationsFor>b__1(IComponentRegistration r);
}
internal interface Autofac.Core.Registration.IModuleRegistrar {
    public abstract virtual IModuleRegistrar RegisterModule(IModule module);
}
internal class Autofac.Core.Registration.ModuleRegistrar : object {
    private ContainerBuilder _builder;
    public ModuleRegistrar(ContainerBuilder builder);
    public sealed virtual IModuleRegistrar RegisterModule(IModule module);
}
internal class Autofac.Core.Registration.ScopeRestrictedRegistry : ComponentRegistry {
    private IComponentLifetime _restrictedRootScopeLifetime;
    public ScopeRestrictedRegistry(object scopeTag);
    public virtual void Register(IComponentRegistration registration, bool preserveDefaults);
}
internal class Autofac.Core.Registration.ServiceRegistrationInfo : object {
    [SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
private Service _service;
    private LinkedList`1<IComponentRegistration> _implementations;
    private Queue`1<IRegistrationSource> _sourcesToQuery;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public bool IsInitialized { get; private set; }
    public IEnumerable`1<IComponentRegistration> Implementations { get; }
    public bool IsRegistered { get; }
    private bool Any { get; }
    public bool IsInitializing { get; }
    public bool HasSourcesToQuery { get; }
    public ServiceRegistrationInfo(Service service);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public IEnumerable`1<IComponentRegistration> get_Implementations();
    private void RequiresInitialization();
    public bool get_IsRegistered();
    private bool get_Any();
    public void AddImplementation(IComponentRegistration registration, bool preserveDefaults);
    public bool TryGetRegistration(IComponentRegistration& registration);
    public void Include(IRegistrationSource source);
    public bool get_IsInitializing();
    public bool get_HasSourcesToQuery();
    public void BeginInitialization(IEnumerable`1<IRegistrationSource> sources);
    public void SkipSource(IRegistrationSource source);
    private void EnforceDuringInitialization();
    public IRegistrationSource DequeueNextSource();
    public void CompleteInitialization();
    [SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
public bool ShouldRecalculateAdaptersOn(IComponentRegistration registration);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Registration.ServiceRegistrationInfoResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NotDuringInitialization { get; }
    internal static string NotInitialized { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NotDuringInitialization();
    internal static string get_NotInitialized();
}
internal class Autofac.Core.RegistrationSourceAddedEventArgs : EventArgs {
    private IComponentRegistry _componentRegistry;
    private IRegistrationSource _registrationSource;
    public IRegistrationSource RegistrationSource { get; }
    public IComponentRegistry ComponentRegistry { get; }
    public RegistrationSourceAddedEventArgs(IComponentRegistry componentRegistry, IRegistrationSource registrationSource);
    public IRegistrationSource get_RegistrationSource();
    public IComponentRegistry get_ComponentRegistry();
}
internal class Autofac.Core.ResolvedParameter : Parameter {
    private Func`3<ParameterInfo, IComponentContext, bool> _predicate;
    private Func`3<ParameterInfo, IComponentContext, object> _valueAccessor;
    public ResolvedParameter(Func`3<ParameterInfo, IComponentContext, bool> predicate, Func`3<ParameterInfo, IComponentContext, object> valueAccessor);
    public virtual bool CanSupplyValue(ParameterInfo pi, IComponentContext context, Func`1& valueProvider);
    public static ResolvedParameter ForNamed(string serviceName);
    public static ResolvedParameter ForKeyed(object serviceKey);
}
internal class Autofac.Core.Resolving.CircularDependencyDetector : object {
    private static int MaxResolveDepth;
    [CompilerGeneratedAttribute]
private static Func`2<InstanceLookup, IComponentRegistration> CS$<>9__CachedAnonymousMethodDelegate1;
    private static string CreateDependencyGraphTo(IComponentRegistration registration, IEnumerable`1<InstanceLookup> activationStack);
    private static string Display(IComponentRegistration registration);
    public static void CheckForCircularDependency(IComponentRegistration registration, Stack`1<InstanceLookup> activationStack, int callDepth);
    private static bool IsCircularDependency(IComponentRegistration registration, IEnumerable`1<InstanceLookup> activationStack);
    [CompilerGeneratedAttribute]
private static IComponentRegistration <CreateDependencyGraphTo>b__0(InstanceLookup a);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Core.Resolving.CircularDependencyDetectorResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CircularDependency { get; }
    internal static string MaxDepthExceeded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CircularDependency();
    internal static string get_MaxDepthExceeded();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Core.Resolving.ComponentActivationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActivationAlreadyExecuted { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActivationAlreadyExecuted();
}
internal interface Autofac.Core.Resolving.IInstanceLookup {
    public IComponentRegistration ComponentRegistration { get; }
    public ILifetimeScope ActivationScope { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public abstract virtual IComponentRegistration get_ComponentRegistration();
    public abstract virtual ILifetimeScope get_ActivationScope();
    public abstract virtual IEnumerable`1<Parameter> get_Parameters();
    public abstract virtual void add_InstanceLookupEnding(EventHandler`1<InstanceLookupEndingEventArgs> value);
    public abstract virtual void remove_InstanceLookupEnding(EventHandler`1<InstanceLookupEndingEventArgs> value);
    public abstract virtual void add_CompletionBeginning(EventHandler`1<InstanceLookupCompletionBeginningEventArgs> value);
    public abstract virtual void remove_CompletionBeginning(EventHandler`1<InstanceLookupCompletionBeginningEventArgs> value);
    public abstract virtual void add_CompletionEnding(EventHandler`1<InstanceLookupCompletionEndingEventArgs> value);
    public abstract virtual void remove_CompletionEnding(EventHandler`1<InstanceLookupCompletionEndingEventArgs> value);
}
internal class Autofac.Core.Resolving.InstanceLookup : object {
    private IEnumerable`1<Parameter> _parameters;
    private IComponentRegistration _componentRegistration;
    private IResolveOperation _context;
    private ISharingLifetimeScope _activationScope;
    private object _newInstance;
    private bool _executed;
    private EventHandler`1<InstanceLookupEndingEventArgs> InstanceLookupEnding;
    private EventHandler`1<InstanceLookupCompletionBeginningEventArgs> CompletionBeginning;
    private EventHandler`1<InstanceLookupCompletionEndingEventArgs> CompletionEnding;
    private bool NewInstanceActivated { get; }
    public IComponentRegistry ComponentRegistry { get; }
    public IComponentRegistration ComponentRegistration { get; }
    public ILifetimeScope ActivationScope { get; }
    public IEnumerable`1<Parameter> Parameters { get; }
    public InstanceLookup(IComponentRegistration registration, IResolveOperation context, ISharingLifetimeScope mostNestedVisibleScope, IEnumerable`1<Parameter> parameters);
    public object Execute();
    private bool get_NewInstanceActivated();
    private object Activate(IEnumerable`1<Parameter> parameters);
    public void Complete();
    public sealed virtual IComponentRegistry get_ComponentRegistry();
    public sealed virtual object ResolveComponent(IComponentRegistration registration, IEnumerable`1<Parameter> parameters);
    public sealed virtual IComponentRegistration get_ComponentRegistration();
    public sealed virtual ILifetimeScope get_ActivationScope();
    public sealed virtual IEnumerable`1<Parameter> get_Parameters();
    public sealed virtual void add_InstanceLookupEnding(EventHandler`1<InstanceLookupEndingEventArgs> value);
    public sealed virtual void remove_InstanceLookupEnding(EventHandler`1<InstanceLookupEndingEventArgs> value);
    public sealed virtual void add_CompletionBeginning(EventHandler`1<InstanceLookupCompletionBeginningEventArgs> value);
    public sealed virtual void remove_CompletionBeginning(EventHandler`1<InstanceLookupCompletionBeginningEventArgs> value);
    public sealed virtual void add_CompletionEnding(EventHandler`1<InstanceLookupCompletionEndingEventArgs> value);
    public sealed virtual void remove_CompletionEnding(EventHandler`1<InstanceLookupCompletionEndingEventArgs> value);
    [CompilerGeneratedAttribute]
private object <Execute>b__0();
}
internal class Autofac.Core.Resolving.InstanceLookupBeginningEventArgs : EventArgs {
    private IInstanceLookup _instanceLookup;
    public IInstanceLookup InstanceLookup { get; }
    public InstanceLookupBeginningEventArgs(IInstanceLookup instanceLookup);
    public IInstanceLookup get_InstanceLookup();
}
internal class Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs : EventArgs {
    private IInstanceLookup _instanceLookup;
    public IInstanceLookup InstanceLookup { get; }
    public InstanceLookupCompletionBeginningEventArgs(IInstanceLookup instanceLookup);
    public IInstanceLookup get_InstanceLookup();
}
internal class Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs : EventArgs {
    private IInstanceLookup _instanceLookup;
    public IInstanceLookup InstanceLookup { get; }
    public InstanceLookupCompletionEndingEventArgs(IInstanceLookup instanceLookup);
    public IInstanceLookup get_InstanceLookup();
}
internal class Autofac.Core.Resolving.InstanceLookupEndingEventArgs : EventArgs {
    private IInstanceLookup _instanceLookup;
    private bool _newInstanceActivated;
    public bool NewInstanceActivated { get; }
    public IInstanceLookup InstanceLookup { get; }
    public InstanceLookupEndingEventArgs(IInstanceLookup instanceLookup, bool newInstanceActivated);
    public bool get_NewInstanceActivated();
    public IInstanceLookup get_InstanceLookup();
}
internal interface Autofac.Core.Resolving.IResolveOperation {
    public abstract virtual object GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1<Parameter> parameters);
    public abstract virtual void add_CurrentOperationEnding(EventHandler`1<ResolveOperationEndingEventArgs> value);
    public abstract virtual void remove_CurrentOperationEnding(EventHandler`1<ResolveOperationEndingEventArgs> value);
    public abstract virtual void add_InstanceLookupBeginning(EventHandler`1<InstanceLookupBeginningEventArgs> value);
    public abstract virtual void remove_InstanceLookupBeginning(EventHandler`1<InstanceLookupBeginningEventArgs> value);
}
internal class Autofac.Core.Resolving.ResolveOperation : object {
    private Stack`1<InstanceLookup> _activationStack;
    private ICollection`1<InstanceLookup> _successfulActivations;
    private ISharingLifetimeScope _mostNestedLifetimeScope;
    private int _callDepth;
    private bool _ended;
    private EventHandler`1<ResolveOperationEndingEventArgs> CurrentOperationEnding;
    private EventHandler`1<InstanceLookupBeginningEventArgs> InstanceLookupBeginning;
    public IComponentRegistry ComponentRegistry { get; }
    public ResolveOperation(ISharingLifetimeScope mostNestedLifetimeScope);
    public sealed virtual object ResolveComponent(IComponentRegistration registration, IEnumerable`1<Parameter> parameters);
    public object Execute(IComponentRegistration registration, IEnumerable`1<Parameter> parameters);
    public sealed virtual object GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1<Parameter> parameters);
    public sealed virtual void add_CurrentOperationEnding(EventHandler`1<ResolveOperationEndingEventArgs> value);
    public sealed virtual void remove_CurrentOperationEnding(EventHandler`1<ResolveOperationEndingEventArgs> value);
    public sealed virtual void add_InstanceLookupBeginning(EventHandler`1<InstanceLookupBeginningEventArgs> value);
    public sealed virtual void remove_InstanceLookupBeginning(EventHandler`1<InstanceLookupBeginningEventArgs> value);
    private void CompleteActivations();
    private void ResetSuccessfulActivations();
    public sealed virtual IComponentRegistry get_ComponentRegistry();
    private void End(Exception exception);
}
internal class Autofac.Core.Resolving.ResolveOperationBeginningEventArgs : EventArgs {
    private IResolveOperation _resolveOperation;
    public IResolveOperation ResolveOperation { get; }
    public ResolveOperationBeginningEventArgs(IResolveOperation resolveOperation);
    public IResolveOperation get_ResolveOperation();
}
internal class Autofac.Core.Resolving.ResolveOperationEndingEventArgs : EventArgs {
    private IResolveOperation _resolveOperation;
    private Exception _exception;
    public Exception Exception { get; }
    public IResolveOperation ResolveOperation { get; }
    public ResolveOperationEndingEventArgs(IResolveOperation resolveOperation, Exception exception);
    public Exception get_Exception();
    public IResolveOperation get_ResolveOperation();
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Autofac.Core.Resolving.ResolveOperationResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ExceptionDuringResolve { get; }
    internal static string MaxDepthExceeded { get; }
    internal static string TemporaryContextDisposed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ExceptionDuringResolve();
    internal static string get_MaxDepthExceeded();
    internal static string get_TemporaryContextDisposed();
}
internal abstract class Autofac.Core.Service : object {
    public string Description { get; }
    public abstract virtual string get_Description();
    public virtual string ToString();
    public static bool op_Equality(Service left, Service right);
    public static bool op_Inequality(Service left, Service right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
public virtual bool Equals(object obj);
    [SuppressMessageAttribute("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")]
public virtual int GetHashCode();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Core.ServiceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MustOverrideEquals { get; }
    internal static string MustOverrideGetHashCode { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MustOverrideEquals();
    internal static string get_MustOverrideGetHashCode();
}
internal class Autofac.Core.TypedService : Service {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    public Type ServiceType { get; private set; }
    public string Description { get; }
    public TypedService(Type serviceType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
private void set_ServiceType(Type value);
    public virtual string get_Description();
    public sealed virtual bool Equals(TypedService other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual Service ChangeType(Type newType);
}
internal class Autofac.Core.UniqueService : Service {
    private Guid _id;
    public string Description { get; }
    public UniqueService(Guid id);
    public virtual string get_Description();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Autofac.Features.Collections.CollectionRegistrationExtensions : object {
    private static string MemberOfPropertyKey;
    public static IRegistrationBuilder`3<T[], SimpleActivatorData, SingleRegistrationStyle> RegisterCollection(ContainerBuilder builder, string collectionName, Type elementType);
    private static IEnumerable`1<IComponentRegistration> GetElementRegistrations(string collectionName, IComponentRegistry registry);
    private static bool IsElementRegistration(string collectionName, IComponentRegistration cr);
    public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> MemberOf(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration, string collectionName);
}
internal class Autofac.Features.Collections.CollectionRegistrationSource : object {
    public bool IsAdapterForIndividualComponents { get; }
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.Collections.CollectionRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CollectionRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CollectionRegistrationSourceDescription();
}
internal class Autofac.Features.GeneratedFactories.FactoryGenerator : object {
    private Func`3<IComponentContext, IEnumerable`1<Parameter>, Delegate> _generator;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, ParameterExpression> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterExpression, NewExpression> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`3<ParameterExpression, int, NewExpression> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterExpression, NewExpression> CS$<>9__CachedAnonymousMethodDelegatef;
    public FactoryGenerator(Type delegateType, Service service, ParameterMapping parameterMapping);
    public FactoryGenerator(Type delegateType, IComponentRegistration productRegistration, ParameterMapping parameterMapping);
    private static ParameterMapping GetParameterMapping(Type delegateType, ParameterMapping configuredParameterMapping);
    private static bool DelegateTypeIsFunc(Type delegateType);
    private static Func`3<IComponentContext, IEnumerable`1<Parameter>, Delegate> CreateGenerator(Func`3<Expression, Expression[], Expression> makeResolveCall, Type delegateType, ParameterMapping pm);
    private static Expression[] MapParameters(IEnumerable`1<ParameterExpression> creatorParams, ParameterMapping pm);
    public Delegate GenerateFactory(IComponentContext context, IEnumerable`1<Parameter> parameters);
    public TDelegate GenerateFactory(IComponentContext context, IEnumerable`1<Parameter> parameters);
    [CompilerGeneratedAttribute]
private static ParameterExpression <CreateGenerator>b__8(ParameterInfo pi);
    [CompilerGeneratedAttribute]
private static NewExpression <MapParameters>b__a(ParameterExpression p);
    [CompilerGeneratedAttribute]
private static NewExpression <MapParameters>b__b(ParameterExpression p, int i);
    [CompilerGeneratedAttribute]
private static NewExpression <MapParameters>b__c(ParameterExpression p);
}
internal class Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData : object {
    private ParameterMapping _parameterMapping;
    private Type _delegateType;
    private Service _productService;
    public ParameterMapping ParameterMapping { get; public set; }
    public IInstanceActivator Activator { get; }
    public GeneratedFactoryActivatorData(Type delegateType, Service productService);
    public ParameterMapping get_ParameterMapping();
    public void set_ParameterMapping(ParameterMapping value);
    public sealed virtual IInstanceActivator get_Activator();
}
internal static class Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationExtensions : object {
    internal static IRegistrationBuilder`3<TLimit, GeneratedFactoryActivatorData, SingleRegistrationStyle> RegisterGeneratedFactory(ContainerBuilder builder, Type delegateType, Service service);
}
internal class Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource : object {
    public bool IsAdapterForIndividualComponents { get; }
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DuplicateTypesInTypeMappedFuncParameterList { get; }
    internal static string GeneratedFactoryRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DuplicateTypesInTypeMappedFuncParameterList();
    internal static string get_GeneratedFactoryRegistrationSourceDescription();
}
internal enum Autofac.Features.GeneratedFactories.ParameterMapping : Enum {
    public int value__;
    public static ParameterMapping Adaptive;
    public static ParameterMapping ByName;
    public static ParameterMapping ByType;
    public static ParameterMapping ByPosition;
}
[DefaultMemberAttribute("Item")]
internal interface Autofac.Features.Indexed.IIndex`2 {
    public TValue Item { get; }
    public abstract virtual TValue get_Item(TKey key);
    public abstract virtual bool TryGetValue(TKey key, TValue& value);
}
[DefaultMemberAttribute("Item")]
internal class Autofac.Features.Indexed.KeyedServiceIndex`2 : object {
    private IComponentContext _context;
    public TValue Item { get; }
    public KeyedServiceIndex`2(IComponentContext context);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private static KeyedService GetService(TKey key);
}
internal class Autofac.Features.LazyDependencies.LazyRegistrationSource : object {
    private static MethodInfo CreateLazyRegistrationMethod;
    public bool IsAdapterForIndividualComponents { get; }
    private static LazyRegistrationSource();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    private static IComponentRegistration CreateLazyRegistration(Service providedService, IComponentRegistration valueRegistration);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.LazyDependencies.LazyRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string LazyRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_LazyRegistrationSourceDescription();
}
internal class Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource : object {
    private static MethodInfo CreateLazyRegistrationMethod;
    public bool IsAdapterForIndividualComponents { get; }
    private static LazyWithMetadataRegistrationSource();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    private static IComponentRegistration CreateLazyRegistration(Service providedService, IComponentRegistration valueRegistration);
    private static Type GetLazyType(IServiceWithType serviceWithType);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string LazyWithMetadataRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_LazyWithMetadataRegistrationSourceDescription();
}
internal class Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData : object {
    private Service _fromService;
    private Func`4<IComponentContext, IEnumerable`1<Parameter>, object, object> _adapter;
    public Func`4<IComponentContext, IEnumerable`1<Parameter>, object, object> Adapter { get; }
    public Service FromService { get; }
    public LightweightAdapterActivatorData(Service fromService, Func`4<IComponentContext, IEnumerable`1<Parameter>, object, object> adapter);
    public Func`4<IComponentContext, IEnumerable`1<Parameter>, object, object> get_Adapter();
    public Service get_FromService();
}
internal static class Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationExtensions : object {
    public static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TFrom, TTo> adapter);
    public static IRegistrationBuilder`3<TService, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterDecorator(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TService, TService> decorator, object fromKey, object toKey);
    private static Service ServiceWithKey(object key);
    private static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TFrom, TTo> adapter, Service fromService, Service toService);
}
internal class Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource : object {
    private RegistrationData _registrationData;
    private LightweightAdapterActivatorData _activatorData;
    [CompilerGeneratedAttribute]
private static Func`2<Service, string> CS$<>9__CachedAnonymousMethodDelegatee;
    public bool IsAdapterForIndividualComponents { get; }
    public LightweightAdapterRegistrationSource(RegistrationData registrationData, LightweightAdapterActivatorData activatorData);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private IComponentRegistration <RegistrationsFor>b__0(IComponentRegistration r);
    [CompilerGeneratedAttribute]
private static string <ToString>b__d(Service s);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AdapterFromToDescription { get; }
    internal static string FromAndToMustDiffer { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AdapterFromToDescription();
    internal static string get_FromAndToMustDiffer();
}
internal class Autofac.Features.Metadata.Meta`1 : object {
    private T _value;
    private IDictionary`2<string, object> _metadata;
    public T Value { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public Meta`1(T value, IDictionary`2<string, object> metadata);
    public T get_Value();
    public IDictionary`2<string, object> get_Metadata();
}
internal class Autofac.Features.Metadata.Meta`2 : object {
    private T _value;
    private TMetadata _metadata;
    public T Value { get; }
    public TMetadata Metadata { get; }
    public Meta`2(T value, TMetadata metadata);
    public T get_Value();
    public TMetadata get_Metadata();
}
internal static class Autofac.Features.Metadata.MetadataViewProvider : object {
    private static MethodInfo GetMetadataValueMethod;
    private static MetadataViewProvider();
    public static Func`2<IDictionary`2<string, object>, TMetadata> GetMetadataViewProvider();
    private static TValue GetMetadataValue(IDictionary`2<string, object> metadata, string name, DefaultValueAttribute defaultValue);
    [CompilerGeneratedAttribute]
private static TMetadata <GetMetadataViewProvider>b__1(IDictionary`2<string, object> m);
    [CompilerGeneratedAttribute]
private static bool <GetMetadataViewProvider>b__2(ConstructorInfo ci);
    [CompilerGeneratedAttribute]
private static bool <GetMetadataViewProvider>b__3(ConstructorInfo ci);
    [CompilerGeneratedAttribute]
private static bool <GetMetadataViewProvider>b__4(PropertyInfo prop);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.Metadata.MetadataViewProviderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidViewImplementation { get; }
    internal static string MissingMetadata { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidViewImplementation();
    internal static string get_MissingMetadata();
}
internal class Autofac.Features.Metadata.MetaRegistrationSource : object {
    private static MethodInfo CreateMetaRegistrationMethod;
    public bool IsAdapterForIndividualComponents { get; }
    private static MetaRegistrationSource();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    private static IComponentRegistration CreateMetaRegistration(Service providedService, IComponentRegistration valueRegistration);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Features.Metadata.MetaRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MetaRegistrationSourceDescription { get; }
    internal static string StronglyTypedMetaRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MetaRegistrationSourceDescription();
    internal static string get_StronglyTypedMetaRegistrationSourceDescription();
}
internal class Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource : object {
    private static MethodInfo CreateMetaRegistrationMethod;
    public bool IsAdapterForIndividualComponents { get; }
    private static StronglyTypedMetaRegistrationSource();
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    private static IComponentRegistration CreateMetaRegistration(Service providedService, IComponentRegistration valueRegistration);
}
internal class Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData : ReflectionActivatorData {
    private IServiceWithType _fromService;
    public IServiceWithType FromService { get; }
    public OpenGenericDecoratorActivatorData(Type implementer, IServiceWithType fromService);
    public IServiceWithType get_FromService();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DecoratedServiceIsNotOpenGeneric { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DecoratedServiceIsNotOpenGeneric();
}
internal class Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource : object {
    private RegistrationData _registrationData;
    private OpenGenericDecoratorActivatorData _activatorData;
    [CompilerGeneratedAttribute]
private static Func`2<Service, string> CS$<>9__CachedAnonymousMethodDelegatea;
    public bool IsAdapterForIndividualComponents { get; }
    public OpenGenericDecoratorRegistrationSource(RegistrationData registrationData, OpenGenericDecoratorActivatorData activatorData);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    private static IEnumerable`1<Parameter> AddDecoratedComponentParameter(Type decoratedParameterType, IComponentRegistration decoratedComponent, IEnumerable`1<Parameter> configuredParameters);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__9(Service s);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FromAndToMustDiffer { get; }
    internal static string OpenGenericDecoratorRegistrationSourceImplFromTo { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FromAndToMustDiffer();
    internal static string get_OpenGenericDecoratorRegistrationSourceImplFromTo();
}
internal static class Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensions : object {
    public static IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle> RegisterGeneric(ContainerBuilder builder, Type implementor);
    public static IRegistrationBuilder`3<object, OpenGenericDecoratorActivatorData, DynamicRegistrationStyle> RegisterGenericDecorator(ContainerBuilder builder, Type decoratorType, Type decoratedServiceType, object fromKey, object toKey);
    private static IServiceWithType GetServiceWithKey(Type serviceType, object key);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ImplementorMustBeOpenGenericType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ImplementorMustBeOpenGenericType();
}
internal class Autofac.Features.OpenGenerics.OpenGenericRegistrationSource : object {
    private RegistrationData _registrationData;
    private ReflectionActivatorData _activatorData;
    [CompilerGeneratedAttribute]
private static Func`2<Service, string> CS$<>9__CachedAnonymousMethodDelegate6;
    public bool IsAdapterForIndividualComponents { get; }
    public OpenGenericRegistrationSource(RegistrationData registrationData, ReflectionActivatorData activatorData);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__5(Service s);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string OpenGenericRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_OpenGenericRegistrationSourceDescription();
}
internal static class Autofac.Features.OpenGenerics.OpenGenericServiceBinder : object {
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<IServiceWithType, Type>, Service> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`3<Type, Type, KeyValuePair`2<Type, Type>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Type, Type>, Type> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Type, Type>, bool> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Type> CS$<>9__CachedAnonymousMethodDelegate22;
    public static bool TryBindServiceType(Service service, IEnumerable`1<Service> configuredOpenGenericServices, Type openGenericImplementationType, Type& constructedImplementationType, IEnumerable`1& constructedServices);
    private static Type[] TryMapImplementationGenericArguments(Type implementationType, Type serviceType, Type serviceTypeDefinition, Type[] serviceGenericArguments);
    private static Type GetInterface(Type implementationType, Type serviceType);
    private static Type TryFindServiceArgumentForImplementationArgumentDefinition(Type implementationGenericArgumentDefinition, IEnumerable`1<KeyValuePair`2<Type, Type>> serviceArgumentDefinitionToArgument);
    public static void EnforceBindable(Type implementationType, IEnumerable`1<Service> services);
    private static bool IsCompatibleGenericClassDefinition(Type implementor, Type serviceType);
    [CompilerGeneratedAttribute]
private static bool <TryBindServiceType>b__2(Type a);
    [CompilerGeneratedAttribute]
private static Service <TryBindServiceType>b__5(<>f__AnonymousType1`2<IServiceWithType, Type> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<Type, Type> <TryMapImplementationGenericArguments>b__d(Type a, Type b);
    [CompilerGeneratedAttribute]
private static Type <TryFindServiceArgumentForImplementationArgumentDefinition>b__17(KeyValuePair`2<Type, Type> argdef);
    [CompilerGeneratedAttribute]
private static bool <TryFindServiceArgumentForImplementationArgumentDefinition>b__18(KeyValuePair`2<Type, Type> argdef);
    [CompilerGeneratedAttribute]
private static Type <EnforceBindable>b__20(Type t);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ImplementorDoesntImplementService { get; }
    internal static string ImplementorMustBeOpenGenericTypeDefinition { get; }
    internal static string InterfaceIsNotImplemented { get; }
    internal static string ServiceTypeMustBeOpenGenericTypeDefinition { get; }
    internal static string TypesAreNotConvertible { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ImplementorDoesntImplementService();
    internal static string get_ImplementorMustBeOpenGenericTypeDefinition();
    internal static string get_InterfaceIsNotImplemented();
    internal static string get_ServiceTypeMustBeOpenGenericTypeDefinition();
    internal static string get_TypesAreNotConvertible();
}
internal class Autofac.Features.OwnedInstances.Owned`1 : Disposable {
    private T _value;
    private IDisposable _lifetime;
    public T Value { get; }
    public Owned`1(T value, IDisposable lifetime);
    public T get_Value();
    protected virtual void Dispose(bool disposing);
}
internal class Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource : object {
    public bool IsAdapterForIndividualComponents { get; }
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    public virtual string ToString();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string OwnedInstanceRegistrationSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_OwnedInstanceRegistrationSourceDescription();
}
internal class Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource : object {
    private Func`2<Type, bool> _predicate;
    [CompilerGeneratedAttribute]
private Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> <RegistrationConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsAdapterForIndividualComponents { get; }
    public Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> RegistrationConfiguration { get; public set; }
    public AnyConcreteTypeNotAlreadyRegisteredSource(Func`2<Type, bool> predicate);
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    [CompilerGeneratedAttribute]
public Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> get_RegistrationConfiguration();
    [CompilerGeneratedAttribute]
public void set_RegistrationConfiguration(Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(Type t);
}
[ExtensionAttribute]
internal static class Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceExtensions : object {
    [ExtensionAttribute]
public static AnyConcreteTypeNotAlreadyRegisteredSource WithRegistrationsAs(AnyConcreteTypeNotAlreadyRegisteredSource source, Action`1<IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>> configurationAction);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AnyConcreteTypeNotAlreadyRegisteredSourceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AnyConcreteTypeNotAlreadyRegisteredSourceDescription();
}
internal class Autofac.Features.Scanning.ScanningActivatorData : ReflectionActivatorData {
    private ICollection`1<Func`2<Type, bool>> _filters;
    private ICollection`1<Action`2<Type, IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>>> _configurationActions;
    private ICollection`1<Action`1<IComponentRegistry>> _postScanningCallbacks;
    public ICollection`1<Func`2<Type, bool>> Filters { get; }
    public ICollection`1<Action`2<Type, IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>>> ConfigurationActions { get; }
    public ICollection`1<Action`1<IComponentRegistry>> PostScanningCallbacks { get; }
    public ICollection`1<Func`2<Type, bool>> get_Filters();
    public ICollection`1<Action`2<Type, IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle>>> get_ConfigurationActions();
    public ICollection`1<Action`1<IComponentRegistry>> get_PostScanningCallbacks();
}
[ExtensionAttribute]
internal static class Autofac.Features.Scanning.ScanningRegistrationExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Assembly, IEnumerable`1<Type>> CS$<>9__CachedAnonymousMethodDelegate7;
    public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterAssemblyTypes(ContainerBuilder builder, Assembly[] assemblies);
    public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterTypes(ContainerBuilder builder, Type[] types);
    private static void ScanAssemblies(IEnumerable`1<Assembly> assemblies, IComponentRegistry cr, IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> rb);
    private static void ScanTypes(IEnumerable`1<Type> types, IComponentRegistry cr, IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> rb);
    public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AsClosedTypesOf(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type type);
    public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Service>> serviceMapping);
    public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> PreserveExistingDefaults(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Type> <ScanAssemblies>b__6(Assembly a);
    [CompilerGeneratedAttribute]
private static void <PreserveExistingDefaults>b__1e(Type t, IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle> r);
}
internal class Autofac.Features.Variance.ContravariantRegistrationSource : object {
    private static string IsContravariantAdapter;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentRegistration, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`3<Type, int, <>f__AnonymousType0`2<bool, int>> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<bool, int>, bool> CS$<>9__CachedAnonymousMethodDelegate1c;
    public bool IsAdapterForIndividualComponents { get; }
    public sealed virtual IEnumerable`1<IComponentRegistration> RegistrationsFor(Service service, Func`2<Service, IEnumerable`1<IComponentRegistration>> registrationAccessor);
    private static Type[] SubstituteArrayElementAt(Type[] array, Type newElement, int index);
    private static IEnumerable`1<Type> GetTypesAssignableFrom(Type type);
    private static IEnumerable`1<Type> GetBagOfTypesAssignableFrom(Type type);
    private static bool IsCompatibleInterfaceType(Type type, Int32& contravariantParameterIndex);
    public sealed virtual bool get_IsAdapterForIndividualComponents();
    [CompilerGeneratedAttribute]
private static bool <RegistrationsFor>b__4(IComponentRegistration r);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<bool, int> <IsCompatibleInterfaceType>b__19(Type c, int i);
    [CompilerGeneratedAttribute]
private static bool <IsCompatibleInterfaceType>b__1a(<>f__AnonymousType0`2<bool, int> cwi);
}
internal interface Autofac.IComponentContext {
    public IComponentRegistry ComponentRegistry { get; }
    public abstract virtual IComponentRegistry get_ComponentRegistry();
    public abstract virtual object ResolveComponent(IComponentRegistration registration, IEnumerable`1<Parameter> parameters);
}
internal interface Autofac.IContainer {
}
internal interface Autofac.ILifetimeScope {
    public IDisposer Disposer { get; }
    public object Tag { get; }
    public abstract virtual ILifetimeScope BeginLifetimeScope();
    public abstract virtual ILifetimeScope BeginLifetimeScope(object tag);
    public abstract virtual ILifetimeScope BeginLifetimeScope(Action`1<ContainerBuilder> configurationAction);
    public abstract virtual ILifetimeScope BeginLifetimeScope(object tag, Action`1<ContainerBuilder> configurationAction);
    public abstract virtual IDisposer get_Disposer();
    public abstract virtual object get_Tag();
    public abstract virtual void add_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public abstract virtual void remove_ChildLifetimeScopeBeginning(EventHandler`1<LifetimeScopeBeginningEventArgs> value);
    public abstract virtual void add_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public abstract virtual void remove_CurrentScopeEnding(EventHandler`1<LifetimeScopeEndingEventArgs> value);
    public abstract virtual void add_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
    public abstract virtual void remove_ResolveOperationBeginning(EventHandler`1<ResolveOperationBeginningEventArgs> value);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.Owin.AutofacMiddleware`1 : OwinMiddleware {
    public AutofacMiddleware`1(OwinMiddleware next);
    [SecurityCriticalAttribute]
public virtual Task Invoke(IOwinContext context);
}
internal static class Autofac.Integration.Owin.Constants : object {
    internal static string OwinLifetimeScopeKey;
}
[ExtensionAttribute]
internal static class Autofac.Integration.Owin.OwinContextExtensions : object {
    [SecuritySafeCriticalAttribute]
[ExtensionAttribute]
public static ILifetimeScope GetAutofacLifetimeScope(IOwinContext context);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.ActionFilterOverrideWrapper : ActionFilterWrapper {
    public string MetadataKey { get; }
    public Type FiltersToOverride { get; }
    public ActionFilterOverrideWrapper(FilterMetadata filterMetadata);
    [SecurityCriticalAttribute]
public virtual string get_MetadataKey();
    [SecurityCriticalAttribute]
public sealed virtual Type get_FiltersToOverride();
}
[SuppressMessageAttribute("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes")]
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.ActionFilterWrapper : ActionFilterAttribute {
    private FilterMetadata _filterMetadata;
    public string MetadataKey { get; }
    public ActionFilterWrapper(FilterMetadata filterMetadata);
    [SecurityCriticalAttribute]
public virtual string get_MetadataKey();
    [SecurityCriticalAttribute]
public virtual void OnActionExecuting(HttpActionContext actionContext);
    [SecurityCriticalAttribute]
public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
    private bool FilterMatchesMetadata(Meta`1<Lazy`1<IAutofacActionFilter>> filter);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AuthenticationFilterOverrideWrapper : AuthenticationFilterWrapper {
    public string MetadataKey { get; }
    public Type FiltersToOverride { get; }
    public AuthenticationFilterOverrideWrapper(FilterMetadata filterMetadata);
    [SecurityCriticalAttribute]
public virtual string get_MetadataKey();
    [SecurityCriticalAttribute]
public sealed virtual Type get_FiltersToOverride();
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AuthenticationFilterWrapper : object {
    private FilterMetadata _filterMetadata;
    public string MetadataKey { get; }
    private bool System.Web.Http.Filters.IFilter.AllowMultiple { get; }
    public AuthenticationFilterWrapper(FilterMetadata filterMetadata);
    [SecurityCriticalAttribute]
public virtual string get_MetadataKey();
    [SecurityCriticalAttribute]
public sealed virtual void OnAuthenticate(HttpAuthenticationContext context);
    [SecurityCriticalAttribute]
public sealed virtual void OnChallenge(HttpAuthenticationChallengeContext context);
    [SecurityCriticalAttribute]
private sealed virtual override bool System.Web.Http.Filters.IFilter.get_AllowMultiple();
    [SecurityCriticalAttribute]
private sealed virtual override Task System.Web.Http.Filters.IAuthenticationFilter.AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    [SecurityCriticalAttribute]
private sealed virtual override Task System.Web.Http.Filters.IAuthenticationFilter.ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
    private bool FilterMatchesMetadata(Meta`1<Lazy`1<IAutofacAuthenticationFilter>> filter);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AuthorizationFilterOverrideWrapper : AuthorizationFilterWrapper {
    public string MetadataKey { get; }
    public Type FiltersToOverride { get; }
    public AuthorizationFilterOverrideWrapper(FilterMetadata filterMetadata);
    [SecurityCriticalAttribute]
public virtual string get_MetadataKey();
    [SecurityCriticalAttribute]
public sealed virtual Type get_FiltersToOverride();
}
[SuppressMessageAttribute("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes")]
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AuthorizationFilterWrapper : AuthorizationFilterAttribute {
    private FilterMetadata _filterMetadata;
    public string MetadataKey { get; }
    public AuthorizationFilterWrapper(FilterMetadata filterMetadata);
    [SecurityCriticalAttribute]
public virtual string get_MetadataKey();
    [SecurityCriticalAttribute]
public virtual void OnAuthorization(HttpActionContext actionContext);
    private bool FilterMatchesMetadata(Meta`1<Lazy`1<IAutofacAuthorizationFilter>> filter);
}
[AttributeUsageAttribute("4")]
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AutofacControllerConfigurationAttribute : Attribute {
    private static string InitializedKey;
    internal static string ClearServiceListKey;
    [CompilerGeneratedAttribute]
private static Func`2<Meta`1<MediaTypeFormatter>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    private static AutofacControllerConfigurationAttribute();
    [SecurityCriticalAttribute]
public sealed virtual void Initialize(HttpControllerSettings controllerSettings, HttpControllerDescriptor controllerDescriptor);
    private static void UpdateControllerService(ServicesContainer services, IComponentContext container, ControllerTypeKey serviceKey);
    private static void UpdateControllerServices(ServicesContainer services, IComponentContext container, ControllerTypeKey serviceKey);
    private static void UpdateControllerFormatters(ICollection`1<MediaTypeFormatter> collection, IComponentContext container, ControllerTypeKey serviceKey);
    private static bool ClearExistingServices(IDictionary`2<string, object> metadata);
    [CompilerGeneratedAttribute]
private static bool <UpdateControllerServices>b__0(Meta`1<T> service);
    [CompilerGeneratedAttribute]
private static bool <UpdateControllerFormatters>b__1(Meta`1<MediaTypeFormatter> service);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Autofac.Integration.WebApi.AutofacControllerConfigurationAttributeResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DependencyResolverMissing { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DependencyResolverMissing();
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AutofacOverrideFilter : object {
    [CompilerGeneratedAttribute]
private Type <FiltersToOverride>k__BackingField;
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; private set; }
    public AutofacOverrideFilter(Type filtersToOverride);
    [SecurityCriticalAttribute]
public sealed virtual bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
[SecurityCriticalAttribute]
public sealed virtual Type get_FiltersToOverride();
    [CompilerGeneratedAttribute]
private void set_FiltersToOverride(Type value);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AutofacWebApiDependencyResolver : object {
    private bool _disposed;
    private ILifetimeScope _container;
    private IDependencyScope _rootDependencyScope;
    public ILifetimeScope Container { get; }
    public AutofacWebApiDependencyResolver(ILifetimeScope container);
    [SecuritySafeCriticalAttribute]
protected virtual void Finalize();
    public ILifetimeScope get_Container();
    [SecurityCriticalAttribute]
public sealed virtual object GetService(Type serviceType);
    [SecurityCriticalAttribute]
public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
    [SecurityCriticalAttribute]
public sealed virtual IDependencyScope BeginScope();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AutofacWebApiDependencyScope : object {
    private bool _disposed;
    private ILifetimeScope _lifetimeScope;
    public ILifetimeScope LifetimeScope { get; }
    public AutofacWebApiDependencyScope(ILifetimeScope lifetimeScope);
    [SecuritySafeCriticalAttribute]
protected virtual void Finalize();
    public ILifetimeScope get_LifetimeScope();
    [SecurityCriticalAttribute]
public sealed virtual object GetService(Type serviceType);
    [SecurityCriticalAttribute]
public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AutofacWebApiFilterProvider : object {
    private ILifetimeScope _rootLifetimeScope;
    private ActionDescriptorFilterProvider _filterProvider;
    internal static string ActionFilterMetadataKey;
    internal static string ActionFilterOverrideMetadataKey;
    internal static string AuthorizationFilterMetadataKey;
    internal static string AuthorizationFilterOverrideMetadataKey;
    internal static string AuthenticationFilterMetadataKey;
    internal static string AuthenticationFilterOverrideMetadataKey;
    internal static string ExceptionFilterMetadataKey;
    internal static string ExceptionFilterOverrideMetadataKey;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, ActionFilterOverrideWrapper> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, AuthenticationFilterOverrideWrapper> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, AuthorizationFilterOverrideWrapper> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, ExceptionFilterOverrideWrapper> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, ActionFilterOverrideWrapper> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, AuthenticationFilterOverrideWrapper> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, AuthorizationFilterOverrideWrapper> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, ExceptionFilterOverrideWrapper> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, ActionFilterWrapper> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, AuthenticationFilterWrapper> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, AuthorizationFilterWrapper> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, ExceptionFilterWrapper> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, ActionFilterWrapper> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, AuthenticationFilterWrapper> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, AuthorizationFilterWrapper> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<FilterMetadata, ExceptionFilterWrapper> CS$<>9__CachedAnonymousMethodDelegate21;
    public AutofacWebApiFilterProvider(ILifetimeScope lifetimeScope);
    private static AutofacWebApiFilterProvider();
    [SecurityCriticalAttribute]
public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
    private static void ResolveControllerScopedNoopFilterOverrides(FilterContext filterContext);
    private static void ResolveActionScopedNoopFilterOverrides(FilterContext filterContext, ReflectedHttpActionDescriptor descriptor);
    private static void ResolveControllerScopedFilterOverrides(FilterContext filterContext);
    private static void ResolveActionScopedFilterOverrides(FilterContext filterContext, ReflectedHttpActionDescriptor descriptor);
    private static void ResolveControllerScopedFilters(FilterContext filterContext);
    private static void ResolveActionScopedFilters(FilterContext filterContext, ReflectedHttpActionDescriptor descriptor);
    private static void ResolveControllerScopedFilter(FilterContext filterContext, Func`2<FilterMetadata, TWrapper> wrapperFactory, string metadataKey);
    private static void ResolveActionScopedFilter(FilterContext filterContext, MethodInfo methodInfo, Func`2<FilterMetadata, TWrapper> wrapperFactory, string metadataKey);
    private static void ResolveControllerScopedOverrideFilter(FilterContext filterContext, string metadataKey);
    private static void ResolveActionScopedOverrideFilter(FilterContext filterContext, MethodInfo methodInfo, string metadataKey);
    private static bool MatchingFilterAdded(IEnumerable`1<FilterMetadata> filters, FilterMetadata metadata);
    private static bool FilterMatchesController(FilterContext filterContext, string metadataKey, FilterMetadata metadata);
    private static bool FilterMatchesAction(FilterContext filterContext, MethodInfo methodInfo, string metadataKey, FilterMetadata metadata);
    [CompilerGeneratedAttribute]
private static ActionFilterOverrideWrapper <ResolveControllerScopedFilterOverrides>b__2(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static AuthenticationFilterOverrideWrapper <ResolveControllerScopedFilterOverrides>b__3(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static AuthorizationFilterOverrideWrapper <ResolveControllerScopedFilterOverrides>b__4(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static ExceptionFilterOverrideWrapper <ResolveControllerScopedFilterOverrides>b__5(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static ActionFilterOverrideWrapper <ResolveActionScopedFilterOverrides>b__a(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static AuthenticationFilterOverrideWrapper <ResolveActionScopedFilterOverrides>b__b(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static AuthorizationFilterOverrideWrapper <ResolveActionScopedFilterOverrides>b__c(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static ExceptionFilterOverrideWrapper <ResolveActionScopedFilterOverrides>b__d(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static ActionFilterWrapper <ResolveControllerScopedFilters>b__12(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static AuthenticationFilterWrapper <ResolveControllerScopedFilters>b__13(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static AuthorizationFilterWrapper <ResolveControllerScopedFilters>b__14(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static ExceptionFilterWrapper <ResolveControllerScopedFilters>b__15(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static ActionFilterWrapper <ResolveActionScopedFilters>b__1a(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static AuthenticationFilterWrapper <ResolveActionScopedFilters>b__1b(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static AuthorizationFilterWrapper <ResolveActionScopedFilters>b__1c(FilterMetadata m);
    [CompilerGeneratedAttribute]
private static ExceptionFilterWrapper <ResolveActionScopedFilters>b__1d(FilterMetadata m);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.AutofacWebApiModelBinderProvider : ModelBinderProvider {
    internal static string MetadataKey;
    [CompilerGeneratedAttribute]
private static Func`2<Meta`1<Lazy`1<IModelBinder>>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    private static AutofacWebApiModelBinderProvider();
    [SecurityCriticalAttribute]
public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
    [CompilerGeneratedAttribute]
private static bool <GetBinder>b__0(Meta`1<Lazy`1<IModelBinder>> binder);
}
internal class Autofac.Integration.WebApi.ControllerTypeKey : object {
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    public Type ControllerType { get; private set; }
    public ControllerTypeKey(Type controllerType);
    [CompilerGeneratedAttribute]
public Type get_ControllerType();
    [CompilerGeneratedAttribute]
private void set_ControllerType(Type value);
    public sealed virtual bool Equals(ControllerTypeKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.CurrentRequestHandler : DelegatingHandler {
    [SecuritySafeCriticalAttribute]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    internal static void UpdateScopeWithHttpRequestMessage(HttpRequestMessage request);
}
[ExtensionAttribute]
internal static class Autofac.Integration.WebApi.DependencyResolverExtensions : object {
    [SecurityCriticalAttribute]
[ExtensionAttribute]
public static ILifetimeScope GetRootLifetimeScope(IDependencyResolver dependencyResolver);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
public static ILifetimeScope GetRequestLifetimeScope(IDependencyScope dependencyScope);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.ExceptionFilterOverrideWrapper : ExceptionFilterWrapper {
    public string MetadataKey { get; }
    public Type FiltersToOverride { get; }
    public ExceptionFilterOverrideWrapper(FilterMetadata filterMetadata);
    [SecurityCriticalAttribute]
public virtual string get_MetadataKey();
    [SecurityCriticalAttribute]
public sealed virtual Type get_FiltersToOverride();
}
[SecurityCriticalAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes")]
internal class Autofac.Integration.WebApi.ExceptionFilterWrapper : ExceptionFilterAttribute {
    private FilterMetadata _filterMetadata;
    public string MetadataKey { get; }
    public ExceptionFilterWrapper(FilterMetadata filterMetadata);
    [SecurityCriticalAttribute]
public virtual string get_MetadataKey();
    [SecurityCriticalAttribute]
public virtual void OnException(HttpActionExecutedContext actionExecutedContext);
    private bool FilterMatchesMetadata(Meta`1<Lazy`1<IAutofacExceptionFilter>> filter);
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.FilterMetadata : object {
    [CompilerGeneratedAttribute]
private Type <ControllerType>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterScope <FilterScope>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [DefaultValueAttribute("")]
public Type ControllerType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FilterScope FilterScope { get; public set; }
    [DefaultValueAttribute("")]
public MethodInfo MethodInfo { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_ControllerType();
    [CompilerGeneratedAttribute]
public void set_ControllerType(Type value);
    [CompilerGeneratedAttribute]
public FilterScope get_FilterScope();
    [CompilerGeneratedAttribute]
public void set_FilterScope(FilterScope value);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
}
[SecurityCriticalAttribute]
internal interface Autofac.Integration.WebApi.IAutofacActionFilter {
    public abstract virtual void OnActionExecuting(HttpActionContext actionContext);
    public abstract virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
}
[SecurityCriticalAttribute]
internal interface Autofac.Integration.WebApi.IAutofacAuthenticationFilter {
    public abstract virtual void OnAuthenticate(HttpAuthenticationContext context);
    public abstract virtual void OnChallenge(HttpAuthenticationChallengeContext context);
}
[SecurityCriticalAttribute]
internal interface Autofac.Integration.WebApi.IAutofacAuthorizationFilter {
    public abstract virtual void OnAuthorization(HttpActionContext actionContext);
}
[SecurityCriticalAttribute]
internal interface Autofac.Integration.WebApi.IAutofacExceptionFilter {
    public abstract virtual void OnException(HttpActionExecutedContext actionExecutedContext);
}
internal interface Autofac.Integration.WebApi.IFilterWrapper {
    public string MetadataKey { get; }
    [SecurityCriticalAttribute]
public abstract virtual string get_MetadataKey();
}
[SecurityCriticalAttribute]
internal class Autofac.Integration.WebApi.Owin.DependencyScopeHandler : DelegatingHandler {
    [SecuritySafeCriticalAttribute]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[SecurityCriticalAttribute]
[ExtensionAttribute]
internal static class Autofac.Integration.WebApi.RegistrationExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Predicate`1<object> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, AutofacWebApiFilterProvider> CS$<>9__CachedAnonymousMethodDelegateb;
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterApiControllers(ContainerBuilder builder, Assembly[] controllerAssemblies);
    [ExtensionAttribute]
[ObsoleteAttribute("Instead of using the Web-API-specific InstancePerApiRequest, please switch to the InstancePerRequest shared registration extension from Autofac core.")]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerApiRequest(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Object[] lifetimeScopeTags);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerApiControllerType(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Type controllerType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerApiControllerType(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Type controllerType, bool clearExistingServices);
    [ExtensionAttribute]
public static void RegisterHttpRequestMessage(ContainerBuilder builder, HttpConfiguration config);
    [ExtensionAttribute]
public static void RegisterWebApiModelBinderProvider(ContainerBuilder builder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterWebApiModelBinders(ContainerBuilder builder, Assembly[] modelBinderAssemblies);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> AsModelBinderForTypes(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration, Type[] types);
    [ExtensionAttribute]
public static void RegisterWebApiFilterProvider(ContainerBuilder builder, HttpConfiguration configuration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiActionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthorizationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiExceptionFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsWebApiAuthenticationFilterOverrideFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static void OverrideWebApiActionFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideWebApiActionFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideWebApiAuthorizationFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideWebApiAuthorizationFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideWebApiExceptionFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideWebApiExceptionFilterFor(ContainerBuilder builder);
    [ExtensionAttribute]
public static void OverrideWebApiAuthenticationFilterFor(ContainerBuilder builder, Expression`1<Action`1<TController>> actionSelector);
    [ExtensionAttribute]
public static void OverrideWebApiAuthenticationFilterFor(ContainerBuilder builder);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, string metadataKey);
    private static IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> AsFilterFor(IRegistrationBuilder`3<object, IConcreteActivatorData, SingleRegistrationStyle> registration, string metadataKey, Expression`1<Action`1<TController>> actionSelector);
    private static void AsOverrideFor(ContainerBuilder builder, string metadataKey);
    private static void AsOverrideFor(ContainerBuilder builder, string metadataKey, Expression`1<Action`1<TController>> actionSelector);
    private static MethodInfo GetMethodInfo(LambdaExpression expression);
    [CompilerGeneratedAttribute]
private static bool <RegisterApiControllers>b__0(Type t);
    [CompilerGeneratedAttribute]
private static bool <RegisterWebApiModelBinders>b__5(Type type);
    [CompilerGeneratedAttribute]
private static bool <AsModelBinderForTypes>b__7(Type type);
    [CompilerGeneratedAttribute]
private static bool <RegisterWebApiFilterProvider>b__8(object provider);
    [CompilerGeneratedAttribute]
private static AutofacWebApiFilterProvider <RegisterWebApiFilterProvider>b__9(IComponentContext c);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Integration.WebApi.RegistrationExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidActionExpress { get; }
    internal static string ListMustNotBeEmptyOrContainNulls { get; }
    internal static string MustBeAssignableToFilterType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidActionExpress();
    internal static string get_ListMustNotBeEmptyOrContainNulls();
    internal static string get_MustBeAssignableToFilterType();
}
internal interface Autofac.IStartable {
    public abstract virtual void Start();
}
internal abstract class Autofac.Module : object {
    protected Assembly ThisAssembly { get; }
    public sealed virtual void Configure(IComponentRegistry componentRegistry);
    protected virtual void Load(ContainerBuilder builder);
    protected virtual void AttachToComponentRegistration(IComponentRegistry componentRegistry, IComponentRegistration registration);
    protected virtual void AttachToRegistrationSource(IComponentRegistry componentRegistry, IRegistrationSource registrationSource);
    private void AttachToRegistrations(IComponentRegistry componentRegistry);
    private void AttachToSources(IComponentRegistry componentRegistry);
    protected virtual Assembly get_ThisAssembly();
    [CompilerGeneratedAttribute]
private void <AttachToRegistrations>b__0(object sender, ComponentRegisteredEventArgs e);
    [CompilerGeneratedAttribute]
private void <AttachToSources>b__1(object sender, RegistrationSourceAddedEventArgs e);
}
[ExtensionAttribute]
internal static class Autofac.ModuleRegistrationExtensions : object {
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(IModuleRegistrar registrar, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(IModuleRegistrar registrar, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(ContainerBuilder builder, Type moduleType, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterAssemblyModules(IModuleRegistrar registrar, Type moduleType, Assembly[] assemblies);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterModule(ContainerBuilder builder);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterModule(IModuleRegistrar registrar);
    [ExtensionAttribute]
public static IModuleRegistrar RegisterModule(ContainerBuilder builder, IModule module);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.ModuleResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ThisAssemblyUnavailable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ThisAssemblyUnavailable();
}
internal class Autofac.NamedParameter : ConstantParameter {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public NamedParameter(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[ExtensionAttribute]
internal static class Autofac.ParameterExtensions : object {
    [ExtensionAttribute]
public static T Named(IEnumerable`1<Parameter> parameters, string name);
    [ExtensionAttribute]
public static T Positional(IEnumerable`1<Parameter> parameters, int position);
    [ExtensionAttribute]
public static T TypedAs(IEnumerable`1<Parameter> parameters);
    private static TValue ConstantValue(IEnumerable`1<Parameter> parameters, Func`2<TParameter, bool> predicate);
    [CompilerGeneratedAttribute]
private static bool <TypedAs>b__6(TypedParameter c);
    [CompilerGeneratedAttribute]
private static object <ConstantValue>b__7(TParameter p);
}
internal class Autofac.PositionalParameter : ConstantParameter {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; private set; }
    public PositionalParameter(int position, object value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
}
[FlagsAttribute]
internal enum Autofac.PropertyWiringOptions : Enum {
    public int value__;
    public static PropertyWiringOptions None;
    public static PropertyWiringOptions AllowCircularDependencies;
    public static PropertyWiringOptions PreserveSetValues;
}
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
[ExtensionAttribute]
internal static class Autofac.RegistrationExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate36;
    [ExtensionAttribute]
public static void RegisterComponent(ContainerBuilder builder, IComponentRegistration registration);
    [ExtensionAttribute]
public static void RegisterSource(ContainerBuilder builder, IRegistrationSource registrationSource);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<T, SimpleActivatorData, SingleRegistrationStyle> RegisterInstance(ContainerBuilder builder, T instance);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TImplementer, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterType(ContainerBuilder builder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterType(ContainerBuilder builder, Type implementationType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<T, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`2<IComponentContext, T> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<T, SimpleActivatorData, SingleRegistrationStyle> Register(ContainerBuilder builder, Func`3<IComponentContext, IEnumerable`1<Parameter>, T> delegate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ReflectionActivatorData, DynamicRegistrationStyle> RegisterGeneric(ContainerBuilder builder, Type implementer);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> PreserveExistingDefaults(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ScanningActivatorData, TRegistrationStyle> PreserveExistingDefaults(IRegistrationBuilder`3<TLimit, ScanningActivatorData, TRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterAssemblyTypes(ContainerBuilder builder, Assembly[] assemblies);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> RegisterTypes(ContainerBuilder builder, Type[] types);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> Where(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, bool> predicate);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Service>> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, Service> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, Type> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> As(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<Type>> serviceMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ScanningActivatorData, DynamicRegistrationStyle> AsSelf(IRegistrationBuilder`3<TLimit, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TConcreteActivatorData, SingleRegistrationStyle> AsSelf(IRegistrationBuilder`3<TLimit, TConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ReflectionActivatorData, DynamicRegistrationStyle> AsSelf(IRegistrationBuilder`3<TLimit, ReflectionActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> WithMetadata(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, IEnumerable`1<KeyValuePair`2<string, object>>> metadataMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> WithMetadataFrom(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> WithMetadata(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, string metadataKey, Func`2<Type, object> metadataValueMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> Named(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration, Func`2<Type, string> serviceNameMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> Named(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, string> serviceNameMapping, Type serviceType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> Keyed(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration, Func`2<Type, object> serviceKeyMapping);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> Keyed(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Func`2<Type, object> serviceKeyMapping, Type serviceType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ScanningActivatorData, DynamicRegistrationStyle> AsImplementedInterfaces(IRegistrationBuilder`3<TLimit, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TConcreteActivatorData, SingleRegistrationStyle> AsImplementedInterfaces(IRegistrationBuilder`3<TLimit, TConcreteActivatorData, SingleRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ReflectionActivatorData, DynamicRegistrationStyle> AsImplementedInterfaces(IRegistrationBuilder`3<TLimit, ReflectionActivatorData, DynamicRegistrationStyle> registration);
    private static Type[] GetImplementedInterfaces(Type type);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> FindConstructorsWith(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, IConstructorFinder constructorFinder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> FindConstructorsWith(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Func`2<Type, ConstructorInfo[]> finder);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> UsingConstructor(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Type[] signature);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> UsingConstructor(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, IConstructorSelector constructorSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> UsingConstructor(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Expression`1<Func`1<TLimit>> constructorSelector);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithParameter(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, string parameterName, object parameterValue);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithParameter(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Parameter parameter);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithParameter(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Func`3<ParameterInfo, IComponentContext, bool> parameterSelector, Func`3<ParameterInfo, IComponentContext, object> valueProvider);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithParameters(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithProperty(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, string propertyName, object propertyValue);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithProperty(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, Parameter property);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> WithProperties(IRegistrationBuilder`3<TLimit, TReflectionActivatorData, TStyle> registration, IEnumerable`1<Parameter> properties);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> Targeting(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration, IComponentRegistration target);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> OnRegistered(IRegistrationBuilder`3<TLimit, TActivatorData, TSingleRegistrationStyle> registration, Action`1<ComponentRegisteredEventArgs> handler);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, ScanningActivatorData, TRegistrationStyle> OnRegistered(IRegistrationBuilder`3<TLimit, ScanningActivatorData, TRegistrationStyle> registration, Action`1<ComponentRegisteredEventArgs> handler);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AsClosedTypesOf(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type openGenericServiceType);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> AssignableTo(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, Type type);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> AssignableTo(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> Except(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> Except(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration, Action`1<IRegistrationBuilder`3<T, ConcreteReflectionActivatorData, SingleRegistrationStyle>> customizedRegistration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> InNamespaceOf(IRegistrationBuilder`3<object, ScanningActivatorData, DynamicRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> InNamespace(IRegistrationBuilder`3<TLimit, TScanningActivatorData, TRegistrationStyle> registration, string ns);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TFrom, TTo> adapter);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`3<IComponentContext, TFrom, TTo> adapter);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TTo, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterAdapter(ContainerBuilder builder, Func`2<TFrom, TTo> adapter);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<object, OpenGenericDecoratorActivatorData, DynamicRegistrationStyle> RegisterGenericDecorator(ContainerBuilder builder, Type decoratorType, Type decoratedServiceType, object fromKey, object toKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TService, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterDecorator(ContainerBuilder builder, Func`4<IComponentContext, IEnumerable`1<Parameter>, TService, TService> decorator, object fromKey, object toKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TService, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterDecorator(ContainerBuilder builder, Func`3<IComponentContext, TService, TService> decorator, object fromKey, object toKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TService, LightweightAdapterActivatorData, DynamicRegistrationStyle> RegisterDecorator(ContainerBuilder builder, Func`2<TService, TService> decorator, object fromKey, object toKey);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> OnRelease(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration, Action`1<TLimit> releaseAction);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> AutoActivate(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registration);
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> InstancePerRequest(IRegistrationBuilder`3<TLimit, TActivatorData, TStyle> registration, Object[] lifetimeScopeTags);
    [CompilerGeneratedAttribute]
private static Type <AsSelf>b__20(Type t);
    [CompilerGeneratedAttribute]
private static bool <WithMetadataFrom>b__24(PropertyInfo pi);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Type> <AsImplementedInterfaces>b__34(Type t);
    [CompilerGeneratedAttribute]
private static bool <GetImplementedInterfaces>b__35(Type i);
    [CompilerGeneratedAttribute]
private static Type <UsingConstructor>b__37(ParameterInfo p);
    [CompilerGeneratedAttribute]
private static bool <Except>b__3e(Type t);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.RegistrationExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InstanceRegistrationsAreSingleInstanceOnly { get; }
    internal static string MetadataAttributeNotFound { get; }
    internal static string MultipleMetadataAttributesSameType { get; }
    internal static string NoMatchingConstructorExists { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InstanceRegistrationsAreSingleInstanceOnly();
    internal static string get_MetadataAttributeNotFound();
    internal static string get_MultipleMetadataAttributesSameType();
    internal static string get_NoMatchingConstructorExists();
}
[ExtensionAttribute]
internal static class Autofac.ResolutionExtensions : object {
    private static IEnumerable`1<Parameter> NoParameters;
    private static ResolutionExtensions();
    [ExtensionAttribute]
public static TService InjectProperties(IComponentContext context, TService instance);
    [ExtensionAttribute]
public static TService InjectUnsetProperties(IComponentContext context, TService instance);
    [ExtensionAttribute]
public static TService ResolveNamed(IComponentContext context, string serviceName);
    [ExtensionAttribute]
public static TService ResolveNamed(IComponentContext context, string serviceName, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveNamed(IComponentContext context, string serviceName, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveKeyed(IComponentContext context, object serviceKey);
    [ExtensionAttribute]
public static TService ResolveKeyed(IComponentContext context, object serviceKey, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveKeyed(IComponentContext context, object serviceKey, Parameter[] parameters);
    [ExtensionAttribute]
public static TService Resolve(IComponentContext context);
    [ExtensionAttribute]
public static TService Resolve(IComponentContext context, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService Resolve(IComponentContext context, Parameter[] parameters);
    [ExtensionAttribute]
public static object Resolve(IComponentContext context, Type serviceType);
    [ExtensionAttribute]
public static object Resolve(IComponentContext context, Type serviceType, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object Resolve(IComponentContext context, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveNamed(IComponentContext context, string serviceName, Type serviceType);
    [ExtensionAttribute]
public static object ResolveNamed(IComponentContext context, string serviceName, Type serviceType, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveNamed(IComponentContext context, string serviceName, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveKeyed(IComponentContext context, object serviceKey, Type serviceType);
    [ExtensionAttribute]
public static object ResolveKeyed(IComponentContext context, object serviceKey, Type serviceType, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveKeyed(IComponentContext context, object serviceKey, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveService(IComponentContext context, Service service);
    [ExtensionAttribute]
public static object ResolveService(IComponentContext context, Service service, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveService(IComponentContext context, Service service, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveOptional(IComponentContext context);
    [ExtensionAttribute]
public static TService ResolveOptional(IComponentContext context, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveOptional(IComponentContext context, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveOptionalNamed(IComponentContext context, string serviceName);
    [ExtensionAttribute]
public static TService ResolveOptionalNamed(IComponentContext context, string serviceName, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveOptionalNamed(IComponentContext context, string serviceName, Parameter[] parameters);
    [ExtensionAttribute]
public static TService ResolveOptionalKeyed(IComponentContext context, object serviceKey);
    [ExtensionAttribute]
public static TService ResolveOptionalKeyed(IComponentContext context, object serviceKey, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static TService ResolveOptionalKeyed(IComponentContext context, object serviceKey, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveOptional(IComponentContext context, Type serviceType);
    [ExtensionAttribute]
public static object ResolveOptional(IComponentContext context, Type serviceType, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveOptional(IComponentContext context, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveOptionalService(IComponentContext context, Service service);
    [ExtensionAttribute]
public static object ResolveOptionalService(IComponentContext context, Service service, IEnumerable`1<Parameter> parameters);
    [ExtensionAttribute]
public static object ResolveOptionalService(IComponentContext context, Service service, Parameter[] parameters);
    [ExtensionAttribute]
public static bool IsRegistered(IComponentContext context);
    [ExtensionAttribute]
public static bool IsRegistered(IComponentContext context, Type serviceType);
    [ExtensionAttribute]
public static bool IsRegisteredWithName(IComponentContext context, string serviceName, Type serviceType);
    [ExtensionAttribute]
public static bool IsRegisteredWithName(IComponentContext context, string serviceName);
    [ExtensionAttribute]
public static bool IsRegisteredWithKey(IComponentContext context, object serviceKey, Type serviceType);
    [ExtensionAttribute]
public static bool IsRegisteredWithKey(IComponentContext context, object serviceKey);
    [ExtensionAttribute]
public static bool IsRegisteredService(IComponentContext context, Service service);
    [SuppressMessageAttribute("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]
[ExtensionAttribute]
public static bool TryResolveService(IComponentContext context, Service service, IEnumerable`1<Parameter> parameters, Object& instance);
    [SuppressMessageAttribute("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]
[ExtensionAttribute]
public static bool TryResolveService(IComponentContext context, Service service, Object& instance);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]
public static bool TryResolve(IComponentContext context, Type serviceType, Object& instance);
    [ExtensionAttribute]
public static bool TryResolve(IComponentContext context, T& instance);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]
public static bool TryResolveNamed(IComponentContext context, string serviceName, Type serviceType, Object& instance);
    [ExtensionAttribute]
[SuppressMessageAttribute("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]
public static bool TryResolveKeyed(IComponentContext context, object serviceKey, Type serviceType, Object& instance);
}
internal class Autofac.TypedParameter : ConstantParameter {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1721:PropertyNamesShouldNotMatchGetMethods")]
public Type Type { get; private set; }
    public TypedParameter(Type type, object value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public static TypedParameter From(T value);
}
[ExtensionAttribute]
internal static class Autofac.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsInNamespace(Type this, string namespace);
    [ExtensionAttribute]
public static bool IsInNamespaceOf(Type this);
    [ExtensionAttribute]
public static bool IsClosedTypeOf(Type this, Type openGeneric);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type this);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.TypeExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string NotOpenGenericType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_NotOpenGenericType();
}
[ExtensionAttribute]
internal static class Autofac.Util.AssemblyExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetLoadableTypes(Assembly assembly);
    [CompilerGeneratedAttribute]
private static bool <GetLoadableTypes>b__0(Type t);
}
internal class Autofac.Util.Disposable : object {
    private static int DisposedFlag;
    private int _isDisposed;
    protected bool IsDisposed { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly")]
public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected bool get_IsDisposed();
}
internal static class Autofac.Util.Enforce : object {
    public static T ArgumentNotNull(T value, string name);
    public static T ArgumentElementNotNull(T value, string name);
    public static T NotNull(T value);
    public static string ArgumentNotNullOrEmpty(string value, string description);
    public static void ArgumentTypeIsFunction(Type delegateType);
    [CompilerGeneratedAttribute]
private static bool <ArgumentElementNotNull>b__0(object v);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Autofac.Util.EnforceResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotBeEmpty { get; }
    internal static string CannotBeNull { get; }
    internal static string DelegateReturnsVoid { get; }
    internal static string ElementCannotBeNull { get; }
    internal static string NotDelegate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotBeEmpty();
    internal static string get_CannotBeNull();
    internal static string get_DelegateReturnsVoid();
    internal static string get_ElementCannotBeNull();
    internal static string get_NotDelegate();
}
[ExtensionAttribute]
internal static class Autofac.Util.ReflectionExtensions : object {
    [ExtensionAttribute]
public static bool TryGetDeclaringProperty(ParameterInfo pi, PropertyInfo& prop);
    public static PropertyInfo GetProperty(Expression`1<Func`2<TDeclaring, TProperty>> propertyAccessor);
    public static MethodInfo GetMethod(Expression`1<Action`1<TDeclaring>> methodCallExpression);
    public static ConstructorInfo GetConstructor(Expression`1<Func`1<TDeclaring>> constructorCallExpression);
    [ExtensionAttribute]
public static T GetCustomAttribute(MemberInfo element, bool inherit);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Autofac.Util.ReflectionExtensionsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ExpressionNotConstructorCall { get; }
    internal static string ExpressionNotMethodCall { get; }
    internal static string ExpressionNotPropertyAccessor { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ExpressionNotConstructorCall();
    internal static string get_ExpressionNotMethodCall();
    internal static string get_ExpressionNotPropertyAccessor();
}
internal class Autofac.Util.ReleaseAction : Disposable {
    private Action _action;
    public ReleaseAction(Action action);
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
internal class Autofac.Util.SafeDictionary`2 : object {
    private object _syncLock;
    private Dictionary`2<TKey, TValue> _dictionary;
    unknown TValue Item {public set; }
    public IEnumerable`1<TKey> Keys { get; }
    public void set_Item(TKey key, TValue value);
    public IEnumerable`1<TKey> get_Keys();
    public bool TryGetValue(TKey key, TValue& value);
    public bool Remove(TKey key);
    public void Clear();
}
[ExtensionAttribute]
internal static class Autofac.Util.SequenceExtensions : object {
    [ExtensionAttribute]
public static string JoinWith(IEnumerable`1<string> elements, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<T> Append(IEnumerable`1<T> sequence, T trailingItem);
    [ExtensionAttribute]
public static IEnumerable`1<T> Prepend(IEnumerable`1<T> sequence, T leadingItem);
    [ExtensionAttribute]
public static void AddRange(ICollection`1<T> collection, IEnumerable`1<T> items);
}
internal static class Autofac.Util.Traverse : object {
    public static IEnumerable`1<T> Across(T first, Func`2<T, T> next);
}
[ExtensionAttribute]
internal static class Autofac.Util.TypeExtensions : object {
    public static Type[] EmptyTypes;
    private static Type ReadOnlyCollectionType;
    private static Type ReadOnlyListType;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Type> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Type> CS$<>9__CachedAnonymousMethodDelegated;
    private static TypeExtensions();
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesThatClose(Type this, Type openGeneric);
    private static IEnumerable`1<Type> FindAssignableTypesThatClose(Type candidateType, Type openGenericServiceType);
    private static IEnumerable`1<Type> TypesAssignableFrom(Type candidateType);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinedBy(Type this, Type openGeneric);
    [ExtensionAttribute]
public static bool IsClosedTypeOf(Type this, Type openGeneric);
    [ExtensionAttribute]
public static bool IsDelegate(Type type);
    [ExtensionAttribute]
public static Type FunctionReturnType(Type type);
    [ExtensionAttribute]
public static bool IsCompatibleWithGenericParameterConstraints(Type genericTypeDefinition, Type[] parameters);
    private static bool ParameterCompatibleWithTypeConstraint(Type parameter, Type constraint);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031")]
private static bool ParameterEqualsConstraint(Type parameter, Type constraint);
    [ExtensionAttribute]
public static bool IsGenericEnumerableInterfaceType(Type type);
    [ExtensionAttribute]
public static bool IsGenericListOrCollectionInterfaceType(Type type);
    [CompilerGeneratedAttribute]
private static Type <TypesAssignableFrom>b__3(Type t);
    [CompilerGeneratedAttribute]
private static Type <ParameterCompatibleWithTypeConstraint>b__b(Type p);
}
internal class Autofac.Util.ValidatedNotNullAttribute : Attribute {
}
internal static class IdentityModel.Base64Url : object {
    public static string Encode(Byte[] arg);
    public static Byte[] Decode(string arg);
}
internal class IdentityModel.ClaimComparer : object {
    public sealed virtual bool Equals(Claim x, Claim y);
    public sealed virtual int GetHashCode(Claim claim);
}
internal enum IdentityModel.Client.AuthenticationStyle : Enum {
    public int value__;
    public static AuthenticationStyle BasicAuthentication;
    public static AuthenticationStyle PostValues;
    public static AuthenticationStyle None;
}
internal class IdentityModel.Client.AuthorizeRequest : object {
    private Uri _authorizeEndpoint;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public AuthorizeRequest(Uri authorizeEndpoint);
    public AuthorizeRequest(string authorizeEndpoint);
    public string Create(IDictionary`2<string, string> values);
    [CompilerGeneratedAttribute]
private static string <Create>b__0(KeyValuePair`2<string, string> kvp);
}
[ExtensionAttribute]
internal static class IdentityModel.Client.AuthorizeRequestExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [ExtensionAttribute]
public static string Create(AuthorizeRequest request, object values);
    [ExtensionAttribute]
public static string CreateAuthorizeUrl(AuthorizeRequest request, string clientId, string responseType, string scope, string redirectUri, string state, string nonce, string loginHint, string acrValues, string prompt, string responseMode, string codeChallenge, string codeChallengeMethod, object extra);
    private static Dictionary`2<string, string> ObjectToDictionary(object values);
    private static Dictionary`2<string, string> Merge(Dictionary`2<string, string> explicitValues, Dictionary`2<string, string> additionalValues);
    [CompilerGeneratedAttribute]
private static string <Merge>b__2(KeyValuePair`2<string, string> final);
    [CompilerGeneratedAttribute]
private static string <Merge>b__3(KeyValuePair`2<string, string> final);
}
internal class IdentityModel.Client.AuthorizeResponse : object {
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    public string Raw { get; protected set; }
    public Dictionary`2<string, string> Values { get; protected set; }
    public string Code { get; }
    public string AccessToken { get; }
    public string IdentityToken { get; }
    public bool IsError { get; internal set; }
    public string Error { get; }
    public long ExpiresIn { get; }
    public string Scope { get; }
    public string TokenType { get; }
    public string State { get; }
    public AuthorizeResponse(string raw);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
protected void set_Raw(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Values();
    [CompilerGeneratedAttribute]
protected void set_Values(Dictionary`2<string, string> value);
    public string get_Code();
    public string get_AccessToken();
    public string get_IdentityToken();
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
internal void set_IsError(bool value);
    public string get_Error();
    public long get_ExpiresIn();
    public string get_Scope();
    public string get_TokenType();
    public string get_State();
    private void ParseRaw();
    private string TryGet(string type);
}
internal class IdentityModel.Client.IntrospectionClient : object {
    private HttpClient _client;
    private string _clientId;
    unknown TimeSpan Timeout {public set; }
    public IntrospectionClient(string endpoint, string clientId, string clientSecret, HttpMessageHandler innerHttpMessageHandler);
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("IdentityModel.Client.IntrospectionClient/<SendAsync>d__3")]
[DebuggerStepThroughAttribute]
public Task`1<IntrospectionResponse> SendAsync(IntrospectionRequest request);
}
internal class IdentityModel.Client.IntrospectionRequest : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenTypeHint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    public string Token { get; public set; }
    public string TokenTypeHint { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_TokenTypeHint();
    [CompilerGeneratedAttribute]
public void set_TokenTypeHint(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
}
internal class IdentityModel.Client.IntrospectionResponse : object {
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<string, string>> <Claims>k__BackingField;
    public string Raw { get; public set; }
    public bool IsError { get; public set; }
    public string Error { get; public set; }
    public bool IsActive { get; public set; }
    public IEnumerable`1<Tuple`2<string, string>> Claims { get; public set; }
    public IntrospectionResponse(string raw);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(string value);
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
public void set_IsError(bool value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Tuple`2<string, string>> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IEnumerable`1<Tuple`2<string, string>> value);
}
[ObsoleteAttribute("Use OidcConstants instead. Will be removed in next major version.")]
internal static class IdentityModel.Client.OAuth2Constants : object {
    public static string GrantType;
    public static string UserName;
    public static string Scope;
    public static string Assertion;
    public static string Password;
    public static string Code;
    public static string RedirectUri;
    public static string AccessToken;
    public static string ExpiresIn;
    public static string TokenType;
    public static string RefreshToken;
    public static string IdentityToken;
    public static string ClientId;
    public static string ClientSecret;
    public static string ResponseType;
    public static string State;
    public static string Nonce;
    public static string LoginHint;
    public static string AcrValues;
    public static string Error;
    public static string ResponseMode;
}
[ExtensionAttribute]
internal static class IdentityModel.Client.ProtocolHelperExtensions : object {
    [ExtensionAttribute]
public static string ToCodeChallenge(string input);
}
internal class IdentityModel.Client.RefeshTokenHandler : DelegatingHandler {
    private string _accessToken;
    private string _refreshToken;
    private TokenClient _tokenClient;
    private ReaderWriterLockSlim _lock;
    private int _lockTimeout;
    public string AccessToken { get; }
    public string RefreshToken { get; }
    public RefeshTokenHandler(string tokenEndpoint, string clientId, string clientSecret, string refreshToken, string accessToken, HttpMessageHandler innerHandler);
    public RefeshTokenHandler(TokenClient client, string refreshToken, string accessToken, HttpMessageHandler innerHandler);
    public string get_AccessToken();
    public string get_RefreshToken();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityModel.Client.RefeshTokenHandler/<SendAsync>d__0")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityModel.Client.RefeshTokenHandler/<RefreshTokensAsync>d__7")]
private Task`1<bool> RefreshTokensAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethod5(HttpRequestMessage , CancellationToken );
}
internal class IdentityModel.Client.TokenClient : object {
    protected HttpClient _client;
    [CompilerGeneratedAttribute]
private AuthenticationStyle <AuthenticationStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    public AuthenticationStyle AuthenticationStyle { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    unknown TimeSpan Timeout {public set; }
    public TokenClient(string address);
    public TokenClient(string address, HttpMessageHandler innerHttpMessageHandler);
    public TokenClient(string address, string clientId, string clientSecret, AuthenticationStyle style);
    public TokenClient(string address, string clientId, AuthenticationStyle style);
    public TokenClient(string address, string clientId, HttpMessageHandler innerHttpMessageHandler);
    public TokenClient(string address, string clientId, string clientSecret, HttpMessageHandler innerHttpMessageHandler, AuthenticationStyle style);
    [CompilerGeneratedAttribute]
public AuthenticationStyle get_AuthenticationStyle();
    [CompilerGeneratedAttribute]
public void set_AuthenticationStyle(AuthenticationStyle value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("IdentityModel.Client.TokenClient/<RequestAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<TokenResponse> RequestAsync(IDictionary`2<string, string> form, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class IdentityModel.Client.TokenClientExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegated;
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestClientCredentialsAsync(TokenClient client, string scope, object extra, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestResourceOwnerPasswordAsync(TokenClient client, string userName, string password, string scope, object extra, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestAuthorizationCodeAsync(TokenClient client, string code, string redirectUri, string codeVerifier, object extra, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestAuthorizationCodePopAsync(TokenClient client, string code, string redirectUri, string codeVerifier, string algorithm, string key, object extra, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestRefreshTokenAsync(TokenClient client, string refreshToken, object extra, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestRefreshTokenPopAsync(TokenClient client, string refreshToken, string algorithm, string key, object extra, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestAssertionAsync(TokenClient client, string assertionType, string assertion, string scope, object extra, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestCustomGrantAsync(TokenClient client, string grantType, string scope, object extra, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenResponse> RequestCustomAsync(TokenClient client, object values, CancellationToken cancellationToken);
    private static Dictionary`2<string, string> Merge(TokenClient client, Dictionary`2<string, string> explicitValues, object extra);
    private static Dictionary`2<string, string> ObjectToDictionary(object values);
    [CompilerGeneratedAttribute]
private static string <Merge>b__9(KeyValuePair`2<string, string> final);
    [CompilerGeneratedAttribute]
private static string <Merge>b__a(KeyValuePair`2<string, string> final);
}
internal class IdentityModel.Client.TokenResponse : object {
    private bool _isHttpError;
    private HttpStatusCode _httpErrorstatusCode;
    private string _httpErrorReason;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Json>k__BackingField;
    public string Raw { get; protected set; }
    public JObject Json { get; protected set; }
    public bool IsHttpError { get; }
    public HttpStatusCode HttpErrorStatusCode { get; }
    public string HttpErrorReason { get; }
    public string AccessToken { get; }
    public string IdentityToken { get; }
    public string Error { get; }
    public bool IsError { get; }
    public long ExpiresIn { get; }
    public string TokenType { get; }
    public string RefreshToken { get; }
    public TokenResponse(string raw);
    public TokenResponse(HttpStatusCode statusCode, string reason);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
protected void set_Raw(string value);
    [CompilerGeneratedAttribute]
public JObject get_Json();
    [CompilerGeneratedAttribute]
protected void set_Json(JObject value);
    public bool get_IsHttpError();
    public HttpStatusCode get_HttpErrorStatusCode();
    public string get_HttpErrorReason();
    public string get_AccessToken();
    public string get_IdentityToken();
    public string get_Error();
    public bool get_IsError();
    public long get_ExpiresIn();
    public string get_TokenType();
    public string get_RefreshToken();
    protected virtual string GetStringOrNull(string name);
    protected virtual long GetLongOrNull(string name);
}
internal class IdentityModel.Client.TokenRevocationClient : object {
    protected HttpClient _client;
    [CompilerGeneratedAttribute]
private AuthenticationStyle <AuthenticationStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    public AuthenticationStyle AuthenticationStyle { get; public set; }
    public string ClientId { get; public set; }
    public string ClientSecret { get; public set; }
    unknown TimeSpan Timeout {public set; }
    public TokenRevocationClient(string address);
    public TokenRevocationClient(string address, HttpMessageHandler innerHttpMessageHandler);
    public TokenRevocationClient(string address, string clientId, string clientSecret, AuthenticationStyle style);
    public TokenRevocationClient(string address, string clientId, string clientSecret, HttpMessageHandler innerHttpMessageHandler, AuthenticationStyle style);
    [CompilerGeneratedAttribute]
public AuthenticationStyle get_AuthenticationStyle();
    [CompilerGeneratedAttribute]
public void set_AuthenticationStyle(AuthenticationStyle value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("IdentityModel.Client.TokenRevocationClient/<RevokeAsync>d__2")]
[DebuggerStepThroughAttribute]
public virtual Task`1<TokenRevocationResponse> RevokeAsync(string token, string token_type_hint, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class IdentityModel.Client.TokenRevocationClientExtensions : object {
    [ExtensionAttribute]
public static Task`1<TokenRevocationResponse> RevokeAccessTokenAsync(TokenRevocationClient client, string token, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TokenRevocationResponse> RevokeRefreshTokenAsync(TokenRevocationClient client, string token, CancellationToken cancellationToken);
}
internal class IdentityModel.Client.TokenRevocationResponse : object {
    private bool _isHttpError;
    private HttpStatusCode _httpErrorstatusCode;
    private string _httpErrorReason;
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Json>k__BackingField;
    public string Raw { get; protected set; }
    public JObject Json { get; protected set; }
    public bool IsHttpError { get; }
    public HttpStatusCode HttpErrorStatusCode { get; }
    public string HttpErrorReason { get; }
    public string Error { get; }
    public string ErrorDescription { get; }
    public bool IsError { get; }
    public TokenRevocationResponse(string raw);
    public TokenRevocationResponse(HttpStatusCode statusCode, string reason);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
protected void set_Raw(string value);
    [CompilerGeneratedAttribute]
public JObject get_Json();
    [CompilerGeneratedAttribute]
protected void set_Json(JObject value);
    public bool get_IsHttpError();
    public HttpStatusCode get_HttpErrorStatusCode();
    public string get_HttpErrorReason();
    public string get_Error();
    public string get_ErrorDescription();
    public bool get_IsError();
    protected virtual string GetStringOrNull(string name);
}
internal class IdentityModel.Client.UserInfoClient : object {
    private HttpClient _client;
    unknown TimeSpan Timeout {public set; }
    public UserInfoClient(Uri endpoint, string token);
    public UserInfoClient(Uri endpoint, string token, HttpMessageHandler innerHttpMessageHandler);
    public void set_Timeout(TimeSpan value);
    [AsyncStateMachineAttribute("IdentityModel.Client.UserInfoClient/<GetAsync>d__1")]
[DebuggerStepThroughAttribute]
public Task`1<UserInfoResponse> GetAsync(CancellationToken cancellationToken);
}
internal class IdentityModel.Client.UserInfoResponse : object {
    [CompilerGeneratedAttribute]
private string <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <JsonObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<string, string>> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHttpError>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <HttpErrorStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpErrorReason>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string Raw { get; private set; }
    public JObject JsonObject { get; private set; }
    public IEnumerable`1<Tuple`2<string, string>> Claims { get; public set; }
    public bool IsHttpError { get; private set; }
    public HttpStatusCode HttpErrorStatusCode { get; private set; }
    public string HttpErrorReason { get; private set; }
    public bool IsError { get; private set; }
    public string ErrorMessage { get; public set; }
    public UserInfoResponse(string raw);
    public UserInfoResponse(HttpStatusCode statusCode, string httpErrorReason);
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
private void set_Raw(string value);
    [CompilerGeneratedAttribute]
public JObject get_JsonObject();
    [CompilerGeneratedAttribute]
private void set_JsonObject(JObject value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Tuple`2<string, string>> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IEnumerable`1<Tuple`2<string, string>> value);
    [CompilerGeneratedAttribute]
public bool get_IsHttpError();
    [CompilerGeneratedAttribute]
private void set_IsHttpError(bool value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_HttpErrorStatusCode();
    [CompilerGeneratedAttribute]
private void set_HttpErrorStatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public string get_HttpErrorReason();
    [CompilerGeneratedAttribute]
private void set_HttpErrorReason(string value);
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
private void set_IsError(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
[ExtensionAttribute]
internal static class IdentityModel.Client.UserInfoResponseExtensions : object {
    [ExtensionAttribute]
public static ClaimsIdentity GetClaimsIdentity(UserInfoResponse response);
}
internal static class IdentityModel.Constants.Algorithms : object {
    public static string HmacSha256Signature;
    public static string HmacSha384Signature;
    public static string HmacSha512Signature;
    public static string Sha256Digest;
    public static string Sha384Digest;
    public static string Sha512Digest;
}
internal static class IdentityModel.Constants.SamlNameIdentifierFormats : object {
    public static string EmailAddressString;
    public static string EncryptedString;
    public static string EntityString;
    public static string KerberosString;
    public static string PersistentString;
    public static string TransientString;
    public static string UnspecifiedString;
    public static string WindowsDomainQualifiedNameString;
    public static string X509SubjectNameString;
}
internal static class IdentityModel.Constants.TokenTypes : object {
    public static string Kerberos;
    public static string OasisWssSaml11TokenProfile11;
    public static string OasisWssSaml2TokenProfile11;
    public static string Rsa;
    public static string Saml11TokenProfile11;
    public static string Saml2TokenProfile11;
    public static string UserName;
    public static string X509Certificate;
    public static string SimpleWebToken;
    public static string JsonWebToken;
}
internal class IdentityModel.CryptoRandom : Random {
    private RNGCryptoServiceProvider _rng;
    private Byte[] _uint32Buffer;
    public CryptoRandom(int ignoredSeed);
    public static Byte[] CreateRandomKey(int length);
    public static string CreateRandomKeyString(int length);
    public static string CreateUniqueId(int length);
    private static string ByteArrayToString(Byte[] ba);
    public virtual int Next();
    public virtual int Next(int maxValue);
    public virtual int Next(int minValue, int maxValue);
    public virtual double NextDouble();
    public virtual void NextBytes(Byte[] buffer);
}
[ExtensionAttribute]
internal static class IdentityModel.EpochTimeExtensions : object {
    [ExtensionAttribute]
public static long ToEpochTime(DateTime dateTime);
    [ExtensionAttribute]
public static long ToEpochTime(DateTimeOffset dateTime);
    [ExtensionAttribute]
public static DateTime ToDateTimeFromEpoch(long intDate);
    [ExtensionAttribute]
public static DateTimeOffset ToDateTimeOffsetFromEpoch(long intDate);
}
[ExtensionAttribute]
internal static class IdentityModel.Extensions.ConsoleExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void ConsoleGreen(string text);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void ConsoleRed(string text);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static void ConsoleYellow(string text);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void ColoredWriteLine(string text, ConsoleColor color);
}
internal enum IdentityModel.Extensions.HashStringEncoding : Enum {
    public int value__;
    public static HashStringEncoding Base64;
    public static HashStringEncoding Base64Url;
}
[ExtensionAttribute]
internal static class IdentityModel.Extensions.HashStringExtensions : object {
    [ExtensionAttribute]
public static string ToSha256(string input, HashStringEncoding encoding);
    [ExtensionAttribute]
public static string ToSha512(string input, HashStringEncoding encoding);
    private static string Encode(Byte[] hash, HashStringEncoding encoding);
}
[ExtensionAttribute]
internal static class IdentityModel.Extensions.SecurityTokensExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<ClaimsIdentity, ClaimsIdentity> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static SecurityToken ToSecurityToken(GenericXmlSecurityToken token);
    [ExtensionAttribute]
public static SecurityToken ToSecurityToken(GenericXmlSecurityToken token, X509Certificate2 decryptionCertificate);
    [ExtensionAttribute]
public static SecurityToken ToSecurityToken(GenericXmlSecurityToken token, SecurityTokenHandlerCollection handler);
    [ExtensionAttribute]
public static string ToTokenXmlString(GenericXmlSecurityToken token);
    [ExtensionAttribute]
public static string ToTokenXmlString(SecurityToken token);
    [ExtensionAttribute]
public static string ToTokenXmlString(SecurityToken token, SecurityTokenHandlerCollection handler);
    [ExtensionAttribute]
public static ClaimsPrincipal ToClaimsPrincipal(SecurityToken token, X509Certificate2 signingCertificate);
    [ExtensionAttribute]
public static ClaimsPrincipal ToClaimsPrincipal(SecurityToken token, X509Certificate2 signingCertificate, string audienceUri);
    [ExtensionAttribute]
public static ClaimsPrincipal ToClaimsPrincipal(SecurityToken token, SecurityTokenHandlerCollection handler);
    private static SecurityTokenHandlerConfiguration CreateStandardConfiguration(X509Certificate2 signingCertificate);
    [ExtensionAttribute]
private static IssuerNameRegistry CreateIssuerNameRegistry(X509Certificate2 certificate);
    [ExtensionAttribute]
private static SecurityTokenResolver CreateSecurityTokenResolver(X509Certificate2 certificate);
    [ExtensionAttribute]
private static SecurityTokenHandlerCollection CreateDefaultHandlerCollection(SecurityTokenHandlerConfiguration configuration);
    [CompilerGeneratedAttribute]
private static ClaimsIdentity <ToClaimsPrincipal>b__0(ClaimsIdentity identity);
}
internal class IdentityModel.Extensions.XmlConverter : object {
    private StringBuilder _xmlTextBuilder;
    private XmlWriter _writer;
    public XmlConverter(XNode e);
    public XmlConverter(XmlNode e);
    public XElement CreateXElement();
    public XDocument CreateXDocument();
    public XmlElement CreateXmlElement();
    public XmlDocument CreateXmlDocument();
}
[ExtensionAttribute]
internal static class IdentityModel.Extensions.XmlExtensions : object {
    [ExtensionAttribute]
public static XmlDocument ToXmlDocument(XDocument document);
    [ExtensionAttribute]
public static XmlElement ToXmlElement(XElement element);
    [ExtensionAttribute]
public static XDocument ToXDocument(XmlDocument document);
    [ExtensionAttribute]
public static XElement ToXElement(XmlElement element);
    [ExtensionAttribute]
public static string AsString(XmlReader reader);
    [ExtensionAttribute]
public static XmlReader AsXmlReader(string input);
    [ExtensionAttribute]
public static XmlReader AsXmlReader(string input, bool isInteractive);
}
internal static class IdentityModel.Identity : object {
    public static ClaimsIdentity Anonymous { get; }
    public static ClaimsIdentity get_Anonymous();
    public static ClaimsIdentity Create(string authenticationType, Claim[] claims);
    public static ClaimsIdentity CreateFromCertificate(X509Certificate2 certificate, string authenticationType, bool includeAllClaims);
}
internal static class IdentityModel.Jwt.JsonWebAlgorithmsKeyTypes : object {
    public static string EllipticCurve;
    public static string RSA;
    public static string Octet;
}
[JsonObjectAttribute]
internal class IdentityModel.Jwt.JsonWebKey : object {
    private IList`1<string> _certificateClauses;
    private IList`1<string> _keyops;
    [CompilerGeneratedAttribute]
private string <Alg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Crv>k__BackingField;
    [CompilerGeneratedAttribute]
private string <D>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DQ>k__BackingField;
    [CompilerGeneratedAttribute]
private string <E>k__BackingField;
    [CompilerGeneratedAttribute]
private string <K>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <N>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Oth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <P>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Q>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QI>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Use>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X5t>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X5tS256>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X5u>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Y>k__BackingField;
    [JsonPropertyAttribute]
public string Alg { get; public set; }
    [JsonPropertyAttribute]
public string Crv { get; public set; }
    [JsonPropertyAttribute]
public string D { get; public set; }
    [JsonPropertyAttribute]
public string DP { get; public set; }
    [JsonPropertyAttribute]
public string DQ { get; public set; }
    [JsonPropertyAttribute]
public string E { get; public set; }
    [JsonPropertyAttribute]
public string K { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> KeyOps { get; public set; }
    [JsonPropertyAttribute]
public string Kid { get; public set; }
    [JsonPropertyAttribute]
public string Kty { get; public set; }
    [JsonPropertyAttribute]
public string N { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> Oth { get; public set; }
    [JsonPropertyAttribute]
public string P { get; public set; }
    [JsonPropertyAttribute]
public string Q { get; public set; }
    [JsonPropertyAttribute]
public string QI { get; public set; }
    [JsonPropertyAttribute]
public string Use { get; public set; }
    [JsonPropertyAttribute]
public string X { get; public set; }
    [JsonPropertyAttribute]
public IList`1<string> X5c { get; public set; }
    [JsonPropertyAttribute]
public string X5t { get; public set; }
    [JsonPropertyAttribute]
public string X5tS256 { get; public set; }
    [JsonPropertyAttribute]
public string X5u { get; public set; }
    [JsonPropertyAttribute]
public string Y { get; public set; }
    public int KeySize { get; }
    public bool HasPrivateKey { get; }
    public JsonWebKey(string json);
    private void Copy(JsonWebKey key);
    [CompilerGeneratedAttribute]
public string get_Alg();
    [CompilerGeneratedAttribute]
public void set_Alg(string value);
    [CompilerGeneratedAttribute]
public string get_Crv();
    [CompilerGeneratedAttribute]
public void set_Crv(string value);
    [CompilerGeneratedAttribute]
public string get_D();
    [CompilerGeneratedAttribute]
public void set_D(string value);
    [CompilerGeneratedAttribute]
public string get_DP();
    [CompilerGeneratedAttribute]
public void set_DP(string value);
    [CompilerGeneratedAttribute]
public string get_DQ();
    [CompilerGeneratedAttribute]
public void set_DQ(string value);
    [CompilerGeneratedAttribute]
public string get_E();
    [CompilerGeneratedAttribute]
public void set_E(string value);
    [CompilerGeneratedAttribute]
public string get_K();
    [CompilerGeneratedAttribute]
public void set_K(string value);
    public IList`1<string> get_KeyOps();
    public void set_KeyOps(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Kid();
    [CompilerGeneratedAttribute]
public void set_Kid(string value);
    [CompilerGeneratedAttribute]
public string get_Kty();
    [CompilerGeneratedAttribute]
public void set_Kty(string value);
    [CompilerGeneratedAttribute]
public string get_N();
    [CompilerGeneratedAttribute]
public void set_N(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Oth();
    [CompilerGeneratedAttribute]
public void set_Oth(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_P();
    [CompilerGeneratedAttribute]
public void set_P(string value);
    [CompilerGeneratedAttribute]
public string get_Q();
    [CompilerGeneratedAttribute]
public void set_Q(string value);
    [CompilerGeneratedAttribute]
public string get_QI();
    [CompilerGeneratedAttribute]
public void set_QI(string value);
    [CompilerGeneratedAttribute]
public string get_Use();
    [CompilerGeneratedAttribute]
public void set_Use(string value);
    [CompilerGeneratedAttribute]
public string get_X();
    [CompilerGeneratedAttribute]
public void set_X(string value);
    public IList`1<string> get_X5c();
    public void set_X5c(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_X5t();
    [CompilerGeneratedAttribute]
public void set_X5t(string value);
    [CompilerGeneratedAttribute]
public string get_X5tS256();
    [CompilerGeneratedAttribute]
public void set_X5tS256(string value);
    [CompilerGeneratedAttribute]
public string get_X5u();
    [CompilerGeneratedAttribute]
public void set_X5u(string value);
    [CompilerGeneratedAttribute]
public string get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(string value);
    public int get_KeySize();
    public bool get_HasPrivateKey();
}
[ExtensionAttribute]
internal static class IdentityModel.Jwt.JsonWebKeyExtensions : object {
    [ExtensionAttribute]
public static string ToJwkString(JsonWebKey key);
}
internal static class IdentityModel.Jwt.JsonWebKeyParameterNames : object {
    public static string Alg;
    public static string Crv;
    public static string D;
    public static string DP;
    public static string DQ;
    public static string E;
    public static string K;
    public static string KeyOps;
    public static string Keys;
    public static string Kid;
    public static string Kty;
    public static string N;
    public static string Oth;
    public static string P;
    public static string Q;
    public static string R;
    public static string T;
    public static string QI;
    public static string Use;
    public static string X5c;
    public static string X5t;
    public static string X5tS256;
    public static string X5u;
    public static string X;
    public static string Y;
}
internal class IdentityModel.Jwt.JsonWebKeySet : object {
    private List`1<JsonWebKey> _keys;
    public IList`1<JsonWebKey> Keys { get; }
    public JsonWebKeySet(string json);
    public IList`1<JsonWebKey> get_Keys();
}
[ExtensionAttribute]
internal static class IdentityModel.Jwt.JwkNetExtensions : object {
    [ExtensionAttribute]
public static JsonWebKey ToJsonWebKey(RSACryptoServiceProvider provider, string alg, string kid);
    public static RSACryptoServiceProvider CreateProvider(int keySize);
}
internal static class IdentityModel.JwtClaimTypes : object {
    public static string Subject;
    public static string Name;
    public static string GivenName;
    public static string FamilyName;
    public static string MiddleName;
    public static string NickName;
    public static string PreferredUserName;
    public static string Profile;
    public static string Picture;
    public static string WebSite;
    public static string Email;
    public static string EmailVerified;
    public static string Gender;
    public static string BirthDate;
    public static string ZoneInfo;
    public static string Locale;
    public static string PhoneNumber;
    public static string PhoneNumberVerified;
    public static string Address;
    public static string Audience;
    public static string Issuer;
    public static string NotBefore;
    public static string Expiration;
    public static string UpdatedAt;
    public static string IssuedAt;
    public static string AuthenticationMethod;
    public static string SessionId;
    public static string AuthenticationContextClassReference;
    public static string AuthenticationTime;
    public static string AuthorizedParty;
    public static string AccessTokenHash;
    public static string AuthorizationCodeHash;
    public static string Nonce;
    public static string JwtId;
    public static string ClientId;
    public static string Scope;
    public static string Id;
    public static string IdentityProvider;
    public static string Role;
    public static string ReferenceTokenId;
}
internal static class IdentityModel.OidcConstants : object {
}
internal static class IdentityModel.Principal : object {
    public static ClaimsPrincipal Anonymous { get; }
    public static ClaimsPrincipal get_Anonymous();
    public static ClaimsPrincipal Create(string authenticationType, Claim[] claims);
    public static ClaimsPrincipal CreateFromCertificate(X509Certificate2 certificate, string authenticationType, bool includeAllClaims);
}
internal static class IdentityModel.TimeConstantComparer : object {
    public static bool IsEqual(string s1, string s2);
}
internal static class IdentityModel.Tokens.AuthenticationInstantClaim : object {
    public static Claim Now { get; }
    public static Claim get_Now();
}
internal static class IdentityModel.Tokens.DateTimeFormats : object {
    public static String[] Accepted;
    public static string Generated;
    private static DateTimeFormats();
}
internal class IdentityModel.Tokens.GenericUserNameSecurityTokenHandler : UserNameSecurityTokenHandler {
    [CompilerGeneratedAttribute]
private ValidateUserNameCredentialDelegate <ValidateUserNameCredential>k__BackingField;
    public ValidateUserNameCredentialDelegate ValidateUserNameCredential { get; public set; }
    public bool CanValidateToken { get; }
    public GenericUserNameSecurityTokenHandler(ValidateUserNameCredentialDelegate validateUserNameCredential);
    [CompilerGeneratedAttribute]
public ValidateUserNameCredentialDelegate get_ValidateUserNameCredential();
    [CompilerGeneratedAttribute]
public void set_ValidateUserNameCredential(ValidateUserNameCredentialDelegate value);
    protected virtual bool ValidateUserNameCredentialCore(string userName, string password);
    public virtual ReadOnlyCollection`1<ClaimsIdentity> ValidateToken(SecurityToken token);
    public virtual bool get_CanValidateToken();
}
internal class IdentityModel.Tokens.HmacSigningCredentials : SigningCredentials {
    public HmacSigningCredentials(string base64EncodedKey);
    public HmacSigningCredentials(Byte[] key);
    protected static string CreateSignatureAlgorithm(Byte[] key);
    protected static string CreateDigestAlgorithm(Byte[] key);
}
internal class IdentityModel.Tokens.SimpleSecurityToken : WrappedSecurityToken`1<string> {
    public SimpleSecurityToken(string token);
}
internal class IdentityModel.Tokens.SimpleSecurityTokenHandler : SecurityTokenHandler {
    private String[] _identifier;
    [CompilerGeneratedAttribute]
private ValidateTokenDelegate <Validator>k__BackingField;
    public ValidateTokenDelegate Validator { get; public set; }
    public Type TokenType { get; }
    public SimpleSecurityTokenHandler(string identifier);
    public SimpleSecurityTokenHandler(ValidateTokenDelegate validator);
    public SimpleSecurityTokenHandler(string identifier, ValidateTokenDelegate validator);
    [CompilerGeneratedAttribute]
public ValidateTokenDelegate get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(ValidateTokenDelegate value);
    public virtual SecurityToken ReadToken(string tokenString);
    public virtual ReadOnlyCollection`1<ClaimsIdentity> ValidateToken(SecurityToken token);
    public virtual string WriteToken(SecurityToken token);
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual Type get_TokenType();
}
internal class IdentityModel.Tokens.WrappedSecurityToken`1 : SecurityToken {
    private T _token;
    public T Token { get; }
    public string Id { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public WrappedSecurityToken`1(T token);
    public T get_Token();
    public virtual string get_Id();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
}
internal static class IdentityModel.X509 : object {
    public static X509CertificatesLocation CurrentUser { get; }
    public static X509CertificatesLocation LocalMachine { get; }
    public static X509CertificatesLocation get_CurrentUser();
    public static X509CertificatesLocation get_LocalMachine();
}
[EditorBrowsableAttribute("1")]
internal class IdentityModel.X509CertificatesFinder : object {
    private StoreLocation _location;
    private StoreName _name;
    private X509FindType _findType;
    public X509CertificatesFinder(StoreLocation location, StoreName name, X509FindType findType);
    public IEnumerable`1<X509Certificate2> Find(object findValue, bool validOnly);
}
[EditorBrowsableAttribute("1")]
internal class IdentityModel.X509CertificatesLocation : object {
    private StoreLocation _location;
    public X509CertificatesName My { get; }
    public X509CertificatesName AddressBook { get; }
    public X509CertificatesName TrustedPeople { get; }
    public X509CertificatesName TrustedPublisher { get; }
    public X509CertificatesName CertificateAuthority { get; }
    public X509CertificatesLocation(StoreLocation location);
    public X509CertificatesName get_My();
    public X509CertificatesName get_AddressBook();
    public X509CertificatesName get_TrustedPeople();
    public X509CertificatesName get_TrustedPublisher();
    public X509CertificatesName get_CertificateAuthority();
}
[EditorBrowsableAttribute("1")]
internal class IdentityModel.X509CertificatesName : object {
    private StoreLocation _location;
    private StoreName _name;
    public X509CertificatesFinder Thumbprint { get; }
    public X509CertificatesFinder SubjectDistinguishedName { get; }
    public X509CertificatesFinder SerialNumber { get; }
    public X509CertificatesFinder IssuerName { get; }
    public X509CertificatesName(StoreLocation location, StoreName name);
    public X509CertificatesFinder get_Thumbprint();
    public X509CertificatesFinder get_SubjectDistinguishedName();
    public X509CertificatesFinder get_SerialNumber();
    public X509CertificatesFinder get_IssuerName();
}
public class IdentityServer3.Core.Configuration.AuthenticationOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableLocalLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLoginHint>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieOptions <CookieOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LoginPageLink> <LoginPageLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireSignOutPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSignOutPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAutoCallbackForFederatedSignout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePostSignOutAutoRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PostSignOutAutoRedirectDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireAuthenticatedUserForSignOutMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RememberLastUsername>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IAppBuilder, string> <IdentityProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SignInMessageThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvalidSignInRedirectUrl>k__BackingField;
    public bool EnableLocalLogin { get; public set; }
    public bool EnableLoginHint { get; public set; }
    public CookieOptions CookieOptions { get; public set; }
    public IEnumerable`1<LoginPageLink> LoginPageLinks { get; public set; }
    public bool RequireSignOutPrompt { get; public set; }
    public bool EnableSignOutPrompt { get; public set; }
    public bool EnableAutoCallbackForFederatedSignout { get; public set; }
    public bool EnablePostSignOutAutoRedirect { get; public set; }
    public int PostSignOutAutoRedirectDelay { get; public set; }
    public bool RequireAuthenticatedUserForSignOutMessage { get; public set; }
    public bool RememberLastUsername { get; public set; }
    public Action`2<IAppBuilder, string> IdentityProviders { get; public set; }
    public int SignInMessageThreshold { get; public set; }
    public string InvalidSignInRedirectUrl { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableLocalLogin();
    [CompilerGeneratedAttribute]
public void set_EnableLocalLogin(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableLoginHint();
    [CompilerGeneratedAttribute]
public void set_EnableLoginHint(bool value);
    [CompilerGeneratedAttribute]
public CookieOptions get_CookieOptions();
    [CompilerGeneratedAttribute]
public void set_CookieOptions(CookieOptions value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LoginPageLink> get_LoginPageLinks();
    [CompilerGeneratedAttribute]
public void set_LoginPageLinks(IEnumerable`1<LoginPageLink> value);
    [CompilerGeneratedAttribute]
public bool get_RequireSignOutPrompt();
    [CompilerGeneratedAttribute]
public void set_RequireSignOutPrompt(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSignOutPrompt();
    [CompilerGeneratedAttribute]
public void set_EnableSignOutPrompt(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAutoCallbackForFederatedSignout();
    [CompilerGeneratedAttribute]
public void set_EnableAutoCallbackForFederatedSignout(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnablePostSignOutAutoRedirect();
    [CompilerGeneratedAttribute]
public void set_EnablePostSignOutAutoRedirect(bool value);
    [CompilerGeneratedAttribute]
public int get_PostSignOutAutoRedirectDelay();
    [CompilerGeneratedAttribute]
public void set_PostSignOutAutoRedirectDelay(int value);
    [CompilerGeneratedAttribute]
public bool get_RequireAuthenticatedUserForSignOutMessage();
    [CompilerGeneratedAttribute]
public void set_RequireAuthenticatedUserForSignOutMessage(bool value);
    [CompilerGeneratedAttribute]
public bool get_RememberLastUsername();
    [CompilerGeneratedAttribute]
public void set_RememberLastUsername(bool value);
    [CompilerGeneratedAttribute]
public Action`2<IAppBuilder, string> get_IdentityProviders();
    [CompilerGeneratedAttribute]
public void set_IdentityProviders(Action`2<IAppBuilder, string> value);
    [CompilerGeneratedAttribute]
public int get_SignInMessageThreshold();
    [CompilerGeneratedAttribute]
public void set_SignInMessageThreshold(int value);
    [CompilerGeneratedAttribute]
public string get_InvalidSignInRedirectUrl();
    [CompilerGeneratedAttribute]
public void set_InvalidSignInRedirectUrl(string value);
}
internal class IdentityServer3.Core.Configuration.AuthenticationSessionStoreWrapper : object {
    private IAuthenticationSessionStoreProvider provider;
    public AuthenticationSessionStoreWrapper(IAuthenticationSessionStoreProvider provider);
    public sealed virtual Task`1<string> StoreAsync(AuthenticationTicket ticket);
    public sealed virtual Task RenewAsync(string key, AuthenticationTicket ticket);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.AuthenticationSessionStoreWrapper/<RetrieveAsync>d__0")]
public sealed virtual Task`1<AuthenticationTicket> RetrieveAsync(string key);
    public sealed virtual Task RemoveAsync(string key);
}
public class IdentityServer3.Core.Configuration.AuthenticationTicketModel : object {
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    public ClaimsIdentity Identity { get; private set; }
    public IDictionary`2<string, string> Properties { get; private set; }
    public AuthenticationTicketModel(ClaimsIdentity identity, IDictionary`2<string, string> properties);
    internal AuthenticationTicketModel(AuthenticationTicket ticket);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IDictionary`2<string, string> value);
    internal AuthenticationTicket ToAuthenticationTicket();
}
public class IdentityServer3.Core.Configuration.CookieOptions : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpireTimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPersistent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SlidingExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRememberMe>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RememberMeDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieSecureMode <SecureMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticationSessionStoreProvider <SessionStoreProvider>k__BackingField;
    public string Prefix { get; public set; }
    public TimeSpan ExpireTimeSpan { get; public set; }
    public bool IsPersistent { get; public set; }
    public bool SlidingExpiration { get; public set; }
    public string Path { get; public set; }
    public bool AllowRememberMe { get; public set; }
    public TimeSpan RememberMeDuration { get; public set; }
    public CookieSecureMode SecureMode { get; public set; }
    public IAuthenticationSessionStoreProvider SessionStoreProvider { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpireTimeSpan();
    [CompilerGeneratedAttribute]
public void set_ExpireTimeSpan(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_IsPersistent();
    [CompilerGeneratedAttribute]
public void set_IsPersistent(bool value);
    [CompilerGeneratedAttribute]
public bool get_SlidingExpiration();
    [CompilerGeneratedAttribute]
public void set_SlidingExpiration(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowRememberMe();
    [CompilerGeneratedAttribute]
public void set_AllowRememberMe(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RememberMeDuration();
    [CompilerGeneratedAttribute]
public void set_RememberMeDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public CookieSecureMode get_SecureMode();
    [CompilerGeneratedAttribute]
public void set_SecureMode(CookieSecureMode value);
    [CompilerGeneratedAttribute]
public IAuthenticationSessionStoreProvider get_SessionStoreProvider();
    [CompilerGeneratedAttribute]
public void set_SessionStoreProvider(IAuthenticationSessionStoreProvider value);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Configuration.CookieOptionsExtensions : object {
    private static string SessionCookieName;
    [ExtensionAttribute]
public static string GetCookieName(CookieOptions options, string name);
    [ExtensionAttribute]
public static string GetSessionCookieName(CookieOptions options);
    [ExtensionAttribute]
internal static Nullable`1<bool> CalculateRememberMeFromUserInput(CookieOptions options, Nullable`1<bool> userInput);
}
public enum IdentityServer3.Core.Configuration.CookieSecureMode : Enum {
    public int value__;
    public static CookieSecureMode SameAsRequest;
    public static CookieSecureMode Always;
}
public class IdentityServer3.Core.Configuration.CspOptions : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StyleSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImgSrc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameSrc>k__BackingField;
    public bool Enabled { get; public set; }
    public string ScriptSrc { get; public set; }
    public string StyleSrc { get; public set; }
    public string FontSrc { get; public set; }
    public string ConnectSrc { get; public set; }
    public string ImgSrc { get; public set; }
    public string FrameSrc { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ScriptSrc();
    [CompilerGeneratedAttribute]
public void set_ScriptSrc(string value);
    [CompilerGeneratedAttribute]
public string get_StyleSrc();
    [CompilerGeneratedAttribute]
public void set_StyleSrc(string value);
    [CompilerGeneratedAttribute]
public string get_FontSrc();
    [CompilerGeneratedAttribute]
public void set_FontSrc(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectSrc();
    [CompilerGeneratedAttribute]
public void set_ConnectSrc(string value);
    [CompilerGeneratedAttribute]
public string get_ImgSrc();
    [CompilerGeneratedAttribute]
public void set_ImgSrc(string value);
    [CompilerGeneratedAttribute]
public string get_FrameSrc();
    [CompilerGeneratedAttribute]
public void set_FrameSrc(string value);
}
public class IdentityServer3.Core.Configuration.DiscoveryOptions : object {
    [CompilerGeneratedAttribute]
private bool <ShowEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowKeySet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowIdentityScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowResourceScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowResponseTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowResponseModes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGrantTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCustomGrantTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTokenEndpointAuthenticationMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <CustomEntries>k__BackingField;
    public bool ShowEndpoints { get; public set; }
    public bool ShowKeySet { get; public set; }
    public bool ShowIdentityScopes { get; public set; }
    public bool ShowResourceScopes { get; public set; }
    public bool ShowClaims { get; public set; }
    public bool ShowResponseTypes { get; public set; }
    public bool ShowResponseModes { get; public set; }
    public bool ShowGrantTypes { get; public set; }
    public bool ShowCustomGrantTypes { get; public set; }
    public bool ShowTokenEndpointAuthenticationMethods { get; public set; }
    public Dictionary`2<string, object> CustomEntries { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowEndpoints();
    [CompilerGeneratedAttribute]
public void set_ShowEndpoints(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowKeySet();
    [CompilerGeneratedAttribute]
public void set_ShowKeySet(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowIdentityScopes();
    [CompilerGeneratedAttribute]
public void set_ShowIdentityScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowResourceScopes();
    [CompilerGeneratedAttribute]
public void set_ShowResourceScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowClaims();
    [CompilerGeneratedAttribute]
public void set_ShowClaims(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowResponseTypes();
    [CompilerGeneratedAttribute]
public void set_ShowResponseTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowResponseModes();
    [CompilerGeneratedAttribute]
public void set_ShowResponseModes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowGrantTypes();
    [CompilerGeneratedAttribute]
public void set_ShowGrantTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCustomGrantTypes();
    [CompilerGeneratedAttribute]
public void set_ShowCustomGrantTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowTokenEndpointAuthenticationMethods();
    [CompilerGeneratedAttribute]
public void set_ShowTokenEndpointAuthenticationMethods(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_CustomEntries();
    [CompilerGeneratedAttribute]
public void set_CustomEntries(Dictionary`2<string, object> value);
}
public class IdentityServer3.Core.Configuration.EndpointOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableAuthorizeEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableUserInfoEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDiscoveryEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAccessTokenValidationEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableIdentityTokenValidationEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableEndSessionEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableClientPermissionsEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCspReportEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCheckSessionEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTokenRevocationEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableIntrospectionEndpoint>k__BackingField;
    public bool EnableAuthorizeEndpoint { get; public set; }
    public bool EnableTokenEndpoint { get; public set; }
    public bool EnableUserInfoEndpoint { get; public set; }
    public bool EnableDiscoveryEndpoint { get; public set; }
    public bool EnableAccessTokenValidationEndpoint { get; public set; }
    public bool EnableIdentityTokenValidationEndpoint { get; public set; }
    public bool EnableEndSessionEndpoint { get; public set; }
    public bool EnableClientPermissionsEndpoint { get; public set; }
    public bool EnableCspReportEndpoint { get; public set; }
    public bool EnableCheckSessionEndpoint { get; public set; }
    public bool EnableTokenRevocationEndpoint { get; public set; }
    public bool EnableIntrospectionEndpoint { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableAuthorizeEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableAuthorizeEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableTokenEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableTokenEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableUserInfoEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableUserInfoEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDiscoveryEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableDiscoveryEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableAccessTokenValidationEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableAccessTokenValidationEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableIdentityTokenValidationEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableIdentityTokenValidationEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableEndSessionEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableEndSessionEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableClientPermissionsEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableClientPermissionsEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCspReportEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableCspReportEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCheckSessionEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableCheckSessionEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableTokenRevocationEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableTokenRevocationEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableIntrospectionEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnableIntrospectionEndpoint(bool value);
}
public class IdentityServer3.Core.Configuration.EventsOptions : object {
    [CompilerGeneratedAttribute]
private bool <RaiseSuccessEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RaiseFailureEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RaiseInformationEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RaiseErrorEvents>k__BackingField;
    public bool RaiseSuccessEvents { get; public set; }
    public bool RaiseFailureEvents { get; public set; }
    public bool RaiseInformationEvents { get; public set; }
    public bool RaiseErrorEvents { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RaiseSuccessEvents();
    [CompilerGeneratedAttribute]
public void set_RaiseSuccessEvents(bool value);
    [CompilerGeneratedAttribute]
public bool get_RaiseFailureEvents();
    [CompilerGeneratedAttribute]
public void set_RaiseFailureEvents(bool value);
    [CompilerGeneratedAttribute]
public bool get_RaiseInformationEvents();
    [CompilerGeneratedAttribute]
public void set_RaiseInformationEvents(bool value);
    [CompilerGeneratedAttribute]
public bool get_RaiseErrorEvents();
    [CompilerGeneratedAttribute]
public void set_RaiseErrorEvents(bool value);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Configuration.Hosting.AntiForgeryToken : object {
    private static string TokenName;
    private static string CookieEntropy;
    private static string HiddenInputEntropy;
    private static ILog Logger;
    private IOwinContext context;
    private IdentityServerOptions options;
    internal AntiForgeryToken(IOwinContext context, IdentityServerOptions options);
    private static AntiForgeryToken();
    internal AntiForgeryTokenViewModel GetAntiForgeryToken();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.AntiForgeryToken/<IsTokenValid>d__1")]
internal Task`1<bool> IsTokenValid();
    private bool CompareByteArrays(Byte[] cookieToken, Byte[] hiddenInputToken);
    private Byte[] GetCookieToken();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.AntiForgeryToken/<GetHiddenInputTokenAsync>d__7")]
private Task`1<Byte[]> GetHiddenInputTokenAsync();
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Configuration.Hosting.AutofacConfig : object {
    private static string DecoratorRegistrationName;
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, ITokenSigningService> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, AggregatePermissionsStore> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, OwinEnvironmentService> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, SessionCookie> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, MessageCookie`1<SignInMessage>> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, MessageCookie`1<SignOutMessage>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, LastUserNameCookie> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, AntiForgeryToken> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<IComponentContext, ClientListCookie> CS$<>9__CachedAnonymousMethodDelegate11;
    private static AutofacConfig();
    public static IContainer Configure(IdentityServerOptions options);
    [ExtensionAttribute]
private static void RegisterDefaultType(ContainerBuilder builder, Registration`1<T> registration, string name);
    [ExtensionAttribute]
private static void RegisterDefaultInstance(ContainerBuilder builder, Registration`1<T> registration, string name);
    [ExtensionAttribute]
private static void RegisterDecorator(ContainerBuilder builder, string name);
    [ExtensionAttribute]
private static void RegisterDecoratorDefaultInstance(ContainerBuilder builder, Registration`1<T> registration);
    [ExtensionAttribute]
private static void RegisterDecoratorDefaultType(ContainerBuilder builder, Registration`1<T> registration);
    [ExtensionAttribute]
private static void RegisterDecorator(ContainerBuilder builder, Registration`1<T> registration);
    [ExtensionAttribute]
private static void Register(ContainerBuilder builder, Registration registration, string name);
    [CompilerGeneratedAttribute]
private static ITokenSigningService <Configure>b__0(IDependencyResolver r);
    [CompilerGeneratedAttribute]
private static AggregatePermissionsStore <Configure>b__1(IComponentContext ctx);
    [CompilerGeneratedAttribute]
private static OwinEnvironmentService <Configure>b__2(IComponentContext c);
    [CompilerGeneratedAttribute]
private static SessionCookie <Configure>b__3(IComponentContext c);
    [CompilerGeneratedAttribute]
private static MessageCookie`1<SignInMessage> <Configure>b__4(IComponentContext c);
    [CompilerGeneratedAttribute]
private static MessageCookie`1<SignOutMessage> <Configure>b__5(IComponentContext c);
    [CompilerGeneratedAttribute]
private static LastUserNameCookie <Configure>b__6(IComponentContext c);
    [CompilerGeneratedAttribute]
private static AntiForgeryToken <Configure>b__7(IComponentContext c);
    [CompilerGeneratedAttribute]
private static ClientListCookie <Configure>b__8(IComponentContext c);
    [CompilerGeneratedAttribute]
private static T <RegisterDecorator>b__15(IComponentContext ctx);
}
internal class IdentityServer3.Core.Configuration.Hosting.AutofacScope : object {
    private ILifetimeScope _scope;
    public AutofacScope(ILifetimeScope scope);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
    public sealed virtual void Dispose();
}
internal class IdentityServer3.Core.Configuration.Hosting.ClaimMap : object {
    private static Dictionary`2<string, string> ClaimTypeMap;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, Claim> CS$<>9__CachedAnonymousMethodDelegate4;
    private static ClaimMap();
    private static Dictionary`2<string, string> BuildClaimTypeMap();
    private static string MapClaimType(string type);
    public static IEnumerable`1<Claim> Map(IEnumerable`1<Claim> incomingClaims);
    [CompilerGeneratedAttribute]
private static bool <Map>b__1(Claim x);
    [CompilerGeneratedAttribute]
private static Claim <Map>b__2(Claim x);
}
internal class IdentityServer3.Core.Configuration.Hosting.ClientListCookie : object {
    private static string ClientListCookieName;
    private static JsonSerializerSettings settings;
    private IOwinContext ctx;
    private IdentityServerOptions options;
    private string CookieName { get; }
    private string CookiePath { get; }
    private bool Secure { get; }
    public ClientListCookie(IOwinContext ctx, IdentityServerOptions options);
    private static ClientListCookie();
    public void Clear();
    public void AddClient(string clientId);
    public IEnumerable`1<string> GetClients();
    private void SetClients(IEnumerable`1<string> clients);
    private string get_CookieName();
    private string get_CookiePath();
    private bool get_Secure();
    private void SetCookie(string value);
    private string GetCookie();
}
internal class IdentityServer3.Core.Configuration.Hosting.CorsPolicyProvider : object {
    private static ILog Logger;
    private String[] paths;
    public CorsPolicyProvider(IEnumerable`1<string> allowedPaths);
    private static CorsPolicyProvider();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.CorsPolicyProvider/<GetCorsPolicyAsync>d__0")]
public sealed virtual Task`1<CorsPolicy> GetCorsPolicyAsync(IOwinRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.CorsPolicyProvider/<IsOriginAllowed>d__7")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<bool> IsOriginAllowed(string origin, IDictionary`2<string, object> env);
    private bool IsPathAllowed(IOwinRequest request);
    private string Normalize(string path);
    private CorsPolicy Allow(string origin);
}
internal class IdentityServer3.Core.Configuration.Hosting.DataProtectorAdapter : object {
    private IDataProtector _idsrvProtector;
    private string _entropy;
    public DataProtectorAdapter(IDataProtector idsrvProtector, string entropy);
    public sealed virtual Byte[] Protect(Byte[] userData);
    public sealed virtual Byte[] Unprotect(Byte[] protectedData);
}
internal class IdentityServer3.Core.Configuration.Hosting.ErrorPageFilterAttribute : ExceptionFilterAttribute {
    private static ILog Logger;
    private static ErrorPageFilterAttribute();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.ErrorPageFilterAttribute/<OnExceptionAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task OnExceptionAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
}
internal class IdentityServer3.Core.Configuration.Hosting.HostDataProtector : object {
    private IDataProtectionProvider _provider;
    public HostDataProtector(IDataProtectionProvider provider);
    public sealed virtual Byte[] Protect(Byte[] data, string entropy);
    public sealed virtual Byte[] Unprotect(Byte[] data, string entropy);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Configuration.Hosting.LastUserNameCookie : object {
    private static string LastUsernameCookieName;
    private static ILog Logger;
    private IOwinContext ctx;
    private IdentityServerOptions options;
    internal LastUserNameCookie(IOwinContext ctx, IdentityServerOptions options);
    private static LastUserNameCookie();
    internal string GetValue();
    internal void SetValue(string username);
}
internal class IdentityServer3.Core.Configuration.Hosting.LogProviderExceptionLogger : object {
    private static ILog Logger;
    private static LogProviderExceptionLogger();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.LogProviderExceptionLogger/<LogAsync>d__0")]
public sealed virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Configuration.Hosting.MessageCookie`1 : object {
    private static ILog Logger;
    private static JsonSerializerSettings settings;
    private IOwinContext ctx;
    private IdentityServerOptions options;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3`2<string, long>, long> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3`2<string, long>, string> CS$<>9__CachedAnonymousMethodDelegatef;
    private string MessageType { get; }
    private string CookiePath { get; }
    private bool Secure { get; }
    internal MessageCookie`1(IDictionary`2<string, object> env, IdentityServerOptions options);
    internal MessageCookie`1(IOwinContext ctx, IdentityServerOptions options);
    private static MessageCookie`1();
    private string get_MessageType();
    private string Protect(IDataProtector protector, TMessage message);
    private TMessage Unprotect(string data, IDataProtector protector);
    private string GetCookieName(string id);
    private string get_CookiePath();
    private IEnumerable`1<string> GetCookieNames();
    private string Protect(TMessage message);
    private TMessage Unprotect(string data);
    private bool get_Secure();
    public string Write(TMessage message);
    public TMessage Read(string id);
    private TMessage ReadByCookieName(string name);
    public void Clear(string id);
    private void ClearByCookieName(string name);
    private long GetCookieRank(string name);
    private void ClearOverflow();
    [CompilerGeneratedAttribute]
private <>f__AnonymousType3`2<string, long> <ClearOverflow>b__a(string name);
    [CompilerGeneratedAttribute]
private static long <ClearOverflow>b__b(<>f__AnonymousType3`2<string, long> <>h__TransparentIdentifier9);
    [CompilerGeneratedAttribute]
private static string <ClearOverflow>b__c(<>f__AnonymousType3`2<string, long> <>h__TransparentIdentifier9);
}
internal class IdentityServer3.Core.Configuration.Hosting.NoCacheAttribute : ActionFilterAttribute {
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
}
internal class IdentityServer3.Core.Configuration.Hosting.PreventUnsupportedRequestMediaTypesAttribute : AuthorizationFilterAttribute {
    private bool allowJson;
    private bool allowFormUrlEncoded;
    public PreventUnsupportedRequestMediaTypesAttribute(bool allowJson, bool allowFormUrlEncoded);
    public virtual void OnAuthorization(HttpActionContext actionContext);
}
internal class IdentityServer3.Core.Configuration.Hosting.RequireSslMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public RequireSslMiddleware(Func`2<IDictionary`2<string, object>, Task> next);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.RequireSslMiddleware/<Invoke>d__0")]
public Task Invoke(IDictionary`2<string, object> env);
}
internal class IdentityServer3.Core.Configuration.Hosting.SecurityHeadersAttribute : ActionFilterAttribute {
    [CompilerGeneratedAttribute]
private bool <EnableXfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCto>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCsp>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool EnableXfo { get; public set; }
    public bool EnableCto { get; public set; }
    public bool EnableCsp { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableXfo();
    [CompilerGeneratedAttribute]
public void set_EnableXfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCto();
    [CompilerGeneratedAttribute]
public void set_EnableCto(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCsp();
    [CompilerGeneratedAttribute]
public void set_EnableCsp(bool value);
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
    [CompilerGeneratedAttribute]
private static string <OnActionExecuted>b__0(string x, string y);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Configuration.Hosting.SessionCookie : object {
    private IOwinContext context;
    private IdentityServerOptions identityServerOptions;
    protected internal SessionCookie(IOwinContext ctx, IdentityServerOptions options);
    public virtual void IssueSessionId(Nullable`1<bool> persistent, Nullable`1<DateTimeOffset> expires);
    private CookieOptions CreateCookieOptions(Nullable`1<bool> persistent, Nullable`1<DateTimeOffset> expires);
    private string GetCookieName();
    public virtual string GetSessionId();
    public virtual void ClearSessionId();
}
[AttributeUsageAttribute("64")]
internal class IdentityServer3.Core.Configuration.Hosting.ValidateAntiForgeryTokenAttribute : PreventUnsupportedRequestMediaTypesAttribute {
    private static ILog Logger;
    private static ValidateAntiForgeryTokenAttribute();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.ValidateAntiForgeryTokenAttribute/<OnAuthorizationAsync>d__0")]
public virtual Task OnAuthorizationAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Configuration.Hosting.ValidateAntiForgeryTokenAttribute/<ValidateTokens>d__5")]
[DebuggerStepThroughAttribute]
private static Task ValidateTokens(HttpActionContext actionContext);
    [CompilerGeneratedAttribute]
private Task <>n__FabricatedMethod2(HttpActionContext , CancellationToken );
}
internal static class IdentityServer3.Core.Configuration.Hosting.WebApiConfig : object {
    public static HttpConfiguration Configure(IdentityServerOptions options, ILifetimeScope container);
    private static void ConfigureRoutes(IdentityServerOptions options, HttpConfiguration config);
}
public interface IdentityServer3.Core.Configuration.IAuthenticationSessionStoreProvider {
    public abstract virtual Task RemoveAsync(string key);
    public abstract virtual Task RenewAsync(string key, AuthenticationTicketModel identity);
    public abstract virtual Task`1<AuthenticationTicketModel> RetrieveAsync(string key);
    public abstract virtual Task`1<string> StoreAsync(AuthenticationTicketModel ticket);
}
public interface IdentityServer3.Core.Configuration.IDataProtector {
    public abstract virtual Byte[] Protect(Byte[] data, string entropy);
    public abstract virtual Byte[] Unprotect(Byte[] data, string entropy);
}
public class IdentityServer3.Core.Configuration.IdentityServerOptions : object {
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private string <SiteName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuerUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DynamicallyCalculatedIssuerUri>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <SigningCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <SecondarySigningCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityServerServiceFactory <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProtector <DataProtector>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointOptions <Endpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private DiscoveryOptions <DiscoveryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationOptions <AuthenticationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<IAppBuilder, IdentityServerOptions> <PluginConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ProtocolLogoutUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private CspOptions <CspOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingOptions <LoggingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private EventsOptions <EventsOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private InputLengthRestrictions <InputLengthRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableWelcomePage>k__BackingField;
    public string SiteName { get; public set; }
    public string IssuerUri { get; public set; }
    internal string DynamicallyCalculatedIssuerUri { get; internal set; }
    public X509Certificate2 SigningCertificate { get; public set; }
    public X509Certificate2 SecondarySigningCertificate { get; public set; }
    public bool RequireSsl { get; public set; }
    public string PublicOrigin { get; public set; }
    public IdentityServerServiceFactory Factory { get; public set; }
    public IDataProtector DataProtector { get; public set; }
    public EndpointOptions Endpoints { get; public set; }
    public DiscoveryOptions DiscoveryOptions { get; public set; }
    public AuthenticationOptions AuthenticationOptions { get; public set; }
    public Action`2<IAppBuilder, IdentityServerOptions> PluginConfiguration { get; public set; }
    public List`1<string> ProtocolLogoutUrls { get; public set; }
    public CspOptions CspOptions { get; public set; }
    public LoggingOptions LoggingOptions { get; public set; }
    public EventsOptions EventsOptions { get; public set; }
    public InputLengthRestrictions InputLengthRestrictions { get; public set; }
    public bool EnableWelcomePage { get; public set; }
    internal IEnumerable`1<X509Certificate2> PublicKeysForMetadata { get; }
    private static IdentityServerOptions();
    internal void Validate();
    [CompilerGeneratedAttribute]
public string get_SiteName();
    [CompilerGeneratedAttribute]
public void set_SiteName(string value);
    [CompilerGeneratedAttribute]
public string get_IssuerUri();
    [CompilerGeneratedAttribute]
public void set_IssuerUri(string value);
    [CompilerGeneratedAttribute]
internal string get_DynamicallyCalculatedIssuerUri();
    [CompilerGeneratedAttribute]
internal void set_DynamicallyCalculatedIssuerUri(string value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_SigningCertificate();
    [CompilerGeneratedAttribute]
public void set_SigningCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_SecondarySigningCertificate();
    [CompilerGeneratedAttribute]
public void set_SecondarySigningCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public bool get_RequireSsl();
    [CompilerGeneratedAttribute]
public void set_RequireSsl(bool value);
    [CompilerGeneratedAttribute]
public string get_PublicOrigin();
    [CompilerGeneratedAttribute]
public void set_PublicOrigin(string value);
    [CompilerGeneratedAttribute]
public IdentityServerServiceFactory get_Factory();
    [CompilerGeneratedAttribute]
public void set_Factory(IdentityServerServiceFactory value);
    [CompilerGeneratedAttribute]
public IDataProtector get_DataProtector();
    [CompilerGeneratedAttribute]
public void set_DataProtector(IDataProtector value);
    [CompilerGeneratedAttribute]
public EndpointOptions get_Endpoints();
    [CompilerGeneratedAttribute]
public void set_Endpoints(EndpointOptions value);
    [CompilerGeneratedAttribute]
public DiscoveryOptions get_DiscoveryOptions();
    [CompilerGeneratedAttribute]
public void set_DiscoveryOptions(DiscoveryOptions value);
    [CompilerGeneratedAttribute]
public AuthenticationOptions get_AuthenticationOptions();
    [CompilerGeneratedAttribute]
public void set_AuthenticationOptions(AuthenticationOptions value);
    [CompilerGeneratedAttribute]
public Action`2<IAppBuilder, IdentityServerOptions> get_PluginConfiguration();
    [CompilerGeneratedAttribute]
public void set_PluginConfiguration(Action`2<IAppBuilder, IdentityServerOptions> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ProtocolLogoutUrls();
    [CompilerGeneratedAttribute]
public void set_ProtocolLogoutUrls(List`1<string> value);
    [CompilerGeneratedAttribute]
public CspOptions get_CspOptions();
    [CompilerGeneratedAttribute]
public void set_CspOptions(CspOptions value);
    [CompilerGeneratedAttribute]
public LoggingOptions get_LoggingOptions();
    [CompilerGeneratedAttribute]
public void set_LoggingOptions(LoggingOptions value);
    [CompilerGeneratedAttribute]
public EventsOptions get_EventsOptions();
    [CompilerGeneratedAttribute]
public void set_EventsOptions(EventsOptions value);
    [CompilerGeneratedAttribute]
public InputLengthRestrictions get_InputLengthRestrictions();
    [CompilerGeneratedAttribute]
public void set_InputLengthRestrictions(InputLengthRestrictions value);
    [CompilerGeneratedAttribute]
public bool get_EnableWelcomePage();
    [CompilerGeneratedAttribute]
public void set_EnableWelcomePage(bool value);
    internal IEnumerable`1<X509Certificate2> get_PublicKeysForMetadata();
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Configuration.IdentityServerOptionsExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<string> RenderProtocolUrls(IdentityServerOptions options, string baseUrl, string sid);
}
public class IdentityServer3.Core.Configuration.IdentityServerServiceFactory : object {
    private static ILog Logger;
    private static Registration`1<IExternalClaimsFilter> DefaultClaimsFilter;
    private List`1<Registration> _registrations;
    [CompilerGeneratedAttribute]
private Registration`1<IUserService> <UserService>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IScopeStore> <ScopeStore>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IClientStore> <ClientStore>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IAuthorizationCodeStore> <AuthorizationCodeStore>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ITokenHandleStore> <TokenHandleStore>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IConsentStore> <ConsentStore>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IRefreshTokenStore> <RefreshTokenStore>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IViewService> <ViewService>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IConsentService> <ConsentService>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IClientPermissionsService> <ClientPermissionsService>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Registration`1<ICustomGrantValidator>> <CustomGrantValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ICustomRequestValidator> <CustomRequestValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IClaimsProvider> <ClaimsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ITokenService> <TokenService>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IRefreshTokenService> <RefreshTokenService>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ITokenSigningService> <TokenSigningService>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IExternalClaimsFilter> <ExternalClaimsFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IEventService> <EventService>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ICustomTokenValidator> <CustomTokenValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IRedirectUriValidator> <RedirectUriValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ILocalizationService> <LocalizationService>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Registration`1<ISecretParser>> <SecretParsers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Registration`1<ISecretValidator>> <SecretValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ICorsPolicyService> <CorsPolicyService>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ICustomTokenResponseGenerator> <CustomTokenResponseGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IAuthenticationSessionValidator> <AuthenticationSessionValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<ISigningKeyService> <SigningKeyService>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, IExternalClaimsFilter> CS$<>9__CachedAnonymousMethodDelegate1;
    public IEnumerable`1<Registration> Registrations { get; }
    public Registration`1<IUserService> UserService { get; public set; }
    public Registration`1<IScopeStore> ScopeStore { get; public set; }
    public Registration`1<IClientStore> ClientStore { get; public set; }
    public Registration`1<IAuthorizationCodeStore> AuthorizationCodeStore { get; public set; }
    public Registration`1<ITokenHandleStore> TokenHandleStore { get; public set; }
    public Registration`1<IConsentStore> ConsentStore { get; public set; }
    public Registration`1<IRefreshTokenStore> RefreshTokenStore { get; public set; }
    public Registration`1<IViewService> ViewService { get; public set; }
    public Registration`1<IConsentService> ConsentService { get; public set; }
    public Registration`1<IClientPermissionsService> ClientPermissionsService { get; public set; }
    public List`1<Registration`1<ICustomGrantValidator>> CustomGrantValidators { get; public set; }
    public Registration`1<ICustomRequestValidator> CustomRequestValidator { get; public set; }
    public Registration`1<IClaimsProvider> ClaimsProvider { get; public set; }
    public Registration`1<ITokenService> TokenService { get; public set; }
    public Registration`1<IRefreshTokenService> RefreshTokenService { get; public set; }
    public Registration`1<ITokenSigningService> TokenSigningService { get; public set; }
    public Registration`1<IExternalClaimsFilter> ExternalClaimsFilter { get; public set; }
    public Registration`1<IEventService> EventService { get; public set; }
    public Registration`1<ICustomTokenValidator> CustomTokenValidator { get; public set; }
    public Registration`1<IRedirectUriValidator> RedirectUriValidator { get; public set; }
    public Registration`1<ILocalizationService> LocalizationService { get; public set; }
    public IList`1<Registration`1<ISecretParser>> SecretParsers { get; public set; }
    public IList`1<Registration`1<ISecretValidator>> SecretValidators { get; public set; }
    public Registration`1<ICorsPolicyService> CorsPolicyService { get; public set; }
    public Registration`1<ICustomTokenResponseGenerator> CustomTokenResponseGenerator { get; public set; }
    public Registration`1<IAuthenticationSessionValidator> AuthenticationSessionValidator { get; public set; }
    public Registration`1<ISigningKeyService> SigningKeyService { get; public set; }
    private static IdentityServerServiceFactory();
    public IEnumerable`1<Registration> get_Registrations();
    public void Register(Registration`1<T> registration);
    [CompilerGeneratedAttribute]
public Registration`1<IUserService> get_UserService();
    [CompilerGeneratedAttribute]
public void set_UserService(Registration`1<IUserService> value);
    [CompilerGeneratedAttribute]
public Registration`1<IScopeStore> get_ScopeStore();
    [CompilerGeneratedAttribute]
public void set_ScopeStore(Registration`1<IScopeStore> value);
    [CompilerGeneratedAttribute]
public Registration`1<IClientStore> get_ClientStore();
    [CompilerGeneratedAttribute]
public void set_ClientStore(Registration`1<IClientStore> value);
    [CompilerGeneratedAttribute]
public Registration`1<IAuthorizationCodeStore> get_AuthorizationCodeStore();
    [CompilerGeneratedAttribute]
public void set_AuthorizationCodeStore(Registration`1<IAuthorizationCodeStore> value);
    [CompilerGeneratedAttribute]
public Registration`1<ITokenHandleStore> get_TokenHandleStore();
    [CompilerGeneratedAttribute]
public void set_TokenHandleStore(Registration`1<ITokenHandleStore> value);
    [CompilerGeneratedAttribute]
public Registration`1<IConsentStore> get_ConsentStore();
    [CompilerGeneratedAttribute]
public void set_ConsentStore(Registration`1<IConsentStore> value);
    [CompilerGeneratedAttribute]
public Registration`1<IRefreshTokenStore> get_RefreshTokenStore();
    [CompilerGeneratedAttribute]
public void set_RefreshTokenStore(Registration`1<IRefreshTokenStore> value);
    [CompilerGeneratedAttribute]
public Registration`1<IViewService> get_ViewService();
    [CompilerGeneratedAttribute]
public void set_ViewService(Registration`1<IViewService> value);
    [CompilerGeneratedAttribute]
public Registration`1<IConsentService> get_ConsentService();
    [CompilerGeneratedAttribute]
public void set_ConsentService(Registration`1<IConsentService> value);
    [CompilerGeneratedAttribute]
public Registration`1<IClientPermissionsService> get_ClientPermissionsService();
    [CompilerGeneratedAttribute]
public void set_ClientPermissionsService(Registration`1<IClientPermissionsService> value);
    [CompilerGeneratedAttribute]
public List`1<Registration`1<ICustomGrantValidator>> get_CustomGrantValidators();
    [CompilerGeneratedAttribute]
public void set_CustomGrantValidators(List`1<Registration`1<ICustomGrantValidator>> value);
    [CompilerGeneratedAttribute]
public Registration`1<ICustomRequestValidator> get_CustomRequestValidator();
    [CompilerGeneratedAttribute]
public void set_CustomRequestValidator(Registration`1<ICustomRequestValidator> value);
    [CompilerGeneratedAttribute]
public Registration`1<IClaimsProvider> get_ClaimsProvider();
    [CompilerGeneratedAttribute]
public void set_ClaimsProvider(Registration`1<IClaimsProvider> value);
    [CompilerGeneratedAttribute]
public Registration`1<ITokenService> get_TokenService();
    [CompilerGeneratedAttribute]
public void set_TokenService(Registration`1<ITokenService> value);
    [CompilerGeneratedAttribute]
public Registration`1<IRefreshTokenService> get_RefreshTokenService();
    [CompilerGeneratedAttribute]
public void set_RefreshTokenService(Registration`1<IRefreshTokenService> value);
    [CompilerGeneratedAttribute]
public Registration`1<ITokenSigningService> get_TokenSigningService();
    [CompilerGeneratedAttribute]
public void set_TokenSigningService(Registration`1<ITokenSigningService> value);
    [CompilerGeneratedAttribute]
public Registration`1<IExternalClaimsFilter> get_ExternalClaimsFilter();
    [CompilerGeneratedAttribute]
public void set_ExternalClaimsFilter(Registration`1<IExternalClaimsFilter> value);
    [CompilerGeneratedAttribute]
public Registration`1<IEventService> get_EventService();
    [CompilerGeneratedAttribute]
public void set_EventService(Registration`1<IEventService> value);
    [CompilerGeneratedAttribute]
public Registration`1<ICustomTokenValidator> get_CustomTokenValidator();
    [CompilerGeneratedAttribute]
public void set_CustomTokenValidator(Registration`1<ICustomTokenValidator> value);
    [CompilerGeneratedAttribute]
public Registration`1<IRedirectUriValidator> get_RedirectUriValidator();
    [CompilerGeneratedAttribute]
public void set_RedirectUriValidator(Registration`1<IRedirectUriValidator> value);
    [CompilerGeneratedAttribute]
public Registration`1<ILocalizationService> get_LocalizationService();
    [CompilerGeneratedAttribute]
public void set_LocalizationService(Registration`1<ILocalizationService> value);
    [CompilerGeneratedAttribute]
public IList`1<Registration`1<ISecretParser>> get_SecretParsers();
    [CompilerGeneratedAttribute]
public void set_SecretParsers(IList`1<Registration`1<ISecretParser>> value);
    [CompilerGeneratedAttribute]
public IList`1<Registration`1<ISecretValidator>> get_SecretValidators();
    [CompilerGeneratedAttribute]
public void set_SecretValidators(IList`1<Registration`1<ISecretValidator>> value);
    [CompilerGeneratedAttribute]
public Registration`1<ICorsPolicyService> get_CorsPolicyService();
    [CompilerGeneratedAttribute]
public void set_CorsPolicyService(Registration`1<ICorsPolicyService> value);
    [CompilerGeneratedAttribute]
public Registration`1<ICustomTokenResponseGenerator> get_CustomTokenResponseGenerator();
    [CompilerGeneratedAttribute]
public void set_CustomTokenResponseGenerator(Registration`1<ICustomTokenResponseGenerator> value);
    [CompilerGeneratedAttribute]
public Registration`1<IAuthenticationSessionValidator> get_AuthenticationSessionValidator();
    [CompilerGeneratedAttribute]
public void set_AuthenticationSessionValidator(Registration`1<IAuthenticationSessionValidator> value);
    [CompilerGeneratedAttribute]
public Registration`1<ISigningKeyService> get_SigningKeyService();
    [CompilerGeneratedAttribute]
public void set_SigningKeyService(Registration`1<ISigningKeyService> value);
    internal void Validate();
    private void LogAndStop(string message);
    [CompilerGeneratedAttribute]
private static IExternalClaimsFilter <.cctor>b__0(IDependencyResolver resolver);
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Configuration.IdentityServerServiceFactoryExtensions : object {
    private static string CachingRegistrationName;
    private static string InnerRegistrationName;
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, IScopeStore> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, IClientStore> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, IUserService> CS$<>9__CachedAnonymousMethodDelegate5;
    [ExtensionAttribute]
public static void ConfigureScopeStoreCache(IdentityServerServiceFactory factory, Registration`1<ICache`1<IEnumerable`1<Scope>>> cacheRegistration);
    [ExtensionAttribute]
public static void ConfigureScopeStoreCache(IdentityServerServiceFactory factory, TimeSpan cacheDuration);
    [ExtensionAttribute]
public static void ConfigureScopeStoreCache(IdentityServerServiceFactory factory);
    [ExtensionAttribute]
public static void ConfigureClientStoreCache(IdentityServerServiceFactory factory, Registration`1<ICache`1<Client>> cacheRegistration);
    [ExtensionAttribute]
public static void ConfigureClientStoreCache(IdentityServerServiceFactory factory, TimeSpan cacheDuration);
    [ExtensionAttribute]
public static void ConfigureClientStoreCache(IdentityServerServiceFactory factory);
    [ExtensionAttribute]
public static void ConfigureUserServiceCache(IdentityServerServiceFactory factory, Registration`1<ICache`1<IEnumerable`1<Claim>>> cacheRegistration);
    [ExtensionAttribute]
public static void ConfigureUserServiceCache(IdentityServerServiceFactory factory, TimeSpan cacheDuration);
    [ExtensionAttribute]
public static void ConfigureUserServiceCache(IdentityServerServiceFactory factory);
    [ExtensionAttribute]
public static void ConfigureDefaultViewService(IdentityServerServiceFactory factory, DefaultViewServiceOptions options);
    [ExtensionAttribute]
public static void ConfigureDefaultViewService(IdentityServerServiceFactory factory, DefaultViewServiceOptions options);
    [ExtensionAttribute]
public static IdentityServerServiceFactory UseInMemoryUsers(IdentityServerServiceFactory factory, List`1<InMemoryUser> users);
    [ExtensionAttribute]
public static IdentityServerServiceFactory UseInMemoryClients(IdentityServerServiceFactory factory, IEnumerable`1<Client> clients);
    [ExtensionAttribute]
public static IdentityServerServiceFactory UseInMemoryScopes(IdentityServerServiceFactory factory, IEnumerable`1<Scope> scopes);
    [CompilerGeneratedAttribute]
private static IScopeStore <ConfigureScopeStoreCache>b__0(IDependencyResolver resolver);
    [CompilerGeneratedAttribute]
private static IClientStore <ConfigureClientStoreCache>b__2(IDependencyResolver resolver);
    [CompilerGeneratedAttribute]
private static IUserService <ConfigureUserServiceCache>b__4(IDependencyResolver resolver);
}
public class IdentityServer3.Core.Configuration.InputLengthRestrictions : object {
    private static int Default;
    [CompilerGeneratedAttribute]
private int <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UiLocale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LoginHint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AcrValues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GrantType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CspReport>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdentityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExternalError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AuthorizationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Jwt>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodeChallengeMinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodeChallengeMaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodeVerifierMinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodeVerifierMaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProofKey>k__BackingField;
    public int ClientId { get; public set; }
    public int ClientSecret { get; private set; }
    public int Scope { get; public set; }
    public int RedirectUri { get; public set; }
    public int Nonce { get; public set; }
    public int UiLocale { get; public set; }
    public int LoginHint { get; public set; }
    public int AcrValues { get; public set; }
    public int GrantType { get; public set; }
    public int UserName { get; public set; }
    public int Password { get; public set; }
    public int CspReport { get; public set; }
    public int IdentityProvider { get; public set; }
    public int ExternalError { get; private set; }
    public int AuthorizationCode { get; private set; }
    public int RefreshToken { get; private set; }
    public int TokenHandle { get; private set; }
    public int Jwt { get; private set; }
    public int CodeChallengeMinLength { get; private set; }
    public int CodeChallengeMaxLength { get; private set; }
    public int CodeVerifierMinLength { get; private set; }
    public int CodeVerifierMaxLength { get; private set; }
    public int ProofKey { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(int value);
    [CompilerGeneratedAttribute]
public int get_ClientSecret();
    [CompilerGeneratedAttribute]
private void set_ClientSecret(int value);
    [CompilerGeneratedAttribute]
public int get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(int value);
    [CompilerGeneratedAttribute]
public int get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(int value);
    [CompilerGeneratedAttribute]
public int get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(int value);
    [CompilerGeneratedAttribute]
public int get_UiLocale();
    [CompilerGeneratedAttribute]
public void set_UiLocale(int value);
    [CompilerGeneratedAttribute]
public int get_LoginHint();
    [CompilerGeneratedAttribute]
public void set_LoginHint(int value);
    [CompilerGeneratedAttribute]
public int get_AcrValues();
    [CompilerGeneratedAttribute]
public void set_AcrValues(int value);
    [CompilerGeneratedAttribute]
public int get_GrantType();
    [CompilerGeneratedAttribute]
public void set_GrantType(int value);
    [CompilerGeneratedAttribute]
public int get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(int value);
    [CompilerGeneratedAttribute]
public int get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(int value);
    [CompilerGeneratedAttribute]
public int get_CspReport();
    [CompilerGeneratedAttribute]
public void set_CspReport(int value);
    [CompilerGeneratedAttribute]
public int get_IdentityProvider();
    [CompilerGeneratedAttribute]
public void set_IdentityProvider(int value);
    [CompilerGeneratedAttribute]
public int get_ExternalError();
    [CompilerGeneratedAttribute]
private void set_ExternalError(int value);
    [CompilerGeneratedAttribute]
public int get_AuthorizationCode();
    [CompilerGeneratedAttribute]
private void set_AuthorizationCode(int value);
    [CompilerGeneratedAttribute]
public int get_RefreshToken();
    [CompilerGeneratedAttribute]
private void set_RefreshToken(int value);
    [CompilerGeneratedAttribute]
public int get_TokenHandle();
    [CompilerGeneratedAttribute]
private void set_TokenHandle(int value);
    [CompilerGeneratedAttribute]
public int get_Jwt();
    [CompilerGeneratedAttribute]
private void set_Jwt(int value);
    [CompilerGeneratedAttribute]
public int get_CodeChallengeMinLength();
    [CompilerGeneratedAttribute]
private void set_CodeChallengeMinLength(int value);
    [CompilerGeneratedAttribute]
public int get_CodeChallengeMaxLength();
    [CompilerGeneratedAttribute]
private void set_CodeChallengeMaxLength(int value);
    [CompilerGeneratedAttribute]
public int get_CodeVerifierMinLength();
    [CompilerGeneratedAttribute]
private void set_CodeVerifierMinLength(int value);
    [CompilerGeneratedAttribute]
public int get_CodeVerifierMaxLength();
    [CompilerGeneratedAttribute]
private void set_CodeVerifierMaxLength(int value);
    [CompilerGeneratedAttribute]
public int get_ProofKey();
    [CompilerGeneratedAttribute]
public void set_ProofKey(int value);
}
public class IdentityServer3.Core.Configuration.LoggingOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableWebApiDiagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WebApiDiagnosticsIsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableHttpLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableKatanaLogging>k__BackingField;
    public bool EnableWebApiDiagnostics { get; public set; }
    public bool WebApiDiagnosticsIsVerbose { get; public set; }
    public bool EnableHttpLogging { get; public set; }
    public bool EnableKatanaLogging { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableWebApiDiagnostics();
    [CompilerGeneratedAttribute]
public void set_EnableWebApiDiagnostics(bool value);
    [CompilerGeneratedAttribute]
public bool get_WebApiDiagnosticsIsVerbose();
    [CompilerGeneratedAttribute]
public void set_WebApiDiagnosticsIsVerbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableHttpLogging();
    [CompilerGeneratedAttribute]
public void set_EnableHttpLogging(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableKatanaLogging();
    [CompilerGeneratedAttribute]
public void set_EnableKatanaLogging(bool value);
}
public class IdentityServer3.Core.Configuration.LoginPageLink : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    public string Type { get; public set; }
    public string Text { get; public set; }
    public string Href { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
}
public abstract class IdentityServer3.Core.Configuration.Registration : object {
    [CompilerGeneratedAttribute]
private RegistrationMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDependencyResolver, object> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Registration> <AdditionalRegistrations>k__BackingField;
    public RegistrationMode Mode { get; public set; }
    public Type DependencyType { get; }
    public string Name { get; protected set; }
    public object Instance { get; protected set; }
    public Type Type { get; protected set; }
    public Func`2<IDependencyResolver, object> Factory { get; protected set; }
    public ICollection`1<Registration> AdditionalRegistrations { get; public set; }
    [CompilerGeneratedAttribute]
public RegistrationMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(RegistrationMode value);
    public abstract virtual Type get_DependencyType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
protected void set_Instance(object value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(Type value);
    [CompilerGeneratedAttribute]
public Func`2<IDependencyResolver, object> get_Factory();
    [CompilerGeneratedAttribute]
protected void set_Factory(Func`2<IDependencyResolver, object> value);
    [CompilerGeneratedAttribute]
public ICollection`1<Registration> get_AdditionalRegistrations();
    [CompilerGeneratedAttribute]
public void set_AdditionalRegistrations(ICollection`1<Registration> value);
}
public class IdentityServer3.Core.Configuration.Registration`1 : Registration {
    public Type DependencyType { get; }
    public Registration`1(string name);
    public Registration`1(Type type, string name);
    public Registration`1(Func`2<IDependencyResolver, T> factory, string name);
    public Registration`1(T singleton, string name);
    public Registration`1(Registration`1<T> registration, string name);
    public virtual Type get_DependencyType();
}
public class IdentityServer3.Core.Configuration.Registration`2 : Registration`1<T> {
    public Registration`2(string name);
}
public enum IdentityServer3.Core.Configuration.RegistrationMode : Enum {
    public int value__;
    public static RegistrationMode InstancePerHttpRequest;
    public static RegistrationMode InstancePerUse;
    public static RegistrationMode Singleton;
}
public class IdentityServer3.Core.Configuration.X509CertificateDataProtector : object {
    private CookieTransform _encrypt;
    private CookieTransform _sign;
    public X509CertificateDataProtector(X509Certificate2 certificate);
    public sealed virtual Byte[] Protect(Byte[] data, string entropy);
    public sealed virtual Byte[] Unprotect(Byte[] data, string entropy);
    private static Byte[] GetBytes(string value);
    private static Byte[] GetSubArray(Byte[] src, int length);
    private static Byte[] Combine(Byte[] first, Byte[] second);
}
public static class IdentityServer3.Core.Constants : object {
    public static string IdentityServerName;
    public static string PrimaryAuthenticationType;
    public static string ExternalAuthenticationType;
    public static string PartialSignInAuthenticationType;
    public static string BuiltInIdentityProvider;
    public static string AccessTokenAudience;
    public static int SignInMessageThreshold;
    public static string DefaultHashAlgorithm;
    public static string ScopeDisplayNameSuffix;
    public static string ScopeDescriptionSuffix;
    public static string PartialLoginResumeClaimPrefix;
    internal static String[] IdentityServerAuthenticationTypes;
    public static TimeSpan DefaultCookieTimeSpan;
    public static TimeSpan ExternalCookieTimeSpan;
    public static TimeSpan DefaultRememberMeDuration;
    public static TimeSpan DefaultCacheDuration;
    public static List`1<string> SupportedResponseTypes;
    public static Dictionary`2<string, Flows> ResponseTypeToFlowMapping;
    public static List`1<Flows> AllowedFlowsForAuthorizeEndpoint;
    public static List`1<Flows> AllowedFlowsForAuthorizationCodeGrantType;
    public static Dictionary`2<Flows, IList`1<string>> ProofKeyFlowToResponseTypesMapping;
    public static Dictionary`2<string, ScopeRequirement> ResponseTypeToScopeRequirement;
    public static List`1<string> SupportedGrantTypes;
    public static Dictionary`2<Flows, IEnumerable`1<string>> AllowedResponseModesForFlow;
    public static List`1<string> SupportedResponseModes;
    public static String[] SupportedSubjectTypes;
    public static List`1<string> SupportedDisplayModes;
    public static List`1<string> SupportedPromptModes;
    public static List`1<string> SupportedCodeChallengeMethods;
    public static Dictionary`2<string, HttpStatusCode> ProtectedResourceErrorStatusCodes;
    public static Dictionary`2<string, IEnumerable`1<string>> ScopeToClaimsMapping;
    public static String[] ClaimsProviderFilerClaimTypes;
    public static String[] OidcProtocolClaimTypes;
    public static String[] AuthenticateResultClaimTypes;
    public static List`1<string> SupportedTokenTypeHints;
    public static IEnumerable`1<string> AllowedProofKeyAlgorithms;
    private static Constants();
}
[NoCacheAttribute]
internal class IdentityServer3.Core.Endpoints.AccessTokenValidationController : ApiController {
    private static ILog Logger;
    private TokenValidator _validator;
    private IdentityServerOptions _options;
    private ILocalizationService _localizationService;
    private IEventService _events;
    public AccessTokenValidationController(TokenValidator validator, IdentityServerOptions options, ILocalizationService localizationService, IEventService events);
    private static AccessTokenValidationController();
    [HttpGetAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AccessTokenValidationController/<Get>d__0")]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> Get();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AccessTokenValidationController/<Post>d__4")]
[HttpPostAttribute]
public Task`1<IHttpActionResult> Post();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AccessTokenValidationController/<ProcessRequest>d__9")]
internal Task`1<IHttpActionResult> ProcessRequest(NameValueCollection parameters);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AccessTokenValidationController/<RaiseSuccessEventAsync>d__11")]
[DebuggerStepThroughAttribute]
private Task RaiseSuccessEventAsync();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AccessTokenValidationController/<RaiseFailureEventAsync>d__14")]
private Task RaiseFailureEventAsync(string error);
}
[NoCacheAttribute]
[HostAuthenticationAttribute("idsrv")]
[PreventUnsupportedRequestMediaTypesAttribute("False", "True")]
[ErrorPageFilterAttribute]
[SecurityHeadersAttribute]
internal class IdentityServer3.Core.Endpoints.AuthenticationController : ApiController {
    public static int MaxSignInMessageLength;
    private static ILog Logger;
    private IOwinContext context;
    private IViewService viewService;
    private IUserService userService;
    private IdentityServerOptions options;
    private IClientStore clientStore;
    private IEventService eventService;
    private ILocalizationService localizationService;
    private SessionCookie sessionCookie;
    private MessageCookie`1<SignInMessage> signInMessageCookie;
    private MessageCookie`1<SignOutMessage> signOutMessageCookie;
    private LastUserNameCookie lastUserNameCookie;
    private AntiForgeryToken antiForgeryToken;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, <>f__AnonymousTypeb`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegate36;
    public AuthenticationController(OwinEnvironmentService owin, IViewService viewService, IUserService userService, IdentityServerOptions idSvrOptions, IClientStore clientStore, IEventService eventService, ILocalizationService localizationService, SessionCookie sessionCookie, MessageCookie`1<SignInMessage> signInMessageCookie, MessageCookie`1<SignOutMessage> signOutMessageCookie, LastUserNameCookie lastUsernameCookie, AntiForgeryToken antiForgeryToken);
    private static AuthenticationController();
    [HttpGetAttribute]
[RouteAttribute("login")]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<Login>d__1")]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> Login(string signin);
    [ValidateAntiForgeryTokenAttribute]
[RouteAttribute("login")]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<LoginLocal>d__9")]
[HttpPostAttribute]
public Task`1<IHttpActionResult> LoginLocal(string signin, LoginCredentials model);
    [DebuggerStepThroughAttribute]
[RouteAttribute("external")]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<LoginExternal>d__13")]
[HttpGetAttribute]
public Task`1<IHttpActionResult> LoginExternal(string signin, string provider);
    [HttpGetAttribute]
[DebuggerStepThroughAttribute]
[RouteAttribute("callback")]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<LoginExternalCallback>d__1e")]
public Task`1<IHttpActionResult> LoginExternalCallback(string error);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<ResumeLoginFromRedirect>d__3c")]
[RouteAttribute("return")]
[HttpGetAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> ResumeLoginFromRedirect(string resume);
    [RouteAttribute("logout")]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<LogoutPrompt>d__4e")]
[HttpGetAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> LogoutPrompt(string id);
    [RouteAttribute("logout")]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<Logout>d__56")]
[HttpPostAttribute]
[ValidateAntiForgeryTokenAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> Logout(string id);
    private IHttpActionResult HandleNoSignin();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<SignInAndRedirectAsync>d__5d")]
[DebuggerStepThroughAttribute]
private Task`1<IHttpActionResult> SignInAndRedirectAsync(SignInMessage signInMessage, string signInMessageId, AuthenticateResult authResult, Nullable`1<bool> rememberMe);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<PostAuthenticateAsync>d__63")]
private Task`1<Tuple`2<IHttpActionResult, AuthenticateResult>> PostAuthenticateAsync(SignInMessage signInMessage, string signInMessageId, AuthenticateResult result);
    private void IssueAuthenticationCookie(string signInMessageId, AuthenticateResult authResult, Nullable`1<bool> rememberMe);
    private static string GetClaimTypeForResumeId(string resume);
    private Uri GetRedirectUrl(SignInMessage signInMessage, AuthenticateResult authResult);
    private void ClearAuthenticationCookiesForNewSignIn(AuthenticateResult authResult);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<IsLocalLoginAllowedForClient>d__69")]
private Task`1<bool> IsLocalLoginAllowedForClient(SignInMessage message);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<RenderLoginPage>d__6e")]
private Task`1<IHttpActionResult> RenderLoginPage(SignInMessage message, string signInMessageId, string errorMessage, string username, bool rememberMe);
    private string GetUserNameForLoginPage(SignInMessage message, string username);
    private IHttpActionResult RenderLogoutPromptPage(string id);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthenticationController/<RenderLoggedOutPage>d__7e")]
[DebuggerStepThroughAttribute]
private Task`1<IHttpActionResult> RenderLoggedOutPage(string id);
    private IHttpActionResult RenderErrorPage(string message);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTypeb`2<string, string> <LoginExternalCallback>b__1c(Claim x);
    [CompilerGeneratedAttribute]
private static bool <ResumeLoginFromRedirect>b__2e(Claim c);
    [CompilerGeneratedAttribute]
private static bool <ResumeLoginFromRedirect>b__2f(Claim c);
    [CompilerGeneratedAttribute]
private static bool <ResumeLoginFromRedirect>b__30(Claim c);
}
[NoCacheAttribute]
[HostAuthenticationAttribute("idsrv")]
[SecurityHeadersAttribute]
[PreventUnsupportedRequestMediaTypesAttribute("False", "True")]
[ErrorPageFilterAttribute]
internal class IdentityServer3.Core.Endpoints.AuthorizeEndpointController : ApiController {
    private static ILog Logger;
    private IViewService _viewService;
    private AuthorizeRequestValidator _validator;
    private AuthorizeResponseGenerator _responseGenerator;
    private AuthorizeInteractionResponseGenerator _interactionGenerator;
    private IdentityServerOptions _options;
    private ILocalizationService _localizationService;
    private IEventService _events;
    private AntiForgeryToken _antiForgeryToken;
    private ClientListCookie _clientListCookie;
    public AuthorizeEndpointController(IViewService viewService, AuthorizeRequestValidator validator, AuthorizeResponseGenerator responseGenerator, AuthorizeInteractionResponseGenerator interactionGenerator, IdentityServerOptions options, ILocalizationService localizationService, IEventService events, AntiForgeryToken antiForgeryToken, ClientListCookie clientListCookie);
    private static AuthorizeEndpointController();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthorizeEndpointController/<Get>d__0")]
[DebuggerStepThroughAttribute]
[HttpGetAttribute]
public Task`1<IHttpActionResult> Get(HttpRequestMessage request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthorizeEndpointController/<ProcessRequestAsync>d__4")]
private Task`1<IHttpActionResult> ProcessRequestAsync(NameValueCollection parameters, UserConsent consent);
    [ValidateAntiForgeryTokenAttribute]
[HttpPostAttribute]
public Task`1<IHttpActionResult> PostConsent(UserConsent model);
    [DebuggerStepThroughAttribute]
[HttpGetAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthorizeEndpointController/<LoginAsDifferentUser>d__e")]
public Task`1<IHttpActionResult> LoginAsDifferentUser();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthorizeEndpointController/<CreateAuthorizeResponseAsync>d__12")]
[DebuggerStepThroughAttribute]
private Task`1<IHttpActionResult> CreateAuthorizeResponseAsync(ValidatedAuthorizeRequest request);
    private IHttpActionResult CreateConsentResult(ValidatedAuthorizeRequest validatedRequest, UserConsent consent, NameValueCollection requestParameters, string errorMessage);
    private IHttpActionResult RedirectToLogin(SignInMessage message, NameValueCollection parameters);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthorizeEndpointController/<AuthorizeErrorAsync>d__1a")]
[DebuggerStepThroughAttribute]
private Task`1<IHttpActionResult> AuthorizeErrorAsync(ErrorTypes errorType, string error, string errorDescription, ValidatedAuthorizeRequest request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthorizeEndpointController/<RaiseSuccessEventAsync>d__1e")]
private Task RaiseSuccessEventAsync();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.AuthorizeEndpointController/<RaiseFailureEventAsync>d__21")]
[DebuggerStepThroughAttribute]
private Task RaiseFailureEventAsync(string error);
    private string LookupErrorMessage(string error);
}
internal class IdentityServer3.Core.Endpoints.CheckSessionEndpointController : ApiController {
    private static ILog Logger;
    private IdentityServerOptions _options;
    public CheckSessionEndpointController(IdentityServerOptions options);
    private static CheckSessionEndpointController();
    [HttpGetAttribute]
public IHttpActionResult Get();
}
[HostAuthenticationAttribute("idsrv")]
[PreventUnsupportedRequestMediaTypesAttribute("False", "True")]
[NoCacheAttribute]
[SecurityHeadersAttribute]
[ErrorPageFilterAttribute]
internal class IdentityServer3.Core.Endpoints.ClientPermissionsController : ApiController {
    private static ILog Logger;
    private IClientPermissionsService clientPermissionsService;
    private IdentityServerOptions options;
    private IViewService viewSvc;
    private ILocalizationService localizationService;
    private IEventService eventService;
    private AntiForgeryToken antiForgeryToken;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, ModelState>, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, ModelState>, string> CS$<>9__CachedAnonymousMethodDelegate6;
    public ClientPermissionsController(IClientPermissionsService clientPermissionsService, IdentityServerOptions options, IViewService viewSvc, ILocalizationService localizationService, IEventService eventService, AntiForgeryToken antiForgeryToken);
    private static ClientPermissionsController();
    [HttpGetAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.ClientPermissionsController/<ShowPermissions>d__0")]
public Task`1<IHttpActionResult> ShowPermissions();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.ClientPermissionsController/<RevokePermission>d__7")]
[HttpPostAttribute]
[ValidateAntiForgeryTokenAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> RevokePermission(RevokeClientPermission model);
    private IHttpActionResult RedirectToLogin();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.ClientPermissionsController/<RenderPermissionsPage>d__e")]
private Task`1<IHttpActionResult> RenderPermissionsPage(string error);
    [CompilerGeneratedAttribute]
private static bool <RevokePermission>b__3(KeyValuePair`2<string, ModelState> x);
    [CompilerGeneratedAttribute]
private static string <RevokePermission>b__4(KeyValuePair`2<string, ModelState> x);
}
[HostAuthenticationAttribute("idsrv")]
internal class IdentityServer3.Core.Endpoints.CspReportController : ApiController {
    private static ILog Logger;
    private IdentityServerOptions options;
    private IEventService eventService;
    public CspReportController(IdentityServerOptions options, IEventService eventService);
    private static CspReportController();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.CspReportController/<Post>d__0")]
[HttpPostAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> Post();
}
internal class IdentityServer3.Core.Endpoints.DiscoveryEndpointController : ApiController {
    private static ILog Logger;
    private IdentityServerOptions _options;
    private IScopeStore _scopes;
    private CustomGrantValidator _customGrants;
    private IOwinContext _context;
    private ISigningKeyService _keyService;
    private static JsonSerializer Serializer;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<ScopeClaim, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegated;
    public DiscoveryEndpointController(IdentityServerOptions options, IScopeStore scopes, IOwinContext context, ISigningKeyService keyService, CustomGrantValidator customGrants);
    private static DiscoveryEndpointController();
    [HttpGetAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.DiscoveryEndpointController/<GetConfiguration>d__11")]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> GetConfiguration();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.DiscoveryEndpointController/<GetKeyData>d__1a")]
[HttpGetAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> GetKeyData();
    [CompilerGeneratedAttribute]
private static bool <GetConfiguration>b__1(Scope s);
    [CompilerGeneratedAttribute]
private static bool <GetConfiguration>b__2(Scope s);
    [CompilerGeneratedAttribute]
private static bool <GetConfiguration>b__3(Scope s);
    [CompilerGeneratedAttribute]
private static string <GetConfiguration>b__4(Scope s);
    [CompilerGeneratedAttribute]
private static string <GetConfiguration>b__6(ScopeClaim c);
    [CompilerGeneratedAttribute]
private static bool <GetConfiguration>b__7(string type);
}
[SecurityHeadersAttribute]
[NoCacheAttribute]
[HostAuthenticationAttribute("idsrv")]
internal class IdentityServer3.Core.Endpoints.EndSessionController : ApiController {
    private static ILog Logger;
    private IdentityServerOptions _options;
    private EndSessionRequestValidator _validator;
    private EndSessionResponseGenerator _generator;
    private ClientListCookie _clientListCookie;
    private IClientStore _clientStore;
    private SessionCookie _sessionCookie;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate10;
    public EndSessionController(IdentityServerOptions options, EndSessionRequestValidator validator, EndSessionResponseGenerator generator, ClientListCookie clientListCookie, IClientStore clientStore, SessionCookie sessionCookie);
    private static EndSessionController();
    [HttpGetAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.EndSessionController/<Logout>d__0")]
[HttpPostAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> Logout();
    [HttpGetAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.EndSessionController/<LogoutCallback>d__a")]
public Task`1<IHttpActionResult> LogoutCallback(string sid);
    private bool ValidateSid(string sid);
    private void ConfigureCspResponseHeader(IEnumerable`1<string> urls);
    private string GetEndSessionHtml(IEnumerable`1<string> urls);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.EndSessionController/<GetClientEndSessionUrlsAsync>d__11")]
private Task`1<IEnumerable`1<string>> GetClientEndSessionUrlsAsync();
    private void ClearCookies();
    [CompilerGeneratedAttribute]
private static string <LogoutCallback>b__8(string x, string y);
    [CompilerGeneratedAttribute]
private static string <ConfigureCspResponseHeader>b__f(string x);
}
[NoCacheAttribute]
internal class IdentityServer3.Core.Endpoints.IdentityTokenValidationController : ApiController {
    private static ILog Logger;
    private TokenValidator _validator;
    private IdentityServerOptions _options;
    private ILocalizationService _localizationService;
    private IEventService _events;
    public IdentityTokenValidationController(TokenValidator validator, IdentityServerOptions options, ILocalizationService localizationService, IEventService events);
    private static IdentityTokenValidationController();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IdentityTokenValidationController/<Get>d__0")]
[DebuggerStepThroughAttribute]
[HttpGetAttribute]
public Task`1<IHttpActionResult> Get();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IdentityTokenValidationController/<Post>d__4")]
[DebuggerStepThroughAttribute]
[HttpPostAttribute]
public Task`1<IHttpActionResult> Post();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IdentityTokenValidationController/<ProcessAsync>d__9")]
internal Task`1<IHttpActionResult> ProcessAsync(NameValueCollection parameters);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IdentityTokenValidationController/<RaiseSuccessEventAsync>d__13")]
private Task RaiseSuccessEventAsync();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IdentityTokenValidationController/<RaiseFailureEventAsync>d__16")]
private Task RaiseFailureEventAsync(string error);
}
[NoCacheAttribute]
internal class IdentityServer3.Core.Endpoints.IntrospectionEndpointController : ApiController {
    private static ILog Logger;
    private IdentityServerOptions _options;
    private IEventService _events;
    private ScopeSecretValidator _scopeSecretValidator;
    private IntrospectionRequestValidator _requestValidator;
    private IntrospectionResponseGenerator _generator;
    public IntrospectionEndpointController(IntrospectionRequestValidator requestValidator, IdentityServerOptions options, IEventService events, ScopeSecretValidator scopeSecretValidator, IntrospectionResponseGenerator generator);
    private static IntrospectionEndpointController();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IntrospectionEndpointController/<Post>d__0")]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> Post();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IntrospectionEndpointController/<ProcessRequest>d__7")]
internal Task`1<IHttpActionResult> ProcessRequest(NameValueCollection parameters, Scope scope);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IntrospectionEndpointController/<RaiseSuccessEventAsync>d__e")]
private Task RaiseSuccessEventAsync(string token, string tokenStatus, string scopeName);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.IntrospectionEndpointController/<RaiseFailureEventAsync>d__11")]
[DebuggerStepThroughAttribute]
private Task RaiseFailureEventAsync(string error, string token, string scopeName);
}
[NoCacheAttribute]
internal class IdentityServer3.Core.Endpoints.RevocationEndpointController : ApiController {
    private static ILog Logger;
    private IEventService _events;
    private ClientSecretValidator _clientValidator;
    private IdentityServerOptions _options;
    private TokenRevocationRequestValidator _requestValidator;
    private ITokenHandleStore _tokenHandles;
    private IRefreshTokenStore _refreshTokens;
    public RevocationEndpointController(IdentityServerOptions options, ClientSecretValidator clientValidator, TokenRevocationRequestValidator requestValidator, ITokenHandleStore tokenHandles, IRefreshTokenStore refreshTokens, IEventService events);
    private static RevocationEndpointController();
    [HttpPostAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.RevocationEndpointController/<Post>d__0")]
public Task`1<IHttpActionResult> Post();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.RevocationEndpointController/<ProcessAsync>d__a")]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> ProcessAsync(Client client, NameValueCollection parameters);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.RevocationEndpointController/<RevokeAccessTokenAsync>d__10")]
[DebuggerStepThroughAttribute]
private Task`1<bool> RevokeAccessTokenAsync(string handle, Client client);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.RevocationEndpointController/<RevokeRefreshTokenAsync>d__16")]
[DebuggerStepThroughAttribute]
private Task`1<bool> RevokeRefreshTokenAsync(string handle, Client client);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.RevocationEndpointController/<RaiseFailureEventAsync>d__1c")]
[DebuggerStepThroughAttribute]
private Task RaiseFailureEventAsync(string error);
}
[NoCacheAttribute]
[PreventUnsupportedRequestMediaTypesAttribute("False", "True")]
internal class IdentityServer3.Core.Endpoints.TokenEndpointController : ApiController {
    private static ILog Logger;
    private TokenResponseGenerator _generator;
    private TokenRequestValidator _requestValidator;
    private ClientSecretValidator _clientValidator;
    private IdentityServerOptions _options;
    private IEventService _events;
    public TokenEndpointController(IdentityServerOptions options, TokenRequestValidator requestValidator, ClientSecretValidator clientValidator, TokenResponseGenerator generator, IEventService events);
    private static TokenEndpointController();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.TokenEndpointController/<Post>d__0")]
[HttpPostAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> Post();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.TokenEndpointController/<ProcessAsync>d__7")]
public Task`1<IHttpActionResult> ProcessAsync(NameValueCollection parameters);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.TokenEndpointController/<RaiseFailureEventAsync>d__f")]
private Task RaiseFailureEventAsync(string error);
}
[NoCacheAttribute]
internal class IdentityServer3.Core.Endpoints.UserInfoEndpointController : ApiController {
    private static ILog Logger;
    private UserInfoResponseGenerator _generator;
    private TokenValidator _tokenValidator;
    private BearerTokenUsageValidator _tokenUsageValidator;
    private IdentityServerOptions _options;
    private IEventService _events;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, string> CS$<>9__CachedAnonymousMethodDelegate7;
    public UserInfoEndpointController(IdentityServerOptions options, TokenValidator tokenValidator, UserInfoResponseGenerator generator, BearerTokenUsageValidator tokenUsageValidator, IEventService events);
    private static UserInfoEndpointController();
    [HttpPostAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.UserInfoEndpointController/<GetUserInfo>d__8")]
[HttpGetAttribute]
[DebuggerStepThroughAttribute]
public Task`1<IHttpActionResult> GetUserInfo(HttpRequestMessage request);
    private IHttpActionResult Error(string error, string description);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.UserInfoEndpointController/<RaiseSuccessEventAsync>d__16")]
private Task RaiseSuccessEventAsync();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Endpoints.UserInfoEndpointController/<RaiseFailureEventAsync>d__19")]
private Task RaiseFailureEventAsync(string error);
    [CompilerGeneratedAttribute]
private static bool <GetUserInfo>b__0(Claim x);
    [CompilerGeneratedAttribute]
private static bool <GetUserInfo>b__1(Claim x);
    [CompilerGeneratedAttribute]
private static bool <GetUserInfo>b__2(Claim c);
    [CompilerGeneratedAttribute]
private static string <GetUserInfo>b__3(Claim c);
}
internal class IdentityServer3.Core.Endpoints.WelcomeController : ApiController {
    private static ILog Logger;
    private static WelcomeController();
    [HttpGetAttribute]
public IHttpActionResult Get();
}
public class IdentityServer3.Core.Events.AccessTokenIssuedDetails : TokenIssuedDetailsBase {
    [CompilerGeneratedAttribute]
private AccessTokenType <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceTokenHandle>k__BackingField;
    public AccessTokenType TokenType { get; public set; }
    public string ReferenceTokenHandle { get; public set; }
    [CompilerGeneratedAttribute]
public AccessTokenType get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(AccessTokenType value);
    [CompilerGeneratedAttribute]
public string get_ReferenceTokenHandle();
    [CompilerGeneratedAttribute]
public void set_ReferenceTokenHandle(string value);
}
public abstract class IdentityServer3.Core.Events.AuthenticationDetails : object {
    [CompilerGeneratedAttribute]
private string <SubjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string SubjectId { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SubjectId();
    [CompilerGeneratedAttribute]
public void set_SubjectId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class IdentityServer3.Core.Events.AuthorizationCodeDetails : TokenIssuedDetailsBase {
    [CompilerGeneratedAttribute]
private string <HandleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    public string HandleId { get; public set; }
    public string RedirectUri { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HandleId();
    [CompilerGeneratedAttribute]
public void set_HandleId(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
}
public class IdentityServer3.Core.Events.ClientAuthenticationDetails : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientType>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientType();
    [CompilerGeneratedAttribute]
public void set_ClientType(string value);
}
public class IdentityServer3.Core.Events.ClientPermissionsRevokedDetails : object {
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    public string Subject { get; public set; }
    public string Name { get; public set; }
    public string ClientId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
}
public class IdentityServer3.Core.Events.CspReportDetails : object {
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Report>k__BackingField;
    public string Subject { get; public set; }
    public string Name { get; public set; }
    public object Report { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Report();
    [CompilerGeneratedAttribute]
public void set_Report(object value);
}
public class IdentityServer3.Core.Events.EndpointDetail : object {
    [CompilerGeneratedAttribute]
private string <EndpointName>k__BackingField;
    public string EndpointName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EndpointName();
    [CompilerGeneratedAttribute]
public void set_EndpointName(string value);
}
public class IdentityServer3.Core.Events.Event`1 : object {
    [CompilerGeneratedAttribute]
private Func`1<T> <DetailsFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EventTypes <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private EventContext <Context>k__BackingField;
    [JsonIgnoreAttribute]
public Func`1<T> DetailsFunc { get; public set; }
    public string Category { get; public set; }
    public string Name { get; public set; }
    public EventTypes EventType { get; public set; }
    public int Id { get; public set; }
    public string Message { get; public set; }
    public T Details { get; public set; }
    public EventContext Context { get; public set; }
    public Event`1(string category, string name, EventTypes type, int id, string message);
    public Event`1(string category, string name, EventTypes type, int id, T details, string message);
    public Event`1(string category, string name, EventTypes type, int id, Func`1<T> detailsFunc, string message);
    [CompilerGeneratedAttribute]
public Func`1<T> get_DetailsFunc();
    [CompilerGeneratedAttribute]
public void set_DetailsFunc(Func`1<T> value);
    internal void Prepare();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public EventTypes get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(EventTypes value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public T get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(T value);
    [CompilerGeneratedAttribute]
public EventContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(EventContext value);
}
public static class IdentityServer3.Core.Events.EventConstants : object {
}
public class IdentityServer3.Core.Events.EventContext : object {
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectId>k__BackingField;
    public string ActivityId { get; public set; }
    public DateTimeOffset TimeStamp { get; public set; }
    public int ProcessId { get; public set; }
    public string MachineName { get; public set; }
    public string RemoteIpAddress { get; public set; }
    public string SubjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ActivityId();
    [CompilerGeneratedAttribute]
public void set_ActivityId(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_TimeStamp();
    [CompilerGeneratedAttribute]
public void set_TimeStamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
    [CompilerGeneratedAttribute]
public string get_RemoteIpAddress();
    [CompilerGeneratedAttribute]
public void set_RemoteIpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_SubjectId();
    [CompilerGeneratedAttribute]
public void set_SubjectId(string value);
}
public enum IdentityServer3.Core.Events.EventTypes : Enum {
    public int value__;
    public static EventTypes Success;
    public static EventTypes Failure;
    public static EventTypes Information;
    public static EventTypes Error;
}
public class IdentityServer3.Core.Events.ExternalLoginDetails : LoginDetails {
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    public string Provider { get; public set; }
    public string ProviderId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderId();
    [CompilerGeneratedAttribute]
public void set_ProviderId(string value);
}
public class IdentityServer3.Core.Events.IntrospectionEndpointDetail : EndpointDetail {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenStatus>k__BackingField;
    public string Token { get; public set; }
    public string ScopeName { get; public set; }
    public string TokenStatus { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_ScopeName();
    [CompilerGeneratedAttribute]
public void set_ScopeName(string value);
    [CompilerGeneratedAttribute]
public string get_TokenStatus();
    [CompilerGeneratedAttribute]
public void set_TokenStatus(string value);
}
public class IdentityServer3.Core.Events.LocalLoginDetails : LoginDetails {
    [CompilerGeneratedAttribute]
private string <LoginUserName>k__BackingField;
    public string LoginUserName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LoginUserName();
    [CompilerGeneratedAttribute]
public void set_LoginUserName(string value);
}
public class IdentityServer3.Core.Events.LoginDetails : AuthenticationDetails {
    [CompilerGeneratedAttribute]
private string <SignInId>k__BackingField;
    [CompilerGeneratedAttribute]
private SignInMessage <SignInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PartialLogin>k__BackingField;
    public string SignInId { get; public set; }
    public SignInMessage SignInMessage { get; public set; }
    public bool PartialLogin { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SignInId();
    [CompilerGeneratedAttribute]
public void set_SignInId(string value);
    [CompilerGeneratedAttribute]
public SignInMessage get_SignInMessage();
    [CompilerGeneratedAttribute]
public void set_SignInMessage(SignInMessage value);
    [CompilerGeneratedAttribute]
public bool get_PartialLogin();
    [CompilerGeneratedAttribute]
public void set_PartialLogin(bool value);
}
public class IdentityServer3.Core.Events.LogoutDetails : AuthenticationDetails {
    [CompilerGeneratedAttribute]
private string <SignOutId>k__BackingField;
    [CompilerGeneratedAttribute]
private SignOutMessage <SignOutMessage>k__BackingField;
    public string SignOutId { get; public set; }
    public SignOutMessage SignOutMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SignOutId();
    [CompilerGeneratedAttribute]
public void set_SignOutId(string value);
    [CompilerGeneratedAttribute]
public SignOutMessage get_SignOutMessage();
    [CompilerGeneratedAttribute]
public void set_SignOutMessage(SignOutMessage value);
}
public class IdentityServer3.Core.Events.RefreshTokenDetails : TokenIssuedDetailsBase {
    [CompilerGeneratedAttribute]
private string <HandleId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public string HandleId { get; public set; }
    public int Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HandleId();
    [CompilerGeneratedAttribute]
public void set_HandleId(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
}
public class IdentityServer3.Core.Events.RefreshTokenRefreshDetails : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lifetime>k__BackingField;
    public string ClientId { get; public set; }
    public string OldHandle { get; public set; }
    public string NewHandle { get; public set; }
    public int Lifetime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_OldHandle();
    [CompilerGeneratedAttribute]
public void set_OldHandle(string value);
    [CompilerGeneratedAttribute]
public string get_NewHandle();
    [CompilerGeneratedAttribute]
public void set_NewHandle(string value);
    [CompilerGeneratedAttribute]
public int get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(int value);
}
public class IdentityServer3.Core.Events.SigningCertificateDetail : object {
    [CompilerGeneratedAttribute]
private string <SigningCertificateName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <SigningCertificateExpiration>k__BackingField;
    public string SigningCertificateName { get; public set; }
    public DateTimeOffset SigningCertificateExpiration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SigningCertificateName();
    [CompilerGeneratedAttribute]
public void set_SigningCertificateName(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_SigningCertificateExpiration();
    [CompilerGeneratedAttribute]
public void set_SigningCertificateExpiration(DateTimeOffset value);
}
public class IdentityServer3.Core.Events.TokenIssuedDetailsBase : object {
    [CompilerGeneratedAttribute]
private string <SubjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Claims>k__BackingField;
    public string SubjectId { get; public set; }
    public string ClientId { get; public set; }
    public IEnumerable`1<string> Scopes { get; public set; }
    public int Lifetime { get; public set; }
    public Dictionary`2<string, object> Claims { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SubjectId();
    [CompilerGeneratedAttribute]
public void set_SubjectId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public int get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(int value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(Dictionary`2<string, object> value);
}
public class IdentityServer3.Core.Events.TokenRevokedDetails : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectId>k__BackingField;
    public string Token { get; public set; }
    public string TokenType { get; public set; }
    public string SubjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_SubjectId();
    [CompilerGeneratedAttribute]
public void set_SubjectId(string value);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.AuthorizeResponseExtensions : object {
    [ExtensionAttribute]
public static NameValueCollection ToNameValueCollection(AuthorizeResponse response);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.ClaimExtensions : object {
    [ExtensionAttribute]
public static bool HasValue(Claim claim);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.ClaimListExtensions : object {
    private static ILog Logger;
    private static ClaimListExtensions();
    [ExtensionAttribute]
public static Dictionary`2<string, object> ToClaimsDictionary(IEnumerable`1<Claim> claims);
    private static object GetValue(Claim claim);
}
internal static class IdentityServer3.Core.Extensions.DateTimeHelper : object {
    internal static DateTime UtcNow { get; }
    internal static DateTime get_UtcNow();
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.DateTimeOffsetExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool HasExceeded(DateTimeOffset creationTime, int seconds);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static int GetLifetimeInSeconds(DateTimeOffset creationTime);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool HasExpired(Nullable`1<DateTimeOffset> expirationTime);
}
internal static class IdentityServer3.Core.Extensions.DateTimeOffsetHelper : object {
    internal static Func`1<DateTimeOffset> UtcNowFunc;
    [CompilerGeneratedAttribute]
private static Func`1<DateTimeOffset> CS$<>9__CachedAnonymousMethodDelegate1;
    internal static DateTimeOffset UtcNow { get; }
    private static DateTimeOffsetHelper();
    internal static DateTimeOffset get_UtcNow();
    [CompilerGeneratedAttribute]
private static DateTimeOffset <.cctor>b__0();
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.HttpRequestMessageExtensions : object {
    private static string SuppressXfo;
    private static string AllowedCspFrameOrigins;
    [ExtensionAttribute]
public static string GetIdentityServerBaseUrl(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetSuppressXfo(HttpRequestMessage request);
    [ExtensionAttribute]
public static bool GetSuppressXfo(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetAllowedCspFrameOrigins(HttpRequestMessage request, IEnumerable`1<string> origins);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetAllowedCspFrameOrigins(HttpRequestMessage request);
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Extensions.ICacheExtensions : object {
    private static ILog Logger;
    private static ICacheExtensions();
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.ICacheExtensions/<GetAsync>d__0`1")]
public static Task`1<T> GetAsync(ICache`1<T> cache, string key, Func`1<Task`1<T>> get);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.IClientStoreExtensions : object {
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IClientStoreExtensions/<GetIdentityProviderRestrictionsAsync>d__0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static Task`1<IEnumerable`1<string>> GetIdentityProviderRestrictionsAsync(IClientStore store, string clientId);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IClientStoreExtensions/<IsValidIdentityProviderAsync>d__4")]
internal static Task`1<bool> IsValidIdentityProviderAsync(IClientStore store, string clientId, string provider);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IClientStoreExtensions/<GetClientName>d__8")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static Task`1<string> GetClientName(IClientStore store, SignOutMessage signOutMessage);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.IContainerExtensions : object {
    [ExtensionAttribute]
internal static ILifetimeScope CreateScopeWithEmptyOwinContext(IContainer container);
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Extensions.IDataProtectorExtensions : object {
    [ExtensionAttribute]
public static string Protect(IDataProtector protector, string data, string entropy);
    [ExtensionAttribute]
public static string Unprotect(IDataProtector protector, string data, string entropy);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.IEventServiceExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaisePreLoginSuccessEventAsync>d__1")]
public static Task RaisePreLoginSuccessEventAsync(IEventService events, string signInMessageId, SignInMessage signInMessage, AuthenticateResult authResult);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaisePreLoginFailureEventAsync>d__6")]
[DebuggerStepThroughAttribute]
public static Task RaisePreLoginFailureEventAsync(IEventService events, string signInMessageId, SignInMessage signInMessage, string error);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseLocalLoginSuccessEventAsync>d__b")]
[DebuggerStepThroughAttribute]
public static Task RaiseLocalLoginSuccessEventAsync(IEventService events, string username, string signInMessageId, SignInMessage signInMessage, AuthenticateResult authResult);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseLocalLoginFailureEventAsync>d__10")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseLocalLoginFailureEventAsync(IEventService events, string username, string signInMessageId, SignInMessage signInMessage, string error);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseExternalLoginSuccessEventAsync>d__15")]
[DebuggerStepThroughAttribute]
public static Task RaiseExternalLoginSuccessEventAsync(IEventService events, ExternalIdentity externalIdentity, string signInMessageId, SignInMessage signInMessage, AuthenticateResult authResult);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseExternalLoginFailureEventAsync>d__1a")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseExternalLoginFailureEventAsync(IEventService events, ExternalIdentity externalIdentity, string signInMessageId, SignInMessage signInMessage, string error);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseExternalLoginErrorEventAsync>d__1e")]
[DebuggerStepThroughAttribute]
public static Task RaiseExternalLoginErrorEventAsync(IEventService events, string error);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseSuccessfulResourceOwnerFlowAuthenticationEventAsync>d__23")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseSuccessfulResourceOwnerFlowAuthenticationEventAsync(IEventService events, string userName, string subjectId, SignInMessage message);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseFailedResourceOwnerFlowAuthenticationEventAsync>d__28")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task RaiseFailedResourceOwnerFlowAuthenticationEventAsync(IEventService events, string userName, SignInMessage message, string error);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaisePartialLoginCompleteEventAsync>d__2d")]
[DebuggerStepThroughAttribute]
public static Task RaisePartialLoginCompleteEventAsync(IEventService events, ClaimsIdentity subject, string signInMessageId, SignInMessage signInMessage);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseLogoutEventAsync>d__32")]
public static Task RaiseLogoutEventAsync(IEventService events, ClaimsPrincipal subject, string signOutId, SignOutMessage signOutMessage);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseCspReportEventAsync>d__3a")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task RaiseCspReportEventAsync(IEventService events, string report, ClaimsPrincipal user);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseClientPermissionsRevokedEventAsync>d__3e")]
public static Task RaiseClientPermissionsRevokedEventAsync(IEventService events, ClaimsPrincipal user, string clientId);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseTokenIssuedEventAsync>d__42")]
[DebuggerStepThroughAttribute]
public static Task RaiseTokenIssuedEventAsync(IEventService events, Token token, string rawToken);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseAccessTokenIssuedEventAsync>d__49")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseAccessTokenIssuedEventAsync(IEventService events, Token token, string rawToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseIdentityTokenIssuedEventAsync>d__51")]
[ExtensionAttribute]
public static Task RaiseIdentityTokenIssuedEventAsync(IEventService events, Token token);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseAuthorizationCodeIssuedEventAsync>d__59")]
public static Task RaiseAuthorizationCodeIssuedEventAsync(IEventService events, string id, AuthorizationCode code);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseRefreshTokenIssuedEventAsync>d__61")]
public static Task RaiseRefreshTokenIssuedEventAsync(IEventService events, string id, RefreshToken token);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseSuccessfulRefreshTokenRefreshEventAsync>d__66")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseSuccessfulRefreshTokenRefreshEventAsync(IEventService events, string oldHandle, string newHandle, RefreshToken token);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseTokenRevokedEventAsync>d__6b")]
public static Task RaiseTokenRevokedEventAsync(IEventService events, string subjectId, string token, string tokenType);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseUnhandledExceptionEventAsync>d__6f")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseUnhandledExceptionEventAsync(IEventService events, Exception exception);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseSuccessfulClientAuthenticationEventAsync>d__74")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task RaiseSuccessfulClientAuthenticationEventAsync(IEventService events, string clientId, string clientType);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseFailureClientAuthenticationEventAsync>d__79")]
public static Task RaiseFailureClientAuthenticationEventAsync(IEventService events, string message, string clientId, string clientType);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseSuccessfulEndpointEventAsync>d__7e")]
[DebuggerStepThroughAttribute]
public static Task RaiseSuccessfulEndpointEventAsync(IEventService events, string endpointName);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseFailureEndpointEventAsync>d__83")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseFailureEndpointEventAsync(IEventService events, string endpointName, string error);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseSuccessfulIntrospectionEndpointEventAsync>d__88")]
[DebuggerStepThroughAttribute]
public static Task RaiseSuccessfulIntrospectionEndpointEventAsync(IEventService events, string token, string tokenStatus, string scopeName);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseFailureIntrospectionEndpointEventAsync>d__8d")]
public static Task RaiseFailureIntrospectionEndpointEventAsync(IEventService events, string error, string token, string scopeName);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseFailedAuthorizationCodeRedeemedEventAsync>d__92")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseFailedAuthorizationCodeRedeemedEventAsync(IEventService events, Client client, string handle, string error);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseSuccessAuthorizationCodeRedeemedEventAsync>d__97")]
public static Task RaiseSuccessAuthorizationCodeRedeemedEventAsync(IEventService events, Client client, string handle);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseFailedRefreshTokenRefreshEventAsync>d__9c")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task RaiseFailedRefreshTokenRefreshEventAsync(IEventService events, Client client, string handle, string error);
    [ExtensionAttribute]
public static Task RaiseSuccessRefreshTokenRefreshEventAsync(IEventService events, Client client, string handle);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseNoCertificateConfiguredEventAsync>d__a0")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task RaiseNoCertificateConfiguredEventAsync(IEventService events);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseCertificatePrivateKeyNotAccessibleEventAsync>d__a5")]
[ExtensionAttribute]
public static Task RaiseCertificatePrivateKeyNotAccessibleEventAsync(IEventService events, X509Certificate2 cert);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseCertificateKeyLengthTooShortEventAsync>d__aa")]
public static Task RaiseCertificateKeyLengthTooShortEventAsync(IEventService events, X509Certificate2 cert);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseCertificateExpiringSoonEventAsync>d__af")]
public static Task RaiseCertificateExpiringSoonEventAsync(IEventService events, X509Certificate2 cert);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseCertificateValidatedEventAsync>d__b4")]
public static Task RaiseCertificateValidatedEventAsync(IEventService events, X509Certificate2 cert);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.IEventServiceExtensions/<RaiseEventAsync>d__b8`1")]
[DebuggerStepThroughAttribute]
private static Task RaiseEventAsync(IEventService events, Event`1<T> evt);
    private static string ObfuscateToken(string token);
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Extensions.ILocalizationServiceExtensions : object {
    [ExtensionAttribute]
public static string GetMessage(ILocalizationService localization, string id);
    [ExtensionAttribute]
public static string GetEvent(ILocalizationService localization, string id);
    [ExtensionAttribute]
public static string GetScopeDisplayName(ILocalizationService localization, string scope);
    [ExtensionAttribute]
public static string GetScopeDescription(ILocalizationService localization, string scope);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.InternalOwinExtensions : object {
    private static string SignOutMessageCookieIdtoRemove;
    private static string QueueRenderLoggedOutPageFlag;
    private static string SuppressAntiForgeryCheck;
    [CompilerGeneratedAttribute]
private static Func`2<AuthenticationDescription, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<LoginPageLink, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [ExtensionAttribute]
public static string GetRequestId(IOwinContext context);
    [ExtensionAttribute]
public static void SetRequestId(IDictionary`2<string, object> env, string id);
    [ExtensionAttribute]
public static void SetIdentityServerHost(IDictionary`2<string, object> env, string value);
    [ExtensionAttribute]
public static void SetIdentityServerBasePath(IDictionary`2<string, object> env, string value);
    [ExtensionAttribute]
public static T ResolveDependency(IOwinContext context);
    [ExtensionAttribute]
public static object ResolveDependency(IOwinContext context, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<AuthenticationDescription> GetExternalAuthenticationProviders(IOwinContext context, IEnumerable`1<string> filter);
    [ExtensionAttribute]
public static bool IsValidExternalAuthenticationProvider(IOwinContext context, string name);
    [ExtensionAttribute]
public static IEnumerable`1<LoginPageLink> GetLinksFromProviders(IOwinContext context, IEnumerable`1<AuthenticationDescription> types, string signInMessageId);
    [ExtensionAttribute]
public static IEnumerable`1<LoginPageLink> FilterHiddenLinks(IEnumerable`1<LoginPageLink> links);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<GetAuthenticationFrom>d__10")]
public static Task`1<AuthenticateResult> GetAuthenticationFrom(IOwinContext context, string authenticationType);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<GetIdentityFrom>d__13")]
public static Task`1<ClaimsIdentity> GetIdentityFrom(IOwinContext context, string authenticationType);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<GetIdentityFromPartialSignIn>d__17")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<ClaimsIdentity> GetIdentityFromPartialSignIn(IOwinContext context);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<GetPartialLoginRememberMeAsync>d__1a")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task`1<Nullable`1<bool>> GetPartialLoginRememberMeAsync(IOwinContext context);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<GetIdentityFromExternalSignIn>d__1e")]
[DebuggerStepThroughAttribute]
public static Task`1<ClaimsIdentity> GetIdentityFromExternalSignIn(IOwinContext context);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<GetSignInIdFromExternalProvider>d__21")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task`1<string> GetSignInIdFromExternalProvider(IOwinContext context);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<GetIdentityFromExternalProvider>d__28")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task`1<ClaimsIdentity> GetIdentityFromExternalProvider(IOwinContext context);
    [ExtensionAttribute]
public static string GetCspReportUrl(IOwinContext context);
    [ExtensionAttribute]
public static string GetPartialLoginRestartUrl(IOwinContext context, string signinId);
    [ExtensionAttribute]
public static string GetPartialLoginResumeUrl(IOwinContext context, string resumeId);
    [ExtensionAttribute]
public static string GetPermissionsPageUrl(IOwinContext context);
    [ExtensionAttribute]
public static string GetExternalProviderLoginUrl(IOwinContext context, string provider, string signinId);
    [ExtensionAttribute]
public static string GetIdentityServerHost(IOwinContext context);
    [ExtensionAttribute]
public static string GetIdentityServerBasePath(IOwinContext context);
    [ExtensionAttribute]
public static string GetIdentityServerBaseUrl(IOwinContext context);
    [ExtensionAttribute]
public static string GetIdentityServerIssuerUri(IOwinContext context);
    [ExtensionAttribute]
public static string GetIdentityServerLogoutUrl(IOwinContext context);
    [ExtensionAttribute]
public static string GetCurrentUserDisplayName(IOwinContext context);
    [ExtensionAttribute]
public static string CreateSignInRequest(IOwinContext context, SignInMessage message);
    [ExtensionAttribute]
public static bool IsFormData(IOwinRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<ReadRequestFormAsync>d__2f")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task`1<IFormCollection> ReadRequestFormAsync(IOwinContext context);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<ReadBodyAsStringAsync>d__35")]
[DebuggerStepThroughAttribute]
public static Task`1<string> ReadBodyAsStringAsync(IOwinRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<ReadBodyAsStringAsync>d__3c")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task`1<string> ReadBodyAsStringAsync(IOwinResponse response);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<ReadRequestFormAsNameValueCollectionAsync>d__43")]
[ExtensionAttribute]
public static Task`1<NameValueCollection> ReadRequestFormAsNameValueCollectionAsync(IOwinContext context);
    [ExtensionAttribute]
public static void QueueRemovalOfSignOutMessageCookie(IOwinContext context, string id);
    [ExtensionAttribute]
public static void ProcessRemovalOfSignOutMessageCookie(IOwinContext context, MessageCookie`1<SignOutMessage> signOutMessageCookie);
    [ExtensionAttribute]
public static void QueueRenderLoggedOutPage(IOwinContext context, string signOutMessageId);
    [ExtensionAttribute]
public static bool ShouldRenderLoggedOutPage(IOwinContext context);
    [ExtensionAttribute]
public static void PrepareContextForLoggedOutPage(IOwinContext context);
    [ExtensionAttribute]
public static void SetSuppressAntiForgeryCheck(IOwinContext context);
    [ExtensionAttribute]
public static bool GetSuppressAntiForgeryCheck(IOwinContext context);
    [ExtensionAttribute]
public static void ClearAuthenticationCookies(IOwinContext context);
    [ExtensionAttribute]
public static void SignOutOfExternalIdP(IOwinContext context, string signOutId);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.InternalOwinExtensions/<CallUserServiceSignOutAsync>d__49")]
public static Task CallUserServiceSignOutAsync(IOwinContext context, string clientId);
    [CompilerGeneratedAttribute]
private static bool <GetExternalAuthenticationProviders>b__0(AuthenticationDescription x);
    [CompilerGeneratedAttribute]
private static bool <FilterHiddenLinks>b__e(LoginPageLink x);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.JwtSecurityTokenExtensions : object {
    [ExtensionAttribute]
public static X509Certificate2 GetCertificateFromToken(JwtSecurityToken securityToken);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.LoginPageLinkExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<LoginPageLink> Render(IEnumerable`1<LoginPageLink> links, string baseUrl, string signinId);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.ModelStateDictionaryExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, ModelState>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, ModelState>, IEnumerable`1<ModelError>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`3<KeyValuePair`2<string, ModelState>, ModelError, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [ExtensionAttribute]
public static IEnumerable`1<string> GetErrors(ModelStateDictionary modelState);
    [ExtensionAttribute]
public static string GetError(ModelStateDictionary modelState);
    [CompilerGeneratedAttribute]
private static bool <GetErrors>b__1(KeyValuePair`2<string, ModelState> item);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ModelError> <GetErrors>b__2(KeyValuePair`2<string, ModelState> item);
    [CompilerGeneratedAttribute]
private static string <GetErrors>b__3(KeyValuePair`2<string, ModelState> item, ModelError err);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.NameValueCollectionExtensions : object {
    [ExtensionAttribute]
public static string ToQueryString(NameValueCollection collection);
    [ExtensionAttribute]
public static string ToFormPost(NameValueCollection collection);
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToDictionary(NameValueCollection collection);
    internal static string ConvertFormUrlEncodedSpacesToUrlEncodedSpaces(string str);
    private static bool AppendNameValuePair(StringBuilder builder, bool first, bool urlEncode, string name, string value);
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Extensions.OwinEnvironmentExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, string> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, string> CS$<>9__CachedAnonymousMethodDelegate28;
    [ExtensionAttribute]
public static string GetIdentityServerHost(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string GetIdentityServerBasePath(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string GetIdentityServerBaseUrl(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string GetIdentityServerLogoutUrl(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string GetCurrentUserDisplayName(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string CreateSignInRequest(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string CreateSignInRequest(IDictionary`2<string, object> env, SignInMessage message);
    [ExtensionAttribute]
public static void IssueLoginCookie(IDictionary`2<string, object> env, AuthenticatedLogin login);
    [ExtensionAttribute]
public static string CreateSignOutRequest(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string CreateSignOutRequest(IDictionary`2<string, object> env, SignOutMessage message);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<UpdatePartialLoginClaimsAsync>d__10")]
public static Task UpdatePartialLoginClaimsAsync(IDictionary`2<string, object> env, IEnumerable`1<Claim> claims);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<UpdatePartialLoginClaimsAsync>d__18")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task UpdatePartialLoginClaimsAsync(IDictionary`2<string, object> env, string subject, string name, IEnumerable`1<Claim> claims, string identityProvider, string authenticationMethod);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<GetPartialLoginRestartUrlAsync>d__20")]
[DebuggerStepThroughAttribute]
public static Task`1<string> GetPartialLoginRestartUrlAsync(IDictionary`2<string, object> env);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<GetPartialLoginResumeUrlAsync>d__29")]
[DebuggerStepThroughAttribute]
public static Task`1<string> GetPartialLoginResumeUrlAsync(IDictionary`2<string, object> env);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<GetPartialLoginRememberMeAsync>d__2e")]
public static Task`1<Nullable`1<bool>> GetPartialLoginRememberMeAsync(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static SignInMessage GetSignInMessage(IDictionary`2<string, object> env, string id);
    [ExtensionAttribute]
public static SignInMessage GetSignInMessage(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string GetSignOutMessageId(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static SignOutMessage GetSignOutMessage(IDictionary`2<string, object> env, string id);
    [ExtensionAttribute]
public static SignOutMessage GetSignOutMessage(IDictionary`2<string, object> env);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<GetIdentityServerFullLoginAsync>d__32")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task`1<ClaimsIdentity> GetIdentityServerFullLoginAsync(IDictionary`2<string, object> env);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<GetIdentityServerPartialLoginAsync>d__36")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static Task`1<ClaimsIdentity> GetIdentityServerPartialLoginAsync(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static void RemovePartialLoginCookie(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string GetRequestId(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static void SetIdentityServerOrigin(IDictionary`2<string, object> env, string origin);
    [ExtensionAttribute]
public static string GetIdentityServerOrigin(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static T ResolveDependency(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static object ResolveDependency(IDictionary`2<string, object> env, Type type);
    [ExtensionAttribute]
public static Task RenderLoggedOutViewAsync(IDictionary`2<string, object> env, string signOutMessageId);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<ProcessFederatedSignoutAsync>d__3a")]
public static Task ProcessFederatedSignoutAsync(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static string GetIdentityServerIssuerUri(IDictionary`2<string, object> env);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetClientIdsForCurrentAuthenticationSession(IDictionary`2<string, object> env);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Extensions.OwinEnvironmentExtensions/<IssueClientToken>d__46")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<string> IssueClientToken(IDictionary`2<string, object> env, string clientId, string scope, int lifetime, List`1<Claim> extraClaims);
    [CompilerGeneratedAttribute]
private static bool <IssueLoginCookie>b__0(Claim x);
    [CompilerGeneratedAttribute]
private static bool <IssueLoginCookie>b__1(Claim x);
    [CompilerGeneratedAttribute]
private static bool <UpdatePartialLoginClaimsAsync>b__4(Claim c);
    [CompilerGeneratedAttribute]
private static bool <UpdatePartialLoginClaimsAsync>b__5(Claim c);
    [CompilerGeneratedAttribute]
private static bool <UpdatePartialLoginClaimsAsync>b__6(Claim c);
    [CompilerGeneratedAttribute]
private static bool <UpdatePartialLoginClaimsAsync>b__7(Claim c);
    [CompilerGeneratedAttribute]
private static bool <UpdatePartialLoginClaimsAsync>b__8(Claim c);
    [CompilerGeneratedAttribute]
private static bool <UpdatePartialLoginClaimsAsync>b__9(Claim x);
    [CompilerGeneratedAttribute]
private static bool <GetPartialLoginRestartUrlAsync>b__1c(Claim x);
    [CompilerGeneratedAttribute]
private static string <GetPartialLoginRestartUrlAsync>b__1d(Claim x);
    [CompilerGeneratedAttribute]
private static bool <GetPartialLoginResumeUrlAsync>b__25(Claim x);
    [CompilerGeneratedAttribute]
private static string <GetPartialLoginResumeUrlAsync>b__26(Claim x);
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Extensions.PrincipalExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static DateTimeOffset GetAuthenticationTime(IPrincipal principal);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static long GetAuthenticationTimeEpoch(IPrincipal principal);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static long GetAuthenticationTimeEpoch(IIdentity identity);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetSubjectId(IPrincipal principal);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetSubjectId(IIdentity identity);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static string GetName(IPrincipal principal);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetName(IIdentity identity);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetAuthenticationMethod(IPrincipal principal);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IEnumerable`1<Claim> GetAuthenticationMethods(IPrincipal principal);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetAuthenticationMethod(IIdentity identity);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IEnumerable`1<Claim> GetAuthenticationMethods(IIdentity identity);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static string GetIdentityProvider(IPrincipal principal);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetIdentityProvider(IIdentity identity);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.ResultExtensions : object {
    [ExtensionAttribute]
public static IHttpActionResult TokenResponse(ApiController controller, TokenResponse response);
    [ExtensionAttribute]
public static IHttpActionResult TokenErrorResponse(ApiController controller, string error);
    [ExtensionAttribute]
public static IHttpActionResult TokenErrorResponse(ApiController controller, string error, string errorDescription);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.ScopeExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Scope, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static string ToSpaceSeparatedString(IEnumerable`1<Scope> scopes);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IEnumerable`1<string> ToStringList(IEnumerable`1<Scope> scopes);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool IncludesAllClaimsForUserRule(IEnumerable`1<Scope> scopes, ScopeType type);
    [CompilerGeneratedAttribute]
private static string <ToSpaceSeparatedString>b__0(Scope s);
    [CompilerGeneratedAttribute]
private static string <ToStringList>b__2(Scope s);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.StringExtensions : object {
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static string ToSpaceSeparatedString(IEnumerable`1<string> list);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IEnumerable`1<string> FromSpaceSeparatedString(string input);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static bool IsMissing(string value);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool IsMissingOrTooLong(string value, int maxLength);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static bool IsPresent(string value);
    [ExtensionAttribute]
public static string EnsureTrailingSlash(string url);
    [ExtensionAttribute]
public static string RemoveLeadingSlash(string url);
    [ExtensionAttribute]
public static string RemoveTrailingSlash(string url);
    [ExtensionAttribute]
public static string CleanUrlPath(string url);
    [ExtensionAttribute]
public static string AddQueryString(string url, string query);
    [ExtensionAttribute]
public static string AddHashFragment(string url, string query);
    [ExtensionAttribute]
public static string GetOrigin(string url);
    [ExtensionAttribute]
public static Stream ToStream(string s);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.ValidatedAuthorizeRequestExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Scope, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [ExtensionAttribute]
public static IEnumerable`1<ConsentScopeViewModel> GetIdentityScopes(ValidatedAuthorizeRequest validatedRequest, ILocalizationService localizationService);
    [ExtensionAttribute]
public static IEnumerable`1<ConsentScopeViewModel> GetResourceScopes(ValidatedAuthorizeRequest validatedRequest, ILocalizationService localizationService);
    [ExtensionAttribute]
public static IEnumerable`1<ConsentScopeViewModel> ToConsentScopeViewModel(IEnumerable`1<Scope> scopes, IEnumerable`1<string> selected, ILocalizationService localizationService);
    [ExtensionAttribute]
internal static bool HasIdpAcrValue(ValidatedAuthorizeRequest request);
    [CompilerGeneratedAttribute]
private static bool <GetIdentityScopes>b__0(Scope x);
    [CompilerGeneratedAttribute]
private static string <GetIdentityScopes>b__1(Scope x);
    [CompilerGeneratedAttribute]
private static bool <GetResourceScopes>b__4(Scope x);
    [CompilerGeneratedAttribute]
private static string <GetResourceScopes>b__5(Scope x);
    [CompilerGeneratedAttribute]
private static bool <HasIdpAcrValue>b__c(string x);
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Extensions.X509Certificate2Extensions : object {
    [ExtensionAttribute]
public static bool IsPrivateAccessAllowed(X509Certificate2 cert);
}
public static class IdentityServer3.Core.IdentityServerPrincipal : object {
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public static ClaimsPrincipal Create(string subject, string displayName, string authenticationMethod, string idp, string authenticationType, long authenticationTime);
    public static ClaimsPrincipal CreateFromPrincipal(ClaimsPrincipal principal, string authenticationType);
    public static ClaimsPrincipal FromSubjectId(string subjectId, IEnumerable`1<Claim> additionalClaims);
    public static ClaimsPrincipal FromClaims(IEnumerable`1<Claim> claims, bool allowMissing);
    [CompilerGeneratedAttribute]
private static bool <FromClaims>b__2(Claim c);
    [CompilerGeneratedAttribute]
private static bool <FromClaims>b__3(Claim c);
    [CompilerGeneratedAttribute]
private static bool <FromClaims>b__4(Claim c);
    [CompilerGeneratedAttribute]
private static bool <FromClaims>b__5(Claim c);
}
internal class IdentityServer3.Core.Logging.AuthorizeRequestValidationLog : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedRedirectUris>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Flows <Flow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UiLocales>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AuthenticationContextReferenceClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PromptMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginHint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeChallengeMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Raw>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientName { get; public set; }
    public string RedirectUri { get; public set; }
    public IEnumerable`1<string> AllowedRedirectUris { get; public set; }
    public string SubjectId { get; public set; }
    public string ResponseType { get; public set; }
    public string ResponseMode { get; public set; }
    public Flows Flow { get; public set; }
    public string RequestedScopes { get; public set; }
    public string State { get; public set; }
    public string UiLocales { get; public set; }
    public string Nonce { get; public set; }
    public IEnumerable`1<string> AuthenticationContextReferenceClasses { get; public set; }
    public string DisplayMode { get; public set; }
    public string PromptMode { get; public set; }
    public Nullable`1<int> MaxAge { get; public set; }
    public string LoginHint { get; public set; }
    public string SessionId { get; public set; }
    public string CodeChallengeMethod { get; public set; }
    public Dictionary`2<string, string> Raw { get; public set; }
    public AuthorizeRequestValidationLog(ValidatedAuthorizeRequest request);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedRedirectUris();
    [CompilerGeneratedAttribute]
public void set_AllowedRedirectUris(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_SubjectId();
    [CompilerGeneratedAttribute]
public void set_SubjectId(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseType();
    [CompilerGeneratedAttribute]
public void set_ResponseType(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseMode();
    [CompilerGeneratedAttribute]
public void set_ResponseMode(string value);
    [CompilerGeneratedAttribute]
public Flows get_Flow();
    [CompilerGeneratedAttribute]
public void set_Flow(Flows value);
    [CompilerGeneratedAttribute]
public string get_RequestedScopes();
    [CompilerGeneratedAttribute]
public void set_RequestedScopes(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public string get_UiLocales();
    [CompilerGeneratedAttribute]
public void set_UiLocales(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AuthenticationContextReferenceClasses();
    [CompilerGeneratedAttribute]
public void set_AuthenticationContextReferenceClasses(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_DisplayMode();
    [CompilerGeneratedAttribute]
public void set_DisplayMode(string value);
    [CompilerGeneratedAttribute]
public string get_PromptMode();
    [CompilerGeneratedAttribute]
public void set_PromptMode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_LoginHint();
    [CompilerGeneratedAttribute]
public void set_LoginHint(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_CodeChallengeMethod();
    [CompilerGeneratedAttribute]
public void set_CodeChallengeMethod(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(Dictionary`2<string, string> value);
}
internal class IdentityServer3.Core.Logging.ClientValidationLog : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCredentialType>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientName { get; public set; }
    public string ClientCredentialType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCredentialType();
    [CompilerGeneratedAttribute]
public void set_ClientCredentialType(string value);
}
internal class IdentityServer3.Core.Logging.EndSessionRequestValidationLog : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostLogOutUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Raw>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientName { get; public set; }
    public string SubjectId { get; public set; }
    public string PostLogOutUri { get; public set; }
    public string State { get; public set; }
    public Dictionary`2<string, string> Raw { get; public set; }
    public EndSessionRequestValidationLog(ValidatedEndSessionRequest request);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_SubjectId();
    [CompilerGeneratedAttribute]
public void set_SubjectId(string value);
    [CompilerGeneratedAttribute]
public string get_PostLogOutUri();
    [CompilerGeneratedAttribute]
public void set_PostLogOutUri(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(Dictionary`2<string, string> value);
}
public interface IdentityServer3.Core.Logging.ILog {
    public abstract virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
}
public interface IdentityServer3.Core.Logging.ILogProvider {
    public abstract virtual Logger GetLogger(string name);
    public abstract virtual IDisposable OpenNestedContext(string message);
    public abstract virtual IDisposable OpenMappedContext(string key, string value);
}
internal class IdentityServer3.Core.Logging.LibLogKatanaLoggerFactory : object {
    public sealed virtual ILogger Create(string name);
}
internal class IdentityServer3.Core.Logging.LibLogTraceListener : TraceListener {
    private static ILog Logger;
    private static LibLogTraceListener();
    public virtual void WriteLine(string message);
    public virtual void Write(string message);
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Logging.LogExtensions : object {
    [ExtensionAttribute]
public static bool IsDebugEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsErrorEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsFatalEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsInfoEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsTraceEnabled(ILog logger);
    [ExtensionAttribute]
public static bool IsWarnEnabled(ILog logger);
    [ExtensionAttribute]
public static void Debug(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Debug(ILog logger, string message);
    [ExtensionAttribute]
public static void DebugFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void DebugException(ILog logger, string message, Exception exception);
    [ExtensionAttribute]
public static void DebugException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Error(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Error(ILog logger, string message);
    [ExtensionAttribute]
public static void ErrorFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void ErrorException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Fatal(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Fatal(ILog logger, string message);
    [ExtensionAttribute]
public static void FatalFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void FatalException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Info(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Info(ILog logger, string message);
    [ExtensionAttribute]
public static void InfoFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void InfoException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Trace(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Trace(ILog logger, string message);
    [ExtensionAttribute]
public static void TraceFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void TraceException(ILog logger, string message, Exception exception, Object[] formatParams);
    [ExtensionAttribute]
public static void Warn(ILog logger, Func`1<string> messageFunc);
    [ExtensionAttribute]
public static void Warn(ILog logger, string message);
    [ExtensionAttribute]
public static void WarnFormat(ILog logger, string message, Object[] args);
    [ExtensionAttribute]
public static void WarnException(ILog logger, string message, Exception exception, Object[] formatParams);
    private static void GuardAgainstNullLogger(ILog logger);
    [ExtensionAttribute]
private static void LogFormat(ILog logger, LogLevel logLevel, string message, Object[] args);
    [ExtensionAttribute]
private static Func`1<T> AsFunc(T value);
    [ExtensionAttribute]
private static T Return(T value);
}
public class IdentityServer3.Core.Logging.Logger : MulticastDelegate {
    public Logger(object object, IntPtr method);
    public virtual bool Invoke(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
    public virtual IAsyncResult BeginInvoke(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class IdentityServer3.Core.Logging.LoggerExecutionWrapper : object {
    internal static string FailedToGenerateLogMessage;
    private Logger _logger;
    private Func`1<bool> _getIsDisabled;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate1;
    internal Logger WrappedLogger { get; }
    internal LoggerExecutionWrapper(Logger logger, Func`1<bool> getIsDisabled);
    internal Logger get_WrappedLogger();
    public sealed virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0();
}
public enum IdentityServer3.Core.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel Fatal;
}
public static class IdentityServer3.Core.Logging.LogProvider : object {
    public static string DisableLoggingEnvironmentVariable;
    private static string NullLogProvider;
    [DynamicAttribute]
private static object s_currentLogProvider;
    private static Action`1<ILogProvider> s_onCurrentLogProviderSet;
    internal static List`1<Tuple`2<IsLoggerAvailable, CreateLogProvider>> LogProviderResolvers;
    [CompilerGeneratedAttribute]
private static bool <IsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static CreateLogProvider CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static CreateLogProvider CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static CreateLogProvider CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static CreateLogProvider CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static CreateLogProvider CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate12;
    public static bool IsDisabled { get; public set; }
    unknown static Action`1<ILogProvider> OnCurrentLogProviderSet {internal set; }
    internal static ILogProvider CurrentLogProvider { get; }
    private static LogProvider();
    public static void SetCurrentLogProvider(ILogProvider logProvider);
    [CompilerGeneratedAttribute]
public static bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public static void set_IsDisabled(bool value);
    internal static void set_OnCurrentLogProviderSet(Action`1<ILogProvider> value);
    internal static ILogProvider get_CurrentLogProvider();
    public static ILog For();
    public static ILog GetCurrentClassLogger();
    public static ILog GetLogger(Type type);
    public static ILog GetLogger(string name);
    public static IDisposable OpenNestedContext(string message);
    public static IDisposable OpenMappedContext(string key, string value);
    private static void RaiseOnCurrentLogProviderSet();
    internal static ILogProvider ResolveLogProvider();
    [CompilerGeneratedAttribute]
private static ILogProvider <.cctor>b__1();
    [CompilerGeneratedAttribute]
private static ILogProvider <.cctor>b__2();
    [CompilerGeneratedAttribute]
private static ILogProvider <.cctor>b__3();
    [CompilerGeneratedAttribute]
private static ILogProvider <.cctor>b__4();
    [CompilerGeneratedAttribute]
private static ILogProvider <.cctor>b__5();
    [CompilerGeneratedAttribute]
private static bool <GetLogger>b__d();
    [CompilerGeneratedAttribute]
private static void <OpenNestedContext>b__f();
    [CompilerGeneratedAttribute]
private static void <OpenMappedContext>b__11();
}
internal class IdentityServer3.Core.Logging.LogProviders.DisposableAction : object {
    private Action _onDispose;
    public DisposableAction(Action onDispose);
    public sealed virtual void Dispose();
}
internal class IdentityServer3.Core.Logging.LogProviders.EntLibLogProvider : LogProviderBase {
    private static string TypeTemplate;
    private static bool s_providerIsAvailableOverride;
    private static Type LogEntryType;
    private static Type LoggerType;
    private static Type TraceEventTypeType;
    private static Action`3<string, string, int> WriteLogEntry;
    private static Func`3<string, int, bool> ShouldLogEntry;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static EntLibLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    private static Action`3<string, string, int> GetWriteLogEntry();
    private static Func`3<string, int, bool> GetShouldLogEntry();
    private static MemberInitExpression GetWriteLogExpression(Expression message, Expression severityParameter, ParameterExpression logNameParameter);
}
internal class IdentityServer3.Core.Logging.LogProviders.Log4NetLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static Log4NetLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetGetLoggerMethodCall();
}
internal static class IdentityServer3.Core.Logging.LogProviders.LogMessageFormatter : object {
    private static Regex Pattern;
    private static LogMessageFormatter();
    public static Func`1<string> SimulateStructuredLogging(Func`1<string> messageBuilder, Object[] formatParameters);
    private static string ReplaceFirst(string text, string search, string replace);
}
internal abstract class IdentityServer3.Core.Logging.LogProviders.LogProviderBase : object {
    private Lazy`1<OpenNdc> _lazyOpenNdcMethod;
    private Lazy`1<OpenMdc> _lazyOpenMdcMethod;
    private static IDisposable NoopDisposableInstance;
    [CompilerGeneratedAttribute]
private static OpenNdc CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static OpenMdc CS$<>9__CachedAnonymousMethodDelegate3;
    private static LogProviderBase();
    public abstract virtual Logger GetLogger(string name);
    public sealed virtual IDisposable OpenNestedContext(string message);
    public sealed virtual IDisposable OpenMappedContext(string key, string value);
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    [CompilerGeneratedAttribute]
private static IDisposable <GetOpenNdcMethod>b__0(string _);
    [CompilerGeneratedAttribute]
private static IDisposable <GetOpenMdcMethod>b__2(string _, string __);
}
internal class IdentityServer3.Core.Logging.LogProviders.LoupeLogProvider : LogProviderBase {
    private static bool s_providerIsAvailableOverride;
    private WriteDelegate _logWriteDelegate;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static LoupeLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    public static bool IsLoggerAvailable();
    private static Type GetLogManagerType();
    private static WriteDelegate GetLogWriteDelegate();
}
internal class IdentityServer3.Core.Logging.LogProviders.NLogLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static NLogLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    public static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetGetLoggerMethodCall();
}
internal class IdentityServer3.Core.Logging.LogProviders.SerilogLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    [CompilerGeneratedAttribute]
private static OpenNdc CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static OpenMdc CS$<>9__CachedAnonymousMethodDelegate3;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static SerilogLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Func`3<string, string, IDisposable> GetPushProperty();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetForContextMethodCall();
    [CompilerGeneratedAttribute]
private static IDisposable <GetOpenNdcMethod>b__0(string message);
    [CompilerGeneratedAttribute]
private static IDisposable <GetOpenMdcMethod>b__2(string key, string value);
}
internal static class IdentityServer3.Core.Logging.LogProviders.TraceEventTypeValues : object {
    internal static Type Type;
    internal static int Verbose;
    internal static int Information;
    internal static int Warning;
    internal static int Error;
    internal static int Critical;
    private static TraceEventTypeValues();
}
[ExtensionAttribute]
internal static class IdentityServer3.Core.Logging.LogProviders.TypeExtensions : object {
    [ExtensionAttribute]
internal static MethodInfo GetMethodPortable(Type type, string name);
    [ExtensionAttribute]
internal static MethodInfo GetMethodPortable(Type type, string name, Type[] types);
    [ExtensionAttribute]
internal static PropertyInfo GetPropertyPortable(Type type, string name);
    [ExtensionAttribute]
internal static IEnumerable`1<FieldInfo> GetFieldsPortable(Type type);
    [ExtensionAttribute]
internal static Type GetBaseTypePortable(Type type);
    [ExtensionAttribute]
internal static object CreateDelegate(MethodInfo methodInfo, Type delegateType);
    [ExtensionAttribute]
internal static Assembly GetAssemblyPortable(Type type);
}
internal static class IdentityServer3.Core.Logging.LogSerializer : object {
    private static JsonSerializerSettings jsonSettings;
    private static LogSerializer();
    public static string Serialize(object logObject);
}
public class IdentityServer3.Core.Logging.NoopLogProvider : object {
    [CompilerGeneratedAttribute]
private static Logger CS$<>9__CachedAnonymousMethodDelegate1;
    public sealed virtual Logger GetLogger(string name);
    public sealed virtual IDisposable OpenMappedContext(string key, string value);
    public sealed virtual IDisposable OpenNestedContext(string message);
    [CompilerGeneratedAttribute]
private static bool <GetLogger>b__0(LogLevel param0, Func`1<string> param1, Exception param2, Object[] param3);
}
internal class IdentityServer3.Core.Logging.TokenRequestValidationLog : object {
    private static IReadOnlyCollection`1<string> SensitiveData;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GrantType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AuthenticationContextReferenceClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdP>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Raw>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientName { get; public set; }
    public string GrantType { get; public set; }
    public string Scopes { get; public set; }
    public string AuthorizationCode { get; public set; }
    public string RefreshToken { get; public set; }
    public string UserName { get; public set; }
    public IEnumerable`1<string> AuthenticationContextReferenceClasses { get; public set; }
    public string Tenant { get; public set; }
    public string IdP { get; public set; }
    public Dictionary`2<string, string> Raw { get; public set; }
    public TokenRequestValidationLog(ValidatedTokenRequest request);
    private static TokenRequestValidationLog();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_GrantType();
    [CompilerGeneratedAttribute]
public void set_GrantType(string value);
    [CompilerGeneratedAttribute]
public string get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(string value);
    [CompilerGeneratedAttribute]
public string get_AuthorizationCode();
    [CompilerGeneratedAttribute]
public void set_AuthorizationCode(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AuthenticationContextReferenceClasses();
    [CompilerGeneratedAttribute]
public void set_AuthenticationContextReferenceClasses(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Tenant();
    [CompilerGeneratedAttribute]
public void set_Tenant(string value);
    [CompilerGeneratedAttribute]
public string get_IdP();
    [CompilerGeneratedAttribute]
public void set_IdP(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0(string field);
}
internal class IdentityServer3.Core.Logging.TokenValidationLog : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JwtId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Claims>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientName { get; public set; }
    public bool ValidateLifetime { get; public set; }
    public string AccessTokenType { get; public set; }
    public string ExpectedScope { get; public set; }
    public string TokenHandle { get; public set; }
    public string JwtId { get; public set; }
    public Dictionary`2<string, object> Claims { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public bool get_ValidateLifetime();
    [CompilerGeneratedAttribute]
public void set_ValidateLifetime(bool value);
    [CompilerGeneratedAttribute]
public string get_AccessTokenType();
    [CompilerGeneratedAttribute]
public void set_AccessTokenType(string value);
    [CompilerGeneratedAttribute]
public string get_ExpectedScope();
    [CompilerGeneratedAttribute]
public void set_ExpectedScope(string value);
    [CompilerGeneratedAttribute]
public string get_TokenHandle();
    [CompilerGeneratedAttribute]
public void set_TokenHandle(string value);
    [CompilerGeneratedAttribute]
public string get_JwtId();
    [CompilerGeneratedAttribute]
public void set_JwtId(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(Dictionary`2<string, object> value);
}
public enum IdentityServer3.Core.Models.AccessTokenType : Enum {
    public int value__;
    public static AccessTokenType Jwt;
    public static AccessTokenType Reference;
}
public class IdentityServer3.Core.Models.AuthenticatedLogin : object {
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Claim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PersistentLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PersistentLoginExpiration>k__BackingField;
    public string Subject { get; public set; }
    public string Name { get; public set; }
    public IEnumerable`1<Claim> Claims { get; public set; }
    public string AuthenticationMethod { get; public set; }
    public string IdentityProvider { get; public set; }
    public Nullable`1<bool> PersistentLogin { get; public set; }
    public Nullable`1<DateTimeOffset> PersistentLoginExpiration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Claim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IEnumerable`1<Claim> value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public void set_AuthenticationMethod(string value);
    [CompilerGeneratedAttribute]
public string get_IdentityProvider();
    [CompilerGeneratedAttribute]
public void set_IdentityProvider(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PersistentLogin();
    [CompilerGeneratedAttribute]
public void set_PersistentLogin(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PersistentLoginExpiration();
    [CompilerGeneratedAttribute]
public void set_PersistentLoginExpiration(Nullable`1<DateTimeOffset> value);
}
public class IdentityServer3.Core.Models.AuthenticateResult : object {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartialSignInRedirectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegate5;
    public ClaimsPrincipal User { get; private set; }
    public string ErrorMessage { get; private set; }
    public string PartialSignInRedirectPath { get; private set; }
    public bool IsError { get; }
    public bool IsPartialSignIn { get; }
    public bool HasSubject { get; }
    public AuthenticateResult(string errorMessage);
    internal AuthenticateResult(ClaimsPrincipal user);
    public AuthenticateResult(string subject, string name, IEnumerable`1<Claim> claims, string identityProvider, string authenticationMethod);
    public AuthenticateResult(string redirectPath, string subject, string name, IEnumerable`1<Claim> claims, string identityProvider, string authenticationMethod);
    public AuthenticateResult(string redirectPath, ExternalIdentity externalId);
    public AuthenticateResult(string redirectPath, IEnumerable`1<Claim> claims);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_User();
    [CompilerGeneratedAttribute]
private void set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_PartialSignInRedirectPath();
    [CompilerGeneratedAttribute]
private void set_PartialSignInRedirectPath(string value);
    private void Init(string subject, string name, IEnumerable`1<Claim> claims, string identityProvider, string authenticationMethod, string authenticationType);
    public bool get_IsError();
    public bool get_IsPartialSignIn();
    public bool get_HasSubject();
    [CompilerGeneratedAttribute]
private static bool <Init>b__0(Claim x);
    [CompilerGeneratedAttribute]
private static bool <Init>b__1(Claim x);
    [CompilerGeneratedAttribute]
private static bool <get_HasSubject>b__4(Claim c);
}
public class IdentityServer3.Core.Models.AuthorizationCode : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpenId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Scope> <RequestedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasConsentShown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeChallenge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeChallengeMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public DateTimeOffset CreationTime { get; public set; }
    public Client Client { get; public set; }
    public ClaimsPrincipal Subject { get; public set; }
    public bool IsOpenId { get; public set; }
    public IEnumerable`1<Scope> RequestedScopes { get; public set; }
    public string RedirectUri { get; public set; }
    public string Nonce { get; public set; }
    public bool WasConsentShown { get; public set; }
    public string SessionId { get; public set; }
    public string CodeChallenge { get; public set; }
    public string CodeChallengeMethod { get; public set; }
    public string SubjectId { get; }
    public string ClientId { get; }
    public IEnumerable`1<string> Scopes { get; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public bool get_IsOpenId();
    [CompilerGeneratedAttribute]
public void set_IsOpenId(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Scope> get_RequestedScopes();
    [CompilerGeneratedAttribute]
public void set_RequestedScopes(IEnumerable`1<Scope> value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public bool get_WasConsentShown();
    [CompilerGeneratedAttribute]
public void set_WasConsentShown(bool value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_CodeChallenge();
    [CompilerGeneratedAttribute]
public void set_CodeChallenge(string value);
    [CompilerGeneratedAttribute]
public string get_CodeChallengeMethod();
    [CompilerGeneratedAttribute]
public void set_CodeChallengeMethod(string value);
    public sealed virtual string get_SubjectId();
    public sealed virtual string get_ClientId();
    public sealed virtual IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
private static string <get_Scopes>b__0(Scope x);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Models.AuthorizeError : object {
    [CompilerGeneratedAttribute]
private ErrorTypes <ErrorType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    public ErrorTypes ErrorType { get; public set; }
    public string Error { get; public set; }
    public string ResponseMode { get; public set; }
    public string ErrorUri { get; public set; }
    public string State { get; public set; }
    [CompilerGeneratedAttribute]
public ErrorTypes get_ErrorType();
    [CompilerGeneratedAttribute]
public void set_ErrorType(ErrorTypes value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseMode();
    [CompilerGeneratedAttribute]
public void set_ResponseMode(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorUri();
    [CompilerGeneratedAttribute]
public void set_ErrorUri(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Models.AuthorizeResponse : object {
    [CompilerGeneratedAttribute]
private ValidatedAuthorizeRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AccessTokenLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    public ValidatedAuthorizeRequest Request { get; public set; }
    public string RedirectUri { get; public set; }
    public string IdentityToken { get; public set; }
    public string AccessToken { get; public set; }
    public int AccessTokenLifetime { get; public set; }
    public string Code { get; public set; }
    public string State { get; public set; }
    public string Scope { get; public set; }
    public string SessionState { get; public set; }
    public string Error { get; public set; }
    public string ErrorDescription { get; public set; }
    public bool IsError { get; public set; }
    [CompilerGeneratedAttribute]
public ValidatedAuthorizeRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(ValidatedAuthorizeRequest value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public string get_IdentityToken();
    [CompilerGeneratedAttribute]
public void set_IdentityToken(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public int get_AccessTokenLifetime();
    [CompilerGeneratedAttribute]
public void set_AccessTokenLifetime(int value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_SessionState();
    [CompilerGeneratedAttribute]
public void set_SessionState(string value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
public void set_ErrorDescription(string value);
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
public void set_IsError(bool value);
}
public class IdentityServer3.Core.Models.Client : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Secret> <ClientSecrets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogoUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRememberConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private Flows <Flow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowClientCredentialsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RedirectUris>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PostLogoutRedirectUris>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogoutUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogoutSessionRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireSignOutPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAccessToAllScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdentityTokenLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AccessTokenLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AuthorizationCodeLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AbsoluteRefreshTokenLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SlidingRefreshTokenLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenUsage <RefreshTokenUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateAccessTokenClaimsOnRefresh>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenExpiration <RefreshTokenExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessTokenType <AccessTokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLocalLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IdentityProviderRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeJwtId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Claim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysSendClientClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrefixClientClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAccessToAllCustomGrantTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedCustomGrantTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedCorsOrigins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAccessTokensViaBrowser>k__BackingField;
    public bool Enabled { get; public set; }
    public string ClientId { get; public set; }
    public List`1<Secret> ClientSecrets { get; public set; }
    public string ClientName { get; public set; }
    public string ClientUri { get; public set; }
    public string LogoUri { get; public set; }
    public bool RequireConsent { get; public set; }
    public bool AllowRememberConsent { get; public set; }
    public Flows Flow { get; public set; }
    public bool AllowClientCredentialsOnly { get; public set; }
    public List`1<string> RedirectUris { get; public set; }
    public List`1<string> PostLogoutRedirectUris { get; public set; }
    public string LogoutUri { get; public set; }
    public bool LogoutSessionRequired { get; public set; }
    public bool RequireSignOutPrompt { get; public set; }
    public bool AllowAccessToAllScopes { get; public set; }
    public List`1<string> AllowedScopes { get; public set; }
    public int IdentityTokenLifetime { get; public set; }
    public int AccessTokenLifetime { get; public set; }
    public int AuthorizationCodeLifetime { get; public set; }
    public int AbsoluteRefreshTokenLifetime { get; public set; }
    public int SlidingRefreshTokenLifetime { get; public set; }
    public TokenUsage RefreshTokenUsage { get; public set; }
    public bool UpdateAccessTokenClaimsOnRefresh { get; public set; }
    public TokenExpiration RefreshTokenExpiration { get; public set; }
    public AccessTokenType AccessTokenType { get; public set; }
    public bool EnableLocalLogin { get; public set; }
    public List`1<string> IdentityProviderRestrictions { get; public set; }
    public bool IncludeJwtId { get; public set; }
    public List`1<Claim> Claims { get; public set; }
    public bool AlwaysSendClientClaims { get; public set; }
    public bool PrefixClientClaims { get; public set; }
    public bool AllowAccessToAllCustomGrantTypes { get; public set; }
    public List`1<string> AllowedCustomGrantTypes { get; public set; }
    public List`1<string> AllowedCorsOrigins { get; public set; }
    public bool AllowAccessTokensViaBrowser { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public List`1<Secret> get_ClientSecrets();
    [CompilerGeneratedAttribute]
public void set_ClientSecrets(List`1<Secret> value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientUri();
    [CompilerGeneratedAttribute]
public void set_ClientUri(string value);
    [CompilerGeneratedAttribute]
public string get_LogoUri();
    [CompilerGeneratedAttribute]
public void set_LogoUri(string value);
    [CompilerGeneratedAttribute]
public bool get_RequireConsent();
    [CompilerGeneratedAttribute]
public void set_RequireConsent(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowRememberConsent();
    [CompilerGeneratedAttribute]
public void set_AllowRememberConsent(bool value);
    [CompilerGeneratedAttribute]
public Flows get_Flow();
    [CompilerGeneratedAttribute]
public void set_Flow(Flows value);
    [CompilerGeneratedAttribute]
public bool get_AllowClientCredentialsOnly();
    [CompilerGeneratedAttribute]
public void set_AllowClientCredentialsOnly(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RedirectUris();
    [CompilerGeneratedAttribute]
public void set_RedirectUris(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PostLogoutRedirectUris();
    [CompilerGeneratedAttribute]
public void set_PostLogoutRedirectUris(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_LogoutUri();
    [CompilerGeneratedAttribute]
public void set_LogoutUri(string value);
    [CompilerGeneratedAttribute]
public bool get_LogoutSessionRequired();
    [CompilerGeneratedAttribute]
public void set_LogoutSessionRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireSignOutPrompt();
    [CompilerGeneratedAttribute]
public void set_RequireSignOutPrompt(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAccessToAllScopes();
    [CompilerGeneratedAttribute]
public void set_AllowAccessToAllScopes(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedScopes();
    [CompilerGeneratedAttribute]
public void set_AllowedScopes(List`1<string> value);
    [CompilerGeneratedAttribute]
public int get_IdentityTokenLifetime();
    [CompilerGeneratedAttribute]
public void set_IdentityTokenLifetime(int value);
    [CompilerGeneratedAttribute]
public int get_AccessTokenLifetime();
    [CompilerGeneratedAttribute]
public void set_AccessTokenLifetime(int value);
    [CompilerGeneratedAttribute]
public int get_AuthorizationCodeLifetime();
    [CompilerGeneratedAttribute]
public void set_AuthorizationCodeLifetime(int value);
    [CompilerGeneratedAttribute]
public int get_AbsoluteRefreshTokenLifetime();
    [CompilerGeneratedAttribute]
public void set_AbsoluteRefreshTokenLifetime(int value);
    [CompilerGeneratedAttribute]
public int get_SlidingRefreshTokenLifetime();
    [CompilerGeneratedAttribute]
public void set_SlidingRefreshTokenLifetime(int value);
    [CompilerGeneratedAttribute]
public TokenUsage get_RefreshTokenUsage();
    [CompilerGeneratedAttribute]
public void set_RefreshTokenUsage(TokenUsage value);
    [CompilerGeneratedAttribute]
public bool get_UpdateAccessTokenClaimsOnRefresh();
    [CompilerGeneratedAttribute]
public void set_UpdateAccessTokenClaimsOnRefresh(bool value);
    [CompilerGeneratedAttribute]
public TokenExpiration get_RefreshTokenExpiration();
    [CompilerGeneratedAttribute]
public void set_RefreshTokenExpiration(TokenExpiration value);
    [CompilerGeneratedAttribute]
public AccessTokenType get_AccessTokenType();
    [CompilerGeneratedAttribute]
public void set_AccessTokenType(AccessTokenType value);
    [CompilerGeneratedAttribute]
public bool get_EnableLocalLogin();
    [CompilerGeneratedAttribute]
public void set_EnableLocalLogin(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IdentityProviderRestrictions();
    [CompilerGeneratedAttribute]
public void set_IdentityProviderRestrictions(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeJwtId();
    [CompilerGeneratedAttribute]
public void set_IncludeJwtId(bool value);
    [CompilerGeneratedAttribute]
public List`1<Claim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(List`1<Claim> value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysSendClientClaims();
    [CompilerGeneratedAttribute]
public void set_AlwaysSendClientClaims(bool value);
    [CompilerGeneratedAttribute]
public bool get_PrefixClientClaims();
    [CompilerGeneratedAttribute]
public void set_PrefixClientClaims(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAccessToAllCustomGrantTypes();
    [CompilerGeneratedAttribute]
public void set_AllowAccessToAllCustomGrantTypes(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedCustomGrantTypes();
    [CompilerGeneratedAttribute]
public void set_AllowedCustomGrantTypes(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedCorsOrigins();
    [CompilerGeneratedAttribute]
public void set_AllowedCorsOrigins(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAccessTokensViaBrowser();
    [CompilerGeneratedAttribute]
public void set_AllowAccessTokensViaBrowser(bool value);
}
public class IdentityServer3.Core.Models.ClientPermission : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientLogoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ClientPermissionDescription> <IdentityPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ClientPermissionDescription> <ResourcePermissions>k__BackingField;
    public string ClientId { get; public set; }
    public string ClientName { get; public set; }
    public string ClientUrl { get; public set; }
    public string ClientLogoUrl { get; public set; }
    public IEnumerable`1<ClientPermissionDescription> IdentityPermissions { get; public set; }
    public IEnumerable`1<ClientPermissionDescription> ResourcePermissions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientUrl();
    [CompilerGeneratedAttribute]
public void set_ClientUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ClientLogoUrl();
    [CompilerGeneratedAttribute]
public void set_ClientLogoUrl(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClientPermissionDescription> get_IdentityPermissions();
    [CompilerGeneratedAttribute]
public void set_IdentityPermissions(IEnumerable`1<ClientPermissionDescription> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClientPermissionDescription> get_ResourcePermissions();
    [CompilerGeneratedAttribute]
public void set_ResourcePermissions(IEnumerable`1<ClientPermissionDescription> value);
}
public class IdentityServer3.Core.Models.ClientPermissionDescription : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class IdentityServer3.Core.Models.Consent : object {
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    public string Subject { get; public set; }
    public string ClientId { get; public set; }
    public IEnumerable`1<string> Scopes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Models.ConsentInteractionResponse : InteractionResponse {
    [CompilerGeneratedAttribute]
private bool <IsConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsentError>k__BackingField;
    public bool IsConsent { get; public set; }
    public string ConsentError { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsConsent();
    [CompilerGeneratedAttribute]
public void set_IsConsent(bool value);
    [CompilerGeneratedAttribute]
public string get_ConsentError();
    [CompilerGeneratedAttribute]
public void set_ConsentError(string value);
}
public class IdentityServer3.Core.Models.ExternalAuthenticationContext : object {
    [CompilerGeneratedAttribute]
private ExternalIdentity <ExternalIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private SignInMessage <SignInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticateResult <AuthenticateResult>k__BackingField;
    public ExternalIdentity ExternalIdentity { get; public set; }
    public SignInMessage SignInMessage { get; public set; }
    public AuthenticateResult AuthenticateResult { get; public set; }
    [CompilerGeneratedAttribute]
public ExternalIdentity get_ExternalIdentity();
    [CompilerGeneratedAttribute]
public void set_ExternalIdentity(ExternalIdentity value);
    [CompilerGeneratedAttribute]
public SignInMessage get_SignInMessage();
    [CompilerGeneratedAttribute]
public void set_SignInMessage(SignInMessage value);
    [CompilerGeneratedAttribute]
public AuthenticateResult get_AuthenticateResult();
    [CompilerGeneratedAttribute]
public void set_AuthenticateResult(AuthenticateResult value);
}
public class IdentityServer3.Core.Models.ExternalIdentity : object {
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Claim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public string Provider { get; public set; }
    public string ProviderId { get; public set; }
    public IEnumerable`1<Claim> Claims { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderId();
    [CompilerGeneratedAttribute]
public void set_ProviderId(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Claim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IEnumerable`1<Claim> value);
    public static ExternalIdentity FromClaims(IEnumerable`1<Claim> claims);
    [CompilerGeneratedAttribute]
private static bool <FromClaims>b__1(Claim x);
    [CompilerGeneratedAttribute]
private static bool <FromClaims>b__2(Claim x);
}
public enum IdentityServer3.Core.Models.Flows : Enum {
    public int value__;
    public static Flows AuthorizationCode;
    public static Flows Implicit;
    public static Flows Hybrid;
    public static Flows ClientCredentials;
    public static Flows ResourceOwner;
    public static Flows Custom;
    public static Flows AuthorizationCodeWithProofKey;
    public static Flows HybridWithProofKey;
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Models.HashExtensions : object {
    [ExtensionAttribute]
public static string Sha256(string input);
    [ExtensionAttribute]
public static Byte[] Sha256(Byte[] input);
    [ExtensionAttribute]
public static string Sha512(string input);
}
[EditorBrowsableAttribute("1")]
public abstract class IdentityServer3.Core.Models.InteractionResponse : object {
    [CompilerGeneratedAttribute]
private AuthorizeError <Error>k__BackingField;
    public bool IsError { get; }
    public AuthorizeError Error { get; public set; }
    public bool get_IsError();
    [CompilerGeneratedAttribute]
public AuthorizeError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(AuthorizeError value);
}
public class IdentityServer3.Core.Models.IsActiveContext : object {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    public ClaimsPrincipal Subject { get; public set; }
    public Client Client { get; public set; }
    public bool IsActive { get; public set; }
    public IsActiveContext(ClaimsPrincipal subject, Client client);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
}
public interface IdentityServer3.Core.Models.ITokenMetadata {
    public string SubjectId { get; }
    public string ClientId { get; }
    public IEnumerable`1<string> Scopes { get; }
    public abstract virtual string get_SubjectId();
    public abstract virtual string get_ClientId();
    public abstract virtual IEnumerable`1<string> get_Scopes();
}
public class IdentityServer3.Core.Models.LocalAuthenticationContext : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private SignInMessage <SignInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticateResult <AuthenticateResult>k__BackingField;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public SignInMessage SignInMessage { get; public set; }
    public AuthenticateResult AuthenticateResult { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public SignInMessage get_SignInMessage();
    [CompilerGeneratedAttribute]
public void set_SignInMessage(SignInMessage value);
    [CompilerGeneratedAttribute]
public AuthenticateResult get_AuthenticateResult();
    [CompilerGeneratedAttribute]
public void set_AuthenticateResult(AuthenticateResult value);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Models.LoginInteractionResponse : InteractionResponse {
    [CompilerGeneratedAttribute]
private SignInMessage <SignInMessage>k__BackingField;
    public bool IsLogin { get; }
    public SignInMessage SignInMessage { get; public set; }
    public bool get_IsLogin();
    [CompilerGeneratedAttribute]
public SignInMessage get_SignInMessage();
    [CompilerGeneratedAttribute]
public void set_SignInMessage(SignInMessage value);
}
public class IdentityServer3.Core.Models.Message : object {
    [CompilerGeneratedAttribute]
private long <Created>k__BackingField;
    public long Created { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(long value);
}
public class IdentityServer3.Core.Models.ParsedSecret : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Id { get; public set; }
    public object Credential { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public object get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(object value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class IdentityServer3.Core.Models.PostAuthenticationContext : object {
    [CompilerGeneratedAttribute]
private SignInMessage <SignInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticateResult <AuthenticateResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLoginPageOnErrorResult>k__BackingField;
    public SignInMessage SignInMessage { get; public set; }
    public AuthenticateResult AuthenticateResult { get; public set; }
    public bool ShowLoginPageOnErrorResult { get; public set; }
    [CompilerGeneratedAttribute]
public SignInMessage get_SignInMessage();
    [CompilerGeneratedAttribute]
public void set_SignInMessage(SignInMessage value);
    [CompilerGeneratedAttribute]
public AuthenticateResult get_AuthenticateResult();
    [CompilerGeneratedAttribute]
public void set_AuthenticateResult(AuthenticateResult value);
    [CompilerGeneratedAttribute]
public bool get_ShowLoginPageOnErrorResult();
    [CompilerGeneratedAttribute]
public void set_ShowLoginPageOnErrorResult(bool value);
}
public class IdentityServer3.Core.Models.PreAuthenticationContext : object {
    [CompilerGeneratedAttribute]
private SignInMessage <SignInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticateResult <AuthenticateResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLoginPageOnErrorResult>k__BackingField;
    public SignInMessage SignInMessage { get; public set; }
    public AuthenticateResult AuthenticateResult { get; public set; }
    public bool ShowLoginPageOnErrorResult { get; public set; }
    [CompilerGeneratedAttribute]
public SignInMessage get_SignInMessage();
    [CompilerGeneratedAttribute]
public void set_SignInMessage(SignInMessage value);
    [CompilerGeneratedAttribute]
public AuthenticateResult get_AuthenticateResult();
    [CompilerGeneratedAttribute]
public void set_AuthenticateResult(AuthenticateResult value);
    [CompilerGeneratedAttribute]
public bool get_ShowLoginPageOnErrorResult();
    [CompilerGeneratedAttribute]
public void set_ShowLoginPageOnErrorResult(bool value);
}
public class IdentityServer3.Core.Models.ProfileDataRequestContext : object {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllClaimsRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RequestedClaimTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caller>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Claim> <IssuedClaims>k__BackingField;
    public ClaimsPrincipal Subject { get; public set; }
    public bool AllClaimsRequested { get; public set; }
    public IEnumerable`1<string> RequestedClaimTypes { get; public set; }
    public Client Client { get; public set; }
    public string Caller { get; public set; }
    public IEnumerable`1<Claim> IssuedClaims { get; public set; }
    public ProfileDataRequestContext(ClaimsPrincipal subject, Client client, string caller, IEnumerable`1<string> requestedClaimTypes);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public bool get_AllClaimsRequested();
    [CompilerGeneratedAttribute]
public void set_AllClaimsRequested(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RequestedClaimTypes();
    [CompilerGeneratedAttribute]
public void set_RequestedClaimTypes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
    [CompilerGeneratedAttribute]
public string get_Caller();
    [CompilerGeneratedAttribute]
public void set_Caller(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Claim> get_IssuedClaims();
    [CompilerGeneratedAttribute]
public void set_IssuedClaims(IEnumerable`1<Claim> value);
}
public class IdentityServer3.Core.Models.RefreshToken : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LifeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Token <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public string ClientId { get; }
    public DateTimeOffset CreationTime { get; public set; }
    public int LifeTime { get; public set; }
    public Token AccessToken { get; public set; }
    public ClaimsPrincipal Subject { get; public set; }
    public int Version { get; public set; }
    public string SubjectId { get; }
    public IEnumerable`1<string> Scopes { get; }
    public sealed virtual string get_ClientId();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_LifeTime();
    [CompilerGeneratedAttribute]
public void set_LifeTime(int value);
    [CompilerGeneratedAttribute]
public Token get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(Token value);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    public sealed virtual string get_SubjectId();
    public sealed virtual IEnumerable`1<string> get_Scopes();
    internal ClaimsPrincipal GetOriginalSubject();
}
internal class IdentityServer3.Core.Models.RequestedClaimTypes : object {
    [CompilerGeneratedAttribute]
private bool <IncludeAllClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ClaimTypes>k__BackingField;
    public bool IncludeAllClaims { get; public set; }
    public IEnumerable`1<string> ClaimTypes { get; public set; }
    public RequestedClaimTypes(IEnumerable`1<string> claimTypes);
    [CompilerGeneratedAttribute]
public bool get_IncludeAllClaims();
    [CompilerGeneratedAttribute]
public void set_IncludeAllClaims(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ClaimTypes();
    [CompilerGeneratedAttribute]
public void set_ClaimTypes(IEnumerable`1<string> value);
}
public class IdentityServer3.Core.Models.RsaPublicKeyJwk : object {
    [CompilerGeneratedAttribute]
private string <kty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <n>k__BackingField;
    [CompilerGeneratedAttribute]
private string <e>k__BackingField;
    [CompilerGeneratedAttribute]
private string <alg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <kid>k__BackingField;
    public string kty { get; public set; }
    public string n { get; public set; }
    public string e { get; public set; }
    public string alg { get; public set; }
    public string kid { get; public set; }
    public RsaPublicKeyJwk(string kid);
    [CompilerGeneratedAttribute]
public string get_kty();
    [CompilerGeneratedAttribute]
public void set_kty(string value);
    [CompilerGeneratedAttribute]
public string get_n();
    [CompilerGeneratedAttribute]
public void set_n(string value);
    [CompilerGeneratedAttribute]
public string get_e();
    [CompilerGeneratedAttribute]
public void set_e(string value);
    [CompilerGeneratedAttribute]
public string get_alg();
    [CompilerGeneratedAttribute]
public void set_alg(string value);
    [CompilerGeneratedAttribute]
public string get_kid();
    [CompilerGeneratedAttribute]
public void set_kid(string value);
}
public class IdentityServer3.Core.Models.Scope : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Emphasize>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ScopeClaim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeAllClaimsForUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimsRule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInDiscoveryDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Secret> <ScopeSecrets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUnrestrictedIntrospection>k__BackingField;
    public bool Enabled { get; public set; }
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public bool Required { get; public set; }
    public bool Emphasize { get; public set; }
    public ScopeType Type { get; public set; }
    public List`1<ScopeClaim> Claims { get; public set; }
    public bool IncludeAllClaimsForUser { get; public set; }
    public string ClaimsRule { get; public set; }
    public bool ShowInDiscoveryDocument { get; public set; }
    public List`1<Secret> ScopeSecrets { get; public set; }
    public bool AllowUnrestrictedIntrospection { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public bool get_Emphasize();
    [CompilerGeneratedAttribute]
public void set_Emphasize(bool value);
    [CompilerGeneratedAttribute]
public ScopeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ScopeType value);
    [CompilerGeneratedAttribute]
public List`1<ScopeClaim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(List`1<ScopeClaim> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeAllClaimsForUser();
    [CompilerGeneratedAttribute]
public void set_IncludeAllClaimsForUser(bool value);
    [CompilerGeneratedAttribute]
public string get_ClaimsRule();
    [CompilerGeneratedAttribute]
public void set_ClaimsRule(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInDiscoveryDocument();
    [CompilerGeneratedAttribute]
public void set_ShowInDiscoveryDocument(bool value);
    [CompilerGeneratedAttribute]
public List`1<Secret> get_ScopeSecrets();
    [CompilerGeneratedAttribute]
public void set_ScopeSecrets(List`1<Secret> value);
    [CompilerGeneratedAttribute]
public bool get_AllowUnrestrictedIntrospection();
    [CompilerGeneratedAttribute]
public void set_AllowUnrestrictedIntrospection(bool value);
}
public class IdentityServer3.Core.Models.ScopeClaim : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysIncludeInIdToken>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public bool AlwaysIncludeInIdToken { get; public set; }
    public ScopeClaim(string name, bool alwaysInclude);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysIncludeInIdToken();
    [CompilerGeneratedAttribute]
public void set_AlwaysIncludeInIdToken(bool value);
}
public enum IdentityServer3.Core.Models.ScopeType : Enum {
    public int value__;
    public static ScopeType Identity;
    public static ScopeType Resource;
}
public class IdentityServer3.Core.Models.Secret : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Description { get; public set; }
    public string Value { get; public set; }
    public Nullable`1<DateTimeOffset> Expiration { get; public set; }
    public string Type { get; public set; }
    public Secret(string value, Nullable`1<DateTimeOffset> expiration);
    public Secret(string value, string description, Nullable`1<DateTimeOffset> expiration);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class IdentityServer3.Core.Models.SignInMessage : Message {
    [CompilerGeneratedAttribute]
private string <ReturnUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginHint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UiLocales>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AcrValues>k__BackingField;
    public string ReturnUrl { get; public set; }
    public string ClientId { get; public set; }
    public string IdP { get; public set; }
    public string Tenant { get; public set; }
    public string LoginHint { get; public set; }
    public string DisplayMode { get; public set; }
    public string UiLocales { get; public set; }
    public IEnumerable`1<string> AcrValues { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ReturnUrl();
    [CompilerGeneratedAttribute]
public void set_ReturnUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_IdP();
    [CompilerGeneratedAttribute]
public void set_IdP(string value);
    [CompilerGeneratedAttribute]
public string get_Tenant();
    [CompilerGeneratedAttribute]
public void set_Tenant(string value);
    [CompilerGeneratedAttribute]
public string get_LoginHint();
    [CompilerGeneratedAttribute]
public void set_LoginHint(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayMode();
    [CompilerGeneratedAttribute]
public void set_DisplayMode(string value);
    [CompilerGeneratedAttribute]
public string get_UiLocales();
    [CompilerGeneratedAttribute]
public void set_UiLocales(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AcrValues();
    [CompilerGeneratedAttribute]
public void set_AcrValues(IEnumerable`1<string> value);
}
public class IdentityServer3.Core.Models.SignOutContext : object {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    public ClaimsPrincipal Subject { get; public set; }
    public string ClientId { get; public set; }
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
}
public class IdentityServer3.Core.Models.SignOutMessage : Message {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnUrl>k__BackingField;
    public string ClientId { get; public set; }
    public string ReturnUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ReturnUrl();
    [CompilerGeneratedAttribute]
public void set_ReturnUrl(string value);
}
public static class IdentityServer3.Core.Models.StandardScopes : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, ScopeClaim> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<string, ScopeClaim> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<string, ScopeClaim> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<string, ScopeClaim> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<string, ScopeClaim> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<string, ScopeClaim> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<string, ScopeClaim> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<string, ScopeClaim> CS$<>9__CachedAnonymousMethodDelegate19;
    public static IEnumerable`1<Scope> All { get; }
    public static IEnumerable`1<Scope> AllAlwaysInclude { get; }
    public static Scope OpenId { get; }
    public static Scope Profile { get; }
    public static Scope ProfileAlwaysInclude { get; }
    public static Scope Email { get; }
    public static Scope EmailAlwaysInclude { get; }
    public static Scope Phone { get; }
    public static Scope PhoneAlwaysInclude { get; }
    public static Scope Address { get; }
    public static Scope AddressAlwaysInclude { get; }
    public static Scope AllClaims { get; }
    public static Scope Roles { get; }
    public static Scope RolesAlwaysInclude { get; }
    public static Scope OfflineAccess { get; }
    public static IEnumerable`1<Scope> get_All();
    public static IEnumerable`1<Scope> get_AllAlwaysInclude();
    public static Scope get_OpenId();
    public static Scope get_Profile();
    public static Scope get_ProfileAlwaysInclude();
    public static Scope get_Email();
    public static Scope get_EmailAlwaysInclude();
    public static Scope get_Phone();
    public static Scope get_PhoneAlwaysInclude();
    public static Scope get_Address();
    public static Scope get_AddressAlwaysInclude();
    public static Scope get_AllClaims();
    public static Scope get_Roles();
    public static Scope get_RolesAlwaysInclude();
    public static Scope get_OfflineAccess();
    [CompilerGeneratedAttribute]
private static ScopeClaim <get_Profile>b__3(string claim);
    [CompilerGeneratedAttribute]
private static ScopeClaim <get_ProfileAlwaysInclude>b__6(string claim);
    [CompilerGeneratedAttribute]
private static ScopeClaim <get_Email>b__9(string claim);
    [CompilerGeneratedAttribute]
private static ScopeClaim <get_EmailAlwaysInclude>b__c(string claim);
    [CompilerGeneratedAttribute]
private static ScopeClaim <get_Phone>b__f(string claim);
    [CompilerGeneratedAttribute]
private static ScopeClaim <get_PhoneAlwaysInclude>b__12(string claim);
    [CompilerGeneratedAttribute]
private static ScopeClaim <get_Address>b__15(string claim);
    [CompilerGeneratedAttribute]
private static ScopeClaim <get_AddressAlwaysInclude>b__18(string claim);
}
public enum IdentityServer3.Core.Models.SubjectTypes : Enum {
    public int value__;
    public static SubjectTypes Global;
    public static SubjectTypes Ppid;
}
public class IdentityServer3.Core.Models.Token : object {
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Claim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, string> CS$<>9__CachedAnonymousMethodDelegate7;
    public string Audience { get; public set; }
    public string Issuer { get; public set; }
    public DateTimeOffset CreationTime { get; public set; }
    public int Lifetime { get; public set; }
    public string Type { get; public set; }
    public Client Client { get; public set; }
    public List`1<Claim> Claims { get; public set; }
    public int Version { get; public set; }
    public string SubjectId { get; }
    public string ClientId { get; }
    public IEnumerable`1<string> Scopes { get; }
    public Token(string tokenType);
    internal Token(Token other);
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(int value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
    [CompilerGeneratedAttribute]
public List`1<Claim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(List`1<Claim> value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    public sealed virtual string get_SubjectId();
    public sealed virtual string get_ClientId();
    public sealed virtual IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
private static bool <get_SubjectId>b__0(Claim x);
    [CompilerGeneratedAttribute]
private static string <get_SubjectId>b__1(Claim x);
    [CompilerGeneratedAttribute]
private static bool <get_Scopes>b__4(Claim x);
    [CompilerGeneratedAttribute]
private static string <get_Scopes>b__5(Claim x);
}
public class IdentityServer3.Core.Models.TokenCreationRequest : object {
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Scope> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidatedRequest <ValidatedRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeAllIdentityClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTokenToHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationCodeToHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProofKey>k__BackingField;
    public ClaimsPrincipal Subject { get; public set; }
    public Client Client { get; public set; }
    public IEnumerable`1<Scope> Scopes { get; public set; }
    public ValidatedRequest ValidatedRequest { get; public set; }
    public bool IncludeAllIdentityClaims { get; public set; }
    public string AccessTokenToHash { get; public set; }
    public string AuthorizationCodeToHash { get; public set; }
    public string Nonce { get; public set; }
    public string ProofKey { get; public set; }
    private static TokenCreationRequest();
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Scope> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<Scope> value);
    [CompilerGeneratedAttribute]
public ValidatedRequest get_ValidatedRequest();
    [CompilerGeneratedAttribute]
public void set_ValidatedRequest(ValidatedRequest value);
    [CompilerGeneratedAttribute]
public bool get_IncludeAllIdentityClaims();
    [CompilerGeneratedAttribute]
public void set_IncludeAllIdentityClaims(bool value);
    [CompilerGeneratedAttribute]
public string get_AccessTokenToHash();
    [CompilerGeneratedAttribute]
public void set_AccessTokenToHash(string value);
    [CompilerGeneratedAttribute]
public string get_AuthorizationCodeToHash();
    [CompilerGeneratedAttribute]
public void set_AuthorizationCodeToHash(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public string get_ProofKey();
    [CompilerGeneratedAttribute]
public void set_ProofKey(string value);
    internal void Validate();
    private void LogAndStop(string name);
}
public enum IdentityServer3.Core.Models.TokenExpiration : Enum {
    public int value__;
    public static TokenExpiration Sliding;
    public static TokenExpiration Absolute;
}
[ExtensionAttribute]
public static class IdentityServer3.Core.Models.TokenExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, string> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, <>f__AnonymousType2`2<string, JToken>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<string, JToken>, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<string, JToken>, string> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<string, JToken>, JToken> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<string, JToken>, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<string, JToken>, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<string, JToken>, string> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate15;
    private static TokenExtensions();
    [ExtensionAttribute]
public static string CreateJwtPayload(Token token);
    [CompilerGeneratedAttribute]
private static bool <CreateJwtPayload>b__0(Claim x);
    [CompilerGeneratedAttribute]
private static bool <CreateJwtPayload>b__1(Claim x);
    [CompilerGeneratedAttribute]
private static string <CreateJwtPayload>b__2(Claim x);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2`2<string, JToken> <CreateJwtPayload>b__3(Claim x);
    [CompilerGeneratedAttribute]
private static bool <CreateJwtPayload>b__4(<>f__AnonymousType2`2<string, JToken> x);
    [CompilerGeneratedAttribute]
private static string <CreateJwtPayload>b__5(<>f__AnonymousType2`2<string, JToken> x);
    [CompilerGeneratedAttribute]
private static JToken <CreateJwtPayload>b__6(<>f__AnonymousType2`2<string, JToken> x);
    [CompilerGeneratedAttribute]
private static bool <CreateJwtPayload>b__7(<>f__AnonymousType2`2<string, JToken> x);
    [CompilerGeneratedAttribute]
private static string <CreateJwtPayload>b__8(<>f__AnonymousType2`2<string, JToken> x);
    [CompilerGeneratedAttribute]
private static string <CreateJwtPayload>b__9(<>f__AnonymousType2`2<string, JToken> x);
    [CompilerGeneratedAttribute]
private static string <CreateJwtPayload>b__a(string x, string y);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Models.TokenResponse : object {
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AccessTokenLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Custom>k__BackingField;
    public string TokenType { get; public set; }
    public string IdentityToken { get; public set; }
    public string AccessToken { get; public set; }
    public int AccessTokenLifetime { get; public set; }
    public string RefreshToken { get; public set; }
    public string Algorithm { get; public set; }
    public Dictionary`2<string, object> Custom { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_IdentityToken();
    [CompilerGeneratedAttribute]
public void set_IdentityToken(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public int get_AccessTokenLifetime();
    [CompilerGeneratedAttribute]
public void set_AccessTokenLifetime(int value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Custom();
    [CompilerGeneratedAttribute]
public void set_Custom(Dictionary`2<string, object> value);
}
public enum IdentityServer3.Core.Models.TokenUsage : Enum {
    public int value__;
    public static TokenUsage ReUse;
    public static TokenUsage OneTimeOnly;
}
public class IdentityServer3.Core.Resources.EventIds : object {
    public static string ClientPermissionsRevoked;
    public static string CspReport;
    public static string ExternalLoginError;
    public static string ExternalLoginFailure;
    public static string ExternalLoginSuccess;
    public static string LocalLoginFailure;
    public static string LocalLoginSuccess;
    public static string LogoutEvent;
    public static string PartialLogin;
    public static string PartialLoginComplete;
    public static string PreLoginFailure;
    public static string PreLoginSuccess;
    public static string ResourceOwnerFlowLoginFailure;
    public static string ResourceOwnerFlowLoginSuccess;
    public static string TokenRevoked;
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
public class IdentityServer3.Core.Resources.Events : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ClientPermissionsRevoked { get; }
    public static string CspReport { get; }
    public static string ExternalLoginError { get; }
    public static string ExternalLoginFailure { get; }
    public static string ExternalLoginSuccess { get; }
    public static string LocalLoginFailure { get; }
    public static string LocalLoginSuccess { get; }
    public static string LogoutEvent { get; }
    public static string PartialLogin { get; }
    public static string PartialLoginComplete { get; }
    public static string PreLoginFailure { get; }
    public static string PreLoginSuccess { get; }
    public static string ResourceOwnerFlowLoginFailure { get; }
    public static string ResourceOwnerFlowLoginSuccess { get; }
    public static string TokenRevoked { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ClientPermissionsRevoked();
    public static string get_CspReport();
    public static string get_ExternalLoginError();
    public static string get_ExternalLoginFailure();
    public static string get_ExternalLoginSuccess();
    public static string get_LocalLoginFailure();
    public static string get_LocalLoginSuccess();
    public static string get_LogoutEvent();
    public static string get_PartialLogin();
    public static string get_PartialLoginComplete();
    public static string get_PreLoginFailure();
    public static string get_PreLoginSuccess();
    public static string get_ResourceOwnerFlowLoginFailure();
    public static string get_ResourceOwnerFlowLoginSuccess();
    public static string get_TokenRevoked();
}
public class IdentityServer3.Core.Resources.MessageIds : object {
    public static string ClientIdRequired;
    public static string ExternalProviderError;
    public static string Invalid_request;
    public static string Invalid_scope;
    public static string InvalidUsernameOrPassword;
    public static string MissingClientId;
    public static string MissingToken;
    public static string MustSelectAtLeastOnePermission;
    public static string NoExternalProvider;
    public static string NoMatchingExternalAccount;
    public static string NoSignInCookie;
    public static string NoSubjectFromExternalProvider;
    public static string PasswordRequired;
    public static string SslRequired;
    public static string Unauthorized_client;
    public static string UnexpectedError;
    public static string Unsupported_response_type;
    public static string UnsupportedMediaType;
    public static string UsernameRequired;
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
public class IdentityServer3.Core.Resources.Messages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ClientIdRequired { get; }
    public static string ExternalProviderError { get; }
    public static string invalid_request { get; }
    public static string invalid_scope { get; }
    public static string InvalidUsernameOrPassword { get; }
    public static string MissingClientId { get; }
    public static string MissingToken { get; }
    public static string MustSelectAtLeastOnePermission { get; }
    public static string NoExternalProvider { get; }
    public static string NoMatchingExternalAccount { get; }
    public static string NoSignInCookie { get; }
    public static string NoSubjectFromExternalProvider { get; }
    public static string PasswordRequired { get; }
    public static string SslRequired { get; }
    public static string unauthorized_client { get; }
    public static string UnexpectedError { get; }
    public static string unsupported_response_type { get; }
    public static string UnsupportedMediaType { get; }
    public static string UsernameRequired { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ClientIdRequired();
    public static string get_ExternalProviderError();
    public static string get_invalid_request();
    public static string get_invalid_scope();
    public static string get_InvalidUsernameOrPassword();
    public static string get_MissingClientId();
    public static string get_MissingToken();
    public static string get_MustSelectAtLeastOnePermission();
    public static string get_NoExternalProvider();
    public static string get_NoMatchingExternalAccount();
    public static string get_NoSignInCookie();
    public static string get_NoSubjectFromExternalProvider();
    public static string get_PasswordRequired();
    public static string get_SslRequired();
    public static string get_unauthorized_client();
    public static string get_UnexpectedError();
    public static string get_unsupported_response_type();
    public static string get_UnsupportedMediaType();
    public static string get_UsernameRequired();
}
public class IdentityServer3.Core.Resources.ScopeIds : object {
    public static string Address_DisplayName;
    public static string All_claims_DisplayName;
    public static string Email_DisplayName;
    public static string Offline_access_DisplayName;
    public static string Openid_DisplayName;
    public static string Phone_DisplayName;
    public static string Profile_Description;
    public static string Profile_DisplayName;
    public static string Roles_DisplayName;
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
public class IdentityServer3.Core.Resources.Scopes : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string address_DisplayName { get; }
    public static string all_claims_DisplayName { get; }
    public static string email_DisplayName { get; }
    public static string offline_access_DisplayName { get; }
    public static string openid_DisplayName { get; }
    public static string phone_DisplayName { get; }
    public static string profile_Description { get; }
    public static string profile_DisplayName { get; }
    public static string roles_DisplayName { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_address_DisplayName();
    public static string get_all_claims_DisplayName();
    public static string get_email_DisplayName();
    public static string get_offline_access_DisplayName();
    public static string get_openid_DisplayName();
    public static string get_phone_DisplayName();
    public static string get_profile_Description();
    public static string get_profile_DisplayName();
    public static string get_roles_DisplayName();
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.ResponseHandling.AuthorizeInteractionResponseGenerator : object {
    private static ILog Logger;
    private SignInMessage _signIn;
    private IdentityServerOptions _options;
    private IConsentService _consent;
    private IUserService _users;
    private ILocalizationService _localizationService;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, string> CS$<>9__CachedAnonymousMethodDelegate1a;
    public AuthorizeInteractionResponseGenerator(IdentityServerOptions options, IConsentService consent, IUserService users, ILocalizationService localizationService);
    private static AuthorizeInteractionResponseGenerator();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.AuthorizeInteractionResponseGenerator/<ProcessLoginAsync>d__a")]
public Task`1<LoginInteractionResponse> ProcessLoginAsync(ValidatedAuthorizeRequest request, ClaimsPrincipal user);
    public Task`1<LoginInteractionResponse> ProcessClientLoginAsync(ValidatedAuthorizeRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.AuthorizeInteractionResponseGenerator/<ProcessConsentAsync>d__1b")]
[DebuggerStepThroughAttribute]
public Task`1<ConsentInteractionResponse> ProcessConsentAsync(ValidatedAuthorizeRequest request, UserConsent consent);
    [CompilerGeneratedAttribute]
private static bool <ProcessLoginAsync>b__6(string x);
    [CompilerGeneratedAttribute]
private static bool <ProcessLoginAsync>b__7(string x);
    [CompilerGeneratedAttribute]
private static string <ProcessConsentAsync>b__19(Scope x);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.ResponseHandling.AuthorizeResponseGenerator : object {
    private static ILog Logger;
    private ITokenService _tokenService;
    private IAuthorizationCodeStore _authorizationCodes;
    private IEventService _events;
    public AuthorizeResponseGenerator(ITokenService tokenService, IAuthorizationCodeStore authorizationCodes, IEventService events);
    private static AuthorizeResponseGenerator();
    [AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.AuthorizeResponseGenerator/<CreateResponseAsync>d__0")]
[DebuggerStepThroughAttribute]
public Task`1<AuthorizeResponse> CreateResponseAsync(ValidatedAuthorizeRequest request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.AuthorizeResponseGenerator/<CreateHybridFlowResponseAsync>d__3")]
private Task`1<AuthorizeResponse> CreateHybridFlowResponseAsync(ValidatedAuthorizeRequest request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.AuthorizeResponseGenerator/<CreateCodeFlowResponseAsync>d__a")]
public Task`1<AuthorizeResponse> CreateCodeFlowResponseAsync(ValidatedAuthorizeRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.AuthorizeResponseGenerator/<CreateCodeAsync>d__10")]
[DebuggerStepThroughAttribute]
private Task`1<string> CreateCodeAsync(ValidatedAuthorizeRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.AuthorizeResponseGenerator/<CreateImplicitFlowResponseAsync>d__18")]
[DebuggerStepThroughAttribute]
public Task`1<AuthorizeResponse> CreateImplicitFlowResponseAsync(ValidatedAuthorizeRequest request, string authorizationCode);
    private string GenerateSessionStateValue(ValidatedAuthorizeRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.AuthorizeResponseGenerator/<RaiseCodeIssuedEventAsync>d__25")]
[DebuggerStepThroughAttribute]
private Task RaiseCodeIssuedEventAsync(string id, AuthorizationCode code);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.ResponseHandling.EndSessionResponseGenerator : object {
    public SignOutMessage CreateSignoutMessage(ValidatedEndSessionRequest request);
}
internal class IdentityServer3.Core.ResponseHandling.IntrospectionResponseGenerator : object {
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static IntrospectionResponseGenerator();
    public Task`1<Dictionary`2<string, object>> ProcessAsync(IntrospectionRequestValidationResult validationResult, Scope scope);
    [CompilerGeneratedAttribute]
private static bool <ProcessAsync>b__0(Claim c);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.ResponseHandling.TokenResponseGenerator : object {
    private static ILog Logger;
    private ITokenService _tokenService;
    private IRefreshTokenService _refreshTokenService;
    private IScopeStore _scopes;
    private ICustomTokenResponseGenerator _customResponseGenerator;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, string> CS$<>9__CachedAnonymousMethodDelegate28;
    public TokenResponseGenerator(ITokenService tokenService, IRefreshTokenService refreshTokenService, IScopeStore scopes, ICustomTokenResponseGenerator customResponseGenerator);
    private static TokenResponseGenerator();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.TokenResponseGenerator/<ProcessAsync>d__0")]
public Task`1<TokenResponse> ProcessAsync(ValidatedTokenRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.TokenResponseGenerator/<ProcessAuthorizationCodeRequestAsync>d__6")]
[DebuggerStepThroughAttribute]
private Task`1<TokenResponse> ProcessAuthorizationCodeRequestAsync(ValidatedTokenRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.TokenResponseGenerator/<ProcessTokenRequestAsync>d__11")]
[DebuggerStepThroughAttribute]
private Task`1<TokenResponse> ProcessTokenRequestAsync(ValidatedTokenRequest request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.TokenResponseGenerator/<ProcessRefreshTokenRequestAsync>d__18")]
private Task`1<TokenResponse> ProcessRefreshTokenRequestAsync(ValidatedTokenRequest request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.TokenResponseGenerator/<CreateAccessTokenAsync>d__29")]
private Task`1<Tuple`2<string, string>> CreateAccessTokenAsync(ValidatedTokenRequest request);
    private string GetProofKey(ValidatedTokenRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.TokenResponseGenerator/<CreateIdTokenFromRefreshTokenRequestAsync>d__33")]
[DebuggerStepThroughAttribute]
private Task`1<string> CreateIdTokenFromRefreshTokenRequestAsync(ValidatedTokenRequest request, string newAccessToken);
    [CompilerGeneratedAttribute]
private static string <CreateAccessTokenAsync>b__27(Scope s);
}
internal class IdentityServer3.Core.ResponseHandling.UserInfoResponseGenerator : object {
    private static ILog Logger;
    private IUserService _users;
    private IScopeStore _scopes;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ScopeClaim, string> CS$<>9__CachedAnonymousMethodDelegatef;
    public UserInfoResponseGenerator(IUserService users, IScopeStore scopes);
    private static UserInfoResponseGenerator();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.UserInfoResponseGenerator/<ProcessAsync>d__2")]
public Task`1<Dictionary`2<string, object>> ProcessAsync(IEnumerable`1<Claim> userClaims, IEnumerable`1<string> scopes, Client client);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.ResponseHandling.UserInfoResponseGenerator/<GetRequestedClaimTypesAsync>d__13")]
public Task`1<RequestedClaimTypes> GetRequestedClaimTypesAsync(IEnumerable`1<string> scopes);
    [CompilerGeneratedAttribute]
private static string <ProcessAsync>b__0(Claim c);
    [CompilerGeneratedAttribute]
private static string <GetRequestedClaimTypesAsync>b__e(ScopeClaim c);
}
internal class IdentityServer3.Core.Results.AuthorizeFormPostResult : HtmlActionResult {
    private static ILog Logger;
    private AuthorizeResponse _response;
    private HttpRequestMessage _request;
    public AuthorizeFormPostResult(AuthorizeResponse response, HttpRequestMessage request);
    private static AuthorizeFormPostResult();
    protected virtual string GetHtml();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Results.AuthorizeFormPostResult/<ExecuteAsync>d__6")]
public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethoda(CancellationToken );
}
internal class IdentityServer3.Core.Results.AuthorizeRedirectResult : object {
    private static ILog Logger;
    private AuthorizeResponse _response;
    private IdentityServerOptions _options;
    public AuthorizeRedirectResult(AuthorizeResponse response, IdentityServerOptions options);
    private static AuthorizeRedirectResult();
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.CheckSessionResult : HtmlActionResult {
    private IdentityServerOptions options;
    private HttpRequestMessage request;
    public CheckSessionResult(IdentityServerOptions options, HttpRequestMessage request);
    protected virtual string GetHtml();
}
internal class IdentityServer3.Core.Results.ClientPermissionsActionResult : HtmlStreamActionResult {
    public ClientPermissionsActionResult(IViewService viewSvc, IDictionary`2<string, object> env, ClientPermissionsViewModel model);
}
internal class IdentityServer3.Core.Results.ConsentActionResult : HtmlStreamActionResult {
    public ConsentActionResult(IViewService viewSvc, ConsentViewModel model, ValidatedAuthorizeRequest validatedRequest);
}
internal class IdentityServer3.Core.Results.ErrorActionResult : HtmlStreamActionResult {
    public ErrorActionResult(IViewService viewSvc, ErrorViewModel model);
}
internal abstract class IdentityServer3.Core.Results.HtmlActionResult : object {
    protected abstract virtual string GetHtml();
    public HttpResponseMessage GetResponseMessage();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class IdentityServer3.Core.Results.HtmlStreamActionResult : object {
    private Func`1<Task`1<Stream>> renderFunc;
    public HtmlStreamActionResult(Func`1<Task`1<Stream>> renderFunc);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Results.HtmlStreamActionResult/<Render>d__0")]
[DebuggerStepThroughAttribute]
private Task`1<Stream> Render();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Results.HtmlStreamActionResult/<GetResponseMessage>d__5")]
public Task`1<HttpResponseMessage> GetResponseMessage();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Results.HtmlStreamActionResult/<ExecuteAsync>d__a")]
public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class IdentityServer3.Core.Results.IntrospectionResult : object {
    private static JsonMediaTypeFormatter Formatter;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Result>k__BackingField;
    public Dictionary`2<string, object> Result { get; private set; }
    public IntrospectionResult(Dictionary`2<string, object> result);
    private static IntrospectionResult();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(Dictionary`2<string, object> value);
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.LoggedOutActionResult : HtmlStreamActionResult {
    public LoggedOutActionResult(IViewService viewSvc, LoggedOutViewModel model, SignOutMessage message);
}
internal class IdentityServer3.Core.Results.LoginActionResult : HtmlStreamActionResult {
    public LoginActionResult(IViewService viewSvc, LoginViewModel model, SignInMessage message);
}
internal class IdentityServer3.Core.Results.LoginResult : object {
    private static ILog Logger;
    private IDictionary`2<string, object> env;
    private SignInMessage message;
    public LoginResult(IDictionary`2<string, object> env, SignInMessage message);
    private static LoginResult();
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.LogoutActionResult : HtmlStreamActionResult {
    public LogoutActionResult(IViewService viewSvc, LogoutViewModel model, SignOutMessage message);
}
internal class IdentityServer3.Core.Results.LogoutResult : object {
    private static ILog Logger;
    private SignOutMessage message;
    private IDictionary`2<string, object> env;
    private IdentityServerOptions options;
    public LogoutResult(SignOutMessage message, IDictionary`2<string, object> env, IdentityServerOptions options);
    private static LogoutResult();
    public static string GetRedirectUrl(SignOutMessage message, IDictionary`2<string, object> env, IdentityServerOptions options);
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.ProtectedResourceErrorResult : object {
    private static ILog Logger;
    private string _error;
    private string _errorDescription;
    public ProtectedResourceErrorResult(string error, string errorDescription);
    private static ProtectedResourceErrorResult();
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.RevocationErrorResult : object {
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Error { get; public set; }
    public RevocationErrorResult(string error);
    private static RevocationErrorResult();
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.TokenErrorResult : object {
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    public string Error { get; internal set; }
    public string ErrorDescription { get; internal set; }
    public TokenErrorResult(string error);
    public TokenErrorResult(string error, string errorDescription);
    private static TokenErrorResult();
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
internal void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
internal void set_ErrorDescription(string value);
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.TokenResult : object {
    private static ILog Logger;
    private static JsonSerializer Serializer;
    private TokenResponse _response;
    public TokenResult(TokenResponse response);
    private static TokenResult();
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.UserInfoResult : object {
    private static ILog Logger;
    private static JsonMediaTypeFormatter Formatter;
    private Dictionary`2<string, object> _claims;
    public UserInfoResult(Dictionary`2<string, object> claims);
    private static UserInfoResult();
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class IdentityServer3.Core.Results.WelcomeActionResult : object {
    private IOwinContext context;
    public WelcomeActionResult(IOwinContext context);
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
public class IdentityServer3.Core.Services.Caching.CachingClientStore : object {
    private IClientStore inner;
    private ICache`1<Client> cache;
    public CachingClientStore(IClientStore inner, ICache`1<Client> cache);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Caching.CachingClientStore/<FindClientByIdAsync>d__6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Client> FindClientByIdAsync(string clientId);
}
public class IdentityServer3.Core.Services.Caching.CachingScopeStore : object {
    private static string AllScopes;
    private static string AllScopesPublic;
    private IScopeStore inner;
    private ICache`1<IEnumerable`1<Scope>> cache;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate17;
    public CachingScopeStore(IScopeStore inner, ICache`1<IEnumerable`1<Scope>> cache);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Caching.CachingScopeStore/<FindScopesAsync>d__6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IEnumerable`1<Scope>> FindScopesAsync(IEnumerable`1<string> scopeNames);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Caching.CachingScopeStore/<GetScopesAsync>d__10")]
public sealed virtual Task`1<IEnumerable`1<Scope>> GetScopesAsync(bool publicOnly);
    private string GetKey(IEnumerable`1<string> scopeNames);
    private string GetKey(bool publicOnly);
    [CompilerGeneratedAttribute]
private static string <GetKey>b__14(string x);
    [CompilerGeneratedAttribute]
private static string <GetKey>b__15(string x, string y);
}
public class IdentityServer3.Core.Services.Caching.CachingUserService : object {
    private IUserService inner;
    private ICache`1<IEnumerable`1<Claim>> cache;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegated;
    public CachingUserService(IUserService inner, ICache`1<IEnumerable`1<Claim>> cache);
    public sealed virtual Task PreAuthenticateAsync(PreAuthenticationContext context);
    public sealed virtual Task AuthenticateLocalAsync(LocalAuthenticationContext context);
    public sealed virtual Task AuthenticateExternalAsync(ExternalAuthenticationContext context);
    public sealed virtual Task PostAuthenticateAsync(PostAuthenticationContext context);
    public sealed virtual Task SignOutAsync(SignOutContext context);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Caching.CachingUserService/<GetProfileDataAsync>d__6")]
public sealed virtual Task GetProfileDataAsync(ProfileDataRequestContext context);
    public sealed virtual Task IsActiveAsync(IsActiveContext context);
    private string GetKey(ClaimsPrincipal subject, IEnumerable`1<string> requestedClaimTypes);
    [CompilerGeneratedAttribute]
private static string <GetKey>b__a(string x);
    [CompilerGeneratedAttribute]
private static string <GetKey>b__b(string x, string y);
}
public class IdentityServer3.Core.Services.Default.AggregateExternalClaimsFilter : object {
    private IExternalClaimsFilter[] filters;
    public AggregateExternalClaimsFilter(IExternalClaimsFilter[] filters);
    public sealed virtual IEnumerable`1<Claim> Filter(string provider, IEnumerable`1<Claim> claims);
}
internal class IdentityServer3.Core.Services.Default.AggregatePermissionsStore : object {
    private IPermissionsStore[] stores;
    [CompilerGeneratedAttribute]
private static Func`3<Task`1<IEnumerable`1<Consent>>, Task`1<IEnumerable`1<Consent>>, Task`1<IEnumerable`1<Consent>>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Consent, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, Consent>, <>f__AnonymousType5`2<IGrouping`2<string, Consent>, IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Consent, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<string>, IEnumerable`1<string>, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegatef;
    public AggregatePermissionsStore(IPermissionsStore[] stores);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.AggregatePermissionsStore/<LoadAllAsync>d__13")]
public sealed virtual Task`1<IEnumerable`1<Consent>> LoadAllAsync(string subject);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.AggregatePermissionsStore/<RevokeAsync>d__18")]
public sealed virtual Task RevokeAsync(string subject, string client);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.AggregatePermissionsStore/<<LoadAllAsync>b__3>d__10")]
[CompilerGeneratedAttribute]
private static Task`1<IEnumerable`1<Consent>> <LoadAllAsync>b__3(Task`1<IEnumerable`1<Consent>> t1, Task`1<IEnumerable`1<Consent>> t2);
    [CompilerGeneratedAttribute]
private static string <LoadAllAsync>b__4(Consent item);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType5`2<IGrouping`2<string, Consent>, IEnumerable`1<string>> <LoadAllAsync>b__5(IGrouping`2<string, Consent> grp);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <LoadAllAsync>b__6(Consent g);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <LoadAllAsync>b__7(IEnumerable`1<string> s1, IEnumerable`1<string> s2);
}
internal class IdentityServer3.Core.Services.Default.AssetManager : object {
    public static string HttpAssetsNamespace;
    public static string FontAssetsNamespace;
    public static string PageAssetsNamespace;
    private static string PagesPrefix;
    private static string Layout;
    private static string FormPostResponse;
    private static string CheckSession;
    private static string SignoutFrame;
    private static string Welcome;
    private static string PageNameTemplate;
    private static ResourceCache cache;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    private static AssetManager();
    public static string LoadPage(string pageName);
    public static string ApplyContentToLayout(string layout, string content);
    public static string LoadLayoutWithContent(string content);
    public static string LoadLayoutWithPage(string pageName);
    public static string LoadFormPost(string rootUrl, string redirectUri, string fields);
    public static string LoadCheckSession(string rootUrl, string cookieName);
    public static string LoadSignoutFrame(IEnumerable`1<string> frameUrls);
    internal static string LoadWelcomePage(string applicationPath, string version);
    private static string LoadResourceString(string name);
    private static string LoadResourceString(string name, object data);
    private static string Format(string value, IDictionary`2<string, object> data);
    public static string Format(string value, object data);
    private static IDictionary`2<string, object> Map(object values);
    [CompilerGeneratedAttribute]
private static string <LoadSignoutFrame>b__0(string x);
    [CompilerGeneratedAttribute]
private static string <LoadSignoutFrame>b__1(string x, string y);
}
internal class IdentityServer3.Core.Services.Default.AutofacDependencyResolver : object {
    private IComponentContext ctx;
    public AutofacDependencyResolver(IComponentContext ctx);
    public sealed virtual T Resolve(string name);
}
public class IdentityServer3.Core.Services.Default.CachingLoader : object {
    private ResourceCache cache;
    private IViewLoader inner;
    public CachingLoader(ResourceCache cache, IViewLoader inner);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.CachingLoader/<LoadAsync>d__0")]
public sealed virtual Task`1<string> LoadAsync(string name);
}
public abstract class IdentityServer3.Core.Services.Default.ClaimsFilterBase : object {
    private string provider;
    protected ClaimsFilterBase(string provider);
    public sealed virtual IEnumerable`1<Claim> Filter(string provider, IEnumerable`1<Claim> claims);
    protected abstract virtual IEnumerable`1<Claim> TransformClaims(IEnumerable`1<Claim> claims);
}
public class IdentityServer3.Core.Services.Default.DefaultAuthenticationSessionValidator : object {
    public sealed virtual Task`1<bool> IsAuthenticationSessionValidAsync(ClaimsPrincipal subject);
}
public class IdentityServer3.Core.Services.Default.DefaultCache`1 : object {
    private MemoryCache cache;
    private TimeSpan duration;
    protected DateTimeOffset UtcNow { get; }
    public DefaultCache`1(TimeSpan duration);
    public sealed virtual Task`1<T> GetAsync(string key);
    public sealed virtual Task SetAsync(string key, T item);
    protected virtual DateTimeOffset get_UtcNow();
}
public class IdentityServer3.Core.Services.Default.DefaultClaimsProvider : object {
    private static ILog Logger;
    protected IUserService _users;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    public DefaultClaimsProvider(IUserService users);
    private static DefaultClaimsProvider();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultClaimsProvider/<GetIdentityTokenClaimsAsync>d__0")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IEnumerable`1<Claim>> GetIdentityTokenClaimsAsync(ClaimsPrincipal subject, Client client, IEnumerable`1<Scope> scopes, bool includeAllIdentityClaims, ValidatedRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultClaimsProvider/<GetAccessTokenClaimsAsync>d__a")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IEnumerable`1<Claim>> GetAccessTokenClaimsAsync(ClaimsPrincipal subject, Client client, IEnumerable`1<Scope> scopes, ValidatedRequest request);
    protected virtual IEnumerable`1<Claim> GetStandardSubjectClaims(ClaimsPrincipal subject);
    protected virtual IEnumerable`1<Claim> GetOptionalClaims(ClaimsPrincipal subject);
    protected virtual IEnumerable`1<Claim> FilterProtocolClaims(IEnumerable`1<Claim> claims);
    [CompilerGeneratedAttribute]
private static bool <FilterProtocolClaims>b__14(Claim x);
}
public class IdentityServer3.Core.Services.Default.DefaultClientPermissionsService : object {
    private IPermissionsStore permissionsStore;
    private IClientStore clientStore;
    private IScopeStore scopeStore;
    private ILocalizationService localizationService;
    [CompilerGeneratedAttribute]
private static Func`2<Consent, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<string>, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegatea;
    public DefaultClientPermissionsService(IPermissionsStore permissionsStore, IClientStore clientStore, IScopeStore scopeStore, ILocalizationService localizationService);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultClientPermissionsService/<GetClientPermissionsAsync>d__11")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IEnumerable`1<ClientPermission>> GetClientPermissionsAsync(string subject);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultClientPermissionsService/<RevokeClientPermissionsAsync>d__1c")]
[DebuggerStepThroughAttribute]
public virtual Task RevokeClientPermissionsAsync(string subject, string clientId);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <GetClientPermissionsAsync>b__3(Consent x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <GetClientPermissionsAsync>b__4(IEnumerable`1<string> x);
    [CompilerGeneratedAttribute]
private ClientPermissionDescription <GetClientPermissionsAsync>b__6(Scope s);
    [CompilerGeneratedAttribute]
private ClientPermissionDescription <GetClientPermissionsAsync>b__8(Scope s);
}
public class IdentityServer3.Core.Services.Default.DefaultConsentService : object {
    protected IConsentStore _store;
    public DefaultConsentService(IConsentStore store);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultConsentService/<RequiresConsentAsync>d__0")]
[DebuggerStepThroughAttribute]
public virtual Task`1<bool> RequiresConsentAsync(Client client, ClaimsPrincipal subject, IEnumerable`1<string> scopes);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultConsentService/<UpdateConsentAsync>d__5")]
[DebuggerStepThroughAttribute]
public virtual Task UpdateConsentAsync(Client client, ClaimsPrincipal subject, IEnumerable`1<string> scopes);
}
public class IdentityServer3.Core.Services.Default.DefaultCorsPolicyService : object {
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <AllowedOrigins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAll>k__BackingField;
    public ICollection`1<string> AllowedOrigins { get; public set; }
    public bool AllowAll { get; public set; }
    private static DefaultCorsPolicyService();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_AllowedOrigins();
    [CompilerGeneratedAttribute]
public void set_AllowedOrigins(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAll();
    [CompilerGeneratedAttribute]
public void set_AllowAll(bool value);
    public sealed virtual Task`1<bool> IsOriginAllowedAsync(string origin);
}
public class IdentityServer3.Core.Services.Default.DefaultCustomRequestValidator : object {
    public sealed virtual Task`1<AuthorizeRequestValidationResult> ValidateAuthorizeRequestAsync(ValidatedAuthorizeRequest request);
    public sealed virtual Task`1<TokenRequestValidationResult> ValidateTokenRequestAsync(ValidatedTokenRequest request);
}
public class IdentityServer3.Core.Services.Default.DefaultCustomTokenResponseGenerator : object {
    public sealed virtual Task`1<TokenResponse> GenerateAsync(ValidatedTokenRequest request, TokenResponse response);
}
public class IdentityServer3.Core.Services.Default.DefaultCustomTokenValidator : object {
    private static ILog Logger;
    protected IUserService _users;
    protected IClientStore _clients;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    public DefaultCustomTokenValidator(IUserService users, IClientStore clients);
    private static DefaultCustomTokenValidator();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultCustomTokenValidator/<ValidateAccessTokenAsync>d__4")]
[DebuggerStepThroughAttribute]
public virtual Task`1<TokenValidationResult> ValidateAccessTokenAsync(TokenValidationResult result);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultCustomTokenValidator/<ValidateIdentityTokenAsync>d__f")]
[DebuggerStepThroughAttribute]
public virtual Task`1<TokenValidationResult> ValidateIdentityTokenAsync(TokenValidationResult result);
    [CompilerGeneratedAttribute]
private static bool <ValidateAccessTokenAsync>b__0(Claim c);
    [CompilerGeneratedAttribute]
private static bool <ValidateAccessTokenAsync>b__1(Claim c);
    [CompilerGeneratedAttribute]
private static bool <ValidateIdentityTokenAsync>b__d(Claim c);
}
public class IdentityServer3.Core.Services.Default.DefaultEventService : object {
    private static ILog Logger;
    private static DefaultEventService();
    public virtual Task RaiseAsync(Event`1<T> evt);
}
public class IdentityServer3.Core.Services.Default.DefaultLocalizationService : object {
    public virtual string GetString(string category, string id);
}
public class IdentityServer3.Core.Services.Default.DefaultRedirectUriValidator : object {
    protected bool StringCollectionContainsString(IEnumerable`1<string> uris, string requestedUri);
    public virtual Task`1<bool> IsRedirectUriValidAsync(string requestedUri, Client client);
    public virtual Task`1<bool> IsPostLogoutRedirectUriValidAsync(string requestedUri, Client client);
}
public class IdentityServer3.Core.Services.Default.DefaultRefreshTokenService : object {
    private static ILog Logger;
    protected IRefreshTokenStore _store;
    protected IEventService _events;
    public DefaultRefreshTokenService(IRefreshTokenStore store, IEventService events);
    private static DefaultRefreshTokenService();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultRefreshTokenService/<CreateRefreshTokenAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> CreateRefreshTokenAsync(ClaimsPrincipal subject, Token accessToken, Client client);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultRefreshTokenService/<UpdateRefreshTokenAsync>d__7")]
[DebuggerStepThroughAttribute]
public virtual Task`1<string> UpdateRefreshTokenAsync(string handle, RefreshToken refreshToken, Client client);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultRefreshTokenService/<RaiseRefreshTokenIssuedEventAsync>d__c")]
protected Task RaiseRefreshTokenIssuedEventAsync(string handle, RefreshToken token);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultRefreshTokenService/<RaiseRefreshTokenRefreshedEventAsync>d__f")]
[DebuggerStepThroughAttribute]
protected Task RaiseRefreshTokenRefreshedEventAsync(string oldHandle, string newHandle, RefreshToken token);
}
public class IdentityServer3.Core.Services.Default.DefaultSigningKeyService : object {
    private IdentityServerOptions _options;
    public DefaultSigningKeyService(IdentityServerOptions options);
    public sealed virtual Task`1<string> GetKidAsync(X509Certificate2 certificate);
    public sealed virtual Task`1<IEnumerable`1<X509Certificate2>> GetPublicKeysAsync();
    public sealed virtual Task`1<X509Certificate2> GetSigningKeyAsync();
}
public class IdentityServer3.Core.Services.Default.DefaultTokenService : object {
    private static ILog Logger;
    protected IdentityServerOptions _options;
    protected IClaimsProvider _claimsProvider;
    protected ITokenHandleStore _tokenHandles;
    protected ITokenSigningService _signingService;
    protected IEventService _events;
    protected OwinEnvironmentService _owinEnvironmentService;
    private string IssuerUri { get; }
    public DefaultTokenService(IdentityServerOptions options, IClaimsProvider claimsProvider, ITokenHandleStore tokenHandles, ITokenSigningService signingService, IEventService events);
    public DefaultTokenService(IdentityServerOptions options, IClaimsProvider claimsProvider, ITokenHandleStore tokenHandles, ITokenSigningService signingService, IEventService events, OwinEnvironmentService owinEnvironmentService);
    private static DefaultTokenService();
    private string get_IssuerUri();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultTokenService/<CreateIdentityTokenAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<Token> CreateIdentityTokenAsync(TokenCreationRequest request);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultTokenService/<CreateAccessTokenAsync>d__7")]
[DebuggerStepThroughAttribute]
public virtual Task`1<Token> CreateAccessTokenAsync(TokenCreationRequest request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultTokenService/<CreateSecurityTokenAsync>d__c")]
public virtual Task`1<string> CreateSecurityTokenAsync(Token token);
    protected virtual string HashAdditionalData(string tokenToHash);
}
public class IdentityServer3.Core.Services.Default.DefaultTokenSigningService : object {
    protected IdentityServerOptions _options;
    private ISigningKeyService _keyService;
    public DefaultTokenSigningService(IdentityServerOptions options);
    public DefaultTokenSigningService(ISigningKeyService keyService);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultTokenSigningService/<SignTokenAsync>d__0")]
public virtual Task`1<string> SignTokenAsync(Token token);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultTokenSigningService/<GetSigningCredentialsAsync>d__5")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<SigningCredentials> GetSigningCredentialsAsync();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultTokenSigningService/<CreateJsonWebToken>d__8")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<string> CreateJsonWebToken(Token token, SigningCredentials credentials);
    protected virtual string CreatePayload(Token token);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultTokenSigningService/<CreateHeaderAsync>d__c")]
private Task`1<JwtHeader> CreateHeaderAsync(SigningCredentials credential);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultTokenSigningService/<SignAsync>d__11")]
private Task`1<string> SignAsync(string payload, SigningCredentials credentials);
}
public class IdentityServer3.Core.Services.Default.DefaultViewService : object {
    public static string LoginView;
    public static string LogoutView;
    public static string LoggedOutView;
    public static string ConsentView;
    public static string ClientPermissionsView;
    public static string ErrorView;
    public static string AuthorizeResponseView;
    private static JsonSerializerSettings settings;
    protected DefaultViewServiceOptions config;
    protected IViewLoader viewLoader;
    public DefaultViewService(DefaultViewServiceOptions config, IViewLoader viewLoader);
    private static DefaultViewService();
    public virtual Task`1<Stream> Login(LoginViewModel model, SignInMessage message);
    public virtual Task`1<Stream> Logout(LogoutViewModel model, SignOutMessage message);
    public virtual Task`1<Stream> LoggedOut(LoggedOutViewModel model, SignOutMessage message);
    public virtual Task`1<Stream> Consent(ConsentViewModel model, ValidatedAuthorizeRequest authorizeRequest);
    public sealed virtual Task`1<Stream> ClientPermissions(ClientPermissionsViewModel model);
    public virtual Task`1<Stream> Error(ErrorViewModel model);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultViewService/<AuthorizeResponse>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<Stream> AuthorizeResponse(AuthorizeResponseViewModel model);
    protected virtual Task`1<Stream> Render(CommonViewModel model, string page);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.DefaultViewService/<Render>d__8")]
protected virtual Task`1<Stream> Render(CommonViewModel model, string page, IEnumerable`1<string> stylesheets, IEnumerable`1<string> scripts);
    protected virtual Task`1<string> LoadHtmlTemplate(string page);
    protected string FormatHtmlTemplate(string htmlTemplate, object model);
    protected object BuildModel(CommonViewModel model, string page, IEnumerable`1<string> stylesheets, IEnumerable`1<string> scripts);
    private Dictionary`2<string, object> BuildModelDictionary(CommonViewModel model, string page, IEnumerable`1<string> stylesheets, IEnumerable`1<string> scripts);
    private string BuildTags(string tagFormat, string basePath, IEnumerable`1<string> values);
}
public class IdentityServer3.Core.Services.Default.DefaultViewServiceOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Stylesheets>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Scripts>k__BackingField;
    [CompilerGeneratedAttribute]
private Registration`1<IViewLoader> <ViewLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheViews>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomViewDirectory>k__BackingField;
    public IList`1<string> Stylesheets { get; public set; }
    public IList`1<string> Scripts { get; public set; }
    public Registration`1<IViewLoader> ViewLoader { get; public set; }
    public bool CacheViews { get; public set; }
    public string CustomViewDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Stylesheets();
    [CompilerGeneratedAttribute]
public void set_Stylesheets(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Scripts();
    [CompilerGeneratedAttribute]
public void set_Scripts(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Registration`1<IViewLoader> get_ViewLoader();
    [CompilerGeneratedAttribute]
public void set_ViewLoader(Registration`1<IViewLoader> value);
    [CompilerGeneratedAttribute]
public bool get_CacheViews();
    [CompilerGeneratedAttribute]
public void set_CacheViews(bool value);
    [CompilerGeneratedAttribute]
public string get_CustomViewDirectory();
    [CompilerGeneratedAttribute]
public void set_CustomViewDirectory(string value);
}
public class IdentityServer3.Core.Services.Default.DefaultViewServiceRegistration : DefaultViewServiceRegistration`1<DefaultViewService> {
    public DefaultViewServiceRegistration(DefaultViewServiceOptions options);
}
public class IdentityServer3.Core.Services.Default.DefaultViewServiceRegistration`1 : Registration`2<IViewService, T> {
    private static string InnerRegistrationName;
    public DefaultViewServiceRegistration`1(DefaultViewServiceOptions options);
}
public class IdentityServer3.Core.Services.Default.EmbeddedAssetsViewLoader : object {
    public sealed virtual Task`1<string> LoadAsync(string name);
}
internal class IdentityServer3.Core.Services.Default.EventServiceDecorator : object {
    protected static ILog Logger;
    private IdentityServerOptions options;
    private OwinContext context;
    private IEventService inner;
    public EventServiceDecorator(IdentityServerOptions options, OwinEnvironmentService owinEnvironment, IEventService inner);
    private static EventServiceDecorator();
    public sealed virtual Task RaiseAsync(Event`1<T> evt);
    private bool CanRaiseEvent(Event`1<T> evt);
    protected virtual Event`1<T> PrepareEvent(Event`1<T> evt);
}
internal class IdentityServer3.Core.Services.Default.ExternalClaimsFilterUserService : object {
    private IExternalClaimsFilter filter;
    private IUserService inner;
    public ExternalClaimsFilterUserService(IExternalClaimsFilter filter, IUserService inner);
    public sealed virtual Task PreAuthenticateAsync(PreAuthenticationContext context);
    public sealed virtual Task AuthenticateLocalAsync(LocalAuthenticationContext context);
    public sealed virtual Task AuthenticateExternalAsync(ExternalAuthenticationContext context);
    public sealed virtual Task PostAuthenticateAsync(PostAuthenticationContext context);
    public sealed virtual Task GetProfileDataAsync(ProfileDataRequestContext context);
    public sealed virtual Task IsActiveAsync(IsActiveContext context);
    public sealed virtual Task SignOutAsync(SignOutContext context);
}
public class IdentityServer3.Core.Services.Default.FacebookClaimsFilter : ClaimsFilterBase {
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Predicate`1<Claim> CS$<>9__CachedAnonymousMethodDelegate3;
    public FacebookClaimsFilter(string provider);
    protected virtual IEnumerable`1<Claim> TransformClaims(IEnumerable`1<Claim> claims);
    [CompilerGeneratedAttribute]
private static bool <TransformClaims>b__0(Claim x);
    [CompilerGeneratedAttribute]
private static bool <TransformClaims>b__1(Claim x);
}
public class IdentityServer3.Core.Services.Default.FileSystemViewLoader : object {
    private string directory;
    public FileSystemViewLoader(string directory);
    public sealed virtual Task`1<string> LoadAsync(string page);
}
public class IdentityServer3.Core.Services.Default.FileSystemWithEmbeddedFallbackViewLoader : object {
    private FileSystemViewLoader file;
    private EmbeddedAssetsViewLoader embedded;
    public FileSystemWithEmbeddedFallbackViewLoader(string directory);
    private static string GetDefaultDirectory();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.FileSystemWithEmbeddedFallbackViewLoader/<LoadAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> LoadAsync(string name);
}
public class IdentityServer3.Core.Services.Default.IgnoreClaimsFilter : object {
    private String[] claimTypesToIgnore;
    public IgnoreClaimsFilter(String[] claimTypesToIgnore);
    public sealed virtual IEnumerable`1<Claim> Filter(string provider, IEnumerable`1<Claim> claims);
    [CompilerGeneratedAttribute]
private bool <Filter>b__0(Claim x);
}
public interface IdentityServer3.Core.Services.Default.IViewLoader {
    public abstract virtual Task`1<string> LoadAsync(string name);
}
internal class IdentityServer3.Core.Services.Default.KeyHashingAuthorizationCodeStore : KeyHashingTransientDataRepository`1<AuthorizationCode> {
    public KeyHashingAuthorizationCodeStore(IAuthorizationCodeStore inner);
}
internal class IdentityServer3.Core.Services.Default.KeyHashingRefreshTokenStore : KeyHashingTransientDataRepository`1<RefreshToken> {
    public KeyHashingRefreshTokenStore(IRefreshTokenStore inner);
}
internal class IdentityServer3.Core.Services.Default.KeyHashingTokenHandleStore : KeyHashingTransientDataRepository`1<Token> {
    public KeyHashingTokenHandleStore(ITokenHandleStore inner);
}
internal class IdentityServer3.Core.Services.Default.KeyHashingTransientDataRepository`1 : object {
    private string hashName;
    private ITransientDataRepository`1<T> inner;
    public KeyHashingTransientDataRepository`1(ITransientDataRepository`1<T> inner);
    public KeyHashingTransientDataRepository`1(string hashName, ITransientDataRepository`1<T> inner);
    protected string Hash(string value);
    public sealed virtual Task StoreAsync(string key, T value);
    public sealed virtual Task`1<T> GetAsync(string key);
    public sealed virtual Task RemoveAsync(string key);
    public sealed virtual Task`1<IEnumerable`1<ITokenMetadata>> GetAllAsync(string subject);
    public sealed virtual Task RevokeAsync(string subject, string client);
}
internal class IdentityServer3.Core.Services.Default.NopClaimsFilter : object {
    public sealed virtual IEnumerable`1<Claim> Filter(string provider, IEnumerable`1<Claim> claims);
}
public class IdentityServer3.Core.Services.Default.NormalizingClaimsFilter : object {
    public sealed virtual IEnumerable`1<Claim> Filter(string provider, IEnumerable`1<Claim> claims);
    public IEnumerable`1<Claim> Filter(IEnumerable`1<Claim> claims);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Services.Default.ResourceCache : object {
    private ConcurrentDictionary`2<string, string> cache;
    public string Read(string name);
    public void Write(string name, string value);
}
internal class IdentityServer3.Core.Services.Default.TokenMetadataPermissionsStoreAdapter : object {
    private Func`2<string, Task`1<IEnumerable`1<ITokenMetadata>>> get;
    private Func`3<string, string, Task> delete;
    [CompilerGeneratedAttribute]
private static Func`2<ITokenMetadata, Consent> CS$<>9__CachedAnonymousMethodDelegate2;
    public TokenMetadataPermissionsStoreAdapter(Func`2<string, Task`1<IEnumerable`1<ITokenMetadata>>> get, Func`3<string, string, Task> delete);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.TokenMetadataPermissionsStoreAdapter/<LoadAllAsync>d__3")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IEnumerable`1<Consent>> LoadAllAsync(string subject);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Services.Default.TokenMetadataPermissionsStoreAdapter/<RevokeAsync>d__8")]
[DebuggerStepThroughAttribute]
public sealed virtual Task RevokeAsync(string subject, string client);
    [CompilerGeneratedAttribute]
private static Consent <LoadAllAsync>b__1(ITokenMetadata token);
}
public class IdentityServer3.Core.Services.Default.TwitterClaimsFilter : ClaimsFilterBase {
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public TwitterClaimsFilter(string provider);
    protected virtual IEnumerable`1<Claim> TransformClaims(IEnumerable`1<Claim> claims);
    [CompilerGeneratedAttribute]
private static bool <TransformClaims>b__0(Claim x);
}
public class IdentityServer3.Core.Services.Default.UserServiceBase : object {
    public virtual Task PreAuthenticateAsync(PreAuthenticationContext context);
    public virtual Task AuthenticateLocalAsync(LocalAuthenticationContext context);
    public virtual Task AuthenticateExternalAsync(ExternalAuthenticationContext context);
    public virtual Task PostAuthenticateAsync(PostAuthenticationContext context);
    public virtual Task SignOutAsync(SignOutContext context);
    public virtual Task GetProfileDataAsync(ProfileDataRequestContext context);
    public virtual Task IsActiveAsync(IsActiveContext context);
}
public interface IdentityServer3.Core.Services.IAuthenticationSessionValidator {
    public abstract virtual Task`1<bool> IsAuthenticationSessionValidAsync(ClaimsPrincipal subject);
}
public interface IdentityServer3.Core.Services.IAuthorizationCodeStore {
}
public interface IdentityServer3.Core.Services.ICache`1 {
    public abstract virtual Task`1<T> GetAsync(string key);
    public abstract virtual Task SetAsync(string key, T item);
}
public interface IdentityServer3.Core.Services.IClaimsProvider {
    public abstract virtual Task`1<IEnumerable`1<Claim>> GetIdentityTokenClaimsAsync(ClaimsPrincipal subject, Client client, IEnumerable`1<Scope> scopes, bool includeAllIdentityClaims, ValidatedRequest request);
    public abstract virtual Task`1<IEnumerable`1<Claim>> GetAccessTokenClaimsAsync(ClaimsPrincipal subject, Client client, IEnumerable`1<Scope> scopes, ValidatedRequest request);
}
public interface IdentityServer3.Core.Services.IClientPermissionsService {
    public abstract virtual Task`1<IEnumerable`1<ClientPermission>> GetClientPermissionsAsync(string subject);
    public abstract virtual Task RevokeClientPermissionsAsync(string subject, string clientId);
}
public interface IdentityServer3.Core.Services.IClientStore {
    public abstract virtual Task`1<Client> FindClientByIdAsync(string clientId);
}
public interface IdentityServer3.Core.Services.IConsentService {
    public abstract virtual Task`1<bool> RequiresConsentAsync(Client client, ClaimsPrincipal subject, IEnumerable`1<string> scopes);
    public abstract virtual Task UpdateConsentAsync(Client client, ClaimsPrincipal subject, IEnumerable`1<string> scopes);
}
public interface IdentityServer3.Core.Services.IConsentStore {
    public abstract virtual Task`1<Consent> LoadAsync(string subject, string client);
    public abstract virtual Task UpdateAsync(Consent consent);
}
public interface IdentityServer3.Core.Services.ICorsPolicyService {
    public abstract virtual Task`1<bool> IsOriginAllowedAsync(string origin);
}
public interface IdentityServer3.Core.Services.ICustomGrantValidator {
    public string GrantType { get; }
    public abstract virtual Task`1<CustomGrantValidationResult> ValidateAsync(ValidatedTokenRequest request);
    public abstract virtual string get_GrantType();
}
public interface IdentityServer3.Core.Services.ICustomRequestValidator {
    public abstract virtual Task`1<AuthorizeRequestValidationResult> ValidateAuthorizeRequestAsync(ValidatedAuthorizeRequest request);
    public abstract virtual Task`1<TokenRequestValidationResult> ValidateTokenRequestAsync(ValidatedTokenRequest request);
}
public interface IdentityServer3.Core.Services.ICustomTokenResponseGenerator {
    public abstract virtual Task`1<TokenResponse> GenerateAsync(ValidatedTokenRequest request, TokenResponse response);
}
public interface IdentityServer3.Core.Services.ICustomTokenValidator {
    public abstract virtual Task`1<TokenValidationResult> ValidateAccessTokenAsync(TokenValidationResult result);
    public abstract virtual Task`1<TokenValidationResult> ValidateIdentityTokenAsync(TokenValidationResult result);
}
public interface IdentityServer3.Core.Services.IDependencyResolver {
    public abstract virtual T Resolve(string name);
}
public interface IdentityServer3.Core.Services.IEventService {
    public abstract virtual Task RaiseAsync(Event`1<T> evt);
}
public interface IdentityServer3.Core.Services.IExternalClaimsFilter {
    public abstract virtual IEnumerable`1<Claim> Filter(string provider, IEnumerable`1<Claim> claims);
}
public interface IdentityServer3.Core.Services.ILocalizationService {
    public abstract virtual string GetString(string category, string id);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryAuthorizationCodeStore : object {
    private ConcurrentDictionary`2<string, AuthorizationCode> _repository;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, AuthorizationCode>, AuthorizationCode> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, AuthorizationCode>, string> CS$<>9__CachedAnonymousMethodDelegate7;
    public sealed virtual Task StoreAsync(string key, AuthorizationCode value);
    public sealed virtual Task`1<AuthorizationCode> GetAsync(string key);
    public sealed virtual Task RemoveAsync(string key);
    public sealed virtual Task`1<IEnumerable`1<ITokenMetadata>> GetAllAsync(string subject);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.InMemory.InMemoryAuthorizationCodeStore/<RevokeAsync>d__a")]
public sealed virtual Task RevokeAsync(string subject, string client);
    [CompilerGeneratedAttribute]
private static AuthorizationCode <GetAllAsync>b__1(KeyValuePair`2<string, AuthorizationCode> item);
    [CompilerGeneratedAttribute]
private static string <RevokeAsync>b__6(KeyValuePair`2<string, AuthorizationCode> item);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryClientStore : object {
    private IEnumerable`1<Client> _clients;
    public InMemoryClientStore(IEnumerable`1<Client> clients);
    public sealed virtual Task`1<Client> FindClientByIdAsync(string clientId);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryConsentStore : object {
    private List`1<Consent> _consents;
    public sealed virtual Task`1<IEnumerable`1<Consent>> LoadAllAsync(string subject);
    public sealed virtual Task`1<Consent> LoadAsync(string subject, string client);
    public sealed virtual Task UpdateAsync(Consent consent);
    public sealed virtual Task RevokeAsync(string subject, string client);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryCorsPolicyService : object {
    private static ILog Logger;
    private IEnumerable`1<Client> clients;
    [CompilerGeneratedAttribute]
private static Func`2<Client, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`3<Client, string, string> CS$<>9__CachedAnonymousMethodDelegate4;
    public InMemoryCorsPolicyService(IEnumerable`1<Client> clients);
    private static InMemoryCorsPolicyService();
    public sealed virtual Task`1<bool> IsOriginAllowedAsync(string origin);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <IsOriginAllowedAsync>b__1(Client client);
    [CompilerGeneratedAttribute]
private static string <IsOriginAllowedAsync>b__2(Client client, string url);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryRefreshTokenStore : object {
    private ConcurrentDictionary`2<string, RefreshToken> _repository;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, RefreshToken>, RefreshToken> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, RefreshToken>, string> CS$<>9__CachedAnonymousMethodDelegate7;
    public sealed virtual Task StoreAsync(string key, RefreshToken value);
    public sealed virtual Task`1<RefreshToken> GetAsync(string key);
    public sealed virtual Task RemoveAsync(string key);
    public sealed virtual Task`1<IEnumerable`1<ITokenMetadata>> GetAllAsync(string subject);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.InMemory.InMemoryRefreshTokenStore/<RevokeAsync>d__a")]
public sealed virtual Task RevokeAsync(string subject, string client);
    [CompilerGeneratedAttribute]
private static RefreshToken <GetAllAsync>b__1(KeyValuePair`2<string, RefreshToken> item);
    [CompilerGeneratedAttribute]
private static string <RevokeAsync>b__6(KeyValuePair`2<string, RefreshToken> item);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryScopeStore : object {
    private IEnumerable`1<Scope> _scopes;
    [CompilerGeneratedAttribute]
private static Func`2<Scope, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public InMemoryScopeStore(IEnumerable`1<Scope> scopes);
    public sealed virtual Task`1<IEnumerable`1<Scope>> FindScopesAsync(IEnumerable`1<string> scopeNames);
    public sealed virtual Task`1<IEnumerable`1<Scope>> GetScopesAsync(bool publicOnly);
    [CompilerGeneratedAttribute]
private static bool <GetScopesAsync>b__3(Scope s);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryTokenHandleStore : object {
    private ConcurrentDictionary`2<string, Token> _repository;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, Token>, Token> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, Token>, string> CS$<>9__CachedAnonymousMethodDelegate7;
    public sealed virtual Task StoreAsync(string key, Token value);
    public sealed virtual Task`1<Token> GetAsync(string key);
    public sealed virtual Task RemoveAsync(string key);
    public sealed virtual Task`1<IEnumerable`1<ITokenMetadata>> GetAllAsync(string subject);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Services.InMemory.InMemoryTokenHandleStore/<RevokeAsync>d__a")]
public sealed virtual Task RevokeAsync(string subject, string client);
    [CompilerGeneratedAttribute]
private static Token <GetAllAsync>b__1(KeyValuePair`2<string, Token> item);
    [CompilerGeneratedAttribute]
private static string <RevokeAsync>b__6(KeyValuePair`2<string, Token> item);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryUser : object {
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Claim> <Claims>k__BackingField;
    public string Subject { get; public set; }
    public bool Enabled { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public string Provider { get; public set; }
    public string ProviderId { get; public set; }
    public IEnumerable`1<Claim> Claims { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderId();
    [CompilerGeneratedAttribute]
public void set_ProviderId(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Claim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IEnumerable`1<Claim> value);
}
public class IdentityServer3.Core.Services.InMemory.InMemoryUserService : UserServiceBase {
    private List`1<InMemoryUser> _users;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    public InMemoryUserService(List`1<InMemoryUser> users);
    public virtual Task AuthenticateLocalAsync(LocalAuthenticationContext context);
    public virtual Task AuthenticateExternalAsync(ExternalAuthenticationContext context);
    public virtual Task GetProfileDataAsync(ProfileDataRequestContext context);
    public virtual Task IsActiveAsync(IsActiveContext context);
    protected virtual string GetDisplayName(InMemoryUser user);
    [CompilerGeneratedAttribute]
private static bool <AuthenticateExternalAsync>b__5(Claim x);
    [CompilerGeneratedAttribute]
private static bool <GetDisplayName>b__12(Claim x);
}
public interface IdentityServer3.Core.Services.IPermissionsStore {
    public abstract virtual Task`1<IEnumerable`1<Consent>> LoadAllAsync(string subject);
    public abstract virtual Task RevokeAsync(string subject, string client);
}
public interface IdentityServer3.Core.Services.IRedirectUriValidator {
    public abstract virtual Task`1<bool> IsRedirectUriValidAsync(string requestedUri, Client client);
    public abstract virtual Task`1<bool> IsPostLogoutRedirectUriValidAsync(string requestedUri, Client client);
}
public interface IdentityServer3.Core.Services.IRefreshTokenService {
    public abstract virtual Task`1<string> CreateRefreshTokenAsync(ClaimsPrincipal subject, Token accessToken, Client client);
    public abstract virtual Task`1<string> UpdateRefreshTokenAsync(string handle, RefreshToken refreshToken, Client client);
}
public interface IdentityServer3.Core.Services.IRefreshTokenStore {
}
public interface IdentityServer3.Core.Services.IScopeStore {
    public abstract virtual Task`1<IEnumerable`1<Scope>> FindScopesAsync(IEnumerable`1<string> scopeNames);
    public abstract virtual Task`1<IEnumerable`1<Scope>> GetScopesAsync(bool publicOnly);
}
public interface IdentityServer3.Core.Services.ISecretParser {
    public abstract virtual Task`1<ParsedSecret> ParseAsync(IDictionary`2<string, object> environment);
}
public interface IdentityServer3.Core.Services.ISecretValidator {
    public abstract virtual Task`1<SecretValidationResult> ValidateAsync(IEnumerable`1<Secret> secrets, ParsedSecret parsedSecret);
}
public interface IdentityServer3.Core.Services.ISigningKeyService {
    public abstract virtual Task`1<X509Certificate2> GetSigningKeyAsync();
    public abstract virtual Task`1<IEnumerable`1<X509Certificate2>> GetPublicKeysAsync();
    public abstract virtual Task`1<string> GetKidAsync(X509Certificate2 certificate);
}
public interface IdentityServer3.Core.Services.ITokenHandleStore {
}
public interface IdentityServer3.Core.Services.ITokenService {
    public abstract virtual Task`1<Token> CreateIdentityTokenAsync(TokenCreationRequest request);
    public abstract virtual Task`1<Token> CreateAccessTokenAsync(TokenCreationRequest request);
    public abstract virtual Task`1<string> CreateSecurityTokenAsync(Token token);
}
public interface IdentityServer3.Core.Services.ITokenSigningService {
    public abstract virtual Task`1<string> SignTokenAsync(Token token);
}
public interface IdentityServer3.Core.Services.ITransientDataRepository`1 {
    public abstract virtual Task StoreAsync(string key, T value);
    public abstract virtual Task`1<T> GetAsync(string key);
    public abstract virtual Task RemoveAsync(string key);
    public abstract virtual Task`1<IEnumerable`1<ITokenMetadata>> GetAllAsync(string subject);
    public abstract virtual Task RevokeAsync(string subject, string client);
}
public interface IdentityServer3.Core.Services.IUserService {
    public abstract virtual Task PreAuthenticateAsync(PreAuthenticationContext context);
    public abstract virtual Task AuthenticateLocalAsync(LocalAuthenticationContext context);
    public abstract virtual Task AuthenticateExternalAsync(ExternalAuthenticationContext context);
    public abstract virtual Task PostAuthenticateAsync(PostAuthenticationContext context);
    public abstract virtual Task SignOutAsync(SignOutContext context);
    public abstract virtual Task GetProfileDataAsync(ProfileDataRequestContext context);
    public abstract virtual Task IsActiveAsync(IsActiveContext context);
}
public interface IdentityServer3.Core.Services.IViewService {
    public abstract virtual Task`1<Stream> Login(LoginViewModel model, SignInMessage message);
    public abstract virtual Task`1<Stream> Logout(LogoutViewModel model, SignOutMessage message);
    public abstract virtual Task`1<Stream> LoggedOut(LoggedOutViewModel model, SignOutMessage message);
    public abstract virtual Task`1<Stream> Consent(ConsentViewModel model, ValidatedAuthorizeRequest authorizeRequest);
    public abstract virtual Task`1<Stream> ClientPermissions(ClientPermissionsViewModel model);
    public abstract virtual Task`1<Stream> Error(ErrorViewModel model);
}
public class IdentityServer3.Core.Services.OwinEnvironmentService : object {
    private IDictionary`2<string, object> _environment;
    public IDictionary`2<string, object> Environment { get; }
    internal OwinEnvironmentService(IOwinContext context);
    public OwinEnvironmentService(IDictionary`2<string, object> environment);
    public IDictionary`2<string, object> get_Environment();
}
public class IdentityServer3.Core.Validation.AuthorizeRequestValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private ErrorTypes <ErrorType>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidatedAuthorizeRequest <ValidatedRequest>k__BackingField;
    public ErrorTypes ErrorType { get; public set; }
    public ValidatedAuthorizeRequest ValidatedRequest { get; public set; }
    [CompilerGeneratedAttribute]
public ErrorTypes get_ErrorType();
    [CompilerGeneratedAttribute]
public void set_ErrorType(ErrorTypes value);
    [CompilerGeneratedAttribute]
public ValidatedAuthorizeRequest get_ValidatedRequest();
    [CompilerGeneratedAttribute]
public void set_ValidatedRequest(ValidatedAuthorizeRequest value);
}
internal class IdentityServer3.Core.Validation.AuthorizeRequestValidator : object {
    private static ILog Logger;
    private IdentityServerOptions _options;
    private IClientStore _clients;
    private ICustomRequestValidator _customValidator;
    private IRedirectUriValidator _uriValidator;
    private ScopeValidator _scopeValidator;
    private SessionCookie _sessionCookie;
    private ResponseTypeEqualityComparer _responseTypeEqualityComparer;
    public AuthorizeRequestValidator(IdentityServerOptions options, IClientStore clients, ICustomRequestValidator customValidator, IRedirectUriValidator uriValidator, ScopeValidator scopeValidator, SessionCookie sessionCookie);
    private static AuthorizeRequestValidator();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.AuthorizeRequestValidator/<ValidateAsync>d__1")]
[DebuggerStepThroughAttribute]
public Task`1<AuthorizeRequestValidationResult> ValidateAsync(NameValueCollection parameters, ClaimsPrincipal subject);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.AuthorizeRequestValidator/<ValidateClientAsync>d__a")]
[DebuggerStepThroughAttribute]
public Task`1<AuthorizeRequestValidationResult> ValidateClientAsync(ValidatedAuthorizeRequest request);
    private AuthorizeRequestValidationResult ValidateCoreParameters(ValidatedAuthorizeRequest request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.AuthorizeRequestValidator/<ValidateScopeAsync>d__15")]
private Task`1<AuthorizeRequestValidationResult> ValidateScopeAsync(ValidatedAuthorizeRequest request);
    private AuthorizeRequestValidationResult ValidateOptionalParameters(ValidatedAuthorizeRequest request);
    private AuthorizeRequestValidationResult ValidateProofKeyParameters(ValidatedAuthorizeRequest request);
    private bool RequestMatchesProofKeyFlow(ValidatedAuthorizeRequest request);
    private AuthorizeRequestValidationResult Invalid(ValidatedAuthorizeRequest request, ErrorTypes errorType, string error);
    private AuthorizeRequestValidationResult Valid(ValidatedAuthorizeRequest request);
    private void LogError(string message, ValidatedAuthorizeRequest request);
    private void LogSuccess(ValidatedAuthorizeRequest request);
}
public class IdentityServer3.Core.Validation.BasicAuthenticationSecretParser : object {
    private static ILog Logger;
    private IdentityServerOptions _options;
    public BasicAuthenticationSecretParser(IdentityServerOptions options);
    private static BasicAuthenticationSecretParser();
    public sealed virtual Task`1<ParsedSecret> ParseAsync(IDictionary`2<string, object> environment);
}
[EditorBrowsableAttribute("1")]
public enum IdentityServer3.Core.Validation.BearerTokenUsageType : Enum {
    public int value__;
    public static BearerTokenUsageType AuthorizationHeader;
    public static BearerTokenUsageType PostBody;
    public static BearerTokenUsageType QueryString;
}
internal class IdentityServer3.Core.Validation.BearerTokenUsageValidationResult : object {
    [CompilerGeneratedAttribute]
private bool <TokenFound>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private BearerTokenUsageType <UsageType>k__BackingField;
    public bool TokenFound { get; public set; }
    public string Token { get; public set; }
    public BearerTokenUsageType UsageType { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TokenFound();
    [CompilerGeneratedAttribute]
public void set_TokenFound(bool value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public BearerTokenUsageType get_UsageType();
    [CompilerGeneratedAttribute]
public void set_UsageType(BearerTokenUsageType value);
}
internal class IdentityServer3.Core.Validation.BearerTokenUsageValidator : object {
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.BearerTokenUsageValidator/<ValidateAsync>d__0")]
public Task`1<BearerTokenUsageValidationResult> ValidateAsync(IOwinContext context);
    public BearerTokenUsageValidationResult ValidateAuthorizationHeader(IOwinContext context);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.BearerTokenUsageValidator/<ValidatePostBodyAsync>d__6")]
[DebuggerStepThroughAttribute]
public Task`1<BearerTokenUsageValidationResult> ValidatePostBodyAsync(IOwinContext context);
}
public class IdentityServer3.Core.Validation.ClientAssertionSecretParser : object {
    private static ILog Logger;
    private static ClientAssertionSecretParser();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.ClientAssertionSecretParser/<ParseAsync>d__1")]
public sealed virtual Task`1<ParsedSecret> ParseAsync(IDictionary`2<string, object> environment);
    private string GetClientIdFromToken(string token);
}
public class IdentityServer3.Core.Validation.ClientSecretValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    public Client Client { get; public set; }
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
}
internal class IdentityServer3.Core.Validation.ClientSecretValidator : object {
    private static ILog Logger;
    private IClientStore _clients;
    private OwinEnvironmentService _environment;
    private IEventService _events;
    private SecretParser _parser;
    private SecretValidator _validator;
    public ClientSecretValidator(IClientStore clients, SecretParser parser, SecretValidator validator, OwinEnvironmentService environment, IEventService events);
    private static ClientSecretValidator();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.ClientSecretValidator/<ValidateAsync>d__2")]
public Task`1<ClientSecretValidationResult> ValidateAsync();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.ClientSecretValidator/<RaiseSuccessEvent>d__d")]
[DebuggerStepThroughAttribute]
private Task RaiseSuccessEvent(string clientId);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.ClientSecretValidator/<RaiseFailureEvent>d__10")]
private Task RaiseFailureEvent(string clientId, string message);
}
public class IdentityServer3.Core.Validation.CustomGrantValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    public ClaimsPrincipal Principal { get; public set; }
    public CustomGrantValidationResult(string errorMessage);
    public CustomGrantValidationResult(string subject, string authenticationMethod, IEnumerable`1<Claim> claims, string identityProvider);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1(Claim x);
}
internal class IdentityServer3.Core.Validation.CustomGrantValidator : object {
    private IEnumerable`1<ICustomGrantValidator> _validators;
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private static Func`2<ICustomGrantValidator, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public CustomGrantValidator(IEnumerable`1<ICustomGrantValidator> validators);
    private static CustomGrantValidator();
    public IEnumerable`1<string> GetAvailableGrantTypes();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.CustomGrantValidator/<ValidateAsync>d__7")]
public Task`1<CustomGrantValidationResult> ValidateAsync(ValidatedTokenRequest request);
    [CompilerGeneratedAttribute]
private static string <GetAvailableGrantTypes>b__0(ICustomGrantValidator v);
}
internal class IdentityServer3.Core.Validation.EmbeddedCertificateJwtSecurityTokenHandler : JwtSecurityTokenHandler {
    protected virtual SecurityKey ResolveIssuerSigningKey(string token, SecurityToken securityToken, SecurityKeyIdentifier keyIdentifier, TokenValidationParameters validationParameters);
}
internal class IdentityServer3.Core.Validation.EndSessionRequestValidator : object {
    private static ILog Logger;
    private ValidatedEndSessionRequest _validatedRequest;
    private TokenValidator _tokenValidator;
    private IRedirectUriValidator _uriValidator;
    private IdentityServerOptions _options;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    public ValidatedEndSessionRequest ValidatedRequest { get; }
    public EndSessionRequestValidator(IdentityServerOptions options, TokenValidator tokenValidator, IRedirectUriValidator uriValidator);
    private static EndSessionRequestValidator();
    public ValidatedEndSessionRequest get_ValidatedRequest();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.EndSessionRequestValidator/<ValidateAsync>d__3")]
[DebuggerStepThroughAttribute]
public Task`1<ValidationResult> ValidateAsync(NameValueCollection parameters, ClaimsPrincipal subject);
    private ValidationResult Valid();
    private ValidationResult Invalid();
    private void LogError(string message);
    private void LogSuccess();
    [CompilerGeneratedAttribute]
private static bool <ValidateAsync>b__1(Claim c);
}
public enum IdentityServer3.Core.Validation.ErrorTypes : Enum {
    public int value__;
    public static ErrorTypes Client;
    public static ErrorTypes User;
}
public class IdentityServer3.Core.Validation.HashedSharedSecretValidator : object {
    private static ILog Logger;
    private static HashedSharedSecretValidator();
    public sealed virtual Task`1<SecretValidationResult> ValidateAsync(IEnumerable`1<Secret> secrets, ParsedSecret parsedSecret);
}
internal enum IdentityServer3.Core.Validation.IntrospectionRequestValidationFailureReason : Enum {
    public int value__;
    public static IntrospectionRequestValidationFailureReason None;
    public static IntrospectionRequestValidationFailureReason MissingToken;
    public static IntrospectionRequestValidationFailureReason InvalidToken;
    public static IntrospectionRequestValidationFailureReason InvalidScope;
}
internal class IdentityServer3.Core.Validation.IntrospectionRequestValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IntrospectionRequestValidationFailureReason <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Claim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public bool IsActive { get; public set; }
    public IntrospectionRequestValidationFailureReason FailureReason { get; public set; }
    public IEnumerable`1<Claim> Claims { get; public set; }
    public string Token { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public IntrospectionRequestValidationFailureReason get_FailureReason();
    [CompilerGeneratedAttribute]
public void set_FailureReason(IntrospectionRequestValidationFailureReason value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Claim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IEnumerable`1<Claim> value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
}
internal class IdentityServer3.Core.Validation.IntrospectionRequestValidator : object {
    private TokenValidator _tokenValidator;
    public IntrospectionRequestValidator(TokenValidator tokenValidator);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.IntrospectionRequestValidator/<ValidateAsync>d__5")]
public Task`1<IntrospectionRequestValidationResult> ValidateAsync(NameValueCollection parameters, Scope scope);
}
public class IdentityServer3.Core.Validation.PlainTextSharedSecretValidator : object {
    private static ILog Logger;
    private static PlainTextSharedSecretValidator();
    public sealed virtual Task`1<SecretValidationResult> ValidateAsync(IEnumerable`1<Secret> secrets, ParsedSecret parsedSecret);
}
public class IdentityServer3.Core.Validation.PostBodySecretParser : object {
    private static ILog Logger;
    private IdentityServerOptions _options;
    public PostBodySecretParser(IdentityServerOptions options);
    private static PostBodySecretParser();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.PostBodySecretParser/<ParseAsync>d__1")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<ParsedSecret> ParseAsync(IDictionary`2<string, object> environment);
}
public class IdentityServer3.Core.Validation.PrivateKeyJwtSecretValidator : object {
    private static ILog Logger;
    private string audienceUri;
    [CompilerGeneratedAttribute]
private static Func`2<X509Certificate2, SecurityKey> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Secret, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<Secret, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<Secret, X509Certificate2> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<X509Certificate2, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    public PrivateKeyJwtSecretValidator(IdentityServerOptions options);
    private static PrivateKeyJwtSecretValidator();
    public sealed virtual Task`1<SecretValidationResult> ValidateAsync(IEnumerable`1<Secret> secrets, ParsedSecret parsedSecret);
    private static List`1<SecurityKey> GetTrustedKeys(IReadOnlyCollection`1<Secret> secrets, string jwtTokenString);
    private static bool EmbeddedCertificateIsTrusted(X509Certificate2 certificate, IReadOnlyCollection`1<Secret> secrets);
    private static List`1<X509Certificate2> GetAllTrustedCertificates(IEnumerable`1<Secret> secrets);
    private static X509Certificate2 GetCertificateFromString(string value);
    [CompilerGeneratedAttribute]
private static SecurityKey <GetTrustedKeys>b__4(X509Certificate2 c);
    [CompilerGeneratedAttribute]
private static bool <GetTrustedKeys>b__5(Secret s);
    [CompilerGeneratedAttribute]
private static bool <GetAllTrustedCertificates>b__c(Secret s);
    [CompilerGeneratedAttribute]
private static X509Certificate2 <GetAllTrustedCertificates>b__d(Secret s);
    [CompilerGeneratedAttribute]
private static bool <GetAllTrustedCertificates>b__e(X509Certificate2 c);
}
public enum IdentityServer3.Core.Validation.RequestedTokenTypes : Enum {
    public int value__;
    public static RequestedTokenTypes Bearer;
    public static RequestedTokenTypes PoP;
}
public class IdentityServer3.Core.Validation.ResponseTypeEqualityComparer : object {
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string value);
}
public class IdentityServer3.Core.Validation.ScopeSecretValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private Scope <Scope>k__BackingField;
    public Scope Scope { get; public set; }
    [CompilerGeneratedAttribute]
public Scope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(Scope value);
}
internal class IdentityServer3.Core.Validation.ScopeSecretValidator : object {
    private static ILog Logger;
    private IScopeStore _scopes;
    private OwinEnvironmentService _environment;
    private IEventService _events;
    private SecretParser _parser;
    private SecretValidator _validator;
    public ScopeSecretValidator(IScopeStore scopes, SecretParser parsers, SecretValidator validator, OwinEnvironmentService environment, IEventService events);
    private static ScopeSecretValidator();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.ScopeSecretValidator/<ValidateAsync>d__2")]
public Task`1<ScopeSecretValidationResult> ValidateAsync();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.ScopeSecretValidator/<RaiseSuccessEvent>d__d")]
[DebuggerStepThroughAttribute]
private Task RaiseSuccessEvent(string clientId);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.ScopeSecretValidator/<RaiseFailureEvent>d__10")]
[DebuggerStepThroughAttribute]
private Task RaiseFailureEvent(string clientId, string message);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Validation.ScopeValidator : object {
    private static ILog Logger;
    private IScopeStore _store;
    [CompilerGeneratedAttribute]
private bool <ContainsOpenIdScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsResourceScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsOfflineAccessScope>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Scope> <RequestedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Scope> <GrantedScopes>k__BackingField;
    public bool ContainsOpenIdScopes { get; private set; }
    public bool ContainsResourceScopes { get; private set; }
    public bool ContainsOfflineAccessScope { get; public set; }
    public List`1<Scope> RequestedScopes { get; private set; }
    public List`1<Scope> GrantedScopes { get; private set; }
    public ScopeValidator(IScopeStore store);
    private static ScopeValidator();
    [CompilerGeneratedAttribute]
public bool get_ContainsOpenIdScopes();
    [CompilerGeneratedAttribute]
private void set_ContainsOpenIdScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ContainsResourceScopes();
    [CompilerGeneratedAttribute]
private void set_ContainsResourceScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ContainsOfflineAccessScope();
    [CompilerGeneratedAttribute]
public void set_ContainsOfflineAccessScope(bool value);
    [CompilerGeneratedAttribute]
public List`1<Scope> get_RequestedScopes();
    [CompilerGeneratedAttribute]
private void set_RequestedScopes(List`1<Scope> value);
    [CompilerGeneratedAttribute]
public List`1<Scope> get_GrantedScopes();
    [CompilerGeneratedAttribute]
private void set_GrantedScopes(List`1<Scope> value);
    public static List`1<string> ParseScopesString(string scopes);
    public void SetConsentedScopes(IEnumerable`1<string> consentedScopes);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.ScopeValidator/<AreScopesValidAsync>d__7")]
[DebuggerStepThroughAttribute]
public Task`1<bool> AreScopesValidAsync(IEnumerable`1<string> requestedScopes);
    public bool AreScopesAllowed(Client client, IEnumerable`1<string> requestedScopes);
    public bool IsResponseTypeValid(string responseType);
}
internal class IdentityServer3.Core.Validation.SecretParser : object {
    private static ILog Logger;
    private IEnumerable`1<ISecretParser> _parsers;
    public SecretParser(IEnumerable`1<ISecretParser> parsers);
    private static SecretParser();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.SecretParser/<ParseAsync>d__0")]
public Task`1<ParsedSecret> ParseAsync(IDictionary`2<string, object> environment);
}
public class IdentityServer3.Core.Validation.SecretValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public bool Success { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
}
internal class IdentityServer3.Core.Validation.SecretValidator : object {
    private static ILog Logger;
    private IEnumerable`1<ISecretValidator> _validators;
    [CompilerGeneratedAttribute]
private static Func`2<Secret, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<Secret> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<Secret, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    public SecretValidator(IEnumerable`1<ISecretValidator> validators);
    private static SecretValidator();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.SecretValidator/<ValidateAsync>d__7")]
[DebuggerStepThroughAttribute]
public Task`1<SecretValidationResult> ValidateAsync(ParsedSecret parsedSecret, IEnumerable`1<Secret> secrets);
    [CompilerGeneratedAttribute]
private static bool <ValidateAsync>b__1(Secret s);
    [CompilerGeneratedAttribute]
private static void <ValidateAsync>b__2(Secret ex);
    [CompilerGeneratedAttribute]
private static bool <ValidateAsync>b__3(Secret s);
}
public class IdentityServer3.Core.Validation.TokenRequestValidationResult : ValidationResult {
}
internal class IdentityServer3.Core.Validation.TokenRequestValidator : object {
    private static ILog Logger;
    private IdentityServerOptions _options;
    private IAuthorizationCodeStore _authorizationCodes;
    private IUserService _users;
    private CustomGrantValidator _customGrantValidator;
    private ICustomRequestValidator _customRequestValidator;
    private IRefreshTokenStore _refreshTokens;
    private ScopeValidator _scopeValidator;
    private IEventService _events;
    private ValidatedTokenRequest _validatedRequest;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate24;
    public ValidatedTokenRequest ValidatedRequest { get; }
    public TokenRequestValidator(IdentityServerOptions options, IAuthorizationCodeStore authorizationCodes, IRefreshTokenStore refreshTokens, IUserService users, CustomGrantValidator customGrantValidator, ICustomRequestValidator customRequestValidator, ScopeValidator scopeValidator, IEventService events);
    private static TokenRequestValidator();
    public ValidatedTokenRequest get_ValidatedRequest();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<ValidateRequestAsync>d__0")]
public Task`1<TokenRequestValidationResult> ValidateRequestAsync(NameValueCollection parameters, Client client);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<RunValidationAsync>d__5")]
private Task`1<TokenRequestValidationResult> RunValidationAsync(Func`2<NameValueCollection, Task`1<TokenRequestValidationResult>> validationFunc, NameValueCollection parameters);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<ValidateAuthorizationCodeRequestAsync>d__a")]
[DebuggerStepThroughAttribute]
private Task`1<TokenRequestValidationResult> ValidateAuthorizationCodeRequestAsync(NameValueCollection parameters);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<ValidateClientCredentialsRequestAsync>d__1d")]
[DebuggerStepThroughAttribute]
private Task`1<TokenRequestValidationResult> ValidateClientCredentialsRequestAsync(NameValueCollection parameters);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<ValidateResourceOwnerCredentialRequestAsync>d__25")]
[DebuggerStepThroughAttribute]
private Task`1<TokenRequestValidationResult> ValidateResourceOwnerCredentialRequestAsync(NameValueCollection parameters);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<ValidateRefreshTokenRequestAsync>d__30")]
private Task`1<TokenRequestValidationResult> ValidateRefreshTokenRequestAsync(NameValueCollection parameters);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<ValidateCustomGrantRequestAsync>d__44")]
[DebuggerStepThroughAttribute]
private Task`1<TokenRequestValidationResult> ValidateCustomGrantRequestAsync(NameValueCollection parameters);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<ValidateRequestedScopesAsync>d__49")]
private Task`1<bool> ValidateRequestedScopesAsync(NameValueCollection parameters);
    private TokenRequestValidationResult ValidateAuthorizationCodeWithProofKeyParameters(string codeVerifier, AuthorizationCode authZcode);
    private bool ValidateCodeVerifierAgainstCodeChallenge(string codeVerifier, string codeChallenge, string codeChallengeMethod);
    private TokenRequestValidationResult ValidatePopParameters(NameValueCollection parameters);
    private TokenRequestValidationResult Valid();
    private TokenRequestValidationResult Invalid(string error, string errorDescription);
    private void LogError(string message);
    private void LogWarn(string message);
    private void LogSuccess();
    private Func`1<string> LogEvent(string message);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<RaiseSuccessfulResourceOwnerAuthenticationEventAsync>d__55")]
[DebuggerStepThroughAttribute]
private Task RaiseSuccessfulResourceOwnerAuthenticationEventAsync(string userName, string subjectId, SignInMessage signInMessage);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<RaiseFailedResourceOwnerAuthenticationEventAsync>d__58")]
private Task RaiseFailedResourceOwnerAuthenticationEventAsync(string userName, SignInMessage signInMessage, string error);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<RaiseFailedAuthorizationCodeRedeemedEventAsync>d__5b")]
private Task RaiseFailedAuthorizationCodeRedeemedEventAsync(string handle, string error);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<RaiseSuccessfulAuthorizationCodeRedeemedEventAsync>d__5e")]
[DebuggerStepThroughAttribute]
private Task RaiseSuccessfulAuthorizationCodeRedeemedEventAsync();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenRequestValidator/<RaiseRefreshTokenRefreshFailureEventAsync>d__61")]
[DebuggerStepThroughAttribute]
private Task RaiseRefreshTokenRefreshFailureEventAsync(string handle, string error);
    [CompilerGeneratedAttribute]
private static bool <ValidateResourceOwnerCredentialRequestAsync>b__21(string x);
    [CompilerGeneratedAttribute]
private static bool <ValidateResourceOwnerCredentialRequestAsync>b__22(string x);
}
internal class IdentityServer3.Core.Validation.TokenRevocationRequestValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private string <TokenTypeHint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string TokenTypeHint { get; public set; }
    public string Token { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TokenTypeHint();
    [CompilerGeneratedAttribute]
public void set_TokenTypeHint(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
}
internal class IdentityServer3.Core.Validation.TokenRevocationRequestValidator : object {
    public Task`1<TokenRevocationRequestValidationResult> ValidateRequestAsync(NameValueCollection parameters, Client client);
}
public class IdentityServer3.Core.Validation.TokenValidationResult : ValidationResult {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Claim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Jwt>k__BackingField;
    [CompilerGeneratedAttribute]
private Token <ReferenceToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceTokenId>k__BackingField;
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    public IEnumerable`1<Claim> Claims { get; public set; }
    public string Jwt { get; public set; }
    public Token ReferenceToken { get; public set; }
    public string ReferenceTokenId { get; public set; }
    public Client Client { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<Claim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IEnumerable`1<Claim> value);
    [CompilerGeneratedAttribute]
public string get_Jwt();
    [CompilerGeneratedAttribute]
public void set_Jwt(string value);
    [CompilerGeneratedAttribute]
public Token get_ReferenceToken();
    [CompilerGeneratedAttribute]
public void set_ReferenceToken(Token value);
    [CompilerGeneratedAttribute]
public string get_ReferenceTokenId();
    [CompilerGeneratedAttribute]
public void set_ReferenceTokenId(string value);
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
}
[EditorBrowsableAttribute("1")]
public class IdentityServer3.Core.Validation.TokenValidator : object {
    private static ILog Logger;
    private IdentityServerOptions _options;
    private ITokenHandleStore _tokenHandles;
    private ICustomTokenValidator _customValidator;
    private IClientStore _clients;
    private IOwinContext _context;
    private ISigningKeyService _keyService;
    private TokenValidationLog _log;
    [CompilerGeneratedAttribute]
private static Func`2<X509Certificate2, X509SecurityKey> CS$<>9__CachedAnonymousMethodDelegate1a;
    private string IssuerUri { get; }
    public TokenValidator(IdentityServerOptions options, IClientStore clients, ITokenHandleStore tokenHandles, ICustomTokenValidator customValidator);
    public TokenValidator(IdentityServerOptions options, IClientStore clients, ITokenHandleStore tokenHandles, ICustomTokenValidator customValidator, OwinEnvironmentService owinEnvironment, ISigningKeyService keyService);
    private static TokenValidator();
    private string get_IssuerUri();
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenValidator/<ValidateIdentityTokenAsync>d__0")]
[DebuggerStepThroughAttribute]
public virtual Task`1<TokenValidationResult> ValidateIdentityTokenAsync(string token, string clientId, bool validateLifetime);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenValidator/<ValidateAccessTokenAsync>d__f")]
[DebuggerStepThroughAttribute]
public virtual Task`1<TokenValidationResult> ValidateAccessTokenAsync(string token, string expectedScope);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenValidator/<ValidateJwtAsync>d__1b")]
[DebuggerStepThroughAttribute]
private Task`1<TokenValidationResult> ValidateJwtAsync(string jwt, string audience, IEnumerable`1<X509Certificate2> signingCertificates, bool validateLifetime);
    [AsyncStateMachineAttribute("IdentityServer3.Core.Validation.TokenValidator/<ValidateReferenceAccessTokenAsync>d__27")]
[DebuggerStepThroughAttribute]
private Task`1<TokenValidationResult> ValidateReferenceAccessTokenAsync(string tokenHandle);
    private IEnumerable`1<Claim> ReferenceTokenToClaims(Token token);
    private string GetClientIdFromJwt(string token);
    private TokenValidationResult Invalid(string error);
    private void LogError(string message);
    private void LogSuccess();
    [CompilerGeneratedAttribute]
private static X509SecurityKey <ValidateJwtAsync>b__19(X509Certificate2 c);
}
public class IdentityServer3.Core.Validation.ValidatedAuthorizeRequest : ValidatedRequest {
    [CompilerGeneratedAttribute]
private string <ResponseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Flows <Flow>k__BackingField;
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RequestedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasConsentShown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UiLocales>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpenIdRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResourceRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AuthenticationContextReferenceClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PromptMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginHint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeChallenge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeChallengeMethod>k__BackingField;
    public string ResponseType { get; public set; }
    public string ResponseMode { get; public set; }
    public Flows Flow { get; public set; }
    public Client Client { get; public set; }
    public string RedirectUri { get; public set; }
    public string ClientId { get; public set; }
    public List`1<string> RequestedScopes { get; public set; }
    public bool WasConsentShown { get; public set; }
    public string State { get; public set; }
    public string UiLocales { get; public set; }
    public bool IsOpenIdRequest { get; public set; }
    public bool IsResourceRequest { get; public set; }
    public string Nonce { get; public set; }
    public List`1<string> AuthenticationContextReferenceClasses { get; public set; }
    public string DisplayMode { get; public set; }
    public string PromptMode { get; public set; }
    public Nullable`1<int> MaxAge { get; public set; }
    public string LoginHint { get; public set; }
    public string CodeChallenge { get; public set; }
    public string CodeChallengeMethod { get; public set; }
    public bool AccessTokenRequested { get; }
    [CompilerGeneratedAttribute]
public string get_ResponseType();
    [CompilerGeneratedAttribute]
public void set_ResponseType(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseMode();
    [CompilerGeneratedAttribute]
public void set_ResponseMode(string value);
    [CompilerGeneratedAttribute]
public Flows get_Flow();
    [CompilerGeneratedAttribute]
public void set_Flow(Flows value);
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RequestedScopes();
    [CompilerGeneratedAttribute]
public void set_RequestedScopes(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_WasConsentShown();
    [CompilerGeneratedAttribute]
public void set_WasConsentShown(bool value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public string get_UiLocales();
    [CompilerGeneratedAttribute]
public void set_UiLocales(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOpenIdRequest();
    [CompilerGeneratedAttribute]
public void set_IsOpenIdRequest(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResourceRequest();
    [CompilerGeneratedAttribute]
public void set_IsResourceRequest(bool value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AuthenticationContextReferenceClasses();
    [CompilerGeneratedAttribute]
public void set_AuthenticationContextReferenceClasses(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_DisplayMode();
    [CompilerGeneratedAttribute]
public void set_DisplayMode(string value);
    [CompilerGeneratedAttribute]
public string get_PromptMode();
    [CompilerGeneratedAttribute]
public void set_PromptMode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_LoginHint();
    [CompilerGeneratedAttribute]
public void set_LoginHint(string value);
    [CompilerGeneratedAttribute]
public string get_CodeChallenge();
    [CompilerGeneratedAttribute]
public void set_CodeChallenge(string value);
    [CompilerGeneratedAttribute]
public string get_CodeChallengeMethod();
    [CompilerGeneratedAttribute]
public void set_CodeChallengeMethod(string value);
    public bool get_AccessTokenRequested();
}
public class IdentityServer3.Core.Validation.ValidatedEndSessionRequest : ValidatedRequest {
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostLogOutUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    public Client Client { get; public set; }
    public string PostLogOutUri { get; public set; }
    public string State { get; public set; }
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
    [CompilerGeneratedAttribute]
public string get_PostLogOutUri();
    [CompilerGeneratedAttribute]
public void set_PostLogOutUri(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
}
public class IdentityServer3.Core.Validation.ValidatedRequest : object {
    [CompilerGeneratedAttribute]
private NameValueCollection <Raw>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityServerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeValidator <ValidatedScopes>k__BackingField;
    public NameValueCollection Raw { get; public set; }
    public ClaimsPrincipal Subject { get; public set; }
    public string SessionId { get; public set; }
    public IdentityServerOptions Options { get; public set; }
    public ScopeValidator ValidatedScopes { get; public set; }
    [CompilerGeneratedAttribute]
public NameValueCollection get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(NameValueCollection value);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public IdentityServerOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IdentityServerOptions value);
    [CompilerGeneratedAttribute]
public ScopeValidator get_ValidatedScopes();
    [CompilerGeneratedAttribute]
public void set_ValidatedScopes(ScopeValidator value);
}
public class IdentityServer3.Core.Validation.ValidatedTokenRequest : ValidatedRequest {
    [CompilerGeneratedAttribute]
private RequestedTokenTypes <RequestedTokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private Client <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GrantType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private SignInMessage <SignInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private RefreshToken <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshTokenHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationCode <AuthorizationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationCodeHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeVerifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProofKeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProofKey>k__BackingField;
    public RequestedTokenTypes RequestedTokenType { get; public set; }
    public Client Client { get; public set; }
    public string GrantType { get; public set; }
    public IEnumerable`1<string> Scopes { get; public set; }
    public string UserName { get; public set; }
    public SignInMessage SignInMessage { get; public set; }
    public RefreshToken RefreshToken { get; public set; }
    public string RefreshTokenHandle { get; public set; }
    public AuthorizationCode AuthorizationCode { get; public set; }
    public string AuthorizationCodeHandle { get; public set; }
    public string CodeVerifier { get; public set; }
    public string ProofKeyAlgorithm { get; public set; }
    public string ProofKey { get; public set; }
    [CompilerGeneratedAttribute]
public RequestedTokenTypes get_RequestedTokenType();
    [CompilerGeneratedAttribute]
public void set_RequestedTokenType(RequestedTokenTypes value);
    [CompilerGeneratedAttribute]
public Client get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(Client value);
    [CompilerGeneratedAttribute]
public string get_GrantType();
    [CompilerGeneratedAttribute]
public void set_GrantType(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public SignInMessage get_SignInMessage();
    [CompilerGeneratedAttribute]
public void set_SignInMessage(SignInMessage value);
    [CompilerGeneratedAttribute]
public RefreshToken get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(RefreshToken value);
    [CompilerGeneratedAttribute]
public string get_RefreshTokenHandle();
    [CompilerGeneratedAttribute]
public void set_RefreshTokenHandle(string value);
    [CompilerGeneratedAttribute]
public AuthorizationCode get_AuthorizationCode();
    [CompilerGeneratedAttribute]
public void set_AuthorizationCode(AuthorizationCode value);
    [CompilerGeneratedAttribute]
public string get_AuthorizationCodeHandle();
    [CompilerGeneratedAttribute]
public void set_AuthorizationCodeHandle(string value);
    [CompilerGeneratedAttribute]
public string get_CodeVerifier();
    [CompilerGeneratedAttribute]
public void set_CodeVerifier(string value);
    [CompilerGeneratedAttribute]
public string get_ProofKeyAlgorithm();
    [CompilerGeneratedAttribute]
public void set_ProofKeyAlgorithm(string value);
    [CompilerGeneratedAttribute]
public string get_ProofKey();
    [CompilerGeneratedAttribute]
public void set_ProofKey(string value);
}
public class IdentityServer3.Core.Validation.ValidatedUserInfoRequest : object {
    [CompilerGeneratedAttribute]
private Token <AccessToken>k__BackingField;
    public Token AccessToken { get; public set; }
    [CompilerGeneratedAttribute]
public Token get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(Token value);
}
public class IdentityServer3.Core.Validation.ValidationResult : object {
    [CompilerGeneratedAttribute]
private bool <IsError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    public bool IsError { get; public set; }
    public string Error { get; public set; }
    public string ErrorDescription { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsError();
    [CompilerGeneratedAttribute]
public void set_IsError(bool value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
public void set_ErrorDescription(string value);
}
public class IdentityServer3.Core.Validation.X509CertificateSecretParser : object {
    private static ILog Logger;
    private static X509CertificateSecretParser();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("IdentityServer3.Core.Validation.X509CertificateSecretParser/<ParseAsync>d__1")]
public sealed virtual Task`1<ParsedSecret> ParseAsync(IDictionary`2<string, object> environment);
}
public class IdentityServer3.Core.Validation.X509CertificateThumbprintSecretValidator : object {
    public sealed virtual Task`1<SecretValidationResult> ValidateAsync(IEnumerable`1<Secret> secrets, ParsedSecret parsedSecret);
}
public class IdentityServer3.Core.ViewModels.AntiForgeryTokenViewModel : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class IdentityServer3.Core.ViewModels.AuthorizeResponseViewModel : CommonViewModel {
    [CompilerGeneratedAttribute]
private string <ResponseFormUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseFormFields>k__BackingField;
    public string ResponseFormUri { get; public set; }
    public string ResponseFormFields { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ResponseFormUri();
    [CompilerGeneratedAttribute]
public void set_ResponseFormUri(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseFormFields();
    [CompilerGeneratedAttribute]
public void set_ResponseFormFields(string value);
}
public class IdentityServer3.Core.ViewModels.ClientPermissionsViewModel : ErrorViewModel {
    [CompilerGeneratedAttribute]
private string <RevokePermissionUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ClientPermission> <Clients>k__BackingField;
    [CompilerGeneratedAttribute]
private AntiForgeryTokenViewModel <AntiForgery>k__BackingField;
    public string RevokePermissionUrl { get; public set; }
    public IEnumerable`1<ClientPermission> Clients { get; public set; }
    public AntiForgeryTokenViewModel AntiForgery { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RevokePermissionUrl();
    [CompilerGeneratedAttribute]
public void set_RevokePermissionUrl(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClientPermission> get_Clients();
    [CompilerGeneratedAttribute]
public void set_Clients(IEnumerable`1<ClientPermission> value);
    [CompilerGeneratedAttribute]
public AntiForgeryTokenViewModel get_AntiForgery();
    [CompilerGeneratedAttribute]
public void set_AntiForgery(AntiForgeryTokenViewModel value);
}
public class IdentityServer3.Core.ViewModels.CommonViewModel : object {
    [CompilerGeneratedAttribute]
private string <SiteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SiteName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogoutUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Custom>k__BackingField;
    public string SiteUrl { get; public set; }
    public string SiteName { get; public set; }
    public string CurrentUser { get; public set; }
    public string LogoutUrl { get; public set; }
    public object Custom { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SiteUrl();
    [CompilerGeneratedAttribute]
public void set_SiteUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SiteName();
    [CompilerGeneratedAttribute]
public void set_SiteName(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentUser();
    [CompilerGeneratedAttribute]
public void set_CurrentUser(string value);
    [CompilerGeneratedAttribute]
public string get_LogoutUrl();
    [CompilerGeneratedAttribute]
public void set_LogoutUrl(string value);
    [CompilerGeneratedAttribute]
public object get_Custom();
    [CompilerGeneratedAttribute]
public void set_Custom(object value);
}
public class IdentityServer3.Core.ViewModels.ConsentScopeViewModel : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Emphasize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public bool Emphasize { get; public set; }
    public bool Required { get; public set; }
    public bool Selected { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Emphasize();
    [CompilerGeneratedAttribute]
public void set_Emphasize(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
}
public class IdentityServer3.Core.ViewModels.ConsentViewModel : ErrorViewModel {
    [CompilerGeneratedAttribute]
private string <LoginWithDifferentAccountUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsentUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private AntiForgeryTokenViewModel <AntiForgery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientLogoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRememberConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RememberConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ConsentScopeViewModel> <IdentityScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ConsentScopeViewModel> <ResourceScopes>k__BackingField;
    public string LoginWithDifferentAccountUrl { get; public set; }
    public string ConsentUrl { get; public set; }
    public AntiForgeryTokenViewModel AntiForgery { get; public set; }
    public string ClientName { get; public set; }
    public string ClientUrl { get; public set; }
    public string ClientLogoUrl { get; public set; }
    public bool AllowRememberConsent { get; public set; }
    public bool RememberConsent { get; public set; }
    public IEnumerable`1<ConsentScopeViewModel> IdentityScopes { get; public set; }
    public IEnumerable`1<ConsentScopeViewModel> ResourceScopes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LoginWithDifferentAccountUrl();
    [CompilerGeneratedAttribute]
public void set_LoginWithDifferentAccountUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ConsentUrl();
    [CompilerGeneratedAttribute]
public void set_ConsentUrl(string value);
    [CompilerGeneratedAttribute]
public AntiForgeryTokenViewModel get_AntiForgery();
    [CompilerGeneratedAttribute]
public void set_AntiForgery(AntiForgeryTokenViewModel value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientUrl();
    [CompilerGeneratedAttribute]
public void set_ClientUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ClientLogoUrl();
    [CompilerGeneratedAttribute]
public void set_ClientLogoUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowRememberConsent();
    [CompilerGeneratedAttribute]
public void set_AllowRememberConsent(bool value);
    [CompilerGeneratedAttribute]
public bool get_RememberConsent();
    [CompilerGeneratedAttribute]
public void set_RememberConsent(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ConsentScopeViewModel> get_IdentityScopes();
    [CompilerGeneratedAttribute]
public void set_IdentityScopes(IEnumerable`1<ConsentScopeViewModel> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ConsentScopeViewModel> get_ResourceScopes();
    [CompilerGeneratedAttribute]
public void set_ResourceScopes(IEnumerable`1<ConsentScopeViewModel> value);
}
public class IdentityServer3.Core.ViewModels.ErrorViewModel : CommonViewModel {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    public string ErrorMessage { get; public set; }
    public string RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
}
public class IdentityServer3.Core.ViewModels.LoggedOutViewModel : CommonViewModel {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <IFrameUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AutoRedirectDelay>k__BackingField;
    public IEnumerable`1<string> IFrameUrls { get; public set; }
    public string ClientName { get; public set; }
    public string RedirectUrl { get; public set; }
    public bool AutoRedirect { get; public set; }
    public int AutoRedirectDelay { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_IFrameUrls();
    [CompilerGeneratedAttribute]
public void set_IFrameUrls(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUrl();
    [CompilerGeneratedAttribute]
public void set_RedirectUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoRedirect();
    [CompilerGeneratedAttribute]
public void set_AutoRedirect(bool value);
    [CompilerGeneratedAttribute]
public int get_AutoRedirectDelay();
    [CompilerGeneratedAttribute]
public void set_AutoRedirectDelay(int value);
}
public class IdentityServer3.Core.ViewModels.LoginCredentials : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RememberMe>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    public Nullable`1<bool> RememberMe { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RememberMe();
    [CompilerGeneratedAttribute]
public void set_RememberMe(Nullable`1<bool> value);
}
public class IdentityServer3.Core.ViewModels.LoginViewModel : ErrorViewModel {
    [CompilerGeneratedAttribute]
private string <LoginUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private AntiForgeryTokenViewModel <AntiForgery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRememberMe>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RememberMe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LoginPageLink> <ExternalProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LoginPageLink> <AdditionalLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientLogoUrl>k__BackingField;
    public string LoginUrl { get; public set; }
    public AntiForgeryTokenViewModel AntiForgery { get; public set; }
    public bool AllowRememberMe { get; public set; }
    public bool RememberMe { get; public set; }
    public string Username { get; public set; }
    public IEnumerable`1<LoginPageLink> ExternalProviders { get; public set; }
    public IEnumerable`1<LoginPageLink> AdditionalLinks { get; public set; }
    public string ClientName { get; public set; }
    public string ClientUrl { get; public set; }
    public string ClientLogoUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LoginUrl();
    [CompilerGeneratedAttribute]
public void set_LoginUrl(string value);
    [CompilerGeneratedAttribute]
public AntiForgeryTokenViewModel get_AntiForgery();
    [CompilerGeneratedAttribute]
public void set_AntiForgery(AntiForgeryTokenViewModel value);
    [CompilerGeneratedAttribute]
public bool get_AllowRememberMe();
    [CompilerGeneratedAttribute]
public void set_AllowRememberMe(bool value);
    [CompilerGeneratedAttribute]
public bool get_RememberMe();
    [CompilerGeneratedAttribute]
public void set_RememberMe(bool value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LoginPageLink> get_ExternalProviders();
    [CompilerGeneratedAttribute]
public void set_ExternalProviders(IEnumerable`1<LoginPageLink> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LoginPageLink> get_AdditionalLinks();
    [CompilerGeneratedAttribute]
public void set_AdditionalLinks(IEnumerable`1<LoginPageLink> value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientUrl();
    [CompilerGeneratedAttribute]
public void set_ClientUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ClientLogoUrl();
    [CompilerGeneratedAttribute]
public void set_ClientLogoUrl(string value);
}
public class IdentityServer3.Core.ViewModels.LogoutViewModel : CommonViewModel {
    [CompilerGeneratedAttribute]
private AntiForgeryTokenViewModel <AntiForgery>k__BackingField;
    public AntiForgeryTokenViewModel AntiForgery { get; public set; }
    [CompilerGeneratedAttribute]
public AntiForgeryTokenViewModel get_AntiForgery();
    [CompilerGeneratedAttribute]
public void set_AntiForgery(AntiForgeryTokenViewModel value);
}
public class IdentityServer3.Core.ViewModels.RevokeClientPermission : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    public string ClientId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
}
public class IdentityServer3.Core.ViewModels.UserConsent : object {
    [CompilerGeneratedAttribute]
private string <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RememberConsent>k__BackingField;
    public string Button { get; public set; }
    public String[] Scopes { get; public set; }
    public bool RememberConsent { get; public set; }
    internal bool WasConsentGranted { get; }
    internal IEnumerable`1<string> ScopedConsented { get; }
    [CompilerGeneratedAttribute]
public string get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(string value);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(String[] value);
    [CompilerGeneratedAttribute]
public bool get_RememberConsent();
    [CompilerGeneratedAttribute]
public void set_RememberConsent(bool value);
    internal bool get_WasConsentGranted();
    internal IEnumerable`1<string> get_ScopedConsented();
}
internal static class Microsoft.IdentityModel.ErrorMessages : object {
    public static string IDX10000;
    public static string IDX10001;
    public static string IDX10002;
    public static string IDX10100;
    public static string IDX10101;
    public static string IDX10102;
    public static string IDX10103;
    public static string IDX10104;
    public static string IDX10105;
    public static string IDX10106;
    public static string IDX10107;
    public static string IDX10200;
    public static string IDX10201;
    public static string IDX10202;
    public static string IDX10203;
    public static string IDX10204;
    public static string IDX10205;
    public static string IDX10207;
    public static string IDX10208;
    public static string IDX10209;
    public static string IDX10210;
    public static string IDX10211;
    public static string IDX10212;
    public static string IDX10213;
    public static string IDX10214;
    public static string IDX10215;
    public static string IDX10216;
    public static string IDX10217;
    public static string IDX10218;
    public static string IDX10219;
    public static string IDX10220;
    public static string IDX10221;
    public static string IDX10222;
    public static string IDX10223;
    public static string IDX10224;
    public static string IDX10225;
    public static string IDX10226;
    public static string IDX10227;
    public static string IDX10228;
    public static string IDX10229;
    public static string IDX10230;
    public static string IDX10231;
    public static string IDX10300;
    public static string IDX10301;
    public static string IDX10303;
    public static string IDX10304;
    public static string IDX10306;
    public static string IDX10307;
    public static string IDX10308;
    public static string IDX10309;
    public static string IDX10310;
    public static string IDX10311;
    public static string IDX10312;
    public static string IDX10313;
    public static string IDX10314;
    public static string IDX10315;
    public static string IDX10316;
    public static string IDX10317;
    public static string IDX10318;
    public static string IDX10319;
    public static string IDX10320;
    public static string IDX10321;
    public static string IDX10322;
    public static string IDX10323;
    public static string IDX10400;
    public static string IDX10401;
    public static string IDX10500;
    public static string IDX10501;
    public static string IDX10502;
    public static string IDX10503;
    public static string IDX10504;
    public static string IDX10505;
    public static string IDX10600;
    public static string IDX10603;
    public static string IDX10611;
    public static string IDX10613;
    public static string IDX10614;
    public static string IDX10615;
    public static string IDX10616;
    public static string IDX10617;
    public static string IDX10618;
    public static string IDX10620;
    public static string IDX10621;
    public static string IDX10623;
    public static string IDX10624;
    public static string IDX10625;
    public static string IDX10626;
    public static string IDX10627;
    public static string IDX10628;
    public static string IDX10629;
    public static string IDX10630;
    public static string IDX10631;
    public static string IDX10632;
    public static string IDX10633;
    public static string IDX10634;
    public static string IDX10635;
    public static string IDX10636;
    public static string IDX10637;
    public static string IDX10700;
    public static string IDX10701;
    public static string IDX10702;
    public static string IDX10703;
    public static string IDX10704;
    public static string IDX10705;
    public static string IDX10706;
    public static string IDX10707;
    public static string IDX10708;
    public static string IDX10709;
    public static string IDX10710;
    public static string IDX10800;
    public static string IDX10801;
    public static string IDX10802;
    public static string IDX10803;
    public static string IDX11000;
    public static string IDX11001;
    public static string IDX11002;
    public static string IDX11003;
    public static string IDX11004;
    public static string IDX11005;
    public static string IDX11006;
    public static string IDX11007;
    public static string IDX11008;
    public static string IDX13000;
    public static string IDX13001;
    public static string IDX13002;
    public static string IDX13003;
    public static string IDX14700;
}
internal static class Microsoft.IdentityModel.Utility : object {
    public static string Empty;
    public static string Null;
    internal static string SerializeAsSingleCommaDelimitedString(IEnumerable`1<string> strings);
}
internal class Microsoft.Owin.Builder.AppBuilder : object {
    private static Func`2<IDictionary`2<string, object>, Task> NotFound;
    private IList`1<Tuple`3<Type, Delegate, Object[]>> _middleware;
    private IDictionary`2<Tuple`2<Type, Type>, Delegate> _conversions;
    private IDictionary`2<string, object> _properties;
    [CompilerGeneratedAttribute]
private static Func`3<ParameterInfo, ParameterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<bool, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, Type> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<bool, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, Type> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<bool, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, Type> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<bool, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, ParameterExpression> CS$<>9__CachedAnonymousMethodDelegate17;
    public IDictionary`2<string, object> Properties { get; }
    internal AppBuilder(IDictionary`2<Tuple`2<Type, Type>, Delegate> conversions, IDictionary`2<string, object> properties);
    private static AppBuilder();
    public sealed virtual IDictionary`2<string, object> get_Properties();
    public sealed virtual IAppBuilder Use(object middleware, Object[] args);
    public sealed virtual IAppBuilder New();
    public sealed virtual object Build(Type returnType);
    private void AddSignatureConversion(Delegate conversion);
    private static Type GetParameterType(Delegate function);
    private object BuildInternal(Type signature);
    private object Convert(Type signature, object app);
    private object ConvertMultiHop(Type signature, object app);
    private object ConvertOneHop(Type signature, object app);
    private static Delegate ToMemberDelegate(Type signature, object app);
    private static Tuple`3<Type, Delegate, Object[]> ToMiddlewareFactory(object middlewareObject, Object[] args);
    private static Tuple`3<Type, Delegate, Object[]> ToInstanceMiddlewareFactory(object middlewareObject, Object[] args);
    private static Tuple`3<Type, Delegate, Object[]> ToGeneratorMiddlewareFactory(object middlewareObject, Object[] args);
    private static Tuple`3<Type, Delegate, Object[]> ToConstructorMiddlewareFactory(object middlewareObject, Object[] args, Delegate& middlewareDelegate);
    private static bool TestArgForParameter(Type parameterType, object arg);
    [CompilerGeneratedAttribute]
private static bool <ToMemberDelegate>b__0(ParameterInfo methodParameter, ParameterInfo signatureParameter);
    [CompilerGeneratedAttribute]
private static bool <ToMemberDelegate>b__1(bool compatible);
    [CompilerGeneratedAttribute]
private static Type <ToInstanceMiddlewareFactory>b__4(ParameterInfo p);
    [CompilerGeneratedAttribute]
private static bool <ToInstanceMiddlewareFactory>b__5(bool x);
    [CompilerGeneratedAttribute]
private static Type <ToGeneratorMiddlewareFactory>b__e(ParameterInfo p);
    [CompilerGeneratedAttribute]
private static bool <ToGeneratorMiddlewareFactory>b__f(bool x);
    [CompilerGeneratedAttribute]
private static Type <ToConstructorMiddlewareFactory>b__12(ParameterInfo p);
    [CompilerGeneratedAttribute]
private static bool <ToConstructorMiddlewareFactory>b__13(bool x);
    [CompilerGeneratedAttribute]
private static ParameterExpression <ToConstructorMiddlewareFactory>b__14(ParameterInfo p);
}
[ExtensionAttribute]
internal static class Microsoft.Owin.Builder.AppBuilderExtensions : object {
    [ExtensionAttribute]
public static Func`2<IDictionary`2<string, object>, Task> Build(IAppBuilder builder);
    [ExtensionAttribute]
public static TApp Build(IAppBuilder builder);
    [ExtensionAttribute]
public static void AddSignatureConversion(IAppBuilder builder, Delegate conversion);
    [ExtensionAttribute]
public static void AddSignatureConversion(IAppBuilder builder, Func`2<T1, T2> conversion);
}
internal static class Microsoft.Owin.Builder.Constants : object {
    internal static string BuilderAddConversion;
    internal static string BuilderDefaultApp;
    internal static string Invoke;
    internal static string Initialize;
}
internal class Microsoft.Owin.Builder.NotFound : object {
    private static Task Completed;
    private static NotFound();
    private static Task CreateCompletedTask();
    public Task Invoke(IDictionary`2<string, object> env);
}
internal class Microsoft.Owin.BuilderProperties.Address : ValueType {
    private IDictionary`2<string, object> _dictionary;
    public IDictionary`2<string, object> Dictionary { get; }
    public string Scheme { get; public set; }
    public string Host { get; public set; }
    public string Port { get; public set; }
    public string Path { get; public set; }
    public Address(IDictionary`2<string, object> dictionary);
    public Address(string scheme, string host, string port, string path);
    public IDictionary`2<string, object> get_Dictionary();
    public string get_Scheme();
    public void set_Scheme(string value);
    public string get_Host();
    public void set_Host(string value);
    public string get_Port();
    public void set_Port(string value);
    public string get_Path();
    public void set_Path(string value);
    public static Address Create();
    public bool Equals(Address other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Address left, Address right);
    public static bool op_Inequality(Address left, Address right);
    public T Get(string key);
    public Address Set(string key, object value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Owin.BuilderProperties.AddressCollection : ValueType {
    private IList`1<IDictionary`2<string, object>> _list;
    public IList`1<IDictionary`2<string, object>> List { get; }
    public int Count { get; }
    public Address Item { get; public set; }
    public AddressCollection(IList`1<IDictionary`2<string, object>> list);
    public IList`1<IDictionary`2<string, object>> get_List();
    public int get_Count();
    public Address get_Item(int index);
    public void set_Item(int index, Address value);
    public void Add(Address address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Address> GetEnumerator();
    public static AddressCollection Create();
    public bool Equals(AddressCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(AddressCollection left, AddressCollection right);
    public static bool op_Inequality(AddressCollection left, AddressCollection right);
}
internal class Microsoft.Owin.BuilderProperties.AppProperties : ValueType {
    private IDictionary`2<string, object> _dictionary;
    public string OwinVersion { get; public set; }
    public Func`2<IDictionary`2<string, object>, Task> DefaultApp { get; public set; }
    public Action`1<Delegate> AddSignatureConversionDelegate { get; public set; }
    public string AppName { get; public set; }
    public TextWriter TraceOutput { get; public set; }
    public CancellationToken OnAppDisposing { get; public set; }
    public AddressCollection Addresses { get; public set; }
    public Capabilities Capabilities { get; public set; }
    public IDictionary`2<string, object> Dictionary { get; }
    public AppProperties(IDictionary`2<string, object> dictionary);
    public string get_OwinVersion();
    public void set_OwinVersion(string value);
    public Func`2<IDictionary`2<string, object>, Task> get_DefaultApp();
    public void set_DefaultApp(Func`2<IDictionary`2<string, object>, Task> value);
    public Action`1<Delegate> get_AddSignatureConversionDelegate();
    public void set_AddSignatureConversionDelegate(Action`1<Delegate> value);
    public string get_AppName();
    public void set_AppName(string value);
    public TextWriter get_TraceOutput();
    public void set_TraceOutput(TextWriter value);
    public CancellationToken get_OnAppDisposing();
    public void set_OnAppDisposing(CancellationToken value);
    public AddressCollection get_Addresses();
    public void set_Addresses(AddressCollection value);
    public Capabilities get_Capabilities();
    public void set_Capabilities(Capabilities value);
    public IDictionary`2<string, object> get_Dictionary();
    public bool Equals(AppProperties other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(AppProperties left, AppProperties right);
    public static bool op_Inequality(AppProperties left, AppProperties right);
    public T Get(string key);
    public AppProperties Set(string key, object value);
}
internal class Microsoft.Owin.BuilderProperties.Capabilities : ValueType {
    private IDictionary`2<string, object> _dictionary;
    public IDictionary`2<string, object> Dictionary { get; }
    public string SendFileVersion { get; public set; }
    public string WebSocketVersion { get; public set; }
    public Capabilities(IDictionary`2<string, object> dictionary);
    public IDictionary`2<string, object> get_Dictionary();
    public string get_SendFileVersion();
    public void set_SendFileVersion(string value);
    public string get_WebSocketVersion();
    public void set_WebSocketVersion(string value);
    public static Capabilities Create();
    public bool Equals(Capabilities other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Capabilities left, Capabilities right);
    public static bool op_Inequality(Capabilities left, Capabilities right);
    public T Get(string key);
    public Capabilities Set(string key, object value);
}
internal class Microsoft.Owin.CookieOptions : object {
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    public string Domain { get; public set; }
    public string Path { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public bool Secure { get; public set; }
    public bool HttpOnly { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
}
internal class Microsoft.Owin.Cors.CorsMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private ICorsPolicyProvider _corsPolicyProvider;
    private ICorsEngine _corsEngine;
    public CorsMiddleware(Func`2<IDictionary`2<string, object>, Task> next, CorsOptions options);
    [AsyncStateMachineAttribute("Microsoft.Owin.Cors.CorsMiddleware/<Invoke>d__0")]
[DebuggerStepThroughAttribute]
public Task Invoke(IDictionary`2<string, object> environment);
    private Task HandleCorsRequestAsync(IOwinContext context, CorsPolicy policy, CorsRequestContext corsRequestContext);
    private Task HandleCorsPreflightRequestAsync(IOwinContext context, CorsPolicy policy, CorsRequestContext corsRequestContext);
    private bool TryEvaluateCorsPolicy(CorsPolicy policy, CorsRequestContext corsRequestContext, CorsResult& result);
    private static void WriteCorsHeaders(IOwinContext context, CorsResult result);
    private static CorsRequestContext GetCorsRequestContext(IOwinContext context);
}
internal class Microsoft.Owin.Cors.CorsOptions : object {
    [CompilerGeneratedAttribute]
private ICorsPolicyProvider <PolicyProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ICorsEngine <CorsEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IOwinRequest, Task`1<CorsPolicy>> CS$<>9__CachedAnonymousMethodDelegate4;
    public static CorsOptions AllowAll { get; }
    public ICorsPolicyProvider PolicyProvider { get; public set; }
    public ICorsEngine CorsEngine { get; public set; }
    public static CorsOptions get_AllowAll();
    [CompilerGeneratedAttribute]
public ICorsPolicyProvider get_PolicyProvider();
    [CompilerGeneratedAttribute]
public void set_PolicyProvider(ICorsPolicyProvider value);
    [CompilerGeneratedAttribute]
public ICorsEngine get_CorsEngine();
    [CompilerGeneratedAttribute]
public void set_CorsEngine(ICorsEngine value);
    [CompilerGeneratedAttribute]
private static Task`1<CorsPolicy> <get_AllowAll>b__3(IOwinRequest context);
}
internal class Microsoft.Owin.Cors.CorsPolicyProvider : object {
    [CompilerGeneratedAttribute]
private Func`2<IOwinRequest, Task`1<CorsPolicy>> <PolicyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IOwinRequest, Task`1<CorsPolicy>> CS$<>9__CachedAnonymousMethodDelegate1;
    public Func`2<IOwinRequest, Task`1<CorsPolicy>> PolicyResolver { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<IOwinRequest, Task`1<CorsPolicy>> get_PolicyResolver();
    [CompilerGeneratedAttribute]
public void set_PolicyResolver(Func`2<IOwinRequest, Task`1<CorsPolicy>> value);
    public virtual Task`1<CorsPolicy> GetCorsPolicyAsync(IOwinRequest request);
    [CompilerGeneratedAttribute]
private static Task`1<CorsPolicy> <.ctor>b__0(IOwinRequest request);
}
internal interface Microsoft.Owin.Cors.ICorsPolicyProvider {
    public abstract virtual Task`1<CorsPolicy> GetCorsPolicyAsync(IOwinRequest request);
}
[ExtensionAttribute]
internal static class Microsoft.Owin.Extensions.IntegratedPipelineExtensions : object {
    private static string IntegratedPipelineStageMarker;
    [ExtensionAttribute]
public static IAppBuilder UseStageMarker(IAppBuilder app, string stageName);
    [ExtensionAttribute]
public static IAppBuilder UseStageMarker(IAppBuilder app, PipelineStage stage);
}
internal class Microsoft.Owin.Extensions.UseHandlerMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private Func`2<IOwinContext, Task> _handler;
    public UseHandlerMiddleware(Func`2<IDictionary`2<string, object>, Task> next, Func`2<IOwinContext, Task> handler);
    public UseHandlerMiddleware(Func`2<IDictionary`2<string, object>, Task> next, Func`3<IOwinContext, Func`1<Task>, Task> handler);
    public Task Invoke(IDictionary`2<string, object> environment);
}
internal class Microsoft.Owin.FileSystems.EmbeddedResourceFileSystem : object {
    private Assembly _assembly;
    private string _baseNamespace;
    private DateTime _lastModified;
    public EmbeddedResourceFileSystem(Assembly assembly);
    public EmbeddedResourceFileSystem(string baseNamespace);
    public EmbeddedResourceFileSystem(Assembly assembly, string baseNamespace);
    public sealed virtual bool TryGetFileInfo(string subpath, IFileInfo& fileInfo);
    public sealed virtual bool TryGetDirectoryContents(string subpath, IEnumerable`1& contents);
}
internal interface Microsoft.Owin.FileSystems.IFileInfo {
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTime LastModified { get; }
    public bool IsDirectory { get; }
    public abstract virtual long get_Length();
    public abstract virtual string get_PhysicalPath();
    public abstract virtual string get_Name();
    public abstract virtual DateTime get_LastModified();
    public abstract virtual bool get_IsDirectory();
    public abstract virtual Stream CreateReadStream();
}
internal interface Microsoft.Owin.FileSystems.IFileSystem {
    public abstract virtual bool TryGetFileInfo(string subpath, IFileInfo& fileInfo);
    public abstract virtual bool TryGetDirectoryContents(string subpath, IEnumerable`1& contents);
}
internal class Microsoft.Owin.FileSystems.PhysicalFileSystem : object {
    private static Dictionary`2<string, string> RestrictedFileNames;
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    public string Root { get; private set; }
    public PhysicalFileSystem(string root);
    private static PhysicalFileSystem();
    [CompilerGeneratedAttribute]
public string get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(string value);
    private static string GetFullRoot(string root);
    private string GetFullPath(string path);
    public sealed virtual bool TryGetFileInfo(string subpath, IFileInfo& fileInfo);
    public sealed virtual bool TryGetDirectoryContents(string subpath, IEnumerable`1& contents);
    private bool IsRestricted(FileInfo fileInfo);
}
internal class Microsoft.Owin.FormCollection : ReadableStringCollection {
    public FormCollection(IDictionary`2<string, String[]> store);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Owin.HeaderDictionary : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, String[]> <Store>k__BackingField;
    private IDictionary`2<string, String[]> Store { get; private set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<String[]> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    private String[] System.Collections.Generic.IDictionary<System.String,System.String[]>.Item { get; private set; }
    public HeaderDictionary(IDictionary`2<string, String[]> store);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, String[]> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(IDictionary`2<string, String[]> value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<String[]> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    private sealed virtual override String[] System.Collections.Generic.IDictionary<System.String,System.String[]>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.String[]>.set_Item(string key, String[] value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, String[]>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual string Get(string key);
    public sealed virtual IList`1<string> GetValues(string key);
    public sealed virtual IList`1<string> GetCommaSeparatedValues(string key);
    public sealed virtual void Append(string key, string value);
    public sealed virtual void AppendValues(string key, String[] values);
    public sealed virtual void AppendCommaSeparatedValues(string key, String[] values);
    public sealed virtual void Set(string key, string value);
    public sealed virtual void SetValues(string key, String[] values);
    public sealed virtual void SetCommaSeparatedValues(string key, String[] values);
    public sealed virtual void Add(string key, String[] value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, String[]& value);
    public sealed virtual void Add(KeyValuePair`2<string, String[]> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, String[]> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, String[]> item);
}
internal static class Microsoft.Owin.Helpers.WebHelpers : object {
    public static IFormCollection ParseForm(string text);
}
internal class Microsoft.Owin.HostString : ValueType {
    private string _value;
    public string Value { get; }
    public HostString(string value);
    public string get_Value();
    public virtual string ToString();
    public string ToUriComponent();
    public static HostString FromUriComponent(string uriComponent);
    public static HostString FromUriComponent(Uri uri);
    public sealed virtual bool Equals(HostString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HostString left, HostString right);
    public static bool op_Inequality(HostString left, HostString right);
}
internal interface Microsoft.Owin.IFormCollection {
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.Owin.IHeaderDictionary {
    public string Item { get; public set; }
    public abstract virtual string get_Item(string key);
    public abstract virtual void set_Item(string key, string value);
    public abstract virtual IList`1<string> GetCommaSeparatedValues(string key);
    public abstract virtual void Append(string key, string value);
    public abstract virtual void AppendValues(string key, String[] values);
    public abstract virtual void AppendCommaSeparatedValues(string key, String[] values);
    public abstract virtual void Set(string key, string value);
    public abstract virtual void SetValues(string key, String[] values);
    public abstract virtual void SetCommaSeparatedValues(string key, String[] values);
}
internal class Microsoft.Owin.Infrastructure.AppFuncTransition : OwinMiddleware {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public AppFuncTransition(Func`2<IDictionary`2<string, object>, Task> next);
    public virtual Task Invoke(IOwinContext context);
}
internal class Microsoft.Owin.Infrastructure.ChunkingCookieManager : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ChunkSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowForPartialCookies>k__BackingField;
    public Nullable`1<int> ChunkSize { get; public set; }
    public bool ThrowForPartialCookies { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ChunkSize();
    [CompilerGeneratedAttribute]
public void set_ChunkSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_ThrowForPartialCookies();
    [CompilerGeneratedAttribute]
public void set_ThrowForPartialCookies(bool value);
    private static int ParseChunksCount(string value);
    public sealed virtual string GetRequestCookie(IOwinContext context, string key);
    public sealed virtual void AppendResponseCookie(IOwinContext context, string key, string value, CookieOptions options);
    public sealed virtual void DeleteCookie(IOwinContext context, string key, CookieOptions options);
    private static bool IsQuoted(string value);
    private static string RemoveQuotes(string value);
    private static string Quote(string value);
}
internal static class Microsoft.Owin.Infrastructure.Constants : object {
    internal static string Https;
    internal static string HttpDateFormat;
}
[GeneratedCodeAttribute("App_Packages", "")]
internal class Microsoft.Owin.Infrastructure.HeaderSegment : ValueType {
    private StringSegment _formatting;
    private StringSegment _data;
    public StringSegment Formatting { get; }
    public StringSegment Data { get; }
    public HeaderSegment(StringSegment formatting, StringSegment data);
    public StringSegment get_Formatting();
    public StringSegment get_Data();
    public sealed virtual bool Equals(HeaderSegment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HeaderSegment left, HeaderSegment right);
    public static bool op_Inequality(HeaderSegment left, HeaderSegment right);
}
[GeneratedCodeAttribute("App_Packages", "")]
internal class Microsoft.Owin.Infrastructure.HeaderSegmentCollection : ValueType {
    private String[] _headers;
    public HeaderSegmentCollection(String[] headers);
    public sealed virtual bool Equals(HeaderSegmentCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HeaderSegmentCollection left, HeaderSegmentCollection right);
    public static bool op_Inequality(HeaderSegmentCollection left, HeaderSegmentCollection right);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<HeaderSegment> System.Collections.Generic.IEnumerable<Microsoft.Owin.Infrastructure.HeaderSegment>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface Microsoft.Owin.Infrastructure.ICookieManager {
    public abstract virtual string GetRequestCookie(IOwinContext context, string key);
    public abstract virtual void AppendResponseCookie(IOwinContext context, string key, string value, CookieOptions options);
    public abstract virtual void DeleteCookie(IOwinContext context, string key, CookieOptions options);
}
internal interface Microsoft.Owin.Infrastructure.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
internal static class Microsoft.Owin.Infrastructure.OwinHelpers : object {
    private static Action`3<string, string, object> AddCookieCallback;
    private static Char[] SemicolonAndComma;
    private static Action`3<string, string, object> AppendItemCallback;
    private static Char[] AmpersandAndSemicolon;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Action`3<string, string, object> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Action`3<string, string, object> CS$<>9__CachedAnonymousMethodDelegatee;
    private static OwinHelpers();
    internal static IDictionary`2<string, string> GetCookies(IOwinRequest request);
    internal static void ParseDelimited(string text, Char[] delimiters, Action`3<string, string, object> callback, object state);
    public static string GetHeader(IDictionary`2<string, String[]> headers, string key);
    public static IEnumerable`1<string> GetHeaderSplit(IDictionary`2<string, String[]> headers, string key);
    private static IEnumerable`1<string> GetHeaderSplitImplementation(String[] values);
    public static String[] GetHeaderUnmodified(IDictionary`2<string, String[]> headers, string key);
    public static void SetHeader(IDictionary`2<string, String[]> headers, string key, string value);
    public static void SetHeaderJoined(IDictionary`2<string, String[]> headers, string key, String[] values);
    private static string QuoteIfNeeded(string value);
    private static string DeQuote(string value);
    public static void SetHeaderUnmodified(IDictionary`2<string, String[]> headers, string key, String[] values);
    public static void SetHeaderUnmodified(IDictionary`2<string, String[]> headers, string key, IEnumerable`1<string> values);
    public static void AppendHeader(IDictionary`2<string, String[]> headers, string key, string values);
    public static void AppendHeaderJoined(IDictionary`2<string, String[]> headers, string key, String[] values);
    public static void AppendHeaderUnmodified(IDictionary`2<string, String[]> headers, string key, String[] values);
    internal static IDictionary`2<string, String[]> GetQuery(IOwinRequest request);
    internal static IFormCollection GetForm(string text);
    internal static string GetJoinedValue(IDictionary`2<string, String[]> store, string key);
    internal static String[] GetUnmodifiedValues(IDictionary`2<string, String[]> store, string key);
    internal static string GetHost(IOwinRequest request);
    [CompilerGeneratedAttribute]
private static string <SetHeaderJoined>b__6(string value);
    [CompilerGeneratedAttribute]
private static string <AppendHeaderJoined>b__8(string value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__b(string name, string value, object state);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__c(string name, string value, object state);
}
internal class Microsoft.Owin.Infrastructure.OwinMiddlewareTransition : object {
    private OwinMiddleware _next;
    public OwinMiddlewareTransition(OwinMiddleware next);
    public Task Invoke(IDictionary`2<string, object> environment);
}
internal static class Microsoft.Owin.Infrastructure.SignatureConversions : object {
    public static void AddConversions(IAppBuilder app);
    private static OwinMiddleware Conversion1(Func`2<IDictionary`2<string, object>, Task> next);
    private static Func`2<IDictionary`2<string, object>, Task> Conversion2(OwinMiddleware next);
}
[GeneratedCodeAttribute("App_Packages", "")]
internal class Microsoft.Owin.Infrastructure.StringSegment : ValueType {
    private string _buffer;
    private int _offset;
    private int _count;
    public string Buffer { get; }
    public int Offset { get; }
    public int Count { get; }
    public string Value { get; }
    public bool HasValue { get; }
    public StringSegment(string buffer, int offset, int count);
    public string get_Buffer();
    public int get_Offset();
    public int get_Count();
    public string get_Value();
    public bool get_HasValue();
    public sealed virtual bool Equals(StringSegment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(StringSegment left, StringSegment right);
    public static bool op_Inequality(StringSegment left, StringSegment right);
    public bool StartsWith(string text, StringComparison comparisonType);
    public bool EndsWith(string text, StringComparison comparisonType);
    public bool Equals(string text, StringComparison comparisonType);
    public string Substring(int offset, int length);
    public StringSegment Subsegment(int offset, int length);
    public virtual string ToString();
}
internal class Microsoft.Owin.Infrastructure.SystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
internal static class Microsoft.Owin.Infrastructure.WebUtilities : object {
    public static string AddQueryString(string uri, string queryString);
    public static string AddQueryString(string uri, string name, string value);
    public static string AddQueryString(string uri, IDictionary`2<string, string> queryString);
}
internal interface Microsoft.Owin.IOwinContext {
    public IOwinRequest Request { get; }
    public IOwinResponse Response { get; }
    public IAuthenticationManager Authentication { get; }
    public IDictionary`2<string, object> Environment { get; }
    public TextWriter TraceOutput { get; public set; }
    public abstract virtual IOwinRequest get_Request();
    public abstract virtual IOwinResponse get_Response();
    public abstract virtual IAuthenticationManager get_Authentication();
    public abstract virtual IDictionary`2<string, object> get_Environment();
    public abstract virtual TextWriter get_TraceOutput();
    public abstract virtual void set_TraceOutput(TextWriter value);
    public abstract virtual T Get(string key);
    public abstract virtual IOwinContext Set(string key, T value);
}
internal interface Microsoft.Owin.IOwinRequest {
    public IDictionary`2<string, object> Environment { get; }
    public IOwinContext Context { get; }
    public string Method { get; public set; }
    public string Scheme { get; public set; }
    public bool IsSecure { get; }
    public HostString Host { get; public set; }
    public PathString PathBase { get; public set; }
    public PathString Path { get; public set; }
    public QueryString QueryString { get; public set; }
    public IReadableStringCollection Query { get; }
    public Uri Uri { get; }
    public string Protocol { get; public set; }
    public IHeaderDictionary Headers { get; }
    public RequestCookieCollection Cookies { get; }
    public string ContentType { get; public set; }
    public string CacheControl { get; public set; }
    public string MediaType { get; public set; }
    public string Accept { get; public set; }
    public Stream Body { get; public set; }
    public CancellationToken CallCancelled { get; public set; }
    public string LocalIpAddress { get; public set; }
    public Nullable`1<int> LocalPort { get; public set; }
    public string RemoteIpAddress { get; public set; }
    public Nullable`1<int> RemotePort { get; public set; }
    public IPrincipal User { get; public set; }
    public abstract virtual IDictionary`2<string, object> get_Environment();
    public abstract virtual IOwinContext get_Context();
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual string get_Scheme();
    public abstract virtual void set_Scheme(string value);
    public abstract virtual bool get_IsSecure();
    public abstract virtual HostString get_Host();
    public abstract virtual void set_Host(HostString value);
    public abstract virtual PathString get_PathBase();
    public abstract virtual void set_PathBase(PathString value);
    public abstract virtual PathString get_Path();
    public abstract virtual void set_Path(PathString value);
    public abstract virtual QueryString get_QueryString();
    public abstract virtual void set_QueryString(QueryString value);
    public abstract virtual IReadableStringCollection get_Query();
    public abstract virtual Uri get_Uri();
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual RequestCookieCollection get_Cookies();
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual string get_CacheControl();
    public abstract virtual void set_CacheControl(string value);
    public abstract virtual string get_MediaType();
    public abstract virtual void set_MediaType(string value);
    public abstract virtual string get_Accept();
    public abstract virtual void set_Accept(string value);
    public abstract virtual Stream get_Body();
    public abstract virtual void set_Body(Stream value);
    public abstract virtual CancellationToken get_CallCancelled();
    public abstract virtual void set_CallCancelled(CancellationToken value);
    public abstract virtual string get_LocalIpAddress();
    public abstract virtual void set_LocalIpAddress(string value);
    public abstract virtual Nullable`1<int> get_LocalPort();
    public abstract virtual void set_LocalPort(Nullable`1<int> value);
    public abstract virtual string get_RemoteIpAddress();
    public abstract virtual void set_RemoteIpAddress(string value);
    public abstract virtual Nullable`1<int> get_RemotePort();
    public abstract virtual void set_RemotePort(Nullable`1<int> value);
    public abstract virtual IPrincipal get_User();
    public abstract virtual void set_User(IPrincipal value);
    public abstract virtual Task`1<IFormCollection> ReadFormAsync();
    public abstract virtual T Get(string key);
    public abstract virtual IOwinRequest Set(string key, T value);
}
internal interface Microsoft.Owin.IOwinResponse {
    public IDictionary`2<string, object> Environment { get; }
    public IOwinContext Context { get; }
    public int StatusCode { get; public set; }
    public string ReasonPhrase { get; public set; }
    public string Protocol { get; public set; }
    public IHeaderDictionary Headers { get; }
    public ResponseCookieCollection Cookies { get; }
    public Nullable`1<long> ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public string ETag { get; public set; }
    public Stream Body { get; public set; }
    public abstract virtual IDictionary`2<string, object> get_Environment();
    public abstract virtual IOwinContext get_Context();
    public abstract virtual int get_StatusCode();
    public abstract virtual void set_StatusCode(int value);
    public abstract virtual string get_ReasonPhrase();
    public abstract virtual void set_ReasonPhrase(string value);
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual ResponseCookieCollection get_Cookies();
    public abstract virtual Nullable`1<long> get_ContentLength();
    public abstract virtual void set_ContentLength(Nullable`1<long> value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual Nullable`1<DateTimeOffset> get_Expires();
    public abstract virtual void set_Expires(Nullable`1<DateTimeOffset> value);
    public abstract virtual string get_ETag();
    public abstract virtual void set_ETag(string value);
    public abstract virtual Stream get_Body();
    public abstract virtual void set_Body(Stream value);
    public abstract virtual void OnSendingHeaders(Action`1<object> callback, object state);
    public abstract virtual void Redirect(string location);
    public abstract virtual void Write(string text);
    public abstract virtual void Write(Byte[] data);
    public abstract virtual void Write(Byte[] data, int offset, int count);
    public abstract virtual Task WriteAsync(string text);
    public abstract virtual Task WriteAsync(string text, CancellationToken token);
    public abstract virtual Task WriteAsync(Byte[] data);
    public abstract virtual Task WriteAsync(Byte[] data, CancellationToken token);
    public abstract virtual Task WriteAsync(Byte[] data, int offset, int count, CancellationToken token);
    public abstract virtual T Get(string key);
    public abstract virtual IOwinResponse Set(string key, T value);
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.Owin.IReadableStringCollection {
    public string Item { get; }
    public abstract virtual string get_Item(string key);
    public abstract virtual string Get(string key);
    public abstract virtual IList`1<string> GetValues(string key);
}
[ExtensionAttribute]
internal static class Microsoft.Owin.Logging.AppBuilderLoggerExtensions : object {
    [ExtensionAttribute]
public static void SetLoggerFactory(IAppBuilder app, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static ILoggerFactory GetLoggerFactory(IAppBuilder app);
    [ExtensionAttribute]
public static ILogger CreateLogger(IAppBuilder app, string name);
    [ExtensionAttribute]
public static ILogger CreateLogger(IAppBuilder app, Type component);
    [ExtensionAttribute]
public static ILogger CreateLogger(IAppBuilder app);
}
internal class Microsoft.Owin.Logging.DiagnosticsLogger : object {
    private TraceSource _traceSource;
    public DiagnosticsLogger(TraceSource traceSource);
    public sealed virtual bool WriteCore(TraceEventType eventType, int eventId, object state, Exception exception, Func`3<object, Exception, string> formatter);
}
internal class Microsoft.Owin.Logging.DiagnosticsLoggerFactory : object {
    private static string RootTraceName;
    private SourceSwitch _rootSourceSwitch;
    private TraceListener _rootTraceListener;
    private ConcurrentDictionary`2<string, TraceSource> _sources;
    public DiagnosticsLoggerFactory(SourceSwitch rootSourceSwitch, TraceListener rootTraceListener);
    public sealed virtual ILogger Create(string name);
    private TraceSource GetOrAddTraceSource(string name);
    private TraceSource InitializeTraceSource(string traceSourceName);
    private static string ParentSourceName(string traceSourceName);
    private static bool HasDefaultListeners(TraceSource traceSource);
    private static bool HasDefaultSwitch(TraceSource traceSource);
}
internal interface Microsoft.Owin.Logging.ILogger {
    public abstract virtual bool WriteCore(TraceEventType eventType, int eventId, object state, Exception exception, Func`3<object, Exception, string> formatter);
}
internal interface Microsoft.Owin.Logging.ILoggerFactory {
    public abstract virtual ILogger Create(string name);
}
[ExtensionAttribute]
internal static class Microsoft.Owin.Logging.LoggerExtensions : object {
    private static Func`3<object, Exception, string> TheMessage;
    private static Func`3<object, Exception, string> TheMessageAndError;
    [CompilerGeneratedAttribute]
private static Func`3<object, Exception, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`3<object, Exception, string> CS$<>9__CachedAnonymousMethodDelegate3;
    private static LoggerExtensions();
    [ExtensionAttribute]
public static bool IsEnabled(ILogger logger, TraceEventType eventType);
    [ExtensionAttribute]
public static void WriteVerbose(ILogger logger, string data);
    [ExtensionAttribute]
public static void WriteInformation(ILogger logger, string message);
    [ExtensionAttribute]
public static void WriteWarning(ILogger logger, string message, String[] args);
    [ExtensionAttribute]
public static void WriteWarning(ILogger logger, string message, Exception error);
    [ExtensionAttribute]
public static void WriteError(ILogger logger, string message);
    [ExtensionAttribute]
public static void WriteError(ILogger logger, string message, Exception error);
    [ExtensionAttribute]
public static void WriteCritical(ILogger logger, string message);
    [ExtensionAttribute]
public static void WriteCritical(ILogger logger, string message, Exception error);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__0(object message, Exception error);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__1(object message, Exception error);
}
internal static class Microsoft.Owin.Logging.LoggerFactory : object {
    [CompilerGeneratedAttribute]
private static ILoggerFactory <Default>k__BackingField;
    public static ILoggerFactory Default { get; public set; }
    private static LoggerFactory();
    [CompilerGeneratedAttribute]
public static ILoggerFactory get_Default();
    [CompilerGeneratedAttribute]
public static void set_Default(ILoggerFactory value);
}
internal class Microsoft.Owin.Mapping.MapMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private MapOptions _options;
    public MapMiddleware(Func`2<IDictionary`2<string, object>, Task> next, MapOptions options);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.Mapping.MapMiddleware/<Invoke>d__0")]
public Task Invoke(IDictionary`2<string, object> environment);
}
internal class Microsoft.Owin.Mapping.MapOptions : object {
    [CompilerGeneratedAttribute]
private PathString <PathMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDictionary`2<string, object>, Task> <Branch>k__BackingField;
    public PathString PathMatch { get; public set; }
    public Func`2<IDictionary`2<string, object>, Task> Branch { get; public set; }
    [CompilerGeneratedAttribute]
public PathString get_PathMatch();
    [CompilerGeneratedAttribute]
public void set_PathMatch(PathString value);
    [CompilerGeneratedAttribute]
public Func`2<IDictionary`2<string, object>, Task> get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(Func`2<IDictionary`2<string, object>, Task> value);
}
internal class Microsoft.Owin.Mapping.MapWhenMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    private MapWhenOptions _options;
    public MapWhenMiddleware(Func`2<IDictionary`2<string, object>, Task> next, MapWhenOptions options);
    [AsyncStateMachineAttribute("Microsoft.Owin.Mapping.MapWhenMiddleware/<Invoke>d__0")]
[DebuggerStepThroughAttribute]
public Task Invoke(IDictionary`2<string, object> environment);
}
internal class Microsoft.Owin.Mapping.MapWhenOptions : object {
    [CompilerGeneratedAttribute]
private Func`2<IOwinContext, bool> <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IOwinContext, Task`1<bool>> <PredicateAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IDictionary`2<string, object>, Task> <Branch>k__BackingField;
    public Func`2<IOwinContext, bool> Predicate { get; public set; }
    public Func`2<IOwinContext, Task`1<bool>> PredicateAsync { get; public set; }
    public Func`2<IDictionary`2<string, object>, Task> Branch { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<IOwinContext, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<IOwinContext, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<IOwinContext, Task`1<bool>> get_PredicateAsync();
    [CompilerGeneratedAttribute]
public void set_PredicateAsync(Func`2<IOwinContext, Task`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<IDictionary`2<string, object>, Task> get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(Func`2<IDictionary`2<string, object>, Task> value);
}
internal static class Microsoft.Owin.OwinConstants : object {
    public static string RequestScheme;
    public static string RequestMethod;
    public static string RequestPathBase;
    public static string RequestPath;
    public static string RequestQueryString;
    public static string RequestProtocol;
    public static string RequestHeaders;
    public static string RequestBody;
    public static string ResponseStatusCode;
    public static string ResponseReasonPhrase;
    public static string ResponseProtocol;
    public static string ResponseHeaders;
    public static string ResponseBody;
    public static string CallCancelled;
    public static string OwinVersion;
}
internal class Microsoft.Owin.OwinContext : object {
    [CompilerGeneratedAttribute]
private IOwinRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IOwinResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Environment>k__BackingField;
    public IOwinRequest Request { get; private set; }
    public IOwinResponse Response { get; private set; }
    public IAuthenticationManager Authentication { get; }
    public IDictionary`2<string, object> Environment { get; private set; }
    public TextWriter TraceOutput { get; public set; }
    public OwinContext(IDictionary`2<string, object> environment);
    [CompilerGeneratedAttribute]
public virtual IOwinRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(IOwinRequest value);
    [CompilerGeneratedAttribute]
public virtual IOwinResponse get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(IOwinResponse value);
    public sealed virtual IAuthenticationManager get_Authentication();
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IDictionary`2<string, object> value);
    public virtual TextWriter get_TraceOutput();
    public virtual void set_TraceOutput(TextWriter value);
    public virtual T Get(string key);
    public virtual IOwinContext Set(string key, T value);
}
internal abstract class Microsoft.Owin.OwinMiddleware : object {
    [CompilerGeneratedAttribute]
private OwinMiddleware <Next>k__BackingField;
    protected OwinMiddleware Next { get; protected set; }
    protected OwinMiddleware(OwinMiddleware next);
    [CompilerGeneratedAttribute]
protected OwinMiddleware get_Next();
    [CompilerGeneratedAttribute]
protected void set_Next(OwinMiddleware value);
    public abstract virtual Task Invoke(IOwinContext context);
}
internal class Microsoft.Owin.OwinRequest : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Environment>k__BackingField;
    public IDictionary`2<string, object> Environment { get; private set; }
    public IOwinContext Context { get; }
    public string Method { get; public set; }
    public string Scheme { get; public set; }
    public bool IsSecure { get; }
    public HostString Host { get; public set; }
    public PathString PathBase { get; public set; }
    public PathString Path { get; public set; }
    public QueryString QueryString { get; public set; }
    public IReadableStringCollection Query { get; }
    public Uri Uri { get; }
    public string Protocol { get; public set; }
    public IHeaderDictionary Headers { get; }
    private IDictionary`2<string, String[]> RawHeaders { get; }
    public RequestCookieCollection Cookies { get; }
    public string ContentType { get; public set; }
    public string CacheControl { get; public set; }
    public string MediaType { get; public set; }
    public string Accept { get; public set; }
    public Stream Body { get; public set; }
    public CancellationToken CallCancelled { get; public set; }
    public string LocalIpAddress { get; public set; }
    public Nullable`1<int> LocalPort { get; public set; }
    private string LocalPortString { get; private set; }
    public string RemoteIpAddress { get; public set; }
    public Nullable`1<int> RemotePort { get; public set; }
    private string RemotePortString { get; private set; }
    public IPrincipal User { get; public set; }
    public OwinRequest(IDictionary`2<string, object> environment);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IDictionary`2<string, object> value);
    public virtual IOwinContext get_Context();
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual string get_Scheme();
    public virtual void set_Scheme(string value);
    public virtual bool get_IsSecure();
    public virtual HostString get_Host();
    public virtual void set_Host(HostString value);
    public virtual PathString get_PathBase();
    public virtual void set_PathBase(PathString value);
    public virtual PathString get_Path();
    public virtual void set_Path(PathString value);
    public virtual QueryString get_QueryString();
    public virtual void set_QueryString(QueryString value);
    public virtual IReadableStringCollection get_Query();
    public virtual Uri get_Uri();
    public virtual string get_Protocol();
    public virtual void set_Protocol(string value);
    public virtual IHeaderDictionary get_Headers();
    private IDictionary`2<string, String[]> get_RawHeaders();
    public sealed virtual RequestCookieCollection get_Cookies();
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual string get_CacheControl();
    public virtual void set_CacheControl(string value);
    public virtual string get_MediaType();
    public virtual void set_MediaType(string value);
    public virtual string get_Accept();
    public virtual void set_Accept(string value);
    public virtual Stream get_Body();
    public virtual void set_Body(Stream value);
    public virtual CancellationToken get_CallCancelled();
    public virtual void set_CallCancelled(CancellationToken value);
    public virtual string get_LocalIpAddress();
    public virtual void set_LocalIpAddress(string value);
    public virtual Nullable`1<int> get_LocalPort();
    public virtual void set_LocalPort(Nullable`1<int> value);
    private string get_LocalPortString();
    private void set_LocalPortString(string value);
    public virtual string get_RemoteIpAddress();
    public virtual void set_RemoteIpAddress(string value);
    public virtual Nullable`1<int> get_RemotePort();
    public virtual void set_RemotePort(Nullable`1<int> value);
    private string get_RemotePortString();
    private void set_RemotePortString(string value);
    public virtual IPrincipal get_User();
    public virtual void set_User(IPrincipal value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.OwinRequest/<ReadFormAsync>d__0")]
public sealed virtual Task`1<IFormCollection> ReadFormAsync();
    public virtual T Get(string key);
    public virtual IOwinRequest Set(string key, T value);
}
internal class Microsoft.Owin.OwinResponse : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Environment>k__BackingField;
    public IDictionary`2<string, object> Environment { get; private set; }
    public IOwinContext Context { get; }
    public int StatusCode { get; public set; }
    public string ReasonPhrase { get; public set; }
    public string Protocol { get; public set; }
    public IHeaderDictionary Headers { get; }
    private IDictionary`2<string, String[]> RawHeaders { get; }
    public ResponseCookieCollection Cookies { get; }
    public Nullable`1<long> ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public string ETag { get; public set; }
    public Stream Body { get; public set; }
    public OwinResponse(IDictionary`2<string, object> environment);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, object> get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IDictionary`2<string, object> value);
    public virtual IOwinContext get_Context();
    public virtual int get_StatusCode();
    public virtual void set_StatusCode(int value);
    public virtual string get_ReasonPhrase();
    public virtual void set_ReasonPhrase(string value);
    public virtual string get_Protocol();
    public virtual void set_Protocol(string value);
    public virtual IHeaderDictionary get_Headers();
    private IDictionary`2<string, String[]> get_RawHeaders();
    public virtual ResponseCookieCollection get_Cookies();
    public virtual Nullable`1<long> get_ContentLength();
    public virtual void set_ContentLength(Nullable`1<long> value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual Nullable`1<DateTimeOffset> get_Expires();
    public virtual void set_Expires(Nullable`1<DateTimeOffset> value);
    public virtual string get_ETag();
    public virtual void set_ETag(string value);
    public virtual Stream get_Body();
    public virtual void set_Body(Stream value);
    public virtual void OnSendingHeaders(Action`1<object> callback, object state);
    public virtual void Redirect(string location);
    public virtual void Write(string text);
    public virtual void Write(Byte[] data);
    public virtual void Write(Byte[] data, int offset, int count);
    public virtual Task WriteAsync(string text);
    public virtual Task WriteAsync(string text, CancellationToken token);
    public virtual Task WriteAsync(Byte[] data);
    public virtual Task WriteAsync(Byte[] data, CancellationToken token);
    public virtual Task WriteAsync(Byte[] data, int offset, int count, CancellationToken token);
    public virtual T Get(string key);
    private T Get(string key, T fallback);
    public virtual IOwinResponse Set(string key, T value);
}
[AttributeUsageAttribute("1")]
internal class Microsoft.Owin.OwinStartupAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StartupType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public string FriendlyName { get; private set; }
    public Type StartupType { get; private set; }
    public string MethodName { get; private set; }
    public OwinStartupAttribute(Type startupType);
    public OwinStartupAttribute(string friendlyName, Type startupType);
    public OwinStartupAttribute(Type startupType, string methodName);
    public OwinStartupAttribute(string friendlyName, Type startupType, string methodName);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
private void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public Type get_StartupType();
    [CompilerGeneratedAttribute]
private void set_StartupType(Type value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
}
internal class Microsoft.Owin.PathString : ValueType {
    private static Func`2<string, string> EscapeDataString;
    public static PathString Empty;
    private string _value;
    public string Value { get; }
    public bool HasValue { get; }
    public PathString(string value);
    private static PathString();
    public string get_Value();
    public bool get_HasValue();
    public virtual string ToString();
    public string ToUriComponent();
    private static bool RequiresEscaping(string value);
    public static PathString FromUriComponent(string uriComponent);
    public static PathString FromUriComponent(Uri uri);
    public bool StartsWithSegments(PathString other);
    public bool StartsWithSegments(PathString other, PathString& remaining);
    public PathString Add(PathString other);
    public string Add(QueryString other);
    public sealed virtual bool Equals(PathString other);
    public bool Equals(PathString other, StringComparison comparisonType);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PathString left, PathString right);
    public static bool op_Inequality(PathString left, PathString right);
    public static PathString op_Addition(PathString left, PathString right);
    public static string op_Addition(PathString left, QueryString right);
}
internal class Microsoft.Owin.QueryString : ValueType {
    public static QueryString Empty;
    private string _value;
    public string Value { get; }
    public bool HasValue { get; }
    public QueryString(string value);
    public QueryString(string name, string value);
    private static QueryString();
    public string get_Value();
    public bool get_HasValue();
    public virtual string ToString();
    public string ToUriComponent();
    public static QueryString FromUriComponent(string uriComponent);
    public static QueryString FromUriComponent(Uri uri);
    public sealed virtual bool Equals(QueryString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(QueryString left, QueryString right);
    public static bool op_Inequality(QueryString left, QueryString right);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Owin.ReadableStringCollection : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, String[]> <Store>k__BackingField;
    private IDictionary`2<string, String[]> Store { get; private set; }
    public string Item { get; }
    public ReadableStringCollection(IDictionary`2<string, String[]> store);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, String[]> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(IDictionary`2<string, String[]> value);
    public sealed virtual string get_Item(string key);
    public sealed virtual string Get(string key);
    public sealed virtual IList`1<string> GetValues(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, String[]>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Owin.RequestCookieCollection : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Store>k__BackingField;
    private IDictionary`2<string, string> Store { get; private set; }
    public string Item { get; }
    public RequestCookieCollection(IDictionary`2<string, string> store);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(IDictionary`2<string, string> value);
    public string get_Item(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Owin.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_ConversionTakesOneParameter { get; }
    internal static string Exception_CookieLimitTooSmall { get; }
    internal static string Exception_ImcompleteChunkedCookie { get; }
    internal static string Exception_MiddlewareNotSupported { get; }
    internal static string Exception_MissingOnSendingHeaders { get; }
    internal static string Exception_NoConstructorFound { get; }
    internal static string Exception_NoConversionExists { get; }
    internal static string Exception_PathMustNotEndWithSlash { get; }
    internal static string Exception_PathMustStartWithSlash { get; }
    internal static string Exception_PathRequired { get; }
    internal static string Exception_QueryStringMustStartWithDelimiter { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Exception_ConversionTakesOneParameter();
    internal static string get_Exception_CookieLimitTooSmall();
    internal static string get_Exception_ImcompleteChunkedCookie();
    internal static string get_Exception_MiddlewareNotSupported();
    internal static string get_Exception_MissingOnSendingHeaders();
    internal static string get_Exception_NoConstructorFound();
    internal static string get_Exception_NoConversionExists();
    internal static string get_Exception_PathMustNotEndWithSlash();
    internal static string get_Exception_PathMustStartWithSlash();
    internal static string get_Exception_PathRequired();
    internal static string get_Exception_QueryStringMustStartWithDelimiter();
}
internal class Microsoft.Owin.ResponseCookieCollection : object {
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    private IHeaderDictionary Headers { get; private set; }
    public ResponseCookieCollection(IHeaderDictionary headers);
    [CompilerGeneratedAttribute]
private IHeaderDictionary get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IHeaderDictionary value);
    public void Append(string key, string value);
    public void Append(string key, string value, CookieOptions options);
    public void Delete(string key);
    public void Delete(string key, CookieOptions options);
}
[ExtensionAttribute]
internal static class Microsoft.Owin.Security.AppBuilderSecurityExtensions : object {
    [ExtensionAttribute]
public static string GetDefaultSignInAsAuthenticationType(IAppBuilder app);
    [ExtensionAttribute]
public static void SetDefaultSignInAsAuthenticationType(IAppBuilder app, string authenticationType);
}
internal class Microsoft.Owin.Security.AuthenticateResult : object {
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationDescription <Description>k__BackingField;
    public ClaimsIdentity Identity { get; private set; }
    public AuthenticationProperties Properties { get; private set; }
    public AuthenticationDescription Description { get; private set; }
    public AuthenticateResult(IIdentity identity, AuthenticationProperties properties, AuthenticationDescription description);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(AuthenticationProperties value);
    [CompilerGeneratedAttribute]
public AuthenticationDescription get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(AuthenticationDescription value);
}
internal class Microsoft.Owin.Security.AuthenticationDescription : object {
    private static string CaptionPropertyKey;
    private static string AuthenticationTypePropertyKey;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    public IDictionary`2<string, object> Properties { get; private set; }
    public string AuthenticationType { get; public set; }
    public string Caption { get; public set; }
    public AuthenticationDescription(IDictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IDictionary`2<string, object> value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public string get_Caption();
    public void set_Caption(string value);
    private string GetString(string name);
}
internal class Microsoft.Owin.Security.AuthenticationManager : object {
    private IOwinContext _context;
    private IOwinRequest _request;
    [CompilerGeneratedAttribute]
private static Func`2<AuthenticationDescription, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public ClaimsPrincipal User { get; public set; }
    internal Func`4<String[], Action`4<IIdentity, IDictionary`2<string, string>, IDictionary`2<string, object>, object>, object, Task> AuthenticateDelegate { get; }
    public AuthenticationResponseChallenge AuthenticationResponseChallenge { get; public set; }
    public AuthenticationResponseGrant AuthenticationResponseGrant { get; public set; }
    public AuthenticationResponseRevoke AuthenticationResponseRevoke { get; public set; }
    public Tuple`2<IPrincipal, IDictionary`2<string, string>> SignInEntry { get; public set; }
    public String[] SignOutEntry { get; public set; }
    public IDictionary`2<string, string> SignOutPropertiesEntry { get; public set; }
    public Tuple`2<String[], IDictionary`2<string, string>> ChallengeEntry { get; public set; }
    public AuthenticationManager(IOwinContext context);
    public sealed virtual ClaimsPrincipal get_User();
    public sealed virtual void set_User(ClaimsPrincipal value);
    internal Func`4<String[], Action`4<IIdentity, IDictionary`2<string, string>, IDictionary`2<string, object>, object>, object, Task> get_AuthenticateDelegate();
    public sealed virtual AuthenticationResponseChallenge get_AuthenticationResponseChallenge();
    public sealed virtual void set_AuthenticationResponseChallenge(AuthenticationResponseChallenge value);
    public sealed virtual AuthenticationResponseGrant get_AuthenticationResponseGrant();
    public sealed virtual void set_AuthenticationResponseGrant(AuthenticationResponseGrant value);
    public sealed virtual AuthenticationResponseRevoke get_AuthenticationResponseRevoke();
    public sealed virtual void set_AuthenticationResponseRevoke(AuthenticationResponseRevoke value);
    public sealed virtual IEnumerable`1<AuthenticationDescription> GetAuthenticationTypes();
    public sealed virtual IEnumerable`1<AuthenticationDescription> GetAuthenticationTypes(Func`2<AuthenticationDescription, bool> predicate);
    private Task GetAuthenticationTypes(Action`1<IDictionary`2<string, object>> callback);
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.AuthenticationManager/<AuthenticateAsync>d__8")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<AuthenticateResult> AuthenticateAsync(string authenticationType);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.Security.AuthenticationManager/<AuthenticateAsync>d__b")]
public sealed virtual Task`1<IEnumerable`1<AuthenticateResult>> AuthenticateAsync(String[] authenticationTypes);
    private static void AuthenticateAsyncCallback(IIdentity identity, IDictionary`2<string, string> properties, IDictionary`2<string, object> description, object state);
    public sealed virtual void Challenge(AuthenticationProperties properties, String[] authenticationTypes);
    public sealed virtual void Challenge(String[] authenticationTypes);
    public sealed virtual void SignIn(AuthenticationProperties properties, ClaimsIdentity[] identities);
    public sealed virtual void SignIn(ClaimsIdentity[] identities);
    public sealed virtual void SignOut(AuthenticationProperties properties, String[] authenticationTypes);
    public sealed virtual void SignOut(String[] authenticationTypes);
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.AuthenticationManager/<Authenticate>d__1a")]
[DebuggerStepThroughAttribute]
public Task Authenticate(String[] authenticationTypes, Action`4<IIdentity, IDictionary`2<string, string>, IDictionary`2<string, object>, object> callback, object state);
    public Tuple`2<IPrincipal, IDictionary`2<string, string>> get_SignInEntry();
    public void set_SignInEntry(Tuple`2<IPrincipal, IDictionary`2<string, string>> value);
    public String[] get_SignOutEntry();
    public void set_SignOutEntry(String[] value);
    public IDictionary`2<string, string> get_SignOutPropertiesEntry();
    public void set_SignOutPropertiesEntry(IDictionary`2<string, string> value);
    public Tuple`2<String[], IDictionary`2<string, string>> get_ChallengeEntry();
    public void set_ChallengeEntry(Tuple`2<String[], IDictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
private static bool <GetAuthenticationTypes>b__0(AuthenticationDescription _);
}
internal enum Microsoft.Owin.Security.AuthenticationMode : Enum {
    public int value__;
    public static AuthenticationMode Active;
    public static AuthenticationMode Passive;
}
internal abstract class Microsoft.Owin.Security.AuthenticationOptions : object {
    private string _authenticationType;
    [CompilerGeneratedAttribute]
private AuthenticationMode <AuthenticationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationDescription <Description>k__BackingField;
    public string AuthenticationType { get; public set; }
    public AuthenticationMode AuthenticationMode { get; public set; }
    public AuthenticationDescription Description { get; public set; }
    protected AuthenticationOptions(string authenticationType);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    [CompilerGeneratedAttribute]
public AuthenticationMode get_AuthenticationMode();
    [CompilerGeneratedAttribute]
public void set_AuthenticationMode(AuthenticationMode value);
    [CompilerGeneratedAttribute]
public AuthenticationDescription get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(AuthenticationDescription value);
}
internal class Microsoft.Owin.Security.AuthenticationProperties : object {
    internal static string IssuedUtcKey;
    internal static string ExpiresUtcKey;
    internal static string IsPersistentKey;
    internal static string RedirectUriKey;
    internal static string RefreshKey;
    internal static string UtcDateTimeFormat;
    private IDictionary`2<string, string> _dictionary;
    public IDictionary`2<string, string> Dictionary { get; }
    public bool IsPersistent { get; public set; }
    public string RedirectUri { get; public set; }
    public Nullable`1<DateTimeOffset> IssuedUtc { get; public set; }
    public Nullable`1<DateTimeOffset> ExpiresUtc { get; public set; }
    public Nullable`1<bool> AllowRefresh { get; public set; }
    public AuthenticationProperties(IDictionary`2<string, string> dictionary);
    public IDictionary`2<string, string> get_Dictionary();
    public bool get_IsPersistent();
    public void set_IsPersistent(bool value);
    public string get_RedirectUri();
    public void set_RedirectUri(string value);
    public Nullable`1<DateTimeOffset> get_IssuedUtc();
    public void set_IssuedUtc(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ExpiresUtc();
    public void set_ExpiresUtc(Nullable`1<DateTimeOffset> value);
    public Nullable`1<bool> get_AllowRefresh();
    public void set_AllowRefresh(Nullable`1<bool> value);
}
internal class Microsoft.Owin.Security.AuthenticationResponseChallenge : object {
    [CompilerGeneratedAttribute]
private String[] <AuthenticationTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public String[] AuthenticationTypes { get; private set; }
    public AuthenticationProperties Properties { get; private set; }
    public AuthenticationResponseChallenge(String[] authenticationTypes, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public String[] get_AuthenticationTypes();
    [CompilerGeneratedAttribute]
private void set_AuthenticationTypes(String[] value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(AuthenticationProperties value);
}
internal class Microsoft.Owin.Security.AuthenticationResponseGrant : object {
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public ClaimsIdentity Identity { get; private set; }
    public ClaimsPrincipal Principal { get; private set; }
    public AuthenticationProperties Properties { get; private set; }
    public AuthenticationResponseGrant(ClaimsIdentity identity, AuthenticationProperties properties);
    public AuthenticationResponseGrant(ClaimsPrincipal principal, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
private void set_Principal(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(AuthenticationProperties value);
}
internal class Microsoft.Owin.Security.AuthenticationResponseRevoke : object {
    [CompilerGeneratedAttribute]
private String[] <AuthenticationTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public String[] AuthenticationTypes { get; private set; }
    public AuthenticationProperties Properties { get; private set; }
    public AuthenticationResponseRevoke(String[] authenticationTypes);
    public AuthenticationResponseRevoke(String[] authenticationTypes, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public String[] get_AuthenticationTypes();
    [CompilerGeneratedAttribute]
private void set_AuthenticationTypes(String[] value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(AuthenticationProperties value);
}
internal class Microsoft.Owin.Security.AuthenticationTicket : object {
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public ClaimsIdentity Identity { get; private set; }
    public AuthenticationProperties Properties { get; private set; }
    public AuthenticationTicket(ClaimsIdentity identity, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(AuthenticationProperties value);
}
internal class Microsoft.Owin.Security.CertificateSubjectKeyIdentifierValidator : object {
    private HashSet`1<string> _validSubjectKeyIdentifiers;
    public CertificateSubjectKeyIdentifierValidator(IEnumerable`1<string> validSubjectKeyIdentifiers);
    public sealed virtual bool Validate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private static string GetSubjectKeyIdentifier(X509Certificate2 certificate);
}
internal class Microsoft.Owin.Security.CertificateSubjectPublicKeyInfoValidator : object {
    private HashSet`1<string> _validBase64EncodedSubjectPublicKeyInfoHashes;
    private SubjectPublicKeyInfoAlgorithm _algorithm;
    public CertificateSubjectPublicKeyInfoValidator(IEnumerable`1<string> validBase64EncodedSubjectPublicKeyInfoHashes, SubjectPublicKeyInfoAlgorithm algorithm);
    public sealed virtual bool Validate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private static Byte[] ExtractSpkiBlob(X509Certificate2 certificate);
    private HashAlgorithm CreateHashAlgorithm();
}
internal class Microsoft.Owin.Security.CertificateThumbprintValidator : object {
    private HashSet`1<string> _validCertificateThumbprints;
    public CertificateThumbprintValidator(IEnumerable`1<string> validThumbprints);
    public sealed virtual bool Validate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
}
internal static class Microsoft.Owin.Security.Constants : object {
    public static string DefaultSignInAsAuthenticationType;
}
internal class Microsoft.Owin.Security.Cookies.CookieApplyRedirectContext : BaseContext`1<CookieAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    public string RedirectUri { get; public set; }
    public CookieApplyRedirectContext(IOwinContext context, CookieAuthenticationOptions options, string redirectUri);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
}
internal static class Microsoft.Owin.Security.Cookies.CookieAuthenticationDefaults : object {
    public static string AuthenticationType;
    public static string CookiePrefix;
    public static string ReturnUrlParameter;
    public static PathString LoginPath;
    public static PathString LogoutPath;
    private static CookieAuthenticationDefaults();
}
internal class Microsoft.Owin.Security.Cookies.CookieAuthenticationHandler : AuthenticationHandler`1<CookieAuthenticationOptions> {
    private static string HeaderNameCacheControl;
    private static string HeaderNamePragma;
    private static string HeaderNameExpires;
    private static string HeaderValueNoCache;
    private static string HeaderValueMinusOne;
    private static string SessionIdClaim;
    private ILogger _logger;
    private bool _shouldRenew;
    private DateTimeOffset _renewIssuedUtc;
    private DateTimeOffset _renewExpiresUtc;
    private string _sessionKey;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public CookieAuthenticationHandler(ILogger logger);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.Security.Cookies.CookieAuthenticationHandler/<AuthenticateCoreAsync>d__2")]
protected virtual Task`1<AuthenticationTicket> AuthenticateCoreAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.Cookies.CookieAuthenticationHandler/<ApplyResponseGrantAsync>d__f")]
[DebuggerStepThroughAttribute]
protected virtual Task ApplyResponseGrantAsync();
    private static bool IsHostRelative(string path);
    protected virtual Task ApplyResponseChallengeAsync();
    [CompilerGeneratedAttribute]
private static bool <AuthenticateCoreAsync>b__0(Claim c);
}
internal class Microsoft.Owin.Security.Cookies.CookieAuthenticationMiddleware : AuthenticationMiddleware`1<CookieAuthenticationOptions> {
    private ILogger _logger;
    public CookieAuthenticationMiddleware(OwinMiddleware next, IAppBuilder app, CookieAuthenticationOptions options);
    protected virtual AuthenticationHandler`1<CookieAuthenticationOptions> CreateHandler();
}
internal class Microsoft.Owin.Security.Cookies.CookieAuthenticationOptions : AuthenticationOptions {
    private string _cookieName;
    [CompilerGeneratedAttribute]
private string <CookieDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CookiePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CookieHttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieSecureOption <CookieSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpireTimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SlidingExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private PathString <LoginPath>k__BackingField;
    [CompilerGeneratedAttribute]
private PathString <LogoutPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnUrlParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookieAuthenticationProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private ISecureDataFormat`1<AuthenticationTicket> <TicketDataFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemClock <SystemClock>k__BackingField;
    [CompilerGeneratedAttribute]
private ICookieManager <CookieManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticationSessionStore <SessionStore>k__BackingField;
    public string CookieName { get; public set; }
    public string CookieDomain { get; public set; }
    public string CookiePath { get; public set; }
    public bool CookieHttpOnly { get; public set; }
    public CookieSecureOption CookieSecure { get; public set; }
    public TimeSpan ExpireTimeSpan { get; public set; }
    public bool SlidingExpiration { get; public set; }
    public PathString LoginPath { get; public set; }
    public PathString LogoutPath { get; public set; }
    public string ReturnUrlParameter { get; public set; }
    public ICookieAuthenticationProvider Provider { get; public set; }
    public ISecureDataFormat`1<AuthenticationTicket> TicketDataFormat { get; public set; }
    public ISystemClock SystemClock { get; public set; }
    public ICookieManager CookieManager { get; public set; }
    public IAuthenticationSessionStore SessionStore { get; public set; }
    public string get_CookieName();
    public void set_CookieName(string value);
    [CompilerGeneratedAttribute]
public string get_CookieDomain();
    [CompilerGeneratedAttribute]
public void set_CookieDomain(string value);
    [CompilerGeneratedAttribute]
public string get_CookiePath();
    [CompilerGeneratedAttribute]
public void set_CookiePath(string value);
    [CompilerGeneratedAttribute]
public bool get_CookieHttpOnly();
    [CompilerGeneratedAttribute]
public void set_CookieHttpOnly(bool value);
    [CompilerGeneratedAttribute]
public CookieSecureOption get_CookieSecure();
    [CompilerGeneratedAttribute]
public void set_CookieSecure(CookieSecureOption value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpireTimeSpan();
    [CompilerGeneratedAttribute]
public void set_ExpireTimeSpan(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_SlidingExpiration();
    [CompilerGeneratedAttribute]
public void set_SlidingExpiration(bool value);
    [CompilerGeneratedAttribute]
public PathString get_LoginPath();
    [CompilerGeneratedAttribute]
public void set_LoginPath(PathString value);
    [CompilerGeneratedAttribute]
public PathString get_LogoutPath();
    [CompilerGeneratedAttribute]
public void set_LogoutPath(PathString value);
    [CompilerGeneratedAttribute]
public string get_ReturnUrlParameter();
    [CompilerGeneratedAttribute]
public void set_ReturnUrlParameter(string value);
    [CompilerGeneratedAttribute]
public ICookieAuthenticationProvider get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(ICookieAuthenticationProvider value);
    [CompilerGeneratedAttribute]
public ISecureDataFormat`1<AuthenticationTicket> get_TicketDataFormat();
    [CompilerGeneratedAttribute]
public void set_TicketDataFormat(ISecureDataFormat`1<AuthenticationTicket> value);
    [CompilerGeneratedAttribute]
public ISystemClock get_SystemClock();
    [CompilerGeneratedAttribute]
public void set_SystemClock(ISystemClock value);
    [CompilerGeneratedAttribute]
public ICookieManager get_CookieManager();
    [CompilerGeneratedAttribute]
public void set_CookieManager(ICookieManager value);
    [CompilerGeneratedAttribute]
public IAuthenticationSessionStore get_SessionStore();
    [CompilerGeneratedAttribute]
public void set_SessionStore(IAuthenticationSessionStore value);
}
internal class Microsoft.Owin.Security.Cookies.CookieAuthenticationProvider : object {
    [CompilerGeneratedAttribute]
private Func`2<CookieValidateIdentityContext, Task> <OnValidateIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<CookieResponseSignInContext> <OnResponseSignIn>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<CookieResponseSignedInContext> <OnResponseSignedIn>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<CookieResponseSignOutContext> <OnResponseSignOut>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<CookieApplyRedirectContext> <OnApplyRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<CookieExceptionContext> <OnException>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<CookieValidateIdentityContext, Task> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<CookieResponseSignInContext> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Action`1<CookieResponseSignedInContext> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Action`1<CookieResponseSignOutContext> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`1<CookieExceptionContext> CS$<>9__CachedAnonymousMethodDelegate9;
    public Func`2<CookieValidateIdentityContext, Task> OnValidateIdentity { get; public set; }
    public Action`1<CookieResponseSignInContext> OnResponseSignIn { get; public set; }
    public Action`1<CookieResponseSignedInContext> OnResponseSignedIn { get; public set; }
    public Action`1<CookieResponseSignOutContext> OnResponseSignOut { get; public set; }
    public Action`1<CookieApplyRedirectContext> OnApplyRedirect { get; public set; }
    public Action`1<CookieExceptionContext> OnException { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<CookieValidateIdentityContext, Task> get_OnValidateIdentity();
    [CompilerGeneratedAttribute]
public void set_OnValidateIdentity(Func`2<CookieValidateIdentityContext, Task> value);
    [CompilerGeneratedAttribute]
public Action`1<CookieResponseSignInContext> get_OnResponseSignIn();
    [CompilerGeneratedAttribute]
public void set_OnResponseSignIn(Action`1<CookieResponseSignInContext> value);
    [CompilerGeneratedAttribute]
public Action`1<CookieResponseSignedInContext> get_OnResponseSignedIn();
    [CompilerGeneratedAttribute]
public void set_OnResponseSignedIn(Action`1<CookieResponseSignedInContext> value);
    [CompilerGeneratedAttribute]
public Action`1<CookieResponseSignOutContext> get_OnResponseSignOut();
    [CompilerGeneratedAttribute]
public void set_OnResponseSignOut(Action`1<CookieResponseSignOutContext> value);
    [CompilerGeneratedAttribute]
public Action`1<CookieApplyRedirectContext> get_OnApplyRedirect();
    [CompilerGeneratedAttribute]
public void set_OnApplyRedirect(Action`1<CookieApplyRedirectContext> value);
    [CompilerGeneratedAttribute]
public Action`1<CookieExceptionContext> get_OnException();
    [CompilerGeneratedAttribute]
public void set_OnException(Action`1<CookieExceptionContext> value);
    public virtual Task ValidateIdentity(CookieValidateIdentityContext context);
    public virtual void ResponseSignIn(CookieResponseSignInContext context);
    public virtual void ResponseSignedIn(CookieResponseSignedInContext context);
    public virtual void ResponseSignOut(CookieResponseSignOutContext context);
    public virtual void ApplyRedirect(CookieApplyRedirectContext context);
    public virtual void Exception(CookieExceptionContext context);
    [CompilerGeneratedAttribute]
private static Task <.ctor>b__0(CookieValidateIdentityContext context);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(CookieResponseSignInContext context);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(CookieResponseSignedInContext context);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3(CookieResponseSignOutContext context);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__4(CookieExceptionContext context);
}
internal class Microsoft.Owin.Security.Cookies.CookieExceptionContext : BaseContext`1<CookieAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private ExceptionLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rethrow>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationTicket <Ticket>k__BackingField;
    public ExceptionLocation Location { get; private set; }
    public Exception Exception { get; private set; }
    public bool Rethrow { get; public set; }
    public AuthenticationTicket Ticket { get; public set; }
    public CookieExceptionContext(IOwinContext context, CookieAuthenticationOptions options, ExceptionLocation location, Exception exception, AuthenticationTicket ticket);
    [CompilerGeneratedAttribute]
public ExceptionLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(ExceptionLocation value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_Rethrow();
    [CompilerGeneratedAttribute]
public void set_Rethrow(bool value);
    [CompilerGeneratedAttribute]
public AuthenticationTicket get_Ticket();
    [CompilerGeneratedAttribute]
public void set_Ticket(AuthenticationTicket value);
}
internal class Microsoft.Owin.Security.Cookies.CookieResponseSignedInContext : BaseContext`1<CookieAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private string <AuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public string AuthenticationType { get; private set; }
    public ClaimsIdentity Identity { get; private set; }
    public AuthenticationProperties Properties { get; private set; }
    public CookieResponseSignedInContext(IOwinContext context, CookieAuthenticationOptions options, string authenticationType, ClaimsIdentity identity, AuthenticationProperties properties);
    [CompilerGeneratedAttribute]
public string get_AuthenticationType();
    [CompilerGeneratedAttribute]
private void set_AuthenticationType(string value);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(AuthenticationProperties value);
}
internal class Microsoft.Owin.Security.Cookies.CookieResponseSignInContext : BaseContext`1<CookieAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private string <AuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieOptions <CookieOptions>k__BackingField;
    public string AuthenticationType { get; private set; }
    public ClaimsIdentity Identity { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    public CookieOptions CookieOptions { get; public set; }
    public CookieResponseSignInContext(IOwinContext context, CookieAuthenticationOptions options, string authenticationType, ClaimsIdentity identity, AuthenticationProperties properties, CookieOptions cookieOptions);
    [CompilerGeneratedAttribute]
public string get_AuthenticationType();
    [CompilerGeneratedAttribute]
private void set_AuthenticationType(string value);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AuthenticationProperties value);
    [CompilerGeneratedAttribute]
public CookieOptions get_CookieOptions();
    [CompilerGeneratedAttribute]
public void set_CookieOptions(CookieOptions value);
}
internal class Microsoft.Owin.Security.Cookies.CookieResponseSignOutContext : BaseContext`1<CookieAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private CookieOptions <CookieOptions>k__BackingField;
    public CookieOptions CookieOptions { get; public set; }
    public CookieResponseSignOutContext(IOwinContext context, CookieAuthenticationOptions options, CookieOptions cookieOptions);
    [CompilerGeneratedAttribute]
public CookieOptions get_CookieOptions();
    [CompilerGeneratedAttribute]
public void set_CookieOptions(CookieOptions value);
}
internal enum Microsoft.Owin.Security.Cookies.CookieSecureOption : Enum {
    public int value__;
    public static CookieSecureOption SameAsRequest;
    public static CookieSecureOption Never;
    public static CookieSecureOption Always;
}
internal class Microsoft.Owin.Security.Cookies.CookieValidateIdentityContext : BaseContext`1<CookieAuthenticationOptions> {
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    public ClaimsIdentity Identity { get; private set; }
    public AuthenticationProperties Properties { get; private set; }
    public CookieValidateIdentityContext(IOwinContext context, AuthenticationTicket ticket, CookieAuthenticationOptions options);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(AuthenticationProperties value);
    public void ReplaceIdentity(IIdentity identity);
    public void RejectIdentity();
}
internal static class Microsoft.Owin.Security.Cookies.DefaultBehavior : object {
    internal static Action`1<CookieApplyRedirectContext> ApplyRedirect;
    [CompilerGeneratedAttribute]
private static Action`1<CookieApplyRedirectContext> CS$<>9__CachedAnonymousMethodDelegate3;
    private static DefaultBehavior();
    private static bool IsAjaxRequest(IOwinRequest request);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(CookieApplyRedirectContext context);
}
internal interface Microsoft.Owin.Security.Cookies.IAuthenticationSessionStore {
    public abstract virtual Task`1<string> StoreAsync(AuthenticationTicket ticket);
    public abstract virtual Task RenewAsync(string key, AuthenticationTicket ticket);
    public abstract virtual Task`1<AuthenticationTicket> RetrieveAsync(string key);
    public abstract virtual Task RemoveAsync(string key);
}
internal interface Microsoft.Owin.Security.Cookies.ICookieAuthenticationProvider {
    public abstract virtual Task ValidateIdentity(CookieValidateIdentityContext context);
    public abstract virtual void ResponseSignIn(CookieResponseSignInContext context);
    public abstract virtual void ResponseSignedIn(CookieResponseSignedInContext context);
    public abstract virtual void ApplyRedirect(CookieApplyRedirectContext context);
    public abstract virtual void ResponseSignOut(CookieResponseSignOutContext context);
    public abstract virtual void Exception(CookieExceptionContext context);
}
internal class Microsoft.Owin.Security.DataHandler.Encoder.Base64TextEncoder : object {
    public sealed virtual string Encode(Byte[] data);
    public sealed virtual Byte[] Decode(string text);
}
internal class Microsoft.Owin.Security.DataHandler.Encoder.Base64UrlTextEncoder : object {
    public sealed virtual string Encode(Byte[] data);
    public sealed virtual Byte[] Decode(string text);
    private static string Pad(string text);
}
internal interface Microsoft.Owin.Security.DataHandler.Encoder.ITextEncoder {
    public abstract virtual string Encode(Byte[] data);
    public abstract virtual Byte[] Decode(string text);
}
internal static class Microsoft.Owin.Security.DataHandler.Encoder.TextEncodings : object {
    private static ITextEncoder Base64Instance;
    private static ITextEncoder Base64UrlInstance;
    public static ITextEncoder Base64 { get; }
    public static ITextEncoder Base64Url { get; }
    private static TextEncodings();
    public static ITextEncoder get_Base64();
    public static ITextEncoder get_Base64Url();
}
internal class Microsoft.Owin.Security.DataHandler.PropertiesDataFormat : SecureDataFormat`1<AuthenticationProperties> {
    public PropertiesDataFormat(IDataProtector protector);
}
internal class Microsoft.Owin.Security.DataHandler.SecureDataFormat`1 : object {
    private IDataSerializer`1<TData> _serializer;
    private IDataProtector _protector;
    private ITextEncoder _encoder;
    public SecureDataFormat`1(IDataSerializer`1<TData> serializer, IDataProtector protector, ITextEncoder encoder);
    public sealed virtual string Protect(TData data);
    public sealed virtual TData Unprotect(string protectedText);
}
internal static class Microsoft.Owin.Security.DataHandler.Serializer.DataSerializers : object {
    [CompilerGeneratedAttribute]
private static IDataSerializer`1<AuthenticationProperties> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDataSerializer`1<AuthenticationTicket> <Ticket>k__BackingField;
    public static IDataSerializer`1<AuthenticationProperties> Properties { get; public set; }
    public static IDataSerializer`1<AuthenticationTicket> Ticket { get; public set; }
    private static DataSerializers();
    [CompilerGeneratedAttribute]
public static IDataSerializer`1<AuthenticationProperties> get_Properties();
    [CompilerGeneratedAttribute]
public static void set_Properties(IDataSerializer`1<AuthenticationProperties> value);
    [CompilerGeneratedAttribute]
public static IDataSerializer`1<AuthenticationTicket> get_Ticket();
    [CompilerGeneratedAttribute]
public static void set_Ticket(IDataSerializer`1<AuthenticationTicket> value);
}
internal interface Microsoft.Owin.Security.DataHandler.Serializer.IDataSerializer`1 {
    public abstract virtual Byte[] Serialize(TModel model);
    public abstract virtual TModel Deserialize(Byte[] data);
}
internal class Microsoft.Owin.Security.DataHandler.Serializer.PropertiesSerializer : object {
    private static int FormatVersion;
    public sealed virtual Byte[] Serialize(AuthenticationProperties model);
    public sealed virtual AuthenticationProperties Deserialize(Byte[] data);
    public static void Write(BinaryWriter writer, AuthenticationProperties properties);
    public static AuthenticationProperties Read(BinaryReader reader);
}
internal class Microsoft.Owin.Security.DataHandler.Serializer.TicketSerializer : object {
    private static int FormatVersion;
    public virtual Byte[] Serialize(AuthenticationTicket model);
    public virtual AuthenticationTicket Deserialize(Byte[] data);
    public static void Write(BinaryWriter writer, AuthenticationTicket model);
    public static AuthenticationTicket Read(BinaryReader reader);
    private static void WriteWithDefault(BinaryWriter writer, string value, string defaultValue);
    private static string ReadWithDefault(BinaryReader reader, string defaultValue);
}
internal class Microsoft.Owin.Security.DataHandler.TicketDataFormat : SecureDataFormat`1<AuthenticationTicket> {
    public TicketDataFormat(IDataProtector protector);
}
[ExtensionAttribute]
internal static class Microsoft.Owin.Security.DataProtection.AppBuilderExtensions : object {
    [ExtensionAttribute]
public static void SetDataProtectionProvider(IAppBuilder app, IDataProtectionProvider dataProtectionProvider);
    [ExtensionAttribute]
public static IDataProtectionProvider GetDataProtectionProvider(IAppBuilder app);
    [ExtensionAttribute]
public static IDataProtector CreateDataProtector(IAppBuilder app, String[] purposes);
    private static IDataProtectionProvider FallbackDataProtectionProvider(IAppBuilder app);
    private static string GetAppName(IAppBuilder app);
}
internal class Microsoft.Owin.Security.DataProtection.DpapiDataProtectionProvider : object {
    private string _appName;
    public DpapiDataProtectionProvider(string appName);
    public sealed virtual IDataProtector Create(String[] purposes);
}
internal class Microsoft.Owin.Security.DataProtection.DpapiDataProtector : object {
    private DpapiDataProtector _protector;
    public DpapiDataProtector(string appName, String[] purposes);
    public sealed virtual Byte[] Protect(Byte[] userData);
    public sealed virtual Byte[] Unprotect(Byte[] protectedData);
}
internal interface Microsoft.Owin.Security.DataProtection.IDataProtectionProvider {
    public abstract virtual IDataProtector Create(String[] purposes);
}
internal interface Microsoft.Owin.Security.DataProtection.IDataProtector {
    public abstract virtual Byte[] Protect(Byte[] userData);
    public abstract virtual Byte[] Unprotect(Byte[] protectedData);
}
internal interface Microsoft.Owin.Security.IAuthenticationManager {
    public ClaimsPrincipal User { get; public set; }
    public AuthenticationResponseChallenge AuthenticationResponseChallenge { get; public set; }
    public AuthenticationResponseGrant AuthenticationResponseGrant { get; public set; }
    public AuthenticationResponseRevoke AuthenticationResponseRevoke { get; public set; }
    public abstract virtual ClaimsPrincipal get_User();
    public abstract virtual void set_User(ClaimsPrincipal value);
    public abstract virtual AuthenticationResponseChallenge get_AuthenticationResponseChallenge();
    public abstract virtual void set_AuthenticationResponseChallenge(AuthenticationResponseChallenge value);
    public abstract virtual AuthenticationResponseGrant get_AuthenticationResponseGrant();
    public abstract virtual void set_AuthenticationResponseGrant(AuthenticationResponseGrant value);
    public abstract virtual AuthenticationResponseRevoke get_AuthenticationResponseRevoke();
    public abstract virtual void set_AuthenticationResponseRevoke(AuthenticationResponseRevoke value);
    public abstract virtual IEnumerable`1<AuthenticationDescription> GetAuthenticationTypes();
    public abstract virtual IEnumerable`1<AuthenticationDescription> GetAuthenticationTypes(Func`2<AuthenticationDescription, bool> predicate);
    public abstract virtual Task`1<AuthenticateResult> AuthenticateAsync(string authenticationType);
    public abstract virtual Task`1<IEnumerable`1<AuthenticateResult>> AuthenticateAsync(String[] authenticationTypes);
    public abstract virtual void Challenge(AuthenticationProperties properties, String[] authenticationTypes);
    public abstract virtual void Challenge(String[] authenticationTypes);
    public abstract virtual void SignIn(AuthenticationProperties properties, ClaimsIdentity[] identities);
    public abstract virtual void SignIn(ClaimsIdentity[] identities);
    public abstract virtual void SignOut(AuthenticationProperties properties, String[] authenticationTypes);
    public abstract virtual void SignOut(String[] authenticationTypes);
}
internal interface Microsoft.Owin.Security.ICertificateValidator {
    public abstract virtual bool Validate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
}
internal abstract class Microsoft.Owin.Security.Infrastructure.AuthenticationHandler : object {
    private static RNGCryptoServiceProvider Random;
    private object _registration;
    private Task`1<AuthenticationTicket> _authenticate;
    private bool _authenticateInitialized;
    private object _authenticateSyncLock;
    private Task _applyResponse;
    private bool _applyResponseInitialized;
    private object _applyResponseSyncLock;
    private AuthenticationOptions _baseOptions;
    [CompilerGeneratedAttribute]
private IOwinContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private PathString <RequestPathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityHelper <Helper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Faulted>k__BackingField;
    protected IOwinContext Context { get; private set; }
    protected IOwinRequest Request { get; }
    protected IOwinResponse Response { get; }
    protected PathString RequestPathBase { get; private set; }
    protected SecurityHelper Helper { get; private set; }
    protected bool Faulted { get; protected set; }
    internal AuthenticationOptions BaseOptions { get; }
    private static AuthenticationHandler();
    [CompilerGeneratedAttribute]
protected IOwinContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IOwinContext value);
    protected IOwinRequest get_Request();
    protected IOwinResponse get_Response();
    [CompilerGeneratedAttribute]
protected PathString get_RequestPathBase();
    [CompilerGeneratedAttribute]
private void set_RequestPathBase(PathString value);
    [CompilerGeneratedAttribute]
protected SecurityHelper get_Helper();
    [CompilerGeneratedAttribute]
private void set_Helper(SecurityHelper value);
    [CompilerGeneratedAttribute]
protected bool get_Faulted();
    [CompilerGeneratedAttribute]
protected void set_Faulted(bool value);
    internal AuthenticationOptions get_BaseOptions();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.Security.Infrastructure.AuthenticationHandler/<BaseInitializeAsync>d__0")]
protected Task BaseInitializeAsync(AuthenticationOptions options, IOwinContext context);
    private static void OnSendingHeaderCallback(object state);
    protected virtual Task InitializeCoreAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.Infrastructure.AuthenticationHandler/<TeardownAsync>d__5")]
[DebuggerStepThroughAttribute]
internal Task TeardownAsync();
    protected virtual Task TeardownCoreAsync();
    public virtual Task`1<bool> InvokeAsync();
    public Task`1<AuthenticationTicket> AuthenticateAsync();
    protected abstract virtual Task`1<AuthenticationTicket> AuthenticateCoreAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.Infrastructure.AuthenticationHandler/<ApplyResponseAsync>d__8")]
[DebuggerStepThroughAttribute]
private Task ApplyResponseAsync();
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.Infrastructure.AuthenticationHandler/<ApplyResponseCoreAsync>d__b")]
[DebuggerStepThroughAttribute]
protected virtual Task ApplyResponseCoreAsync();
    protected virtual Task ApplyResponseGrantAsync();
    protected virtual Task ApplyResponseChallengeAsync();
    protected void GenerateCorrelationId(AuthenticationProperties properties);
    protected bool ValidateCorrelationId(AuthenticationProperties properties, ILogger logger);
}
internal abstract class Microsoft.Owin.Security.Infrastructure.AuthenticationHandler`1 : AuthenticationHandler {
    [CompilerGeneratedAttribute]
private TOptions <Options>k__BackingField;
    protected TOptions Options { get; private set; }
    [CompilerGeneratedAttribute]
protected TOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(TOptions value);
    internal Task Initialize(TOptions options, IOwinContext context);
}
internal abstract class Microsoft.Owin.Security.Infrastructure.AuthenticationMiddleware`1 : OwinMiddleware {
    [CompilerGeneratedAttribute]
private TOptions <Options>k__BackingField;
    public TOptions Options { get; public set; }
    protected AuthenticationMiddleware`1(OwinMiddleware next, TOptions options);
    [CompilerGeneratedAttribute]
public TOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(TOptions value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.Security.Infrastructure.AuthenticationMiddleware`1/<Invoke>d__0")]
public virtual Task Invoke(IOwinContext context);
    protected abstract virtual AuthenticationHandler`1<TOptions> CreateHandler();
}
internal class Microsoft.Owin.Security.Infrastructure.AuthenticationTokenCreateContext : BaseContext {
    private ISecureDataFormat`1<AuthenticationTicket> _secureDataFormat;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationTicket <Ticket>k__BackingField;
    public string Token { get; protected set; }
    public AuthenticationTicket Ticket { get; protected set; }
    public AuthenticationTokenCreateContext(IOwinContext context, ISecureDataFormat`1<AuthenticationTicket> secureDataFormat, AuthenticationTicket ticket);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
protected void set_Token(string value);
    [CompilerGeneratedAttribute]
public AuthenticationTicket get_Ticket();
    [CompilerGeneratedAttribute]
protected void set_Ticket(AuthenticationTicket value);
    public string SerializeTicket();
    public void SetToken(string tokenValue);
}
internal class Microsoft.Owin.Security.Infrastructure.AuthenticationTokenProvider : object {
    [CompilerGeneratedAttribute]
private Action`1<AuthenticationTokenCreateContext> <OnCreate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuthenticationTokenCreateContext, Task> <OnCreateAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<AuthenticationTokenReceiveContext> <OnReceive>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<AuthenticationTokenReceiveContext, Task> <OnReceiveAsync>k__BackingField;
    public Action`1<AuthenticationTokenCreateContext> OnCreate { get; public set; }
    public Func`2<AuthenticationTokenCreateContext, Task> OnCreateAsync { get; public set; }
    public Action`1<AuthenticationTokenReceiveContext> OnReceive { get; public set; }
    public Func`2<AuthenticationTokenReceiveContext, Task> OnReceiveAsync { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<AuthenticationTokenCreateContext> get_OnCreate();
    [CompilerGeneratedAttribute]
public void set_OnCreate(Action`1<AuthenticationTokenCreateContext> value);
    [CompilerGeneratedAttribute]
public Func`2<AuthenticationTokenCreateContext, Task> get_OnCreateAsync();
    [CompilerGeneratedAttribute]
public void set_OnCreateAsync(Func`2<AuthenticationTokenCreateContext, Task> value);
    [CompilerGeneratedAttribute]
public Action`1<AuthenticationTokenReceiveContext> get_OnReceive();
    [CompilerGeneratedAttribute]
public void set_OnReceive(Action`1<AuthenticationTokenReceiveContext> value);
    [CompilerGeneratedAttribute]
public Func`2<AuthenticationTokenReceiveContext, Task> get_OnReceiveAsync();
    [CompilerGeneratedAttribute]
public void set_OnReceiveAsync(Func`2<AuthenticationTokenReceiveContext, Task> value);
    public virtual void Create(AuthenticationTokenCreateContext context);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Microsoft.Owin.Security.Infrastructure.AuthenticationTokenProvider/<CreateAsync>d__0")]
public virtual Task CreateAsync(AuthenticationTokenCreateContext context);
    public virtual void Receive(AuthenticationTokenReceiveContext context);
    [AsyncStateMachineAttribute("Microsoft.Owin.Security.Infrastructure.AuthenticationTokenProvider/<ReceiveAsync>d__3")]
[DebuggerStepThroughAttribute]
public virtual Task ReceiveAsync(AuthenticationTokenReceiveContext context);
}
internal class Microsoft.Owin.Security.Infrastructure.AuthenticationTokenReceiveContext : BaseContext {
    private ISecureDataFormat`1<AuthenticationTicket> _secureDataFormat;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationTicket <Ticket>k__BackingField;
    public string Token { get; protected set; }
    public AuthenticationTicket Ticket { get; protected set; }
    public AuthenticationTokenReceiveContext(IOwinContext context, ISecureDataFormat`1<AuthenticationTicket> secureDataFormat, string token);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
protected void set_Token(string value);
    [CompilerGeneratedAttribute]
public AuthenticationTicket get_Ticket();
    [CompilerGeneratedAttribute]
protected void set_Ticket(AuthenticationTicket value);
    public void DeserializeTicket(string protectedData);
    public void SetTicket(AuthenticationTicket ticket);
}
internal static class Microsoft.Owin.Security.Infrastructure.Constants : object {
    internal static string CorrelationPrefix;
    public static string SecurityAuthenticate;
    private static Constants();
}
internal interface Microsoft.Owin.Security.Infrastructure.IAuthenticationTokenProvider {
    public abstract virtual void Create(AuthenticationTokenCreateContext context);
    public abstract virtual Task CreateAsync(AuthenticationTokenCreateContext context);
    public abstract virtual void Receive(AuthenticationTokenReceiveContext context);
    public abstract virtual Task ReceiveAsync(AuthenticationTokenReceiveContext context);
}
[ExtensionAttribute]
internal static class Microsoft.Owin.Security.Infrastructure.OwinRequestExtensions : object {
    [ExtensionAttribute]
public static object RegisterAuthenticationHandler(IOwinRequest request, AuthenticationHandler handler);
    [ExtensionAttribute]
public static void UnregisterAuthenticationHandler(IOwinRequest request, object registration);
}
internal class Microsoft.Owin.Security.Infrastructure.SecurityHelper : ValueType {
    private IOwinContext _context;
    public SecurityHelper(IOwinContext context);
    public void AddUserIdentity(IIdentity identity);
    public AuthenticationResponseChallenge LookupChallenge(string authenticationType, AuthenticationMode authenticationMode);
    public AuthenticationResponseGrant LookupSignIn(string authenticationType);
    public AuthenticationResponseRevoke LookupSignOut(string authenticationType, AuthenticationMode authenticationMode);
    public bool Equals(SecurityHelper other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SecurityHelper left, SecurityHelper right);
    public static bool op_Inequality(SecurityHelper left, SecurityHelper right);
}
internal interface Microsoft.Owin.Security.ISecureDataFormat`1 {
    public abstract virtual string Protect(TData data);
    public abstract virtual TData Unprotect(string protectedText);
}
internal class Microsoft.Owin.Security.Notifications.AuthenticationFailedNotification`2 : BaseNotification`1<TOptions> {
    [CompilerGeneratedAttribute]
private TMessage <ProtocolMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public TMessage ProtocolMessage { get; public set; }
    public Exception Exception { get; public set; }
    public AuthenticationFailedNotification`2(IOwinContext context, TOptions options);
    [CompilerGeneratedAttribute]
public TMessage get_ProtocolMessage();
    [CompilerGeneratedAttribute]
public void set_ProtocolMessage(TMessage value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
internal class Microsoft.Owin.Security.Notifications.BaseNotification`1 : BaseContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private NotificationResultState <State>k__BackingField;
    public NotificationResultState State { get; public set; }
    public bool HandledResponse { get; }
    public bool Skipped { get; }
    protected BaseNotification`1(IOwinContext context, TOptions options);
    [CompilerGeneratedAttribute]
public NotificationResultState get_State();
    [CompilerGeneratedAttribute]
public void set_State(NotificationResultState value);
    public bool get_HandledResponse();
    public bool get_Skipped();
    public void HandleResponse();
    public void SkipToNextMiddleware();
}
internal class Microsoft.Owin.Security.Notifications.MessageReceivedNotification`2 : BaseNotification`1<TOptions> {
    [CompilerGeneratedAttribute]
private TMessage <ProtocolMessage>k__BackingField;
    public TMessage ProtocolMessage { get; public set; }
    public MessageReceivedNotification`2(IOwinContext context, TOptions options);
    [CompilerGeneratedAttribute]
public TMessage get_ProtocolMessage();
    [CompilerGeneratedAttribute]
public void set_ProtocolMessage(TMessage value);
}
internal enum Microsoft.Owin.Security.Notifications.NotificationResultState : Enum {
    public int value__;
    public static NotificationResultState Continue;
    public static NotificationResultState Skipped;
    public static NotificationResultState HandledResponse;
}
internal class Microsoft.Owin.Security.Notifications.RedirectToIdentityProviderNotification`2 : BaseContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private TMessage <ProtocolMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationResultState <State>k__BackingField;
    public TMessage ProtocolMessage { get; public set; }
    public NotificationResultState State { get; public set; }
    public bool HandledResponse { get; }
    public RedirectToIdentityProviderNotification`2(IOwinContext context, TOptions options);
    [CompilerGeneratedAttribute]
public TMessage get_ProtocolMessage();
    [CompilerGeneratedAttribute]
public void set_ProtocolMessage(TMessage value);
    [CompilerGeneratedAttribute]
public NotificationResultState get_State();
    [CompilerGeneratedAttribute]
public void set_State(NotificationResultState value);
    public bool get_HandledResponse();
    public void HandleResponse();
}
internal class Microsoft.Owin.Security.Notifications.SecurityTokenReceivedNotification`2 : BaseNotification`1<TOptions> {
    [CompilerGeneratedAttribute]
private TMessage <ProtocolMessage>k__BackingField;
    public TMessage ProtocolMessage { get; public set; }
    public SecurityTokenReceivedNotification`2(IOwinContext context, TOptions options);
    [CompilerGeneratedAttribute]
public TMessage get_ProtocolMessage();
    [CompilerGeneratedAttribute]
public void set_ProtocolMessage(TMessage value);
}
internal class Microsoft.Owin.Security.Notifications.SecurityTokenValidatedNotification`2 : BaseNotification`1<TOptions> {
    [CompilerGeneratedAttribute]
private AuthenticationTicket <AuthenticationTicket>k__BackingField;
    [CompilerGeneratedAttribute]
private TMessage <ProtocolMessage>k__BackingField;
    public AuthenticationTicket AuthenticationTicket { get; public set; }
    public TMessage ProtocolMessage { get; public set; }
    public SecurityTokenValidatedNotification`2(IOwinContext context, TOptions options);
    [CompilerGeneratedAttribute]
public AuthenticationTicket get_AuthenticationTicket();
    [CompilerGeneratedAttribute]
public void set_AuthenticationTicket(AuthenticationTicket value);
    [CompilerGeneratedAttribute]
public TMessage get_ProtocolMessage();
    [CompilerGeneratedAttribute]
public void set_ProtocolMessage(TMessage value);
}
internal abstract class Microsoft.Owin.Security.Provider.BaseContext : object {
    [CompilerGeneratedAttribute]
private IOwinContext <OwinContext>k__BackingField;
    public IOwinContext OwinContext { get; private set; }
    public IOwinRequest Request { get; }
    public IOwinResponse Response { get; }
    protected BaseContext(IOwinContext context);
    [CompilerGeneratedAttribute]
public IOwinContext get_OwinContext();
    [CompilerGeneratedAttribute]
private void set_OwinContext(IOwinContext value);
    public IOwinRequest get_Request();
    public IOwinResponse get_Response();
}
internal abstract class Microsoft.Owin.Security.Provider.BaseContext`1 : object {
    [CompilerGeneratedAttribute]
private IOwinContext <OwinContext>k__BackingField;
    [CompilerGeneratedAttribute]
private TOptions <Options>k__BackingField;
    public IOwinContext OwinContext { get; private set; }
    public TOptions Options { get; private set; }
    public IOwinRequest Request { get; }
    public IOwinResponse Response { get; }
    protected BaseContext`1(IOwinContext context, TOptions options);
    [CompilerGeneratedAttribute]
public IOwinContext get_OwinContext();
    [CompilerGeneratedAttribute]
private void set_OwinContext(IOwinContext value);
    [CompilerGeneratedAttribute]
public TOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(TOptions value);
    public IOwinRequest get_Request();
    public IOwinResponse get_Response();
}
internal abstract class Microsoft.Owin.Security.Provider.EndpointContext : BaseContext {
    [CompilerGeneratedAttribute]
private bool <IsRequestCompleted>k__BackingField;
    public bool IsRequestCompleted { get; private set; }
    protected EndpointContext(IOwinContext context);
    [CompilerGeneratedAttribute]
public bool get_IsRequestCompleted();
    [CompilerGeneratedAttribute]
private void set_IsRequestCompleted(bool value);
    public void RequestCompleted();
}
internal abstract class Microsoft.Owin.Security.Provider.EndpointContext`1 : BaseContext`1<TOptions> {
    [CompilerGeneratedAttribute]
private bool <IsRequestCompleted>k__BackingField;
    public bool IsRequestCompleted { get; private set; }
    protected EndpointContext`1(IOwinContext context, TOptions options);
    [CompilerGeneratedAttribute]
public bool get_IsRequestCompleted();
    [CompilerGeneratedAttribute]
private void set_IsRequestCompleted(bool value);
    public void RequestCompleted();
}
internal abstract class Microsoft.Owin.Security.Provider.ReturnEndpointContext : EndpointContext {
    [CompilerGeneratedAttribute]
private ClaimsIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignInAsAuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    public ClaimsIdentity Identity { get; public set; }
    public AuthenticationProperties Properties { get; public set; }
    public string SignInAsAuthenticationType { get; public set; }
    public string RedirectUri { get; public set; }
    protected ReturnEndpointContext(IOwinContext context, AuthenticationTicket ticket);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public AuthenticationProperties get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(AuthenticationProperties value);
    [CompilerGeneratedAttribute]
public string get_SignInAsAuthenticationType();
    [CompilerGeneratedAttribute]
public void set_SignInAsAuthenticationType(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Owin.Security.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_AuthenticationTokenDoesNotProvideSyncMethods { get; }
    internal static string Exception_DefaultDpapiRequiresAppNameKey { get; }
    internal static string Exception_MissingDefaultSignInAsAuthenticationType { get; }
    internal static string Exception_UnhookAuthenticationStateType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Exception_AuthenticationTokenDoesNotProvideSyncMethods();
    internal static string get_Exception_DefaultDpapiRequiresAppNameKey();
    internal static string get_Exception_MissingDefaultSignInAsAuthenticationType();
    internal static string get_Exception_UnhookAuthenticationStateType();
}
internal enum Microsoft.Owin.Security.SubjectPublicKeyInfoAlgorithm : Enum {
    public int value__;
    public static SubjectPublicKeyInfoAlgorithm Sha1;
    public static SubjectPublicKeyInfoAlgorithm Sha256;
}
[ExtensionAttribute]
internal static class Microsoft.Owin.SendFileResponseExtensions : object {
    [ExtensionAttribute]
public static bool SupportsSendFile(IOwinResponse response);
    [ExtensionAttribute]
public static Task SendFileAsync(IOwinResponse response, string fileName);
    [ExtensionAttribute]
public static Task SendFileAsync(IOwinResponse response, string fileName, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
}
internal static class Microsoft.Owin.StaticFiles.Constants : object {
    internal static string ServerCapabilitiesKey;
    internal static string SendFileVersionKey;
    internal static string SendFileVersion;
    internal static string SendFileAsyncKey;
    internal static string Location;
    internal static string IfMatch;
    internal static string IfNoneMatch;
    internal static string IfModifiedSince;
    internal static string IfUnmodifiedSince;
    internal static string IfRange;
    internal static string Range;
    internal static string ContentRange;
    internal static string LastModified;
    internal static string HttpDateFormat;
    internal static string TextHtmlUtf8;
    internal static int Status200Ok;
    internal static int Status206PartialContent;
    internal static int Status304NotModified;
    internal static int Status412PreconditionFailed;
    internal static int Status416RangeNotSatisfiable;
    internal static Task CompletedTask;
    private static Constants();
    private static Task CreateCompletedTask();
}
internal class Microsoft.Owin.StaticFiles.ContentTypes.FileExtensionContentTypeProvider : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Mappings>k__BackingField;
    public IDictionary`2<string, string> Mappings { get; private set; }
    public FileExtensionContentTypeProvider(IDictionary`2<string, string> mapping);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Mappings();
    [CompilerGeneratedAttribute]
private void set_Mappings(IDictionary`2<string, string> value);
    public sealed virtual bool TryGetContentType(string subpath, String& contentType);
}
internal interface Microsoft.Owin.StaticFiles.ContentTypes.IContentTypeProvider {
    public abstract virtual bool TryGetContentType(string subpath, String& contentType);
}
internal class Microsoft.Owin.StaticFiles.DefaultFilesMiddleware : object {
    private DefaultFilesOptions _options;
    private PathString _matchUrl;
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public DefaultFilesMiddleware(Func`2<IDictionary`2<string, object>, Task> next, DefaultFilesOptions options);
    public Task Invoke(IDictionary`2<string, object> environment);
}
internal class Microsoft.Owin.StaticFiles.DefaultFilesOptions : SharedOptionsBase`1<DefaultFilesOptions> {
    [CompilerGeneratedAttribute]
private IList`1<string> <DefaultFileNames>k__BackingField;
    public IList`1<string> DefaultFileNames { get; public set; }
    public DefaultFilesOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DefaultFileNames();
    [CompilerGeneratedAttribute]
public void set_DefaultFileNames(IList`1<string> value);
}
internal class Microsoft.Owin.StaticFiles.DirectoryBrowserMiddleware : object {
    private DirectoryBrowserOptions _options;
    private PathString _matchUrl;
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public DirectoryBrowserMiddleware(Func`2<IDictionary`2<string, object>, Task> next, DirectoryBrowserOptions options);
    public Task Invoke(IDictionary`2<string, object> environment);
    private bool TryGetDirectoryInfo(PathString subpath, IEnumerable`1& contents);
}
internal class Microsoft.Owin.StaticFiles.DirectoryBrowserOptions : SharedOptionsBase`1<DirectoryBrowserOptions> {
    [CompilerGeneratedAttribute]
private IDirectoryFormatter <Formatter>k__BackingField;
    public IDirectoryFormatter Formatter { get; public set; }
    public DirectoryBrowserOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IDirectoryFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IDirectoryFormatter value);
}
internal class Microsoft.Owin.StaticFiles.DirectoryFormatters.HtmlDirectoryFormatter : object {
    [CompilerGeneratedAttribute]
private static Func`2<IFileInfo, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IFileInfo, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public virtual Task GenerateContentAsync(IOwinContext context, IEnumerable`1<IFileInfo> contents);
    private static string HtmlEncode(string body);
    [CompilerGeneratedAttribute]
private static bool <GenerateContentAsync>b__0(IFileInfo info);
    [CompilerGeneratedAttribute]
private static bool <GenerateContentAsync>b__1(IFileInfo info);
}
internal interface Microsoft.Owin.StaticFiles.DirectoryFormatters.IDirectoryFormatter {
    public abstract virtual Task GenerateContentAsync(IOwinContext context, IEnumerable`1<IFileInfo> contents);
}
internal class Microsoft.Owin.StaticFiles.FileServerOptions : SharedOptionsBase`1<FileServerOptions> {
    [CompilerGeneratedAttribute]
private StaticFileOptions <StaticFileOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryBrowserOptions <DirectoryBrowserOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultFilesOptions <DefaultFilesOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDirectoryBrowsing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDefaultFiles>k__BackingField;
    public StaticFileOptions StaticFileOptions { get; private set; }
    public DirectoryBrowserOptions DirectoryBrowserOptions { get; private set; }
    public DefaultFilesOptions DefaultFilesOptions { get; private set; }
    public bool EnableDirectoryBrowsing { get; public set; }
    public bool EnableDefaultFiles { get; public set; }
    [CompilerGeneratedAttribute]
public StaticFileOptions get_StaticFileOptions();
    [CompilerGeneratedAttribute]
private void set_StaticFileOptions(StaticFileOptions value);
    [CompilerGeneratedAttribute]
public DirectoryBrowserOptions get_DirectoryBrowserOptions();
    [CompilerGeneratedAttribute]
private void set_DirectoryBrowserOptions(DirectoryBrowserOptions value);
    [CompilerGeneratedAttribute]
public DefaultFilesOptions get_DefaultFilesOptions();
    [CompilerGeneratedAttribute]
private void set_DefaultFilesOptions(DefaultFilesOptions value);
    [CompilerGeneratedAttribute]
public bool get_EnableDirectoryBrowsing();
    [CompilerGeneratedAttribute]
public void set_EnableDirectoryBrowsing(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDefaultFiles();
    [CompilerGeneratedAttribute]
public void set_EnableDefaultFiles(bool value);
}
internal static class Microsoft.Owin.StaticFiles.Helpers : object {
    internal static bool IsGetOrHeadMethod(string method);
    internal static bool IsGetMethod(string method);
    internal static bool IsHeadMethod(string method);
    internal static bool PathEndsInSlash(PathString path);
    internal static bool TryMatchPath(IOwinContext context, PathString matchUrl, bool forDirectory, PathString& subpath);
    internal static bool TryParseHttpDate(string dateString, DateTime& parsedDate);
}
internal static class Microsoft.Owin.StaticFiles.Infrastructure.RangeHelpers : object {
    internal static bool TryParseRanges(string rangeHeader, IList`1& parsedRanges);
    private static bool TryParseLong(string input, Nullable`1& result);
    internal static IList`1<Tuple`2<long, long>> NormalizeRanges(IList`1<Tuple`2<Nullable`1<long>, Nullable`1<long>>> ranges, long length);
}
internal class Microsoft.Owin.StaticFiles.Infrastructure.SharedOptions : object {
    private PathString _requestPath;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public PathString RequestPath { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    public PathString get_RequestPath();
    public void set_RequestPath(PathString value);
    [CompilerGeneratedAttribute]
public IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public void set_FileSystem(IFileSystem value);
}
internal abstract class Microsoft.Owin.StaticFiles.Infrastructure.SharedOptionsBase`1 : object {
    [CompilerGeneratedAttribute]
private SharedOptions <SharedOptions>k__BackingField;
    protected SharedOptions SharedOptions { get; private set; }
    public PathString RequestPath { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    protected SharedOptionsBase`1(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
protected SharedOptions get_SharedOptions();
    [CompilerGeneratedAttribute]
private void set_SharedOptions(SharedOptions value);
    public PathString get_RequestPath();
    public void set_RequestPath(PathString value);
    public IFileSystem get_FileSystem();
    public void set_FileSystem(IFileSystem value);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Microsoft.Owin.StaticFiles.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Args_NoContentTypeProvider { get; }
    internal static string Args_NoFormatter { get; }
    internal static string Exception_SendFileNotSupported { get; }
    internal static string HtmlDir_IndexOf { get; }
    internal static string HtmlDir_LastModified { get; }
    internal static string HtmlDir_Modified { get; }
    internal static string HtmlDir_Name { get; }
    internal static string HtmlDir_Size { get; }
    internal static string HtmlDir_TableSummary { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Args_NoContentTypeProvider();
    internal static string get_Args_NoFormatter();
    internal static string get_Exception_SendFileNotSupported();
    internal static string get_HtmlDir_IndexOf();
    internal static string get_HtmlDir_LastModified();
    internal static string get_HtmlDir_Modified();
    internal static string get_HtmlDir_Name();
    internal static string get_HtmlDir_Size();
    internal static string get_HtmlDir_TableSummary();
}
[ExtensionAttribute]
internal static class Microsoft.Owin.StaticFiles.SendFileExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseSendFileFallback(IAppBuilder builder);
    private static bool IsSendFileSupported(IDictionary`2<string, object> properties);
    private static void SetSendFileCapability(IDictionary`2<string, object> properties);
}
internal class Microsoft.Owin.StaticFiles.SendFileMiddleware : object {
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public SendFileMiddleware(Func`2<IDictionary`2<string, object>, Task> next);
    public Task Invoke(IDictionary`2<string, object> environment);
}
internal class Microsoft.Owin.StaticFiles.StaticFileContext : ValueType {
    private IOwinContext _context;
    private StaticFileOptions _options;
    private PathString _matchUrl;
    private IOwinRequest _request;
    private IOwinResponse _response;
    private string _method;
    private bool _isGet;
    private bool _isHead;
    private PathString _subPath;
    private string _contentType;
    private IFileInfo _fileInfo;
    private long _length;
    private DateTime _lastModified;
    private string _lastModifiedString;
    private string _etag;
    private string _etagQuoted;
    private PreconditionState _ifMatchState;
    private PreconditionState _ifNoneMatchState;
    private PreconditionState _ifModifiedSinceState;
    private PreconditionState _ifUnmodifiedSinceState;
    private IList`1<Tuple`2<long, long>> _ranges;
    public bool IsHeadMethod { get; }
    public bool IsRangeRequest { get; }
    public StaticFileContext(IOwinContext context, StaticFileOptions options, PathString matchUrl);
    public bool get_IsHeadMethod();
    public bool get_IsRangeRequest();
    public bool ValidateMethod();
    public bool ValidatePath();
    public bool LookupContentType();
    public bool LookupFileInfo();
    public void ComprehendRequestHeaders();
    private void ComputeIfMatch();
    private void ComputeIfModifiedSince();
    private void ComputeRange();
    public void ApplyResponseHeaders(int statusCode);
    public PreconditionState GetPreconditionState();
    private static PreconditionState GetMaxPreconditionState(PreconditionState[] states);
    public Task SendStatusAsync(int statusCode);
    public Task SendAsync();
    internal Task SendRangeAsync();
    private string ComputeContentRange(Tuple`2<long, long> range, Int64& start, Int64& length);
}
internal class Microsoft.Owin.StaticFiles.StaticFileMiddleware : object {
    private StaticFileOptions _options;
    private PathString _matchUrl;
    private Func`2<IDictionary`2<string, object>, Task> _next;
    public StaticFileMiddleware(Func`2<IDictionary`2<string, object>, Task> next, StaticFileOptions options);
    public Task Invoke(IDictionary`2<string, object> environment);
}
internal class Microsoft.Owin.StaticFiles.StaticFileOptions : SharedOptionsBase`1<StaticFileOptions> {
    [CompilerGeneratedAttribute]
private IContentTypeProvider <ContentTypeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServeUnknownFileTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<StaticFileResponseContext> <OnPrepareResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<StaticFileResponseContext> CS$<>9__CachedAnonymousMethodDelegate1;
    public IContentTypeProvider ContentTypeProvider { get; public set; }
    public string DefaultContentType { get; public set; }
    public bool ServeUnknownFileTypes { get; public set; }
    public Action`1<StaticFileResponseContext> OnPrepareResponse { get; public set; }
    public StaticFileOptions(SharedOptions sharedOptions);
    [CompilerGeneratedAttribute]
public IContentTypeProvider get_ContentTypeProvider();
    [CompilerGeneratedAttribute]
public void set_ContentTypeProvider(IContentTypeProvider value);
    [CompilerGeneratedAttribute]
public string get_DefaultContentType();
    [CompilerGeneratedAttribute]
public void set_DefaultContentType(string value);
    [CompilerGeneratedAttribute]
public bool get_ServeUnknownFileTypes();
    [CompilerGeneratedAttribute]
public void set_ServeUnknownFileTypes(bool value);
    [CompilerGeneratedAttribute]
public Action`1<StaticFileResponseContext> get_OnPrepareResponse();
    [CompilerGeneratedAttribute]
public void set_OnPrepareResponse(Action`1<StaticFileResponseContext> value);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(StaticFileResponseContext _);
}
internal class Microsoft.Owin.StaticFiles.StaticFileResponseContext : object {
    [CompilerGeneratedAttribute]
private IOwinContext <OwinContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileInfo <File>k__BackingField;
    public IOwinContext OwinContext { get; internal set; }
    public IFileInfo File { get; internal set; }
    [CompilerGeneratedAttribute]
public IOwinContext get_OwinContext();
    [CompilerGeneratedAttribute]
internal void set_OwinContext(IOwinContext value);
    [CompilerGeneratedAttribute]
public IFileInfo get_File();
    [CompilerGeneratedAttribute]
internal void set_File(IFileInfo value);
}
internal class Microsoft.Owin.StaticFiles.StreamCopyOperation : object {
    private static int DefaultBufferSize;
    private TaskCompletionSource`1<object> _tcs;
    private Stream _source;
    private Stream _destination;
    private Byte[] _buffer;
    private AsyncCallback _readCallback;
    private AsyncCallback _writeCallback;
    private Nullable`1<long> _bytesRemaining;
    private CancellationToken _cancel;
    internal StreamCopyOperation(Stream source, Stream destination, Nullable`1<long> bytesRemaining, CancellationToken cancel);
    internal StreamCopyOperation(Stream source, Stream destination, Nullable`1<long> bytesRemaining, int bufferSize, CancellationToken cancel);
    internal StreamCopyOperation(Stream source, Stream destination, Nullable`1<long> bytesRemaining, Byte[] buffer, CancellationToken cancel);
    internal Task Start();
    private void Complete();
    private bool CheckCancelled();
    private void Fail(Exception ex);
    private void ReadNextSegment();
    private void ReadCallback(IAsyncResult async);
    private void WriteToOutputStream(int count);
    private void WriteCallback(IAsyncResult async);
}
internal static class Microsoft.Security.Application.CodeCharts.CodeChartHelper : object {
    internal static IEnumerable`1<int> GetRange(int min, int max, Func`2<int, bool> exclusionFilter);
    internal static IEnumerable`1<int> GetRange(int min, int max);
}
internal static class Microsoft.Security.Application.CodeCharts.Lower : object {
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate27;
    public static bool IsFlagSet(LowerCodeCharts flags, LowerCodeCharts flagToCheck);
    public static IEnumerable BasicLatin();
    public static IEnumerable Latin1Supplement();
    public static IEnumerable LatinExtendedA();
    public static IEnumerable LatinExtendedB();
    public static IEnumerable IpaExtensions();
    public static IEnumerable SpacingModifierLetters();
    public static IEnumerable CombiningDiacriticalMarks();
    public static IEnumerable GreekAndCoptic();
    public static IEnumerable Cyrillic();
    public static IEnumerable CyrillicSupplement();
    public static IEnumerable Armenian();
    public static IEnumerable Hebrew();
    public static IEnumerable Arabic();
    public static IEnumerable Syriac();
    public static IEnumerable ArabicSupplement();
    public static IEnumerable Thaana();
    public static IEnumerable Nko();
    public static IEnumerable Samaritan();
    public static IEnumerable Devanagari();
    public static IEnumerable Bengali();
    public static IEnumerable Gurmukhi();
    public static IEnumerable Gujarati();
    public static IEnumerable Oriya();
    public static IEnumerable Tamil();
    public static IEnumerable Telugu();
    public static IEnumerable Kannada();
    public static IEnumerable Malayalam();
    public static IEnumerable Sinhala();
    public static IEnumerable Thai();
    public static IEnumerable Lao();
    public static IEnumerable Tibetan();
    [CompilerGeneratedAttribute]
private static bool <Latin1Supplement>b__0(int i);
    [CompilerGeneratedAttribute]
private static bool <GreekAndCoptic>b__2(int i);
    [CompilerGeneratedAttribute]
private static bool <Armenian>b__4(int i);
    [CompilerGeneratedAttribute]
private static bool <Hebrew>b__6(int i);
    [CompilerGeneratedAttribute]
private static bool <Arabic>b__8(int i);
    [CompilerGeneratedAttribute]
private static bool <Syriac>b__a(int i);
    [CompilerGeneratedAttribute]
private static bool <Samaritan>b__c(int i);
    [CompilerGeneratedAttribute]
private static bool <Devanagari>b__e(int i);
    [CompilerGeneratedAttribute]
private static bool <Bengali>b__10(int i);
    [CompilerGeneratedAttribute]
private static bool <Gurmukhi>b__12(int i);
    [CompilerGeneratedAttribute]
private static bool <Gujarati>b__14(int i);
    [CompilerGeneratedAttribute]
private static bool <Oriya>b__16(int i);
    [CompilerGeneratedAttribute]
private static bool <Tamil>b__18(int i);
    [CompilerGeneratedAttribute]
private static bool <Telugu>b__1a(int i);
    [CompilerGeneratedAttribute]
private static bool <Kannada>b__1c(int i);
    [CompilerGeneratedAttribute]
private static bool <Malayalam>b__1e(int i);
    [CompilerGeneratedAttribute]
private static bool <Sinhala>b__20(int i);
    [CompilerGeneratedAttribute]
private static bool <Thai>b__22(int i);
    [CompilerGeneratedAttribute]
private static bool <Lao>b__24(int i);
    [CompilerGeneratedAttribute]
private static bool <Tibetan>b__26(int i);
}
internal static class Microsoft.Security.Application.CodeCharts.LowerMiddle : object {
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    public static bool IsFlagSet(LowerMidCodeCharts flags, LowerMidCodeCharts flagToCheck);
    public static IEnumerable Myanmar();
    public static IEnumerable Georgian();
    public static IEnumerable HangulJamo();
    public static IEnumerable Ethiopic();
    public static IEnumerable EthiopicSupplement();
    public static IEnumerable Cherokee();
    public static IEnumerable UnifiedCanadianAboriginalSyllabics();
    public static IEnumerable Ogham();
    public static IEnumerable Runic();
    public static IEnumerable Tagalog();
    public static IEnumerable Hanunoo();
    public static IEnumerable Buhid();
    public static IEnumerable Tagbanwa();
    public static IEnumerable Khmer();
    public static IEnumerable Mongolian();
    public static IEnumerable UnifiedCanadianAboriginalSyllabicsExtended();
    public static IEnumerable Limbu();
    public static IEnumerable TaiLe();
    public static IEnumerable NewTaiLue();
    public static IEnumerable KhmerSymbols();
    public static IEnumerable Buginese();
    public static IEnumerable TaiTham();
    public static IEnumerable Balinese();
    public static IEnumerable Sudanese();
    public static IEnumerable Lepcha();
    public static IEnumerable OlChiki();
    public static IEnumerable VedicExtensions();
    public static IEnumerable PhoneticExtensions();
    public static IEnumerable PhoneticExtensionsSupplement();
    public static IEnumerable CombiningDiacriticalMarksSupplement();
    public static IEnumerable LatinExtendedAdditional();
    [CompilerGeneratedAttribute]
private static bool <Georgian>b__0(int i);
    [CompilerGeneratedAttribute]
private static bool <Ethiopic>b__2(int i);
    [CompilerGeneratedAttribute]
private static bool <Tagalog>b__4(int i);
    [CompilerGeneratedAttribute]
private static bool <Tagbanwa>b__6(int i);
    [CompilerGeneratedAttribute]
private static bool <Khmer>b__8(int i);
    [CompilerGeneratedAttribute]
private static bool <Mongolian>b__a(int i);
    [CompilerGeneratedAttribute]
private static bool <Limbu>b__c(int i);
    [CompilerGeneratedAttribute]
private static bool <TaiLe>b__e(int i);
    [CompilerGeneratedAttribute]
private static bool <NewTaiLue>b__10(int i);
    [CompilerGeneratedAttribute]
private static bool <Buginese>b__12(int i);
    [CompilerGeneratedAttribute]
private static bool <TaiTham>b__14(int i);
    [CompilerGeneratedAttribute]
private static bool <Balinese>b__16(int i);
    [CompilerGeneratedAttribute]
private static bool <Sudanese>b__18(int i);
    [CompilerGeneratedAttribute]
private static bool <Lepcha>b__1a(int i);
    [CompilerGeneratedAttribute]
private static bool <CombiningDiacriticalMarksSupplement>b__1c(int i);
}
internal static class Microsoft.Security.Application.CodeCharts.Middle : object {
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    public static bool IsFlagSet(MidCodeCharts flags, MidCodeCharts flagToCheck);
    public static IEnumerable GreekExtended();
    public static IEnumerable GeneralPunctuation();
    public static IEnumerable SuperscriptsAndSubscripts();
    public static IEnumerable CurrencySymbols();
    public static IEnumerable CombiningDiacriticalMarksForSymbols();
    public static IEnumerable LetterlikeSymbols();
    public static IEnumerable NumberForms();
    public static IEnumerable Arrows();
    public static IEnumerable MathematicalOperators();
    public static IEnumerable MiscellaneousTechnical();
    public static IEnumerable ControlPictures();
    public static IEnumerable OpticalCharacterRecognition();
    public static IEnumerable EnclosedAlphanumerics();
    public static IEnumerable BoxDrawing();
    public static IEnumerable BlockElements();
    public static IEnumerable GeometricShapes();
    public static IEnumerable MiscellaneousSymbols();
    public static IEnumerable Dingbats();
    public static IEnumerable MiscellaneousMathematicalSymbolsA();
    public static IEnumerable SupplementalArrowsA();
    public static IEnumerable BraillePatterns();
    public static IEnumerable SupplementalArrowsB();
    public static IEnumerable MiscellaneousMathematicalSymbolsB();
    public static IEnumerable SupplementalMathematicalOperators();
    public static IEnumerable MiscellaneousSymbolsAndArrows();
    public static IEnumerable Glagolitic();
    public static IEnumerable LatinExtendedC();
    public static IEnumerable Coptic();
    public static IEnumerable GeorgianSupplement();
    public static IEnumerable Tifinagh();
    public static IEnumerable EthiopicExtended();
    [CompilerGeneratedAttribute]
private static bool <GreekExtended>b__0(int i);
    [CompilerGeneratedAttribute]
private static bool <GeneralPunctuation>b__2(int i);
    [CompilerGeneratedAttribute]
private static bool <SuperscriptsAndSubscripts>b__4(int i);
    [CompilerGeneratedAttribute]
private static bool <MiscellaneousSymbols>b__6(int i);
    [CompilerGeneratedAttribute]
private static bool <Dingbats>b__8(int i);
    [CompilerGeneratedAttribute]
private static bool <MiscellaneousMathematicalSymbolsA>b__a(int i);
    [CompilerGeneratedAttribute]
private static bool <MiscellaneousSymbolsAndArrows>b__c(int i);
    [CompilerGeneratedAttribute]
private static bool <Glagolitic>b__e(int i);
    [CompilerGeneratedAttribute]
private static bool <Coptic>b__10(int i);
    [CompilerGeneratedAttribute]
private static bool <Tifinagh>b__12(int i);
    [CompilerGeneratedAttribute]
private static bool <EthiopicExtended>b__14(int i);
}
internal static class Microsoft.Security.Application.CodeCharts.Upper : object {
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    public static bool IsFlagSet(UpperCodeCharts flags, UpperCodeCharts flagToCheck);
    public static IEnumerable DevanagariExtended();
    public static IEnumerable KayahLi();
    public static IEnumerable Rejang();
    public static IEnumerable HangulJamoExtendedA();
    public static IEnumerable Javanese();
    public static IEnumerable Cham();
    public static IEnumerable MyanmarExtendedA();
    public static IEnumerable TaiViet();
    public static IEnumerable MeeteiMayek();
    public static IEnumerable HangulSyllables();
    public static IEnumerable HangulJamoExtendedB();
    public static IEnumerable CjkCompatibilityIdeographs();
    public static IEnumerable AlphabeticPresentationForms();
    public static IEnumerable ArabicPresentationFormsA();
    public static IEnumerable VariationSelectors();
    public static IEnumerable VerticalForms();
    public static IEnumerable CombiningHalfMarks();
    public static IEnumerable CjkCompatibilityForms();
    public static IEnumerable SmallFormVariants();
    public static IEnumerable ArabicPresentationFormsB();
    public static IEnumerable HalfWidthAndFullWidthForms();
    public static IEnumerable Specials();
    [CompilerGeneratedAttribute]
private static bool <Javanese>b__0(int i);
    [CompilerGeneratedAttribute]
private static bool <Cham>b__2(int i);
    [CompilerGeneratedAttribute]
private static bool <MeeteiMayek>b__4(int i);
    [CompilerGeneratedAttribute]
private static bool <HangulJamoExtendedB>b__6(int i);
    [CompilerGeneratedAttribute]
private static bool <CjkCompatibilityIdeographs>b__8(int i);
    [CompilerGeneratedAttribute]
private static bool <AlphabeticPresentationForms>b__a(int i);
    [CompilerGeneratedAttribute]
private static bool <ArabicPresentationFormsA>b__c(int i);
    [CompilerGeneratedAttribute]
private static bool <SmallFormVariants>b__e(int i);
    [CompilerGeneratedAttribute]
private static bool <ArabicPresentationFormsB>b__10(int i);
    [CompilerGeneratedAttribute]
private static bool <HalfWidthAndFullWidthForms>b__12(int i);
}
internal static class Microsoft.Security.Application.CodeCharts.UpperMiddle : object {
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public static bool IsFlagSet(UpperMidCodeCharts flags, UpperMidCodeCharts flagToCheck);
    public static IEnumerable CyrillicExtendedA();
    public static IEnumerable SupplementalPunctuation();
    public static IEnumerable CjkRadicalsSupplement();
    public static IEnumerable KangxiRadicals();
    public static IEnumerable IdeographicDescriptionCharacters();
    public static IEnumerable CjkSymbolsAndPunctuation();
    public static IEnumerable Hiragana();
    public static IEnumerable Katakana();
    public static IEnumerable Bopomofo();
    public static IEnumerable HangulCompatibilityJamo();
    public static IEnumerable Kanbun();
    public static IEnumerable BopomofoExtended();
    public static IEnumerable CjkStrokes();
    public static IEnumerable KatakanaPhoneticExtensions();
    public static IEnumerable EnclosedCjkLettersAndMonths();
    public static IEnumerable CjkCompatibility();
    public static IEnumerable CjkUnifiedIdeographsExtensionA();
    public static IEnumerable YijingHexagramSymbols();
    public static IEnumerable CjkUnifiedIdeographs();
    public static IEnumerable YiSyllables();
    public static IEnumerable YiRadicals();
    public static IEnumerable Lisu();
    public static IEnumerable Vai();
    public static IEnumerable CyrillicExtendedB();
    public static IEnumerable Bamum();
    public static IEnumerable ModifierToneLetters();
    public static IEnumerable LatinExtendedD();
    public static IEnumerable SylotiNagri();
    public static IEnumerable CommonIndicNumberForms();
    public static IEnumerable Phagspa();
    public static IEnumerable Saurashtra();
    [CompilerGeneratedAttribute]
private static bool <CjkRadicalsSupplement>b__0(int i);
    [CompilerGeneratedAttribute]
private static bool <Hiragana>b__2(int i);
    [CompilerGeneratedAttribute]
private static bool <EnclosedCjkLettersAndMonths>b__4(int i);
    [CompilerGeneratedAttribute]
private static bool <CyrillicExtendedB>b__6(int i);
    [CompilerGeneratedAttribute]
private static bool <Saurashtra>b__8(int i);
}
internal static class Microsoft.Security.Application.Encoder : object {
    public static string HtmlEncode(string input);
    public static string HtmlEncode(string input, bool useNamedEntities);
}
internal static class Microsoft.Security.Application.EncoderUtil : object {
    internal static StringBuilder GetOutputStringBuilder(int inputLength, int worstCaseOutputCharsPerInputChar);
}
[FlagsAttribute]
internal enum Microsoft.Security.Application.LowerCodeCharts : Enum {
    public long value__;
    public static LowerCodeCharts None;
    public static LowerCodeCharts BasicLatin;
    public static LowerCodeCharts C1ControlsAndLatin1Supplement;
    public static LowerCodeCharts LatinExtendedA;
    public static LowerCodeCharts LatinExtendedB;
    public static LowerCodeCharts IpaExtensions;
    public static LowerCodeCharts SpacingModifierLetters;
    public static LowerCodeCharts CombiningDiacriticalMarks;
    public static LowerCodeCharts GreekAndCoptic;
    public static LowerCodeCharts Cyrillic;
    public static LowerCodeCharts CyrillicSupplement;
    public static LowerCodeCharts Armenian;
    public static LowerCodeCharts Hebrew;
    public static LowerCodeCharts Arabic;
    public static LowerCodeCharts Syriac;
    public static LowerCodeCharts ArabicSupplement;
    public static LowerCodeCharts Thaana;
    public static LowerCodeCharts Nko;
    public static LowerCodeCharts Samaritan;
    public static LowerCodeCharts Devanagari;
    public static LowerCodeCharts Bengali;
    public static LowerCodeCharts Gurmukhi;
    public static LowerCodeCharts Gujarati;
    public static LowerCodeCharts Oriya;
    public static LowerCodeCharts Tamil;
    public static LowerCodeCharts Telugu;
    public static LowerCodeCharts Kannada;
    public static LowerCodeCharts Malayalam;
    public static LowerCodeCharts Sinhala;
    public static LowerCodeCharts Thai;
    public static LowerCodeCharts Lao;
    public static LowerCodeCharts Tibetan;
    public static LowerCodeCharts Default;
}
[FlagsAttribute]
internal enum Microsoft.Security.Application.LowerMidCodeCharts : Enum {
    public long value__;
    public static LowerMidCodeCharts None;
    public static LowerMidCodeCharts Myanmar;
    public static LowerMidCodeCharts Georgian;
    public static LowerMidCodeCharts HangulJamo;
    public static LowerMidCodeCharts Ethiopic;
    public static LowerMidCodeCharts EthiopicSupplement;
    public static LowerMidCodeCharts Cherokee;
    public static LowerMidCodeCharts UnifiedCanadianAboriginalSyllabics;
    public static LowerMidCodeCharts Ogham;
    public static LowerMidCodeCharts Runic;
    public static LowerMidCodeCharts Tagalog;
    public static LowerMidCodeCharts Hanunoo;
    public static LowerMidCodeCharts Buhid;
    public static LowerMidCodeCharts Tagbanwa;
    public static LowerMidCodeCharts Khmer;
    public static LowerMidCodeCharts Mongolian;
    public static LowerMidCodeCharts UnifiedCanadianAboriginalSyllabicsExtended;
    public static LowerMidCodeCharts Limbu;
    public static LowerMidCodeCharts TaiLe;
    public static LowerMidCodeCharts NewTaiLue;
    public static LowerMidCodeCharts KhmerSymbols;
    public static LowerMidCodeCharts Buginese;
    public static LowerMidCodeCharts TaiTham;
    public static LowerMidCodeCharts Balinese;
    public static LowerMidCodeCharts Sudanese;
    public static LowerMidCodeCharts Lepcha;
    public static LowerMidCodeCharts OlChiki;
    public static LowerMidCodeCharts VedicExtensions;
    public static LowerMidCodeCharts PhoneticExtensions;
    public static LowerMidCodeCharts PhoneticExtensionsSupplement;
    public static LowerMidCodeCharts CombiningDiacriticalMarksSupplement;
    public static LowerMidCodeCharts LatinExtendedAdditional;
}
[FlagsAttribute]
internal enum Microsoft.Security.Application.MidCodeCharts : Enum {
    public long value__;
    public static MidCodeCharts None;
    public static MidCodeCharts GreekExtended;
    public static MidCodeCharts GeneralPunctuation;
    public static MidCodeCharts SuperscriptsAndSubscripts;
    public static MidCodeCharts CurrencySymbols;
    public static MidCodeCharts CombiningDiacriticalMarksForSymbols;
    public static MidCodeCharts LetterlikeSymbols;
    public static MidCodeCharts NumberForms;
    public static MidCodeCharts Arrows;
    public static MidCodeCharts MathematicalOperators;
    public static MidCodeCharts MiscellaneousTechnical;
    public static MidCodeCharts ControlPictures;
    public static MidCodeCharts OpticalCharacterRecognition;
    public static MidCodeCharts EnclosedAlphanumerics;
    public static MidCodeCharts BoxDrawing;
    public static MidCodeCharts BlockElements;
    public static MidCodeCharts GeometricShapes;
    public static MidCodeCharts MiscellaneousSymbols;
    public static MidCodeCharts Dingbats;
    public static MidCodeCharts MiscellaneousMathematicalSymbolsA;
    public static MidCodeCharts SupplementalArrowsA;
    public static MidCodeCharts BraillePatterns;
    public static MidCodeCharts SupplementalArrowsB;
    public static MidCodeCharts MiscellaneousMathematicalSymbolsB;
    public static MidCodeCharts SupplementalMathematicalOperators;
    public static MidCodeCharts MiscellaneousSymbolsAndArrows;
    public static MidCodeCharts Glagolitic;
    public static MidCodeCharts LatinExtendedC;
    public static MidCodeCharts Coptic;
    public static MidCodeCharts GeorgianSupplement;
    public static MidCodeCharts Tifinagh;
    public static MidCodeCharts EthiopicExtended;
}
internal static class Microsoft.Security.Application.SafeList : object {
    internal static Char[][] Generate(int length, GenerateSafeValue generateSafeValue);
    internal static void PunchUnicodeThrough(Char[][]& safeList, LowerCodeCharts lowerCodeCharts, LowerMidCodeCharts lowerMidCodeCharts, MidCodeCharts midCodeCharts, UpperMidCodeCharts upperMidCodeCharts, UpperCodeCharts upperCodeCharts);
    internal static void PunchSafeList(Char[][]& safeList, IEnumerable whiteListedCharacters);
    internal static Char[] HashThenValueGenerator(int value);
    internal static Char[] HashThenHexValueGenerator(int value);
    internal static Char[] PercentThenHexValueGenerator(int value);
    internal static Char[] SlashThenHexValueGenerator(int value);
    internal static Char[] SlashThenSixDigitHexValueGenerator(int value);
    private static Char[] StringToCharArrayWithHashPrefix(string value);
    private static Char[] StringToCharArrayWithPercentPrefix(string value);
    private static Char[] StringToCharArrayWithSlashPrefix(string value);
    private static Char[] StringToCharArrayWithPrefix(string value, char prefix);
    private static void PunchCodeCharts(Char[][]& safeList, LowerCodeCharts codeCharts);
    private static void PunchCodeCharts(Char[][]& safeList, LowerMidCodeCharts codeCharts);
    private static void PunchCodeCharts(Char[][]& safeList, MidCodeCharts codeCharts);
    private static void PunchCodeCharts(Char[][]& safeList, UpperMidCodeCharts codeCharts);
    private static void PunchCodeCharts(Char[][]& safeList, UpperCodeCharts codeCharts);
    private static void PunchHolesIfNeeded(Char[][]& safeList, bool needed, IEnumerable whiteListedCharacters);
}
internal static class Microsoft.Security.Application.UnicodeCharacterEncoder : object {
    private static Char[] UnicodeSpace;
    private static Char[] UnicodeApostrophe;
    private static Char[] XmlApostrophe;
    private static LowerCodeCharts currentLowerCodeChartSettings;
    private static LowerMidCodeCharts currentLowerMidCodeChartSettings;
    private static MidCodeCharts currentMidCodeChartSettings;
    private static UpperMidCodeCharts currentUpperMidCodeChartSettings;
    private static UpperCodeCharts currentUpperCodeChartSettings;
    private static Char[][] characterValues;
    private static Lazy`1<Char[][]> namedEntitiesLazy;
    private static ReaderWriterLockSlim SyncLock;
    private static UnicodeCharacterEncoder();
    private static void AcquireReadLock();
    private static void ReleaseReadLock();
    private static void AcquireWriteLock();
    private static void ReleaseWriteLock();
    public static void MarkAsSafe(LowerCodeCharts lowerCodeCharts, LowerMidCodeCharts lowerMidCodeCharts, MidCodeCharts midCodeCharts, UpperMidCodeCharts upperMidCodeCharts, UpperCodeCharts upperCodeCharts);
    internal static string XmlEncode(string input);
    internal static string XmlAttributeEncode(string input);
    internal static string HtmlAttributeEncode(string input);
    internal static string HtmlEncode(string input, bool useNamedEntities);
    private static void ApplyHtmlSpecificValues();
    private static bool HtmlAttributeTweak(char input, Char[]& output);
    private static bool XmlTweak(char input, Char[]& output);
    private static bool XmlAttributeTweak(char input, Char[]& output);
    private static string HtmlEncode(string input, bool useNamedEntities, MethodSpecificEncoder encoderTweak);
    private static void InitialiseSafeList();
    private static Char[][] InitialiseNamedEntityList();
}
[FlagsAttribute]
internal enum Microsoft.Security.Application.UpperCodeCharts : Enum {
    public int value__;
    public static UpperCodeCharts None;
    public static UpperCodeCharts DevanagariExtended;
    public static UpperCodeCharts KayahLi;
    public static UpperCodeCharts Rejang;
    public static UpperCodeCharts HangulJamoExtendedA;
    public static UpperCodeCharts Javanese;
    public static UpperCodeCharts Cham;
    public static UpperCodeCharts MyanmarExtendedA;
    public static UpperCodeCharts TaiViet;
    public static UpperCodeCharts MeeteiMayek;
    public static UpperCodeCharts HangulSyllables;
    public static UpperCodeCharts HangulJamoExtendedB;
    public static UpperCodeCharts CjkCompatibilityIdeographs;
    public static UpperCodeCharts AlphabeticPresentationForms;
    public static UpperCodeCharts ArabicPresentationFormsA;
    public static UpperCodeCharts VariationSelectors;
    public static UpperCodeCharts VerticalForms;
    public static UpperCodeCharts CombiningHalfMarks;
    public static UpperCodeCharts CjkCompatibilityForms;
    public static UpperCodeCharts SmallFormVariants;
    public static UpperCodeCharts ArabicPresentationFormsB;
    public static UpperCodeCharts HalfWidthAndFullWidthForms;
    public static UpperCodeCharts Specials;
}
[FlagsAttribute]
internal enum Microsoft.Security.Application.UpperMidCodeCharts : Enum {
    public long value__;
    public static UpperMidCodeCharts None;
    public static UpperMidCodeCharts CyrillicExtendedA;
    public static UpperMidCodeCharts SupplementalPunctuation;
    public static UpperMidCodeCharts CjkRadicalsSupplement;
    public static UpperMidCodeCharts KangxiRadicals;
    public static UpperMidCodeCharts IdeographicDescriptionCharacters;
    public static UpperMidCodeCharts CjkSymbolsAndPunctuation;
    public static UpperMidCodeCharts Hiragana;
    public static UpperMidCodeCharts Katakana;
    public static UpperMidCodeCharts Bopomofo;
    public static UpperMidCodeCharts HangulCompatibilityJamo;
    public static UpperMidCodeCharts Kanbun;
    public static UpperMidCodeCharts BopomofoExtended;
    public static UpperMidCodeCharts CjkStrokes;
    public static UpperMidCodeCharts KatakanaPhoneticExtensions;
    public static UpperMidCodeCharts EnclosedCjkLettersAndMonths;
    public static UpperMidCodeCharts CjkCompatibility;
    public static UpperMidCodeCharts CjkUnifiedIdeographsExtensionA;
    public static UpperMidCodeCharts YijingHexagramSymbols;
    public static UpperMidCodeCharts CjkUnifiedIdeographs;
    public static UpperMidCodeCharts YiSyllables;
    public static UpperMidCodeCharts YiRadicals;
    public static UpperMidCodeCharts Lisu;
    public static UpperMidCodeCharts Vai;
    public static UpperMidCodeCharts CyrillicExtendedB;
    public static UpperMidCodeCharts Bamum;
    public static UpperMidCodeCharts ModifierToneLetters;
    public static UpperMidCodeCharts LatinExtendedD;
    public static UpperMidCodeCharts SylotiNagri;
    public static UpperMidCodeCharts CommonIndicNumberForms;
    public static UpperMidCodeCharts Phagspa;
    public static UpperMidCodeCharts Saurashtra;
}
internal class Microsoft.Security.Application.Utf16StringReader : ValueType {
    private static char LeadingSurrogateStart;
    private static char TrailingSurrogateStart;
    private static int UnicodeReplacementCharacterCodePoint;
    private string input;
    private int currentOffset;
    public Utf16StringReader(string input);
    public int ReadNextScalarValue();
    private static int ConvertToUtf32(char leadingSurrogate, char trailingSurrogate);
    private static bool IsValidUnicodeScalarValue(int codePoint);
}
[LocalizableAttribute("False")]
internal static class Microsoft.Win32.NativeMethods : object {
    public static int X509_ASN_ENCODING;
    public static int X509_PUBLIC_KEY_INFO;
    internal static bool CryptEncodeObject(UInt32 dwCertEncodingType, IntPtr lpszStructType, CERT_PUBLIC_KEY_INFO& pvStructInfo, Byte[] pbEncoded, UInt32& pcbEncoded);
}
internal class Newtonsoft.Json.Bson.BsonArray : BsonToken {
    private List`1<BsonToken> _children;
    public BsonType Type { get; }
    public void Add(BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonToken> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Newtonsoft.Json.Bson.BsonBinary : BsonValue {
    [CompilerGeneratedAttribute]
private BsonBinaryType <BinaryType>k__BackingField;
    public BsonBinaryType BinaryType { get; public set; }
    public BsonBinary(Byte[] value, BsonBinaryType binaryType);
    [CompilerGeneratedAttribute]
public BsonBinaryType get_BinaryType();
    [CompilerGeneratedAttribute]
public void set_BinaryType(BsonBinaryType value);
}
internal enum Newtonsoft.Json.Bson.BsonBinaryType : Enum {
    public byte value__;
    public static BsonBinaryType Binary;
    public static BsonBinaryType Function;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Binary instead.")]
public static BsonBinaryType BinaryOld;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Uuid instead.")]
public static BsonBinaryType UuidOld;
    public static BsonBinaryType Uuid;
    public static BsonBinaryType Md5;
    public static BsonBinaryType UserDefined;
}
internal class Newtonsoft.Json.Bson.BsonBinaryWriter : object {
    private static Encoding Encoding;
    private BinaryWriter _writer;
    private Byte[] _largeByteBuffer;
    [CompilerGeneratedAttribute]
private DateTimeKind <DateTimeKindHandling>k__BackingField;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonBinaryWriter(BinaryWriter writer);
    private static BsonBinaryWriter();
    [CompilerGeneratedAttribute]
public DateTimeKind get_DateTimeKindHandling();
    [CompilerGeneratedAttribute]
public void set_DateTimeKindHandling(DateTimeKind value);
    public void Flush();
    public void Close();
    public void WriteToken(BsonToken t);
    private void WriteTokenInternal(BsonToken t);
    private void WriteString(string s, int byteCount, Nullable`1<int> calculatedlengthPrefix);
    public void WriteUtf8Bytes(string s, int byteCount);
    private int CalculateSize(int stringByteCount);
    private int CalculateSizeWithLength(int stringByteCount, bool includeSize);
    private int CalculateSize(BsonToken t);
}
internal class Newtonsoft.Json.Bson.BsonObject : BsonToken {
    private List`1<BsonProperty> _children;
    public BsonType Type { get; }
    public void Add(string name, BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Newtonsoft.Json.Bson.BsonObjectId : object {
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Byte[] Value { get; private set; }
    public BsonObjectId(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Byte[] value);
}
internal class Newtonsoft.Json.Bson.BsonProperty : object {
    [CompilerGeneratedAttribute]
private BsonString <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonToken <Value>k__BackingField;
    public BsonString Name { get; public set; }
    public BsonToken Value { get; public set; }
    [CompilerGeneratedAttribute]
public BsonString get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(BsonString value);
    [CompilerGeneratedAttribute]
public BsonToken get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(BsonToken value);
}
internal class Newtonsoft.Json.Bson.BsonReader : JsonReader {
    private static int MaxCharBytesSize;
    private static Byte[] SeqRange1;
    private static Byte[] SeqRange2;
    private static Byte[] SeqRange3;
    private static Byte[] SeqRange4;
    private BinaryReader _reader;
    private List`1<ContainerContext> _stack;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private BsonType _currentElementType;
    private BsonReaderState _bsonReaderState;
    private ContainerContext _currentContext;
    private bool _readRootValueAsArray;
    private bool _jsonNet35BinaryCompatibility;
    private DateTimeKind _dateTimeKindHandling;
    [ObsoleteAttribute("JsonNet35BinaryCompatibility will be removed in a future version of Json.NET.")]
public bool JsonNet35BinaryCompatibility { get; public set; }
    public bool ReadRootValueAsArray { get; public set; }
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonReader(Stream stream);
    public BsonReader(BinaryReader reader);
    public BsonReader(Stream stream, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    public BsonReader(BinaryReader reader, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    private static BsonReader();
    public bool get_JsonNet35BinaryCompatibility();
    public void set_JsonNet35BinaryCompatibility(bool value);
    public bool get_ReadRootValueAsArray();
    public void set_ReadRootValueAsArray(bool value);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    private string ReadElement();
    public virtual bool Read();
    public virtual void Close();
    private bool ReadCodeWScope();
    private bool ReadReference();
    private bool ReadNormal();
    private void PopContext();
    private void PushContext(ContainerContext newContext);
    private byte ReadByte();
    private void ReadType(BsonType type);
    private Byte[] ReadBinary(BsonBinaryType& binaryType);
    private string ReadString();
    private string ReadLengthString();
    private string GetString(int length);
    private int GetLastFullCharStop(int start);
    private int BytesInSequence(byte b);
    private void EnsureBuffers();
    private double ReadDouble();
    private int ReadInt32();
    private long ReadInt64();
    private BsonType ReadType();
    private void MovePosition(int count);
    private Byte[] ReadBytes(int count);
}
internal class Newtonsoft.Json.Bson.BsonRegex : BsonToken {
    [CompilerGeneratedAttribute]
private BsonString <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonString <Options>k__BackingField;
    public BsonString Pattern { get; public set; }
    public BsonString Options { get; public set; }
    public BsonType Type { get; }
    public BsonRegex(string pattern, string options);
    [CompilerGeneratedAttribute]
public BsonString get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(BsonString value);
    [CompilerGeneratedAttribute]
public BsonString get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(BsonString value);
    public virtual BsonType get_Type();
}
internal class Newtonsoft.Json.Bson.BsonString : BsonValue {
    [CompilerGeneratedAttribute]
private int <ByteCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLength>k__BackingField;
    public int ByteCount { get; public set; }
    public bool IncludeLength { get; public set; }
    public BsonString(object value, bool includeLength);
    [CompilerGeneratedAttribute]
public int get_ByteCount();
    [CompilerGeneratedAttribute]
public void set_ByteCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLength();
    [CompilerGeneratedAttribute]
public void set_IncludeLength(bool value);
}
internal abstract class Newtonsoft.Json.Bson.BsonToken : object {
    [CompilerGeneratedAttribute]
private BsonToken <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CalculatedSize>k__BackingField;
    public BsonType Type { get; }
    public BsonToken Parent { get; public set; }
    public int CalculatedSize { get; public set; }
    public abstract virtual BsonType get_Type();
    [CompilerGeneratedAttribute]
public BsonToken get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(BsonToken value);
    [CompilerGeneratedAttribute]
public int get_CalculatedSize();
    [CompilerGeneratedAttribute]
public void set_CalculatedSize(int value);
}
internal enum Newtonsoft.Json.Bson.BsonType : Enum {
    public sbyte value__;
    public static BsonType Number;
    public static BsonType String;
    public static BsonType Object;
    public static BsonType Array;
    public static BsonType Binary;
    public static BsonType Undefined;
    public static BsonType Oid;
    public static BsonType Boolean;
    public static BsonType Date;
    public static BsonType Null;
    public static BsonType Regex;
    public static BsonType Reference;
    public static BsonType Code;
    public static BsonType Symbol;
    public static BsonType CodeWScope;
    public static BsonType Integer;
    public static BsonType TimeStamp;
    public static BsonType Long;
    public static BsonType MinKey;
    public static BsonType MaxKey;
}
internal class Newtonsoft.Json.Bson.BsonValue : BsonToken {
    private object _value;
    private BsonType _type;
    public object Value { get; }
    public BsonType Type { get; }
    public BsonValue(object value, BsonType type);
    public object get_Value();
    public virtual BsonType get_Type();
}
internal class Newtonsoft.Json.Bson.BsonWriter : JsonWriter {
    private BsonBinaryWriter _writer;
    private BsonToken _root;
    private BsonToken _parent;
    private string _propertyName;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonWriter(Stream stream);
    public BsonWriter(BinaryWriter writer);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    public virtual void Flush();
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WriteComment(string text);
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteStartArray();
    public virtual void WriteStartObject();
    public virtual void WritePropertyName(string name);
    public virtual void Close();
    private void AddParent(BsonToken container);
    private void RemoveParent();
    private void AddValue(object value, BsonType type);
    internal void AddToken(BsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public void WriteObjectId(Byte[] value);
    public void WriteRegex(string pattern, string options);
}
internal enum Newtonsoft.Json.ConstructorHandling : Enum {
    public int value__;
    public static ConstructorHandling Default;
    public static ConstructorHandling AllowNonPublicDefaultConstructor;
}
internal class Newtonsoft.Json.Converters.BinaryConverter : JsonConverter {
    private static string BinaryTypeName;
    private static string BinaryToArrayName;
    private ReflectionObject _reflectionObject;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private Byte[] GetByteArray(object value);
    private void EnsureReflectionObject(Type t);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private Byte[] ReadByteArray(JsonReader reader);
    public virtual bool CanConvert(Type objectType);
}
internal class Newtonsoft.Json.Converters.BsonObjectIdConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal abstract class Newtonsoft.Json.Converters.CustomCreationConverter`1 : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T Create(Type objectType);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
internal class Newtonsoft.Json.Converters.DataSetConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type valueType);
}
internal class Newtonsoft.Json.Converters.DataTableConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static void CreateRow(JsonReader reader, DataTable dt, JsonSerializer serializer);
    private static Type GetColumnDataType(JsonReader reader);
    public virtual bool CanConvert(Type valueType);
}
internal abstract class Newtonsoft.Json.Converters.DateTimeConverterBase : JsonConverter {
    public virtual bool CanConvert(Type objectType);
}
internal class Newtonsoft.Json.Converters.DiscriminatedUnionConverter : JsonConverter {
    private static string CasePropertyName;
    private static string FieldsPropertyName;
    private static ThreadSafeStore`2<Type, Union> UnionCache;
    private static ThreadSafeStore`2<Type, Type> UnionTypeLookupCache;
    private static DiscriminatedUnionConverter();
    private static Type CreateUnionTypeLookup(Type t);
    private static Union CreateUnion(Type t);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Newtonsoft.Json.Converters.EntityKeyMemberConverter : JsonConverter {
    private static string EntityKeyMemberFullTypeName;
    private static string KeyPropertyName;
    private static string TypePropertyName;
    private static string ValuePropertyName;
    private static ReflectionObject _reflectionObject;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void ReadAndAssertProperty(JsonReader reader, string propertyName);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static void EnsureReflectionObject(Type objectType);
    public virtual bool CanConvert(Type objectType);
}
internal class Newtonsoft.Json.Converters.ExpandoObjectConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadValue(JsonReader reader);
    private object ReadList(JsonReader reader);
    private object ReadObject(JsonReader reader);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
internal class Newtonsoft.Json.Converters.IsoDateTimeConverter : DateTimeConverterBase {
    private static string DefaultDateTimeFormat;
    private DateTimeStyles _dateTimeStyles;
    private string _dateTimeFormat;
    private CultureInfo _culture;
    public DateTimeStyles DateTimeStyles { get; public set; }
    public string DateTimeFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    public DateTimeStyles get_DateTimeStyles();
    public void set_DateTimeStyles(DateTimeStyles value);
    public string get_DateTimeFormat();
    public void set_DateTimeFormat(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
internal interface Newtonsoft.Json.Converters.IXmlDeclaration {
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public abstract virtual string get_Version();
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
    public abstract virtual string get_Standalone();
    public abstract virtual void set_Standalone(string value);
}
internal interface Newtonsoft.Json.Converters.IXmlDocument {
    public IXmlElement DocumentElement { get; }
    public abstract virtual IXmlNode CreateComment(string text);
    public abstract virtual IXmlNode CreateTextNode(string text);
    public abstract virtual IXmlNode CreateCDataSection(string data);
    public abstract virtual IXmlNode CreateWhitespace(string text);
    public abstract virtual IXmlNode CreateSignificantWhitespace(string text);
    public abstract virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    public abstract virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public abstract virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public abstract virtual IXmlElement CreateElement(string elementName);
    public abstract virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public abstract virtual IXmlNode CreateAttribute(string name, string value);
    public abstract virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    public abstract virtual IXmlElement get_DocumentElement();
}
internal interface Newtonsoft.Json.Converters.IXmlDocumentType {
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_System();
    public abstract virtual string get_Public();
    public abstract virtual string get_InternalSubset();
}
internal interface Newtonsoft.Json.Converters.IXmlElement {
    public bool IsEmpty { get; }
    public abstract virtual void SetAttributeNode(IXmlNode attribute);
    public abstract virtual string GetPrefixOfNamespace(string namespaceUri);
    public abstract virtual bool get_IsEmpty();
}
internal interface Newtonsoft.Json.Converters.IXmlNode {
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public object WrappedNode { get; }
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual string get_LocalName();
    public abstract virtual List`1<IXmlNode> get_ChildNodes();
    public abstract virtual List`1<IXmlNode> get_Attributes();
    public abstract virtual IXmlNode get_ParentNode();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual IXmlNode AppendChild(IXmlNode newChild);
    public abstract virtual string get_NamespaceUri();
    public abstract virtual object get_WrappedNode();
}
internal class Newtonsoft.Json.Converters.JavaScriptDateTimeConverter : DateTimeConverterBase {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
internal class Newtonsoft.Json.Converters.KeyValuePairConverter : JsonConverter {
    private static string KeyName;
    private static string ValueName;
    private static ThreadSafeStore`2<Type, ReflectionObject> ReflectionObjectPerType;
    private static KeyValuePairConverter();
    private static ReflectionObject InitializeReflectionObject(Type t);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Newtonsoft.Json.Converters.RegexConverter : JsonConverter {
    private static string PatternName;
    private static string OptionsName;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private bool HasFlag(RegexOptions options, RegexOptions flag);
    private void WriteBson(BsonWriter writer, Regex regex);
    private void WriteJson(JsonWriter writer, Regex regex, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadRegexString(JsonReader reader);
    private Regex ReadRegexObject(JsonReader reader, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Newtonsoft.Json.Converters.StringEnumConverter : JsonConverter {
    [CompilerGeneratedAttribute]
private bool <CamelCaseText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowIntegerValues>k__BackingField;
    public bool CamelCaseText { get; public set; }
    public bool AllowIntegerValues { get; public set; }
    public StringEnumConverter(bool camelCaseText);
    [CompilerGeneratedAttribute]
public bool get_CamelCaseText();
    [CompilerGeneratedAttribute]
public void set_CamelCaseText(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowIntegerValues();
    [CompilerGeneratedAttribute]
public void set_AllowIntegerValues(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Newtonsoft.Json.Converters.VersionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Newtonsoft.Json.Converters.XAttributeWrapper : XObjectWrapper {
    private XAttribute Attribute { get; }
    public string Value { get; public set; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public IXmlNode ParentNode { get; }
    public XAttributeWrapper(XAttribute attribute);
    private XAttribute get_Attribute();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_LocalName();
    public virtual string get_NamespaceUri();
    public virtual IXmlNode get_ParentNode();
}
internal class Newtonsoft.Json.Converters.XCommentWrapper : XObjectWrapper {
    private XComment Text { get; }
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    public XCommentWrapper(XComment text);
    private XComment get_Text();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
internal class Newtonsoft.Json.Converters.XContainerWrapper : XObjectWrapper {
    private List`1<IXmlNode> _childNodes;
    private XContainer Container { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    public IXmlNode ParentNode { get; }
    public XContainerWrapper(XContainer container);
    private XContainer get_Container();
    public virtual List`1<IXmlNode> get_ChildNodes();
    public virtual IXmlNode get_ParentNode();
    internal static IXmlNode WrapNode(XObject node);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
internal class Newtonsoft.Json.Converters.XDeclarationWrapper : XObjectWrapper {
    [CompilerGeneratedAttribute]
private XDeclaration <Declaration>k__BackingField;
    internal XDeclaration Declaration { get; private set; }
    public XmlNodeType NodeType { get; }
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public XDeclarationWrapper(XDeclaration declaration);
    [CompilerGeneratedAttribute]
internal XDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
private void set_Declaration(XDeclaration value);
    public virtual XmlNodeType get_NodeType();
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
internal class Newtonsoft.Json.Converters.XDocumentTypeWrapper : XObjectWrapper {
    private XDocumentType _documentType;
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public string LocalName { get; }
    public XDocumentTypeWrapper(XDocumentType documentType);
    public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    public virtual string get_LocalName();
}
internal class Newtonsoft.Json.Converters.XDocumentWrapper : XContainerWrapper {
    private XDocument Document { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    public IXmlElement DocumentElement { get; }
    public XDocumentWrapper(XDocument document);
    private XDocument get_Document();
    public virtual List`1<IXmlNode> get_ChildNodes();
    public sealed virtual IXmlNode CreateComment(string text);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    public sealed virtual IXmlElement get_DocumentElement();
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
internal class Newtonsoft.Json.Converters.XElementWrapper : XContainerWrapper {
    private List`1<IXmlNode> _attributes;
    private XElement Element { get; }
    public List`1<IXmlNode> Attributes { get; }
    public string Value { get; public set; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public bool IsEmpty { get; }
    public XElementWrapper(XElement element);
    private XElement get_Element();
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public virtual List`1<IXmlNode> get_Attributes();
    public virtual IXmlNode AppendChild(IXmlNode newChild);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_LocalName();
    public virtual string get_NamespaceUri();
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
internal class Newtonsoft.Json.Converters.XmlDeclarationWrapper : XmlNodeWrapper {
    private XmlDeclaration _declaration;
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public XmlDeclarationWrapper(XmlDeclaration declaration);
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
internal class Newtonsoft.Json.Converters.XmlDocumentTypeWrapper : XmlNodeWrapper {
    private XmlDocumentType _documentType;
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public string LocalName { get; }
    public XmlDocumentTypeWrapper(XmlDocumentType documentType);
    public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    public virtual string get_LocalName();
}
internal class Newtonsoft.Json.Converters.XmlDocumentWrapper : XmlNodeWrapper {
    private XmlDocument _document;
    public IXmlElement DocumentElement { get; }
    public XmlDocumentWrapper(XmlDocument document);
    public sealed virtual IXmlNode CreateComment(string data);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    public sealed virtual IXmlElement get_DocumentElement();
}
internal class Newtonsoft.Json.Converters.XmlElementWrapper : XmlNodeWrapper {
    private XmlElement _element;
    public bool IsEmpty { get; }
    public XmlElementWrapper(XmlElement element);
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
internal class Newtonsoft.Json.Converters.XmlNodeConverter : JsonConverter {
    private static string TextName;
    private static string CommentName;
    private static string CDataName;
    private static string WhitespaceName;
    private static string SignificantWhitespaceName;
    private static string DeclarationName;
    private static string JsonNamespaceUri;
    [CompilerGeneratedAttribute]
private string <DeserializeRootElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteArrayAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitRootObject>k__BackingField;
    public string DeserializeRootElementName { get; public set; }
    public bool WriteArrayAttribute { get; public set; }
    public bool OmitRootObject { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DeserializeRootElementName();
    [CompilerGeneratedAttribute]
public void set_DeserializeRootElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteArrayAttribute();
    [CompilerGeneratedAttribute]
public void set_WriteArrayAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_OmitRootObject();
    [CompilerGeneratedAttribute]
public void set_OmitRootObject(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private IXmlNode WrapXml(object value);
    private void PushParentNamespaces(IXmlNode node, XmlNamespaceManager manager);
    private string ResolveFullName(IXmlNode node, XmlNamespaceManager manager);
    private string GetPropertyName(IXmlNode node, XmlNamespaceManager manager);
    private bool IsArray(IXmlNode node);
    private void SerializeGroupedNodes(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName);
    private void SerializeNode(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName);
    private static bool AllSameName(IXmlNode node);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private void DeserializeValue(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, string propertyName, IXmlNode currentNode);
    private void ReadElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, XmlNamespaceManager manager);
    private void CreateElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string elementName, XmlNamespaceManager manager, string elementPrefix, Dictionary`2<string, string> attributeNameValues);
    private static void AddAttribute(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string attributeName, XmlNamespaceManager manager, string attributePrefix);
    private string ConvertTokenToXmlValue(JsonReader reader);
    private void ReadArrayElements(JsonReader reader, IXmlDocument document, string propertyName, IXmlNode currentNode, XmlNamespaceManager manager);
    private void AddJsonArrayAttribute(IXmlElement element, IXmlDocument document);
    private Dictionary`2<string, string> ReadAttributeElements(JsonReader reader, XmlNamespaceManager manager);
    private void CreateInstruction(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName);
    private void CreateDocumentType(JsonReader reader, IXmlDocument document, IXmlNode currentNode);
    private IXmlElement CreateElement(string elementName, IXmlDocument document, string elementPrefix, XmlNamespaceManager manager);
    private void DeserializeNode(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, IXmlNode currentNode);
    private bool IsNamespaceAttribute(string attributeName, String& prefix);
    private bool ValueAttributes(List`1<IXmlNode> c);
    public virtual bool CanConvert(Type valueType);
}
internal class Newtonsoft.Json.Converters.XmlNodeWrapper : object {
    private XmlNode _node;
    private List`1<IXmlNode> _childNodes;
    private List`1<IXmlNode> _attributes;
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public XmlNodeWrapper(XmlNode node);
    public sealed virtual object get_WrappedNode();
    public sealed virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public sealed virtual List`1<IXmlNode> get_ChildNodes();
    internal static IXmlNode WrapNode(XmlNode node);
    public sealed virtual List`1<IXmlNode> get_Attributes();
    public sealed virtual IXmlNode get_ParentNode();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual IXmlNode AppendChild(IXmlNode newChild);
    public sealed virtual string get_NamespaceUri();
}
internal class Newtonsoft.Json.Converters.XObjectWrapper : object {
    private static List`1<IXmlNode> EmptyChildNodes;
    private XObject _xmlObject;
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public XObjectWrapper(XObject xmlObject);
    private static XObjectWrapper();
    public sealed virtual object get_WrappedNode();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual List`1<IXmlNode> get_ChildNodes();
    public virtual List`1<IXmlNode> get_Attributes();
    public virtual IXmlNode get_ParentNode();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
    public virtual string get_NamespaceUri();
}
internal class Newtonsoft.Json.Converters.XProcessingInstructionWrapper : XObjectWrapper {
    private XProcessingInstruction ProcessingInstruction { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    public XProcessingInstructionWrapper(XProcessingInstruction processingInstruction);
    private XProcessingInstruction get_ProcessingInstruction();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
internal class Newtonsoft.Json.Converters.XTextWrapper : XObjectWrapper {
    private XText Text { get; }
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    public XTextWrapper(XText text);
    private XText get_Text();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
internal enum Newtonsoft.Json.DateFormatHandling : Enum {
    public int value__;
    public static DateFormatHandling IsoDateFormat;
    public static DateFormatHandling MicrosoftDateFormat;
}
internal enum Newtonsoft.Json.DateParseHandling : Enum {
    public int value__;
    public static DateParseHandling None;
    public static DateParseHandling DateTime;
    public static DateParseHandling DateTimeOffset;
}
internal enum Newtonsoft.Json.DateTimeZoneHandling : Enum {
    public int value__;
    public static DateTimeZoneHandling Local;
    public static DateTimeZoneHandling Utc;
    public static DateTimeZoneHandling Unspecified;
    public static DateTimeZoneHandling RoundtripKind;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.DefaultValueHandling : Enum {
    public int value__;
    public static DefaultValueHandling Include;
    public static DefaultValueHandling Ignore;
    public static DefaultValueHandling Populate;
    public static DefaultValueHandling IgnoreAndPopulate;
}
internal enum Newtonsoft.Json.FloatFormatHandling : Enum {
    public int value__;
    public static FloatFormatHandling String;
    public static FloatFormatHandling Symbol;
    public static FloatFormatHandling DefaultValue;
}
internal enum Newtonsoft.Json.FloatParseHandling : Enum {
    public int value__;
    public static FloatParseHandling Double;
    public static FloatParseHandling Decimal;
}
internal enum Newtonsoft.Json.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
internal interface Newtonsoft.Json.IArrayPool`1 {
    public abstract virtual T[] Rent(int minimumLength);
    public abstract virtual void Return(T[] array);
}
internal interface Newtonsoft.Json.IJsonLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
[AttributeUsageAttribute("1028")]
internal class Newtonsoft.Json.JsonArrayAttribute : JsonContainerAttribute {
    private bool _allowNullItems;
    public bool AllowNullItems { get; public set; }
    public JsonArrayAttribute(bool allowNullItems);
    public JsonArrayAttribute(string id);
    public bool get_AllowNullItems();
    public void set_AllowNullItems(bool value);
}
[AttributeUsageAttribute("32")]
internal class Newtonsoft.Json.JsonConstructorAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
internal abstract class Newtonsoft.Json.JsonContainerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ItemConverterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategyInstance>k__BackingField;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    private Type _namingStrategyType;
    private Object[] _namingStrategyParameters;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public Type ItemConverterType { get; public set; }
    public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    public Object[] NamingStrategyParameters { get; public set; }
    internal NamingStrategy NamingStrategyInstance { get; internal set; }
    public bool IsReference { get; public set; }
    public bool ItemIsReference { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    protected JsonContainerAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    public Type get_NamingStrategyType();
    public void set_NamingStrategyType(Type value);
    public Object[] get_NamingStrategyParameters();
    public void set_NamingStrategyParameters(Object[] value);
    [CompilerGeneratedAttribute]
internal NamingStrategy get_NamingStrategyInstance();
    [CompilerGeneratedAttribute]
internal void set_NamingStrategyInstance(NamingStrategy value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
}
internal enum Newtonsoft.Json.JsonContainerType : Enum {
    public int value__;
    public static JsonContainerType None;
    public static JsonContainerType Object;
    public static JsonContainerType Array;
    public static JsonContainerType Constructor;
}
internal static class Newtonsoft.Json.JsonConvert : object {
    [CompilerGeneratedAttribute]
private static Func`1<JsonSerializerSettings> <DefaultSettings>k__BackingField;
    public static string True;
    public static string False;
    public static string Null;
    public static string Undefined;
    public static string PositiveInfinity;
    public static string NegativeInfinity;
    public static string NaN;
    public static Func`1<JsonSerializerSettings> DefaultSettings { get; public set; }
    private static JsonConvert();
    [CompilerGeneratedAttribute]
public static Func`1<JsonSerializerSettings> get_DefaultSettings();
    [CompilerGeneratedAttribute]
public static void set_DefaultSettings(Func`1<JsonSerializerSettings> value);
    public static string ToString(DateTime value);
    public static string ToString(DateTime value, DateFormatHandling format, DateTimeZoneHandling timeZoneHandling);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, DateFormatHandling format);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(Enum value);
    public static string ToString(int value);
    public static string ToString(short value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    public static string ToString(long value);
    private static string ToStringInternal(BigInteger value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static string ToString(float value);
    internal static string ToString(float value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    private static string EnsureFloatFormat(double value, string text, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    public static string ToString(double value);
    internal static string ToString(double value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    private static string EnsureDecimalPlace(double value, string text);
    private static string EnsureDecimalPlace(string text);
    public static string ToString(byte value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(decimal value);
    public static string ToString(Guid value);
    internal static string ToString(Guid value, char quoteChar);
    public static string ToString(TimeSpan value);
    internal static string ToString(TimeSpan value, char quoteChar);
    public static string ToString(Uri value);
    internal static string ToString(Uri value, char quoteChar);
    public static string ToString(string value);
    public static string ToString(string value, char delimiter);
    public static string ToString(string value, char delimiter, StringEscapeHandling stringEscapeHandling);
    public static string ToString(object value);
    public static string SerializeObject(object value);
    public static string SerializeObject(object value, Formatting formatting);
    public static string SerializeObject(object value, JsonConverter[] converters);
    public static string SerializeObject(object value, Formatting formatting, JsonConverter[] converters);
    public static string SerializeObject(object value, JsonSerializerSettings settings);
    public static string SerializeObject(object value, Type type, JsonSerializerSettings settings);
    public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings);
    public static string SerializeObject(object value, Type type, Formatting formatting, JsonSerializerSettings settings);
    private static string SerializeObjectInternal(object value, Type type, JsonSerializer jsonSerializer);
    [ObsoleteAttribute("SerializeObjectAsync is obsolete. Use the Task.Factory.StartNew method to serialize JSON asynchronously: Task.Factory.StartNew(() => JsonConvert.SerializeObject(value))")]
public static Task`1<string> SerializeObjectAsync(object value);
    [ObsoleteAttribute("SerializeObjectAsync is obsolete. Use the Task.Factory.StartNew method to serialize JSON asynchronously: Task.Factory.StartNew(() => JsonConvert.SerializeObject(value, formatting))")]
public static Task`1<string> SerializeObjectAsync(object value, Formatting formatting);
    [ObsoleteAttribute("SerializeObjectAsync is obsolete. Use the Task.Factory.StartNew method to serialize JSON asynchronously: Task.Factory.StartNew(() => JsonConvert.SerializeObject(value, formatting, settings))")]
public static Task`1<string> SerializeObjectAsync(object value, Formatting formatting, JsonSerializerSettings settings);
    public static object DeserializeObject(string value);
    public static object DeserializeObject(string value, JsonSerializerSettings settings);
    public static object DeserializeObject(string value, Type type);
    public static T DeserializeObject(string value);
    public static T DeserializeAnonymousType(string value, T anonymousTypeObject);
    public static T DeserializeAnonymousType(string value, T anonymousTypeObject, JsonSerializerSettings settings);
    public static T DeserializeObject(string value, JsonConverter[] converters);
    public static T DeserializeObject(string value, JsonSerializerSettings settings);
    public static object DeserializeObject(string value, Type type, JsonConverter[] converters);
    public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings);
    [ObsoleteAttribute("DeserializeObjectAsync is obsolete. Use the Task.Factory.StartNew method to deserialize JSON asynchronously: Task.Factory.StartNew(() => JsonConvert.DeserializeObject<T>(value))")]
public static Task`1<T> DeserializeObjectAsync(string value);
    [ObsoleteAttribute("DeserializeObjectAsync is obsolete. Use the Task.Factory.StartNew method to deserialize JSON asynchronously: Task.Factory.StartNew(() => JsonConvert.DeserializeObject<T>(value, settings))")]
public static Task`1<T> DeserializeObjectAsync(string value, JsonSerializerSettings settings);
    [ObsoleteAttribute("DeserializeObjectAsync is obsolete. Use the Task.Factory.StartNew method to deserialize JSON asynchronously: Task.Factory.StartNew(() => JsonConvert.DeserializeObject(value))")]
public static Task`1<object> DeserializeObjectAsync(string value);
    [ObsoleteAttribute("DeserializeObjectAsync is obsolete. Use the Task.Factory.StartNew method to deserialize JSON asynchronously: Task.Factory.StartNew(() => JsonConvert.DeserializeObject(value, type, settings))")]
public static Task`1<object> DeserializeObjectAsync(string value, Type type, JsonSerializerSettings settings);
    public static void PopulateObject(string value, object target);
    public static void PopulateObject(string value, object target, JsonSerializerSettings settings);
    [ObsoleteAttribute("PopulateObjectAsync is obsolete. Use the Task.Factory.StartNew method to populate an object with JSON values asynchronously: Task.Factory.StartNew(() => JsonConvert.PopulateObject(value, target, settings))")]
public static Task PopulateObjectAsync(string value, object target, JsonSerializerSettings settings);
    public static string SerializeXmlNode(XmlNode node);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting, bool omitRootObject);
    public static XmlDocument DeserializeXmlNode(string value);
    public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName);
    public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    public static string SerializeXNode(XObject node);
    public static string SerializeXNode(XObject node, Formatting formatting);
    public static string SerializeXNode(XObject node, Formatting formatting, bool omitRootObject);
    public static XDocument DeserializeXNode(string value);
    public static XDocument DeserializeXNode(string value, string deserializeRootElementName);
    public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
}
internal abstract class Newtonsoft.Json.JsonConverter : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public abstract virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual bool CanConvert(Type objectType);
    [ObsoleteAttribute("JSON Schema validation has been moved to its own package. It is strongly recommended that you do not override GetSchema() in your own converter. It is not used by Json.NET and will be removed at some point in the future. Converter's that override GetSchema() will stop working when it is removed.")]
public virtual JsonSchema GetSchema();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
}
[AttributeUsageAttribute("3484")]
internal class Newtonsoft.Json.JsonConverterAttribute : Attribute {
    private Type _converterType;
    [CompilerGeneratedAttribute]
private Object[] <ConverterParameters>k__BackingField;
    public Type ConverterType { get; }
    public Object[] ConverterParameters { get; private set; }
    public JsonConverterAttribute(Type converterType);
    public JsonConverterAttribute(Type converterType, Object[] converterParameters);
    public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public Object[] get_ConverterParameters();
    [CompilerGeneratedAttribute]
private void set_ConverterParameters(Object[] value);
}
internal class Newtonsoft.Json.JsonConverterCollection : Collection`1<JsonConverter> {
}
[AttributeUsageAttribute("1028")]
internal class Newtonsoft.Json.JsonDictionaryAttribute : JsonContainerAttribute {
    public JsonDictionaryAttribute(string id);
}
internal class Newtonsoft.Json.JsonException : Exception {
    public JsonException(string message);
    public JsonException(string message, Exception innerException);
    public JsonException(SerializationInfo info, StreamingContext context);
    internal static JsonException Create(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonExtensionDataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <WriteData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadData>k__BackingField;
    public bool WriteData { get; public set; }
    public bool ReadData { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WriteData();
    [CompilerGeneratedAttribute]
public void set_WriteData(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadData();
    [CompilerGeneratedAttribute]
public void set_ReadData(bool value);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class Newtonsoft.Json.JsonObjectAttribute : JsonContainerAttribute {
    private MemberSerialization _memberSerialization;
    internal Nullable`1<Required> _itemRequired;
    public MemberSerialization MemberSerialization { get; public set; }
    public Required ItemRequired { get; public set; }
    public JsonObjectAttribute(MemberSerialization memberSerialization);
    public JsonObjectAttribute(string id);
    public MemberSerialization get_MemberSerialization();
    public void set_MemberSerialization(MemberSerialization value);
    public Required get_ItemRequired();
    public void set_ItemRequired(Required value);
}
internal class Newtonsoft.Json.JsonPosition : ValueType {
    private static Char[] SpecialCharacters;
    internal JsonContainerType Type;
    internal int Position;
    internal string PropertyName;
    internal bool HasIndex;
    public JsonPosition(JsonContainerType type);
    private static JsonPosition();
    internal int CalculateLength();
    internal void WriteTo(StringBuilder sb);
    internal static bool TypeHasIndex(JsonContainerType type);
    internal static string BuildPath(List`1<JsonPosition> positions, Nullable`1<JsonPosition> currentPosition);
    internal static string FormatMessage(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("2432")]
internal class Newtonsoft.Json.JsonPropertyAttribute : Attribute {
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<int> _order;
    internal Nullable`1<Required> _required;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ItemConverterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NamingStrategyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <NamingStrategyParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public Type ItemConverterType { get; public set; }
    public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    public Object[] NamingStrategyParameters { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public bool IsReference { get; public set; }
    public int Order { get; public set; }
    public Required Required { get; public set; }
    public string PropertyName { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    public bool ItemIsReference { get; public set; }
    public JsonPropertyAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    [CompilerGeneratedAttribute]
public Type get_NamingStrategyType();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_NamingStrategyParameters();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyParameters(Object[] value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public int get_Order();
    public void set_Order(int value);
    public Required get_Required();
    public void set_Required(Required value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
}
internal abstract class Newtonsoft.Json.JsonReader : object {
    private JsonToken _tokenType;
    private object _value;
    internal char _quoteChar;
    internal State _currentState;
    private JsonPosition _currentPosition;
    private CultureInfo _culture;
    private DateTimeZoneHandling _dateTimeZoneHandling;
    private Nullable`1<int> _maxDepth;
    private bool _hasExceededMaxDepth;
    internal DateParseHandling _dateParseHandling;
    internal FloatParseHandling _floatParseHandling;
    private string _dateFormatString;
    private List`1<JsonPosition> _stack;
    [CompilerGeneratedAttribute]
private bool <CloseInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportMultipleContent>k__BackingField;
    protected State CurrentState { get; }
    public bool CloseInput { get; public set; }
    public bool SupportMultipleContent { get; public set; }
    public char QuoteChar { get; protected internal set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public JsonToken TokenType { get; }
    public object Value { get; }
    public Type ValueType { get; }
    public int Depth { get; }
    public string Path { get; }
    public CultureInfo Culture { get; public set; }
    protected State get_CurrentState();
    [CompilerGeneratedAttribute]
public bool get_CloseInput();
    [CompilerGeneratedAttribute]
public void set_CloseInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportMultipleContent();
    [CompilerGeneratedAttribute]
public void set_SupportMultipleContent(bool value);
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public virtual JsonToken get_TokenType();
    public virtual object get_Value();
    public virtual Type get_ValueType();
    public virtual int get_Depth();
    public virtual string get_Path();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    internal JsonPosition GetPosition(int depth);
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    internal Nullable`1<int> ReadInt32String(string s);
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    internal Byte[] ReadArrayIntoByteArray();
    public virtual Nullable`1<double> ReadAsDouble();
    internal Nullable`1<double> ReadDoubleString(string s);
    public virtual Nullable`1<bool> ReadAsBoolean();
    internal Nullable`1<bool> ReadBooleanString(string s);
    public virtual Nullable`1<decimal> ReadAsDecimal();
    internal Nullable`1<decimal> ReadDecimalString(string s);
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    internal Nullable`1<DateTime> ReadDateTimeString(string s);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    internal Nullable`1<DateTimeOffset> ReadDateTimeOffsetString(string s);
    internal void ReaderReadAndAssert();
    internal JsonReaderException CreateUnexpectedEndException();
    internal void ReadIntoWrappedTypeObject();
    public void Skip();
    protected void SetToken(JsonToken newToken);
    protected void SetToken(JsonToken newToken, object value);
    internal void SetToken(JsonToken newToken, object value, bool updateIndex);
    internal void SetPostValueState(bool updateIndex);
    private void UpdateScopeWithFinishedValue();
    private void ValidateEnd(JsonToken endToken);
    protected void SetStateBasedOnCurrent();
    private void SetFinished();
    private JsonContainerType GetTypeForCloseToken(JsonToken token);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    internal void ReadAndAssert();
    internal bool ReadAndMoveToContent();
    internal bool MoveToContent();
    private JsonToken GetContentToken();
}
internal class Newtonsoft.Json.JsonReaderException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; private set; }
    public int LinePosition { get; private set; }
    public string Path { get; private set; }
    public JsonReaderException(string message);
    public JsonReaderException(string message, Exception innerException);
    public JsonReaderException(SerializationInfo info, StreamingContext context);
    internal JsonReaderException(string message, Exception innerException, string path, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
private void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    internal static JsonReaderException Create(JsonReader reader, string message);
    internal static JsonReaderException Create(JsonReader reader, string message, Exception ex);
    internal static JsonReaderException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonRequiredAttribute : Attribute {
}
internal class Newtonsoft.Json.JsonSerializationException : JsonException {
    public JsonSerializationException(string message);
    public JsonSerializationException(string message, Exception innerException);
    public JsonSerializationException(SerializationInfo info, StreamingContext context);
    internal static JsonSerializationException Create(JsonReader reader, string message);
    internal static JsonSerializationException Create(JsonReader reader, string message, Exception ex);
    internal static JsonSerializationException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
internal class Newtonsoft.Json.JsonSerializer : object {
    internal TypeNameHandling _typeNameHandling;
    internal FormatterAssemblyStyle _typeNameAssemblyFormat;
    internal PreserveReferencesHandling _preserveReferencesHandling;
    internal ReferenceLoopHandling _referenceLoopHandling;
    internal MissingMemberHandling _missingMemberHandling;
    internal ObjectCreationHandling _objectCreationHandling;
    internal NullValueHandling _nullValueHandling;
    internal DefaultValueHandling _defaultValueHandling;
    internal ConstructorHandling _constructorHandling;
    internal MetadataPropertyHandling _metadataPropertyHandling;
    internal JsonConverterCollection _converters;
    internal IContractResolver _contractResolver;
    internal ITraceWriter _traceWriter;
    internal IEqualityComparer _equalityComparer;
    internal SerializationBinder _binder;
    internal StreamingContext _context;
    private IReferenceResolver _referenceResolver;
    private Nullable`1<Formatting> _formatting;
    private Nullable`1<DateFormatHandling> _dateFormatHandling;
    private Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    private Nullable`1<DateParseHandling> _dateParseHandling;
    private Nullable`1<FloatFormatHandling> _floatFormatHandling;
    private Nullable`1<FloatParseHandling> _floatParseHandling;
    private Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    private CultureInfo _culture;
    private Nullable`1<int> _maxDepth;
    private bool _maxDepthSet;
    private Nullable`1<bool> _checkAdditionalContent;
    private string _dateFormatString;
    private bool _dateFormatStringSet;
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Error;
    public IReferenceResolver ReferenceResolver { get; public set; }
    public SerializationBinder Binder { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    public JsonConverterCollection Converters { get; }
    public IContractResolver ContractResolver { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    [CompilerGeneratedAttribute]
public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual IReferenceResolver get_ReferenceResolver();
    public virtual void set_ReferenceResolver(IReferenceResolver value);
    public virtual SerializationBinder get_Binder();
    public virtual void set_Binder(SerializationBinder value);
    public virtual ITraceWriter get_TraceWriter();
    public virtual void set_TraceWriter(ITraceWriter value);
    public virtual IEqualityComparer get_EqualityComparer();
    public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual JsonConverterCollection get_Converters();
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal bool IsCheckAdditionalContentSet();
    public static JsonSerializer Create();
    public static JsonSerializer Create(JsonSerializerSettings settings);
    public static JsonSerializer CreateDefault();
    public static JsonSerializer CreateDefault(JsonSerializerSettings settings);
    private static void ApplySerializerSettings(JsonSerializer serializer, JsonSerializerSettings settings);
    public void Populate(TextReader reader, object target);
    public void Populate(JsonReader reader, object target);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    public object Deserialize(JsonReader reader);
    public object Deserialize(TextReader reader, Type objectType);
    public T Deserialize(JsonReader reader);
    public object Deserialize(JsonReader reader, Type objectType);
    internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    private void SetupReader(JsonReader reader, CultureInfo& previousCulture, Nullable`1& previousDateTimeZoneHandling, Nullable`1& previousDateParseHandling, Nullable`1& previousFloatParseHandling, Nullable`1& previousMaxDepth, String& previousDateFormatString);
    private void ResetReader(JsonReader reader, CultureInfo previousCulture, Nullable`1<DateTimeZoneHandling> previousDateTimeZoneHandling, Nullable`1<DateParseHandling> previousDateParseHandling, Nullable`1<FloatParseHandling> previousFloatParseHandling, Nullable`1<int> previousMaxDepth, string previousDateFormatString);
    public void Serialize(TextWriter textWriter, object value);
    public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    public void Serialize(TextWriter textWriter, object value, Type objectType);
    public void Serialize(JsonWriter jsonWriter, object value);
    internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type objectType);
    internal IReferenceResolver GetReferenceResolver();
    internal JsonConverter GetMatchingConverter(Type type);
    internal static JsonConverter GetMatchingConverter(IList`1<JsonConverter> converters, Type objectType);
    internal void OnError(ErrorEventArgs e);
}
internal class Newtonsoft.Json.JsonSerializerSettings : object {
    internal static ReferenceLoopHandling DefaultReferenceLoopHandling;
    internal static MissingMemberHandling DefaultMissingMemberHandling;
    internal static NullValueHandling DefaultNullValueHandling;
    internal static DefaultValueHandling DefaultDefaultValueHandling;
    internal static ObjectCreationHandling DefaultObjectCreationHandling;
    internal static PreserveReferencesHandling DefaultPreserveReferencesHandling;
    internal static ConstructorHandling DefaultConstructorHandling;
    internal static TypeNameHandling DefaultTypeNameHandling;
    internal static MetadataPropertyHandling DefaultMetadataPropertyHandling;
    internal static FormatterAssemblyStyle DefaultTypeNameAssemblyFormat;
    internal static StreamingContext DefaultContext;
    internal static Formatting DefaultFormatting;
    internal static DateFormatHandling DefaultDateFormatHandling;
    internal static DateTimeZoneHandling DefaultDateTimeZoneHandling;
    internal static DateParseHandling DefaultDateParseHandling;
    internal static FloatParseHandling DefaultFloatParseHandling;
    internal static FloatFormatHandling DefaultFloatFormatHandling;
    internal static StringEscapeHandling DefaultStringEscapeHandling;
    internal static FormatterAssemblyStyle DefaultFormatterAssemblyStyle;
    internal static CultureInfo DefaultCulture;
    internal static bool DefaultCheckAdditionalContent;
    internal static string DefaultDateFormatString;
    internal Nullable`1<Formatting> _formatting;
    internal Nullable`1<DateFormatHandling> _dateFormatHandling;
    internal Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    internal Nullable`1<DateParseHandling> _dateParseHandling;
    internal Nullable`1<FloatFormatHandling> _floatFormatHandling;
    internal Nullable`1<FloatParseHandling> _floatParseHandling;
    internal Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    internal CultureInfo _culture;
    internal Nullable`1<bool> _checkAdditionalContent;
    internal Nullable`1<int> _maxDepth;
    internal bool _maxDepthSet;
    internal string _dateFormatString;
    internal bool _dateFormatStringSet;
    internal Nullable`1<FormatterAssemblyStyle> _typeNameAssemblyFormat;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<PreserveReferencesHandling> _preserveReferencesHandling;
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<MissingMemberHandling> _missingMemberHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<StreamingContext> _context;
    internal Nullable`1<ConstructorHandling> _constructorHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<MetadataPropertyHandling> _metadataPropertyHandling;
    [CompilerGeneratedAttribute]
private IList`1<JsonConverter> <Converters>k__BackingField;
    [CompilerGeneratedAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IReferenceResolver> <ReferenceResolverProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializationBinder <Binder>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> <Error>k__BackingField;
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public IList`1<JsonConverter> Converters { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    [ObsoleteAttribute("ReferenceResolver property is obsolete. Use the ReferenceResolverProvider property to set the IReferenceResolver: settings.ReferenceResolverProvider = () => resolver")]
public IReferenceResolver ReferenceResolver { get; public set; }
    public Func`1<IReferenceResolver> ReferenceResolverProvider { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    public SerializationBinder Binder { get; public set; }
    public EventHandler`1<ErrorEventArgs> Error { get; public set; }
    public StreamingContext Context { get; public set; }
    public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public CultureInfo Culture { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    private static JsonSerializerSettings();
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public MissingMemberHandling get_MissingMemberHandling();
    public void set_MissingMemberHandling(MissingMemberHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    [CompilerGeneratedAttribute]
public IList`1<JsonConverter> get_Converters();
    [CompilerGeneratedAttribute]
public void set_Converters(IList`1<JsonConverter> value);
    public PreserveReferencesHandling get_PreserveReferencesHandling();
    public void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public MetadataPropertyHandling get_MetadataPropertyHandling();
    public void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public ConstructorHandling get_ConstructorHandling();
    public void set_ConstructorHandling(ConstructorHandling value);
    [CompilerGeneratedAttribute]
public IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public void set_ContractResolver(IContractResolver value);
    [CompilerGeneratedAttribute]
public IEqualityComparer get_EqualityComparer();
    [CompilerGeneratedAttribute]
public void set_EqualityComparer(IEqualityComparer value);
    public IReferenceResolver get_ReferenceResolver();
    public void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public Func`1<IReferenceResolver> get_ReferenceResolverProvider();
    [CompilerGeneratedAttribute]
public void set_ReferenceResolverProvider(Func`1<IReferenceResolver> value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    [CompilerGeneratedAttribute]
public SerializationBinder get_Binder();
    [CompilerGeneratedAttribute]
public void set_Binder(SerializationBinder value);
    [CompilerGeneratedAttribute]
public EventHandler`1<ErrorEventArgs> get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(EventHandler`1<ErrorEventArgs> value);
    public StreamingContext get_Context();
    public void set_Context(StreamingContext value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_CheckAdditionalContent();
    public void set_CheckAdditionalContent(bool value);
}
internal class Newtonsoft.Json.JsonTextReader : JsonReader {
    private static char UnicodeReplacementChar;
    private static int MaximumJavascriptIntegerCharacterLength;
    private TextReader _reader;
    private Char[] _chars;
    private int _charsUsed;
    private int _charPos;
    private int _lineStartPos;
    private int _lineNumber;
    private bool _isEndOfFile;
    private StringBuffer _stringBuffer;
    private StringReference _stringReference;
    private IArrayPool`1<char> _arrayPool;
    internal PropertyNameTable NameTable;
    public IArrayPool`1<char> ArrayPool { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public JsonTextReader(TextReader reader);
    public IArrayPool`1<char> get_ArrayPool();
    public void set_ArrayPool(IArrayPool`1<char> value);
    private void EnsureBufferNotEmpty();
    private void OnNewLine(int pos);
    private void ParseString(char quote, ReadType readType);
    private static void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count);
    private void ShiftBufferIfNeeded();
    private int ReadData(bool append);
    private int ReadData(bool append, int charsRequired);
    private bool EnsureChars(int relativePosition, bool append);
    private bool ReadChars(int relativePosition, bool append);
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    private object ReadStringValue(ReadType readType);
    private JsonReaderException CreateUnexpectedCharacterException(char c);
    public virtual Nullable`1<bool> ReadAsBoolean();
    private void ProcessValueComma();
    private object ReadNumberValue(ReadType readType);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    private void HandleNull();
    private void ReadFinished();
    private bool ReadNullChar();
    private void EnsureBuffer();
    private void ReadStringIntoBuffer(char quote);
    private void WriteCharToBuffer(char writeChar, int lastWritePosition, int writeToPosition);
    private char ParseUnicode();
    private void ReadNumberIntoBuffer();
    private void ClearRecentString();
    private bool ParsePostValue();
    private bool ParseObject();
    private bool ParseProperty();
    private bool ValidIdentifierChar(char value);
    private void ParseUnquotedProperty();
    private bool ParseValue();
    private void ProcessLineFeed();
    private void ProcessCarriageReturn(bool append);
    private bool EatWhitespace(bool oneOrMore);
    private void ParseConstructor();
    private void ParseNumber(ReadType readType);
    private static object BigIntegerParse(string number, CultureInfo culture);
    private void ParseComment(bool setToken);
    private void EndComment(bool setToken, int initialPosition, int endPosition);
    private bool MatchValue(string value);
    private bool MatchValueWithTrailingSeparator(string value);
    private bool IsSeparator(char c);
    private void ParseTrue();
    private void ParseNull();
    private void ParseUndefined();
    private void ParseFalse();
    private object ParseNumberNegativeInfinity(ReadType readType);
    private object ParseNumberPositiveInfinity(ReadType readType);
    private object ParseNumberNaN(ReadType readType);
    public virtual void Close();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
internal class Newtonsoft.Json.JsonTextWriter : JsonWriter {
    private TextWriter _writer;
    private Base64Encoder _base64Encoder;
    private char _indentChar;
    private int _indentation;
    private char _quoteChar;
    private bool _quoteName;
    private Boolean[] _charEscapeFlags;
    private Char[] _writeBuffer;
    private IArrayPool`1<char> _arrayPool;
    private Char[] _indentChars;
    private Base64Encoder Base64Encoder { get; }
    public IArrayPool`1<char> ArrayPool { get; public set; }
    public int Indentation { get; public set; }
    public char QuoteChar { get; public set; }
    public char IndentChar { get; public set; }
    public bool QuoteName { get; public set; }
    public JsonTextWriter(TextWriter textWriter);
    private Base64Encoder get_Base64Encoder();
    public IArrayPool`1<char> get_ArrayPool();
    public void set_ArrayPool(IArrayPool`1<char> value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public bool get_QuoteName();
    public void set_QuoteName(bool value);
    public virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteStartArray();
    public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    internal virtual void OnStringEscapeHandlingChanged();
    private void UpdateCharEscapeFlags();
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    private void WriteValueInternal(string value, JsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteValue(string value);
    private void WriteEscapedString(string value, bool quote);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private void EnsureWriteBuffer();
    private void WriteIntegerValue(long value);
    private void WriteIntegerValue(ulong uvalue);
}
internal enum Newtonsoft.Json.JsonToken : Enum {
    public int value__;
    public static JsonToken None;
    public static JsonToken StartObject;
    public static JsonToken StartArray;
    public static JsonToken StartConstructor;
    public static JsonToken PropertyName;
    public static JsonToken Comment;
    public static JsonToken Raw;
    public static JsonToken Integer;
    public static JsonToken Float;
    public static JsonToken String;
    public static JsonToken Boolean;
    public static JsonToken Null;
    public static JsonToken Undefined;
    public static JsonToken EndObject;
    public static JsonToken EndArray;
    public static JsonToken EndConstructor;
    public static JsonToken Date;
    public static JsonToken Bytes;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.JsonValidatingReader : JsonReader {
    private JsonReader _reader;
    private Stack`1<SchemaScope> _stack;
    private JsonSchema _schema;
    private JsonSchemaModel _model;
    private SchemaScope _currentScope;
    [CompilerGeneratedAttribute]
private ValidationEventHandler ValidationEventHandler;
    private static IList`1<JsonSchemaModel> EmptySchemaList;
    public object Value { get; }
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    public Type ValueType { get; }
    private IList`1<JsonSchemaModel> CurrentSchemas { get; }
    private IList`1<JsonSchemaModel> CurrentMemberSchemas { get; }
    public JsonSchema Schema { get; public set; }
    public JsonReader Reader { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public JsonValidatingReader(JsonReader reader);
    private static JsonValidatingReader();
    [CompilerGeneratedAttribute]
public void add_ValidationEventHandler(ValidationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValidationEventHandler(ValidationEventHandler value);
    public virtual object get_Value();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    public virtual Type get_ValueType();
    private void Push(SchemaScope scope);
    private SchemaScope Pop();
    private IList`1<JsonSchemaModel> get_CurrentSchemas();
    private IList`1<JsonSchemaModel> get_CurrentMemberSchemas();
    private void RaiseError(string message, JsonSchemaModel schema);
    private void OnValidationEvent(JsonSchemaException exception);
    public JsonSchema get_Schema();
    public void set_Schema(JsonSchema value);
    public JsonReader get_Reader();
    private void ValidateNotDisallowed(JsonSchemaModel schema);
    private Nullable`1<JsonSchemaType> GetCurrentNodeSchemaType();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual string ReadAsString();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual bool Read();
    private void ValidateCurrentToken();
    private void WriteToken(IList`1<JsonSchemaModel> schemas);
    private void ValidateEndObject(JsonSchemaModel schema);
    private void ValidateEndArray(JsonSchemaModel schema);
    private void ValidateNull(JsonSchemaModel schema);
    private void ValidateBoolean(JsonSchemaModel schema);
    private void ValidateString(JsonSchemaModel schema);
    private void ValidateInteger(JsonSchemaModel schema);
    private void ProcessValue();
    private void ValidateFloat(JsonSchemaModel schema);
    private static double FloatingPointRemainder(double dividend, double divisor);
    private static bool IsZero(double value);
    private void ValidatePropertyName(JsonSchemaModel schema);
    private bool IsPropertyDefinied(JsonSchemaModel schema, string propertyName);
    private bool ValidateArray(JsonSchemaModel schema);
    private bool ValidateObject(JsonSchemaModel schema);
    private bool TestType(JsonSchemaModel currentSchema, JsonSchemaType currentType);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
}
internal abstract class Newtonsoft.Json.JsonWriter : object {
    private static State[][] StateArray;
    internal static State[][] StateArrayTempate;
    private List`1<JsonPosition> _stack;
    private JsonPosition _currentPosition;
    private State _currentState;
    private Formatting _formatting;
    [CompilerGeneratedAttribute]
private bool <CloseOutput>k__BackingField;
    private DateFormatHandling _dateFormatHandling;
    private DateTimeZoneHandling _dateTimeZoneHandling;
    private StringEscapeHandling _stringEscapeHandling;
    private FloatFormatHandling _floatFormatHandling;
    private string _dateFormatString;
    private CultureInfo _culture;
    public bool CloseOutput { get; public set; }
    protected internal int Top { get; }
    public WriteState WriteState { get; }
    internal string ContainerPath { get; }
    public string Path { get; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    private static JsonWriter();
    internal static State[][] BuildStateArray();
    [CompilerGeneratedAttribute]
public bool get_CloseOutput();
    [CompilerGeneratedAttribute]
public void set_CloseOutput(bool value);
    protected internal int get_Top();
    public WriteState get_WriteState();
    internal string get_ContainerPath();
    public string get_Path();
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    internal virtual void OnStringEscapeHandlingChanged();
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    internal void UpdateScopeWithFinishedValue();
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteEnd();
    public void WriteToken(JsonReader reader);
    public void WriteToken(JsonReader reader, bool writeChildren);
    public void WriteToken(JsonToken token, object value);
    public void WriteToken(JsonToken token);
    internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
    private void WriteConstructorDate(JsonReader reader);
    private void WriteEnd(JsonContainerType type);
    private void AutoCompleteAll();
    private JsonToken GetCloseTokenForType(JsonContainerType type);
    private void AutoCompleteClose(JsonContainerType type);
    protected virtual void WriteEnd(JsonToken token);
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    internal void AutoComplete(JsonToken tokenBeingWritten);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<int> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<ulong> value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(Nullable`1<short> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteValue(Nullable`1<char> value);
    public virtual void WriteValue(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Uri value);
    public virtual void WriteValue(object value);
    public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    internal static void WriteValue(JsonWriter writer, PrimitiveTypeCode typeCode, object value);
    private static JsonWriterException CreateUnsupportedTypeException(JsonWriter writer, object value);
    protected void SetWriteState(JsonToken token, object value);
    internal void InternalWriteEnd(JsonContainerType container);
    internal void InternalWritePropertyName(string name);
    internal void InternalWriteRaw();
    internal void InternalWriteStart(JsonToken token, JsonContainerType container);
    internal void InternalWriteValue(JsonToken token);
    internal void InternalWriteWhitespace(string ws);
    internal void InternalWriteComment();
}
internal class Newtonsoft.Json.JsonWriterException : JsonException {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; private set; }
    public JsonWriterException(string message);
    public JsonWriterException(string message, Exception innerException);
    public JsonWriterException(SerializationInfo info, StreamingContext context);
    internal JsonWriterException(string message, Exception innerException, string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    internal static JsonWriterException Create(JsonWriter writer, string message, Exception ex);
    internal static JsonWriterException Create(string path, string message, Exception ex);
}
internal enum Newtonsoft.Json.Linq.CommentHandling : Enum {
    public int value__;
    public static CommentHandling Ignore;
    public static CommentHandling Load;
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Linq.Extensions : object {
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Ancestors(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AncestorsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Descendants(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> DescendantsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JProperty> Properties(IEnumerable`1<JObject> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static U Value(IEnumerable`1<JToken> value);
    [ExtensionAttribute]
public static U Value(IEnumerable`1<T> value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.Extensions/<Values>d__11`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Values(IEnumerable`1<T> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Children(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Children(IEnumerable`1<T> source);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.Extensions/<Convert>d__14`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Convert(IEnumerable`1<T> source);
    [ExtensionAttribute]
internal static U Convert(T token);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AsJEnumerable(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IJEnumerable`1<T> AsJEnumerable(IEnumerable`1<T> source);
}
[DefaultMemberAttribute("Item")]
internal interface Newtonsoft.Json.Linq.IJEnumerable`1 {
    public IJEnumerable`1<JToken> Item { get; }
    public abstract virtual IJEnumerable`1<JToken> get_Item(object key);
}
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JArray : JContainer {
    private List`1<JToken> _values;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    public JToken Item { get; public set; }
    public JToken Item { get; public set; }
    public bool IsReadOnly { get; }
    public JArray(JArray other);
    public JArray(Object[] content);
    public JArray(object content);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public static JArray Load(JsonReader reader);
    public static JArray Load(JsonReader reader, JsonLoadSettings settings);
    public static JArray Parse(string json);
    public static JArray Parse(string json, JsonLoadSettings settings);
    public static JArray FromObject(object o);
    public static JArray FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(int index);
    public sealed virtual void set_Item(int index, JToken value);
    internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    public sealed virtual int IndexOf(JToken item);
    public sealed virtual void Insert(int index, JToken item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator`1<JToken> GetEnumerator();
    public sealed virtual void Add(JToken item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(JToken item);
    public sealed virtual void CopyTo(JToken[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(JToken item);
    internal virtual int GetDeepHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JConstructor : JContainer {
    private string _name;
    private List`1<JToken> _values;
    protected IList`1<JToken> ChildrenTokens { get; }
    public string Name { get; public set; }
    public JTokenType Type { get; }
    public JToken Item { get; public set; }
    public JConstructor(JConstructor other);
    public JConstructor(string name, Object[] content);
    public JConstructor(string name, object content);
    public JConstructor(string name);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    public string get_Name();
    public void set_Name(string value);
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    internal virtual int GetDeepHashCode();
    public static JConstructor Load(JsonReader reader);
    public static JConstructor Load(JsonReader reader, JsonLoadSettings settings);
}
internal abstract class Newtonsoft.Json.Linq.JContainer : JToken {
    internal ListChangedEventHandler _listChanged;
    internal AddingNewEventHandler _addingNew;
    internal NotifyCollectionChangedEventHandler _collectionChanged;
    private object _syncRoot;
    private bool _busy;
    protected IList`1<JToken> ChildrenTokens { get; }
    public bool HasValues { get; }
    public JToken First { get; }
    public JToken Last { get; }
    private JToken System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    internal JContainer(JContainer other);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public void add_AddingNew(AddingNewEventHandler value);
    public void remove_AddingNew(AddingNewEventHandler value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected abstract virtual IList`1<JToken> get_ChildrenTokens();
    internal void CheckReentrancy();
    internal virtual IList`1<JToken> CreateChildrenCollection();
    protected virtual void OnAddingNew(AddingNewEventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public virtual bool get_HasValues();
    internal bool ContentsEqual(JContainer container);
    public virtual JToken get_First();
    public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    public virtual IEnumerable`1<T> Values();
    public IEnumerable`1<JToken> Descendants();
    public IEnumerable`1<JToken> DescendantsAndSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JContainer/<GetDescendants>d__34")]
internal IEnumerable`1<JToken> GetDescendants(bool self);
    internal bool IsMultiContent(object content);
    internal JToken EnsureParentToken(JToken item, bool skipParentCheck);
    internal abstract virtual int IndexOfItem(JToken item);
    internal virtual void InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void RemoveItemAt(int index);
    internal virtual bool RemoveItem(JToken item);
    internal virtual JToken GetItem(int index);
    internal virtual void SetItem(int index, JToken item);
    internal virtual void ClearItems();
    internal virtual void ReplaceItem(JToken existing, JToken replacement);
    internal virtual bool ContainsItem(JToken item);
    internal virtual void CopyItemsTo(Array array, int arrayIndex);
    internal static bool IsTokenUnchanged(JToken currentValue, JToken newValue);
    internal virtual void ValidateToken(JToken o, JToken existing);
    public virtual void Add(object content);
    internal void AddAndSkipParentCheck(JToken token);
    public void AddFirst(object content);
    internal void AddInternal(int index, object content, bool skipParentCheck);
    internal static JToken CreateFromContent(object content);
    public JsonWriter CreateWriter();
    public void ReplaceAll(object content);
    public void RemoveAll();
    internal abstract virtual void MergeItem(object content, JsonMergeSettings settings);
    public void Merge(object content);
    public void Merge(object content, JsonMergeSettings settings);
    internal void ReadTokenFrom(JsonReader reader, JsonLoadSettings options);
    internal void ReadContentFrom(JsonReader r, JsonLoadSettings settings);
    internal int ContentsHashCode();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override int System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.IndexOf(JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Insert(int index, JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.RemoveAt(int index);
    private sealed virtual override JToken System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.set_Item(int index, JToken value);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Add(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Contains(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Remove(JToken item);
    private JToken EnsureValue(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    internal static void MergeEnumerableContent(JContainer target, IEnumerable content, JsonMergeSettings settings);
}
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JEnumerable`1 : ValueType {
    public static JEnumerable`1<T> Empty;
    private IEnumerable`1<T> _enumerable;
    public IJEnumerable`1<JToken> Item { get; }
    public JEnumerable`1(IEnumerable`1<T> enumerable);
    private static JEnumerable`1();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IJEnumerable`1<JToken> get_Item(object key);
    public sealed virtual bool Equals(JEnumerable`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JObject : JContainer {
    private JPropertyKeyedCollection _properties;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    public JToken Item { get; public set; }
    public JToken Item { get; public set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Keys { get; }
    private ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.IsReadOnly { get; }
    public JObject(JObject other);
    public JObject(Object[] content);
    public JObject(object content);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    internal virtual bool DeepEquals(JToken node);
    internal virtual int IndexOfItem(JToken item);
    internal virtual void InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void ValidateToken(JToken o, JToken existing);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    internal void InternalPropertyChanged(JProperty childProperty);
    internal void InternalPropertyChanging(JProperty childProperty);
    internal virtual JToken CloneToken();
    public virtual JTokenType get_Type();
    public IEnumerable`1<JProperty> Properties();
    public JProperty Property(string name);
    public JEnumerable`1<JToken> PropertyValues();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(string propertyName);
    public sealed virtual void set_Item(string propertyName, JToken value);
    public static JObject Load(JsonReader reader);
    public static JObject Load(JsonReader reader, JsonLoadSettings settings);
    public static JObject Parse(string json);
    public static JObject Parse(string json, JsonLoadSettings settings);
    public static JObject FromObject(object o);
    public static JObject FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public JToken GetValue(string propertyName);
    public JToken GetValue(string propertyName, StringComparison comparison);
    public bool TryGetValue(string propertyName, StringComparison comparison, JToken& value);
    public sealed virtual void Add(string propertyName, JToken value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.ContainsKey(string key);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.get_Keys();
    public sealed virtual bool Remove(string propertyName);
    public sealed virtual bool TryGetValue(string propertyName, JToken& value);
    private sealed virtual override ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Add(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Contains(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Remove(KeyValuePair`2<string, JToken> item);
    internal virtual int GetDeepHashCode();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JObject/<GetEnumerator>d__58")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, JToken>> GetEnumerator();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanging(string propertyName);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
}
internal class Newtonsoft.Json.Linq.JProperty : JContainer {
    private JPropertyList _content;
    private string _name;
    protected IList`1<JToken> ChildrenTokens { get; }
    public string Name { get; }
    public JToken Value { get; public set; }
    public JTokenType Type { get; }
    public JProperty(JProperty other);
    internal JProperty(string name);
    public JProperty(string name, Object[] content);
    public JProperty(string name, object content);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public JToken get_Value();
    public void set_Value(JToken value);
    internal virtual JToken GetItem(int index);
    internal virtual void SetItem(int index, JToken item);
    internal virtual bool RemoveItem(JToken item);
    internal virtual void RemoveItemAt(int index);
    internal virtual int IndexOfItem(JToken item);
    internal virtual void InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual bool ContainsItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    internal virtual void ClearItems();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    [DebuggerStepThroughAttribute]
public virtual JTokenType get_Type();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    public static JProperty Load(JsonReader reader);
    public static JProperty Load(JsonReader reader, JsonLoadSettings settings);
}
internal class Newtonsoft.Json.Linq.JPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    protected int NameHashCode { get; }
    public JPropertyDescriptor(string name);
    private static JObject CastInstance(object instance);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    protected virtual int get_NameHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JPropertyKeyedCollection : Collection`1<JToken> {
    private static IEqualityComparer`1<string> Comparer;
    private Dictionary`2<string, JToken> _dictionary;
    public JToken Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<JToken> Values { get; }
    private static JPropertyKeyedCollection();
    private void AddKey(string key, JToken item);
    protected void ChangeItemKey(JToken item, string newKey);
    protected virtual void ClearItems();
    public bool Contains(string key);
    private bool ContainsItem(JToken item);
    private void EnsureDictionary();
    private string GetKeyForItem(JToken item);
    protected virtual void InsertItem(int index, JToken item);
    public bool Remove(string key);
    protected virtual void RemoveItem(int index);
    private void RemoveKey(string key);
    protected virtual void SetItem(int index, JToken item);
    public JToken get_Item(string key);
    public bool TryGetValue(string key, JToken& value);
    public ICollection`1<string> get_Keys();
    public ICollection`1<JToken> get_Values();
    public int IndexOfReference(JToken t);
    public bool Compare(JPropertyKeyedCollection other);
}
internal class Newtonsoft.Json.Linq.JRaw : JValue {
    public JRaw(JRaw other);
    public JRaw(object rawJson);
    public static JRaw Create(JsonReader reader);
    internal virtual JToken CloneToken();
}
internal class Newtonsoft.Json.Linq.JsonLoadSettings : object {
    private CommentHandling _commentHandling;
    private LineInfoHandling _lineInfoHandling;
    public CommentHandling CommentHandling { get; public set; }
    public LineInfoHandling LineInfoHandling { get; public set; }
    public CommentHandling get_CommentHandling();
    public void set_CommentHandling(CommentHandling value);
    public LineInfoHandling get_LineInfoHandling();
    public void set_LineInfoHandling(LineInfoHandling value);
}
internal class Newtonsoft.Json.Linq.JsonMergeSettings : object {
    private MergeArrayHandling _mergeArrayHandling;
    private MergeNullValueHandling _mergeNullValueHandling;
    public MergeArrayHandling MergeArrayHandling { get; public set; }
    public MergeNullValueHandling MergeNullValueHandling { get; public set; }
    public MergeArrayHandling get_MergeArrayHandling();
    public void set_MergeArrayHandling(MergeArrayHandling value);
    public MergeNullValueHandling get_MergeNullValueHandling();
    public void set_MergeNullValueHandling(MergeNullValueHandling value);
}
internal class Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter : PathFilter {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    public Nullable`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter : PathFilter {
    [CompilerGeneratedAttribute]
private List`1<int> <Indexes>k__BackingField;
    public List`1<int> Indexes { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<int> get_Indexes();
    [CompilerGeneratedAttribute]
public void set_Indexes(List`1<int> value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter : PathFilter {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Step>k__BackingField;
    public Nullable`1<int> Start { get; public set; }
    public Nullable`1<int> End { get; public set; }
    public Nullable`1<int> Step { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_End();
    [CompilerGeneratedAttribute]
public void set_End(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(Nullable`1<int> value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter/<ExecuteFilter>d__12")]
public virtual IEnumerable`1<JToken> ExecuteFilter(IEnumerable`1<JToken> current, bool errorWhenNoMatch);
    private bool IsValid(int index, int stopIndex, bool positiveStep);
}
internal class Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression : QueryExpression {
    [CompilerGeneratedAttribute]
private List`1<PathFilter> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private JValue <Value>k__BackingField;
    public List`1<PathFilter> Path { get; public set; }
    public JValue Value { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<PathFilter> get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(List`1<PathFilter> value);
    [CompilerGeneratedAttribute]
public JValue get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(JValue value);
    public virtual bool IsMatch(JToken t);
    private bool EqualsWithStringCoercion(JValue value, JValue queryValue);
}
internal class Newtonsoft.Json.Linq.JsonPath.CompositeExpression : QueryExpression {
    [CompilerGeneratedAttribute]
private List`1<QueryExpression> <Expressions>k__BackingField;
    public List`1<QueryExpression> Expressions { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<QueryExpression> get_Expressions();
    [CompilerGeneratedAttribute]
public void set_Expressions(List`1<QueryExpression> value);
    public virtual bool IsMatch(JToken t);
}
internal class Newtonsoft.Json.Linq.JsonPath.FieldFilter : PathFilter {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.FieldFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter : PathFilter {
    [CompilerGeneratedAttribute]
private List`1<string> <Names>k__BackingField;
    public List`1<string> Names { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Names();
    [CompilerGeneratedAttribute]
public void set_Names(List`1<string> value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Newtonsoft.Json.Linq.JsonPath.JPath : object {
    private string _expression;
    [CompilerGeneratedAttribute]
private List`1<PathFilter> <Filters>k__BackingField;
    private int _currentIndex;
    public List`1<PathFilter> Filters { get; private set; }
    public JPath(string expression);
    [CompilerGeneratedAttribute]
public List`1<PathFilter> get_Filters();
    [CompilerGeneratedAttribute]
private void set_Filters(List`1<PathFilter> value);
    private void ParseMain();
    private bool ParsePath(List`1<PathFilter> filters, int currentPartStartIndex, bool query);
    private PathFilter ParseIndexer(char indexerOpenChar);
    private PathFilter ParseArrayIndexer(char indexerCloseChar);
    private void EatWhitespace();
    private PathFilter ParseQuery(char indexerCloseChar);
    private QueryExpression ParseExpression();
    private object ParseValue();
    private string ReadQuotedString();
    private bool Match(string s);
    private QueryOperator ParseOperator();
    private PathFilter ParseQuotedField(char indexerCloseChar);
    private void EnsureLength(string message);
    internal IEnumerable`1<JToken> Evaluate(JToken t, bool errorWhenNoMatch);
    internal static IEnumerable`1<JToken> Evaluate(List`1<PathFilter> filters, JToken t, bool errorWhenNoMatch);
}
internal abstract class Newtonsoft.Json.Linq.JsonPath.PathFilter : object {
    public abstract virtual IEnumerable`1<JToken> ExecuteFilter(IEnumerable`1<JToken> current, bool errorWhenNoMatch);
    protected static JToken GetTokenIndex(JToken t, bool errorWhenNoMatch, int index);
}
internal abstract class Newtonsoft.Json.Linq.JsonPath.QueryExpression : object {
    [CompilerGeneratedAttribute]
private QueryOperator <Operator>k__BackingField;
    public QueryOperator Operator { get; public set; }
    [CompilerGeneratedAttribute]
public QueryOperator get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(QueryOperator value);
    public abstract virtual bool IsMatch(JToken t);
}
internal class Newtonsoft.Json.Linq.JsonPath.QueryFilter : PathFilter {
    [CompilerGeneratedAttribute]
private QueryExpression <Expression>k__BackingField;
    public QueryExpression Expression { get; public set; }
    [CompilerGeneratedAttribute]
public QueryExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(QueryExpression value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.QueryFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal enum Newtonsoft.Json.Linq.JsonPath.QueryOperator : Enum {
    public int value__;
    public static QueryOperator None;
    public static QueryOperator Equals;
    public static QueryOperator NotEquals;
    public static QueryOperator Exists;
    public static QueryOperator LessThan;
    public static QueryOperator LessThanOrEquals;
    public static QueryOperator GreaterThan;
    public static QueryOperator GreaterThanOrEquals;
    public static QueryOperator And;
    public static QueryOperator Or;
}
internal class Newtonsoft.Json.Linq.JsonPath.ScanFilter : PathFilter {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ScanFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
[DefaultMemberAttribute("Item")]
internal abstract class Newtonsoft.Json.Linq.JToken : object {
    private static JTokenEqualityComparer _equalityComparer;
    private JContainer _parent;
    private JToken _previous;
    private JToken _next;
    private object _annotations;
    private static JTokenType[] BooleanTypes;
    private static JTokenType[] NumberTypes;
    private static JTokenType[] BigIntegerTypes;
    private static JTokenType[] StringTypes;
    private static JTokenType[] GuidTypes;
    private static JTokenType[] TimeSpanTypes;
    private static JTokenType[] UriTypes;
    private static JTokenType[] CharTypes;
    private static JTokenType[] DateTimeTypes;
    private static JTokenType[] BytesTypes;
    public static JTokenEqualityComparer EqualityComparer { get; }
    public JContainer Parent { get; internal set; }
    public JToken Root { get; }
    public JTokenType Type { get; }
    public bool HasValues { get; }
    public JToken Next { get; internal set; }
    public JToken Previous { get; internal set; }
    public string Path { get; }
    public JToken Item { get; public set; }
    public JToken First { get; }
    public JToken Last { get; }
    private IJEnumerable`1<JToken> Newtonsoft.Json.Linq.IJEnumerable<Newtonsoft.Json.Linq.JToken>.Item { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    private static JToken();
    public static JTokenEqualityComparer get_EqualityComparer();
    [DebuggerStepThroughAttribute]
public JContainer get_Parent();
    internal void set_Parent(JContainer value);
    public JToken get_Root();
    internal abstract virtual JToken CloneToken();
    internal abstract virtual bool DeepEquals(JToken node);
    public abstract virtual JTokenType get_Type();
    public abstract virtual bool get_HasValues();
    public static bool DeepEquals(JToken t1, JToken t2);
    public JToken get_Next();
    internal void set_Next(JToken value);
    public JToken get_Previous();
    internal void set_Previous(JToken value);
    public string get_Path();
    public void AddAfterSelf(object content);
    public void AddBeforeSelf(object content);
    public IEnumerable`1<JToken> Ancestors();
    public IEnumerable`1<JToken> AncestorsAndSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<GetAncestors>d__42")]
internal IEnumerable`1<JToken> GetAncestors(bool self);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<AfterSelf>d__43")]
public IEnumerable`1<JToken> AfterSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<BeforeSelf>d__44")]
public IEnumerable`1<JToken> BeforeSelf();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public virtual T Value(object key);
    public virtual JToken get_First();
    public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    public JEnumerable`1<T> Children();
    public virtual IEnumerable`1<T> Values();
    public void Remove();
    public void Replace(JToken value);
    public abstract virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual string ToString();
    public string ToString(Formatting formatting, JsonConverter[] converters);
    private static JValue EnsureValue(JToken value);
    private static string GetType(JToken token);
    private static bool ValidateToken(JToken o, JTokenType[] validTypes, bool nullable);
    public static bool op_Explicit(JToken value);
    public static DateTimeOffset op_Explicit(JToken value);
    public static Nullable`1<bool> op_Explicit(JToken value);
    public static long op_Explicit(JToken value);
    public static Nullable`1<DateTime> op_Explicit(JToken value);
    public static Nullable`1<DateTimeOffset> op_Explicit(JToken value);
    public static Nullable`1<decimal> op_Explicit(JToken value);
    public static Nullable`1<double> op_Explicit(JToken value);
    public static Nullable`1<char> op_Explicit(JToken value);
    public static int op_Explicit(JToken value);
    public static short op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static char op_Explicit(JToken value);
    public static byte op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(JToken value);
    public static Nullable`1<int> op_Explicit(JToken value);
    public static Nullable`1<short> op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> op_Explicit(JToken value);
    public static Nullable`1<byte> op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> op_Explicit(JToken value);
    public static DateTime op_Explicit(JToken value);
    public static Nullable`1<long> op_Explicit(JToken value);
    public static Nullable`1<float> op_Explicit(JToken value);
    public static decimal op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> op_Explicit(JToken value);
    public static double op_Explicit(JToken value);
    public static float op_Explicit(JToken value);
    public static string op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(JToken value);
    public static Byte[] op_Explicit(JToken value);
    public static Guid op_Explicit(JToken value);
    public static Nullable`1<Guid> op_Explicit(JToken value);
    public static TimeSpan op_Explicit(JToken value);
    public static Nullable`1<TimeSpan> op_Explicit(JToken value);
    public static Uri op_Explicit(JToken value);
    private static BigInteger ToBigInteger(JToken value);
    private static Nullable`1<BigInteger> ToBigIntegerNullable(JToken value);
    public static JToken op_Implicit(bool value);
    public static JToken op_Implicit(DateTimeOffset value);
    public static JToken op_Implicit(byte value);
    public static JToken op_Implicit(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(sbyte value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<sbyte> value);
    public static JToken op_Implicit(Nullable`1<bool> value);
    public static JToken op_Implicit(long value);
    public static JToken op_Implicit(Nullable`1<DateTime> value);
    public static JToken op_Implicit(Nullable`1<DateTimeOffset> value);
    public static JToken op_Implicit(Nullable`1<decimal> value);
    public static JToken op_Implicit(Nullable`1<double> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(short value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(ushort value);
    public static JToken op_Implicit(int value);
    public static JToken op_Implicit(Nullable`1<int> value);
    public static JToken op_Implicit(DateTime value);
    public static JToken op_Implicit(Nullable`1<long> value);
    public static JToken op_Implicit(Nullable`1<float> value);
    public static JToken op_Implicit(decimal value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<short> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<ulong> value);
    public static JToken op_Implicit(double value);
    public static JToken op_Implicit(float value);
    public static JToken op_Implicit(string value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(ulong value);
    public static JToken op_Implicit(Byte[] value);
    public static JToken op_Implicit(Uri value);
    public static JToken op_Implicit(TimeSpan value);
    public static JToken op_Implicit(Nullable`1<TimeSpan> value);
    public static JToken op_Implicit(Guid value);
    public static JToken op_Implicit(Nullable`1<Guid> value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator();
    internal abstract virtual int GetDeepHashCode();
    private sealed virtual override IJEnumerable`1<JToken> Newtonsoft.Json.Linq.IJEnumerable<Newtonsoft.Json.Linq.JToken>.get_Item(object key);
    public JsonReader CreateReader();
    internal static JToken FromObjectInternal(object o, JsonSerializer jsonSerializer);
    public static JToken FromObject(object o);
    public static JToken FromObject(object o, JsonSerializer jsonSerializer);
    public T ToObject();
    public object ToObject(Type objectType);
    public T ToObject(JsonSerializer jsonSerializer);
    public object ToObject(Type objectType, JsonSerializer jsonSerializer);
    public static JToken ReadFrom(JsonReader reader);
    public static JToken ReadFrom(JsonReader reader, JsonLoadSettings settings);
    public static JToken Parse(string json);
    public static JToken Parse(string json, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader);
    internal void SetLineInfo(IJsonLineInfo lineInfo, JsonLoadSettings settings);
    internal void SetLineInfo(int lineNumber, int linePosition);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
    public JToken SelectToken(string path);
    public JToken SelectToken(string path, bool errorWhenNoMatch);
    public IEnumerable`1<JToken> SelectTokens(string path);
    public IEnumerable`1<JToken> SelectTokens(string path, bool errorWhenNoMatch);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override object System.ICloneable.Clone();
    public JToken DeepClone();
    public void AddAnnotation(object annotation);
    public T Annotation();
    public object Annotation(Type type);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<Annotations>d__176`1")]
public IEnumerable`1<T> Annotations();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<Annotations>d__177")]
public IEnumerable`1<object> Annotations(Type type);
    public void RemoveAnnotations();
    public void RemoveAnnotations(Type type);
}
internal class Newtonsoft.Json.Linq.JTokenEqualityComparer : object {
    public sealed virtual bool Equals(JToken x, JToken y);
    public sealed virtual int GetHashCode(JToken obj);
}
internal class Newtonsoft.Json.Linq.JTokenReader : JsonReader {
    private JToken _root;
    private string _initialPath;
    private JToken _parent;
    private JToken _current;
    public JToken CurrentToken { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public string Path { get; }
    public JTokenReader(JToken token);
    internal JTokenReader(JToken token, string initialPath);
    public JToken get_CurrentToken();
    public virtual bool Read();
    private bool ReadOver(JToken t);
    private bool ReadToEnd();
    private Nullable`1<JsonToken> GetEndToken(JContainer c);
    private bool ReadInto(JContainer c);
    private bool SetEnd(JContainer c);
    private void SetToken(JToken token);
    private string SafeToString(object value);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
    public virtual string get_Path();
}
internal enum Newtonsoft.Json.Linq.JTokenType : Enum {
    public int value__;
    public static JTokenType None;
    public static JTokenType Object;
    public static JTokenType Array;
    public static JTokenType Constructor;
    public static JTokenType Property;
    public static JTokenType Comment;
    public static JTokenType Integer;
    public static JTokenType Float;
    public static JTokenType String;
    public static JTokenType Boolean;
    public static JTokenType Null;
    public static JTokenType Undefined;
    public static JTokenType Date;
    public static JTokenType Raw;
    public static JTokenType Bytes;
    public static JTokenType Guid;
    public static JTokenType Uri;
    public static JTokenType TimeSpan;
}
internal class Newtonsoft.Json.Linq.JTokenWriter : JsonWriter {
    private JContainer _token;
    private JContainer _parent;
    private JValue _value;
    private JToken _current;
    public JToken CurrentToken { get; }
    public JToken Token { get; }
    public JTokenWriter(JContainer container);
    public JToken get_CurrentToken();
    public JToken get_Token();
    public virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    private void AddParent(JContainer container);
    private void RemoveParent();
    public virtual void WriteStartArray();
    public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WritePropertyName(string name);
    private void AddValue(object value, JsonToken token);
    internal void AddValue(JValue value, JsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteComment(string text);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Uri value);
    internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
}
internal class Newtonsoft.Json.Linq.JValue : JToken {
    private JTokenType _valueType;
    private object _value;
    public bool HasValues { get; }
    public JTokenType Type { get; }
    public object Value { get; public set; }
    internal JValue(object value, JTokenType type);
    public JValue(JValue other);
    public JValue(long value);
    public JValue(decimal value);
    public JValue(char value);
    [CLSCompliantAttribute("False")]
public JValue(ulong value);
    public JValue(double value);
    public JValue(float value);
    public JValue(DateTime value);
    public JValue(DateTimeOffset value);
    public JValue(bool value);
    public JValue(string value);
    public JValue(Guid value);
    public JValue(Uri value);
    public JValue(TimeSpan value);
    public JValue(object value);
    internal virtual bool DeepEquals(JToken node);
    public virtual bool get_HasValues();
    private static int CompareBigInteger(BigInteger i1, object i2);
    internal static int Compare(JTokenType valueType, object objA, object objB);
    private static int CompareFloat(object objA, object objB);
    private static bool Operation(ExpressionType operation, object objA, object objB, Object& result);
    internal virtual JToken CloneToken();
    public static JValue CreateComment(string value);
    public static JValue CreateString(string value);
    public static JValue CreateNull();
    public static JValue CreateUndefined();
    private static JTokenType GetValueType(Nullable`1<JTokenType> current, object value);
    private static JTokenType GetStringValueType(Nullable`1<JTokenType> current);
    public virtual JTokenType get_Type();
    public object get_Value();
    public void set_Value(object value);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    private static bool ValuesEquals(JValue v1, JValue v2);
    public sealed virtual bool Equals(JValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(string format);
    public sealed virtual string ToString(IFormatProvider formatProvider);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual int CompareTo(JValue obj);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
}
internal enum Newtonsoft.Json.Linq.LineInfoHandling : Enum {
    public int value__;
    public static LineInfoHandling Ignore;
    public static LineInfoHandling Load;
}
internal enum Newtonsoft.Json.Linq.MergeArrayHandling : Enum {
    public int value__;
    public static MergeArrayHandling Concat;
    public static MergeArrayHandling Union;
    public static MergeArrayHandling Replace;
    public static MergeArrayHandling Merge;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.Linq.MergeNullValueHandling : Enum {
    public int value__;
    public static MergeNullValueHandling Ignore;
    public static MergeNullValueHandling Merge;
}
internal enum Newtonsoft.Json.MemberSerialization : Enum {
    public int value__;
    public static MemberSerialization OptOut;
    public static MemberSerialization OptIn;
    public static MemberSerialization Fields;
}
internal enum Newtonsoft.Json.MetadataPropertyHandling : Enum {
    public int value__;
    public static MetadataPropertyHandling Default;
    public static MetadataPropertyHandling ReadAhead;
    public static MetadataPropertyHandling Ignore;
}
internal enum Newtonsoft.Json.MissingMemberHandling : Enum {
    public int value__;
    public static MissingMemberHandling Ignore;
    public static MissingMemberHandling Error;
}
internal enum Newtonsoft.Json.NullValueHandling : Enum {
    public int value__;
    public static NullValueHandling Include;
    public static NullValueHandling Ignore;
}
internal enum Newtonsoft.Json.ObjectCreationHandling : Enum {
    public int value__;
    public static ObjectCreationHandling Auto;
    public static ObjectCreationHandling Reuse;
    public static ObjectCreationHandling Replace;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.PreserveReferencesHandling : Enum {
    public int value__;
    public static PreserveReferencesHandling None;
    public static PreserveReferencesHandling Objects;
    public static PreserveReferencesHandling Arrays;
    public static PreserveReferencesHandling All;
}
internal enum Newtonsoft.Json.ReadType : Enum {
    public int value__;
    public static ReadType Read;
    public static ReadType ReadAsInt32;
    public static ReadType ReadAsBytes;
    public static ReadType ReadAsString;
    public static ReadType ReadAsDecimal;
    public static ReadType ReadAsDateTime;
    public static ReadType ReadAsDateTimeOffset;
    public static ReadType ReadAsDouble;
    public static ReadType ReadAsBoolean;
}
internal enum Newtonsoft.Json.ReferenceLoopHandling : Enum {
    public int value__;
    public static ReferenceLoopHandling Error;
    public static ReferenceLoopHandling Ignore;
    public static ReferenceLoopHandling Serialize;
}
internal enum Newtonsoft.Json.Required : Enum {
    public int value__;
    public static Required Default;
    public static Required AllowNull;
    public static Required Always;
    public static Required DisallowNull;
}
[ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal static class Newtonsoft.Json.Schema.Extensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
public static bool IsValid(JToken source, JsonSchema schema);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
public static bool IsValid(JToken source, JsonSchema schema, IList`1& errorMessages);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
public static void Validate(JToken source, JsonSchema schema);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
public static void Validate(JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchema : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Transient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSchemaType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DivisibleBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExclusiveMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExclusiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionalItemsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchema <AdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchema> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchema <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchema> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Requires>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JToken> <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSchemaType> <Disallow>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <Extends>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    private string _internalId;
    [CompilerGeneratedAttribute]
private string <DeferredReference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferencesResolved>k__BackingField;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public Nullable`1<bool> Required { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public Nullable`1<bool> Transient { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<JsonSchemaType> Type { get; public set; }
    public string Pattern { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public Nullable`1<bool> ExclusiveMinimum { get; public set; }
    public Nullable`1<bool> ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<JsonSchema> Items { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public JsonSchema AdditionalItems { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IDictionary`2<string, JsonSchema> Properties { get; public set; }
    public JsonSchema AdditionalProperties { get; public set; }
    public IDictionary`2<string, JsonSchema> PatternProperties { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public string Requires { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public Nullable`1<JsonSchemaType> Disallow { get; public set; }
    public JToken Default { get; public set; }
    public IList`1<JsonSchema> Extends { get; public set; }
    public string Format { get; public set; }
    internal string Location { get; internal set; }
    internal string InternalId { get; }
    internal string DeferredReference { get; internal set; }
    internal bool ReferencesResolved { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Transient();
    [CompilerGeneratedAttribute]
public void set_Transient(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchema value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchema value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_Requires();
    [CompilerGeneratedAttribute]
public void set_Requires(string value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public JToken get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(JToken value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Extends();
    [CompilerGeneratedAttribute]
public void set_Extends(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
internal string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    internal string get_InternalId();
    [CompilerGeneratedAttribute]
internal string get_DeferredReference();
    [CompilerGeneratedAttribute]
internal void set_DeferredReference(string value);
    [CompilerGeneratedAttribute]
internal bool get_ReferencesResolved();
    [CompilerGeneratedAttribute]
internal void set_ReferencesResolved(bool value);
    public static JsonSchema Read(JsonReader reader);
    public static JsonSchema Read(JsonReader reader, JsonSchemaResolver resolver);
    public static JsonSchema Parse(string json);
    public static JsonSchema Parse(string json, JsonSchemaResolver resolver);
    public void WriteTo(JsonWriter writer);
    public void WriteTo(JsonWriter writer, JsonSchemaResolver resolver);
    public virtual string ToString();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaBuilder : object {
    private IList`1<JsonSchema> _stack;
    private JsonSchemaResolver _resolver;
    private IDictionary`2<string, JsonSchema> _documentSchemas;
    private JsonSchema _currentSchema;
    private JObject _rootSchema;
    private JsonSchema CurrentSchema { get; }
    public JsonSchemaBuilder(JsonSchemaResolver resolver);
    private void Push(JsonSchema value);
    private JsonSchema Pop();
    private JsonSchema get_CurrentSchema();
    internal JsonSchema Read(JsonReader reader);
    private string UnescapeReference(string reference);
    private JsonSchema ResolveReferences(JsonSchema schema);
    private JsonSchema BuildSchema(JToken token);
    private void ProcessSchemaProperties(JObject schemaObject);
    private void ProcessExtends(JToken token);
    private void ProcessEnum(JToken token);
    private void ProcessAdditionalProperties(JToken token);
    private void ProcessAdditionalItems(JToken token);
    private IDictionary`2<string, JsonSchema> ProcessProperties(JToken token);
    private void ProcessItems(JToken token);
    private Nullable`1<JsonSchemaType> ProcessType(JToken token);
    internal static JsonSchemaType MapType(string type);
    internal static string MapType(JsonSchemaType type);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal static class Newtonsoft.Json.Schema.JsonSchemaConstants : object {
    public static string TypePropertyName;
    public static string PropertiesPropertyName;
    public static string ItemsPropertyName;
    public static string AdditionalItemsPropertyName;
    public static string RequiredPropertyName;
    public static string PatternPropertiesPropertyName;
    public static string AdditionalPropertiesPropertyName;
    public static string RequiresPropertyName;
    public static string MinimumPropertyName;
    public static string MaximumPropertyName;
    public static string ExclusiveMinimumPropertyName;
    public static string ExclusiveMaximumPropertyName;
    public static string MinimumItemsPropertyName;
    public static string MaximumItemsPropertyName;
    public static string PatternPropertyName;
    public static string MaximumLengthPropertyName;
    public static string MinimumLengthPropertyName;
    public static string EnumPropertyName;
    public static string ReadOnlyPropertyName;
    public static string TitlePropertyName;
    public static string DescriptionPropertyName;
    public static string FormatPropertyName;
    public static string DefaultPropertyName;
    public static string TransientPropertyName;
    public static string DivisibleByPropertyName;
    public static string HiddenPropertyName;
    public static string DisallowPropertyName;
    public static string ExtendsPropertyName;
    public static string IdPropertyName;
    public static string UniqueItemsPropertyName;
    public static string OptionValuePropertyName;
    public static string OptionLabelPropertyName;
    public static IDictionary`2<string, JsonSchemaType> JsonSchemaTypeMapping;
    private static JsonSchemaConstants();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; private set; }
    public int LinePosition { get; private set; }
    public string Path { get; private set; }
    public JsonSchemaException(string message);
    public JsonSchemaException(string message, Exception innerException);
    public JsonSchemaException(SerializationInfo info, StreamingContext context);
    internal JsonSchemaException(string message, Exception innerException, string path, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
private void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaGenerator : object {
    [CompilerGeneratedAttribute]
private UndefinedSchemaIdHandling <UndefinedSchemaIdHandling>k__BackingField;
    private IContractResolver _contractResolver;
    private JsonSchemaResolver _resolver;
    private IList`1<TypeSchema> _stack;
    private JsonSchema _currentSchema;
    public UndefinedSchemaIdHandling UndefinedSchemaIdHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    private JsonSchema CurrentSchema { get; }
    [CompilerGeneratedAttribute]
public UndefinedSchemaIdHandling get_UndefinedSchemaIdHandling();
    [CompilerGeneratedAttribute]
public void set_UndefinedSchemaIdHandling(UndefinedSchemaIdHandling value);
    public IContractResolver get_ContractResolver();
    public void set_ContractResolver(IContractResolver value);
    private JsonSchema get_CurrentSchema();
    private void Push(TypeSchema typeSchema);
    private TypeSchema Pop();
    public JsonSchema Generate(Type type);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver);
    public JsonSchema Generate(Type type, bool rootSchemaNullable);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver, bool rootSchemaNullable);
    private string GetTitle(Type type);
    private string GetDescription(Type type);
    private string GetTypeId(Type type, bool explicitOnly);
    private JsonSchema GenerateInternal(Type type, Required valueRequired, bool required);
    private JsonSchemaType AddNullType(JsonSchemaType type, Required valueRequired);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private void GenerateObjectSchema(Type type, JsonObjectContract contract);
    private void GenerateISerializableContract(Type type, JsonISerializableContract contract);
    internal static bool HasFlag(Nullable`1<JsonSchemaType> value, JsonSchemaType flag);
    private JsonSchemaType GetJsonSchemaType(Type type, Required valueRequired);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaModel : object {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DivisibleBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Patterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchemaModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchemaModel> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchemaModel> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaModel <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaModel <AdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionalItemsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JToken> <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaType <Disallow>k__BackingField;
    public bool Required { get; public set; }
    public JsonSchemaType Type { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public bool ExclusiveMinimum { get; public set; }
    public bool ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<string> Patterns { get; public set; }
    public IList`1<JsonSchemaModel> Items { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> Properties { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> PatternProperties { get; public set; }
    public JsonSchemaModel AdditionalProperties { get; public set; }
    public JsonSchemaModel AdditionalItems { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public JsonSchemaType Disallow { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(JsonSchemaType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Patterns();
    [CompilerGeneratedAttribute]
public void set_Patterns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchemaModel> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(JsonSchemaType value);
    public static JsonSchemaModel Create(IList`1<JsonSchema> schemata);
    private static void Combine(JsonSchemaModel model, JsonSchema schema);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaModelBuilder : object {
    private JsonSchemaNodeCollection _nodes;
    private Dictionary`2<JsonSchemaNode, JsonSchemaModel> _nodeModels;
    private JsonSchemaNode _node;
    public JsonSchemaModel Build(JsonSchema schema);
    public JsonSchemaNode AddSchema(JsonSchemaNode existingNode, JsonSchema schema);
    public void AddProperties(IDictionary`2<string, JsonSchema> source, IDictionary`2<string, JsonSchemaNode> target);
    public void AddProperty(IDictionary`2<string, JsonSchemaNode> target, string propertyName, JsonSchema schema);
    public void AddItem(JsonSchemaNode parentNode, int index, JsonSchema schema);
    public void AddAdditionalProperties(JsonSchemaNode parentNode, JsonSchema schema);
    public void AddAdditionalItems(JsonSchemaNode parentNode, JsonSchema schema);
    private JsonSchemaModel BuildNodeModel(JsonSchemaNode node);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaNode : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<JsonSchema> <Schemas>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonSchemaNode> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonSchemaNode> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JsonSchemaNode> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaNode <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaNode <AdditionalItems>k__BackingField;
    public string Id { get; private set; }
    public ReadOnlyCollection`1<JsonSchema> Schemas { get; private set; }
    public Dictionary`2<string, JsonSchemaNode> Properties { get; private set; }
    public Dictionary`2<string, JsonSchemaNode> PatternProperties { get; private set; }
    public List`1<JsonSchemaNode> Items { get; private set; }
    public JsonSchemaNode AdditionalProperties { get; public set; }
    public JsonSchemaNode AdditionalItems { get; public set; }
    public JsonSchemaNode(JsonSchema schema);
    private JsonSchemaNode(JsonSchemaNode source, JsonSchema schema);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<JsonSchema> get_Schemas();
    [CompilerGeneratedAttribute]
private void set_Schemas(ReadOnlyCollection`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(Dictionary`2<string, JsonSchemaNode> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_PatternProperties();
    [CompilerGeneratedAttribute]
private void set_PatternProperties(Dictionary`2<string, JsonSchemaNode> value);
    [CompilerGeneratedAttribute]
public List`1<JsonSchemaNode> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(List`1<JsonSchemaNode> value);
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaNode value);
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaNode value);
    public JsonSchemaNode Combine(JsonSchema schema);
    public static string GetId(IEnumerable`1<JsonSchema> schemata);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaNodeCollection : KeyedCollection`2<string, JsonSchemaNode> {
    protected virtual string GetKeyForItem(JsonSchemaNode item);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaResolver : object {
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <LoadedSchemas>k__BackingField;
    public IList`1<JsonSchema> LoadedSchemas { get; protected set; }
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_LoadedSchemas();
    [CompilerGeneratedAttribute]
protected void set_LoadedSchemas(IList`1<JsonSchema> value);
    public virtual JsonSchema GetSchema(string reference);
}
[FlagsAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal enum Newtonsoft.Json.Schema.JsonSchemaType : Enum {
    public int value__;
    public static JsonSchemaType None;
    public static JsonSchemaType String;
    public static JsonSchemaType Float;
    public static JsonSchemaType Integer;
    public static JsonSchemaType Boolean;
    public static JsonSchemaType Object;
    public static JsonSchemaType Array;
    public static JsonSchemaType Null;
    public static JsonSchemaType Any;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaWriter : object {
    private JsonWriter _writer;
    private JsonSchemaResolver _resolver;
    public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver);
    private void ReferenceOrWriteSchema(JsonSchema schema);
    public void WriteSchema(JsonSchema schema);
    private void WriteSchemaDictionaryIfNotNull(JsonWriter writer, string propertyName, IDictionary`2<string, JsonSchema> properties);
    private void WriteItems(JsonSchema schema);
    private void WriteType(string propertyName, JsonWriter writer, JsonSchemaType type);
    private void WritePropertyIfNotNull(JsonWriter writer, string propertyName, object value);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal enum Newtonsoft.Json.Schema.UndefinedSchemaIdHandling : Enum {
    public int value__;
    public static UndefinedSchemaIdHandling None;
    public static UndefinedSchemaIdHandling UseTypeName;
    public static UndefinedSchemaIdHandling UseAssemblyQualifiedName;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.ValidationEventArgs : EventArgs {
    private JsonSchemaException _ex;
    public JsonSchemaException Exception { get; }
    public string Path { get; }
    public string Message { get; }
    internal ValidationEventArgs(JsonSchemaException ex);
    public JsonSchemaException get_Exception();
    public string get_Path();
    public string get_Message();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See http://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.ValidationEventHandler : MulticastDelegate {
    public ValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Newtonsoft.Json.Serialization.CachedAttributeGetter`1 : object {
    private static ThreadSafeStore`2<object, T> TypeAttributeCache;
    private static CachedAttributeGetter`1();
    public static T GetAttribute(object type);
}
internal class Newtonsoft.Json.Serialization.CamelCaseNamingStrategy : NamingStrategy {
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    protected virtual string ResolvePropertyName(string name);
}
internal class Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver : DefaultContractResolver {
}
internal class Newtonsoft.Json.Serialization.DefaultContractResolver : object {
    private static IContractResolver _instance;
    private static JsonConverter[] BuiltInConverters;
    private static object TypeContractCacheLock;
    private static DefaultContractResolverState _sharedState;
    private DefaultContractResolverState _instanceState;
    private bool _sharedCache;
    [CompilerGeneratedAttribute]
private BindingFlags <DefaultMembersSearchFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SerializeCompilerGeneratedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSerializableInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSerializableAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategy>k__BackingField;
    internal static IContractResolver Instance { get; }
    public bool DynamicCodeGeneration { get; }
    [ObsoleteAttribute("DefaultMembersSearchFlags is obsolete. To modify the members serialized inherit from DefaultContractResolver and override the GetSerializableMembers method instead.")]
public BindingFlags DefaultMembersSearchFlags { get; public set; }
    public bool SerializeCompilerGeneratedMembers { get; public set; }
    public bool IgnoreSerializableInterface { get; public set; }
    public bool IgnoreSerializableAttribute { get; public set; }
    public NamingStrategy NamingStrategy { get; public set; }
    [ObsoleteAttribute("DefaultContractResolver(bool) is obsolete. Use the parameterless constructor and cache instances of the contract resolver within your application for optimal performance.")]
public DefaultContractResolver(bool shareCache);
    private static DefaultContractResolver();
    internal static IContractResolver get_Instance();
    public bool get_DynamicCodeGeneration();
    [CompilerGeneratedAttribute]
public BindingFlags get_DefaultMembersSearchFlags();
    [CompilerGeneratedAttribute]
public void set_DefaultMembersSearchFlags(BindingFlags value);
    [CompilerGeneratedAttribute]
public bool get_SerializeCompilerGeneratedMembers();
    [CompilerGeneratedAttribute]
public void set_SerializeCompilerGeneratedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableInterface();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableInterface(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableAttribute();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableAttribute(bool value);
    [CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    internal DefaultContractResolverState GetState();
    public virtual JsonContract ResolveContract(Type type);
    protected virtual List`1<MemberInfo> GetSerializableMembers(Type objectType);
    private bool ShouldSerializeEntityMember(MemberInfo memberInfo);
    protected virtual JsonObjectContract CreateObjectContract(Type objectType);
    private MemberInfo GetExtensionDataMemberForType(Type type);
    private static void SetExtensionDataDelegates(JsonObjectContract contract, MemberInfo member);
    private ConstructorInfo GetAttributeConstructor(Type objectType);
    private ConstructorInfo GetParameterizedConstructor(Type objectType);
    protected virtual IList`1<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties);
    protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo);
    protected virtual JsonConverter ResolveContractConverter(Type objectType);
    private Func`1<object> GetDefaultCreator(Type createdType);
    private void InitializeContract(JsonContract contract);
    private void ResolveCallbackMethods(JsonContract contract, Type t);
    private void GetCallbackMethodsForType(Type type, List`1& onSerializing, List`1& onSerialized, List`1& onDeserializing, List`1& onDeserialized, List`1& onError);
    private static bool ShouldSkipDeserialized(Type t);
    private static bool ShouldSkipSerializing(Type t);
    private List`1<Type> GetClassHierarchyForType(Type type);
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType);
    protected virtual JsonArrayContract CreateArrayContract(Type objectType);
    protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type objectType);
    protected virtual JsonLinqContract CreateLinqContract(Type objectType);
    protected virtual JsonISerializableContract CreateISerializableContract(Type objectType);
    protected virtual JsonDynamicContract CreateDynamicContract(Type objectType);
    protected virtual JsonStringContract CreateStringContract(Type objectType);
    protected virtual JsonContract CreateContract(Type objectType);
    internal static bool IsJsonPrimitiveType(Type t);
    internal static bool IsIConvertible(Type t);
    internal static bool CanConvertToString(Type type);
    private static bool IsValidCallback(MethodInfo method, ParameterInfo[] parameters, Type attributeType, MethodInfo currentCallback, Type& prevAttributeType);
    internal static string GetClrTypeFullName(Type type);
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
    protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    private void SetPropertySettingsFromAttributes(JsonProperty property, object attributeProvider, string name, Type declaringType, MemberSerialization memberSerialization, Boolean& allowNonPublicAccess);
    private Predicate`1<object> CreateShouldSerializeTest(MemberInfo member);
    private void SetIsSpecifiedActions(JsonProperty property, MemberInfo member, bool allowNonPublicAccess);
    protected virtual string ResolvePropertyName(string propertyName);
    protected virtual string ResolveDictionaryKey(string dictionaryKey);
    public string GetResolvedPropertyName(string propertyName);
}
internal class Newtonsoft.Json.Serialization.DefaultContractResolverState : object {
    public Dictionary`2<ResolverContractKey, JsonContract> ContractCache;
    public PropertyNameTable NameTable;
}
internal class Newtonsoft.Json.Serialization.DefaultNamingStrategy : NamingStrategy {
    protected virtual string ResolvePropertyName(string name);
}
internal class Newtonsoft.Json.Serialization.DefaultReferenceResolver : object {
    private int _referenceCount;
    private BidirectionalDictionary`2<string, object> GetMappings(object context);
    public sealed virtual object ResolveReference(object context, string reference);
    public sealed virtual string GetReference(object context, object value);
    public sealed virtual void AddReference(object context, string reference, object value);
    public sealed virtual bool IsReferenced(object context, object value);
}
internal class Newtonsoft.Json.Serialization.DefaultSerializationBinder : SerializationBinder {
    internal static DefaultSerializationBinder Instance;
    private ThreadSafeStore`2<TypeNameKey, Type> _typeCache;
    private static DefaultSerializationBinder();
    private static Type GetTypeFromTypeNameKey(TypeNameKey typeNameKey);
    public virtual Type BindToType(string assemblyName, string typeName);
    public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Newtonsoft.Json.Serialization.DiagnosticsTraceWriter : object {
    [CompilerGeneratedAttribute]
private TraceLevel <LevelFilter>k__BackingField;
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    private TraceEventType GetTraceEventType(TraceLevel level);
    public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
}
internal class Newtonsoft.Json.Serialization.DynamicValueProvider : object {
    private MemberInfo _memberInfo;
    private Func`2<object, object> _getter;
    private Action`2<object, object> _setter;
    public DynamicValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Newtonsoft.Json.Serialization.ErrorContext : object {
    [CompilerGeneratedAttribute]
private bool <Traced>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OriginalObject>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    internal bool Traced { get; internal set; }
    public Exception Error { get; private set; }
    public object OriginalObject { get; private set; }
    public object Member { get; private set; }
    public string Path { get; private set; }
    public bool Handled { get; public set; }
    internal ErrorContext(object originalObject, object member, string path, Exception error);
    [CompilerGeneratedAttribute]
internal bool get_Traced();
    [CompilerGeneratedAttribute]
internal void set_Traced(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public object get_OriginalObject();
    [CompilerGeneratedAttribute]
private void set_OriginalObject(object value);
    [CompilerGeneratedAttribute]
public object get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(object value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
internal class Newtonsoft.Json.Serialization.ErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <CurrentObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorContext <ErrorContext>k__BackingField;
    public object CurrentObject { get; private set; }
    public ErrorContext ErrorContext { get; private set; }
    public ErrorEventArgs(object currentObject, ErrorContext errorContext);
    [CompilerGeneratedAttribute]
public object get_CurrentObject();
    [CompilerGeneratedAttribute]
private void set_CurrentObject(object value);
    [CompilerGeneratedAttribute]
public ErrorContext get_ErrorContext();
    [CompilerGeneratedAttribute]
private void set_ErrorContext(ErrorContext value);
}
internal class Newtonsoft.Json.Serialization.ExpressionValueProvider : object {
    private MemberInfo _memberInfo;
    private Func`2<object, object> _getter;
    private Action`2<object, object> _setter;
    public ExpressionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Newtonsoft.Json.Serialization.ExtensionDataGetter : MulticastDelegate {
    public ExtensionDataGetter(object object, IntPtr method);
    public virtual IEnumerable`1<KeyValuePair`2<object, object>> Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual IEnumerable`1<KeyValuePair`2<object, object>> EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.ExtensionDataSetter : MulticastDelegate {
    public ExtensionDataSetter(object object, IntPtr method);
    public virtual void Invoke(object o, string key, object value);
    public virtual IAsyncResult BeginInvoke(object o, string key, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal interface Newtonsoft.Json.Serialization.IAttributeProvider {
    public abstract virtual IList`1<Attribute> GetAttributes(bool inherit);
    public abstract virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
internal interface Newtonsoft.Json.Serialization.IContractResolver {
    public abstract virtual JsonContract ResolveContract(Type type);
}
internal interface Newtonsoft.Json.Serialization.IReferenceResolver {
    public abstract virtual object ResolveReference(object context, string reference);
    public abstract virtual string GetReference(object context, object value);
    public abstract virtual bool IsReferenced(object context, object value);
    public abstract virtual void AddReference(object context, string reference, object value);
}
internal interface Newtonsoft.Json.Serialization.ITraceWriter {
    public TraceLevel LevelFilter { get; }
    public abstract virtual TraceLevel get_LevelFilter();
    public abstract virtual void Trace(TraceLevel level, string message, Exception ex);
}
internal interface Newtonsoft.Json.Serialization.IValueProvider {
    public abstract virtual void SetValue(object target, object value);
    public abstract virtual object GetValue(object target);
}
internal class Newtonsoft.Json.Serialization.JsonArrayContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private Type <CollectionItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultidimensionalArray>k__BackingField;
    private Type _genericCollectionDefinitionType;
    private Type _genericWrapperType;
    private ObjectConstructor`1<object> _genericWrapperCreator;
    private Func`1<object> _genericTemporaryCollectionCreator;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanDeserialize>k__BackingField;
    private ConstructorInfo _parameterizedConstructor;
    private ObjectConstructor`1<object> _parameterizedCreator;
    private ObjectConstructor`1<object> _overrideCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    public Type CollectionItemType { get; private set; }
    public bool IsMultidimensionalArray { get; private set; }
    internal bool IsArray { get; private set; }
    internal bool ShouldCreateWrapper { get; private set; }
    internal bool CanDeserialize { get; private set; }
    internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    public JsonArrayContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_CollectionItemType();
    [CompilerGeneratedAttribute]
private void set_CollectionItemType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsMultidimensionalArray();
    [CompilerGeneratedAttribute]
private void set_IsMultidimensionalArray(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsArray();
    [CompilerGeneratedAttribute]
private void set_IsArray(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    [CompilerGeneratedAttribute]
private void set_ShouldCreateWrapper(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CanDeserialize();
    [CompilerGeneratedAttribute]
private void set_CanDeserialize(bool value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    internal IWrappedCollection CreateWrapper(object list);
    internal IList CreateTemporaryCollection();
}
internal class Newtonsoft.Json.Serialization.JsonContainerContract : JsonContract {
    private JsonContract _itemContract;
    private JsonContract _finalItemContract;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    internal JsonContract ItemContract { get; internal set; }
    internal JsonContract FinalItemContract { get; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    internal JsonContainerContract(Type underlyingType);
    internal JsonContract get_ItemContract();
    internal void set_ItemContract(JsonContract value);
    internal JsonContract get_FinalItemContract();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
}
internal abstract class Newtonsoft.Json.Serialization.JsonContract : object {
    internal bool IsNullable;
    internal bool IsConvertable;
    internal bool IsEnum;
    internal Type NonNullableUnderlyingType;
    internal ReadType InternalReadType;
    internal JsonContractType ContractType;
    internal bool IsReadOnlyOrFixedSize;
    internal bool IsSealed;
    internal bool IsInstantiable;
    private List`1<SerializationCallback> _onDeserializedCallbacks;
    private IList`1<SerializationCallback> _onDeserializingCallbacks;
    private IList`1<SerializationCallback> _onSerializedCallbacks;
    private IList`1<SerializationCallback> _onSerializingCallbacks;
    private IList`1<SerializationErrorCallback> _onErrorCallbacks;
    private Type _createdType;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <InternalConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<object> <DefaultCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultCreatorNonPublic>k__BackingField;
    public Type UnderlyingType { get; private set; }
    public Type CreatedType { get; public set; }
    public Nullable`1<bool> IsReference { get; public set; }
    public JsonConverter Converter { get; public set; }
    internal JsonConverter InternalConverter { get; internal set; }
    public IList`1<SerializationCallback> OnDeserializedCallbacks { get; }
    public IList`1<SerializationCallback> OnDeserializingCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializedCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializingCallbacks { get; }
    public IList`1<SerializationErrorCallback> OnErrorCallbacks { get; }
    [ObsoleteAttribute("This property is obsolete and has been replaced by the OnDeserializedCallbacks collection.")]
public MethodInfo OnDeserialized { get; public set; }
    [ObsoleteAttribute("This property is obsolete and has been replaced by the OnDeserializingCallbacks collection.")]
public MethodInfo OnDeserializing { get; public set; }
    [ObsoleteAttribute("This property is obsolete and has been replaced by the OnSerializedCallbacks collection.")]
public MethodInfo OnSerialized { get; public set; }
    [ObsoleteAttribute("This property is obsolete and has been replaced by the OnSerializingCallbacks collection.")]
public MethodInfo OnSerializing { get; public set; }
    [ObsoleteAttribute("This property is obsolete and has been replaced by the OnErrorCallbacks collection.")]
public MethodInfo OnError { get; public set; }
    public Func`1<object> DefaultCreator { get; public set; }
    public bool DefaultCreatorNonPublic { get; public set; }
    internal JsonContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    [CompilerGeneratedAttribute]
private void set_UnderlyingType(Type value);
    public Type get_CreatedType();
    public void set_CreatedType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    [CompilerGeneratedAttribute]
internal JsonConverter get_InternalConverter();
    [CompilerGeneratedAttribute]
internal void set_InternalConverter(JsonConverter value);
    public IList`1<SerializationCallback> get_OnDeserializedCallbacks();
    public IList`1<SerializationCallback> get_OnDeserializingCallbacks();
    public IList`1<SerializationCallback> get_OnSerializedCallbacks();
    public IList`1<SerializationCallback> get_OnSerializingCallbacks();
    public IList`1<SerializationErrorCallback> get_OnErrorCallbacks();
    public MethodInfo get_OnDeserialized();
    public void set_OnDeserialized(MethodInfo value);
    public MethodInfo get_OnDeserializing();
    public void set_OnDeserializing(MethodInfo value);
    public MethodInfo get_OnSerialized();
    public void set_OnSerialized(MethodInfo value);
    public MethodInfo get_OnSerializing();
    public void set_OnSerializing(MethodInfo value);
    public MethodInfo get_OnError();
    public void set_OnError(MethodInfo value);
    [CompilerGeneratedAttribute]
public Func`1<object> get_DefaultCreator();
    [CompilerGeneratedAttribute]
public void set_DefaultCreator(Func`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_DefaultCreatorNonPublic();
    [CompilerGeneratedAttribute]
public void set_DefaultCreatorNonPublic(bool value);
    internal void InvokeOnSerializing(object o, StreamingContext context);
    internal void InvokeOnSerialized(object o, StreamingContext context);
    internal void InvokeOnDeserializing(object o, StreamingContext context);
    internal void InvokeOnDeserialized(object o, StreamingContext context);
    internal void InvokeOnError(object o, StreamingContext context, ErrorContext errorContext);
    internal static SerializationCallback CreateSerializationCallback(MethodInfo callbackMethodInfo);
    internal static SerializationErrorCallback CreateSerializationErrorCallback(MethodInfo callbackMethodInfo);
}
internal enum Newtonsoft.Json.Serialization.JsonContractType : Enum {
    public int value__;
    public static JsonContractType None;
    public static JsonContractType Object;
    public static JsonContractType Array;
    public static JsonContractType Primitive;
    public static JsonContractType String;
    public static JsonContractType Dictionary;
    public static JsonContractType Dynamic;
    public static JsonContractType Serializable;
    public static JsonContractType Linq;
}
internal class Newtonsoft.Json.Serialization.JsonDictionaryContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private Func`2<string, string> <DictionaryKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonContract <KeyContract>k__BackingField;
    private Type _genericCollectionDefinitionType;
    private Type _genericWrapperType;
    private ObjectConstructor`1<object> _genericWrapperCreator;
    private Func`1<object> _genericTemporaryDictionaryCreator;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    private ConstructorInfo _parameterizedConstructor;
    private ObjectConstructor`1<object> _overrideCreator;
    private ObjectConstructor`1<object> _parameterizedCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    [ObsoleteAttribute("PropertyNameResolver is obsolete. Use DictionaryKeyResolver instead.")]
public Func`2<string, string> PropertyNameResolver { get; public set; }
    public Func`2<string, string> DictionaryKeyResolver { get; public set; }
    public Type DictionaryKeyType { get; private set; }
    public Type DictionaryValueType { get; private set; }
    internal JsonContract KeyContract { get; internal set; }
    internal bool ShouldCreateWrapper { get; private set; }
    internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    public JsonDictionaryContract(Type underlyingType);
    public Func`2<string, string> get_PropertyNameResolver();
    public void set_PropertyNameResolver(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_DictionaryKeyResolver();
    [CompilerGeneratedAttribute]
public void set_DictionaryKeyResolver(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Type get_DictionaryKeyType();
    [CompilerGeneratedAttribute]
private void set_DictionaryKeyType(Type value);
    [CompilerGeneratedAttribute]
public Type get_DictionaryValueType();
    [CompilerGeneratedAttribute]
private void set_DictionaryValueType(Type value);
    [CompilerGeneratedAttribute]
internal JsonContract get_KeyContract();
    [CompilerGeneratedAttribute]
internal void set_KeyContract(JsonContract value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    [CompilerGeneratedAttribute]
private void set_ShouldCreateWrapper(bool value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    internal IWrappedDictionary CreateWrapper(object dictionary);
    internal IDictionary CreateTemporaryDictionary();
}
internal class Newtonsoft.Json.Serialization.JsonDynamicContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <PropertyNameResolver>k__BackingField;
    private ThreadSafeStore`2<string, CallSite`1<Func`3<CallSite, object, object>>> _callSiteGetters;
    private ThreadSafeStore`2<string, CallSite`1<Func`4<CallSite, object, object, object>>> _callSiteSetters;
    public JsonPropertyCollection Properties { get; private set; }
    public Func`2<string, string> PropertyNameResolver { get; public set; }
    public JsonDynamicContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(JsonPropertyCollection value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_PropertyNameResolver();
    [CompilerGeneratedAttribute]
public void set_PropertyNameResolver(Func`2<string, string> value);
    private static CallSite`1<Func`3<CallSite, object, object>> CreateCallSiteGetter(string name);
    private static CallSite`1<Func`4<CallSite, object, object, object>> CreateCallSiteSetter(string name);
    internal bool TryGetMember(IDynamicMetaObjectProvider dynamicProvider, string name, Object& value);
    internal bool TrySetMember(IDynamicMetaObjectProvider dynamicProvider, string name, object value);
}
internal class Newtonsoft.Json.Serialization.JsonFormatterConverter : object {
    private JsonSerializerInternalReader _reader;
    private JsonISerializableContract _contract;
    private JsonProperty _member;
    public JsonFormatterConverter(JsonSerializerInternalReader reader, JsonISerializableContract contract, JsonProperty member);
    private T GetTokenValue(object value);
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual char ToChar(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual short ToInt16(object value);
    public sealed virtual int ToInt32(object value);
    public sealed virtual long ToInt64(object value);
    public sealed virtual sbyte ToSByte(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual string ToString(object value);
    public sealed virtual ushort ToUInt16(object value);
    public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual ulong ToUInt64(object value);
}
internal class Newtonsoft.Json.Serialization.JsonISerializableContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private ObjectConstructor`1<object> <ISerializableCreator>k__BackingField;
    public ObjectConstructor`1<object> ISerializableCreator { get; public set; }
    public JsonISerializableContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_ISerializableCreator();
    [CompilerGeneratedAttribute]
public void set_ISerializableCreator(ObjectConstructor`1<object> value);
}
internal class Newtonsoft.Json.Serialization.JsonLinqContract : JsonContract {
    public JsonLinqContract(Type underlyingType);
}
internal class Newtonsoft.Json.Serialization.JsonObjectContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private MemberSerialization <MemberSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Required> <ItemRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataSetter <ExtensionDataSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataGetter <ExtensionDataGetter>k__BackingField;
    internal bool ExtensionDataIsJToken;
    private Nullable`1<bool> _hasRequiredOrDefaultValueProperties;
    private ConstructorInfo _parametrizedConstructor;
    private ConstructorInfo _overrideConstructor;
    private ObjectConstructor`1<object> _overrideCreator;
    private ObjectConstructor`1<object> _parameterizedCreator;
    private JsonPropertyCollection _creatorParameters;
    private Type _extensionDataValueType;
    public MemberSerialization MemberSerialization { get; public set; }
    public Nullable`1<Required> ItemRequired { get; public set; }
    public JsonPropertyCollection Properties { get; private set; }
    [ObsoleteAttribute("ConstructorParameters is obsolete. Use CreatorParameters instead.")]
public JsonPropertyCollection ConstructorParameters { get; }
    public JsonPropertyCollection CreatorParameters { get; }
    [ObsoleteAttribute("OverrideConstructor is obsolete. Use OverrideCreator instead.")]
public ConstructorInfo OverrideConstructor { get; public set; }
    [ObsoleteAttribute("ParametrizedConstructor is obsolete. Use OverrideCreator instead.")]
public ConstructorInfo ParametrizedConstructor { get; public set; }
    public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    public ExtensionDataSetter ExtensionDataSetter { get; public set; }
    public ExtensionDataGetter ExtensionDataGetter { get; public set; }
    public Type ExtensionDataValueType { get; public set; }
    internal bool HasRequiredOrDefaultValueProperties { get; }
    public JsonObjectContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public MemberSerialization get_MemberSerialization();
    [CompilerGeneratedAttribute]
public void set_MemberSerialization(MemberSerialization value);
    [CompilerGeneratedAttribute]
public Nullable`1<Required> get_ItemRequired();
    [CompilerGeneratedAttribute]
public void set_ItemRequired(Nullable`1<Required> value);
    [CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(JsonPropertyCollection value);
    public JsonPropertyCollection get_ConstructorParameters();
    public JsonPropertyCollection get_CreatorParameters();
    public ConstructorInfo get_OverrideConstructor();
    public void set_OverrideConstructor(ConstructorInfo value);
    public ConstructorInfo get_ParametrizedConstructor();
    public void set_ParametrizedConstructor(ConstructorInfo value);
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    [CompilerGeneratedAttribute]
public ExtensionDataSetter get_ExtensionDataSetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataSetter(ExtensionDataSetter value);
    [CompilerGeneratedAttribute]
public ExtensionDataGetter get_ExtensionDataGetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataGetter(ExtensionDataGetter value);
    public Type get_ExtensionDataValueType();
    public void set_ExtensionDataValueType(Type value);
    internal bool get_HasRequiredOrDefaultValueProperties();
    [SecuritySafeCriticalAttribute]
internal object GetUninitializedObject();
}
internal class Newtonsoft.Json.Serialization.JsonPrimitiveContract : JsonContract {
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    private static Dictionary`2<Type, ReadType> ReadTypeMap;
    internal PrimitiveTypeCode TypeCode { get; internal set; }
    public JsonPrimitiveContract(Type underlyingType);
    private static JsonPrimitiveContract();
    [CompilerGeneratedAttribute]
internal PrimitiveTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
internal void set_TypeCode(PrimitiveTypeCode value);
}
internal class Newtonsoft.Json.Serialization.JsonProperty : object {
    internal Nullable`1<Required> _required;
    internal bool _hasExplicitDefaultValue;
    private object _defaultValue;
    private bool _hasGeneratedDefaultValue;
    private string _propertyName;
    internal bool _skipPropertyNameEscape;
    private Type _propertyType;
    [CompilerGeneratedAttribute]
private JsonContract <PropertyContract>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnderlyingName>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueProvider <ValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttributeProvider <AttributeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <MemberConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Readable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Writable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMemberAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <NullValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultValueHandling> <DefaultValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ObjectCreationHandling> <ObjectCreationHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <TypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Predicate`1<object> <ShouldSerialize>k__BackingField;
    [CompilerGeneratedAttribute]
private Predicate`1<object> <ShouldDeserialize>k__BackingField;
    [CompilerGeneratedAttribute]
private Predicate`1<object> <GetIsSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<object, object> <SetIsSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    internal JsonContract PropertyContract { get; internal set; }
    public string PropertyName { get; public set; }
    public Type DeclaringType { get; public set; }
    public Nullable`1<int> Order { get; public set; }
    public string UnderlyingName { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    public IAttributeProvider AttributeProvider { get; public set; }
    public Type PropertyType { get; public set; }
    public JsonConverter Converter { get; public set; }
    public JsonConverter MemberConverter { get; public set; }
    public bool Ignored { get; public set; }
    public bool Readable { get; public set; }
    public bool Writable { get; public set; }
    public bool HasMemberAttribute { get; public set; }
    public object DefaultValue { get; public set; }
    public Required Required { get; public set; }
    public Nullable`1<bool> IsReference { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    public Predicate`1<object> ShouldSerialize { get; public set; }
    public Predicate`1<object> ShouldDeserialize { get; public set; }
    public Predicate`1<object> GetIsSpecified { get; public set; }
    public Action`2<object, object> SetIsSpecified { get; public set; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    [CompilerGeneratedAttribute]
internal JsonContract get_PropertyContract();
    [CompilerGeneratedAttribute]
internal void set_PropertyContract(JsonContract value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UnderlyingName();
    [CompilerGeneratedAttribute]
public void set_UnderlyingName(string value);
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    [CompilerGeneratedAttribute]
public IAttributeProvider get_AttributeProvider();
    [CompilerGeneratedAttribute]
public void set_AttributeProvider(IAttributeProvider value);
    public Type get_PropertyType();
    public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    [CompilerGeneratedAttribute]
public JsonConverter get_MemberConverter();
    [CompilerGeneratedAttribute]
public void set_MemberConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public bool get_Readable();
    [CompilerGeneratedAttribute]
public void set_Readable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Writable();
    [CompilerGeneratedAttribute]
public void set_Writable(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMemberAttribute();
    [CompilerGeneratedAttribute]
public void set_HasMemberAttribute(bool value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal object GetResolvedDefaultValue();
    public Required get_Required();
    public void set_Required(Required value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_NullValueHandling();
    [CompilerGeneratedAttribute]
public void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    [CompilerGeneratedAttribute]
public void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    [CompilerGeneratedAttribute]
public void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_TypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldSerialize();
    [CompilerGeneratedAttribute]
public void set_ShouldSerialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldDeserialize();
    [CompilerGeneratedAttribute]
public void set_ShouldDeserialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_GetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_GetIsSpecified(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_SetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_SetIsSpecified(Action`2<object, object> value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    internal void WritePropertyName(JsonWriter writer);
}
internal class Newtonsoft.Json.Serialization.JsonPropertyCollection : KeyedCollection`2<string, JsonProperty> {
    private Type _type;
    private List`1<JsonProperty> _list;
    public JsonPropertyCollection(Type type);
    protected virtual string GetKeyForItem(JsonProperty item);
    public void AddProperty(JsonProperty property);
    public JsonProperty GetClosestMatchProperty(string propertyName);
    private bool TryGetValue(string key, JsonProperty& item);
    public JsonProperty GetProperty(string propertyName, StringComparison comparisonType);
}
internal abstract class Newtonsoft.Json.Serialization.JsonSerializerInternalBase : object {
    private ErrorContext _currentErrorContext;
    private BidirectionalDictionary`2<string, object> _mappings;
    internal JsonSerializer Serializer;
    internal ITraceWriter TraceWriter;
    protected JsonSerializerProxy InternalSerializer;
    internal BidirectionalDictionary`2<string, object> DefaultReferenceMappings { get; }
    protected JsonSerializerInternalBase(JsonSerializer serializer);
    internal BidirectionalDictionary`2<string, object> get_DefaultReferenceMappings();
    private ErrorContext GetErrorContext(object currentObject, object member, string path, Exception error);
    protected void ClearErrorContext();
    protected bool IsErrorHandled(object currentObject, JsonContract contract, object keyValue, IJsonLineInfo lineInfo, string path, Exception ex);
}
internal class Newtonsoft.Json.Serialization.JsonSerializerInternalReader : JsonSerializerInternalBase {
    public JsonSerializerInternalReader(JsonSerializer serializer);
    public void Populate(JsonReader reader, object target);
    private JsonContract GetContractSafe(Type type);
    public object Deserialize(JsonReader reader, Type objectType, bool checkAdditionalContent);
    private JsonSerializerProxy GetInternalSerializer();
    private JToken CreateJToken(JsonReader reader, JsonContract contract);
    private JToken CreateJObject(JsonReader reader);
    private object CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    private static bool CoerceEmptyStringToNull(Type objectType, JsonContract contract, string s);
    internal string GetExpectedDescription(JsonContract contract);
    private JsonConverter GetConverter(JsonContract contract, JsonConverter memberConverter, JsonContainerContract containerContract, JsonProperty containerProperty);
    private object CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    private bool ReadMetadataPropertiesToken(JTokenReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    private bool ReadMetadataProperties(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    private void ResolveTypeName(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, string qualifiedTypeName);
    private JsonArrayContract EnsureArrayContract(JsonReader reader, Type objectType, JsonContract contract);
    private object CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue, string id);
    private bool HasNoDefinedType(JsonContract contract);
    private object EnsureType(JsonReader reader, object value, CultureInfo culture, JsonContract contract, Type targetType);
    private bool SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target);
    private bool CalculatePropertyDetails(JsonProperty property, JsonConverter& propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target, Boolean& useExistingValue, Object& currentValue, JsonContract& propertyContract, Boolean& gottenCurrentValue);
    private void AddReference(JsonReader reader, string id, object value);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private bool ShouldSetPropertyValue(JsonProperty property, object value);
    private IList CreateNewList(JsonReader reader, JsonArrayContract contract, Boolean& createdFromNonDefaultCreator);
    private IDictionary CreateNewDictionary(JsonReader reader, JsonDictionaryContract contract, Boolean& createdFromNonDefaultCreator);
    private void OnDeserializing(JsonReader reader, JsonContract contract, object value);
    private void OnDeserialized(JsonReader reader, JsonContract contract, object value);
    private object PopulateDictionary(IDictionary dictionary, JsonReader reader, JsonDictionaryContract contract, JsonProperty containerProperty, string id);
    private object PopulateMultidimensionalArray(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private void ThrowUnexpectedEndException(JsonReader reader, JsonContract contract, object currentObject, string message);
    private object PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private object CreateISerializable(JsonReader reader, JsonISerializableContract contract, JsonProperty member, string id);
    internal object CreateISerializableItem(JToken token, Type type, JsonISerializableContract contract, JsonProperty member);
    private object CreateDynamic(JsonReader reader, JsonDynamicContract contract, JsonProperty member, string id);
    private object CreateObjectUsingCreatorWithParameters(JsonReader reader, JsonObjectContract contract, JsonProperty containerProperty, ObjectConstructor`1<object> creator, string id);
    private object DeserializeConvertable(JsonConverter converter, JsonReader reader, Type objectType, object existingValue);
    private List`1<CreatorPropertyContext> ResolvePropertyAndCreatorValues(JsonObjectContract contract, JsonProperty containerProperty, JsonReader reader, Type objectType);
    private bool ReadForType(JsonReader reader, JsonContract contract, bool hasConverter);
    public object CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, string id, Boolean& createdFromNonDefaultCreator);
    private object PopulateObject(object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, string id);
    private bool ShouldDeserialize(JsonReader reader, JsonProperty property, object target);
    private bool CheckPropertyName(JsonReader reader, string memberName);
    private void SetExtensionData(JsonObjectContract contract, JsonProperty member, JsonReader reader, string memberName, object o);
    private object ReadExtensionDataValue(JsonObjectContract contract, JsonProperty member, JsonReader reader);
    private void EndProcessProperty(object newObject, JsonReader reader, JsonObjectContract contract, int initialDepth, JsonProperty property, PropertyPresence presence, bool setDefaultValue);
    private void SetPropertyPresence(JsonReader reader, JsonProperty property, Dictionary`2<JsonProperty, PropertyPresence> requiredProperties);
    private void HandleError(JsonReader reader, bool readPastError, int initialDepth);
}
internal class Newtonsoft.Json.Serialization.JsonSerializerInternalWriter : JsonSerializerInternalBase {
    private Type _rootType;
    private int _rootLevel;
    private List`1<object> _serializeStack;
    public JsonSerializerInternalWriter(JsonSerializer serializer);
    public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    private JsonSerializerProxy GetInternalSerializer();
    private JsonContract GetContractSafe(object value);
    private void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    private Nullable`1<bool> ResolveIsReference(JsonContract contract, JsonProperty property, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool ShouldWriteReference(object value, JsonProperty property, JsonContract valueContract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool ShouldWriteProperty(object memberValue, JsonProperty property);
    private bool CheckForCircularReference(JsonWriter writer, object value, JsonProperty property, JsonContract contract, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void WriteReference(JsonWriter writer, object value);
    private string GetReference(JsonWriter writer, object value);
    internal static bool TryConvertToString(object value, Type type, String& s);
    private void SerializeString(JsonWriter writer, object value, JsonStringContract contract);
    private void OnSerializing(JsonWriter writer, JsonContract contract, object value);
    private void OnSerialized(JsonWriter writer, JsonContract contract, object value);
    private void SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool CalculatePropertyValues(JsonWriter writer, object value, JsonContainerContract contract, JsonProperty member, JsonProperty property, JsonContract& memberContract, Object& memberValue);
    private void WriteObjectStart(JsonWriter writer, object value, JsonContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void WriteReferenceIdProperty(JsonWriter writer, Type type, object value);
    private void WriteTypeProperty(JsonWriter writer, Type type);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private bool HasFlag(PreserveReferencesHandling value, PreserveReferencesHandling flag);
    private bool HasFlag(TypeNameHandling value, TypeNameHandling flag);
    private void SerializeConvertable(JsonWriter writer, JsonConverter converter, object value, JsonContract contract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, int initialDepth, Int32[] indices);
    private bool WriteStartArray(JsonWriter writer, object values, JsonArrayContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [SecuritySafeCriticalAttribute]
private void SerializeISerializable(JsonWriter writer, ISerializable value, JsonISerializableContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeDynamic(JsonWriter writer, IDynamicMetaObjectProvider value, JsonDynamicContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool ShouldWriteDynamicProperty(object memberValue);
    private bool ShouldWriteType(TypeNameHandling typeNameHandlingFlag, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void SerializeDictionary(JsonWriter writer, IDictionary values, JsonDictionaryContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private string GetPropertyName(JsonWriter writer, object name, JsonContract contract, Boolean& escape);
    private void HandleError(JsonWriter writer, int initialDepth);
    private bool ShouldSerialize(JsonWriter writer, JsonProperty property, object target);
    private bool IsSpecified(JsonWriter writer, JsonProperty property, object target);
}
internal class Newtonsoft.Json.Serialization.JsonSerializerProxy : JsonSerializer {
    private JsonSerializerInternalReader _serializerReader;
    private JsonSerializerInternalWriter _serializerWriter;
    private JsonSerializer _serializer;
    public IReferenceResolver ReferenceResolver { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    public JsonConverterCollection Converters { get; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    public JsonSerializerProxy(JsonSerializerInternalReader serializerReader);
    public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter);
    public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual IReferenceResolver get_ReferenceResolver();
    public virtual void set_ReferenceResolver(IReferenceResolver value);
    public virtual ITraceWriter get_TraceWriter();
    public virtual void set_TraceWriter(ITraceWriter value);
    public virtual IEqualityComparer get_EqualityComparer();
    public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual JsonConverterCollection get_Converters();
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual SerializationBinder get_Binder();
    public virtual void set_Binder(SerializationBinder value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal JsonSerializerInternalBase GetInternalSerializer();
    internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type rootType);
}
internal class Newtonsoft.Json.Serialization.JsonStringContract : JsonPrimitiveContract {
    public JsonStringContract(Type underlyingType);
}
internal static class Newtonsoft.Json.Serialization.JsonTypeReflector : object {
    private static Nullable`1<bool> _dynamicCodeGeneration;
    private static Nullable`1<bool> _fullyTrusted;
    public static string IdPropertyName;
    public static string RefPropertyName;
    public static string TypePropertyName;
    public static string ValuePropertyName;
    public static string ArrayValuesPropertyName;
    public static string ShouldSerializePrefix;
    public static string SpecifiedPostfix;
    private static ThreadSafeStore`2<Type, Func`2<Object[], object>> CreatorCache;
    private static ThreadSafeStore`2<Type, Type> AssociatedMetadataTypesCache;
    private static ReflectionObject _metadataTypeAttributeReflectionObject;
    public static bool DynamicCodeGeneration { get; }
    public static bool FullyTrusted { get; }
    public static ReflectionDelegateFactory ReflectionDelegateFactory { get; }
    private static JsonTypeReflector();
    public static T GetCachedAttribute(object attributeProvider);
    public static DataContractAttribute GetDataContractAttribute(Type type);
    public static DataMemberAttribute GetDataMemberAttribute(MemberInfo memberInfo);
    public static MemberSerialization GetObjectMemberSerialization(Type objectType, bool ignoreSerializableAttribute);
    public static JsonConverter GetJsonConverter(object attributeProvider);
    public static JsonConverter CreateJsonConverterInstance(Type converterType, Object[] converterArgs);
    public static NamingStrategy CreateNamingStrategyInstance(Type namingStrategyType, Object[] converterArgs);
    public static NamingStrategy GetContainerNamingStrategy(JsonContainerAttribute containerAttribute);
    private static Func`2<Object[], object> GetCreator(Type type);
    public static TypeConverter GetTypeConverter(Type type);
    private static Type GetAssociatedMetadataType(Type type);
    private static Type GetAssociateMetadataTypeFromAttribute(Type type);
    private static T GetAttribute(Type type);
    private static T GetAttribute(MemberInfo memberInfo);
    public static T GetAttribute(object provider);
    [SecuritySafeCriticalAttribute]
public static bool get_DynamicCodeGeneration();
    public static bool get_FullyTrusted();
    public static ReflectionDelegateFactory get_ReflectionDelegateFactory();
}
internal class Newtonsoft.Json.Serialization.MemoryTraceWriter : object {
    private Queue`1<string> _traceMessages;
    [CompilerGeneratedAttribute]
private TraceLevel <LevelFilter>k__BackingField;
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
    public IEnumerable`1<string> GetTraceMessages();
    public virtual string ToString();
}
internal abstract class Newtonsoft.Json.Serialization.NamingStrategy : object {
    [CompilerGeneratedAttribute]
private bool <ProcessDictionaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideSpecifiedNames>k__BackingField;
    public bool ProcessDictionaryKeys { get; public set; }
    public bool OverrideSpecifiedNames { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ProcessDictionaryKeys();
    [CompilerGeneratedAttribute]
public void set_ProcessDictionaryKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverrideSpecifiedNames();
    [CompilerGeneratedAttribute]
public void set_OverrideSpecifiedNames(bool value);
    public virtual string GetPropertyName(string name, bool hasSpecifiedName);
    public virtual string GetDictionaryKey(string key);
    protected abstract virtual string ResolvePropertyName(string name);
}
internal class Newtonsoft.Json.Serialization.ObjectConstructor`1 : MulticastDelegate {
    public ObjectConstructor`1(object object, IntPtr method);
    public virtual object Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("64")]
internal class Newtonsoft.Json.Serialization.OnErrorAttribute : Attribute {
}
internal class Newtonsoft.Json.Serialization.ReflectionAttributeProvider : object {
    private object _attributeProvider;
    public ReflectionAttributeProvider(object attributeProvider);
    public sealed virtual IList`1<Attribute> GetAttributes(bool inherit);
    public sealed virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
internal class Newtonsoft.Json.Serialization.ReflectionValueProvider : object {
    private MemberInfo _memberInfo;
    public ReflectionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Newtonsoft.Json.Serialization.ResolverContractKey : ValueType {
    private Type _resolverType;
    private Type _contractType;
    public ResolverContractKey(Type resolverType, Type contractType);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ResolverContractKey other);
}
internal class Newtonsoft.Json.Serialization.SerializationCallback : MulticastDelegate {
    public SerializationCallback(object object, IntPtr method);
    public virtual void Invoke(object o, StreamingContext context);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.SerializationErrorCallback : MulticastDelegate {
    public SerializationErrorCallback(object object, IntPtr method);
    public virtual void Invoke(object o, StreamingContext context, ErrorContext errorContext);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, ErrorContext errorContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy : NamingStrategy {
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    protected virtual string ResolvePropertyName(string name);
}
internal class Newtonsoft.Json.Serialization.TraceJsonReader : JsonReader {
    private JsonReader _innerReader;
    private JsonTextWriter _textWriter;
    private StringWriter _sw;
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    public object Value { get; }
    public Type ValueType { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public TraceJsonReader(JsonReader innerReader);
    public string GetDeserializedJsonMessage();
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    public virtual object get_Value();
    public virtual Type get_ValueType();
    public virtual void Close();
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
}
internal class Newtonsoft.Json.Serialization.TraceJsonWriter : JsonWriter {
    private JsonWriter _innerWriter;
    private JsonTextWriter _textWriter;
    private StringWriter _sw;
    public TraceJsonWriter(JsonWriter innerWriter);
    public string GetSerializedJsonMessage();
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(Nullable`1<byte> value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteUndefined();
    public virtual void WriteNull();
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(Uri value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteComment(string text);
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    public virtual void WriteRawValue(string json);
    public virtual void WriteRaw(string json);
    public virtual void Close();
    public virtual void Flush();
}
internal enum Newtonsoft.Json.StringEscapeHandling : Enum {
    public int value__;
    public static StringEscapeHandling Default;
    public static StringEscapeHandling EscapeNonAscii;
    public static StringEscapeHandling EscapeHtml;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.TypeNameHandling : Enum {
    public int value__;
    public static TypeNameHandling None;
    public static TypeNameHandling Objects;
    public static TypeNameHandling Arrays;
    public static TypeNameHandling All;
    public static TypeNameHandling Auto;
}
internal class Newtonsoft.Json.Utilities.Base64Encoder : object {
    private static int Base64LineSize;
    private static int LineSizeInBytes;
    private Char[] _charsLine;
    private TextWriter _writer;
    private Byte[] _leftOverBytes;
    private int _leftOverBytesCount;
    public Base64Encoder(TextWriter writer);
    public void Encode(Byte[] buffer, int index, int count);
    public void Flush();
    private void WriteChars(Char[] chars, int index, int count);
}
internal class Newtonsoft.Json.Utilities.BidirectionalDictionary`2 : object {
    private IDictionary`2<TFirst, TSecond> _firstToSecond;
    private IDictionary`2<TSecond, TFirst> _secondToFirst;
    private string _duplicateFirstErrorMessage;
    private string _duplicateSecondErrorMessage;
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer);
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer, string duplicateFirstErrorMessage, string duplicateSecondErrorMessage);
    public void Set(TFirst first, TSecond second);
    public bool TryGetByFirst(TFirst first, TSecond& second);
    public bool TryGetBySecond(TSecond second, TFirst& first);
}
internal static class Newtonsoft.Json.Utilities.BufferUtils : object {
    public static Char[] RentBuffer(IArrayPool`1<char> bufferPool, int minSize);
    public static void ReturnBuffer(IArrayPool`1<char> bufferPool, Char[] buffer);
    public static Char[] EnsureBufferSize(IArrayPool`1<char> bufferPool, int size, Char[] buffer);
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.CollectionUtils : object {
    public static bool IsNullOrEmpty(ICollection`1<T> collection);
    [ExtensionAttribute]
public static void AddRange(IList`1<T> initial, IEnumerable`1<T> collection);
    public static bool IsDictionaryType(Type type);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType, Type constructorArgumentType);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool ContainsValue(IEnumerable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static bool AddRangeDistinct(IList`1<T> list, IEnumerable`1<T> values, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> collection, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool Contains(List`1<T> list, T value, IEqualityComparer comparer);
    [ExtensionAttribute]
public static int IndexOfReference(List`1<T> list, T item);
    private static IList`1<int> GetDimensions(IList values, int dimensionsCount);
    private static void CopyFromJaggedToMultidimensionalArray(IList values, Array multidimensionalArray, Int32[] indices);
    private static object JaggedArrayGetValue(IList values, Int32[] indices);
    public static Array ToMultidimensionalArray(IList values, Type type, int rank);
}
internal class Newtonsoft.Json.Utilities.CollectionWrapper`1 : object {
    private IList _list;
    private ICollection`1<T> _genericCollection;
    private object _syncRoot;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingCollection { get; }
    public CollectionWrapper`1(IList list);
    public CollectionWrapper`1(ICollection`1<T> list);
    public virtual void Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T item);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private static void VerifyValueType(object value);
    private static bool IsCompatibleObject(object value);
    public sealed virtual object get_UnderlyingCollection();
}
internal static class Newtonsoft.Json.Utilities.ConvertUtils : object {
    private static Dictionary`2<Type, PrimitiveTypeCode> TypeCodeMap;
    private static TypeInformation[] PrimitiveTypeCodes;
    private static ThreadSafeStore`2<TypeConvertKey, Func`2<object, object>> CastConverters;
    private static ConvertUtils();
    public static PrimitiveTypeCode GetTypeCode(Type t);
    public static PrimitiveTypeCode GetTypeCode(Type t, Boolean& isEnum);
    public static TypeInformation GetTypeInformation(IConvertible convertable);
    public static bool IsConvertible(Type t);
    public static TimeSpan ParseTimeSpan(string input);
    private static Func`2<object, object> CreateCastConverter(TypeConvertKey t);
    internal static BigInteger ToBigInteger(object value);
    public static object FromBigInteger(BigInteger i, Type targetType);
    public static object Convert(object initialValue, CultureInfo culture, Type targetType);
    private static bool TryConvert(object initialValue, CultureInfo culture, Type targetType, Object& value);
    private static ConvertResult TryConvertInternal(object initialValue, CultureInfo culture, Type targetType, Object& value);
    public static object ConvertOrCast(object initialValue, CultureInfo culture, Type targetType);
    private static object EnsureTypeAssignable(object value, Type initialType, Type targetType);
    public static object ToValue(INullable nullableValue);
    internal static TypeConverter GetConverter(Type t);
    public static bool VersionTryParse(string input, Version& result);
    public static bool IsInteger(object value);
    public static ParseResult Int32TryParse(Char[] chars, int start, int length, Int32& value);
    public static ParseResult Int64TryParse(Char[] chars, int start, int length, Int64& value);
    public static bool TryConvertGuid(string s, Guid& g);
    public static int HexTextToInt(Char[] text, int start, int end);
    private static int HexCharToInt(char ch);
}
internal class Newtonsoft.Json.Utilities.Creator`1 : MulticastDelegate {
    public Creator`1(object object, IntPtr method);
    public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Utilities.DateTimeParser : ValueType {
    public int Year;
    public int Month;
    public int Day;
    public int Hour;
    public int Minute;
    public int Second;
    public int Fraction;
    public int ZoneHour;
    public int ZoneMinute;
    public ParserTimeZone Zone;
    private Char[] _text;
    private int _end;
    private static Int32[] Power10;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static short MaxFractionDigits;
    private static DateTimeParser();
    public bool Parse(Char[] text, int startIndex, int length);
    private bool ParseDate(int start);
    private bool ParseTimeAndZoneAndWhitespace(int start);
    private bool ParseTime(Int32& start);
    private bool ParseZone(int start);
    private bool Parse4Digit(int start, Int32& num);
    private bool Parse2Digit(int start, Int32& num);
    private bool ParseChar(int start, char ch);
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.DateTimeUtils : object {
    internal static long InitialJavaScriptDateTicks;
    private static string IsoDateFormat;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysPer4Years;
    private static int DaysPerYear;
    private static long TicksPerDay;
    private static Int32[] DaysToMonth365;
    private static Int32[] DaysToMonth366;
    private static DateTimeUtils();
    [ExtensionAttribute]
public static TimeSpan GetUtcOffset(DateTime d);
    public static XmlDateTimeSerializationMode ToSerializationMode(DateTimeKind kind);
    internal static DateTime EnsureDateTime(DateTime value, DateTimeZoneHandling timeZone);
    private static DateTime SwitchToLocalTime(DateTime value);
    private static DateTime SwitchToUtcTime(DateTime value);
    private static long ToUniversalTicks(DateTime dateTime);
    private static long ToUniversalTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, bool convertToUtc);
    private static long UniversialTicksToJavaScriptTicks(long universialTicks);
    internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks);
    internal static bool TryParseDateTimeIso(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    internal static bool TryParseDateTimeOffsetIso(StringReference text, DateTimeOffset& dt);
    private static DateTime CreateDateTime(DateTimeParser dateTimeParser);
    internal static bool TryParseDateTime(StringReference s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTime(string s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTimeOffset(StringReference s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    internal static bool TryParseDateTimeOffset(string s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryParseMicrosoftDate(StringReference text, Int64& ticks, TimeSpan& offset, DateTimeKind& kind);
    private static bool TryParseDateTimeMicrosoft(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    private static bool TryParseDateTimeExact(string text, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    private static bool TryParseDateTimeOffsetMicrosoft(StringReference text, DateTimeOffset& dt);
    private static bool TryParseDateTimeOffsetExact(string text, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryReadOffset(StringReference offsetText, int startIndex, TimeSpan& offset);
    internal static void WriteDateTimeString(TextWriter writer, DateTime value, DateFormatHandling format, string formatString, CultureInfo culture);
    internal static int WriteDateTimeString(Char[] chars, int start, DateTime value, Nullable`1<TimeSpan> offset, DateTimeKind kind, DateFormatHandling format);
    internal static int WriteDefaultIsoDate(Char[] chars, int start, DateTime dt);
    private static void CopyIntToCharArray(Char[] chars, int start, int value, int digits);
    internal static int WriteDateTimeOffset(Char[] chars, int start, TimeSpan offset, DateFormatHandling format);
    internal static void WriteDateTimeOffsetString(TextWriter writer, DateTimeOffset value, DateFormatHandling format, string formatString, CultureInfo culture);
    private static void GetDateValues(DateTime td, Int32& year, Int32& month, Int32& day);
}
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Utilities.DictionaryWrapper`2 : object {
    private IDictionary _dictionary;
    private IDictionary`2<TKey, TValue> _genericDictionary;
    private IReadOnlyDictionary`2<TKey, TValue> _readOnlyDictionary;
    private object _syncRoot;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingDictionary { get; }
    public DictionaryWrapper`2(IDictionary dictionary);
    public DictionaryWrapper`2(IDictionary`2<TKey, TValue> dictionary);
    public DictionaryWrapper`2(IReadOnlyDictionary`2<TKey, TValue> dictionary);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual object get_UnderlyingDictionary();
}
internal class Newtonsoft.Json.Utilities.DynamicProxy`1 : object {
    public virtual IEnumerable`1<string> GetDynamicMemberNames(T instance);
    public virtual bool TryBinaryOperation(T instance, BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(T instance, ConvertBinder binder, Object& result);
    public virtual bool TryCreateInstance(T instance, CreateInstanceBinder binder, Object[] args, Object& result);
    public virtual bool TryDeleteIndex(T instance, DeleteIndexBinder binder, Object[] indexes);
    public virtual bool TryDeleteMember(T instance, DeleteMemberBinder binder);
    public virtual bool TryGetIndex(T instance, GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(T instance, GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(T instance, InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(T instance, InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetIndex(T instance, SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(T instance, SetMemberBinder binder, object value);
    public virtual bool TryUnaryOperation(T instance, UnaryOperationBinder binder, Object& result);
}
internal class Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1 : DynamicMetaObject {
    private DynamicProxy`1<T> _proxy;
    private bool _dontFallbackFirst;
    private static Expression[] NoArgs;
    private T Value { get; }
    internal DynamicProxyMetaObject`1(Expression expression, T value, DynamicProxy`1<T> proxy, bool dontFallbackFirst);
    private static DynamicProxyMetaObject`1();
    private T get_Value();
    private bool IsOverridden(string method);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    public virtual DynamicMetaObject BindConvert(ConvertBinder binder);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg);
    public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes);
    private static Expression[] GetArgs(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args, DynamicMetaObject value);
    private static ConstantExpression Constant(DynamicMetaObjectBinder binder);
    private DynamicMetaObject CallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, Expression[] args, Fallback<T> fallback, Fallback<T> fallbackInvoke);
    private DynamicMetaObject BuildCallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, Expression[] args, DynamicMetaObject fallbackResult, Fallback<T> fallbackInvoke);
    private DynamicMetaObject CallMethodReturnLast(string methodName, DynamicMetaObjectBinder binder, Expression[] args, Fallback<T> fallback);
    private DynamicMetaObject CallMethodNoResult(string methodName, DynamicMetaObjectBinder binder, Expression[] args, Fallback<T> fallback);
    private BindingRestrictions GetRestrictions();
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
internal class Newtonsoft.Json.Utilities.DynamicReflectionDelegateFactory : ReflectionDelegateFactory {
    public static DynamicReflectionDelegateFactory Instance;
    private static DynamicReflectionDelegateFactory();
    private static DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner);
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    private void GenerateCreateMethodCallIL(MethodBase method, ILGenerator generator, int argsIndex);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    private void GenerateCreateDefaultConstructorIL(Type type, ILGenerator generator);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    private void GenerateCreateGetPropertyIL(PropertyInfo propertyInfo, ILGenerator generator);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    private void GenerateCreateGetFieldIL(FieldInfo fieldInfo, ILGenerator generator);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    internal static void GenerateCreateSetFieldIL(FieldInfo fieldInfo, ILGenerator generator);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
    internal static void GenerateCreateSetPropertyIL(PropertyInfo propertyInfo, ILGenerator generator);
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.DynamicUtils : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDynamicMemberNames(IDynamicMetaObjectProvider dynamicProvider);
}
internal static class Newtonsoft.Json.Utilities.EnumUtils : object {
    private static ThreadSafeStore`2<Type, BidirectionalDictionary`2<string, string>> EnumMemberNamesPerType;
    private static EnumUtils();
    private static BidirectionalDictionary`2<string, string> InitializeEnumType(Type type);
    public static IList`1<T> GetFlagsValues(T value);
    public static IList`1<EnumValue`1<ulong>> GetNamesAndValues();
    public static IList`1<EnumValue`1<TUnderlyingType>> GetNamesAndValues(Type enumType);
    public static IList`1<object> GetValues(Type enumType);
    public static IList`1<string> GetNames(Type enumType);
    public static object ParseEnumName(string enumText, bool isNullable, Type t);
    public static string ToEnumName(Type enumType, string enumText, bool camelCaseText);
    private static string ResolvedEnumName(BidirectionalDictionary`2<string, string> map, string enumText);
}
internal class Newtonsoft.Json.Utilities.EnumValue`1 : object {
    private string _name;
    private T _value;
    public string Name { get; }
    public T Value { get; }
    public EnumValue`1(string name, T value);
    public string get_Name();
    public T get_Value();
}
internal class Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory : ReflectionDelegateFactory {
    private static ExpressionReflectionDelegateFactory _instance;
    internal static ReflectionDelegateFactory Instance { get; }
    private static ExpressionReflectionDelegateFactory();
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    private Expression BuildMethodCall(MethodBase method, Type type, ParameterExpression targetParameterExpression, ParameterExpression argsParameterExpression);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
    private Expression EnsureCastExpression(Expression expression, Type targetType);
}
internal class Newtonsoft.Json.Utilities.FSharpFunction : object {
    private object _instance;
    private MethodCall`2<object, object> _invoker;
    public FSharpFunction(object instance, MethodCall`2<object, object> invoker);
    public object Invoke(Object[] args);
}
internal static class Newtonsoft.Json.Utilities.FSharpUtils : object {
    private static object Lock;
    private static bool _initialized;
    private static MethodInfo _ofSeq;
    private static Type _mapType;
    [CompilerGeneratedAttribute]
private static Assembly <FSharpCoreAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodCall`2<object, object> <IsUnion>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodCall`2<object, object> <GetUnionCases>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodCall`2<object, object> <PreComputeUnionTagReader>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodCall`2<object, object> <PreComputeUnionReader>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodCall`2<object, object> <PreComputeUnionConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> <GetUnionCaseInfoDeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> <GetUnionCaseInfoName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> <GetUnionCaseInfoTag>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodCall`2<object, object> <GetUnionCaseInfoFields>k__BackingField;
    public static string FSharpSetTypeName;
    public static string FSharpListTypeName;
    public static string FSharpMapTypeName;
    public static Assembly FSharpCoreAssembly { get; private set; }
    public static MethodCall`2<object, object> IsUnion { get; private set; }
    public static MethodCall`2<object, object> GetUnionCases { get; private set; }
    public static MethodCall`2<object, object> PreComputeUnionTagReader { get; private set; }
    public static MethodCall`2<object, object> PreComputeUnionReader { get; private set; }
    public static MethodCall`2<object, object> PreComputeUnionConstructor { get; private set; }
    public static Func`2<object, object> GetUnionCaseInfoDeclaringType { get; private set; }
    public static Func`2<object, object> GetUnionCaseInfoName { get; private set; }
    public static Func`2<object, object> GetUnionCaseInfoTag { get; private set; }
    public static MethodCall`2<object, object> GetUnionCaseInfoFields { get; private set; }
    private static FSharpUtils();
    [CompilerGeneratedAttribute]
public static Assembly get_FSharpCoreAssembly();
    [CompilerGeneratedAttribute]
private static void set_FSharpCoreAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_IsUnion();
    [CompilerGeneratedAttribute]
private static void set_IsUnion(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_GetUnionCases();
    [CompilerGeneratedAttribute]
private static void set_GetUnionCases(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_PreComputeUnionTagReader();
    [CompilerGeneratedAttribute]
private static void set_PreComputeUnionTagReader(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_PreComputeUnionReader();
    [CompilerGeneratedAttribute]
private static void set_PreComputeUnionReader(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_PreComputeUnionConstructor();
    [CompilerGeneratedAttribute]
private static void set_PreComputeUnionConstructor(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public static Func`2<object, object> get_GetUnionCaseInfoDeclaringType();
    [CompilerGeneratedAttribute]
private static void set_GetUnionCaseInfoDeclaringType(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public static Func`2<object, object> get_GetUnionCaseInfoName();
    [CompilerGeneratedAttribute]
private static void set_GetUnionCaseInfoName(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public static Func`2<object, object> get_GetUnionCaseInfoTag();
    [CompilerGeneratedAttribute]
private static void set_GetUnionCaseInfoTag(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_GetUnionCaseInfoFields();
    [CompilerGeneratedAttribute]
private static void set_GetUnionCaseInfoFields(MethodCall`2<object, object> value);
    public static void EnsureInitialized(Assembly fsharpCoreAssembly);
    private static MethodInfo GetMethodWithNonPublicFallback(Type type, string methodName, BindingFlags bindingFlags);
    private static MethodCall`2<object, object> CreateFSharpFuncCall(Type type, string methodName);
    public static ObjectConstructor`1<object> CreateSeq(Type t);
    public static ObjectConstructor`1<object> CreateMap(Type keyType, Type valueType);
    public static ObjectConstructor`1<object> BuildMapCreator();
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void PushInstance(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void PushArrayInstance(ILGenerator generator, int argsIndex, int arrayIndex);
    [ExtensionAttribute]
public static void BoxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void UnboxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void CallMethod(ILGenerator generator, MethodInfo methodInfo);
    [ExtensionAttribute]
public static void Return(ILGenerator generator);
}
internal static class Newtonsoft.Json.Utilities.ImmutableCollectionsUtils : object {
    private static string ImmutableListGenericInterfaceTypeName;
    private static string ImmutableQueueGenericInterfaceTypeName;
    private static string ImmutableStackGenericInterfaceTypeName;
    private static string ImmutableSetGenericInterfaceTypeName;
    private static string ImmutableArrayTypeName;
    private static string ImmutableArrayGenericTypeName;
    private static string ImmutableListTypeName;
    private static string ImmutableListGenericTypeName;
    private static string ImmutableQueueTypeName;
    private static string ImmutableQueueGenericTypeName;
    private static string ImmutableStackTypeName;
    private static string ImmutableStackGenericTypeName;
    private static string ImmutableSortedSetTypeName;
    private static string ImmutableSortedSetGenericTypeName;
    private static string ImmutableHashSetTypeName;
    private static string ImmutableHashSetGenericTypeName;
    private static IList`1<ImmutableCollectionTypeInfo> ArrayContractImmutableCollectionDefinitions;
    private static string ImmutableDictionaryGenericInterfaceTypeName;
    private static string ImmutableDictionaryTypeName;
    private static string ImmutableDictionaryGenericTypeName;
    private static string ImmutableSortedDictionaryTypeName;
    private static string ImmutableSortedDictionaryGenericTypeName;
    private static IList`1<ImmutableCollectionTypeInfo> DictionaryContractImmutableCollectionDefinitions;
    private static ImmutableCollectionsUtils();
    internal static bool TryBuildImmutableForArrayContract(Type underlyingType, Type collectionItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
    internal static bool TryBuildImmutableForDictionaryContract(Type underlyingType, Type keyItemType, Type valueItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
}
internal interface Newtonsoft.Json.Utilities.IWrappedCollection {
    public object UnderlyingCollection { get; }
    public abstract virtual object get_UnderlyingCollection();
}
internal interface Newtonsoft.Json.Utilities.IWrappedDictionary {
    public object UnderlyingDictionary { get; }
    public abstract virtual object get_UnderlyingDictionary();
}
internal static class Newtonsoft.Json.Utilities.JavaScriptUtils : object {
    internal static Boolean[] SingleQuoteCharEscapeFlags;
    internal static Boolean[] DoubleQuoteCharEscapeFlags;
    internal static Boolean[] HtmlCharEscapeFlags;
    private static int UnicodeTextLength;
    private static string EscapedUnicodeText;
    private static JavaScriptUtils();
    public static Boolean[] GetCharEscapeFlags(StringEscapeHandling stringEscapeHandling, char quoteChar);
    public static bool ShouldEscapeJavaScriptString(string s, Boolean[] charEscapeFlags);
    public static void WriteEscapedJavaScriptString(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, IArrayPool`1<char> bufferPool, Char[]& writeBuffer);
    public static string ToEscapedJavaScriptString(string value, char delimiter, bool appendDelimiters, StringEscapeHandling stringEscapeHandling);
}
internal static class Newtonsoft.Json.Utilities.JsonTokenUtils : object {
    internal static bool IsEndToken(JsonToken token);
    internal static bool IsStartToken(JsonToken token);
    internal static bool IsPrimitiveToken(JsonToken token);
}
internal class Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory : ReflectionDelegateFactory {
    private static LateBoundReflectionDelegateFactory _instance;
    internal static ReflectionDelegateFactory Instance { get; }
    private static LateBoundReflectionDelegateFactory();
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
internal static class Newtonsoft.Json.Utilities.MathUtils : object {
    public static int IntLength(ulong i);
    public static char IntToHex(int n);
    public static Nullable`1<int> Min(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<int> Max(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<double> Max(Nullable`1<double> val1, Nullable`1<double> val2);
    public static bool ApproxEquals(double d1, double d2);
}
internal class Newtonsoft.Json.Utilities.MethodCall`2 : MulticastDelegate {
    public MethodCall`2(object object, IntPtr method);
    public virtual TResult Invoke(T target, Object[] args);
    public virtual IAsyncResult BeginInvoke(T target, Object[] args, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
internal static class Newtonsoft.Json.Utilities.MiscellaneousUtils : object {
    public static bool ValueEquals(object objA, object objB);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
    public static string ToString(object value);
    public static int ByteArrayCompare(Byte[] a1, Byte[] a2);
    public static string GetPrefix(string qualifiedName);
    public static string GetLocalName(string qualifiedName);
    public static void GetQualifiedNameParts(string qualifiedName, String& prefix, String& localName);
    internal static string FormatValueForPrint(object value);
}
internal class Newtonsoft.Json.Utilities.NoThrowExpressionVisitor : ExpressionVisitor {
    internal static object ErrorResult;
    private static NoThrowExpressionVisitor();
    protected virtual Expression VisitConditional(ConditionalExpression node);
}
internal class Newtonsoft.Json.Utilities.NoThrowGetBinderMember : GetMemberBinder {
    private GetMemberBinder _innerBinder;
    public NoThrowGetBinderMember(GetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
}
internal class Newtonsoft.Json.Utilities.NoThrowSetBinderMember : SetMemberBinder {
    private SetMemberBinder _innerBinder;
    public NoThrowSetBinderMember(SetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
}
internal enum Newtonsoft.Json.Utilities.ParseResult : Enum {
    public int value__;
    public static ParseResult None;
    public static ParseResult Success;
    public static ParseResult Overflow;
    public static ParseResult Invalid;
}
internal enum Newtonsoft.Json.Utilities.ParserTimeZone : Enum {
    public int value__;
    public static ParserTimeZone Unspecified;
    public static ParserTimeZone Utc;
    public static ParserTimeZone LocalWestOfUtc;
    public static ParserTimeZone LocalEastOfUtc;
}
internal enum Newtonsoft.Json.Utilities.PrimitiveTypeCode : Enum {
    public int value__;
    public static PrimitiveTypeCode Empty;
    public static PrimitiveTypeCode Object;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode CharNullable;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode BooleanNullable;
    public static PrimitiveTypeCode SByte;
    public static PrimitiveTypeCode SByteNullable;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode Int16Nullable;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode UInt16Nullable;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode Int32Nullable;
    public static PrimitiveTypeCode Byte;
    public static PrimitiveTypeCode ByteNullable;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode UInt32Nullable;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode Int64Nullable;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode UInt64Nullable;
    public static PrimitiveTypeCode Single;
    public static PrimitiveTypeCode SingleNullable;
    public static PrimitiveTypeCode Double;
    public static PrimitiveTypeCode DoubleNullable;
    public static PrimitiveTypeCode DateTime;
    public static PrimitiveTypeCode DateTimeNullable;
    public static PrimitiveTypeCode DateTimeOffset;
    public static PrimitiveTypeCode DateTimeOffsetNullable;
    public static PrimitiveTypeCode Decimal;
    public static PrimitiveTypeCode DecimalNullable;
    public static PrimitiveTypeCode Guid;
    public static PrimitiveTypeCode GuidNullable;
    public static PrimitiveTypeCode TimeSpan;
    public static PrimitiveTypeCode TimeSpanNullable;
    public static PrimitiveTypeCode BigInteger;
    public static PrimitiveTypeCode BigIntegerNullable;
    public static PrimitiveTypeCode Uri;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode Bytes;
    public static PrimitiveTypeCode DBNull;
}
internal class Newtonsoft.Json.Utilities.PropertyNameTable : object {
    private static int HashCodeRandomizer;
    private int _count;
    private Entry[] _entries;
    private int _mask;
    private static PropertyNameTable();
    public string Get(Char[] key, int start, int length);
    public string Add(string key);
    private string AddEntry(string str, int hashCode);
    private void Grow();
    private static bool TextEquals(string str1, Char[] str2, int str2Start, int str2Length);
}
internal abstract class Newtonsoft.Json.Utilities.ReflectionDelegateFactory : object {
    public Func`2<T, object> CreateGet(MemberInfo memberInfo);
    public Action`2<T, object> CreateSet(MemberInfo memberInfo);
    public abstract virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public abstract virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public abstract virtual Func`1<T> CreateDefaultConstructor(Type type);
    public abstract virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public abstract virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
internal class Newtonsoft.Json.Utilities.ReflectionMember : object {
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<object, object> <Setter>k__BackingField;
    public Type MemberType { get; public set; }
    public Func`2<object, object> Getter { get; public set; }
    public Action`2<object, object> Setter { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Action`2<object, object> value);
}
internal class Newtonsoft.Json.Utilities.ReflectionObject : object {
    [CompilerGeneratedAttribute]
private ObjectConstructor`1<object> <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ReflectionMember> <Members>k__BackingField;
    public ObjectConstructor`1<object> Creator { get; private set; }
    public IDictionary`2<string, ReflectionMember> Members { get; private set; }
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ReflectionMember> get_Members();
    [CompilerGeneratedAttribute]
private void set_Members(IDictionary`2<string, ReflectionMember> value);
    public object GetValue(object target, string member);
    public void SetValue(object target, string member, object value);
    public Type GetType(string member);
    public static ReflectionObject Create(Type t, String[] memberNames);
    public static ReflectionObject Create(Type t, MethodBase creator, String[] memberNames);
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.ReflectionUtils : object {
    public static Type[] EmptyTypes;
    private static ReflectionUtils();
    [ExtensionAttribute]
public static bool IsVirtual(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static MethodInfo GetBaseDefinition(PropertyInfo propertyInfo);
    public static bool IsPublic(PropertyInfo property);
    public static Type GetObjectType(object v);
    public static string GetTypeName(Type t, FormatterAssemblyStyle assemblyFormat, SerializationBinder binder);
    private static string RemoveAssemblyDetails(string fullyQualifiedTypeName);
    public static bool HasDefaultConstructor(Type t, bool nonPublic);
    public static ConstructorInfo GetDefaultConstructor(Type t);
    public static ConstructorInfo GetDefaultConstructor(Type t, bool nonPublic);
    public static bool IsNullable(Type t);
    public static bool IsNullableType(Type t);
    public static Type EnsureNotNullableType(Type t);
    public static bool IsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition, Type& implementingType);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition, Type& implementingType);
    private static bool InheritsGenericDefinitionInternal(Type currentType, Type genericClassDefinition, Type& implementingType);
    public static Type GetCollectionItemType(Type type);
    public static void GetDictionaryKeyValueTypes(Type dictionaryType, Type& keyType, Type& valueType);
    public static Type GetMemberUnderlyingType(MemberInfo member);
    public static bool IsIndexedProperty(MemberInfo member);
    public static bool IsIndexedProperty(PropertyInfo property);
    public static object GetMemberValue(MemberInfo member, object target);
    public static void SetMemberValue(MemberInfo member, object target, object value);
    public static bool CanReadMemberValue(MemberInfo member, bool nonPublic);
    public static bool CanSetMemberValue(MemberInfo member, bool nonPublic, bool canSetReadOnly);
    public static List`1<MemberInfo> GetFieldsAndProperties(Type type, BindingFlags bindingAttr);
    private static bool IsOverridenGenericMember(MemberInfo memberInfo, BindingFlags bindingAttr);
    public static T GetAttribute(object attributeProvider);
    public static T GetAttribute(object attributeProvider, bool inherit);
    public static T[] GetAttributes(object attributeProvider, bool inherit);
    public static Attribute[] GetAttributes(object attributeProvider, Type attributeType, bool inherit);
    public static void SplitFullyQualifiedTypeName(string fullyQualifiedTypeName, String& typeName, String& assemblyName);
    private static Nullable`1<int> GetAssemblyDelimiterIndex(string fullyQualifiedTypeName);
    public static MemberInfo GetMemberInfoFromType(Type targetType, MemberInfo memberInfo);
    public static IEnumerable`1<FieldInfo> GetFields(Type targetType, BindingFlags bindingAttr);
    private static void GetChildPrivateFields(IList`1<MemberInfo> initialFields, Type targetType, BindingFlags bindingAttr);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type targetType, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static BindingFlags RemoveFlag(BindingFlags bindingAttr, BindingFlags flag);
    private static void GetChildPrivateProperties(IList`1<PropertyInfo> initialProperties, Type targetType, BindingFlags bindingAttr);
    public static bool IsMethodOverridden(Type currentType, Type methodDeclaringType, string method);
    public static object GetDefaultValue(Type type);
}
internal class Newtonsoft.Json.Utilities.StringBuffer : ValueType {
    private Char[] _buffer;
    private int _position;
    public int Position { get; public set; }
    public bool IsEmpty { get; }
    public Char[] InternalBuffer { get; }
    public StringBuffer(IArrayPool`1<char> bufferPool, int initalSize);
    private StringBuffer(Char[] buffer);
    public int get_Position();
    public void set_Position(int value);
    public bool get_IsEmpty();
    public void Append(IArrayPool`1<char> bufferPool, char value);
    public void Append(IArrayPool`1<char> bufferPool, Char[] buffer, int startIndex, int count);
    public void Clear(IArrayPool`1<char> bufferPool);
    private void EnsureSize(IArrayPool`1<char> bufferPool, int appendLength);
    public virtual string ToString();
    public string ToString(int start, int length);
    public Char[] get_InternalBuffer();
}
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Utilities.StringReference : ValueType {
    private Char[] _chars;
    private int _startIndex;
    private int _length;
    public char Item { get; }
    public Char[] Chars { get; }
    public int StartIndex { get; }
    public int Length { get; }
    public StringReference(Char[] chars, int startIndex, int length);
    public char get_Item(int i);
    public Char[] get_Chars();
    public int get_StartIndex();
    public int get_Length();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.StringReferenceExtensions : object {
    [ExtensionAttribute]
public static int IndexOf(StringReference s, char c, int startIndex, int length);
    [ExtensionAttribute]
public static bool StartsWith(StringReference s, string text);
    [ExtensionAttribute]
public static bool EndsWith(StringReference s, string text);
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.StringUtils : object {
    public static string CarriageReturnLineFeed;
    public static string Empty;
    public static char CarriageReturn;
    public static char LineFeed;
    public static char Tab;
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2, object arg3);
    [ExtensionAttribute]
private static string FormatWith(string format, IFormatProvider provider, Object[] args);
    public static bool IsWhiteSpace(string s);
    public static StringWriter CreateStringWriter(int capacity);
    public static void ToCharAsUnicode(char c, Char[] buffer);
    [ExtensionAttribute]
public static TSource ForgivingCaseSensitiveFind(IEnumerable`1<TSource> source, Func`2<TSource, string> valueSelector, string testValue);
    public static string ToCamelCase(string s);
    public static string ToSnakeCase(string s);
    public static bool IsHighSurrogate(char c);
    public static bool IsLowSurrogate(char c);
    [ExtensionAttribute]
public static bool StartsWith(string source, char value);
    [ExtensionAttribute]
public static bool EndsWith(string source, char value);
}
internal class Newtonsoft.Json.Utilities.ThreadSafeStore`2 : object {
    private object _lock;
    private Dictionary`2<TKey, TValue> _store;
    private Func`2<TKey, TValue> _creator;
    public ThreadSafeStore`2(Func`2<TKey, TValue> creator);
    public TValue Get(TKey key);
    private TValue AddValue(TKey key);
}
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.TypeExtensions : object {
    [ExtensionAttribute]
public static MethodInfo Method(Delegate d);
    [ExtensionAttribute]
public static MemberTypes MemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool ContainsGenericParameters(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsVisible(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, Type& match);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName);
    [ExtensionAttribute]
public static bool ImplementInterface(Type type, Type interfaceType);
}
internal class Newtonsoft.Json.Utilities.TypeInformation : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    public Type Type { get; public set; }
    public PrimitiveTypeCode TypeCode { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public PrimitiveTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
public void set_TypeCode(PrimitiveTypeCode value);
}
internal static class Newtonsoft.Json.Utilities.ValidationUtils : object {
    public static void ArgumentNotNull(object value, string parameterName);
}
internal enum Newtonsoft.Json.WriteState : Enum {
    public int value__;
    public static WriteState Error;
    public static WriteState Closed;
    public static WriteState Object;
    public static WriteState Array;
    public static WriteState Constructor;
    public static WriteState Property;
    public static WriteState Start;
}
[ExtensionAttribute]
internal static class Owin.AppBuilderUseExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder Use(IAppBuilder app, Object[] args);
    [ExtensionAttribute]
public static void Run(IAppBuilder app, Func`2<IOwinContext, Task> handler);
    [ExtensionAttribute]
public static IAppBuilder Use(IAppBuilder app, Func`3<IOwinContext, Func`1<Task>, Task> handler);
}
[SecuritySafeCriticalAttribute]
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class Owin.AutofacWebApiAppBuilderExtensions : object {
    [ExtensionAttribute]
[SecuritySafeCriticalAttribute]
public static IAppBuilder UseAutofacWebApi(IAppBuilder app, HttpConfiguration configuration);
}
[ExtensionAttribute]
internal static class Owin.ConfigureDataProtectorExtension : object {
    [ExtensionAttribute]
public static IAppBuilder ConfigureDataProtectionProvider(IAppBuilder app, IdentityServerOptions options);
}
[ExtensionAttribute]
internal static class Owin.ConfigureHttpLoggingExtension : object {
    private static ILog Logger;
    [CompilerGeneratedAttribute]
private static Func`3<IOwinContext, Func`1<Task>, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    private static ConfigureHttpLoggingExtension();
    [ExtensionAttribute]
public static IAppBuilder ConfigureHttpLogging(IAppBuilder app, LoggingOptions options);
    [AsyncStateMachineAttribute("Owin.ConfigureHttpLoggingExtension/<LogRequest>d__7")]
[DebuggerStepThroughAttribute]
private static Task LogRequest(IOwinRequest request);
    [AsyncStateMachineAttribute("Owin.ConfigureHttpLoggingExtension/<LogResponse>d__b")]
[DebuggerStepThroughAttribute]
private static Task LogResponse(IOwinResponse response);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Owin.ConfigureHttpLoggingExtension/<<ConfigureHttpLogging>b__0>d__2")]
[DebuggerStepThroughAttribute]
private static Task <ConfigureHttpLogging>b__0(IOwinContext ctx, Func`1<Task> next);
}
[ExtensionAttribute]
internal static class Owin.ConfigureIdentityServerBaseUrlExtension : object {
    [ExtensionAttribute]
public static IAppBuilder ConfigureIdentityServerBaseUrl(IAppBuilder app, string publicOrigin);
}
[ExtensionAttribute]
internal static class Owin.ConfigureIdentityServerIssuerExtension : object {
    [ExtensionAttribute]
public static IAppBuilder ConfigureIdentityServerIssuer(IAppBuilder app, IdentityServerOptions options);
}
[ExtensionAttribute]
internal static class Owin.ConfigureRenderLoggedOutPageExtension : object {
    [CompilerGeneratedAttribute]
private static Func`3<IOwinContext, Func`1<Task>, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static IAppBuilder ConfigureRenderLoggedOutPage(IAppBuilder app);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Owin.ConfigureRenderLoggedOutPageExtension/<<ConfigureRenderLoggedOutPage>b__0>d__2")]
[CompilerGeneratedAttribute]
private static Task <ConfigureRenderLoggedOutPage>b__0(IOwinContext ctx, Func`1<Task> next);
}
[ExtensionAttribute]
internal static class Owin.ConfigureRequestBodyBufferExtension : object {
    [CompilerGeneratedAttribute]
private static Func`3<IOwinContext, Func`1<Task>, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static IAppBuilder ConfigureRequestBodyBuffer(IAppBuilder app);
    [DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Owin.ConfigureRequestBodyBufferExtension/<<ConfigureRequestBodyBuffer>b__0>d__2")]
private static Task <ConfigureRequestBodyBuffer>b__0(IOwinContext context, Func`1<Task> next);
}
[ExtensionAttribute]
internal static class Owin.ConfigureRequestIdExtension : object {
    [CompilerGeneratedAttribute]
private static Func`3<IOwinContext, Func`1<Task>, Task> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
internal static IAppBuilder ConfigureRequestId(IAppBuilder app);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Owin.ConfigureRequestIdExtension/<<ConfigureRequestId>b__0>d__2")]
[CompilerGeneratedAttribute]
private static Task <ConfigureRequestId>b__0(IOwinContext ctx, Func`1<Task> next);
}
[ExtensionAttribute]
internal static class Owin.CookieAuthenticationExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseCookieAuthentication(IAppBuilder app, CookieAuthenticationOptions options);
    [ExtensionAttribute]
public static IAppBuilder UseCookieAuthentication(IAppBuilder app, CookieAuthenticationOptions options, PipelineStage stage);
}
[ExtensionAttribute]
internal static class Owin.CorsExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseCors(IAppBuilder app, CorsOptions options);
}
[ExtensionAttribute]
internal static class Owin.DefaultFilesExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseDefaultFiles(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder UseDefaultFiles(IAppBuilder builder, string requestPath);
    [ExtensionAttribute]
public static IAppBuilder UseDefaultFiles(IAppBuilder builder, DefaultFilesOptions options);
}
[ExtensionAttribute]
internal static class Owin.DirectoryBrowserExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseDirectoryBrowser(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder UseDirectoryBrowser(IAppBuilder builder, string requestPath);
    [ExtensionAttribute]
public static IAppBuilder UseDirectoryBrowser(IAppBuilder builder, DirectoryBrowserOptions options);
}
[ExtensionAttribute]
internal static class Owin.FileServerExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseFileServer(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder UseFileServer(IAppBuilder builder, bool enableDirectoryBrowsing);
    [ExtensionAttribute]
public static IAppBuilder UseFileServer(IAppBuilder builder, string requestPath);
    [ExtensionAttribute]
public static IAppBuilder UseFileServer(IAppBuilder builder, FileServerOptions options);
}
[ExtensionAttribute]
internal static class Owin.MapExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder Map(IAppBuilder app, string pathMatch, Action`1<IAppBuilder> configuration);
    [ExtensionAttribute]
public static IAppBuilder Map(IAppBuilder app, PathString pathMatch, Action`1<IAppBuilder> configuration);
}
[ExtensionAttribute]
internal static class Owin.MapWhenExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder MapWhen(IAppBuilder app, Func`2<IOwinContext, bool> predicate, Action`1<IAppBuilder> configuration);
    [ExtensionAttribute]
public static IAppBuilder MapWhenAsync(IAppBuilder app, Func`2<IOwinContext, Task`1<bool>> predicate, Action`1<IAppBuilder> configuration);
}
[ExtensionAttribute]
[SecuritySafeCriticalAttribute]
[EditorBrowsableAttribute("1")]
internal static class Owin.OwinExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<IComponentRegistration, IEnumerable`1<Service>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<TypedService, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<TypedService, Type> CS$<>9__CachedAnonymousMethodDelegate11;
    [ExtensionAttribute]
[SecuritySafeCriticalAttribute]
public static IAppBuilder UseAutofacMiddleware(IAppBuilder app, ILifetimeScope container);
    [SecuritySafeCriticalAttribute]
[ExtensionAttribute]
private static void UseMiddlewareFromContainer(IAppBuilder app, IComponentContext container);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Service> <UseMiddlewareFromContainer>b__b(IComponentRegistration r);
    [CompilerGeneratedAttribute]
private static bool <UseMiddlewareFromContainer>b__c(TypedService s);
    [CompilerGeneratedAttribute]
private static Type <UseMiddlewareFromContainer>b__d(TypedService service);
}
internal enum Owin.PipelineStage : Enum {
    public int value__;
    public static PipelineStage Authenticate;
    public static PipelineStage PostAuthenticate;
    public static PipelineStage Authorize;
    public static PipelineStage PostAuthorize;
    public static PipelineStage ResolveCache;
    public static PipelineStage PostResolveCache;
    public static PipelineStage MapHandler;
    public static PipelineStage PostMapHandler;
    public static PipelineStage AcquireState;
    public static PipelineStage PostAcquireState;
    public static PipelineStage PreHandlerExecute;
}
[ExtensionAttribute]
internal static class Owin.SignOutMessageCookieExtension : object {
    [CompilerGeneratedAttribute]
private static Func`3<IOwinContext, Func`1<Task>, Task> CS$<>9__CachedAnonymousMethodDelegate2;
    [ExtensionAttribute]
public static IAppBuilder ConfigureSignOutMessageCookie(IAppBuilder app);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Owin.SignOutMessageCookieExtension/<<ConfigureSignOutMessageCookie>b__0>d__5")]
private static Task <ConfigureSignOutMessageCookie>b__0(IOwinContext context, Func`1<Task> next);
}
[ExtensionAttribute]
internal static class Owin.StaticFileExtensions : object {
    [ExtensionAttribute]
public static IAppBuilder UseStaticFiles(IAppBuilder builder);
    [ExtensionAttribute]
public static IAppBuilder UseStaticFiles(IAppBuilder builder, string requestPath);
    [ExtensionAttribute]
public static IAppBuilder UseStaticFiles(IAppBuilder builder, StaticFileOptions options);
}
[ExtensionAttribute]
internal static class Owin.UseCookieAuthenticationExtension : object {
    [CompilerGeneratedAttribute]
private static Func`2<CookieValidateIdentityContext, Task> CS$<>9__CachedAnonymousMethodDelegate7;
    [ExtensionAttribute]
public static IAppBuilder ConfigureCookieAuthentication(IAppBuilder app, CookieOptions options, IDataProtector dataProtector);
    private static CookieSecureOption GetCookieSecure(CookieSecureMode cookieSecureMode);
    private static IAuthenticationSessionStore GetSessionStore(IAuthenticationSessionStoreProvider provider);
    [AsyncStateMachineAttribute("Owin.UseCookieAuthenticationExtension/<<ConfigureCookieAuthentication>b__4>d__b")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private static Task <ConfigureCookieAuthentication>b__4(CookieValidateIdentityContext cookieCtx);
}
[ExtensionAttribute]
internal static class Owin.UseCorsExtension : object {
    [ExtensionAttribute]
public static void UseCors(IAppBuilder app);
}
[ExtensionAttribute]
internal static class Owin.UseEmbeddedFileServerExtension : object {
    [ExtensionAttribute]
public static IAppBuilder UseEmbeddedFileServer(IAppBuilder app);
}
[ExtensionAttribute]
public static class Owin.UseHstsExtension : object {
    [ExtensionAttribute]
public static IAppBuilder UseHsts(IAppBuilder app, TimeSpan duration);
    [ExtensionAttribute]
public static IAppBuilder UseHsts(IAppBuilder app, int days);
}
[ExtensionAttribute]
public static class Owin.UseIdentityServerExtension : object {
    private static ILog Logger;
    private static UseIdentityServerExtension();
    [ExtensionAttribute]
public static IAppBuilder UseIdentityServer(IAppBuilder app, IdentityServerOptions options);
    [AsyncStateMachineAttribute("Owin.UseIdentityServerExtension/<DoStartupDiagnosticsAsync>d__0")]
[DebuggerStepThroughAttribute]
private static Task DoStartupDiagnosticsAsync(IdentityServerOptions options, IEventService eventSvc);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class Owin.WebApiAppBuilderExtensions : object {
    private static IHostBufferPolicySelector _defaultBufferPolicySelector;
    private static WebApiAppBuilderExtensions();
    [ExtensionAttribute]
public static IAppBuilder UseWebApi(IAppBuilder builder, HttpConfiguration configuration);
    [ExtensionAttribute]
public static IAppBuilder UseWebApi(IAppBuilder builder, HttpServer httpServer);
    [ExtensionAttribute]
private static IAppBuilder UseMessageHandler(IAppBuilder builder, HttpMessageHandlerOptions options);
    private static HttpMessageHandlerOptions CreateOptions(IAppBuilder builder, HttpServer server, HttpConfiguration configuration);
    [ExtensionAttribute]
internal static CancellationToken GetOnAppDisposingProperty(IAppBuilder builder);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.CollectionExtensions : object {
    [ExtensionAttribute]
public static T[] AppendAndReallocate(T[] array, T value);
    [ExtensionAttribute]
public static T[] AsArray(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static Collection`1<T> AsCollection(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static IList`1<T> AsIList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static void RemoveFrom(List`1<T> list, int start);
    [ExtensionAttribute]
public static T SingleDefaultOrError(IList`1<T> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static TMatch SingleOfTypeDefaultOrError(IList`1<TInput> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static T[] ToArrayWithoutNulls(ICollection`1<T> collection);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(TValue[] array, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IEnumerable`1<TValue> enumerable, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TValue> ToDictionaryFastNoCheck(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Collections.Generic.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`2<KeyValuePair`2<TKey, TValue>, bool> removeCondition);
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`3<KeyValuePair`2<TKey, TValue>, TState, bool> removeCondition, TState state);
    [ExtensionAttribute]
public static bool TryGetValue(IDictionary`2<string, object> collection, string key, T& value);
    [ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix);
    [CompilerGeneratedAttribute]
private static bool <RemoveFromDictionary>b__0(KeyValuePair`2<TKey, TValue> entry, Func`2<KeyValuePair`2<TKey, TValue>, bool> innerCondition);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.System.Web.Http.Owin1126879.CollectionExtensions : object {
    [ExtensionAttribute]
public static T[] AppendAndReallocate(T[] array, T value);
    [ExtensionAttribute]
public static T[] AsArray(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static Collection`1<T> AsCollection(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static IList`1<T> AsIList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static void RemoveFrom(List`1<T> list, int start);
    [ExtensionAttribute]
public static T SingleDefaultOrError(IList`1<T> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static TMatch SingleOfTypeDefaultOrError(IList`1<TInput> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static T[] ToArrayWithoutNulls(ICollection`1<T> collection);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(TValue[] array, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IEnumerable`1<TValue> enumerable, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TValue> ToDictionaryFastNoCheck(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Collections.Generic.System.Web.Http.Owin1126879.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`2<KeyValuePair`2<TKey, TValue>, bool> removeCondition);
    [ExtensionAttribute]
public static void RemoveFromDictionary(IDictionary`2<TKey, TValue> dictionary, Func`3<KeyValuePair`2<TKey, TValue>, TState, bool> removeCondition, TState state);
    [ExtensionAttribute]
public static bool TryGetValue(IDictionary`2<string, object> collection, string key, T& value);
    [ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, TValue>> FindKeysWithPrefix(IDictionary`2<string, TValue> dictionary, string prefix);
    [CompilerGeneratedAttribute]
private static bool <RemoveFromDictionary>b__0(KeyValuePair`2<TKey, TValue> entry, Func`2<KeyValuePair`2<TKey, TValue>, bool> innerCondition);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.System.Web.Http911064.CollectionExtensions : object {
    [ExtensionAttribute]
public static T[] AppendAndReallocate(T[] array, T value);
    [ExtensionAttribute]
public static T[] AsArray(IEnumerable`1<T> values);
    [ExtensionAttribute]
public static Collection`1<T> AsCollection(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static IList`1<T> AsIList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static void RemoveFrom(List`1<T> list, int start);
    [ExtensionAttribute]
public static T SingleDefaultOrError(IList`1<T> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static TMatch SingleOfTypeDefaultOrError(IList`1<TInput> list, Action`1<TArg1> errorAction, TArg1 errorArg1);
    [ExtensionAttribute]
public static T[] ToArrayWithoutNulls(ICollection`1<T> collection);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(TValue[] array, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionaryFast(IEnumerable`1<TValue> enumerable, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TValue> ToDictionaryFastNoCheck(IList`1<TValue> list, Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
internal class System.Collections.ObjectModel.ListWrapperCollection`1 : Collection`1<T> {
    private List`1<T> _items;
    internal List`1<T> ItemsList { get; }
    internal ListWrapperCollection`1(List`1<T> list);
    internal List`1<T> get_ItemsList();
}
internal class System.Collections.ObjectModel.System.Web.Http.Owin1126879.ListWrapperCollection`1 : Collection`1<T> {
    private List`1<T> _items;
    internal List`1<T> ItemsList { get; }
    internal System.Web.Http.Owin1126879.ListWrapperCollection`1(List`1<T> list);
    internal List`1<T> get_ItemsList();
}
internal class System.Collections.ObjectModel.System.Web.Http911064.ListWrapperCollection`1 : Collection`1<T> {
    private List`1<T> _items;
    internal List`1<T> ItemsList { get; }
    internal System.Web.Http911064.ListWrapperCollection`1(List`1<T> list);
    internal List`1<T> get_ItemsList();
}
internal static class System.IdentityModel.DateTimeUtil : object {
    public static DateTime Add(DateTime time, TimeSpan timespan);
    public static DateTime GetMaxValue(DateTimeKind kind);
    public static DateTime GetMinValue(DateTimeKind kind);
}
internal static class System.IdentityModel.DiagnosticUtility : object {
    public static bool IsFatal(Exception exception);
}
internal static class System.IdentityModel.TextStrings : object {
    public static string Empty;
    public static string Null;
}
internal class System.IdentityModel.Tokens.AsymmetricSignatureProvider : SignatureProvider {
    private bool disposed;
    private HashAlgorithm hash;
    private AsymmetricSignatureFormatter formatter;
    private AsymmetricSignatureDeformatter deformatter;
    private AsymmetricSecurityKey key;
    public AsymmetricSignatureProvider(AsymmetricSecurityKey key, string algorithm, bool willCreateSignatures);
    public virtual Byte[] Sign(Byte[] input);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    protected virtual void Dispose(bool disposing);
}
internal class System.IdentityModel.Tokens.AudienceValidator : MulticastDelegate {
    public AudienceValidator(object object, IntPtr method);
    public virtual bool Invoke(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal static class System.IdentityModel.Tokens.Base64UrlEncoder : object {
    private static char base64PadCharacter;
    private static string doubleBase64PadCharacter;
    private static char base64Character62;
    private static char base64Character63;
    private static char base64UrlCharacter62;
    private static char _base64UrlCharacter63;
    private static Base64UrlEncoder();
    public static string Encode(string arg);
    public static string Encode(Byte[] inArray, int offset, int length);
    public static string Encode(Byte[] inArray);
    public static Byte[] DecodeBytes(string str);
    public static string Decode(string arg);
}
internal static class System.IdentityModel.Tokens.ClaimTypeMapping : object {
    private static Dictionary`2<string, string> shortToLongClaimTypeMapping;
    private static IDictionary`2<string, string> longToShortClaimTypeMapping;
    private static HashSet`1<string> inboundClaimFilter;
    public static IDictionary`2<string, string> InboundClaimTypeMap { get; }
    public static IDictionary`2<string, string> OutboundClaimTypeMap { get; }
    public static ISet`1<string> InboundClaimFilter { get; }
    private static ClaimTypeMapping();
    public static IDictionary`2<string, string> get_InboundClaimTypeMap();
    public static IDictionary`2<string, string> get_OutboundClaimTypeMap();
    public static ISet`1<string> get_InboundClaimFilter();
}
internal class System.IdentityModel.Tokens.Deserializer : MulticastDelegate {
    public Deserializer(object object, IntPtr method);
    public virtual object Invoke(string obj, Type targetType);
    public virtual IAsyncResult BeginInvoke(string obj, Type targetType, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal static class System.IdentityModel.Tokens.EpochTime : object {
    public static DateTime UnixEpoch;
    private static EpochTime();
    public static long GetIntDate(DateTime datetime);
    public static DateTime DateTime(long secondsSinceUnixEpoch);
}
internal interface System.IdentityModel.Tokens.ISecurityTokenValidator {
    public int MaximumTokenSizeInBytes { get; public set; }
    public abstract virtual bool CanReadToken(string securityToken);
    public abstract virtual int get_MaximumTokenSizeInBytes();
    public abstract virtual void set_MaximumTokenSizeInBytes(int value);
    public abstract virtual ClaimsPrincipal ValidateToken(string securityToken, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
}
internal class System.IdentityModel.Tokens.IssuerSigningKeyResolver : MulticastDelegate {
    public IssuerSigningKeyResolver(object object, IntPtr method);
    public virtual SecurityKey Invoke(string token, SecurityToken securityToken, SecurityKeyIdentifier keyIdentifier, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string token, SecurityToken securityToken, SecurityKeyIdentifier keyIdentifier, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual SecurityKey EndInvoke(IAsyncResult result);
}
internal class System.IdentityModel.Tokens.IssuerValidator : MulticastDelegate {
    public IssuerValidator(object object, IntPtr method);
    public virtual string Invoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal interface System.IdentityModel.Tokens.ITokenReplayCache {
    public abstract virtual bool TryAdd(string securityToken, DateTime expiresOn);
    public abstract virtual bool TryFind(string securityToken);
}
internal static class System.IdentityModel.Tokens.JsonExtensions : object {
    private static JavaScriptSerializer _javaScriptSerializer;
    private static Serializer _serializer;
    private static Deserializer _deserializer;
    public static Serializer Serializer { get; public set; }
    public static Deserializer Deserializer { get; public set; }
    private static JsonExtensions();
    public static Serializer get_Serializer();
    public static void set_Serializer(Serializer value);
    public static Deserializer get_Deserializer();
    public static void set_Deserializer(Deserializer value);
    public static string SerializeToJson(object value);
    public static T DeserializeFromJson(string jsonString);
    public static JwtHeader DeserializeJwtHeader(string jsonString);
    public static JwtPayload DeserializeJwtPayload(string jsonString);
}
internal class System.IdentityModel.Tokens.JwtAlgorithms : ValueType {
    public static string ECDSA_SHA256;
    public static string ECDSA_SHA384;
    public static string ECDSA_SHA512;
    public static string HMAC_SHA256;
    public static string HMAC_SHA384;
    public static string HMAC_SHA512;
    public static string NONE;
    public static string RSA_SHA256;
    public static string RSA_SHA384;
    public static string RSA_SHA512;
}
internal static class System.IdentityModel.Tokens.JwtConfigurationStrings : object {
}
internal static class System.IdentityModel.Tokens.JwtConstants : object {
    public static string HeaderType;
    public static string HeaderTypeAlt;
    public static string TokenType;
    public static string TokenTypeAlt;
    public static string JsonCompactSerializationRegex;
    public static string JsonClaimValueType;
}
internal class System.IdentityModel.Tokens.JwtHeader : Dictionary`2<string, object> {
    private SigningCredentials signingCredentials;
    public string Alg { get; }
    public SigningCredentials SigningCredentials { get; }
    public string Typ { get; }
    public SecurityKeyIdentifier SigningKeyIdentifier { get; }
    public JwtHeader(SigningCredentials signingCredentials);
    public string get_Alg();
    public SigningCredentials get_SigningCredentials();
    public string get_Typ();
    public virtual SecurityKeyIdentifier get_SigningKeyIdentifier();
    internal string GetStandardClaim(string claimType);
    public virtual string SerializeToJson();
    public virtual string Base64UrlEncode();
    public static JwtHeader Base64UrlDeserialize(string base64UrlEncodedJsonString);
    public static JwtHeader Deserialize(string jsonString);
}
internal class System.IdentityModel.Tokens.JwtHeaderParameterNames : ValueType {
    public static string Alg;
    public static string Cty;
    public static string Kid;
    public static string Jku;
    public static string Jwk;
    public static string Typ;
    public static string X5c;
    public static string X5t;
    public static string X5u;
}
internal class System.IdentityModel.Tokens.JwtPayload : Dictionary`2<string, object> {
    public string Actort { get; }
    public string Acr { get; }
    public string Amr { get; }
    public string AuthTime { get; }
    public IList`1<string> Aud { get; }
    public string Azp { get; }
    public string CHash { get; }
    public Nullable`1<int> Exp { get; }
    public string Jti { get; }
    public Nullable`1<int> Iat { get; }
    public string Iss { get; }
    public Nullable`1<int> Nbf { get; }
    public string Nonce { get; }
    public string Sub { get; }
    internal DateTime ValidFrom { get; }
    internal DateTime ValidTo { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public JwtPayload(IEnumerable`1<Claim> claims);
    public JwtPayload(string issuer, string audience, IEnumerable`1<Claim> claims, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires);
    public string get_Actort();
    public string get_Acr();
    public string get_Amr();
    public string get_AuthTime();
    public IList`1<string> get_Aud();
    public string get_Azp();
    public string get_CHash();
    public Nullable`1<int> get_Exp();
    public string get_Jti();
    public Nullable`1<int> get_Iat();
    public string get_Iss();
    public Nullable`1<int> get_Nbf();
    public string get_Nonce();
    public string get_Sub();
    internal DateTime get_ValidFrom();
    internal DateTime get_ValidTo();
    public virtual IEnumerable`1<Claim> get_Claims();
    public void AddClaim(Claim claim);
    public void AddClaims(IEnumerable`1<Claim> claims);
    internal static object GetClaimValueUsingValueType(Claim claim);
    internal string GetStandardClaim(string claimType);
    internal Nullable`1<int> GetIntClaim(string claimType);
    private DateTime GetDateTime(string key);
    public virtual string SerializeToJson();
    public virtual string Base64UrlEncode();
    public static JwtPayload Base64UrlDeserialize(string base64UrlEncodedJsonString);
    public static JwtPayload Deserialize(string jsonString);
}
internal class System.IdentityModel.Tokens.JwtRegisteredClaimNames : ValueType {
    public static string Actort;
    public static string Acr;
    public static string Amr;
    public static string Aud;
    public static string AuthTime;
    public static string Azp;
    public static string Birthdate;
    public static string CHash;
    public static string Email;
    public static string Exp;
    public static string Gender;
    public static string FamilyName;
    public static string GivenName;
    public static string Iat;
    public static string Iss;
    public static string Jti;
    public static string NameId;
    public static string Nonce;
    public static string Nbf;
    public static string Prn;
    public static string Sub;
    public static string Typ;
    public static string UniqueName;
    public static string Website;
}
internal class System.IdentityModel.Tokens.JwtSecurityToken : SecurityToken {
    private JwtHeader header;
    private string id;
    private JwtPayload payload;
    private string rawData;
    private string rawHeader;
    private string rawPayload;
    private string rawSignature;
    [CompilerGeneratedAttribute]
private SecurityKey <SigningKey>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityToken <SigningToken>k__BackingField;
    public string Actor { get; }
    public IEnumerable`1<string> Audiences { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public string EncodedHeader { get; }
    public string EncodedPayload { get; }
    public JwtHeader Header { get; }
    public string Id { get; }
    public string Issuer { get; }
    public JwtPayload Payload { get; }
    public string RawData { get; }
    public string RawHeader { get; }
    public string RawPayload { get; }
    public string RawSignature { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public string SignatureAlgorithm { get; }
    public SigningCredentials SigningCredentials { get; }
    public SecurityKey SigningKey { get; public set; }
    public SecurityToken SigningToken { get; public set; }
    public string Subject { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public JwtSecurityToken(string jwtEncodedString);
    public JwtSecurityToken(JwtHeader header, JwtPayload payload, string rawHeader, string rawPayload, string rawSignature);
    public JwtSecurityToken(JwtHeader header, JwtPayload payload);
    public JwtSecurityToken(string issuer, string audience, IEnumerable`1<Claim> claims, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SigningCredentials signingCredentials);
    public string get_Actor();
    public IEnumerable`1<string> get_Audiences();
    public IEnumerable`1<Claim> get_Claims();
    public virtual string get_EncodedHeader();
    public virtual string get_EncodedPayload();
    public JwtHeader get_Header();
    public virtual string get_Id();
    public string get_Issuer();
    public JwtPayload get_Payload();
    public string get_RawData();
    public string get_RawHeader();
    public string get_RawPayload();
    public string get_RawSignature();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public string get_SignatureAlgorithm();
    public SigningCredentials get_SigningCredentials();
    [CompilerGeneratedAttribute]
public SecurityKey get_SigningKey();
    [CompilerGeneratedAttribute]
public void set_SigningKey(SecurityKey value);
    [CompilerGeneratedAttribute]
public SecurityToken get_SigningToken();
    [CompilerGeneratedAttribute]
public void set_SigningToken(SecurityToken value);
    public string get_Subject();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public virtual string ToString();
    internal void Decode(string jwtEncodedString);
    internal void SetId(string id);
}
internal class System.IdentityModel.Tokens.JwtSecurityTokenHandler : SecurityTokenHandler {
    private static IDictionary`2<string, string> outboundAlgorithmMap;
    private static IDictionary`2<string, string> inboundAlgorithmMap;
    private static IDictionary`2<string, string> inboundClaimTypeMap;
    private static IDictionary`2<string, string> outboundClaimTypeMap;
    private static string shortClaimTypeProperty;
    private static string jsonClaimTypeProperty;
    private static ISet`1<string> inboundClaimFilter;
    private static String[] tokenTypeIdentifiers;
    private SignatureProviderFactory signatureProviderFactory;
    private int _maximumTokenSizeInBytes;
    private int _defaultTokenLifetimeInMinutes;
    public static int DefaultTokenLifetimeInMinutes;
    private static FieldInfo _certFieldInfo;
    private static Type _x509AsymmKeyType;
    public static IDictionary`2<string, string> InboundAlgorithmMap { get; public set; }
    public static IDictionary`2<string, string> OutboundAlgorithmMap { get; public set; }
    public static IDictionary`2<string, string> InboundClaimTypeMap { get; public set; }
    public static IDictionary`2<string, string> OutboundClaimTypeMap { get; public set; }
    public static ISet`1<string> InboundClaimFilter { get; public set; }
    public static string ShortClaimTypeProperty { get; public set; }
    public static string JsonClaimTypeProperty { get; public set; }
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public int TokenLifetimeInMinutes { get; public set; }
    public int MaximumTokenSizeInBytes { get; public set; }
    public SignatureProviderFactory SignatureProviderFactory { get; public set; }
    public Type TokenType { get; }
    private static JwtSecurityTokenHandler();
    public static IDictionary`2<string, string> get_InboundAlgorithmMap();
    public static void set_InboundAlgorithmMap(IDictionary`2<string, string> value);
    public static IDictionary`2<string, string> get_OutboundAlgorithmMap();
    public static void set_OutboundAlgorithmMap(IDictionary`2<string, string> value);
    public static IDictionary`2<string, string> get_InboundClaimTypeMap();
    public static void set_InboundClaimTypeMap(IDictionary`2<string, string> value);
    public static IDictionary`2<string, string> get_OutboundClaimTypeMap();
    public static void set_OutboundClaimTypeMap(IDictionary`2<string, string> value);
    public static ISet`1<string> get_InboundClaimFilter();
    public static void set_InboundClaimFilter(ISet`1<string> value);
    public static string get_ShortClaimTypeProperty();
    public static void set_ShortClaimTypeProperty(string value);
    public static string get_JsonClaimTypeProperty();
    public static void set_JsonClaimTypeProperty(string value);
    public virtual bool get_CanValidateToken();
    public virtual bool get_CanWriteToken();
    public int get_TokenLifetimeInMinutes();
    public void set_TokenLifetimeInMinutes(int value);
    public sealed virtual int get_MaximumTokenSizeInBytes();
    public sealed virtual void set_MaximumTokenSizeInBytes(int value);
    public virtual void LoadCustomConfiguration(XmlNodeList nodelist);
    public SignatureProviderFactory get_SignatureProviderFactory();
    public void set_SignatureProviderFactory(SignatureProviderFactory value);
    public virtual Type get_TokenType();
    public virtual bool CanReadToken(XmlReader reader);
    public virtual bool CanReadToken(string tokenString);
    public virtual SecurityKeyIdentifierClause CreateSecurityTokenReference(SecurityToken token, bool attached);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual JwtSecurityToken CreateToken(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SigningCredentials signingCredentials, SignatureProvider signatureProvider);
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual SecurityToken ReadToken(string tokenString);
    public virtual ReadOnlyCollection`1<ClaimsIdentity> ValidateToken(SecurityToken token);
    public virtual ClaimsPrincipal ValidateToken(string securityToken, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
    public virtual string WriteToken(SecurityToken token);
    internal Byte[] CreateSignature(string inputString, SecurityKey key, string algorithm, SignatureProvider signatureProvider);
    private bool ValidateSignature(Byte[] encodedBytes, Byte[] signature, SecurityKey key, string algorithm);
    protected virtual JwtSecurityToken ValidateSignature(string token, TokenValidationParameters validationParameters);
    private IEnumerable`1<SecurityKey> GetAllKeys(string token, SecurityToken securityToken, SecurityKeyIdentifier keyIdentifier, TokenValidationParameters validationParameters);
    private static string CreateKeyString(SecurityKey securityKey);
    protected virtual ClaimsIdentity CreateClaimsIdentity(JwtSecurityToken jwt, string issuer, TokenValidationParameters validationParameters);
    protected virtual string CreateActorValue(ClaimsIdentity actor);
    protected virtual void ValidateAudience(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateLifetime(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual string ValidateIssuer(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual SecurityKey ResolveIssuerSigningKey(string token, SecurityToken securityToken, SecurityKeyIdentifier keyIdentifier, TokenValidationParameters validationParameters);
    private static bool Matches(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey key, CertMatcher certMatcher, SecurityToken& token);
    protected virtual void ValidateIssuerSecurityKey(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
}
internal class System.IdentityModel.Tokens.LifetimeValidator : MulticastDelegate {
    public LifetimeValidator(object object, IntPtr method);
    public virtual bool Invoke(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual IAsyncResult BeginInvoke(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver : IssuerTokenResolver {
    private IDictionary`2<string, IList`1<SecurityKey>> keys;
    private List`1<XmlNode> unprocessedNodes;
    private IssuerTokenResolver issuerTokenResolver;
    public IDictionary`2<string, IList`1<SecurityKey>> SecurityKeys { get; }
    public IssuerTokenResolver IssuerTokenResolver { get; public set; }
    public IList`1<XmlNode> UnprocessedXmlNodes { get; }
    public NamedKeyIssuerTokenResolver(IDictionary`2<string, IList`1<SecurityKey>> keys, IssuerTokenResolver innerTokenResolver);
    public IDictionary`2<string, IList`1<SecurityKey>> get_SecurityKeys();
    public IssuerTokenResolver get_IssuerTokenResolver();
    public void set_IssuerTokenResolver(IssuerTokenResolver value);
    public IList`1<XmlNode> get_UnprocessedXmlNodes();
    public virtual void LoadCustomConfiguration(XmlNodeList nodeList);
    protected virtual void ReadSecurityKey(XmlElement element);
    protected virtual bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token);
}
internal class System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause : SecurityKeyIdentifierClause {
    private static string NameKeySecurityKeyIdentifierClauseType;
    private string name;
    public string Name { get; }
    public NamedKeySecurityKeyIdentifierClause(string name, string id);
    public string get_Name();
    public virtual bool Matches(SecurityKeyIdentifierClause keyIdentifierClause);
}
internal class System.IdentityModel.Tokens.NamedKeySecurityToken : SecurityToken {
    private string id;
    private string name;
    private DateTime validFrom;
    private List`1<SecurityKey> securityKeys;
    public string Id { get; }
    public string Name { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public NamedKeySecurityToken(string name, string id, SecurityKey key);
    public NamedKeySecurityToken(string name, string id, IEnumerable`1<SecurityKey> keys);
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual SecurityKey ResolveKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
}
internal class System.IdentityModel.Tokens.SecurityTokenInvalidAudienceException : SecurityTokenValidationException {
    public SecurityTokenInvalidAudienceException(string message);
    public SecurityTokenInvalidAudienceException(string message, Exception innerException);
    protected SecurityTokenInvalidAudienceException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Tokens.SecurityTokenInvalidIssuerException : SecurityTokenValidationException {
    public SecurityTokenInvalidIssuerException(string message);
    public SecurityTokenInvalidIssuerException(string message, Exception innerException);
    protected SecurityTokenInvalidIssuerException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Tokens.SecurityTokenInvalidLifetimeException : SecurityTokenValidationException {
    public SecurityTokenInvalidLifetimeException(string message);
    public SecurityTokenInvalidLifetimeException(string message, Exception innerException);
    protected SecurityTokenInvalidLifetimeException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Tokens.SecurityTokenNoExpirationException : SecurityTokenValidationException {
    public SecurityTokenNoExpirationException(string message);
    public SecurityTokenNoExpirationException(string message, Exception innerException);
    protected SecurityTokenNoExpirationException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Tokens.SecurityTokenReplayAddFailedException : SecurityTokenValidationException {
    public SecurityTokenReplayAddFailedException(string message);
    public SecurityTokenReplayAddFailedException(string message, Exception innerException);
    protected SecurityTokenReplayAddFailedException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Tokens.SecurityTokenSignatureKeyNotFoundException : SecurityTokenValidationException {
    public SecurityTokenSignatureKeyNotFoundException(string message);
    public SecurityTokenSignatureKeyNotFoundException(string message, Exception innerException);
    protected SecurityTokenSignatureKeyNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Tokens.Serializer : MulticastDelegate {
    public Serializer(object object, IntPtr method);
    public virtual string Invoke(object obj);
    public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal abstract class System.IdentityModel.Tokens.SignatureProvider : object {
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    public string Context { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    public abstract virtual Byte[] Sign(Byte[] input);
    public abstract virtual bool Verify(Byte[] input, Byte[] signature);
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
}
internal class System.IdentityModel.Tokens.SignatureProviderFactory : object {
    public static int AbsoluteMinimumAsymmetricKeySizeInBitsForSigning;
    public static int AbsoluteMinimumAsymmetricKeySizeInBitsForVerifying;
    public static int AbsoluteMinimumSymmetricKeySizeInBits;
    private static int minimumAsymmetricKeySizeInBitsForSigning;
    private static int minimumAsymmetricKeySizeInBitsForVerifying;
    private static int minimumSymmetricKeySizeInBits;
    public static int MinimumSymmetricKeySizeInBits { get; public set; }
    public static int MinimumAsymmetricKeySizeInBitsForSigning { get; public set; }
    public static int MinimumAsymmetricKeySizeInBitsForVerifying { get; public set; }
    private static SignatureProviderFactory();
    public static int get_MinimumSymmetricKeySizeInBits();
    public static void set_MinimumSymmetricKeySizeInBits(int value);
    public static int get_MinimumAsymmetricKeySizeInBitsForSigning();
    public static void set_MinimumAsymmetricKeySizeInBitsForSigning(int value);
    public static int get_MinimumAsymmetricKeySizeInBitsForVerifying();
    public static void set_MinimumAsymmetricKeySizeInBitsForVerifying(int value);
    public virtual SignatureProvider CreateForSigning(SecurityKey key, string algorithm);
    public virtual SignatureProvider CreateForVerifying(SecurityKey key, string algorithm);
    public virtual void ReleaseProvider(SignatureProvider signatureProvider);
    private static SignatureProvider CreateProvider(SecurityKey key, string algorithm, bool willCreateSignatures);
}
internal class System.IdentityModel.Tokens.SymmetricSignatureProvider : SignatureProvider {
    private static Byte[] bytesA;
    private static Byte[] bytesB;
    private bool disposed;
    private KeyedHashAlgorithm keyedHash;
    public SymmetricSignatureProvider(SymmetricSecurityKey key, string algorithm);
    private static SymmetricSignatureProvider();
    public virtual Byte[] Sign(Byte[] input);
    public virtual bool Verify(Byte[] input, Byte[] signature);
    protected virtual void Dispose(bool disposing);
    private static bool AreEqual(Byte[] a, Byte[] b);
}
internal class System.IdentityModel.Tokens.TokenValidationParameters : object {
    public static int DefaultMaximumTokenSizeInBytes;
    private string _authenticationType;
    private X509CertificateValidator _certificateValidator;
    private ReadOnlyCollection`1<SecurityToken> _clientDecryptionTokens;
    private TimeSpan _clockSkew;
    private string _nameClaimType;
    private string _roleClaimType;
    public static string DefaultAuthenticationType;
    public static TimeSpan DefaultClockSkew;
    [CompilerGeneratedAttribute]
private AudienceValidator <AudienceValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<SecurityKey> <IssuerSigningKeyValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <IssuerSigningKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerSigningKeyResolver <IssuerSigningKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SecurityKey> <IssuerSigningKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityToken <IssuerSigningToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SecurityToken> <IssuerSigningTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IssuerValidator <IssuerValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private LifetimeValidator <LifetimeValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<SecurityToken, string, string> <NameClaimTypeRetriever>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireSignedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<SecurityToken, string, string> <RoleClaimTypeRetriever>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveSigninToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ITokenReplayCache <TokenReplayCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateActor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateIssuerSigningKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ValidAudiences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ValidIssuers>k__BackingField;
    public AudienceValidator AudienceValidator { get; public set; }
    public string AuthenticationType { get; public set; }
    public X509CertificateValidator CertificateValidator { get; public set; }
    public ReadOnlyCollection`1<SecurityToken> ClientDecryptionTokens { get; public set; }
    [DefaultValueAttribute("300")]
public TimeSpan ClockSkew { get; public set; }
    public Action`1<SecurityKey> IssuerSigningKeyValidator { get; public set; }
    public SecurityKey IssuerSigningKey { get; public set; }
    public IssuerSigningKeyResolver IssuerSigningKeyResolver { get; public set; }
    public IEnumerable`1<SecurityKey> IssuerSigningKeys { get; public set; }
    public SecurityToken IssuerSigningToken { get; public set; }
    public IEnumerable`1<SecurityToken> IssuerSigningTokens { get; public set; }
    public IssuerValidator IssuerValidator { get; public set; }
    public LifetimeValidator LifetimeValidator { get; public set; }
    public string NameClaimType { get; public set; }
    public string RoleClaimType { get; public set; }
    public Func`3<SecurityToken, string, string> NameClaimTypeRetriever { get; public set; }
    [DefaultValueAttribute("True")]
public bool RequireExpirationTime { get; public set; }
    [DefaultValueAttribute("True")]
public bool RequireSignedTokens { get; public set; }
    public Func`3<SecurityToken, string, string> RoleClaimTypeRetriever { get; public set; }
    [DefaultValueAttribute("False")]
public bool SaveSigninToken { get; public set; }
    public ITokenReplayCache TokenReplayCache { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidateActor { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateAudience { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateIssuer { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateLifetime { get; public set; }
    public bool ValidateIssuerSigningKey { get; public set; }
    public string ValidAudience { get; public set; }
    public IEnumerable`1<string> ValidAudiences { get; public set; }
    public string ValidIssuer { get; public set; }
    public IEnumerable`1<string> ValidIssuers { get; public set; }
    protected TokenValidationParameters(TokenValidationParameters other);
    private static TokenValidationParameters();
    [CompilerGeneratedAttribute]
public AudienceValidator get_AudienceValidator();
    [CompilerGeneratedAttribute]
public void set_AudienceValidator(AudienceValidator value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public X509CertificateValidator get_CertificateValidator();
    public void set_CertificateValidator(X509CertificateValidator value);
    public ReadOnlyCollection`1<SecurityToken> get_ClientDecryptionTokens();
    public void set_ClientDecryptionTokens(ReadOnlyCollection`1<SecurityToken> value);
    public TimeSpan get_ClockSkew();
    public void set_ClockSkew(TimeSpan value);
    public virtual TokenValidationParameters Clone();
    public virtual ClaimsIdentity CreateClaimsIdentity(SecurityToken securityToken, string issuer);
    [CompilerGeneratedAttribute]
public Action`1<SecurityKey> get_IssuerSigningKeyValidator();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyValidator(Action`1<SecurityKey> value);
    [CompilerGeneratedAttribute]
public SecurityKey get_IssuerSigningKey();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKey(SecurityKey value);
    [CompilerGeneratedAttribute]
public IssuerSigningKeyResolver get_IssuerSigningKeyResolver();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeyResolver(IssuerSigningKeyResolver value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKey> get_IssuerSigningKeys();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningKeys(IEnumerable`1<SecurityKey> value);
    [CompilerGeneratedAttribute]
public SecurityToken get_IssuerSigningToken();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningToken(SecurityToken value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityToken> get_IssuerSigningTokens();
    [CompilerGeneratedAttribute]
public void set_IssuerSigningTokens(IEnumerable`1<SecurityToken> value);
    [CompilerGeneratedAttribute]
public IssuerValidator get_IssuerValidator();
    [CompilerGeneratedAttribute]
public void set_IssuerValidator(IssuerValidator value);
    [CompilerGeneratedAttribute]
public LifetimeValidator get_LifetimeValidator();
    [CompilerGeneratedAttribute]
public void set_LifetimeValidator(LifetimeValidator value);
    public string get_NameClaimType();
    public void set_NameClaimType(string value);
    public string get_RoleClaimType();
    public void set_RoleClaimType(string value);
    [CompilerGeneratedAttribute]
public Func`3<SecurityToken, string, string> get_NameClaimTypeRetriever();
    [CompilerGeneratedAttribute]
public void set_NameClaimTypeRetriever(Func`3<SecurityToken, string, string> value);
    [CompilerGeneratedAttribute]
public bool get_RequireExpirationTime();
    [CompilerGeneratedAttribute]
public void set_RequireExpirationTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireSignedTokens();
    [CompilerGeneratedAttribute]
public void set_RequireSignedTokens(bool value);
    [CompilerGeneratedAttribute]
public Func`3<SecurityToken, string, string> get_RoleClaimTypeRetriever();
    [CompilerGeneratedAttribute]
public void set_RoleClaimTypeRetriever(Func`3<SecurityToken, string, string> value);
    [CompilerGeneratedAttribute]
public bool get_SaveSigninToken();
    [CompilerGeneratedAttribute]
public void set_SaveSigninToken(bool value);
    [CompilerGeneratedAttribute]
public ITokenReplayCache get_TokenReplayCache();
    [CompilerGeneratedAttribute]
public void set_TokenReplayCache(ITokenReplayCache value);
    [CompilerGeneratedAttribute]
public bool get_ValidateActor();
    [CompilerGeneratedAttribute]
public void set_ValidateActor(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAudience();
    [CompilerGeneratedAttribute]
public void set_ValidateAudience(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateIssuer();
    [CompilerGeneratedAttribute]
public void set_ValidateIssuer(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateLifetime();
    [CompilerGeneratedAttribute]
public void set_ValidateLifetime(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateIssuerSigningKey();
    [CompilerGeneratedAttribute]
public void set_ValidateIssuerSigningKey(bool value);
    [CompilerGeneratedAttribute]
public string get_ValidAudience();
    [CompilerGeneratedAttribute]
public void set_ValidAudience(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidAudiences();
    [CompilerGeneratedAttribute]
public void set_ValidAudiences(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ValidIssuer();
    [CompilerGeneratedAttribute]
public void set_ValidIssuer(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidIssuers();
    [CompilerGeneratedAttribute]
public void set_ValidIssuers(IEnumerable`1<string> value);
}
internal static class System.IdentityModel.Tokens.Validators : object {
    public static void ValidateAudience(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static string ValidateIssuer(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static void ValidateIssuerSecurityKey(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static void ValidateLifetime(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public static void ValidateTokenReplay(string securityToken, Nullable`1<DateTime> expirationTime, TokenValidationParameters validationParameters);
}
internal static class System.IdentityModel.Tokens.WSSecurityConstantsInternal : object {
    public static string Namespace;
    public static string Prefix;
    public static string Base64EncodingType;
    public static string Base64Binary;
    public static string Base64BinaryLower;
}
internal static class System.IdentityModel.Tokens.WSSecurityUtilityConstantsInternal : object {
    public static string Namespace;
    public static string Prefix;
}
internal class System.IdentityModel.Tokens.X509CertificateValidatorEx : X509CertificateValidator {
    private X509CertificateValidationMode certificateValidationMode;
    private X509ChainPolicy chainPolicy;
    private X509CertificateValidator validator;
    public X509CertificateValidatorEx(X509CertificateValidationMode certificateValidationMode, X509RevocationMode revocationMode, StoreLocation trustedStoreLocation);
    public virtual void Validate(X509Certificate2 certificate);
}
internal class System.IdentityModel.Tokens.X509SecurityKey : X509AsymmetricSecurityKey {
    private X509Certificate2 _certificate;
    public X509Certificate2 Certificate { get; }
    public X509SecurityKey(X509Certificate2 certificate);
    public X509Certificate2 get_Certificate();
}
internal class System.Net.Http.BasicAuthenticationHeaderValue : AuthenticationHeaderValue {
    public BasicAuthenticationHeaderValue(string userName, string password);
    private static string EncodeCredential(string userName, string password);
}
internal class System.Net.Http.ByteRangeStreamContent : HttpContent {
    private static string SupportedRangeUnit;
    private static string ByteRangesContentSubtype;
    private static int DefaultBufferSize;
    private static int MinBufferSize;
    private Stream _content;
    private long _start;
    private HttpContent _byteRangeContent;
    private bool _disposed;
    public ByteRangeStreamContent(Stream content, RangeHeaderValue range, string mediaType);
    public ByteRangeStreamContent(Stream content, RangeHeaderValue range, string mediaType, int bufferSize);
    public ByteRangeStreamContent(Stream content, RangeHeaderValue range, MediaTypeHeaderValue mediaType);
    public ByteRangeStreamContent(Stream content, RangeHeaderValue range, MediaTypeHeaderValue mediaType, int bufferSize);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class System.Net.Http.CloneableExtensions : object {
    [ExtensionAttribute]
internal static T Clone(T value);
}
internal abstract class System.Net.Http.Formatting.BaseJsonMediaTypeFormatter : MediaTypeFormatter {
    private int _maxDepth;
    private IContractResolver _defaultContractResolver;
    private JsonSerializerSettings _jsonSerializerSettings;
    public JsonSerializerSettings SerializerSettings { get; public set; }
    public int MaxDepth { get; public set; }
    protected BaseJsonMediaTypeFormatter(BaseJsonMediaTypeFormatter formatter);
    public JsonSerializerSettings get_SerializerSettings();
    public void set_SerializerSettings(JsonSerializerSettings value);
    public virtual int get_MaxDepth();
    public virtual void set_MaxDepth(int value);
    public JsonSerializerSettings CreateDefaultSerializerSettings();
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    private object ReadFromStream(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual object ReadFromStream(Type type, Stream readStream, Encoding effectiveEncoding, IFormatterLogger formatterLogger);
    private JsonReader CreateJsonReaderInternal(Type type, Stream readStream, Encoding effectiveEncoding);
    public abstract virtual JsonReader CreateJsonReader(Type type, Stream readStream, Encoding effectiveEncoding);
    private JsonSerializer CreateJsonSerializerInternal();
    public virtual JsonSerializer CreateJsonSerializer();
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    private void WriteToStream(Type type, object value, Stream writeStream, HttpContent content);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, Encoding effectiveEncoding);
    private JsonWriter CreateJsonWriterInternal(Type type, Stream writeStream, Encoding effectiveEncoding);
    public abstract virtual JsonWriter CreateJsonWriter(Type type, Stream writeStream, Encoding effectiveEncoding);
}
internal class System.Net.Http.Formatting.BsonMediaTypeFormatter : BaseJsonMediaTypeFormatter {
    private static Type OpenDictionaryType;
    public static MediaTypeHeaderValue DefaultMediaType { get; }
    public int MaxDepth { get; public set; }
    protected BsonMediaTypeFormatter(BsonMediaTypeFormatter formatter);
    private static BsonMediaTypeFormatter();
    public static MediaTypeHeaderValue get_DefaultMediaType();
    public sealed virtual int get_MaxDepth();
    public sealed virtual void set_MaxDepth(int value);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual object ReadFromStream(Type type, Stream readStream, Encoding effectiveEncoding, IFormatterLogger formatterLogger);
    public virtual JsonReader CreateJsonReader(Type type, Stream readStream, Encoding effectiveEncoding);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, Encoding effectiveEncoding);
    public virtual JsonWriter CreateJsonWriter(Type type, Stream writeStream, Encoding effectiveEncoding);
    private static bool IsSimpleType(Type type);
}
internal abstract class System.Net.Http.Formatting.BufferedMediaTypeFormatter : MediaTypeFormatter {
    private static int MinBufferSize;
    private static int DefaultBufferSize;
    private int _bufferSizeInBytes;
    public int BufferSize { get; public set; }
    protected BufferedMediaTypeFormatter(BufferedMediaTypeFormatter formatter);
    public int get_BufferSize();
    public void set_BufferSize(int value);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, HttpContent content, CancellationToken cancellationToken);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, HttpContent content);
    public virtual object ReadFromStream(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual object ReadFromStream(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public sealed virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public sealed virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    private void WriteToStreamSync(Type type, object value, Stream writeStream, HttpContent content, CancellationToken cancellationToken);
    public sealed virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public sealed virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    private object ReadFromStreamSync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    private static Stream GetBufferStream(Stream innerStream, int bufferSize);
}
internal class System.Net.Http.Formatting.ContentNegotiationResult : object {
    private MediaTypeFormatter _formatter;
    [CompilerGeneratedAttribute]
private MediaTypeHeaderValue <MediaType>k__BackingField;
    public MediaTypeFormatter Formatter { get; public set; }
    public MediaTypeHeaderValue MediaType { get; public set; }
    public ContentNegotiationResult(MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType);
    public MediaTypeFormatter get_Formatter();
    public void set_Formatter(MediaTypeFormatter value);
    [CompilerGeneratedAttribute]
public MediaTypeHeaderValue get_MediaType();
    [CompilerGeneratedAttribute]
public void set_MediaType(MediaTypeHeaderValue value);
}
internal class System.Net.Http.Formatting.DefaultContentNegotiator : object {
    [CompilerGeneratedAttribute]
private bool <ExcludeMatchOnTypeOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<MediaTypeWithQualityHeaderValue, MediaTypeWithQualityHeaderValue> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<StringWithQualityHeaderValue, StringWithQualityHeaderValue> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool ExcludeMatchOnTypeOnly { get; private set; }
    public DefaultContentNegotiator(bool excludeMatchOnTypeOnly);
    [CompilerGeneratedAttribute]
public bool get_ExcludeMatchOnTypeOnly();
    [CompilerGeneratedAttribute]
private void set_ExcludeMatchOnTypeOnly(bool value);
    public virtual ContentNegotiationResult Negotiate(Type type, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    protected virtual Collection`1<MediaTypeFormatterMatch> ComputeFormatterMatches(Type type, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    protected virtual MediaTypeFormatterMatch SelectResponseMediaTypeFormatter(ICollection`1<MediaTypeFormatterMatch> matches);
    protected virtual Encoding SelectResponseCharacterEncoding(HttpRequestMessage request, MediaTypeFormatter formatter);
    protected virtual MediaTypeFormatterMatch MatchMediaTypeMapping(HttpRequestMessage request, MediaTypeFormatter formatter);
    protected virtual MediaTypeFormatterMatch MatchAcceptHeader(IEnumerable`1<MediaTypeWithQualityHeaderValue> sortedAcceptValues, MediaTypeFormatter formatter);
    protected virtual MediaTypeFormatterMatch MatchRequestMediaType(HttpRequestMessage request, MediaTypeFormatter formatter);
    protected virtual bool ShouldMatchOnType(IEnumerable`1<MediaTypeWithQualityHeaderValue> sortedAcceptValues);
    protected virtual MediaTypeFormatterMatch MatchType(Type type, MediaTypeFormatter formatter);
    protected virtual IEnumerable`1<MediaTypeWithQualityHeaderValue> SortMediaTypeWithQualityHeaderValuesByQFactor(ICollection`1<MediaTypeWithQualityHeaderValue> headerValues);
    protected virtual IEnumerable`1<StringWithQualityHeaderValue> SortStringWithQualityHeaderValuesByQFactor(ICollection`1<StringWithQualityHeaderValue> headerValues);
    protected virtual MediaTypeFormatterMatch UpdateBestMatch(MediaTypeFormatterMatch current, MediaTypeFormatterMatch potentialReplacement);
    private static MediaTypeFormatter[] GetWritingFormatters(IEnumerable`1<MediaTypeFormatter> formatters);
    [CompilerGeneratedAttribute]
private static MediaTypeWithQualityHeaderValue <SortMediaTypeWithQualityHeaderValuesByQFactor>b__0(MediaTypeWithQualityHeaderValue m);
    [CompilerGeneratedAttribute]
private static StringWithQualityHeaderValue <SortStringWithQualityHeaderValuesByQFactor>b__2(StringWithQualityHeaderValue m);
}
internal class System.Net.Http.Formatting.DelegatingEnumerable`1 : object {
    private IEnumerable`1<T> _source;
    public DelegatingEnumerable`1(IEnumerable`1<T> source);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public void Add(object item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class System.Net.Http.Formatting.FormDataCollection : object {
    private IEnumerable`1<KeyValuePair`2<string, string>> _pairs;
    private NameValueCollection _nameValueCollection;
    public string Item { get; }
    public FormDataCollection(IEnumerable`1<KeyValuePair`2<string, string>> pairs);
    public FormDataCollection(Uri uri);
    public FormDataCollection(string query);
    public string get_Item(string name);
    private static IEnumerable`1<KeyValuePair`2<string, string>> ParseQueryString(string query);
    public NameValueCollection ReadAsNameValueCollection();
    public string Get(string key);
    public String[] GetValues(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Net.Http.Formatting.FormUrlEncodedJson : object {
    private static string ApplicationFormUrlEncoded;
    private static int MinDepth;
    private static String[] _emptyPath;
    [CompilerGeneratedAttribute]
private static Comparison`1<ArrayCandidate> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ArrayCandidate, string> CS$<>9__CachedAnonymousMethodDelegate3;
    private static FormUrlEncodedJson();
    public static JObject Parse(IEnumerable`1<KeyValuePair`2<string, string>> nameValuePairs);
    public static JObject Parse(IEnumerable`1<KeyValuePair`2<string, string>> nameValuePairs, int maxDepth);
    public static bool TryParse(IEnumerable`1<KeyValuePair`2<string, string>> nameValuePairs, JObject& value);
    public static bool TryParse(IEnumerable`1<KeyValuePair`2<string, string>> nameValuePairs, int maxDepth, JObject& value);
    private static JObject ParseInternal(IEnumerable`1<KeyValuePair`2<string, string>> nameValuePairs, int maxDepth, bool throwOnError);
    private static String[] GetPath(string key, int maxDepth, bool throwOnError);
    private static bool ValidateQueryString(string key, bool throwOnError);
    private static bool Insert(JObject root, String[] path, string value, bool throwOnError);
    private static bool AddToObject(JObject obj, String[] path, string value, bool throwOnError);
    private static bool AddToArray(JObject parent, String[] path, string value, bool throwOnError);
    private static string GetIndex(JObject jsonObject, bool throwOnError);
    private static void FixContiguousArrays(JToken jv);
    private static JToken FixSingleContiguousArray(JToken original);
    private static bool CanBecomeArray(List`1<string> keys, List`1& sortedKeys);
    private static string BuildPathString(String[] path, int i);
    [CompilerGeneratedAttribute]
private static int <CanBecomeArray>b__0(ArrayCandidate x, ArrayCandidate y);
    [CompilerGeneratedAttribute]
private static string <CanBecomeArray>b__1(ArrayCandidate x);
}
internal class System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter : MediaTypeFormatter {
    private static int MinBufferSize;
    private static int DefaultBufferSize;
    private int _readBufferSize;
    private int _maxDepth;
    private bool _isDerived;
    public static MediaTypeHeaderValue DefaultMediaType { get; }
    public int MaxDepth { get; public set; }
    public int ReadBufferSize { get; public set; }
    internal bool CanWriteAnyTypes { get; }
    protected FormUrlEncodedMediaTypeFormatter(FormUrlEncodedMediaTypeFormatter formatter);
    public static MediaTypeHeaderValue get_DefaultMediaType();
    public int get_MaxDepth();
    public void set_MaxDepth(int value);
    public int get_ReadBufferSize();
    public void set_ReadBufferSize(int value);
    internal virtual bool get_CanWriteAnyTypes();
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    private object ReadFromStream(Type type, Stream readStream);
    private static IEnumerable`1<KeyValuePair`2<string, string>> ReadFormUrlEncoded(Stream input, int bufferSize);
}
internal interface System.Net.Http.Formatting.IContentNegotiator {
    public abstract virtual ContentNegotiationResult Negotiate(Type type, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
}
internal interface System.Net.Http.Formatting.IFormatterLogger {
    public abstract virtual void LogError(string errorPath, string errorMessage);
    public abstract virtual void LogError(string errorPath, Exception exception);
}
internal class System.Net.Http.Formatting.Internal.HttpValueCollection : NameValueCollection {
    protected HttpValueCollection(SerializationInfo info, StreamingContext context);
    internal static HttpValueCollection Create();
    internal static HttpValueCollection Create(IEnumerable`1<KeyValuePair`2<string, string>> pairs);
    public virtual void Add(string name, string value);
    public virtual string ToString();
    private static void ThrowIfMaxHttpCollectionKeysExceeded(int count);
    private string ToString(bool urlEncode);
    private static bool AppendNameValuePair(StringBuilder builder, bool first, bool urlEncode, string name, string value);
}
internal interface System.Net.Http.Formatting.IRequiredMemberSelector {
    public abstract virtual bool IsRequiredMember(MemberInfo member);
}
internal class System.Net.Http.Formatting.JsonContractResolver : DefaultContractResolver {
    private MediaTypeFormatter _formatter;
    public JsonContractResolver(MediaTypeFormatter formatter);
    private void ConfigureProperty(MemberInfo member, JsonProperty property);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
}
internal class System.Net.Http.Formatting.JsonMediaTypeFormatter : BaseJsonMediaTypeFormatter {
    private ConcurrentDictionary`2<Type, DataContractJsonSerializer> _dataContractSerializerCache;
    private XmlDictionaryReaderQuotas _readerQuotas;
    private RequestHeaderMapping _requestHeaderMapping;
    [CompilerGeneratedAttribute]
private bool <UseDataContractJsonSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indent>k__BackingField;
    public static MediaTypeHeaderValue DefaultMediaType { get; }
    public bool UseDataContractJsonSerializer { get; public set; }
    public bool Indent { get; public set; }
    public int MaxDepth { get; public set; }
    protected JsonMediaTypeFormatter(JsonMediaTypeFormatter formatter);
    public static MediaTypeHeaderValue get_DefaultMediaType();
    [CompilerGeneratedAttribute]
public bool get_UseDataContractJsonSerializer();
    [CompilerGeneratedAttribute]
public void set_UseDataContractJsonSerializer(bool value);
    [CompilerGeneratedAttribute]
public bool get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(bool value);
    public sealed virtual int get_MaxDepth();
    public sealed virtual void set_MaxDepth(int value);
    public virtual JsonReader CreateJsonReader(Type type, Stream readStream, Encoding effectiveEncoding);
    public virtual JsonWriter CreateJsonWriter(Type type, Stream writeStream, Encoding effectiveEncoding);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual object ReadFromStream(Type type, Stream readStream, Encoding effectiveEncoding, IFormatterLogger formatterLogger);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, Encoding effectiveEncoding);
    private DataContractJsonSerializer CreateDataContractSerializer(Type type, bool throwOnError);
    public virtual DataContractJsonSerializer CreateDataContractSerializer(Type type);
    private DataContractJsonSerializer GetDataContractSerializer(Type type);
    [CompilerGeneratedAttribute]
private DataContractJsonSerializer <CanReadType>b__0(Type t);
    [CompilerGeneratedAttribute]
private DataContractJsonSerializer <CanWriteType>b__2(Type t);
}
internal static class System.Net.Http.Formatting.MediaTypeConstants : object {
    private static MediaTypeHeaderValue _defaultApplicationXmlMediaType;
    private static MediaTypeHeaderValue _defaultTextXmlMediaType;
    private static MediaTypeHeaderValue _defaultApplicationJsonMediaType;
    private static MediaTypeHeaderValue _defaultTextJsonMediaType;
    private static MediaTypeHeaderValue _defaultApplicationOctetStreamMediaType;
    private static MediaTypeHeaderValue _defaultApplicationFormUrlEncodedMediaType;
    private static MediaTypeHeaderValue _defaultApplicationBsonMediaType;
    public static MediaTypeHeaderValue ApplicationOctetStreamMediaType { get; }
    public static MediaTypeHeaderValue ApplicationXmlMediaType { get; }
    public static MediaTypeHeaderValue ApplicationJsonMediaType { get; }
    public static MediaTypeHeaderValue TextXmlMediaType { get; }
    public static MediaTypeHeaderValue TextJsonMediaType { get; }
    public static MediaTypeHeaderValue ApplicationFormUrlEncodedMediaType { get; }
    public static MediaTypeHeaderValue ApplicationBsonMediaType { get; }
    private static MediaTypeConstants();
    public static MediaTypeHeaderValue get_ApplicationOctetStreamMediaType();
    public static MediaTypeHeaderValue get_ApplicationXmlMediaType();
    public static MediaTypeHeaderValue get_ApplicationJsonMediaType();
    public static MediaTypeHeaderValue get_TextXmlMediaType();
    public static MediaTypeHeaderValue get_TextJsonMediaType();
    public static MediaTypeHeaderValue get_ApplicationFormUrlEncodedMediaType();
    public static MediaTypeHeaderValue get_ApplicationBsonMediaType();
}
internal abstract class System.Net.Http.Formatting.MediaTypeFormatter : object {
    private static int DefaultMinHttpCollectionKeys;
    private static int DefaultMaxHttpCollectionKeys;
    private static string IWellKnownComparerTypeName;
    private static ConcurrentDictionary`2<Type, Type> _delegatingEnumerableCache;
    private static ConcurrentDictionary`2<Type, ConstructorInfo> _delegatingEnumerableConstructorCache;
    private static Lazy`1<int> _defaultMaxHttpCollectionKeys;
    private static int _maxHttpCollectionKeys;
    private List`1<MediaTypeHeaderValue> _supportedMediaTypes;
    private List`1<Encoding> _supportedEncodings;
    private List`1<MediaTypeMapping> _mediaTypeMappings;
    private IRequiredMemberSelector _requiredMemberSelector;
    [CompilerGeneratedAttribute]
private Collection`1<MediaTypeHeaderValue> <SupportedMediaTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<Encoding> <SupportedEncodings>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<MediaTypeMapping> <MediaTypeMappings>k__BackingField;
    public static int MaxHttpCollectionKeys { get; public set; }
    public Collection`1<MediaTypeHeaderValue> SupportedMediaTypes { get; private set; }
    internal List`1<MediaTypeHeaderValue> SupportedMediaTypesInternal { get; }
    public Collection`1<Encoding> SupportedEncodings { get; private set; }
    internal List`1<Encoding> SupportedEncodingsInternal { get; }
    public Collection`1<MediaTypeMapping> MediaTypeMappings { get; private set; }
    internal List`1<MediaTypeMapping> MediaTypeMappingsInternal { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    internal bool CanWriteAnyTypes { get; }
    protected MediaTypeFormatter(MediaTypeFormatter formatter);
    private static MediaTypeFormatter();
    public static int get_MaxHttpCollectionKeys();
    public static void set_MaxHttpCollectionKeys(int value);
    [CompilerGeneratedAttribute]
public Collection`1<MediaTypeHeaderValue> get_SupportedMediaTypes();
    [CompilerGeneratedAttribute]
private void set_SupportedMediaTypes(Collection`1<MediaTypeHeaderValue> value);
    internal List`1<MediaTypeHeaderValue> get_SupportedMediaTypesInternal();
    [CompilerGeneratedAttribute]
public Collection`1<Encoding> get_SupportedEncodings();
    [CompilerGeneratedAttribute]
private void set_SupportedEncodings(Collection`1<Encoding> value);
    internal List`1<Encoding> get_SupportedEncodingsInternal();
    [CompilerGeneratedAttribute]
public Collection`1<MediaTypeMapping> get_MediaTypeMappings();
    [CompilerGeneratedAttribute]
private void set_MediaTypeMappings(Collection`1<MediaTypeMapping> value);
    internal List`1<MediaTypeMapping> get_MediaTypeMappingsInternal();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    internal virtual bool get_CanWriteAnyTypes();
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    private static bool TryGetDelegatingType(Type interfaceType, Type& type);
    private static int InitializeDefaultCollectionKeySize();
    internal static bool TryGetDelegatingTypeForIEnumerableGenericOrSame(Type& type);
    internal static bool TryGetDelegatingTypeForIQueryableGenericOrSame(Type& type);
    internal static ConstructorInfo GetTypeRemappingConstructor(Type type);
    public Encoding SelectCharacterEncoding(HttpContentHeaders contentHeaders);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public abstract virtual bool CanReadType(Type type);
    public abstract virtual bool CanWriteType(Type type);
    private static Type GetOrAddDelegatingType(Type type, Type genericType);
    public static object GetDefaultValueForType(Type type);
}
internal class System.Net.Http.Formatting.MediaTypeFormatterCollection : Collection`1<MediaTypeFormatter> {
    private static Type _mediaTypeFormatterType;
    private MediaTypeFormatter[] _writingFormatters;
    private EventHandler Changing;
    [CompilerGeneratedAttribute]
private static Func`2<MediaTypeFormatter, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public XmlMediaTypeFormatter XmlFormatter { get; }
    public JsonMediaTypeFormatter JsonFormatter { get; }
    public FormUrlEncodedMediaTypeFormatter FormUrlEncodedFormatter { get; }
    internal MediaTypeFormatter[] WritingFormatters { get; }
    public MediaTypeFormatterCollection(IEnumerable`1<MediaTypeFormatter> formatters);
    private static MediaTypeFormatterCollection();
    internal void add_Changing(EventHandler value);
    internal void remove_Changing(EventHandler value);
    public XmlMediaTypeFormatter get_XmlFormatter();
    public JsonMediaTypeFormatter get_JsonFormatter();
    public FormUrlEncodedMediaTypeFormatter get_FormUrlEncodedFormatter();
    internal MediaTypeFormatter[] get_WritingFormatters();
    public void AddRange(IEnumerable`1<MediaTypeFormatter> items);
    public void InsertRange(int index, IEnumerable`1<MediaTypeFormatter> items);
    public MediaTypeFormatter FindReader(Type type, MediaTypeHeaderValue mediaType);
    public MediaTypeFormatter FindWriter(Type type, MediaTypeHeaderValue mediaType);
    public static bool IsTypeExcludedFromValidation(Type type);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, MediaTypeFormatter item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, MediaTypeFormatter item);
    private void OnChanging();
    private MediaTypeFormatter[] GetWritingFormatters();
    private static IEnumerable`1<MediaTypeFormatter> CreateDefaultFormatters();
    private void VerifyAndSetFormatters(IEnumerable`1<MediaTypeFormatter> formatters);
    [CompilerGeneratedAttribute]
private static bool <GetWritingFormatters>b__0(MediaTypeFormatter formatter);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.Formatting.MediaTypeFormatterExtensions : object {
    [ExtensionAttribute]
public static void AddQueryStringMapping(MediaTypeFormatter formatter, string queryStringParameterName, string queryStringParameterValue, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static void AddQueryStringMapping(MediaTypeFormatter formatter, string queryStringParameterName, string queryStringParameterValue, string mediaType);
    [ExtensionAttribute]
public static void AddRequestHeaderMapping(MediaTypeFormatter formatter, string headerName, string headerValue, StringComparison valueComparison, bool isValueSubstring, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static void AddRequestHeaderMapping(MediaTypeFormatter formatter, string headerName, string headerValue, StringComparison valueComparison, bool isValueSubstring, string mediaType);
}
internal class System.Net.Http.Formatting.MediaTypeFormatterMatch : object {
    [CompilerGeneratedAttribute]
private MediaTypeFormatter <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaTypeHeaderValue <MediaType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaTypeFormatterMatchRanking <Ranking>k__BackingField;
    public MediaTypeFormatter Formatter { get; private set; }
    public MediaTypeHeaderValue MediaType { get; private set; }
    public double Quality { get; private set; }
    public MediaTypeFormatterMatchRanking Ranking { get; private set; }
    public MediaTypeFormatterMatch(MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, Nullable`1<double> quality, MediaTypeFormatterMatchRanking ranking);
    [CompilerGeneratedAttribute]
public MediaTypeFormatter get_Formatter();
    [CompilerGeneratedAttribute]
private void set_Formatter(MediaTypeFormatter value);
    [CompilerGeneratedAttribute]
public MediaTypeHeaderValue get_MediaType();
    [CompilerGeneratedAttribute]
private void set_MediaType(MediaTypeHeaderValue value);
    [CompilerGeneratedAttribute]
public double get_Quality();
    [CompilerGeneratedAttribute]
private void set_Quality(double value);
    [CompilerGeneratedAttribute]
public MediaTypeFormatterMatchRanking get_Ranking();
    [CompilerGeneratedAttribute]
private void set_Ranking(MediaTypeFormatterMatchRanking value);
}
internal enum System.Net.Http.Formatting.MediaTypeFormatterMatchRanking : Enum {
    public int value__;
    public static MediaTypeFormatterMatchRanking None;
    public static MediaTypeFormatterMatchRanking MatchOnCanWriteType;
    public static MediaTypeFormatterMatchRanking MatchOnRequestAcceptHeaderLiteral;
    public static MediaTypeFormatterMatchRanking MatchOnRequestAcceptHeaderSubtypeMediaRange;
    public static MediaTypeFormatterMatchRanking MatchOnRequestAcceptHeaderAllMediaRange;
    public static MediaTypeFormatterMatchRanking MatchOnRequestWithMediaTypeMapping;
    public static MediaTypeFormatterMatchRanking MatchOnRequestMediaType;
}
[ExtensionAttribute]
internal static class System.Net.Http.Formatting.MediaTypeHeaderValueExtensions : object {
    [ExtensionAttribute]
public static bool IsSubsetOf(MediaTypeHeaderValue mediaType1, MediaTypeHeaderValue mediaType2);
    [ExtensionAttribute]
public static bool IsSubsetOf(MediaTypeHeaderValue mediaType1, MediaTypeHeaderValue mediaType2, MediaTypeHeaderValueRange& mediaType2Range);
}
internal enum System.Net.Http.Formatting.MediaTypeHeaderValueRange : Enum {
    public int value__;
    public static MediaTypeHeaderValueRange None;
    public static MediaTypeHeaderValueRange SubtypeMediaRange;
    public static MediaTypeHeaderValueRange AllMediaRange;
}
internal abstract class System.Net.Http.Formatting.MediaTypeMapping : object {
    [CompilerGeneratedAttribute]
private MediaTypeHeaderValue <MediaType>k__BackingField;
    public MediaTypeHeaderValue MediaType { get; private set; }
    protected MediaTypeMapping(MediaTypeHeaderValue mediaType);
    protected MediaTypeMapping(string mediaType);
    [CompilerGeneratedAttribute]
public MediaTypeHeaderValue get_MediaType();
    [CompilerGeneratedAttribute]
private void set_MediaType(MediaTypeHeaderValue value);
    public abstract virtual double TryMatchMediaType(HttpRequestMessage request);
}
internal class System.Net.Http.Formatting.MediaTypeWithQualityHeaderValueComparer : object {
    private static MediaTypeWithQualityHeaderValueComparer _mediaTypeComparer;
    public static MediaTypeWithQualityHeaderValueComparer QualityComparer { get; }
    private static MediaTypeWithQualityHeaderValueComparer();
    public static MediaTypeWithQualityHeaderValueComparer get_QualityComparer();
    public sealed virtual int Compare(MediaTypeWithQualityHeaderValue mediaType1, MediaTypeWithQualityHeaderValue mediaType2);
    private static int CompareBasedOnQualityFactor(MediaTypeWithQualityHeaderValue mediaType1, MediaTypeWithQualityHeaderValue mediaType2);
}
internal class System.Net.Http.Formatting.ParsedMediaTypeHeaderValue : ValueType {
    private static char MediaRangeAsterisk;
    private static char MediaTypeSubtypeDelimiter;
    private string _mediaType;
    private int _delimiterIndex;
    private bool _isAllMediaRange;
    private bool _isSubtypeMediaRange;
    public bool IsAllMediaRange { get; }
    public bool IsSubtypeMediaRange { get; }
    public ParsedMediaTypeHeaderValue(MediaTypeHeaderValue mediaTypeHeaderValue);
    public bool get_IsAllMediaRange();
    public bool get_IsSubtypeMediaRange();
    public bool TypesEqual(ParsedMediaTypeHeaderValue& other);
    public bool SubTypesEqual(ParsedMediaTypeHeaderValue& other);
}
internal class System.Net.Http.Formatting.Parsers.FormUrlEncodedParser : object {
    private static int MinMessageSize;
    private long _totalBytesConsumed;
    private long _maxMessageSize;
    private NameValueState _nameValueState;
    private ICollection`1<KeyValuePair`2<string, string>> _nameValuePairs;
    private CurrentNameValuePair _currentNameValuePair;
    public FormUrlEncodedParser(ICollection`1<KeyValuePair`2<string, string>> nameValuePairs, long maxMessageSize);
    public ParserState ParseBuffer(Byte[] buffer, int bytesReady, Int32& bytesConsumed, bool isFinal);
    private static ParserState ParseNameValuePairs(Byte[] buffer, int bytesReady, Int32& bytesConsumed, NameValueState& nameValueState, long maximumLength, Int64& totalBytesConsumed, CurrentNameValuePair currentNameValuePair, ICollection`1<KeyValuePair`2<string, string>> nameValuePairs);
    private ParserState CopyCurrent(ParserState parseState);
}
internal class System.Net.Http.Formatting.Parsers.HttpRequestHeaderParser : object {
    internal static int DefaultMaxRequestLineSize;
    internal static int DefaultMaxHeaderSize;
    private HttpUnsortedRequest _httpRequest;
    private HttpRequestState _requestStatus;
    private HttpRequestLineParser _requestLineParser;
    private InternetMessageFormatHeaderParser _headerParser;
    public HttpRequestHeaderParser(HttpUnsortedRequest httpRequest);
    public HttpRequestHeaderParser(HttpUnsortedRequest httpRequest, int maxRequestLineSize, int maxHeaderSize);
    public ParserState ParseBuffer(Byte[] buffer, int bytesReady, Int32& bytesConsumed);
}
internal class System.Net.Http.Formatting.Parsers.HttpRequestLineParser : object {
    internal static int MinRequestLineSize;
    private static int DefaultTokenAllocation;
    private int _totalBytesConsumed;
    private int _maximumHeaderLength;
    private HttpRequestLineState _requestLineState;
    private HttpUnsortedRequest _httpRequest;
    private StringBuilder _currentToken;
    public HttpRequestLineParser(HttpUnsortedRequest httpRequest, int maxRequestLineSize);
    public ParserState ParseBuffer(Byte[] buffer, int bytesReady, Int32& bytesConsumed);
    private static ParserState ParseRequestLine(Byte[] buffer, int bytesReady, Int32& bytesConsumed, HttpRequestLineState& requestLineState, int maximumHeaderLength, Int32& totalBytesConsumed, StringBuilder currentToken, HttpUnsortedRequest httpRequest);
}
internal class System.Net.Http.Formatting.Parsers.HttpResponseHeaderParser : object {
    internal static int DefaultMaxStatusLineSize;
    internal static int DefaultMaxHeaderSize;
    private HttpUnsortedResponse _httpResponse;
    private HttpResponseState _responseStatus;
    private HttpStatusLineParser _statusLineParser;
    private InternetMessageFormatHeaderParser _headerParser;
    public HttpResponseHeaderParser(HttpUnsortedResponse httpResponse);
    public HttpResponseHeaderParser(HttpUnsortedResponse httpResponse, int maxResponseLineSize, int maxHeaderSize);
    public ParserState ParseBuffer(Byte[] buffer, int bytesReady, Int32& bytesConsumed);
}
internal class System.Net.Http.Formatting.Parsers.HttpStatusLineParser : object {
    internal static int MinStatusLineSize;
    private static int DefaultTokenAllocation;
    private static int MaxStatusCode;
    private int _totalBytesConsumed;
    private int _maximumHeaderLength;
    private HttpStatusLineState _statusLineState;
    private HttpUnsortedResponse _httpResponse;
    private StringBuilder _currentToken;
    public HttpStatusLineParser(HttpUnsortedResponse httpResponse, int maxStatusLineSize);
    public ParserState ParseBuffer(Byte[] buffer, int bytesReady, Int32& bytesConsumed);
    private static ParserState ParseStatusLine(Byte[] buffer, int bytesReady, Int32& bytesConsumed, HttpStatusLineState& statusLineState, int maximumHeaderLength, Int32& totalBytesConsumed, StringBuilder currentToken, HttpUnsortedResponse httpResponse);
}
internal class System.Net.Http.Formatting.Parsers.InternetMessageFormatHeaderParser : object {
    internal static int MinHeaderSize;
    private int _totalBytesConsumed;
    private int _maxHeaderSize;
    private HeaderFieldState _headerState;
    private HttpHeaders _headers;
    private CurrentHeaderFieldStore _currentHeader;
    private bool _ignoreHeaderValidation;
    public InternetMessageFormatHeaderParser(HttpHeaders headers, int maxHeaderSize);
    public InternetMessageFormatHeaderParser(HttpHeaders headers, int maxHeaderSize, bool ignoreHeaderValidation);
    public ParserState ParseBuffer(Byte[] buffer, int bytesReady, Int32& bytesConsumed);
    private static ParserState ParseHeaderFields(Byte[] buffer, int bytesReady, Int32& bytesConsumed, HeaderFieldState& requestHeaderState, int maximumHeaderLength, Int32& totalBytesConsumed, CurrentHeaderFieldStore currentField, HttpHeaders headers, bool ignoreHeaderValidation);
}
internal class System.Net.Http.Formatting.Parsers.MimeMultipartBodyPartParser : object {
    internal static long DefaultMaxMessageSize;
    private static int DefaultMaxBodyPartHeaderSize;
    private MimeMultipartParser _mimeParser;
    private State _mimeStatus;
    private ArraySegment`1[] _parsedBodyPart;
    private MimeBodyPart _currentBodyPart;
    private bool _isFirst;
    private ParserState _bodyPartHeaderStatus;
    private int _maxBodyPartHeaderSize;
    private MultipartStreamProvider _streamProvider;
    private HttpContent _content;
    public MimeMultipartBodyPartParser(HttpContent content, MultipartStreamProvider streamProvider);
    public MimeMultipartBodyPartParser(HttpContent content, MultipartStreamProvider streamProvider, long maxMessageSize, int maxBodyPartHeaderSize);
    public static bool IsMimeMultipartContent(HttpContent content);
    public sealed virtual void Dispose();
    public IEnumerable`1<MimeBodyPart> ParseBuffer(Byte[] data, int bytesRead);
    protected void Dispose(bool disposing);
    private static string ValidateArguments(HttpContent content, long maxMessageSize, bool throwOnError);
    private void CleanupCurrentBodyPart();
}
internal class System.Net.Http.Formatting.Parsers.MimeMultipartParser : object {
    internal static int MinMessageSize;
    private static int MaxBoundarySize;
    private static byte HTAB;
    private static byte SP;
    private static byte CR;
    private static byte LF;
    private static byte Dash;
    private static ArraySegment`1<byte> _emptyBodyPart;
    private long _totalBytesConsumed;
    private long _maxMessageSize;
    private BodyPartState _bodyPartState;
    private string _boundary;
    private CurrentBodyPartStore _currentBoundary;
    public bool IsWaitingForEndOfMessage { get; }
    public MimeMultipartParser(string boundary, long maxMessageSize);
    private static MimeMultipartParser();
    public bool get_IsWaitingForEndOfMessage();
    public bool CanParseMore(int bytesRead, int bytesConsumed);
    public State ParseBuffer(Byte[] buffer, int bytesReady, Int32& bytesConsumed, ArraySegment`1& remainingBodyPart, ArraySegment`1& bodyPart, Boolean& isFinalBodyPart);
    private static State ParseBodyPart(Byte[] buffer, int bytesReady, Int32& bytesConsumed, BodyPartState& bodyPartState, long maximumMessageLength, Int64& totalBytesConsumed, CurrentBodyPartStore currentBodyPart);
}
internal enum System.Net.Http.Formatting.Parsers.ParserState : Enum {
    public int value__;
    public static ParserState NeedMoreData;
    public static ParserState Done;
    public static ParserState Invalid;
    public static ParserState DataTooBig;
}
internal class System.Net.Http.Formatting.QueryStringMapping : MediaTypeMapping {
    private static Type _queryStringMappingType;
    [CompilerGeneratedAttribute]
private string <QueryStringParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryStringParameterValue>k__BackingField;
    public string QueryStringParameterName { get; private set; }
    public string QueryStringParameterValue { get; private set; }
    public QueryStringMapping(string queryStringParameterName, string queryStringParameterValue, string mediaType);
    public QueryStringMapping(string queryStringParameterName, string queryStringParameterValue, MediaTypeHeaderValue mediaType);
    private static QueryStringMapping();
    [CompilerGeneratedAttribute]
public string get_QueryStringParameterName();
    [CompilerGeneratedAttribute]
private void set_QueryStringParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_QueryStringParameterValue();
    [CompilerGeneratedAttribute]
private void set_QueryStringParameterValue(string value);
    public virtual double TryMatchMediaType(HttpRequestMessage request);
    private static NameValueCollection GetQueryString(Uri uri);
    private void Initialize(string queryStringParameterName, string queryStringParameterValue);
    private bool DoesQueryStringMatch(NameValueCollection queryString);
}
internal class System.Net.Http.Formatting.RequestHeaderMapping : MediaTypeMapping {
    [CompilerGeneratedAttribute]
private string <HeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderValue>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <HeaderValueComparison>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValueSubstring>k__BackingField;
    public string HeaderName { get; private set; }
    public string HeaderValue { get; private set; }
    public StringComparison HeaderValueComparison { get; private set; }
    public bool IsValueSubstring { get; private set; }
    public RequestHeaderMapping(string headerName, string headerValue, StringComparison valueComparison, bool isValueSubstring, string mediaType);
    public RequestHeaderMapping(string headerName, string headerValue, StringComparison valueComparison, bool isValueSubstring, MediaTypeHeaderValue mediaType);
    [CompilerGeneratedAttribute]
public string get_HeaderName();
    [CompilerGeneratedAttribute]
private void set_HeaderName(string value);
    [CompilerGeneratedAttribute]
public string get_HeaderValue();
    [CompilerGeneratedAttribute]
private void set_HeaderValue(string value);
    [CompilerGeneratedAttribute]
public StringComparison get_HeaderValueComparison();
    [CompilerGeneratedAttribute]
private void set_HeaderValueComparison(StringComparison value);
    [CompilerGeneratedAttribute]
public bool get_IsValueSubstring();
    [CompilerGeneratedAttribute]
private void set_IsValueSubstring(bool value);
    public virtual double TryMatchMediaType(HttpRequestMessage request);
    private static double MatchHeaderValue(HttpRequestMessage request, string headerName, string headerValue, StringComparison valueComparison, bool isValueSubstring);
    private void Initialize(string headerName, string headerValue, StringComparison valueComparison, bool isValueSubstring);
}
internal static class System.Net.Http.Formatting.StringComparisonHelper : object {
    public static bool IsDefined(StringComparison value);
    public static void Validate(StringComparison value, string parameterName);
}
internal class System.Net.Http.Formatting.StringWithQualityHeaderValueComparer : object {
    private static StringWithQualityHeaderValueComparer _qualityComparer;
    public static StringWithQualityHeaderValueComparer QualityComparer { get; }
    private static StringWithQualityHeaderValueComparer();
    public static StringWithQualityHeaderValueComparer get_QualityComparer();
    public sealed virtual int Compare(StringWithQualityHeaderValue stringWithQuality1, StringWithQualityHeaderValue stringWithQuality2);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.Formatting.System.Web.Http911064.MediaTypeFormatterExtensions : object {
    [ExtensionAttribute]
public static void AddUriPathExtensionMapping(MediaTypeFormatter formatter, string uriPathExtension, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static void AddUriPathExtensionMapping(MediaTypeFormatter formatter, string uriPathExtension, string mediaType);
}
internal class System.Net.Http.Formatting.UriPathExtensionMapping : MediaTypeMapping {
    public static string UriPathExtensionKey;
    [CompilerGeneratedAttribute]
private string <UriPathExtension>k__BackingField;
    public string UriPathExtension { get; private set; }
    public UriPathExtensionMapping(string uriPathExtension, string mediaType);
    public UriPathExtensionMapping(string uriPathExtension, MediaTypeHeaderValue mediaType);
    private static UriPathExtensionMapping();
    [CompilerGeneratedAttribute]
public string get_UriPathExtension();
    [CompilerGeneratedAttribute]
private void set_UriPathExtension(string value);
    public virtual double TryMatchMediaType(HttpRequestMessage request);
    private static string GetUriPathExtensionOrNull(HttpRequestMessage request);
    private void Initialize(string uriPathExtension);
}
internal class System.Net.Http.Formatting.XmlHttpRequestHeaderMapping : RequestHeaderMapping {
    public virtual double TryMatchMediaType(HttpRequestMessage request);
}
internal class System.Net.Http.Formatting.XmlMediaTypeFormatter : MediaTypeFormatter {
    private ConcurrentDictionary`2<Type, object> _serializerCache;
    private XmlDictionaryReaderQuotas _readerQuotas;
    [CompilerGeneratedAttribute]
private bool <UseXmlSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlWriterSettings <WriterSettings>k__BackingField;
    public static MediaTypeHeaderValue DefaultMediaType { get; }
    [DefaultValueAttribute("False")]
public bool UseXmlSerializer { get; public set; }
    public bool Indent { get; public set; }
    public XmlWriterSettings WriterSettings { get; private set; }
    public int MaxDepth { get; public set; }
    protected XmlMediaTypeFormatter(XmlMediaTypeFormatter formatter);
    public static MediaTypeHeaderValue get_DefaultMediaType();
    [CompilerGeneratedAttribute]
public bool get_UseXmlSerializer();
    [CompilerGeneratedAttribute]
public void set_UseXmlSerializer(bool value);
    public bool get_Indent();
    public void set_Indent(bool value);
    [CompilerGeneratedAttribute]
public XmlWriterSettings get_WriterSettings();
    [CompilerGeneratedAttribute]
private void set_WriterSettings(XmlWriterSettings value);
    public int get_MaxDepth();
    public void set_MaxDepth(int value);
    public void SetSerializer(Type type, XmlObjectSerializer serializer);
    public void SetSerializer(XmlObjectSerializer serializer);
    public void SetSerializer(Type type, XmlSerializer serializer);
    public void SetSerializer(XmlSerializer serializer);
    public bool RemoveSerializer(Type type);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    private object ReadFromStream(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    protected internal virtual object GetDeserializer(Type type, HttpContent content);
    protected internal virtual XmlReader CreateXmlReader(Stream readStream, HttpContent content);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    private void WriteToStream(Type type, object value, Stream writeStream, HttpContent content);
    protected internal virtual object GetSerializer(Type type, object value, HttpContent content);
    protected internal virtual XmlWriter CreateXmlWriter(Stream writeStream, HttpContent content);
    public virtual XmlSerializer CreateXmlSerializer(Type type);
    public virtual DataContractSerializer CreateDataContractSerializer(Type type);
    [EditorBrowsableAttribute("1")]
public XmlReader InvokeCreateXmlReader(Stream readStream, HttpContent content);
    [EditorBrowsableAttribute("1")]
public XmlWriter InvokeCreateXmlWriter(Stream writeStream, HttpContent content);
    [EditorBrowsableAttribute("1")]
public object InvokeGetDeserializer(Type type, HttpContent content);
    [EditorBrowsableAttribute("1")]
public object InvokeGetSerializer(Type type, object value, HttpContent content);
    private object CreateDefaultSerializer(Type type, bool throwOnError);
    private object GetCachedSerializer(Type type, bool throwOnError);
    private void VerifyAndSetSerializer(Type type, object serializer);
    private void SetSerializerInternal(Type type, object serializer);
    private object GetSerializerForType(Type type);
    private static void ThrowInvalidSerializerException(object serializer, string getSerializerMethodName);
}
internal static class System.Net.Http.FormattingUtilities : object {
    private static string NonTokenChars;
    public static double Match;
    public static double NoMatch;
    public static int DefaultMaxDepth;
    public static int DefaultMinDepth;
    public static string HttpRequestedWithHeader;
    public static string HttpRequestedWithHeaderValue;
    public static string HttpHostHeader;
    public static string HttpVersionToken;
    private static String[] dateFormats;
    public static Type HttpRequestMessageType;
    public static Type HttpResponseMessageType;
    public static Type HttpContentType;
    public static Type DelegatingEnumerableGenericType;
    public static Type EnumerableInterfaceGenericType;
    public static Type QueryableInterfaceGenericType;
    public static XsdDataContractExporter XsdDataContractExporter;
    private static FormattingUtilities();
    public static bool IsJTokenType(Type type);
    public static HttpContentHeaders CreateEmptyContentHeaders();
    public static XmlDictionaryReaderQuotas CreateDefaultReaderQuotas();
    public static string UnquoteToken(string token);
    public static bool ValidateHeaderToken(string token);
    public static string DateToString(DateTimeOffset dateTime);
    public static bool TryParseDate(string input, DateTimeOffset& result);
    public static bool TryParseInt32(string value, Int32& result);
}
internal class System.Net.Http.Handlers.HttpProgressEventArgs : ProgressChangedEventArgs {
    [CompilerGeneratedAttribute]
private long <BytesTransferred>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TotalBytes>k__BackingField;
    public long BytesTransferred { get; private set; }
    public Nullable`1<long> TotalBytes { get; private set; }
    public HttpProgressEventArgs(int progressPercentage, object userToken, long bytesTransferred, Nullable`1<long> totalBytes);
    [CompilerGeneratedAttribute]
public long get_BytesTransferred();
    [CompilerGeneratedAttribute]
private void set_BytesTransferred(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TotalBytes();
    [CompilerGeneratedAttribute]
private void set_TotalBytes(Nullable`1<long> value);
}
internal class System.Net.Http.Handlers.ProgressContent : HttpContent {
    private HttpContent _innerContent;
    private ProgressMessageHandler _handler;
    private HttpRequestMessage _request;
    public ProgressContent(HttpContent innerContent, ProgressMessageHandler handler, HttpRequestMessage request);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    protected virtual void Dispose(bool disposing);
}
internal class System.Net.Http.Handlers.ProgressMessageHandler : DelegatingHandler {
    private EventHandler`1<HttpProgressEventArgs> HttpSendProgress;
    private EventHandler`1<HttpProgressEventArgs> HttpReceiveProgress;
    public ProgressMessageHandler(HttpMessageHandler innerHandler);
    public void add_HttpSendProgress(EventHandler`1<HttpProgressEventArgs> value);
    public void remove_HttpSendProgress(EventHandler`1<HttpProgressEventArgs> value);
    public void add_HttpReceiveProgress(EventHandler`1<HttpProgressEventArgs> value);
    public void remove_HttpReceiveProgress(EventHandler`1<HttpProgressEventArgs> value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Net.Http.Handlers.ProgressMessageHandler/<SendAsync>d__0")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    protected internal virtual void OnHttpRequestProgress(HttpRequestMessage request, HttpProgressEventArgs e);
    protected internal virtual void OnHttpResponseProgress(HttpRequestMessage request, HttpProgressEventArgs e);
    private void AddRequestProgress(HttpRequestMessage request);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Net.Http.Handlers.ProgressMessageHandler/<AddResponseProgressAsync>d__5")]
private Task`1<HttpResponseMessage> AddResponseProgressAsync(HttpRequestMessage request, HttpResponseMessage response);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethod3(HttpRequestMessage , CancellationToken );
}
internal class System.Net.Http.Handlers.ProgressStream : DelegatingStream {
    private ProgressMessageHandler _handler;
    private HttpRequestMessage _request;
    private long _bytesReceived;
    private Nullable`1<long> _totalBytesToReceive;
    private long _bytesSent;
    private Nullable`1<long> _totalBytesToSend;
    public ProgressStream(Stream innerStream, ProgressMessageHandler handler, HttpRequestMessage request, HttpResponseMessage response);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Net.Http.Handlers.ProgressStream/<ReadAsync>d__0")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    [AsyncStateMachineAttribute("System.Net.Http.Handlers.ProgressStream/<WriteAsync>d__4")]
[DebuggerStepThroughAttribute]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    internal void ReportBytesSent(int bytesSent, object userState);
    private void ReportBytesReceived(int bytesReceived, object userState);
}
internal class System.Net.Http.Handlers.ProgressWriteAsyncResult : AsyncResult {
    private static AsyncCallback _writeCompletedCallback;
    private Stream _innerStream;
    private ProgressStream _progressStream;
    private int _count;
    public ProgressWriteAsyncResult(Stream innerStream, ProgressStream progressStream, Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    private static ProgressWriteAsyncResult();
    private static void WriteCompletedCallback(IAsyncResult result);
    private void WriteCompleted(IAsyncResult result);
    public static void End(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
internal class System.Net.Http.Headers.CookieHeaderValue : object {
    private static string ExpiresToken;
    private static string MaxAgeToken;
    private static string DomainToken;
    private static string PathToken;
    private static string SecureToken;
    private static string HttpOnlyToken;
    private static string DefaultPath;
    private static Char[] segmentSeparator;
    private static Char[] nameValueSeparator;
    private Collection`1<CookieState> _cookies;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    public Collection`1<CookieState> Cookies { get; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public string Domain { get; public set; }
    public string Path { get; public set; }
    public bool Secure { get; public set; }
    public bool HttpOnly { get; public set; }
    public CookieState Item { get; }
    public CookieHeaderValue(string name, string value);
    public CookieHeaderValue(string name, NameValueCollection values);
    private CookieHeaderValue(CookieHeaderValue source);
    private static CookieHeaderValue();
    public Collection`1<CookieState> get_Cookies();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    public CookieState get_Item(string name);
    public virtual string ToString();
    public sealed virtual object Clone();
    public static bool TryParse(string input, CookieHeaderValue& parsedValue);
    private static bool AppendSegment(StringBuilder builder, bool first, string name, string value);
    private static bool ParseCookieSegment(CookieHeaderValue instance, string segment);
    private static string GetSegmentValue(String[] nameValuePair, string defaultValue);
}
[DefaultMemberAttribute("Item")]
internal class System.Net.Http.Headers.CookieState : object {
    private string _name;
    private NameValueCollection _values;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public NameValueCollection Values { get; }
    public string Item { get; public set; }
    public CookieState(string name);
    public CookieState(string name, string value);
    public CookieState(string name, NameValueCollection values);
    private CookieState(CookieState source);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public NameValueCollection get_Values();
    public string get_Item(string subName);
    public void set_Item(string subName, string value);
    public virtual string ToString();
    public sealed virtual object Clone();
    private static void CheckNameFormat(string name, string parameterName);
    private static void CheckValueFormat(string value, string parameterName);
}
[ExtensionAttribute]
internal static class System.Net.Http.HttpClientExtensions : object {
    [ExtensionAttribute]
public static void SetBasicAuthentication(HttpClient client, string userName, string password);
    [ExtensionAttribute]
public static void SetToken(HttpClient client, string scheme, string token);
    [ExtensionAttribute]
public static void SetBearerToken(HttpClient client, string token);
}
internal static class System.Net.Http.HttpClientFactory : object {
    public static HttpClient Create(DelegatingHandler[] handlers);
    public static HttpClient Create(HttpMessageHandler innerHandler, DelegatingHandler[] handlers);
    public static HttpMessageHandler CreatePipeline(HttpMessageHandler innerHandler, IEnumerable`1<DelegatingHandler> handlers);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Net.Http.HttpContentExtensions : object {
    private static MediaTypeFormatterCollection _defaultMediaTypeFormatterCollection;
    private static MediaTypeFormatterCollection DefaultMediaTypeFormatterCollection { get; }
    private static HttpContentExtensions();
    private static MediaTypeFormatterCollection get_DefaultMediaTypeFormatterCollection();
    [ExtensionAttribute]
public static Task`1<object> ReadAsAsync(HttpContent content, Type type);
    [ExtensionAttribute]
public static Task`1<object> ReadAsAsync(HttpContent content, Type type, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ReadAsAsync(HttpContent content, Type type, IEnumerable`1<MediaTypeFormatter> formatters);
    [ExtensionAttribute]
public static Task`1<object> ReadAsAsync(HttpContent content, Type type, IEnumerable`1<MediaTypeFormatter> formatters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ReadAsAsync(HttpContent content, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger);
    [ExtensionAttribute]
public static Task`1<object> ReadAsAsync(HttpContent content, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ReadAsAsync(HttpContent content);
    [ExtensionAttribute]
public static Task`1<T> ReadAsAsync(HttpContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ReadAsAsync(HttpContent content, IEnumerable`1<MediaTypeFormatter> formatters);
    [ExtensionAttribute]
public static Task`1<T> ReadAsAsync(HttpContent content, IEnumerable`1<MediaTypeFormatter> formatters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ReadAsAsync(HttpContent content, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger);
    [ExtensionAttribute]
public static Task`1<T> ReadAsAsync(HttpContent content, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    private static Task`1<T> ReadAsAsync(HttpContent content, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger);
    private static Task`1<T> ReadAsAsync(HttpContent content, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.HttpContentExtensions/<ReadAsAsyncCore>d__0`1")]
[DebuggerStepThroughAttribute]
private static Task`1<T> ReadAsAsyncCore(HttpContent content, Type type, IFormatterLogger formatterLogger, MediaTypeFormatter formatter, CancellationToken cancellationToken);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Net.Http.HttpContentFormDataExtensions : object {
    private static string ApplicationFormUrlEncoded;
    [ExtensionAttribute]
public static bool IsFormData(HttpContent content);
    [ExtensionAttribute]
public static Task`1<NameValueCollection> ReadAsFormDataAsync(HttpContent content);
    [ExtensionAttribute]
public static Task`1<NameValueCollection> ReadAsFormDataAsync(HttpContent content, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Net.Http.HttpContentFormDataExtensions/<ReadAsAsyncCore>d__0")]
private static Task`1<NameValueCollection> ReadAsAsyncCore(HttpContent content, MediaTypeFormatter[] formatters, CancellationToken cancellationToken);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.HttpContentMessageExtensions : object {
    private static int MinBufferSize;
    private static int DefaultBufferSize;
    [ExtensionAttribute]
public static bool IsHttpRequestMessageContent(HttpContent content);
    [ExtensionAttribute]
public static bool IsHttpResponseMessageContent(HttpContent content);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsync(HttpContent content);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsync(HttpContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsync(HttpContent content, string uriScheme);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsync(HttpContent content, string uriScheme, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsync(HttpContent content, string uriScheme, int bufferSize);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsync(HttpContent content, string uriScheme, int bufferSize, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsync(HttpContent content, string uriScheme, int bufferSize, int maxHeaderSize);
    [ExtensionAttribute]
public static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsync(HttpContent content, string uriScheme, int bufferSize, int maxHeaderSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.HttpContentMessageExtensions/<ReadAsHttpRequestMessageAsyncCore>d__0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
private static Task`1<HttpRequestMessage> ReadAsHttpRequestMessageAsyncCore(HttpContent content, string uriScheme, int bufferSize, int maxHeaderSize, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> ReadAsHttpResponseMessageAsync(HttpContent content);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> ReadAsHttpResponseMessageAsync(HttpContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> ReadAsHttpResponseMessageAsync(HttpContent content, int bufferSize);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> ReadAsHttpResponseMessageAsync(HttpContent content, int bufferSize, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> ReadAsHttpResponseMessageAsync(HttpContent content, int bufferSize, int maxHeaderSize);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> ReadAsHttpResponseMessageAsync(HttpContent content, int bufferSize, int maxHeaderSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.HttpContentMessageExtensions/<ReadAsHttpResponseMessageAsyncCore>d__b")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
private static Task`1<HttpResponseMessage> ReadAsHttpResponseMessageAsyncCore(HttpContent content, int bufferSize, int maxHeaderSize, CancellationToken cancellationToken);
    private static Uri CreateRequestUri(string uriScheme, HttpUnsortedRequest httpRequest);
    private static HttpContent CreateHeaderFields(HttpHeaders source, HttpHeaders destination, Stream contentStream, int rewind);
    private static HttpRequestMessage CreateHttpRequestMessage(string uriScheme, HttpUnsortedRequest httpRequest, Stream contentStream, int rewind);
    private static HttpResponseMessage CreateHttpResponseMessage(HttpUnsortedResponse httpResponse, Stream contentStream, int rewind);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Net.Http.HttpContentMultipartExtensions : object {
    private static int MinBufferSize;
    private static int DefaultBufferSize;
    [ExtensionAttribute]
public static bool IsMimeMultipartContent(HttpContent content);
    [ExtensionAttribute]
public static bool IsMimeMultipartContent(HttpContent content, string subtype);
    [ExtensionAttribute]
public static Task`1<MultipartMemoryStreamProvider> ReadAsMultipartAsync(HttpContent content);
    [ExtensionAttribute]
public static Task`1<MultipartMemoryStreamProvider> ReadAsMultipartAsync(HttpContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ReadAsMultipartAsync(HttpContent content, T streamProvider);
    [ExtensionAttribute]
public static Task`1<T> ReadAsMultipartAsync(HttpContent content, T streamProvider, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ReadAsMultipartAsync(HttpContent content, T streamProvider, int bufferSize);
    [ExtensionAttribute]
[AsyncStateMachineAttribute("System.Net.Http.HttpContentMultipartExtensions/<ReadAsMultipartAsync>d__0`1")]
[DebuggerStepThroughAttribute]
public static Task`1<T> ReadAsMultipartAsync(HttpContent content, T streamProvider, int bufferSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.HttpContentMultipartExtensions/<MultipartReadAsync>d__8")]
[DebuggerStepThroughAttribute]
private static Task MultipartReadAsync(MultipartAsyncContext context, CancellationToken cancellationToken);
    private static bool CheckIsFinalPart(MimeBodyPart part, ICollection`1<HttpContent> result);
}
[ExtensionAttribute]
internal static class System.Net.Http.HttpHeaderExtensions : object {
    [ExtensionAttribute]
public static void CopyTo(HttpContentHeaders fromHeaders, HttpContentHeaders toHeaders);
}
internal class System.Net.Http.HttpMessageContent : HttpContent {
    private static string SP;
    private static string ColonSP;
    private static string CRLF;
    private static string CommaSeparator;
    private static int DefaultHeaderAllocation;
    private static string DefaultMediaType;
    private static string MsgTypeParameter;
    private static string DefaultRequestMsgType;
    private static string DefaultResponseMsgType;
    private static string DefaultRequestMediaType;
    private static string DefaultResponseMediaType;
    private static HashSet`1<string> _singleValueHeaderFields;
    private static HashSet`1<string> _spaceSeparatedValueHeaderFields;
    private bool _contentConsumed;
    private Lazy`1<Task`1<Stream>> _streamTask;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <HttpRequestMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseMessage <HttpResponseMessage>k__BackingField;
    private HttpContent Content { get; }
    public HttpRequestMessage HttpRequestMessage { get; private set; }
    public HttpResponseMessage HttpResponseMessage { get; private set; }
    public HttpMessageContent(HttpRequestMessage httpRequest);
    public HttpMessageContent(HttpResponseMessage httpResponse);
    private static HttpMessageContent();
    private HttpContent get_Content();
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_HttpRequestMessage();
    [CompilerGeneratedAttribute]
private void set_HttpRequestMessage(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_HttpResponseMessage();
    [CompilerGeneratedAttribute]
private void set_HttpResponseMessage(HttpResponseMessage value);
    private void InitializeStreamTask();
    internal static bool ValidateHttpMessageContent(HttpContent content, bool isRequest, bool throwOnError);
    [AsyncStateMachineAttribute("System.Net.Http.HttpMessageContent/<SerializeToStreamAsync>d__1")]
[DebuggerStepThroughAttribute]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    protected virtual void Dispose(bool disposing);
    private static void SerializeRequestLine(StringBuilder message, HttpRequestMessage httpRequest);
    private static void SerializeStatusLine(StringBuilder message, HttpResponseMessage httpResponse);
    private static void SerializeHeaderFields(StringBuilder message, HttpHeaders headers);
    private Byte[] SerializeHeader();
    private void ValidateStreamForReading(Stream stream);
    [CompilerGeneratedAttribute]
private Task`1<Stream> <InitializeStreamTask>b__0();
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.HttpRequestHeadersExtensions : object {
    private static string Cookie;
    [ExtensionAttribute]
public static Collection`1<CookieHeaderValue> GetCookies(HttpRequestHeaders headers);
    [ExtensionAttribute]
public static Collection`1<CookieHeaderValue> GetCookies(HttpRequestHeaders headers, string name);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.HttpRequestMessageExtensions : object {
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.HttpResponseHeadersExtensions : object {
    private static string SetCookie;
    [ExtensionAttribute]
public static void AddCookies(HttpResponseHeaders headers, IEnumerable`1<CookieHeaderValue> cookies);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Net.Http.HttpResponseMessageExtensions : object {
    [ExtensionAttribute]
public static bool TryGetContentValue(HttpResponseMessage response, T& value);
    [ExtensionAttribute]
internal static void EnsureResponseHasRequest(HttpResponseMessage response, HttpRequestMessage request);
}
internal class System.Net.Http.HttpUnsortedHeaders : HttpHeaders {
}
internal class System.Net.Http.HttpUnsortedRequest : object {
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpHeaders <HttpHeaders>k__BackingField;
    public HttpMethod Method { get; public set; }
    public string RequestUri { get; public set; }
    public Version Version { get; public set; }
    public HttpHeaders HttpHeaders { get; private set; }
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public string get_RequestUri();
    [CompilerGeneratedAttribute]
public void set_RequestUri(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public HttpHeaders get_HttpHeaders();
    [CompilerGeneratedAttribute]
private void set_HttpHeaders(HttpHeaders value);
}
internal class System.Net.Http.HttpUnsortedResponse : object {
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonPhrase>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpHeaders <HttpHeaders>k__BackingField;
    public Version Version { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public string ReasonPhrase { get; public set; }
    public HttpHeaders HttpHeaders { get; private set; }
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonPhrase();
    [CompilerGeneratedAttribute]
public void set_ReasonPhrase(string value);
    [CompilerGeneratedAttribute]
public HttpHeaders get_HttpHeaders();
    [CompilerGeneratedAttribute]
private void set_HttpHeaders(HttpHeaders value);
}
internal abstract class System.Net.Http.Internal.AsyncResult : object {
    private AsyncCallback _callback;
    private object _state;
    private bool _isCompleted;
    private bool _completedSynchronously;
    private bool _endCalled;
    private Exception _exception;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool HasCallback { get; }
    public bool IsCompleted { get; }
    protected AsyncResult(AsyncCallback callback, object state);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public bool get_HasCallback();
    public sealed virtual bool get_IsCompleted();
    protected void Complete(bool completedSynchronously);
    protected void Complete(bool completedSynchronously, Exception exception);
    protected static TAsyncResult End(IAsyncResult result);
}
internal class System.Net.Http.Internal.ByteRangeStream : DelegatingStream {
    private long _lowerbounds;
    private long _totalCount;
    private long _currentCount;
    [CompilerGeneratedAttribute]
private ContentRangeHeaderValue <ContentRange>k__BackingField;
    public ContentRangeHeaderValue ContentRange { get; private set; }
    public long Length { get; }
    public bool CanWrite { get; }
    public ByteRangeStream(Stream innerStream, RangeItemHeaderValue range);
    [CompilerGeneratedAttribute]
public ContentRangeHeaderValue get_ContentRange();
    [CompilerGeneratedAttribute]
private void set_ContentRange(ContentRangeHeaderValue value);
    public virtual long get_Length();
    public virtual bool get_CanWrite();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void WriteByte(byte value);
    private int PrepareStreamForRangeRead(int count);
}
internal abstract class System.Net.Http.Internal.DelegatingStream : Stream {
    private Stream _innerStream;
    protected Stream InnerStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public bool CanTimeout { get; }
    public int WriteTimeout { get; public set; }
    protected DelegatingStream(Stream innerStream);
    protected Stream get_InnerStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual bool get_CanTimeout();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual int ReadByte();
    public virtual void Flush();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void WriteByte(byte value);
}
internal class System.Net.Http.Internal.NonClosingDelegatingStream : DelegatingStream {
    public NonClosingDelegatingStream(Stream innerStream);
    public virtual void Close();
}
internal class System.Net.Http.Internal.ReadOnlyStreamWithEncodingPreamble : Stream {
    private static Task`1<int> _cancelledTask;
    private Stream _innerStream;
    private ArraySegment`1<byte> _remainingBytes;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ReadOnlyStreamWithEncodingPreamble(Stream innerStream, Encoding encoding);
    private static ReadOnlyStreamWithEncodingPreamble();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    private static Task`1<int> GetCancelledTask();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class System.Net.Http.InvalidByteRangeException : Exception {
    [CompilerGeneratedAttribute]
private ContentRangeHeaderValue <ContentRange>k__BackingField;
    public ContentRangeHeaderValue ContentRange { get; private set; }
    public InvalidByteRangeException(ContentRangeHeaderValue contentRange);
    public InvalidByteRangeException(ContentRangeHeaderValue contentRange, string message);
    public InvalidByteRangeException(ContentRangeHeaderValue contentRange, string message, Exception innerException);
    public InvalidByteRangeException(ContentRangeHeaderValue contentRange, SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public ContentRangeHeaderValue get_ContentRange();
    [CompilerGeneratedAttribute]
private void set_ContentRange(ContentRangeHeaderValue value);
    private void Initialize(ContentRangeHeaderValue contentRange);
}
internal class System.Net.Http.MimeBodyPart : object {
    private static Type _streamType;
    private Stream _outputStream;
    private MultipartStreamProvider _streamProvider;
    private HttpContent _parentContent;
    private HttpContent _content;
    private HttpContentHeaders _headers;
    [CompilerGeneratedAttribute]
private InternetMessageFormatHeaderParser <HeaderParser>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ArraySegment`1<byte>> <Segments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFinal>k__BackingField;
    public InternetMessageFormatHeaderParser HeaderParser { get; private set; }
    public List`1<ArraySegment`1<byte>> Segments { get; private set; }
    public bool IsComplete { get; public set; }
    public bool IsFinal { get; public set; }
    public MimeBodyPart(MultipartStreamProvider streamProvider, int maxBodyPartHeaderSize, HttpContent parentContent);
    private static MimeBodyPart();
    [CompilerGeneratedAttribute]
public InternetMessageFormatHeaderParser get_HeaderParser();
    [CompilerGeneratedAttribute]
private void set_HeaderParser(InternetMessageFormatHeaderParser value);
    public HttpContent GetCompletedHttpContent();
    [CompilerGeneratedAttribute]
public List`1<ArraySegment`1<byte>> get_Segments();
    [CompilerGeneratedAttribute]
private void set_Segments(List`1<ArraySegment`1<byte>> value);
    [CompilerGeneratedAttribute]
public bool get_IsComplete();
    [CompilerGeneratedAttribute]
public void set_IsComplete(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFinal();
    [CompilerGeneratedAttribute]
public void set_IsFinal(bool value);
    [AsyncStateMachineAttribute("System.Net.Http.MimeBodyPart/<WriteSegment>d__0")]
[DebuggerStepThroughAttribute]
public Task WriteSegment(ArraySegment`1<byte> segment, CancellationToken cancellationToken);
    private Stream GetOutputStream();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    private void CleanupHttpContent();
    private void CleanupOutputStream();
}
internal class System.Net.Http.MultipartFileData : object {
    [CompilerGeneratedAttribute]
private HttpContentHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalFileName>k__BackingField;
    public HttpContentHeaders Headers { get; private set; }
    public string LocalFileName { get; private set; }
    public MultipartFileData(HttpContentHeaders headers, string localFileName);
    [CompilerGeneratedAttribute]
public HttpContentHeaders get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(HttpContentHeaders value);
    [CompilerGeneratedAttribute]
public string get_LocalFileName();
    [CompilerGeneratedAttribute]
private void set_LocalFileName(string value);
}
internal class System.Net.Http.MultipartFileStreamProvider : MultipartStreamProvider {
    private static int MinBufferSize;
    private static int DefaultBufferSize;
    private string _rootPath;
    private int _bufferSize;
    private Collection`1<MultipartFileData> _fileData;
    public Collection`1<MultipartFileData> FileData { get; }
    protected string RootPath { get; }
    protected int BufferSize { get; }
    public MultipartFileStreamProvider(string rootPath);
    public MultipartFileStreamProvider(string rootPath, int bufferSize);
    public Collection`1<MultipartFileData> get_FileData();
    protected string get_RootPath();
    protected int get_BufferSize();
    public virtual Stream GetStream(HttpContent parent, HttpContentHeaders headers);
    public virtual string GetLocalFileName(HttpContentHeaders headers);
}
internal abstract class System.Net.Http.MultipartFormDataRemoteStreamProvider : MultipartStreamProvider {
    private CancellationToken _cancellationToken;
    [CompilerGeneratedAttribute]
private Collection`1<MultipartRemoteFileData> <FileData>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <FormData>k__BackingField;
    public Collection`1<MultipartRemoteFileData> FileData { get; private set; }
    public NameValueCollection FormData { get; private set; }
    [CompilerGeneratedAttribute]
public Collection`1<MultipartRemoteFileData> get_FileData();
    [CompilerGeneratedAttribute]
private void set_FileData(Collection`1<MultipartRemoteFileData> value);
    [CompilerGeneratedAttribute]
public NameValueCollection get_FormData();
    [CompilerGeneratedAttribute]
private void set_FormData(NameValueCollection value);
    public abstract virtual RemoteStreamInfo GetRemoteStream(HttpContent parent, HttpContentHeaders headers);
    public virtual Stream GetStream(HttpContent parent, HttpContentHeaders headers);
    public virtual Task ExecutePostProcessingAsync();
    public virtual Task ExecutePostProcessingAsync(CancellationToken cancellationToken);
}
internal class System.Net.Http.MultipartFormDataStreamProvider : MultipartFileStreamProvider {
    private CancellationToken _cancellationToken;
    [CompilerGeneratedAttribute]
private NameValueCollection <FormData>k__BackingField;
    public NameValueCollection FormData { get; private set; }
    public MultipartFormDataStreamProvider(string rootPath);
    public MultipartFormDataStreamProvider(string rootPath, int bufferSize);
    [CompilerGeneratedAttribute]
public NameValueCollection get_FormData();
    [CompilerGeneratedAttribute]
private void set_FormData(NameValueCollection value);
    public virtual Stream GetStream(HttpContent parent, HttpContentHeaders headers);
    public virtual Task ExecutePostProcessingAsync();
    public virtual Task ExecutePostProcessingAsync(CancellationToken cancellationToken);
}
internal static class System.Net.Http.MultipartFormDataStreamProviderHelper : object {
    public static bool IsFileContent(HttpContent parent, HttpContentHeaders headers);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Net.Http.MultipartFormDataStreamProviderHelper/<ReadFormDataAsync>d__0")]
public static Task ReadFormDataAsync(Collection`1<HttpContent> contents, NameValueCollection formData, CancellationToken cancellationToken);
}
internal class System.Net.Http.MultipartMemoryStreamProvider : MultipartStreamProvider {
    public virtual Stream GetStream(HttpContent parent, HttpContentHeaders headers);
}
internal class System.Net.Http.MultipartRelatedStreamProvider : MultipartStreamProvider {
    private static string RelatedSubType;
    private static string ContentID;
    private static string StartParameter;
    private HttpContent _rootContent;
    private HttpContent _parent;
    public HttpContent RootContent { get; }
    public HttpContent get_RootContent();
    public virtual Stream GetStream(HttpContent parent, HttpContentHeaders headers);
    private static HttpContent FindRootContent(HttpContent parent, IEnumerable`1<HttpContent> children);
    private static NameValueHeaderValue FindMultipartRelatedParameter(HttpContent content, string parameterName);
}
internal class System.Net.Http.MultipartRemoteFileData : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContentHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    public string FileName { get; private set; }
    public HttpContentHeaders Headers { get; private set; }
    public string Location { get; private set; }
    public MultipartRemoteFileData(HttpContentHeaders headers, string location, string fileName);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public HttpContentHeaders get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(HttpContentHeaders value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(string value);
}
internal abstract class System.Net.Http.MultipartStreamProvider : object {
    private Collection`1<HttpContent> _contents;
    public Collection`1<HttpContent> Contents { get; }
    public Collection`1<HttpContent> get_Contents();
    public abstract virtual Stream GetStream(HttpContent parent, HttpContentHeaders headers);
    public virtual Task ExecutePostProcessingAsync();
    public virtual Task ExecutePostProcessingAsync(CancellationToken cancellationToken);
}
internal class System.Net.Http.ObjectContent : HttpContent {
    private object _value;
    private MediaTypeFormatter _formatter;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    public Type ObjectType { get; private set; }
    public MediaTypeFormatter Formatter { get; }
    public object Value { get; public set; }
    public ObjectContent(Type type, object value, MediaTypeFormatter formatter);
    public ObjectContent(Type type, object value, MediaTypeFormatter formatter, string mediaType);
    public ObjectContent(Type type, object value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType);
    [CompilerGeneratedAttribute]
public Type get_ObjectType();
    [CompilerGeneratedAttribute]
private void set_ObjectType(Type value);
    public MediaTypeFormatter get_Formatter();
    public object get_Value();
    public void set_Value(object value);
    internal static MediaTypeHeaderValue BuildHeaderValue(string mediaType);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    private static bool IsTypeNullable(Type type);
    private void VerifyAndSetObject(object value);
}
internal class System.Net.Http.ObjectContent`1 : ObjectContent {
    public ObjectContent`1(T value, MediaTypeFormatter formatter);
    public ObjectContent`1(T value, MediaTypeFormatter formatter, string mediaType);
    public ObjectContent`1(T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.OwinHttpRequestMessageExtensions : object {
    private static string OwinEnvironmentKey;
    private static string OwinContextKey;
    [ExtensionAttribute]
public static IOwinContext GetOwinContext(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetOwinContext(HttpRequestMessage request, IOwinContext context);
    [ExtensionAttribute]
public static IDictionary`2<string, object> GetOwinEnvironment(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetOwinEnvironment(HttpRequestMessage request, IDictionary`2<string, object> environment);
    [ExtensionAttribute]
internal static IAuthenticationManager GetAuthenticationManager(HttpRequestMessage request);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Net.Http.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AsyncResult_CallbackThrewException { get; }
    internal static string AsyncResult_MultipleCompletes { get; }
    internal static string AsyncResult_MultipleEnds { get; }
    internal static string AsyncResult_ResultMismatch { get; }
    internal static string ByteRangeStreamContentNoRanges { get; }
    internal static string ByteRangeStreamContentNotBytesRange { get; }
    internal static string ByteRangeStreamEmpty { get; }
    internal static string ByteRangeStreamInvalidFrom { get; }
    internal static string ByteRangeStreamNoneOverlap { get; }
    internal static string ByteRangeStreamNoOverlap { get; }
    internal static string ByteRangeStreamNotSeekable { get; }
    internal static string ByteRangeStreamReadOnly { get; }
    internal static string CannotHaveNullInList { get; }
    internal static string CannotUseMediaRangeForSupportedMediaType { get; }
    internal static string CannotUseNullValueType { get; }
    internal static string CookieInvalidName { get; }
    internal static string CookieNull { get; }
    internal static string DelegatingHandlerArrayContainsNullItem { get; }
    internal static string DelegatingHandlerArrayHasNonNullInnerHandler { get; }
    internal static string ErrorReadingFormUrlEncodedStream { get; }
    internal static string FormUrlEncodedMismatchingTypes { get; }
    internal static string FormUrlEncodedParseError { get; }
    internal static string HttpInvalidStatusCode { get; }
    internal static string HttpInvalidVersion { get; }
    internal static string HttpMessageContentAlreadyRead { get; }
    internal static string HttpMessageContentStreamMustBeSeekable { get; }
    internal static string HttpMessageErrorReading { get; }
    internal static string HttpMessageInvalidMediaType { get; }
    internal static string HttpMessageParserEmptyUri { get; }
    internal static string HttpMessageParserError { get; }
    internal static string HttpMessageParserInvalidHostCount { get; }
    internal static string HttpMessageParserInvalidUriScheme { get; }
    internal static string InvalidArrayInsert { get; }
    internal static string JQuery13CompatModeNotSupportNestedJson { get; }
    internal static string JsonSerializerFactoryReturnedNull { get; }
    internal static string JsonSerializerFactoryThrew { get; }
    internal static string MaxDepthExceeded { get; }
    internal static string MaxHttpCollectionKeyLimitReached { get; }
    internal static string MediaTypeFormatter_BsonParseError_MissingData { get; }
    internal static string MediaTypeFormatter_BsonParseError_UnexpectedData { get; }
    internal static string MediaTypeFormatter_JsonReaderFactoryReturnedNull { get; }
    internal static string MediaTypeFormatter_JsonWriterFactoryReturnedNull { get; }
    internal static string MediaTypeFormatterCannotRead { get; }
    internal static string MediaTypeFormatterCannotReadSync { get; }
    internal static string MediaTypeFormatterCannotWrite { get; }
    internal static string MediaTypeFormatterCannotWriteSync { get; }
    internal static string MediaTypeFormatterNoEncoding { get; }
    internal static string MimeMultipartParserBadBoundary { get; }
    internal static string MultipartFormDataStreamProviderNoContentDisposition { get; }
    internal static string MultipartStreamProviderInvalidLocalFileName { get; }
    internal static string NestedBracketNotValid { get; }
    internal static string NonNullUriRequiredForMediaTypeMapping { get; }
    internal static string NoReadSerializerAvailable { get; }
    internal static string ObjectAndTypeDisagree { get; }
    internal static string ObjectContent_FormatterCannotWriteType { get; }
    internal static string QueryStringNameShouldNotNull { get; }
    internal static string ReadAsHttpMessageUnexpectedTermination { get; }
    internal static string ReadAsMimeMultipartArgumentNoBoundary { get; }
    internal static string ReadAsMimeMultipartArgumentNoContentType { get; }
    internal static string ReadAsMimeMultipartArgumentNoMultipart { get; }
    internal static string ReadAsMimeMultipartErrorReading { get; }
    internal static string ReadAsMimeMultipartErrorWriting { get; }
    internal static string ReadAsMimeMultipartHeaderParseError { get; }
    internal static string ReadAsMimeMultipartParseError { get; }
    internal static string ReadAsMimeMultipartStreamProviderException { get; }
    internal static string ReadAsMimeMultipartStreamProviderNull { get; }
    internal static string ReadAsMimeMultipartStreamProviderReadOnly { get; }
    internal static string ReadAsMimeMultipartUnexpectedTermination { get; }
    internal static string RemoteStreamInfoCannotBeNull { get; }
    internal static string SerializerCannotSerializeType { get; }
    internal static string UnMatchedBracketNotValid { get; }
    internal static string UnsupportedIndent { get; }
    internal static string XmlMediaTypeFormatter_InvalidSerializerType { get; }
    internal static string XmlMediaTypeFormatter_NullReturnedSerializer { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AsyncResult_CallbackThrewException();
    internal static string get_AsyncResult_MultipleCompletes();
    internal static string get_AsyncResult_MultipleEnds();
    internal static string get_AsyncResult_ResultMismatch();
    internal static string get_ByteRangeStreamContentNoRanges();
    internal static string get_ByteRangeStreamContentNotBytesRange();
    internal static string get_ByteRangeStreamEmpty();
    internal static string get_ByteRangeStreamInvalidFrom();
    internal static string get_ByteRangeStreamNoneOverlap();
    internal static string get_ByteRangeStreamNoOverlap();
    internal static string get_ByteRangeStreamNotSeekable();
    internal static string get_ByteRangeStreamReadOnly();
    internal static string get_CannotHaveNullInList();
    internal static string get_CannotUseMediaRangeForSupportedMediaType();
    internal static string get_CannotUseNullValueType();
    internal static string get_CookieInvalidName();
    internal static string get_CookieNull();
    internal static string get_DelegatingHandlerArrayContainsNullItem();
    internal static string get_DelegatingHandlerArrayHasNonNullInnerHandler();
    internal static string get_ErrorReadingFormUrlEncodedStream();
    internal static string get_FormUrlEncodedMismatchingTypes();
    internal static string get_FormUrlEncodedParseError();
    internal static string get_HttpInvalidStatusCode();
    internal static string get_HttpInvalidVersion();
    internal static string get_HttpMessageContentAlreadyRead();
    internal static string get_HttpMessageContentStreamMustBeSeekable();
    internal static string get_HttpMessageErrorReading();
    internal static string get_HttpMessageInvalidMediaType();
    internal static string get_HttpMessageParserEmptyUri();
    internal static string get_HttpMessageParserError();
    internal static string get_HttpMessageParserInvalidHostCount();
    internal static string get_HttpMessageParserInvalidUriScheme();
    internal static string get_InvalidArrayInsert();
    internal static string get_JQuery13CompatModeNotSupportNestedJson();
    internal static string get_JsonSerializerFactoryReturnedNull();
    internal static string get_JsonSerializerFactoryThrew();
    internal static string get_MaxDepthExceeded();
    internal static string get_MaxHttpCollectionKeyLimitReached();
    internal static string get_MediaTypeFormatter_BsonParseError_MissingData();
    internal static string get_MediaTypeFormatter_BsonParseError_UnexpectedData();
    internal static string get_MediaTypeFormatter_JsonReaderFactoryReturnedNull();
    internal static string get_MediaTypeFormatter_JsonWriterFactoryReturnedNull();
    internal static string get_MediaTypeFormatterCannotRead();
    internal static string get_MediaTypeFormatterCannotReadSync();
    internal static string get_MediaTypeFormatterCannotWrite();
    internal static string get_MediaTypeFormatterCannotWriteSync();
    internal static string get_MediaTypeFormatterNoEncoding();
    internal static string get_MimeMultipartParserBadBoundary();
    internal static string get_MultipartFormDataStreamProviderNoContentDisposition();
    internal static string get_MultipartStreamProviderInvalidLocalFileName();
    internal static string get_NestedBracketNotValid();
    internal static string get_NonNullUriRequiredForMediaTypeMapping();
    internal static string get_NoReadSerializerAvailable();
    internal static string get_ObjectAndTypeDisagree();
    internal static string get_ObjectContent_FormatterCannotWriteType();
    internal static string get_QueryStringNameShouldNotNull();
    internal static string get_ReadAsHttpMessageUnexpectedTermination();
    internal static string get_ReadAsMimeMultipartArgumentNoBoundary();
    internal static string get_ReadAsMimeMultipartArgumentNoContentType();
    internal static string get_ReadAsMimeMultipartArgumentNoMultipart();
    internal static string get_ReadAsMimeMultipartErrorReading();
    internal static string get_ReadAsMimeMultipartErrorWriting();
    internal static string get_ReadAsMimeMultipartHeaderParseError();
    internal static string get_ReadAsMimeMultipartParseError();
    internal static string get_ReadAsMimeMultipartStreamProviderException();
    internal static string get_ReadAsMimeMultipartStreamProviderNull();
    internal static string get_ReadAsMimeMultipartStreamProviderReadOnly();
    internal static string get_ReadAsMimeMultipartUnexpectedTermination();
    internal static string get_RemoteStreamInfoCannotBeNull();
    internal static string get_SerializerCannotSerializeType();
    internal static string get_UnMatchedBracketNotValid();
    internal static string get_UnsupportedIndent();
    internal static string get_XmlMediaTypeFormatter_InvalidSerializerType();
    internal static string get_XmlMediaTypeFormatter_NullReturnedSerializer();
}
internal class System.Net.Http.PushStreamContent : HttpContent {
    private Func`4<Stream, HttpContent, TransportContext, Task> _onStreamAvailable;
    public PushStreamContent(Action`3<Stream, HttpContent, TransportContext> onStreamAvailable);
    public PushStreamContent(Func`4<Stream, HttpContent, TransportContext, Task> onStreamAvailable);
    public PushStreamContent(Action`3<Stream, HttpContent, TransportContext> onStreamAvailable, string mediaType);
    public PushStreamContent(Func`4<Stream, HttpContent, TransportContext, Task> onStreamAvailable, string mediaType);
    public PushStreamContent(Action`3<Stream, HttpContent, TransportContext> onStreamAvailable, MediaTypeHeaderValue mediaType);
    public PushStreamContent(Func`4<Stream, HttpContent, TransportContext, Task> onStreamAvailable, MediaTypeHeaderValue mediaType);
    private static Func`4<Stream, HttpContent, TransportContext, Task> Taskify(Action`3<Stream, HttpContent, TransportContext> onStreamAvailable);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Net.Http.PushStreamContent/<SerializeToStreamAsync>d__3")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
}
internal class System.Net.Http.RemoteStreamInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <RemoteStream>k__BackingField;
    public string FileName { get; private set; }
    public string Location { get; private set; }
    public Stream RemoteStream { get; private set; }
    public RemoteStreamInfo(Stream remoteStream, string location, string fileName);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(string value);
    [CompilerGeneratedAttribute]
public Stream get_RemoteStream();
    [CompilerGeneratedAttribute]
private void set_RemoteStream(Stream value);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.System.Net.Http.Formatting830586.HttpClientExtensions : object {
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, string requestUri, T value);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, string requestUri, T value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, Uri requestUri, T value);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, Uri requestUri, T value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsXmlAsync(HttpClient client, string requestUri, T value);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsXmlAsync(HttpClient client, string requestUri, T value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsXmlAsync(HttpClient client, Uri requestUri, T value);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsXmlAsync(HttpClient client, Uri requestUri, T value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter, string mediaType);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter, string mediaType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter, string mediaType);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter, string mediaType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, string requestUri, T value);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, string requestUri, T value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, Uri requestUri, T value);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, Uri requestUri, T value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsXmlAsync(HttpClient client, string requestUri, T value);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsXmlAsync(HttpClient client, string requestUri, T value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsXmlAsync(HttpClient client, Uri requestUri, T value);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsXmlAsync(HttpClient client, Uri requestUri, T value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter, string mediaType);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter, string mediaType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, string requestUri, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter, string mediaType);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter, string mediaType, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient client, Uri requestUri, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, CancellationToken cancellationToken);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.System.Web.Http911064.HttpRequestMessageExtensions : object {
    [ExtensionAttribute]
public static HttpConfiguration GetConfiguration(HttpRequestMessage request);
    [ExtensionAttribute]
internal static HttpConfiguration LegacyGetConfiguration(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetConfiguration(HttpRequestMessage request, HttpConfiguration configuration);
    [ExtensionAttribute]
public static IDependencyScope GetDependencyScope(HttpRequestMessage request);
    [ExtensionAttribute]
public static HttpRequestContext GetRequestContext(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetRequestContext(HttpRequestMessage request, HttpRequestContext context);
    [ExtensionAttribute]
public static SynchronizationContext GetSynchronizationContext(HttpRequestMessage request);
    [ExtensionAttribute]
internal static void SetSynchronizationContext(HttpRequestMessage request, SynchronizationContext synchronizationContext);
    [ExtensionAttribute]
public static X509Certificate2 GetClientCertificate(HttpRequestMessage request);
    [ExtensionAttribute]
internal static X509Certificate2 LegacyGetClientCertificate(HttpRequestMessage request);
    [ExtensionAttribute]
public static IHttpRouteData GetRouteData(HttpRequestMessage request);
    [ExtensionAttribute]
internal static IHttpRouteData LegacyGetRouteData(HttpRequestMessage request);
    [ExtensionAttribute]
public static void SetRouteData(HttpRequestMessage request, IHttpRouteData routeData);
    [ExtensionAttribute]
public static HttpActionDescriptor GetActionDescriptor(HttpRequestMessage request);
    [ExtensionAttribute]
internal static void SetActionDescriptor(HttpRequestMessage request, HttpActionDescriptor actionDescriptor);
    [ExtensionAttribute]
private static T GetProperty(HttpRequestMessage request, string key);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, InvalidByteRangeException invalidByteRangeException);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message);
    [ExtensionAttribute]
internal static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message, string messageDetail);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message, Exception exception);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, Exception exception);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, ModelStateDictionary modelState);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, HttpError error);
    [ExtensionAttribute]
private static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, Func`2<bool, HttpError> errorCreator);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, T value);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, HttpConfiguration configuration);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, string mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, string mediaType);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType);
    [ExtensionAttribute]
public static void RegisterForDispose(HttpRequestMessage request, IDisposable resource);
    [ExtensionAttribute]
public static void RegisterForDispose(HttpRequestMessage request, IEnumerable`1<IDisposable> resources);
    [ExtensionAttribute]
public static void DisposeRequestResources(HttpRequestMessage request);
    [ExtensionAttribute]
public static Guid GetCorrelationId(HttpRequestMessage request);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, string>> GetQueryNameValuePairs(HttpRequestMessage request);
    [ExtensionAttribute]
public static UrlHelper GetUrlHelper(HttpRequestMessage request);
    [ExtensionAttribute]
public static bool IsLocal(HttpRequestMessage request);
    [ExtensionAttribute]
internal static bool LegacyIsLocal(HttpRequestMessage request);
    [ExtensionAttribute]
public static bool IsBatchRequest(HttpRequestMessage request);
    [ExtensionAttribute]
public static bool ShouldIncludeErrorDetail(HttpRequestMessage request);
    [ExtensionAttribute]
internal static bool LegacyShouldIncludeErrorDetail(HttpRequestMessage request);
    [ExtensionAttribute]
public static IEnumerable`1<IDisposable> GetResourcesForDisposal(HttpRequestMessage request);
    private static List`1<IDisposable> GetRegisteredResourcesForDispose(HttpRequestMessage request);
}
[ExtensionAttribute]
internal static class System.Net.Http.TypeExtensions : object {
    [ExtensionAttribute]
public static Type ExtractGenericInterface(Type queryType, Type interfaceType);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
}
internal class System.Net.Http.UnsupportedMediaTypeException : Exception {
    [CompilerGeneratedAttribute]
private MediaTypeHeaderValue <MediaType>k__BackingField;
    public MediaTypeHeaderValue MediaType { get; private set; }
    public UnsupportedMediaTypeException(string message, MediaTypeHeaderValue mediaType);
    [CompilerGeneratedAttribute]
public MediaTypeHeaderValue get_MediaType();
    [CompilerGeneratedAttribute]
private void set_MediaType(MediaTypeHeaderValue value);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Net.Http.UriExtensions : object {
    [ExtensionAttribute]
public static NameValueCollection ParseQueryString(Uri address);
    [ExtensionAttribute]
public static bool TryReadQueryAsJson(Uri address, JObject& value);
    [ExtensionAttribute]
public static bool TryReadQueryAs(Uri address, Type type, Object& value);
    [ExtensionAttribute]
public static bool TryReadQueryAs(Uri address, T& value);
}
internal static class System.Threading.Tasks.System.Web.Http.Owin1126879.TaskHelpers : object {
    private static Task _defaultCompleted;
    private static Task`1<object> _completedTaskReturningNull;
    private static System.Web.Http.Owin1126879.TaskHelpers();
    internal static Task Canceled();
    internal static Task`1<TResult> Canceled();
    internal static Task Completed();
    internal static Task FromError(Exception exception);
    internal static Task`1<TResult> FromError(Exception exception);
    internal static Task`1<object> NullResult();
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.System.Web.Http.Owin1126879.TaskHelpersExtensions : object {
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Threading.Tasks.System.Web.Http.Owin1126879.TaskHelpersExtensions/<CastToObject>d__0")]
[ExtensionAttribute]
internal static Task`1<object> CastToObject(Task task);
    [AsyncStateMachineAttribute("System.Threading.Tasks.System.Web.Http.Owin1126879.TaskHelpersExtensions/<CastToObject>d__3`1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static Task`1<object> CastToObject(Task`1<T> task);
    [ExtensionAttribute]
internal static void ThrowIfFaulted(Task task);
    [ExtensionAttribute]
internal static bool TryGetResult(Task`1<TResult> task, TResult& result);
}
internal static class System.Threading.Tasks.System.Web.Http911064.TaskHelpers : object {
    private static Task _defaultCompleted;
    private static Task`1<object> _completedTaskReturningNull;
    private static System.Web.Http911064.TaskHelpers();
    internal static Task Canceled();
    internal static Task`1<TResult> Canceled();
    internal static Task Completed();
    internal static Task FromError(Exception exception);
    internal static Task`1<TResult> FromError(Exception exception);
    internal static Task`1<object> NullResult();
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.System.Web.Http911064.TaskHelpersExtensions : object {
    [ExtensionAttribute]
[AsyncStateMachineAttribute("System.Threading.Tasks.System.Web.Http911064.TaskHelpersExtensions/<CastToObject>d__0")]
[DebuggerStepThroughAttribute]
internal static Task`1<object> CastToObject(Task task);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Threading.Tasks.System.Web.Http911064.TaskHelpersExtensions/<CastToObject>d__3`1")]
internal static Task`1<object> CastToObject(Task`1<T> task);
    [ExtensionAttribute]
internal static void ThrowIfFaulted(Task task);
    [ExtensionAttribute]
internal static bool TryGetResult(Task`1<TResult> task, TResult& result);
}
internal static class System.Threading.Tasks.TaskHelpers : object {
    private static Task _defaultCompleted;
    private static Task`1<object> _completedTaskReturningNull;
    private static TaskHelpers();
    internal static Task Canceled();
    internal static Task`1<TResult> Canceled();
    internal static Task Completed();
    internal static Task FromError(Exception exception);
    internal static Task`1<TResult> FromError(Exception exception);
    internal static Task`1<object> NullResult();
}
[ExtensionAttribute]
internal static class System.Threading.Tasks.TaskHelpersExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__0")]
internal static Task`1<object> CastToObject(Task task);
    [AsyncStateMachineAttribute("System.Threading.Tasks.TaskHelpersExtensions/<CastToObject>d__3`1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static Task`1<object> CastToObject(Task`1<T> task);
    [ExtensionAttribute]
internal static void ThrowIfFaulted(Task task);
    [ExtensionAttribute]
internal static bool TryGetResult(Task`1<TResult> task, TResult& result);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsNullable(Type type);
}
internal static class System.Web.Cors.CorsConstants : object {
    public static string PreflightHttpMethod;
    public static string Origin;
    public static string AnyOrigin;
    public static string AccessControlRequestMethod;
    public static string AccessControlRequestHeaders;
    public static string AccessControlAllowOrigin;
    public static string AccessControlAllowHeaders;
    public static string AccessControlExposeHeaders;
    public static string AccessControlAllowMethods;
    public static string AccessControlAllowCredentials;
    public static string AccessControlMaxAge;
    internal static String[] SimpleRequestHeaders;
    internal static String[] SimpleResponseHeaders;
    internal static String[] SimpleMethods;
    private static CorsConstants();
}
internal class System.Web.Cors.CorsEngine : object {
    public virtual CorsResult EvaluatePolicy(CorsRequestContext requestContext, CorsPolicy policy);
    public virtual bool TryValidateMethod(CorsRequestContext requestContext, CorsPolicy policy, CorsResult result);
    public virtual bool TryValidateHeaders(CorsRequestContext requestContext, CorsPolicy policy, CorsResult result);
    public virtual bool TryValidateOrigin(CorsRequestContext requestContext, CorsPolicy policy, CorsResult result);
    private static void AddHeaderValues(IList`1<string> target, IEnumerable`1<string> headerValues);
}
internal class System.Web.Cors.CorsPolicy : object {
    private Nullable`1<long> _preflightMaxAge;
    [CompilerGeneratedAttribute]
private bool <AllowAnyHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAnyMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAnyOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExposedHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Origins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsCredentials>k__BackingField;
    public bool AllowAnyHeader { get; public set; }
    public bool AllowAnyMethod { get; public set; }
    public bool AllowAnyOrigin { get; public set; }
    public IList`1<string> ExposedHeaders { get; private set; }
    public IList`1<string> Headers { get; private set; }
    public IList`1<string> Methods { get; private set; }
    public IList`1<string> Origins { get; private set; }
    public Nullable`1<long> PreflightMaxAge { get; public set; }
    public bool SupportsCredentials { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowAnyHeader();
    [CompilerGeneratedAttribute]
public void set_AllowAnyHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAnyMethod();
    [CompilerGeneratedAttribute]
public void set_AllowAnyMethod(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAnyOrigin();
    [CompilerGeneratedAttribute]
public void set_AllowAnyOrigin(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ExposedHeaders();
    [CompilerGeneratedAttribute]
private void set_ExposedHeaders(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Methods();
    [CompilerGeneratedAttribute]
private void set_Methods(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Origins();
    [CompilerGeneratedAttribute]
private void set_Origins(IList`1<string> value);
    public Nullable`1<long> get_PreflightMaxAge();
    public void set_PreflightMaxAge(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_SupportsCredentials();
    [CompilerGeneratedAttribute]
public void set_SupportsCredentials(bool value);
    public virtual string ToString();
}
internal class System.Web.Cors.CorsRequestContext : object {
    [CompilerGeneratedAttribute]
private Uri <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessControlRequestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <AccessControlRequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    public Uri RequestUri { get; public set; }
    public string HttpMethod { get; public set; }
    public string Origin { get; public set; }
    public string Host { get; public set; }
    public string AccessControlRequestMethod { get; public set; }
    public ISet`1<string> AccessControlRequestHeaders { get; private set; }
    public IDictionary`2<string, object> Properties { get; private set; }
    public bool IsPreflight { get; }
    [CompilerGeneratedAttribute]
public Uri get_RequestUri();
    [CompilerGeneratedAttribute]
public void set_RequestUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_AccessControlRequestMethod();
    [CompilerGeneratedAttribute]
public void set_AccessControlRequestMethod(string value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_AccessControlRequestHeaders();
    [CompilerGeneratedAttribute]
private void set_AccessControlRequestHeaders(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IDictionary`2<string, object> value);
    public bool get_IsPreflight();
    public virtual string ToString();
}
internal class System.Web.Cors.CorsResult : object {
    private Nullable`1<long> _preflightMaxAge;
    [CompilerGeneratedAttribute]
private IList`1<string> <ErrorMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllowedOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedExposedHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public bool IsValid { get; }
    public IList`1<string> ErrorMessages { get; private set; }
    public string AllowedOrigin { get; public set; }
    public bool SupportsCredentials { get; public set; }
    public IList`1<string> AllowedMethods { get; private set; }
    public IList`1<string> AllowedHeaders { get; private set; }
    public IList`1<string> AllowedExposedHeaders { get; private set; }
    public Nullable`1<long> PreflightMaxAge { get; public set; }
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public IList`1<string> get_ErrorMessages();
    [CompilerGeneratedAttribute]
private void set_ErrorMessages(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_AllowedOrigin();
    [CompilerGeneratedAttribute]
public void set_AllowedOrigin(string value);
    [CompilerGeneratedAttribute]
public bool get_SupportsCredentials();
    [CompilerGeneratedAttribute]
public void set_SupportsCredentials(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedMethods();
    [CompilerGeneratedAttribute]
private void set_AllowedMethods(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedHeaders();
    [CompilerGeneratedAttribute]
private void set_AllowedHeaders(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedExposedHeaders();
    [CompilerGeneratedAttribute]
private void set_AllowedExposedHeaders(IList`1<string> value);
    public Nullable`1<long> get_PreflightMaxAge();
    public void set_PreflightMaxAge(Nullable`1<long> value);
    public virtual IDictionary`2<string, string> ToResponseHeaders();
    public virtual string ToString();
    private static void AddHeader(IDictionary`2<string, string> headers, string headerName, IEnumerable`1<string> headerValues);
    [CompilerGeneratedAttribute]
private static bool <ToResponseHeaders>b__0(string m);
    [CompilerGeneratedAttribute]
private static bool <ToResponseHeaders>b__1(string header);
    [CompilerGeneratedAttribute]
private static bool <ToResponseHeaders>b__2(string header);
}
internal interface System.Web.Cors.ICorsEngine {
    public abstract virtual CorsResult EvaluatePolicy(CorsRequestContext requestContext, CorsPolicy policy);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class System.Web.Cors.Properties.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string HeadersNotAllowed { get; }
    internal static string MethodNotAllowed { get; }
    internal static string NoOriginHeader { get; }
    internal static string OriginNotAllowed { get; }
    internal static string PreflightMaxAgeOutOfRange { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_HeadersNotAllowed();
    internal static string get_MethodNotAllowed();
    internal static string get_NoOriginHeader();
    internal static string get_OriginNotAllowed();
    internal static string get_PreflightMaxAgeOutOfRange();
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.AcceptVerbsAttribute : Attribute {
    private Collection`1<HttpMethod> _httpMethods;
    [CompilerGeneratedAttribute]
private static Func`2<string, HttpMethod> CS$<>9__CachedAnonymousMethodDelegate1;
    public Collection`1<HttpMethod> HttpMethods { get; }
    public AcceptVerbsAttribute(string method);
    public AcceptVerbsAttribute(String[] methods);
    internal AcceptVerbsAttribute(HttpMethod[] methods);
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
    [CompilerGeneratedAttribute]
private static HttpMethod <.ctor>b__0(string method);
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.ActionNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public ActionNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("68")]
internal class System.Web.Http.AllowAnonymousAttribute : Attribute {
}
internal abstract class System.Web.Http.ApiController : object {
    private HttpActionContext _actionContext;
    private bool _initialized;
    public HttpConfiguration Configuration { get; public set; }
    public HttpControllerContext ControllerContext { get; public set; }
    public HttpActionContext ActionContext { get; public set; }
    public ModelStateDictionary ModelState { get; }
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public UrlHelper Url { get; public set; }
    public IPrincipal User { get; public set; }
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public HttpControllerContext get_ControllerContext();
    public void set_ControllerContext(HttpControllerContext value);
    public HttpActionContext get_ActionContext();
    public void set_ActionContext(HttpActionContext value);
    public ModelStateDictionary get_ModelState();
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public HttpRequestContext get_RequestContext();
    public void set_RequestContext(HttpRequestContext value);
    public UrlHelper get_Url();
    public void set_Url(UrlHelper value);
    public IPrincipal get_User();
    public void set_User(IPrincipal value);
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken);
    public void Validate(TEntity entity);
    public void Validate(TEntity entity, string keyPrefix);
    protected internal virtual BadRequestResult BadRequest();
    protected internal virtual BadRequestErrorMessageResult BadRequest(string message);
    protected internal virtual InvalidModelStateResult BadRequest(ModelStateDictionary modelState);
    protected internal virtual ConflictResult Conflict();
    protected internal virtual NegotiatedContentResult`1<T> Content(HttpStatusCode statusCode, T value);
    protected internal FormattedContentResult`1<T> Content(HttpStatusCode statusCode, T value, MediaTypeFormatter formatter);
    protected internal FormattedContentResult`1<T> Content(HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, string mediaType);
    protected internal virtual FormattedContentResult`1<T> Content(HttpStatusCode statusCode, T value, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType);
    protected internal CreatedNegotiatedContentResult`1<T> Created(string location, T content);
    protected internal virtual CreatedNegotiatedContentResult`1<T> Created(Uri location, T content);
    protected internal CreatedAtRouteNegotiatedContentResult`1<T> CreatedAtRoute(string routeName, object routeValues, T content);
    protected internal virtual CreatedAtRouteNegotiatedContentResult`1<T> CreatedAtRoute(string routeName, IDictionary`2<string, object> routeValues, T content);
    protected internal virtual InternalServerErrorResult InternalServerError();
    protected internal virtual ExceptionResult InternalServerError(Exception exception);
    protected internal JsonResult`1<T> Json(T content);
    protected internal JsonResult`1<T> Json(T content, JsonSerializerSettings serializerSettings);
    protected internal virtual JsonResult`1<T> Json(T content, JsonSerializerSettings serializerSettings, Encoding encoding);
    protected internal virtual NotFoundResult NotFound();
    protected internal virtual OkResult Ok();
    protected internal virtual OkNegotiatedContentResult`1<T> Ok(T content);
    protected internal virtual RedirectResult Redirect(string location);
    protected internal virtual RedirectResult Redirect(Uri location);
    protected internal RedirectToRouteResult RedirectToRoute(string routeName, object routeValues);
    protected internal virtual RedirectToRouteResult RedirectToRoute(string routeName, IDictionary`2<string, object> routeValues);
    protected internal virtual ResponseMessageResult ResponseMessage(HttpResponseMessage response);
    protected internal virtual StatusCodeResult StatusCode(HttpStatusCode status);
    protected internal UnauthorizedResult Unauthorized(AuthenticationHeaderValue[] challenges);
    protected internal virtual UnauthorizedResult Unauthorized(IEnumerable`1<AuthenticationHeaderValue> challenges);
    protected virtual void Initialize(HttpControllerContext controllerContext);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[AttributeUsageAttribute("68")]
internal class System.Web.Http.AuthorizeAttribute : AuthorizationFilterAttribute {
    private static String[] _emptyArray;
    private object _typeId;
    private string _roles;
    private String[] _rolesSplit;
    private string _users;
    private String[] _usersSplit;
    [CompilerGeneratedAttribute]
private static Func`2<string, System.Web.Http.<>f__AnonymousType0`2<string, string>> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<System.Web.Http.<>f__AnonymousType0`2<string, string>, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<System.Web.Http.<>f__AnonymousType0`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegatec;
    public string Roles { get; public set; }
    public object TypeId { get; }
    public string Users { get; public set; }
    private static AuthorizeAttribute();
    public string get_Roles();
    public void set_Roles(string value);
    public virtual object get_TypeId();
    public string get_Users();
    public void set_Users(string value);
    protected virtual bool IsAuthorized(HttpActionContext actionContext);
    public virtual void OnAuthorization(HttpActionContext actionContext);
    protected virtual void HandleUnauthorizedRequest(HttpActionContext actionContext);
    private static bool SkipAuthorization(HttpActionContext actionContext);
    internal static String[] SplitString(string original);
    [CompilerGeneratedAttribute]
private static System.Web.Http.<>f__AnonymousType0`2<string, string> <SplitString>b__7(string piece);
    [CompilerGeneratedAttribute]
private static bool <SplitString>b__8(System.Web.Http.<>f__AnonymousType0`2<string, string> <>h__TransparentIdentifier6);
    [CompilerGeneratedAttribute]
private static string <SplitString>b__9(System.Web.Http.<>f__AnonymousType0`2<string, string> <>h__TransparentIdentifier6);
}
internal enum System.Web.Http.Batch.BatchExecutionOrder : Enum {
    public int value__;
    public static BatchExecutionOrder Sequential;
    public static BatchExecutionOrder NonSequential;
}
internal class System.Web.Http.Batch.BatchHttpRequestContext : HttpRequestContext {
    private HttpRequestContext _batchContext;
    public HttpRequestContext BatchContext { get; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public HttpConfiguration Configuration { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IPrincipal Principal { get; public set; }
    public IHttpRouteData RouteData { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    public BatchHttpRequestContext(HttpRequestContext batchContext);
    public HttpRequestContext get_BatchContext();
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual HttpConfiguration get_Configuration();
    public virtual void set_Configuration(HttpConfiguration value);
    public virtual bool get_IncludeErrorDetail();
    public virtual void set_IncludeErrorDetail(bool value);
    public virtual bool get_IsLocal();
    public virtual void set_IsLocal(bool value);
    public virtual IPrincipal get_Principal();
    public virtual void set_Principal(IPrincipal value);
    public virtual IHttpRouteData get_RouteData();
    public virtual void set_RouteData(IHttpRouteData value);
    public virtual UrlHelper get_Url();
    public virtual void set_Url(UrlHelper value);
    public virtual string get_VirtualPathRoot();
    public virtual void set_VirtualPathRoot(string value);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Web.Http.Batch.BatchHttpRequestMessageExtensions : object {
    private static string HttpBatchContextKey;
    private static String[] BatchRequestPropertyExclusions;
    private static BatchHttpRequestMessageExtensions();
    [ExtensionAttribute]
public static void CopyBatchRequestProperties(HttpRequestMessage subRequest, HttpRequestMessage batchRequest);
}
internal class System.Web.Http.Batch.DefaultHttpBatchHandler : HttpBatchHandler {
    private static string MultiPartContentSubtype;
    private static string MultiPartMixed;
    private BatchExecutionOrder _executionOrder;
    [CompilerGeneratedAttribute]
private IList`1<string> <SupportedContentTypes>k__BackingField;
    public BatchExecutionOrder ExecutionOrder { get; public set; }
    public IList`1<string> SupportedContentTypes { get; private set; }
    public DefaultHttpBatchHandler(HttpServer httpServer);
    public BatchExecutionOrder get_ExecutionOrder();
    public void set_ExecutionOrder(BatchExecutionOrder value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SupportedContentTypes();
    [CompilerGeneratedAttribute]
private void set_SupportedContentTypes(IList`1<string> value);
    public virtual Task`1<HttpResponseMessage> CreateResponseMessageAsync(IList`1<HttpResponseMessage> responses, HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Batch.DefaultHttpBatchHandler/<ProcessBatchAsync>d__1")]
[DebuggerStepThroughAttribute]
public virtual Task`1<HttpResponseMessage> ProcessBatchAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Batch.DefaultHttpBatchHandler/<ExecuteRequestMessagesAsync>d__c")]
[DebuggerStepThroughAttribute]
public virtual Task`1<IList`1<HttpResponseMessage>> ExecuteRequestMessagesAsync(IEnumerable`1<HttpRequestMessage> requests, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Batch.DefaultHttpBatchHandler/<ParseBatchRequestsAsync>d__13")]
public virtual Task`1<IList`1<HttpRequestMessage>> ParseBatchRequestsAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public virtual void ValidateRequest(HttpRequestMessage request);
}
internal abstract class System.Web.Http.Batch.HttpBatchHandler : HttpMessageHandler {
    private HttpServer _server;
    [CompilerGeneratedAttribute]
private HttpMessageInvoker <Invoker>k__BackingField;
    public HttpMessageInvoker Invoker { get; private set; }
    internal IExceptionLogger ExceptionLogger { get; internal set; }
    internal IExceptionHandler ExceptionHandler { get; internal set; }
    protected HttpBatchHandler(HttpServer httpServer);
    [CompilerGeneratedAttribute]
public HttpMessageInvoker get_Invoker();
    [CompilerGeneratedAttribute]
private void set_Invoker(HttpMessageInvoker value);
    internal IExceptionLogger get_ExceptionLogger();
    internal void set_ExceptionLogger(IExceptionLogger value);
    internal IExceptionHandler get_ExceptionHandler();
    internal void set_ExceptionHandler(IExceptionHandler value);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Batch.HttpBatchHandler/<SendAsync>d__0")]
protected sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpResponseMessage> ProcessBatchAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.ActionFilterResult : object {
    private HttpActionBinding _binding;
    private HttpActionContext _context;
    private ServicesContainer _services;
    private IActionFilter[] _filters;
    [CompilerGeneratedAttribute]
private static Func`2<ActionInvoker, Task`1<HttpResponseMessage>> CS$<>9__CachedAnonymousMethodDelegate1;
    public ActionFilterResult(HttpActionBinding binding, HttpActionContext context, ServicesContainer services, IActionFilter[] filters);
    [AsyncStateMachineAttribute("System.Web.Http.Controllers.ActionFilterResult/<ExecuteAsync>d__2")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    public static Func`1<Task`1<HttpResponseMessage>> InvokeActionWithActionFilters(HttpActionContext actionContext, CancellationToken cancellationToken, IActionFilter[] filters, Func`1<Task`1<HttpResponseMessage>> innerAction);
    private static Func`1<Task`1<HttpResponseMessage>> InvokeActionWithActionFilters(HttpActionContext actionContext, CancellationToken cancellationToken, IActionFilter[] filters, Func`2<T, Task`1<HttpResponseMessage>> innerAction, T state);
    [CompilerGeneratedAttribute]
private static Task`1<HttpResponseMessage> <ExecuteAsync>b__0(ActionInvoker innerInvoker);
}
internal class System.Web.Http.Controllers.ApiControllerActionInvoker : object {
    public virtual Task`1<HttpResponseMessage> InvokeActionAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Controllers.ApiControllerActionInvoker/<InvokeActionAsyncCore>d__0")]
private static Task`1<HttpResponseMessage> InvokeActionAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.ApiControllerActionSelector : object {
    private ActionSelectorCacheItem _fastCache;
    private object _cacheKey;
    public virtual HttpActionDescriptor SelectAction(HttpControllerContext controllerContext);
    public virtual ILookup`2<string, HttpActionDescriptor> GetActionMapping(HttpControllerDescriptor controllerDescriptor);
    private ActionSelectorCacheItem GetInternalSelector(HttpControllerDescriptor controllerDescriptor);
}
internal class System.Web.Http.Controllers.AuthenticationFilterResult : object {
    private HttpActionContext _context;
    private ApiController _controller;
    private IAuthenticationFilter[] _filters;
    private IHttpActionResult _innerResult;
    public AuthenticationFilterResult(HttpActionContext context, ApiController controller, IAuthenticationFilter[] filters, IHttpActionResult innerResult);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Controllers.AuthenticationFilterResult/<ExecuteAsync>d__0")]
public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.AuthorizationFilterResult : object {
    private HttpActionContext _context;
    private IAuthorizationFilter[] _filters;
    private IHttpActionResult _innerResult;
    public AuthorizationFilterResult(HttpActionContext context, IAuthorizationFilter[] filters, IHttpActionResult innerResult);
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.ControllerServices : ServicesContainer {
    private Dictionary`2<Type, object> _overrideSingle;
    private Dictionary`2<Type, List`1<object>> _overrideMulti;
    private ServicesContainer _parent;
    public ControllerServices(ServicesContainer parent);
    public virtual bool IsSingleService(Type serviceType);
    public virtual object GetService(Type serviceType);
    public virtual IEnumerable`1<object> GetServices(Type serviceType);
    protected virtual void ReplaceSingle(Type serviceType, object service);
    protected virtual void ClearSingle(Type serviceType);
    protected virtual List`1<object> GetServiceInstances(Type serviceType);
}
internal class System.Web.Http.Controllers.ExceptionFilterResult : object {
    private HttpActionContext _context;
    private IExceptionFilter[] _filters;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    private IHttpActionResult _innerResult;
    public ExceptionFilterResult(HttpActionContext context, IExceptionFilter[] filters, IExceptionLogger exceptionLogger, IExceptionHandler exceptionHandler, IHttpActionResult innerResult);
    [AsyncStateMachineAttribute("System.Web.Http.Controllers.ExceptionFilterResult/<ExecuteAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.FilterGrouping : object {
    private IActionFilter[] _actionFilters;
    private IAuthorizationFilter[] _authorizationFilters;
    private IAuthenticationFilter[] _authenticationFilters;
    private IExceptionFilter[] _exceptionFilters;
    [CompilerGeneratedAttribute]
private static Func`2<FilterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public IActionFilter[] ActionFilters { get; }
    public IAuthorizationFilter[] AuthorizationFilters { get; }
    public IAuthenticationFilter[] AuthenticationFilters { get; }
    public IExceptionFilter[] ExceptionFilters { get; }
    public FilterGrouping(IEnumerable`1<FilterInfo> filters);
    public IActionFilter[] get_ActionFilters();
    public IAuthorizationFilter[] get_AuthorizationFilters();
    public IAuthenticationFilter[] get_AuthenticationFilters();
    public IExceptionFilter[] get_ExceptionFilters();
    private static T[] SelectAvailable(List`1<FilterInfo> filters, FilterScope overrideFiltersBeforeScope);
    private static FilterScope SelectLastOverrideScope(List`1<FilterInfo> overrideFilters);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(FilterInfo f);
    [CompilerGeneratedAttribute]
private static T <SelectAvailable>b__3(FilterInfo f);
    [CompilerGeneratedAttribute]
private static bool <SelectLastOverrideScope>b__6(FilterInfo f);
}
internal class System.Web.Http.Controllers.HttpActionBinding : object {
    private HttpActionDescriptor _actionDescriptor;
    private HttpParameterBinding[] _parameterBindings;
    private ModelMetadataProvider _metadataProvider;
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public HttpParameterBinding[] ParameterBindings { get; public set; }
    public HttpActionBinding(HttpActionDescriptor actionDescriptor, HttpParameterBinding[] bindings);
    public HttpActionDescriptor get_ActionDescriptor();
    public void set_ActionDescriptor(HttpActionDescriptor value);
    public HttpParameterBinding[] get_ParameterBindings();
    public void set_ParameterBindings(HttpParameterBinding[] value);
    public virtual Task ExecuteBindingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Controllers.HttpActionBinding/<ExecuteBindingAsyncCore>d__0")]
private Task ExecuteBindingAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken);
}
internal class System.Web.Http.Controllers.HttpActionContext : object {
    private ModelStateDictionary _modelState;
    private Dictionary`2<string, object> _operationArguments;
    private HttpActionDescriptor _actionDescriptor;
    private HttpControllerContext _controllerContext;
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpControllerContext ControllerContext { get; public set; }
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public ModelStateDictionary ModelState { get; }
    public Dictionary`2<string, object> ActionArguments { get; }
    public HttpResponseMessage Response { get; public set; }
    public HttpRequestMessage Request { get; }
    public HttpRequestContext RequestContext { get; }
    public HttpActionContext(HttpControllerContext controllerContext, HttpActionDescriptor actionDescriptor);
    public HttpControllerContext get_ControllerContext();
    public void set_ControllerContext(HttpControllerContext value);
    public HttpActionDescriptor get_ActionDescriptor();
    public void set_ActionDescriptor(HttpActionDescriptor value);
    public ModelStateDictionary get_ModelState();
    public Dictionary`2<string, object> get_ActionArguments();
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(HttpResponseMessage value);
    public HttpRequestMessage get_Request();
    public HttpRequestContext get_RequestContext();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Web.Http.Controllers.HttpActionContextExtensions : object {
    [ExtensionAttribute]
public static ModelMetadataProvider GetMetadataProvider(HttpActionContext actionContext);
    [ExtensionAttribute]
public static IEnumerable`1<ModelValidatorProvider> GetValidatorProviders(HttpActionContext actionContext);
    [ExtensionAttribute]
public static IEnumerable`1<ModelValidator> GetValidators(HttpActionContext actionContext, ModelMetadata metadata);
    [ExtensionAttribute]
internal static IEnumerable`1<ModelValidator> GetValidators(HttpActionContext actionContext, ModelMetadata metadata, IModelValidatorCache validatorCache);
    [ExtensionAttribute]
internal static IModelValidatorCache GetValidatorCache(HttpActionContext actionContext);
    [ExtensionAttribute]
public static bool TryBindStrongModel(HttpActionContext actionContext, ModelBindingContext parentBindingContext, string propertyName, ModelMetadataProvider metadataProvider, TModel& model);
    [ExtensionAttribute]
public static bool Bind(HttpActionContext actionContext, ModelBindingContext bindingContext);
    [ExtensionAttribute]
public static bool Bind(HttpActionContext actionContext, ModelBindingContext bindingContext, IEnumerable`1<IModelBinder> binders);
}
internal abstract class System.Web.Http.Controllers.HttpActionDescriptor : object {
    private ConcurrentDictionary`2<object, object> _properties;
    private IActionResultConverter _converter;
    private Lazy`1<Collection`1<FilterInfo>> _filterPipeline;
    private FilterGrouping _filterGrouping;
    private Collection`1<FilterInfo> _filterPipelineForGrouping;
    private HttpConfiguration _configuration;
    private HttpControllerDescriptor _controllerDescriptor;
    private Collection`1<HttpMethod> _supportedHttpMethods;
    private HttpActionBinding _actionBinding;
    private static ResponseMessageResultConverter _responseMessageResultConverter;
    private static VoidResultConverter _voidResultConverter;
    [CompilerGeneratedAttribute]
private static Func`2<FilterInfo, FilterInfo> CS$<>9__CachedAnonymousMethodDelegate2;
    public string ActionName { get; }
    public HttpConfiguration Configuration { get; public set; }
    public HttpActionBinding ActionBinding { get; public set; }
    public HttpControllerDescriptor ControllerDescriptor { get; public set; }
    public Type ReturnType { get; }
    public IActionResultConverter ResultConverter { get; }
    public Collection`1<HttpMethod> SupportedHttpMethods { get; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    protected HttpActionDescriptor(HttpControllerDescriptor controllerDescriptor);
    private static HttpActionDescriptor();
    public abstract virtual string get_ActionName();
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public virtual HttpActionBinding get_ActionBinding();
    public virtual void set_ActionBinding(HttpActionBinding value);
    public HttpControllerDescriptor get_ControllerDescriptor();
    public void set_ControllerDescriptor(HttpControllerDescriptor value);
    public abstract virtual Type get_ReturnType();
    public virtual IActionResultConverter get_ResultConverter();
    public virtual Collection`1<HttpMethod> get_SupportedHttpMethods();
    public virtual ConcurrentDictionary`2<object, object> get_Properties();
    public virtual Collection`1<T> GetCustomAttributes();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Collection`1<IFilter> GetFilters();
    public abstract virtual Collection`1<HttpParameterDescriptor> GetParameters();
    internal static IActionResultConverter GetResultConverter(Type type);
    public abstract virtual Task`1<object> ExecuteAsync(HttpControllerContext controllerContext, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public virtual Collection`1<FilterInfo> GetFilterPipeline();
    internal FilterGrouping GetFilterGrouping();
    private Collection`1<FilterInfo> InitializeFilterPipeline();
    private static IEnumerable`1<FilterInfo> RemoveDuplicates(IEnumerable`1<FilterInfo> filters);
    private static bool AllowMultiple(object filterInstance);
    [CompilerGeneratedAttribute]
private IEnumerable`1<FilterInfo> <InitializeFilterPipeline>b__0(IFilterProvider fp);
    [CompilerGeneratedAttribute]
private static FilterInfo <InitializeFilterPipeline>b__1(FilterInfo f);
}
[ExtensionAttribute]
internal static class System.Web.Http.Controllers.HttpActionDescriptorExtensions : object {
    private static string AttributeRoutedPropertyKey;
    [ExtensionAttribute]
public static bool IsAttributeRouted(HttpActionDescriptor actionDescriptor);
    [ExtensionAttribute]
public static void SetIsAttributeRouted(HttpActionDescriptor actionDescriptor, bool value);
}
internal class System.Web.Http.Controllers.HttpControllerContext : object {
    private HttpRequestContext _requestContext;
    private HttpRequestMessage _request;
    private HttpControllerDescriptor _controllerDescriptor;
    private IHttpController _controller;
    public HttpConfiguration Configuration { get; public set; }
    public HttpControllerDescriptor ControllerDescriptor { get; public set; }
    public IHttpController Controller { get; public set; }
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public IHttpRouteData RouteData { get; public set; }
    public HttpControllerContext(HttpRequestContext requestContext, HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, IHttpController controller);
    public HttpControllerContext(HttpConfiguration configuration, IHttpRouteData routeData, HttpRequestMessage request);
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public HttpControllerDescriptor get_ControllerDescriptor();
    public void set_ControllerDescriptor(HttpControllerDescriptor value);
    public IHttpController get_Controller();
    public void set_Controller(IHttpController value);
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public HttpRequestContext get_RequestContext();
    public void set_RequestContext(HttpRequestContext value);
    public IHttpRouteData get_RouteData();
    public void set_RouteData(IHttpRouteData value);
}
internal class System.Web.Http.Controllers.HttpControllerDescriptor : object {
    private ConcurrentDictionary`2<object, object> _properties;
    private HttpConfiguration _configuration;
    private string _controllerName;
    private Type _controllerType;
    private Object[] _attributeCache;
    private Object[] _declaredOnlyAttributeCache;
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public HttpConfiguration Configuration { get; public set; }
    public string ControllerName { get; public set; }
    public Type ControllerType { get; public set; }
    public HttpControllerDescriptor(HttpConfiguration configuration, string controllerName, Type controllerType);
    internal HttpControllerDescriptor(HttpConfiguration configuration);
    public virtual ConcurrentDictionary`2<object, object> get_Properties();
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public string get_ControllerName();
    public void set_ControllerName(string value);
    public Type get_ControllerType();
    public void set_ControllerType(Type value);
    public virtual IHttpController CreateController(HttpRequestMessage request);
    public virtual Collection`1<IFilter> GetFilters();
    public virtual Collection`1<T> GetCustomAttributes();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    internal void Initialize(HttpConfiguration configuration);
    private void Initialize();
    private static void InvokeAttributesOnControllerType(HttpControllerDescriptor controllerDescriptor, Type type);
}
[ExtensionAttribute]
internal static class System.Web.Http.Controllers.HttpControllerDescriptorExtensions : object {
    private static string AttributeRoutedPropertyKey;
    [ExtensionAttribute]
public static bool IsAttributeRouted(HttpControllerDescriptor controllerDescriptor);
    [ExtensionAttribute]
public static void SetIsAttributeRouted(HttpControllerDescriptor controllerDescriptor, bool value);
}
internal class System.Web.Http.Controllers.HttpControllerSettings : object {
    private MediaTypeFormatterCollection _formatters;
    private ParameterBindingRulesCollection _parameterBindingRules;
    private ServicesContainer _services;
    private HttpConfiguration _configuration;
    public MediaTypeFormatterCollection Formatters { get; }
    public ParameterBindingRulesCollection ParameterBindingRules { get; }
    public ServicesContainer Services { get; }
    internal bool IsFormatterCollectionInitialized { get; }
    internal bool IsParameterBindingRuleCollectionInitialized { get; }
    internal bool IsServiceCollectionInitialized { get; }
    public HttpControllerSettings(HttpConfiguration configuration);
    public MediaTypeFormatterCollection get_Formatters();
    public ParameterBindingRulesCollection get_ParameterBindingRules();
    public ServicesContainer get_Services();
    internal bool get_IsFormatterCollectionInitialized();
    internal bool get_IsParameterBindingRuleCollectionInitialized();
    internal bool get_IsServiceCollectionInitialized();
}
internal abstract class System.Web.Http.Controllers.HttpParameterBinding : object {
    private HttpParameterDescriptor _descriptor;
    public bool WillReadBody { get; }
    public bool IsValid { get; }
    public string ErrorMessage { get; }
    public HttpParameterDescriptor Descriptor { get; }
    protected HttpParameterBinding(HttpParameterDescriptor descriptor);
    public virtual bool get_WillReadBody();
    public bool get_IsValid();
    public virtual string get_ErrorMessage();
    public HttpParameterDescriptor get_Descriptor();
    public abstract virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    protected object GetValue(HttpActionContext actionContext);
    protected void SetValue(HttpActionContext actionContext, object value);
}
internal abstract class System.Web.Http.Controllers.HttpParameterDescriptor : object {
    private ConcurrentDictionary`2<object, object> _properties;
    private ParameterBindingAttribute _parameterBindingAttribute;
    private bool _searchedModelBinderAttribute;
    private HttpConfiguration _configuration;
    private HttpActionDescriptor _actionDescriptor;
    public HttpConfiguration Configuration { get; public set; }
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public object DefaultValue { get; }
    public string ParameterName { get; }
    public Type ParameterType { get; }
    public string Prefix { get; }
    public bool IsOptional { get; }
    public ParameterBindingAttribute ParameterBinderAttribute { get; public set; }
    protected HttpParameterDescriptor(HttpActionDescriptor actionDescriptor);
    public HttpConfiguration get_Configuration();
    public void set_Configuration(HttpConfiguration value);
    public HttpActionDescriptor get_ActionDescriptor();
    public void set_ActionDescriptor(HttpActionDescriptor value);
    public ConcurrentDictionary`2<object, object> get_Properties();
    public virtual object get_DefaultValue();
    public abstract virtual string get_ParameterName();
    public abstract virtual Type get_ParameterType();
    public virtual string get_Prefix();
    public virtual bool get_IsOptional();
    public virtual ParameterBindingAttribute get_ParameterBinderAttribute();
    public virtual void set_ParameterBinderAttribute(ParameterBindingAttribute value);
    public virtual Collection`1<T> GetCustomAttributes();
    private ParameterBindingAttribute FindParameterBindingAttribute();
    private static ParameterBindingAttribute ChooseAttribute(IList`1<ParameterBindingAttribute> list);
}
internal class System.Web.Http.Controllers.HttpRequestContext : object {
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeErrorDetail>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private IPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRouteData <RouteData>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlHelper <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualPathRoot>k__BackingField;
    public X509Certificate2 ClientCertificate { get; public set; }
    public HttpConfiguration Configuration { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IPrincipal Principal { get; public set; }
    public IHttpRouteData RouteData { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    [CompilerGeneratedAttribute]
public virtual X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public virtual void set_ClientCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public virtual HttpConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public virtual void set_Configuration(HttpConfiguration value);
    [CompilerGeneratedAttribute]
public virtual bool get_IncludeErrorDetail();
    [CompilerGeneratedAttribute]
public virtual void set_IncludeErrorDetail(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsLocal();
    [CompilerGeneratedAttribute]
public virtual void set_IsLocal(bool value);
    [CompilerGeneratedAttribute]
public virtual IPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public virtual void set_Principal(IPrincipal value);
    [CompilerGeneratedAttribute]
public virtual IHttpRouteData get_RouteData();
    [CompilerGeneratedAttribute]
public virtual void set_RouteData(IHttpRouteData value);
    [CompilerGeneratedAttribute]
public virtual UrlHelper get_Url();
    [CompilerGeneratedAttribute]
public virtual void set_Url(UrlHelper value);
    [CompilerGeneratedAttribute]
public virtual string get_VirtualPathRoot();
    [CompilerGeneratedAttribute]
public virtual void set_VirtualPathRoot(string value);
}
internal interface System.Web.Http.Controllers.IActionHttpMethodProvider {
    public Collection`1<HttpMethod> HttpMethods { get; }
    public abstract virtual Collection`1<HttpMethod> get_HttpMethods();
}
internal interface System.Web.Http.Controllers.IActionResultConverter {
    public abstract virtual HttpResponseMessage Convert(HttpControllerContext controllerContext, object actionResult);
}
internal interface System.Web.Http.Controllers.IActionValueBinder {
    public abstract virtual HttpActionBinding GetBinding(HttpActionDescriptor actionDescriptor);
}
internal interface System.Web.Http.Controllers.IControllerConfiguration {
    public abstract virtual void Initialize(HttpControllerSettings controllerSettings, HttpControllerDescriptor controllerDescriptor);
}
internal interface System.Web.Http.Controllers.IHttpActionInvoker {
    public abstract virtual Task`1<HttpResponseMessage> InvokeActionAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
}
internal interface System.Web.Http.Controllers.IHttpActionSelector {
    public abstract virtual HttpActionDescriptor SelectAction(HttpControllerContext controllerContext);
    public abstract virtual ILookup`2<string, HttpActionDescriptor> GetActionMapping(HttpControllerDescriptor controllerDescriptor);
}
internal interface System.Web.Http.Controllers.IHttpController {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Web.Http.Controllers.ParameterBindingExtensions : object {
    [ExtensionAttribute]
public static HttpParameterBinding BindAsError(HttpParameterDescriptor parameter, string message);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithAttribute(HttpParameterDescriptor parameter, ParameterBindingAttribute attribute);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter, IModelBinder binder);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter, ValueProviderFactory[] valueProviderFactories);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter, IEnumerable`1<ValueProviderFactory> valueProviderFactories);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithModelBinding(HttpParameterDescriptor parameter, IModelBinder binder, IEnumerable`1<ValueProviderFactory> valueProviderFactories);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithFormatter(HttpParameterDescriptor parameter);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithFormatter(HttpParameterDescriptor parameter, MediaTypeFormatter[] formatters);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithFormatter(HttpParameterDescriptor parameter, IEnumerable`1<MediaTypeFormatter> formatters);
    [ExtensionAttribute]
public static HttpParameterBinding BindWithFormatter(HttpParameterDescriptor parameter, IEnumerable`1<MediaTypeFormatter> formatters, IBodyModelValidator bodyModelValidator);
}
internal class System.Web.Http.Controllers.ReflectedHttpActionDescriptor : HttpActionDescriptor {
    private static Object[] _empty;
    private Lazy`1<Collection`1<HttpParameterDescriptor>> _parameters;
    private ParameterInfo[] _parameterInfos;
    private Lazy`1<ActionExecutor> _actionExecutor;
    private MethodInfo _methodInfo;
    private Type _returnType;
    private string _actionName;
    private Collection`1<HttpMethod> _supportedHttpMethods;
    private Object[] _attributeCache;
    private Object[] _declaredOnlyAttributeCache;
    private static HttpMethod[] _supportedHttpMethodsByConvention;
    public string ActionName { get; }
    public Collection`1<HttpMethod> SupportedHttpMethods { get; }
    public MethodInfo MethodInfo { get; public set; }
    private ParameterInfo[] ParameterInfos { get; }
    public Type ReturnType { get; }
    public ReflectedHttpActionDescriptor(HttpControllerDescriptor controllerDescriptor, MethodInfo methodInfo);
    private static ReflectedHttpActionDescriptor();
    public virtual string get_ActionName();
    public virtual Collection`1<HttpMethod> get_SupportedHttpMethods();
    public MethodInfo get_MethodInfo();
    public void set_MethodInfo(MethodInfo value);
    private ParameterInfo[] get_ParameterInfos();
    public virtual Type get_ReturnType();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Task`1<object> ExecuteAsync(HttpControllerContext controllerContext, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public virtual Collection`1<IFilter> GetFilters();
    public virtual Collection`1<HttpParameterDescriptor> GetParameters();
    private void InitializeProperties(MethodInfo methodInfo);
    internal static Type GetReturnType(MethodInfo methodInfo);
    private Collection`1<HttpParameterDescriptor> InitializeParameterDescriptors();
    private Object[] PrepareParameters(IDictionary`2<string, object> parameters, HttpControllerContext controllerContext);
    private object ExtractParameterFromDictionary(ParameterInfo parameterInfo, IDictionary`2<string, object> parameters, HttpControllerContext controllerContext);
    private static string GetActionName(MethodInfo methodInfo, Object[] actionAttributes);
    private static Collection`1<HttpMethod> GetSupportedHttpMethods(MethodInfo methodInfo, Object[] actionAttributes);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static ActionExecutor InitializeActionExecutor(MethodInfo methodInfo);
    [CompilerGeneratedAttribute]
private Collection`1<HttpParameterDescriptor> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private Collection`1<HttpParameterDescriptor> <.ctor>b__2();
    [CompilerGeneratedAttribute]
private ActionExecutor <InitializeProperties>b__4();
    [CompilerGeneratedAttribute]
private ReflectedHttpParameterDescriptor <InitializeParameterDescriptors>b__5(ParameterInfo item);
}
internal class System.Web.Http.Controllers.ReflectedHttpParameterDescriptor : HttpParameterDescriptor {
    private ParameterInfo _parameterInfo;
    public object DefaultValue { get; }
    public ParameterInfo ParameterInfo { get; public set; }
    public bool IsOptional { get; }
    public string ParameterName { get; }
    public Type ParameterType { get; }
    public ReflectedHttpParameterDescriptor(HttpActionDescriptor actionDescriptor, ParameterInfo parameterInfo);
    public virtual object get_DefaultValue();
    public ParameterInfo get_ParameterInfo();
    public void set_ParameterInfo(ParameterInfo value);
    public virtual bool get_IsOptional();
    public virtual string get_ParameterName();
    public virtual Type get_ParameterType();
    public virtual Collection`1<TAttribute> GetCustomAttributes();
}
internal class System.Web.Http.Controllers.RequestBackedHttpRequestContext : HttpRequestContext {
    private HttpRequestMessage _request;
    private X509Certificate2 _certificate;
    private bool _certificateSet;
    private HttpConfiguration _configuration;
    private bool _configurationSet;
    private bool _includeErrorDetail;
    private bool _includeErrorDetailSet;
    private bool _isLocal;
    private bool _isLocalSet;
    private IHttpRouteData _routeData;
    private bool _routeDataSet;
    private UrlHelper _url;
    private bool _urlSet;
    private string _virtualPathRoot;
    private bool _virtualPathRootSet;
    public HttpRequestMessage Request { get; public set; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public HttpConfiguration Configuration { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IHttpRouteData RouteData { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    public RequestBackedHttpRequestContext(HttpRequestMessage request);
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual HttpConfiguration get_Configuration();
    public virtual void set_Configuration(HttpConfiguration value);
    public virtual bool get_IncludeErrorDetail();
    public virtual void set_IncludeErrorDetail(bool value);
    public virtual bool get_IsLocal();
    public virtual void set_IsLocal(bool value);
    public virtual IHttpRouteData get_RouteData();
    public virtual void set_RouteData(IHttpRouteData value);
    public virtual UrlHelper get_Url();
    public virtual void set_Url(UrlHelper value);
    public virtual string get_VirtualPathRoot();
    public virtual void set_VirtualPathRoot(string value);
}
internal class System.Web.Http.Controllers.ResponseMessageResultConverter : object {
    public sealed virtual HttpResponseMessage Convert(HttpControllerContext controllerContext, object actionResult);
}
internal abstract class System.Web.Http.Controllers.ServicesContainer : object {
    internal Lazy`1<IExceptionLogger> ExceptionServicesLogger;
    internal Lazy`1<IExceptionHandler> ExceptionServicesHandler;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Predicate`1<object> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Predicate`1<object> CS$<>9__CachedAnonymousMethodDelegate14;
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerable`1<object> GetServices(Type serviceType);
    protected abstract virtual List`1<object> GetServiceInstances(Type serviceType);
    protected virtual void ResetCache(Type serviceType);
    public abstract virtual bool IsSingleService(Type serviceType);
    public void Add(Type serviceType, object service);
    public void AddRange(Type serviceType, IEnumerable`1<object> services);
    public virtual void Clear(Type serviceType);
    protected abstract virtual void ClearSingle(Type serviceType);
    protected virtual void ClearMultiple(Type serviceType);
    public int FindIndex(Type serviceType, Predicate`1<object> match);
    public void Insert(Type serviceType, int index, object service);
    public void InsertRange(Type serviceType, int index, IEnumerable`1<object> services);
    public bool Remove(Type serviceType, object service);
    public int RemoveAll(Type serviceType, Predicate`1<object> match);
    public void RemoveAt(Type serviceType, int index);
    public void Replace(Type serviceType, object service);
    protected abstract virtual void ReplaceSingle(Type serviceType, object service);
    protected virtual void ReplaceMultiple(Type serviceType, object service);
    public void ReplaceRange(Type serviceType, IEnumerable`1<object> services);
    public virtual void Dispose();
    private IExceptionLogger CreateExceptionServicesLogger();
    private IExceptionHandler CreateExceptionServicesHandler();
    [CompilerGeneratedAttribute]
private static bool <InsertRange>b__c(object svc);
    [CompilerGeneratedAttribute]
private static bool <ReplaceMultiple>b__11(object _);
    [CompilerGeneratedAttribute]
private static bool <ReplaceRange>b__13(object _);
}
internal class System.Web.Http.Controllers.ValueResultConverter`1 : object {
    public sealed virtual HttpResponseMessage Convert(HttpControllerContext controllerContext, object actionResult);
}
internal class System.Web.Http.Controllers.VoidResultConverter : object {
    public sealed virtual HttpResponseMessage Convert(HttpControllerContext controllerContext, object actionResult);
}
internal class System.Web.Http.Dependencies.EmptyResolver : object {
    private static IDependencyResolver _instance;
    public static IDependencyResolver Instance { get; }
    private static EmptyResolver();
    public static IDependencyResolver get_Instance();
    public sealed virtual IDependencyScope BeginScope();
    public sealed virtual void Dispose();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
}
internal interface System.Web.Http.Dependencies.IDependencyResolver {
    public abstract virtual IDependencyScope BeginScope();
}
internal interface System.Web.Http.Dependencies.IDependencyScope {
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerable`1<object> GetServices(Type serviceType);
}
internal class System.Web.Http.Description.ApiDescription : object {
    [CompilerGeneratedAttribute]
private HttpMethod <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpRoute <Route>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<MediaTypeFormatter> <SupportedResponseFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<MediaTypeFormatter> <SupportedRequestBodyFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<ApiParameterDescription> <ParameterDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseDescription <ResponseDescription>k__BackingField;
    public HttpMethod HttpMethod { get; public set; }
    public string RelativePath { get; public set; }
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public IHttpRoute Route { get; public set; }
    public string Documentation { get; public set; }
    public Collection`1<MediaTypeFormatter> SupportedResponseFormatters { get; internal set; }
    public Collection`1<MediaTypeFormatter> SupportedRequestBodyFormatters { get; internal set; }
    public Collection`1<ApiParameterDescription> ParameterDescriptions { get; internal set; }
    public ResponseDescription ResponseDescription { get; internal set; }
    public string ID { get; }
    [CompilerGeneratedAttribute]
public HttpMethod get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(HttpMethod value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public HttpActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public void set_ActionDescriptor(HttpActionDescriptor value);
    [CompilerGeneratedAttribute]
public IHttpRoute get_Route();
    [CompilerGeneratedAttribute]
public void set_Route(IHttpRoute value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public Collection`1<MediaTypeFormatter> get_SupportedResponseFormatters();
    [CompilerGeneratedAttribute]
internal void set_SupportedResponseFormatters(Collection`1<MediaTypeFormatter> value);
    [CompilerGeneratedAttribute]
public Collection`1<MediaTypeFormatter> get_SupportedRequestBodyFormatters();
    [CompilerGeneratedAttribute]
internal void set_SupportedRequestBodyFormatters(Collection`1<MediaTypeFormatter> value);
    [CompilerGeneratedAttribute]
public Collection`1<ApiParameterDescription> get_ParameterDescriptions();
    [CompilerGeneratedAttribute]
internal void set_ParameterDescriptions(Collection`1<ApiParameterDescription> value);
    [CompilerGeneratedAttribute]
public ResponseDescription get_ResponseDescription();
    [CompilerGeneratedAttribute]
internal void set_ResponseDescription(ResponseDescription value);
    public string get_ID();
}
internal class System.Web.Http.Description.ApiExplorer : object {
    private Lazy`1<Collection`1<ApiDescription>> _apiDescriptions;
    private HttpConfiguration _config;
    private static Regex _actionVariableRegex;
    private static Regex _controllerVariableRegex;
    [CompilerGeneratedAttribute]
private IDocumentationProvider <DocumentationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ApiParameterDescription, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<ResponseTypeAttribute, Type> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<ApiParameterDescription, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    public Collection`1<ApiDescription> ApiDescriptions { get; }
    public IDocumentationProvider DocumentationProvider { get; public set; }
    public ApiExplorer(HttpConfiguration configuration);
    private static ApiExplorer();
    public sealed virtual Collection`1<ApiDescription> get_ApiDescriptions();
    [CompilerGeneratedAttribute]
public IDocumentationProvider get_DocumentationProvider();
    [CompilerGeneratedAttribute]
public void set_DocumentationProvider(IDocumentationProvider value);
    public virtual bool ShouldExploreController(string controllerVariableValue, HttpControllerDescriptor controllerDescriptor, IHttpRoute route);
    public virtual bool ShouldExploreAction(string actionVariableValue, HttpActionDescriptor actionDescriptor, IHttpRoute route);
    public virtual Collection`1<HttpMethod> GetHttpMethodsSupportedByAction(IHttpRoute route, HttpActionDescriptor actionDescriptor);
    private IEnumerable`1<IHttpRoute> FlattenRoutes(IEnumerable`1<IHttpRoute> routes);
    private static HttpControllerDescriptor GetDirectRouteController(CandidateAction[] directRouteCandidates);
    private Collection`1<ApiDescription> InitializeApiDescriptions();
    private Collection`1<ApiDescription> ExploreDirectRoute(HttpControllerDescriptor controllerDescriptor, CandidateAction[] candidates, IHttpRoute route);
    private Collection`1<ApiDescription> ExploreRouteControllers(IDictionary`2<string, HttpControllerDescriptor> controllerMappings, IHttpRoute route);
    private void ExploreRouteActions(IHttpRoute route, string localPath, HttpControllerDescriptor controllerDescriptor, Collection`1<ApiDescription> apiDescriptions);
    private void PopulateActionDescriptions(IEnumerable`1<HttpActionDescriptor> actionDescriptors, string actionVariableValue, IHttpRoute route, string localPath, Collection`1<ApiDescription> apiDescriptions);
    private void PopulateActionDescriptions(HttpActionDescriptor actionDescriptor, IHttpRoute route, string localPath, Collection`1<ApiDescription> apiDescriptions);
    private ResponseDescription CreateResponseDescription(HttpActionDescriptor actionDescriptor);
    private static IEnumerable`1<MediaTypeFormatter> GetInnerFormatters(IEnumerable`1<MediaTypeFormatter> mediaTypeFormatters);
    private static bool ShouldEmitPrefixes(ICollection`1<ApiParameterDescription> parameterDescriptions);
    internal static bool TryExpandUriParameters(IHttpRoute route, HttpParsedRoute parsedRoute, ICollection`1<ApiParameterDescription> parameterDescriptions, String& expandedRouteTemplate);
    private static Type GetCollectionElementType(Type collectionType);
    private static void AddPlaceholderForProperties(Dictionary`2<string, object> parameterValuesForRoute, IEnumerable`1<PropertyInfo> properties, string prefix);
    private static bool IsBindableCollection(Type type);
    private static bool IsBindableDictionry(Type type);
    private static bool IsBindableKeyValuePair(Type type);
    private static void AddPlaceholder(Dictionary`2<string, object> parameterValuesForRoute, string queryParameterName);
    private IList`1<ApiParameterDescription> CreateParameterDescriptions(HttpActionDescriptor actionDescriptor, HttpParsedRoute parsedRoute, IDictionary`2<string, object> routeDefaults);
    private static void AddUndeclaredRouteParameters(HttpParsedRoute parsedRoute, IDictionary`2<string, object> routeDefaults, IList`1<ApiParameterDescription> parameterDescriptions);
    private ApiParameterDescription CreateParameterDescriptionFromDescriptor(HttpParameterDescriptor parameter);
    private ApiParameterDescription CreateParameterDescriptionFromBinding(HttpParameterBinding parameterBinding);
    private string GetApiDocumentation(HttpActionDescriptor actionDescriptor);
    private string GetApiParameterDocumentation(HttpParameterDescriptor parameterDescriptor);
    private string GetApiResponseDocumentation(HttpActionDescriptor actionDescriptor);
    private static Collection`1<ApiDescription> RemoveInvalidApiDescriptions(Collection`1<ApiDescription> apiDescriptions);
    private static bool MatchRegexConstraint(IHttpRoute route, string parameterName, string parameterValue);
    private static HttpActionBinding GetActionBinding(HttpActionDescriptor actionDescriptor);
    [CompilerGeneratedAttribute]
private static bool <GetHttpMethodsSupportedByAction>b__0(object c);
    [CompilerGeneratedAttribute]
private static bool <PopulateActionDescriptions>b__d(ApiParameterDescription description);
    [CompilerGeneratedAttribute]
private static Type <CreateResponseDescription>b__14(ResponseTypeAttribute attribute);
    [CompilerGeneratedAttribute]
private static bool <ShouldEmitPrefixes>b__1c(ApiParameterDescription parameter);
}
[AttributeUsageAttribute("452")]
internal class System.Web.Http.Description.ApiExplorerSettingsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IgnoreApi>k__BackingField;
    public bool IgnoreApi { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreApi();
    [CompilerGeneratedAttribute]
public void set_IgnoreApi(bool value);
}
internal class System.Web.Http.Description.ApiParameterDescription : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiParameterSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpParameterDescriptor <ParameterDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public string Name { get; public set; }
    public string Documentation { get; public set; }
    public ApiParameterSource Source { get; public set; }
    public HttpParameterDescriptor ParameterDescriptor { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(string value);
    [CompilerGeneratedAttribute]
public ApiParameterSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ApiParameterSource value);
    [CompilerGeneratedAttribute]
public HttpParameterDescriptor get_ParameterDescriptor();
    [CompilerGeneratedAttribute]
public void set_ParameterDescriptor(HttpParameterDescriptor value);
    internal IEnumerable`1<PropertyInfo> GetBindableProperties();
    internal bool CanConvertPropertiesFromString();
    internal static IEnumerable`1<PropertyInfo> GetBindableProperties(Type type);
    [CompilerGeneratedAttribute]
private static bool <CanConvertPropertiesFromString>b__0(PropertyInfo p);
    [CompilerGeneratedAttribute]
private static bool <GetBindableProperties>b__2(PropertyInfo p);
}
internal enum System.Web.Http.Description.ApiParameterSource : Enum {
    public int value__;
    public static ApiParameterSource FromUri;
    public static ApiParameterSource FromBody;
    public static ApiParameterSource Unknown;
}
internal interface System.Web.Http.Description.IApiExplorer {
    public Collection`1<ApiDescription> ApiDescriptions { get; }
    public abstract virtual Collection`1<ApiDescription> get_ApiDescriptions();
}
internal interface System.Web.Http.Description.IDocumentationProvider {
    public abstract virtual string GetDocumentation(HttpControllerDescriptor controllerDescriptor);
    public abstract virtual string GetDocumentation(HttpActionDescriptor actionDescriptor);
    public abstract virtual string GetDocumentation(HttpParameterDescriptor parameterDescriptor);
    public abstract virtual string GetResponseDocumentation(HttpActionDescriptor actionDescriptor);
}
internal class System.Web.Http.Description.ResponseDescription : object {
    [CompilerGeneratedAttribute]
private Type <DeclaredType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResponseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Documentation>k__BackingField;
    public Type DeclaredType { get; public set; }
    public Type ResponseType { get; public set; }
    public string Documentation { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_DeclaredType();
    [CompilerGeneratedAttribute]
public void set_DeclaredType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ResponseType();
    [CompilerGeneratedAttribute]
public void set_ResponseType(Type value);
    [CompilerGeneratedAttribute]
public string get_Documentation();
    [CompilerGeneratedAttribute]
public void set_Documentation(string value);
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.Description.ResponseTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ResponseType>k__BackingField;
    public Type ResponseType { get; private set; }
    public ResponseTypeAttribute(Type responseType);
    [CompilerGeneratedAttribute]
public Type get_ResponseType();
    [CompilerGeneratedAttribute]
private void set_ResponseType(Type value);
}
internal class System.Web.Http.Dispatcher.DefaultAssembliesResolver : object {
    public virtual ICollection`1<Assembly> GetAssemblies();
}
internal class System.Web.Http.Dispatcher.DefaultHttpControllerActivator : object {
    private Tuple`2<HttpControllerDescriptor, Func`1<IHttpController>> _fastCache;
    private object _cacheKey;
    public sealed virtual IHttpController Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType);
    private static IHttpController GetInstanceOrActivator(HttpRequestMessage request, Type controllerType, Func`1& activator);
}
internal class System.Web.Http.Dispatcher.DefaultHttpControllerSelector : object {
    private static string ControllerKey;
    public static string ControllerSuffix;
    private HttpConfiguration _configuration;
    private HttpControllerTypeCache _controllerTypeCache;
    private Lazy`1<ConcurrentDictionary`2<string, HttpControllerDescriptor>> _controllerInfoCache;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, HttpControllerDescriptor>, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, HttpControllerDescriptor>, HttpControllerDescriptor> CS$<>9__CachedAnonymousMethodDelegate3;
    public DefaultHttpControllerSelector(HttpConfiguration configuration);
    private static DefaultHttpControllerSelector();
    public virtual HttpControllerDescriptor SelectController(HttpRequestMessage request);
    public virtual IDictionary`2<string, HttpControllerDescriptor> GetControllerMapping();
    public virtual string GetControllerName(HttpRequestMessage request);
    private static HttpControllerDescriptor GetDirectRouteController(IHttpRouteData routeData);
    private static Exception CreateDirectRouteAmbiguousControllerException(CandidateAction[] candidates);
    private static Exception CreateAmbiguousControllerException(IHttpRoute route, string controllerName, ICollection`1<Type> matchingTypes);
    private ConcurrentDictionary`2<string, HttpControllerDescriptor> InitializeControllerInfoCache();
    [CompilerGeneratedAttribute]
private static string <GetControllerMapping>b__0(KeyValuePair`2<string, HttpControllerDescriptor> c);
    [CompilerGeneratedAttribute]
private static HttpControllerDescriptor <GetControllerMapping>b__1(KeyValuePair`2<string, HttpControllerDescriptor> c);
}
internal class System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver : object {
    private Predicate`1<Type> _isControllerTypePredicate;
    private Func`2<Assembly, Type[]> _getTypesFunc;
    protected internal Predicate`1<Type> IsControllerTypePredicate { get; }
    public DefaultHttpControllerTypeResolver(Predicate`1<Type> predicate);
    protected internal virtual Predicate`1<Type> get_IsControllerTypePredicate();
    internal static bool IsControllerType(Type t);
    public virtual ICollection`1<Type> GetControllerTypes(IAssembliesResolver assembliesResolver);
    internal static Type[] GetTypes(Assembly assembly);
    internal static bool HasValidControllerName(Type controllerType);
    internal void SetGetTypesFunc(Func`2<Assembly, Type[]> getTypesFunc);
    private static bool TypeIsVisible(Type type);
    [CompilerGeneratedAttribute]
private bool <GetControllerTypes>b__0(Type x);
}
internal class System.Web.Http.Dispatcher.HttpControllerDispatcher : HttpMessageHandler {
    private HttpConfiguration _configuration;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    private IHttpControllerSelector _controllerSelector;
    public HttpConfiguration Configuration { get; }
    internal IExceptionLogger ExceptionLogger { get; internal set; }
    internal IExceptionHandler ExceptionHandler { get; internal set; }
    private IHttpControllerSelector ControllerSelector { get; }
    public HttpControllerDispatcher(HttpConfiguration configuration);
    public HttpConfiguration get_Configuration();
    internal IExceptionLogger get_ExceptionLogger();
    internal void set_ExceptionLogger(IExceptionLogger value);
    internal IExceptionHandler get_ExceptionHandler();
    internal void set_ExceptionHandler(IExceptionHandler value);
    private IHttpControllerSelector get_ControllerSelector();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Dispatcher.HttpControllerDispatcher/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static HttpControllerContext CreateControllerContext(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, IHttpController controller);
    private static HttpConfiguration EnsureNonNull(HttpConfiguration configuration);
}
internal class System.Web.Http.Dispatcher.HttpControllerTypeCache : object {
    private HttpConfiguration _configuration;
    private Lazy`1<Dictionary`2<string, ILookup`2<string, Type>>> _cache;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, Type>, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, Type>, ILookup`2<string, Type>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate7;
    internal Dictionary`2<string, ILookup`2<string, Type>> Cache { get; }
    public HttpControllerTypeCache(HttpConfiguration configuration);
    internal Dictionary`2<string, ILookup`2<string, Type>> get_Cache();
    public ICollection`1<Type> GetControllerTypes(string controllerName);
    private Dictionary`2<string, ILookup`2<string, Type>> InitializeCache();
    [CompilerGeneratedAttribute]
private static string <InitializeCache>b__0(Type t);
    [CompilerGeneratedAttribute]
private static string <InitializeCache>b__1(IGrouping`2<string, Type> g);
    [CompilerGeneratedAttribute]
private static ILookup`2<string, Type> <InitializeCache>b__2(IGrouping`2<string, Type> g);
    [CompilerGeneratedAttribute]
private static string <InitializeCache>b__3(Type t);
}
internal class System.Web.Http.Dispatcher.HttpRoutingDispatcher : HttpMessageHandler {
    private HttpConfiguration _configuration;
    private HttpMessageInvoker _defaultInvoker;
    public HttpRoutingDispatcher(HttpConfiguration configuration);
    public HttpRoutingDispatcher(HttpConfiguration configuration, HttpMessageHandler defaultHandler);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal interface System.Web.Http.Dispatcher.IAssembliesResolver {
    public abstract virtual ICollection`1<Assembly> GetAssemblies();
}
internal interface System.Web.Http.Dispatcher.IHttpControllerActivator {
    public abstract virtual IHttpController Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType);
}
internal interface System.Web.Http.Dispatcher.IHttpControllerSelector {
    public abstract virtual HttpControllerDescriptor SelectController(HttpRequestMessage request);
    public abstract virtual IDictionary`2<string, HttpControllerDescriptor> GetControllerMapping();
}
internal interface System.Web.Http.Dispatcher.IHttpControllerTypeResolver {
    public abstract virtual ICollection`1<Type> GetControllerTypes(IAssembliesResolver assembliesResolver);
}
internal class System.Web.Http.EfficientTypePropertyKey`2 : Tuple`2<T1, T2> {
    private int _hashCode;
    public EfficientTypePropertyKey`2(T1 item1, T2 item2);
    public virtual int GetHashCode();
}
internal class System.Web.Http.EmptyReadOnlyDictionary`2 : object {
    private static ReadOnlyDictionary`2<TKey, TValue> _value;
    public static IDictionary`2<TKey, TValue> Value { get; }
    private static EmptyReadOnlyDictionary`2();
    public static IDictionary`2<TKey, TValue> get_Value();
}
internal static class System.Web.Http.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
internal class System.Web.Http.ExceptionHandling.CompositeExceptionLogger : object {
    private IExceptionLogger[] _loggers;
    public IEnumerable`1<IExceptionLogger> Loggers { get; }
    public CompositeExceptionLogger(IExceptionLogger[] loggers);
    public CompositeExceptionLogger(IEnumerable`1<IExceptionLogger> loggers);
    public IEnumerable`1<IExceptionLogger> get_Loggers();
    public sealed virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
}
internal class System.Web.Http.ExceptionHandling.DefaultExceptionHandler : object {
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    private static void Handle(ExceptionHandlerContext context);
}
internal class System.Web.Http.ExceptionHandling.EmptyExceptionHandler : object {
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
}
internal static class System.Web.Http.ExceptionHandling.ExceptionCatchBlocks : object {
    private static ExceptionContextCatchBlock _httpBatchHandler;
    private static ExceptionContextCatchBlock _httpControllerDispatcher;
    private static ExceptionContextCatchBlock _httpServer;
    private static ExceptionContextCatchBlock _exceptionFilter;
    public static ExceptionContextCatchBlock HttpBatchHandler { get; }
    public static ExceptionContextCatchBlock HttpControllerDispatcher { get; }
    public static ExceptionContextCatchBlock HttpServer { get; }
    public static ExceptionContextCatchBlock IExceptionFilter { get; }
    private static ExceptionCatchBlocks();
    public static ExceptionContextCatchBlock get_HttpBatchHandler();
    public static ExceptionContextCatchBlock get_HttpControllerDispatcher();
    public static ExceptionContextCatchBlock get_HttpServer();
    public static ExceptionContextCatchBlock get_IExceptionFilter();
}
internal class System.Web.Http.ExceptionHandling.ExceptionContext : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionContextCatchBlock <CatchBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestContext <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpControllerContext <ControllerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public Exception Exception { get; private set; }
    public ExceptionContextCatchBlock CatchBlock { get; private set; }
    public HttpRequestMessage Request { get; public set; }
    public HttpRequestContext RequestContext { get; public set; }
    public HttpControllerContext ControllerContext { get; public set; }
    public HttpActionContext ActionContext { get; public set; }
    public HttpResponseMessage Response { get; public set; }
    public ExceptionContext(Exception exception, ExceptionContextCatchBlock catchBlock);
    public ExceptionContext(Exception exception, ExceptionContextCatchBlock catchBlock, HttpActionContext actionContext);
    public ExceptionContext(Exception exception, ExceptionContextCatchBlock catchBlock, HttpRequestMessage request);
    public ExceptionContext(Exception exception, ExceptionContextCatchBlock catchBlock, HttpRequestMessage request, HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public ExceptionContextCatchBlock get_CatchBlock();
    [CompilerGeneratedAttribute]
private void set_CatchBlock(ExceptionContextCatchBlock value);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public HttpRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
public void set_RequestContext(HttpRequestContext value);
    [CompilerGeneratedAttribute]
public HttpControllerContext get_ControllerContext();
    [CompilerGeneratedAttribute]
public void set_ControllerContext(HttpControllerContext value);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
public void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(HttpResponseMessage value);
}
[DebuggerDisplayAttribute("Name: {Name}, IsTopLevel: {IsTopLevel}")]
internal class System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock : object {
    private string _name;
    private bool _isTopLevel;
    private bool _callsHandler;
    public string Name { get; }
    public bool IsTopLevel { get; }
    public bool CallsHandler { get; }
    public ExceptionContextCatchBlock(string name, bool isTopLevel, bool callsHandler);
    public string get_Name();
    public bool get_IsTopLevel();
    public bool get_CallsHandler();
    public virtual string ToString();
}
internal abstract class System.Web.Http.ExceptionHandling.ExceptionHandler : object {
    private sealed virtual override Task System.Web.Http.ExceptionHandling.IExceptionHandler.HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    public virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    public virtual void Handle(ExceptionHandlerContext context);
    public virtual bool ShouldHandle(ExceptionHandlerContext context);
}
internal class System.Web.Http.ExceptionHandling.ExceptionHandlerContext : object {
    private ExceptionContext _exceptionContext;
    [CompilerGeneratedAttribute]
private IHttpActionResult <Result>k__BackingField;
    public ExceptionContext ExceptionContext { get; }
    public IHttpActionResult Result { get; public set; }
    public Exception Exception { get; }
    public ExceptionContextCatchBlock CatchBlock { get; }
    public HttpRequestMessage Request { get; }
    public HttpRequestContext RequestContext { get; }
    public ExceptionHandlerContext(ExceptionContext exceptionContext);
    public ExceptionContext get_ExceptionContext();
    [CompilerGeneratedAttribute]
public IHttpActionResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(IHttpActionResult value);
    public Exception get_Exception();
    public ExceptionContextCatchBlock get_CatchBlock();
    public HttpRequestMessage get_Request();
    public HttpRequestContext get_RequestContext();
}
[ExtensionAttribute]
internal static class System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions : object {
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> HandleAsync(IExceptionHandler handler, ExceptionContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions/<HandleAsyncCore>d__0")]
[DebuggerStepThroughAttribute]
private static Task`1<HttpResponseMessage> HandleAsyncCore(IExceptionHandler handler, ExceptionHandlerContext context, CancellationToken cancellationToken);
}
internal abstract class System.Web.Http.ExceptionHandling.ExceptionLogger : object {
    internal static string LoggedByKey;
    private sealed virtual override Task System.Web.Http.ExceptionHandling.IExceptionLogger.LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
    public virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
    public virtual void Log(ExceptionLoggerContext context);
    public virtual bool ShouldLog(ExceptionLoggerContext context);
}
internal class System.Web.Http.ExceptionHandling.ExceptionLoggerContext : object {
    private ExceptionContext _exceptionContext;
    public ExceptionContext ExceptionContext { get; }
    public Exception Exception { get; }
    public ExceptionContextCatchBlock CatchBlock { get; }
    public HttpRequestMessage Request { get; }
    public HttpRequestContext RequestContext { get; }
    public bool CallsHandler { get; }
    public ExceptionLoggerContext(ExceptionContext exceptionContext);
    public ExceptionContext get_ExceptionContext();
    public Exception get_Exception();
    public ExceptionContextCatchBlock get_CatchBlock();
    public HttpRequestMessage get_Request();
    public HttpRequestContext get_RequestContext();
    public bool get_CallsHandler();
}
[ExtensionAttribute]
internal static class System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions : object {
    [ExtensionAttribute]
public static Task LogAsync(IExceptionLogger logger, ExceptionContext context, CancellationToken cancellationToken);
}
internal static class System.Web.Http.ExceptionHandling.ExceptionServices : object {
    public static IExceptionLogger GetLogger(HttpConfiguration configuration);
    public static IExceptionLogger GetLogger(ServicesContainer services);
    internal static IExceptionLogger CreateLogger(ServicesContainer services);
    public static IExceptionHandler GetHandler(HttpConfiguration configuration);
    public static IExceptionHandler GetHandler(ServicesContainer services);
    internal static IExceptionHandler CreateHandler(ServicesContainer services);
}
internal interface System.Web.Http.ExceptionHandling.IExceptionHandler {
    public abstract virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
}
internal interface System.Web.Http.ExceptionHandling.IExceptionLogger {
    public abstract virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
}
internal class System.Web.Http.ExceptionHandling.LastChanceExceptionHandler : object {
    private IExceptionHandler _innerHandler;
    public IExceptionHandler InnerHandler { get; }
    public LastChanceExceptionHandler(IExceptionHandler innerHandler);
    public IExceptionHandler get_InnerHandler();
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    private static IHttpActionResult CreateDefaultLastChanceResult(ExceptionContext context);
}
internal class System.Web.Http.Filters.ActionDescriptorFilterProvider : object {
    [CompilerGeneratedAttribute]
private static Func`2<IFilter, FilterInfo> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IFilter, FilterInfo> CS$<>9__CachedAnonymousMethodDelegate3;
    public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
    [CompilerGeneratedAttribute]
private static FilterInfo <GetFilters>b__0(IFilter instance);
    [CompilerGeneratedAttribute]
private static FilterInfo <GetFilters>b__1(IFilter instance);
}
[AttributeUsageAttribute("68")]
internal abstract class System.Web.Http.Filters.ActionFilterAttribute : FilterAttribute {
    public virtual void OnActionExecuting(HttpActionContext actionContext);
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
    public virtual Task OnActionExecutingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    public virtual Task OnActionExecutedAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Filters.ActionFilterAttribute/<ExecuteActionFilterAsyncCore>d__0")]
private Task`1<HttpResponseMessage> ExecuteActionFilterAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [AsyncStateMachineAttribute("System.Web.Http.Filters.ActionFilterAttribute/<CallOnActionExecutedAsync>d__5")]
[DebuggerStepThroughAttribute]
private Task`1<HttpResponseMessage> CallOnActionExecutedAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
[AttributeUsageAttribute("68")]
internal abstract class System.Web.Http.Filters.AuthorizationFilterAttribute : FilterAttribute {
    public virtual void OnAuthorization(HttpActionContext actionContext);
    public virtual Task OnAuthorizationAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Filters.IAuthorizationFilter.ExecuteAuthorizationFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [AsyncStateMachineAttribute("System.Web.Http.Filters.AuthorizationFilterAttribute/<ExecuteAuthorizationFilterAsyncCore>d__2")]
[DebuggerStepThroughAttribute]
private Task`1<HttpResponseMessage> ExecuteAuthorizationFilterAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
internal class System.Web.Http.Filters.ConfigurationFilterProvider : object {
    public sealed virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
}
[AttributeUsageAttribute("68")]
internal abstract class System.Web.Http.Filters.ExceptionFilterAttribute : FilterAttribute {
    public virtual void OnException(HttpActionExecutedContext actionExecutedContext);
    public virtual Task OnExceptionAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private sealed virtual override Task System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Filters.ExceptionFilterAttribute/<ExecuteExceptionFilterAsyncCore>d__0")]
[DebuggerStepThroughAttribute]
private Task ExecuteExceptionFilterAsyncCore(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("68")]
internal abstract class System.Web.Http.Filters.FilterAttribute : Attribute {
    private static ConcurrentDictionary`2<Type, bool> _attributeUsageCache;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool AllowMultiple { get; }
    private static FilterAttribute();
    public virtual bool get_AllowMultiple();
    private static bool AllowsMultiple(Type attributeType);
    [CompilerGeneratedAttribute]
private static bool <AllowsMultiple>b__0(Type type);
}
internal class System.Web.Http.Filters.FilterInfo : object {
    [CompilerGeneratedAttribute]
private IFilter <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterScope <Scope>k__BackingField;
    public IFilter Instance { get; private set; }
    public FilterScope Scope { get; private set; }
    public FilterInfo(IFilter instance, FilterScope scope);
    [CompilerGeneratedAttribute]
public IFilter get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(IFilter value);
    [CompilerGeneratedAttribute]
public FilterScope get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(FilterScope value);
}
internal class System.Web.Http.Filters.FilterInfoComparer : object {
    private static FilterInfoComparer _instance;
    public static FilterInfoComparer Instance { get; }
    private static FilterInfoComparer();
    public static FilterInfoComparer get_Instance();
    public sealed virtual int Compare(FilterInfo x, FilterInfo y);
}
internal enum System.Web.Http.Filters.FilterScope : Enum {
    public int value__;
    public static FilterScope Global;
    public static FilterScope Controller;
    public static FilterScope Action;
}
internal class System.Web.Http.Filters.HttpActionExecutedContext : object {
    private HttpActionContext _actionContext;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public HttpActionContext ActionContext { get; public set; }
    public Exception Exception { get; public set; }
    public HttpResponseMessage Response { get; public set; }
    public HttpRequestMessage Request { get; }
    public HttpActionExecutedContext(HttpActionContext actionContext, Exception exception);
    public HttpActionContext get_ActionContext();
    public void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public HttpResponseMessage get_Response();
    public void set_Response(HttpResponseMessage value);
    public HttpRequestMessage get_Request();
}
internal class System.Web.Http.Filters.HttpAuthenticationChallengeContext : object {
    private IHttpActionResult _result;
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    public HttpActionContext ActionContext { get; private set; }
    public IHttpActionResult Result { get; public set; }
    public HttpRequestMessage Request { get; }
    public HttpAuthenticationChallengeContext(HttpActionContext actionContext, IHttpActionResult result);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(HttpActionContext value);
    public IHttpActionResult get_Result();
    public void set_Result(IHttpActionResult value);
    public HttpRequestMessage get_Request();
}
internal class System.Web.Http.Filters.HttpAuthenticationContext : object {
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpActionResult <ErrorResult>k__BackingField;
    public HttpActionContext ActionContext { get; private set; }
    public IPrincipal Principal { get; public set; }
    public IHttpActionResult ErrorResult { get; public set; }
    public HttpRequestMessage Request { get; }
    public HttpAuthenticationContext(HttpActionContext actionContext, IPrincipal principal);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public IPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public void set_Principal(IPrincipal value);
    [CompilerGeneratedAttribute]
public IHttpActionResult get_ErrorResult();
    [CompilerGeneratedAttribute]
public void set_ErrorResult(IHttpActionResult value);
    public HttpRequestMessage get_Request();
}
internal class System.Web.Http.Filters.HttpFilterCollection : object {
    private List`1<FilterInfo> _filters;
    public int Count { get; }
    public int get_Count();
    public void Add(IFilter filter);
    public void AddRange(IEnumerable`1<IFilter> filters);
    private static FilterInfo CreateFilterInfo(IFilter filter);
    public void Clear();
    public bool Contains(IFilter filter);
    public sealed virtual IEnumerator`1<FilterInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Remove(IFilter filter);
}
internal interface System.Web.Http.Filters.IActionFilter {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
internal interface System.Web.Http.Filters.IAuthenticationFilter {
    public abstract virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public abstract virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
}
internal interface System.Web.Http.Filters.IAuthorizationFilter {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteAuthorizationFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
}
internal interface System.Web.Http.Filters.IExceptionFilter {
    public abstract virtual Task ExecuteExceptionFilterAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
}
internal interface System.Web.Http.Filters.IFilter {
    public bool AllowMultiple { get; }
    public abstract virtual bool get_AllowMultiple();
}
internal interface System.Web.Http.Filters.IFilterProvider {
    public abstract virtual IEnumerable`1<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor);
}
internal interface System.Web.Http.Filters.IOverrideFilter {
    public Type FiltersToOverride { get; }
    public abstract virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("2052")]
internal class System.Web.Http.FromBodyAttribute : ParameterBindingAttribute {
    public virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
}
[AttributeUsageAttribute("2052")]
internal class System.Web.Http.FromUriAttribute : ModelBinderAttribute {
    public virtual IEnumerable`1<ValueProviderFactory> GetValueProviderFactories(HttpConfiguration configuration);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValueProviderFactory> <>n__FabricatedMethod4(HttpConfiguration );
}
[AttributeUsageAttribute("68")]
internal class System.Web.Http.HostAuthenticationAttribute : Attribute {
    private IAuthenticationFilter _innerFilter;
    private string _authenticationType;
    public bool AllowMultiple { get; }
    public string AuthenticationType { get; }
    internal IAuthenticationFilter InnerFilter { get; }
    public HostAuthenticationAttribute(string authenticationType);
    internal HostAuthenticationAttribute(IAuthenticationFilter innerFilter);
    public sealed virtual bool get_AllowMultiple();
    public string get_AuthenticationType();
    internal IAuthenticationFilter get_InnerFilter();
    public sealed virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public sealed virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
}
internal class System.Web.Http.HostAuthenticationFilter : object {
    private string _authenticationType;
    public string AuthenticationType { get; }
    public bool AllowMultiple { get; }
    public HostAuthenticationFilter(string authenticationType);
    public string get_AuthenticationType();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.HostAuthenticationFilter/<AuthenticateAsync>d__0")]
public sealed virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public sealed virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
    public sealed virtual bool get_AllowMultiple();
    private static AuthenticationResponseChallenge AddChallengeAuthenticationType(AuthenticationResponseChallenge challenge, string authenticationType);
    private static IAuthenticationManager GetAuthenticationManagerOrThrow(HttpRequestMessage request);
}
internal static class System.Web.Http.Hosting.HttpPropertyKeys : object {
    public static string HttpConfigurationKey;
    public static string HttpRouteDataKey;
    public static string HttpActionDescriptorKey;
    public static string SynchronizationContextKey;
    public static string DisposableRequestResourcesKey;
    public static string DependencyScope;
    public static string ClientCertificateKey;
    public static string RetrieveClientCertificateDelegateKey;
    public static string RequestContextKey;
    public static string RequestCorrelationKey;
    public static string IsLocalKey;
    public static string NoRouteMatched;
    public static string IncludeErrorDetailKey;
    public static string RequestQueryNameValuePairsKey;
    public static string CachedRequestQueryKey;
    public static string IsBatchRequest;
    private static HttpPropertyKeys();
}
internal interface System.Web.Http.Hosting.IHostBufferPolicySelector {
    public abstract virtual bool UseBufferedInputStream(object hostContext);
    public abstract virtual bool UseBufferedOutputStream(HttpResponseMessage response);
}
internal class System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler : DelegatingHandler {
    private static Lazy`1<IPrincipal> _anonymousPrincipal;
    [CompilerGeneratedAttribute]
private static Func`1<IPrincipal> CS$<>9__CachedAnonymousMethodDelegate1;
    private static SuppressHostPrincipalMessageHandler();
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static void SetCurrentPrincipalToAnonymous(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
private static IPrincipal <.cctor>b__0();
}
[AttributeUsageAttribute("132")]
internal class System.Web.Http.HttpBindNeverAttribute : HttpBindingBehaviorAttribute {
}
[AttributeUsageAttribute("132")]
internal class System.Web.Http.HttpBindRequiredAttribute : HttpBindingBehaviorAttribute {
}
internal class System.Web.Http.HttpConfiguration : object {
    private HttpRouteCollection _routes;
    private ConcurrentDictionary`2<object, object> _properties;
    private MediaTypeFormatterCollection _formatters;
    private Collection`1<DelegatingHandler> _messageHandlers;
    private HttpFilterCollection _filters;
    private IDependencyResolver _dependencyResolver;
    private Action`1<HttpConfiguration> _initializer;
    private bool _initialized;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private ServicesContainer <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterBindingRulesCollection <ParameterBindingRules>k__BackingField;
    [CompilerGeneratedAttribute]
private IncludeErrorDetailPolicy <IncludeErrorDetailPolicy>k__BackingField;
    public Action`1<HttpConfiguration> Initializer { get; public set; }
    public HttpFilterCollection Filters { get; }
    public Collection`1<DelegatingHandler> MessageHandlers { get; }
    public HttpRouteCollection Routes { get; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public string VirtualPathRoot { get; }
    public IDependencyResolver DependencyResolver { get; public set; }
    public ServicesContainer Services { get; internal set; }
    public ParameterBindingRulesCollection ParameterBindingRules { get; internal set; }
    public IncludeErrorDetailPolicy IncludeErrorDetailPolicy { get; public set; }
    public MediaTypeFormatterCollection Formatters { get; }
    public HttpConfiguration(HttpRouteCollection routes);
    private HttpConfiguration(HttpConfiguration configuration, HttpControllerSettings settings);
    public Action`1<HttpConfiguration> get_Initializer();
    public void set_Initializer(Action`1<HttpConfiguration> value);
    public HttpFilterCollection get_Filters();
    public Collection`1<DelegatingHandler> get_MessageHandlers();
    public HttpRouteCollection get_Routes();
    public ConcurrentDictionary`2<object, object> get_Properties();
    public string get_VirtualPathRoot();
    public IDependencyResolver get_DependencyResolver();
    public void set_DependencyResolver(IDependencyResolver value);
    [CompilerGeneratedAttribute]
public ServicesContainer get_Services();
    [CompilerGeneratedAttribute]
internal void set_Services(ServicesContainer value);
    [CompilerGeneratedAttribute]
public ParameterBindingRulesCollection get_ParameterBindingRules();
    [CompilerGeneratedAttribute]
internal void set_ParameterBindingRules(ParameterBindingRulesCollection value);
    [CompilerGeneratedAttribute]
public IncludeErrorDetailPolicy get_IncludeErrorDetailPolicy();
    [CompilerGeneratedAttribute]
public void set_IncludeErrorDetailPolicy(IncludeErrorDetailPolicy value);
    public MediaTypeFormatterCollection get_Formatters();
    private static MediaTypeFormatterCollection DefaultFormatters(HttpConfiguration config);
    internal static HttpConfiguration ApplyControllerSettings(HttpControllerSettings settings, HttpConfiguration configuration);
    private static void DefaultInitializer(HttpConfiguration configuration);
    public void EnsureInitialized();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <.ctor>b__0();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Web.Http.HttpConfigurationExtensions : object {
    [ExtensionAttribute]
public static void BindParameter(HttpConfiguration configuration, Type type, IModelBinder binder);
    [ExtensionAttribute]
public static void MapHttpAttributeRoutes(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void MapHttpAttributeRoutes(HttpConfiguration configuration, IInlineConstraintResolver constraintResolver);
    [ExtensionAttribute]
public static void MapHttpAttributeRoutes(HttpConfiguration configuration, IDirectRouteProvider directRouteProvider);
    [ExtensionAttribute]
public static void MapHttpAttributeRoutes(HttpConfiguration configuration, IInlineConstraintResolver constraintResolver, IDirectRouteProvider directRouteProvider);
    [ExtensionAttribute]
internal static IReadOnlyCollection`1<IHttpRoute> GetAttributeRoutes(HttpConfiguration configuration);
    [ExtensionAttribute]
public static void SuppressHostPrincipal(HttpConfiguration configuration);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Web.Http.HttpConfigurationTracingExtensions : object {
    [ExtensionAttribute]
public static SystemDiagnosticsTraceWriter EnableSystemDiagnosticsTracing(HttpConfiguration configuration);
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.HttpDeleteAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpDeleteAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[XmlRootAttribute("Error")]
internal class System.Web.Http.HttpError : Dictionary`2<string, object> {
    public string Message { get; public set; }
    public HttpError ModelState { get; }
    public string MessageDetail { get; public set; }
    public string ExceptionMessage { get; public set; }
    public string ExceptionType { get; public set; }
    public string StackTrace { get; public set; }
    public HttpError InnerException { get; }
    public HttpError(string message);
    public HttpError(Exception exception, bool includeErrorDetail);
    public HttpError(ModelStateDictionary modelState, bool includeErrorDetail);
    internal HttpError(string message, string messageDetail);
    public string get_Message();
    public void set_Message(string value);
    public HttpError get_ModelState();
    public string get_MessageDetail();
    public void set_MessageDetail(string value);
    public string get_ExceptionMessage();
    public void set_ExceptionMessage(string value);
    public string get_ExceptionType();
    public void set_ExceptionType(string value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
    public HttpError get_InnerException();
    public TValue GetPropertyValue(string key);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
internal static class System.Web.Http.HttpErrorKeys : object {
    public static string MessageKey;
    public static string MessageDetailKey;
    public static string ModelStateKey;
    public static string ExceptionMessageKey;
    public static string ExceptionTypeKey;
    public static string StackTraceKey;
    public static string InnerExceptionKey;
    public static string MessageLanguageKey;
    public static string ErrorCodeKey;
    private static HttpErrorKeys();
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.HttpGetAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpGetAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.HttpHeadAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpHeadAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
internal static class System.Web.Http.HttpMethodHelper : object {
    internal static HttpMethod GetHttpMethod(string method);
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.HttpOptionsAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpOptionsAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.HttpPatchAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpPatchAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.HttpPostAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpPostAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.HttpPutAttribute : Attribute {
    private static Collection`1<HttpMethod> _supportedMethods;
    public Collection`1<HttpMethod> HttpMethods { get; }
    private static HttpPutAttribute();
    public sealed virtual Collection`1<HttpMethod> get_HttpMethods();
}
internal class System.Web.Http.HttpResponseException : Exception {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpResponseMessage Response { get; private set; }
    public HttpResponseException(HttpStatusCode statusCode);
    public HttpResponseException(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(HttpResponseMessage value);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Http.HttpRouteCollection : object {
    private static Uri _referenceBaseAddress;
    private string _virtualPathRoot;
    private List`1<IHttpRoute> _collection;
    private IDictionary`2<string, IHttpRoute> _dictionary;
    private bool _disposed;
    public string VirtualPathRoot { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IHttpRoute Item { get; }
    public IHttpRoute Item { get; }
    public HttpRouteCollection(string virtualPathRoot);
    private static HttpRouteCollection();
    public virtual string get_VirtualPathRoot();
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual IHttpRoute get_Item(int index);
    public virtual IHttpRoute get_Item(string name);
    public virtual IHttpRouteData GetRouteData(HttpRequestMessage request);
    public virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, string name, IDictionary`2<string, object> values);
    private string GetVirtualPathRoot(HttpRequestContext requestContext);
    public IHttpRoute CreateRoute(string routeTemplate, object defaults, object constraints);
    public IHttpRoute CreateRoute(string routeTemplate, IDictionary`2<string, object> defaults, IDictionary`2<string, object> constraints, IDictionary`2<string, object> dataTokens);
    public virtual IHttpRoute CreateRoute(string routeTemplate, IDictionary`2<string, object> defaults, IDictionary`2<string, object> constraints, IDictionary`2<string, object> dataTokens, HttpMessageHandler handler);
    protected virtual void ValidateConstraint(string routeTemplate, string name, object constraint);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Web.Http.Routing.IHttpRoute>.Add(IHttpRoute route);
    public virtual void Add(string name, IHttpRoute route);
    public virtual void Clear();
    public virtual bool Contains(IHttpRoute item);
    public virtual bool ContainsKey(string name);
    public virtual void CopyTo(IHttpRoute[] array, int arrayIndex);
    public virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public virtual void Insert(int index, string name, IHttpRoute value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Web.Http.Routing.IHttpRoute>.Remove(IHttpRoute route);
    public virtual bool Remove(string name);
    public virtual IEnumerator`1<IHttpRoute> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual IEnumerator OnGetEnumerator();
    public virtual bool TryGetValue(string name, IHttpRoute& route);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Web.Http.HttpRouteCollectionExtensions : object {
    [ExtensionAttribute]
public static IHttpRoute MapHttpRoute(HttpRouteCollection routes, string name, string routeTemplate);
    [ExtensionAttribute]
public static IHttpRoute MapHttpRoute(HttpRouteCollection routes, string name, string routeTemplate, object defaults);
    [ExtensionAttribute]
public static IHttpRoute MapHttpRoute(HttpRouteCollection routes, string name, string routeTemplate, object defaults, object constraints);
    [ExtensionAttribute]
public static IHttpRoute MapHttpRoute(HttpRouteCollection routes, string name, string routeTemplate, object defaults, object constraints, HttpMessageHandler handler);
    [ExtensionAttribute]
public static IHttpRoute MapHttpBatchRoute(HttpRouteCollection routes, string routeName, string routeTemplate, HttpBatchHandler batchHandler);
    [ExtensionAttribute]
public static IHttpRoute IgnoreRoute(HttpRouteCollection routes, string routeName, string routeTemplate);
    [ExtensionAttribute]
public static IHttpRoute IgnoreRoute(HttpRouteCollection routes, string routeName, string routeTemplate, object constraints);
}
internal class System.Web.Http.HttpServer : DelegatingHandler {
    private static IPrincipal _anonymousPrincipal;
    private HttpConfiguration _configuration;
    private HttpMessageHandler _dispatcher;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    private bool _disposed;
    private bool _initialized;
    private object _initializationLock;
    private object _initializationTarget;
    public HttpMessageHandler Dispatcher { get; }
    public HttpConfiguration Configuration { get; }
    internal IExceptionLogger ExceptionLogger { get; internal set; }
    internal IExceptionHandler ExceptionHandler { get; internal set; }
    public HttpServer(HttpConfiguration configuration);
    public HttpServer(HttpMessageHandler dispatcher);
    public HttpServer(HttpConfiguration configuration, HttpMessageHandler dispatcher);
    private static HttpServer();
    public HttpMessageHandler get_Dispatcher();
    public HttpConfiguration get_Configuration();
    internal IExceptionLogger get_ExceptionLogger();
    internal void set_ExceptionLogger(IExceptionLogger value);
    internal IExceptionHandler get_ExceptionHandler();
    internal void set_ExceptionHandler(IExceptionHandler value);
    protected virtual void Dispose(bool disposing);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.HttpServer/<SendAsync>d__0")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private void EnsureInitialized();
    protected virtual void Initialize();
    private static HttpConfiguration EnsureNonNull(HttpConfiguration configuration);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethod9(HttpRequestMessage , CancellationToken );
    [CompilerGeneratedAttribute]
private object <EnsureInitialized>b__b();
}
internal interface System.Web.Http.IHttpActionResult {
    public abstract virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal enum System.Web.Http.IncludeErrorDetailPolicy : Enum {
    public int value__;
    public static IncludeErrorDetailPolicy Default;
    public static IncludeErrorDetailPolicy LocalOnly;
    public static IncludeErrorDetailPolicy Always;
    public static IncludeErrorDetailPolicy Never;
}
internal static class System.Web.Http.Internal.CollectionModelBinderUtil : object {
    internal static void CreateOrReplaceCollection(ModelBindingContext bindingContext, IEnumerable`1<TElement> incomingElements, Func`1<ICollection`1<TElement>> creator);
    internal static void CreateOrReplaceDictionary(ModelBindingContext bindingContext, IEnumerable`1<KeyValuePair`2<TKey, TValue>> incomingElements, Func`1<IDictionary`2<TKey, TValue>> creator);
    internal static IModelBinder GetGenericBinder(Type supportedInterfaceType, Type newInstanceType, Type openBinderType, Type modelType);
    internal static Type[] GetGenericBinderTypeArgs(Type supportedInterfaceType, Type modelType);
    internal static IEnumerable`1<string> GetIndexNamesFromValueProviderResult(ValueProviderResult valueProviderResultIndex);
    internal static IEnumerable`1<string> GetZeroBasedIndexes();
}
[ExtensionAttribute]
internal static class System.Web.Http.Internal.HttpParameterBindingExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<ValueProviderFactory, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static bool WillReadUri(HttpParameterBinding parameterBinding);
    [CompilerGeneratedAttribute]
private static bool <WillReadUri>b__0(ValueProviderFactory factory);
}
[ExtensionAttribute]
internal static class System.Web.Http.Internal.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static TAttribute[] GetCustomAttributes(MemberInfo member, bool inherit);
}
[ExtensionAttribute]
internal static class System.Web.Http.Internal.ParameterInfoExtensions : object {
    [ExtensionAttribute]
public static bool TryGetDefaultValue(ParameterInfo parameterInfo, Object& value);
}
internal class System.Web.Http.Internal.PropertyHelper : object {
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> _reflectionCache;
    private Func`2<object, object> _valueGetter;
    private static MethodInfo _callPropertyGetterOpenGenericMethod;
    private static MethodInfo _callPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo _callPropertySetterOpenGenericMethod;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public string Name { get; protected set; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    public static Action`2<TDeclaringType, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    public object GetValue(object instance);
    public static PropertyHelper[] GetProperties(object instance);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object this);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object this);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object this, object value);
    protected static PropertyHelper[] GetProperties(object instance, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    [CompilerGeneratedAttribute]
private static bool <GetProperties>b__0(PropertyInfo prop);
}
internal static class System.Web.Http.Internal.TypeActivator : object {
    public static Func`1<TBase> Create(Type instanceType);
    public static Func`1<TInstance> Create();
    public static Func`1<object> Create(Type instanceType);
}
internal static class System.Web.Http.Internal.TypeDescriptorHelper : object {
    internal static ICustomTypeDescriptor Get(Type type);
}
internal static class System.Web.Http.Internal.TypeHelper : object {
    private static Type TaskGenericType;
    internal static Type ApiControllerType;
    private static TypeHelper();
    internal static Type GetTaskInnerTypeOrNull(Type type);
    internal static Type[] GetTypeArgumentsIfMatch(Type closedType, Type matchingOpenType);
    internal static bool IsCompatibleObject(Type type, object value);
    internal static bool IsNullableValueType(Type type);
    internal static bool TypeAllowsNullValue(Type type);
    internal static bool IsSimpleType(Type type);
    internal static bool IsSimpleUnderlyingType(Type type);
    internal static bool CanConvertFromString(Type type);
    internal static bool HasStringConverter(Type type);
    internal static ReadOnlyCollection`1<T> OfType(Object[] objects);
}
internal class System.Web.Http.Metadata.ModelMetadata : object {
    private Type _containerType;
    private Type _modelType;
    private string _propertyName;
    private EfficientTypePropertyKey`2<Type, string> _cacheKey;
    private Dictionary`2<string, object> _additionalValues;
    private bool _convertEmptyStringToNull;
    private object _model;
    private Func`1<object> _modelAccessor;
    private IEnumerable`1<ModelMetadata> _properties;
    private Type _realModelType;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <Provider>k__BackingField;
    public Dictionary`2<string, object> AdditionalValues { get; }
    public Type ContainerType { get; }
    public bool ConvertEmptyStringToNull { get; public set; }
    public string Description { get; public set; }
    public bool IsComplexType { get; }
    public bool IsNullableValueType { get; }
    public bool IsReadOnly { get; public set; }
    public object Model { get; public set; }
    public Type ModelType { get; }
    public IEnumerable`1<ModelMetadata> Properties { get; }
    public string PropertyName { get; }
    protected ModelMetadataProvider Provider { get; protected set; }
    internal Type RealModelType { get; }
    internal EfficientTypePropertyKey`2<Type, string> CacheKey { get; }
    public ModelMetadata(ModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName);
    internal ModelMetadata(ModelMetadataProvider provider, Type containerType, Func`1<object> modelAccessor, Type modelType, string propertyName, EfficientTypePropertyKey`2<Type, string> cacheKey);
    public virtual Dictionary`2<string, object> get_AdditionalValues();
    public Type get_ContainerType();
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    public virtual bool get_IsComplexType();
    public bool get_IsNullableValueType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual void set_IsReadOnly(bool value);
    public object get_Model();
    public void set_Model(object value);
    public Type get_ModelType();
    public virtual IEnumerable`1<ModelMetadata> get_Properties();
    public string get_PropertyName();
    [CompilerGeneratedAttribute]
protected ModelMetadataProvider get_Provider();
    [CompilerGeneratedAttribute]
protected void set_Provider(ModelMetadataProvider value);
    internal Type get_RealModelType();
    internal EfficientTypePropertyKey`2<Type, string> get_CacheKey();
    public virtual string GetDisplayName();
    public virtual IEnumerable`1<ModelValidator> GetValidators(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    private static EfficientTypePropertyKey`2<Type, string> CreateCacheKey(Type containerType, Type modelType, string propertyName);
}
internal abstract class System.Web.Http.Metadata.ModelMetadataProvider : object {
    public abstract virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType);
    public abstract virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName);
    public abstract virtual ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType);
}
internal abstract class System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1 : ModelMetadataProvider {
    private ConcurrentDictionary`2<Type, TypeInformation<TModelMetadata>> _typeInfoCache;
    public sealed virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(object container, Type containerType);
    private IEnumerable`1<ModelMetadata> GetMetadataForPropertiesImpl(object container, Type containerType);
    public sealed virtual ModelMetadata GetMetadataForProperty(Func`1<object> modelAccessor, Type containerType, string propertyName);
    public sealed virtual ModelMetadata GetMetadataForType(Func`1<object> modelAccessor, Type modelType);
    protected abstract virtual TModelMetadata CreateMetadataPrototype(IEnumerable`1<Attribute> attributes, Type containerType, Type modelType, string propertyName);
    protected abstract virtual TModelMetadata CreateMetadataFromPrototype(TModelMetadata prototype, Func`1<object> modelAccessor);
    private TypeInformation<TModelMetadata> GetTypeInformation(Type type);
    private TypeInformation<TModelMetadata> CreateTypeInformation(Type type);
    private PropertyInformation<TModelMetadata> CreatePropertyInformation(Type containerType, PropertyDescriptor property);
    private static IEnumerable`1<Attribute> AsAttributes(IEnumerable attributes);
    private static Func`2<object, object> CreatePropertyValueAccessor(PropertyDescriptor property);
    private static Func`2<object, object> CreateDynamicValueAccessor(MethodInfo getMethodInfo, Type declaringType, string propertyName);
}
internal class System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes : object {
    [CompilerGeneratedAttribute]
private DisplayAttribute <Display>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayNameAttribute <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayFormatAttribute <DisplayFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private EditableAttribute <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyAttribute <ReadOnly>k__BackingField;
    public DisplayAttribute Display { get; protected set; }
    public DisplayNameAttribute DisplayName { get; protected set; }
    public DisplayFormatAttribute DisplayFormat { get; protected set; }
    public EditableAttribute Editable { get; protected set; }
    public ReadOnlyAttribute ReadOnly { get; protected set; }
    public CachedDataAnnotationsMetadataAttributes(IEnumerable`1<Attribute> attributes);
    [CompilerGeneratedAttribute]
public DisplayAttribute get_Display();
    [CompilerGeneratedAttribute]
protected void set_Display(DisplayAttribute value);
    [CompilerGeneratedAttribute]
public DisplayNameAttribute get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(DisplayNameAttribute value);
    [CompilerGeneratedAttribute]
public DisplayFormatAttribute get_DisplayFormat();
    [CompilerGeneratedAttribute]
protected void set_DisplayFormat(DisplayFormatAttribute value);
    [CompilerGeneratedAttribute]
public EditableAttribute get_Editable();
    [CompilerGeneratedAttribute]
protected void set_Editable(EditableAttribute value);
    [CompilerGeneratedAttribute]
public ReadOnlyAttribute get_ReadOnly();
    [CompilerGeneratedAttribute]
protected void set_ReadOnly(ReadOnlyAttribute value);
}
internal class System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata : CachedModelMetadata`1<CachedDataAnnotationsMetadataAttributes> {
    public CachedDataAnnotationsModelMetadata(CachedDataAnnotationsModelMetadata prototype, Func`1<object> modelAccessor);
    public CachedDataAnnotationsModelMetadata(DataAnnotationsModelMetadataProvider provider, Type containerType, Type modelType, string propertyName, IEnumerable`1<Attribute> attributes);
    protected virtual bool ComputeConvertEmptyStringToNull();
    protected virtual string ComputeDescription();
    protected virtual bool ComputeIsReadOnly();
    public virtual string GetDisplayName();
}
internal abstract class System.Web.Http.Metadata.Providers.CachedModelMetadata`1 : ModelMetadata {
    private bool _convertEmptyStringToNull;
    private string _description;
    private bool _isReadOnly;
    private bool _isComplexType;
    private bool _convertEmptyStringToNullComputed;
    private bool _descriptionComputed;
    private bool _isReadOnlyComputed;
    private bool _isComplexTypeComputed;
    [CompilerGeneratedAttribute]
private TPrototypeCache <PrototypeCache>k__BackingField;
    public bool ConvertEmptyStringToNull { get; public set; }
    public string Description { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsComplexType { get; }
    protected TPrototypeCache PrototypeCache { get; protected set; }
    protected CachedModelMetadata`1(CachedModelMetadata`1<TPrototypeCache> prototype, Func`1<object> modelAccessor);
    protected CachedModelMetadata`1(DataAnnotationsModelMetadataProvider provider, Type containerType, Type modelType, string propertyName, TPrototypeCache prototypeCache);
    public sealed virtual bool get_ConvertEmptyStringToNull();
    public sealed virtual void set_ConvertEmptyStringToNull(bool value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public sealed virtual bool get_IsComplexType();
    [CompilerGeneratedAttribute]
protected TPrototypeCache get_PrototypeCache();
    [CompilerGeneratedAttribute]
protected void set_PrototypeCache(TPrototypeCache value);
    protected virtual bool ComputeConvertEmptyStringToNull();
    protected virtual string ComputeDescription();
    protected virtual bool ComputeIsReadOnly();
    protected virtual bool ComputeIsComplexType();
}
internal class System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider : AssociatedMetadataProvider`1<CachedDataAnnotationsModelMetadata> {
    protected virtual CachedDataAnnotationsModelMetadata CreateMetadataPrototype(IEnumerable`1<Attribute> attributes, Type containerType, Type modelType, string propertyName);
    protected virtual CachedDataAnnotationsModelMetadata CreateMetadataFromPrototype(CachedDataAnnotationsModelMetadata prototype, Func`1<object> modelAccessor);
}
internal class System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider : AssociatedMetadataProvider`1<ModelMetadata> {
    protected virtual ModelMetadata CreateMetadataPrototype(IEnumerable`1<Attribute> attributes, Type containerType, Type modelType, string propertyName);
    protected virtual ModelMetadata CreateMetadataFromPrototype(ModelMetadata prototype, Func`1<object> modelAccessor);
}
internal class System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1 : CollectionModelBinder`1<TElement> {
    public virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    protected virtual bool CreateOrReplaceCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, IList`1<TElement> newCollection);
}
internal class System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1 : object {
    [CompilerGeneratedAttribute]
private static Func`1<ICollection`1<TElement>> CS$<>9__CachedAnonymousMethodDelegate4;
    private static List`1<TElement> BindComplexCollection(HttpActionContext actionContext, ModelBindingContext bindingContext);
    internal static List`1<TElement> BindComplexCollectionFromIndexes(HttpActionContext actionContext, ModelBindingContext bindingContext, IEnumerable`1<string> indexNames);
    public virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    internal static List`1<TElement> BindSimpleCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, object rawValue, CultureInfo culture);
    protected virtual bool CreateOrReplaceCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, IList`1<TElement> newCollection);
    [CompilerGeneratedAttribute]
private static ICollection`1<TElement> <CreateOrReplaceCollection>b__3();
}
internal class System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.Binders.ComplexModelDto : object {
    [CompilerGeneratedAttribute]
private ModelMetadata <ModelMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<ModelMetadata> <PropertyMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<ModelMetadata, ComplexModelDtoResult> <Results>k__BackingField;
    public ModelMetadata ModelMetadata { get; private set; }
    public Collection`1<ModelMetadata> PropertyMetadata { get; private set; }
    public IDictionary`2<ModelMetadata, ComplexModelDtoResult> Results { get; private set; }
    public ComplexModelDto(ModelMetadata modelMetadata, IEnumerable`1<ModelMetadata> propertyMetadata);
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
private void set_ModelMetadata(ModelMetadata value);
    [CompilerGeneratedAttribute]
public Collection`1<ModelMetadata> get_PropertyMetadata();
    [CompilerGeneratedAttribute]
private void set_PropertyMetadata(Collection`1<ModelMetadata> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<ModelMetadata, ComplexModelDtoResult> get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(IDictionary`2<ModelMetadata, ComplexModelDtoResult> value);
}
internal class System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder : object {
    public sealed virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
}
internal class System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider : ModelBinderProvider {
    private static SimpleModelBinderProvider _underlyingProvider;
    private static ComplexModelDtoModelBinderProvider();
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
    private static SimpleModelBinderProvider GetUnderlyingProvider();
}
internal class System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult : object {
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelValidationNode <ValidationNode>k__BackingField;
    public object Model { get; private set; }
    public ModelValidationNode ValidationNode { get; private set; }
    public ComplexModelDtoResult(object model, ModelValidationNode validationNode);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(object value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ValidationNode();
    [CompilerGeneratedAttribute]
private void set_ValidationNode(ModelValidationNode value);
}
internal class System.Web.Http.ModelBinding.Binders.CompositeModelBinder : object {
    [CompilerGeneratedAttribute]
private IModelBinder[] <Binders>k__BackingField;
    private IModelBinder[] Binders { get; private set; }
    public CompositeModelBinder(IEnumerable`1<IModelBinder> binders);
    public CompositeModelBinder(IModelBinder[] binders);
    [CompilerGeneratedAttribute]
private IModelBinder[] get_Binders();
    [CompilerGeneratedAttribute]
private void set_Binders(IModelBinder[] value);
    public virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    private bool TryBind(HttpActionContext actionContext, ModelBindingContext bindingContext);
    private static ModelBindingContext CreateNewBindingContext(ModelBindingContext oldBindingContext, string modelName);
}
internal class System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider : ModelBinderProvider {
    private ModelBinderProvider[] _providers;
    [CompilerGeneratedAttribute]
private static Func`2<System.Web.Http.<>f__AnonymousType1`2<ModelBinderProvider, IModelBinder>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<System.Web.Http.<>f__AnonymousType1`2<ModelBinderProvider, IModelBinder>, IModelBinder> CS$<>9__CachedAnonymousMethodDelegate5;
    public IEnumerable`1<ModelBinderProvider> Providers { get; }
    public CompositeModelBinderProvider(IEnumerable`1<ModelBinderProvider> providers);
    public IEnumerable`1<ModelBinderProvider> get_Providers();
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
    [CompilerGeneratedAttribute]
private static bool <GetBinder>b__2(System.Web.Http.<>f__AnonymousType1`2<ModelBinderProvider, IModelBinder> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static IModelBinder <GetBinder>b__3(System.Web.Http.<>f__AnonymousType1`2<ModelBinderProvider, IModelBinder> <>h__TransparentIdentifier0);
}
internal class System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2 : CollectionModelBinder`1<KeyValuePair`2<TKey, TValue>> {
    [CompilerGeneratedAttribute]
private static Func`1<IDictionary`2<TKey, TValue>> CS$<>9__CachedAnonymousMethodDelegate1;
    protected virtual bool CreateOrReplaceCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, IList`1<KeyValuePair`2<TKey, TValue>> newCollection);
    [CompilerGeneratedAttribute]
private static IDictionary`2<TKey, TValue> <CreateOrReplaceCollection>b__0();
}
internal class System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2 : object {
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <MetadataProvider>k__BackingField;
    private ModelMetadataProvider MetadataProvider { get; internal set; }
    [CompilerGeneratedAttribute]
private ModelMetadataProvider get_MetadataProvider();
    [CompilerGeneratedAttribute]
internal void set_MetadataProvider(ModelMetadataProvider value);
    public sealed virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
}
internal class System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder : object {
    [CompilerGeneratedAttribute]
private ModelMetadataProvider <MetadataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ModelMetadata, System.Web.Http.<>f__AnonymousType2`2<ModelMetadata, string>> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<System.Web.Http.<>f__AnonymousType3`2<System.Web.Http.<>f__AnonymousType2`2<ModelMetadata, string>, bool>, ModelMetadata> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<ModelValidator, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<ModelMetadata, ComplexModelDtoResult>, string> CS$<>9__CachedAnonymousMethodDelegate14;
    private ModelMetadataProvider MetadataProvider { get; internal set; }
    [CompilerGeneratedAttribute]
private ModelMetadataProvider get_MetadataProvider();
    [CompilerGeneratedAttribute]
internal void set_MetadataProvider(ModelMetadataProvider value);
    internal static bool CanBindType(Type modelType);
    public virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    protected virtual bool CanUpdateProperty(ModelMetadata propertyMetadata);
    internal static bool CanUpdatePropertyInternal(ModelMetadata propertyMetadata);
    private static bool CanUpdateReadOnlyProperty(Type propertyType);
    private ComplexModelDto CreateAndPopulateDto(HttpActionContext actionContext, ModelBindingContext bindingContext, IEnumerable`1<ModelMetadata> propertyMetadatas);
    protected virtual object CreateModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    internal static EventHandler`1<ModelValidatedEventArgs> CreateNullCheckFailedHandler(ModelMetadata modelMetadata, object incomingValue);
    protected virtual void EnsureModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    protected virtual IEnumerable`1<ModelMetadata> GetMetadataForProperties(HttpActionContext actionContext, ModelBindingContext bindingContext);
    private static object GetPropertyDefaultValue(PropertyDescriptor propertyDescriptor);
    internal static void GetRequiredPropertiesCollection(HttpActionContext actionContext, ModelBindingContext bindingContext, HashSet`1& requiredProperties, Dictionary`2& requiredValidators, HashSet`1& skipProperties);
    internal void ProcessDto(HttpActionContext actionContext, ModelBindingContext bindingContext, ComplexModelDto dto);
    protected virtual void SetProperty(HttpActionContext actionContext, ModelBindingContext bindingContext, ModelMetadata propertyMetadata, ComplexModelDtoResult dtoResult, ModelValidator requiredValidator);
    private static bool RunValidator(ModelValidator validator, ModelBindingContext bindingContext, ModelMetadata propertyMetadata, string modelStateKey);
    [CompilerGeneratedAttribute]
private static System.Web.Http.<>f__AnonymousType2`2<ModelMetadata, string> <GetMetadataForProperties>b__9(ModelMetadata propertyMetadata);
    [CompilerGeneratedAttribute]
private bool <GetMetadataForProperties>b__b(System.Web.Http.<>f__AnonymousType3`2<System.Web.Http.<>f__AnonymousType2`2<ModelMetadata, string>, bool> <>h__TransparentIdentifier8);
    [CompilerGeneratedAttribute]
private static ModelMetadata <GetMetadataForProperties>b__c(System.Web.Http.<>f__AnonymousType3`2<System.Web.Http.<>f__AnonymousType2`2<ModelMetadata, string>, bool> <>h__TransparentIdentifier8);
    [CompilerGeneratedAttribute]
private static bool <GetRequiredPropertiesCollection>b__11(ModelValidator v);
    [CompilerGeneratedAttribute]
private static string <ProcessDto>b__13(KeyValuePair`2<ModelMetadata, ComplexModelDtoResult> r);
}
internal class System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider : ModelBinderProvider {
    private Func`1<IModelBinder> _modelBinderFactory;
    private Type _modelType;
    [CompilerGeneratedAttribute]
private bool <SuppressPrefixCheck>k__BackingField;
    public Type ModelType { get; }
    public bool SuppressPrefixCheck { get; public set; }
    public SimpleModelBinderProvider(Type modelType, IModelBinder modelBinder);
    public SimpleModelBinderProvider(Type modelType, Func`1<IModelBinder> modelBinderFactory);
    public Type get_ModelType();
    [CompilerGeneratedAttribute]
public bool get_SuppressPrefixCheck();
    [CompilerGeneratedAttribute]
public void set_SuppressPrefixCheck(bool value);
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder : object {
    public sealed virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    private static bool IsFormatException(Exception ex);
}
internal class System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider : ModelBinderProvider {
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder : object {
    public sealed virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
    internal static ValueProviderResult GetCompatibleValueProviderResult(ModelBindingContext bindingContext);
}
internal class System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider : ModelBinderProvider {
    private static TypeMatchModelBinder _binder;
    private static TypeMatchModelBinderProvider();
    public virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.CancellationTokenParameterBinding : HttpParameterBinding {
    public CancellationTokenParameterBinding(HttpParameterDescriptor descriptor);
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
}
[AttributeUsageAttribute("3100")]
internal abstract class System.Web.Http.ModelBinding.CustomModelBinderAttribute : Attribute {
    internal static AttributeTargets ValidTargets;
    public abstract virtual IModelBinder GetBinder();
}
internal class System.Web.Http.ModelBinding.DefaultActionValueBinder : object {
    [CompilerGeneratedAttribute]
private static Func`2<HttpParameterDescriptor, HttpParameterBinding> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<HttpParameterDescriptor, HttpParameterBinding> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<HttpParameterDescriptor, HttpParameterBinding> CS$<>9__CachedAnonymousMethodDelegate5;
    public virtual HttpActionBinding GetBinding(HttpActionDescriptor actionDescriptor);
    private static void EnsureOneBodyParameter(HttpActionBinding actionBinding);
    protected virtual HttpParameterBinding GetParameterBinding(HttpParameterDescriptor parameter);
    internal static ParameterBindingRulesCollection GetDefaultParameterBinders();
    [CompilerGeneratedAttribute]
private static HttpParameterBinding <GetDefaultParameterBinders>b__0(HttpParameterDescriptor parameter);
    [CompilerGeneratedAttribute]
private static HttpParameterBinding <GetDefaultParameterBinders>b__1(HttpParameterDescriptor parameter);
    [CompilerGeneratedAttribute]
private static HttpParameterBinding <GetDefaultParameterBinders>b__2(HttpParameterDescriptor parameter);
}
internal class System.Web.Http.ModelBinding.ErrorParameterBinding : HttpParameterBinding {
    private string _message;
    public string ErrorMessage { get; }
    public ErrorParameterBinding(HttpParameterDescriptor descriptor, string message);
    public virtual string get_ErrorMessage();
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
}
internal class System.Web.Http.ModelBinding.FormatterParameterBinding : HttpParameterBinding {
    private static string CancellationTokenKey;
    private IEnumerable`1<MediaTypeFormatter> _formatters;
    private string _errorMessage;
    [CompilerGeneratedAttribute]
private IBodyModelValidator <BodyModelValidator>k__BackingField;
    public bool WillReadBody { get; }
    public string ErrorMessage { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; public set; }
    public IBodyModelValidator BodyModelValidator { get; public set; }
    public FormatterParameterBinding(HttpParameterDescriptor descriptor, IEnumerable`1<MediaTypeFormatter> formatters, IBodyModelValidator bodyModelValidator);
    public virtual bool get_WillReadBody();
    public virtual string get_ErrorMessage();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public void set_Formatters(IEnumerable`1<MediaTypeFormatter> value);
    [CompilerGeneratedAttribute]
public IBodyModelValidator get_BodyModelValidator();
    [CompilerGeneratedAttribute]
public void set_BodyModelValidator(IBodyModelValidator value);
    public virtual Task`1<object> ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.ModelBinding.FormatterParameterBinding/<ExecuteBindingAsyncCore>d__0")]
[DebuggerStepThroughAttribute]
private Task ExecuteBindingAsyncCore(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, HttpParameterDescriptor paramFromBody, Type type, HttpRequestMessage request, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Web.Http.ModelBinding.FormDataCollectionExtensions : object {
    internal static string NormalizeJQueryToMvc(string key);
    [ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, string>> GetJQueryNameValuePairs(FormDataCollection formData);
    private static void ThrowIfMaxHttpCollectionKeysExceeded(int count);
    [ExtensionAttribute]
internal static IValueProvider GetJQueryValueProvider(FormDataCollection formData);
    [ExtensionAttribute]
public static T ReadAs(FormDataCollection formData);
    [ExtensionAttribute]
public static T ReadAs(FormDataCollection formData, HttpActionContext actionContext);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type, HttpActionContext actionContext);
    [ExtensionAttribute]
public static T ReadAs(FormDataCollection formData, string modelName, IRequiredMemberSelector requiredMemberSelector, IFormatterLogger formatterLogger);
    [ExtensionAttribute]
public static T ReadAs(FormDataCollection formData, string modelName, HttpActionContext actionContext);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type, string modelName, HttpActionContext actionContext);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type, string modelName, IRequiredMemberSelector requiredMemberSelector, IFormatterLogger formatterLogger);
    [ExtensionAttribute]
public static object ReadAs(FormDataCollection formData, Type type, string modelName, IRequiredMemberSelector requiredMemberSelector, IFormatterLogger formatterLogger, HttpConfiguration config);
    [ExtensionAttribute]
private static object ReadAsInternal(FormDataCollection formData, Type type, string modelName, HttpActionContext actionContext);
    private static ModelBinderProvider CreateModelBindingProvider(HttpActionContext actionContext);
    private static ModelBindingContext CreateModelBindingContext(HttpActionContext actionContext, string modelName, Type type, IValueProvider vp);
    private static HttpActionContext CreateActionContextForModelBinding(HttpConfiguration config);
}
internal enum System.Web.Http.ModelBinding.HttpBindingBehavior : Enum {
    public int value__;
    public static HttpBindingBehavior Optional;
    public static HttpBindingBehavior Never;
    public static HttpBindingBehavior Required;
}
[AttributeUsageAttribute("132")]
internal class System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute : Attribute {
    private static object _typeId;
    [CompilerGeneratedAttribute]
private HttpBindingBehavior <Behavior>k__BackingField;
    public HttpBindingBehavior Behavior { get; private set; }
    public object TypeId { get; }
    public HttpBindingBehaviorAttribute(HttpBindingBehavior behavior);
    private static HttpBindingBehaviorAttribute();
    [CompilerGeneratedAttribute]
public HttpBindingBehavior get_Behavior();
    [CompilerGeneratedAttribute]
private void set_Behavior(HttpBindingBehavior value);
    public virtual object get_TypeId();
}
internal class System.Web.Http.ModelBinding.HttpRequestParameterBinding : HttpParameterBinding {
    public HttpRequestParameterBinding(HttpParameterDescriptor descriptor);
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
}
internal interface System.Web.Http.ModelBinding.IModelBinder {
    public abstract virtual bool BindModel(HttpActionContext actionContext, ModelBindingContext bindingContext);
}
internal interface System.Web.Http.ModelBinding.IValueProviderParameterBinding {
    public IEnumerable`1<ValueProviderFactory> ValueProviderFactories { get; }
    public abstract virtual IEnumerable`1<ValueProviderFactory> get_ValueProviderFactories();
}
internal class System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter : FormUrlEncodedMediaTypeFormatter {
    private HttpConfiguration _configuration;
    public JQueryMvcFormUrlEncodedFormatter(HttpConfiguration config);
    public virtual bool CanReadType(Type type);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter/<ReadFromStreamAsyncCore>d__0")]
private Task`1<object> ReadFromStreamAsyncCore(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    [CompilerGeneratedAttribute]
private Task`1<object> <>n__FabricatedMethod4(Type , Stream , HttpContent , IFormatterLogger );
}
[AttributeUsageAttribute("2052")]
internal class System.Web.Http.ModelBinding.ModelBinderAttribute : ParameterBindingAttribute {
    [CompilerGeneratedAttribute]
private Type <BinderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressPrefixCheck>k__BackingField;
    public Type BinderType { get; public set; }
    public string Name { get; public set; }
    public bool SuppressPrefixCheck { get; public set; }
    public ModelBinderAttribute(Type binderType);
    [CompilerGeneratedAttribute]
public Type get_BinderType();
    [CompilerGeneratedAttribute]
public void set_BinderType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_SuppressPrefixCheck();
    [CompilerGeneratedAttribute]
public void set_SuppressPrefixCheck(bool value);
    public virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
    public ModelBinderProvider GetModelBinderProvider(HttpConfiguration configuration);
    public IModelBinder GetModelBinder(HttpConfiguration configuration, Type modelType);
    public virtual IEnumerable`1<ValueProviderFactory> GetValueProviderFactories(HttpConfiguration configuration);
    private static void VerifyBinderType(Type attemptedType);
    private static object GetOrInstantiate(HttpConfiguration configuration, Type type);
}
internal static class System.Web.Http.ModelBinding.ModelBinderConfig : object {
    private static string _resourceClassKey;
    private static ModelBinderErrorMessageProvider _typeConversionErrorMessageProvider;
    private static ModelBinderErrorMessageProvider _valueRequiredErrorMessageProvider;
    public static string ResourceClassKey { get; public set; }
    public static ModelBinderErrorMessageProvider TypeConversionErrorMessageProvider { get; public set; }
    public static ModelBinderErrorMessageProvider ValueRequiredErrorMessageProvider { get; public set; }
    public static string get_ResourceClassKey();
    public static void set_ResourceClassKey(string value);
    public static ModelBinderErrorMessageProvider get_TypeConversionErrorMessageProvider();
    public static void set_TypeConversionErrorMessageProvider(ModelBinderErrorMessageProvider value);
    public static ModelBinderErrorMessageProvider get_ValueRequiredErrorMessageProvider();
    public static void set_ValueRequiredErrorMessageProvider(ModelBinderErrorMessageProvider value);
    private static string DefaultTypeConversionErrorMessageProvider(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue);
    private static string DefaultValueRequiredErrorMessageProvider(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue);
    private static string GetResourceCommon(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue, Func`2<HttpActionContext, string> resourceAccessor);
    private static string GetUserResourceString(HttpActionContext actionContext, string resourceName);
    internal static string GetUserResourceString(HttpActionContext actionContext, string resourceName, string resourceClassKey);
    private static string GetValueInvalidResource(HttpActionContext actionContext);
    private static string GetValueRequiredResource(HttpActionContext actionContext);
}
internal class System.Web.Http.ModelBinding.ModelBinderErrorMessageProvider : MulticastDelegate {
    public ModelBinderErrorMessageProvider(object object, IntPtr method);
    public virtual string Invoke(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue);
    public virtual IAsyncResult BeginInvoke(HttpActionContext actionContext, ModelMetadata modelMetadata, object incomingValue, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal class System.Web.Http.ModelBinding.ModelBinderParameterBinding : HttpParameterBinding {
    private ValueProviderFactory[] _valueProviderFactories;
    private IModelBinder _binder;
    public IEnumerable`1<ValueProviderFactory> ValueProviderFactories { get; }
    public IModelBinder Binder { get; }
    public ModelBinderParameterBinding(HttpParameterDescriptor descriptor, IModelBinder modelBinder, IEnumerable`1<ValueProviderFactory> valueProviderFactories);
    public sealed virtual IEnumerable`1<ValueProviderFactory> get_ValueProviderFactories();
    public IModelBinder get_Binder();
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    private ModelBindingContext GetModelBindingContext(ModelMetadataProvider metadataProvider, HttpActionContext actionContext);
}
internal abstract class System.Web.Http.ModelBinding.ModelBinderProvider : object {
    public abstract virtual IModelBinder GetBinder(HttpConfiguration configuration, Type modelType);
}
internal class System.Web.Http.ModelBinding.ModelBindingContext : object {
    private string _modelName;
    private ModelStateDictionary _modelState;
    private Dictionary`2<string, ModelMetadata> _propertyMetadata;
    private ModelValidationNode _validationNode;
    [CompilerGeneratedAttribute]
private ModelMetadata <ModelMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueProvider <ValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FallbackToEmptyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ModelMetadata, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public object Model { get; public set; }
    public ModelMetadata ModelMetadata { get; public set; }
    public string ModelName { get; public set; }
    public ModelStateDictionary ModelState { get; public set; }
    public Type ModelType { get; }
    public IDictionary`2<string, ModelMetadata> PropertyMetadata { get; }
    public ModelValidationNode ValidationNode { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    public bool FallbackToEmptyPrefix { get; public set; }
    public ModelBindingContext(ModelBindingContext bindingContext);
    public object get_Model();
    public void set_Model(object value);
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
public void set_ModelMetadata(ModelMetadata value);
    public string get_ModelName();
    public void set_ModelName(string value);
    public ModelStateDictionary get_ModelState();
    public void set_ModelState(ModelStateDictionary value);
    public Type get_ModelType();
    public IDictionary`2<string, ModelMetadata> get_PropertyMetadata();
    public ModelValidationNode get_ValidationNode();
    public void set_ValidationNode(ModelValidationNode value);
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    [CompilerGeneratedAttribute]
public bool get_FallbackToEmptyPrefix();
    [CompilerGeneratedAttribute]
public void set_FallbackToEmptyPrefix(bool value);
    private void EnsureModelMetadata();
    [CompilerGeneratedAttribute]
private static string <get_PropertyMetadata>b__0(ModelMetadata m);
}
internal static class System.Web.Http.ModelBinding.ModelBindingHelper : object {
    private static ConcurrentDictionary`2<Type, ModelBinderAttribute> _modelBinderAttributeCache;
    private static ModelBindingHelper();
    internal static TModel CastOrDefault(object model);
    internal static string CreateIndexModelName(string parentName, int index);
    internal static string CreateIndexModelName(string parentName, string index);
    internal static string CreatePropertyModelName(string prefix, string propertyName);
    internal static string ConcatenateKeys(string prefix, string suffix);
    internal static IModelBinder GetPossibleBinderInstance(Type closedModelType, Type openModelType, Type openBinderType);
    internal static Object[] RawValueToObjectArray(object rawValue);
    internal static void ReplaceEmptyStringWithNull(ModelMetadata modelMetadata, Object& model);
    internal static bool TryGetProviderFromAttribute(Type modelType, ModelBinderAttribute modelBinderAttribute, ModelBinderProvider& provider);
    internal static bool TryGetProviderFromAttributes(Type modelType, ModelBinderProvider& provider);
    private static ModelBinderAttribute GetModelBinderAttribute(Type modelType);
    internal static void ValidateBindingContext(ModelBindingContext bindingContext);
    internal static void ValidateBindingContext(ModelBindingContext bindingContext, Type requiredType, bool allowNullModel);
}
internal class System.Web.Http.ModelBinding.ModelError : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public Exception Exception { get; private set; }
    public string ErrorMessage { get; private set; }
    public ModelError(Exception exception);
    public ModelError(Exception exception, string errorMessage);
    public ModelError(string errorMessage);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
}
internal class System.Web.Http.ModelBinding.ModelErrorCollection : Collection`1<ModelError> {
    public void Add(Exception exception);
    public void Add(string errorMessage);
}
internal class System.Web.Http.ModelBinding.ModelState : object {
    private ModelErrorCollection _errors;
    [CompilerGeneratedAttribute]
private ValueProviderResult <Value>k__BackingField;
    public ValueProviderResult Value { get; public set; }
    public ModelErrorCollection Errors { get; }
    [CompilerGeneratedAttribute]
public ValueProviderResult get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(ValueProviderResult value);
    public ModelErrorCollection get_Errors();
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Http.ModelBinding.ModelStateDictionary : object {
    private Dictionary`2<string, ModelState> _innerDictionary;
    [CompilerGeneratedAttribute]
private static Func`2<ModelState, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsValid { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<ModelState> Values { get; }
    public ModelState Item { get; public set; }
    public ModelStateDictionary(ModelStateDictionary dictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public bool get_IsValid();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<ModelState> get_Values();
    public sealed virtual ModelState get_Item(string key);
    public sealed virtual void set_Item(string key, ModelState value);
    public sealed virtual void Add(KeyValuePair`2<string, ModelState> item);
    public sealed virtual void Add(string key, ModelState value);
    public void AddModelError(string key, Exception exception);
    public void AddModelError(string key, string errorMessage);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ModelState>> GetEnumerator();
    private ModelState GetModelStateForKey(string key);
    public bool IsValidField(string key);
    public void Merge(ModelStateDictionary dictionary);
    public sealed virtual bool Remove(KeyValuePair`2<string, ModelState> item);
    public sealed virtual bool Remove(string key);
    public void SetModelValue(string key, ValueProviderResult value);
    public sealed virtual bool TryGetValue(string key, ModelState& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private static bool <get_IsValid>b__0(ModelState modelState);
}
internal class System.Web.Http.ModelBinding.ParameterBindingRulesCollection : Collection`1<Func`2<HttpParameterDescriptor, HttpParameterBinding>> {
    private static Func`2<HttpParameterDescriptor, HttpParameterBinding> TypeCheck(Type type, Func`2<HttpParameterDescriptor, HttpParameterBinding> func);
    public void Add(Type typeMatch, Func`2<HttpParameterDescriptor, HttpParameterBinding> funcInner);
    public void Insert(int index, Type typeMatch, Func`2<HttpParameterDescriptor, HttpParameterBinding> funcInner);
    public HttpParameterBinding LookupBinding(HttpParameterDescriptor parameter);
}
[AttributeUsageAttribute("64")]
internal class System.Web.Http.NonActionAttribute : Attribute {
}
internal class System.Web.Http.NonOwnedStream : Stream {
    [CompilerGeneratedAttribute]
private Stream <InnerStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    protected Stream InnerStream { get; protected set; }
    protected bool IsDisposed { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public NonOwnedStream(Stream innerStream);
    [CompilerGeneratedAttribute]
protected Stream get_InnerStream();
    [CompilerGeneratedAttribute]
protected void set_InnerStream(Stream value);
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void Close();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    protected void ThrowIfDisposed();
}
[AttributeUsageAttribute("68")]
internal class System.Web.Http.OverrideActionFiltersAttribute : Attribute {
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; }
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("68")]
internal class System.Web.Http.OverrideAuthenticationAttribute : Attribute {
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; }
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("68")]
internal class System.Web.Http.OverrideAuthorizationAttribute : Attribute {
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; }
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual Type get_FiltersToOverride();
}
[AttributeUsageAttribute("68")]
internal class System.Web.Http.OverrideExceptionFiltersAttribute : Attribute {
    public bool AllowMultiple { get; }
    public Type FiltersToOverride { get; }
    public sealed virtual bool get_AllowMultiple();
    public sealed virtual Type get_FiltersToOverride();
}
internal class System.Web.Http.Owin.ExceptionHandling.DefaultExceptionHandler : object {
    public sealed virtual Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken);
    private static void Handle(ExceptionHandlerContext context);
}
internal class System.Web.Http.Owin.ExceptionHandling.EmptyExceptionLogger : object {
    public sealed virtual Task LogAsync(ExceptionLoggerContext context, CancellationToken cancellationToken);
}
internal class System.Web.Http.Owin.HttpMessageHandlerAdapter : OwinMiddleware {
    private HttpMessageHandler _messageHandler;
    private HttpMessageInvoker _messageInvoker;
    private IHostBufferPolicySelector _bufferPolicySelector;
    private IExceptionLogger _exceptionLogger;
    private IExceptionHandler _exceptionHandler;
    private CancellationToken _appDisposing;
    private bool _disposed;
    public HttpMessageHandler MessageHandler { get; }
    public IHostBufferPolicySelector BufferPolicySelector { get; }
    public IExceptionLogger ExceptionLogger { get; }
    public IExceptionHandler ExceptionHandler { get; }
    public CancellationToken AppDisposing { get; }
    public HttpMessageHandlerAdapter(OwinMiddleware next, HttpMessageHandlerOptions options);
    [ObsoleteAttribute("Use the HttpMessageHandlerAdapter(OwinMiddleware, HttpMessageHandlerOptions) constructor instead.")]
public HttpMessageHandlerAdapter(OwinMiddleware next, HttpMessageHandler messageHandler, IHostBufferPolicySelector bufferPolicySelector);
    public HttpMessageHandler get_MessageHandler();
    public IHostBufferPolicySelector get_BufferPolicySelector();
    public IExceptionLogger get_ExceptionLogger();
    public IExceptionHandler get_ExceptionHandler();
    public CancellationToken get_AppDisposing();
    public virtual Task Invoke(IOwinContext context);
    [AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<InvokeCore>d__0")]
[DebuggerStepThroughAttribute]
private Task InvokeCore(IOwinContext context, IOwinRequest owinRequest, IOwinResponse owinResponse);
    private static HttpContent CreateStreamedRequestContent(IOwinRequest owinRequest);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<CreateBufferedRequestContentAsync>d__d")]
private static Task`1<HttpContent> CreateBufferedRequestContentAsync(IOwinRequest owinRequest, CancellationToken cancellationToken);
    private static HttpRequestMessage CreateRequestMessage(IOwinRequest owinRequest, HttpContent requestContent);
    private static void MapRequestProperties(HttpRequestMessage request, IOwinContext context);
    private static void SetPrincipal(IPrincipal user);
    private static bool IsSoftNotFound(HttpRequestMessage request, HttpResponseMessage response);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<BufferResponseContentAsync>d__13")]
private Task`1<HttpResponseMessage> BufferResponseContentAsync(HttpRequestMessage request, HttpResponseMessage response, CancellationToken cancellationToken);
    private Task`1<bool> PrepareHeadersAsync(HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    private Task`1<bool> ComputeContentLengthAsync(HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<HandleTryComputeLengthExceptionAsync>d__1c")]
[DebuggerStepThroughAttribute]
private Task`1<bool> HandleTryComputeLengthExceptionAsync(Exception exception, HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    private Task SendResponseMessageAsync(HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    private static void SetHeadersForEmptyResponse(IDictionary`2<string, String[]> headers);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Owin.HttpMessageHandlerAdapter/<SendResponseContentAsync>d__20")]
private Task SendResponseContentAsync(HttpRequestMessage request, HttpResponseMessage response, IOwinResponse owinResponse, CancellationToken cancellationToken);
    private static Task AbortResponseAsync();
    private static HttpMessageHandlerOptions CreateOptions(HttpMessageHandler messageHandler, IHostBufferPolicySelector bufferPolicySelector);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private void OnAppDisposing();
}
internal class System.Web.Http.Owin.HttpMessageHandlerOptions : object {
    [CompilerGeneratedAttribute]
private HttpMessageHandler <MessageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostBufferPolicySelector <BufferPolicySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionLogger <ExceptionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionHandler <ExceptionHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <AppDisposing>k__BackingField;
    public HttpMessageHandler MessageHandler { get; public set; }
    public IHostBufferPolicySelector BufferPolicySelector { get; public set; }
    public IExceptionLogger ExceptionLogger { get; public set; }
    public IExceptionHandler ExceptionHandler { get; public set; }
    public CancellationToken AppDisposing { get; public set; }
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_MessageHandler();
    [CompilerGeneratedAttribute]
public void set_MessageHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public IHostBufferPolicySelector get_BufferPolicySelector();
    [CompilerGeneratedAttribute]
public void set_BufferPolicySelector(IHostBufferPolicySelector value);
    [CompilerGeneratedAttribute]
public IExceptionLogger get_ExceptionLogger();
    [CompilerGeneratedAttribute]
public void set_ExceptionLogger(IExceptionLogger value);
    [CompilerGeneratedAttribute]
public IExceptionHandler get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public void set_ExceptionHandler(IExceptionHandler value);
    [CompilerGeneratedAttribute]
public CancellationToken get_AppDisposing();
    [CompilerGeneratedAttribute]
public void set_AppDisposing(CancellationToken value);
}
internal class System.Web.Http.Owin.OwinBufferPolicySelector : object {
    public sealed virtual bool UseBufferedInputStream(object hostContext);
    public sealed virtual bool UseBufferedOutputStream(HttpResponseMessage response);
}
internal static class System.Web.Http.Owin.OwinConstants : object {
    public static string ClientCertifiateKey;
    public static string IsLocalKey;
}
internal static class System.Web.Http.Owin.OwinExceptionCatchBlocks : object {
    private static ExceptionContextCatchBlock _httpMessageHandlerAdapterBufferContent;
    private static ExceptionContextCatchBlock _httpMessageHandlerAdapterBufferError;
    private static ExceptionContextCatchBlock _httpMessageHandlerAdapterComputeContentLength;
    private static ExceptionContextCatchBlock _httpMessageHandlerAdapterStreamContent;
    public static ExceptionContextCatchBlock HttpMessageHandlerAdapterBufferContent { get; }
    public static ExceptionContextCatchBlock HttpMessageHandlerAdapterBufferError { get; }
    public static ExceptionContextCatchBlock HttpMessageHandlerAdapterComputeContentLength { get; }
    public static ExceptionContextCatchBlock HttpMessageHandlerAdapterStreamContent { get; }
    private static OwinExceptionCatchBlocks();
    public static ExceptionContextCatchBlock get_HttpMessageHandlerAdapterBufferContent();
    public static ExceptionContextCatchBlock get_HttpMessageHandlerAdapterBufferError();
    public static ExceptionContextCatchBlock get_HttpMessageHandlerAdapterComputeContentLength();
    public static ExceptionContextCatchBlock get_HttpMessageHandlerAdapterStreamContent();
}
internal class System.Web.Http.Owin.OwinHttpRequestContext : HttpRequestContext {
    private IOwinContext _context;
    private HttpRequestMessage _request;
    private X509Certificate2 _clientCertificate;
    private bool _clientCertificateSet;
    private bool _includeErrorDetail;
    private bool _includeErrorDetailSet;
    private bool _isLocal;
    private bool _isLocalSet;
    private UrlHelper _url;
    private bool _urlSet;
    private string _virtualPathRoot;
    private bool _virtualPathRootSet;
    public IOwinContext Context { get; }
    public HttpRequestMessage Request { get; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public bool IncludeErrorDetail { get; public set; }
    public bool IsLocal { get; public set; }
    public IPrincipal Principal { get; public set; }
    public UrlHelper Url { get; public set; }
    public string VirtualPathRoot { get; public set; }
    public OwinHttpRequestContext(IOwinContext context, HttpRequestMessage request);
    public IOwinContext get_Context();
    public HttpRequestMessage get_Request();
    public virtual X509Certificate2 get_ClientCertificate();
    public virtual void set_ClientCertificate(X509Certificate2 value);
    public virtual bool get_IncludeErrorDetail();
    public virtual void set_IncludeErrorDetail(bool value);
    public virtual bool get_IsLocal();
    public virtual void set_IsLocal(bool value);
    public virtual IPrincipal get_Principal();
    public virtual void set_Principal(IPrincipal value);
    public virtual UrlHelper get_Url();
    public virtual void set_Url(UrlHelper value);
    public virtual string get_VirtualPathRoot();
    public virtual void set_VirtualPathRoot(string value);
}
[ExtensionAttribute]
internal static class System.Web.Http.Owin.OwinRequestExtensions : object {
    private static string ContentLengthHeaderName;
    private static string DisableRequestBufferingKey;
    [ExtensionAttribute]
public static void DisableBuffering(IOwinRequest request);
    [ExtensionAttribute]
public static Nullable`1<int> GetContentLength(IOwinRequest request);
}
[ExtensionAttribute]
internal static class System.Web.Http.Owin.OwinResponseExtensions : object {
    private static string DisableResponseBufferingKey;
    [ExtensionAttribute]
public static void DisableBuffering(IOwinResponse response);
}
internal class System.Web.Http.Owin.PassiveAuthenticationMessageHandler : DelegatingHandler {
    private static Lazy`1<IPrincipal> _anonymousPrincipal;
    [CompilerGeneratedAttribute]
private static Func`1<IPrincipal> CS$<>9__CachedAnonymousMethodDelegate6;
    private static PassiveAuthenticationMessageHandler();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Owin.PassiveAuthenticationMessageHandler/<SendAsync>d__0")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static void SetCurrentPrincipalToAnonymous(HttpRequestMessage request);
    private static void SuppressDefaultAuthenticationChallenges(HttpRequestMessage request);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethod3(HttpRequestMessage , CancellationToken );
    [CompilerGeneratedAttribute]
private static IPrincipal <.cctor>b__5();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class System.Web.Http.Owin.Properties.OwinResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string HttpAuthenticationChallengeContext_RequestMustNotBeNull { get; }
    internal static string HttpAuthenticationContext_RequestMustNotBeNull { get; }
    internal static string IAuthenticationManagerNotAvailable { get; }
    internal static string OwinContext_NullRequest { get; }
    internal static string OwinContext_NullResponse { get; }
    internal static string Request_RequestContextMustNotBeNull { get; }
    internal static string SendAsync_ReturnedNull { get; }
    internal static string TypePropertyMustNotBeNull { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_HttpAuthenticationChallengeContext_RequestMustNotBeNull();
    internal static string get_HttpAuthenticationContext_RequestMustNotBeNull();
    internal static string get_IAuthenticationManagerNotAvailable();
    internal static string get_OwinContext_NullRequest();
    internal static string get_OwinContext_NullResponse();
    internal static string get_Request_RequestContextMustNotBeNull();
    internal static string get_SendAsync_ReturnedNull();
    internal static string get_TypePropertyMustNotBeNull();
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
internal static class System.Web.Http.OwinHttpConfigurationExtensions : object {
    [ExtensionAttribute]
public static void SuppressDefaultHostAuthentication(HttpConfiguration configuration);
}
[AttributeUsageAttribute("2052")]
internal abstract class System.Web.Http.ParameterBindingAttribute : Attribute {
    public abstract virtual HttpParameterBinding GetBinding(HttpParameterDescriptor parameter);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class System.Web.Http.Properties.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class System.Web.Http.Properties.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionExecutor_UnexpectedTaskInstance { get; }
    internal static string ActionExecutor_WrappedTaskInstance { get; }
    internal static string ActionFilterAttribute_MustSupplyResponseOrException { get; }
    internal static string ActionSelector_AmbiguousMatchType { get; }
    internal static string ApiController_RequestMustNotBeNull { get; }
    internal static string ApiControllerActionInvoker_InvalidHttpActionResult { get; }
    internal static string ApiControllerActionInvoker_NullHttpActionResult { get; }
    internal static string ApiControllerActionSelector_ActionNameNotFound { get; }
    internal static string ApiControllerActionSelector_ActionNotFound { get; }
    internal static string ApiControllerActionSelector_AmbiguousMatch { get; }
    internal static string ApiControllerActionSelector_HttpMethodNotSupported { get; }
    internal static string AttributeRoutes_InvalidPrefix { get; }
    internal static string AttributeRoutes_InvalidTemplate { get; }
    internal static string AuthenticationFilterDidNothing { get; }
    internal static string AuthenticationFilterErrorResult { get; }
    internal static string AuthenticationFilterSetPrincipalToKnownIdentity { get; }
    internal static string AuthenticationFilterSetPrincipalToUnknownIdentity { get; }
    internal static string BadRequest { get; }
    internal static string BatchContentTypeMissing { get; }
    internal static string BatchMediaTypeNotSupported { get; }
    internal static string BatchRequestMissingContent { get; }
    internal static string CannotSupportSingletonInstance { get; }
    internal static string CollectionParameterContainsNullElement { get; }
    internal static string Common_PropertyNotFound { get; }
    internal static string Common_TypeMustDriveFromType { get; }
    internal static string ControllerNameNotFound { get; }
    internal static string DataAnnotationsModelValidatorProvider_ConstructorRequirements { get; }
    internal static string DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements { get; }
    internal static string DefaultControllerFactory_ControllerNameAmbiguous_WithRouteTemplate { get; }
    internal static string DefaultControllerFactory_ControllerNameNotFound { get; }
    internal static string DefaultControllerFactory_ErrorCreatingController { get; }
    internal static string DefaultInlineConstraintResolver_AmbiguousCtors { get; }
    internal static string DefaultInlineConstraintResolver_CouldNotFindCtor { get; }
    internal static string DefaultInlineConstraintResolver_TypeNotConstraint { get; }
    internal static string DefaultServices_InvalidServiceType { get; }
    internal static string DependencyResolver_BeginScopeReturnsNull { get; }
    internal static string DependencyResolverNoService { get; }
    internal static string DirectRoute_AmbiguousController { get; }
    internal static string DirectRoute_HandlerNotSupported { get; }
    internal static string DirectRoute_InvalidParameter_Action { get; }
    internal static string DirectRoute_InvalidParameter_Controller { get; }
    internal static string DirectRoute_MissingActionDescriptors { get; }
    internal static string ErrorOccurred { get; }
    internal static string HttpActionDescriptor_NoConverterForGenericParamterTypeExists { get; }
    internal static string HttpControllerContext_ConfigurationMustNotBeNull { get; }
    internal static string HttpRequestMessageExtensions_NoConfiguration { get; }
    internal static string HttpRequestMessageExtensions_NoContentNegotiator { get; }
    internal static string HttpRequestMessageExtensions_NoMatchingFormatter { get; }
    internal static string HttpResponseExceptionMessage { get; }
    internal static string HttpRouteBuilder_CouldNotResolveConstraint { get; }
    internal static string HttpServerDisposed { get; }
    internal static string JQuerySyntaxMissingClosingBracket { get; }
    internal static string MaxHttpCollectionKeyLimitReached { get; }
    internal static string MissingDataMemberIsRequired { get; }
    internal static string MissingRequiredMember { get; }
    internal static string ModelBinderConfig_ValueInvalid { get; }
    internal static string ModelBinderConfig_ValueRequired { get; }
    internal static string ModelBinderProviderCollection_InvalidBinderType { get; }
    internal static string ModelBinderUtil_ModelCannotBeNull { get; }
    internal static string ModelBinderUtil_ModelInstanceIsWrong { get; }
    internal static string ModelBinderUtil_ModelMetadataCannotBeNull { get; }
    internal static string ModelBinderUtil_ModelTypeIsWrong { get; }
    internal static string ModelBindingContext_ModelMetadataMustBeSet { get; }
    internal static string NoControllerCreated { get; }
    internal static string NoControllerSelected { get; }
    internal static string NoRouteData { get; }
    internal static string Object_NotYetInitialized { get; }
    internal static string OptionalBodyParameterNotSupported { get; }
    internal static string ParameterBindingCantHaveMultipleBodyParameters { get; }
    internal static string ParameterBindingConflictingAttributes { get; }
    internal static string ParameterBindingIllegalType { get; }
    internal static string ReflectedActionDescriptor_ParameterCannotBeNull { get; }
    internal static string ReflectedActionDescriptor_ParameterNotInDictionary { get; }
    internal static string ReflectedActionDescriptor_ParameterValueHasWrongType { get; }
    internal static string ReflectedHttpActionDescriptor_CannotCallOpenGenericMethods { get; }
    internal static string Request_RequestContextMustNotBeNull { get; }
    internal static string RequestContextConflict { get; }
    internal static string RequestIsNull { get; }
    internal static string RequestNotAuthorized { get; }
    internal static string ResourceNotFound { get; }
    internal static string ResponseMessageResultConverter_NullHttpResponseMessage { get; }
    internal static string Route_AddRemoveWithNoKeyNotSupported { get; }
    internal static string Route_CannotHaveCatchAllInMultiSegment { get; }
    internal static string Route_CannotHaveConsecutiveParameters { get; }
    internal static string Route_CannotHaveConsecutiveSeparators { get; }
    internal static string Route_CatchAllMustBeLast { get; }
    internal static string Route_InvalidParameterName { get; }
    internal static string Route_InvalidRouteTemplate { get; }
    internal static string Route_MismatchedParameter { get; }
    internal static string Route_RepeatedParameter { get; }
    internal static string Route_ValidationMustBeStringOrCustomConstraint { get; }
    internal static string RouteCollection_NameNotFound { get; }
    internal static string RoutePrefix_CannotSupportMultiRoutePrefix { get; }
    internal static string RoutePrefix_PrefixCannotBeNull { get; }
    internal static string SubRouteCollection_DuplicateRouteName { get; }
    internal static string TraceActionFilterMessage { get; }
    internal static string TraceActionInvokeMessage { get; }
    internal static string TraceActionReturnValue { get; }
    internal static string TraceActionSelectedMessage { get; }
    internal static string TraceBeginParameterBind { get; }
    internal static string TraceCancelledMessage { get; }
    internal static string TraceEndParameterBind { get; }
    internal static string TraceEndParameterBindNoBind { get; }
    internal static string TraceGetPerRequestFormatterEndMessage { get; }
    internal static string TraceGetPerRequestFormatterEndMessageNew { get; }
    internal static string TraceGetPerRequestFormatterMessage { get; }
    internal static string TraceGetPerRequestNullFormatterEndMessage { get; }
    internal static string TraceHttpControllerTypeResolverError { get; }
    internal static string TraceInvokingAction { get; }
    internal static string TraceModelStateErrorMessage { get; }
    internal static string TraceModelStateInvalidMessage { get; }
    internal static string TraceNegotiateFormatter { get; }
    internal static string TraceNoneObjectMessage { get; }
    internal static string TraceReadFromStreamMessage { get; }
    internal static string TraceReadFromStreamValueMessage { get; }
    internal static string TraceRequestCompleteMessage { get; }
    internal static string TraceRouteMessage { get; }
    internal static string TraceSelectedFormatter { get; }
    internal static string TraceUnknownMessage { get; }
    internal static string TraceValidModelState { get; }
    internal static string TraceWriteToStreamMessage { get; }
    internal static string TypeInstanceMustNotBeNull { get; }
    internal static string TypeMethodMustNotReturnNull { get; }
    internal static string TypePropertyMustNotBeNull { get; }
    internal static string UnsupportedMediaType { get; }
    internal static string UnsupportedMediaTypeNoContentType { get; }
    internal static string UrlHelper_LinkMustNotReturnNull { get; }
    internal static string ValidatableObjectAdapter_IncompatibleType { get; }
    internal static string Validation_ValueNotFound { get; }
    internal static string ValidationAttributeOnField { get; }
    internal static string ValidationAttributeOnNonPublicProperty { get; }
    internal static string ValidModelState { get; }
    internal static string ValueProviderFactory_Cannot_Create { get; }
    internal static string ValueProviderResult_ConversionThrew { get; }
    internal static string ValueProviderResult_NoConverterExists { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionExecutor_UnexpectedTaskInstance();
    internal static string get_ActionExecutor_WrappedTaskInstance();
    internal static string get_ActionFilterAttribute_MustSupplyResponseOrException();
    internal static string get_ActionSelector_AmbiguousMatchType();
    internal static string get_ApiController_RequestMustNotBeNull();
    internal static string get_ApiControllerActionInvoker_InvalidHttpActionResult();
    internal static string get_ApiControllerActionInvoker_NullHttpActionResult();
    internal static string get_ApiControllerActionSelector_ActionNameNotFound();
    internal static string get_ApiControllerActionSelector_ActionNotFound();
    internal static string get_ApiControllerActionSelector_AmbiguousMatch();
    internal static string get_ApiControllerActionSelector_HttpMethodNotSupported();
    internal static string get_AttributeRoutes_InvalidPrefix();
    internal static string get_AttributeRoutes_InvalidTemplate();
    internal static string get_AuthenticationFilterDidNothing();
    internal static string get_AuthenticationFilterErrorResult();
    internal static string get_AuthenticationFilterSetPrincipalToKnownIdentity();
    internal static string get_AuthenticationFilterSetPrincipalToUnknownIdentity();
    internal static string get_BadRequest();
    internal static string get_BatchContentTypeMissing();
    internal static string get_BatchMediaTypeNotSupported();
    internal static string get_BatchRequestMissingContent();
    internal static string get_CannotSupportSingletonInstance();
    internal static string get_CollectionParameterContainsNullElement();
    internal static string get_Common_PropertyNotFound();
    internal static string get_Common_TypeMustDriveFromType();
    internal static string get_ControllerNameNotFound();
    internal static string get_DataAnnotationsModelValidatorProvider_ConstructorRequirements();
    internal static string get_DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements();
    internal static string get_DefaultControllerFactory_ControllerNameAmbiguous_WithRouteTemplate();
    internal static string get_DefaultControllerFactory_ControllerNameNotFound();
    internal static string get_DefaultControllerFactory_ErrorCreatingController();
    internal static string get_DefaultInlineConstraintResolver_AmbiguousCtors();
    internal static string get_DefaultInlineConstraintResolver_CouldNotFindCtor();
    internal static string get_DefaultInlineConstraintResolver_TypeNotConstraint();
    internal static string get_DefaultServices_InvalidServiceType();
    internal static string get_DependencyResolver_BeginScopeReturnsNull();
    internal static string get_DependencyResolverNoService();
    internal static string get_DirectRoute_AmbiguousController();
    internal static string get_DirectRoute_HandlerNotSupported();
    internal static string get_DirectRoute_InvalidParameter_Action();
    internal static string get_DirectRoute_InvalidParameter_Controller();
    internal static string get_DirectRoute_MissingActionDescriptors();
    internal static string get_ErrorOccurred();
    internal static string get_HttpActionDescriptor_NoConverterForGenericParamterTypeExists();
    internal static string get_HttpControllerContext_ConfigurationMustNotBeNull();
    internal static string get_HttpRequestMessageExtensions_NoConfiguration();
    internal static string get_HttpRequestMessageExtensions_NoContentNegotiator();
    internal static string get_HttpRequestMessageExtensions_NoMatchingFormatter();
    internal static string get_HttpResponseExceptionMessage();
    internal static string get_HttpRouteBuilder_CouldNotResolveConstraint();
    internal static string get_HttpServerDisposed();
    internal static string get_JQuerySyntaxMissingClosingBracket();
    internal static string get_MaxHttpCollectionKeyLimitReached();
    internal static string get_MissingDataMemberIsRequired();
    internal static string get_MissingRequiredMember();
    internal static string get_ModelBinderConfig_ValueInvalid();
    internal static string get_ModelBinderConfig_ValueRequired();
    internal static string get_ModelBinderProviderCollection_InvalidBinderType();
    internal static string get_ModelBinderUtil_ModelCannotBeNull();
    internal static string get_ModelBinderUtil_ModelInstanceIsWrong();
    internal static string get_ModelBinderUtil_ModelMetadataCannotBeNull();
    internal static string get_ModelBinderUtil_ModelTypeIsWrong();
    internal static string get_ModelBindingContext_ModelMetadataMustBeSet();
    internal static string get_NoControllerCreated();
    internal static string get_NoControllerSelected();
    internal static string get_NoRouteData();
    internal static string get_Object_NotYetInitialized();
    internal static string get_OptionalBodyParameterNotSupported();
    internal static string get_ParameterBindingCantHaveMultipleBodyParameters();
    internal static string get_ParameterBindingConflictingAttributes();
    internal static string get_ParameterBindingIllegalType();
    internal static string get_ReflectedActionDescriptor_ParameterCannotBeNull();
    internal static string get_ReflectedActionDescriptor_ParameterNotInDictionary();
    internal static string get_ReflectedActionDescriptor_ParameterValueHasWrongType();
    internal static string get_ReflectedHttpActionDescriptor_CannotCallOpenGenericMethods();
    internal static string get_Request_RequestContextMustNotBeNull();
    internal static string get_RequestContextConflict();
    internal static string get_RequestIsNull();
    internal static string get_RequestNotAuthorized();
    internal static string get_ResourceNotFound();
    internal static string get_ResponseMessageResultConverter_NullHttpResponseMessage();
    internal static string get_Route_AddRemoveWithNoKeyNotSupported();
    internal static string get_Route_CannotHaveCatchAllInMultiSegment();
    internal static string get_Route_CannotHaveConsecutiveParameters();
    internal static string get_Route_CannotHaveConsecutiveSeparators();
    internal static string get_Route_CatchAllMustBeLast();
    internal static string get_Route_InvalidParameterName();
    internal static string get_Route_InvalidRouteTemplate();
    internal static string get_Route_MismatchedParameter();
    internal static string get_Route_RepeatedParameter();
    internal static string get_Route_ValidationMustBeStringOrCustomConstraint();
    internal static string get_RouteCollection_NameNotFound();
    internal static string get_RoutePrefix_CannotSupportMultiRoutePrefix();
    internal static string get_RoutePrefix_PrefixCannotBeNull();
    internal static string get_SubRouteCollection_DuplicateRouteName();
    internal static string get_TraceActionFilterMessage();
    internal static string get_TraceActionInvokeMessage();
    internal static string get_TraceActionReturnValue();
    internal static string get_TraceActionSelectedMessage();
    internal static string get_TraceBeginParameterBind();
    internal static string get_TraceCancelledMessage();
    internal static string get_TraceEndParameterBind();
    internal static string get_TraceEndParameterBindNoBind();
    internal static string get_TraceGetPerRequestFormatterEndMessage();
    internal static string get_TraceGetPerRequestFormatterEndMessageNew();
    internal static string get_TraceGetPerRequestFormatterMessage();
    internal static string get_TraceGetPerRequestNullFormatterEndMessage();
    internal static string get_TraceHttpControllerTypeResolverError();
    internal static string get_TraceInvokingAction();
    internal static string get_TraceModelStateErrorMessage();
    internal static string get_TraceModelStateInvalidMessage();
    internal static string get_TraceNegotiateFormatter();
    internal static string get_TraceNoneObjectMessage();
    internal static string get_TraceReadFromStreamMessage();
    internal static string get_TraceReadFromStreamValueMessage();
    internal static string get_TraceRequestCompleteMessage();
    internal static string get_TraceRouteMessage();
    internal static string get_TraceSelectedFormatter();
    internal static string get_TraceUnknownMessage();
    internal static string get_TraceValidModelState();
    internal static string get_TraceWriteToStreamMessage();
    internal static string get_TypeInstanceMustNotBeNull();
    internal static string get_TypeMethodMustNotReturnNull();
    internal static string get_TypePropertyMustNotBeNull();
    internal static string get_UnsupportedMediaType();
    internal static string get_UnsupportedMediaTypeNoContentType();
    internal static string get_UrlHelper_LinkMustNotReturnNull();
    internal static string get_ValidatableObjectAdapter_IncompatibleType();
    internal static string get_Validation_ValueNotFound();
    internal static string get_ValidationAttributeOnField();
    internal static string get_ValidationAttributeOnNonPublicProperty();
    internal static string get_ValidModelState();
    internal static string get_ValueProviderFactory_Cannot_Create();
    internal static string get_ValueProviderResult_ConversionThrew();
    internal static string get_ValueProviderResult_NoConverterExists();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Web.Http.Properties.System.Web.Http.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class System.Web.Http.Properties.System.Web.Http.Owin.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.Properties.System.Web.Http.Tracing.CommonWebApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentInvalidAbsoluteUri { get; }
    internal static string ArgumentInvalidHttpUriScheme { get; }
    internal static string ArgumentMustBeGreaterThanOrEqualTo { get; }
    internal static string ArgumentMustBeLessThanOrEqualTo { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentUriHasQueryOrFragment { get; }
    internal static string InvalidEnumArgument { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentInvalidAbsoluteUri();
    internal static string get_ArgumentInvalidHttpUriScheme();
    internal static string get_ArgumentMustBeGreaterThanOrEqualTo();
    internal static string get_ArgumentMustBeLessThanOrEqualTo();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentUriHasQueryOrFragment();
    internal static string get_InvalidEnumArgument();
    [CompilerGeneratedAttribute]
private static bool <get_ResourceManager>b__0(string s);
}
internal class System.Web.Http.Results.BadRequestErrorMessageResult : object {
    private string _message;
    private IDependencyProvider<HttpError> _dependencies;
    public string Message { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public BadRequestErrorMessageResult(string message, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public BadRequestErrorMessageResult(string message, ApiController controller);
    private BadRequestErrorMessageResult(string message, IDependencyProvider<HttpError> dependencies);
    public string get_Message();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class System.Web.Http.Results.BadRequestResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public BadRequestResult(HttpRequestMessage request);
    public BadRequestResult(ApiController controller);
    private BadRequestResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Results.ConflictResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public ConflictResult(HttpRequestMessage request);
    public ConflictResult(ApiController controller);
    private ConflictResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1 : object {
    private string _routeName;
    private IDictionary`2<string, object> _routeValues;
    private T _content;
    private IDependencyProvider<T> _dependencies;
    public string RouteName { get; }
    public IDictionary`2<string, object> RouteValues { get; }
    public T Content { get; }
    public UrlHelper UrlFactory { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public CreatedAtRouteNegotiatedContentResult`1(string routeName, IDictionary`2<string, object> routeValues, T content, UrlHelper urlFactory, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public CreatedAtRouteNegotiatedContentResult`1(string routeName, IDictionary`2<string, object> routeValues, T content, ApiController controller);
    private CreatedAtRouteNegotiatedContentResult`1(string routeName, IDictionary`2<string, object> routeValues, T content, IDependencyProvider<T> dependencies);
    public string get_RouteName();
    public IDictionary`2<string, object> get_RouteValues();
    public T get_Content();
    public UrlHelper get_UrlFactory();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class System.Web.Http.Results.CreatedNegotiatedContentResult`1 : object {
    private Uri _location;
    private T _content;
    private IDependencyProvider<T> _dependencies;
    public Uri Location { get; }
    public T Content { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public CreatedNegotiatedContentResult`1(Uri location, T content, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public CreatedNegotiatedContentResult`1(Uri location, T content, ApiController controller);
    private CreatedNegotiatedContentResult`1(Uri location, T content, IDependencyProvider<T> dependencies);
    public Uri get_Location();
    public T get_Content();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class System.Web.Http.Results.ExceptionResult : object {
    private Exception _exception;
    private IDependencyProvider _dependencies;
    public Exception Exception { get; }
    public bool IncludeErrorDetail { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public ExceptionResult(Exception exception, bool includeErrorDetail, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public ExceptionResult(Exception exception, ApiController controller);
    private ExceptionResult(Exception exception, IDependencyProvider dependencies);
    public Exception get_Exception();
    public bool get_IncludeErrorDetail();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class System.Web.Http.Results.FormattedContentResult`1 : object {
    private HttpStatusCode _statusCode;
    private T _content;
    private MediaTypeFormatter _formatter;
    private MediaTypeHeaderValue _mediaType;
    private IDependencyProvider _dependencies;
    public HttpStatusCode StatusCode { get; }
    public T Content { get; }
    public MediaTypeFormatter Formatter { get; }
    public MediaTypeHeaderValue MediaType { get; }
    public HttpRequestMessage Request { get; }
    public FormattedContentResult`1(HttpStatusCode statusCode, T content, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, HttpRequestMessage request);
    public FormattedContentResult`1(HttpStatusCode statusCode, T content, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, ApiController controller);
    private FormattedContentResult`1(HttpStatusCode statusCode, T content, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, IDependencyProvider dependencies);
    public HttpStatusCode get_StatusCode();
    public T get_Content();
    public MediaTypeFormatter get_Formatter();
    public MediaTypeHeaderValue get_MediaType();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
    internal static HttpResponseMessage Execute(HttpStatusCode statusCode, T content, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, HttpRequestMessage request);
}
internal class System.Web.Http.Results.InternalServerErrorResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public InternalServerErrorResult(HttpRequestMessage request);
    public InternalServerErrorResult(ApiController controller);
    private InternalServerErrorResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Results.InvalidModelStateResult : object {
    private ModelStateDictionary _modelState;
    private IDependencyProvider _dependencies;
    public ModelStateDictionary ModelState { get; }
    public bool IncludeErrorDetail { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public InvalidModelStateResult(ModelStateDictionary modelState, bool includeErrorDetail, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public InvalidModelStateResult(ModelStateDictionary modelState, ApiController controller);
    private InvalidModelStateResult(ModelStateDictionary modelState, IDependencyProvider dependencies);
    public ModelStateDictionary get_ModelState();
    public bool get_IncludeErrorDetail();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class System.Web.Http.Results.JsonResult`1 : object {
    private T _content;
    private JsonSerializerSettings _serializerSettings;
    private Encoding _encoding;
    private IDependencyProvider _dependencies;
    public T Content { get; }
    public JsonSerializerSettings SerializerSettings { get; }
    public Encoding Encoding { get; }
    public HttpRequestMessage Request { get; }
    public JsonResult`1(T content, JsonSerializerSettings serializerSettings, Encoding encoding, HttpRequestMessage request);
    public JsonResult`1(T content, JsonSerializerSettings serializerSettings, Encoding encoding, ApiController controller);
    private JsonResult`1(T content, JsonSerializerSettings serializerSettings, Encoding encoding, IDependencyProvider dependencies);
    public T get_Content();
    public JsonSerializerSettings get_SerializerSettings();
    public Encoding get_Encoding();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
    private ArraySegment`1<byte> Serialize();
}
internal class System.Web.Http.Results.NegotiatedContentResult`1 : object {
    private HttpStatusCode _statusCode;
    private T _content;
    private IDependencyProvider<T> _dependencies;
    public HttpStatusCode StatusCode { get; }
    public T Content { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public NegotiatedContentResult`1(HttpStatusCode statusCode, T content, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public NegotiatedContentResult`1(HttpStatusCode statusCode, T content, ApiController controller);
    private NegotiatedContentResult`1(HttpStatusCode statusCode, T content, IDependencyProvider<T> dependencies);
    public HttpStatusCode get_StatusCode();
    public T get_Content();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
    internal static HttpResponseMessage Execute(HttpStatusCode statusCode, T content, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
}
internal class System.Web.Http.Results.NotFoundResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public NotFoundResult(HttpRequestMessage request);
    public NotFoundResult(ApiController controller);
    private NotFoundResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Results.OkNegotiatedContentResult`1 : object {
    private T _content;
    private IDependencyProvider<T> _dependencies;
    public T Content { get; }
    public IContentNegotiator ContentNegotiator { get; }
    public HttpRequestMessage Request { get; }
    public IEnumerable`1<MediaTypeFormatter> Formatters { get; }
    public OkNegotiatedContentResult`1(T content, IContentNegotiator contentNegotiator, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    public OkNegotiatedContentResult`1(T content, ApiController controller);
    private OkNegotiatedContentResult`1(T content, IDependencyProvider<T> dependencies);
    public T get_Content();
    public IContentNegotiator get_ContentNegotiator();
    public HttpRequestMessage get_Request();
    public IEnumerable`1<MediaTypeFormatter> get_Formatters();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Results.OkResult : object {
    private IDependencyProvider _dependencies;
    public HttpRequestMessage Request { get; }
    public OkResult(HttpRequestMessage request);
    public OkResult(ApiController controller);
    private OkResult(IDependencyProvider dependencies);
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Results.RedirectResult : object {
    private Uri _location;
    private IDependencyProvider _dependencies;
    public Uri Location { get; }
    public HttpRequestMessage Request { get; }
    public RedirectResult(Uri location, HttpRequestMessage request);
    public RedirectResult(Uri location, ApiController controller);
    private RedirectResult(Uri location, IDependencyProvider dependencies);
    public Uri get_Location();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class System.Web.Http.Results.RedirectToRouteResult : object {
    private string _routeName;
    private IDictionary`2<string, object> _routeValues;
    private IDependencyProvider _dependencies;
    public string RouteName { get; }
    public IDictionary`2<string, object> RouteValues { get; }
    public UrlHelper UrlFactory { get; }
    public HttpRequestMessage Request { get; }
    public RedirectToRouteResult(string routeName, IDictionary`2<string, object> routeValues, UrlHelper urlFactory, HttpRequestMessage request);
    public RedirectToRouteResult(string routeName, IDictionary`2<string, object> routeValues, ApiController controller);
    private RedirectToRouteResult(string routeName, IDictionary`2<string, object> routeValues, IDependencyProvider dependencies);
    public string get_RouteName();
    public IDictionary`2<string, object> get_RouteValues();
    public UrlHelper get_UrlFactory();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
internal class System.Web.Http.Results.ResponseMessageResult : object {
    private HttpResponseMessage _response;
    public HttpResponseMessage Response { get; }
    public ResponseMessageResult(HttpResponseMessage response);
    public HttpResponseMessage get_Response();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}
internal class System.Web.Http.Results.StatusCodeResult : object {
    private HttpStatusCode _statusCode;
    private IDependencyProvider _dependencies;
    public HttpStatusCode StatusCode { get; }
    public HttpRequestMessage Request { get; }
    public StatusCodeResult(HttpStatusCode statusCode, HttpRequestMessage request);
    public StatusCodeResult(HttpStatusCode statusCode, ApiController controller);
    private StatusCodeResult(HttpStatusCode statusCode, IDependencyProvider dependencies);
    public HttpStatusCode get_StatusCode();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
    internal static HttpResponseMessage Execute(HttpStatusCode statusCode, HttpRequestMessage request);
}
internal class System.Web.Http.Results.UnauthorizedResult : object {
    private IEnumerable`1<AuthenticationHeaderValue> _challenges;
    private IDependencyProvider _dependencies;
    public IEnumerable`1<AuthenticationHeaderValue> Challenges { get; }
    public HttpRequestMessage Request { get; }
    public UnauthorizedResult(IEnumerable`1<AuthenticationHeaderValue> challenges, HttpRequestMessage request);
    public UnauthorizedResult(IEnumerable`1<AuthenticationHeaderValue> challenges, ApiController controller);
    private UnauthorizedResult(IEnumerable`1<AuthenticationHeaderValue> challenges, IDependencyProvider dependencies);
    public IEnumerable`1<AuthenticationHeaderValue> get_Challenges();
    public HttpRequestMessage get_Request();
    public virtual Task`1<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
    private HttpResponseMessage Execute();
}
[AttributeUsageAttribute("68")]
internal class System.Web.Http.RouteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Name { get; public set; }
    public int Order { get; public set; }
    public string Template { get; private set; }
    public RouteAttribute(string template);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Template();
    [CompilerGeneratedAttribute]
private void set_Template(string value);
    private sealed virtual override RouteEntry System.Web.Http.Routing.IDirectRouteFactory.CreateRoute(DirectRouteFactoryContext context);
}
internal class System.Web.Http.RouteParameter : object {
    public static RouteParameter Optional;
    private static RouteParameter();
    public virtual string ToString();
}
[AttributeUsageAttribute("4")]
internal class System.Web.Http.RoutePrefixAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; private set; }
    public RoutePrefixAttribute(string prefix);
    [CompilerGeneratedAttribute]
public virtual string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
}
internal static class System.Web.Http.Routing.AttributeRoutingMapper : object {
    private static string AttributeRouteName;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, HttpActionDescriptor>, IEnumerable`1<HttpActionDescriptor>> CS$<>9__CachedAnonymousMethodDelegate7;
    public static void MapAttributeRoutes(HttpConfiguration configuration, IInlineConstraintResolver constraintResolver, IDirectRouteProvider directRouteProvider);
    private static void AddGenerationHooksForSubRoutes(HttpRouteCollection routeTable, IEnumerable`1<RouteEntry> entries);
    private static void AddRouteEntries(SubRouteCollection collector, HttpConfiguration configuration, IInlineConstraintResolver constraintResolver, IDirectRouteProvider directRouteProvider);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<HttpActionDescriptor> <AddRouteEntries>b__6(IGrouping`2<string, HttpActionDescriptor> g);
}
internal class System.Web.Http.Routing.BoundRouteTemplate : object {
    [CompilerGeneratedAttribute]
private string <BoundTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRouteValueDictionary <Values>k__BackingField;
    public string BoundTemplate { get; public set; }
    public HttpRouteValueDictionary Values { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BoundTemplate();
    [CompilerGeneratedAttribute]
public void set_BoundTemplate(string value);
    [CompilerGeneratedAttribute]
public HttpRouteValueDictionary get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(HttpRouteValueDictionary value);
}
[DebuggerDisplayAttribute("{DebuggerToString()}")]
internal class System.Web.Http.Routing.CandidateAction : object {
    [CompilerGeneratedAttribute]
private HttpActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Precedence>k__BackingField;
    public HttpActionDescriptor ActionDescriptor { get; public set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    [CompilerGeneratedAttribute]
public HttpActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public void set_ActionDescriptor(HttpActionDescriptor value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public decimal get_Precedence();
    [CompilerGeneratedAttribute]
public void set_Precedence(decimal value);
    public bool MatchName(string actionName);
    public bool MatchVerb(HttpMethod method);
    internal string DebuggerToString();
}
internal class System.Web.Http.Routing.Constraints.AlphaRouteConstraint : RegexRouteConstraint {
}
internal class System.Web.Http.Routing.Constraints.BoolRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.CompoundRouteConstraint : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IHttpRouteConstraint> <Constraints>k__BackingField;
    public IEnumerable`1<IHttpRouteConstraint> Constraints { get; private set; }
    public CompoundRouteConstraint(IList`1<IHttpRouteConstraint> constraints);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IHttpRouteConstraint> get_Constraints();
    [CompilerGeneratedAttribute]
private void set_Constraints(IEnumerable`1<IHttpRouteConstraint> value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.DateTimeRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.DecimalRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.DoubleRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.FloatRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.GuidRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.IntRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.LengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxLength>k__BackingField;
    public Nullable`1<int> Length { get; private set; }
    public Nullable`1<int> MinLength { get; private set; }
    public Nullable`1<int> MaxLength { get; private set; }
    public LengthRouteConstraint(int length);
    public LengthRouteConstraint(int minLength, int maxLength);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinLength();
    [CompilerGeneratedAttribute]
private void set_MinLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxLength();
    [CompilerGeneratedAttribute]
private void set_MaxLength(Nullable`1<int> value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.LongRouteConstraint : object {
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    public int MaxLength { get; private set; }
    public MaxLengthRouteConstraint(int maxLength);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
private void set_MaxLength(int value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.MaxRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Max>k__BackingField;
    public long Max { get; private set; }
    public MaxRouteConstraint(long max);
    [CompilerGeneratedAttribute]
public long get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(long value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.MinLengthRouteConstraint : object {
    [CompilerGeneratedAttribute]
private int <MinLength>k__BackingField;
    public int MinLength { get; private set; }
    public MinLengthRouteConstraint(int minLength);
    [CompilerGeneratedAttribute]
public int get_MinLength();
    [CompilerGeneratedAttribute]
private void set_MinLength(int value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.MinRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Min>k__BackingField;
    public long Min { get; private set; }
    public MinRouteConstraint(long min);
    [CompilerGeneratedAttribute]
public long get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(long value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.OptionalRouteConstraint : object {
    [CompilerGeneratedAttribute]
private IHttpRouteConstraint <InnerConstraint>k__BackingField;
    public IHttpRouteConstraint InnerConstraint { get; private set; }
    public OptionalRouteConstraint(IHttpRouteConstraint innerConstraint);
    [CompilerGeneratedAttribute]
public IHttpRouteConstraint get_InnerConstraint();
    [CompilerGeneratedAttribute]
private void set_InnerConstraint(IHttpRouteConstraint value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.RangeRouteConstraint : object {
    [CompilerGeneratedAttribute]
private long <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Max>k__BackingField;
    public long Min { get; private set; }
    public long Max { get; private set; }
    public RangeRouteConstraint(long min, long max);
    [CompilerGeneratedAttribute]
public long get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(long value);
    [CompilerGeneratedAttribute]
public long get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(long value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.Constraints.RegexRouteConstraint : object {
    private Regex _regex;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    public string Pattern { get; private set; }
    public RegexRouteConstraint(string pattern);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
private void set_Pattern(string value);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.DefaultDirectRouteProvider : object {
    public virtual IReadOnlyList`1<RouteEntry> GetDirectRoutes(HttpControllerDescriptor controllerDescriptor, IReadOnlyList`1<HttpActionDescriptor> actionDescriptors, IInlineConstraintResolver constraintResolver);
    protected virtual IReadOnlyList`1<IDirectRouteFactory> GetControllerRouteFactories(HttpControllerDescriptor controllerDescriptor);
    protected virtual IReadOnlyList`1<IDirectRouteFactory> GetActionRouteFactories(HttpActionDescriptor actionDescriptor);
    protected virtual IReadOnlyList`1<RouteEntry> GetControllerDirectRoutes(HttpControllerDescriptor controllerDescriptor, IReadOnlyList`1<HttpActionDescriptor> actionDescriptors, IReadOnlyList`1<IDirectRouteFactory> factories, IInlineConstraintResolver constraintResolver);
    protected virtual IReadOnlyList`1<RouteEntry> GetActionDirectRoutes(HttpActionDescriptor actionDescriptor, IReadOnlyList`1<IDirectRouteFactory> factories, IInlineConstraintResolver constraintResolver);
    protected virtual string GetRoutePrefix(HttpControllerDescriptor controllerDescriptor);
    private static IReadOnlyList`1<RouteEntry> CreateRouteEntries(string prefix, IReadOnlyCollection`1<IDirectRouteFactory> factories, IReadOnlyCollection`1<HttpActionDescriptor> actions, IInlineConstraintResolver constraintResolver, bool targetIsAction);
    private static RouteEntry CreateRouteEntry(string prefix, IDirectRouteFactory factory, IReadOnlyCollection`1<HttpActionDescriptor> actions, IInlineConstraintResolver constraintResolver, bool targetIsAction);
}
internal class System.Web.Http.Routing.DefaultInlineConstraintResolver : object {
    private IDictionary`2<string, Type> _inlineConstraintMap;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public IDictionary`2<string, Type> ConstraintMap { get; }
    public IDictionary`2<string, Type> get_ConstraintMap();
    private static IDictionary`2<string, Type> GetDefaultConstraintMap();
    public virtual IHttpRouteConstraint ResolveConstraint(string inlineConstraint);
    private static object CreateConstraint(Type constraintType, string argumentString);
    private static Object[] ConvertArguments(ParameterInfo[] parameterInfos, String[] arguments);
    [CompilerGeneratedAttribute]
private static string <CreateConstraint>b__1(string argument);
}
internal class System.Web.Http.Routing.DirectRouteBuilder : object {
    private HttpActionDescriptor[] _actions;
    private bool _targetIsAction;
    private string _template;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Defaults>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <DataTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpParsedRoute <ParsedRoute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Precedence>k__BackingField;
    public string Name { get; public set; }
    public string Template { get; public set; }
    public IDictionary`2<string, object> Defaults { get; public set; }
    public IDictionary`2<string, object> Constraints { get; public set; }
    public IDictionary`2<string, object> DataTokens { get; public set; }
    internal HttpParsedRoute ParsedRoute { get; internal set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    public IReadOnlyCollection`1<HttpActionDescriptor> Actions { get; }
    public bool TargetIsAction { get; }
    public DirectRouteBuilder(IReadOnlyCollection`1<HttpActionDescriptor> actions, bool targetIsAction);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    public sealed virtual string get_Template();
    public sealed virtual void set_Template(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Defaults();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Defaults(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Constraints();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Constraints(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_DataTokens();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DataTokens(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
internal HttpParsedRoute get_ParsedRoute();
    [CompilerGeneratedAttribute]
internal void set_ParsedRoute(HttpParsedRoute value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Order(int value);
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_Precedence();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Precedence(decimal value);
    public sealed virtual IReadOnlyCollection`1<HttpActionDescriptor> get_Actions();
    public sealed virtual bool get_TargetIsAction();
    public virtual RouteEntry Build();
    internal virtual void ValidateParameters(HttpParsedRoute parsedRoute);
    internal static void ValidateRouteEntry(RouteEntry entry);
    private static HttpRouteValueDictionary Copy(IDictionary`2<string, object> routeDictionary);
}
internal class System.Web.Http.Routing.DirectRouteFactoryContext : object {
    private string _actionName;
    private string _prefix;
    private IReadOnlyCollection`1<HttpActionDescriptor> _actions;
    private IInlineConstraintResolver _inlineConstraintResolver;
    private bool _targetIsAction;
    public string Prefix { get; }
    public IReadOnlyCollection`1<HttpActionDescriptor> Actions { get; }
    public IInlineConstraintResolver InlineConstraintResolver { get; }
    public bool TargetIsAction { get; }
    public DirectRouteFactoryContext(string prefix, IReadOnlyCollection`1<HttpActionDescriptor> actions, IInlineConstraintResolver inlineConstraintResolver, bool targetIsAction);
    public string get_Prefix();
    public IReadOnlyCollection`1<HttpActionDescriptor> get_Actions();
    public IInlineConstraintResolver get_InlineConstraintResolver();
    public bool get_TargetIsAction();
    public IDirectRouteBuilder CreateBuilder(string template);
    internal virtual IDirectRouteBuilder CreateBuilderInternal(string template);
    public IDirectRouteBuilder CreateBuilder(string template, IInlineConstraintResolver constraintResolver);
    private static string BuildRouteTemplate(string routePrefix, string routeTemplate);
    private void ValidateTemplate(string template);
}
internal class System.Web.Http.Routing.HttpMethodConstraint : object {
    [CompilerGeneratedAttribute]
private Collection`1<HttpMethod> <AllowedMethods>k__BackingField;
    public Collection`1<HttpMethod> AllowedMethods { get; private set; }
    public HttpMethodConstraint(HttpMethod[] allowedMethods);
    [CompilerGeneratedAttribute]
public Collection`1<HttpMethod> get_AllowedMethods();
    [CompilerGeneratedAttribute]
private void set_AllowedMethods(Collection`1<HttpMethod> value);
    protected virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
    private sealed virtual override bool System.Web.Http.Routing.IHttpRouteConstraint.Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal class System.Web.Http.Routing.HttpParsedRoute : object {
    [CompilerGeneratedAttribute]
private List`1<PathSegment> <PathSegments>k__BackingField;
    public List`1<PathSegment> PathSegments { get; private set; }
    public HttpParsedRoute(List`1<PathSegment> pathSegments);
    [CompilerGeneratedAttribute]
public List`1<PathSegment> get_PathSegments();
    [CompilerGeneratedAttribute]
private void set_PathSegments(List`1<PathSegment> value);
    public BoundRouteTemplate Bind(IDictionary`2<string, object> currentValues, IDictionary`2<string, object> values, HttpRouteValueDictionary defaultValues, HttpRouteValueDictionary constraints);
    private static string EscapeReservedCharacters(Match m);
    private static bool ForEachParameter(List`1<PathSegment> pathSegments, Func`2<PathParameterSubsegment, bool> action);
    private static PathParameterSubsegment GetParameterSubsegment(List`1<PathSegment> pathSegments, string parameterName);
    private static bool IsParameterRequired(PathParameterSubsegment parameterSubsegment, HttpRouteValueDictionary defaultValues, Object& defaultValue);
    private static bool IsRoutePartNonEmpty(object routePart);
    public HttpRouteValueDictionary Match(RoutingContext context, HttpRouteValueDictionary defaultValues);
    private static void MatchCatchAll(PathContentSegment contentPathSegment, IEnumerable`1<string> remainingRequestSegments, HttpRouteValueDictionary defaultValues, HttpRouteValueDictionary matchedValues);
    private static bool MatchContentPathSegment(PathContentSegment routeSegment, string requestPathSegment, HttpRouteValueDictionary defaultValues, HttpRouteValueDictionary matchedValues);
    private static bool MatchSingleContentPathSegment(PathSubsegment pathSubsegment, string requestPathSegment, HttpRouteValueDictionary matchedValues);
    private static bool RoutePartsEqual(object a, object b);
    private static string UriEncode(string str);
}
internal class System.Web.Http.Routing.HttpRoute : object {
    internal static string RoutingContextKey;
    public static string HttpRouteKey;
    private string _routeTemplate;
    private HttpRouteValueDictionary _defaults;
    private HttpRouteValueDictionary _constraints;
    private HttpRouteValueDictionary _dataTokens;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpParsedRoute <ParsedRoute>k__BackingField;
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; private set; }
    public string RouteTemplate { get; }
    internal HttpParsedRoute ParsedRoute { get; private set; }
    public HttpRoute(string routeTemplate);
    public HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults);
    public HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints);
    public HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints, HttpRouteValueDictionary dataTokens);
    public HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints, HttpRouteValueDictionary dataTokens, HttpMessageHandler handler);
    internal HttpRoute(string routeTemplate, HttpRouteValueDictionary defaults, HttpRouteValueDictionary constraints, HttpRouteValueDictionary dataTokens, HttpMessageHandler handler, HttpParsedRoute parsedRoute);
    private static HttpRoute();
    public sealed virtual IDictionary`2<string, object> get_Defaults();
    public sealed virtual IDictionary`2<string, object> get_Constraints();
    public sealed virtual IDictionary`2<string, object> get_DataTokens();
    [CompilerGeneratedAttribute]
public sealed virtual HttpMessageHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(HttpMessageHandler value);
    public sealed virtual string get_RouteTemplate();
    [CompilerGeneratedAttribute]
internal HttpParsedRoute get_ParsedRoute();
    [CompilerGeneratedAttribute]
private void set_ParsedRoute(HttpParsedRoute value);
    public virtual IHttpRouteData GetRouteData(string virtualPathRoot, HttpRequestMessage request);
    private static RoutingContext GetOrCreateRoutingContext(string virtualPathRoot, HttpRequestMessage request);
    private static RoutingContext CreateRoutingContext(string virtualPathRoot, HttpRequestMessage request);
    public virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
    private static IDictionary`2<string, object> GetRouteDictionaryWithoutHttpRouteKey(IDictionary`2<string, object> routeValues);
    protected virtual bool ProcessConstraint(HttpRequestMessage request, object constraint, string parameterName, HttpRouteValueDictionary values, HttpRouteDirection routeDirection);
    private bool ProcessConstraints(HttpRequestMessage request, HttpRouteValueDictionary values, HttpRouteDirection routeDirection);
    internal static void ValidateConstraint(string routeTemplate, string name, object constraint);
    private static Exception CreateInvalidConstraintTypeException(string routeTemplate, string name);
}
internal class System.Web.Http.Routing.HttpRouteData : object {
    private IHttpRoute _route;
    private IDictionary`2<string, object> _values;
    public IHttpRoute Route { get; }
    public IDictionary`2<string, object> Values { get; }
    public HttpRouteData(IHttpRoute route);
    public HttpRouteData(IHttpRoute route, HttpRouteValueDictionary values);
    public sealed virtual IHttpRoute get_Route();
    public sealed virtual IDictionary`2<string, object> get_Values();
}
[ExtensionAttribute]
internal static class System.Web.Http.Routing.HttpRouteDataExtensions : object {
    [ExtensionAttribute]
public static void RemoveOptionalRoutingParameters(IHttpRouteData routeData);
    private static void RemoveOptionalRoutingParameters(IDictionary`2<string, object> routeValueDictionary);
    [ExtensionAttribute]
public static IEnumerable`1<IHttpRouteData> GetSubRoutes(IHttpRouteData routeData);
    [ExtensionAttribute]
internal static CandidateAction[] GetDirectRouteCandidates(IHttpRouteData routeData);
}
internal enum System.Web.Http.Routing.HttpRouteDirection : Enum {
    public int value__;
    public static HttpRouteDirection UriResolution;
    public static HttpRouteDirection UriGeneration;
}
[ExtensionAttribute]
internal static class System.Web.Http.Routing.HttpRouteExtensions : object {
    [ExtensionAttribute]
public static CandidateAction[] GetDirectRouteCandidates(IHttpRoute route);
    [ExtensionAttribute]
public static HttpActionDescriptor[] GetTargetActionDescriptors(IHttpRoute route);
    [ExtensionAttribute]
public static HttpControllerDescriptor GetTargetControllerDescriptor(IHttpRoute route);
}
internal class System.Web.Http.Routing.HttpRouteValueDictionary : Dictionary`2<string, object> {
    public HttpRouteValueDictionary(IDictionary`2<string, object> dictionary);
    public HttpRouteValueDictionary(object values);
}
internal class System.Web.Http.Routing.HttpVirtualPathData : object {
    private string _virtualPath;
    [CompilerGeneratedAttribute]
private IHttpRoute <Route>k__BackingField;
    public IHttpRoute Route { get; private set; }
    public string VirtualPath { get; public set; }
    public HttpVirtualPathData(IHttpRoute route, string virtualPath);
    [CompilerGeneratedAttribute]
public sealed virtual IHttpRoute get_Route();
    [CompilerGeneratedAttribute]
private void set_Route(IHttpRoute value);
    public sealed virtual string get_VirtualPath();
    public sealed virtual void set_VirtualPath(string value);
}
internal interface System.Web.Http.Routing.IDirectRouteBuilder {
    public string Name { get; public set; }
    public string Template { get; public set; }
    public IDictionary`2<string, object> Defaults { get; public set; }
    public IDictionary`2<string, object> Constraints { get; public set; }
    public IDictionary`2<string, object> DataTokens { get; public set; }
    public int Order { get; public set; }
    public decimal Precedence { get; public set; }
    public IReadOnlyCollection`1<HttpActionDescriptor> Actions { get; }
    public bool TargetIsAction { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Template();
    public abstract virtual void set_Template(string value);
    public abstract virtual IDictionary`2<string, object> get_Defaults();
    public abstract virtual void set_Defaults(IDictionary`2<string, object> value);
    public abstract virtual IDictionary`2<string, object> get_Constraints();
    public abstract virtual void set_Constraints(IDictionary`2<string, object> value);
    public abstract virtual IDictionary`2<string, object> get_DataTokens();
    public abstract virtual void set_DataTokens(IDictionary`2<string, object> value);
    public abstract virtual int get_Order();
    public abstract virtual void set_Order(int value);
    public abstract virtual decimal get_Precedence();
    public abstract virtual void set_Precedence(decimal value);
    public abstract virtual IReadOnlyCollection`1<HttpActionDescriptor> get_Actions();
    public abstract virtual bool get_TargetIsAction();
    public abstract virtual RouteEntry Build();
}
internal interface System.Web.Http.Routing.IDirectRouteFactory {
    public abstract virtual RouteEntry CreateRoute(DirectRouteFactoryContext context);
}
internal interface System.Web.Http.Routing.IDirectRouteProvider {
    public abstract virtual IReadOnlyList`1<RouteEntry> GetDirectRoutes(HttpControllerDescriptor controllerDescriptor, IReadOnlyList`1<HttpActionDescriptor> actionDescriptors, IInlineConstraintResolver constraintResolver);
}
internal interface System.Web.Http.Routing.IHttpRoute {
    public string RouteTemplate { get; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; }
    public abstract virtual string get_RouteTemplate();
    public abstract virtual IDictionary`2<string, object> get_Defaults();
    public abstract virtual IDictionary`2<string, object> get_Constraints();
    public abstract virtual IDictionary`2<string, object> get_DataTokens();
    public abstract virtual HttpMessageHandler get_Handler();
    public abstract virtual IHttpRouteData GetRouteData(string virtualPathRoot, HttpRequestMessage request);
    public abstract virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
}
internal interface System.Web.Http.Routing.IHttpRouteConstraint {
    public abstract virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
internal interface System.Web.Http.Routing.IHttpRouteData {
    public IHttpRoute Route { get; }
    public IDictionary`2<string, object> Values { get; }
    public abstract virtual IHttpRoute get_Route();
    public abstract virtual IDictionary`2<string, object> get_Values();
}
internal interface System.Web.Http.Routing.IHttpRouteInfoProvider {
    public string Name { get; }
    public string Template { get; }
    public int Order { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Template();
    public abstract virtual int get_Order();
}
internal interface System.Web.Http.Routing.IHttpVirtualPathData {
    public IHttpRoute Route { get; }
    public string VirtualPath { get; public set; }
    public abstract virtual IHttpRoute get_Route();
    public abstract virtual string get_VirtualPath();
    public abstract virtual void set_VirtualPath(string value);
}
internal interface System.Web.Http.Routing.IInlineConstraintResolver {
    public abstract virtual IHttpRouteConstraint ResolveConstraint(string inlineConstraint);
}
internal class System.Web.Http.Routing.InlineRouteTemplateParser : object {
    private static string ParameterNameRegex;
    private static string ConstraintRegex;
    private static string DefaultValueRegex;
    private static Regex _parameterRegex;
    private static InlineRouteTemplateParser();
    public static string ParseRouteTemplate(string routeTemplate, IDictionary`2<string, object> defaults, IDictionary`2<string, object> constraints, IInlineConstraintResolver constraintResolver);
    private static object GetDefaultValue(Group defaultValueGroup);
    private static IHttpRouteConstraint GetInlineConstraint(Group constraintGroup, bool isOptional, IInlineConstraintResolver constraintResolver);
}
internal interface System.Web.Http.Routing.IRoutePrefix {
    public string Prefix { get; }
    public abstract virtual string get_Prefix();
}
internal class System.Web.Http.Routing.LinkGenerationRoute : object {
    private IHttpRoute _innerRoute;
    public string RouteTemplate { get; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; }
    public LinkGenerationRoute(IHttpRoute innerRoute);
    public sealed virtual string get_RouteTemplate();
    public sealed virtual IDictionary`2<string, object> get_Defaults();
    public sealed virtual IDictionary`2<string, object> get_Constraints();
    public sealed virtual IDictionary`2<string, object> get_DataTokens();
    public sealed virtual HttpMessageHandler get_Handler();
    public sealed virtual IHttpRouteData GetRouteData(string virtualPathRoot, HttpRequestMessage request);
    public sealed virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
}
internal class System.Web.Http.Routing.PathContentSegment : PathSegment {
    [CompilerGeneratedAttribute]
private List`1<PathSubsegment> <Subsegments>k__BackingField;
    public bool IsCatchAll { get; }
    public List`1<PathSubsegment> Subsegments { get; private set; }
    public PathContentSegment(List`1<PathSubsegment> subsegments);
    public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
public List`1<PathSubsegment> get_Subsegments();
    [CompilerGeneratedAttribute]
private void set_Subsegments(List`1<PathSubsegment> value);
}
internal class System.Web.Http.Routing.PathLiteralSubsegment : PathSubsegment {
    [CompilerGeneratedAttribute]
private string <Literal>k__BackingField;
    public string Literal { get; private set; }
    public PathLiteralSubsegment(string literal);
    [CompilerGeneratedAttribute]
public string get_Literal();
    [CompilerGeneratedAttribute]
private void set_Literal(string value);
}
internal class System.Web.Http.Routing.PathParameterSubsegment : PathSubsegment {
    [CompilerGeneratedAttribute]
private bool <IsCatchAll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public bool IsCatchAll { get; private set; }
    public string ParameterName { get; private set; }
    public PathParameterSubsegment(string parameterName);
    [CompilerGeneratedAttribute]
public bool get_IsCatchAll();
    [CompilerGeneratedAttribute]
private void set_IsCatchAll(bool value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
}
internal abstract class System.Web.Http.Routing.PathSegment : object {
}
internal class System.Web.Http.Routing.PathSeparatorSegment : PathSegment {
}
internal abstract class System.Web.Http.Routing.PathSubsegment : object {
}
internal class System.Web.Http.Routing.RouteCollectionRoute : object {
    public static string SubRouteDataKey;
    private IReadOnlyCollection`1<IHttpRoute> _subRoutes;
    private static IDictionary`2<string, object> _empty;
    private bool _beingInitialized;
    private IReadOnlyCollection`1<IHttpRoute> SubRoutes { get; }
    public string RouteTemplate { get; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    public HttpMessageHandler Handler { get; }
    public int Count { get; }
    private static RouteCollectionRoute();
    public void EnsureInitialized(Func`1<IReadOnlyCollection`1<IHttpRoute>> initializer);
    private IReadOnlyCollection`1<IHttpRoute> get_SubRoutes();
    public sealed virtual string get_RouteTemplate();
    public sealed virtual IDictionary`2<string, object> get_Defaults();
    public sealed virtual IDictionary`2<string, object> get_Constraints();
    public sealed virtual IDictionary`2<string, object> get_DataTokens();
    public sealed virtual HttpMessageHandler get_Handler();
    public sealed virtual IHttpRouteData GetRouteData(string virtualPathRoot, HttpRequestMessage request);
    public sealed virtual IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request, IDictionary`2<string, object> values);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<IHttpRoute> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Web.Http.Routing.RouteDataTokenKeys : object {
    public static string Actions;
    public static string Controller;
    public static string Order;
    public static string Precedence;
}
internal class System.Web.Http.Routing.RouteEntry : object {
    private string _name;
    private IHttpRoute _route;
    public string Name { get; }
    public IHttpRoute Route { get; }
    public RouteEntry(string name, IHttpRoute route);
    public string get_Name();
    public IHttpRoute get_Route();
}
[AttributeUsageAttribute("68")]
internal abstract class System.Web.Http.Routing.RouteFactoryAttribute : Attribute {
    private string _template;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public string Template { get; }
    public string Name { get; public set; }
    public int Order { get; public set; }
    public IDictionary`2<string, object> Defaults { get; }
    public IDictionary`2<string, object> Constraints { get; }
    public IDictionary`2<string, object> DataTokens { get; }
    protected RouteFactoryAttribute(string template);
    public string get_Template();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public virtual IDictionary`2<string, object> get_Defaults();
    public virtual IDictionary`2<string, object> get_Constraints();
    public virtual IDictionary`2<string, object> get_DataTokens();
    public sealed virtual RouteEntry CreateRoute(DirectRouteFactoryContext context);
}
internal class System.Web.Http.Routing.RouteInfoDirectRouteFactory : object {
    private IHttpRouteInfoProvider _infoProvider;
    public RouteInfoDirectRouteFactory(IHttpRouteInfoProvider infoProvider);
    public sealed virtual RouteEntry CreateRoute(DirectRouteFactoryContext context);
}
internal static class System.Web.Http.Routing.RouteParser : object {
    [CompilerGeneratedAttribute]
private static Func`2<PathSubsegment, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static string GetLiteral(string segmentLiteral);
    private static int IndexOfFirstOpenParameter(string segment, int startIndex);
    internal static bool IsSeparator(string s);
    private static bool IsValidParameterName(string parameterName);
    internal static bool IsInvalidRouteTemplate(string routeTemplate);
    public static HttpParsedRoute Parse(string routeTemplate);
    private static List`1<PathSubsegment> ParseUriSegment(string segment, Exception& exception);
    private static List`1<PathSegment> SplitUriToPathSegments(List`1<string> uriParts);
    internal static List`1<string> SplitUriToPathSegmentStrings(string uri);
    private static Exception ValidateUriParts(List`1<string> pathSegments);
    private static Exception ValidateUriSegment(List`1<PathSubsegment> pathSubsegments, HashSet`1<string> usedParameterNames);
    [CompilerGeneratedAttribute]
private static bool <ValidateUriParts>b__0(PathSubsegment seg);
}
internal static class System.Web.Http.Routing.RoutePrecedence : object {
    internal static int ComputeDigit(PathContentSegment segment, IDictionary`2<string, object> constraints);
    public static decimal Compute(HttpParsedRoute parsedRoute, IDictionary`2<string, object> constraints);
}
internal static class System.Web.Http.Routing.RouteValueKeys : object {
    public static string Action;
    public static string Controller;
}
internal class System.Web.Http.Routing.RoutingContext : object {
    private static RoutingContext CachedInvalid;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PathSegments>k__BackingField;
    public bool IsValid { get; private set; }
    public List`1<string> PathSegments { get; private set; }
    private static RoutingContext();
    public static RoutingContext Invalid();
    public static RoutingContext Valid(List`1<string> pathSegments);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PathSegments();
    [CompilerGeneratedAttribute]
private void set_PathSegments(List`1<string> value);
}
internal class System.Web.Http.Routing.StopRoutingHandler : HttpMessageHandler {
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
internal class System.Web.Http.Routing.SubRouteCollection : object {
    private List`1<IHttpRoute> _routes;
    private List`1<RouteEntry> _entries;
    public int Count { get; }
    public IReadOnlyCollection`1<RouteEntry> Entries { get; }
    public void Add(RouteEntry entry);
    public void AddRange(IEnumerable`1<RouteEntry> entries);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<IHttpRoute> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IReadOnlyCollection`1<RouteEntry> get_Entries();
    private static void ThrowExceptionForDuplicateRouteNames(string name, IHttpRoute route1, IHttpRoute route2);
}
internal class System.Web.Http.Routing.UrlHelper : object {
    private HttpRequestMessage _request;
    public HttpRequestMessage Request { get; public set; }
    public UrlHelper(HttpRequestMessage request);
    public HttpRequestMessage get_Request();
    public void set_Request(HttpRequestMessage value);
    public virtual string Content(string path);
    public virtual string Route(string routeName, object routeValues);
    public virtual string Route(string routeName, IDictionary`2<string, object> routeValues);
    public virtual string Link(string routeName, object routeValues);
    public virtual string Link(string routeName, IDictionary`2<string, object> routeValues);
    private static string GetVirtualPath(HttpRequestMessage request, string routeName, IDictionary`2<string, object> routeValues);
}
internal static class System.Web.Http.Services.Decorator : object {
    public static T GetInner(T outer);
}
internal class System.Web.Http.Services.DefaultServices : ServicesContainer {
    private ConcurrentDictionary`2<Type, Object[]> _cacheMulti;
    private ConcurrentDictionary`2<Type, object> _cacheSingle;
    private HttpConfiguration _configuration;
    private Dictionary`2<Type, object> _defaultServicesSingle;
    private Dictionary`2<Type, List`1<object>> _defaultServicesMulti;
    private IDependencyResolver _lastKnownDependencyResolver;
    private HashSet`1<Type> _serviceTypesSingle;
    private HashSet`1<Type> _serviceTypesMulti;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public DefaultServices(HttpConfiguration configuration);
    private void SetSingle(T instance);
    private void SetMultiple(T[] instances);
    public virtual bool IsSingleService(Type serviceType);
    public virtual object GetService(Type serviceType);
    public virtual IEnumerable`1<object> GetServices(Type serviceType);
    protected virtual List`1<object> GetServiceInstances(Type serviceType);
    protected virtual void ClearSingle(Type serviceType);
    protected virtual void ReplaceSingle(Type serviceType, object service);
    private void ResetCache();
    protected virtual void ResetCache(Type serviceType);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static bool <GetServices>b__2(object s);
}
internal interface System.Web.Http.Services.IDecorator`1 {
    public T Inner { get; }
    public abstract virtual T get_Inner();
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class System.Web.Http.ServicesExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<ModelBinderProvider> GetModelBinderProviders(ServicesContainer services);
    [ExtensionAttribute]
public static ModelMetadataProvider GetModelMetadataProvider(ServicesContainer services);
    [ExtensionAttribute]
public static IEnumerable`1<ModelValidatorProvider> GetModelValidatorProviders(ServicesContainer services);
    [ExtensionAttribute]
internal static IModelValidatorCache GetModelValidatorCache(ServicesContainer services);
    [ExtensionAttribute]
public static IContentNegotiator GetContentNegotiator(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpControllerActivator GetHttpControllerActivator(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpActionSelector GetActionSelector(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpActionInvoker GetActionInvoker(ServicesContainer services);
    [ExtensionAttribute]
public static IActionValueBinder GetActionValueBinder(ServicesContainer services);
    [ExtensionAttribute]
public static IEnumerable`1<ValueProviderFactory> GetValueProviderFactories(ServicesContainer services);
    [ExtensionAttribute]
public static IBodyModelValidator GetBodyModelValidator(ServicesContainer services);
    [ExtensionAttribute]
public static IHostBufferPolicySelector GetHostBufferPolicySelector(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpControllerSelector GetHttpControllerSelector(ServicesContainer services);
    [ExtensionAttribute]
public static IAssembliesResolver GetAssembliesResolver(ServicesContainer services);
    [ExtensionAttribute]
public static IHttpControllerTypeResolver GetHttpControllerTypeResolver(ServicesContainer services);
    [ExtensionAttribute]
public static IApiExplorer GetApiExplorer(ServicesContainer services);
    [ExtensionAttribute]
public static IDocumentationProvider GetDocumentationProvider(ServicesContainer services);
    [ExtensionAttribute]
public static IExceptionHandler GetExceptionHandler(ServicesContainer services);
    [ExtensionAttribute]
public static IEnumerable`1<IExceptionLogger> GetExceptionLoggers(ServicesContainer services);
    [ExtensionAttribute]
public static IEnumerable`1<IFilterProvider> GetFilterProviders(ServicesContainer services);
    [ExtensionAttribute]
public static ITraceManager GetTraceManager(ServicesContainer services);
    [ExtensionAttribute]
public static ITraceWriter GetTraceWriter(ServicesContainer services);
    [ExtensionAttribute]
internal static IEnumerable`1<TService> GetServices(ServicesContainer services);
    [ExtensionAttribute]
private static TService GetService(ServicesContainer services);
    [ExtensionAttribute]
private static T GetServiceOrThrow(ServicesContainer services);
}
[TypeForwardedFromAttribute("System.Web.Http.OData, Version=5.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
internal abstract class System.Web.Http.SingleResult : object {
    [CompilerGeneratedAttribute]
private IQueryable <Queryable>k__BackingField;
    public IQueryable Queryable { get; private set; }
    protected SingleResult(IQueryable queryable);
    [CompilerGeneratedAttribute]
public IQueryable get_Queryable();
    [CompilerGeneratedAttribute]
private void set_Queryable(IQueryable value);
    public static SingleResult`1<T> Create(IQueryable`1<T> queryable);
}
[TypeForwardedFromAttribute("System.Web.Http.OData, Version=5.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
internal class System.Web.Http.SingleResult`1 : SingleResult {
    public IQueryable`1<T> Queryable { get; }
    public SingleResult`1(IQueryable`1<T> queryable);
    public IQueryable`1<T> get_Queryable();
}
internal static class System.Web.Http.System.Web.Http.Owin1126879.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
internal static class System.Web.Http.System.Web.Http.Tracing1143709.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
internal static class System.Web.Http.System.Web.Http911064.Error : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    internal static string Format(string format, Object[] args);
    internal static ArgumentException Argument(string messageFormat, Object[] messageArgs);
    internal static ArgumentException Argument(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentUriNotHttpOrHttpsScheme(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriNotAbsolute(string parameterName, Uri actualValue);
    internal static ArgumentException ArgumentUriHasQueryOrFragment(string parameterName, Uri actualValue);
    internal static ArgumentNullException PropertyNull();
    internal static ArgumentNullException ArgumentNull(string parameterName);
    internal static ArgumentNullException ArgumentNull(string parameterName, string messageFormat, Object[] messageArgs);
    internal static ArgumentException ArgumentNullOrEmpty(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName, object actualValue, string messageFormat, Object[] messageArgs);
    internal static ArgumentOutOfRangeException ArgumentMustBeGreaterThanOrEqualTo(string parameterName, object actualValue, object minValue);
    internal static ArgumentOutOfRangeException ArgumentMustBeLessThanOrEqualTo(string parameterName, object actualValue, object maxValue);
    internal static KeyNotFoundException KeyNotFound();
    internal static KeyNotFoundException KeyNotFound(string messageFormat, Object[] messageArgs);
    internal static ObjectDisposedException ObjectDisposed(string messageFormat, Object[] messageArgs);
    internal static OperationCanceledException OperationCanceled();
    internal static OperationCanceledException OperationCanceled(string messageFormat, Object[] messageArgs);
    internal static ArgumentException InvalidEnumArgument(string parameterName, int invalidValue, Type enumClass);
    internal static InvalidOperationException InvalidOperation(string messageFormat, Object[] messageArgs);
    internal static InvalidOperationException InvalidOperation(Exception innerException, string messageFormat, Object[] messageArgs);
    internal static NotSupportedException NotSupported(string messageFormat, Object[] messageArgs);
}
internal static class System.Web.Http.System.Web.Http911064.UriQueryUtility : object {
    public static string UrlEncode(string str);
    public static string UrlDecode(string str);
    private static Byte[] UrlEncode(Byte[] bytes, int offset, int count, bool alwaysCreateNewReturnValue);
    private static Byte[] UrlEncode(Byte[] bytes, int offset, int count);
    private static string UrlDecodeInternal(string value, Encoding encoding);
    private static int HexToInt(char h);
    private static char IntToHex(int n);
    private static bool IsUrlSafeChar(char ch);
    private static bool ValidateUrlEncodingParameters(Byte[] bytes, int offset, int count);
}
internal static class System.Web.Http.Tracing.FormattingUtilities : object {
    public static string NullMessage;
    [CompilerGeneratedAttribute]
private static Func`2<HttpParameterDescriptor, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<MediaTypeFormatter, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, object>, string> CS$<>9__CachedAnonymousMethodDelegate8;
    private static FormattingUtilities();
    public static string ActionArgumentsToString(IDictionary`2<string, object> actionArguments);
    public static string ActionDescriptorToString(HttpActionDescriptor actionDescriptor);
    public static string ActionInvokeToString(HttpActionContext actionContext);
    public static string ActionInvokeToString(string actionName, IDictionary`2<string, object> arguments);
    public static string FormattersToString(IEnumerable`1<MediaTypeFormatter> formatters);
    public static string ModelBinderToString(ModelBinderProvider provider);
    public static string ModelStateToString(ModelStateDictionary modelState);
    public static string RouteToString(IHttpRouteData routeData);
    public static string ValueProviderToString(IValueProvider provider);
    public static string ValueToString(object value, CultureInfo cultureInfo);
    [CompilerGeneratedAttribute]
private static string <ActionDescriptorToString>b__3(HttpParameterDescriptor p);
    [CompilerGeneratedAttribute]
private static string <FormattersToString>b__5(MediaTypeFormatter f);
    [CompilerGeneratedAttribute]
private static string <RouteToString>b__7(KeyValuePair`2<string, object> pair);
}
internal interface System.Web.Http.Tracing.IFormatterTracer {
    public HttpRequestMessage Request { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public abstract virtual HttpRequestMessage get_Request();
    public abstract virtual MediaTypeFormatter get_InnerFormatter();
}
internal interface System.Web.Http.Tracing.ITraceManager {
    public abstract virtual void Initialize(HttpConfiguration configuration);
}
internal interface System.Web.Http.Tracing.ITraceWriter {
    public abstract virtual void Trace(HttpRequestMessage request, string category, TraceLevel level, Action`1<TraceRecord> traceAction);
}
[ExtensionAttribute]
internal static class System.Web.Http.Tracing.ITraceWriterExtensions : object {
    [ExtensionAttribute]
public static void Debug(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Debug(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Debug(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Error(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Error(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Error(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Fatal(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Fatal(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Fatal(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Info(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Info(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Info(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Trace(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, Exception exception);
    [ExtensionAttribute]
public static void Trace(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Trace(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void TraceBeginEnd(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`1<TraceRecord> beginTrace, Action execute, Action`1<TraceRecord> endTrace, Action`1<TraceRecord> errorTrace);
    [ExtensionAttribute]
public static Task`1<TResult> TraceBeginEndAsync(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`1<TraceRecord> beginTrace, Func`1<Task`1<TResult>> execute, Action`2<TraceRecord, TResult> endTrace, Action`1<TraceRecord> errorTrace);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Tracing.ITraceWriterExtensions/<TraceBeginEndAsyncCore>d__18`1")]
private static Task`1<TResult> TraceBeginEndAsyncCore(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`2<TraceRecord, TResult> endTrace, Action`1<TraceRecord> errorTrace, Task`1<TResult> task);
    [ExtensionAttribute]
public static Task TraceBeginEndAsync(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`1<TraceRecord> beginTrace, Func`1<Task> execute, Action`1<TraceRecord> endTrace, Action`1<TraceRecord> errorTrace);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("System.Web.Http.Tracing.ITraceWriterExtensions/<TraceBeginEndAsyncCore>d__24")]
[ExtensionAttribute]
private static Task TraceBeginEndAsyncCore(ITraceWriter traceWriter, HttpRequestMessage request, string category, TraceLevel level, string operatorName, string operationName, Action`1<TraceRecord> endTrace, Action`1<TraceRecord> errorTrace, Task task);
    [ExtensionAttribute]
public static void Warn(ITraceWriter traceWriter, HttpRequestMessage request, string category, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
public static void Warn(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception);
    [ExtensionAttribute]
public static void Warn(ITraceWriter traceWriter, HttpRequestMessage request, string category, Exception exception, string messageFormat, Object[] messageArguments);
    [ExtensionAttribute]
private static void TraceError(ITraceWriter traceWriter, Exception exception, HttpRequestMessage request, string category, string operatorName, string operationName, Action`1<TraceRecord> errorTrace);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Http.Tracing.Properties.SRResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CategoryFormat { get; }
    internal static string ExceptionFormat { get; }
    internal static string HttpMethodFormat { get; }
    internal static string HttpStatusFormat { get; }
    internal static string IdFormat { get; }
    internal static string MessageFormat { get; }
    internal static string OperationFormat { get; }
    internal static string ShortRequestFormat { get; }
    internal static string ShortResponseFormat { get; }
    internal static string TimeLevelKindFormat { get; }
    internal static string TimeRequestFormat { get; }
    internal static string TimeResponseFormat { get; }
    internal static string TraceLevelOutOfRange { get; }
    internal static string UrlFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CategoryFormat();
    internal static string get_ExceptionFormat();
    internal static string get_HttpMethodFormat();
    internal static string get_HttpStatusFormat();
    internal static string get_IdFormat();
    internal static string get_MessageFormat();
    internal static string get_OperationFormat();
    internal static string get_ShortRequestFormat();
    internal static string get_ShortResponseFormat();
    internal static string get_TimeLevelKindFormat();
    internal static string get_TimeRequestFormat();
    internal static string get_TimeResponseFormat();
    internal static string get_TraceLevelOutOfRange();
    internal static string get_UrlFormat();
}
internal static class System.Web.Http.Tracing.System.Web.Http.Tracing1143709.TraceWriterExceptionMapper : object {
    private static string HttpErrorExceptionMessageFormat;
    private static string HttpErrorExceptionTypeFormat;
    private static string HttpErrorMessageDetailFormat;
    private static string HttpErrorModelStateErrorFormat;
    private static string HttpErrorModelStatePairFormat;
    private static string HttpErrorStackTraceFormat;
    private static string HttpErrorUserMessageFormat;
    [CompilerGeneratedAttribute]
private static Func`2<HttpResponseException, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<HttpResponseException, HttpStatusCode> CS$<>9__CachedAnonymousMethodDelegate3;
    public static void TranslateHttpResponseException(TraceRecord traceRecord);
    public static Nullable`1<TraceLevel> GetMappedTraceLevel(Exception exception);
    public static Nullable`1<TraceLevel> GetMappedTraceLevel(HttpResponseException httpResponseException);
    private static HttpResponseException ExtractHttpResponseException(Exception exception);
    private static void AddExceptions(HttpError httpError, List`1<string> messages);
    private static string FormatModelStateErrors(HttpError modelStateError);
    [CompilerGeneratedAttribute]
private static bool <ExtractHttpResponseException>b__0(HttpResponseException ex);
    [CompilerGeneratedAttribute]
private static HttpStatusCode <ExtractHttpResponseException>b__1(HttpResponseException ex);
}
internal class System.Web.Http.Tracing.SystemDiagnosticsTraceWriter : object {
    private static string SystemWebHttpRequestCategory;
    private static TraceEventType[] TraceLevelToTraceEventType;
    private TraceLevel _minLevel;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceSource <TraceSource>k__BackingField;
    public TraceLevel MinimumLevel { get; public set; }
    public bool IsVerbose { get; public set; }
    public TraceSource TraceSource { get; public set; }
    private static SystemDiagnosticsTraceWriter();
    public TraceLevel get_MinimumLevel();
    public void set_MinimumLevel(TraceLevel value);
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
public void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public TraceSource get_TraceSource();
    [CompilerGeneratedAttribute]
public void set_TraceSource(TraceSource value);
    public virtual void Trace(HttpRequestMessage request, string category, TraceLevel level, Action`1<TraceRecord> traceAction);
    public virtual string Format(TraceRecord traceRecord);
    public virtual string FormatRequestEnvelope(TraceRecord traceRecord);
    public virtual void TranslateHttpResponseException(TraceRecord traceRecord);
    public virtual string FormatDateTime(DateTime dateTime);
    private void TraceMessage(TraceLevel level, string message);
}
internal static class System.Web.Http.Tracing.TraceCategories : object {
    public static string ActionCategory;
    public static string ControllersCategory;
    public static string FiltersCategory;
    public static string FormattingCategory;
    public static string MessageHandlersCategory;
    public static string ModelBindingCategory;
    public static string RequestCategory;
    public static string RoutingCategory;
    private static TraceCategories();
}
internal enum System.Web.Http.Tracing.TraceKind : Enum {
    public int value__;
    public static TraceKind Trace;
    public static TraceKind Begin;
    public static TraceKind End;
}
internal static class System.Web.Http.Tracing.TraceKindHelper : object {
    public static bool IsDefined(TraceKind traceKind);
    public static void Validate(TraceKind value, string parameterValue);
}
internal enum System.Web.Http.Tracing.TraceLevel : Enum {
    public int value__;
    public static TraceLevel Off;
    public static TraceLevel Debug;
    public static TraceLevel Info;
    public static TraceLevel Warn;
    public static TraceLevel Error;
    public static TraceLevel Fatal;
}
internal static class System.Web.Http.Tracing.TraceLevelHelper : object {
    public static bool IsDefined(TraceLevel traceLevel);
    public static void Validate(TraceLevel value, string parameterValue);
}
internal class System.Web.Http.Tracing.TraceManager : object {
    public sealed virtual void Initialize(HttpConfiguration configuration);
    private static void CreateAllTracers(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static TService GetService(ServicesContainer services);
    private static void CreateActionInvokerTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateActionSelectorTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateActionValueBinderTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateContentNegotiatorTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateControllerActivatorTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateControllerSelectorTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateHttpControllerTypeResolverTracer(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateMediaTypeFormatterTracers(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static void CreateMessageHandlerTracers(HttpConfiguration configuration, ITraceWriter traceWriter);
    private static bool AreMessageHandlerTracersRegistered(Collection`1<DelegatingHandler> messageHandlers);
}
[DebuggerDisplayAttribute("Category: {Category}, Operation: {Operation}, Level: {Level}, Kind: {Kind}")]
internal class System.Web.Http.Tracing.TraceRecord : object {
    private TraceKind _traceKind;
    private TraceLevel _traceLevel;
    private Lazy`1<Dictionary`2<object, object>> _properties;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<Dictionary`2<object, object>> CS$<>9__CachedAnonymousMethodDelegate1;
    public string Category { get; public set; }
    public Exception Exception { get; public set; }
    public TraceKind Kind { get; public set; }
    public TraceLevel Level { get; public set; }
    public string Message { get; public set; }
    public string Operation { get; public set; }
    public string Operator { get; public set; }
    public Dictionary`2<object, object> Properties { get; }
    public HttpRequestMessage Request { get; private set; }
    public Guid RequestId { get; private set; }
    public HttpStatusCode Status { get; public set; }
    public DateTime Timestamp { get; private set; }
    public TraceRecord(HttpRequestMessage request, string category, TraceLevel level);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public TraceKind get_Kind();
    public void set_Kind(TraceKind value);
    public TraceLevel get_Level();
    public void set_Level(TraceLevel value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(string value);
    public Dictionary`2<object, object> get_Properties();
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public Guid get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(Guid value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
private static Dictionary`2<object, object> <.ctor>b__0();
}
internal class System.Web.Http.Tracing.Tracers.ActionFilterAttributeTracer : ActionFilterAttribute {
    private ActionFilterAttribute _innerFilter;
    private ITraceWriter _traceWriter;
    public ActionFilterAttribute Inner { get; }
    public bool AllowMultiple { get; }
    public object TypeId { get; }
    public ActionFilterAttributeTracer(ActionFilterAttribute innerFilter, ITraceWriter traceWriter);
    public sealed virtual ActionFilterAttribute get_Inner();
    public virtual bool get_AllowMultiple();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public virtual bool Match(object obj);
    public virtual void OnActionExecuted(HttpActionExecutedContext actionExecutedContext);
    public virtual Task OnActionExecutedAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private Task OnActionExecutedAsyncCore(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken, string methodName);
    public virtual void OnActionExecuting(HttpActionContext actionContext);
    public virtual Task OnActionExecutingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    private Task OnActionExecutingAsyncCore(HttpActionContext actionContext, CancellationToken cancellationToken, string methodName);
}
internal class System.Web.Http.Tracing.Tracers.ActionFilterTracer : FilterTracer {
    private static string ExecuteActionFilterAsyncMethodName;
    [CompilerGeneratedAttribute]
private static Action`2<TraceRecord, HttpResponseMessage> CS$<>9__CachedAnonymousMethodDelegate2;
    public IActionFilter Inner { get; }
    private IActionFilter InnerActionFilter { get; }
    public ActionFilterTracer(IActionFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IActionFilter get_Inner();
    private IActionFilter get_InnerActionFilter();
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [CompilerGeneratedAttribute]
private static void <System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync>b__1(TraceRecord tr, HttpResponseMessage response);
}
internal class System.Web.Http.Tracing.Tracers.ActionValueBinderTracer : object {
    private IActionValueBinder _innerBinder;
    private ITraceWriter _traceWriter;
    public IActionValueBinder Inner { get; }
    public ActionValueBinderTracer(IActionValueBinder innerBinder, ITraceWriter traceWriter);
    public sealed virtual IActionValueBinder get_Inner();
    private sealed virtual override HttpActionBinding System.Web.Http.Controllers.IActionValueBinder.GetBinding(HttpActionDescriptor actionDescriptor);
}
internal class System.Web.Http.Tracing.Tracers.AuthenticationFilterTracer : FilterTracer {
    private static string AuthenticateAsyncMethodName;
    private static string ChallengeAsyncMethodName;
    private IAuthenticationFilter _innerFilter;
    public IAuthenticationFilter Inner { get; }
    public AuthenticationFilterTracer(IAuthenticationFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IAuthenticationFilter get_Inner();
    public sealed virtual Task AuthenticateAsync(HttpAuthenticationContext context, CancellationToken cancellationToken);
    public sealed virtual Task ChallengeAsync(HttpAuthenticationChallengeContext context, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.AuthorizationFilterAttributeTracer : AuthorizationFilterAttribute {
    private AuthorizationFilterAttribute _innerFilter;
    private ITraceWriter _traceStore;
    public AuthorizationFilterAttribute Inner { get; }
    public bool AllowMultiple { get; }
    public object TypeId { get; }
    public AuthorizationFilterAttributeTracer(AuthorizationFilterAttribute innerFilter, ITraceWriter traceWriter);
    public sealed virtual AuthorizationFilterAttribute get_Inner();
    public virtual bool get_AllowMultiple();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public virtual bool Match(object obj);
    public virtual void OnAuthorization(HttpActionContext actionContext);
    public virtual Task OnAuthorizationAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    private Task OnAuthorizationSyncCore(HttpActionContext actionContext, CancellationToken cancellationToken, string methodName);
}
internal class System.Web.Http.Tracing.Tracers.AuthorizationFilterTracer : FilterTracer {
    private static string ExecuteAuthorizationFilterAsyncMethodName;
    [CompilerGeneratedAttribute]
private static Action`2<TraceRecord, HttpResponseMessage> CS$<>9__CachedAnonymousMethodDelegate2;
    public IAuthorizationFilter Inner { get; }
    private IAuthorizationFilter InnerAuthorizationFilter { get; }
    public AuthorizationFilterTracer(IAuthorizationFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IAuthorizationFilter get_Inner();
    private IAuthorizationFilter get_InnerAuthorizationFilter();
    public sealed virtual Task`1<HttpResponseMessage> ExecuteAuthorizationFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func`1<Task`1<HttpResponseMessage>> continuation);
    [CompilerGeneratedAttribute]
private static void <ExecuteAuthorizationFilterAsync>b__1(TraceRecord tr, HttpResponseMessage response);
}
internal class System.Web.Http.Tracing.Tracers.BufferedMediaTypeFormatterTracer : BufferedMediaTypeFormatter {
    private static string OnReadFromStreamMethodName;
    private static string OnWriteToStreamMethodName;
    private BufferedMediaTypeFormatter _inner;
    private MediaTypeFormatterTracer _innerTracer;
    private HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.Request { get; }
    public BufferedMediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public BufferedMediaTypeFormatterTracer(BufferedMediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    private sealed virtual override HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.get_Request();
    public sealed virtual BufferedMediaTypeFormatter get_Inner();
    public sealed virtual MediaTypeFormatter get_InnerFormatter();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual object ReadFromStream(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual object ReadFromStream(Type type, Stream stream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    private object ReadFromStreamCore(Type type, Stream stream, HttpContent content, IFormatterLogger formatterLogger, Nullable`1<CancellationToken> cancellationToken);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, HttpContent content);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, HttpContent content, CancellationToken cancellationToken);
    private void WriteToStreamCore(Type type, object value, Stream writeStream, HttpContent content, Nullable`1<CancellationToken> cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.ContentNegotiatorTracer : object {
    private static string NegotiateMethodName;
    private IContentNegotiator _innerNegotiator;
    private ITraceWriter _traceWriter;
    public IContentNegotiator Inner { get; }
    public ContentNegotiatorTracer(IContentNegotiator innerNegotiator, ITraceWriter traceWriter);
    public sealed virtual IContentNegotiator get_Inner();
    public sealed virtual ContentNegotiationResult Negotiate(Type type, HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
}
internal class System.Web.Http.Tracing.Tracers.DefaultHttpControllerTypeResolverTracer : DefaultHttpControllerTypeResolver {
    private DefaultHttpControllerTypeResolver _innerResolver;
    private ITraceWriter _traceWriter;
    private string _innerTypeName;
    public DefaultHttpControllerTypeResolver Inner { get; }
    protected internal Predicate`1<Type> IsControllerTypePredicate { get; }
    public DefaultHttpControllerTypeResolverTracer(DefaultHttpControllerTypeResolver innerResolver, ITraceWriter traceWriter);
    public sealed virtual DefaultHttpControllerTypeResolver get_Inner();
    protected internal virtual Predicate`1<Type> get_IsControllerTypePredicate();
    public virtual ICollection`1<Type> GetControllerTypes(IAssembliesResolver assembliesResolver);
    private Type[] GetTypesAndTrace(Assembly assembly);
}
internal class System.Web.Http.Tracing.Tracers.ExceptionFilterAttributeTracer : ExceptionFilterAttribute {
    private ExceptionFilterAttribute _innerFilter;
    private ITraceWriter _traceStore;
    public ExceptionFilterAttribute Inner { get; }
    public bool AllowMultiple { get; }
    public object TypeId { get; }
    public ExceptionFilterAttributeTracer(ExceptionFilterAttribute innerFilter, ITraceWriter traceWriter);
    public sealed virtual ExceptionFilterAttribute get_Inner();
    public virtual bool get_AllowMultiple();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public virtual bool Match(object obj);
    public virtual void OnException(HttpActionExecutedContext actionExecutedContext);
    public virtual Task OnExceptionAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
    private Task OnExceptionAsyncCore(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken, string methodName);
}
internal class System.Web.Http.Tracing.Tracers.ExceptionFilterTracer : FilterTracer {
    private static string ExecuteExceptionFilterAsyncMethodName;
    public IExceptionFilter Inner { get; }
    public IExceptionFilter InnerExceptionFilter { get; }
    public ExceptionFilterTracer(IExceptionFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IExceptionFilter get_Inner();
    public IExceptionFilter get_InnerExceptionFilter();
    public sealed virtual Task ExecuteExceptionFilterAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.FilterTracer : object {
    [CompilerGeneratedAttribute]
private IFilter <InnerFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    public IFilter Inner { get; }
    public IFilter InnerFilter { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    public bool AllowMultiple { get; }
    public FilterTracer(IFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IFilter get_Inner();
    [CompilerGeneratedAttribute]
public IFilter get_InnerFilter();
    [CompilerGeneratedAttribute]
public void set_InnerFilter(IFilter value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    public sealed virtual bool get_AllowMultiple();
    public static IEnumerable`1<IFilter> CreateFilterTracers(IFilter filter, ITraceWriter traceWriter);
    public static IEnumerable`1<FilterInfo> CreateFilterTracers(FilterInfo filter, ITraceWriter traceWriter);
    public static bool IsFilterTracer(IFilter filter);
}
internal class System.Web.Http.Tracing.Tracers.FormatterLoggerTraceWrapper : object {
    private IFormatterLogger _formatterLogger;
    private ITraceWriter _traceWriter;
    private HttpRequestMessage _request;
    private string _operatorName;
    private string _operationName;
    public FormatterLoggerTraceWrapper(IFormatterLogger formatterLogger, ITraceWriter traceWriter, HttpRequestMessage request, string operatorName, string operationName);
    public sealed virtual void LogError(string errorPath, string errorMessage);
    public sealed virtual void LogError(string errorPath, Exception exception);
}
internal class System.Web.Http.Tracing.Tracers.FormatterParameterBindingTracer : FormatterParameterBinding {
    private static string ExecuteBindingAsyncMethodName;
    private FormatterParameterBinding _innerBinding;
    private ITraceWriter _traceWriter;
    public FormatterParameterBinding Inner { get; }
    public string ErrorMessage { get; }
    public bool WillReadBody { get; }
    public FormatterParameterBindingTracer(FormatterParameterBinding innerBinding, ITraceWriter traceWriter);
    public sealed virtual FormatterParameterBinding get_Inner();
    public virtual string get_ErrorMessage();
    public virtual bool get_WillReadBody();
    public virtual Task`1<object> ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadContentAsync(HttpRequestMessage request, Type type, IEnumerable`1<MediaTypeFormatter> formatters, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    private IEnumerable`1<MediaTypeFormatter> CreateFormatterTracers(HttpRequestMessage request, IEnumerable`1<MediaTypeFormatter> formatters);
    [CompilerGeneratedAttribute]
private void <ExecuteBindingAsync>b__0(TraceRecord tr);
}
internal class System.Web.Http.Tracing.Tracers.FormUrlEncodedMediaTypeFormatterTracer : FormUrlEncodedMediaTypeFormatter {
    private FormUrlEncodedMediaTypeFormatter _inner;
    private MediaTypeFormatterTracer _innerTracer;
    private HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.Request { get; }
    public FormUrlEncodedMediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public FormUrlEncodedMediaTypeFormatterTracer(FormUrlEncodedMediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    private sealed virtual override HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.get_Request();
    public sealed virtual FormUrlEncodedMediaTypeFormatter get_Inner();
    public sealed virtual MediaTypeFormatter get_InnerFormatter();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
}
internal class System.Web.Http.Tracing.Tracers.HttpActionBindingTracer : HttpActionBinding {
    private static string ExecuteBindingAsyncMethodName;
    private HttpActionBinding _innerBinding;
    private ITraceWriter _traceWriter;
    public HttpActionBinding Inner { get; }
    public HttpActionBindingTracer(HttpActionBinding innerBinding, ITraceWriter traceWriter);
    public sealed virtual HttpActionBinding get_Inner();
    public virtual Task ExecuteBindingAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
}
internal class System.Web.Http.Tracing.Tracers.HttpActionDescriptorTracer : HttpActionDescriptor {
    private static string ExecuteMethodName;
    private HttpActionDescriptor _innerDescriptor;
    private ITraceWriter _traceWriter;
    [CompilerGeneratedAttribute]
private static Action`2<TraceRecord, object> CS$<>9__CachedAnonymousMethodDelegate3;
    public HttpActionDescriptor Inner { get; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public HttpActionBinding ActionBinding { get; public set; }
    public Collection`1<HttpMethod> SupportedHttpMethods { get; }
    public string ActionName { get; }
    public IActionResultConverter ResultConverter { get; }
    public Type ReturnType { get; }
    public HttpActionDescriptorTracer(HttpControllerContext controllerContext, HttpActionDescriptor innerDescriptor, ITraceWriter traceWriter);
    public sealed virtual HttpActionDescriptor get_Inner();
    public virtual ConcurrentDictionary`2<object, object> get_Properties();
    public virtual HttpActionBinding get_ActionBinding();
    public virtual void set_ActionBinding(HttpActionBinding value);
    public virtual Collection`1<HttpMethod> get_SupportedHttpMethods();
    public virtual string get_ActionName();
    public virtual IActionResultConverter get_ResultConverter();
    public virtual Type get_ReturnType();
    public virtual Task`1<object> ExecuteAsync(HttpControllerContext controllerContext, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public virtual Collection`1<T> GetCustomAttributes();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Collection`1<IFilter> GetFilters();
    public virtual Collection`1<FilterInfo> GetFilterPipeline();
    public virtual Collection`1<HttpParameterDescriptor> GetParameters();
    [CompilerGeneratedAttribute]
private static void <ExecuteAsync>b__2(TraceRecord tr, object value);
}
internal class System.Web.Http.Tracing.Tracers.HttpActionInvokerTracer : object {
    private static string InvokeActionAsyncMethodName;
    private IHttpActionInvoker _innerInvoker;
    private ITraceWriter _traceWriter;
    [CompilerGeneratedAttribute]
private static Action`2<TraceRecord, HttpResponseMessage> CS$<>9__CachedAnonymousMethodDelegate3;
    public IHttpActionInvoker Inner { get; }
    public HttpActionInvokerTracer(IHttpActionInvoker innerInvoker, ITraceWriter traceWriter);
    public sealed virtual IHttpActionInvoker get_Inner();
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Controllers.IHttpActionInvoker.InvokeActionAsync(HttpActionContext actionContext, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private static void <System.Web.Http.Controllers.IHttpActionInvoker.InvokeActionAsync>b__2(TraceRecord tr, HttpResponseMessage result);
}
internal class System.Web.Http.Tracing.Tracers.HttpActionSelectorTracer : object {
    private static string SelectActionMethodName;
    private IHttpActionSelector _innerSelector;
    private ITraceWriter _traceWriter;
    public IHttpActionSelector Inner { get; }
    public HttpActionSelectorTracer(IHttpActionSelector innerSelector, ITraceWriter traceWriter);
    public sealed virtual IHttpActionSelector get_Inner();
    public sealed virtual ILookup`2<string, HttpActionDescriptor> GetActionMapping(HttpControllerDescriptor controllerDescriptor);
    private sealed virtual override HttpActionDescriptor System.Web.Http.Controllers.IHttpActionSelector.SelectAction(HttpControllerContext controllerContext);
}
internal class System.Web.Http.Tracing.Tracers.HttpControllerActivatorTracer : object {
    private static string CreateMethodName;
    private IHttpControllerActivator _innerActivator;
    private ITraceWriter _traceWriter;
    public IHttpControllerActivator Inner { get; }
    public HttpControllerActivatorTracer(IHttpControllerActivator innerActivator, ITraceWriter traceWriter);
    public sealed virtual IHttpControllerActivator get_Inner();
    private sealed virtual override IHttpController System.Web.Http.Dispatcher.IHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType);
}
internal class System.Web.Http.Tracing.Tracers.HttpControllerDescriptorTracer : HttpControllerDescriptor {
    private static string CreateControllerMethodName;
    private HttpControllerDescriptor _innerDescriptor;
    private ITraceWriter _traceWriter;
    public HttpControllerDescriptor Inner { get; }
    public ConcurrentDictionary`2<object, object> Properties { get; }
    public HttpControllerDescriptorTracer(HttpControllerDescriptor innerDescriptor, ITraceWriter traceWriter);
    public sealed virtual HttpControllerDescriptor get_Inner();
    public virtual ConcurrentDictionary`2<object, object> get_Properties();
    public virtual Collection`1<T> GetCustomAttributes();
    public virtual Collection`1<T> GetCustomAttributes(bool inherit);
    public virtual Collection`1<IFilter> GetFilters();
    public virtual IHttpController CreateController(HttpRequestMessage request);
}
internal class System.Web.Http.Tracing.Tracers.HttpControllerSelectorTracer : object {
    private static string SelectControllerMethodName;
    private IHttpControllerSelector _innerSelector;
    private ITraceWriter _traceWriter;
    public IHttpControllerSelector Inner { get; }
    public HttpControllerSelectorTracer(IHttpControllerSelector innerSelector, ITraceWriter traceWriter);
    public sealed virtual IHttpControllerSelector get_Inner();
    private sealed virtual override HttpControllerDescriptor System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(HttpRequestMessage request);
    private sealed virtual override IDictionary`2<string, HttpControllerDescriptor> System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping();
}
internal class System.Web.Http.Tracing.Tracers.HttpControllerTracer : object {
    private static string DisposeMethodName;
    private static string ExecuteAsyncMethodName;
    private IHttpController _innerController;
    private HttpRequestMessage _request;
    private ITraceWriter _traceWriter;
    [CompilerGeneratedAttribute]
private static Action`2<TraceRecord, HttpResponseMessage> CS$<>9__CachedAnonymousMethodDelegate2;
    public IHttpController Inner { get; }
    public HttpControllerTracer(HttpRequestMessage request, IHttpController innerController, ITraceWriter traceWriter);
    public sealed virtual IHttpController get_Inner();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override Task`1<HttpResponseMessage> System.Web.Http.Controllers.IHttpController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Web.Http.Tracing.Tracers.HttpControllerTracer/<ExecuteAsyncCore>d__5")]
[DebuggerStepThroughAttribute]
private Task`1<HttpResponseMessage> ExecuteAsyncCore(HttpControllerContext controllerContext, CancellationToken cancellationToken);
    public static IHttpController ActualController(IHttpController controller);
    public static Type ActualControllerType(IHttpController controller);
    [CompilerGeneratedAttribute]
private static void <System.Web.Http.Controllers.IHttpController.ExecuteAsync>b__1(TraceRecord tr, HttpResponseMessage response);
}
internal class System.Web.Http.Tracing.Tracers.HttpParameterBindingTracer : HttpParameterBinding {
    private static string ExecuteBindingAsyncMethodName;
    [CompilerGeneratedAttribute]
private HttpParameterBinding <InnerBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    public HttpParameterBinding Inner { get; }
    protected HttpParameterBinding InnerBinding { get; private set; }
    protected ITraceWriter TraceWriter { get; private set; }
    public string ErrorMessage { get; }
    public bool WillReadBody { get; }
    public IEnumerable`1<ValueProviderFactory> ValueProviderFactories { get; }
    public HttpParameterBindingTracer(HttpParameterBinding innerBinding, ITraceWriter traceWriter);
    public sealed virtual HttpParameterBinding get_Inner();
    [CompilerGeneratedAttribute]
protected HttpParameterBinding get_InnerBinding();
    [CompilerGeneratedAttribute]
private void set_InnerBinding(HttpParameterBinding value);
    [CompilerGeneratedAttribute]
protected ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
private void set_TraceWriter(ITraceWriter value);
    public virtual string get_ErrorMessage();
    public virtual bool get_WillReadBody();
    public sealed virtual IEnumerable`1<ValueProviderFactory> get_ValueProviderFactories();
    public virtual Task ExecuteBindingAsync(ModelMetadataProvider metadataProvider, HttpActionContext actionContext, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <ExecuteBindingAsync>b__0(TraceRecord tr);
}
internal class System.Web.Http.Tracing.Tracers.JsonMediaTypeFormatterTracer : JsonMediaTypeFormatter {
    private JsonMediaTypeFormatter _inner;
    private MediaTypeFormatterTracer _innerTracer;
    private HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.Request { get; }
    public JsonMediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public JsonMediaTypeFormatterTracer(JsonMediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    private sealed virtual override HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.get_Request();
    public sealed virtual JsonMediaTypeFormatter get_Inner();
    public sealed virtual MediaTypeFormatter get_InnerFormatter();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual object ReadFromStream(Type type, Stream readStream, Encoding effectiveEncoding, IFormatterLogger formatterLogger);
    public virtual JsonReader CreateJsonReader(Type type, Stream readStream, Encoding effectiveEncoding);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    public virtual void WriteToStream(Type type, object value, Stream writeStream, Encoding effectiveEncoding);
    public virtual JsonWriter CreateJsonWriter(Type type, Stream writeStream, Encoding effectiveEncoding);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual JsonSerializer CreateJsonSerializer();
    public virtual DataContractJsonSerializer CreateDataContractSerializer(Type type);
}
internal class System.Web.Http.Tracing.Tracers.MediaTypeFormatterTracer : MediaTypeFormatter {
    private static string ReadFromStreamAsyncMethodName;
    private static string WriteToStreamAsyncMethodName;
    private static string GetPerRequestFormatterInstanceMethodName;
    private MediaTypeFormatter _inner;
    [CompilerGeneratedAttribute]
private MediaTypeFormatter <InnerFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`2<TraceRecord, object> CS$<>9__CachedAnonymousMethodDelegate8;
    public MediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; private set; }
    public ITraceWriter TraceWriter { get; public set; }
    public HttpRequestMessage Request { get; public set; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public MediaTypeFormatterTracer(MediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    public sealed virtual MediaTypeFormatter get_Inner();
    [CompilerGeneratedAttribute]
public sealed virtual MediaTypeFormatter get_InnerFormatter();
    [CompilerGeneratedAttribute]
private void set_InnerFormatter(MediaTypeFormatter value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequestMessage value);
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public static MediaTypeFormatter ActualMediaTypeFormatter(MediaTypeFormatter formatter);
    public static MediaTypeFormatter CreateTracer(MediaTypeFormatter formatter, ITraceWriter traceWriter, HttpRequestMessage request);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual string ToString();
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    private Task`1<object> ReadFromStreamAsyncCore(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, Nullable`1<CancellationToken> cancellationToken);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    private Task WriteToStreamAsyncCore(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, Nullable`1<CancellationToken> cancellationToken);
    [CompilerGeneratedAttribute]
private static void <ReadFromStreamAsyncCore>b__7(TraceRecord tr, object value);
}
internal class System.Web.Http.Tracing.Tracers.MessageHandlerTracer : DelegatingHandler {
    private static string SendAsyncMethodName;
    private DelegatingHandler _innerHandler;
    private ITraceWriter _traceWriter;
    [CompilerGeneratedAttribute]
private static Action`2<TraceRecord, HttpResponseMessage> CS$<>9__CachedAnonymousMethodDelegate2;
    public DelegatingHandler Inner { get; }
    public MessageHandlerTracer(DelegatingHandler innerHandler, ITraceWriter traceWriter);
    public sealed virtual DelegatingHandler get_Inner();
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethod5(HttpRequestMessage , CancellationToken );
    [CompilerGeneratedAttribute]
private static void <SendAsync>b__1(TraceRecord tr, HttpResponseMessage response);
}
internal class System.Web.Http.Tracing.Tracers.OverrideFilterTracer : FilterTracer {
    private IOverrideFilter _innerFilter;
    public IOverrideFilter Inner { get; }
    public Type FiltersToOverride { get; }
    public OverrideFilterTracer(IOverrideFilter innerFilter, ITraceWriter traceWriter);
    public sealed virtual IOverrideFilter get_Inner();
    public sealed virtual Type get_FiltersToOverride();
}
internal class System.Web.Http.Tracing.Tracers.RequestMessageHandlerTracer : DelegatingHandler {
    private ITraceWriter _traceWriter;
    [CompilerGeneratedAttribute]
private static Action`2<TraceRecord, HttpResponseMessage> CS$<>9__CachedAnonymousMethodDelegate3;
    public RequestMessageHandlerTracer(ITraceWriter traceWriter);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <>n__FabricatedMethod6(HttpRequestMessage , CancellationToken );
    [CompilerGeneratedAttribute]
private static void <SendAsync>b__2(TraceRecord tr, HttpResponseMessage response);
}
internal class System.Web.Http.Tracing.Tracers.XmlMediaTypeFormatterTracer : XmlMediaTypeFormatter {
    private XmlMediaTypeFormatter _inner;
    private MediaTypeFormatterTracer _innerTracer;
    private HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.Request { get; }
    public XmlMediaTypeFormatter Inner { get; }
    public MediaTypeFormatter InnerFormatter { get; }
    public IRequiredMemberSelector RequiredMemberSelector { get; public set; }
    public XmlMediaTypeFormatterTracer(XmlMediaTypeFormatter innerFormatter, ITraceWriter traceWriter, HttpRequestMessage request);
    private sealed virtual override HttpRequestMessage System.Web.Http.Tracing.IFormatterTracer.get_Request();
    public sealed virtual XmlMediaTypeFormatter get_Inner();
    public sealed virtual MediaTypeFormatter get_InnerFormatter();
    public virtual IRequiredMemberSelector get_RequiredMemberSelector();
    public virtual void set_RequiredMemberSelector(IRequiredMemberSelector value);
    public virtual bool CanReadType(Type type);
    public virtual bool CanWriteType(Type type);
    public virtual MediaTypeFormatter GetPerRequestFormatterInstance(Type type, HttpRequestMessage request, MediaTypeHeaderValue mediaType);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger, CancellationToken cancellationToken);
    public virtual Task`1<object> ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken);
    public virtual Task WriteToStreamAsync(Type type, object value, Stream writeStream, HttpContent content, TransportContext transportContext);
    public virtual void SetDefaultContentHeaders(Type type, HttpContentHeaders headers, MediaTypeHeaderValue mediaType);
    public virtual XmlSerializer CreateXmlSerializer(Type type);
    public virtual DataContractSerializer CreateDataContractSerializer(Type type);
    protected internal virtual XmlReader CreateXmlReader(Stream readStream, HttpContent content);
    protected internal virtual XmlWriter CreateXmlWriter(Stream writeStream, HttpContent content);
    protected internal virtual object GetDeserializer(Type type, HttpContent content);
    protected internal virtual object GetSerializer(Type type, object value, HttpContent content);
}
internal static class System.Web.Http.Tracing.TraceWriterExceptionMapper : object {
    private static string HttpErrorExceptionMessageFormat;
    private static string HttpErrorExceptionTypeFormat;
    private static string HttpErrorMessageDetailFormat;
    private static string HttpErrorModelStateErrorFormat;
    private static string HttpErrorModelStatePairFormat;
    private static string HttpErrorStackTraceFormat;
    private static string HttpErrorUserMessageFormat;
    [CompilerGeneratedAttribute]
private static Func`2<HttpResponseException, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<HttpResponseException, HttpStatusCode> CS$<>9__CachedAnonymousMethodDelegate3;
    public static void TranslateHttpResponseException(TraceRecord traceRecord);
    public static Nullable`1<TraceLevel> GetMappedTraceLevel(Exception exception);
    public static Nullable`1<TraceLevel> GetMappedTraceLevel(HttpResponseException httpResponseException);
    private static HttpResponseException ExtractHttpResponseException(Exception exception);
    private static void AddExceptions(HttpError httpError, List`1<string> messages);
    private static string FormatModelStateErrors(HttpError modelStateError);
    [CompilerGeneratedAttribute]
private static bool <ExtractHttpResponseException>b__0(HttpResponseException ex);
    [CompilerGeneratedAttribute]
private static HttpStatusCode <ExtractHttpResponseException>b__1(HttpResponseException ex);
}
internal static class System.Web.Http.UriQueryUtility : object {
    public static string UrlEncode(string str);
    public static string UrlDecode(string str);
    private static Byte[] UrlEncode(Byte[] bytes, int offset, int count, bool alwaysCreateNewReturnValue);
    private static Byte[] UrlEncode(Byte[] bytes, int offset, int count);
    private static string UrlDecodeInternal(string value, Encoding encoding);
    private static int HexToInt(char h);
    private static char IntToHex(int n);
    private static bool IsUrlSafeChar(char ch);
    private static bool ValidateUrlEncodingParameters(Byte[] bytes, int offset, int count);
}
internal class System.Web.Http.Validation.DefaultBodyModelValidator : object {
    public sealed virtual bool Validate(object model, Type type, ModelMetadataProvider metadataProvider, HttpActionContext actionContext, string keyPrefix);
    public virtual bool ShouldValidateType(Type type);
    private bool ValidateNodeAndChildren(ModelMetadata metadata, ValidationContext validationContext, object container, IEnumerable`1<ModelValidator> validators);
    private bool ValidateProperties(ModelMetadata metadata, ValidationContext validationContext);
    private bool ValidateElements(IEnumerable model, ValidationContext validationContext);
    private static bool ShallowValidate(ModelMetadata metadata, ValidationContext validationContext, object container, IEnumerable`1<ModelValidator> validators);
    private static Type GetElementType(Type type);
}
internal interface System.Web.Http.Validation.IBodyModelValidator {
    public abstract virtual bool Validate(object model, Type type, ModelMetadataProvider metadataProvider, HttpActionContext actionContext, string keyPrefix);
}
internal interface System.Web.Http.Validation.IModelValidatorCache {
    public abstract virtual ModelValidator[] GetValidators(ModelMetadata metadata);
}
internal class System.Web.Http.Validation.ModelStateFormatterLogger : object {
    private ModelStateDictionary _modelState;
    private string _prefix;
    public ModelStateFormatterLogger(ModelStateDictionary modelState, string prefix);
    public sealed virtual void LogError(string errorPath, string errorMessage);
    public sealed virtual void LogError(string errorPath, Exception exception);
}
internal class System.Web.Http.Validation.ModelValidatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelValidationNode <ParentNode>k__BackingField;
    public HttpActionContext ActionContext { get; private set; }
    public ModelValidationNode ParentNode { get; private set; }
    public ModelValidatedEventArgs(HttpActionContext actionContext, ModelValidationNode parentNode);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ParentNode();
    [CompilerGeneratedAttribute]
private void set_ParentNode(ModelValidationNode value);
}
internal class System.Web.Http.Validation.ModelValidatingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private HttpActionContext <ActionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelValidationNode <ParentNode>k__BackingField;
    public HttpActionContext ActionContext { get; private set; }
    public ModelValidationNode ParentNode { get; private set; }
    public ModelValidatingEventArgs(HttpActionContext actionContext, ModelValidationNode parentNode);
    [CompilerGeneratedAttribute]
public HttpActionContext get_ActionContext();
    [CompilerGeneratedAttribute]
private void set_ActionContext(HttpActionContext value);
    [CompilerGeneratedAttribute]
public ModelValidationNode get_ParentNode();
    [CompilerGeneratedAttribute]
private void set_ParentNode(ModelValidationNode value);
}
internal class System.Web.Http.Validation.ModelValidationNode : object {
    private IEnumerable`1<ModelValidator> _validators;
    private List`1<ModelValidationNode> _childNodes;
    private EventHandler`1<ModelValidatedEventArgs> Validated;
    private EventHandler`1<ModelValidatingEventArgs> Validating;
    [CompilerGeneratedAttribute]
private ModelMetadata <ModelMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelStateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateAllProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressValidation>k__BackingField;
    public ICollection`1<ModelValidationNode> ChildNodes { get; }
    public ModelMetadata ModelMetadata { get; private set; }
    public string ModelStateKey { get; private set; }
    public bool ValidateAllProperties { get; public set; }
    public bool SuppressValidation { get; public set; }
    public ModelValidationNode(ModelMetadata modelMetadata, string modelStateKey);
    public ModelValidationNode(ModelMetadata modelMetadata, string modelStateKey, IEnumerable`1<ModelValidationNode> childNodes);
    public void add_Validated(EventHandler`1<ModelValidatedEventArgs> value);
    public void remove_Validated(EventHandler`1<ModelValidatedEventArgs> value);
    public void add_Validating(EventHandler`1<ModelValidatingEventArgs> value);
    public void remove_Validating(EventHandler`1<ModelValidatingEventArgs> value);
    public ICollection`1<ModelValidationNode> get_ChildNodes();
    [CompilerGeneratedAttribute]
public ModelMetadata get_ModelMetadata();
    [CompilerGeneratedAttribute]
private void set_ModelMetadata(ModelMetadata value);
    [CompilerGeneratedAttribute]
public string get_ModelStateKey();
    [CompilerGeneratedAttribute]
private void set_ModelStateKey(string value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAllProperties();
    [CompilerGeneratedAttribute]
public void set_ValidateAllProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressValidation();
    [CompilerGeneratedAttribute]
public void set_SuppressValidation(bool value);
    public void CombineWith(ModelValidationNode otherNode);
    private void OnValidated(ModelValidatedEventArgs e);
    private void OnValidating(ModelValidatingEventArgs e);
    private object TryConvertContainerToMetadataType(ModelValidationNode parentNode);
    public void Validate(HttpActionContext actionContext);
    public void Validate(HttpActionContext actionContext, ModelValidationNode parentNode);
    private void ValidateChildren(HttpActionContext actionContext);
    private void ValidateProperties(HttpActionContext actionContext);
    private void ValidateThis(HttpActionContext actionContext, ModelValidationNode parentNode);
}
internal class System.Web.Http.Validation.ModelValidationRequiredMemberSelector : object {
    private ModelMetadataProvider _metadataProvider;
    private List`1<ModelValidatorProvider> _validatorProviders;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ModelValidator, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public ModelValidationRequiredMemberSelector(ModelMetadataProvider metadataProvider, IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public sealed virtual bool IsRequiredMember(MemberInfo member);
    [CompilerGeneratedAttribute]
private static object <IsRequiredMember>b__0();
    [CompilerGeneratedAttribute]
private static bool <IsRequiredMember>b__1(ModelValidator validator);
}
internal class System.Web.Http.Validation.ModelValidationResult : object {
    private string _memberName;
    private string _message;
    public string MemberName { get; public set; }
    public string Message { get; public set; }
    public string get_MemberName();
    public void set_MemberName(string value);
    public string get_Message();
    public void set_Message(string value);
}
internal abstract class System.Web.Http.Validation.ModelValidator : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ModelValidatorProvider> <ValidatorProviders>k__BackingField;
    protected internal IEnumerable`1<ModelValidatorProvider> ValidatorProviders { get; private set; }
    public bool IsRequired { get; }
    protected ModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    [CompilerGeneratedAttribute]
protected internal IEnumerable`1<ModelValidatorProvider> get_ValidatorProviders();
    [CompilerGeneratedAttribute]
private void set_ValidatorProviders(IEnumerable`1<ModelValidatorProvider> value);
    public virtual bool get_IsRequired();
    public static ModelValidator GetModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public abstract virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
}
internal class System.Web.Http.Validation.ModelValidatorCache : object {
    private ConcurrentDictionary`2<EfficientTypePropertyKey`2<Type, string>, ModelValidator[]> _validatorCache;
    private Lazy`1<IEnumerable`1<ModelValidatorProvider>> _validatorProviders;
    public ModelValidatorCache(Lazy`1<IEnumerable`1<ModelValidatorProvider>> validatorProviders);
    public sealed virtual ModelValidator[] GetValidators(ModelMetadata metadata);
}
internal abstract class System.Web.Http.Validation.ModelValidatorProvider : object {
    public abstract virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
}
internal abstract class System.Web.Http.Validation.Providers.AssociatedValidatorProvider : ModelValidatorProvider {
    protected virtual ICustomTypeDescriptor GetTypeDescriptor(Type type);
    public sealed virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
    protected abstract virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
    private IEnumerable`1<ModelValidator> GetValidatorsForProperty(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
    private IEnumerable`1<ModelValidator> GetValidatorsForType(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
}
internal class System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory : MulticastDelegate {
    public DataAnnotationsModelValidationFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(IEnumerable`1<ModelValidatorProvider> validatorProviders, ValidationAttribute attribute);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<ModelValidatorProvider> validatorProviders, ValidationAttribute attribute, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
internal class System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider : AssociatedValidatorProvider {
    internal DataAnnotationsModelValidationFactory DefaultAttributeFactory;
    internal Dictionary`2<Type, DataAnnotationsModelValidationFactory> AttributeFactories;
    internal DataAnnotationsValidatableObjectAdapterFactory DefaultValidatableFactory;
    internal Dictionary`2<Type, DataAnnotationsValidatableObjectAdapterFactory> ValidatableFactories;
    [CompilerGeneratedAttribute]
private static DataAnnotationsModelValidationFactory CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static DataAnnotationsValidatableObjectAdapterFactory CS$<>9__CachedAnonymousMethodDelegatef;
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
    public void RegisterAdapter(Type attributeType, Type adapterType);
    public void RegisterAdapterFactory(Type attributeType, DataAnnotationsModelValidationFactory factory);
    public void RegisterDefaultAdapter(Type adapterType);
    public void RegisterDefaultAdapterFactory(DataAnnotationsModelValidationFactory factory);
    private static ConstructorInfo GetAttributeAdapterConstructor(Type attributeType, Type adapterType);
    private static void ValidateAttributeAdapterType(Type adapterType);
    private static void ValidateAttributeType(Type attributeType);
    private static void ValidateAttributeFactory(DataAnnotationsModelValidationFactory factory);
    public void RegisterValidatableObjectAdapter(Type modelType, Type adapterType);
    public void RegisterValidatableObjectAdapterFactory(Type modelType, DataAnnotationsValidatableObjectAdapterFactory factory);
    public void RegisterDefaultValidatableObjectAdapter(Type adapterType);
    public void RegisterDefaultValidatableObjectAdapterFactory(DataAnnotationsValidatableObjectAdapterFactory factory);
    private static ConstructorInfo GetValidatableAdapterConstructor(Type adapterType);
    private static void ValidateValidatableAdapterType(Type adapterType);
    private static void ValidateValidatableModelType(Type modelType);
    private static void ValidateValidatableFactory(DataAnnotationsValidatableObjectAdapterFactory factory);
    [CompilerGeneratedAttribute]
private static ModelValidator <.ctor>b__c(IEnumerable`1<ModelValidatorProvider> validationProviders, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
private static ModelValidator <.ctor>b__d(IEnumerable`1<ModelValidatorProvider> validationProviders);
}
internal class System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory : MulticastDelegate {
    public DataAnnotationsValidatableObjectAdapterFactory(object object, IntPtr method);
    public virtual ModelValidator Invoke(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<ModelValidatorProvider> validatorProviders, AsyncCallback callback, object object);
    public virtual ModelValidator EndInvoke(IAsyncResult result);
}
internal class System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider : AssociatedValidatorProvider {
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
    internal static bool IsRequiredDataMember(Type containerType, IEnumerable`1<Attribute> attributes);
}
internal class System.Web.Http.Validation.Providers.InvalidModelValidatorProvider : AssociatedValidatorProvider {
    [CompilerGeneratedAttribute]
private static Func`2<Attribute, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    protected virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders, IEnumerable`1<Attribute> attributes);
    [CompilerGeneratedAttribute]
private static bool <GetValidators>b__0(Attribute attribute);
}
internal class System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider : ModelValidatorProvider {
    private IRequiredMemberSelector _requiredMemberSelector;
    public RequiredMemberModelValidatorProvider(IRequiredMemberSelector requiredMemberSelector);
    public virtual IEnumerable`1<ModelValidator> GetValidators(ModelMetadata metadata, IEnumerable`1<ModelValidatorProvider> validatorProviders);
}
internal class System.Web.Http.Validation.ReferenceEqualityComparer : object {
    private static ReferenceEqualityComparer _instance;
    public static ReferenceEqualityComparer Instance { get; }
    private static ReferenceEqualityComparer();
    public static ReferenceEqualityComparer get_Instance();
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
}
internal class System.Web.Http.Validation.Validators.DataAnnotationsModelValidator : ModelValidator {
    [CompilerGeneratedAttribute]
private ValidationAttribute <Attribute>k__BackingField;
    protected internal ValidationAttribute Attribute { get; private set; }
    public bool IsRequired { get; }
    public DataAnnotationsModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders, ValidationAttribute attribute);
    [CompilerGeneratedAttribute]
protected internal ValidationAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(ValidationAttribute value);
    public virtual bool get_IsRequired();
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
}
internal class System.Web.Http.Validation.Validators.ErrorModelValidator : ModelValidator {
    private string _errorMessage;
    public ErrorModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders, string errorMessage);
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
}
internal class System.Web.Http.Validation.Validators.RequiredMemberModelValidator : ModelValidator {
    public bool IsRequired { get; }
    public RequiredMemberModelValidator(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public virtual bool get_IsRequired();
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
}
internal class System.Web.Http.Validation.Validators.ValidatableObjectAdapter : ModelValidator {
    public ValidatableObjectAdapter(IEnumerable`1<ModelValidatorProvider> validatorProviders);
    public virtual IEnumerable`1<ModelValidationResult> Validate(ModelMetadata metadata, object container);
    private IEnumerable`1<ModelValidationResult> ConvertResults(IEnumerable`1<ValidationResult> results);
}
internal interface System.Web.Http.ValueProviders.IEnumerableValueProvider {
    public abstract virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
}
internal interface System.Web.Http.ValueProviders.IUriValueProviderFactory {
}
internal interface System.Web.Http.ValueProviders.IValueProvider {
    public abstract virtual bool ContainsPrefix(string prefix);
    public abstract virtual ValueProviderResult GetValue(string key);
}
internal class System.Web.Http.ValueProviders.Providers.CompositeValueProvider : Collection`1<IValueProvider> {
    public CompositeValueProvider(IList`1<IValueProvider> list);
    public virtual bool ContainsPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    public virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    internal static IDictionary`2<string, string> GetKeysFromPrefixFromProvider(IValueProvider provider, string prefix);
    protected virtual void InsertItem(int index, IValueProvider item);
    protected virtual void SetItem(int index, IValueProvider item);
}
internal class System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory : ValueProviderFactory {
    private ValueProviderFactory[] _factories;
    public CompositeValueProviderFactory(IEnumerable`1<ValueProviderFactory> factories);
    public virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
    internal static IValueProvider GetValueProvider(HttpActionContext actionContext, ValueProviderFactory[] factories);
}
internal class System.Web.Http.ValueProviders.Providers.ElementalValueProvider : object {
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RawValue>k__BackingField;
    public CultureInfo Culture { get; private set; }
    public string Name { get; private set; }
    public object RawValue { get; private set; }
    public ElementalValueProvider(string name, object rawValue, CultureInfo culture);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
private void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_RawValue();
    [CompilerGeneratedAttribute]
private void set_RawValue(object value);
    public sealed virtual bool ContainsPrefix(string prefix);
    public sealed virtual ValueProviderResult GetValue(string key);
}
internal class System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider : object {
    private CultureInfo _culture;
    private PrefixContainer _prefixContainer;
    private Dictionary`2<string, object> _values;
    private Lazy`1<Dictionary`2<string, object>> _lazyValues;
    internal CultureInfo Culture { get; }
    private PrefixContainer PrefixContainer { get; }
    private Dictionary`2<string, object> Values { get; }
    public NameValuePairsValueProvider(IEnumerable`1<KeyValuePair`2<string, string>> values, CultureInfo culture);
    public NameValuePairsValueProvider(Func`1<IEnumerable`1<KeyValuePair`2<string, string>>> valuesFactory, CultureInfo culture);
    public NameValuePairsValueProvider(IDictionary`2<string, object> values, CultureInfo culture);
    internal CultureInfo get_Culture();
    private PrefixContainer get_PrefixContainer();
    private Dictionary`2<string, object> get_Values();
    private static Dictionary`2<string, object> InitializeValues(IEnumerable`1<KeyValuePair`2<string, T>> nameValuePairs);
    public virtual bool ContainsPrefix(string prefix);
    public virtual IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    public virtual ValueProviderResult GetValue(string key);
    private static string GetAttemptedValue(object value);
}
internal class System.Web.Http.ValueProviders.Providers.QueryStringValueProvider : NameValuePairsValueProvider {
    public QueryStringValueProvider(HttpActionContext actionContext, CultureInfo culture);
}
internal class System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory : ValueProviderFactory {
    private static string RequestLocalStorageKey;
    public virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
}
internal class System.Web.Http.ValueProviders.Providers.RouteDataValueProvider : NameValuePairsValueProvider {
    public RouteDataValueProvider(HttpActionContext actionContext, CultureInfo culture);
    internal static IEnumerable`1<KeyValuePair`2<string, string>> GetRouteValues(IHttpRouteData routeData);
}
internal class System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory : ValueProviderFactory {
    private static string RequestLocalStorageKey;
    public virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
}
[AttributeUsageAttribute("2116")]
internal class System.Web.Http.ValueProviders.ValueProviderAttribute : ModelBinderAttribute {
    private Type[] _valueProviderFactoryTypes;
    public IEnumerable`1<Type> ValueProviderFactoryTypes { get; }
    public ValueProviderAttribute(Type valueProviderFactory);
    public ValueProviderAttribute(Type[] valueProviderFactories);
    public IEnumerable`1<Type> get_ValueProviderFactoryTypes();
    public virtual IEnumerable`1<ValueProviderFactory> GetValueProviderFactories(HttpConfiguration configuration);
    private static ValueProviderFactory Instantiate(Type factoryType);
}
internal abstract class System.Web.Http.ValueProviders.ValueProviderFactory : object {
    public abstract virtual IValueProvider GetValueProvider(HttpActionContext actionContext);
}
internal class System.Web.Http.ValueProviders.ValueProviderResult : object {
    private static CultureInfo _staticCulture;
    private CultureInfo _instanceCulture;
    [CompilerGeneratedAttribute]
private string <AttemptedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RawValue>k__BackingField;
    public string AttemptedValue { get; protected set; }
    public CultureInfo Culture { get; protected set; }
    public object RawValue { get; protected set; }
    public ValueProviderResult(object rawValue, string attemptedValue, CultureInfo culture);
    private static ValueProviderResult();
    [CompilerGeneratedAttribute]
public string get_AttemptedValue();
    [CompilerGeneratedAttribute]
protected void set_AttemptedValue(string value);
    public CultureInfo get_Culture();
    protected void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public object get_RawValue();
    [CompilerGeneratedAttribute]
protected void set_RawValue(object value);
    private static object ConvertSimpleType(CultureInfo culture, object value, Type destinationType);
    public object ConvertTo(Type type);
    public virtual object ConvertTo(Type type, CultureInfo culture);
    private static object UnwrapPossibleListType(CultureInfo culture, object value, Type destinationType);
}
internal class System.Web.PrefixContainer : object {
    private ICollection`1<string> _originalValues;
    private String[] _sortedValues;
    internal PrefixContainer(ICollection`1<string> values);
    internal bool ContainsPrefix(string prefix);
    internal IDictionary`2<string, string> GetKeysFromPrefix(string prefix);
    private static void GetKeyFromEmptyPrefix(string entry, IDictionary`2<string, string> results);
    private static void GetKeyFromNonEmptyPrefix(string prefix, string entry, IDictionary`2<string, string> results);
    internal static bool IsPrefixMatch(string prefix, string testString);
}
