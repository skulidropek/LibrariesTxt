[CompilerGeneratedAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class GitVersionInformation : object {
    public static string Major;
    public static string Minor;
    public static string Patch;
    public static string PreReleaseTag;
    public static string PreReleaseTagWithDash;
    public static string PreReleaseLabel;
    public static string PreReleaseLabelWithDash;
    public static string PreReleaseNumber;
    public static string WeightedPreReleaseNumber;
    public static string BuildMetaData;
    public static string BuildMetaDataPadded;
    public static string FullBuildMetaData;
    public static string MajorMinorPatch;
    public static string SemVer;
    public static string LegacySemVer;
    public static string LegacySemVerPadded;
    public static string AssemblySemVer;
    public static string AssemblySemFileVer;
    public static string FullSemVer;
    public static string InformationalVersion;
    public static string BranchName;
    public static string EscapedBranchName;
    public static string Sha;
    public static string ShortSha;
    public static string NuGetVersionV2;
    public static string NuGetVersion;
    public static string NuGetPreReleaseTagV2;
    public static string NuGetPreReleaseTag;
    public static string VersionSourceSha;
    public static string CommitsSinceVersionSource;
    public static string CommitsSinceVersionSourcePadded;
    public static string UncommittedChanges;
    public static string CommitDate;
    private static GitVersionInformation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iesi.Collections.Generic.LinkedHashSet`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<T, LinkedHashNode`1<T, T>> _elements;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LinkedHashNode`1<T, T> _first;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LinkedHashNode`1<T, T> _last;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public LinkedHashSet`1(IEnumerable`1<T> initialValues);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual bool Add(T item);
    [NullableContextAttribute("0")]
public Enumerator<T> GetEnumerator();
    private int CountOthers(IEnumerable`1<T> items, Int32& numberOfOthersPresent);
    private static ISet`1<T> AsSet(IEnumerable`1<T> items);
    private void Unlink(LinkedHashNode`1<T, T> node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Iesi.Collections.Generic.ReadOnlySet`1 : object {
    private static string ErrorMessage;
    private ISet`1<T> _basisSet;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ReadOnlySet`1(ISet`1<T> basisSet);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ISet<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ISet<T>.UnionWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.IntersectWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.ExceptWith(IEnumerable`1<T> other);
    private sealed virtual override void System.Collections.Generic.ISet<T>.SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("The SynchronizedSet will be removed in a future version")]
public class Iesi.Collections.Generic.SynchronizedSet`1 : object {
    private ISet`1<T> _basisSet;
    private object _syncRoot;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SynchronizedSet`1(ISet`1<T> basisSet);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual bool Add(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
