public class ImpromptuInterface.ActLikeCaster : DynamicObject {
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    private List`1<Type> _interfaceTypes;
    [CompilerGeneratedAttribute]
private ActLikeMaker <Maker>k__BackingField;
    public object Target { get; }
    public ActLikeMaker Maker { get; public set; }
    public ActLikeCaster(object target, IEnumerable`1<Type> types);
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
public ActLikeMaker get_Maker();
    [CompilerGeneratedAttribute]
public void set_Maker(ActLikeMaker value);
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
}
[AttributeUsageAttribute("704")]
public class ImpromptuInterface.AliasAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public AliasAttribute(string name);
    public string get_Name();
}
public class ImpromptuInterface.Build.ActLikeMaker : object {
    protected ModuleBuilder _builder;
    protected AssemblyBuilder _ab;
    protected IDictionary`2<TypeHash, Type> _typeHash;
    protected object TypeCacheLock;
    protected IDictionary`2<TypeHash, Type> _delegateCache;
    protected object DelegateCacheLock;
    protected MethodInfo ActLikeRec;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyBuilderAccess <AssemblyAccess>k__BackingField;
    public string AssemblyName { get; private set; }
    private ModuleBuilder Builder { get; }
    public AssemblyBuilderAccess AssemblyAccess { get; private set; }
    public ActLikeMaker(AssemblyBuilderAccess access, string assemblyName);
    public object ActLike(object originalDynamic, Type[] otherInterfaces);
    public TInterface Create();
    public TInterface Create(Object[] args);
    public IEnumerable`1<TInterface> AllActLike(IEnumerable`1<object> originalDynamic, Type[] otherInterfaces);
    internal static object InitializeProxy(Type proxytype, object original, IEnumerable`1<Type> interfaces, IDictionary`2<string, Type> propertySpec, ActLikeMaker maker);
    public TInterface ActLike(object originalDynamic, Type[] otherInterfaces);
    public object ActLikeProperties(object originalDynamic, IDictionary`2<string, Type> propertySpec);
    public object DynamicActLike(object originalDynamic, Type[] otherInterfaces);
    public static TInterface RecursiveActLikeForProxy(ActLikeMaker maker, object target);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
private void set_AssemblyName(string value);
    private ModuleBuilder get_Builder();
    public Type BuildType(Type contextType, Type mainInterface, Type[] otherInterfaces);
    public Type BuildType(Type contextType, IDictionary`2<string, Type> informalInterface);
    public bool PreLoadProxy(Type proxyType, ActLikeProxyAttribute attribute);
    public bool PreLoadProxiesFromAssembly(Assembly assembly);
    private Type BuildTypeHelper(ModuleBuilder builder, Type contextType, IDictionary`2<string, Type> informalInterface);
    private void MakePropertyDescribedProperty(ModuleBuilder builder, TypeBuilder typeBuilder, Type contextType, string tName, Type tReturnType);
    private static Type DefineCallsiteFieldForMethod(TypeBuilder builder, ActLikeMaker maker, string name, Type returnType, IEnumerable`1<Type> argTypes, MethodInfo info);
    internal static Type DefineCallsiteField(TypeBuilder builder, ActLikeMaker maker, string name, Type returnType, Type[] argTypes);
    private Type BuildTypeHelper(ModuleBuilder builder, Type contextType, Type[] interfaces);
    private IEnumerable`1<Type> FlattenGenericParameters(Type type);
    private Type ReplaceTypeWithGenericBuilder(Type type, IDictionary`2<Type, GenericTypeParameterBuilder> dict);
    private object CustomAttributeTypeArgument(CustomAttributeTypedArgument argument);
    private CustomAttributeBuilder GetAttributeBuilder(CustomAttributeData data);
    private void MakeMethod(ModuleBuilder builder, MethodInfo info, TypeBuilder typeBuilder, Type contextType, bool nonRecursive, bool defaultImp);
    private TypeBuilder DefineBuilderForCallSite(ModuleBuilder builder, string tCallSiteInvokeName);
    private Tuple`2<Type, Type[]> GetParamTypes(object builder, MethodInfo info);
    private void EmitMethodBody(MethodBuilder methodBuilder, ParameterInfo[] paramInfo, MethodEmitInfo emitInfo);
    private void MakeProperty(ModuleBuilder builder, PropertyInfo info, TypeBuilder typeBuilder, Type contextType, bool nonRecursive, bool defaultImp);
    private void MakeEvent(ModuleBuilder builder, EventInfo info, TypeBuilder typeBuilder, Type contextType, bool defaultImp);
    private void EmitRemoveEvent(EventBuilder tMp, MethodBuilder tRemoveBuilder, EventInfo info, MethodInfo tRemoveMethod, FieldInfo tGetField, FieldInfo tSetField, FieldInfo tIsEventField, EmitEventInfo tEmitInfo);
    private void EmitAddEvent(EventBuilder tMp, MethodBuilder tAddBuilder, EventInfo info, MethodInfo tAddMethod, FieldInfo tGetField, FieldInfo tSetField, FieldInfo tIsEventField, EmitEventInfo tEmitInfo);
    private void MakePropertyHelper(ModuleBuilder builder, TypeBuilder typeBuilder, PropertyEmitInfo emitInfo, PropertyInfo info);
    public static CustomAttributeBuilder ToCustomAttributeBuilder(CustomAttributeData customAttributeData);
    private void EmitProperty(TypeBuilder typeBuilder, MethodBuilder getMethodBuilder, PropertyBuilder tMp, PropertyInfo info, MethodBuilder setMethodBuilder, PropertyEmitInfo emitInfo);
    private Type UpdateCallsiteFuncType(Type tFuncGeneric, Type returnType, Type[] argTypes);
    private Type ReduceToElementType(Type type);
    public Type EmitCallSiteFuncType(IEnumerable`1<Type> argTypes, Type returnType);
    internal Type GenerateCallSiteFuncType(IEnumerable`1<Type> argTypes, Type returnType, MethodInfo methodInfo, TypeBuilder builder);
    private Type GenerateFullDelegate(TypeBuilder builder, Type returnType, IEnumerable`1<Type> types, MethodInfo info);
    private ParameterAttributes AttributesForParam(ParameterInfo param);
    [CompilerGeneratedAttribute]
public AssemblyBuilderAccess get_AssemblyAccess();
    [CompilerGeneratedAttribute]
private void set_AssemblyAccess(AssemblyBuilderAccess value);
    private static void GenerateAssembly(string name, AssemblyBuilderAccess access, AssemblyBuilder& ab, ModuleBuilder& mb);
}
public abstract class ImpromptuInterface.Build.ActLikeProxy : object {
    [DynamicAttribute]
[CompilerGeneratedAttribute]
private object <ActLikeProxyOriginal>k__BackingField;
    [CompilerGeneratedAttribute]
private ActLikeMaker <ActLikeProxyActLikeMaker>k__BackingField;
    private bool _init;
    [DynamicAttribute]
private object ActLikeProxyOriginal { get; private set; }
    private ActLikeMaker ActLikeProxyActLikeMaker { get; private set; }
    [DynamicAttribute]
private object ImpromptuInterface.IActLikeProxy.Original { get; }
    private ActLikeMaker ImpromptuInterface.IActLikeProxy.Maker { get; }
    [CompilerGeneratedAttribute]
private object get_ActLikeProxyOriginal();
    [CompilerGeneratedAttribute]
private void set_ActLikeProxyOriginal(object value);
    [CompilerGeneratedAttribute]
private ActLikeMaker get_ActLikeProxyActLikeMaker();
    [CompilerGeneratedAttribute]
private void set_ActLikeProxyActLikeMaker(ActLikeMaker value);
    private sealed virtual override object ImpromptuInterface.IActLikeProxy.get_Original();
    private sealed virtual override ActLikeMaker ImpromptuInterface.IActLikeProxy.get_Maker();
    private sealed virtual override void ImpromptuInterface.Build.IActLikeProxyInitialize.Initialize(object original, IEnumerable`1<Type> interfaces, IDictionary`2<string, Type> informalInterface, ActLikeMaker maker);
    public virtual bool Equals(object obj);
    public bool Equals(ActLikeProxy other);
    public virtual int GetHashCode();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
[AttributeUsageAttribute("4")]
public class ImpromptuInterface.Build.ActLikeProxyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <Interfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Context>k__BackingField;
    public Type[] Interfaces { get; public set; }
    public Type Context { get; public set; }
    public ActLikeProxyAttribute(Type[] interfaces, Type context);
    [CompilerGeneratedAttribute]
public Type[] get_Interfaces();
    [CompilerGeneratedAttribute]
public void set_Interfaces(Type[] value);
    [CompilerGeneratedAttribute]
public Type get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(Type value);
}
public class ImpromptuInterface.Build.ActLikeProxySerializationHelper : object {
    public object Original;
    public Type[] Interfaces;
    public String[] MonoInterfaces;
    public Type Context;
    public sealed virtual object GetRealObject(StreamingContext context);
}
public static class ImpromptuInterface.Build.BuildProxy : object {
    [CompilerGeneratedAttribute]
private static ActLikeMaker <DefaultProxyMaker>k__BackingField;
    public static ActLikeMaker DefaultProxyMaker { get; }
    private static BuildProxy();
    [CompilerGeneratedAttribute]
public static ActLikeMaker get_DefaultProxyMaker();
    public static ActLikeMaker CollectableProxyMaker();
}
internal static class ImpromptuInterface.Build.CompatHelper : object {
    public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access);
}
[ExtensionAttribute]
public static class ImpromptuInterface.Build.EmitExtensions : object {
    [ExtensionAttribute]
public static FieldInfo GetFieldEvenIfGeneric(Type type, string fieldName);
    [ExtensionAttribute]
public static MethodInfo GetMethodEvenIfGeneric(Type type, string methodName, Type[] argTypes);
    [ExtensionAttribute]
public static MethodInfo GetMethodEvenIfGeneric(Type type, string methodName);
    [ExtensionAttribute]
public static BranchTrueOverBlock EmitBranchTrue(ILGenerator generator, Action`1<ILGenerator> condition);
    [ExtensionAttribute]
public static BranchFalseOverBlock EmitBranchFalse(ILGenerator generator, Action`1<ILGenerator> condition);
    [ExtensionAttribute]
public static void EmitInvocation(ILGenerator generator, Action`1<ILGenerator> target, Action`1<ILGenerator> call, Action`1[] parameters);
    [ExtensionAttribute]
public static void EmitCallsiteCreate(ILGenerator generator, Type funcType);
    [ExtensionAttribute]
public static void EmitCallInvokeFunc(ILGenerator generator, Type funcType);
    [ExtensionAttribute]
public static void EmitArray(ILGenerator generator, Type arrayType, IList`1<Action`1<ILGenerator>> emitElements);
    [ExtensionAttribute]
public static void EmitStoreLocation(ILGenerator generator, int location);
    [ExtensionAttribute]
public static void EmitLoadArgument(ILGenerator generator, int location);
    [ExtensionAttribute]
public static void EmitLoadLocation(ILGenerator generator, int location);
    [ExtensionAttribute]
public static void EmitDynamicMethodInvokeBinder(ILGenerator generator, CSharpBinderFlags flag, string name, IEnumerable`1<Type> genericParms, Type context, ParameterInfo[] argInfo, IEnumerable`1<string> argNames);
    [ExtensionAttribute]
public static void EmitDynamicSetBinder(ILGenerator generator, CSharpBinderFlags flag, string name, Type context, Type[] argTypes);
    [ExtensionAttribute]
public static void EmitDynamicSetBinderDynamicParams(ILGenerator generator, CSharpBinderFlags flag, string name, Type context, Type[] argTypes);
    [ExtensionAttribute]
public static void EmitDynamicBinaryOpBinder(ILGenerator generator, CSharpBinderFlags flag, ExpressionType exprType, Type context, Type[] argTypes);
    [ExtensionAttribute]
public static void EmitDynamicGetBinder(ILGenerator generator, CSharpBinderFlags flag, string name, Type context, Type[] argTypes);
    [ExtensionAttribute]
public static void EmitCreateCSharpArgumentInfo(ILGenerator generator, CSharpArgumentInfoFlags flag, string name);
    [ExtensionAttribute]
public static void EmitDynamicConvertBinder(ILGenerator generator, CSharpBinderFlags flag, Type returnType, Type context);
    [ExtensionAttribute]
public static void EmitDynamicIsEventBinder(ILGenerator generator, CSharpBinderFlags flag, string name, Type context);
    [ExtensionAttribute]
public static void EmitTypeOf(ILGenerator generator, Type type);
}
public interface ImpromptuInterface.Build.IActLikeProxyInitialize {
    public abstract virtual void Initialize(object original, IEnumerable`1<Type> interfaces, IDictionary`2<string, Type> informalInterface, ActLikeMaker maker);
}
public class ImpromptuInterface.Build.TypeHash : object {
    public MemberInfo[] Types;
    public IDictionary`2<string, Type> InformalInterface;
    [ObsoleteAttribute("Use TypeHash.Create instead.")]
public TypeHash(IEnumerable`1<Type> moreTypes);
    [ObsoleteAttribute("Use TypeHash.Create instead.")]
public TypeHash(Type type1, Type[] moreTypes);
    [ObsoleteAttribute("Use TypeHash.Create instead.")]
public TypeHash(Type type1, IDictionary`2<string, Type> informalInterface);
    [ObsoleteAttribute("Use TypeHash.Create instead.")]
public TypeHash(bool strictOrder, MemberInfo[] moreTypes);
    public bool Equals(TypeHash other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TypeHash left, TypeHash right);
    public static bool op_Inequality(TypeHash left, TypeHash right);
    public static TypeHash Create(IEnumerable`1<Type> moreTypes);
    public static TypeHash Create(Type type1, Type[] moreTypes);
    public static TypeHash Create(Type type1, IDictionary`2<string, Type> informalInterface);
    public static TypeHash Create(bool strictOrder, MemberInfo[] moreTypes);
}
public interface ImpromptuInterface.IActLikeProxy {
    [DynamicAttribute]
public object Original { get; }
    public ActLikeMaker Maker { get; }
    public abstract virtual object get_Original();
    public abstract virtual ActLikeMaker get_Maker();
}
[ExtensionAttribute]
public static class ImpromptuInterface.Impromptu : object {
    [ExtensionAttribute]
public static TInterface ActLike(object originalDynamic, Type[] otherInterfaces);
    [ExtensionAttribute]
public static object UndoActLike(object proxiedObject);
    [ExtensionAttribute]
public static object ActLike(object originalDynamic, Type[] otherInterfaces);
    public static TInterface Create();
    public static TInterface Create(Object[] args);
    [ExtensionAttribute]
public static object ActLikeProperties(object originalDynamic, IDictionary`2<string, Type> propertySpec);
    [ExtensionAttribute]
public static IEnumerable`1<TInterface> AllActLike(IEnumerable`1<object> originalDynamic, Type[] otherInterfaces);
    public static object DynamicActLike(object originalDynamic, Type[] otherInterfaces);
}
[AttributeUsageAttribute("1220")]
public class ImpromptuInterface.NonRecursiveInterfaceAttribute : Attribute {
}
internal class ImpromptuInterface.Optimization.BareBonesList`1 : object {
    private T[] _list;
    private int _addIndex;
    private int _length;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public BareBonesList`1(int length);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class ImpromptuInterface.Optimization.BinderHash : object {
    [CompilerGeneratedAttribute]
private bool <KnownBinder>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BinderType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaticContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DelegateType>k__BackingField;
    [CompilerGeneratedAttribute]
private String_OR_InvokeMemberName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ArgNames>k__BackingField;
    public bool KnownBinder { get; protected set; }
    public Type BinderType { get; protected set; }
    public bool StaticContext { get; protected set; }
    public bool IsEvent { get; protected set; }
    public Type DelegateType { get; protected set; }
    public String_OR_InvokeMemberName Name { get; protected set; }
    public Type Context { get; protected set; }
    public String[] ArgNames { get; protected set; }
    protected BinderHash(Type delegateType, String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public static BinderHash Create(Type delType, String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    [CompilerGeneratedAttribute]
public bool get_KnownBinder();
    [CompilerGeneratedAttribute]
protected void set_KnownBinder(bool value);
    [CompilerGeneratedAttribute]
public Type get_BinderType();
    [CompilerGeneratedAttribute]
protected void set_BinderType(Type value);
    [CompilerGeneratedAttribute]
public bool get_StaticContext();
    [CompilerGeneratedAttribute]
protected void set_StaticContext(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEvent();
    [CompilerGeneratedAttribute]
protected void set_IsEvent(bool value);
    [CompilerGeneratedAttribute]
public Type get_DelegateType();
    [CompilerGeneratedAttribute]
protected void set_DelegateType(Type value);
    [CompilerGeneratedAttribute]
public String_OR_InvokeMemberName get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(String_OR_InvokeMemberName value);
    [CompilerGeneratedAttribute]
public Type get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(Type value);
    [CompilerGeneratedAttribute]
public String[] get_ArgNames();
    [CompilerGeneratedAttribute]
protected void set_ArgNames(String[] value);
    public virtual bool Equals(BinderHash other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class ImpromptuInterface.Optimization.BinderHash`1 : GenericBinderHashBase {
    protected BinderHash`1(String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public static BinderHash`1<T> Create(String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
    public virtual bool Equals(BinderHash other);
}
internal class ImpromptuInterface.Optimization.GenericBinderHashBase : BinderHash {
    protected GenericBinderHashBase(Type delegateType, String_OR_InvokeMemberName name, Type context, String[] argNames, Type binderType, bool staticContext, bool isEvent, bool knownBinder);
}
[ExtensionAttribute]
public static class ImpromptuInterface.Optimization.Util : object {
    public static bool IsMono;
    private static Util();
    public static bool IsAnonymousType(object target);
    [ExtensionAttribute]
public static object GetTargetContext(object target, Type& context, Boolean& staticContext);
    [ExtensionAttribute]
public static Type FixContext(Type context);
    [ExtensionAttribute]
public static T GetValue(SerializationInfo info, string name);
}
[AttributeUsageAttribute("3140")]
public class ImpromptuInterface.UseNamedArgumentAttribute : Attribute {
}
