internal static class InfluxData.Net.Common.Constants.QueryParams : object {
    public static string Username;
    public static string Password;
}
public static class InfluxData.Net.Common.Constants.TimeUnit : object {
    public static string Milliseconds;
    public static string Seconds;
    public static string Minutes;
    public static string Hours;
}
public enum InfluxData.Net.Common.Enums.InfluxDbVersion : Enum {
    public int value__;
    public static InfluxDbVersion Latest;
    public static InfluxDbVersion v_1_3;
    public static InfluxDbVersion v_1_0_0;
    public static InfluxDbVersion v_0_9_6;
    public static InfluxDbVersion v_0_9_5;
    public static InfluxDbVersion v_0_9_2;
    public static InfluxDbVersion v_0_8_x;
}
public enum InfluxData.Net.Common.Enums.KapacitorVersion : Enum {
    public int value__;
    public static KapacitorVersion Latest;
    public static KapacitorVersion v_1_0_0;
    public static KapacitorVersion v_0_10_1;
    public static KapacitorVersion v_0_10_0;
}
public enum InfluxData.Net.Common.Enums.QueryLocation : Enum {
    public int value__;
    public static QueryLocation Uri;
    public static QueryLocation FormData;
}
[ExtensionAttribute]
public static class InfluxData.Net.Common.Helpers.MultipartContentExtensions : object {
    [ExtensionAttribute]
public static MultipartFormDataContent ToMultipartHttpContent(string content, string name);
}
[ExtensionAttribute]
public static class InfluxData.Net.Common.Helpers.ObjectExtensions : object {
    private static DateTime _epoch;
    private static ObjectExtensions();
    [ExtensionAttribute]
public static string ToJson(object object);
    [ExtensionAttribute]
public static long ToUnixTime(DateTime date, string precision);
    [ExtensionAttribute]
public static DateTime FromUnixTime(long unixTime, string precision);
    [ExtensionAttribute]
public static string ToCommaSeparatedString(IEnumerable`1<string> items);
    [ExtensionAttribute]
public static string ToCommaSpaceSeparatedString(IEnumerable`1<string> items);
    [ExtensionAttribute]
public static string ToAndSpaceSeparatedString(IEnumerable`1<string> items);
    [ExtensionAttribute]
public static string ToSemicolonSpaceSeparatedString(IEnumerable`1<string> items);
}
public class InfluxData.Net.Common.Helpers.Stopwatch : object {
    private long _elapsed;
    private bool _isRunning;
    private long _startTick;
    public bool IsRunning { get; }
    public TimeSpan Elapsed { get; }
    public long ElapsedMilliseconds { get; }
    public long ElapsedTicks { get; }
    public bool get_IsRunning();
    public TimeSpan get_Elapsed();
    public long get_ElapsedMilliseconds();
    public long get_ElapsedTicks();
    public static Stopwatch StartNew();
    public void Reset();
    public void Start();
    public void Stop();
    private long GetCurrentElapsedTicks();
    private long GetCurrentTicks();
}
public static class InfluxData.Net.Common.Helpers.Validate : object {
    public static void IsNotNull(T value, string paramName);
    public static void IsNotNull(T value, string paramName, string message);
    public static void IsFalse(bool value, string message);
    public static void IsTrue(bool value, string message);
    public static void IsNotNullOrEmpty(string value, string paramName);
    public static void IsNotZeroLength(T[] array, string paramName);
    public static void IsNotZeroLength(T[] array, string paramName, string message);
    public static void IsNotZeroLength(List`1<T> list, string paramName);
}
public interface InfluxData.Net.Common.Infrastructure.IConfiguration {
    public Uri EndpointUri { get; }
    public string Username { get; }
    public string Password { get; }
    public HttpClient HttpClient { get; }
    public bool ThrowOnWarning { get; }
    public abstract virtual Uri get_EndpointUri();
    public abstract virtual string get_Username();
    public abstract virtual string get_Password();
    public abstract virtual HttpClient get_HttpClient();
    public abstract virtual bool get_ThrowOnWarning();
}
public interface InfluxData.Net.Common.Infrastructure.IInfluxDataApiResponse {
    public HttpStatusCode StatusCode { get; }
    public string Body { get; }
    public bool Success { get; }
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_Body();
    public abstract virtual bool get_Success();
}
public interface InfluxData.Net.Common.Infrastructure.IInfluxDbClientConfiguration {
    public InfluxDbVersion InfluxVersion { get; }
    public QueryLocation QueryLocation { get; }
    public abstract virtual InfluxDbVersion get_InfluxVersion();
    public abstract virtual QueryLocation get_QueryLocation();
}
public interface InfluxData.Net.Common.Infrastructure.IKapacitorClientConfiguration {
    public KapacitorVersion KapacitorVersion { get; }
    public abstract virtual KapacitorVersion get_KapacitorVersion();
}
public class InfluxData.Net.Common.Infrastructure.InfluxDataApiDeleteResponse : InfluxDataApiResponse {
    public bool Success { get; }
    public InfluxDataApiDeleteResponse(HttpStatusCode statusCode, string body);
    public virtual bool get_Success();
}
public class InfluxData.Net.Common.Infrastructure.InfluxDataApiException : InfluxDataException {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseBody>k__BackingField;
    public HttpStatusCode StatusCode { get; private set; }
    public string ResponseBody { get; private set; }
    public InfluxDataApiException(HttpStatusCode statusCode, string responseBody);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public string get_ResponseBody();
    [CompilerGeneratedAttribute]
private void set_ResponseBody(string value);
}
public class InfluxData.Net.Common.Infrastructure.InfluxDataApiResponse : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public HttpStatusCode StatusCode { get; private set; }
    public string Body { get; private set; }
    public bool Success { get; }
    public InfluxDataApiResponse(HttpStatusCode statusCode, string body);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Body();
    [CompilerGeneratedAttribute]
private void set_Body(string value);
    public virtual bool get_Success();
}
public class InfluxData.Net.Common.Infrastructure.InfluxDataApiWriteResponse : InfluxDataApiResponse {
    public bool Success { get; }
    public InfluxDataApiWriteResponse(HttpStatusCode statusCode, string body);
    public virtual bool get_Success();
}
public class InfluxData.Net.Common.Infrastructure.InfluxDataException : Exception {
    public InfluxDataException(string message, Exception innerException);
    public InfluxDataException(string message);
}
public class InfluxData.Net.Common.Infrastructure.InfluxDataWarningException : InfluxDataException {
    [CompilerGeneratedAttribute]
private string <WarningMessage>k__BackingField;
    public string WarningMessage { get; private set; }
    public InfluxDataWarningException(string warningMessage);
    [CompilerGeneratedAttribute]
public string get_WarningMessage();
    [CompilerGeneratedAttribute]
private void set_WarningMessage(string value);
}
public abstract class InfluxData.Net.Common.RequestClients.RequestClientBase : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    private string _userAgent;
    public IConfiguration Configuration { get; private set; }
    protected RequestClientBase(IInfluxDbClientConfiguration configuration, string userAgent);
    protected RequestClientBase(IKapacitorClientConfiguration configuration, string userAgent);
    protected RequestClientBase(IConfiguration configuration, string userAgent);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(IConfiguration value);
    [AsyncStateMachineAttribute("InfluxData.Net.Common.RequestClients.RequestClientBase/<RequestAsync>d__8")]
public Task`1<IInfluxDataApiResponse> RequestAsync(HttpMethod method, string path, IDictionary`2<string, string> requestParams, HttpContent content, bool includeAuthToQuery, bool headerIsBody);
    [AsyncStateMachineAttribute("InfluxData.Net.Common.RequestClients.RequestClientBase/<RequestInnerAsync>d__9")]
private Task`1<HttpResponseMessage> RequestInnerAsync(HttpCompletionOption completionOption, CancellationToken cancellationToken, HttpMethod method, string path, IDictionary`2<string, string> extraParams, HttpContent content, bool includeAuthToQuery);
    private StringBuilder BuildUri(string path, IDictionary`2<string, string> requestParams, bool includeAuthToQuery);
    private HttpRequestMessage BuildRequest(HttpMethod method, HttpContent content, StringBuilder urlBuilder);
    private void HandleIfErrorResponse(HttpStatusCode statusCode, string responseBody);
}
[ExtensionAttribute]
public static class InfluxData.Net.Common.StringExtensions : object {
    [ExtensionAttribute]
public static string Sanitize(string stringValue);
    [ExtensionAttribute]
private static string RegexReplace(string stringValue, string matchPattern, string toReplaceWith);
    [ExtensionAttribute]
private static string RegexReplace(string stringValue, string matchPattern, string toReplaceWith, RegexOptions regexOptions);
}
[ExtensionAttribute]
public static class InfluxData.Net.InfluxData.Helpers.ResponseExtensionsBase : object {
    [ExtensionAttribute]
public static T ReadAs(IInfluxDataApiResponse response);
    [ExtensionAttribute]
public static T ReadAs(string responseBody);
}
