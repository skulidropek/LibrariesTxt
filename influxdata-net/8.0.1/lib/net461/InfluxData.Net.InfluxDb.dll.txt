public class InfluxData.Net.InfluxDb.ClientModules.BasicClientModule : ClientModuleBase {
    private IBasicResponseParser _basicResponseParser;
    public BasicClientModule(IInfluxDbRequestClient requestClient, IBasicResponseParser basicResponseParser);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.BasicClientModule/<QueryAsync>d__1")]
public virtual Task`1<IEnumerable`1<Serie>> QueryAsync(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.BasicClientModule/<QueryAsync>d__2")]
public virtual Task`1<IEnumerable`1<Serie>> QueryAsync(IEnumerable`1<string> queries, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.BasicClientModule/<QueryAsync>d__3")]
public virtual Task`1<IEnumerable`1<Serie>> QueryAsync(string queryTemplate, object parameters, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.BasicClientModule/<MultiQueryAsync>d__4")]
public virtual Task`1<IEnumerable`1<IEnumerable`1<Serie>>> MultiQueryAsync(IEnumerable`1<string> queries, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.BasicClientModule/<WriteAsync>d__6")]
public virtual Task`1<IInfluxDataApiResponse> WriteAsync(Point point, string dbName, string retentionPolicy, string precision);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.BasicClientModule/<WriteAsync>d__7")]
public virtual Task`1<IInfluxDataApiResponse> WriteAsync(IEnumerable`1<Point> points, string dbName, string retentionPolicy, string precision);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__0(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<SeriesResult>> <>n__1(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
}
public class InfluxData.Net.InfluxDb.ClientModules.ClientModuleBase : object {
    [CompilerGeneratedAttribute]
private IInfluxDbRequestClient <RequestClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    protected IInfluxDbRequestClient RequestClient { get; private set; }
    protected IConfiguration Configuration { get; private set; }
    public ClientModuleBase(IInfluxDbRequestClient requestClient);
    [CompilerGeneratedAttribute]
protected IInfluxDbRequestClient get_RequestClient();
    [CompilerGeneratedAttribute]
private void set_RequestClient(IInfluxDbRequestClient value);
    [CompilerGeneratedAttribute]
protected IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(IConfiguration value);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.ClientModuleBase/<GetAndValidateQueryAsync>d__9")]
protected virtual Task`1<IInfluxDataApiResponse> GetAndValidateQueryAsync(string query, string dbName, string epochFormat);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.ClientModuleBase/<PostAndValidateQueryAsync>d__10")]
protected virtual Task`1<IInfluxDataApiResponse> PostAndValidateQueryAsync(string query, string dbName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.ClientModuleBase/<RequestAndValidateQueryAsync>d__11")]
protected virtual Task`1<IInfluxDataApiResponse> RequestAndValidateQueryAsync(string query, HttpMethod method, string dbName, string epochFormat);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.ClientModuleBase/<ResolveSingleGetSeriesResultAsync>d__12")]
protected virtual Task`1<IEnumerable`1<Serie>> ResolveSingleGetSeriesResultAsync(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.ClientModuleBase/<ResolveGetSeriesResultAsync>d__13")]
protected virtual Task`1<IEnumerable`1<SeriesResult>> ResolveGetSeriesResultAsync(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    protected virtual IEnumerable`1<Serie> ResolveSingleGetSeriesResult(IInfluxDataApiResponse response);
    protected virtual IEnumerable`1<Serie> ResolveSingleGetSeriesResultChunked(IInfluxDataApiResponse response);
    protected virtual IEnumerable`1<SeriesResult> ResolveGetSeriesResult(IInfluxDataApiResponse response);
    protected virtual IEnumerable`1<SeriesResult> ResolveGetSeriesResultChunked(IInfluxDataApiResponse response);
    protected virtual String[] SplitChunkedResponse(IInfluxDataApiResponse response);
}
public class InfluxData.Net.InfluxDb.ClientModules.CqClientModule : ClientModuleBase {
    private ICqQueryBuilder _cqQueryBuilder;
    private ICqResponseParser _cqResponseParser;
    public CqClientModule(IInfluxDbRequestClient requestClient, ICqQueryBuilder cqQueryBuilder, ICqResponseParser cqResponseParser);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.CqClientModule/<CreateContinuousQueryAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> CreateContinuousQueryAsync(CqParams cqParams);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.CqClientModule/<GetContinuousQueriesAsync>d__4")]
public virtual Task`1<IEnumerable`1<ContinuousQuery>> GetContinuousQueriesAsync(string dbName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.CqClientModule/<DeleteContinuousQueryAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> DeleteContinuousQueryAsync(string dbName, string cqName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.CqClientModule/<BackfillAsync>d__6")]
public virtual Task`1<IInfluxDataApiResponse> BackfillAsync(string dbName, BackfillParams backfillParams);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IInfluxDataApiResponse> <>n__0(string query, string dbName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__1(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
}
public class InfluxData.Net.InfluxDb.ClientModules.CqClientModule_v_0_9_6 : ClientModuleBase {
    private ICqQueryBuilder _cqQueryBuilder;
    private ICqResponseParser _cqResponseParser;
    public CqClientModule_v_0_9_6(IInfluxDbRequestClient requestClient, ICqQueryBuilder cqQueryBuilder, ICqResponseParser cqResponseParser);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.CqClientModule_v_0_9_6/<CreateContinuousQueryAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> CreateContinuousQueryAsync(CqParams cqParams);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.CqClientModule_v_0_9_6/<GetContinuousQueriesAsync>d__4")]
public virtual Task`1<IEnumerable`1<ContinuousQuery>> GetContinuousQueriesAsync(string dbName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.CqClientModule_v_0_9_6/<DeleteContinuousQueryAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> DeleteContinuousQueryAsync(string dbName, string cqName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.CqClientModule_v_0_9_6/<BackfillAsync>d__6")]
public virtual Task`1<IInfluxDataApiResponse> BackfillAsync(string dbName, BackfillParams backfillParams);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IInfluxDataApiResponse> <>n__0(string query, string dbName, string epochFormat);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__1(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
}
public class InfluxData.Net.InfluxDb.ClientModules.DatabaseClientModule : ClientModuleBase {
    private IDatabaseQueryBuilder _databaseQueryBuilder;
    private IDatabaseResponseParser _databaseResponseParser;
    public DatabaseClientModule(IInfluxDbRequestClient requestClient, IDatabaseQueryBuilder databaseQueryBuilder, IDatabaseResponseParser databaseResponseParser);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DatabaseClientModule/<CreateDatabaseAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> CreateDatabaseAsync(string dbName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DatabaseClientModule/<GetDatabasesAsync>d__4")]
public virtual Task`1<IEnumerable`1<Database>> GetDatabasesAsync();
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DatabaseClientModule/<DropDatabaseAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> DropDatabaseAsync(string dbName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IInfluxDataApiResponse> <>n__0(string query, string dbName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__1(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
}
public class InfluxData.Net.InfluxDb.ClientModules.DatabaseClientModule_v_0_9_6 : ClientModuleBase {
    private IDatabaseQueryBuilder _databaseQueryBuilder;
    private IDatabaseResponseParser _databaseResponseParser;
    public DatabaseClientModule_v_0_9_6(IInfluxDbRequestClient requestClient, IDatabaseQueryBuilder databaseQueryBuilder, IDatabaseResponseParser databaseResponseParser);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DatabaseClientModule_v_0_9_6/<CreateDatabaseAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> CreateDatabaseAsync(string dbName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DatabaseClientModule_v_0_9_6/<GetDatabasesAsync>d__4")]
public virtual Task`1<IEnumerable`1<Database>> GetDatabasesAsync();
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DatabaseClientModule_v_0_9_6/<DropDatabaseAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> DropDatabaseAsync(string dbName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IInfluxDataApiResponse> <>n__0(string query, string dbName, string epochFormat);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__1(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
}
public class InfluxData.Net.InfluxDb.ClientModules.DiagnosticsClientModule : ClientModuleBase {
    private IDiagnosticsQueryBuilder _diagnosticsQueryBuilder;
    private IDiagnosticsResponseParser _diagnosticsResponseParser;
    public DiagnosticsClientModule(IInfluxDbRequestClient requestClient, IDiagnosticsQueryBuilder diagnosticsQueryBuilder, IDiagnosticsResponseParser diagnosticsResponseParser);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DiagnosticsClientModule/<PingAsync>d__3")]
public virtual Task`1<Pong> PingAsync();
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DiagnosticsClientModule/<GetStatsAsync>d__4")]
public virtual Task`1<Stats> GetStatsAsync();
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.DiagnosticsClientModule/<GetDiagnosticsAsync>d__5")]
public virtual Task`1<Diagnostics> GetDiagnosticsAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__0(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
}
public interface InfluxData.Net.InfluxDb.ClientModules.IBasicClientModule {
    public abstract virtual Task`1<IEnumerable`1<Serie>> QueryAsync(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public abstract virtual Task`1<IEnumerable`1<Serie>> QueryAsync(IEnumerable`1<string> queries, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public abstract virtual Task`1<IEnumerable`1<Serie>> QueryAsync(string queryTemplate, object parameters, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public abstract virtual Task`1<IEnumerable`1<IEnumerable`1<Serie>>> MultiQueryAsync(IEnumerable`1<string> queries, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public abstract virtual Task`1<IInfluxDataApiResponse> WriteAsync(Point point, string dbName, string retentionPolicy, string precision);
    public abstract virtual Task`1<IInfluxDataApiResponse> WriteAsync(IEnumerable`1<Point> points, string dbName, string retentionPolicy, string precision);
}
public interface InfluxData.Net.InfluxDb.ClientModules.ICqClientModule {
    public abstract virtual Task`1<IInfluxDataApiResponse> CreateContinuousQueryAsync(CqParams cqParams);
    public abstract virtual Task`1<IEnumerable`1<ContinuousQuery>> GetContinuousQueriesAsync(string dbName);
    public abstract virtual Task`1<IInfluxDataApiResponse> DeleteContinuousQueryAsync(string dbName, string cqName);
    public abstract virtual Task`1<IInfluxDataApiResponse> BackfillAsync(string dbName, BackfillParams backfillParams);
}
public interface InfluxData.Net.InfluxDb.ClientModules.IDatabaseClientModule {
    public abstract virtual Task`1<IInfluxDataApiResponse> CreateDatabaseAsync(string dbName);
    public abstract virtual Task`1<IEnumerable`1<Database>> GetDatabasesAsync();
    public abstract virtual Task`1<IInfluxDataApiResponse> DropDatabaseAsync(string dbName);
}
public interface InfluxData.Net.InfluxDb.ClientModules.IDiagnosticsClientModule {
    public abstract virtual Task`1<Pong> PingAsync();
    public abstract virtual Task`1<Stats> GetStatsAsync();
    public abstract virtual Task`1<Diagnostics> GetDiagnosticsAsync();
}
public interface InfluxData.Net.InfluxDb.ClientModules.IRetentionClientModule {
    public abstract virtual Task`1<IInfluxDataApiResponse> CreateRetentionPolicyAsync(string dbName, string policyName, string duration, int replicationCopies);
    public abstract virtual Task`1<IEnumerable`1<RetentionPolicy>> GetRetentionPoliciesAsync(string dbName);
    public abstract virtual Task`1<IInfluxDataApiResponse> AlterRetentionPolicyAsync(string dbName, string policyName, string duration, int replicationCopies);
    public abstract virtual Task`1<IInfluxDataApiResponse> DropRetentionPolicyAsync(string dbName, string policyName);
}
public interface InfluxData.Net.InfluxDb.ClientModules.ISerieClientModule {
    public abstract virtual Task`1<IEnumerable`1<SerieSet>> GetSeriesAsync(string dbName, string measurementName, IEnumerable`1<string> filters);
    public abstract virtual Task`1<IInfluxDataApiResponse> DropSeriesAsync(string dbName, string measurementName, IEnumerable`1<string> filters);
    public abstract virtual Task`1<IInfluxDataApiResponse> DropSeriesAsync(string dbName, IEnumerable`1<string> measurementNames, IEnumerable`1<string> filters);
    public abstract virtual Task`1<IEnumerable`1<Measurement>> GetMeasurementsAsync(string dbName, IEnumerable`1<string> filters);
    public abstract virtual Task`1<IInfluxDataApiResponse> DropMeasurementAsync(string dbName, string measurementName);
    public abstract virtual Task`1<IEnumerable`1<string>> GetTagKeysAsync(string dbName, string measurementName);
    public abstract virtual Task`1<IEnumerable`1<TagValue>> GetTagValuesAsync(string dbName, string measurementName, string tagName);
    public abstract virtual Task`1<IEnumerable`1<FieldKey>> GetFieldKeysAsync(string dbName, string measurementName);
    public abstract virtual IBatchWriter CreateBatchWriter(string dbName, string retenionPolicy, string precision);
}
public interface InfluxData.Net.InfluxDb.ClientModules.IUserClientModule {
    public abstract virtual Task`1<IEnumerable`1<User>> GetUsersAsync();
    public abstract virtual Task`1<IInfluxDataApiResponse> CreateUserAsync(string username, string password, bool isAdmin);
    public abstract virtual Task`1<IInfluxDataApiResponse> DropUserAsync(string username);
    public abstract virtual Task`1<IInfluxDataApiResponse> SetPasswordAsync(string username, string password);
    public abstract virtual Task`1<IEnumerable`1<Grant>> GetPrivilegesAsync(string username);
    public abstract virtual Task`1<IInfluxDataApiResponse> GrantAdministratorAsync(string username);
    public abstract virtual Task`1<IInfluxDataApiResponse> RevokeAdministratorAsync(string username);
    public abstract virtual Task`1<IInfluxDataApiResponse> GrantPrivilegeAsync(string username, Privileges privilege, string dbName);
    public abstract virtual Task`1<IInfluxDataApiResponse> RevokePrivilegeAsync(string username, Privileges privilege, string dbName);
}
public class InfluxData.Net.InfluxDb.ClientModules.RetentionClientModule : ClientModuleBase {
    private IRetentionQueryBuilder _retentionQueryBuilder;
    private IRetentionResponseParser _retentionResponseParser;
    public RetentionClientModule(IInfluxDbRequestClient requestClient, IRetentionQueryBuilder retentionQueryBuilder, IRetentionResponseParser retentionResponseParser);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.RetentionClientModule/<CreateRetentionPolicyAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> CreateRetentionPolicyAsync(string dbName, string policyName, string duration, int replicationCopies);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.RetentionClientModule/<GetRetentionPoliciesAsync>d__4")]
public sealed virtual Task`1<IEnumerable`1<RetentionPolicy>> GetRetentionPoliciesAsync(string dbName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.RetentionClientModule/<AlterRetentionPolicyAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> AlterRetentionPolicyAsync(string dbName, string policyName, string duration, int replicationCopies);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.RetentionClientModule/<DropRetentionPolicyAsync>d__6")]
public virtual Task`1<IInfluxDataApiResponse> DropRetentionPolicyAsync(string dbName, string policyName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IInfluxDataApiResponse> <>n__0(string query, string dbName, string epochFormat);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__1(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
}
public class InfluxData.Net.InfluxDb.ClientModules.SerieClientModule : ClientModuleBase {
    private ISerieQueryBuilder _serieQueryBuilder;
    private ISerieResponseParser _serieResponseParser;
    private IBatchWriter _batchWriter;
    public SerieClientModule(IInfluxDbRequestClient requestClient, ISerieQueryBuilder serieQueryBuilder, ISerieResponseParser serieResponseParser, IBatchWriter batchWriter);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.SerieClientModule/<GetSeriesAsync>d__4")]
public virtual Task`1<IEnumerable`1<SerieSet>> GetSeriesAsync(string dbName, string measurementName, IEnumerable`1<string> filters);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.SerieClientModule/<DropSeriesAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> DropSeriesAsync(string dbName, string measurementName, IEnumerable`1<string> filters);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.SerieClientModule/<DropSeriesAsync>d__6")]
public virtual Task`1<IInfluxDataApiResponse> DropSeriesAsync(string dbName, IEnumerable`1<string> measurementNames, IEnumerable`1<string> filters);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.SerieClientModule/<GetMeasurementsAsync>d__7")]
public virtual Task`1<IEnumerable`1<Measurement>> GetMeasurementsAsync(string dbName, IEnumerable`1<string> filters);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.SerieClientModule/<DropMeasurementAsync>d__8")]
public virtual Task`1<IInfluxDataApiResponse> DropMeasurementAsync(string dbName, string measurementName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.SerieClientModule/<GetTagKeysAsync>d__9")]
public virtual Task`1<IEnumerable`1<string>> GetTagKeysAsync(string dbName, string measurementName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.SerieClientModule/<GetTagValuesAsync>d__10")]
public virtual Task`1<IEnumerable`1<TagValue>> GetTagValuesAsync(string dbName, string measurementName, string tagName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.SerieClientModule/<GetFieldKeysAsync>d__11")]
public virtual Task`1<IEnumerable`1<FieldKey>> GetFieldKeysAsync(string dbName, string measurementName);
    public sealed virtual IBatchWriter CreateBatchWriter(string dbName, string retenionPolicy, string precision);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__0(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IInfluxDataApiResponse> <>n__1(string query, string dbName, string epochFormat);
}
public class InfluxData.Net.InfluxDb.ClientModules.UserClientModule : ClientModuleBase {
    private IUserQueryBuilder _userQueryBuilder;
    private IUserResponseParser _userResponseParser;
    public UserClientModule(IInfluxDbRequestClient requestClient, IUserQueryBuilder userQueryBuilder, IUserResponseParser userResponseParser);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<GetUsersAsync>d__3")]
public sealed virtual Task`1<IEnumerable`1<User>> GetUsersAsync();
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<CreateUserAsync>d__4")]
public sealed virtual Task`1<IInfluxDataApiResponse> CreateUserAsync(string username, string password, bool isAdmin);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<DropUserAsync>d__5")]
public sealed virtual Task`1<IInfluxDataApiResponse> DropUserAsync(string username);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<SetPasswordAsync>d__6")]
public sealed virtual Task`1<IInfluxDataApiResponse> SetPasswordAsync(string username, string password);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<GetPrivilegesAsync>d__7")]
public sealed virtual Task`1<IEnumerable`1<Grant>> GetPrivilegesAsync(string username);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<GrantAdministratorAsync>d__8")]
public sealed virtual Task`1<IInfluxDataApiResponse> GrantAdministratorAsync(string username);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<RevokeAdministratorAsync>d__9")]
public sealed virtual Task`1<IInfluxDataApiResponse> RevokeAdministratorAsync(string username);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<GrantPrivilegeAsync>d__10")]
public sealed virtual Task`1<IInfluxDataApiResponse> GrantPrivilegeAsync(string username, Privileges privilege, string dbName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientModules.UserClientModule/<RevokePrivilegeAsync>d__11")]
public sealed virtual Task`1<IInfluxDataApiResponse> RevokePrivilegeAsync(string username, Privileges privilege, string dbName);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IEnumerable`1<Serie>> <>n__0(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IInfluxDataApiResponse> <>n__1(string query, string dbName);
}
public class InfluxData.Net.InfluxDb.ClientSubModules.BatchWriter : object {
    private IBasicClientModule _basicClientModule;
    private string _dbName;
    private string _retentionPolicy;
    private string _precision;
    private int _interval;
    private bool _continueOnError;
    private bool _isRunning;
    private long _maxPointsPerBatch;
    private BlockingCollection`1<Point> _pointCollection;
    [CompilerGeneratedAttribute]
private EventHandler`1<Exception> OnError;
    internal BatchWriter(IBasicClientModule basicClientModule);
    private BatchWriter(IBasicClientModule basicClientModule, string dbName, string retenionPolicy, string precision);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnError(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnError(EventHandler`1<Exception> value);
    public virtual IBatchWriter CreateBatchWriter(string dbName, string retenionPolicy, string precision);
    public virtual void Start(int interval, bool continueOnError, long maxPointsPerBatch);
    public virtual void AddPoint(Point point);
    public virtual void AddPoints(IEnumerable`1<Point> points);
    public virtual void Stop();
    public sealed virtual void SetMaxBatchSize(long pointCount);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientSubModules.BatchWriter/<EnqueueBatchWritingAsync>d__20")]
protected virtual Task EnqueueBatchWritingAsync();
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.ClientSubModules.BatchWriter/<WriteBatchedPointsAsync>d__21")]
protected virtual Task WriteBatchedPointsAsync();
    protected virtual void RaiseError(Exception exception);
    [CompilerGeneratedAttribute]
private void <WriteBatchedPointsAsync>b__21_0(Task`1<IInfluxDataApiResponse> p);
}
public interface InfluxData.Net.InfluxDb.ClientSubModules.IBatchWriter {
    public abstract virtual void Start(int interval, bool continueOnError, long maxPointsPerBatch);
    public abstract virtual void AddPoint(Point point);
    public abstract virtual void AddPoints(IEnumerable`1<Point> points);
    public abstract virtual void Stop();
    public abstract virtual void SetMaxBatchSize(long pointCount);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnError(EventHandler`1<Exception> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnError(EventHandler`1<Exception> value);
}
internal interface InfluxData.Net.InfluxDb.ClientSubModules.IBatchWriterFactory {
    public abstract virtual IBatchWriter CreateBatchWriter(string dbName, string retenionPolicy, string precision);
}
internal static class InfluxData.Net.InfluxDb.Constants.QueryParams : object {
    public static string Db;
    public static string Query;
    public static string Id;
    public static string Name;
    public static string Precision;
    public static string RetentionPolicy;
    public static string Chunked;
    public static string ChunkSize;
    public static string Epoch;
}
internal static class InfluxData.Net.InfluxDb.Constants.QueryStatements : object {
    public static string GetSeries;
    public static string DropSeries;
    public static string GetMeasurements;
    public static string DropMeasurement;
    public static string ShowTagKeys;
    public static string ShowTagValues;
    public static string ShowFieldKeys;
    public static string CreateDatabase;
    public static string GetDatabases;
    public static string DropDatabase;
    public static string CreateRetentionPolicy;
    public static string GetRetentionPolicies;
    public static string AlterRetentionPolicy;
    public static string DropRetentionPolicy;
    public static string CreateContinuousQuery;
    public static string CreateContinuousQuerySubQuery;
    public static string GetContinuousQueries;
    public static string DropContinuousQuery;
    public static string Backfill;
    public static string Fill;
    public static string GetStats;
    public static string GetDiagnostics;
    public static string GetUsers;
    public static string GetGrants;
    public static string CreateUser;
    public static string DropUser;
    public static string SetPassword;
    public static string GrantAdministrator;
    public static string RevokeAdministrator;
    public static string GrantPrivilege;
    public static string RevokePrivilege;
    public static string WithAllPrivileges;
}
internal static class InfluxData.Net.InfluxDb.Constants.RequestPaths : object {
    public static string Write;
    public static string Query;
    public static string Ping;
}
public enum InfluxData.Net.InfluxDb.Enums.FillType : Enum {
    public int value__;
    public static FillType Null;
    public static FillType Previous;
    public static FillType None;
}
public enum InfluxData.Net.InfluxDb.Enums.Privileges : Enum {
    public int value__;
    public static Privileges None;
    public static Privileges Read;
    public static Privileges Write;
    public static Privileges All;
}
public interface InfluxData.Net.InfluxDb.Formatters.IPointFormatter {
    public abstract virtual string PointToString(Point point, string precision);
    public abstract virtual Serie PointToSerie(Point point);
}
public class InfluxData.Net.InfluxDb.Formatters.PointFormatter : object {
    public virtual string PointToString(Point point, string precision);
    public virtual Serie PointToSerie(Point point);
    protected virtual string FormatPointKey(Point point, string tags);
    protected virtual string EscapeMeasurement(string value);
    protected virtual string FormatPointTags(IDictionary`2<string, object> tags);
    protected virtual string FormatPointTag(string key, object value);
    protected virtual string FormatPointFields(IDictionary`2<string, object> fields);
    protected virtual string FormatPointField(string key, object value);
    protected virtual string FormatPointTimestamp(Point point, string precision);
    protected virtual string ToInt(string result);
    protected virtual string EscapeTagOrKeyValue(string value);
    protected virtual string QuoteFieldStringValue(string value);
    [CompilerGeneratedAttribute]
private string <FormatPointTags>b__4_1(KeyValuePair`2<string, object> p);
    [CompilerGeneratedAttribute]
private string <FormatPointFields>b__6_0(KeyValuePair`2<string, object> p);
}
public class InfluxData.Net.InfluxDb.Formatters.PointFormatter_v_0_9_2 : PointFormatter_v_1_0_0 {
    protected virtual string ToInt(string result);
}
public class InfluxData.Net.InfluxDb.Formatters.PointFormatter_v_1_0_0 : PointFormatter {
    protected virtual string FormatPointTag(string key, object value);
    protected virtual string FormatPointField(string key, object value);
    protected virtual string FormatPointKey(Point point, string tags);
    protected virtual string EscapeTagValue(string value);
    protected virtual string EscapeNonTagValue(string value);
}
[ExtensionAttribute]
public static class InfluxData.Net.InfluxDb.Helpers.QueryExtensions : object {
    [ExtensionAttribute]
public static string BuildQuery(string queryTemplate, object parameters);
}
[ExtensionAttribute]
public static class InfluxData.Net.InfluxDb.Helpers.ResponseExtensions : object {
    [ExtensionAttribute]
public static IInfluxDataApiResponse ValidateQueryResponse(IInfluxDataApiResponse response, bool throwOnWarning);
    [ExtensionAttribute]
public static QueryResponse Validate(QueryResponse queryResponse, bool throwOnWarning);
}
[ExtensionAttribute]
public static class InfluxData.Net.InfluxDb.Helpers.SerieExtensions : object {
    [ExtensionAttribute]
public static T FirstRecordValueAs(Serie serie, string columnKey);
    [IteratorStateMachineAttribute("InfluxData.Net.InfluxDb.Helpers.SerieExtensions/<As>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> As(IEnumerable`1<Serie> series);
    [ExtensionAttribute]
public static Serie GetByName(IEnumerable`1<Serie> series, string name);
}
public interface InfluxData.Net.InfluxDb.IInfluxDbClient {
    public IBasicClientModule Client { get; }
    public ISerieClientModule Serie { get; }
    public IDatabaseClientModule Database { get; }
    public IRetentionClientModule Retention { get; }
    public ICqClientModule ContinuousQuery { get; }
    public IDiagnosticsClientModule Diagnostics { get; }
    public IUserClientModule User { get; }
    public IInfluxDbRequestClient RequestClient { get; }
    public abstract virtual IBasicClientModule get_Client();
    public abstract virtual ISerieClientModule get_Serie();
    public abstract virtual IDatabaseClientModule get_Database();
    public abstract virtual IRetentionClientModule get_Retention();
    public abstract virtual ICqClientModule get_ContinuousQuery();
    public abstract virtual IDiagnosticsClientModule get_Diagnostics();
    public abstract virtual IUserClientModule get_User();
    public abstract virtual IInfluxDbRequestClient get_RequestClient();
}
public class InfluxData.Net.InfluxDb.InfluxDbClient : object {
    private IInfluxDbRequestClient _requestClient;
    private Lazy`1<ISerieQueryBuilder> _serieQueryBuilder;
    private Lazy`1<IDatabaseQueryBuilder> _databaseQueryBuilder;
    private Lazy`1<IRetentionQueryBuilder> _retentionQueryBuilder;
    private Lazy`1<ICqQueryBuilder> _cqQueryBuilder;
    private Lazy`1<IDiagnosticsQueryBuilder> _diagnosticsQueryBuilder;
    private Lazy`1<IUserQueryBuilder> _userQueryBuilder;
    private Lazy`1<IBasicResponseParser> _basicResponseParser;
    private Lazy`1<ISerieResponseParser> _serieResponseParser;
    private Lazy`1<IDatabaseResponseParser> _databaseResponseParser;
    private Lazy`1<IRetentionResponseParser> _retentionResponseParser;
    private Lazy`1<ICqResponseParser> _cqResponseParser;
    private Lazy`1<IDiagnosticsResponseParser> _diagnosticsResponseParser;
    private Lazy`1<IUserResponseParser> _userResponseParser;
    private Lazy`1<IBasicClientModule> _basicClientModule;
    private Lazy`1<ISerieClientModule> _serieClientModule;
    private Lazy`1<IDatabaseClientModule> _databaseClientModule;
    private Lazy`1<IRetentionClientModule> _retentionClientModule;
    private Lazy`1<ICqClientModule> _cqClientModule;
    private Lazy`1<IDiagnosticsClientModule> _diagnosticsClientModule;
    private Lazy`1<IUserClientModule> _userClientModule;
    public IInfluxDbRequestClient RequestClient { get; }
    public IBasicClientModule Client { get; }
    public ISerieClientModule Serie { get; }
    public IDatabaseClientModule Database { get; }
    public IRetentionClientModule Retention { get; }
    public ICqClientModule ContinuousQuery { get; }
    public IDiagnosticsClientModule Diagnostics { get; }
    public IUserClientModule User { get; }
    public InfluxDbClient(string endpointUri, string username, string password, InfluxDbVersion influxVersion, QueryLocation queryLocation, HttpClient httpClient, bool throwOnWarning);
    public InfluxDbClient(IInfluxDbClientConfiguration configuration);
    public sealed virtual IInfluxDbRequestClient get_RequestClient();
    public sealed virtual IBasicClientModule get_Client();
    public sealed virtual ISerieClientModule get_Serie();
    public sealed virtual IDatabaseClientModule get_Database();
    public sealed virtual IRetentionClientModule get_Retention();
    public sealed virtual ICqClientModule get_ContinuousQuery();
    public sealed virtual IDiagnosticsClientModule get_Diagnostics();
    public sealed virtual IUserClientModule get_User();
    protected virtual void BootstrapInfluxDbLatest(IInfluxDbClientConfiguration configuration);
    protected virtual void BootstrapInfluxDb_v_1_0_0(IInfluxDbClientConfiguration configuration);
    protected virtual void BootstrapInfluxDb_v_0_9_6(IInfluxDbClientConfiguration configuration);
    protected virtual void BootstrapInfluxDb_v_0_9_2(IInfluxDbClientConfiguration configuration);
    [CompilerGeneratedAttribute]
private IBasicClientModule <BootstrapInfluxDbLatest>b__39_13();
    [CompilerGeneratedAttribute]
private IBatchWriterFactory <BootstrapInfluxDbLatest>b__39_14();
    [CompilerGeneratedAttribute]
private IDatabaseClientModule <BootstrapInfluxDbLatest>b__39_16();
    [CompilerGeneratedAttribute]
private IRetentionClientModule <BootstrapInfluxDbLatest>b__39_17();
    [CompilerGeneratedAttribute]
private ICqClientModule <BootstrapInfluxDbLatest>b__39_18();
    [CompilerGeneratedAttribute]
private IDiagnosticsClientModule <BootstrapInfluxDbLatest>b__39_19();
    [CompilerGeneratedAttribute]
private IUserClientModule <BootstrapInfluxDbLatest>b__39_20();
    [CompilerGeneratedAttribute]
private IDatabaseClientModule <BootstrapInfluxDb_v_0_9_6>b__41_2();
    [CompilerGeneratedAttribute]
private ICqClientModule <BootstrapInfluxDb_v_0_9_6>b__41_3();
}
public class InfluxData.Net.InfluxDb.Infrastructure.InfluxDbClientConfiguration : object {
    [CompilerGeneratedAttribute]
private Uri <EndpointUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private InfluxDbVersion <InfluxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryLocation <QueryLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    public Uri EndpointUri { get; private set; }
    public string Username { get; private set; }
    public string Password { get; private set; }
    public bool ThrowOnWarning { get; private set; }
    public InfluxDbVersion InfluxVersion { get; private set; }
    public QueryLocation QueryLocation { get; private set; }
    public HttpClient HttpClient { get; private set; }
    public InfluxDbClientConfiguration(Uri endpointUri, string username, string password, InfluxDbVersion influxVersion, QueryLocation queryLocation, HttpClient httpClient, bool throwOnWarning);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_EndpointUri();
    [CompilerGeneratedAttribute]
private void set_EndpointUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Username();
    [CompilerGeneratedAttribute]
private void set_Username(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowOnWarning();
    [CompilerGeneratedAttribute]
private void set_ThrowOnWarning(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual InfluxDbVersion get_InfluxVersion();
    [CompilerGeneratedAttribute]
private void set_InfluxVersion(InfluxDbVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual QueryLocation get_QueryLocation();
    [CompilerGeneratedAttribute]
private void set_QueryLocation(QueryLocation value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
private void set_HttpClient(HttpClient value);
    private static Uri SanitizeEndpoint(Uri endpointUri, bool isTls);
}
internal static class InfluxData.Net.InfluxDb.Infrastructure.RequestParamsBuilder : object {
    public static IDictionary`2<string, string> BuildQueryRequestParams(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public static IDictionary`2<string, string> BuildRequestParams(string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public static IDictionary`2<string, string> BuildRequestParams(string dbName, string paramKey1, string paramValue1, string paramKey2, string paramValue2);
}
public class InfluxData.Net.InfluxDb.Models.BackfillParams : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Downsamplers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DsSerieName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceSerieName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeTo>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private FillType <FillType>k__BackingField;
    public IEnumerable`1<string> Downsamplers { get; public set; }
    public string DsSerieName { get; public set; }
    public string SourceSerieName { get; public set; }
    public DateTime TimeFrom { get; public set; }
    public DateTime TimeTo { get; public set; }
    public IList`1<string> Filters { get; public set; }
    public string Interval { get; public set; }
    public IList`1<string> Tags { get; public set; }
    public FillType FillType { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Downsamplers();
    [CompilerGeneratedAttribute]
public void set_Downsamplers(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_DsSerieName();
    [CompilerGeneratedAttribute]
public void set_DsSerieName(string value);
    [CompilerGeneratedAttribute]
public string get_SourceSerieName();
    [CompilerGeneratedAttribute]
public void set_SourceSerieName(string value);
    [CompilerGeneratedAttribute]
public DateTime get_TimeFrom();
    [CompilerGeneratedAttribute]
public void set_TimeFrom(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_TimeTo();
    [CompilerGeneratedAttribute]
public void set_TimeTo(DateTime value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IList`1<string> value);
    [CompilerGeneratedAttribute]
public FillType get_FillType();
    [CompilerGeneratedAttribute]
public void set_FillType(FillType value);
}
public class InfluxData.Net.InfluxDb.Models.CqParams : object {
    [CompilerGeneratedAttribute]
private string <DbName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CqName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Downsamplers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DsSerieName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceSerieName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private FillType <FillType>k__BackingField;
    public CqResampleParam Resample;
    public string DbName { get; public set; }
    public string CqName { get; public set; }
    public IList`1<string> Downsamplers { get; public set; }
    public string DsSerieName { get; public set; }
    public string SourceSerieName { get; public set; }
    public string Interval { get; public set; }
    public IList`1<string> Tags { get; public set; }
    public FillType FillType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DbName();
    [CompilerGeneratedAttribute]
public void set_DbName(string value);
    [CompilerGeneratedAttribute]
public string get_CqName();
    [CompilerGeneratedAttribute]
public void set_CqName(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Downsamplers();
    [CompilerGeneratedAttribute]
public void set_Downsamplers(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_DsSerieName();
    [CompilerGeneratedAttribute]
public void set_DsSerieName(string value);
    [CompilerGeneratedAttribute]
public string get_SourceSerieName();
    [CompilerGeneratedAttribute]
public void set_SourceSerieName(string value);
    [CompilerGeneratedAttribute]
public string get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IList`1<string> value);
    [CompilerGeneratedAttribute]
public FillType get_FillType();
    [CompilerGeneratedAttribute]
public void set_FillType(FillType value);
}
public class InfluxData.Net.InfluxDb.Models.CqResampleParam : ValueType {
    [CompilerGeneratedAttribute]
private string <For>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Every>k__BackingField;
    public string For { get; public set; }
    public string Every { get; public set; }
    [CompilerGeneratedAttribute]
public string get_For();
    [CompilerGeneratedAttribute]
public void set_For(string value);
    [CompilerGeneratedAttribute]
public string get_Every();
    [CompilerGeneratedAttribute]
public void set_Every(string value);
}
public class InfluxData.Net.InfluxDb.Models.Point : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Timestamp>k__BackingField;
    public string Name { get; public set; }
    public IDictionary`2<string, object> Tags { get; public set; }
    public IDictionary`2<string, object> Fields { get; public set; }
    public Nullable`1<DateTime> Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Fields();
    [CompilerGeneratedAttribute]
public void set_Fields(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(Nullable`1<DateTime> value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.ContinuousQuery : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    public string Name { get; public set; }
    public string Query { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.Database : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.Diagnostics : object {
    [CompilerGeneratedAttribute]
private DiagnosticsSystem <System>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticsBuild <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticsRuntime <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticsNetwork <Network>k__BackingField;
    public DiagnosticsSystem System { get; public set; }
    public DiagnosticsBuild Build { get; public set; }
    public DiagnosticsRuntime Runtime { get; public set; }
    public DiagnosticsNetwork Network { get; public set; }
    [CompilerGeneratedAttribute]
public DiagnosticsSystem get_System();
    [CompilerGeneratedAttribute]
public void set_System(DiagnosticsSystem value);
    [CompilerGeneratedAttribute]
public DiagnosticsBuild get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(DiagnosticsBuild value);
    [CompilerGeneratedAttribute]
public DiagnosticsRuntime get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(DiagnosticsRuntime value);
    [CompilerGeneratedAttribute]
public DiagnosticsNetwork get_Network();
    [CompilerGeneratedAttribute]
public void set_Network(DiagnosticsNetwork value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.DiagnosticsBuild : object {
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Branch { get; public set; }
    public string Commit { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public string get_Commit();
    [CompilerGeneratedAttribute]
public void set_Commit(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.DiagnosticsNetwork : object {
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    public string Hostname { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.DiagnosticsRuntime : object {
    [CompilerGeneratedAttribute]
private string <GOARCH>k__BackingField;
    [CompilerGeneratedAttribute]
private long <GOMAXPROCS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GOOS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string GOARCH { get; public set; }
    public long GOMAXPROCS { get; public set; }
    public string GOOS { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GOARCH();
    [CompilerGeneratedAttribute]
public void set_GOARCH(string value);
    [CompilerGeneratedAttribute]
public long get_GOMAXPROCS();
    [CompilerGeneratedAttribute]
public void set_GOMAXPROCS(long value);
    [CompilerGeneratedAttribute]
public string get_GOOS();
    [CompilerGeneratedAttribute]
public void set_GOOS(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.DiagnosticsSystem : object {
    [CompilerGeneratedAttribute]
private long <PID>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Uptime>k__BackingField;
    public long PID { get; public set; }
    public DateTime CurrentTime { get; public set; }
    public DateTime Started { get; public set; }
    public TimeSpan Uptime { get; public set; }
    [CompilerGeneratedAttribute]
public long get_PID();
    [CompilerGeneratedAttribute]
public void set_PID(long value);
    [CompilerGeneratedAttribute]
public DateTime get_CurrentTime();
    [CompilerGeneratedAttribute]
public void set_CurrentTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Started();
    [CompilerGeneratedAttribute]
public void set_Started(DateTime value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Uptime();
    [CompilerGeneratedAttribute]
public void set_Uptime(TimeSpan value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.FieldKey : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Name { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.Grant : object {
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private Privileges <Privilege>k__BackingField;
    public string Database { get; public set; }
    public Privileges Privilege { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public Privileges get_Privilege();
    [CompilerGeneratedAttribute]
public void set_Privilege(Privileges value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.Measurement : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.Message : object {
    [CompilerGeneratedAttribute]
private string <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Level { get; public set; }
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.Pong : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ResponseTime>k__BackingField;
    public bool Success { get; public set; }
    public string Version { get; public set; }
    public TimeSpan ResponseTime { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ResponseTime();
    [CompilerGeneratedAttribute]
public void set_ResponseTime(TimeSpan value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.QueryResponse : object {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SeriesResult> <Results>k__BackingField;
    public string Error { get; public set; }
    public IEnumerable`1<SeriesResult> Results { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SeriesResult> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IEnumerable`1<SeriesResult> value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.RetentionPolicy : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShardGroupDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReplicationCopies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Default>k__BackingField;
    public string Name { get; public set; }
    public string Duration { get; public set; }
    public string ShardGroupDuration { get; public set; }
    public int ReplicationCopies { get; public set; }
    public bool Default { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(string value);
    [CompilerGeneratedAttribute]
public string get_ShardGroupDuration();
    [CompilerGeneratedAttribute]
public void set_ShardGroupDuration(string value);
    [CompilerGeneratedAttribute]
public int get_ReplicationCopies();
    [CompilerGeneratedAttribute]
public void set_ReplicationCopies(int value);
    [CompilerGeneratedAttribute]
public bool get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(bool value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.Serie : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IList`1<object>> <Values>k__BackingField;
    public string Name { get; public set; }
    public IDictionary`2<string, string> Tags { get; public set; }
    public IList`1<string> Columns { get; public set; }
    public IList`1<IList`1<object>> Values { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<IList`1<object>> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(IList`1<IList`1<object>> value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.SerieSet : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SerieSetItem> <Series>k__BackingField;
    public string Name { get; public set; }
    public IList`1<SerieSetItem> Series { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IList`1<SerieSetItem> get_Series();
    [CompilerGeneratedAttribute]
public void set_Series(IList`1<SerieSetItem> value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.SerieSetItem : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Tags>k__BackingField;
    public string Key { get; public set; }
    public IDictionary`2<string, string> Tags { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IDictionary`2<string, string> value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.SeriesResult : object {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Message> <Messages>k__BackingField;
    public string Error { get; public set; }
    public IEnumerable`1<Serie> Series { get; public set; }
    public IEnumerable`1<Message> Messages { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Series();
    [CompilerGeneratedAttribute]
public void set_Series(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Message> get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(IEnumerable`1<Message> value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.Stats : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <CQ>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Shard>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Httpd>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <WAL>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Write>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <QueryExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Subscriber>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Tsm1Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Tsm1Filestore>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Serie> <Tsm1Wal>k__BackingField;
    public IEnumerable`1<Serie> CQ { get; public set; }
    public IEnumerable`1<Serie> Engine { get; public set; }
    public IEnumerable`1<Serie> Shard { get; public set; }
    public IEnumerable`1<Serie> Httpd { get; public set; }
    public IEnumerable`1<Serie> WAL { get; public set; }
    public IEnumerable`1<Serie> Write { get; public set; }
    public IEnumerable`1<Serie> Runtime { get; public set; }
    public IEnumerable`1<Serie> Database { get; public set; }
    public IEnumerable`1<Serie> QueryExecutor { get; public set; }
    public IEnumerable`1<Serie> Subscriber { get; public set; }
    public IEnumerable`1<Serie> Tsm1Cache { get; public set; }
    public IEnumerable`1<Serie> Tsm1Filestore { get; public set; }
    public IEnumerable`1<Serie> Tsm1Wal { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_CQ();
    [CompilerGeneratedAttribute]
public void set_CQ(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Engine();
    [CompilerGeneratedAttribute]
public void set_Engine(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Shard();
    [CompilerGeneratedAttribute]
public void set_Shard(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Httpd();
    [CompilerGeneratedAttribute]
public void set_Httpd(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_WAL();
    [CompilerGeneratedAttribute]
public void set_WAL(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Write();
    [CompilerGeneratedAttribute]
public void set_Write(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_QueryExecutor();
    [CompilerGeneratedAttribute]
public void set_QueryExecutor(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Subscriber();
    [CompilerGeneratedAttribute]
public void set_Subscriber(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Tsm1Cache();
    [CompilerGeneratedAttribute]
public void set_Tsm1Cache(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Tsm1Filestore();
    [CompilerGeneratedAttribute]
public void set_Tsm1Filestore(IEnumerable`1<Serie> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Serie> get_Tsm1Wal();
    [CompilerGeneratedAttribute]
public void set_Tsm1Wal(IEnumerable`1<Serie> value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.TagValue : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class InfluxData.Net.InfluxDb.Models.Responses.User : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAdmin>k__BackingField;
    public string Name { get; public set; }
    public bool IsAdmin { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAdmin();
    [CompilerGeneratedAttribute]
public void set_IsAdmin(bool value);
}
public class InfluxData.Net.InfluxDb.Models.WriteRequest : object {
    private IPointFormatter _formatter;
    [CompilerGeneratedAttribute]
private string <DbName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Point> <Points>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RetentionPolicy>k__BackingField;
    public string DbName { get; public set; }
    public IEnumerable`1<Point> Points { get; public set; }
    public string Precision { get; public set; }
    public string RetentionPolicy { get; public set; }
    public WriteRequest(IPointFormatter formatter);
    [CompilerGeneratedAttribute]
public string get_DbName();
    [CompilerGeneratedAttribute]
public void set_DbName(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Point> get_Points();
    [CompilerGeneratedAttribute]
public void set_Points(IEnumerable`1<Point> value);
    [CompilerGeneratedAttribute]
public string get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(string value);
    [CompilerGeneratedAttribute]
public string get_RetentionPolicy();
    [CompilerGeneratedAttribute]
public void set_RetentionPolicy(string value);
    public string GetLines();
    [CompilerGeneratedAttribute]
private string <GetLines>b__18_0(Point p);
}
internal class InfluxData.Net.InfluxDb.QueryBuilders.CqQueryBuilder : object {
    public virtual string CreateContinuousQuery(CqParams cqParams);
    public virtual string GetContinuousQueries();
    public virtual string DeleteContinuousQuery(string dbName, string cqName);
    public virtual string Backfill(string dbName, BackfillParams backfill);
    protected virtual string BuildFilters(IEnumerable`1<string> filters);
    protected virtual string BuildTags(IEnumerable`1<string> tags);
    protected virtual string BuildFillType(FillType fillType);
    protected virtual string BuildResample(CqResampleParam resampleParam);
}
internal class InfluxData.Net.InfluxDb.QueryBuilders.CqQueryBuilder_v_0_9_6 : CqQueryBuilder {
    protected virtual string BuildResample(CqResampleParam resampleParam);
}
internal class InfluxData.Net.InfluxDb.QueryBuilders.DatabaseQueryBuilder : object {
    public virtual string CreateDatabase(string dbName);
    public virtual string GetDatabases();
    public virtual string DropDatabase(string dbName);
}
internal class InfluxData.Net.InfluxDb.QueryBuilders.DiagnosticsQueryBuilder : object {
    public virtual string GetStats();
    public virtual string GetDiagnostics();
}
public interface InfluxData.Net.InfluxDb.QueryBuilders.ICqQueryBuilder {
    public abstract virtual string CreateContinuousQuery(CqParams cqParams);
    public abstract virtual string GetContinuousQueries();
    public abstract virtual string DeleteContinuousQuery(string dbName, string cqName);
    public abstract virtual string Backfill(string dbName, BackfillParams backfill);
}
public interface InfluxData.Net.InfluxDb.QueryBuilders.IDatabaseQueryBuilder {
    public abstract virtual string CreateDatabase(string dbName);
    public abstract virtual string GetDatabases();
    public abstract virtual string DropDatabase(string dbName);
}
public interface InfluxData.Net.InfluxDb.QueryBuilders.IDiagnosticsQueryBuilder {
    public abstract virtual string GetStats();
    public abstract virtual string GetDiagnostics();
}
public interface InfluxData.Net.InfluxDb.QueryBuilders.IRetentionQueryBuilder {
    public abstract virtual string CreateRetentionPolicy(string dbName, string policyName, string duration, int replication);
    public abstract virtual string GetRetentionPolicies(string dbName);
    public abstract virtual string AlterRetentionPolicy(string dbName, string policyName, string duration, int replication);
    public abstract virtual string DropRetentionPolicy(string dbName, string policyName);
}
public interface InfluxData.Net.InfluxDb.QueryBuilders.ISerieQueryBuilder {
    public abstract virtual string GetSeries(string dbName, string measurementName, IEnumerable`1<string> filters);
    public abstract virtual string DropSeries(string dbName, string measurementName, IEnumerable`1<string> filters);
    public abstract virtual string DropSeries(string dbName, IEnumerable`1<string> measurementNames, IEnumerable`1<string> filters);
    public abstract virtual string GetMeasurements(string dbName, IEnumerable`1<string> filters);
    public abstract virtual string DropMeasurement(string dbName, string measurementName);
    public abstract virtual string GetTagKeys(string dbName, string measurementName);
    public abstract virtual string GetTagValues(string dbName, string measurementName, string tagName);
    public abstract virtual string GetFieldKeys(string dbName, string measurementName);
}
public interface InfluxData.Net.InfluxDb.QueryBuilders.IUserQueryBuilder {
    public abstract virtual string GetUsers();
    public abstract virtual string CreateUser(string username, string password, bool isAdmin);
    public abstract virtual string DropUser(string username);
    public abstract virtual string SetPassword(string username, string password);
    public abstract virtual string GetPrivileges(string username);
    public abstract virtual string GrantAdministator(string username);
    public abstract virtual string RevokeAdministrator(string username);
    public abstract virtual string GrantPrivilege(string username, Privileges privilege, string dbName);
    public abstract virtual string RevokePrivilege(string username, Privileges privilege, string dbName);
}
internal class InfluxData.Net.InfluxDb.QueryBuilders.RetentionQueryBuilder : object {
    public sealed virtual string CreateRetentionPolicy(string dbName, string policyName, string duration, int replication);
    public virtual string GetRetentionPolicies(string dbName);
    public virtual string AlterRetentionPolicy(string dbName, string policyName, string duration, int replication);
    public sealed virtual string DropRetentionPolicy(string dbName, string policyName);
}
internal class InfluxData.Net.InfluxDb.QueryBuilders.SerieQueryBuilder : object {
    public virtual string GetSeries(string dbName, string measurementName, IEnumerable`1<string> filters);
    public virtual string DropSeries(string dbName, string measurementName, IEnumerable`1<string> filters);
    public virtual string DropSeries(string dbName, IEnumerable`1<string> measurementNames, IEnumerable`1<string> filters);
    public virtual string GetMeasurements(string dbName, IEnumerable`1<string> filters);
    public virtual string DropMeasurement(string dbName, string measurementName);
    public virtual string GetTagKeys(string dbName, string measurementName);
    public virtual string GetTagValues(string dbName, string measurementName, string tagName);
    public virtual string GetFieldKeys(string dbName, string measurementName);
}
public class InfluxData.Net.InfluxDb.QueryBuilders.UserQueryBuilder : object {
    public virtual string GetUsers();
    public virtual string CreateUser(string username, string password, bool isAdmin);
    public virtual string DropUser(string username);
    public virtual string SetPassword(string username, string password);
    public virtual string GetPrivileges(string username);
    public virtual string GrantAdministator(string username);
    public virtual string RevokeAdministrator(string username);
    public virtual string GrantPrivilege(string username, Privileges privilege, string dbName);
    public virtual string RevokePrivilege(string username, Privileges privilege, string dbName);
}
public interface InfluxData.Net.InfluxDb.RequestClients.IInfluxDbRequestClient {
    public IConfiguration Configuration { get; }
    public abstract virtual IConfiguration get_Configuration();
    public abstract virtual Task`1<IInfluxDataApiResponse> GetQueryAsync(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public abstract virtual Task`1<IInfluxDataApiResponse> PostQueryAsync(string query, string dbName);
    public abstract virtual Task`1<IInfluxDataApiResponse> PostAsync(WriteRequest writeRequest);
    public abstract virtual Task`1<IInfluxDataApiResponse> QueryAsync(string query, HttpMethod method, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public abstract virtual IPointFormatter GetPointFormatter();
    public abstract virtual Task`1<IInfluxDataApiResponse> RequestAsync(HttpMethod method, string path, IDictionary`2<string, string> requestParams, HttpContent content, bool includeAuthToQuery, bool headerIsBody);
}
public class InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient : RequestClientBase {
    private IInfluxDbClientConfiguration _influxDbConfiguration;
    public InfluxDbRequestClient(IInfluxDbClientConfiguration configuration);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient/<GetQueryAsync>d__2")]
public virtual Task`1<IInfluxDataApiResponse> GetQueryAsync(string query, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient/<PostQueryAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> PostQueryAsync(string query, string dbName);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient/<PostAsync>d__4")]
public virtual Task`1<IInfluxDataApiResponse> PostAsync(WriteRequest writeRequest);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient/<QueryAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> QueryAsync(string query, HttpMethod method, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient/<QueryUriAsync>d__6")]
protected virtual Task`1<IInfluxDataApiResponse> QueryUriAsync(string query, HttpMethod method, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient/<QueryFormDataAsync>d__7")]
protected virtual Task`1<IInfluxDataApiResponse> QueryFormDataAsync(string query, HttpMethod method, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public virtual IPointFormatter GetPointFormatter();
    private sealed virtual override IConfiguration InfluxData.Net.InfluxDb.RequestClients.IInfluxDbRequestClient.get_Configuration();
    private sealed virtual override Task`1<IInfluxDataApiResponse> InfluxData.Net.InfluxDb.RequestClients.IInfluxDbRequestClient.RequestAsync(HttpMethod method, string path, IDictionary`2<string, string> requestParams, HttpContent content, bool includeAuthToQuery, bool headerIsBody);
}
public class InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient_v_0_9_2 : InfluxDbRequestClient_v_1_0_0 {
    public InfluxDbRequestClient_v_0_9_2(IInfluxDbClientConfiguration configuration);
    public virtual IPointFormatter GetPointFormatter();
}
public class InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient_v_0_9_6 : InfluxDbRequestClient_v_1_0_0 {
    public InfluxDbRequestClient_v_0_9_6(IInfluxDbClientConfiguration configuration);
}
public class InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient_v_1_0_0 : InfluxDbRequestClient {
    public InfluxDbRequestClient_v_1_0_0(IInfluxDbClientConfiguration configuration);
    [AsyncStateMachineAttribute("InfluxData.Net.InfluxDb.RequestClients.InfluxDbRequestClient_v_1_0_0/<QueryAsync>d__1")]
public virtual Task`1<IInfluxDataApiResponse> QueryAsync(string query, HttpMethod method, string dbName, string epochFormat, Nullable`1<long> chunkSize);
    public virtual IPointFormatter GetPointFormatter();
}
internal class InfluxData.Net.InfluxDb.ResponseParsers.BasicResponseParser : object {
    public virtual IEnumerable`1<Serie> FlattenResultsSeries(IEnumerable`1<SeriesResult> seriesResults);
    public virtual IEnumerable`1<IEnumerable`1<Serie>> MapResultsSeries(IEnumerable`1<SeriesResult> seriesResults);
    protected virtual IEnumerable`1<Serie> GetSeries(SeriesResult result);
}
internal class InfluxData.Net.InfluxDb.ResponseParsers.CqResponseParser : object {
    public virtual IEnumerable`1<ContinuousQuery> GetContinuousQueries(string dbName, IEnumerable`1<Serie> series);
}
internal class InfluxData.Net.InfluxDb.ResponseParsers.DatabaseResponseParser : object {
    public virtual IEnumerable`1<Database> GetDatabases(IEnumerable`1<Serie> series);
}
internal class InfluxData.Net.InfluxDb.ResponseParsers.DiagnosticsResponseParser : object {
    public virtual Stats GetStats(IEnumerable`1<Serie> series);
    public virtual Diagnostics GetDiagnostics(IEnumerable`1<Serie> series);
    protected virtual DiagnosticsSystem GetDiagnosticsSystem(IEnumerable`1<Serie> series);
    protected virtual DiagnosticsBuild GetDiagnosticsBuild(IEnumerable`1<Serie> series);
    protected virtual DiagnosticsRuntime GetDiagnosticsRuntime(IEnumerable`1<Serie> series);
    protected virtual DiagnosticsNetwork GetDiagnosticsNetwork(IEnumerable`1<Serie> series);
    protected virtual TimeSpan ParseGoDuration(string duration);
}
public interface InfluxData.Net.InfluxDb.ResponseParsers.IBasicResponseParser {
    public abstract virtual IEnumerable`1<Serie> FlattenResultsSeries(IEnumerable`1<SeriesResult> seriesResults);
    public abstract virtual IEnumerable`1<IEnumerable`1<Serie>> MapResultsSeries(IEnumerable`1<SeriesResult> seriesResults);
}
public interface InfluxData.Net.InfluxDb.ResponseParsers.ICqResponseParser {
    public abstract virtual IEnumerable`1<ContinuousQuery> GetContinuousQueries(string dbName, IEnumerable`1<Serie> series);
}
public interface InfluxData.Net.InfluxDb.ResponseParsers.IDatabaseResponseParser {
    public abstract virtual IEnumerable`1<Database> GetDatabases(IEnumerable`1<Serie> series);
}
public interface InfluxData.Net.InfluxDb.ResponseParsers.IDiagnosticsResponseParser {
    public abstract virtual Stats GetStats(IEnumerable`1<Serie> series);
    public abstract virtual Diagnostics GetDiagnostics(IEnumerable`1<Serie> series);
}
public interface InfluxData.Net.InfluxDb.ResponseParsers.IRetentionResponseParser {
    public abstract virtual IEnumerable`1<RetentionPolicy> GetRetentionPolicies(string dbName, IEnumerable`1<Serie> series);
}
public interface InfluxData.Net.InfluxDb.ResponseParsers.ISerieResponseParser {
    public abstract virtual IEnumerable`1<SerieSet> GetSerieSets(IEnumerable`1<Serie> series);
    public abstract virtual IEnumerable`1<Measurement> GetMeasurements(IEnumerable`1<Serie> series);
    public abstract virtual IEnumerable`1<string> GetTagKeys(IEnumerable`1<Serie> series);
    public abstract virtual IEnumerable`1<TagValue> GetTagValues(IEnumerable`1<Serie> series);
    public abstract virtual IEnumerable`1<FieldKey> GetFieldKeys(IEnumerable`1<Serie> series);
}
public interface InfluxData.Net.InfluxDb.ResponseParsers.IUserResponseParser {
    public abstract virtual IEnumerable`1<User> GetUsers(IEnumerable`1<Serie> series);
    public abstract virtual IEnumerable`1<Grant> GetPrivileges(IEnumerable`1<Serie> series);
}
internal class InfluxData.Net.InfluxDb.ResponseParsers.RetentionResponseParser : object {
    public sealed virtual IEnumerable`1<RetentionPolicy> GetRetentionPolicies(string dbName, IEnumerable`1<Serie> series);
}
internal class InfluxData.Net.InfluxDb.ResponseParsers.SerieResponseParser : object {
    protected string KeyColumnName { get; }
    protected virtual string get_KeyColumnName();
    public virtual IEnumerable`1<SerieSet> GetSerieSets(IEnumerable`1<Serie> series);
    protected virtual IList`1<SerieSetItem> GetSerieSetItems(Serie serie);
    protected virtual SerieSetItem GetSerieSetItem(int keyIndex, Dictionary`2<string, int> indexedKeyColumns, IList`1<object> serieValues);
    protected virtual void BindSerieSets(List`1<SerieSet> serieSets, SerieSetItem serieSetItem);
    public virtual IEnumerable`1<Measurement> GetMeasurements(IEnumerable`1<Serie> series);
    public virtual IEnumerable`1<string> GetTagKeys(IEnumerable`1<Serie> series);
    public virtual IEnumerable`1<TagValue> GetTagValues(IEnumerable`1<Serie> series);
    public virtual IEnumerable`1<FieldKey> GetFieldKeys(IEnumerable`1<Serie> series);
}
internal class InfluxData.Net.InfluxDb.ResponseParsers.SerieResponseParser_v_0_9_6 : SerieResponseParser {
    protected string KeyColumnName { get; }
    protected virtual string get_KeyColumnName();
    public virtual IEnumerable`1<SerieSet> GetSerieSets(IEnumerable`1<Serie> series);
    protected virtual SerieSet GetSerieSet(Serie serie);
    protected virtual void BindSerieSets(List`1<SerieSet> serieSets, SerieSetItem serieSetItem);
    protected virtual IList`1<SerieSetItem> GetSerieSetItems(Serie serie);
}
public class InfluxData.Net.InfluxDb.ResponseParsers.UserResponseParser : object {
    public virtual IEnumerable`1<User> GetUsers(IEnumerable`1<Serie> series);
    public virtual IEnumerable`1<Grant> GetPrivileges(IEnumerable`1<Serie> series);
}
