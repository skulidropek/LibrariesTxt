public enum InfluxData.Net.InfluxDb.Enums.TaskType : Enum {
    public int value__;
    public static TaskType Stream;
    public static TaskType Batch;
}
public class InfluxData.Net.Kapacitor.ClientModules.ClientModuleBase : object {
    [CompilerGeneratedAttribute]
private IKapacitorRequestClient <RequestClient>k__BackingField;
    protected IKapacitorRequestClient RequestClient { get; private set; }
    public ClientModuleBase(IKapacitorRequestClient requestClient);
    [CompilerGeneratedAttribute]
protected IKapacitorRequestClient get_RequestClient();
    [CompilerGeneratedAttribute]
private void set_RequestClient(IKapacitorRequestClient value);
}
public interface InfluxData.Net.Kapacitor.ClientModules.ITaskClientModule {
    public abstract virtual Task`1<KapacitorTask> GetTaskAsync(string taskId);
    public abstract virtual Task`1<IEnumerable`1<KapacitorTask>> GetTasksAsync();
    public abstract virtual Task`1<IInfluxDataApiResponse> DefineTaskAsync(DefineTaskParams taskParams);
    public abstract virtual Task`1<IInfluxDataApiResponse> DefineTaskAsync(DefineTemplatedTaskParams taskParams);
    public abstract virtual Task`1<IInfluxDataApiResponse> DeleteTaskAsync(string taskId);
    public abstract virtual Task`1<IInfluxDataApiResponse> EnableTaskAsync(string taskId);
    public abstract virtual Task`1<IInfluxDataApiResponse> DisableTaskAsync(string taskId);
}
public class InfluxData.Net.Kapacitor.ClientModules.TaskClientModule : ClientModuleBase {
    public TaskClientModule(IKapacitorRequestClient requestClient);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule/<GetTaskAsync>d__1")]
public virtual Task`1<KapacitorTask> GetTaskAsync(string taskId);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule/<GetTasksAsync>d__2")]
public virtual Task`1<IEnumerable`1<KapacitorTask>> GetTasksAsync();
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule/<DefineTaskAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> DefineTaskAsync(DefineTaskParams taskParams);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule/<DefineTaskAsync>d__4")]
public virtual Task`1<IInfluxDataApiResponse> DefineTaskAsync(DefineTemplatedTaskParams taskParams);
    protected virtual Dictionary`2<string, object> BuildDefineTaskContentDict(BaseTaskParams taskParams);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule/<DeleteTaskAsync>d__6")]
public virtual Task`1<IInfluxDataApiResponse> DeleteTaskAsync(string taskId);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule/<EnableTaskAsync>d__7")]
public virtual Task`1<IInfluxDataApiResponse> EnableTaskAsync(string taskId);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule/<DisableTaskAsync>d__8")]
public virtual Task`1<IInfluxDataApiResponse> DisableTaskAsync(string taskId);
}
public class InfluxData.Net.Kapacitor.ClientModules.TaskClientModule_v_0_10_1 : ClientModuleBase {
    public TaskClientModule_v_0_10_1(IKapacitorRequestClient requestClient);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule_v_0_10_1/<GetTaskAsync>d__1")]
public virtual Task`1<KapacitorTask> GetTaskAsync(string taskName);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule_v_0_10_1/<GetTasksAsync>d__2")]
public virtual Task`1<IEnumerable`1<KapacitorTask>> GetTasksAsync();
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule_v_0_10_1/<DefineTaskAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> DefineTaskAsync(DefineTaskParams taskParams);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule_v_0_10_1/<DefineTaskAsync>d__4")]
public virtual Task`1<IInfluxDataApiResponse> DefineTaskAsync(DefineTemplatedTaskParams taskParams);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule_v_0_10_1/<DeleteTaskAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> DeleteTaskAsync(string taskName);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule_v_0_10_1/<EnableTaskAsync>d__6")]
public virtual Task`1<IInfluxDataApiResponse> EnableTaskAsync(string taskName);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.ClientModules.TaskClientModule_v_0_10_1/<DisableTaskAsync>d__7")]
public virtual Task`1<IInfluxDataApiResponse> DisableTaskAsync(string taskName);
}
internal static class InfluxData.Net.Kapacitor.Constants.BodyParams : object {
    public static string Db;
    public static string Id;
    public static string Type;
    public static string Dbrps;
    public static string Status;
    public static string RetentionPolicy;
    public static string Script;
    public static string TemplateId;
    public static string Vars;
}
internal static class InfluxData.Net.Kapacitor.Constants.QueryParams : object {
    public static string Db;
    public static string Name;
    public static string Type;
    public static string Dbrps;
    public static string RetentionPolicy;
    public static string Tasks;
}
internal static class InfluxData.Net.Kapacitor.Constants.RequestPaths : object {
    public static string Task;
    public static string Tasks;
    public static string Enable;
    public static string Disable;
}
[ExtensionAttribute]
public static class InfluxData.Net.Kapacitor.Helpers.ResponseExtensions : object {
    [ExtensionAttribute]
public static IInfluxDataApiResponse ValidateTaskResponse(IInfluxDataApiResponse response, bool throwOnWarning);
    [ExtensionAttribute]
public static KapacitorTasks Validate(KapacitorTasks kapacitorTask, bool throwOnWarning);
}
public interface InfluxData.Net.Kapacitor.IKapacitorClient {
    public ITaskClientModule Task { get; }
    public abstract virtual ITaskClientModule get_Task();
}
public class InfluxData.Net.Kapacitor.Infrastructure.KapacitorClientConfiguration : object {
    [CompilerGeneratedAttribute]
private Uri <EndpointUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private KapacitorVersion <KapacitorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    public Uri EndpointUri { get; private set; }
    public string Username { get; private set; }
    public string Password { get; private set; }
    public bool ThrowOnWarning { get; private set; }
    public KapacitorVersion KapacitorVersion { get; private set; }
    public HttpClient HttpClient { get; private set; }
    public KapacitorClientConfiguration(Uri endpointUri, string username, string password, KapacitorVersion kapacitorVersion, HttpClient httpClient, bool throwOnWarning);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_EndpointUri();
    [CompilerGeneratedAttribute]
private void set_EndpointUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Username();
    [CompilerGeneratedAttribute]
private void set_Username(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowOnWarning();
    [CompilerGeneratedAttribute]
private void set_ThrowOnWarning(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual KapacitorVersion get_KapacitorVersion();
    [CompilerGeneratedAttribute]
private void set_KapacitorVersion(KapacitorVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
private void set_HttpClient(HttpClient value);
    private static Uri SanitizeEndpoint(Uri endpointUri, bool isTls);
}
internal class InfluxData.Net.Kapacitor.Infrastructure.KapacitorClientDependencies : object {
    [CompilerGeneratedAttribute]
private IKapacitorRequestClient <KapacitorRequestClient>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskClientModule <TaskClientModule>k__BackingField;
    public IKapacitorRequestClient KapacitorRequestClient { get; public set; }
    public ITaskClientModule TaskClientModule { get; public set; }
    [CompilerGeneratedAttribute]
public IKapacitorRequestClient get_KapacitorRequestClient();
    [CompilerGeneratedAttribute]
public void set_KapacitorRequestClient(IKapacitorRequestClient value);
    [CompilerGeneratedAttribute]
public ITaskClientModule get_TaskClientModule();
    [CompilerGeneratedAttribute]
public void set_TaskClientModule(ITaskClientModule value);
}
public class InfluxData.Net.Kapacitor.KapacitorClient : object {
    private IKapacitorRequestClient _requestClient;
    private Lazy`1<ITaskClientModule> _taskClientModule;
    public ITaskClientModule Task { get; }
    public KapacitorClient(string uri, KapacitorVersion kapacitorVersion, HttpClient httpClient, bool throwOnWarning);
    public KapacitorClient(IKapacitorClientConfiguration configuration);
    public sealed virtual ITaskClientModule get_Task();
    protected virtual void BootstrapKapacitorLatest(IKapacitorClientConfiguration configuration);
    protected virtual void BootstrapKapacitorLatest_v_0_10_1(IKapacitorClientConfiguration configuration);
    protected virtual void BootstrapKapacitorLatest_v_0_10_0(IKapacitorClientConfiguration configuration);
    [CompilerGeneratedAttribute]
private ITaskClientModule <BootstrapKapacitorLatest>b__6_0();
    [CompilerGeneratedAttribute]
private ITaskClientModule <BootstrapKapacitorLatest_v_0_10_1>b__7_0();
}
public abstract class InfluxData.Net.Kapacitor.Models.BaseTaskParams : object {
    [CompilerGeneratedAttribute]
private string <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private DBRPsParams <DBRPsParams>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TaskVar> <TaskVars>k__BackingField;
    public string TaskId { get; public set; }
    [ObsoleteAttribute("Please use TaskId property instead")]
public string TaskName { get; public set; }
    public DBRPsParams DBRPsParams { get; public set; }
    public Dictionary`2<string, TaskVar> TaskVars { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TaskId();
    [CompilerGeneratedAttribute]
public void set_TaskId(string value);
    public string get_TaskName();
    public void set_TaskName(string value);
    [CompilerGeneratedAttribute]
public DBRPsParams get_DBRPsParams();
    [CompilerGeneratedAttribute]
public void set_DBRPsParams(DBRPsParams value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TaskVar> get_TaskVars();
    [CompilerGeneratedAttribute]
public void set_TaskVars(Dictionary`2<string, TaskVar> value);
}
public class InfluxData.Net.Kapacitor.Models.DBRPsParams : object {
    [CompilerGeneratedAttribute]
private string <DbName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RetentionPolicy>k__BackingField;
    public string DbName { get; public set; }
    public string RetentionPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DbName();
    [CompilerGeneratedAttribute]
public void set_DbName(string value);
    [CompilerGeneratedAttribute]
public string get_RetentionPolicy();
    [CompilerGeneratedAttribute]
public void set_RetentionPolicy(string value);
}
public class InfluxData.Net.Kapacitor.Models.DefineTaskParams : BaseTaskParams {
    [CompilerGeneratedAttribute]
private TaskType <TaskType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TickScript>k__BackingField;
    public TaskType TaskType { get; public set; }
    public string TickScript { get; public set; }
    [CompilerGeneratedAttribute]
public TaskType get_TaskType();
    [CompilerGeneratedAttribute]
public void set_TaskType(TaskType value);
    [CompilerGeneratedAttribute]
public string get_TickScript();
    [CompilerGeneratedAttribute]
public void set_TickScript(string value);
}
public class InfluxData.Net.Kapacitor.Models.DefineTemplatedTaskParams : BaseTaskParams {
    [CompilerGeneratedAttribute]
private string <TemplateId>k__BackingField;
    public string TemplateId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TemplateId();
    [CompilerGeneratedAttribute]
public void set_TemplateId(string value);
}
public class InfluxData.Net.Kapacitor.Models.Responses.DBRPs : object {
    [CompilerGeneratedAttribute]
private string <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rp>k__BackingField;
    public string Db { get; public set; }
    public string Rp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Db();
    [CompilerGeneratedAttribute]
public void set_Db(string value);
    [CompilerGeneratedAttribute]
public string get_Rp();
    [CompilerGeneratedAttribute]
public void set_Rp(string value);
}
public class InfluxData.Net.Kapacitor.Models.Responses.KapacitorTask : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Modified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<DBRPs> <DBRPs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Executing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Id { get; public set; }
    [ObsoleteAttribute("Please use Id property instead")]
public string Name { get; public set; }
    public DateTime Created { get; public set; }
    public DateTime Modified { get; public set; }
    public string Type { get; public set; }
    public IEnumerable`1<DBRPs> DBRPs { get; public set; }
    public string Script { get; public set; }
    [ObsoleteAttribute("Please use Id property instead")]
public string TICKscript { get; public set; }
    public string Dot { get; public set; }
    public string Status { get; public set; }
    [ObsoleteAttribute("The 'Enabled' property is only used by older versions of Kapacitor, please use 'Status' instead")]
public bool Enabled { get; public set; }
    public bool Executing { get; public set; }
    public string Error { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Modified();
    [CompilerGeneratedAttribute]
public void set_Modified(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<DBRPs> get_DBRPs();
    [CompilerGeneratedAttribute]
public void set_DBRPs(IEnumerable`1<DBRPs> value);
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(string value);
    public string get_TICKscript();
    public void set_TICKscript(string value);
    [CompilerGeneratedAttribute]
public string get_Dot();
    [CompilerGeneratedAttribute]
public void set_Dot(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Executing();
    [CompilerGeneratedAttribute]
public void set_Executing(bool value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
}
public class InfluxData.Net.Kapacitor.Models.Responses.KapacitorTasks : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<KapacitorTask> <Tasks>k__BackingField;
    public IEnumerable`1<KapacitorTask> Tasks { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<KapacitorTask> get_Tasks();
    [CompilerGeneratedAttribute]
public void set_Tasks(IEnumerable`1<KapacitorTask> value);
}
public class InfluxData.Net.Kapacitor.Models.TaskVar : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Type { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public interface InfluxData.Net.Kapacitor.RequestClients.IKapacitorRequestClient {
    public abstract virtual Task`1<IInfluxDataApiResponse> GetAsync(string path);
    public abstract virtual Task`1<IInfluxDataApiResponse> GetAsync(string path, string taskId);
    public abstract virtual Task`1<IInfluxDataApiResponse> GetAsync(string path, IDictionary`2<string, string> requestParams);
    public abstract virtual Task`1<IInfluxDataApiResponse> PostAsync(string path, IDictionary`2<string, string> requestParams, string content);
    public abstract virtual Task`1<IInfluxDataApiResponse> DeleteAsync(string path, string taskId);
    public abstract virtual Task`1<IInfluxDataApiResponse> DeleteAsync(string path, IDictionary`2<string, string> requestParams);
    public abstract virtual Task`1<IInfluxDataApiResponse> PatchAsync(string path, string taskId, string content);
    public abstract virtual Task`1<IInfluxDataApiResponse> RequestAsync(HttpMethod method, string path, IDictionary`2<string, string> requestParams, HttpContent content, bool includeAuthToQuery, bool headerIsBody);
}
public class InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient : RequestClientBase {
    protected string BasePath { get; }
    public KapacitorRequestClient(IKapacitorClientConfiguration configuration);
    protected virtual string get_BasePath();
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient/<GetAsync>d__3")]
public virtual Task`1<IInfluxDataApiResponse> GetAsync(string path);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient/<GetAsync>d__4")]
public virtual Task`1<IInfluxDataApiResponse> GetAsync(string path, string taskId);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient/<GetAsync>d__5")]
public virtual Task`1<IInfluxDataApiResponse> GetAsync(string path, IDictionary`2<string, string> requestParams);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient/<PostAsync>d__6")]
public virtual Task`1<IInfluxDataApiResponse> PostAsync(string path, IDictionary`2<string, string> requestParams, string content);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient/<DeleteAsync>d__7")]
public virtual Task`1<IInfluxDataApiResponse> DeleteAsync(string path, string taskId);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient/<DeleteAsync>d__8")]
public virtual Task`1<IInfluxDataApiResponse> DeleteAsync(string path, IDictionary`2<string, string> requestParams);
    [AsyncStateMachineAttribute("InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient/<PatchAsync>d__9")]
public virtual Task`1<IInfluxDataApiResponse> PatchAsync(string path, string taskId, string content);
    protected virtual string ResolveFullPath(string path, string taskId);
    private sealed virtual override Task`1<IInfluxDataApiResponse> InfluxData.Net.Kapacitor.RequestClients.IKapacitorRequestClient.RequestAsync(HttpMethod method, string path, IDictionary`2<string, string> requestParams, HttpContent content, bool includeAuthToQuery, bool headerIsBody);
}
public class InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient_v_0_10_0 : KapacitorRequestClient {
    protected string BasePath { get; }
    public KapacitorRequestClient_v_0_10_0(IKapacitorClientConfiguration configuration);
    protected virtual string get_BasePath();
    private sealed virtual override Task`1<IInfluxDataApiResponse> InfluxData.Net.Kapacitor.RequestClients.IKapacitorRequestClient.RequestAsync(HttpMethod method, string path, IDictionary`2<string, string> requestParams, HttpContent content, bool includeAuthToQuery, bool headerIsBody);
}
public class InfluxData.Net.Kapacitor.RequestClients.KapacitorRequestClient_v_0_10_1 : KapacitorRequestClient {
    protected string BasePath { get; }
    public KapacitorRequestClient_v_0_10_1(IKapacitorClientConfiguration configuration);
    protected virtual string get_BasePath();
    private sealed virtual override Task`1<IInfluxDataApiResponse> InfluxData.Net.Kapacitor.RequestClients.IKapacitorRequestClient.RequestAsync(HttpMethod method, string path, IDictionary`2<string, string> requestParams, HttpContent content, bool includeAuthToQuery, bool headerIsBody);
}
