internal class Intersoft.Crosslight.iOS.a : object {
    private UIView a;
    private INotifyCollectionChanged b;
    internal a(UIView view, INotifyCollectionChanged items);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ProcessTableView(UITableView tableView, NotifyCollectionChangedEventArgs e);
    private void ProcessCollectionView(UICollectionView collectionView, NotifyCollectionChangedEventArgs e);
    public sealed virtual void OnSelectedItemsChanged(INotifyCollectionChanged selectedItems);
}
public class Intersoft.Crosslight.iOS.AccountStoreService : AccountStoreServiceBase {
    [CompilerGeneratedAttribute]
private static Func`2<IAccount, bool> a;
    public virtual IEnumerable`1<IAccount> FindAccounts(string serviceId);
    public virtual IAccount FindAccount(string serviceId);
    public virtual void Save(IAccount account);
    public virtual void Delete(IAccount account);
    protected virtual string SerializeCookies(object cookies);
    protected virtual object DeserializeCookies(string cookiesString);
    private IAccount GetAccountFromRecord(SecRecord r);
    private bool IsAccountInStore(IAccount account);
    private bool IsIdenticalAccountExisted(IAccount account);
    [CompilerGeneratedAttribute]
private static bool <FindAccount>b__3(IAccount o);
}
public class Intersoft.Crosslight.iOS.ActionPresenter : object {
    [CompilerGeneratedAttribute]
private static object a;
    [CompilerGeneratedAttribute]
private static ActionPresenter b;
    [CompilerGeneratedAttribute]
private UIActionSheet c;
    private static object a { get; private set; }
    private static ActionPresenter b { get; private set; }
    private UIActionSheet c { get; private set; }
    [CompilerGeneratedAttribute]
private static object get_a();
    [CompilerGeneratedAttribute]
private static void set_a(object value);
    [CompilerGeneratedAttribute]
private static ActionPresenter get_b();
    [CompilerGeneratedAttribute]
private static void set_b(ActionPresenter value);
    [CompilerGeneratedAttribute]
private UIActionSheet get_c();
    [CompilerGeneratedAttribute]
private void set_c(UIActionSheet value);
    public sealed virtual void SetOwner(object owner);
    public sealed virtual void Show(string title, String[] buttons, Action`1<int> actionCallback);
    public sealed virtual void Show(string title, String[] buttons, int highlightButtonIndex, int cancelButtonIndex, Action`1<int> actionCallback);
    public sealed virtual void Dismiss();
    public sealed virtual void Show(string message);
}
public class Intersoft.Crosslight.iOS.ActivityPresenter : object {
    [CompilerGeneratedAttribute]
private static object a;
    [CompilerGeneratedAttribute]
private static Action b;
    private static object a { get; private set; }
    [CompilerGeneratedAttribute]
private static object get_a();
    [CompilerGeneratedAttribute]
private static void set_a(object value);
    public sealed virtual void SetOwner(object owner);
    public sealed virtual void Show();
    public sealed virtual void Show(ActivityStyle style);
    public sealed virtual void Show(string message, ActivityStyle style);
    public sealed virtual void Show(string message, ActivityStyle style, bool useOverlay);
    public sealed virtual void Show(string message, ActivityStyle style, IViewModel owner);
    private void Show(string message, ActivityStyle style, bool useOverlay, IViewModel viewOwner);
    public sealed virtual void Hide();
    public sealed virtual void Show(string message);
    [CompilerGeneratedAttribute]
private static void <Hide>b__0();
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.AdapterExtensions : object {
    [ExtensionAttribute]
public static void UpdateSource(IBindingAdapter adapter);
}
public class Intersoft.Crosslight.iOS.ApplicationContext : object {
    private IList`1<Type> a;
    private IViewModel b;
    [CompilerGeneratedAttribute]
private Type c;
    [CompilerGeneratedAttribute]
private Assembly d;
    [CompilerGeneratedAttribute]
private CultureInfo e;
    [CompilerGeneratedAttribute]
private PlatformInfo f;
    [CompilerGeneratedAttribute]
private DeviceInfo g;
    [CompilerGeneratedAttribute]
private object h;
    [CompilerGeneratedAttribute]
private object i;
    [CompilerGeneratedAttribute]
private Type j;
    public Type MainType { get; private set; }
    public Assembly MainAssembly { get; private set; }
    public CultureInfo SystemLanguage { get; private set; }
    public PlatformInfo Platform { get; private set; }
    public DeviceInfo Device { get; private set; }
    public object Context { get; private set; }
    public object Tag { get; public set; }
    public IViewModel RootViewModel { get; public set; }
    public Type RootViewModelType { get; public set; }
    public Type[] ExportedTypes { get; }
    public ApplicationContext(Type mainType, IApplicationHost appHost);
    public sealed virtual void AddExportedType(Type type);
    public sealed virtual void AddExportedTypes(Type[] types);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_MainType();
    [CompilerGeneratedAttribute]
private void set_MainType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Assembly get_MainAssembly();
    [CompilerGeneratedAttribute]
private void set_MainAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_SystemLanguage();
    [CompilerGeneratedAttribute]
private void set_SystemLanguage(CultureInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual PlatformInfo get_Platform();
    [CompilerGeneratedAttribute]
private void set_Platform(PlatformInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual DeviceInfo get_Device();
    [CompilerGeneratedAttribute]
private void set_Device(DeviceInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(object value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public sealed virtual IViewModel get_RootViewModel();
    public sealed virtual void set_RootViewModel(IViewModel value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_RootViewModelType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootViewModelType(Type value);
    public sealed virtual Type[] get_ExportedTypes();
    public UIApplicationDelegate GetNativeContext();
}
internal class Intersoft.Crosslight.iOS.b : UISplitViewControllerDelegate {
    [CompilerGeneratedAttribute]
private UIBarButtonItem a;
    [CompilerGeneratedAttribute]
private UIPopoverController b;
    [CompilerGeneratedAttribute]
private bool c;
    internal UIBarButtonItem a { get; private set; }
    internal UIPopoverController b { get; private set; }
    internal bool c { get; private set; }
    [CompilerGeneratedAttribute]
internal UIBarButtonItem get_a();
    [CompilerGeneratedAttribute]
private void set_a(UIBarButtonItem value);
    [CompilerGeneratedAttribute]
internal UIPopoverController get_b();
    [CompilerGeneratedAttribute]
private void set_b(UIPopoverController value);
    [CompilerGeneratedAttribute]
internal bool get_c();
    [CompilerGeneratedAttribute]
private void set_c(bool value);
    public virtual void WillHideViewController(UISplitViewController splitViewController, UIViewController viewController, UIBarButtonItem barButtonItem, UIPopoverController popoverController);
    public virtual void WillShowViewController(UISplitViewController splitViewController, UIViewController viewController, UIBarButtonItem barButtonItem);
    private void InitializePopoverController(UIPopoverController popoverController);
    private void InitializeBarButtonItem(IMasterDetailViewController masterDetailViewController, UIBarButtonItem barButtonItem);
}
public enum Intersoft.Crosslight.iOS.BlurBackgroundStyle : Enum {
    public int value__;
    public static BlurBackgroundStyle Light;
    public static BlurBackgroundStyle Dark;
    public static BlurBackgroundStyle TintColor;
}
public class Intersoft.Crosslight.iOS.ButtonViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
internal class Intersoft.Crosslight.iOS.c : NSObject {
    private UITabBarController a;
    private int b;
    internal c(UITabBarController controller, UITableView tableView);
    [ExportAttribute("tableView:didSelectRowAtIndexPath:")]
public void RowSelected(UITableView tableView, NSIndexPath indexPath);
    [ExportAttribute("tableView:willDisplayCell:forRowAtIndexPath:")]
public void WillDisplay(UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);
}
public enum Intersoft.Crosslight.iOS.CancelButtonVisibility : Enum {
    public int value__;
    public static CancelButtonVisibility Auto;
    public static CancelButtonVisibility Never;
    public static CancelButtonVisibility Always;
    public static CancelButtonVisibility WhenEdit;
}
public class Intersoft.Crosslight.iOS.CarouselCollectionSource : ObservableCollectionSource {
    private UIPageControl a;
    [CompilerGeneratedAttribute]
private int b;
    public int SelectedIndex { get; private set; }
    public UICarouselView CarouselView { get; }
    public CarouselCollectionSource(UIViewController viewController, UICollectionView collectionView, UIPageControl pageControl, ItemBindingDescription bindingDescription, IViewModel viewModel);
    [CompilerGeneratedAttribute]
public int get_SelectedIndex();
    [CompilerGeneratedAttribute]
private void set_SelectedIndex(int value);
    public UICarouselView get_CarouselView();
    public virtual void DecelerationEnded(UIScrollView scrollView);
    protected virtual void OnItemsChanged(IEnumerable oldItems, IEnumerable newItems);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnSelectedIndexChanged(int oldIndex, int newIndex);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    internal void SetSelectedIndex(int index);
    private void UpdatePageControl();
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.CGRectExtensions : object {
    [ExtensionAttribute]
public static CGRect SetLeft(CGRect rect, nfloat left);
    [ExtensionAttribute]
public static CGRect SetTop(CGRect rect, nfloat top);
    [ExtensionAttribute]
public static CGRect SetWidth(CGRect rect, nfloat width);
    [ExtensionAttribute]
public static CGRect SetHeight(CGRect rect, nfloat height);
}
public enum Intersoft.Crosslight.iOS.ChoiceInputMode : Enum {
    public int value__;
    public static ChoiceInputMode Single;
    public static ChoiceInputMode Multiple;
}
public enum Intersoft.Crosslight.iOS.CollectionViewInteraction : Enum {
    public int value__;
    public static CollectionViewInteraction Standard;
    public static CollectionViewInteraction Navigation;
    public static CollectionViewInteraction None;
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.ColorExtensions : object {
    [ExtensionAttribute]
public static UIColor ToUIColor(Color color);
    [ExtensionAttribute]
public static bool IsEmpty(UIColor color);
}
public class Intersoft.Crosslight.iOS.ComponentViewBuilder : object {
    public ComponentType ComponentType { get; }
    public string EditorIdentifier { get; }
    public virtual ComponentType get_ComponentType();
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
    private sealed virtual override T Intersoft.Crosslight.IViewBuilder.Build(object viewHost, ComponentDefinitionBase definition);
}
public enum Intersoft.Crosslight.iOS.ContentPresentationStyle : Enum {
    public int value__;
    public static ContentPresentationStyle FormSheet;
    public static ContentPresentationStyle FullScreen;
    public static ContentPresentationStyle Edge;
}
public class Intersoft.Crosslight.iOS.ControlBindingAdapterBase`1 : BindingAdapterBase`1<T> {
    public virtual void SetValue(T obj, BindableProperty property, object value);
    public virtual object GetValue(T obj, BindableProperty property);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod5(T , BindableProperty , object );
}
internal class Intersoft.Crosslight.iOS.d : UIPanGestureRecognizer {
    [CompilerGeneratedAttribute]
private UIView a;
    internal UIView a { get; internal set; }
    public d(UIView view, Action`1<UIPanGestureRecognizer> recognizer);
    [CompilerGeneratedAttribute]
internal UIView get_a();
    [CompilerGeneratedAttribute]
internal void set_a(UIView value);
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.DateTimeExtensions : object {
    [ExtensionAttribute]
public static DateTime ToDateTime(NSDate date);
    [ExtensionAttribute]
public static NSDate ToNSDate(DateTime date);
}
public class Intersoft.Crosslight.iOS.DateTimeViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.DateViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.DefaultAppInitializer : object {
    private IApplicationInitializer a;
    private IApplicationInitializer GetAppInitializer(IApplicationHost appHost);
    public sealed virtual void InitializeServices(IApplicationHost appHost);
    public sealed virtual void InitializeComponents(IApplicationHost appHost);
    public sealed virtual void InitializeApplication(IApplicationHost appHost);
    private sealed virtual override IApplicationService Intersoft.Crosslight.IApplicationInitializer.GetApplicationService(IApplicationContext context);
}
public class Intersoft.Crosslight.iOS.DialogModalPresenter : OverlayModalPresenter {
    private IContentPresenterSettings a;
    public Type PresentationControllerType { get; }
    public Type AnimationControllerType { get; }
    public IContentPresenterSettings Settings { get; }
    private DialogPresenterSettings a { get; }
    public virtual Type get_PresentationControllerType();
    public virtual Type get_AnimationControllerType();
    public virtual IContentPresenterSettings get_Settings();
    private DialogPresenterSettings get_a();
    protected virtual void Initialize(NavigationParameter parameter);
}
public class Intersoft.Crosslight.iOS.DialogPresentationController : OverlayPresentationController {
    private UIVisualEffectView a;
    private UILabel b;
    private List`1<UIView> c;
    private DialogPresenterSettings a { get; }
    public CGSize ContainerSizeOffset { get; }
    public DialogPresentationController(UIViewController presentedViewController, UIViewController presentingViewController, IContentPresenter contentPresenter);
    private DialogPresenterSettings get_a();
    public virtual CGSize get_ContainerSizeOffset();
    protected virtual void InitializeView();
    protected virtual void OnOverlayViewTapped(UIGestureRecognizer gesture);
    protected virtual UIView CreateButton(DialogButton button);
    public virtual void DismissPresentedView(DialogButton button, bool isDismissed);
    public virtual void ContainerViewWillLayoutSubviews();
    private UIView CreateSeparatorInnerView(UIViewAutoresizing resizingMask, Nullable`1<CGRect> frame);
    private void ApplyButtonAttributes(UIButton button, DialogButtonStyle style);
}
public class Intersoft.Crosslight.iOS.DialogPresenter : object {
    private IViewModel a;
    [CompilerGeneratedAttribute]
private static Action`1<IViewContext> b;
    public sealed virtual void Show(Action`1<DialogResult> callback);
    public sealed virtual void Show(DialogOptions dialogOptions, Action`1<DialogResult> callback);
    public sealed virtual void Show(NavigationParameter parameter, DialogOptions dialogOptions, Action`1<DialogResult> callback);
    public sealed virtual void Show(NavigationTarget target, DialogOptions dialogOptions, Action`1<DialogResult> callback);
    public sealed virtual void Show(string targetName, DialogOptions dialogOptions, Action`1<DialogResult> callback);
    public sealed virtual void Dismiss();
    public sealed virtual void SetOwner(object owner);
    public sealed virtual void Show(string message);
    [CompilerGeneratedAttribute]
private static void <Show>b__0(IViewContext o);
}
public class Intersoft.Crosslight.iOS.DialogPresenterSettings : OverlayPresenterSettings {
    [CompilerGeneratedAttribute]
private DialogOptions a;
    [CompilerGeneratedAttribute]
private UIFont b;
    [CompilerGeneratedAttribute]
private UIFont c;
    [CompilerGeneratedAttribute]
private UIFont d;
    [CompilerGeneratedAttribute]
private UIFont e;
    [CompilerGeneratedAttribute]
private UIColor f;
    [CompilerGeneratedAttribute]
private UIColor g;
    [CompilerGeneratedAttribute]
private UIBlurEffectStyle h;
    public DialogOptions DialogOptions { get; internal set; }
    public UIFont TitleFont { get; public set; }
    public UIFont PositiveButtonFont { get; public set; }
    public UIFont NegativeButtonFont { get; public set; }
    public UIFont NeutralButtonFont { get; public set; }
    public UIColor TitleColor { get; public set; }
    public UIColor SeparatorColor { get; public set; }
    public UIBlurEffectStyle SeparatorBlurStyle { get; public set; }
    [CompilerGeneratedAttribute]
public DialogOptions get_DialogOptions();
    [CompilerGeneratedAttribute]
internal void set_DialogOptions(DialogOptions value);
    [CompilerGeneratedAttribute]
public UIFont get_TitleFont();
    [CompilerGeneratedAttribute]
public void set_TitleFont(UIFont value);
    [CompilerGeneratedAttribute]
public UIFont get_PositiveButtonFont();
    [CompilerGeneratedAttribute]
public void set_PositiveButtonFont(UIFont value);
    [CompilerGeneratedAttribute]
public UIFont get_NegativeButtonFont();
    [CompilerGeneratedAttribute]
public void set_NegativeButtonFont(UIFont value);
    [CompilerGeneratedAttribute]
public UIFont get_NeutralButtonFont();
    [CompilerGeneratedAttribute]
public void set_NeutralButtonFont(UIFont value);
    [CompilerGeneratedAttribute]
public UIColor get_TitleColor();
    [CompilerGeneratedAttribute]
public void set_TitleColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_SeparatorColor();
    [CompilerGeneratedAttribute]
public void set_SeparatorColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIBlurEffectStyle get_SeparatorBlurStyle();
    [CompilerGeneratedAttribute]
public void set_SeparatorBlurStyle(UIBlurEffectStyle value);
}
public class Intersoft.Crosslight.iOS.DialogTransitionController : ModalTransitionController {
    public DialogTransitionController(IContentPresenter contentPresenter, bool isPresenting);
    protected virtual void ConfigureTransition(IUIViewControllerContextTransitioning transition, TransitionContext context);
}
public enum Intersoft.Crosslight.iOS.DisclosureIndicatorVisibility : Enum {
    public int value__;
    public static DisclosureIndicatorVisibility Auto;
    public static DisclosureIndicatorVisibility Always;
    public static DisclosureIndicatorVisibility Never;
}
public enum Intersoft.Crosslight.iOS.DoneButtonVisibility : Enum {
    public int value__;
    public static DoneButtonVisibility Auto;
    public static DoneButtonVisibility Never;
    public static DoneButtonVisibility Always;
    public static DoneButtonVisibility WhenEdit;
}
public enum Intersoft.Crosslight.iOS.DrawerAnimationKind : Enum {
    public int value__;
    public static DrawerAnimationKind Slide;
    public static DrawerAnimationKind SlideParallax;
    public static DrawerAnimationKind Scale;
}
public class Intersoft.Crosslight.iOS.DrawerSettings : object {
    private StatusBarTransitionMode a;
    [CompilerGeneratedAttribute]
private string b;
    [CompilerGeneratedAttribute]
private bool c;
    [CompilerGeneratedAttribute]
private bool d;
    [CompilerGeneratedAttribute]
private bool e;
    [CompilerGeneratedAttribute]
private bool f;
    [CompilerGeneratedAttribute]
private bool g;
    [CompilerGeneratedAttribute]
private bool h;
    [CompilerGeneratedAttribute]
private float i;
    [CompilerGeneratedAttribute]
private float j;
    [CompilerGeneratedAttribute]
private float k;
    [CompilerGeneratedAttribute]
private float l;
    [CompilerGeneratedAttribute]
private float m;
    [CompilerGeneratedAttribute]
private float n;
    [CompilerGeneratedAttribute]
private float o;
    [CompilerGeneratedAttribute]
private UIColor p;
    [CompilerGeneratedAttribute]
private UIColor q;
    [CompilerGeneratedAttribute]
private UIColor r;
    [CompilerGeneratedAttribute]
private UITextAttributes s;
    [CompilerGeneratedAttribute]
private bool t;
    [CompilerGeneratedAttribute]
private bool u;
    [CompilerGeneratedAttribute]
private bool v;
    [CompilerGeneratedAttribute]
private bool w;
    [CompilerGeneratedAttribute]
private bool x;
    [CompilerGeneratedAttribute]
private UIColor y;
    [CompilerGeneratedAttribute]
private UIColor z;
    [CompilerGeneratedAttribute]
private UIColor aa;
    [CompilerGeneratedAttribute]
private StatusBarContentStyle ab;
    [CompilerGeneratedAttribute]
private StatusBarContentStyle ac;
    [CompilerGeneratedAttribute]
private StatusBarContentStyle ad;
    [CompilerGeneratedAttribute]
private DrawerAnimationKind ae;
    [CompilerGeneratedAttribute]
private float af;
    [CompilerGeneratedAttribute]
private float ag;
    [CompilerGeneratedAttribute]
private bool ah;
    public StatusBarTransitionMode StatusBarTransitionMode { get; public set; }
    public string BackgroundImage { get; public set; }
    public bool BackgroundLandscapeSupported { get; public set; }
    public bool CenterBackgroundBlurEnabled { get; public set; }
    public bool ShadowEnabled { get; public set; }
    public bool AutoDetectChildStatusBarStyle { get; public set; }
    internal bool a { get; internal set; }
    public bool EnableFadingAnimation { get; public set; }
    public float DrawerWidth { get; public set; }
    public float ShadowOpacity { get; public set; }
    public float ShadowOffsetX { get; public set; }
    public float ShadowOffsetY { get; public set; }
    public float ShadowRadius { get; public set; }
    public float NavigationBarCornerRadius { get; public set; }
    public float FlickVelocity { get; public set; }
    public UIColor ShadowColor { get; public set; }
    public UIColor NavigationBarTintColor { get; public set; }
    public UIColor NavigationBarColor { get; public set; }
    public UITextAttributes NavigationBarTitleAttributes { get; public set; }
    public bool EnablePanGesture { get; public set; }
    public bool DisablePanGestureInChildViewController { get; public set; }
    public bool StaysOpen { get; public set; }
    public bool AutoSynchronizeSelection { get; public set; }
    public bool EnableStatusBarTransition { get; public set; }
    public UIColor LeftStatusBarColor { get; public set; }
    public UIColor CenterStatusBarColor { get; public set; }
    public UIColor RightStatusBarColor { get; public set; }
    public StatusBarContentStyle LeftStatusBarContentStyle { get; public set; }
    public StatusBarContentStyle CenterStatusBarContentStyle { get; public set; }
    public StatusBarContentStyle RightStatusBarContentStyle { get; public set; }
    public DrawerAnimationKind DrawerAnimation { get; public set; }
    public float SlideParallaxVelocity { get; public set; }
    public float ScaleVelocity { get; public set; }
    internal bool b { get; internal set; }
    public DrawerSettings(StatusBarTransitionMode transitionMode);
    public StatusBarTransitionMode get_StatusBarTransitionMode();
    public void set_StatusBarTransitionMode(StatusBarTransitionMode value);
    [CompilerGeneratedAttribute]
public string get_BackgroundImage();
    [CompilerGeneratedAttribute]
public void set_BackgroundImage(string value);
    [CompilerGeneratedAttribute]
public bool get_BackgroundLandscapeSupported();
    [CompilerGeneratedAttribute]
public void set_BackgroundLandscapeSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_CenterBackgroundBlurEnabled();
    [CompilerGeneratedAttribute]
public void set_CenterBackgroundBlurEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShadowEnabled();
    [CompilerGeneratedAttribute]
public void set_ShadowEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoDetectChildStatusBarStyle();
    [CompilerGeneratedAttribute]
public void set_AutoDetectChildStatusBarStyle(bool value);
    [CompilerGeneratedAttribute]
internal bool get_a();
    [CompilerGeneratedAttribute]
internal void set_a(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableFadingAnimation();
    [CompilerGeneratedAttribute]
public void set_EnableFadingAnimation(bool value);
    [CompilerGeneratedAttribute]
public float get_DrawerWidth();
    [CompilerGeneratedAttribute]
public void set_DrawerWidth(float value);
    [CompilerGeneratedAttribute]
public float get_ShadowOpacity();
    [CompilerGeneratedAttribute]
public void set_ShadowOpacity(float value);
    [CompilerGeneratedAttribute]
public float get_ShadowOffsetX();
    [CompilerGeneratedAttribute]
public void set_ShadowOffsetX(float value);
    [CompilerGeneratedAttribute]
public float get_ShadowOffsetY();
    [CompilerGeneratedAttribute]
public void set_ShadowOffsetY(float value);
    [CompilerGeneratedAttribute]
public float get_ShadowRadius();
    [CompilerGeneratedAttribute]
public void set_ShadowRadius(float value);
    [CompilerGeneratedAttribute]
public float get_NavigationBarCornerRadius();
    [CompilerGeneratedAttribute]
public void set_NavigationBarCornerRadius(float value);
    [CompilerGeneratedAttribute]
public float get_FlickVelocity();
    [CompilerGeneratedAttribute]
public void set_FlickVelocity(float value);
    [CompilerGeneratedAttribute]
public UIColor get_ShadowColor();
    [CompilerGeneratedAttribute]
public void set_ShadowColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_NavigationBarTintColor();
    [CompilerGeneratedAttribute]
public void set_NavigationBarTintColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_NavigationBarColor();
    [CompilerGeneratedAttribute]
public void set_NavigationBarColor(UIColor value);
    [CompilerGeneratedAttribute]
public UITextAttributes get_NavigationBarTitleAttributes();
    [CompilerGeneratedAttribute]
public void set_NavigationBarTitleAttributes(UITextAttributes value);
    [CompilerGeneratedAttribute]
public bool get_EnablePanGesture();
    [CompilerGeneratedAttribute]
public void set_EnablePanGesture(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisablePanGestureInChildViewController();
    [CompilerGeneratedAttribute]
public void set_DisablePanGestureInChildViewController(bool value);
    [CompilerGeneratedAttribute]
public bool get_StaysOpen();
    [CompilerGeneratedAttribute]
public void set_StaysOpen(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoSynchronizeSelection();
    [CompilerGeneratedAttribute]
public void set_AutoSynchronizeSelection(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableStatusBarTransition();
    [CompilerGeneratedAttribute]
public void set_EnableStatusBarTransition(bool value);
    [CompilerGeneratedAttribute]
public UIColor get_LeftStatusBarColor();
    [CompilerGeneratedAttribute]
public void set_LeftStatusBarColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_CenterStatusBarColor();
    [CompilerGeneratedAttribute]
public void set_CenterStatusBarColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_RightStatusBarColor();
    [CompilerGeneratedAttribute]
public void set_RightStatusBarColor(UIColor value);
    [CompilerGeneratedAttribute]
public StatusBarContentStyle get_LeftStatusBarContentStyle();
    [CompilerGeneratedAttribute]
public void set_LeftStatusBarContentStyle(StatusBarContentStyle value);
    [CompilerGeneratedAttribute]
public StatusBarContentStyle get_CenterStatusBarContentStyle();
    [CompilerGeneratedAttribute]
public void set_CenterStatusBarContentStyle(StatusBarContentStyle value);
    [CompilerGeneratedAttribute]
public StatusBarContentStyle get_RightStatusBarContentStyle();
    [CompilerGeneratedAttribute]
public void set_RightStatusBarContentStyle(StatusBarContentStyle value);
    [CompilerGeneratedAttribute]
public DrawerAnimationKind get_DrawerAnimation();
    [CompilerGeneratedAttribute]
public void set_DrawerAnimation(DrawerAnimationKind value);
    [CompilerGeneratedAttribute]
public float get_SlideParallaxVelocity();
    [CompilerGeneratedAttribute]
public void set_SlideParallaxVelocity(float value);
    [CompilerGeneratedAttribute]
public float get_ScaleVelocity();
    [CompilerGeneratedAttribute]
public void set_ScaleVelocity(float value);
    [CompilerGeneratedAttribute]
internal bool get_b();
    [CompilerGeneratedAttribute]
internal void set_b(bool value);
}
public class Intersoft.Crosslight.iOS.DynamicHeightTableSource : ObservableTableSource {
    private nfloat a;
    private Dictionary`2<string, nfloat> b;
    private NSObject c;
    [CompilerGeneratedAttribute]
private bool d;
    [CompilerGeneratedAttribute]
private bool e;
    [CompilerGeneratedAttribute]
private UITableViewCell f;
    public bool CacheRowHeight { get; public set; }
    public bool BufferRowHeightCalculation { get; public set; }
    public nfloat RowHeight { get; public set; }
    public UITableViewCell OffscreenCell { get; private set; }
    public DynamicHeightTableSource(UIViewController viewController, ItemBindingDescription bindingDescription, IViewModel viewModel);
    public DynamicHeightTableSource(UIViewController viewController, ItemBindingDescription bindingDescription, IViewModel viewModel, UITableView specificTableView);
    [CompilerGeneratedAttribute]
public bool get_CacheRowHeight();
    [CompilerGeneratedAttribute]
public void set_CacheRowHeight(bool value);
    [CompilerGeneratedAttribute]
public bool get_BufferRowHeightCalculation();
    [CompilerGeneratedAttribute]
public void set_BufferRowHeightCalculation(bool value);
    public virtual nfloat get_RowHeight();
    public virtual void set_RowHeight(nfloat value);
    [CompilerGeneratedAttribute]
public UITableViewCell get_OffscreenCell();
    [CompilerGeneratedAttribute]
private void set_OffscreenCell(UITableViewCell value);
    protected virtual void ReloadTableView(UITableView tableView, IEnumerable items);
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    protected virtual UITableViewCell GetOffscreenCell(UITableView tableView);
    protected virtual void ConfigureOffscreenCell(UITableView tableView, NSIndexPath indexPath);
    protected virtual nfloat GetOffscreenCellHeight(UITableView tableView, NSIndexPath indexPath);
    public virtual nfloat EstimatedHeight(UITableView tableView, NSIndexPath indexPath);
    public virtual nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath);
    public virtual void InvalidateRowCache(bool updateOffscreenCell);
    public virtual void UpdateVisibleCells(UITableView tableView);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void Initialize();
    private void MoveConstraintsToContentView(UITableViewCell cell);
    private void OnDeviceOrientationChanging(NSNotification notification);
    [CompilerGeneratedAttribute]
private void <OnDeviceOrientationChanging>b__0();
}
internal class Intersoft.Crosslight.iOS.e : UIGestureRecognizerDelegate {
    public virtual bool ShouldBegin(UIGestureRecognizer recognizer);
    public virtual bool ShouldReceiveTouch(UIGestureRecognizer recognizer, UITouch touch);
    public virtual bool ShouldRecognizeSimultaneously(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);
    private bool IsInChildViewController(UIViewController controller);
}
public enum Intersoft.Crosslight.iOS.EdgePresentationPosition : Enum {
    public int value__;
    public static EdgePresentationPosition Left;
    public static EdgePresentationPosition Top;
    public static EdgePresentationPosition Right;
    public static EdgePresentationPosition Bottom;
}
[FlagsAttribute]
public enum Intersoft.Crosslight.iOS.EditingOptions : Enum {
    public int value__;
    public static EditingOptions Default;
    public static EditingOptions AllowEditing;
    public static EditingOptions AllowReorder;
    public static EditingOptions AllowMultipleSelection;
}
public enum Intersoft.Crosslight.iOS.EditorControlType : Enum {
    public int value__;
    public static EditorControlType ContentControl;
    public static EditorControlType AccessoryControl;
    public static EditorControlType PickerControl;
}
internal interface Intersoft.Crosslight.iOS.f {
    public h TableViewModel { get; public set; }
    public TableViewCellStyle CellStyle { get; }
    public TableViewInteraction InteractionMode { get; }
    public ChoiceInputMode ChoiceInputMode { get; }
    public TableViewAppearance Appearance { get; }
    public IViewModel ViewModel { get; }
    public UITableView TableView { get; }
    public abstract virtual h get_TableViewModel();
    public abstract virtual void set_TableViewModel(h value);
    public abstract virtual TableViewCellStyle get_CellStyle();
    public abstract virtual TableViewInteraction get_InteractionMode();
    public abstract virtual ChoiceInputMode get_ChoiceInputMode();
    public abstract virtual TableViewAppearance get_Appearance();
    public abstract virtual IViewModel get_ViewModel();
    public abstract virtual UITableView get_TableView();
    public abstract virtual void AddDirectBinding(string targetViewName, BindableProperty property, object value);
    public abstract virtual void AddBinding(string targetViewName, BindableProperty property, BindingDescription binding);
}
public class Intersoft.Crosslight.iOS.FadeTransition : ViewTransitionBase {
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.FadeTransition/b")]
[DebuggerStepThroughAttribute]
public virtual Task AnimateTransitionAsync(TransitionContext context);
}
public class Intersoft.Crosslight.iOS.FormListViewModel`1 : EditableListViewModelBase`1<T> {
}
public class Intersoft.Crosslight.iOS.FormTableSource : UITableViewSource {
    private static int a;
    private IDetailViewModel b;
    private UITableViewController c;
    private FormDefinition d;
    private IEnumerable`1<SectionDefinition> e;
    private PropertyDefinition f;
    [CompilerGeneratedAttribute]
private Action g;
    [CompilerGeneratedAttribute]
private static Func`2<SectionDefinition, bool> h;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyDefinition, bool> i;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyDefinition, bool> j;
    [CompilerGeneratedAttribute]
private static Func`2<UIView, bool> k;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyDefinition, bool> l;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyDefinition, bool> m;
    public Action ScrolledAction { get; public set; }
    private bool a { get; }
    public FormTableSource(UITableViewController controller, FormDefinition form, IDetailViewModel viewModel);
    public FormTableSource(UITableViewController controller, FormDefinition form, PropertyDefinition compositeProperty, IDetailViewModel viewModel);
    [CompilerGeneratedAttribute]
public Action get_ScrolledAction();
    [CompilerGeneratedAttribute]
public void set_ScrolledAction(Action value);
    private bool get_a();
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual nint RowsInSection(UITableView tableview, nint section);
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    public virtual string TitleForHeader(UITableView tableView, nint sectionIndex);
    public virtual string TitleForFooter(UITableView tableView, nint sectionIndex);
    public virtual void WillDisplay(UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath);
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual void DraggingStarted(UIScrollView scrollView);
    internal IComponentView GetViewAt(NSIndexPath indexPath);
    private string GetString(string value, string resourceKey);
    private string GetResourceString(string key);
    private UITableViewCell GetPickerTableCell(IPicker picker);
    private bool HasActivePicker();
    private PropertyDefinition GetPropertyWithActivePicker();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(SectionDefinition o);
    [CompilerGeneratedAttribute]
private static bool <RowsInSection>b__2(PropertyDefinition o);
    [CompilerGeneratedAttribute]
private static bool <RowsInSection>b__3(PropertyDefinition o);
    [CompilerGeneratedAttribute]
private static bool <Scrolled>b__6(UIView o);
    [CompilerGeneratedAttribute]
private static bool <GetViewAt>b__8(PropertyDefinition o);
    [CompilerGeneratedAttribute]
private static bool <GetViewAt>b__9(PropertyDefinition o);
}
internal class Intersoft.Crosslight.iOS.g`1 : UITableViewController`1<a> {
    private bool a;
    [CompilerGeneratedAttribute]
private h b;
    public h TableViewModel { get; public set; }
    public TableViewInteraction InteractionMode { get; }
    public TableViewCellStyle CellStyle { get; }
    public ChoiceInputMode ChoiceInputMode { get; }
    public TableViewAppearance Appearance { get; internal set; }
    private IViewModel Intersoft.Crosslight.iOS.IFormListViewController.ViewModel { get; }
    public g`1(a viewModel);
    [CompilerGeneratedAttribute]
public sealed virtual h get_TableViewModel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TableViewModel(h value);
    public virtual TableViewInteraction get_InteractionMode();
    public virtual TableViewCellStyle get_CellStyle();
    public virtual ChoiceInputMode get_ChoiceInputMode();
    public virtual TableViewAppearance get_Appearance();
    internal virtual void set_Appearance(TableViewAppearance value);
    private sealed virtual override IViewModel Intersoft.Crosslight.iOS.IFormListViewController.get_ViewModel();
    protected virtual void OnViewCreated();
    private void HandleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <HandleCollectionChanged>b__0();
}
internal class Intersoft.Crosslight.iOS.h : object {
    [CompilerGeneratedAttribute]
private TableViewInteraction a;
    [CompilerGeneratedAttribute]
private TableViewAppearance b;
    [CompilerGeneratedAttribute]
private TableViewCellStyle c;
    [CompilerGeneratedAttribute]
private ChoiceInputMode d;
    internal TableViewInteraction a { get; internal set; }
    internal TableViewAppearance Appearance { get; internal set; }
    internal TableViewCellStyle b { get; internal set; }
    internal ChoiceInputMode c { get; internal set; }
    [CompilerGeneratedAttribute]
internal TableViewInteraction get_a();
    [CompilerGeneratedAttribute]
internal void set_a(TableViewInteraction value);
    [CompilerGeneratedAttribute]
internal TableViewAppearance get_Appearance();
    [CompilerGeneratedAttribute]
internal void set_Appearance(TableViewAppearance value);
    [CompilerGeneratedAttribute]
internal TableViewCellStyle get_b();
    [CompilerGeneratedAttribute]
internal void set_b(TableViewCellStyle value);
    [CompilerGeneratedAttribute]
internal ChoiceInputMode get_c();
    [CompilerGeneratedAttribute]
internal void set_c(ChoiceInputMode value);
}
internal class Intersoft.Crosslight.iOS.i : UIPanGestureRecognizer {
    [CompilerGeneratedAttribute]
private UICarouselView a;
    internal UICarouselView a { get; internal set; }
    internal i(UICarouselView view);
    [CompilerGeneratedAttribute]
internal UICarouselView get_a();
    [CompilerGeneratedAttribute]
internal void set_a(UICarouselView value);
    public virtual void TouchesBegan(NSSet touches, UIEvent evt);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
}
public interface Intersoft.Crosslight.iOS.IChildController {
    public bool IsCreating { get; public set; }
    public abstract virtual bool get_IsCreating();
    public abstract virtual void set_IsCreating(bool value);
}
public interface Intersoft.Crosslight.iOS.ICollectionViewController {
    public string CellIdentifier { get; }
    public bool ShowSectionHeader { get; }
    public bool Editing { get; public set; }
    public bool EnterEditModeOnLongPress { get; }
    public EditingOptions EditingOptions { get; }
    public CollectionViewInteraction InteractionMode { get; }
    public UIViewTemplate CellTemplate { get; }
    public UIViewTemplate SectionHeaderTemplate { get; }
    public UIViewTemplate SectionFooterTemplate { get; }
    public ImageSettings CellImageSettings { get; }
    public BasicImageLoaderSettings ImageLoaderSettings { get; }
    public abstract virtual string get_CellIdentifier();
    public abstract virtual bool get_ShowSectionHeader();
    public abstract virtual bool get_Editing();
    public abstract virtual void set_Editing(bool value);
    public abstract virtual bool get_EnterEditModeOnLongPress();
    public abstract virtual EditingOptions get_EditingOptions();
    public abstract virtual CollectionViewInteraction get_InteractionMode();
    public abstract virtual UIViewTemplate get_CellTemplate();
    public abstract virtual UIViewTemplate get_SectionHeaderTemplate();
    public abstract virtual UIViewTemplate get_SectionFooterTemplate();
    public abstract virtual ImageSettings get_CellImageSettings();
    public abstract virtual BasicImageLoaderSettings get_ImageLoaderSettings();
}
public interface Intersoft.Crosslight.iOS.ICompositePart {
    public abstract virtual UIView GetView();
    public abstract virtual void LayoutView(CGRect frame);
}
public interface Intersoft.Crosslight.iOS.IContainerViewController {
}
public interface Intersoft.Crosslight.iOS.IContentPresenter {
    public Type PresentationControllerType { get; }
    public Type AnimationControllerType { get; }
    public IContentPresenterSettings Settings { get; }
    public abstract virtual Type get_PresentationControllerType();
    public abstract virtual Type get_AnimationControllerType();
    public abstract virtual IContentPresenterSettings get_Settings();
    public abstract virtual void Initialize(NavigationParameter parameter);
}
public interface Intersoft.Crosslight.iOS.IContentPresenterSettings {
    public CGSize PreferredContentSize { get; public set; }
    public CGSize PreferredContentSizeLandscape { get; public set; }
    public UIColor OverlayBackground { get; public set; }
    public UIColor ContentBackground { get; public set; }
    public CGRect ContentMargin { get; public set; }
    public CGRect ContentMarginLandscape { get; public set; }
    public bool ShowOverlay { get; public set; }
    public bool DismissOnTap { get; public set; }
    public bool OverlayBlurEnabled { get; public set; }
    public bool ContentBlurEnabled { get; public set; }
    public double TransitionDuration { get; public set; }
    public int ContentCornerRadius { get; public set; }
    public float ContentShadowRadius { get; public set; }
    public float ContentShadowOpacity { get; public set; }
    public UIBlurEffectStyle OverlayBlurStyle { get; public set; }
    public UIBlurEffectStyle ContentBlurStyle { get; public set; }
    public IViewTransition EntryTransition { get; public set; }
    public IViewTransition ExitTransition { get; public set; }
    public ContentPresentationStyle PresentationStyle { get; public set; }
    public EdgePresentationPosition EdgePresentationPosition { get; public set; }
    public abstract virtual CGSize get_PreferredContentSize();
    public abstract virtual void set_PreferredContentSize(CGSize value);
    public abstract virtual CGSize get_PreferredContentSizeLandscape();
    public abstract virtual void set_PreferredContentSizeLandscape(CGSize value);
    public abstract virtual UIColor get_OverlayBackground();
    public abstract virtual void set_OverlayBackground(UIColor value);
    public abstract virtual UIColor get_ContentBackground();
    public abstract virtual void set_ContentBackground(UIColor value);
    public abstract virtual CGRect get_ContentMargin();
    public abstract virtual void set_ContentMargin(CGRect value);
    public abstract virtual CGRect get_ContentMarginLandscape();
    public abstract virtual void set_ContentMarginLandscape(CGRect value);
    public abstract virtual bool get_ShowOverlay();
    public abstract virtual void set_ShowOverlay(bool value);
    public abstract virtual bool get_DismissOnTap();
    public abstract virtual void set_DismissOnTap(bool value);
    public abstract virtual bool get_OverlayBlurEnabled();
    public abstract virtual void set_OverlayBlurEnabled(bool value);
    public abstract virtual bool get_ContentBlurEnabled();
    public abstract virtual void set_ContentBlurEnabled(bool value);
    public abstract virtual double get_TransitionDuration();
    public abstract virtual void set_TransitionDuration(double value);
    public abstract virtual int get_ContentCornerRadius();
    public abstract virtual void set_ContentCornerRadius(int value);
    public abstract virtual float get_ContentShadowRadius();
    public abstract virtual void set_ContentShadowRadius(float value);
    public abstract virtual float get_ContentShadowOpacity();
    public abstract virtual void set_ContentShadowOpacity(float value);
    public abstract virtual UIBlurEffectStyle get_OverlayBlurStyle();
    public abstract virtual void set_OverlayBlurStyle(UIBlurEffectStyle value);
    public abstract virtual UIBlurEffectStyle get_ContentBlurStyle();
    public abstract virtual void set_ContentBlurStyle(UIBlurEffectStyle value);
    public abstract virtual IViewTransition get_EntryTransition();
    public abstract virtual void set_EntryTransition(IViewTransition value);
    public abstract virtual IViewTransition get_ExitTransition();
    public abstract virtual void set_ExitTransition(IViewTransition value);
    public abstract virtual ContentPresentationStyle get_PresentationStyle();
    public abstract virtual void set_PresentationStyle(ContentPresentationStyle value);
    public abstract virtual EdgePresentationPosition get_EdgePresentationPosition();
    public abstract virtual void set_EdgePresentationPosition(EdgePresentationPosition value);
    public abstract virtual void SetAppearance(object appearance);
    public abstract virtual object GetAppearance(Type viewControllerType);
}
public interface Intersoft.Crosslight.iOS.IDrawerNavigationController {
    public DrawerSettings DrawerSettings { get; }
    public UIViewController VisibleViewController { get; }
    public UIViewController LeftViewController { get; }
    public UIViewController RightViewController { get; }
    public UINavigationController CenterViewController { get; }
    public abstract virtual DrawerSettings get_DrawerSettings();
    public abstract virtual UIViewController get_VisibleViewController();
    public abstract virtual UIViewController get_LeftViewController();
    public abstract virtual UIViewController get_RightViewController();
    public abstract virtual UINavigationController get_CenterViewController();
    public abstract virtual void SetLeftViewController(UIViewController viewController, bool animated);
    public abstract virtual void SetRightViewController(UIViewController viewController, bool animated);
    public abstract virtual void SetContentViewController(object source, UIViewController viewController, bool animated);
    public abstract virtual void SetContentViewController(UIViewController viewController, bool animated);
    public abstract virtual bool ShouldBeginPanGesture(UIGestureRecognizer panGestureRecognizer, UIGestureRecognizer otherRecognizer);
    public abstract virtual void Open(DrawerSide side, bool animated);
    public abstract virtual void Close(bool animated);
}
public interface Intersoft.Crosslight.iOS.IFormViewController {
    public PropertyDefinition ActiveProperty { get; public set; }
    public IPicker ActivePicker { get; public set; }
    public UITableView TableView { get; }
    public object CurrentItem { get; }
    public bool HideKeyboardOnScroll { get; }
    public abstract virtual PropertyDefinition get_ActiveProperty();
    public abstract virtual void set_ActiveProperty(PropertyDefinition value);
    public abstract virtual IPicker get_ActivePicker();
    public abstract virtual void set_ActivePicker(IPicker value);
    public abstract virtual UITableView get_TableView();
    public abstract virtual object get_CurrentItem();
    public abstract virtual bool get_HideKeyboardOnScroll();
    public abstract virtual void AddComponentDelegate(IComponentViewDelegate componentDelegate);
    public abstract virtual void AutoShowDoneButton(bool isVisible);
    public abstract virtual T FindComponentDelegate();
}
public interface Intersoft.Crosslight.iOS.IKeyboardResponder {
    public UIResponder Responder { get; }
    public bool IsActiveResponder { get; public set; }
    public Action`1<float> HeightChanged { get; public set; }
    public abstract virtual UIResponder get_Responder();
    public abstract virtual bool get_IsActiveResponder();
    public abstract virtual void set_IsActiveResponder(bool value);
    public abstract virtual float GetPreferredHeight(UIInterfaceOrientation orientation);
    public abstract virtual void InvalidateLayout();
    public abstract virtual Action`1<float> get_HeightChanged();
    public abstract virtual void set_HeightChanged(Action`1<float> value);
}
public class Intersoft.Crosslight.iOS.ImagePickerDelegate : object {
    public virtual void Activate(IComponentView component, PropertyDefinition property);
    private void ExecutePickerResultCommand(ImageCellPart imageCell, ImagePickerAttribute imagePickerAttribute, string commandId, MediaPickerResult pickerResult);
}
public class Intersoft.Crosslight.iOS.ImageSettings : object {
    [CompilerGeneratedAttribute]
private CGSize a;
    [CompilerGeneratedAttribute]
private float b;
    public CGSize ImageSize { get; public set; }
    public float CornerRadius { get; public set; }
    [CompilerGeneratedAttribute]
public CGSize get_ImageSize();
    [CompilerGeneratedAttribute]
public void set_ImageSize(CGSize value);
    [CompilerGeneratedAttribute]
public float get_CornerRadius();
    [CompilerGeneratedAttribute]
public void set_CornerRadius(float value);
}
public class Intersoft.Crosslight.iOS.ImageViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.ImageViewCell : FormViewCell {
    private UIImageView a;
    protected bool PreferIntrinsicContentSize { get; }
    public ImageViewCell(UITableViewController controller, PropertyDefinition property);
    protected virtual UIView CreateEditor();
    protected virtual float GetEditorHeight();
    protected virtual bool get_PreferIntrinsicContentSize();
}
public interface Intersoft.Crosslight.iOS.IMasterDetailViewController {
    public Type MasterViewControllerType { get; }
    public Type DetailViewControllerType { get; }
    public UIViewController MasterViewController { get; }
    public UIViewController DetailViewController { get; }
    public string MasterButtonDisplayMemberPath { get; }
    public bool CloseDetailOnBackNavigation { get; }
    public abstract virtual Type get_MasterViewControllerType();
    public abstract virtual Type get_DetailViewControllerType();
    public abstract virtual UIViewController get_MasterViewController();
    public abstract virtual UIViewController get_DetailViewController();
    public abstract virtual string get_MasterButtonDisplayMemberPath();
    public abstract virtual bool get_CloseDetailOnBackNavigation();
    public abstract virtual bool IsDetailViewControllerOfType(Type detailViewControllerType);
    public abstract virtual bool IsMasterViewControllerOfType(Type masterViewControllerType);
    public abstract virtual void SetDetailViewController(UIViewController targetViewController, bool animated);
    public abstract virtual void SynchronizeSelection(bool animated);
}
public interface Intersoft.Crosslight.iOS.IMasterDetailViewNotification {
    public abstract virtual void WillHideMasterViewController(UIBarButtonItem barButtonItem, UIPopoverController popoverController);
    public abstract virtual void WillShowMasterViewController(UIBarButtonItem barButtonItem);
}
public interface Intersoft.Crosslight.iOS.INavigableController {
    public bool IsPresentedModally { get; }
    public abstract virtual bool get_IsPresentedModally();
}
public static class Intersoft.Crosslight.iOS.IndexPathHelper : object {
    public static NSIndexPath FromIndexPath(IndexPath indexPath);
    public static IndexPath FromNSIndexPath(NSIndexPath indexPath);
}
public class Intersoft.Crosslight.iOS.iOSLinker : object {
}
public abstract class Intersoft.Crosslight.iOS.IOSMobileComponentServiceBase : MobileComponentServiceBase {
    public virtual bool IsSupported();
    protected virtual UIViewController DispatchViewController(object owner);
    protected virtual T DispatchViewInitiator(object owner);
}
public interface Intersoft.Crosslight.iOS.IPicker {
    public PropertyDefinition OwnerProperty { get; }
    public IComponentView CellView { get; }
    public bool IsShown { get; }
    public bool IsAnimationCompleted { get; }
    public abstract virtual PropertyDefinition get_OwnerProperty();
    public abstract virtual IComponentView get_CellView();
    public abstract virtual bool get_IsShown();
    public abstract virtual bool get_IsAnimationCompleted();
    public abstract virtual void Initialize();
    public abstract virtual void Show(UIView view);
    public abstract virtual void Hide(bool animated, PickerHideInitiator initiator);
    public abstract virtual void InvalidateFrame(bool animated);
    public abstract virtual void add_Shown(EventHandler value);
    public abstract virtual void remove_Shown(EventHandler value);
    public abstract virtual void add_Hidden(EventHandler value);
    public abstract virtual void remove_Hidden(EventHandler value);
}
public interface Intersoft.Crosslight.iOS.IPopoverNotification {
    public abstract virtual void PopoverDismissed();
}
public interface Intersoft.Crosslight.iOS.IPresentationController {
    public IContentPresenterSettings Settings { get; }
    public abstract virtual IContentPresenterSettings get_Settings();
}
public interface Intersoft.Crosslight.iOS.IPushNotificationDelegate {
    public abstract virtual void OnDeviceTokenRegistrationSuccess(UIApplication application, NSData deviceToken);
    public abstract virtual void OnDeviceTokenRegistrationError(UIApplication application, NSError error);
    public abstract virtual void OnNotificationReceived(UIApplication application, NSDictionary userInfo);
}
public interface Intersoft.Crosslight.iOS.ISelectionDetailViewController {
    public UILabel PromptTextLabel { get; }
    public UILabel StatusTextLabel { get; }
    public abstract virtual UILabel get_PromptTextLabel();
    public abstract virtual UILabel get_StatusTextLabel();
}
public interface Intersoft.Crosslight.iOS.IStaticView {
    public abstract virtual void AdjustFrame(CGPoint contentOffset);
    public abstract virtual void SetInitialPosition(CGPoint position);
}
public interface Intersoft.Crosslight.iOS.ISupportDynamicHeight {
    public abstract virtual void WillDisplay(ITableViewController viewController, object item);
    public abstract virtual float GetHeight(ITableViewController viewController, object item);
}
public interface Intersoft.Crosslight.iOS.ISupportVisualEffect {
    public bool EnableBlurEffect { get; }
    public UIBlurEffectStyle BlurEffectStyle { get; }
    public abstract virtual bool get_EnableBlurEffect();
    public abstract virtual UIBlurEffectStyle get_BlurEffectStyle();
}
public interface Intersoft.Crosslight.iOS.ITabBarController {
    public abstract virtual void OnViewControllerSelected(UIViewController viewController);
}
public interface Intersoft.Crosslight.iOS.ITableViewController {
    public bool ShowSectionIndex { get; }
    public bool ShowGroupHeader { get; }
    public bool DeselectRowOnNavigate { get; }
    public bool EnableAsyncSearching { get; }
    public string CellIdentifier { get; }
    public TableViewAppearance Appearance { get; }
    public UIViewTemplate CellTemplate { get; }
    public UIViewTemplateSelector CellTemplateSelector { get; public set; }
    public UIViewTemplate SectionHeaderTemplate { get; }
    public UIViewTemplate SectionFooterTemplate { get; }
    public TableViewCellStyle CellStyle { get; }
    public TableViewInteraction InteractionMode { get; }
    public ChoiceInputMode ChoiceInputMode { get; }
    public EditingOptions EditingOptions { get; }
    public ImageSettings CellImageSettings { get; }
    public BasicImageLoaderSettings ImageLoaderSettings { get; }
    public UITableView TableView { get; }
    public UITableViewSource TableSource { get; public set; }
    public UITableViewSource FilteredTableSource { get; public set; }
    public UIView LoadingIndicatorView { get; public set; }
    public UIViewController ParentViewController { get; }
    public List`1<UIEditAction> EditActions { get; }
    public bool IsShowingEditActions { get; public set; }
    public TableSourceMode TableSourceMode { get; public set; }
    public UITableViewStyle TableViewStyle { get; }
    public abstract virtual bool get_ShowSectionIndex();
    public abstract virtual bool get_ShowGroupHeader();
    public abstract virtual bool get_DeselectRowOnNavigate();
    public abstract virtual bool get_EnableAsyncSearching();
    public abstract virtual string get_CellIdentifier();
    public abstract virtual TableViewAppearance get_Appearance();
    public abstract virtual UIViewTemplate get_CellTemplate();
    public abstract virtual UIViewTemplateSelector get_CellTemplateSelector();
    public abstract virtual void set_CellTemplateSelector(UIViewTemplateSelector value);
    public abstract virtual UIViewTemplate get_SectionHeaderTemplate();
    public abstract virtual UIViewTemplate get_SectionFooterTemplate();
    public abstract virtual TableViewCellStyle get_CellStyle();
    public abstract virtual TableViewInteraction get_InteractionMode();
    public abstract virtual ChoiceInputMode get_ChoiceInputMode();
    public abstract virtual EditingOptions get_EditingOptions();
    public abstract virtual ImageSettings get_CellImageSettings();
    public abstract virtual BasicImageLoaderSettings get_ImageLoaderSettings();
    public abstract virtual UITableView get_TableView();
    public abstract virtual UITableViewSource get_TableSource();
    public abstract virtual void set_TableSource(UITableViewSource value);
    public abstract virtual UITableViewSource get_FilteredTableSource();
    public abstract virtual void set_FilteredTableSource(UITableViewSource value);
    public abstract virtual UIView get_LoadingIndicatorView();
    public abstract virtual void set_LoadingIndicatorView(UIView value);
    public abstract virtual UIViewController get_ParentViewController();
    public abstract virtual List`1<UIEditAction> get_EditActions();
    public abstract virtual bool get_IsShowingEditActions();
    public abstract virtual void set_IsShowingEditActions(bool value);
    public abstract virtual TableSourceMode get_TableSourceMode();
    public abstract virtual void set_TableSourceMode(TableSourceMode value);
    public abstract virtual UITableViewStyle get_TableViewStyle();
}
public class Intersoft.Crosslight.iOS.ItemPicker : PickerBase`1<UIPickerView> {
    private UIPickerView a;
    private FormViewCell b;
    private ItemBindingDescription c;
    public UIPickerView Picker { get; }
    public ItemPicker(FormViewCell formCell, ItemBindingDescription bindingDescription, bool isModal);
    public virtual UIPickerView get_Picker();
    protected virtual void Initialize();
    protected virtual float GetDefaultPickerHeight(bool isPortrait);
    internal void InitializeSource();
}
public static class Intersoft.Crosslight.iOS.IViewContextExtensions : object {
}
public interface Intersoft.Crosslight.iOS.IViewTransition {
    public Action`1<UIViewController> TransitionCompleted { get; public set; }
    public abstract virtual Task AnimateTransitionAsync(TransitionContext context);
    public abstract virtual Action`1<UIViewController> get_TransitionCompleted();
    public abstract virtual void set_TransitionCompleted(Action`1<UIViewController> value);
    public abstract virtual double GetTransitionDuration(TransitionContext context);
}
internal class Intersoft.Crosslight.iOS.j : UIGestureRecognizerDelegate {
    public virtual bool ShouldReceiveTouch(UIGestureRecognizer recognizer, UITouch touch);
    public virtual bool ShouldBegin(UIGestureRecognizer recognizer);
    public virtual bool ShouldRecognizeSimultaneously(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);
}
internal class Intersoft.Crosslight.iOS.k : UIView {
    private UIVisualEffectView a;
    public CGRect Frame { get; public set; }
    internal k(UIVisualEffect visualEffect);
    public virtual CGRect get_Frame();
    public virtual void set_Frame(CGRect value);
    public virtual void AddSubview(UIView view);
}
internal class Intersoft.Crosslight.iOS.l : UIViewControllerTransitioningDelegate {
    [CompilerGeneratedAttribute]
private Action`1<IContentPresenterSettings> a;
    internal Action`1<IContentPresenterSettings> a { get; internal set; }
    [CompilerGeneratedAttribute]
internal Action`1<IContentPresenterSettings> get_a();
    [CompilerGeneratedAttribute]
internal void set_a(Action`1<IContentPresenterSettings> value);
}
public class Intersoft.Crosslight.iOS.ListViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.ListViewCell : FormViewCell {
    private UITableView a;
    [CompilerGeneratedAttribute]
private ListViewAttribute b;
    [CompilerGeneratedAttribute]
private SelectedItemBindingAttribute c;
    [CompilerGeneratedAttribute]
private NavigateActionAttribute d;
    [CompilerGeneratedAttribute]
private SelectedItemsBindingAttribute e;
    protected UITableView ListTableView { get; }
    protected ListViewAttribute ListViewAttribute { get; protected set; }
    protected SelectedItemBindingAttribute SelectedItemBindingAttribute { get; protected set; }
    protected NavigateActionAttribute NavigateActionAttribute { get; protected set; }
    protected SelectedItemsBindingAttribute SelectedItemsBindingAttribute { get; protected set; }
    public ListViewCell(UITableViewController controller, PropertyDefinition property);
    protected UITableView get_ListTableView();
    [CompilerGeneratedAttribute]
protected ListViewAttribute get_ListViewAttribute();
    [CompilerGeneratedAttribute]
protected void set_ListViewAttribute(ListViewAttribute value);
    [CompilerGeneratedAttribute]
protected SelectedItemBindingAttribute get_SelectedItemBindingAttribute();
    [CompilerGeneratedAttribute]
protected void set_SelectedItemBindingAttribute(SelectedItemBindingAttribute value);
    [CompilerGeneratedAttribute]
protected NavigateActionAttribute get_NavigateActionAttribute();
    [CompilerGeneratedAttribute]
protected void set_NavigateActionAttribute(NavigateActionAttribute value);
    [CompilerGeneratedAttribute]
protected SelectedItemsBindingAttribute get_SelectedItemsBindingAttribute();
    [CompilerGeneratedAttribute]
protected void set_SelectedItemsBindingAttribute(SelectedItemsBindingAttribute value);
    protected virtual UIView CreateEditor();
    protected virtual void ConfigureView();
    public virtual float GetHeight();
    protected virtual void Dispose(bool disposing);
}
internal class Intersoft.Crosslight.iOS.m : UIViewControllerTransitioningDelegate {
    private IContentPresenter a;
    [CompilerGeneratedAttribute]
private Action`1<IContentPresenterSettings> b;
    public IContentPresenter a { get; }
    internal Action`1<IContentPresenterSettings> b { get; internal set; }
    public m(Type contentPresenterType);
    public IContentPresenter get_a();
    [CompilerGeneratedAttribute]
internal Action`1<IContentPresenterSettings> get_b();
    [CompilerGeneratedAttribute]
internal void set_b(Action`1<IContentPresenterSettings> value);
    public virtual UIPresentationController GetPresentationControllerForPresentedViewController(UIViewController presentedViewController, UIViewController presentingViewController, UIViewController sourceViewController);
    public virtual IUIViewControllerAnimatedTransitioning GetAnimationControllerForDismissedController(UIViewController dismissed);
    public virtual IUIViewControllerAnimatedTransitioning GetAnimationControllerForPresentedController(UIViewController presented, UIViewController presenting, UIViewController source);
}
public class Intersoft.Crosslight.iOS.MasterDetailViewAppearance : object {
    [CompilerGeneratedAttribute]
private float a;
    [CompilerGeneratedAttribute]
private UIColor b;
    public float MasterPanelWidth { get; public set; }
    public UIColor SeparatorColor { get; public set; }
    [CompilerGeneratedAttribute]
public float get_MasterPanelWidth();
    [CompilerGeneratedAttribute]
public void set_MasterPanelWidth(float value);
    [CompilerGeneratedAttribute]
public UIColor get_SeparatorColor();
    [CompilerGeneratedAttribute]
public void set_SeparatorColor(UIColor value);
}
public class Intersoft.Crosslight.iOS.MessagePresenter : object {
    public static string DefaultButtonTitle;
    private static MessagePresenter();
    public sealed virtual void SetOwner(object owner);
    public sealed virtual void Show(string message, string title);
    public sealed virtual void Show(string message);
    public sealed virtual void Show(string message, string title, String[] buttons, Action`1<int> actionCallback);
    private void ShowCore(string message, string title, String[] buttons, Action`1<int> actionCallback);
}
public class Intersoft.Crosslight.iOS.MessagingService : IOSMobileComponentServiceBase {
    public virtual bool IsSupported();
    public sealed virtual void SendMessage(string phoneNumber);
}
public class Intersoft.Crosslight.iOS.MobileServices.BrowserService : IOSMobileComponentServiceBase {
    public virtual bool IsSupported();
    public sealed virtual void Navigate(string url);
}
public class Intersoft.Crosslight.iOS.MobileServices.CameraService : IOSMobileComponentServiceBase {
    public virtual bool IsSupported();
    public sealed virtual void Capture(CameraCaptureMode mode, Action`1<MediaPickerResult> resultCallback);
    public sealed virtual void Capture(CameraCaptureSettings settings, Action`1<MediaPickerResult> resultCallback);
}
public class Intersoft.Crosslight.iOS.MobileServices.ContactPicker : object {
    [CompilerGeneratedAttribute]
private UIViewController a;
    private UIViewController a { get; private set; }
    public ContactPicker(UIViewController delegateController);
    [CompilerGeneratedAttribute]
private UIViewController get_a();
    [CompilerGeneratedAttribute]
private void set_a(UIViewController value);
    public void Show(Action`1<ContactPickerResult> callback);
}
public class Intersoft.Crosslight.iOS.MobileServices.ContactService : IOSMobileComponentServiceBase {
    [CompilerGeneratedAttribute]
private ABAddressBook a;
    private ABAddressBook a { get; private set; }
    [CompilerGeneratedAttribute]
private ABAddressBook get_a();
    [CompilerGeneratedAttribute]
private void set_a(ABAddressBook value);
    protected virtual void OnInitialize();
    public virtual bool IsSupported();
    public sealed virtual IEnumerable`1<Contact> LoadContacts();
    public sealed virtual bool SaveContact(Contact contact);
    public sealed virtual bool DeleteContact(Contact contact);
    public sealed virtual void PickContact(Action`1<ContactPickerResult> callback);
    internal Contact GetContact(ABPerson person);
    private Task`1<bool> RequestPermission();
    private NSString NSStringNotNil(string aString);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.MobileServices.ContactService/a")]
[CompilerGeneratedAttribute]
private Task`1<bool> <IsSupported>b__0();
}
public class Intersoft.Crosslight.iOS.MobileServices.ImagePickerControllerDelegate : UIImagePickerControllerDelegate {
    private Action`1<MediaPickerResult> a;
    private ImagePickerSettings b;
    public ImagePickerControllerDelegate(ImagePickerSettings imageSettings, Action`1<MediaPickerResult> resultCallback);
    public virtual void Canceled(UIImagePickerController picker);
    public virtual void FinishedPickingMedia(UIImagePickerController picker, NSDictionary info);
}
public class Intersoft.Crosslight.iOS.MobileServices.LocalStorageService : IOSMobileComponentServiceBase {
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.MobileServices.LocalStorageService/a")]
public sealed virtual Task`1<Byte[]> ReadFileAsync(string fileName, LocalFolderKind folderKind);
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.MobileServices.LocalStorageService/b")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> ReadTextFileAsync(string fileName, LocalFolderKind folderKind);
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.MobileServices.LocalStorageService/c")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<bool> WriteFileAsync(Byte[] data, string fileName, LocalFolderKind folderKind, FileWriteMode writeMode);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.MobileServices.LocalStorageService/d")]
public sealed virtual Task`1<bool> WriteTextFileAsync(string data, string fileName, LocalFolderKind folderKind, FileWriteMode writeMode);
    public sealed virtual Task`1<bool> DeleteFileAsync(string fileName, LocalFolderKind folderKind);
    public sealed virtual bool IsFileExisted(string fileName, LocalFolderKind folderKind);
    public sealed virtual string GetFolderPath(LocalFolderKind folderKind);
    public sealed virtual string GetFilePath(string fileName, LocalFolderKind folderKind);
    public sealed virtual Task`1<LocalFileInfo> GetFileInfoAsync(string fileName, LocalFolderKind folderKind);
    public sealed virtual Task`1<List`1<LocalFileInfo>> GetFilesAsync(string searchPattern, LocalFolderKind folderKind);
    public sealed virtual Task`1<bool> RenameFileAsync(string sourceName, string targetName, LocalFolderKind folderKind);
    public virtual bool IsSupported();
    private LocalFileInfo GetFileInfo(string file, LocalFolderKind folderKind);
}
public class Intersoft.Crosslight.iOS.MobileServices.LocationService : IOSMobileComponentServiceBase {
    private CLLocationManager a;
    public virtual bool IsSupported();
    public sealed virtual void GetCurrentLocation(double desiredAccuracy, Action`1<LocationResult> resultCallback);
    public sealed virtual bool IsLocationInRange(LocationCoordinate sourcelocation, LocationCoordinate targetLocation, double radius);
    public sealed virtual void GetPlacemark(PlacemarkAddress address, Action`1<PlacemarkResult> resultCallback);
    public sealed virtual void GetPlacemarks(Location location, Action`1<IList`1<PlacemarkResult>> resultCallback);
    private Placemark CreatePlacemark(CLPlacemark placemark);
    private string ConvertString(NSObject obj);
}
public class Intersoft.Crosslight.iOS.MobileServices.MailService : IOSMobileComponentServiceBase {
    public virtual bool IsSupported();
    public sealed virtual void ComposeMail(string to, string subject, string body, Action`1<ComposeMailResult> resultCallback);
    public sealed virtual void ComposeMail(MailMessage message, Action`1<ComposeMailResult> resultCallback);
}
public class Intersoft.Crosslight.iOS.MobileServices.MapService : IOSMobileComponentServiceBase {
    private static double a;
    private static double b;
    public virtual bool IsSupported();
    public sealed virtual void Navigate(Placemark placemark, int zoomScale);
    public sealed virtual void NavigateToCurrentLocation();
    public sealed virtual void ShowDirections(Placemark from, Placemark destination, MapDirectionMode directionMode);
    private NSDictionary CreateAddressDictionary(PlacemarkAddress address);
    private double LongitudeToPixelSpaceX(double longitude);
    private double LatitudeToPixelSpaceY(double latitude);
    private double PixelSpaceXToLongitude(double pixelX);
    private double PixelSpaceYToLatitude(double pixelY);
    private MKCoordinateSpan GetCoordinateSpan(LocationCoordinate centerCoordinate, int zoomLevel);
}
public class Intersoft.Crosslight.iOS.MobileServices.MediaLibraryService : IOSMobileComponentServiceBase {
    private UIPopoverController a;
    public virtual bool IsSupported();
    public sealed virtual void ShowPicker(MediaLibrarySettings settings, Action`1<MediaPickerResult> resultCallback);
}
public class Intersoft.Crosslight.iOS.MobileServices.MediaService : IOSMobileComponentServiceBase {
    private AVAudioPlayer a;
    public virtual bool IsSupported();
    public sealed virtual void PlaySound(string soundFile);
    public sealed virtual void OpenMusicApp();
    public sealed virtual void OpenVideoApp();
    public sealed virtual void OpenYouTube(string videoId);
    [CompilerGeneratedAttribute]
private void <PlaySound>b__0(object sender, AVStatusEventArgs e);
}
public class Intersoft.Crosslight.iOS.MobileServices.NotificationService : IOSMobileComponentServiceBase {
    public static NSString NotificationIdentifierKey;
    private static NotificationService();
    public virtual bool IsSupported();
    public sealed virtual void ScheduleLocalNotification(string message, string title);
    public sealed virtual void ScheduleLocalNotification(LocalNotification notification);
    public sealed virtual void CancelLocalNotification(Guid notificationIdentifier);
    public sealed virtual void CancelAllLocalNotifications();
}
public class Intersoft.Crosslight.iOS.MobileServices.ReachabilityService : IOSMobileComponentServiceBase {
    private static ReachabilityChangesDelegate a;
    private static Reachability b;
    private static ReachabilityService();
    private static void add__reachabilityChangesEvent(ReachabilityChangesDelegate value);
    private static void remove__reachabilityChangesEvent(ReachabilityChangesDelegate value);
    public virtual bool IsSupported();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void GetHostReachability(string host, Action`1<ReachabilityResult> resultCallback);
    public sealed virtual NetworkConnectionStatus GetConnectionStatus();
    public sealed virtual void StartMonitoringReachabilityChanges(ReachabilityChangesDelegate reachabilityChangesDelegate);
    public sealed virtual void StopMonitoringReachabilityChanges(ReachabilityChangesDelegate reachabilityChangesDelegate);
    public sealed virtual void ShowNetworkActivityIndicator();
    public sealed virtual void HideNetworkActivityIndicator();
    [CompilerGeneratedAttribute]
private void <StartMonitoringReachabilityChanges>b__3(object sender, ReachabilityEventArgs e);
}
public class Intersoft.Crosslight.iOS.MobileServices.SocialService : IOSMobileComponentServiceBase {
    private UIPopoverController a;
    public virtual bool IsSupported();
    public sealed virtual void ShowShareOptions(string text, Object[] additionalData, ShareActivityType activityType);
    public sealed virtual void PostToFacebook(string text, Byte[] image, IEnumerable`1<Byte[]> additionalImages);
    public sealed virtual void PostToTwitter(string text, Byte[] image, IEnumerable`1<Byte[]> additionalImages);
    private void PostToSocialMedia(string text, Byte[] image, IEnumerable`1<Byte[]> additionalImages, SLServiceKind serviceKind);
}
public class Intersoft.Crosslight.iOS.MobileServices.TelephonyService : IOSMobileComponentServiceBase {
    public virtual bool IsSupported();
    public sealed virtual void Call(string phoneNumber);
}
public class Intersoft.Crosslight.iOS.MobileServices.XLPlacemark : MKPlacemark {
    [CompilerGeneratedAttribute]
private Placemark a;
    private Placemark a { get; private set; }
    public string AdministrativeArea { get; }
    public string Title { get; }
    public string Subtitle { get; }
    public string Name { get; }
    public string Country { get; }
    public string CountryCode { get; }
    public string PostalCode { get; }
    public string SubAdministrativeArea { get; }
    public string Locality { get; }
    public string SubLocality { get; }
    public string Thoroughfare { get; }
    public string SubThoroughfare { get; }
    public CLRegion Region { get; }
    public XLPlacemark(Placemark placemark, NSDictionary addressDictionary);
    [CompilerGeneratedAttribute]
private Placemark get_a();
    [CompilerGeneratedAttribute]
private void set_a(Placemark value);
    public virtual string get_AdministrativeArea();
    public virtual string get_Title();
    public virtual string get_Subtitle();
    public virtual string get_Name();
    public virtual string get_Country();
    public virtual string get_CountryCode();
    public virtual string get_PostalCode();
    public virtual string get_SubAdministrativeArea();
    public virtual string get_Locality();
    public virtual string get_SubLocality();
    public virtual string get_Thoroughfare();
    public virtual string get_SubThoroughfare();
    public virtual CLRegion get_Region();
}
public class Intersoft.Crosslight.iOS.ModalTransitionController : ViewTransitionController {
    [CompilerGeneratedAttribute]
private IContentPresenter a;
    public IContentPresenter ContentPresenter { get; private set; }
    public IViewTransition Transition { get; }
    protected bool ShouldAddTargetView { get; }
    protected bool ShouldRemoveFromSuperView { get; }
    public ModalTransitionController(IContentPresenter contentPresenter, bool isPresenting);
    [CompilerGeneratedAttribute]
public IContentPresenter get_ContentPresenter();
    [CompilerGeneratedAttribute]
private void set_ContentPresenter(IContentPresenter value);
    public virtual IViewTransition get_Transition();
    protected virtual bool get_ShouldAddTargetView();
    protected virtual bool get_ShouldRemoveFromSuperView();
    protected virtual UIView GetTargetView(IUIViewControllerContextTransitioning transitionContext);
    protected virtual void ConfigureTransition(IUIViewControllerContextTransitioning transition, TransitionContext context);
    public virtual double TransitionDuration(IUIViewControllerContextTransitioning transitionContext);
}
internal class Intersoft.Crosslight.iOS.n : UINavigationControllerDelegate {
    private IViewTransition a;
    public n(IViewTransition transition);
    public virtual IUIViewControllerAnimatedTransitioning GetAnimationControllerForOperation(UINavigationController navigationController, UINavigationControllerOperation operation, UIViewController fromViewController, UIViewController toViewController);
}
public class Intersoft.Crosslight.iOS.NumericStepperViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.NumericStepperViewCell : FormViewCell {
    private UIStepper a;
    public NumericStepperViewCell(UITableViewController controller, PropertyDefinition property);
    protected virtual UIView CreateEditor();
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
public class Intersoft.Crosslight.iOS.ObservableCollectionSource : UICollectionViewSource {
    private IViewModel a;
    private INotifyCollectionChanged b;
    private IEnumerable c;
    private IList`1<IGroupItem> d;
    private UIViewController e;
    private ItemBindingDescription f;
    private bool g;
    private bool h;
    private UIImageLoader i;
    private UICollectionView j;
    private List`1<UIView> k;
    private Dictionary`2<string, List`1<BindingContext>> l;
    [CompilerGeneratedAttribute]
private bool m;
    [CompilerGeneratedAttribute]
private bool n;
    [CompilerGeneratedAttribute]
private bool o;
    [CompilerGeneratedAttribute]
private string p;
    [CompilerGeneratedAttribute]
private BasicImageLoaderSettings q;
    [CompilerGeneratedAttribute]
private ImageSettings r;
    public bool SuspendUIUpdates { get; public set; }
    public IViewModel ViewModel { get; }
    public UIViewController ViewController { get; }
    internal ItemBindingDescription a { get; }
    private ICollectionViewController b { get; }
    private IList`1<IGroupItem> c { get; }
    private bool d { get; }
    public object Item { get; }
    public bool EnableGrouping { get; public set; }
    public bool IsActive { get; public set; }
    public int Count { get; }
    public UICollectionView CollectionView { get; }
    public string CellIdentifier { get; public set; }
    public BasicImageLoaderSettings ImageLoaderSettings { get; public set; }
    public ImageSettings ImageSettings { get; public set; }
    public ObservableCollectionSource(UIViewController viewController, ItemBindingDescription bindingDescription, IViewModel viewModel);
    public ObservableCollectionSource(UIViewController viewController, UICollectionView collectionView, ItemBindingDescription bindingDescription, IViewModel viewModel);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public bool get_SuspendUIUpdates();
    [CompilerGeneratedAttribute]
public void set_SuspendUIUpdates(bool value);
    public virtual IViewModel get_ViewModel();
    public virtual UIViewController get_ViewController();
    internal ItemBindingDescription get_a();
    private ICollectionViewController get_b();
    private IList`1<IGroupItem> get_c();
    private bool get_d();
    public sealed virtual object get_Item(int position);
    [CompilerGeneratedAttribute]
public virtual bool get_EnableGrouping();
    [CompilerGeneratedAttribute]
public virtual void set_EnableGrouping(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public virtual void set_IsActive(bool value);
    public virtual int get_Count();
    public UICollectionView get_CollectionView();
    [CompilerGeneratedAttribute]
public string get_CellIdentifier();
    [CompilerGeneratedAttribute]
public void set_CellIdentifier(string value);
    [CompilerGeneratedAttribute]
public BasicImageLoaderSettings get_ImageLoaderSettings();
    [CompilerGeneratedAttribute]
public void set_ImageLoaderSettings(BasicImageLoaderSettings value);
    [CompilerGeneratedAttribute]
public ImageSettings get_ImageSettings();
    [CompilerGeneratedAttribute]
public void set_ImageSettings(ImageSettings value);
    public virtual nint NumberOfSections(UICollectionView view);
    public virtual nint GetItemsCount(UICollectionView collectionView, nint section);
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    protected virtual void PrepareCellForDisplay(UICollectionViewCell cell, UICollectionView collectionView, NSIndexPath indexPath);
    public virtual UICollectionReusableView GetViewForSupplementaryElement(UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath);
    public virtual void ItemHighlighted(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemUnhighlighted(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    protected virtual void PerformNavigation(UICollectionView collectionView, UICollectionViewCell cell, NavigationTarget customTarget, object item);
    public virtual void ItemDeselected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual bool ShouldHighlightItem(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual bool ShouldSelectItem(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual bool ShouldShowMenu(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual bool CanPerformAction(UICollectionView collectionView, Selector action, NSIndexPath indexPath, NSObject sender);
    public virtual void PerformAction(UICollectionView collectionView, Selector action, NSIndexPath indexPath, NSObject sender);
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual UIImage GetImage(UIImageView imageView, object item);
    public virtual void FormatImageView(UIImageView imageView);
    private void ReloadData();
    private void AttachItemBindingAdapters(object customView, BindingContext bindingContext, object model);
    private void OnViewModelPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void RefreshGroupItems(bool reloadData);
    protected virtual void OnItemsChanged(IEnumerable oldItems, IEnumerable newItems);
    private void OnViewModelDataChanged(object sender, DataChangedEventArgs e);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateIndexPath(object item);
    private void UpdateIndexPath();
    public virtual object GetItemAt(IndexPath indexPath);
    public virtual IndexPath GetItemIndex(object item);
    public virtual void SetItems(IEnumerable items);
}
[DefaultMemberAttribute("Item")]
public class Intersoft.Crosslight.iOS.ObservableTableSource : UITableViewSource {
    private IViewModel a;
    private INotifyCollectionChanged b;
    private IEnumerable c;
    private IList`1<IGroupItem> d;
    private UIViewController e;
    private ItemBindingDescription f;
    private IMasterDetailViewController g;
    private UIImageLoader h;
    private UIImageLoader i;
    private UITableView j;
    private List`1<object> k;
    private List`1<UIView> l;
    private Dictionary`2<string, List`1<BindingContext>> m;
    private Object[] n;
    private Object[] o;
    private object p;
    private bool q;
    private bool r;
    private bool s;
    private Nullable`1<bool> t;
    private Nullable`1<bool> u;
    private nfloat v;
    private nfloat w;
    private bool x;
    private nfloat y;
    [CompilerGeneratedAttribute]
private bool z;
    [CompilerGeneratedAttribute]
private bool aa;
    [CompilerGeneratedAttribute]
private bool ab;
    [CompilerGeneratedAttribute]
private Action ac;
    [CompilerGeneratedAttribute]
private static Func`2<int, NSIndexPath> ad;
    public bool SuspendUIUpdates { get; public set; }
    public IViewModel ViewModel { get; }
    public UIViewController ViewController { get; }
    public ITableViewController TableViewController { get; }
    protected UITableView TableView { get; }
    protected IList`1<IGroupItem> GroupItems { get; }
    protected bool HasGroup { get; }
    protected bool IsInSplitViewController { get; }
    public object Item { get; }
    public bool EnableGrouping { get; public set; }
    public bool IsActive { get; public set; }
    public int Count { get; }
    public Action ScrolledAction { get; public set; }
    public ObservableTableSource(UIViewController viewController, ItemBindingDescription bindingDescription, IViewModel viewModel);
    public ObservableTableSource(UIViewController viewController, ItemBindingDescription bindingDescription, IViewModel viewModel, UITableView specificTableView);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public bool get_SuspendUIUpdates();
    [CompilerGeneratedAttribute]
public void set_SuspendUIUpdates(bool value);
    public virtual IViewModel get_ViewModel();
    public virtual UIViewController get_ViewController();
    public virtual ITableViewController get_TableViewController();
    protected UITableView get_TableView();
    protected IList`1<IGroupItem> get_GroupItems();
    protected bool get_HasGroup();
    protected bool get_IsInSplitViewController();
    public sealed virtual object get_Item(int position);
    [CompilerGeneratedAttribute]
public virtual bool get_EnableGrouping();
    [CompilerGeneratedAttribute]
public virtual void set_EnableGrouping(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public virtual void set_IsActive(bool value);
    public virtual int get_Count();
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual nint RowsInSection(UITableView tableview, nint section);
    public void PerformItemBinding(UITableViewCell cell, object item);
    public virtual UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual void RowDeselected(UITableView tableView, NSIndexPath indexPath);
    public virtual String[] SectionIndexTitles(UITableView tableView);
    public virtual nint SectionFor(UITableView tableView, string title, nint atIndex);
    private bool IsNumericIndex(string text);
    public virtual string TitleForHeader(UITableView tableView, nint section);
    public virtual void WillBeginEditing(UITableView tableView, NSIndexPath indexPath);
    public virtual void DidEndEditing(UITableView tableView, NSIndexPath indexPath);
    public virtual UITableViewRowAction[] EditActionsForRow(UITableView tableView, NSIndexPath indexPath);
    public virtual bool CanEditRow(UITableView tableView, NSIndexPath indexPath);
    public virtual void CommitEditingStyle(UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath);
    public virtual bool CanMoveRow(UITableView tableView, NSIndexPath indexPath);
    public virtual NSIndexPath CustomizeMoveTarget(UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath proposedIndexPath);
    public virtual void MoveRow(UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath);
    public virtual void WillDisplay(UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);
    public virtual void WillDisplayHeaderView(UITableView tableView, UIView headerView, nint section);
    public virtual void AccessoryButtonTapped(UITableView tableView, NSIndexPath indexPath);
    public virtual nfloat GetHeightForHeader(UITableView tableView, nint section);
    public virtual nfloat GetHeightForFooter(UITableView tableView, nint section);
    public virtual UIView GetViewForHeader(UITableView tableView, nint section);
    public virtual UIView GetViewForFooter(UITableView tableView, nint section);
    [CompilerGeneratedAttribute]
public Action get_ScrolledAction();
    [CompilerGeneratedAttribute]
public void set_ScrolledAction(Action value);
    public virtual void Scrolled(UIScrollView scrollView);
    public virtual UIImage GetImage(UIImageView imageView, object item);
    public virtual UIImage GetImage(UIImageView imageView, object item, string imageMemberPath);
    public virtual UIImage GetImage(UIImageView imageView, object item, BindingContext context);
    public virtual void FormatImageView(UIImageView imageView);
    protected virtual void ReloadTableView(UITableView tableView, IEnumerable items);
    private string GetCellIdentifier(IndexPath indexPath, object item);
    private void AttachItemBindingAdapters(object customView, BindingContext bindingContext, object model);
    private void PerformPrimaryAction(UITableView tableView, NSIndexPath indexPath, bool isAccessoryButton);
    private UIView GetReusableHeaderFooterView(UITableView tableView, string reusableViewKind, int section);
    private bool IsMasterViewController();
    private void ReloadTableView(UITableView tableView, NSIndexPath[] itemsToReload, bool autoPersistSelectedRow, UITableViewRowAnimation animation);
    private void SelectRow(UITableView tableView, object item, bool autoScroll);
    private void OnViewModelPropertyChanged(object sender, PropertyChangedEventArgs e);
    internal void EndBatchUpdates();
    private void RefreshGroupItems(bool reloadData);
    private void OnItemsChanged(IEnumerable oldItems, IEnumerable newItems);
    private void OnViewModelDataChanged(object sender, DataChangedEventArgs e);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateIndexPath(object item);
    private void UpdateIndexPath();
    public virtual object GetItemAt(IndexPath indexPath);
    public virtual IndexPath GetItemIndex(object item);
    public virtual void SetItems(IEnumerable items);
    [CompilerGeneratedAttribute]
private void <ReloadTableView>b__10();
    [CompilerGeneratedAttribute]
private static NSIndexPath <EndBatchUpdates>b__12(int i);
}
public class Intersoft.Crosslight.iOS.OverlayModalPresenter : object {
    private IContentPresenterSettings a;
    public Type PresentationControllerType { get; }
    public Type AnimationControllerType { get; }
    public IContentPresenterSettings Settings { get; }
    public virtual Type get_PresentationControllerType();
    public virtual Type get_AnimationControllerType();
    public virtual IContentPresenterSettings get_Settings();
    protected virtual void Initialize(NavigationParameter parameter);
    private sealed virtual override void Intersoft.Crosslight.iOS.IContentPresenter.Initialize(NavigationParameter parameter);
}
public class Intersoft.Crosslight.iOS.OverlayPresentationController : UIPresentationController {
    private UIView a;
    private UIView b;
    private UITapGestureRecognizer c;
    [CompilerGeneratedAttribute]
private IContentPresenter d;
    [CompilerGeneratedAttribute]
private CGSize e;
    public IContentPresenterSettings Settings { get; }
    public UIView DialogContainerView { get; }
    public IContentPresenter ContentPresenter { get; private set; }
    public UIModalPresentationStyle PresentationStyle { get; }
    public bool ShouldPresentInFullscreen { get; }
    public CGSize ContainerSizeOffset { get; public set; }
    public CGRect FrameOfPresentedViewInContainerView { get; }
    public OverlayPresentationController(UIViewController presentedViewController, UIViewController presentingViewController, IContentPresenter contentPresenter);
    public sealed virtual IContentPresenterSettings get_Settings();
    public UIView get_DialogContainerView();
    [CompilerGeneratedAttribute]
public IContentPresenter get_ContentPresenter();
    [CompilerGeneratedAttribute]
private void set_ContentPresenter(IContentPresenter value);
    public virtual UIModalPresentationStyle get_PresentationStyle();
    public virtual bool get_ShouldPresentInFullscreen();
    [CompilerGeneratedAttribute]
public virtual CGSize get_ContainerSizeOffset();
    [CompilerGeneratedAttribute]
public virtual void set_ContainerSizeOffset(CGSize value);
    public virtual CGRect get_FrameOfPresentedViewInContainerView();
    public virtual void PresentationTransitionWillBegin();
    public virtual void DismissalTransitionWillBegin();
    public virtual UIModalPresentationStyle AdaptivePresentationStyle();
    public virtual CGSize GetSizeForChildContentContainer(IUIContentContainer contentContainer, CGSize parentContainerSize);
    public virtual void ContainerViewWillLayoutSubviews();
    public virtual void DismissalTransitionDidEnd(bool completed);
    protected virtual CGSize GetActualContentSize(UIView containerView);
    protected virtual void InitializeView();
    protected void AddSubView(UIView view);
    protected virtual void OnOverlayViewTapped(UIGestureRecognizer gesture);
    private void SetAlphaOnTransitionBegin(float alpha);
}
public class Intersoft.Crosslight.iOS.OverlayPresenterSettings : object {
    private Dictionary`2<Type, object> a;
    private IViewTransition b;
    [CompilerGeneratedAttribute]
private CGSize c;
    [CompilerGeneratedAttribute]
private CGSize d;
    [CompilerGeneratedAttribute]
private UIColor e;
    [CompilerGeneratedAttribute]
private UIColor f;
    [CompilerGeneratedAttribute]
private CGRect g;
    [CompilerGeneratedAttribute]
private CGRect h;
    [CompilerGeneratedAttribute]
private int i;
    [CompilerGeneratedAttribute]
private bool j;
    [CompilerGeneratedAttribute]
private bool k;
    [CompilerGeneratedAttribute]
private bool l;
    [CompilerGeneratedAttribute]
private bool m;
    [CompilerGeneratedAttribute]
private double n;
    [CompilerGeneratedAttribute]
private float o;
    [CompilerGeneratedAttribute]
private float p;
    [CompilerGeneratedAttribute]
private UIBlurEffectStyle q;
    [CompilerGeneratedAttribute]
private UIBlurEffectStyle r;
    [CompilerGeneratedAttribute]
private IViewTransition s;
    [CompilerGeneratedAttribute]
private ContentPresentationStyle t;
    [CompilerGeneratedAttribute]
private EdgePresentationPosition u;
    public CGSize PreferredContentSize { get; public set; }
    public CGSize PreferredContentSizeLandscape { get; public set; }
    public UIColor OverlayBackground { get; public set; }
    public UIColor ContentBackground { get; public set; }
    public CGRect ContentMargin { get; public set; }
    public CGRect ContentMarginLandscape { get; public set; }
    public int ContentCornerRadius { get; public set; }
    public bool ShowOverlay { get; public set; }
    public bool DismissOnTap { get; public set; }
    public bool OverlayBlurEnabled { get; public set; }
    public bool ContentBlurEnabled { get; public set; }
    public double TransitionDuration { get; public set; }
    public float ContentShadowRadius { get; public set; }
    public float ContentShadowOpacity { get; public set; }
    public UIBlurEffectStyle OverlayBlurStyle { get; public set; }
    public UIBlurEffectStyle ContentBlurStyle { get; public set; }
    public IViewTransition EntryTransition { get; public set; }
    public IViewTransition ExitTransition { get; public set; }
    public ContentPresentationStyle PresentationStyle { get; public set; }
    public EdgePresentationPosition EdgePresentationPosition { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual CGSize get_PreferredContentSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreferredContentSize(CGSize value);
    [CompilerGeneratedAttribute]
public sealed virtual CGSize get_PreferredContentSizeLandscape();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreferredContentSizeLandscape(CGSize value);
    [CompilerGeneratedAttribute]
public sealed virtual UIColor get_OverlayBackground();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OverlayBackground(UIColor value);
    [CompilerGeneratedAttribute]
public sealed virtual UIColor get_ContentBackground();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentBackground(UIColor value);
    [CompilerGeneratedAttribute]
public sealed virtual CGRect get_ContentMargin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentMargin(CGRect value);
    [CompilerGeneratedAttribute]
public sealed virtual CGRect get_ContentMarginLandscape();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentMarginLandscape(CGRect value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ContentCornerRadius();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentCornerRadius(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowOverlay();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowOverlay(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DismissOnTap();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DismissOnTap(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OverlayBlurEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OverlayBlurEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ContentBlurEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentBlurEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_TransitionDuration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransitionDuration(double value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_ContentShadowRadius();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentShadowRadius(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_ContentShadowOpacity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentShadowOpacity(float value);
    [CompilerGeneratedAttribute]
public sealed virtual UIBlurEffectStyle get_OverlayBlurStyle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OverlayBlurStyle(UIBlurEffectStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual UIBlurEffectStyle get_ContentBlurStyle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentBlurStyle(UIBlurEffectStyle value);
    public sealed virtual IViewTransition get_EntryTransition();
    public sealed virtual void set_EntryTransition(IViewTransition value);
    [CompilerGeneratedAttribute]
public sealed virtual IViewTransition get_ExitTransition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExitTransition(IViewTransition value);
    [CompilerGeneratedAttribute]
public sealed virtual ContentPresentationStyle get_PresentationStyle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationStyle(ContentPresentationStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual EdgePresentationPosition get_EdgePresentationPosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EdgePresentationPosition(EdgePresentationPosition value);
    public sealed virtual void SetAppearance(object appearance);
    public sealed virtual object GetAppearance(Type viewControllerType);
}
internal class Intersoft.Crosslight.iOS.p : object {
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, Func`2<string, ILog>> a;
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, Func`2<Type, ILog>> b;
    [CompilerGeneratedAttribute]
private static Func`2<string, ILog> c;
    [CompilerGeneratedAttribute]
private static Func`2<Type, ILog> d;
    public sealed virtual void InitializeServices(IApplicationHost appHost);
    public sealed virtual void InitializeComponents(IApplicationHost appHost);
    public sealed virtual void InitializeApplication(IApplicationHost appHost);
    private sealed virtual override IApplicationService Intersoft.Crosslight.IApplicationInitializer.GetApplicationService(IApplicationContext context);
    [CompilerGeneratedAttribute]
private static Func`2<string, ILog> <InitializeServices>b__0(IDependencyResolver o);
    [CompilerGeneratedAttribute]
private static Func`2<Type, ILog> <InitializeServices>b__2(IDependencyResolver o);
    [CompilerGeneratedAttribute]
private static ILog <InitializeServices>b__1(string s);
    [CompilerGeneratedAttribute]
private static ILog <InitializeServices>b__3(Type s);
}
public class Intersoft.Crosslight.iOS.PickerContainerCell`1 : UITableViewCell {
    [CompilerGeneratedAttribute]
private T a;
    public T Picker { get; private set; }
    public PickerContainerCell`1(T picker);
    [CompilerGeneratedAttribute]
public T get_Picker();
    [CompilerGeneratedAttribute]
private void set_Picker(T value);
    public sealed virtual void Activate();
    public sealed virtual void Deactivate();
    public sealed virtual void WillDisplay();
    public sealed virtual void ValueChanged(object newValue);
    public sealed virtual IViewContext GetViewContext();
    public sealed virtual float GetHeight();
    public sealed virtual void InvalidateSize(bool isInitializing);
    public sealed virtual void VisibilityChanged(bool isVisible);
    public sealed virtual void EnabledChanged(bool isEnabled);
    public sealed virtual TService GetService();
    public sealed virtual TService GetService(bool newInstance);
}
public enum Intersoft.Crosslight.iOS.PickerHideInitiator : Enum {
    public int value__;
    public static PickerHideInitiator EndEditing;
    public static PickerHideInitiator Scrolling;
    public static PickerHideInitiator Programmatic;
    public static PickerHideInitiator SizeChange;
}
public class Intersoft.Crosslight.iOS.PickerViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.PickerViewCell : FormViewCell {
    private ItemPicker a;
    public EditorControlType EditorControlType { get; }
    public PickerViewCell(UITableViewController controller, PropertyDefinition property);
    public virtual EditorControlType get_EditorControlType();
    public virtual void Deactivate();
    protected virtual UIView CreateEditor();
    protected virtual IPicker CreatePicker();
    public virtual void VisibilityChanged(bool isVisible);
    protected virtual void OnVisibilityChanged(bool isVisible);
    public virtual void InvalidateSize(bool isInitializing);
    public virtual void WillDisplay();
    protected virtual void Dispose(bool disposing);
}
public static class Intersoft.Crosslight.iOS.PopoverManager : object {
    private static List`1<UIPopoverController> a;
    private static PopoverManager();
    public static void Register(UIPopoverController popover);
    public static void Unregister(UIPopoverController popover);
    private static void HandleDidDismiss(object sender, EventArgs e);
    public static UIPopoverController GetPopover(UIViewController viewController);
}
public class Intersoft.Crosslight.iOS.Reachability : object {
    protected static bool DefaultHasWWAN;
    private bool a;
    protected static Byte[] LocalNetNum;
    private EventHandler`1<ReachabilityEventArgs> b;
    [CompilerGeneratedAttribute]
private NetworkReachability c;
    [CompilerGeneratedAttribute]
private bool d;
    [CompilerGeneratedAttribute]
private bool e;
    protected NetworkReachability NetworkReachability { get; protected set; }
    protected bool HasWWAN { get; protected set; }
    public bool AllowWWAN { get; public set; }
    public bool IsReachable { get; }
    public bool IsReachableViaWWAN { get; }
    public bool IsReachableViaWiFi { get; }
    public bool IsConnectionRequired { get; }
    public bool IsConnectionOnDemand { get; }
    public bool IsInterventionRequired { get; }
    public ReachabilityStatus CurrentStatus { get; }
    protected Reachability(NetworkReachability reachability, bool hasWWAN);
    public Reachability(string hostname, bool hasWWAN);
    public Reachability(IPAddress address, bool hasWWAN);
    private static Reachability();
    [CompilerGeneratedAttribute]
protected NetworkReachability get_NetworkReachability();
    [CompilerGeneratedAttribute]
protected void set_NetworkReachability(NetworkReachability value);
    [CompilerGeneratedAttribute]
protected bool get_HasWWAN();
    [CompilerGeneratedAttribute]
protected void set_HasWWAN(bool value);
    public void add_ReachabilityUpdated(EventHandler`1<ReachabilityEventArgs> value);
    public void remove_ReachabilityUpdated(EventHandler`1<ReachabilityEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_AllowWWAN();
    [CompilerGeneratedAttribute]
public void set_AllowWWAN(bool value);
    public static Reachability ReachabilityForInternet(bool hasWWAN);
    public static Reachability ReachabilityForLocalWiFi(bool hasWWAN);
    private bool IsReachableWithFlags(NetworkReachabilityFlags flags);
    private bool ReachableViaWWAN(NetworkReachabilityFlags flags);
    private bool ReachableViaWiFi(NetworkReachabilityFlags flags);
    private string GetFlagsAsString(NetworkReachabilityFlags flags);
    public virtual string GetReachabilityString();
    protected virtual void OnReachabilityNotification(NetworkReachabilityFlags flags);
    public virtual bool get_IsReachable();
    public virtual bool get_IsReachableViaWWAN();
    public virtual bool get_IsReachableViaWiFi();
    public virtual bool get_IsConnectionRequired();
    public virtual bool get_IsConnectionOnDemand();
    public virtual bool get_IsInterventionRequired();
    public virtual ReachabilityStatus get_CurrentStatus();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public enum Intersoft.Crosslight.iOS.RoundedButtonContentStyle : Enum {
    public int value__;
    public static RoundedButtonContentStyle Title;
    public static RoundedButtonContentStyle Subtitle;
    public static RoundedButtonContentStyle Image;
}
public enum Intersoft.Crosslight.iOS.RoundedButtonStyle : Enum {
    public int value__;
    public static RoundedButtonStyle Fill;
    public static RoundedButtonStyle Translucent;
}
public class Intersoft.Crosslight.iOS.ScaleTransition : ViewTransitionBase {
    [CompilerGeneratedAttribute]
private bool a;
    public bool ZoomOutSource { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ZoomOutSource();
    [CompilerGeneratedAttribute]
public void set_ZoomOutSource(bool value);
    public virtual double GetTransitionDuration(TransitionContext context);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.ScaleTransition/b")]
public virtual Task AnimateTransitionAsync(TransitionContext context);
}
public class Intersoft.Crosslight.iOS.SearchBarDelegate : UISearchBarDelegate {
    public virtual void SearchButtonClicked(UISearchBar searchBar);
}
public class Intersoft.Crosslight.iOS.SegmentedViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.SegmentedViewCell : FormViewCell {
    public SegmentedViewCell(UITableViewController controller, PropertyDefinition property);
    protected virtual UIView CreateEditor();
}
public class Intersoft.Crosslight.iOS.SelectionListViewModel : ViewModelBase {
    private IEnumerable a;
    private IList b;
    private object c;
    [CompilerGeneratedAttribute]
private PropertyDefinition d;
    [CompilerGeneratedAttribute]
private IEditorViewModel e;
    public PropertyDefinition Property { get; private set; }
    public IEnumerable Items { get; public set; }
    public IList SelectedItems { get; public set; }
    public object SelectedItem { get; public set; }
    private ICollection Intersoft.Crosslight.IListViewModel.SourceItems { get; private set; }
    public IEditorViewModel EditorViewModel { get; private set; }
    [CompilerGeneratedAttribute]
public PropertyDefinition get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(PropertyDefinition value);
    public sealed virtual IEnumerable get_Items();
    public sealed virtual void set_Items(IEnumerable value);
    public sealed virtual IList get_SelectedItems();
    public sealed virtual void set_SelectedItems(IList value);
    public sealed virtual object get_SelectedItem();
    public sealed virtual void set_SelectedItem(object value);
    private sealed virtual override ICollection Intersoft.Crosslight.IListViewModel.get_SourceItems();
    private sealed virtual override void Intersoft.Crosslight.IListViewModel.set_SourceItems(ICollection value);
    [CompilerGeneratedAttribute]
public IEditorViewModel get_EditorViewModel();
    [CompilerGeneratedAttribute]
private void set_EditorViewModel(IEditorViewModel value);
    public virtual void Navigated(NavigatedParameter parameter);
}
public class Intersoft.Crosslight.iOS.SelectionTableViewController : UITableViewController`1<SelectionListViewModel> {
    private bool a;
    [CompilerGeneratedAttribute]
private string b;
    public UITableViewStyle TableViewStyle { get; }
    public ChoiceInputMode ChoiceInputMode { get; }
    public TableViewInteraction InteractionMode { get; }
    public SelectionInputAttribute SelectionInputAttribute { get; }
    public string SelectedItemPath { get; private set; }
    public virtual UITableViewStyle get_TableViewStyle();
    public virtual ChoiceInputMode get_ChoiceInputMode();
    public virtual TableViewInteraction get_InteractionMode();
    public SelectionInputAttribute get_SelectionInputAttribute();
    [CompilerGeneratedAttribute]
public string get_SelectedItemPath();
    [CompilerGeneratedAttribute]
private void set_SelectedItemPath(string value);
    protected virtual void InitializeViewModel();
    protected virtual void OnViewInitialized();
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
}
public class Intersoft.Crosslight.iOS.Services.ApplicationService : ApplicationServiceBase {
    public ApplicationService(IApplicationContext context);
    protected virtual void OnStart(StartParameter parameter);
    protected virtual void OnStop();
}
public class Intersoft.Crosslight.iOS.Services.FormBuilderService : FormBuilderServiceBase`1<FormDefinition> {
    public virtual FormDefinition Build(object viewHost, FormDefinition form);
}
public class Intersoft.Crosslight.iOS.Services.HashCryptographicService : object {
    public sealed virtual bool IsAlgorithmSupported(HashAlgorithmKind algorithmKind);
    public sealed virtual string CreateSignature(HashAlgorithmKind algorithmKind, string input, Byte[] key);
    private string GetBase64Signature(HashAlgorithm hashAlgorithm, string input);
}
public class Intersoft.Crosslight.iOS.Services.NavigationService : object {
    private UINavigationController a;
    private IDrawerNavigationController b;
    private IViewModel c;
    private UIViewController d;
    private bool e;
    [CompilerGeneratedAttribute]
private static object f;
    [CompilerGeneratedAttribute]
private IViewContext g;
    [CompilerGeneratedAttribute]
private static Func`2<IViewContext, bool> h;
    [CompilerGeneratedAttribute]
private static Action i;
    [CompilerGeneratedAttribute]
private static Action j;
    public static object LastNavigationInitiator { get; public set; }
    public IViewContext RootModalView { get; private set; }
    [CompilerGeneratedAttribute]
public static object get_LastNavigationInitiator();
    [CompilerGeneratedAttribute]
public static void set_LastNavigationInitiator(object value);
    [CompilerGeneratedAttribute]
public IViewContext get_RootModalView();
    [CompilerGeneratedAttribute]
private void set_RootModalView(IViewContext value);
    private sealed virtual override void Intersoft.Crosslight.INavigationService.Initialize(IViewModel viewModel);
    public sealed virtual bool Navigate();
    public sealed virtual bool Navigate(string targetName);
    public virtual bool Navigate(NavigationParameter parameter);
    public virtual bool Navigate(NavigationParameter parameter, Action`1<NavigationResult> resultCallback);
    public sealed virtual bool Navigate(NavigationTarget target);
    public sealed virtual bool Navigate(NavigationTarget target, Action`1<NavigationResult> resultCallback);
    public sealed virtual void Close();
    public sealed virtual void Close(NavigationResult result);
    private void ApplyUniformAppearance(UIViewController viewController, UIPresentationController presentationController);
    private UIViewController FindPresentingController(IViewContext viewContext);
    private UINavigationController FindNavigationController(IViewContext viewContext);
    [CompilerGeneratedAttribute]
private static bool <Navigate>b__3(IViewContext o);
    [CompilerGeneratedAttribute]
private static void <Navigate>b__4();
    [CompilerGeneratedAttribute]
private static void <Navigate>b__5();
}
public class Intersoft.Crosslight.iOS.Services.ViewService : object {
    private NSObject a;
    public sealed virtual object FindName(object view, string name);
    public sealed virtual T FindName(object view, string name);
    public sealed virtual bool IsRunningOnUIThread();
    public sealed virtual void RunOnUIThread(Action action);
    public sealed virtual void RunOnUIThreadIfNeeded(Action action);
    public sealed virtual IAsyncResult RunOnBackgroundThread(Action action, int delay);
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.ServicesExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<ABMultiValueEntry`1<string>, Email> a;
    [CompilerGeneratedAttribute]
private static Func`2<ABMultiValueEntry`1<string>, Phone> b;
    [CompilerGeneratedAttribute]
private static Func`2<ABMultiValueEntry`1<InstantMessageService>, InstantMessagingAccount> c;
    [CompilerGeneratedAttribute]
private static Func`2<ABMultiValueEntry`1<PersonAddress>, Address> d;
    [CompilerGeneratedAttribute]
private static Func`2<ABMultiValueEntry`1<string>, Website> e;
    [CompilerGeneratedAttribute]
private static Func`2<ABMultiValueEntry`1<string>, Relationship> f;
    [ExtensionAttribute]
public static Contact ToContact(ABPerson person);
    private static PhoneType GetPhoneType(string label);
    private static InstantMessagingService GetIMService(string service);
    private static AddressType GetAddressType(string label);
    private static string GetLabel(NSString label);
    private static RelationshipType GetRelationType(string label);
    private static EmailType GetEmailType(string label);
    [CompilerGeneratedAttribute]
private static Email <ToContact>b__9(ABMultiValueEntry`1<string> e);
    [CompilerGeneratedAttribute]
private static Phone <ToContact>b__a(ABMultiValueEntry`1<string> p);
    [CompilerGeneratedAttribute]
private static InstantMessagingAccount <ToContact>b__b(ABMultiValueEntry`1<InstantMessageService> ima);
    [CompilerGeneratedAttribute]
private static Address <ToContact>b__c(ABMultiValueEntry`1<PersonAddress> a);
    [CompilerGeneratedAttribute]
private static Website <ToContact>b__d(ABMultiValueEntry`1<string> url);
    [CompilerGeneratedAttribute]
private static Relationship <ToContact>b__e(ABMultiValueEntry`1<string> p);
}
public class Intersoft.Crosslight.iOS.SlideFromBottomTransition : ViewTransitionBase {
    protected nfloat DefaultVelocity { get; }
    protected virtual nfloat get_DefaultVelocity();
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.SlideFromBottomTransition/b")]
[DebuggerStepThroughAttribute]
public virtual Task AnimateTransitionAsync(TransitionContext context);
}
public class Intersoft.Crosslight.iOS.SlideFromLeftTransition : ViewTransitionBase {
    protected nfloat DefaultVelocity { get; }
    protected virtual nfloat get_DefaultVelocity();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.SlideFromLeftTransition/b")]
public virtual Task AnimateTransitionAsync(TransitionContext context);
}
public class Intersoft.Crosslight.iOS.SlideFromRightTransition : ViewTransitionBase {
    protected nfloat DefaultVelocity { get; }
    protected virtual nfloat get_DefaultVelocity();
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.SlideFromRightTransition/b")]
[DebuggerStepThroughAttribute]
public virtual Task AnimateTransitionAsync(TransitionContext context);
}
public class Intersoft.Crosslight.iOS.SlideFromTopTransition : ViewTransitionBase {
    protected nfloat DefaultVelocity { get; }
    protected virtual nfloat get_DefaultVelocity();
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.SlideFromTopTransition/b")]
[DebuggerStepThroughAttribute]
public virtual Task AnimateTransitionAsync(TransitionContext context);
}
public class Intersoft.Crosslight.iOS.SliderViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.SliderViewCell : FormViewCell {
    private UISlider a;
    public SliderViewCell(UITableViewController controller, PropertyDefinition property);
    protected virtual UIView CreateEditor();
    protected virtual void Dispose(bool disposing);
}
public enum Intersoft.Crosslight.iOS.StatusBarContentStyle : Enum {
    public int value__;
    public static StatusBarContentStyle Light;
    public static StatusBarContentStyle Dark;
}
public enum Intersoft.Crosslight.iOS.StatusBarTransitionMode : Enum {
    public int value__;
    public static StatusBarTransitionMode TranslucentBlack;
    public static StatusBarTransitionMode TranslucentBlur;
    public static StatusBarTransitionMode AnimateColor;
}
[AttributeUsageAttribute("4")]
public class Intersoft.Crosslight.iOS.StoryboardAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string a;
    [CompilerGeneratedAttribute]
private string b;
    public string NibName { get; private set; }
    public string Id { get; public set; }
    public StoryboardAttribute(string nibName);
    public StoryboardAttribute(string nibName, string storyboardId);
    [CompilerGeneratedAttribute]
public string get_NibName();
    [CompilerGeneratedAttribute]
private void set_NibName(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
}
public class Intersoft.Crosslight.iOS.SubtleZoomTransition : ZoomTransition {
    public nfloat InitialScaleRatio { get; }
    public nfloat DismissScaleRatio { get; }
    public virtual nfloat get_InitialScaleRatio();
    public virtual nfloat get_DismissScaleRatio();
}
public class Intersoft.Crosslight.iOS.SwitchViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.SyncService : object {
    public sealed virtual void CancelSync(IAccount account, string provider);
    public sealed virtual void DisableSync(IAccount account, string provider);
    public sealed virtual void EnableSync(IAccount account, long interval, string provider);
}
public class Intersoft.Crosslight.iOS.TableSearchDisplayDelegate : UISearchDisplayDelegate {
    private UITableViewController a;
    private bool b;
    private ITableViewController a { get; }
    private ObservableTableSource b { get; }
    public TableSearchDisplayDelegate(UITableViewController controller);
    private ITableViewController get_a();
    private ObservableTableSource get_b();
    public virtual bool ShouldReloadForSearchString(UISearchDisplayController controller, string forSearchString);
    public virtual bool ShouldReloadForSearchScope(UISearchDisplayController controller, nint forSearchOption);
    public virtual void WillBeginSearch(UISearchDisplayController controller);
    public virtual void DidEndSearch(UISearchDisplayController controller);
    public virtual void WillEndSearch(UISearchDisplayController controller);
}
public enum Intersoft.Crosslight.iOS.TableSourceMode : Enum {
    public int value__;
    public static TableSourceMode Items;
    public static TableSourceMode FilterItems;
}
public class Intersoft.Crosslight.iOS.TableViewAppearance : object {
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation a;
    [CompilerGeneratedAttribute]
private UIColor b;
    [CompilerGeneratedAttribute]
private string c;
    [CompilerGeneratedAttribute]
private bool d;
    [CompilerGeneratedAttribute]
private bool e;
    [CompilerGeneratedAttribute]
private UIColor f;
    [CompilerGeneratedAttribute]
private UIColor g;
    [CompilerGeneratedAttribute]
private bool h;
    [CompilerGeneratedAttribute]
private UIVisualEffect i;
    [CompilerGeneratedAttribute]
private UIVisualEffect j;
    [CompilerGeneratedAttribute]
private Nullable`1<UIEdgeInsets> k;
    [CompilerGeneratedAttribute]
private Nullable`1<UIEdgeInsets> l;
    [CompilerGeneratedAttribute]
private UIColor m;
    [CompilerGeneratedAttribute]
private UIColor n;
    [CompilerGeneratedAttribute]
private UIColor o;
    [CompilerGeneratedAttribute]
private UITableViewCellAccessory p;
    [CompilerGeneratedAttribute]
private bool q;
    [CompilerGeneratedAttribute]
private UIColor r;
    [CompilerGeneratedAttribute]
private UIColor s;
    [CompilerGeneratedAttribute]
private UIColor t;
    [CompilerGeneratedAttribute]
private UIColor u;
    [CompilerGeneratedAttribute]
private UITextAttributes v;
    [CompilerGeneratedAttribute]
private UITextAttributes w;
    [CompilerGeneratedAttribute]
private UIColor x;
    [CompilerGeneratedAttribute]
private UIColor y;
    [CompilerGeneratedAttribute]
private UIColor z;
    [CompilerGeneratedAttribute]
private string aa;
    [CompilerGeneratedAttribute]
private string ab;
    [CompilerGeneratedAttribute]
private DisclosureIndicatorVisibility ac;
    [CompilerGeneratedAttribute]
private bool ad;
    [CompilerGeneratedAttribute]
private bool ae;
    public UITableViewRowAnimation UpdateRowAnimation { get; public set; }
    public UIColor BackgroundColor { get; public set; }
    public string BackgroundImage { get; public set; }
    public bool BackgroundBlurEnabled { get; public set; }
    public bool HideSeparatorOnEmptyCell { get; public set; }
    public UIColor BackgroundBlurTintColor { get; public set; }
    public UIColor SeparatorColor { get; public set; }
    public bool ShowSeparator { get; public set; }
    public UIVisualEffect SeparatorEffect { get; public set; }
    public UIVisualEffect ContentEffect { get; public set; }
    public Nullable`1<UIEdgeInsets> ContentInset { get; public set; }
    public Nullable`1<UIEdgeInsets> SeparatorInset { get; public set; }
    public UIColor CellBackgroundColor { get; public set; }
    public UIColor CellSelectedBackgroundColor { get; public set; }
    public UIColor CellTintColor { get; public set; }
    public UITableViewCellAccessory CellAccessory { get; public set; }
    public bool CellSelectedBackgroundBlurEnabled { get; public set; }
    public UIColor TintColor { get; public set; }
    public UIColor HeaderTextColor { get; public set; }
    public UIColor TitleTextColor { get; public set; }
    public UIColor DetailTextColor { get; public set; }
    public UITextAttributes TitleTextAttributes { get; public set; }
    public UITextAttributes DetailTextAttributes { get; public set; }
    public UIColor SectionIndexColor { get; public set; }
    public UIColor SectionIndexBackgroundColor { get; public set; }
    public UIColor SectionIndexTrackingBackgroundColor { get; public set; }
    public string HeaderViewNibName { get; public set; }
    public string FooterViewNibName { get; public set; }
    public DisclosureIndicatorVisibility DisclosureIndicatorVisibility { get; public set; }
    public bool ToggleEditModeOnCellActions { get; public set; }
    public bool HideScrollIndicator { get; public set; }
    [CompilerGeneratedAttribute]
public UITableViewRowAnimation get_UpdateRowAnimation();
    [CompilerGeneratedAttribute]
public void set_UpdateRowAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
public UIColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(UIColor value);
    [CompilerGeneratedAttribute]
public string get_BackgroundImage();
    [CompilerGeneratedAttribute]
public void set_BackgroundImage(string value);
    [CompilerGeneratedAttribute]
public bool get_BackgroundBlurEnabled();
    [CompilerGeneratedAttribute]
public void set_BackgroundBlurEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideSeparatorOnEmptyCell();
    [CompilerGeneratedAttribute]
public void set_HideSeparatorOnEmptyCell(bool value);
    [CompilerGeneratedAttribute]
public UIColor get_BackgroundBlurTintColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundBlurTintColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_SeparatorColor();
    [CompilerGeneratedAttribute]
public void set_SeparatorColor(UIColor value);
    [CompilerGeneratedAttribute]
public bool get_ShowSeparator();
    [CompilerGeneratedAttribute]
public void set_ShowSeparator(bool value);
    [CompilerGeneratedAttribute]
public UIVisualEffect get_SeparatorEffect();
    [CompilerGeneratedAttribute]
public void set_SeparatorEffect(UIVisualEffect value);
    [CompilerGeneratedAttribute]
public UIVisualEffect get_ContentEffect();
    [CompilerGeneratedAttribute]
public void set_ContentEffect(UIVisualEffect value);
    [CompilerGeneratedAttribute]
public Nullable`1<UIEdgeInsets> get_ContentInset();
    [CompilerGeneratedAttribute]
public void set_ContentInset(Nullable`1<UIEdgeInsets> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UIEdgeInsets> get_SeparatorInset();
    [CompilerGeneratedAttribute]
public void set_SeparatorInset(Nullable`1<UIEdgeInsets> value);
    [CompilerGeneratedAttribute]
public UIColor get_CellBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_CellBackgroundColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_CellSelectedBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_CellSelectedBackgroundColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_CellTintColor();
    [CompilerGeneratedAttribute]
public void set_CellTintColor(UIColor value);
    [CompilerGeneratedAttribute]
public UITableViewCellAccessory get_CellAccessory();
    [CompilerGeneratedAttribute]
public void set_CellAccessory(UITableViewCellAccessory value);
    [CompilerGeneratedAttribute]
public bool get_CellSelectedBackgroundBlurEnabled();
    [CompilerGeneratedAttribute]
public void set_CellSelectedBackgroundBlurEnabled(bool value);
    [CompilerGeneratedAttribute]
public UIColor get_TintColor();
    [CompilerGeneratedAttribute]
public void set_TintColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_HeaderTextColor();
    [CompilerGeneratedAttribute]
public void set_HeaderTextColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_TitleTextColor();
    [CompilerGeneratedAttribute]
public void set_TitleTextColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_DetailTextColor();
    [CompilerGeneratedAttribute]
public void set_DetailTextColor(UIColor value);
    [CompilerGeneratedAttribute]
public UITextAttributes get_TitleTextAttributes();
    [CompilerGeneratedAttribute]
public void set_TitleTextAttributes(UITextAttributes value);
    [CompilerGeneratedAttribute]
public UITextAttributes get_DetailTextAttributes();
    [CompilerGeneratedAttribute]
public void set_DetailTextAttributes(UITextAttributes value);
    [CompilerGeneratedAttribute]
public UIColor get_SectionIndexColor();
    [CompilerGeneratedAttribute]
public void set_SectionIndexColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_SectionIndexBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_SectionIndexBackgroundColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_SectionIndexTrackingBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_SectionIndexTrackingBackgroundColor(UIColor value);
    [CompilerGeneratedAttribute]
public string get_HeaderViewNibName();
    [CompilerGeneratedAttribute]
public void set_HeaderViewNibName(string value);
    [CompilerGeneratedAttribute]
public string get_FooterViewNibName();
    [CompilerGeneratedAttribute]
public void set_FooterViewNibName(string value);
    [CompilerGeneratedAttribute]
public DisclosureIndicatorVisibility get_DisclosureIndicatorVisibility();
    [CompilerGeneratedAttribute]
public void set_DisclosureIndicatorVisibility(DisclosureIndicatorVisibility value);
    [CompilerGeneratedAttribute]
public bool get_ToggleEditModeOnCellActions();
    [CompilerGeneratedAttribute]
public void set_ToggleEditModeOnCellActions(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideScrollIndicator();
    [CompilerGeneratedAttribute]
public void set_HideScrollIndicator(bool value);
}
public enum Intersoft.Crosslight.iOS.TableViewCellStyle : Enum {
    public int value__;
    public static TableViewCellStyle Default;
    public static TableViewCellStyle RightDetail;
    public static TableViewCellStyle LeftDetail;
    public static TableViewCellStyle Subtitle;
    public static TableViewCellStyle Custom;
}
public enum Intersoft.Crosslight.iOS.TableViewInteraction : Enum {
    public int value__;
    public static TableViewInteraction Standard;
    public static TableViewInteraction ChoiceInput;
    public static TableViewInteraction Navigation;
    public static TableViewInteraction None;
}
public class Intersoft.Crosslight.iOS.TextViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.TimeViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.ToastPresenter : object {
    [CompilerGeneratedAttribute]
private static object a;
    private static object a { get; private set; }
    [CompilerGeneratedAttribute]
private static object get_a();
    [CompilerGeneratedAttribute]
private static void set_a(object value);
    public sealed virtual void SetOwner(object owner);
    public sealed virtual void Show(string message);
    public sealed virtual void Show(string message, double duration);
    public sealed virtual void Show(string message, string title);
    public sealed virtual void Show(string message, string title, string image);
    public sealed virtual void Show(string message, string title, double duration);
    public sealed virtual void Show(string message, string title, string image, double duration);
    public sealed virtual void Show(string message, string title, string image, double duration, ToastGravity gravity);
    public sealed virtual void Show(string message, string title, string image, ToastSettings settings);
}
public class Intersoft.Crosslight.iOS.TransitionContext : object {
    [CompilerGeneratedAttribute]
private IUIViewControllerContextTransitioning a;
    [CompilerGeneratedAttribute]
private IContentPresenter b;
    [CompilerGeneratedAttribute]
private bool c;
    [CompilerGeneratedAttribute]
private UIView d;
    [CompilerGeneratedAttribute]
private TransitionKind e;
    public IUIViewControllerContextTransitioning Transition { get; internal set; }
    public IContentPresenter Presenter { get; internal set; }
    public bool IsPresenting { get; internal set; }
    public UIView AnimatingView { get; internal set; }
    public TransitionKind TransitionKind { get; public set; }
    public bool IsModalDismissing { get; }
    public bool IsModalPresenting { get; }
    public CGRect TargetViewFinalFrame { get; }
    public UIView OriginalSourceView { get; }
    public UIView SourceView { get; }
    [CompilerGeneratedAttribute]
public IUIViewControllerContextTransitioning get_Transition();
    [CompilerGeneratedAttribute]
internal void set_Transition(IUIViewControllerContextTransitioning value);
    [CompilerGeneratedAttribute]
public IContentPresenter get_Presenter();
    [CompilerGeneratedAttribute]
internal void set_Presenter(IContentPresenter value);
    [CompilerGeneratedAttribute]
public bool get_IsPresenting();
    [CompilerGeneratedAttribute]
internal void set_IsPresenting(bool value);
    [CompilerGeneratedAttribute]
public UIView get_AnimatingView();
    [CompilerGeneratedAttribute]
internal void set_AnimatingView(UIView value);
    [CompilerGeneratedAttribute]
public TransitionKind get_TransitionKind();
    [CompilerGeneratedAttribute]
public void set_TransitionKind(TransitionKind value);
    public bool get_IsModalDismissing();
    public bool get_IsModalPresenting();
    public CGRect get_TargetViewFinalFrame();
    public UIView get_OriginalSourceView();
    public UIView get_SourceView();
}
public enum Intersoft.Crosslight.iOS.TransitionKind : Enum {
    public int value__;
    public static TransitionKind Modal;
    public static TransitionKind Push;
}
public class Intersoft.Crosslight.iOS.UIAnimatedVisualEffectView : UIView {
    private bool a;
    private bool b;
    private UIColor c;
    private UIVisualEffectView d;
    private UIView e;
    public UIVisualEffectView VisualEffectView { get; }
    public bool EffectEnabled { get; public set; }
    public UIView ContentView { get; }
    public CGRect Frame { get; public set; }
    public UIColor BackgroundColor { get; public set; }
    internal UIAnimatedVisualEffectView(UIVisualEffect effect);
    public UIVisualEffectView get_VisualEffectView();
    public bool get_EffectEnabled();
    public void set_EffectEnabled(bool value);
    public UIView get_ContentView();
    public virtual CGRect get_Frame();
    public virtual void set_Frame(CGRect value);
    public virtual UIColor get_BackgroundColor();
    public virtual void set_BackgroundColor(UIColor value);
    private void SetEffectEnabled(bool value);
    public virtual void WillMoveToSuperview(UIView newsuper);
}
public class Intersoft.Crosslight.iOS.UIApplicationDelegate : UIApplicationDelegate {
    private IApplicationInitializer a;
    private UIApplication b;
    private UIWindow c;
    [CompilerGeneratedAttribute]
private UIColor d;
    [CompilerGeneratedAttribute]
private bool e;
    [CompilerGeneratedAttribute]
private bool f;
    [CompilerGeneratedAttribute]
private static Action g;
    [CompilerGeneratedAttribute]
private static Func`2<Assembly, bool> h;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> i;
    public UIColor TintColor { get; private set; }
    internal bool a { get; internal set; }
    internal bool b { get; internal set; }
    protected bool PerformNavigationOnUIThread { get; }
    public object ApplicationInstance { get; }
    public Type ApplicationType { get; }
    public UIApplicationDelegate(IntPtr handle);
    public UIApplicationDelegate(NSObjectFlag t);
    [CompilerGeneratedAttribute]
public virtual UIColor get_TintColor();
    [CompilerGeneratedAttribute]
private void set_TintColor(UIColor value);
    [CompilerGeneratedAttribute]
internal bool get_a();
    [CompilerGeneratedAttribute]
internal void set_a(bool value);
    [CompilerGeneratedAttribute]
internal bool get_b();
    [CompilerGeneratedAttribute]
internal void set_b(bool value);
    public virtual bool WillFinishLaunching(UIApplication application, NSDictionary launchOptions);
    public virtual bool FinishedLaunching(UIApplication application, NSDictionary launchOptions);
    internal void PerformRootNavigation(UIViewController contentViewController);
    protected virtual bool get_PerformNavigationOnUIThread();
    protected virtual void CheckForNotifications(UIApplication application, NSDictionary launchOptions);
    public virtual void PerformFetch(UIApplication application, Action`1<UIBackgroundFetchResult> completionHandler);
    private LocalNotification CreateLocalNotification(UILocalNotification notification);
    public virtual void ReceivedLocalNotification(UIApplication application, UILocalNotification notification);
    public virtual void DidEnterBackground(UIApplication application);
    public virtual void OnResignActivation(UIApplication application);
    public virtual void WillEnterForeground(UIApplication application);
    public virtual void WillTerminate(UIApplication application);
    public virtual void WillChangeStatusBarOrientation(UIApplication application, UIInterfaceOrientation newStatusBarOrientation, double duration);
    public static void PreserveAssembly(Assembly assembly);
    protected virtual UIViewController WrapRootViewController(UIViewController contentViewController);
    internal static bool IsWatch();
    private void RotateView(UIView view, UIInterfaceOrientation statusBarOrientation, double duration);
    private void RunFrameworkInitializer(UIApplication application);
    private void RunAppInitializer(UIApplication application);
    private void RunExternalInitializer(UIApplication application);
    public sealed virtual object get_ApplicationInstance();
    public sealed virtual Type get_ApplicationType();
    private sealed virtual override IEnumerable`1<Assembly> Intersoft.Crosslight.IApplicationHost.GetLoadedAssemblies();
    public sealed virtual TService GetService();
    public sealed virtual TService GetService(bool newInstance);
    [CompilerGeneratedAttribute]
private void <FinishedLaunching>b__0();
    [CompilerGeneratedAttribute]
private void <FinishedLaunching>b__1();
    [CompilerGeneratedAttribute]
private static void <FinishedLaunching>b__2();
    [CompilerGeneratedAttribute]
private static bool <RunExternalInitializer>b__c(Assembly o);
    [CompilerGeneratedAttribute]
private static bool <RunExternalInitializer>b__d(Type o);
}
public class Intersoft.Crosslight.iOS.UIBarButtonItemBindingAdapter : BindingAdapterBase`1<UIBarButtonItem> {
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnCommandCanExecuteChanged(ICommand command);
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnViewCanExecuteChanged(ICommand command, object view);
    public virtual void Attach(UIBarButtonItem obj, BindingContext context);
    public virtual void SetValue(UIBarButtonItem obj, BindableProperty property, object value);
    public virtual void Detach(UIBarButtonItem obj, BindingContext context);
    private static void OnClick(object sender, EventArgs e);
}
[RegisterAttribute("UIBlurView")]
public class Intersoft.Crosslight.iOS.UIBlurView : UIView {
    private UIToolbar a;
    private UIColor b;
    private bool c;
    private CALayer d;
    private BlurBackgroundStyle e;
    public BlurBackgroundStyle BlurBackgroundStyle { get; public set; }
    public bool IsBlurEnabled { get; public set; }
    public UIColor BlurTintColor { get; public set; }
    public UIColor BackgroundColor { get; public set; }
    public UIBlurView(NSCoder coder);
    public UIBlurView(IntPtr handle);
    public UIBlurView(NSObjectFlag t);
    public UIBlurView(CGRect frame);
    private void Initialize(CGRect frame);
    public BlurBackgroundStyle get_BlurBackgroundStyle();
    public void set_BlurBackgroundStyle(BlurBackgroundStyle value);
    public bool get_IsBlurEnabled();
    public void set_IsBlurEnabled(bool value);
    public UIColor get_BlurTintColor();
    public void set_BlurTintColor(UIColor value);
    public virtual UIColor get_BackgroundColor();
    public virtual void set_BackgroundColor(UIColor value);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
}
public class Intersoft.Crosslight.iOS.UIButtonBindingAdapter : ControlBindingAdapterBase`1<UIButton> {
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnCommandCanExecuteChanged(ICommand command);
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnViewCanExecuteChanged(ICommand command, object view);
    public virtual void Attach(UIButton obj, BindingContext context);
    public virtual void SetValue(UIButton obj, BindableProperty property, object value);
    public virtual void Detach(UIButton obj, BindingContext context);
    private static void OnClick(object sender, EventArgs e);
}
public class Intersoft.Crosslight.iOS.UIButtonItemBindingAdapter : object {
    [CompilerGeneratedAttribute]
private static Func`2<BindingContext, bool> a;
    public sealed virtual bool Attach(object view, IViewModel viewModel, object model, IEnumerable`1<BindingContext> bindingList);
    private void HandleTouchUpInside(object sender, EventArgs e);
    public sealed virtual void Detach(object view);
    [CompilerGeneratedAttribute]
private static bool <HandleTouchUpInside>b__0(BindingContext o);
}
[CategoryAttribute("Intersoft Crosslight")]
[DisplayNameAttribute("Carousel View")]
[RegisterAttribute("UICarouselView")]
public class Intersoft.Crosslight.iOS.UICarouselView : UIViewBase {
    private bool a;
    private bool b;
    private bool c;
    private int d;
    private int e;
    private object f;
    private UICollectionView g;
    private UIPageControl h;
    private NSObject i;
    private Timer j;
    private i k;
    [CompilerGeneratedAttribute]
private UIViewTemplate l;
    [CompilerGeneratedAttribute]
private BasicImageLoaderSettings m;
    [CompilerGeneratedAttribute]
private ImageSettings n;
    [CompilerGeneratedAttribute]
private bool o;
    [CompilerGeneratedAttribute]
private UIColor p;
    [CompilerGeneratedAttribute]
private UIColor q;
    [CompilerGeneratedAttribute]
private UIViewContentMode r;
    [CompilerGeneratedAttribute]
private float s;
    [CompilerGeneratedAttribute]
private float t;
    [CompilerGeneratedAttribute]
private float u;
    [CompilerGeneratedAttribute]
private bool v;
    public UIViewTemplate CellTemplate { get; public set; }
    public BasicImageLoaderSettings ImageLoaderSettings { get; public set; }
    public ImageSettings ImageSettings { get; public set; }
    [ExportAttribute("ShowPageIndicator")]
[BrowsableAttribute("True")]
public bool ShowPageIndicator { get; public set; }
    [ExportAttribute("PageIndicatorColor")]
[BrowsableAttribute("True")]
public UIColor PageIndicatorColor { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("CurrentPageIndicatorColor")]
public UIColor CurrentPageIndicatorColor { get; public set; }
    [ExportAttribute("ImageContentMode")]
[BrowsableAttribute("True")]
public UIViewContentMode ImageContentMode { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("EnableSlideShow")]
public bool EnableSlideShow { get; public set; }
    [ExportAttribute("SlideShowInterval")]
[BrowsableAttribute("True")]
public int SlideShowInterval { get; public set; }
    [ExportAttribute("ItemWidthOffset")]
[BrowsableAttribute("True")]
public float ItemWidthOffset { get; public set; }
    [ExportAttribute("ItemHeightOffset")]
[BrowsableAttribute("True")]
public float ItemHeightOffset { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("PageIndicatorTopOffset")]
public float PageIndicatorTopOffset { get; public set; }
    public int SelectedIndex { get; public set; }
    public object SelectedItem { get; public set; }
    internal bool a { get; internal set; }
    internal bool b { get; internal set; }
    public UICarouselView(CGRect frame);
    public UICarouselView(NSCoder coder);
    public UICarouselView(IntPtr handle);
    public UICarouselView(NSObjectFlag t);
    [CompilerGeneratedAttribute]
public UIViewTemplate get_CellTemplate();
    [CompilerGeneratedAttribute]
public void set_CellTemplate(UIViewTemplate value);
    [CompilerGeneratedAttribute]
public BasicImageLoaderSettings get_ImageLoaderSettings();
    [CompilerGeneratedAttribute]
public void set_ImageLoaderSettings(BasicImageLoaderSettings value);
    [CompilerGeneratedAttribute]
public ImageSettings get_ImageSettings();
    [CompilerGeneratedAttribute]
public void set_ImageSettings(ImageSettings value);
    [CompilerGeneratedAttribute]
public bool get_ShowPageIndicator();
    [CompilerGeneratedAttribute]
public void set_ShowPageIndicator(bool value);
    [CompilerGeneratedAttribute]
public UIColor get_PageIndicatorColor();
    [CompilerGeneratedAttribute]
public void set_PageIndicatorColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIColor get_CurrentPageIndicatorColor();
    [CompilerGeneratedAttribute]
public void set_CurrentPageIndicatorColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIViewContentMode get_ImageContentMode();
    [CompilerGeneratedAttribute]
public void set_ImageContentMode(UIViewContentMode value);
    public bool get_EnableSlideShow();
    public void set_EnableSlideShow(bool value);
    public int get_SlideShowInterval();
    public void set_SlideShowInterval(int value);
    [CompilerGeneratedAttribute]
public float get_ItemWidthOffset();
    [CompilerGeneratedAttribute]
public void set_ItemWidthOffset(float value);
    [CompilerGeneratedAttribute]
public float get_ItemHeightOffset();
    [CompilerGeneratedAttribute]
public void set_ItemHeightOffset(float value);
    [CompilerGeneratedAttribute]
public float get_PageIndicatorTopOffset();
    [CompilerGeneratedAttribute]
public void set_PageIndicatorTopOffset(float value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    [CompilerGeneratedAttribute]
internal bool get_a();
    [CompilerGeneratedAttribute]
internal void set_a(bool value);
    internal bool get_b();
    internal void set_b(bool value);
    protected virtual void ConfigureView();
    public virtual void MovedToWindow();
    public virtual void LayoutSubviews();
    public void SetSelectedIndex(int index, bool animated);
    protected virtual void OnSelectedIndexChanged(int oldIndex, int newIndex, bool animated);
    protected virtual void OnSelectedItemChanged(object oldItem, object newItem, bool animated);
    internal void StartSlideShow();
    internal void StopSlideShow();
    internal void UpdateSelectedIndex(int index);
    internal void UpdateInitialSelection();
    private void OnTimerTick(object sender, ElapsedEventArgs e);
    protected virtual void Initialize();
    private ItemBindingDescription GetItemBinding();
    private void OnDeviceOrientationChanging(NSNotification notification);
    [CompilerGeneratedAttribute]
private void <ConfigureView>b__6(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnTimerTick>b__8();
    [CompilerGeneratedAttribute]
private void <OnDeviceOrientationChanging>b__9();
}
public class Intersoft.Crosslight.iOS.UICarouselViewBindingAdapter : ControlBindingAdapterBase`1<UICarouselView> {
}
public class Intersoft.Crosslight.iOS.UICarouselViewCell : UICollectionViewCell {
    private UIImageView a;
    private UILabel b;
    private UILabel c;
    public UICarouselViewCell(IntPtr handle);
    protected virtual void ConfigureView();
    public virtual void LayoutSubviews();
    public virtual NSObject ValueForKey(NSString key);
}
[RegisterAttribute("UICellLabel")]
public class Intersoft.Crosslight.iOS.UICellLabel : UILabel {
    public UIColor BackgroundColor { get; public set; }
    public UICellLabel(CGRect frame);
    public UICellLabel(NSObjectFlag flag);
    public UICellLabel(NSCoder coder);
    public UICellLabel(IntPtr handle);
    public virtual UIColor get_BackgroundColor();
    public virtual void set_BackgroundColor(UIColor value);
}
public class Intersoft.Crosslight.iOS.UICollectionViewBindingAdapter : ControlBindingAdapterBase`1<UICollectionView> {
    internal static BindableProperty a;
    private static UICollectionViewBindingAdapter();
    public virtual void Attach(UICollectionView obj, BindingContext context);
    public virtual void SetValue(UICollectionView obj, BindableProperty property, object value);
    public virtual void Detach(UICollectionView obj, BindingContext context);
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.UICollectionViewCellExtensions : object {
    [ExtensionAttribute]
public static void SetCheckmarkAccessory(UICollectionViewCell cell, bool isVisible, bool isAnimated);
}
public class Intersoft.Crosslight.iOS.UICollectionViewController`1 : UICollectionViewController {
    private bool a;
    private Nullable`1<bool> b;
    private object c;
    private TViewModel d;
    private List`1<BindingContext> e;
    private List`1<BindingDefinition> f;
    private Dictionary`2<string, NSObject> g;
    private UISearchBar h;
    private UISearchDisplayController i;
    private UICollectionViewSource j;
    private UICollectionViewLayout k;
    private Dictionary`2<Type, IItemBindingAdapter> l;
    private EventHandler`1<DismissViewEventArgs> m;
    [CompilerGeneratedAttribute]
private bool n;
    [CompilerGeneratedAttribute]
private bool o;
    [CompilerGeneratedAttribute]
private UICollectionViewSource p;
    [CompilerGeneratedAttribute]
private bool q;
    protected bool LoadedFromNib { get; protected set; }
    protected internal bool IsDisposing { get; protected internal set; }
    public TViewModel ViewModel { get; }
    public bool ShowSectionHeader { get; }
    public bool EnterEditModeOnLongPress { get; }
    public string CellIdentifier { get; }
    public CollectionViewInteraction InteractionMode { get; }
    public EditingOptions EditingOptions { get; }
    public UICollectionViewSource CollectionSource { get; public set; }
    public UICollectionViewSource FilteredCollectionSource { get; public set; }
    public UICollectionViewLayout ViewLayout { get; }
    public UIViewTemplate SectionHeaderTemplate { get; }
    public UIViewTemplate SectionFooterTemplate { get; }
    public UIViewTemplate CellTemplate { get; }
    public ImageSettings CellImageSettings { get; }
    public BasicImageLoaderSettings ImageLoaderSettings { get; }
    public string TitleMemberPath { get; }
    public bool FitItemSizeToSuperview { get; }
    public CGSize PreferredItemSize { get; }
    internal bool a { get; }
    internal bool b { get; }
    internal String[] c { get; }
    internal UISearchBar d { get; }
    public UISearchDisplayController SearchDisplayController { get; }
    public Dictionary`2<Type, IItemBindingAdapter> ItemBindingAdapters { get; }
    internal List`1<BindingContext> e { get; }
    internal List`1<BindingDefinition> f { get; }
    private bool Intersoft.Crosslight.iOS.IChildController.IsCreating { get; private set; }
    private bool g { get; private set; }
    private IViewModel Intersoft.Crosslight.ISupportViewModel.ViewModel { get; }
    public UICollectionViewController`1(IntPtr handle);
    public UICollectionViewController`1(string nibName, NSBundle bundle);
    public UICollectionViewController`1(TViewModel viewModel);
    public UICollectionViewController`1(string nibName, NSBundle bundle, TViewModel viewModel);
    public sealed virtual void add_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    public sealed virtual void remove_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    [CompilerGeneratedAttribute]
protected bool get_LoadedFromNib();
    [CompilerGeneratedAttribute]
protected void set_LoadedFromNib(bool value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsDisposing();
    [CompilerGeneratedAttribute]
protected internal void set_IsDisposing(bool value);
    public TViewModel get_ViewModel();
    public virtual bool get_ShowSectionHeader();
    public virtual bool get_EnterEditModeOnLongPress();
    public virtual string get_CellIdentifier();
    public virtual CollectionViewInteraction get_InteractionMode();
    public virtual EditingOptions get_EditingOptions();
    [CompilerGeneratedAttribute]
public virtual UICollectionViewSource get_CollectionSource();
    [CompilerGeneratedAttribute]
public virtual void set_CollectionSource(UICollectionViewSource value);
    public virtual UICollectionViewSource get_FilteredCollectionSource();
    public virtual void set_FilteredCollectionSource(UICollectionViewSource value);
    public virtual UICollectionViewLayout get_ViewLayout();
    public virtual UIViewTemplate get_SectionHeaderTemplate();
    public virtual UIViewTemplate get_SectionFooterTemplate();
    public virtual UIViewTemplate get_CellTemplate();
    public virtual ImageSettings get_CellImageSettings();
    public virtual BasicImageLoaderSettings get_ImageLoaderSettings();
    public virtual string get_TitleMemberPath();
    public virtual bool get_FitItemSizeToSuperview();
    public virtual CGSize get_PreferredItemSize();
    internal bool get_a();
    internal bool get_b();
    internal String[] get_c();
    internal UISearchBar get_d();
    public virtual UISearchDisplayController get_SearchDisplayController();
    public sealed virtual Dictionary`2<Type, IItemBindingAdapter> get_ItemBindingAdapters();
    internal List`1<BindingContext> get_e();
    internal List`1<BindingDefinition> get_f();
    protected virtual void OnViewDismissed(NavigationResult result);
    private sealed virtual override void Intersoft.Crosslight.IViewContext.OnViewDismissed(NavigationResult result);
    private sealed virtual override void Intersoft.Crosslight.IViewModelInitializer.SetViewModel(IViewModel viewModel);
    protected virtual TViewModel CreateViewModel();
    protected virtual void InitializeViewModel();
    protected virtual void InitializeBindings();
    protected virtual void OnViewCreated();
    protected virtual ItemBindingDescription GetItemBinding();
    protected virtual void OnViewDisposed();
    protected virtual void InitializeView();
    protected virtual void OnViewInitialized();
    public void RegisterViewIdentifier(string id, NSObject view);
    public void AddBinding(BindingContext bindingContext);
    public void AddBinding(NSObject targetView, BindableProperty property, BindingDescription binding);
    public void AddBinding(NSObject targetView, BindableProperty property, string path);
    public void AddBinding(NSObject targetView, BindableProperty property, string path, BindingMode mode);
    public void AddBinding(string targetViewName, BindableProperty property, BindingDescription binding);
    public void AddBinding(string targetViewName, BindableProperty property, string path);
    public void AddBinding(string targetViewName, BindableProperty property, string path, BindingMode mode);
    public void RegisterItemBindingAdapter();
    private void ImportFromBindingProvider();
    private void ProcessPropertySets();
    private void RegisterBindings();
    private void EnsureViewModel(bool initializeEvents);
    private void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnViewModelResourcesChanged();
    public virtual NSObject ValueForKey(NSString key);
    public virtual NSObject ValueForUndefinedKey(NSString key);
    public virtual void ViewDidLoad();
    public virtual void SetEditing(bool editing, bool animated);
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    public virtual void DidReceiveMemoryWarning();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewWillDisappear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void PrepareForSegue(UIStoryboardSegue segue, NSObject sender);
    public virtual bool ShouldPerformSegue(string segueIdentifier, NSObject sender);
    private sealed virtual override bool Intersoft.Crosslight.iOS.IChildController.get_IsCreating();
    private sealed virtual override void Intersoft.Crosslight.iOS.IChildController.set_IsCreating(bool value);
    [CompilerGeneratedAttribute]
private bool get_g();
    [CompilerGeneratedAttribute]
private void set_g(bool value);
    public virtual void DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override void Intersoft.Crosslight.INavigationContext.DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override IViewModel Intersoft.Crosslight.ISupportViewModel.get_ViewModel();
    public sealed virtual object FindName(string name);
    public sealed virtual T FindName(string name);
    public virtual TService GetService();
    public virtual TService GetService(bool newInstance);
    [CompilerGeneratedAttribute]
private static bool <RegisterItemBindingAdapter>b__0(KeyValuePair`2<Type, IItemBindingAdapter> o);
    [CompilerGeneratedAttribute]
private void <SetEditing>b__2();
    [CompilerGeneratedAttribute]
private void <SetEditing>b__3();
}
public abstract class Intersoft.Crosslight.iOS.UIControlBase : UIControl {
    private Dictionary`2<string, object> a;
    private EventHandler b;
    private PropertyChangedEventHandler c;
    [CompilerGeneratedAttribute]
private bool d;
    [CompilerGeneratedAttribute]
private ISite e;
    public bool IsInitialized { get; protected set; }
    public ISite Site { get; public set; }
    public bool IsDesign { get; }
    public UIControlBase(IntPtr handle);
    public UIControlBase(NSObjectFlag t);
    public UIControlBase(CGRect frame);
    public UIControlBase(NSCoder coder);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
protected void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ISite get_Site();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Site(ISite value);
    public bool get_IsDesign();
    protected virtual T GetValue(string propertyName);
    protected virtual T GetValue(string propertyName, T defaultValue, Func`2<T, T> designValueCallback);
    protected virtual void SetValue(string propertyName, object value, bool invalidateView, bool recreateView);
    protected virtual object GetDefaultTypeValue();
    protected virtual void Initialize();
    protected virtual void InitializeView();
    public virtual void InvalidateView();
    public virtual void WillMoveToSuperview(UIView newsuper);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
}
public class Intersoft.Crosslight.iOS.UICustomPickerViewSource : UIPickerViewSource {
    private UIPickerView a;
    private ItemBindingDescription b;
    private List`1<UIView> c;
    public UICustomPickerViewSource(UIPickerView pickerView, ItemBindingDescription bindingDescription, IViewModel viewModel);
    public virtual UIView GetView(UIPickerView picker, nint nrow, nint component, UIView view);
    private void LayoutSubviews(UIView view);
}
public class Intersoft.Crosslight.iOS.UIDatePickerBindingAdapter : ControlBindingAdapterBase`1<UIDatePicker> {
    public virtual void Attach(UIDatePicker obj, BindingContext context);
    private void OnValueChanged(object sender, EventArgs e);
    public virtual object GetValue(UIDatePicker obj, BindableProperty property);
    public virtual void SetValue(UIDatePicker obj, BindableProperty property, object value);
    public virtual void Detach(UIDatePicker obj, BindingContext context);
    public static DateTime NSDateToDateTime(NSDate date);
    public static NSDate DateTimeToNSDate(DateTime date);
}
public class Intersoft.Crosslight.iOS.UIDetailViewController`1 : UIViewController`1<TViewModel> {
    private List`1<UIBarButtonItem> a;
    private UIBarButtonItem[] a { get; }
    public string NoItemMessage { get; }
    public object CurrentItem { get; }
    public UIDetailViewController`1(IntPtr handle);
    public UIDetailViewController`1(TViewModel viewModel);
    public UIDetailViewController`1(string nibName, NSBundle bundle);
    private UIBarButtonItem[] get_a();
    public virtual string get_NoItemMessage();
    public object get_CurrentItem();
    protected virtual void OnViewCreated();
    private void AddLeftButton(UIBarButtonItem button, bool isLeftMost);
    private void RemoveLeftButton(UIBarButtonItem button);
    private void SynchronizeLeftButtons();
    public virtual void WillHideMasterViewController(UIBarButtonItem barButtonItem, UIPopoverController popoverController);
    public virtual void WillShowMasterViewController(UIBarButtonItem barButtonItem);
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.UIDeviceExtensions : object {
    [ExtensionAttribute]
public static bool IsLandscapeOrientation(UIDevice device);
    [ExtensionAttribute]
public static bool IsPortraitOrientation(UIDevice device);
    [ExtensionAttribute]
public static UIInterfaceOrientation GetOrientation(UIDevice device);
}
public class Intersoft.Crosslight.iOS.UIDrawerNavigationController`1 : UIViewController`1<TDrawerViewModel> {
    private UINavigationController a;
    private UIViewController b;
    private UIViewController c;
    private UIBarButtonItem d;
    private UIBarButtonItem e;
    private UIView f;
    private UIView g;
    private UIView h;
    private UIView i;
    private DrawerSettings j;
    private UITapGestureRecognizer k;
    private Nullable`1<UIStatusBarStyle> l;
    private bool m;
    private bool n;
    private bool o;
    private nfloat p;
    private NavigationItem q;
    private Dictionary`2<int, UIStatusBarStyle> r;
    public UIViewController VisibleViewController { get; }
    public UIViewController LeftViewController { get; }
    public UIViewController RightViewController { get; }
    public UINavigationController CenterViewController { get; }
    public UIBarButtonItem LeftButtonItem { get; public set; }
    public UIBarButtonItem RightButtonItem { get; public set; }
    public DrawerSettings DrawerSettings { get; }
    public UIView StatusBarView { get; }
    public bool HasRightViewController { get; }
    public bool HasLeftViewController { get; }
    public bool IsOpen { get; }
    public bool IsLeftOpen { get; }
    public bool IsRightOpen { get; }
    public UIStatusBarAnimation PreferredStatusBarUpdateAnimation { get; }
    public UIDrawerNavigationController`1(IntPtr handle);
    public UIDrawerNavigationController`1(TDrawerViewModel viewModel);
    public sealed virtual UIViewController get_VisibleViewController();
    public sealed virtual UIViewController get_LeftViewController();
    public sealed virtual UIViewController get_RightViewController();
    public sealed virtual UINavigationController get_CenterViewController();
    public UIBarButtonItem get_LeftButtonItem();
    public void set_LeftButtonItem(UIBarButtonItem value);
    public UIBarButtonItem get_RightButtonItem();
    public void set_RightButtonItem(UIBarButtonItem value);
    public virtual DrawerSettings get_DrawerSettings();
    public virtual UIView get_StatusBarView();
    public bool get_HasRightViewController();
    public bool get_HasLeftViewController();
    public bool get_IsOpen();
    public bool get_IsLeftOpen();
    public bool get_IsRightOpen();
    public virtual void SetLeftViewController(UIViewController viewController, bool animated);
    public virtual void SetRightViewController(UIViewController viewController, bool animated);
    public virtual void SetContentViewController(object source, UIViewController viewController, bool animated);
    public virtual void SetContentViewController(UIViewController viewController, bool animated);
    protected virtual void InitializeView();
    protected virtual void InitializeViewModel();
    protected virtual void InitializeSettings();
    protected virtual void InitializeViewControllers();
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnViewInitialized();
    protected virtual void OnViewCreated();
    protected virtual void OnViewDisposed();
    public virtual UIStatusBarAnimation get_PreferredStatusBarUpdateAnimation();
    public virtual UIStatusBarStyle PreferredStatusBarStyle();
    public virtual bool PrefersStatusBarHidden();
    private void SynchronizeSelection();
    private bool CheckIsOpen(DrawerSide side, float originalX);
    private void RaiseNavigated(IViewModel viewModel);
    private UIStatusBarStyle GetStatusBarStyle(bool isOpen, DrawerSide side);
    private sealed virtual override bool Intersoft.Crosslight.iOS.IDrawerNavigationController.ShouldBeginPanGesture(UIGestureRecognizer panGestureRecognizer, UIGestureRecognizer otherRecognizer);
    protected virtual bool ShouldBeginPanGesture(UIGestureRecognizer panGestureRecognizer, UIGestureRecognizer otherRecognizer);
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewWillDisappear(bool animated);
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    protected virtual void Dispose(bool disposing);
    public void ToggleDrawer(DrawerSide side);
    public sealed virtual void Open(DrawerSide side, bool animated);
    private void EnsureVisibleDrawer(DrawerSide side);
    private void Open(DrawerSide side, bool isUserInitiated, bool animated, bool forceOpen);
    public sealed virtual void Close(bool animated);
    private IViewModel GetViewModel(UIViewController viewController);
    private void AnimateDrawerContent(DrawerSide openedDrawer, CGRect frame);
    private void AnimateStatusBar(DrawerSide openedDrawer, CGRect frame);
    private void SynchronizeStatusBar(bool updateAlpha);
    private void OnDragMenu(UIPanGestureRecognizer panGesture);
    private void SetLocation(CGRect frame);
    private void SynchronizeListButtons();
    private UIImage CreateListImage();
    private void MakeRoundCornerMask();
    private void ClearMask();
    protected virtual UIView CreateShadowView(DrawerSide side);
    protected virtual UIView CreateBlurView();
    protected virtual UIView CreateBackgroundView();
    private UIViewController CreateViewController(IViewModel viewModel);
    private void LeftButton_Clicked(object sender, EventArgs e);
    private void RightButton_Clicked(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <OnViewInitialized>b__2();
    [CompilerGeneratedAttribute]
private void <OnViewCreated>b__3();
    [CompilerGeneratedAttribute]
private void <WillRotate>b__5();
    [CompilerGeneratedAttribute]
private void <Open>b__7();
    [CompilerGeneratedAttribute]
private void <Close>b__b();
}
public class Intersoft.Crosslight.iOS.UIDrawerSearchDisplayController : UISearchDisplayController {
    private UIBarButtonItem[] a;
    public UIDrawerSearchDisplayController(UISearchBar searchBar, UIViewController viewController);
    public virtual void SetActive(bool visible, bool animated);
}
public class Intersoft.Crosslight.iOS.UIEditAction : object {
    private UITableViewRowAction a;
    [CompilerGeneratedAttribute]
private string b;
    [CompilerGeneratedAttribute]
private Action`2<UITableViewRowAction, NSIndexPath> c;
    public UIColor BackgroundColor { get; public set; }
    public UIVisualEffect BackgroundEffect { get; public set; }
    public string Title { get; public set; }
    public string Name { get; public set; }
    internal Action`2<UITableViewRowAction, NSIndexPath> a { get; internal set; }
    public UIEditAction(string title);
    public UIEditAction(string title, bool isDestructive);
    public UIEditAction(string title, UIColor backgroundColor);
    public UIColor get_BackgroundColor();
    public void set_BackgroundColor(UIColor value);
    public UIVisualEffect get_BackgroundEffect();
    public void set_BackgroundEffect(UIVisualEffect value);
    public string get_Title();
    public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
internal Action`2<UITableViewRowAction, NSIndexPath> get_a();
    [CompilerGeneratedAttribute]
internal void set_a(Action`2<UITableViewRowAction, NSIndexPath> value);
    internal UITableViewRowAction GetNativeObject();
    private void ActionHandler(UITableViewRowAction rowAction, NSIndexPath path);
}
public class Intersoft.Crosslight.iOS.UIFormViewController`1 : UITableViewController`1<TViewModel> {
    private Dictionary`2<ComponentDefinitionBase, VisibilityBindingAttribute> a;
    private Dictionary`2<PropertyDefinition, EnabledBindingAttribute> b;
    private PropertyDefinition c;
    private List`1<IComponentViewDelegate> d;
    private List`1<UIBarButtonItem> e;
    private bool f;
    private bool g;
    private bool h;
    private object i;
    private UILabel j;
    [CompilerGeneratedAttribute]
private CancelButtonVisibility k;
    [CompilerGeneratedAttribute]
private DoneButtonVisibility l;
    [CompilerGeneratedAttribute]
private FormDefinition m;
    [CompilerGeneratedAttribute]
private UIBarButtonItem n;
    [CompilerGeneratedAttribute]
private UIBarButtonItem o;
    [CompilerGeneratedAttribute]
private IPicker p;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyDefinition, bool> q;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyDefinition, bool> r;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyDefinition, bool> s;
    [CompilerGeneratedAttribute]
private static Func`2<Attribute, bool> t;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<ComponentDefinitionBase, VisibilityBindingAttribute>, string> u;
    public CancelButtonVisibility CancelButtonVisibility { get; public set; }
    public DoneButtonVisibility DoneButtonVisibility { get; public set; }
    public FormDefinition Form { get; private set; }
    public UIBarButtonItem DoneButtonItem { get; public set; }
    public UIBarButtonItem CancelButtonItem { get; public set; }
    public IPicker ActivePicker { get; public set; }
    public bool IsDetailChanged { get; public set; }
    private bool a { get; }
    public PropertyDefinition ActiveProperty { get; public set; }
    public object CurrentItem { get; public set; }
    private Dictionary`2<ComponentDefinitionBase, VisibilityBindingAttribute> b { get; }
    private Dictionary`2<PropertyDefinition, EnabledBindingAttribute> c { get; }
    private UIBarButtonItem[] d { get; }
    public UITableViewStyle TableViewStyle { get; }
    public bool AllowSearching { get; }
    public bool HideKeyboardOnScroll { get; }
    public FormState FormState { get; }
    public string NoItemMessage { get; }
    public UIFormViewController`1(TViewModel viewModel);
    [CompilerGeneratedAttribute]
public CancelButtonVisibility get_CancelButtonVisibility();
    [CompilerGeneratedAttribute]
public void set_CancelButtonVisibility(CancelButtonVisibility value);
    [CompilerGeneratedAttribute]
public DoneButtonVisibility get_DoneButtonVisibility();
    [CompilerGeneratedAttribute]
public void set_DoneButtonVisibility(DoneButtonVisibility value);
    [CompilerGeneratedAttribute]
public virtual FormDefinition get_Form();
    [CompilerGeneratedAttribute]
private void set_Form(FormDefinition value);
    [CompilerGeneratedAttribute]
public virtual UIBarButtonItem get_DoneButtonItem();
    [CompilerGeneratedAttribute]
public virtual void set_DoneButtonItem(UIBarButtonItem value);
    [CompilerGeneratedAttribute]
public virtual UIBarButtonItem get_CancelButtonItem();
    [CompilerGeneratedAttribute]
public virtual void set_CancelButtonItem(UIBarButtonItem value);
    [CompilerGeneratedAttribute]
public virtual IPicker get_ActivePicker();
    [CompilerGeneratedAttribute]
public virtual void set_ActivePicker(IPicker value);
    public bool get_IsDetailChanged();
    public void set_IsDetailChanged(bool value);
    private bool get_a();
    public virtual PropertyDefinition get_ActiveProperty();
    public virtual void set_ActiveProperty(PropertyDefinition value);
    public sealed virtual object get_CurrentItem();
    public void set_CurrentItem(object value);
    private Dictionary`2<ComponentDefinitionBase, VisibilityBindingAttribute> get_b();
    private Dictionary`2<PropertyDefinition, EnabledBindingAttribute> get_c();
    private UIBarButtonItem[] get_d();
    public virtual UITableViewStyle get_TableViewStyle();
    public sealed virtual bool get_AllowSearching();
    public virtual bool get_HideKeyboardOnScroll();
    public virtual FormState get_FormState();
    public virtual string get_NoItemMessage();
    public sealed virtual void AutoShowDoneButton(bool isVisible);
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnDetailPropertyChanged(PropertyChangedEventArgs e);
    protected virtual BindableProperty GetBindableProperty(string property);
    protected virtual void InitializeView();
    protected virtual void OnViewInitialized();
    private void Initialize();
    private void AutoRegisterViewIdentifiers();
    protected virtual void OnViewCreated();
    protected virtual void SaveChangesOnViewDisappear();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    protected virtual void ViewWillDisappearAfterTransition(bool animated);
    private void ViewWillDisappearCore(bool animated);
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    public virtual void DidRotate(UIInterfaceOrientation fromInterfaceOrientation);
    public virtual void InvalidateSize(bool isInitializing);
    public virtual void AddComponentDelegate(IComponentViewDelegate componentDelegate);
    public virtual T FindComponentDelegate();
    public virtual string GetString(string value, string resourceKey);
    protected string GetResourceString(string key);
    protected virtual void Dispose(bool disposing);
    public T EvaluateValueBinding(BindingAttribute bindingAttribute);
    public object EvaluateValueBinding(BindingAttribute bindingAttribute, Type type);
    private void InitializeForm();
    private void InvalidateView();
    private void InitializeNavigationItem();
    private bool IsInModalView();
    private void DetailItem_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void NotifyViewOnValueChange(PropertyChangedEventArgs e);
    private void NotifyVisibilityChanged(string propertyName, BindingSourceType sourceType);
    private void NotifyEnabledChanged(string propertyName, BindingSourceType sourceType);
    private void AddLeftButton(UIBarButtonItem button, bool isLeftMost);
    private void RemoveLeftButton(UIBarButtonItem button);
    private void SynchronizeLeftButtons();
    public virtual void WillHideMasterViewController(UIBarButtonItem barButtonItem, UIPopoverController popoverController);
    public virtual void WillShowMasterViewController(UIBarButtonItem barButtonItem);
    public virtual void PopoverDismissed();
    [CompilerGeneratedAttribute]
private void <InitializeView>b__22(UITapGestureRecognizer o);
    [CompilerGeneratedAttribute]
private void <Initialize>b__24(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private static bool <AutoRegisterViewIdentifiers>b__25(PropertyDefinition o);
    [CompilerGeneratedAttribute]
private static bool <ViewWillAppear>b__27(PropertyDefinition o);
    [CompilerGeneratedAttribute]
private static bool <ViewWillAppear>b__28(PropertyDefinition o);
    [CompilerGeneratedAttribute]
private void <DidRotate>b__2b();
    [CompilerGeneratedAttribute]
private static bool <FindComponentDelegate>b__2d(IComponentViewDelegate o);
    [CompilerGeneratedAttribute]
private static bool <NotifyViewOnValueChange>b__32(Attribute o);
    [CompilerGeneratedAttribute]
private static string <NotifyVisibilityChanged>b__37(KeyValuePair`2<ComponentDefinitionBase, VisibilityBindingAttribute> o);
}
public class Intersoft.Crosslight.iOS.UIImageLoader : object {
    private ItemBindingDescription a;
    private BasicImageLoaderSettings b;
    private ImageSettings c;
    private UIImageLoaderDelegate d;
    private UIImage e;
    private IImageLoaderService f;
    private IResourceCacheService g;
    public ImageSettings CellImageSettings { get; }
    private IImageLoaderService a { get; }
    private IResourceCacheService b { get; }
    public UIImageLoader(ItemBindingDescription bindingDescription, BasicImageLoaderSettings imageLoaderSettings, ImageSettings imageSettings);
    public ImageSettings get_CellImageSettings();
    internal void SetImageMemberPath(string path);
    private IImageLoaderService get_a();
    private IResourceCacheService get_b();
    public virtual UIImage GetImageFromSource(UIImageView imageView, object imageSource, object item);
    public virtual UIImage GetImage(UIImageView imageView, object item);
    public virtual void FormatImageView(UIImageView imageView);
}
public class Intersoft.Crosslight.iOS.UIImageLoaderDelegate : ImageLoaderDelegate {
    private UIImageLoader a;
    public UIImageLoaderDelegate(UIImageLoader imageLoader);
    public virtual void Initializing(IImageLoaderContext context);
    public virtual void Canceled(IImageLoaderContext context, string reason);
    public virtual void Failed(IImageLoaderContext context, Exception error);
    public virtual void Completed(IImageLoaderContext context, Byte[] resultData);
    private void ResetImageView(IImageLoaderContext context, bool resetImage);
}
public class Intersoft.Crosslight.iOS.UIImageViewBindingAdapter : ControlBindingAdapterBase`1<UIImageView> {
    private a a;
    public virtual object GetValue(UIImageView obj, BindableProperty property);
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.UIImageViewBindingAdapter/b")]
[DebuggerStepThroughAttribute]
public virtual void SetValue(UIImageView obj, BindableProperty property, object value);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod5(UIImageView , BindableProperty , object );
}
public class Intersoft.Crosslight.iOS.UIKeyboardScrollView : UIView {
    private bool a;
    private bool b;
    private bool c;
    private bool d;
    private bool e;
    private bool f;
    private nfloat g;
    private nfloat h;
    private Nullable`1<UIInterfaceOrientation> i;
    private NSObject j;
    private NSObject k;
    private NSObject l;
    private NSObject m;
    private NSObject n;
    private NSObject o;
    private NSObject p;
    [CompilerGeneratedAttribute]
private UIView q;
    [CompilerGeneratedAttribute]
private UIView r;
    [CompilerGeneratedAttribute]
private UIView s;
    [CompilerGeneratedAttribute]
private UIScrollView t;
    [CompilerGeneratedAttribute]
private Action`1<UIResponder> u;
    [CompilerGeneratedAttribute]
private UIScrollViewKeyboardDismissMode v;
    [CompilerGeneratedAttribute]
private bool w;
    public UIView ActiveView { get; private set; }
    public UIView InactiveView { get; private set; }
    public UIView ContentView { get; private set; }
    public UIScrollView ScrollView { get; private set; }
    public Action`1<UIResponder> InitializeResponder { get; public set; }
    public UIScrollViewKeyboardDismissMode KeyboardDismissMode { get; public set; }
    public bool AutoScrollContentToBottom { get; public set; }
    public UIWindow Window { get; }
    private bool a { get; }
    private bool b { get; }
    private UIView c { get; }
    private UIView d { get; }
    public UIKeyboardScrollView(CGRect frame);
    public UIKeyboardScrollView(UIView toolbarView);
    public UIKeyboardScrollView(UIView inactiveToolbarView, UIView activeToolbarView);
    [CompilerGeneratedAttribute]
public UIView get_ActiveView();
    [CompilerGeneratedAttribute]
private void set_ActiveView(UIView value);
    [CompilerGeneratedAttribute]
public UIView get_InactiveView();
    [CompilerGeneratedAttribute]
private void set_InactiveView(UIView value);
    [CompilerGeneratedAttribute]
public UIView get_ContentView();
    [CompilerGeneratedAttribute]
private void set_ContentView(UIView value);
    [CompilerGeneratedAttribute]
public UIScrollView get_ScrollView();
    [CompilerGeneratedAttribute]
private void set_ScrollView(UIScrollView value);
    [CompilerGeneratedAttribute]
public Action`1<UIResponder> get_InitializeResponder();
    [CompilerGeneratedAttribute]
public void set_InitializeResponder(Action`1<UIResponder> value);
    [CompilerGeneratedAttribute]
public UIScrollViewKeyboardDismissMode get_KeyboardDismissMode();
    [CompilerGeneratedAttribute]
public void set_KeyboardDismissMode(UIScrollViewKeyboardDismissMode value);
    [CompilerGeneratedAttribute]
public bool get_AutoScrollContentToBottom();
    [CompilerGeneratedAttribute]
public void set_AutoScrollContentToBottom(bool value);
    public virtual UIWindow get_Window();
    private bool get_a();
    private bool get_b();
    private UIView get_c();
    private UIView get_d();
    public void Initialize(UIScrollView scrollView, UIView toolbarView);
    public void Initialize(UIScrollView scrollView, UIView inactiveToolbarView, UIView activeToolbarView);
    public void AttachTo(UIView contentView, UIScrollView scrollView);
    public void FocusActiveResponder();
    public void ShowKeyboard();
    public void HideKeyboard();
    public void ScrollToBottom(bool animated);
    public void ScrollToBottomAutoLayout(bool animated);
    public virtual void RemoveFromSuperview();
    protected virtual void Dispose(bool disposing);
    private void OnScrollViewScrolled(object sender, EventArgs e);
    private void ScrollToBottomInSyncWithKeyboardDismiss(bool animated);
    private bool IsKeyboardSizeEqualsInputViewSize(CGRect keyboardFrame, CGRect inputViewBounds);
    private bool IsKeyboardFrameChangeEqualsKeyboardHeight(CGRect beginFrame, CGRect endFrame);
    private bool IsKeyboardFullyHidden(CGRect keyboardFrame);
    private bool IsKeyboardFullyShown(CGRect keyboardFrame);
    private bool IsKeyboardFrameChangeEqualsInputViewHeight(CGRect beginFrame, CGRect endFrame, CGRect inputViewBounds);
    private void UpdateInputViewFrame(UIInterfaceOrientation orientation, bool updateActiveView, bool forceReload);
    private void UpdateInputViewFrameIfOrientationChanged(UIInterfaceOrientation orientation);
    private void UpdateScrollViewInsets(CGRect keyboardFrame);
    private void ScrollToBottomWithOptions(UIViewAnimationOptions options, double duration, CGRect keyboardFrame, Action completionBlock);
    private void SyncScrollPosition(UIInterfaceOrientation orientation);
    private void OnKeyboardWillHide(NSNotification notification);
    private void OnKeyboardWillHide(NSNotification notification, bool calledFromChangeFrame);
    private void OnKeyboardDidShow(NSNotification notification);
    private void OnKeyboardDidHide(NSNotification notification);
    private void OnKeyboardWillShow(NSNotification notification);
    private UIViewAnimationOptions GetAnimationOptionsForCurve(UIViewAnimationCurve curve);
    private void OnKeyboardWillChangeFrame(NSNotification notification);
    private void OnKeyboardWillSwitch(NSNotification notification);
    private void OnDeviceOrientationChanging(NSNotification notification);
    private void OnDeviceOrientationChanged(NSNotification notification);
    [CompilerGeneratedAttribute]
private void <AttachTo>b__0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <AttachTo>b__3();
    [CompilerGeneratedAttribute]
private void <OnKeyboardWillShow>b__11();
    [CompilerGeneratedAttribute]
private void <OnKeyboardWillSwitch>b__17();
}
public class Intersoft.Crosslight.iOS.UILabelBindingAdapter : ControlBindingAdapterBase`1<UILabel> {
    public virtual void SetValue(UILabel obj, BindableProperty property, object value);
}
public class Intersoft.Crosslight.iOS.UIMasterDetailViewController`1 : UISplitViewController {
    private TMasterViewModel a;
    private List`1<BindingContext> b;
    private List`1<BindingDefinition> c;
    private Dictionary`2<string, NSObject> d;
    private UIViewController e;
    private bool f;
    private bool g;
    private EventHandler`1<DismissViewEventArgs> h;
    [CompilerGeneratedAttribute]
private bool i;
    [CompilerGeneratedAttribute]
private bool j;
    [CompilerGeneratedAttribute]
private Type k;
    [CompilerGeneratedAttribute]
private Type l;
    [CompilerGeneratedAttribute]
private UIViewController m;
    [CompilerGeneratedAttribute]
private UIViewController n;
    protected bool LoadedFromNib { get; protected set; }
    protected internal bool IsDisposing { get; protected internal set; }
    public TMasterViewModel MasterViewModel { get; }
    public bool IsActive { get; internal set; }
    private bool Intersoft.Crosslight.iOS.IMasterDetailViewController.CloseDetailOnBackNavigation { get; }
    public Type MasterViewControllerType { get; protected set; }
    public Type DetailViewControllerType { get; protected set; }
    public UIViewController MasterViewController { get; protected set; }
    public UIViewController DetailViewController { get; protected set; }
    internal List`1<BindingContext> a { get; }
    internal List`1<BindingDefinition> b { get; }
    protected bool EnsureNavigationContext { get; }
    protected Type SelectionDetailType { get; }
    public string MasterButtonDisplayMemberPath { get; }
    private IViewModel Intersoft.Crosslight.ISupportViewModel.ViewModel { get; }
    public UIMasterDetailViewController`1(IntPtr handle);
    public UIMasterDetailViewController`1(TMasterViewModel masterViewModel);
    public UIMasterDetailViewController`1(string nibName, NSBundle bundle);
    public sealed virtual void add_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    public sealed virtual void remove_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    [CompilerGeneratedAttribute]
protected bool get_LoadedFromNib();
    [CompilerGeneratedAttribute]
protected void set_LoadedFromNib(bool value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsDisposing();
    [CompilerGeneratedAttribute]
protected internal void set_IsDisposing(bool value);
    public TMasterViewModel get_MasterViewModel();
    public bool get_IsActive();
    internal void set_IsActive(bool value);
    private sealed virtual override bool Intersoft.Crosslight.iOS.IMasterDetailViewController.get_CloseDetailOnBackNavigation();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_MasterViewControllerType();
    [CompilerGeneratedAttribute]
protected void set_MasterViewControllerType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DetailViewControllerType();
    [CompilerGeneratedAttribute]
protected void set_DetailViewControllerType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual UIViewController get_MasterViewController();
    [CompilerGeneratedAttribute]
protected void set_MasterViewController(UIViewController value);
    [CompilerGeneratedAttribute]
public sealed virtual UIViewController get_DetailViewController();
    [CompilerGeneratedAttribute]
protected void set_DetailViewController(UIViewController value);
    internal List`1<BindingContext> get_a();
    internal List`1<BindingDefinition> get_b();
    protected virtual bool get_EnsureNavigationContext();
    protected virtual Type get_SelectionDetailType();
    public virtual string get_MasterButtonDisplayMemberPath();
    protected virtual void OnViewDismissed(NavigationResult result);
    protected virtual void InitializeViewModel();
    protected virtual void InitializeViewControllers();
    protected virtual void InitializeBindings();
    protected virtual void OnViewInitialized();
    protected virtual void OnViewCreated();
    protected virtual void OnViewDisposed();
    protected virtual void InitializeView();
    public void AddBinding(UIView targetView, BindableProperty property, BindingDescription binding);
    public void AddBinding(UIView targetView, BindableProperty property, string path);
    public void AddBinding(UIView targetView, BindableProperty property, string path, BindingMode mode);
    public void AddBinding(string targetViewName, BindableProperty property, BindingDescription binding);
    public void AddBinding(string targetViewName, BindableProperty property, string path);
    public void AddBinding(string targetViewName, BindableProperty property, string path, BindingMode mode);
    public void RegisterViewIdentifier(string id, NSObject view);
    public virtual void SetInitialSelection(NSIndexPath index, bool isProgrammatic);
    public virtual bool IsDetailViewControllerOfType(Type detailViewControllerType);
    public virtual bool IsMasterViewControllerOfType(Type masterViewControllerType);
    public virtual void SetDetailViewController(UIViewController targetViewController, bool isAnimated);
    public virtual void SetDetailViewController(UIViewController targetViewController, bool isAnimated, bool autoDisposeViewController);
    private void ImportFromBindingProvider();
    private void ProcessPropertySets();
    private void RegisterBindings();
    public virtual NSObject ValueForKey(NSString key);
    public virtual NSObject ValueForUndefinedKey(NSString key);
    public virtual void ViewDidLoad();
    public virtual void ViewDidAppear(bool animated);
    public sealed virtual void SynchronizeSelection(bool animated);
    public virtual bool ShouldAutorotate();
    protected virtual void Dispose(bool disposing);
    public virtual void DidReceiveMemoryWarning();
    private sealed virtual override void Intersoft.Crosslight.IViewModelInitializer.SetViewModel(IViewModel viewModel);
    private sealed virtual override void Intersoft.Crosslight.IViewContext.OnViewDismissed(NavigationResult result);
    public virtual void DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override void Intersoft.Crosslight.INavigationContext.DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override IViewModel Intersoft.Crosslight.ISupportViewModel.get_ViewModel();
    public sealed virtual object FindName(string name);
    public sealed virtual T FindName(string name);
    public virtual TService GetService();
    public virtual TService GetService(bool newInstance);
}
public class Intersoft.Crosslight.iOS.UIMasterDetailViewController`2 : UIMasterDetailViewController`1<TMasterViewModel> {
    private TDetailViewModel a;
    public UIMasterDetailViewController`2(IntPtr handle);
    public UIMasterDetailViewController`2(TMasterViewModel masterViewModel);
    public UIMasterDetailViewController`2(TMasterViewModel masterViewModel, TDetailViewModel detailViewModel);
    public UIMasterDetailViewController`2(string nibName, NSBundle bundle);
    protected virtual void InitializeViewControllers();
    protected virtual void OnViewDisposed();
    public virtual void SetInitialSelection(NSIndexPath index, bool isProgrammatic);
    private void OnListViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual bool IsDetailViewControllerOfType(Type detailViewControllerType);
    public virtual bool IsMasterViewControllerOfType(Type masterViewControllerType);
    [CompilerGeneratedAttribute]
private void <OnListViewPropertyChanged>b__6();
}
public class Intersoft.Crosslight.iOS.UIMessageInputView : UIView {
    private bool a;
    private bool b;
    private nfloat c;
    private UITextView d;
    private UILabel e;
    private UIBarButtonItem f;
    private UIBarButtonItem g;
    [CompilerGeneratedAttribute]
private string h;
    [CompilerGeneratedAttribute]
private UIColor i;
    [CompilerGeneratedAttribute]
private UIFont j;
    [CompilerGeneratedAttribute]
private UIColor k;
    [CompilerGeneratedAttribute]
private float l;
    [CompilerGeneratedAttribute]
private float m;
    [CompilerGeneratedAttribute]
private float n;
    [CompilerGeneratedAttribute]
private float o;
    [CompilerGeneratedAttribute]
private float p;
    [CompilerGeneratedAttribute]
private bool q;
    [CompilerGeneratedAttribute]
private string r;
    [CompilerGeneratedAttribute]
private UIColor s;
    [CompilerGeneratedAttribute]
private Action`1<float> t;
    [CompilerGeneratedAttribute]
private Action u;
    [CompilerGeneratedAttribute]
private Action v;
    [CompilerGeneratedAttribute]
private Nullable`1<CGPoint> w;
    public string Placeholder { get; public set; }
    public UIColor PlaceholderTextColor { get; public set; }
    public UIFont TextViewFont { get; public set; }
    public UIColor TextViewColor { get; public set; }
    public float MaxInputHeightLandscape { get; public set; }
    public float MaxInputHeightPortrait { get; public set; }
    public float TextViewMarginVertical { get; public set; }
    public float TextViewMarginHorizontal { get; public set; }
    public float TextViewMarginButtonsVertical { get; public set; }
    public bool IsActiveResponder { get; public set; }
    public string SendCaption { get; public set; }
    public UIColor BarTintColor { get; public set; }
    public Action`1<float> HeightChanged { get; public set; }
    public Action ViewConfigured { get; public set; }
    internal Action a { get; internal set; }
    public UIBarButtonItem LeftButton { get; }
    public UIBarButtonItem RightButton { get; }
    public UITextView TextView { get; public set; }
    private Nullable`1<CGPoint> b { get; private set; }
    public UIResponder Responder { get; }
    public UIMessageInputView(IntPtr ptr);
    public UIMessageInputView(CGRect frame);
    [ExportAttribute("initWithCoder:")]
public UIMessageInputView(NSCoder coder);
    public virtual void EncodeTo(NSCoder coder);
    private sealed virtual override object System.ICloneable.Clone();
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public UIColor get_PlaceholderTextColor();
    [CompilerGeneratedAttribute]
public void set_PlaceholderTextColor(UIColor value);
    [CompilerGeneratedAttribute]
public UIFont get_TextViewFont();
    [CompilerGeneratedAttribute]
public void set_TextViewFont(UIFont value);
    [CompilerGeneratedAttribute]
public UIColor get_TextViewColor();
    [CompilerGeneratedAttribute]
public void set_TextViewColor(UIColor value);
    [CompilerGeneratedAttribute]
public float get_MaxInputHeightLandscape();
    [CompilerGeneratedAttribute]
public void set_MaxInputHeightLandscape(float value);
    [CompilerGeneratedAttribute]
public float get_MaxInputHeightPortrait();
    [CompilerGeneratedAttribute]
public void set_MaxInputHeightPortrait(float value);
    [CompilerGeneratedAttribute]
public float get_TextViewMarginVertical();
    [CompilerGeneratedAttribute]
public void set_TextViewMarginVertical(float value);
    [CompilerGeneratedAttribute]
public float get_TextViewMarginHorizontal();
    [CompilerGeneratedAttribute]
public void set_TextViewMarginHorizontal(float value);
    [CompilerGeneratedAttribute]
public float get_TextViewMarginButtonsVertical();
    [CompilerGeneratedAttribute]
public void set_TextViewMarginButtonsVertical(float value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsActiveResponder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsActiveResponder(bool value);
    [CompilerGeneratedAttribute]
public string get_SendCaption();
    [CompilerGeneratedAttribute]
public void set_SendCaption(string value);
    [CompilerGeneratedAttribute]
public UIColor get_BarTintColor();
    [CompilerGeneratedAttribute]
public void set_BarTintColor(UIColor value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<float> get_HeightChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HeightChanged(Action`1<float> value);
    [CompilerGeneratedAttribute]
public Action get_ViewConfigured();
    [CompilerGeneratedAttribute]
public void set_ViewConfigured(Action value);
    [CompilerGeneratedAttribute]
internal Action get_a();
    [CompilerGeneratedAttribute]
internal void set_a(Action value);
    public UIBarButtonItem get_LeftButton();
    public UIBarButtonItem get_RightButton();
    public UITextView get_TextView();
    public void set_TextView(UITextView value);
    [CompilerGeneratedAttribute]
private Nullable`1<CGPoint> get_b();
    [CompilerGeneratedAttribute]
private void set_b(Nullable`1<CGPoint> value);
    protected virtual void ConfigureViews();
    private void SyncTextViewContentOffset(UITextView textView);
    protected virtual void OnTextChanged(string newText);
    public virtual void WillMoveToSuperview(UIView newsuper);
    public void SetLeftButton(string commandName, string imageName, float width);
    public void SetLeftButton(string commandName, UIBarButtonSystemItem buttonType, float width);
    private void Initialize();
    private float GetTextWidth(string str, UIFont font);
    private UIBarButtonItem GetActualButton(UIBarButtonItem buttonItem);
    private void EnsureVisualState(string text);
    private UIBarButtonItem CreateToolBarItem(UIBarButtonItem buttonItem, float width, float left, float top);
    private void ConfigureToolBarItem(UIBarButtonItem buttonItem);
    public sealed virtual void SetInitialPosition(CGPoint position);
    public sealed virtual void AdjustFrame(CGPoint contentOffset);
    public sealed virtual UIResponder get_Responder();
    public sealed virtual float GetPreferredHeight(UIInterfaceOrientation orientation);
    public sealed virtual void InvalidateLayout();
    private float GetTextViewHeight();
    [CompilerGeneratedAttribute]
private void <ConfigureViews>b__2(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <ConfigureViews>b__3(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <ConfigureViews>b__4(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <ConfigureViews>b__5(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private bool <ConfigureViews>b__6(UITextView textView, NSRange range, string text);
    [CompilerGeneratedAttribute]
private void <ConfigureViews>b__7();
    [CompilerGeneratedAttribute]
private void <SyncTextViewContentOffset>b__a();
}
public class Intersoft.Crosslight.iOS.UIMessageInputViewBindingAdapter : ControlBindingAdapterBase`1<UIMessageInputView> {
    public virtual void SetValue(UIMessageInputView obj, BindableProperty property, object value);
}
public class Intersoft.Crosslight.iOS.UINavigationViewControllerBindingAdapter : BindingAdapterBase`1<UINavigationController> {
}
public abstract class Intersoft.Crosslight.iOS.UINestedMasterDetailViewController`1 : UIViewController`1<TMasterViewModel> {
    private UIView a;
    private UIView b;
    private MasterDetailViewAppearance c;
    [CompilerGeneratedAttribute]
private UIViewController d;
    [CompilerGeneratedAttribute]
private UIViewController e;
    public UIViewController MasterViewController { get; protected set; }
    public UIViewController DetailViewController { get; protected set; }
    public Type MasterViewControllerType { get; }
    public TMasterViewModel MasterViewModel { get; }
    public Type DetailViewControllerType { get; }
    public string MasterButtonDisplayMemberPath { get; }
    public MasterDetailViewAppearance Appearance { get; internal set; }
    protected bool CloseDetailOnBackNavigation { get; }
    protected bool EnsureNavigationContext { get; }
    protected bool EnsureDetailNavigationContext { get; }
    protected bool ShouldRegisterBindings { get; }
    private bool Intersoft.Crosslight.iOS.IMasterDetailViewController.CloseDetailOnBackNavigation { get; }
    public UINestedMasterDetailViewController`1(TMasterViewModel viewModel);
    [CompilerGeneratedAttribute]
public sealed virtual UIViewController get_MasterViewController();
    [CompilerGeneratedAttribute]
protected void set_MasterViewController(UIViewController value);
    [CompilerGeneratedAttribute]
public sealed virtual UIViewController get_DetailViewController();
    [CompilerGeneratedAttribute]
protected void set_DetailViewController(UIViewController value);
    public virtual Type get_MasterViewControllerType();
    public TMasterViewModel get_MasterViewModel();
    public virtual Type get_DetailViewControllerType();
    public virtual string get_MasterButtonDisplayMemberPath();
    public virtual MasterDetailViewAppearance get_Appearance();
    internal virtual void set_Appearance(MasterDetailViewAppearance value);
    protected virtual bool get_CloseDetailOnBackNavigation();
    protected virtual bool get_EnsureNavigationContext();
    protected virtual bool get_EnsureDetailNavigationContext();
    protected virtual bool get_ShouldRegisterBindings();
    private sealed virtual override bool Intersoft.Crosslight.iOS.IMasterDetailViewController.get_CloseDetailOnBackNavigation();
    protected virtual void InitializeView();
    protected virtual void OnViewInitialized();
    public virtual bool IsDetailViewControllerOfType(Type detailViewControllerType);
    public virtual bool IsMasterViewControllerOfType(Type masterViewControllerType);
    public virtual void SetDetailViewController(UIViewController targetViewController, bool animated);
    public virtual void SetDetailViewController(UIViewController targetViewController, bool isAnimated, bool autoDisposeViewController);
    public virtual void SynchronizeSelection(bool animated);
    public virtual void SynchronizeSelection(bool animated, UITableViewScrollPosition scrollPosition);
    public virtual void SetInitialSelection(NSIndexPath index, bool isProgrammatic);
    public virtual void ViewDidLoad();
    [CompilerGeneratedAttribute]
private void <ViewDidLoad>b__4();
}
public abstract class Intersoft.Crosslight.iOS.UINestedMasterDetailViewController`2 : UINestedMasterDetailViewController`1<TMasterViewModel> {
    public UINestedMasterDetailViewController`2(TMasterViewModel viewModel);
    protected virtual void InitializeView();
    public virtual void SetInitialSelection(NSIndexPath index, bool isProgrammatic);
    private void OnListViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual bool IsDetailViewControllerOfType(Type detailViewControllerType);
    [CompilerGeneratedAttribute]
private void <OnListViewPropertyChanged>b__1();
}
public class Intersoft.Crosslight.iOS.UIPickerViewBindingAdapter : ControlBindingAdapterBase`1<UIPickerView> {
    public virtual void SetValue(UIPickerView obj, BindableProperty property, object value);
    private bool IsItemEqual(object item1, object item2, string valuePath);
    public void UpdateSelectedValueSource(UIPickerView obj);
    private string GetValueMemberPath(UIPickerView obj);
}
[DefaultMemberAttribute("Item")]
public class Intersoft.Crosslight.iOS.UIPickerViewSource : UIPickerViewModel {
    private UIPickerView a;
    private IViewModel b;
    private INotifyCollectionChanged c;
    private IEnumerable d;
    private ItemBindingDescription e;
    public IEnumerable Items { get; }
    public int Count { get; }
    public object Item { get; }
    public float ItemWidth { get; }
    public float ItemHeight { get; }
    public float ItemMargin { get; }
    public UIPickerViewSource(UIPickerView pickerView, ItemBindingDescription bindingDescription, IViewModel viewModel);
    public IEnumerable get_Items();
    public virtual int get_Count();
    public object get_Item(int position);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnViewModelPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnItemsChanged(IEnumerable oldItems, IEnumerable newItems);
    public virtual float get_ItemWidth();
    public virtual float get_ItemHeight();
    public virtual float get_ItemMargin();
    public virtual nint GetComponentCount(UIPickerView picker);
    public virtual nint GetRowsInComponent(UIPickerView picker, nint component);
    public virtual string GetTitle(UIPickerView picker, nint row, nint component);
    public virtual nfloat GetRowHeight(UIPickerView picker, nint component);
    public virtual void Selected(UIPickerView picker, nint row, nint component);
    protected virtual void Dispose(bool disposing);
}
public class Intersoft.Crosslight.iOS.UIProgressViewBindingAdapter : ControlBindingAdapterBase`1<UIProgressView> {
    public virtual object GetValue(UIProgressView obj, BindableProperty property);
    public virtual void SetValue(UIProgressView obj, BindableProperty property, object value);
}
public static class Intersoft.Crosslight.iOS.UIProperties : object {
    public static BindableProperty TitleProperty;
    public static BindableProperty HasStaticViewProperty;
    public static BindableProperty SplitViewControllerProperty;
    public static BindableProperty IsClosedFromNavigationProperty;
    public static BindableProperty SourceViewControllerProperty;
    private static UIProperties();
}
public class Intersoft.Crosslight.iOS.UIPushApplicationDelegate : UIApplicationDelegate {
    [CompilerGeneratedAttribute]
private IPushNotificationDelegate a;
    public IPushNotificationDelegate PushNotificationDelegate { get; protected set; }
    public UIPushApplicationDelegate(IntPtr handle);
    public UIPushApplicationDelegate(NSObjectFlag t);
    [CompilerGeneratedAttribute]
public virtual IPushNotificationDelegate get_PushNotificationDelegate();
    [CompilerGeneratedAttribute]
protected virtual void set_PushNotificationDelegate(IPushNotificationDelegate value);
    public virtual bool WillFinishLaunching(UIApplication application, NSDictionary launchOptions);
    protected virtual void CheckForNotifications(UIApplication application, NSDictionary launchOptions);
    public virtual void DidReceiveRemoteNotification(UIApplication application, NSDictionary userInfo, Action`1<UIBackgroundFetchResult> completionHandler);
    public virtual void FailedToRegisterForRemoteNotifications(UIApplication application, NSError error);
    public virtual void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken);
}
public class Intersoft.Crosslight.iOS.UIResizableTextViewCell : UITableViewCell {
    private UITableViewController a;
    private Dictionary`2<object, float> b;
    private static bool c;
    private static bool d;
    private Nullable`1<UITableViewCellAccessory> e;
    private Dictionary`2<object, float> a { get; }
    private UITableView b { get; }
    protected UITextView TextView { get; }
    protected float MinHeight { get; }
    protected float TextViewMargin { get; }
    protected UITableViewCellAccessory ResponderAccessory { get; }
    public UIResizableTextViewCell(IntPtr handle);
    private static UIResizableTextViewCell();
    private Dictionary`2<object, float> get_a();
    private UITableView get_b();
    protected virtual UITextView get_TextView();
    protected virtual float get_MinHeight();
    protected virtual float get_TextViewMargin();
    protected virtual UITableViewCellAccessory get_ResponderAccessory();
    public virtual void AwakeFromNib();
    private bool IsEditTextSizeChanged(Single& currentHeight);
    private void BeginTableUpdates();
    private void EndTableUpdates();
    private bool AutoDetectHeightChange(object item, bool changeFrameOnly, bool forceSizeChange);
    public sealed virtual void WillDisplay(ITableViewController viewController, object item);
    public sealed virtual float GetHeight(ITableViewController viewController, object item);
    [CompilerGeneratedAttribute]
private void <AwakeFromNib>b__0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <AwakeFromNib>b__2(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <AwakeFromNib>b__4(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <AwakeFromNib>b__3();
}
[DisplayNameAttribute("Rounded Button")]
[RegisterAttribute("UIRoundedButton")]
[CategoryAttribute("Intersoft Crosslight")]
public class Intersoft.Crosslight.iOS.UIRoundedButton : UIControlBase {
    private bool a;
    private bool b;
    private UIView c;
    private UIView d;
    private UIView e;
    private UILabel f;
    private UILabel g;
    private UIView h;
    private UIImageView i;
    private UIVisualEffectView j;
    [BrowsableAttribute("True")]
[ExportAttribute("ButtonStyle")]
public RoundedButtonStyle ButtonStyle { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("ContentStyle")]
public RoundedButtonContentStyle ContentStyle { get; public set; }
    [ExportAttribute("BorderWidth")]
[BrowsableAttribute("True")]
public int BorderWidth { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("BorderColor")]
public UIColor BorderColor { get; public set; }
    [ExportAttribute("VibrancyEffectStyle")]
[BrowsableAttribute("True")]
public UIBlurEffectStyle VibrancyEffectStyle { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("BackgroundColor")]
public UIColor BackgroundColor { get; public set; }
    [ExportAttribute("BackgroundColorSelected")]
[BrowsableAttribute("True")]
public UIColor BackgroundColorSelected { get; public set; }
    [ExportAttribute("ContentColor")]
[BrowsableAttribute("True")]
public UIColor ContentColor { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("ContentColorHighlighted")]
public UIColor ContentColorHighlighted { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("ContentColorSelected")]
public UIColor ContentColorSelected { get; public set; }
    [ExportAttribute("IsToggleMode")]
[BrowsableAttribute("True")]
public bool IsToggleMode { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("Title")]
public string Title { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("Subtitle")]
public string Subtitle { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("Image")]
public UIImage Image { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("TitleFont")]
public UIFont TitleFont { get; public set; }
    [ExportAttribute("SubtitleFont")]
[BrowsableAttribute("True")]
public UIFont SubtitleFont { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("ImageMargin")]
public int ImageMargin { get; public set; }
    [ExportAttribute("AnimationDuration")]
[BrowsableAttribute("True")]
public float AnimationDuration { get; public set; }
    public bool Selected { get; public set; }
    public UIView ButtonView { get; }
    public UIView BorderView { get; }
    public UIView OverlayView { get; }
    public UIView SelectedOverlayView { get; }
    public UILabel TitleLabel { get; }
    public UILabel SubtitleLabel { get; }
    public UIView ImageViewContainer { get; }
    public UIImageView ImageView { get; }
    public UIRoundedButton(IntPtr handle);
    public RoundedButtonStyle get_ButtonStyle();
    public void set_ButtonStyle(RoundedButtonStyle value);
    public RoundedButtonContentStyle get_ContentStyle();
    public void set_ContentStyle(RoundedButtonContentStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public UIColor get_BorderColor();
    public void set_BorderColor(UIColor value);
    public UIBlurEffectStyle get_VibrancyEffectStyle();
    public void set_VibrancyEffectStyle(UIBlurEffectStyle value);
    public virtual UIColor get_BackgroundColor();
    public virtual void set_BackgroundColor(UIColor value);
    public UIColor get_BackgroundColorSelected();
    public void set_BackgroundColorSelected(UIColor value);
    public UIColor get_ContentColor();
    public void set_ContentColor(UIColor value);
    public UIColor get_ContentColorHighlighted();
    public void set_ContentColorHighlighted(UIColor value);
    public UIColor get_ContentColorSelected();
    public void set_ContentColorSelected(UIColor value);
    public bool get_IsToggleMode();
    public void set_IsToggleMode(bool value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Subtitle();
    public void set_Subtitle(string value);
    public UIImage get_Image();
    public void set_Image(UIImage value);
    public UIFont get_TitleFont();
    public void set_TitleFont(UIFont value);
    public UIFont get_SubtitleFont();
    public void set_SubtitleFont(UIFont value);
    public int get_ImageMargin();
    public void set_ImageMargin(int value);
    public float get_AnimationDuration();
    public void set_AnimationDuration(float value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public UIView get_ButtonView();
    public UIView get_BorderView();
    public UIView get_OverlayView();
    public UIView get_SelectedOverlayView();
    public UILabel get_TitleLabel();
    public UILabel get_SubtitleLabel();
    public UIView get_ImageViewContainer();
    public UIImageView get_ImageView();
    protected virtual object GetDefaultTypeValue();
    protected virtual void Initialize();
    protected virtual void InitializeView();
    public virtual UIView HitTest(CGPoint point, UIEvent uievent);
    public virtual bool BeginTracking(UITouch uitouch, UIEvent uievent);
    public virtual bool ContinueTracking(UITouch uitouch, UIEvent uievent);
    public virtual void EndTracking(UITouch uitouch, UIEvent uievent);
    public virtual void CancelTracking(UIEvent uievent);
    protected virtual void ChangeControlState(UIControlState targetState, bool animated);
    public virtual void LayoutSubviews();
    private void ChangeContentColor(UIColor toColor);
    [CompilerGeneratedAttribute]
private UIColor <get_BorderColor>b__0(UIColor o);
    [CompilerGeneratedAttribute]
private UIColor <get_ContentColor>b__1(UIColor o);
    [CompilerGeneratedAttribute]
private void <ChangeControlState>b__b();
}
public class Intersoft.Crosslight.iOS.UIRoundedButtonBindingAdapter : ControlBindingAdapterBase`1<UIRoundedButton> {
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnCommandCanExecuteChanged(ICommand command);
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnViewCanExecuteChanged(ICommand command, object view);
    public virtual void Attach(UIRoundedButton obj, BindingContext context);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual object GetValue(UIRoundedButton obj, BindableProperty property);
    public virtual void SetValue(UIRoundedButton obj, BindableProperty property, object value);
    public virtual void Detach(UIRoundedButton obj, BindingContext context);
    private static void OnClick(object sender, EventArgs e);
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.UIScreenExtensions : object {
    [ExtensionAttribute]
public static float GetScreenWidth(UIScreen screen);
    [ExtensionAttribute]
public static float GetScreenHeight(UIScreen screen);
}
public class Intersoft.Crosslight.iOS.UISearchController`1 : UISearchController {
    private IViewModel a;
    private UIViewController b;
    private EventHandler`1<DismissViewEventArgs> c;
    public IViewModel ViewModel { get; }
    public UISearchController`1(IViewModel viewModel);
    public UISearchController`1(IViewModel viewModel, UITableViewController viewController);
    public sealed virtual void add_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    public sealed virtual void remove_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    private static UIViewController DispatchViewContext(Type viewModelType);
    private void Initialize();
    public virtual void UpdateSearchResultsForSearchController(UISearchController searchController);
    public virtual void ViewDidDisappear(bool animated);
    protected void OnViewDismissed(NavigationResult result);
    private sealed virtual override void Intersoft.Crosslight.IViewContext.OnViewDismissed(NavigationResult result);
    private sealed virtual override object Intersoft.Crosslight.IViewContext.FindName(string name);
    private sealed virtual override T Intersoft.Crosslight.IViewContext.FindName(string name);
    private sealed virtual override void Intersoft.Crosslight.IViewModelInitializer.SetViewModel(IViewModel viewModel);
    public sealed virtual IViewModel get_ViewModel();
}
public class Intersoft.Crosslight.iOS.UISegmentedBarController`1 : UIViewController`1<TViewModel> {
    private UISegmentedControl a;
    private UIViewController b;
    private int c;
    private Dictionary`2<int, UIViewController> d;
    public UISegmentedControl SegmentedControl { get; }
    public UIViewController ActiveViewController { get; }
    public int ActiveIndex { get; }
    public ViewTransitionMode TransitionMode { get; }
    public UISegmentedBarController`1(TViewModel viewModel);
    public UISegmentedControl get_SegmentedControl();
    public UIViewController get_ActiveViewController();
    public int get_ActiveIndex();
    public virtual ViewTransitionMode get_TransitionMode();
    protected virtual void InitializeView();
    protected virtual void OnViewDisposed();
    protected virtual void OnSegmentedControlValueChanged(int newIndex);
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void SwitchViewController(UIViewController viewController, int index);
    private void HandleSegmentedControlValueChanged(object sender, EventArgs e);
    private NavigationParameter GetNavigationParameter(Type targetType);
}
public class Intersoft.Crosslight.iOS.UISegmentedControlBindingAdapter : ControlBindingAdapterBase`1<UISegmentedControl> {
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnCommandCanExecuteChanged(ICommand command);
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnViewCanExecuteChanged(ICommand command, object view);
    public virtual void Attach(UISegmentedControl obj, BindingContext context);
    private void OnValueChanged(object sender, EventArgs e);
    public virtual void SetValue(UISegmentedControl obj, BindableProperty property, object value);
    public virtual void Detach(UISegmentedControl obj, BindingContext context);
    private void SetSelectedSegmentByValue(UISegmentedControl obj, object value);
}
public class Intersoft.Crosslight.iOS.UISelectionDetailViewController`1 : UICollectionViewController`1<TViewModel> {
    private UILabel a;
    [CompilerGeneratedAttribute]
private string b;
    [CompilerGeneratedAttribute]
private string c;
    [CompilerGeneratedAttribute]
private string d;
    [CompilerGeneratedAttribute]
private string e;
    public UILabel StatusTextLabel { get; }
    public string TitleText { get; public set; }
    public string TitleSingleSelectionText { get; public set; }
    public string TitleMultipleSelectionText { get; public set; }
    public string NoSelectionStatusText { get; public set; }
    public UISelectionDetailViewController`1(string nibName, NSBundle bundle);
    public UISelectionDetailViewController`1(TViewModel viewModel);
    public UISelectionDetailViewController`1(string nibName, NSBundle bundle, TViewModel viewModel);
    public UILabel get_StatusTextLabel();
    [CompilerGeneratedAttribute]
public string get_TitleText();
    [CompilerGeneratedAttribute]
public void set_TitleText(string value);
    [CompilerGeneratedAttribute]
public string get_TitleSingleSelectionText();
    [CompilerGeneratedAttribute]
public void set_TitleSingleSelectionText(string value);
    [CompilerGeneratedAttribute]
public string get_TitleMultipleSelectionText();
    [CompilerGeneratedAttribute]
public void set_TitleMultipleSelectionText(string value);
    [CompilerGeneratedAttribute]
public string get_NoSelectionStatusText();
    [CompilerGeneratedAttribute]
public void set_NoSelectionStatusText(string value);
    protected virtual void InitializeViewModel();
    private void OnSelectedItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void InitializeView();
    protected virtual void OnViewCreated();
    private void UpdateSelectionStatus(IList selectedItems);
    [CompilerGeneratedAttribute]
private void <UpdateSelectionStatus>b__0();
    [CompilerGeneratedAttribute]
private void <UpdateSelectionStatus>b__1();
}
public class Intersoft.Crosslight.iOS.UISliderBindingAdapter : ControlBindingAdapterBase`1<UISlider> {
    public virtual void Attach(UISlider obj, BindingContext context);
    private void OnValueChanged(object sender, EventArgs e);
    public virtual void Detach(UISlider obj, BindingContext context);
}
public class Intersoft.Crosslight.iOS.UIStepperBindingAdapter : ControlBindingAdapterBase`1<UIStepper> {
    public virtual void Attach(UIStepper obj, BindingContext context);
    private void OnValueChanged(object sender, EventArgs e);
    public virtual void Detach(UIStepper obj, BindingContext context);
}
public class Intersoft.Crosslight.iOS.UISwitchBindingAdapter : ControlBindingAdapterBase`1<UISwitch> {
    public virtual void Attach(UISwitch obj, BindingContext context);
    private void OnValueChanged(object sender, EventArgs e);
    public virtual object GetValue(UISwitch obj, BindableProperty property);
    public virtual void SetValue(UISwitch obj, BindableProperty property, object value);
    public virtual void Detach(UISwitch obj, BindingContext context);
}
public class Intersoft.Crosslight.iOS.UITabBarController`1 : UITabBarController {
    private TViewModel a;
    private List`1<BindingContext> b;
    private List`1<BindingDefinition> c;
    private Dictionary`2<string, NSObject> d;
    private List`1<INavigable> e;
    private bool f;
    private bool g;
    private bool h;
    private EventHandler`1<DismissViewEventArgs> i;
    [CompilerGeneratedAttribute]
private bool j;
    [CompilerGeneratedAttribute]
private bool k;
    protected bool LoadedFromNib { get; protected set; }
    protected internal bool IsDisposing { get; protected internal set; }
    public bool IsActive { get; internal set; }
    internal List`1<BindingContext> a { get; }
    internal List`1<BindingDefinition> b { get; }
    protected bool EnsureNavigationContext { get; }
    public IViewModel ViewModel { get; }
    public UITabBarController`1(IntPtr handle);
    public UITabBarController`1(TViewModel viewModel);
    public UITabBarController`1(string nibName, NSBundle bundle);
    public sealed virtual void add_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    public sealed virtual void remove_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    [CompilerGeneratedAttribute]
protected bool get_LoadedFromNib();
    [CompilerGeneratedAttribute]
protected void set_LoadedFromNib(bool value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsDisposing();
    [CompilerGeneratedAttribute]
protected internal void set_IsDisposing(bool value);
    public bool get_IsActive();
    internal void set_IsActive(bool value);
    internal List`1<BindingContext> get_a();
    internal List`1<BindingDefinition> get_b();
    protected virtual bool get_EnsureNavigationContext();
    protected virtual void OnViewDismissed(NavigationResult result);
    protected virtual void InitializeViewModel();
    protected virtual void InitializeViewControllers();
    private NavigationParameter GetNavigationParameter(Type targetType);
    private void OnViewControllerSelected(UIViewController viewController, bool userInitiated);
    protected virtual void InitializeBindings();
    protected virtual void OnViewInitialized();
    protected virtual void OnViewCreated();
    protected virtual void OnViewDisposed();
    protected virtual void InitializeView();
    public void AddBinding(UIView targetView, BindableProperty property, BindingDescription binding);
    public void AddBinding(UIView targetView, BindableProperty property, string path);
    public void AddBinding(UIView targetView, BindableProperty property, string path, BindingMode mode);
    public void AddBinding(string targetViewName, BindableProperty property, BindingDescription binding);
    public void AddBinding(string targetViewName, BindableProperty property, string path);
    public void AddBinding(string targetViewName, BindableProperty property, string path, BindingMode mode);
    public void RegisterViewIdentifier(string id, NSObject view);
    private void ImportFromBindingProvider();
    private void ProcessPropertySets();
    private void RegisterBindings();
    private void EnsureViewModel();
    private void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
    protected virtual TViewModel CreateViewModel();
    public virtual NSObject ValueForKey(NSString key);
    public virtual NSObject ValueForUndefinedKey(NSString key);
    public virtual void ViewDidLoad();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    protected virtual void Dispose(bool disposing);
    public virtual void DidReceiveMemoryWarning();
    private sealed virtual override void Intersoft.Crosslight.IViewModelInitializer.SetViewModel(IViewModel viewModel);
    private sealed virtual override void Intersoft.Crosslight.iOS.ITabBarController.OnViewControllerSelected(UIViewController viewController);
    private sealed virtual override void Intersoft.Crosslight.IViewContext.OnViewDismissed(NavigationResult result);
    public virtual void DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override void Intersoft.Crosslight.INavigationContext.DetermineNavigationMode(NavigationParameter parameter);
    public sealed virtual IViewModel get_ViewModel();
    public sealed virtual object FindName(string name);
    public sealed virtual T FindName(string name);
    public virtual TService GetService();
    public virtual TService GetService(bool newInstance);
    [CompilerGeneratedAttribute]
private void <InitializeViewControllers>b__0(object sender, UITabBarSelectionEventArgs e);
}
public class Intersoft.Crosslight.iOS.UITableViewBindingAdapter : ControlBindingAdapterBase`1<UITableView> {
    internal static BindableProperty a;
    private static UITableViewBindingAdapter();
    public virtual void Attach(UITableView obj, BindingContext context);
    public virtual void SetValue(UITableView obj, BindableProperty property, object value);
    public virtual void Detach(UITableView obj, BindingContext context);
}
public class Intersoft.Crosslight.iOS.UITableViewCell`2 : UITableViewCell {
    [CompilerGeneratedAttribute]
private TViewModel a;
    [CompilerGeneratedAttribute]
private TModel b;
    public TViewModel ViewModel { get; private set; }
    public TModel Item { get; private set; }
    public UITableViewCell`2(IntPtr handle);
    public UITableViewCell`2(NSObjectFlag t);
    public UITableViewCell`2(UITableViewCellStyle style, NSString reuseIdentifier);
    public UITableViewCell`2(CGRect frame);
    public UITableViewCell`2(UITableViewCellStyle style, string reuseIdentifier);
    public virtual NSObject ValueForUndefinedKey(NSString key);
    [CompilerGeneratedAttribute]
public virtual TViewModel get_ViewModel();
    [CompilerGeneratedAttribute]
private void set_ViewModel(TViewModel value);
    [CompilerGeneratedAttribute]
public virtual TModel get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(TModel value);
    public virtual void PerformBinding(TViewModel viewModel, TModel model);
    private sealed virtual override void Intersoft.Crosslight.IViewModelBinder.PerformBinding(IViewModel viewModel, object model);
}
public class Intersoft.Crosslight.iOS.UITableViewController`1 : UITableViewController {
    private TViewModel a;
    private List`1<BindingContext> b;
    private List`1<BindingDefinition> c;
    private Dictionary`2<Type, IItemBindingAdapter> d;
    private Dictionary`2<string, NSObject> e;
    private UISearchBar f;
    private UISearchDisplayController g;
    private UITableView h;
    private UITableViewSource i;
    private bool j;
    private bool k;
    private Nullable`1<bool> l;
    private Nullable`1<bool> m;
    private object n;
    private NSIndexPath o;
    private NSIndexPath p;
    private object q;
    private UIViewTemplate r;
    private TableViewAppearance s;
    private TableSourceMode t;
    private Tuple`2<bool, bool> u;
    private UIView v;
    private IMasterDetailViewController w;
    private bool x;
    private bool y;
    private List`1<UIEditAction> z;
    private NSLayoutConstraint aa;
    private EventHandler`1<DismissViewEventArgs> ab;
    [CompilerGeneratedAttribute]
private bool ac;
    [CompilerGeneratedAttribute]
private bool ad;
    [CompilerGeneratedAttribute]
private UIViewTemplateSelector ae;
    [CompilerGeneratedAttribute]
private UIView af;
    [CompilerGeneratedAttribute]
private UITableViewSource ag;
    protected bool LoadedFromNib { get; protected set; }
    protected internal bool IsDisposing { get; protected internal set; }
    public TViewModel ViewModel { get; }
    public bool EnableBlurEffect { get; }
    public UIBlurEffectStyle BlurEffectStyle { get; }
    public List`1<UIEditAction> EditActions { get; }
    public UITableViewStyle TableViewStyle { get; }
    public bool ShowSectionIndex { get; }
    public bool ShowGroupHeader { get; }
    public bool IsShowingEditActions { get; private set; }
    public TableViewCellStyle CellStyle { get; }
    public ImageSettings CellImageSettings { get; }
    public BasicImageLoaderSettings ImageLoaderSettings { get; }
    public string CellIdentifier { get; }
    public UIViewTemplateSelector CellTemplateSelector { get; public set; }
    public TableViewInteraction InteractionMode { get; }
    public ChoiceInputMode ChoiceInputMode { get; }
    public EditingOptions EditingOptions { get; }
    public bool DeselectRowOnNavigate { get; }
    public UIView LoadingIndicatorView { get; public set; }
    public UITableViewSource TableSource { get; public set; }
    public UITableViewSource FilteredTableSource { get; public set; }
    public UIViewTemplate SectionHeaderTemplate { get; }
    public UIViewTemplate SectionFooterTemplate { get; }
    public UIViewTemplate HeaderViewTemplate { get; }
    public UIViewTemplate FooterViewTemplate { get; }
    public UIViewTemplate CellTemplate { get; }
    public bool AllowSearching { get; }
    public bool UseCustomRootView { get; }
    public bool HideSearchBarInitially { get; }
    public String[] SearchScopes { get; }
    public bool EnableAsyncSearching { get; }
    public UISearchBar SearchBar { get; }
    public TableViewAppearance Appearance { get; internal set; }
    public UISearchDisplayController SearchDisplayController { get; }
    public string TitleMemberPath { get; }
    public bool EnableTableHeaderAutoHeight { get; }
    public UITableView TableView { get; public set; }
    public Dictionary`2<Type, IItemBindingAdapter> ItemBindingAdapters { get; }
    protected string EmptyCellText { get; }
    internal List`1<BindingContext> a { get; }
    internal List`1<BindingDefinition> b { get; }
    private TableSourceMode Intersoft.Crosslight.iOS.ITableViewController.TableSourceMode { get; private set; }
    private bool Intersoft.Crosslight.iOS.ITableViewController.IsShowingEditActions { get; private set; }
    private IViewModel Intersoft.Crosslight.ISupportViewModel.ViewModel { get; }
    public UITableViewController`1(IntPtr handle);
    public UITableViewController`1(string nibName, NSBundle bundle);
    public UITableViewController`1(TViewModel viewModel);
    public sealed virtual void add_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    public sealed virtual void remove_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    [CompilerGeneratedAttribute]
protected bool get_LoadedFromNib();
    [CompilerGeneratedAttribute]
protected void set_LoadedFromNib(bool value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsDisposing();
    [CompilerGeneratedAttribute]
protected internal void set_IsDisposing(bool value);
    public TViewModel get_ViewModel();
    public virtual bool get_EnableBlurEffect();
    public virtual UIBlurEffectStyle get_BlurEffectStyle();
    public virtual List`1<UIEditAction> get_EditActions();
    public virtual UITableViewStyle get_TableViewStyle();
    public virtual bool get_ShowSectionIndex();
    public virtual bool get_ShowGroupHeader();
    public virtual bool get_IsShowingEditActions();
    private void set_IsShowingEditActions(bool value);
    public virtual TableViewCellStyle get_CellStyle();
    public virtual ImageSettings get_CellImageSettings();
    public virtual BasicImageLoaderSettings get_ImageLoaderSettings();
    public virtual string get_CellIdentifier();
    [CompilerGeneratedAttribute]
public sealed virtual UIViewTemplateSelector get_CellTemplateSelector();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CellTemplateSelector(UIViewTemplateSelector value);
    public virtual TableViewInteraction get_InteractionMode();
    public virtual ChoiceInputMode get_ChoiceInputMode();
    public virtual EditingOptions get_EditingOptions();
    public virtual bool get_DeselectRowOnNavigate();
    [CompilerGeneratedAttribute]
public virtual UIView get_LoadingIndicatorView();
    [CompilerGeneratedAttribute]
public virtual void set_LoadingIndicatorView(UIView value);
    [CompilerGeneratedAttribute]
public virtual UITableViewSource get_TableSource();
    [CompilerGeneratedAttribute]
public virtual void set_TableSource(UITableViewSource value);
    public virtual UITableViewSource get_FilteredTableSource();
    public virtual void set_FilteredTableSource(UITableViewSource value);
    public virtual UIViewTemplate get_SectionHeaderTemplate();
    public virtual UIViewTemplate get_SectionFooterTemplate();
    public virtual UIViewTemplate get_HeaderViewTemplate();
    public virtual UIViewTemplate get_FooterViewTemplate();
    public virtual UIViewTemplate get_CellTemplate();
    public virtual bool get_AllowSearching();
    public virtual bool get_UseCustomRootView();
    public virtual bool get_HideSearchBarInitially();
    public virtual String[] get_SearchScopes();
    public virtual bool get_EnableAsyncSearching();
    public virtual UISearchBar get_SearchBar();
    public virtual TableViewAppearance get_Appearance();
    internal virtual void set_Appearance(TableViewAppearance value);
    public virtual UISearchDisplayController get_SearchDisplayController();
    public virtual string get_TitleMemberPath();
    public virtual bool get_EnableTableHeaderAutoHeight();
    public virtual UITableView get_TableView();
    public virtual void set_TableView(UITableView value);
    public sealed virtual Dictionary`2<Type, IItemBindingAdapter> get_ItemBindingAdapters();
    protected virtual string get_EmptyCellText();
    internal List`1<BindingContext> get_a();
    internal List`1<BindingDefinition> get_b();
    private sealed virtual override TableSourceMode Intersoft.Crosslight.iOS.ITableViewController.get_TableSourceMode();
    private sealed virtual override void Intersoft.Crosslight.iOS.ITableViewController.set_TableSourceMode(TableSourceMode value);
    public virtual void ShowWatermarkView(UIView customView);
    public virtual void ShowWatermarkView(string text);
    public virtual void HideWatermarkView();
    protected virtual void OnViewDismissed(NavigationResult result);
    private sealed virtual override void Intersoft.Crosslight.IViewContext.OnViewDismissed(NavigationResult result);
    private sealed virtual override void Intersoft.Crosslight.IViewModelInitializer.SetViewModel(IViewModel viewModel);
    protected virtual TViewModel CreateViewModel();
    protected virtual UIView GetCustomRootView();
    protected virtual void InitializeViewModel();
    protected virtual void InitializeBindings();
    protected virtual void OnViewCreated();
    private void ConfigureViewTemplates(UITableView tableView);
    private CGSize GetIntrinsicSize(UIView view);
    private bool HasAutoLayout(UIView view);
    protected virtual void ApplyAppearance();
    private UIView CreateBlurView();
    protected virtual ItemBindingDescription GetItemBinding();
    protected virtual void OnViewDisposed();
    protected virtual void InitializeView();
    protected virtual void OnViewInitialized();
    public void RegisterViewIdentifier(string id, NSObject view);
    public void AddBinding(BindingContext bindingContext);
    public void AddBinding(NSObject targetView, BindableProperty property, BindingDescription binding);
    public void AddBinding(NSObject targetView, BindableProperty property, string path);
    public void AddBinding(NSObject targetView, BindableProperty property, string path, BindingMode mode);
    public sealed virtual void AddBinding(string targetViewName, BindableProperty property, BindingDescription binding);
    public sealed virtual void AddDirectBinding(string targetViewName, BindableProperty property, object value);
    public void AddBinding(string targetViewName, BindableProperty property, string path);
    public void AddBinding(string targetViewName, BindableProperty property, string path, BindingMode mode);
    public void SetToolbarHidden(bool hidden, bool animated);
    public void RegisterItemBindingAdapter();
    private void AutoRegisterViewIdentifier(UIView view);
    private void SetToolbarHidden(bool hidden, bool animated, bool programmatic);
    private void ImportFromBindingProvider();
    private void ProcessPropertySets();
    private void RegisterBindings();
    private void EnsureViewModel(bool initializeEvents);
    private void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private NSIndexPath GetValidSelection(UITableView tableView, NSIndexPath selection);
    public virtual NSObject ValueForKey(NSString key);
    public virtual NSObject ValueForUndefinedKey(NSString key);
    public virtual void WillRotate(UIInterfaceOrientation toInterfaceOrientation, double duration);
    public virtual void ViewDidLoad();
    private void EnsureRootNavigation();
    public virtual void SetEditing(bool editing, bool animated);
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnViewModelResourcesChanged();
    public void InvokeNavigated(IViewModel sender, object data, NavigationMode navigationMode);
    protected virtual void Dispose(bool disposing);
    public virtual void DidReceiveMemoryWarning();
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidAppear(bool animated);
    public virtual void ViewWillDisappear(bool animated);
    private void FlagAutoCloseDetail();
    private bool IsRootViewModel();
    protected virtual void ViewWillDisappearAfterTransition(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    public virtual void PrepareForSegue(UIStoryboardSegue segue, NSObject sender);
    public virtual bool ShouldPerformSegue(string segueIdentifier, NSObject sender);
    private sealed virtual override bool Intersoft.Crosslight.iOS.ITableViewController.get_IsShowingEditActions();
    private sealed virtual override void Intersoft.Crosslight.iOS.ITableViewController.set_IsShowingEditActions(bool value);
    public virtual void DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override void Intersoft.Crosslight.INavigationContext.DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override IViewModel Intersoft.Crosslight.ISupportViewModel.get_ViewModel();
    public sealed virtual object FindName(string name);
    public sealed virtual T FindName(string name);
    public virtual TService GetService();
    public virtual TService GetService(bool newInstance);
    [CompilerGeneratedAttribute]
private static bool <RegisterItemBindingAdapter>b__6(KeyValuePair`2<Type, IItemBindingAdapter> o);
    [CompilerGeneratedAttribute]
private void <WillRotate>b__7();
    [CompilerGeneratedAttribute]
private void <SetEditing>b__c();
    [CompilerGeneratedAttribute]
private void <SetEditing>b__d();
    [CompilerGeneratedAttribute]
private void <ViewWillAppear>b__1b(IUIViewControllerTransitionCoordinatorContext context);
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.UITableViewControllerExtensions : object {
    private static int a;
    [ExtensionAttribute]
public static void ApplyTableCellAppearance(UITableViewController viewController, UITableViewCell cell);
}
public class Intersoft.Crosslight.iOS.UITextFieldBindingAdapter : ControlBindingAdapterBase`1<UITextField> {
    public virtual void Attach(UITextField obj, BindingContext context);
    public virtual void SetValue(UITextField obj, BindableProperty property, object value);
    public virtual void Detach(UITextField obj, BindingContext context);
    private static void HandleAllEditingEvents(object sender, EventArgs e);
    private static void HandleEditingDidEnd(object sender, EventArgs e);
    private static void UpdateSourceSafe(object sender);
}
public class Intersoft.Crosslight.iOS.UITextViewBindingAdapter : ControlBindingAdapterBase`1<UITextView> {
    [CompilerGeneratedAttribute]
private static UITextViewCondition a;
    [CompilerGeneratedAttribute]
private static UITextViewChange b;
    public virtual void Attach(UITextView obj, BindingContext context);
    public virtual void Detach(UITextView obj, BindingContext context);
    private static void HandleAllEditingEvents(object sender, EventArgs e);
    private static void UpdateSourceSafe(object sender);
    [CompilerGeneratedAttribute]
private static bool <Attach>b__0(UITextView tv);
    [CompilerGeneratedAttribute]
private static bool <Attach>b__1(UITextView tv, NSRange range, string text);
}
public class Intersoft.Crosslight.iOS.UITextViewItemBindingAdapter : object {
    private IEnumerable`1<BindingContext> a;
    [CompilerGeneratedAttribute]
private static UITextViewChange b;
    [CompilerGeneratedAttribute]
private static Func`2<BindingContext, bool> c;
    public sealed virtual bool Attach(object view, IViewModel viewModel, object model, IEnumerable`1<BindingContext> bindingContexts);
    private void HandleEnded(object sender, EventArgs e);
    private void HandleStarted(object sender, EventArgs e);
    public sealed virtual void Detach(object view);
    [CompilerGeneratedAttribute]
private static bool <Attach>b__0(UITextView tv, NSRange range, string text);
    [CompilerGeneratedAttribute]
private static bool <HandleEnded>b__2(BindingContext o);
}
public abstract class Intersoft.Crosslight.iOS.UIViewBase : UIControl {
    private UILabel a;
    private Dictionary`2<string, object> b;
    private bool c;
    private EventHandler d;
    private PropertyChangedEventHandler e;
    [CompilerGeneratedAttribute]
private bool f;
    [CompilerGeneratedAttribute]
private ISite g;
    [CompilerGeneratedAttribute]
private static Func`2<UIColor, UIColor> h;
    [CompilerGeneratedAttribute]
private static Func`2<int, int> i;
    [CompilerGeneratedAttribute]
private static Func`2<UIColor, UIColor> j;
    public bool IsInitialized { get; protected set; }
    public ISite Site { get; public set; }
    public bool IsDesign { get; }
    [ExportAttribute("BackgroundColor")]
[BrowsableAttribute("True")]
public UIColor BackgroundColor { get; public set; }
    [ExportAttribute("BorderWidth")]
[BrowsableAttribute("True")]
public int BorderWidth { get; public set; }
    [BrowsableAttribute("True")]
[ExportAttribute("BorderColor")]
public UIColor BorderColor { get; public set; }
    [ExportAttribute("CornerRadius")]
[BrowsableAttribute("True")]
public float CornerRadius { get; public set; }
    protected UIView RootView { get; }
    protected UILabel DesignerLabel { get; }
    public UIViewBase(IntPtr handle);
    public UIViewBase(NSObjectFlag t);
    public UIViewBase(CGRect frame);
    public UIViewBase(NSCoder coder);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
protected void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ISite get_Site();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Site(ISite value);
    public bool get_IsDesign();
    public virtual UIColor get_BackgroundColor();
    public virtual void set_BackgroundColor(UIColor value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public UIColor get_BorderColor();
    public void set_BorderColor(UIColor value);
    public float get_CornerRadius();
    public void set_CornerRadius(float value);
    protected virtual UIView get_RootView();
    protected UILabel get_DesignerLabel();
    protected virtual T GetValue(string propertyName);
    protected virtual T GetValue(string propertyName, T defaultValue, Func`2<T, T> designValueCallback);
    protected virtual void SetValue(string propertyName, object value, bool invalidateView, bool recreateView);
    protected virtual object GetDefaultTypeValue();
    protected virtual void Initialize();
    protected virtual void InitializeView();
    public virtual void InvalidateView();
    public virtual void LayoutSubviews();
    public virtual void WillMoveToSuperview(UIView newsuper);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private static UIColor <get_BackgroundColor>b__0(UIColor o);
    [CompilerGeneratedAttribute]
private static int <get_BorderWidth>b__2(int o);
    [CompilerGeneratedAttribute]
private static UIColor <get_BorderColor>b__4(UIColor o);
}
public class Intersoft.Crosslight.iOS.UIViewController`1 : UIViewController {
    private TViewModel a;
    private List`1<BindingContext> b;
    private List`1<BindingDefinition> c;
    private Dictionary`2<string, NSObject> d;
    private bool e;
    private bool f;
    private bool g;
    private Nullable`1<bool> h;
    private NSObject i;
    private NSObject j;
    private Tuple`2<bool, bool> k;
    private bool l;
    private Dictionary`2<UIView, CGPoint> m;
    private EventHandler`1<DismissViewEventArgs> n;
    [CompilerGeneratedAttribute]
private bool o;
    [CompilerGeneratedAttribute]
private bool p;
    [CompilerGeneratedAttribute]
private bool q;
    protected bool LoadedFromNib { get; protected set; }
    protected internal bool IsDisposing { get; protected internal set; }
    private bool a { get; private set; }
    public TViewModel ViewModel { get; }
    public bool IsActive { get; internal set; }
    public bool AutoFitContentSize { get; }
    public string TitleMemberPath { get; }
    public bool AutoDispose { get; public set; }
    public bool AutoScrollToVisible { get; }
    public bool HideKeyboardOnTap { get; }
    protected bool ShouldRegisterBindings { get; }
    public bool EnableBlurEffect { get; }
    public UIBlurEffectStyle BlurEffectStyle { get; }
    internal List`1<BindingContext> b { get; }
    internal List`1<BindingDefinition> c { get; }
    private IViewModel Intersoft.Crosslight.ISupportViewModel.ViewModel { get; }
    public UIViewController`1(IntPtr handle);
    public UIViewController`1(TViewModel viewModel);
    public UIViewController`1(string nibName, NSBundle bundle);
    public UIViewController`1(string nibName, NSBundle bundle, TViewModel viewModel);
    [CompilerGeneratedAttribute]
protected bool get_LoadedFromNib();
    [CompilerGeneratedAttribute]
protected void set_LoadedFromNib(bool value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsDisposing();
    [CompilerGeneratedAttribute]
protected internal void set_IsDisposing(bool value);
    [CompilerGeneratedAttribute]
private bool get_a();
    [CompilerGeneratedAttribute]
private void set_a(bool value);
    public sealed virtual void add_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    public sealed virtual void remove_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    public TViewModel get_ViewModel();
    public bool get_IsActive();
    internal void set_IsActive(bool value);
    public virtual bool get_AutoFitContentSize();
    public virtual string get_TitleMemberPath();
    public virtual bool get_AutoDispose();
    public virtual void set_AutoDispose(bool value);
    public virtual bool get_AutoScrollToVisible();
    public virtual bool get_HideKeyboardOnTap();
    protected virtual bool get_ShouldRegisterBindings();
    public virtual bool get_EnableBlurEffect();
    public virtual UIBlurEffectStyle get_BlurEffectStyle();
    internal List`1<BindingContext> get_b();
    internal List`1<BindingDefinition> get_c();
    public void AddStaticView(UIView view, CGPoint position);
    public void RegisterViewIdentifier(string id, NSObject view);
    protected void OnViewDismissed(NavigationResult result);
    private sealed virtual override void Intersoft.Crosslight.IViewContext.OnViewDismissed(NavigationResult result);
    private sealed virtual override void Intersoft.Crosslight.IViewModelInitializer.SetViewModel(IViewModel viewModel);
    protected virtual TViewModel CreateViewModel();
    protected virtual void InitializeViewModel();
    protected virtual void InitializeBindings();
    protected virtual void OnViewCreated();
    protected virtual void OnViewDisposed();
    protected virtual void InitializeView();
    protected virtual void OnViewInitialized();
    public void AddBinding(BindingContext bindingContext);
    public void AddBinding(UIView targetView, BindableProperty property, BindingDescription binding);
    public void AddBinding(UIView targetView, BindableProperty property, string path);
    public void AddBinding(UIView targetView, BindableProperty property, string path, BindingMode mode);
    public void AddBinding(string targetViewName, BindableProperty property, BindingDescription binding);
    public void AddBinding(string targetViewName, BindableProperty property, string path);
    public void AddBinding(string targetViewName, BindableProperty property, string path, BindingMode mode);
    public void SetToolbarHidden(bool hidden, bool animated);
    private void SetToolbarHidden(bool hidden, bool animated, bool programmatic);
    private void ImportFromBindingProvider();
    private void ProcessPropertySets();
    private void RegisterBindings();
    private void EnsureViewModel(bool initializeEvents);
    private void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnViewScrolled(object sender, EventArgs e);
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnViewModelResourcesChanged();
    private void OnKeyboardNotification(NSNotification notification);
    protected virtual void OnKeyboardChanged(bool visible, float height);
    private CGRect AdjustFrameHeight(CGRect frame);
    private void AutoSizeToFitContent(UIScrollView scrollView);
    public virtual NSObject ValueForKey(NSString key);
    public virtual NSObject ValueForUndefinedKey(NSString key);
    public virtual void AddChildViewController(UIViewController childController);
    public virtual void ViewDidLayoutSubviews();
    public virtual void ViewDidLoad();
    public virtual void ViewWillDisappear(bool animated);
    public virtual void ViewWillAppear(bool animated);
    public virtual void ViewDidDisappear(bool animated);
    protected virtual void Dispose(bool disposing);
    private bool IsRootViewModel();
    private void DisposeInternal();
    public virtual void DidReceiveMemoryWarning();
    public virtual void DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override void Intersoft.Crosslight.INavigationContext.DetermineNavigationMode(NavigationParameter parameter);
    private sealed virtual override IViewModel Intersoft.Crosslight.ISupportViewModel.get_ViewModel();
    public sealed virtual object FindName(string name);
    public sealed virtual T FindName(string name);
    public virtual TService GetService();
    public virtual TService GetService(bool newInstance);
    [CompilerGeneratedAttribute]
private void <OnViewInitialized>b__0(UITapGestureRecognizer o);
    [CompilerGeneratedAttribute]
private void <ViewWillDisappear>b__2(IUIViewControllerTransitionCoordinatorContext context);
}
public class Intersoft.Crosslight.iOS.UIViewControllerBindingAdapter : BindingAdapterBase`1<UIViewController> {
    public virtual void SetValue(UIViewController obj, BindableProperty property, object value);
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.UIViewControllerExtensions : object {
    [CompilerGeneratedAttribute]
private static Action`1<IUIViewControllerTransitionCoordinatorContext> a;
    [ExtensionAttribute]
public static bool IsOS7(UIViewController viewController);
    [ExtensionAttribute]
public static bool IsOS8(UIViewController viewController);
    [ExtensionAttribute]
public static bool IsOS9(UIViewController viewController);
    [ExtensionAttribute]
public static bool IsOS7OrHigher(UIViewController viewController);
    [ExtensionAttribute]
public static bool IsActive(UIViewController viewController);
    [ExtensionAttribute]
public static bool IsInSplitViewController(UIViewController viewController);
    [ExtensionAttribute]
public static UISplitViewController GetSplitViewController(UIViewController viewController);
    [ExtensionAttribute]
public static UISplitViewController GetSplitViewControllerInPopover(UIViewController viewController);
    [ExtensionAttribute]
public static UIViewController GetParentViewController(UIViewController viewController, Type parentViewControllerType);
    [ExtensionAttribute]
public static bool IsRootControllerChanging(UIViewController viewController);
    [ExtensionAttribute]
public static bool IsParentRootControllerChanging(UIViewController viewController);
    [ExtensionAttribute]
internal static void CheckForViewMethodInvocation(UIViewController viewController, PropertyChangedEventArgs e);
    [ExtensionAttribute]
public static void RegisterPresenter(UIViewController viewController, Action`1<IContentPresenterSettings> configureSettingsCallback);
    [ExtensionAttribute]
public static void ConfigurePresenter(UIViewController viewController, Action`1<IContentPresenterSettings> configureSettingsCallback);
    [ExtensionAttribute]
public static void SetTransition(UINavigationController controller, IViewTransition transition);
    [ExtensionAttribute]
public static void TransitionToTransparent(UINavigationController controller, bool isTransparent);
    [ExtensionAttribute]
public static void InitializeTransparentTransition(UINavigationController controller);
    [ExtensionAttribute]
public static void SetTransition(UINavigationController controller, Action`1<TTransition> configureCallback);
    [ExtensionAttribute]
public static UIViewController CreateViewController(UIViewController viewController, Type viewControllerType, IViewModel viewModel);
    [ExtensionAttribute]
internal static void InitializeTransition(UIViewController viewController, NavigationParameter parameter);
    [ExtensionAttribute]
internal static UIPresentationController GetPresentationController(UIViewController viewController);
    [CompilerGeneratedAttribute]
private static void <TransitionToTransparent>b__3(IUIViewControllerTransitionCoordinatorContext context);
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.UIViewExtensions : object {
    [ExtensionAttribute]
public static UIViewController GetViewController(UIView view);
    [ExtensionAttribute]
public static UIView GetFirstResponder(UIView view);
    [ExtensionAttribute]
public static T GetSuperview(UIView view);
    [ExtensionAttribute]
public static bool IsInPopover(UIView view);
    [ExtensionAttribute]
public static void RunOnUIThread(UIView view, int delay, Action action);
    [ExtensionAttribute]
public static UIView LoadFromNib(UIView view, string name);
    [ExtensionAttribute]
public static UIView Clone(UIView view);
    [ExtensionAttribute]
public static void AdjustStaticViews(UIScrollView scrollView);
    [ExtensionAttribute]
public static void RefreshTableHeaderView(UITableView tableView);
    [ExtensionAttribute]
public static CGSize GetStringSize(UIView view, string text, UIFont font, CGSize constrainedSize);
    [ExtensionAttribute]
public static CGSize GetStringSize(UIView view, string text, UIFont font);
    [ExtensionAttribute]
internal static void EndBatchUpdates(UITableView tableView);
}
public class Intersoft.Crosslight.iOS.UIViewTemplate : object {
    [CompilerGeneratedAttribute]
private Type a;
    [CompilerGeneratedAttribute]
private UINib b;
    public Type Type { get; private set; }
    public UINib Nib { get; private set; }
    public UIViewTemplate(Type type);
    public UIViewTemplate(UINib nib);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public UINib get_Nib();
    [CompilerGeneratedAttribute]
private void set_Nib(UINib value);
    public T Instantiate();
}
public class Intersoft.Crosslight.iOS.UIViewTemplateSelector : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, UIViewTemplate> a;
    [CompilerGeneratedAttribute]
private Func`3<IndexPath, object, string> b;
    public Dictionary`2<string, UIViewTemplate> CellTemplates { get; private set; }
    internal Func`3<IndexPath, object, string> a { get; internal set; }
    public UIViewTemplateSelector(Dictionary`2<string, UIViewTemplate> cellTemplates, Func`3<IndexPath, object, string> selectorCallBack);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, UIViewTemplate> get_CellTemplates();
    [CompilerGeneratedAttribute]
private void set_CellTemplates(Dictionary`2<string, UIViewTemplate> value);
    [CompilerGeneratedAttribute]
internal Func`3<IndexPath, object, string> get_a();
    [CompilerGeneratedAttribute]
internal void set_a(Func`3<IndexPath, object, string> value);
}
public class Intersoft.Crosslight.iOS.UIWebViewBindingAdapter : ControlBindingAdapterBase`1<UIWebView> {
    public virtual object GetValue(UIWebView obj, BindableProperty property);
    public virtual void SetValue(UIWebView obj, BindableProperty property, object value);
}
public class Intersoft.Crosslight.iOS.Views.ActivityToastSettings : ToastSettings {
    [CompilerGeneratedAttribute]
private float a;
    [CompilerGeneratedAttribute]
private float b;
    public float ActivityFrameWidth { get; public set; }
    public float ActivityFrameHeight { get; public set; }
    public ActivityToastSettings(object view);
    [CompilerGeneratedAttribute]
public float get_ActivityFrameWidth();
    [CompilerGeneratedAttribute]
public void set_ActivityFrameWidth(float value);
    [CompilerGeneratedAttribute]
public float get_ActivityFrameHeight();
    [CompilerGeneratedAttribute]
public void set_ActivityFrameHeight(float value);
}
public class Intersoft.Crosslight.iOS.Views.ButtonViewCell : FormViewCell {
    private UIButton a;
    [CompilerGeneratedAttribute]
private ButtonAttribute b;
    protected ButtonAttribute ButtonAttribute { get; protected set; }
    private string a { get; }
    private string b { get; }
    public ButtonViewCell(UITableViewController controller, PropertyDefinition property);
    [CompilerGeneratedAttribute]
protected ButtonAttribute get_ButtonAttribute();
    [CompilerGeneratedAttribute]
protected void set_ButtonAttribute(ButtonAttribute value);
    private string get_a();
    private string get_b();
    protected virtual void ConfigureView();
    public virtual void LayoutSubviews();
    protected virtual UIView CreateEditor();
    public virtual void Activate();
    private string GetTextColor(int index);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <CreateEditor>b__0(object sender, EventArgs e);
}
public abstract class Intersoft.Crosslight.iOS.Views.CompositeCellBase : object {
    private PropertyDefinition a;
    private FormViewCell b;
    private BindingDescription c;
    [CompilerGeneratedAttribute]
private BindingAttribute d;
    public FormViewCell Owner { get; }
    protected BindingDescription ValueBinding { get; }
    protected PropertyDefinition Property { get; }
    protected BindingAttribute BindingAttribute { get; protected set; }
    public CompositeCellBase(IComponentView owner, PropertyDefinition property);
    public FormViewCell get_Owner();
    protected BindingDescription get_ValueBinding();
    protected PropertyDefinition get_Property();
    private sealed virtual override IViewContext Intersoft.Crosslight.IView.GetViewContext();
    [CompilerGeneratedAttribute]
protected BindingAttribute get_BindingAttribute();
    [CompilerGeneratedAttribute]
protected void set_BindingAttribute(BindingAttribute value);
    public abstract virtual UIView GetView();
    public virtual void LayoutView(CGRect frame);
    protected virtual BindingDescription CreateBindingDescription(BindingAttribute binding);
    protected virtual void ConfigureBinding(UIView targetView, BindableProperty property, BindingAttribute specificBinding);
    public virtual void Activate();
    public virtual void Deactivate();
    public virtual void WillDisplay();
    public virtual void ValueChanged(object newValue);
    public sealed virtual float GetHeight();
    public sealed virtual void InvalidateSize(bool isInitializing);
    public sealed virtual void VisibilityChanged(bool isVisible);
    public sealed virtual void EnabledChanged(bool isEnabled);
    public sealed virtual void Dispose();
    public sealed virtual TService GetService();
    public sealed virtual TService GetService(bool newInstance);
}
public class Intersoft.Crosslight.iOS.Views.DatePicker : PickerBase`1<UIDatePicker> {
    private UIDatePicker a;
    public UIDatePicker Picker { get; }
    public DatePicker(PropertyDefinition ownerProperty, UIView view, bool isModal);
    public virtual UIDatePicker get_Picker();
}
public class Intersoft.Crosslight.iOS.Views.DateViewCell : FormViewCell {
    private DatePicker a;
    public EditorControlType EditorControlType { get; }
    public DateViewCell(UITableViewController controller, PropertyDefinition property);
    public virtual EditorControlType get_EditorControlType();
    public virtual void Deactivate();
    protected virtual UIView CreateEditor();
    public virtual void VisibilityChanged(bool isVisible);
    protected virtual void OnVisibilityChanged(bool isVisible);
    protected virtual IPicker CreatePicker();
    public virtual void InvalidateSize(bool isInitializing);
    public virtual void WillDisplay();
    protected virtual void Dispose(bool disposing);
}
public class Intersoft.Crosslight.iOS.Views.FormViewCell : XLTableViewCell {
    private UITableViewController a;
    private UITableView b;
    private PropertyDefinition c;
    private UIFont d;
    private UIFont e;
    private UITextField f;
    private BindingDescription g;
    private BindingDescription h;
    private UIView i;
    private IPicker j;
    private float k;
    private Dictionary`2<int, nfloat> l;
    [CompilerGeneratedAttribute]
private DisplayAttribute m;
    [CompilerGeneratedAttribute]
private EditorAttribute n;
    [CompilerGeneratedAttribute]
private LayoutAttribute o;
    [CompilerGeneratedAttribute]
private BindingAttribute p;
    [CompilerGeneratedAttribute]
private BindableAttribute q;
    [CompilerGeneratedAttribute]
private StringInputAttribute r;
    [CompilerGeneratedAttribute]
private SelectionInputAttribute s;
    [CompilerGeneratedAttribute]
private VisibilityBindingAttribute t;
    [CompilerGeneratedAttribute]
private EnabledBindingAttribute u;
    [CompilerGeneratedAttribute]
private bool v;
    [CompilerGeneratedAttribute]
private CGPoint w;
    [CompilerGeneratedAttribute]
private static Func`2<SectionDefinition, bool> x;
    public UIView Editor { get; }
    public IPicker Picker { get; }
    public bool IsPickerShown { get; }
    public UIFont DefaultDetailFont { get; public set; }
    public UIFont DefaultButtonFont { get; public set; }
    public IDetailViewModel ViewModel { get; }
    public IFormViewController ViewController { get; }
    public IFormViewController FormViewController { get; }
    protected DisplayAttribute DisplayAttribute { get; protected set; }
    protected EditorAttribute EditorAttribute { get; protected set; }
    protected LayoutAttribute LayoutAttribute { get; protected set; }
    protected BindingAttribute BindingAttribute { get; protected set; }
    protected BindableAttribute BindableAttribute { get; protected set; }
    protected StringInputAttribute StringInputAttribute { get; protected set; }
    protected SelectionInputAttribute SelectionInputAttribute { get; protected set; }
    protected VisibilityBindingAttribute VisibilityBindingAttribute { get; protected set; }
    protected EnabledBindingAttribute EnabledBindingAttribute { get; protected set; }
    protected bool IsInPopoverExplicit { get; private set; }
    protected internal PropertyDefinition Property { get; }
    protected UITableView TableView { get; }
    public BindingDescription ValueBinding { get; }
    protected LayoutAlignment EditorAlignment { get; }
    public EditorControlType EditorControlType { get; }
    protected float MinLabelWidth { get; }
    public CGPoint DefaultMargin { get; public set; }
    public float DefaultTextSpacing { get; }
    public float LabelSpacing { get; }
    public bool IsOS7 { get; }
    public bool IsOS8 { get; }
    public bool IsOS9 { get; }
    public UIColor DefaultDetailColor { get; }
    protected bool PreferIntrinsicContentSize { get; }
    private float a { get; }
    private float b { get; }
    private float c { get; }
    private float d { get; }
    public FormViewCell(UITableViewController controller, PropertyDefinition property);
    public virtual UIView get_Editor();
    public virtual IPicker get_Picker();
    public virtual bool get_IsPickerShown();
    public virtual UIFont get_DefaultDetailFont();
    public virtual void set_DefaultDetailFont(UIFont value);
    public virtual UIFont get_DefaultButtonFont();
    public virtual void set_DefaultButtonFont(UIFont value);
    public IDetailViewModel get_ViewModel();
    public IFormViewController get_ViewController();
    public IFormViewController get_FormViewController();
    [CompilerGeneratedAttribute]
protected DisplayAttribute get_DisplayAttribute();
    [CompilerGeneratedAttribute]
protected void set_DisplayAttribute(DisplayAttribute value);
    [CompilerGeneratedAttribute]
protected EditorAttribute get_EditorAttribute();
    [CompilerGeneratedAttribute]
protected void set_EditorAttribute(EditorAttribute value);
    [CompilerGeneratedAttribute]
protected LayoutAttribute get_LayoutAttribute();
    [CompilerGeneratedAttribute]
protected void set_LayoutAttribute(LayoutAttribute value);
    [CompilerGeneratedAttribute]
protected BindingAttribute get_BindingAttribute();
    [CompilerGeneratedAttribute]
protected void set_BindingAttribute(BindingAttribute value);
    [CompilerGeneratedAttribute]
protected BindableAttribute get_BindableAttribute();
    [CompilerGeneratedAttribute]
protected void set_BindableAttribute(BindableAttribute value);
    [CompilerGeneratedAttribute]
protected StringInputAttribute get_StringInputAttribute();
    [CompilerGeneratedAttribute]
protected void set_StringInputAttribute(StringInputAttribute value);
    [CompilerGeneratedAttribute]
protected SelectionInputAttribute get_SelectionInputAttribute();
    [CompilerGeneratedAttribute]
protected void set_SelectionInputAttribute(SelectionInputAttribute value);
    [CompilerGeneratedAttribute]
protected VisibilityBindingAttribute get_VisibilityBindingAttribute();
    [CompilerGeneratedAttribute]
protected void set_VisibilityBindingAttribute(VisibilityBindingAttribute value);
    [CompilerGeneratedAttribute]
protected EnabledBindingAttribute get_EnabledBindingAttribute();
    [CompilerGeneratedAttribute]
protected void set_EnabledBindingAttribute(EnabledBindingAttribute value);
    [CompilerGeneratedAttribute]
protected bool get_IsInPopoverExplicit();
    [CompilerGeneratedAttribute]
private void set_IsInPopoverExplicit(bool value);
    protected internal PropertyDefinition get_Property();
    protected UITableView get_TableView();
    public virtual BindingDescription get_ValueBinding();
    protected virtual LayoutAlignment get_EditorAlignment();
    public virtual EditorControlType get_EditorControlType();
    protected virtual float get_MinLabelWidth();
    [CompilerGeneratedAttribute]
public virtual CGPoint get_DefaultMargin();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultMargin(CGPoint value);
    public virtual float get_DefaultTextSpacing();
    public virtual float get_LabelSpacing();
    public bool get_IsOS7();
    public bool get_IsOS8();
    public bool get_IsOS9();
    public virtual UIColor get_DefaultDetailColor();
    private sealed virtual override IViewContext Intersoft.Crosslight.IView.GetViewContext();
    protected virtual float GetEditorHeight();
    public virtual float GetHeight();
    public virtual bool IsSelectable();
    public virtual bool IsNavigable();
    public T GetAttribute();
    public virtual void Deactivate();
    public virtual void Activate();
    public virtual void InvalidateSize(bool isInitializing);
    public virtual void WillDisplay();
    public virtual void ValueChanged(object newValue);
    public virtual bool IsTextFieldBasedEditor();
    public T EvaluateValueBinding(BindingDescription valueBinding);
    public T EvaluateValueBinding(BindingAttribute bindingAttribute, BindingDescription valueBinding);
    protected virtual bool IsTextFieldBasedEditor(PropertyDefinition property);
    protected virtual bool IsTextInput(PropertyDefinition property);
    internal bool IsTextFieldActive();
    public virtual string GetString(string value, string resourceKey);
    protected string GetResourceString(string key);
    protected virtual bool ShouldDisplayDetail();
    public virtual void LayoutSubviews();
    protected virtual bool get_PreferIntrinsicContentSize();
    private float get_a();
    private float get_b();
    private float get_c();
    private float get_d();
    protected virtual void ConfigureLayout();
    protected virtual void BuildCompositeView(PropertyDefinition property);
    protected virtual void ConfigureView();
    protected virtual Single[] MeasureLabel();
    protected virtual CGSize MeasureText(string text, bool calculateEmptySpace);
    protected virtual void ConfigureInputTraits(IUITextInputTraits textField);
    protected virtual UITextField CreateTextField();
    protected virtual void ConfigureBinding(UIView targetView, BindableProperty property, BindingAttribute specificBinding);
    public virtual void VisibilityChanged(bool isVisible);
    public virtual void RaiseVisibilityChanged(bool isVisible);
    public virtual void EnabledChanged(bool isEnabled);
    protected virtual void OnVisibilityChanged(bool isVisible);
    protected virtual void HandleEnabledBinding(bool isInitializing);
    protected virtual void HandleVisibilityBinding(bool isInitializing);
    protected virtual UIView CreateEditor();
    protected virtual IPicker CreatePicker();
    protected virtual void ActivateNextEntry();
    private void ConfigureTextFieldEvents(UITextField textField);
    private static UITableViewCellStyle GetCellStyle(PropertyDefinition property);
    protected virtual BindingDescription CreateBindingDescription(BindingAttribute binding);
    protected virtual void Dispose(bool disposing);
    public virtual TService GetService();
    public virtual TService GetService(bool newInstance);
    [CompilerGeneratedAttribute]
private static bool <GetAttribute>b__0(Attribute o);
    [CompilerGeneratedAttribute]
private void <Activate>b__2(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Activate>b__3(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private static bool <ConfigureLayout>b__6(SectionDefinition o);
    [CompilerGeneratedAttribute]
private void <ConfigureTextFieldEvents>b__e(object sender, EventArgs e);
}
public class Intersoft.Crosslight.iOS.Views.ImageCellPart : CompositeCellBase {
    private ImagePickerDelegate a;
    [CompilerGeneratedAttribute]
private UIView b;
    private UIView a { get; private set; }
    public IViewModel ViewModel { get; }
    public object ImageSource { get; public set; }
    public ImagePickerDelegate Delegate { get; }
    public ImageCellPart(IComponentView owner, PropertyDefinition property);
    [CompilerGeneratedAttribute]
private UIView get_a();
    [CompilerGeneratedAttribute]
private void set_a(UIView value);
    public IViewModel get_ViewModel();
    public object get_ImageSource();
    public void set_ImageSource(object value);
    private void SetImageSourceToModel(object value);
    public virtual UIImage GetResolvedImage(object imageSource);
    public virtual string GetString(string value, string resourceKey);
    protected string GetResourceString(string key);
    public virtual UIView GetView();
    private void SynchronizeCaption(object newValue);
    public ImagePickerDelegate get_Delegate();
    public virtual void Activate();
    [CompilerGeneratedAttribute]
private void <GetView>b__9();
    [CompilerGeneratedAttribute]
private void <GetView>b__a(object sender, EventArgs e);
}
public abstract class Intersoft.Crosslight.iOS.Views.PickerBase`1 : object {
    private UIActionSheet a;
    private UIBarButtonItem b;
    private UIView c;
    private UIView d;
    private UILabel e;
    private UIToolbar f;
    private UIPopoverController g;
    private bool h;
    private bool i;
    private bool j;
    private nfloat k;
    private UIView l;
    private PropertyDefinition m;
    private EventHandler n;
    private EventHandler o;
    [CompilerGeneratedAttribute]
private Nullable`1<CGPoint> p;
    [CompilerGeneratedAttribute]
private IComponentView q;
    [CompilerGeneratedAttribute]
private string r;
    [CompilerGeneratedAttribute]
private bool s;
    public T Picker { get; }
    private Nullable`1<CGPoint> a { get; private set; }
    public PropertyDefinition OwnerProperty { get; }
    public UIView Owner { get; }
    public IComponentView CellView { get; private set; }
    public string Title { get; public set; }
    public bool IsPad { get; }
    public float ToolbarHeight { get; }
    public bool IsModal { get; }
    public bool IsAnimationCompleted { get; private set; }
    public bool IsShown { get; public set; }
    public UITableView TableView { get; }
    protected bool IsOS7 { get; }
    public PickerBase`1(PropertyDefinition ownerProperty, UIView view, bool isModal);
    protected virtual void Finalize();
    public sealed virtual void add_Shown(EventHandler value);
    public sealed virtual void remove_Shown(EventHandler value);
    public sealed virtual void add_Hidden(EventHandler value);
    public sealed virtual void remove_Hidden(EventHandler value);
    public abstract virtual T get_Picker();
    [CompilerGeneratedAttribute]
private Nullable`1<CGPoint> get_a();
    [CompilerGeneratedAttribute]
private void set_a(Nullable`1<CGPoint> value);
    public sealed virtual PropertyDefinition get_OwnerProperty();
    public UIView get_Owner();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentView get_CellView();
    [CompilerGeneratedAttribute]
private void set_CellView(IComponentView value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    public bool get_IsPad();
    public float get_ToolbarHeight();
    public bool get_IsModal();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAnimationCompleted();
    [CompilerGeneratedAttribute]
private void set_IsAnimationCompleted(bool value);
    public sealed virtual bool get_IsShown();
    public void set_IsShown(bool value);
    public UITableView get_TableView();
    protected bool get_IsOS7();
    private sealed virtual override void Intersoft.Crosslight.iOS.IPicker.Initialize();
    protected virtual void Initialize();
    public sealed virtual void SetInitialPosition(CGPoint position);
    public sealed virtual void AdjustFrame(CGPoint contentOffset);
    public virtual void Show(UIView fromView);
    private void Show_OS7(UIView fromView);
    private void WaitAnimationScrollToVisible(CGRect targetFrame, bool initialCall);
    private void Show_PreOS7(UIView fromView);
    public virtual void Hide(bool animated, PickerHideInitiator initiator);
    private void Hide_OS7(bool animated, PickerHideInitiator initiator);
    private void Hide_PreOS7(bool animated, PickerHideInitiator initiator);
    protected virtual float GetDefaultPickerHeight(bool isPortrait);
    public virtual void InvalidateFrame(bool animated);
    public sealed virtual void Dispose();
    public virtual void Dispose(bool isDisposing);
    [CompilerGeneratedAttribute]
private void <Initialize>b__0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__1(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__2(object sender, UIButtonEventArgs e);
    [CompilerGeneratedAttribute]
private void <Show_PreOS7>b__a();
    [CompilerGeneratedAttribute]
private void <Hide_OS7>b__f();
    [CompilerGeneratedAttribute]
private void <Hide_PreOS7>b__12();
    [CompilerGeneratedAttribute]
private void <InvalidateFrame>b__17();
    [CompilerGeneratedAttribute]
private void <InvalidateFrame>b__18();
}
public class Intersoft.Crosslight.iOS.Views.SwitchViewCell : FormViewCell {
    private UISwitch a;
    public EditorControlType EditorControlType { get; }
    public SwitchViewCell(UITableViewController controller, PropertyDefinition property);
    protected virtual UIView CreateEditor();
    public virtual EditorControlType get_EditorControlType();
    protected virtual void Dispose(bool disposing);
}
public class Intersoft.Crosslight.iOS.Views.TextViewCell : FormViewCell {
    private UITextView a;
    private UILabel b;
    private UIView c;
    public EditorControlType EditorControlType { get; }
    protected float TopMargin { get; }
    protected float BottomMargin { get; }
    public TextViewCell(UITableViewController controller, PropertyDefinition property);
    public virtual EditorControlType get_EditorControlType();
    protected virtual float get_TopMargin();
    protected virtual float get_BottomMargin();
    protected virtual UIView CreateEditor();
    private void EnsurePlaceholderVisibility(string text);
    private void ConfigureTextViewEvents();
    private void InvalidateSize(bool isInitializing, string text);
    public virtual void InvalidateSize(bool isInitializing);
    public virtual CGRect MeasureTextViewSize(bool isInitializing, string text);
    public virtual void Activate();
    protected virtual float GetEditorHeight();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <ConfigureTextViewEvents>b__0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private bool <ConfigureTextViewEvents>b__1(UITextView tv, NSRange range, string text);
    [CompilerGeneratedAttribute]
private void <ConfigureTextViewEvents>b__3();
}
public class Intersoft.Crosslight.iOS.Views.UIActivityToastView : UIToastView {
    internal static UIActivityToastView a;
    [CompilerGeneratedAttribute]
private ActivityStyle b;
    public ActivityStyle Style { get; private set; }
    public UIActivityToastView(ActivityStyle style);
    public UIActivityToastView(string message, ActivityStyle style);
    private static UIActivityToastView();
    [CompilerGeneratedAttribute]
public ActivityStyle get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(ActivityStyle value);
    public virtual void Show(UIView owner);
    public virtual void Hide();
    protected virtual UIView CreateToast();
}
public class Intersoft.Crosslight.iOS.Views.UIToastView : NSObject {
    private static ToastSettings a;
    [CompilerGeneratedAttribute]
private UIView b;
    [CompilerGeneratedAttribute]
private UIView c;
    [CompilerGeneratedAttribute]
private Nullable`1<CGPoint> d;
    [CompilerGeneratedAttribute]
private UIView e;
    [CompilerGeneratedAttribute]
private string f;
    [CompilerGeneratedAttribute]
private string g;
    [CompilerGeneratedAttribute]
private string h;
    [CompilerGeneratedAttribute]
private ToastSettings i;
    public static ToastSettings DefaultSettings { get; }
    protected ToastSettings ResolvedSettings { get; }
    protected UIView ToastView { get; protected set; }
    protected UIView OverlayView { get; protected set; }
    public Nullable`1<CGPoint> Position { get; public set; }
    public UIView Owner { get; private set; }
    public string Message { get; public set; }
    public string Title { get; public set; }
    public string Image { get; public set; }
    public ToastSettings Settings { get; public set; }
    public UIToastView(string message);
    public UIToastView(string message, string title);
    public UIToastView(string message, string title, string image);
    private static UIToastView();
    public static ToastSettings get_DefaultSettings();
    protected ToastSettings get_ResolvedSettings();
    [CompilerGeneratedAttribute]
protected UIView get_ToastView();
    [CompilerGeneratedAttribute]
protected void set_ToastView(UIView value);
    [CompilerGeneratedAttribute]
protected UIView get_OverlayView();
    [CompilerGeneratedAttribute]
protected void set_OverlayView(UIView value);
    [CompilerGeneratedAttribute]
public Nullable`1<CGPoint> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<CGPoint> value);
    [CompilerGeneratedAttribute]
public UIView get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(UIView value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public ToastSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(ToastSettings value);
    public virtual void Show(UIView owner);
    public virtual void Hide();
    protected virtual UIView CreateToast();
    protected CGPoint GetCenterPoint(UIView toast);
    protected internal CGPoint GetCenterPointRotated(UIView view, float rotation);
    [CompilerGeneratedAttribute]
private void <Show>b__0();
    [CompilerGeneratedAttribute]
private void <Hide>b__4();
    [CompilerGeneratedAttribute]
private void <Hide>b__5();
}
public class Intersoft.Crosslight.iOS.Views.ViewWrapper : UITableViewCell {
    private UIView a;
    public ViewWrapper(UITableViewController controller, PropertyDefinition property, UIView view);
    public sealed virtual IViewContext GetViewContext();
    public sealed virtual float GetHeight();
    public sealed virtual void Activate();
    public sealed virtual void Deactivate();
    public sealed virtual void InvalidateSize(bool isInitializing);
    public virtual void WillDisplay();
    public virtual void ValueChanged(object newValue);
    public virtual void VisibilityChanged(bool isVisible);
    public virtual void EnabledChanged(bool isEnabled);
    public virtual TService GetService();
    public virtual TService GetService(bool newInstance);
}
public abstract class Intersoft.Crosslight.iOS.ViewTransitionBase : object {
    [CompilerGeneratedAttribute]
private Action`1<UIViewController> a;
    [CompilerGeneratedAttribute]
private double b;
    [CompilerGeneratedAttribute]
private bool c;
    [CompilerGeneratedAttribute]
private bool d;
    public Action`1<UIViewController> TransitionCompleted { get; public set; }
    public double TransitionDuration { get; public set; }
    public bool FadeOutSource { get; public set; }
    public bool Bounce { get; public set; }
    protected nfloat DefaultVelocity { get; }
    protected double DefaultDelay { get; }
    public abstract virtual Task AnimateTransitionAsync(TransitionContext context);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<UIViewController> get_TransitionCompleted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransitionCompleted(Action`1<UIViewController> value);
    [CompilerGeneratedAttribute]
public double get_TransitionDuration();
    [CompilerGeneratedAttribute]
public void set_TransitionDuration(double value);
    [CompilerGeneratedAttribute]
public bool get_FadeOutSource();
    [CompilerGeneratedAttribute]
public void set_FadeOutSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bounce();
    [CompilerGeneratedAttribute]
public void set_Bounce(bool value);
    protected virtual nfloat get_DefaultVelocity();
    protected virtual double get_DefaultDelay();
    public virtual double GetTransitionDuration(TransitionContext context);
    public virtual float GetShadowRadius(TransitionContext context);
    protected virtual Task AnimateNotifyAsync(TransitionContext context, Action animations);
}
public class Intersoft.Crosslight.iOS.ViewTransitionController : UIViewControllerAnimatedTransitioning {
    [CompilerGeneratedAttribute]
private TransitionKind a;
    [CompilerGeneratedAttribute]
private IViewTransition b;
    [CompilerGeneratedAttribute]
private bool c;
    [CompilerGeneratedAttribute]
private static Action d;
    public TransitionKind TransitionKind { get; public set; }
    public IViewTransition Transition { get; private set; }
    public bool IsPresenting { get; protected set; }
    protected bool ShouldAddTargetView { get; }
    protected bool ShouldRemoveFromSuperView { get; }
    public ViewTransitionController(IViewTransition transition, bool isPresenting);
    [CompilerGeneratedAttribute]
public TransitionKind get_TransitionKind();
    [CompilerGeneratedAttribute]
public void set_TransitionKind(TransitionKind value);
    [CompilerGeneratedAttribute]
public virtual IViewTransition get_Transition();
    [CompilerGeneratedAttribute]
private void set_Transition(IViewTransition value);
    [CompilerGeneratedAttribute]
public bool get_IsPresenting();
    [CompilerGeneratedAttribute]
protected void set_IsPresenting(bool value);
    protected virtual bool get_ShouldAddTargetView();
    protected virtual bool get_ShouldRemoveFromSuperView();
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.ViewTransitionController/a")]
[DebuggerStepThroughAttribute]
public virtual void AnimateTransition(IUIViewControllerContextTransitioning transitionContext);
    protected virtual UIView GetTargetView(IUIViewControllerContextTransitioning transitionContext);
    protected virtual void ConfigureTransition(IUIViewControllerContextTransitioning transition, TransitionContext context);
    public virtual double TransitionDuration(IUIViewControllerContextTransitioning transitionContext);
    [CompilerGeneratedAttribute]
private static void <AnimateTransition>b__0();
}
public enum Intersoft.Crosslight.iOS.ViewTransitionMode : Enum {
    public int value__;
    public static ViewTransitionMode None;
    public static ViewTransitionMode Fade;
    public static ViewTransitionMode Slide;
}
public interface Intersoft.Crosslight.iOS.Watch.IUpdateableBindingAdapter {
    public abstract virtual void UpdateSource(object sender, object value);
}
internal class Intersoft.Crosslight.iOS.Watch.o : object {
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, Func`2<string, ILog>> a;
    [CompilerGeneratedAttribute]
private static Func`2<IDependencyResolver, Func`2<Type, ILog>> b;
    [CompilerGeneratedAttribute]
private static Func`2<string, ILog> c;
    [CompilerGeneratedAttribute]
private static Func`2<Type, ILog> d;
    public sealed virtual void InitializeServices(IApplicationHost appHost);
    public sealed virtual void InitializeComponents(IApplicationHost appHost);
    public sealed virtual void InitializeApplication(IApplicationHost appHost);
    private sealed virtual override IApplicationService Intersoft.Crosslight.IApplicationInitializer.GetApplicationService(IApplicationContext context);
    [CompilerGeneratedAttribute]
private static Func`2<string, ILog> <InitializeServices>b__0(IDependencyResolver o);
    [CompilerGeneratedAttribute]
private static Func`2<Type, ILog> <InitializeServices>b__2(IDependencyResolver o);
    [CompilerGeneratedAttribute]
private static ILog <InitializeServices>b__1(string s);
    [CompilerGeneratedAttribute]
private static ILog <InitializeServices>b__3(Type s);
}
internal class Intersoft.Crosslight.iOS.Watch.q : object {
    private a a;
    private ImageSettings b;
    internal q(ImageSettings settings);
    private void SetPlaceholderImage(WKInterfaceObject obj);
    [AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.Watch.q/b")]
[DebuggerStepThroughAttribute]
internal void SetValue(WKInterfaceObject obj, BindableProperty property, object value);
    internal UIImage MakeCircle(UIImage image, CGSize imageSize, float radius);
    internal void SetImage(WKInterfaceObject obj, UIImage image);
}
[AttributeUsageAttribute("4")]
public class Intersoft.Crosslight.iOS.Watch.RegisterPageNavigationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] a;
    [CompilerGeneratedAttribute]
private Object[] b;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> c;
    public Type[] Controllers { get; private set; }
    public String[] ControllerNames { get; }
    public Object[] Parameters { get; private set; }
    public RegisterPageNavigationAttribute(Type[] controllerTypes);
    public RegisterPageNavigationAttribute(Type[] controllerTypes, Object[] navigationParameters);
    [CompilerGeneratedAttribute]
public virtual Type[] get_Controllers();
    [CompilerGeneratedAttribute]
private void set_Controllers(Type[] value);
    public virtual String[] get_ControllerNames();
    [CompilerGeneratedAttribute]
public virtual Object[] get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(Object[] value);
    [CompilerGeneratedAttribute]
private static string <get_ControllerNames>b__0(Type o);
}
internal class Intersoft.Crosslight.iOS.Watch.s : object {
    [CompilerGeneratedAttribute]
private bool a;
    [CompilerGeneratedAttribute]
private object b;
    [CompilerGeneratedAttribute]
private int c;
    internal bool a { get; internal set; }
    internal object b { get; internal set; }
    internal int c { get; internal set; }
    internal string d { get; }
    [CompilerGeneratedAttribute]
internal bool get_a();
    [CompilerGeneratedAttribute]
internal void set_a(bool value);
    [CompilerGeneratedAttribute]
internal object get_b();
    [CompilerGeneratedAttribute]
internal void set_b(object value);
    [CompilerGeneratedAttribute]
internal int get_c();
    [CompilerGeneratedAttribute]
internal void set_c(int value);
    internal string get_d();
}
internal class Intersoft.Crosslight.iOS.Watch.Services.r : NSObject {
    [CompilerGeneratedAttribute]
private object a;
    [CompilerGeneratedAttribute]
private NavigationTarget b;
    internal object a { get; internal set; }
    internal NavigationTarget b { get; internal set; }
    internal r(object viewModel, NavigationTarget target);
    [CompilerGeneratedAttribute]
internal object get_a();
    [CompilerGeneratedAttribute]
internal void set_a(object value);
    [CompilerGeneratedAttribute]
internal NavigationTarget get_b();
    [CompilerGeneratedAttribute]
internal void set_b(NavigationTarget value);
}
public class Intersoft.Crosslight.iOS.Watch.Services.WKNavigationService : object {
    private IViewModel a;
    private WKInterfaceController b;
    private bool c;
    [CompilerGeneratedAttribute]
private static object d;
    [CompilerGeneratedAttribute]
private IViewContext e;
    [CompilerGeneratedAttribute]
private bool f;
    [CompilerGeneratedAttribute]
private NavigationResult g;
    public static object LastNavigationInitiator { get; public set; }
    public IViewContext RootModalView { get; private set; }
    internal bool a { get; internal set; }
    internal NavigationResult b { get; internal set; }
    [CompilerGeneratedAttribute]
public static object get_LastNavigationInitiator();
    [CompilerGeneratedAttribute]
public static void set_LastNavigationInitiator(object value);
    [CompilerGeneratedAttribute]
public IViewContext get_RootModalView();
    [CompilerGeneratedAttribute]
private void set_RootModalView(IViewContext value);
    [CompilerGeneratedAttribute]
internal bool get_a();
    [CompilerGeneratedAttribute]
internal void set_a(bool value);
    [CompilerGeneratedAttribute]
internal NavigationResult get_b();
    [CompilerGeneratedAttribute]
internal void set_b(NavigationResult value);
    private sealed virtual override void Intersoft.Crosslight.INavigationService.Initialize(IViewModel viewModel);
    public sealed virtual bool Navigate();
    public sealed virtual bool Navigate(string targetName);
    public virtual bool Navigate(NavigationParameter parameter);
    public virtual bool Navigate(NavigationParameter parameter, Action`1<NavigationResult> resultCallback);
    public sealed virtual bool Navigate(NavigationTarget target);
    public sealed virtual bool Navigate(NavigationTarget target, Action`1<NavigationResult> resultCallback);
    public sealed virtual void Close();
    public sealed virtual void Close(NavigationResult result);
    private Type GetViewModelType(Type type);
}
public class Intersoft.Crosslight.iOS.Watch.WatchApplicationContext : ApplicationContext {
    public WatchApplicationContext(Type mainType, IApplicationHost appHost);
}
public class Intersoft.Crosslight.iOS.Watch.WatchInterfaceController`1 : WKInterfaceController {
    private bool a;
    private IViewModel b;
    private List`1<BindingContext> c;
    private List`1<BindingDefinition> d;
    private List`1<WKInterfaceObject> e;
    private Dictionary`2<string, NSObject> f;
    private EventHandler`1<DismissViewEventArgs> g;
    [CompilerGeneratedAttribute]
private bool h;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> i;
    public TViewModel ViewModel { get; }
    public string TitleMemberPath { get; }
    public bool IsPresentedModally { get; private set; }
    internal List`1<BindingContext> a { get; }
    internal List`1<BindingDefinition> b { get; }
    internal WKNavigationService c { get; }
    internal bool d { get; }
    private IViewModel Intersoft.Crosslight.ISupportViewModel.ViewModel { get; }
    protected internal WatchInterfaceController`1(IntPtr handle);
    public TViewModel get_ViewModel();
    public virtual string get_TitleMemberPath();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPresentedModally();
    [CompilerGeneratedAttribute]
private void set_IsPresentedModally(bool value);
    internal List`1<BindingContext> get_a();
    internal List`1<BindingDefinition> get_b();
    internal WKNavigationService get_c();
    internal bool get_d();
    public sealed virtual void add_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    public sealed virtual void remove_ViewDismissed(EventHandler`1<DismissViewEventArgs> value);
    protected virtual TViewModel CreateViewModel();
    protected virtual void OnViewModelPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnViewModelResourcesChanged();
    protected virtual void InitializeViewModel();
    protected virtual void InitializeBindings();
    protected virtual void OnViewCreated();
    protected virtual void OnViewDisposed();
    protected virtual void InitializeView();
    protected virtual void OnViewInitialized();
    protected void OnViewDismissed(NavigationResult result);
    public virtual void Awake(NSObject context);
    public virtual void WillActivate();
    public virtual void DidSelectRow(WKInterfaceTable table, nint rowIndex);
    public virtual void DidDeactivate();
    protected virtual void Dispose(bool disposing);
    public void InvokeCommand(WKInterfaceButton button);
    public void UpdateSource(WKInterfaceObject obj, object value);
    public void AddBinding(BindingContext bindingContext);
    public void AddBinding(WKInterfaceObject targetView, BindableProperty property, BindingDescription binding);
    public void AddBinding(WKInterfaceObject targetView, BindableProperty property, string path);
    public void AddBinding(WKInterfaceObject targetView, BindableProperty property, string path, BindingMode mode);
    public void AddBinding(string targetViewName, BindableProperty property, BindingDescription binding);
    public void AddBinding(string targetViewName, BindableProperty property, string path);
    public void AddBinding(string targetViewName, BindableProperty property, string path, BindingMode mode);
    private void DisposeInternal();
    private sealed virtual override void Intersoft.Crosslight.IViewContext.OnViewDismissed(NavigationResult result);
    private sealed virtual override void Intersoft.Crosslight.IViewModelInitializer.SetViewModel(IViewModel viewModel);
    private void EnsureViewModel(bool initializeEvents);
    private void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ImportFromBindingProvider();
    private void ProcessPropertySets();
    private void RegisterBindings();
    private void InitializeRegisteredComponents();
    private sealed virtual override IViewModel Intersoft.Crosslight.ISupportViewModel.get_ViewModel();
    public sealed virtual object FindName(string name);
    public sealed virtual T FindName(string name);
    public virtual TService GetService();
    public virtual TService GetService(bool newInstance);
    [CompilerGeneratedAttribute]
private static bool <InitializeRegisteredComponents>b__0(PropertyInfo o);
}
public class Intersoft.Crosslight.iOS.Watch.WatchStartInterfaceController`1 : WatchInterfaceController`1<TViewModel> {
    private IApplicationInitializer a;
    private WKInterfaceController b;
    [CompilerGeneratedAttribute]
private static Func`2<Assembly, bool> c;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> d;
    public object ApplicationInstance { get; }
    public Type ApplicationType { get; }
    protected internal WatchStartInterfaceController`1(IntPtr handle);
    public virtual void Awake(NSObject context);
    public virtual void WillActivate();
    private void StartApplication();
    private void RunFrameworkInitializer(WKInterfaceController application);
    private void RunAppInitializer(WKInterfaceController application);
    private void RunExternalInitializer(WKInterfaceController application);
    public sealed virtual object get_ApplicationInstance();
    public sealed virtual Type get_ApplicationType();
    private sealed virtual override IEnumerable`1<Assembly> Intersoft.Crosslight.IApplicationHost.GetLoadedAssemblies();
    [CompilerGeneratedAttribute]
private static bool <RunExternalInitializer>b__0(Assembly o);
    [CompilerGeneratedAttribute]
private static bool <RunExternalInitializer>b__1(Type o);
}
public class Intersoft.Crosslight.iOS.Watch.WKButtonBindingAdapter : WKControlBindingAdapterBase`1<WKInterfaceButton> {
    private q a;
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnCommandCanExecuteChanged(ICommand command);
    private sealed virtual override void Intersoft.Crosslight.ICommandBindingAdapter.OnViewCanExecuteChanged(ICommand command, object view);
    public virtual void SetValue(WKInterfaceButton obj, BindableProperty property, object value);
    public virtual void Detach(WKInterfaceButton obj, BindingContext context);
    internal void OnClick(object sender, EventArgs e);
}
public class Intersoft.Crosslight.iOS.Watch.WKControlBindingAdapterBase`1 : BindingAdapterBase`1<T> {
    public virtual void SetValue(T obj, BindableProperty property, object value);
    public virtual object GetValue(T obj, BindableProperty property);
    public sealed virtual void UpdateSource(object obj, object value);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod3(T , BindableProperty , object );
}
[ExtensionAttribute]
public static class Intersoft.Crosslight.iOS.Watch.WKExtensions : object {
    [ExtensionAttribute]
public static void Initialize(WKInterfaceObject component, WKInterfaceController controller);
    [ExtensionAttribute]
public static void SetSettings(WKInterfaceTable table, WKTableViewSettings tableViewSettings);
}
public class Intersoft.Crosslight.iOS.Watch.WKImageBindingAdapter : WKControlBindingAdapterBase`1<WKInterfaceImage> {
    private q a;
    public virtual void SetValue(WKInterfaceImage obj, BindableProperty property, object value);
}
public class Intersoft.Crosslight.iOS.Watch.WKLabelBindingAdapter : WKControlBindingAdapterBase`1<WKInterfaceLabel> {
    public virtual void SetValue(WKInterfaceLabel obj, BindableProperty property, object value);
}
[DefaultMemberAttribute("Item")]
public class Intersoft.Crosslight.iOS.Watch.WKObservableTableSource : object {
    private WKInterfaceTable a;
    private IViewModel b;
    private ItemBindingDescription c;
    private INotifyCollectionChanged d;
    private IEnumerable e;
    private IList`1<IGroupItem> f;
    private IList`1<s> g;
    private Nullable`1<bool> h;
    private bool i;
    private bool j;
    [CompilerGeneratedAttribute]
private bool k;
    [CompilerGeneratedAttribute]
private bool l;
    [CompilerGeneratedAttribute]
private bool m;
    [CompilerGeneratedAttribute]
private static Func`2<s, string> n;
    [CompilerGeneratedAttribute]
private static Func`2<BindingContext, string> o;
    public object Item { get; }
    public IViewModel ViewModel { get; }
    protected IList`1<IGroupItem> GroupItems { get; }
    protected bool HasGroup { get; }
    public bool EnableGrouping { get; public set; }
    public bool IsActive { get; public set; }
    public int Count { get; }
    public bool SuspendUIUpdates { get; public set; }
    public WKObservableTableSource(WKInterfaceTable tableView, ItemBindingDescription bindingDescription, IViewModel viewModel);
    public sealed virtual object get_Item(int position);
    public virtual IViewModel get_ViewModel();
    protected IList`1<IGroupItem> get_GroupItems();
    protected bool get_HasGroup();
    [CompilerGeneratedAttribute]
public virtual bool get_EnableGrouping();
    [CompilerGeneratedAttribute]
public virtual void set_EnableGrouping(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
public virtual void set_IsActive(bool value);
    public virtual int get_Count();
    [CompilerGeneratedAttribute]
public bool get_SuspendUIUpdates();
    [CompilerGeneratedAttribute]
public void set_SuspendUIUpdates(bool value);
    public virtual void RowSelected(int index);
    public void ReloadTableView(NSIndexPath[] indexPaths);
    protected virtual void BindRow(int i);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected void PerformItemBinding(NSObject cell, object item);
    protected void PerformGroupBinding(NSObject cell, IGroupItem groupItem);
    private void PerformPrimaryAction(int index);
    private void OnViewModelDataChanged(object sender, DataChangedEventArgs e);
    private void OnViewModelPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnItemsChanged(IEnumerable oldItems, IEnumerable newItems);
    private void RefreshGroupItems(bool reloadData, bool refreshGroupSource);
    private void UpdateIndexPath(object item);
    private void UpdateIndexPath();
    private List`1<s> GetGroupedRows();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual object GetItemAt(IndexPath indexPath);
    public virtual IndexPath GetItemIndex(object item);
    public virtual void SetItems(IEnumerable items);
    [CompilerGeneratedAttribute]
private static string <ReloadTableView>b__0(s o);
    [CompilerGeneratedAttribute]
private static string <Dispose>b__7(BindingContext o);
}
public static class Intersoft.Crosslight.iOS.Watch.WKProperties : object {
    public static BindableProperty TableSourceProperty;
    public static BindableProperty OwnerProperty;
    public static BindableProperty IsDisposingProperty;
    public static BindableProperty TableSettingsProperty;
    private static WKProperties();
}
public class Intersoft.Crosslight.iOS.Watch.WKSliderBindingAdapter : WKControlBindingAdapterBase`1<WKInterfaceSlider> {
    public virtual void SetValue(WKInterfaceSlider obj, BindableProperty property, object value);
}
public class Intersoft.Crosslight.iOS.Watch.WKSwitchBindingAdapter : WKControlBindingAdapterBase`1<WKInterfaceSwitch> {
    public virtual void SetValue(WKInterfaceSwitch obj, BindableProperty property, object value);
}
public class Intersoft.Crosslight.iOS.Watch.WKTableRowController : NSObject {
}
[KeepAliveAttribute]
public class Intersoft.Crosslight.iOS.Watch.WKTableSelectionSettings : object {
    [CompilerGeneratedAttribute]
private string a;
    [CompilerGeneratedAttribute]
private string b;
    [CompilerGeneratedAttribute]
private StyleAttributes c;
    public string SelectedStateImage { get; public set; }
    public string NormalStateImage { get; public set; }
    public StyleAttributes SelectedStyle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SelectedStateImage();
    [CompilerGeneratedAttribute]
public void set_SelectedStateImage(string value);
    [CompilerGeneratedAttribute]
public string get_NormalStateImage();
    [CompilerGeneratedAttribute]
public void set_NormalStateImage(string value);
    [CompilerGeneratedAttribute]
public StyleAttributes get_SelectedStyle();
    [CompilerGeneratedAttribute]
public void set_SelectedStyle(StyleAttributes value);
}
public class Intersoft.Crosslight.iOS.Watch.WKTableViewBindingAdapter : WKControlBindingAdapterBase`1<WKInterfaceTable> {
    internal static BindableProperty a;
    private static WKTableViewBindingAdapter();
    public bool IsComponentInitialized(WKInterfaceTable obj);
    private IViewModel GetViewModel(IViewModel rootViewModel, string itemsSourceBindingPath);
    public virtual void SetValue(WKInterfaceTable obj, BindableProperty property, object value);
    public virtual void Detach(WKInterfaceTable obj, BindingContext context);
    private ItemBindingDescription GetItemBinding(WKInterfaceTable tableView);
    private void SetupObservableTableSource(WKInterfaceTable tableView);
}
[KeepAliveAttribute]
public class Intersoft.Crosslight.iOS.Watch.WKTableViewSettings : object {
    [CompilerGeneratedAttribute]
private TableViewInteraction a;
    [CompilerGeneratedAttribute]
private ChoiceInputMode b;
    [CompilerGeneratedAttribute]
private ImageSettings c;
    [CompilerGeneratedAttribute]
private WKTableSelectionSettings d;
    public TableViewInteraction InteractionMode { get; public set; }
    public ChoiceInputMode ChoiceInputMode { get; public set; }
    public ImageSettings CellImageSettings { get; private set; }
    public WKTableSelectionSettings SelectionSettings { get; private set; }
    [CompilerGeneratedAttribute]
public TableViewInteraction get_InteractionMode();
    [CompilerGeneratedAttribute]
public void set_InteractionMode(TableViewInteraction value);
    [CompilerGeneratedAttribute]
public ChoiceInputMode get_ChoiceInputMode();
    [CompilerGeneratedAttribute]
public void set_ChoiceInputMode(ChoiceInputMode value);
    [CompilerGeneratedAttribute]
public ImageSettings get_CellImageSettings();
    [CompilerGeneratedAttribute]
private void set_CellImageSettings(ImageSettings value);
    [CompilerGeneratedAttribute]
public WKTableSelectionSettings get_SelectionSettings();
    [CompilerGeneratedAttribute]
private void set_SelectionSettings(WKTableSelectionSettings value);
}
public class Intersoft.Crosslight.iOS.WebViewBuilder : ComponentViewBuilder {
    public string EditorIdentifier { get; }
    public virtual IComponentView Build(object viewHost, PropertyDefinition property);
    public virtual string get_EditorIdentifier();
}
public class Intersoft.Crosslight.iOS.WebViewCell : FormViewCell {
    private UIWebView a;
    public WebViewCell(UITableViewController controller, PropertyDefinition property);
    protected virtual void Dispose(bool disposing);
}
public class Intersoft.Crosslight.iOS.WebViewController : UIViewController`1<WebViewModel> {
    private UIWebView a;
    protected virtual void OnViewInitialized();
    protected virtual void OnViewDisposed();
    [CompilerGeneratedAttribute]
private void <OnViewInitialized>b__0(object sender, EventArgs e);
}
public class Intersoft.Crosslight.iOS.WebViewModel : ViewModelBase {
    private string a;
    public string Url { get; public set; }
    public string get_Url();
    public void set_Url(string value);
    public virtual void Navigated(NavigatedParameter parameter);
}
public class Intersoft.Crosslight.iOS.XLTableViewCell : UITableViewCell {
    private k a;
    private UITableViewController b;
    private UIView c;
    private ITableViewController a { get; }
    public XLTableViewCell(IntPtr handle);
    public XLTableViewCell(NSObjectFlag t);
    public XLTableViewCell(UITableViewCellStyle style, NSString reuseIdentifier);
    public XLTableViewCell(UITableViewController controller, UITableViewCellStyle style, string reuseIdentifier);
    public XLTableViewCell(CGRect frame);
    public XLTableViewCell(UITableViewCellStyle style, string reuseIdentifier);
    public virtual NSObject ValueForUndefinedKey(NSString key);
    private ITableViewController get_a();
    public virtual void AddSubview(UIView view);
    public virtual void MovedToSuperview();
}
public class Intersoft.Crosslight.iOS.ZoomTransition : ViewTransitionBase {
    [CompilerGeneratedAttribute]
private bool a;
    public bool ZoomOutSource { get; public set; }
    public nfloat InitialScaleRatio { get; }
    public nfloat DismissScaleRatio { get; }
    [CompilerGeneratedAttribute]
public bool get_ZoomOutSource();
    [CompilerGeneratedAttribute]
public void set_ZoomOutSource(bool value);
    public virtual nfloat get_InitialScaleRatio();
    public virtual nfloat get_DismissScaleRatio();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("Intersoft.Crosslight.iOS.ZoomTransition/b")]
public virtual Task AnimateTransitionAsync(TransitionContext context);
}
