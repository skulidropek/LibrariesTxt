[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class NetTools.Bits : object {
    public static Byte[] Not(Byte[] bytes);
    public static Byte[] And(Byte[] A, Byte[] B);
    public static Byte[] Or(Byte[] A, Byte[] B);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method returns true when A<=B, not A is greater than or equal (>=) B. use LtE method to check A<=B or not.")]
public static bool GE(Byte[] A, Byte[] B);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method returns true when A>=B, not A is less than or equal (<=) B. use GtE method to check A>=B or not.")]
public static bool LE(Byte[] A, Byte[] B);
    public static bool LtE(Byte[] A, Byte[] B, int offset);
    internal static bool LtECore(Byte[] A, Byte[] B, int offset);
    public static bool GtE(Byte[] A, Byte[] B, int offset);
    internal static bool GtECore(Byte[] A, Byte[] B, int offset);
    public static bool IsEqual(Byte[] A, Byte[] B);
    public static Byte[] GetBitMask(int sizeOfBuff, int bitLen);
    public static Nullable`1<int> GetBitMaskLength(Byte[] bytes);
    public static Byte[] Increment(Byte[] bytes);
    public static Byte[] Decrement(Byte[] bytes);
}
[ExtensionAttribute]
internal static class NetTools.Internals.IPAddressExtensions : object {
    [ExtensionAttribute]
public static UInt32 ToUInt32(IPAddress ipAddress);
    [ExtensionAttribute]
public static BigInteger ToBigInteger(IPAddress ipAddress);
    [ExtensionAttribute]
public static IPAddress ToIPv4Address(UInt32 value);
    [ExtensionAttribute]
public static IPAddress ToIPv6Address(BigInteger& value);
}
internal class NetTools.Internals.IPv4RangeOperator : object {
    [CompilerGeneratedAttribute]
private UInt32 <Begin>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <End>k__BackingField;
    private UInt32 Begin { get; }
    private UInt32 End { get; }
    private int System.Collections.Generic.ICollection<System.Net.IPAddress>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Net.IPAddress>.IsReadOnly { get; }
    public IPv4RangeOperator(IPAddressRange range);
    [CompilerGeneratedAttribute]
private UInt32 get_Begin();
    [CompilerGeneratedAttribute]
private UInt32 get_End();
    public bool Contains(IPAddress ipaddress);
    public sealed virtual bool Contains(IPAddressRange range);
    [IteratorStateMachineAttribute("NetTools.Internals.IPv4RangeOperator/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<IPAddress> GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Net.IPAddress>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Net.IPAddress>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Net.IPAddress>.Add(IPAddress item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Net.IPAddress>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Net.IPAddress>.Contains(IPAddress item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Net.IPAddress>.CopyTo(IPAddress[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Net.IPAddress>.Remove(IPAddress item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class NetTools.Internals.IPv6RangeOperator : object {
    [CompilerGeneratedAttribute]
private BigInteger <Begin>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <End>k__BackingField;
    private BigInteger Begin { get; }
    private BigInteger End { get; }
    private int System.Collections.Generic.ICollection<System.Net.IPAddress>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Net.IPAddress>.IsReadOnly { get; }
    public IPv6RangeOperator(IPAddressRange range);
    [CompilerGeneratedAttribute]
private BigInteger get_Begin();
    [CompilerGeneratedAttribute]
private BigInteger get_End();
    public bool Contains(IPAddress ipaddress);
    public sealed virtual bool Contains(IPAddressRange range);
    [IteratorStateMachineAttribute("NetTools.Internals.IPv6RangeOperator/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<IPAddress> GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Net.IPAddress>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Net.IPAddress>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Net.IPAddress>.Add(IPAddress item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Net.IPAddress>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Net.IPAddress>.Contains(IPAddress item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Net.IPAddress>.CopyTo(IPAddress[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Net.IPAddress>.Remove(IPAddress item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface NetTools.Internals.IRangeOperator {
    public abstract virtual bool Contains(IPAddressRange range);
}
internal static class NetTools.Internals.RangeOperatorFactory : object {
    public static IRangeOperator Create(IPAddressRange range);
}
public class NetTools.IPAddressRange : object {
    private static int EMPTYPREFIXLENGTH;
    private static Regex m1_regex;
    private static Regex m2_regex;
    private static Regex m3_regex;
    private static Regex m4_regex;
    private IPAddress _Begin;
    private IPAddress _End;
    private IRangeOperator _Operator;
    private int _prefixLength;
    public IPAddress Begin { get; public set; }
    public IPAddress End { get; public set; }
    private IRangeOperator Operator { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>.Keys { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>.Values { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Count { get; }
    private string System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>.Item { get; }
    public IPAddressRange(IPAddress singleAddress);
    public IPAddressRange(IPAddress begin, IPAddress end);
    public IPAddressRange(IPAddress baseAddress, int maskLength);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use IPAddressRange.Parse static method instead.")]
public IPAddressRange(string ipRangeString);
    [EditorBrowsableAttribute("1")]
public IPAddressRange(IEnumerable`1<KeyValuePair`2<string, string>> items);
    private static IPAddressRange();
    public IPAddress get_Begin();
    public void set_Begin(IPAddress value);
    public IPAddress get_End();
    public void set_End(IPAddress value);
    private IRangeOperator get_Operator();
    public bool Contains(IPAddress ipaddress);
    public bool Contains(IPAddressRange range);
    public static IPAddressRange Parse(string ipRangeString);
    private static void ValidateSubnetMaskIsLinear(Byte[] maskBytes);
    public static bool TryParse(string ipRangeString, IPAddressRange& ipRange);
    public static int SubnetMaskLength(IPAddress subnetMask);
    public sealed virtual IEnumerator`1<IPAddress> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public sealed virtual bool Equals(IPAddressRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int getPrefixLength();
    public int GetPrefixLength();
    public string ToCidrString();
    public IEnumerable`1<IPAddress> AsEnumerable();
    private IEnumerable`1<KeyValuePair`2<string, string>> GetDictionaryItems();
    private bool TryGetValue(string key, String& value);
    private bool TryGetValue(IEnumerable`1<KeyValuePair`2<string, string>> items, string key, String& value);
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>.get_Keys();
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>.get_Values();
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.get_Count();
    private sealed virtual override string System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>.get_Item(string key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>.ContainsKey(string key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.String>.TryGetValue(string key, String& value);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, string>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>.GetEnumerator();
    [CompilerGeneratedAttribute]
internal static string <Parse>g__stripScopeId|24_0(string ipaddressString);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
