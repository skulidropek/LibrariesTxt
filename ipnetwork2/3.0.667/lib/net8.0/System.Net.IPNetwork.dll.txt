[ExtensionAttribute]
public static class System.Net.BigIntegerExtensions : object {
    [ExtensionAttribute]
public static string ToBinaryString(BigInteger bigint);
    [ExtensionAttribute]
public static string ToHexadecimalString(BigInteger bigint);
    [ExtensionAttribute]
public static string ToOctalString(BigInteger bigint);
    [ExtensionAttribute]
public static BigInteger PositiveReverse(BigInteger input, int width);
}
public class System.Net.CidrClassFull : object {
    public sealed virtual bool TryGuessCidr(string ip, Byte& cidr);
}
public class System.Net.CidrClassLess : object {
    public sealed virtual bool TryGuessCidr(string ip, Byte& cidr);
}
public static class System.Net.CidrGuess : object {
    private static Lazy`1<ICidrGuess> _cidr_classless;
    private static Lazy`1<ICidrGuess> _cidr_classfull;
    public static ICidrGuess ClassFull { get; }
    public static ICidrGuess ClassLess { get; }
    private static CidrGuess();
    public static ICidrGuess get_ClassFull();
    public static ICidrGuess get_ClassLess();
}
public enum System.Net.FilterEnum : Enum {
    public int value__;
    public static FilterEnum All;
    public static FilterEnum Usable;
}
public interface System.Net.ICidrGuess {
    public abstract virtual bool TryGuessCidr(string ip, Byte& cidr);
}
[DefaultMemberAttribute("Item")]
public class System.Net.IPAddressCollection : object {
    private IPNetwork2 _ipnetwork;
    private FilterEnum _filter;
    private BigInteger _enumerator;
    public BigInteger Count { get; }
    public IPAddress Item { get; }
    public IPAddress Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal IPAddressCollection(IPNetwork2 ipnetwork, FilterEnum filter);
    public BigInteger get_Count();
    public IPAddress get_Item(BigInteger i);
    public sealed virtual IPAddress get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    private sealed virtual override IEnumerator`1<IPAddress> System.Collections.Generic.IEnumerable<System.Net.IPAddress>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class System.Net.IPAddressExtensions : object {
    [ExtensionAttribute]
public static IPNetwork2 AsIPNetwork(IPAddress addr);
}
public class System.Net.IPNetwork2 : object {
    private object _sync;
    private int _hashCode;
    private BigInteger _ipaddress;
    private byte _cidr;
    private Nullable`1<BigInteger> _cachedBroadcast;
    private AddressFamily _family;
    private static Lazy`1<IPNetwork2> _iana_ablock_reserved;
    private static Lazy`1<IPNetwork2> _iana_bblock_reserved;
    private static Lazy`1<IPNetwork2> _iana_cblock_reserved;
    [DataMemberAttribute]
public string Value { get; public set; }
    internal BigInteger _network { get; }
    public IPAddress Network { get; }
    public AddressFamily AddressFamily { get; }
    internal BigInteger _netmask { get; }
    public IPAddress Netmask { get; }
    internal BigInteger _broadcast { get; }
    public IPAddress Broadcast { get; }
    public IPAddress FirstUsable { get; }
    public IPAddress LastUsable { get; }
    public BigInteger Usable { get; }
    public BigInteger Total { get; }
    public byte Cidr { get; }
    public static IPNetwork2 IANA_ABLK_RESERVED1 { get; }
    public static IPNetwork2 IANA_BBLK_RESERVED1 { get; }
    public static IPNetwork2 IANA_CBLK_RESERVED1 { get; }
    public IPAddress WildcardMask { get; }
    internal IPNetwork2(BigInteger ipaddress, AddressFamily family, byte cidr);
    public IPNetwork2(IPAddress ipaddress, byte cidr);
    private IPNetwork2(SerializationInfo info, StreamingContext context);
    private static IPNetwork2();
    public string get_Value();
    public void set_Value(string value);
    internal BigInteger get__network();
    public IPAddress get_Network();
    public AddressFamily get_AddressFamily();
    internal BigInteger get__netmask();
    public IPAddress get_Netmask();
    internal BigInteger get__broadcast();
    public IPAddress get_Broadcast();
    public IPAddress get_FirstUsable();
    public IPAddress get_LastUsable();
    public BigInteger get_Usable();
    public BigInteger get_Total();
    public byte get_Cidr();
    private void Init(BigInteger ipaddress, AddressFamily family, byte cidr);
    public static IPNetwork2 Parse(string ipaddress, string netmask);
    public static IPNetwork2 Parse(string ipaddress, byte cidr);
    public static IPNetwork2 Parse(IPAddress ipaddress, IPAddress netmask);
    public static IPNetwork2 Parse(string network);
    public static IPNetwork2 Parse(string network, bool sanitanize);
    public static IPNetwork2 Parse(string network, ICidrGuess cidrGuess);
    public static IPNetwork2 Parse(string network, ICidrGuess cidrGuess, bool sanitanize);
    public static bool TryParse(string ipaddress, string netmask, IPNetwork2& ipnetwork);
    public static bool TryParse(string ipaddress, byte cidr, IPNetwork2& ipnetwork);
    public static bool TryParse(string network, IPNetwork2& ipnetwork);
    public static bool TryParse(string network, bool sanitanize, IPNetwork2& ipnetwork);
    public static bool TryParse(IPAddress ipaddress, IPAddress netmask, IPNetwork2& ipnetwork);
    private static void InternalParse(bool tryParse, string ipaddress, string netmask, IPNetwork2& ipnetwork);
    private static void InternalParse(bool tryParse, string network, ICidrGuess cidrGuess, bool sanitanize, IPNetwork2& ipnetwork);
    private static void InternalParse(bool tryParse, IPAddress ipaddress, IPAddress netmask, IPNetwork2& ipnetwork);
    private static void InternalParse(bool tryParse, string ipaddress, byte cidr, IPNetwork2& ipnetwork);
    public static BigInteger ToBigInteger(IPAddress ipaddress);
    public static bool TryToBigInteger(IPAddress ipaddress, Nullable`1& uintIpAddress);
    internal static void InternalToBigInteger(bool tryParse, IPAddress ipaddress, Nullable`1& uintIpAddress);
    public static BigInteger ToUint(byte cidr, AddressFamily family);
    public static bool TryToUint(byte cidr, AddressFamily family, Nullable`1& uintNetmask);
    internal static void InternalToBigInteger(bool tryParse, byte cidr, AddressFamily family, Nullable`1& uintNetmask);
    private static void InternalToCidr(bool tryParse, BigInteger netmask, AddressFamily family, Nullable`1& cidr);
    public static byte ToCidr(IPAddress netmask);
    public static bool TryToCidr(IPAddress netmask, Nullable`1& cidr);
    private static void InternalToCidr(bool tryParse, IPAddress netmask, Nullable`1& cidr);
    public static IPAddress ToNetmask(byte cidr, AddressFamily family);
    public static bool TryToNetmask(byte cidr, AddressFamily family, IPAddress& netmask);
    internal static void InternalToNetmask(bool tryParse, byte cidr, AddressFamily family, IPAddress& netmask);
    private static byte BitsSet(BigInteger netmask, AddressFamily family);
    public static UInt32 BitsSet(IPAddress netmask);
    public static bool ValidNetmask(IPAddress netmask);
    internal static bool InternalValidNetmask(BigInteger netmask, AddressFamily family);
    public static IPAddress ToIPAddress(BigInteger ipaddress, AddressFamily family);
    internal static Byte[] Resize(Byte[] bytes, AddressFamily family);
    public bool Contains(IPAddress contains);
    [ObsoleteAttribute("static Contains is deprecated, please use instance Contains.")]
public static bool Contains(IPNetwork2 network, IPAddress ipaddress);
    public bool Contains(IPNetwork2 contains);
    [ObsoleteAttribute("static Contains is deprecated, please use instance Contains.")]
public static bool Contains(IPNetwork2 network, IPNetwork2 network2);
    private static BigInteger CreateBroadcast(BigInteger& network, BigInteger netmask, AddressFamily family);
    public bool Overlap(IPNetwork2 network2);
    [ObsoleteAttribute("static Overlap is deprecated, please use instance Overlap.")]
public static bool Overlap(IPNetwork2 network, IPNetwork2 network2);
    public virtual string ToString();
    public static IPNetwork2 get_IANA_ABLK_RESERVED1();
    public static IPNetwork2 get_IANA_BBLK_RESERVED1();
    public static IPNetwork2 get_IANA_CBLK_RESERVED1();
    public static bool IsIANAReserved(IPAddress ipaddress);
    public bool IsIANAReserved();
    [ObsoleteAttribute("static IsIANAReserved is deprecated, please use instance IsIANAReserved.")]
public static bool IsIANAReserved(IPNetwork2 ipnetwork);
    public IPNetworkCollection Subnet(byte cidr);
    [ObsoleteAttribute("static Subnet is deprecated, please use instance Subnet.")]
public static IPNetworkCollection Subnet(IPNetwork2 network, byte cidr);
    public bool TrySubnet(byte cidr, IPNetworkCollection& ipnetworkCollection);
    [ObsoleteAttribute("static TrySubnet is deprecated, please use instance TrySubnet.")]
public static bool TrySubnet(IPNetwork2 network, byte cidr, IPNetworkCollection& ipnetworkCollection);
    internal static void InternalSubnet(bool trySubnet, IPNetwork2 network, byte cidr, IPNetworkCollection& ipnetworkCollection);
    public IPNetwork2 Supernet(IPNetwork2 network2);
    [ObsoleteAttribute("static Supernet is deprecated, please use instance Supernet.")]
public static IPNetwork2 Supernet(IPNetwork2 network, IPNetwork2 network2);
    public bool TrySupernet(IPNetwork2 network2, IPNetwork2& supernet);
    [ObsoleteAttribute("static TrySupernet is deprecated, please use instance TrySupernet.")]
public static bool TrySupernet(IPNetwork2 network, IPNetwork2 network2, IPNetwork2& supernet);
    internal static void InternalSupernet(bool trySupernet, IPNetwork2 network1, IPNetwork2 network2, IPNetwork2& supernet);
    public virtual int GetHashCode();
    private int ComputeHashCode();
    public static IPNetwork2[] Supernet(IPNetwork2[] ipnetworks);
    public static bool TrySupernet(IPNetwork2[] ipnetworks, IPNetwork2[]& supernet);
    internal static bool InternalSupernet(bool trySupernet, IPNetwork2[] ipnetworks, IPNetwork2[]& supernet);
    private static Stack`1<IPNetwork2> List2Stack(List`1<IPNetwork2> list);
    private static List`1<IPNetwork2> Array2List(IPNetwork2[] array);
    private static void RemoveNull(List`1<IPNetwork2> ipns);
    public static IPNetwork2 WideSubnet(string start, string end);
    public static bool TryWideSubnet(IPNetwork2[] ipnetworks, IPNetwork2& ipnetwork);
    public static IPNetwork2 WideSubnet(IPNetwork2[] ipnetworks);
    internal static void InternalWideSubnet(bool tryWide, IPNetwork2[] ipnetworks, IPNetwork2& ipnetwork);
    public string Print();
    [ObsoleteAttribute("static Print is deprecated, please use instance Print.")]
public static string Print(IPNetwork2 ipnetwork);
    public static bool TryGuessCidr(string ip, Byte& cidr);
    public static bool TryParseCidr(string sidr, AddressFamily family, Nullable`1& cidr);
    [ObsoleteAttribute("static ListIPAddress is deprecated, please use instance ListIPAddress.")]
public static IPAddressCollection ListIPAddress(IPNetwork2 ipnetwork);
    public IPAddressCollection ListIPAddress(FilterEnum filter);
    public static int Compare(IPNetwork2 left, IPNetwork2 right);
    public sealed virtual int CompareTo(IPNetwork2 other);
    public int CompareTo(object obj);
    public static bool Equals(IPNetwork2 left, IPNetwork2 right);
    public bool Equals(IPNetwork2 other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(IPNetwork2 left, IPNetwork2 right);
    public static bool op_Inequality(IPNetwork2 left, IPNetwork2 right);
    public static bool op_LessThan(IPNetwork2 left, IPNetwork2 right);
    public static bool op_GreaterThan(IPNetwork2 left, IPNetwork2 right);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public IPAddress get_WildcardMask();
}
[DefaultMemberAttribute("Item")]
public class System.Net.IPNetworkCollection : object {
    private BigInteger _enumerator;
    private byte _cidrSubnet;
    private IPNetwork2 _ipnetwork;
    private byte _cidr { get; }
    private BigInteger _broadcast { get; }
    private BigInteger _lastUsable { get; }
    private BigInteger _network { get; }
    public BigInteger Count { get; }
    public IPNetwork2 Item { get; }
    public IPNetwork2 Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal IPNetworkCollection(IPNetwork2 ipnetwork, byte cidrSubnet);
    private byte get__cidr();
    private BigInteger get__broadcast();
    private BigInteger get__lastUsable();
    private BigInteger get__network();
    public BigInteger get_Count();
    public IPNetwork2 get_Item(BigInteger i);
    private sealed virtual override IEnumerator`1<IPNetwork2> System.Collections.Generic.IEnumerable<System.Net.IPNetwork2>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IPNetwork2 get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
