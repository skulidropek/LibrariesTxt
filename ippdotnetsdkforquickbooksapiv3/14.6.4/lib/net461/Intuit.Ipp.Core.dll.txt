public class Intuit.Ipp.Core.AsyncCallCompletedEventArgs : AsyncCompletedEventArgs {
    private string results;
    private Byte[] byteResults;
    private IdsException error;
    public string Result { get; }
    public Byte[] ByteResult { get; }
    public IdsException Error { get; }
    public AsyncCallCompletedEventArgs(string result, IdsException error, Byte[] byteResults);
    public string get_Result();
    public Byte[] get_ByteResult();
    public IdsException get_Error();
}
public class Intuit.Ipp.Core.CallCompletedEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private T <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private IdsException <Error>k__BackingField;
    public T Entity { get; public set; }
    public IdsException Error { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(T value);
    [CompilerGeneratedAttribute]
public IdsException get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(IdsException value);
}
public class Intuit.Ipp.Core.CDCCallCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<IEntity>> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private IdsException <Error>k__BackingField;
    public Dictionary`2<string, List`1<IEntity>> Entities { get; public set; }
    public IdsException Error { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<IEntity>> get_Entities();
    [CompilerGeneratedAttribute]
public void set_Entities(Dictionary`2<string, List`1<IEntity>> value);
    [CompilerGeneratedAttribute]
public IdsException get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(IdsException value);
    public List`1<IEntity> getEntity(string key);
}
[CompilerGeneratedAttribute]
public class Intuit.Ipp.Core.Compression.NamespaceDoc : object {
}
public class Intuit.Ipp.Core.Configuration.AdvancedLogger : object {
    [CompilerGeneratedAttribute]
private RequestAdvancedLog <RequestAdvancedLog>k__BackingField;
    public RequestAdvancedLog RequestAdvancedLog { get; public set; }
    [CompilerGeneratedAttribute]
public RequestAdvancedLog get_RequestAdvancedLog();
    [CompilerGeneratedAttribute]
public void set_RequestAdvancedLog(RequestAdvancedLog value);
}
public class Intuit.Ipp.Core.Configuration.BaseUrl : object {
    [CompilerGeneratedAttribute]
private string <Qbo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ips>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OAuthAccessTokenUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserNameAuthentication>k__BackingField;
    public string Qbo { get; public set; }
    public string Ips { get; public set; }
    public string OAuthAccessTokenUrl { get; public set; }
    public string UserNameAuthentication { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Qbo();
    [CompilerGeneratedAttribute]
public void set_Qbo(string value);
    [CompilerGeneratedAttribute]
public string get_Ips();
    [CompilerGeneratedAttribute]
public void set_Ips(string value);
    [CompilerGeneratedAttribute]
public string get_OAuthAccessTokenUrl();
    [CompilerGeneratedAttribute]
public void set_OAuthAccessTokenUrl(string value);
    [CompilerGeneratedAttribute]
public string get_UserNameAuthentication();
    [CompilerGeneratedAttribute]
public void set_UserNameAuthentication(string value);
}
public enum Intuit.Ipp.Core.Configuration.CompressionFormat : Enum {
    public int value__;
    public static CompressionFormat None;
    public static CompressionFormat GZip;
    public static CompressionFormat Deflate;
}
public class Intuit.Ipp.Core.Configuration.IppConfiguration : object {
    [CompilerGeneratedAttribute]
private AdvancedLogger <AdvancedLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Logger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestValidator <Security>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IntuitRetryPolicy <RetryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseUrl <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private VerifierToken <VerifierToken>k__BackingField;
    [CompilerGeneratedAttribute]
private MinorVersion <MinorVersion>k__BackingField;
    public AdvancedLogger AdvancedLogger { get; public set; }
    public Logger Logger { get; public set; }
    public IRequestValidator Security { get; public set; }
    public Message Message { get; public set; }
    public IntuitRetryPolicy RetryPolicy { get; public set; }
    public BaseUrl BaseUrl { get; public set; }
    public VerifierToken VerifierToken { get; public set; }
    public MinorVersion MinorVersion { get; public set; }
    [CompilerGeneratedAttribute]
public AdvancedLogger get_AdvancedLogger();
    [CompilerGeneratedAttribute]
public void set_AdvancedLogger(AdvancedLogger value);
    [CompilerGeneratedAttribute]
public Logger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(Logger value);
    [CompilerGeneratedAttribute]
public IRequestValidator get_Security();
    [CompilerGeneratedAttribute]
public void set_Security(IRequestValidator value);
    [CompilerGeneratedAttribute]
public Message get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(Message value);
    [CompilerGeneratedAttribute]
public IntuitRetryPolicy get_RetryPolicy();
    [CompilerGeneratedAttribute]
public void set_RetryPolicy(IntuitRetryPolicy value);
    [CompilerGeneratedAttribute]
public BaseUrl get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(BaseUrl value);
    [CompilerGeneratedAttribute]
public VerifierToken get_VerifierToken();
    [CompilerGeneratedAttribute]
public void set_VerifierToken(VerifierToken value);
    [CompilerGeneratedAttribute]
public MinorVersion get_MinorVersion();
    [CompilerGeneratedAttribute]
public void set_MinorVersion(MinorVersion value);
}
public class Intuit.Ipp.Core.Configuration.IRequestResponse : object {
    [CompilerGeneratedAttribute]
private SerializationFormat <SerializationFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionFormat <CompressionFormat>k__BackingField;
    public SerializationFormat SerializationFormat { get; public set; }
    public CompressionFormat CompressionFormat { get; public set; }
    [CompilerGeneratedAttribute]
public SerializationFormat get_SerializationFormat();
    [CompilerGeneratedAttribute]
public void set_SerializationFormat(SerializationFormat value);
    [CompilerGeneratedAttribute]
public CompressionFormat get_CompressionFormat();
    [CompilerGeneratedAttribute]
public void set_CompressionFormat(CompressionFormat value);
}
public class Intuit.Ipp.Core.Configuration.JsonFileConfigurationProvider : object {
    public sealed virtual IppConfiguration GetConfiguration();
}
public class Intuit.Ipp.Core.Configuration.Logger : object {
    [CompilerGeneratedAttribute]
private RequestLog <RequestLog>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CustomLogger>k__BackingField;
    public RequestLog RequestLog { get; public set; }
    public ILogger CustomLogger { get; public set; }
    [CompilerGeneratedAttribute]
public RequestLog get_RequestLog();
    [CompilerGeneratedAttribute]
public void set_RequestLog(RequestLog value);
    [CompilerGeneratedAttribute]
public ILogger get_CustomLogger();
    [CompilerGeneratedAttribute]
public void set_CustomLogger(ILogger value);
}
public class Intuit.Ipp.Core.Configuration.MemoryConfigurationProvider : object {
    private IppConfiguration configuration;
    public MemoryConfigurationProvider(IppConfiguration cfg);
    public sealed virtual IppConfiguration GetConfiguration();
}
public class Intuit.Ipp.Core.Configuration.Message : object {
    [CompilerGeneratedAttribute]
private Request <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Response <Response>k__BackingField;
    public Request Request { get; public set; }
    public Response Response { get; public set; }
    [CompilerGeneratedAttribute]
public Request get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Request value);
    [CompilerGeneratedAttribute]
public Response get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(Response value);
}
public class Intuit.Ipp.Core.Configuration.MinorVersion : object {
    [CompilerGeneratedAttribute]
private string <Qbo>k__BackingField;
    public string Qbo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Qbo();
    [CompilerGeneratedAttribute]
public void set_Qbo(string value);
}
[CompilerGeneratedAttribute]
public class Intuit.Ipp.Core.Configuration.NamespaceDoc : object {
}
public class Intuit.Ipp.Core.Configuration.Request : IRequestResponse {
}
public class Intuit.Ipp.Core.Configuration.RequestAdvancedLog : object {
    private string serviceRequestLoggingLocationForFile;
    [CompilerGeneratedAttribute]
private bool <EnableSerilogRequestResponseLoggingForDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSerilogRequestResponseLoggingForTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSerilogRequestResponseLoggingForConsole>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSerilogRequestResponseLoggingForFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CustomLogger>k__BackingField;
    public bool EnableSerilogRequestResponseLoggingForDebug { get; public set; }
    public bool EnableSerilogRequestResponseLoggingForTrace { get; public set; }
    public bool EnableSerilogRequestResponseLoggingForConsole { get; public set; }
    public bool EnableSerilogRequestResponseLoggingForFile { get; public set; }
    public string ServiceRequestLoggingLocationForFile { get; public set; }
    public ILogger CustomLogger { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableSerilogRequestResponseLoggingForDebug();
    [CompilerGeneratedAttribute]
public void set_EnableSerilogRequestResponseLoggingForDebug(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSerilogRequestResponseLoggingForTrace();
    [CompilerGeneratedAttribute]
public void set_EnableSerilogRequestResponseLoggingForTrace(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSerilogRequestResponseLoggingForConsole();
    [CompilerGeneratedAttribute]
public void set_EnableSerilogRequestResponseLoggingForConsole(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSerilogRequestResponseLoggingForFile();
    [CompilerGeneratedAttribute]
public void set_EnableSerilogRequestResponseLoggingForFile(bool value);
    public string get_ServiceRequestLoggingLocationForFile();
    public void set_ServiceRequestLoggingLocationForFile(string value);
    [CompilerGeneratedAttribute]
public ILogger get_CustomLogger();
    [CompilerGeneratedAttribute]
public void set_CustomLogger(ILogger value);
}
public class Intuit.Ipp.Core.Configuration.RequestLog : object {
    private string serviceRequestLoggingLocation;
    [CompilerGeneratedAttribute]
private bool <EnableRequestResponsLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRequestResponseLogging>k__BackingField;
    [ObsoleteAttribute("EnableRequestResponsLogging is deprecated, please use EnableRequestResponseLogging instead.", "True")]
public bool EnableRequestResponsLogging { get; public set; }
    public bool EnableRequestResponseLogging { get; public set; }
    public string ServiceRequestLoggingLocation { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableRequestResponsLogging();
    [CompilerGeneratedAttribute]
public void set_EnableRequestResponsLogging(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableRequestResponseLogging();
    [CompilerGeneratedAttribute]
public void set_EnableRequestResponseLogging(bool value);
    public string get_ServiceRequestLoggingLocation();
    public void set_ServiceRequestLoggingLocation(string value);
}
public class Intuit.Ipp.Core.Configuration.Response : IRequestResponse {
}
public enum Intuit.Ipp.Core.Configuration.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Xml;
    public static SerializationFormat Json;
    public static SerializationFormat Custom;
}
public class Intuit.Ipp.Core.Configuration.VerifierToken : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public static class Intuit.Ipp.Core.CoreHelper : object {
    internal static AdvancedLogging AdvancedLogging;
    public static IEntitySerializer GetSerializer(ServiceContext serviceContext, bool isRequest);
    public static XmlDocument ParseResponseIntoXml(string response);
    public static void CheckNullResponseAndThrowException(string response);
    public static ICompressor GetCompressor(ServiceContext serviceContext, bool isRequest);
    public static LogRequestsToDisk GetRequestLogging(ServiceContext serviceContext);
    public static AdvancedLogging GetAdvancedLogging(ServiceContext serviceContext);
    internal static bool IsInvalidaExponentialRetryMode(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    internal static bool IsInvalidaIncrementalRetryMode(int retryCount, TimeSpan initialInterval, TimeSpan increment);
    internal static bool IsInvalidaLinearRetryMode(int retryCount, TimeSpan interval);
}
public static class Intuit.Ipp.Core.DataServiceCallback`1 : object {
}
public class Intuit.Ipp.Core.EntitlementCallCompletedEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private T <EntitlementsResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private IdsException <Error>k__BackingField;
    public T EntitlementsResponse { get; public set; }
    public IdsException Error { get; public set; }
    [CompilerGeneratedAttribute]
public T get_EntitlementsResponse();
    [CompilerGeneratedAttribute]
public void set_EntitlementsResponse(T value);
    [CompilerGeneratedAttribute]
public IdsException get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(IdsException value);
}
public static class Intuit.Ipp.Core.EntitlementServiceCallback`1 : object {
}
public class Intuit.Ipp.Core.FindAllCallCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IList`1<IEntity> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private IdsException <Error>k__BackingField;
    public IList`1<IEntity> Entities { get; public set; }
    public IdsException Error { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<IEntity> get_Entities();
    [CompilerGeneratedAttribute]
public void set_Entities(IList`1<IEntity> value);
    [CompilerGeneratedAttribute]
public IdsException get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(IdsException value);
}
public static class Intuit.Ipp.Core.GlobalTaxServiceCallback`1 : object {
}
public class Intuit.Ipp.Core.GlobalTaxServiceCallCompletedEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private T <TaxService>k__BackingField;
    [CompilerGeneratedAttribute]
private IdsException <Error>k__BackingField;
    public T TaxService { get; public set; }
    public IdsException Error { get; public set; }
    [CompilerGeneratedAttribute]
public T get_TaxService();
    [CompilerGeneratedAttribute]
public void set_TaxService(T value);
    [CompilerGeneratedAttribute]
public IdsException get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(IdsException value);
}
public enum Intuit.Ipp.Core.HttpVerbType : Enum {
    public int value__;
    public static HttpVerbType GET;
    public static HttpVerbType PUT;
    public static HttpVerbType DELETE;
    public static HttpVerbType POST;
}
public interface Intuit.Ipp.Core.IConfigurationProvider {
    public abstract virtual IppConfiguration GetConfiguration();
}
public interface Intuit.Ipp.Core.IExtendedRetry {
    public abstract virtual bool IsRetryException(Exception ex);
}
internal static class Intuit.Ipp.Core.IntuitRetryHelper : object {
    public static bool IsArgumentNull(object argumentValue, string argumentName);
    public static void ArgumentNotNegativeValue(int argumentValue, string argumentName);
    public static void ArgumentNotNegativeValue(long argumentValue, string argumentName);
    public static void ArgumentNotGreaterThan(double argumentValue, double ceilingValue, string argumentName);
}
public class Intuit.Ipp.Core.IntuitRetryingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <CurrentRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <LastException>k__BackingField;
    public int CurrentRetryCount { get; private set; }
    public TimeSpan Delay { get; private set; }
    public Exception LastException { get; private set; }
    public IntuitRetryingEventArgs(int currentRetryCount, TimeSpan delay, Exception lastException);
    [CompilerGeneratedAttribute]
public int get_CurrentRetryCount();
    [CompilerGeneratedAttribute]
private void set_CurrentRetryCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
private void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public Exception get_LastException();
    [CompilerGeneratedAttribute]
private void set_LastException(Exception value);
}
public class Intuit.Ipp.Core.IntuitRetryPolicy : object {
    private ServiceContext context;
    private ShouldRetry shouldRetry;
    private int retryCount;
    private TimeSpan retryInterval;
    private TimeSpan initialInterval;
    private TimeSpan increment;
    private TimeSpan minBackOff;
    private TimeSpan maxBackOff;
    private TimeSpan deltaBackOff;
    [CompilerGeneratedAttribute]
private EventHandler`1<IntuitRetryingEventArgs> Retrying;
    [CompilerGeneratedAttribute]
private IExtendedRetry <ExtendedRetryException>k__BackingField;
    public IExtendedRetry ExtendedRetryException { get; public set; }
    public IntuitRetryPolicy(ServiceContext context, int retryCount, TimeSpan retryInterval);
    public IntuitRetryPolicy(int retryCount, TimeSpan retryInterval);
    public IntuitRetryPolicy(ServiceContext context, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public IntuitRetryPolicy(int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public IntuitRetryPolicy(ServiceContext context, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public IntuitRetryPolicy(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    [CompilerGeneratedAttribute]
public void add_Retrying(EventHandler`1<IntuitRetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Retrying(EventHandler`1<IntuitRetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public IExtendedRetry get_ExtendedRetryException();
    [CompilerGeneratedAttribute]
public void set_ExtendedRetryException(IExtendedRetry value);
    public void ExecuteAction(Action action);
    public void ExecuteAction(Action`1<AsyncCallback> beginAction, Action`1<IAsyncResult> endAction, Action successHandler, Action`1<Exception> faultHandler);
    public void ExecuteAction(Action`1<AsyncCallback> beginAction, Func`2<IAsyncResult, TResult> endAction, Action`1<TResult> successHandler, Action`1<Exception> faultHandler);
    protected virtual void OnRetrying(int retryCount, Exception lastError, TimeSpan delay);
    private static bool CheckIsTransient(Exception ex);
    private static bool IsTransient(Exception ex);
    private TResult ExecuteAction(Func`1<TResult> func);
    private ShouldRetry GetShouldFixedRetry();
    private ShouldRetry GetShouldIncrementalRetry();
    private ShouldRetry GetShouldExponentialBackOffRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldFixedRetry>b__30_1(int currentRetryCount, Exception lastException, TimeSpan& interval);
    [CompilerGeneratedAttribute]
private bool <GetShouldIncrementalRetry>b__31_0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
    [CompilerGeneratedAttribute]
private bool <GetShouldExponentialBackOffRetry>b__32_0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
public enum Intuit.Ipp.Core.IntuitServicesType : Enum {
    public int value__;
    public static IntuitServicesType QBO;
    public static IntuitServicesType IPS;
    public static IntuitServicesType None;
}
[CompilerGeneratedAttribute]
public class Intuit.Ipp.Core.NamespaceDoc : object {
}
public class Intuit.Ipp.Core.PdfCallCompletedEventArgs : object {
    [CompilerGeneratedAttribute]
private Byte[] <PdfBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private IdsException <Error>k__BackingField;
    public Byte[] PdfBytes { get; public set; }
    public IdsException Error { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_PdfBytes();
    [CompilerGeneratedAttribute]
public void set_PdfBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public IdsException get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(IdsException value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Intuit.Ipp.Core.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AppTokenParameterName { get; }
    internal static string ArgumentCannotBeGreaterThanBaseline { get; }
    internal static string ArgumentCannotBeNegative { get; }
    internal static string BaseUriNullMessage { get; }
    internal static string CommunicationErrorMessage { get; }
    internal static string CurrentCompanyNullMessage { get; }
    internal static string DefaultMinorVersionValue { get; }
    internal static string ErrorCodeMissing { get; }
    internal static string ErrorCodeNonNemeric { get; }
    internal static string ErrorDetails0 { get; }
    internal static string ErrorDetails1 { get; }
    internal static string ErrorWithNoText { get; }
    internal static string ExceptionGeneratedMessage { get; }
    internal static string NoServiceTypeResponseMessage { get; }
    internal static string ParameterNotNullEmptyMessage { get; }
    internal static string ParameterNotNullMessage { get; }
    internal static string RealmIdNotFoundMessage { get; }
    internal static string RealmIdParameterName { get; }
    internal static string RequestValidatorParameterName { get; }
    internal static string ResponseStreamNullOrEmptyMessage { get; }
    internal static string ResponseStreamReadFailedMessage { get; }
    internal static string RetryLimitExceeded { get; }
    internal static string SerializationExceptionMessage { get; }
    internal static string ValidDirectoryPathMessage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AppTokenParameterName();
    internal static string get_ArgumentCannotBeGreaterThanBaseline();
    internal static string get_ArgumentCannotBeNegative();
    internal static string get_BaseUriNullMessage();
    internal static string get_CommunicationErrorMessage();
    internal static string get_CurrentCompanyNullMessage();
    internal static string get_DefaultMinorVersionValue();
    internal static string get_ErrorCodeMissing();
    internal static string get_ErrorCodeNonNemeric();
    internal static string get_ErrorDetails0();
    internal static string get_ErrorDetails1();
    internal static string get_ErrorWithNoText();
    internal static string get_ExceptionGeneratedMessage();
    internal static string get_NoServiceTypeResponseMessage();
    internal static string get_ParameterNotNullEmptyMessage();
    internal static string get_ParameterNotNullMessage();
    internal static string get_RealmIdNotFoundMessage();
    internal static string get_RealmIdParameterName();
    internal static string get_RequestValidatorParameterName();
    internal static string get_ResponseStreamNullOrEmptyMessage();
    internal static string get_ResponseStreamReadFailedMessage();
    internal static string get_RetryLimitExceeded();
    internal static string get_SerializationExceptionMessage();
    internal static string get_ValidDirectoryPathMessage();
}
public class Intuit.Ipp.Core.ReportCallCompletedEventArgs`1 : object {
    [CompilerGeneratedAttribute]
private T <Report>k__BackingField;
    [CompilerGeneratedAttribute]
private IdsException <Error>k__BackingField;
    public T Report { get; public set; }
    public IdsException Error { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Report();
    [CompilerGeneratedAttribute]
public void set_Report(T value);
    [CompilerGeneratedAttribute]
public IdsException get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(IdsException value);
}
public static class Intuit.Ipp.Core.ReportServiceCallback`1 : object {
}
public class Intuit.Ipp.Core.Rest.AsyncRestHandler : RestHandler {
    private string requestBody;
    private ServiceContext context;
    [CompilerGeneratedAttribute]
private EventHandler`1<AsyncCallCompletedEventArgs> OnCallCompleted;
    internal bool IsSyncRequestStream { get; }
    public AsyncRestHandler(ServiceContext context);
    [CompilerGeneratedAttribute]
public void add_OnCallCompleted(EventHandler`1<AsyncCallCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnCallCompleted(EventHandler`1<AsyncCallCompletedEventArgs> value);
    internal virtual bool get_IsSyncRequestStream();
    public virtual HttpWebRequest PrepareRequest(RequestParameters requestParameters, object requestBody, string oauthRequestUri, bool includeRequestId);
    public virtual string GetResponse(HttpWebRequest request);
    public virtual Byte[] GetResponseStream(HttpWebRequest request);
    private void ExecAsyncRequestWithRetryPolicy(HttpWebRequest asyncRequest);
    private void ExecuteServiceCallAsync(HttpWebRequest myRequest);
    private AsyncCallCompletedEventArgs CreateEventArgsForException(Exception exception);
    private AsyncCallCompletedEventArgs CreateEventArgsForRequest(IAsyncResult asyncResult);
    private Byte[] ConvertResponseStreamToBytes(Stream responseStream);
    private void ExecAsyncRequest(HttpWebRequest asyncRequest);
    private void AsyncExecutionCompleted(IAsyncResult result);
    private void GetRequestStreamCallback(IAsyncResult asynchronousResult);
    private AsyncCallCompletedEventArgs HandleErrors(string responseXml);
}
public static class Intuit.Ipp.Core.Rest.EncodingFixer : object {
    private static Dictionary`2<byte, char> Replacements;
    private static EncodingFixer();
    public static string FixQuickBaseEncoding(Byte[] encodedValue);
}
public class Intuit.Ipp.Core.Rest.FaultHandler : object {
    private ServiceContext context;
    public FaultHandler(ServiceContext context);
    internal IdsException ParseResponseAndThrowException(WebException webException, bool isIps);
    public IdsException ParseErrorResponseAndPrepareException(string errorString);
    private Fault ExtractFaultFromResponse(string errorString);
    private IdsException IterateFaultAndPrepareException(Fault fault);
}
public interface Intuit.Ipp.Core.Rest.IRestHandler {
    public abstract virtual HttpWebRequest PrepareRequest(RequestParameters requestParameters, object requestBody, string oauthRequestUri, bool includeRequestId);
    public abstract virtual string GetResponse(HttpWebRequest request);
    public abstract virtual Byte[] GetResponseStream(HttpWebRequest request);
}
public class Intuit.Ipp.Core.Rest.LogRequestsToDisk : object {
    [CompilerGeneratedAttribute]
private bool <EnableServiceRequestsLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceRequestLoggingLocation>k__BackingField;
    internal bool EnableServiceRequestsLogging { get; private set; }
    internal string ServiceRequestLoggingLocation { get; private set; }
    public LogRequestsToDisk(bool enableServiceRequestLogging, string serviceRequestLoggingLocation);
    [CompilerGeneratedAttribute]
internal bool get_EnableServiceRequestsLogging();
    [CompilerGeneratedAttribute]
private void set_EnableServiceRequestsLogging(bool value);
    [CompilerGeneratedAttribute]
internal string get_ServiceRequestLoggingLocation();
    [CompilerGeneratedAttribute]
private void set_ServiceRequestLoggingLocation(string value);
    public void LogPlatformRequests(string xml, bool isRequest);
}
[CompilerGeneratedAttribute]
public class Intuit.Ipp.Core.Rest.NamespaceDoc : object {
}
public class Intuit.Ipp.Core.Rest.RequestParameters : object {
    [CompilerGeneratedAttribute]
private string <ResourceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpVerbType <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiName>k__BackingField;
    public string ResourceUri { get; private set; }
    public HttpVerbType Verb { get; private set; }
    public string ContentType { get; private set; }
    public string ApiName { get; private set; }
    public RequestParameters(string resourceUri, HttpVerbType verb, string contentType);
    public RequestParameters(string resourceUri, HttpVerbType verb, string contentType, string apiName);
    [CompilerGeneratedAttribute]
public string get_ResourceUri();
    [CompilerGeneratedAttribute]
private void set_ResourceUri(string value);
    [CompilerGeneratedAttribute]
public HttpVerbType get_Verb();
    [CompilerGeneratedAttribute]
private void set_Verb(HttpVerbType value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_ApiName();
    [CompilerGeneratedAttribute]
private void set_ApiName(string value);
}
public abstract class Intuit.Ipp.Core.Rest.RestHandler : object {
    private ServiceContext serviceContext;
    private IEntitySerializer responseSerializer;
    [CompilerGeneratedAttribute]
private ICompressor <RequestCompressor>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompressor <ResponseCompressor>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntitySerializer <RequestSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private LogRequestsToDisk <RequestLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    internal bool IsSyncRequestStream { get; }
    internal ICompressor RequestCompressor { get; internal set; }
    internal ICompressor ResponseCompressor { get; internal set; }
    internal IEntitySerializer RequestSerializer { get; internal set; }
    internal LogRequestsToDisk RequestLogging { get; internal set; }
    internal string MinorVersion { get; internal set; }
    internal List`1<string> Include { get; internal set; }
    internal string RequestId { get; internal set; }
    protected RestHandler(ServiceContext context);
    internal abstract virtual bool get_IsSyncRequestStream();
    [CompilerGeneratedAttribute]
internal ICompressor get_RequestCompressor();
    [CompilerGeneratedAttribute]
internal void set_RequestCompressor(ICompressor value);
    [CompilerGeneratedAttribute]
internal ICompressor get_ResponseCompressor();
    [CompilerGeneratedAttribute]
internal void set_ResponseCompressor(ICompressor value);
    [CompilerGeneratedAttribute]
internal IEntitySerializer get_RequestSerializer();
    [CompilerGeneratedAttribute]
internal void set_RequestSerializer(IEntitySerializer value);
    [CompilerGeneratedAttribute]
internal LogRequestsToDisk get_RequestLogging();
    [CompilerGeneratedAttribute]
internal void set_RequestLogging(LogRequestsToDisk value);
    [CompilerGeneratedAttribute]
internal string get_MinorVersion();
    [CompilerGeneratedAttribute]
internal void set_MinorVersion(string value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_Include();
    [CompilerGeneratedAttribute]
internal void set_Include(List`1<string> value);
    [CompilerGeneratedAttribute]
internal string get_RequestId();
    [CompilerGeneratedAttribute]
internal void set_RequestId(string value);
    public virtual HttpWebRequest PrepareRequest(RequestParameters requestParameters, object requestBody, string oauthRequestUri, bool includeRequestId);
    private string StripFirstSlash(string uri);
    private string AppendQueryParameters(string requestEndpoint, string name, string value);
    public abstract virtual string GetResponse(HttpWebRequest request);
    public abstract virtual Byte[] GetResponseStream(HttpWebRequest request);
}
public class Intuit.Ipp.Core.Rest.SyncRestHandler : RestHandler {
    private ServiceContext context;
    internal bool IsSyncRequestStream { get; }
    public SyncRestHandler(ServiceContext context);
    internal virtual bool get_IsSyncRequestStream();
    public virtual HttpWebRequest PrepareRequest(RequestParameters requestParameters, object requestBody, string oauthRequestUri, bool includeRequestId);
    public virtual string GetResponse(HttpWebRequest request);
    public virtual Byte[] GetResponseStream(HttpWebRequest request);
    private string CallRestService(HttpWebRequest request);
    private Byte[] GetRestServiceCallResponseStream(HttpWebRequest request);
    private string ParseResponse(HttpWebResponse httpWebResponse);
}
public class Intuit.Ipp.Core.ServiceContext : object {
    private string realmId;
    private IntuitServicesType serviceType;
    private string baseserviceURL;
    private string appToken;
    private bool isCreateMethod;
    private Message messageValues;
    private List`1<string> include;
    private string requestId;
    [CompilerGeneratedAttribute]
private IppConfiguration <IppConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    public IppConfiguration IppConfiguration { get; public set; }
    public string BaseUrl { get; }
    public string RealmId { get; }
    [ObsoleteAttribute("This property is deprecated as appToken is not supported in OAuth2")]
public string AppToken { get; }
    public IntuitServicesType ServiceType { get; }
    public List`1<string> Include { get; public set; }
    public string MinorVersion { get; }
    public string RequestId { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public ServiceContext(string realmId, IntuitServicesType serviceType, IRequestValidator requestValidator, IConfigurationProvider configReader);
    [ObsoleteAttribute("This constructor is deprecated as appToken is not supported in OAuth2. Please use the other constuctor")]
public ServiceContext(string appToken, string realmId, IntuitServicesType serviceType, IRequestValidator requestValidator);
    [CompilerGeneratedAttribute]
public IppConfiguration get_IppConfiguration();
    [CompilerGeneratedAttribute]
public void set_IppConfiguration(IppConfiguration value);
    public string get_BaseUrl();
    public string get_RealmId();
    public string get_AppToken();
    public IntuitServicesType get_ServiceType();
    public List`1<string> get_Include();
    public void set_Include(List`1<string> value);
    public string get_MinorVersion();
    public string get_RequestId();
    public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    public void UseDataServices();
    public void UsePlatformServices();
    private void SetDefaultConfigurationForIPS();
    private void RevertConfiguration();
    private string GetBaseURL();
    private string GetMinorVersion();
}
internal class Intuit.Ipp.Core.ShouldRetry : MulticastDelegate {
    public ShouldRetry(object object, IntPtr method);
    public virtual bool Invoke(int retryCount, Exception lastException, TimeSpan& delay);
    public virtual IAsyncResult BeginInvoke(int retryCount, Exception lastException, TimeSpan& delay, AsyncCallback callback, object object);
    public virtual bool EndInvoke(TimeSpan& delay, IAsyncResult result);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Intuit.Ipp.Retry.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentCannotBeGreaterThanBaseline { get; }
    internal static string ArgumentCannotBeNegative { get; }
    internal static string RetryLimitExceeded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentCannotBeGreaterThanBaseline();
    internal static string get_ArgumentCannotBeNegative();
    internal static string get_RetryLimitExceeded();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
