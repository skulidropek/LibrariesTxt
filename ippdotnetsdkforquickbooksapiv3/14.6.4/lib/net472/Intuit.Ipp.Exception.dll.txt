public class Intuit.Ipp.Exception.BatchItemsExceededException : SdkException {
    public BatchItemsExceededException(string errorMessage);
    public BatchItemsExceededException(string errorMessage, Exception innerException);
    public BatchItemsExceededException(string errorMessage, string errorCode, string source);
    public BatchItemsExceededException(string errorMessage, string errorCode, string source, Exception innerException);
    protected BatchItemsExceededException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.ChannelTerminatedException : ServiceException {
    public ChannelTerminatedException(string errorMessage);
    public ChannelTerminatedException(string errorMessage, Exception innerException);
    public ChannelTerminatedException(string errorMessage, string errorCode, string source);
    public ChannelTerminatedException(string errorMessage, string errorCode, string source, Exception innerException);
    protected ChannelTerminatedException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.CommunicationException : ServiceException {
    public CommunicationException(string errorMessage);
    public CommunicationException(string errorMessage, Exception innerException);
    public CommunicationException(string errorMessage, string errorCode, string source);
    public CommunicationException(string errorMessage, string errorCode, string source, Exception innerException);
    protected CommunicationException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.EndpointNotFoundException : ServiceException {
    public EndpointNotFoundException(string errorMessage);
    public EndpointNotFoundException(string errorMessage, Exception innerException);
    public EndpointNotFoundException(string errorMessage, string errorCode, string source);
    public EndpointNotFoundException(string errorMessage, string errorCode, string source, Exception innerException);
    protected EndpointNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.FaultException : ServiceException {
    public FaultException(string errorMessage);
    public FaultException(string errorMessage, Exception innerException);
    public FaultException(string errorMessage, string errorCode, string source);
    public FaultException(string errorMessage, string errorCode, string source, Exception innerException);
    protected FaultException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.IdsError : Exception {
    private string errorCode;
    private string errorMessage;
    private string element;
    private string detail;
    public string ErrorCode { get; public set; }
    public string Element { get; }
    public string Message { get; }
    public string Detail { get; }
    public IdsError(string errorMessage);
    public IdsError(string errorMessage, string errorCode, string element, string detail);
    protected IdsError(SerializationInfo info, StreamingContext context);
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    public string get_Element();
    public virtual string get_Message();
    public string get_Detail();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.IdsException : Exception {
    private string errorCode;
    private string errorMessage;
    private string source;
    private Exception innerException;
    private IList`1<IdsError> innerExceptions;
    public string ErrorCode { get; public set; }
    public string Message { get; }
    public string Source { get; }
    public Exception InnerException { get; }
    public ReadOnlyCollection`1<IdsError> InnerExceptions { get; }
    public IdsException(string errorMessage);
    public IdsException(string errorMessage, Exception innerException);
    public IdsException(string errorMessage, string errorCode, string source);
    public IdsException(string errorMessage, string errorCode, string source, Exception innerException);
    public IdsException(string errorMessage, IList`1<IdsError> innerExceptions);
    protected IdsException(SerializationInfo info, StreamingContext context);
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    public virtual string get_Message();
    public virtual string get_Source();
    public Exception get_InnerException();
    public ReadOnlyCollection`1<IdsError> get_InnerExceptions();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public static class Intuit.Ipp.Exception.IdsExceptionManager : object {
    public static void HandleException(string errorMessage);
    public static void HandleException(IdsException idsException);
    public static void HandleException(string errorMessage, IdsException innerException);
    public static void HandleException(string errorMessage, string errorCode, string source);
    public static void HandleException(string errorMessage, string errorCode, string source, IdsException innerException);
}
public class Intuit.Ipp.Exception.InvalidParameterException : SdkException {
    public InvalidParameterException(string errorMessage);
    public InvalidParameterException(string errorMessage, Exception innerException);
    public InvalidParameterException(string errorMessage, string errorCode, string source);
    public InvalidParameterException(string errorMessage, string errorCode, string source, Exception innerException);
    protected InvalidParameterException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.InvalidRealmException : SdkException {
    public InvalidRealmException(string errorMessage);
    public InvalidRealmException(string errorMessage, Exception innerException);
    public InvalidRealmException(string errorMessage, string errorCode, string source);
    public InvalidRealmException(string errorMessage, string errorCode, string source, Exception innerException);
    protected InvalidRealmException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.InvalidServiceRequestException : SdkException {
    public InvalidServiceRequestException(string errorMessage);
    public InvalidServiceRequestException(string errorMessage, Exception innerException);
    public InvalidServiceRequestException(string errorMessage, string errorCode, string source);
    public InvalidServiceRequestException(string errorMessage, string errorCode, string source, Exception innerException);
    protected InvalidServiceRequestException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.InvalidTokenException : SdkException {
    public InvalidTokenException(string errorMessage);
    public InvalidTokenException(string errorMessage, Exception innerException);
    public InvalidTokenException(string errorMessage, string errorCode, string source);
    public InvalidTokenException(string errorMessage, string errorCode, string source, Exception innerException);
    protected InvalidTokenException(SerializationInfo info, StreamingContext context);
}
[CompilerGeneratedAttribute]
public class Intuit.Ipp.Exception.NamespaceDoc : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Intuit.Ipp.Exception.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BatchItemsExceededExceptionDefaultMessage { get; }
    internal static string ChannelTerminatedExceptionDefaultMessage { get; }
    internal static string CommunicationExceptionDefaultMessage { get; }
    internal static string EndpointNotFoundExceptionDefaultMessage { get; }
    internal static string FaultExceptionDefaultMessage { get; }
    internal static string IdsErrorDefaultMessage { get; }
    internal static string IdsExceptionDefaultMessage { get; }
    internal static string InvalidParameterExceptionMessage { get; }
    internal static string InvalidRealmExceptionDefaultMessage { get; }
    internal static string InvalidServiceRequestExceptionDefaultMessage { get; }
    internal static string InvalidTokenExceptionDefaultMessage { get; }
    internal static string IpsExceptionDefaultMessage { get; }
    internal static string ProtocolExceptionDefaultMessage { get; }
    internal static string RetryExceededExceptionDefaultMessage { get; }
    internal static string RetryExceptionDefaultMessage { get; }
    internal static string SdkExceptionDefaultMessage { get; }
    internal static string SecurityExceptionDefaultMessage { get; }
    internal static string SerializationExceptionDefaultMessage { get; }
    internal static string ServerTooBusyExceptionDefaultMessage { get; }
    internal static string ServiceExceptionDefaultMessage { get; }
    internal static string ServiceReturnedNoInformationExceptionDefaultMessage { get; }
    internal static string ThrottleExceededExceptionDefaultMessage { get; }
    internal static string ValidationExceptionDefaultMessage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BatchItemsExceededExceptionDefaultMessage();
    internal static string get_ChannelTerminatedExceptionDefaultMessage();
    internal static string get_CommunicationExceptionDefaultMessage();
    internal static string get_EndpointNotFoundExceptionDefaultMessage();
    internal static string get_FaultExceptionDefaultMessage();
    internal static string get_IdsErrorDefaultMessage();
    internal static string get_IdsExceptionDefaultMessage();
    internal static string get_InvalidParameterExceptionMessage();
    internal static string get_InvalidRealmExceptionDefaultMessage();
    internal static string get_InvalidServiceRequestExceptionDefaultMessage();
    internal static string get_InvalidTokenExceptionDefaultMessage();
    internal static string get_IpsExceptionDefaultMessage();
    internal static string get_ProtocolExceptionDefaultMessage();
    internal static string get_RetryExceededExceptionDefaultMessage();
    internal static string get_RetryExceptionDefaultMessage();
    internal static string get_SdkExceptionDefaultMessage();
    internal static string get_SecurityExceptionDefaultMessage();
    internal static string get_SerializationExceptionDefaultMessage();
    internal static string get_ServerTooBusyExceptionDefaultMessage();
    internal static string get_ServiceExceptionDefaultMessage();
    internal static string get_ServiceReturnedNoInformationExceptionDefaultMessage();
    internal static string get_ThrottleExceededExceptionDefaultMessage();
    internal static string get_ValidationExceptionDefaultMessage();
}
public class Intuit.Ipp.Exception.ProtocolException : ServiceException {
    public ProtocolException(string errorMessage);
    public ProtocolException(string errorMessage, Exception innerException);
    public ProtocolException(string errorMessage, string errorCode, string source);
    public ProtocolException(string errorMessage, string errorCode, string source, Exception innerException);
    protected ProtocolException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.RetryExceededException : SdkException {
    public RetryExceededException(string errorMessage);
    public RetryExceededException(string errorMessage, Exception innerException);
    public RetryExceededException(string errorMessage, string errorCode, string source);
    public RetryExceededException(string errorMessage, string errorCode, string source, Exception innerException);
    protected RetryExceededException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.RetryException : ServiceException {
    public RetryException(string errorMessage);
    public RetryException(string errorMessage, Exception innerException);
    public RetryException(string errorMessage, string errorCode, string source);
    public RetryException(string errorMessage, string errorCode, string source, Exception innerException);
    protected RetryException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.SdkException : IdsException {
    public SdkException(string errorMessage);
    public SdkException(string errorMessage, Exception innerException);
    public SdkException(string errorMessage, string errorCode, string source);
    public SdkException(string errorMessage, string errorCode, string source, Exception innerException);
    protected SdkException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.SecurityException : IdsException {
    public SecurityException(IList`1<IdsError> innerExceptions);
    public SecurityException(string errorMessage);
    public SecurityException(string errorMessage, Exception innerException);
    public SecurityException(string errorMessage, string errorCode, string source);
    public SecurityException(string errorMessage, string errorCode, string source, Exception innerException);
    protected SecurityException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.SerializationException : SdkException {
    public SerializationException(string errorMessage);
    public SerializationException(string errorMessage, Exception innerException);
    public SerializationException(string errorMessage, string errorCode, string source);
    public SerializationException(string errorMessage, string errorCode, string source, Exception innerException);
    protected SerializationException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.ServerTooBusyException : ServiceException {
    public ServerTooBusyException(string errorMessage);
    public ServerTooBusyException(string errorMessage, Exception innerException);
    public ServerTooBusyException(string errorMessage, string errorCode, string source);
    public ServerTooBusyException(string errorMessage, string errorCode, string source, Exception innerException);
    protected ServerTooBusyException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.ServiceException : IdsException {
    public ServiceException(IList`1<IdsError> innerExceptions);
    public ServiceException(string errorMessage);
    public ServiceException(string errorMessage, Exception innerException);
    public ServiceException(string errorMessage, string errorCode, string source);
    public ServiceException(string errorMessage, string errorCode, string source, Exception innerException);
    protected ServiceException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.ServiceReturnedNoInformationException : SdkException {
    public ServiceReturnedNoInformationException(string errorMessage);
    public ServiceReturnedNoInformationException(string errorMessage, Exception innerException);
    public ServiceReturnedNoInformationException(string errorMessage, string errorCode, string source);
    public ServiceReturnedNoInformationException(string errorMessage, string errorCode, string source, Exception innerException);
    protected ServiceReturnedNoInformationException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.ThrottleExceededException : ServiceException {
    public ThrottleExceededException(string errorMessage);
    public ThrottleExceededException(string errorMessage, Exception innerException);
    public ThrottleExceededException(string errorMessage, string errorCode, string source);
    public ThrottleExceededException(string errorMessage, string errorCode, string source, Exception innerException);
    protected ThrottleExceededException(SerializationInfo info, StreamingContext context);
}
public class Intuit.Ipp.Exception.ValidationException : IdsException {
    public ValidationException(IList`1<IdsError> innerExceptions);
    public ValidationException(string errorMessage);
    public ValidationException(string errorMessage, Exception innerException);
    public ValidationException(string errorMessage, string errorCode, string source);
    public ValidationException(string errorMessage, string errorCode, string source, Exception innerException);
    protected ValidationException(SerializationInfo info, StreamingContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
