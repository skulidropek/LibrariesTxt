public class Intuit.Ipp.Utility.BaseUrlElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("qbo")]
public string Qbo { get; }
    [ConfigurationPropertyAttribute("ips")]
public string Ips { get; }
    [ConfigurationPropertyAttribute("oAuthAccessTokenUrl")]
public string OAuthAccessTokenUrl { get; }
    [ConfigurationPropertyAttribute("userNameAuthentication")]
public string UserNameAuthentication { get; }
    public string get_Qbo();
    public string get_Ips();
    public string get_OAuthAccessTokenUrl();
    public string get_UserNameAuthentication();
}
public enum Intuit.Ipp.Utility.CompressionFormat : Enum {
    public int value__;
    public static CompressionFormat DEFAULT;
    public static CompressionFormat None;
    public static CompressionFormat GZip;
    public static CompressionFormat Deflate;
}
public static class Intuit.Ipp.Utility.CoreConstants : object {
    public static string SLASH_CHAR;
    public static string VERSION;
    public static string RESOURCE;
    public static string CONTENTTYPE_TEXTXML;
    public static string CONTENTTYPE_TEXTPLAIN;
    public static string CONTENTTYPE_APPLICATIONTEXT;
    public static string CONTENTTYPE_APPLICATIONXML;
    public static string CONTENTTYPE_APPLICATIONJSON;
    public static string CONTENTTYPE_APPLICATIONPDF;
    public static string CONTENTTYPE_APPLICATIONOCTETSTREAM;
    public static string CONTENTTYPE_URLFORMENCODED;
    public static string TOKEN_MIGRATION_URL_PROD;
    public static string TOKEN_MIGRATION_REDIRECT_URL;
    public static string TOKEN_MIGRATION_URL_SANDBOX;
    public static string IPS_BASEURL;
    public static string QBO_BASEURL;
    public static string ENTITLEMENT_BASEURL;
    public static string INTUIT_WORKPLACE;
    public static string OAUTHACCESSTOKENURL;
    public static string Id;
    public static string SYNC_TOKEN;
    public static string DOMAIN;
    public static string METADATA;
    public static string SPARSE;
    public static string STATUS;
    public static string ID_DOMAIN_QUERY;
    public static string PAGE_NUM;
    public static string RESULTS_PERPAGE;
    public static string APIACTIONHEADER;
    public static string ISQBOXPATH;
    public static string REALMXPATH;
    public static string API_GETISREALMQBO;
    public static string API_GETIDSREALM;
    public static string AUTHORIZATIONSTRING_FORHEADER;
    public static string INTUITAUTH_HEADERFORMAT;
    public static string ADVANCED_ROLLING_FILE_FORMAT;
    public static string REQUESTFILENAME_FORMAT;
    public static string RESPONSEFILENAME_FORMAT;
    public static string ERRORRESPONSEFILENAME_FORMAT;
    public static string XOAUTHAUTHIDPSEUDONYM;
    public static string XOAUTHREALMIDPSEUDONYM;
    public static string XOAUTHSERVICEPROVIDERID;
    public static string CONTENTENCODING;
    public static string ACCEPTENCODING;
    public static string REQUESTSOURCEHEADER;
    public static string CONTENTTYPE_MULTIPARTFORMDATAFORMAT;
    public static string CONTENTDISPOSITION_FORMAT;
    public static string CONTENTDISPOSITION_FILENAME_FORMAT;
    public static string CONTENTDISPOSITION_CONTENTTYPE_FORMAT;
    public static string CONTENTDISPOSITION_CONTENTTRANSFERENCODING_FORMAT;
}
public class Intuit.Ipp.Utility.CustomLoggerElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; }
    [ConfigurationPropertyAttribute("enable")]
public bool Enable { get; }
    public string get_Name();
    public string get_Type();
    public bool get_Enable();
}
public class Intuit.Ipp.Utility.CustomSecurityElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; }
    [ConfigurationPropertyAttribute("enable")]
public bool Enable { get; }
    [ConfigurationPropertyAttribute("params")]
public string Params { get; }
    public string get_Name();
    public string get_Type();
    public bool get_Enable();
    public string get_Params();
}
public class Intuit.Ipp.Utility.CustomSerializerElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; }
    [ConfigurationPropertyAttribute("enable")]
public bool Enable { get; }
    public string get_Name();
    public string get_Type();
    public bool get_Enable();
}
public enum Intuit.Ipp.Utility.DataCompressionFormat : Enum {
    public int value__;
    public static DataCompressionFormat None;
    public static DataCompressionFormat GZip;
    public static DataCompressionFormat Deflate;
}
public static class Intuit.Ipp.Utility.DateHelper : object {
    private static DateTime EpochJanFirst1970Utc;
    private static DateHelper();
    public static DateTime ParseDateTimeField(string value);
    private static DateTime GetLocalDateFromQuickBaseDate(long quickBaseDate);
}
public class Intuit.Ipp.Utility.DeflateCompressor : object {
    public DataCompressionFormat DataCompressionFormat { get; }
    public sealed virtual DataCompressionFormat get_DataCompressionFormat();
    public sealed virtual void Compress(Byte[] content, Stream requestStream);
    public sealed virtual Stream Decompress(Stream responseStream);
}
public class Intuit.Ipp.Utility.ExponentialRetryElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("retryCount")]
public int RetryCount { get; }
    [ConfigurationPropertyAttribute("minBackoff")]
public TimeSpan MinBackoff { get; }
    [ConfigurationPropertyAttribute("maxBackoff")]
public TimeSpan MaxBackoff { get; }
    [ConfigurationPropertyAttribute("deltaBackoff")]
public TimeSpan DeltaBackoff { get; }
    public int get_RetryCount();
    public TimeSpan get_MinBackoff();
    public TimeSpan get_MaxBackoff();
    public TimeSpan get_DeltaBackoff();
}
public class Intuit.Ipp.Utility.GZipCompressor : object {
    public DataCompressionFormat DataCompressionFormat { get; }
    public sealed virtual DataCompressionFormat get_DataCompressionFormat();
    public sealed virtual void Compress(Byte[] content, Stream requestStream);
    public sealed virtual Stream Decompress(Stream responseStream);
}
public interface Intuit.Ipp.Utility.ICompressor {
    public DataCompressionFormat DataCompressionFormat { get; }
    public abstract virtual DataCompressionFormat get_DataCompressionFormat();
    public abstract virtual void Compress(Byte[] content, Stream requestStream);
    public abstract virtual Stream Decompress(Stream responseStream);
}
public interface Intuit.Ipp.Utility.IEntitySerializer {
    public abstract virtual string Serialize(object entity);
    public abstract virtual object Deserialize(string message);
}
public class Intuit.Ipp.Utility.IncrementalRetryElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("retryCount")]
public int RetryCount { get; }
    [ConfigurationPropertyAttribute("initialInterval")]
public TimeSpan InitialInterval { get; }
    [ConfigurationPropertyAttribute("increment")]
public TimeSpan Increment { get; }
    public int get_RetryCount();
    public TimeSpan get_InitialInterval();
    public TimeSpan get_Increment();
}
public class Intuit.Ipp.Utility.IntuitConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public void AssignValueToProperty(object target, JProperty prop, Type type, string propName, JsonSerializer serializer);
    public static Array ResizeArray(Array oldArray, int newSize);
    public object GetInstanceofAbstractType(Type objectType, JObject jsonObject);
}
public static class Intuit.Ipp.Utility.IntuitErrorHandler : object {
    public static void HandleErrors(string response);
    public static void HandleErrors(XmlNode responseXml);
    public static bool IsValidXml(string inputString);
}
public class Intuit.Ipp.Utility.IppConfigurationSection : ConfigurationSection {
    public static IppConfigurationSection Instance { get; }
    [ConfigurationPropertyAttribute("logger")]
public LoggerElement Logger { get; }
    [ConfigurationPropertyAttribute("security")]
public SecurityElement Security { get; }
    [ConfigurationPropertyAttribute("message")]
public MessageElement Message { get; }
    [ConfigurationPropertyAttribute("retry")]
public RetryElement Retry { get; }
    [ConfigurationPropertyAttribute("service")]
public ServiceElement Service { get; }
    [ConfigurationPropertyAttribute("webhooksService")]
public WebhooksServiceElement WebhooksService { get; }
    public static IppConfigurationSection get_Instance();
    public LoggerElement get_Logger();
    public SecurityElement get_Security();
    public MessageElement get_Message();
    public RetryElement get_Retry();
    public ServiceElement get_Service();
    public WebhooksServiceElement get_WebhooksService();
}
public class Intuit.Ipp.Utility.JsonObjectSerializer : object {
    private static JsonSerializerSettings _jsonSettings;
    [CompilerGeneratedAttribute]
private ILogger <IDSLogger>k__BackingField;
    internal ILogger IDSLogger { get; internal set; }
    public JsonObjectSerializer(ILogger idsLogger);
    private static JsonObjectSerializer();
    [CompilerGeneratedAttribute]
internal ILogger get_IDSLogger();
    [CompilerGeneratedAttribute]
internal void set_IDSLogger(ILogger value);
    public sealed virtual string Serialize(object entity);
    public sealed virtual object Deserialize(string message);
}
public class Intuit.Ipp.Utility.LinearRetryElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("retryCount")]
public int RetryCount { get; }
    [ConfigurationPropertyAttribute("retryInterval")]
public TimeSpan RetryInterval { get; }
    public int get_RetryCount();
    public TimeSpan get_RetryInterval();
}
public class Intuit.Ipp.Utility.LoggerElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("requestLog")]
public RequestLogElement RequestLog { get; }
    [ConfigurationPropertyAttribute("customLogger")]
public CustomLoggerElement CustomLogger { get; }
    public RequestLogElement get_RequestLog();
    public CustomLoggerElement get_CustomLogger();
}
public class Intuit.Ipp.Utility.MessageElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("request")]
public RequestElement Request { get; }
    [ConfigurationPropertyAttribute("response")]
public ResponseElement Response { get; }
    [ConfigurationPropertyAttribute("customSerializer")]
public CustomSerializerElement CustomSerializer { get; }
    public RequestElement get_Request();
    public ResponseElement get_Response();
    public CustomSerializerElement get_CustomSerializer();
}
public class Intuit.Ipp.Utility.MinorVersionElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("qbo")]
public string Qbo { get; }
    public string get_Qbo();
}
[CompilerGeneratedAttribute]
internal class Intuit.Ipp.Utility.NamespaceDoc : object {
}
public class Intuit.Ipp.Utility.OAuthElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("accessToken")]
public string AccessToken { get; }
    [ConfigurationPropertyAttribute("accessTokenSecret")]
public string AccessTokenSecret { get; }
    [ConfigurationPropertyAttribute("consumerKey")]
public string ConsumerKey { get; }
    [ConfigurationPropertyAttribute("consumerSecret")]
public string ConsumerSecret { get; }
    public string get_AccessToken();
    public string get_AccessTokenSecret();
    public string get_ConsumerKey();
    public string get_ConsumerSecret();
}
public class Intuit.Ipp.Utility.ObjectToEnumConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Intuit.Ipp.Utility.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorCodeMissing { get; }
    internal static string ErrorCodeNonNemeric { get; }
    internal static string ErrorDetails0 { get; }
    internal static string ErrorDetails1 { get; }
    internal static string ErrorWithNoText { get; }
    internal static string MustProvideIdOrName { get; }
    internal static string NotAvailable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorCodeMissing();
    internal static string get_ErrorCodeNonNemeric();
    internal static string get_ErrorDetails0();
    internal static string get_ErrorDetails1();
    internal static string get_ErrorWithNoText();
    internal static string get_MustProvideIdOrName();
    internal static string get_NotAvailable();
}
public class Intuit.Ipp.Utility.RequestElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("serializationFormat")]
public SerializationFormat SerializationFormat { get; }
    [ConfigurationPropertyAttribute("compressionFormat")]
public CompressionFormat CompressionFormat { get; }
    public SerializationFormat get_SerializationFormat();
    public CompressionFormat get_CompressionFormat();
}
public class Intuit.Ipp.Utility.RequestLogElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("enableRequestResponseLogging")]
public bool EnableRequestResponseLogging { get; }
    [ConfigurationPropertyAttribute("requestResponseLoggingDirectory")]
public string RequestResponseLoggingDirectory { get; }
    public bool get_EnableRequestResponseLogging();
    public string get_RequestResponseLoggingDirectory();
}
public class Intuit.Ipp.Utility.RequestXmlCollection : XmlDocument {
    private string requestId;
    private XmlElement qdbapiElement;
    private XmlElement QdbapiElement { get; }
    public RequestXmlCollection(string requestId);
    private XmlElement get_QdbapiElement();
    public void AddTextParameter(string name, string value);
    private XmlElement AddNode(XmlElement appendTo, string name, XmlNode node);
}
public class Intuit.Ipp.Utility.ResponseElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("serializationFormat")]
public SerializationFormat SerializationFormat { get; }
    [ConfigurationPropertyAttribute("compressionFormat")]
public CompressionFormat CompressionFormat { get; }
    public SerializationFormat get_SerializationFormat();
    public CompressionFormat get_CompressionFormat();
}
public class Intuit.Ipp.Utility.RetryElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("mode")]
public RetryMode Mode { get; }
    [ConfigurationPropertyAttribute("linearRetry")]
public LinearRetryElement LinearRetry { get; }
    [ConfigurationPropertyAttribute("incrementalRetry")]
public IncrementalRetryElement IncrementatlRetry { get; }
    [ConfigurationPropertyAttribute("exponentialRetry")]
public ExponentialRetryElement ExponentialRetry { get; }
    public RetryMode get_Mode();
    public LinearRetryElement get_LinearRetry();
    public IncrementalRetryElement get_IncrementatlRetry();
    public ExponentialRetryElement get_ExponentialRetry();
}
public enum Intuit.Ipp.Utility.RetryMode : Enum {
    public int value__;
    public static RetryMode None;
    public static RetryMode Linear;
    public static RetryMode Incremental;
    public static RetryMode Exponential;
}
public class Intuit.Ipp.Utility.SecurityElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("mode")]
public SecurityMode Mode { get; }
    [ConfigurationPropertyAttribute("oauth")]
public OAuthElement OAuth { get; }
    [ConfigurationPropertyAttribute("customSecurity")]
public CustomSecurityElement CustomSecurity { get; }
    public SecurityMode get_Mode();
    public OAuthElement get_OAuth();
    public CustomSecurityElement get_CustomSecurity();
}
public enum Intuit.Ipp.Utility.SecurityMode : Enum {
    public int value__;
    public static SecurityMode None;
    public static SecurityMode OAuth;
    public static SecurityMode Custom;
}
public enum Intuit.Ipp.Utility.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat DEFAULT;
    public static SerializationFormat Xml;
    public static SerializationFormat Json;
    public static SerializationFormat Custom;
}
public class Intuit.Ipp.Utility.ServiceElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("baseUrl")]
public BaseUrlElement BaseUrl { get; }
    [ConfigurationPropertyAttribute("minorVersion")]
public MinorVersionElement MinorVersion { get; }
    public BaseUrlElement get_BaseUrl();
    public MinorVersionElement get_MinorVersion();
}
public class Intuit.Ipp.Utility.TicketElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("ticket")]
public string Ticket { get; }
    public string get_Ticket();
}
public static class Intuit.Ipp.Utility.UtilityConstants : object {
    public static string ERRCODEXPATH;
    public static string ERRTEXTXPATH;
    public static string ERRDETAILXPATH;
    public static string QDBAPI;
    public static string ENCODINGATTR;
    public static string ENCODINGATTRVALUE;
    public static string UDATA;
}
public class Intuit.Ipp.Utility.WebhooksServiceElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("verfierToken")]
public WebhooksVerifierElement WebhooksVerifier { get; }
    public WebhooksVerifierElement get_WebhooksVerifier();
}
public class Intuit.Ipp.Utility.WebhooksVerifierElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("value")]
public string Value { get; }
    public string get_Value();
}
public class Intuit.Ipp.Utility.XmlObjectSerializer : object {
    [CompilerGeneratedAttribute]
private ILogger <IDSLogger>k__BackingField;
    internal ILogger IDSLogger { get; internal set; }
    public XmlObjectSerializer(ILogger idsLogger);
    [CompilerGeneratedAttribute]
internal ILogger get_IDSLogger();
    [CompilerGeneratedAttribute]
internal void set_IDSLogger(ILogger value);
    public sealed virtual string Serialize(object entity);
    public sealed virtual object Deserialize(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
