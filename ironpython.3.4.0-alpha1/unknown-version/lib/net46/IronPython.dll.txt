[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.AndExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Right>k__BackingField;
    public Expression Left { get; }
    public Expression Right { get; }
    public Type Type { get; }
    internal bool CanThrow { get; }
    public AndExpression(Expression left, Expression right);
    [CompilerGeneratedAttribute]
public Expression get_Left();
    [CompilerGeneratedAttribute]
public Expression get_Right();
    public virtual Expression Reduce();
    public virtual Type get_Type();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
public class IronPython.Compiler.Ast.AssertStatement : Statement {
    [CompilerGeneratedAttribute]
private Expression <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Message>k__BackingField;
    public Expression Test { get; }
    public Expression Message { get; }
    public AssertStatement(Expression test, Expression message);
    [CompilerGeneratedAttribute]
public Expression get_Test();
    [CompilerGeneratedAttribute]
public Expression get_Message();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.AssignmentStatement : Statement {
    private Expression[] _left;
    [CompilerGeneratedAttribute]
private Expression <Right>k__BackingField;
    public IList`1<Expression> Left { get; }
    public Expression Right { get; }
    public AssignmentStatement(Expression[] left, Expression right);
    public IList`1<Expression> get_Left();
    [CompilerGeneratedAttribute]
public Expression get_Right();
    public virtual Expression Reduce();
    private Expression AssignComplex(Expression right);
    private Expression AssignOne();
    public virtual void Walk(PythonWalker walker);
}
internal static class IronPython.Compiler.Ast.AstMethods : object {
    public static MethodInfo IsTrue;
    public static MethodInfo RaiseAssertionError;
    public static MethodInfo RaiseAssertionErrorNoMessage;
    public static MethodInfo MakeClass;
    public static MethodInfo PrintExpressionValue;
    public static MethodInfo ImportWithNames;
    public static MethodInfo ImportFrom;
    public static MethodInfo ImportStar;
    public static MethodInfo SaveCurrentException;
    public static MethodInfo RestoreCurrentException;
    public static MethodInfo MakeGeneratorExpression;
    public static MethodInfo ListAddForComprehension;
    public static MethodInfo SetAddForComprehension;
    public static MethodInfo DictAddForComprehension;
    public static MethodInfo DictMergeOne;
    public static MethodInfo CheckUninitializedFree;
    public static MethodInfo CheckUninitializedLocal;
    public static MethodInfo PublishModule;
    public static MethodInfo RemoveModule;
    public static MethodInfo ModuleStarted;
    public static MethodInfo MakeRethrownException;
    public static MethodInfo MakeRethrowExceptionWorker;
    public static MethodInfo MakeException;
    public static MethodInfo MakeExceptionWithCause;
    public static MethodInfo MakeSlice;
    public static MethodInfo GetExceptionInfoLocal;
    public static MethodInfo CheckException;
    public static MethodInfo SetCurrentException;
    public static MethodInfo MakeTuple;
    public static MethodInfo MakeEmptyTuple;
    public static MethodInfo IsNot;
    public static MethodInfo Is;
    public static MethodInfo ImportTop;
    public static MethodInfo ImportBottom;
    public static MethodInfo MakeEmptyList;
    public static MethodInfo MakeListNoCopy;
    public static MethodInfo GetEnumeratorValues;
    public static MethodInfo GetEnumeratorValuesNoComplexSets;
    public static MethodInfo UnpackIterable;
    public static MethodInfo GetGlobalContext;
    public static MethodInfo GetParentContextFromFunction;
    public static MethodInfo MakeFunction;
    public static MethodInfo MakeFunctionDebug;
    public static MethodInfo MakeClosureCell;
    public static MethodInfo MakeClosureCellWithValue;
    public static MethodInfo LookupName;
    public static MethodInfo LookupLocalName;
    public static MethodInfo RemoveName;
    public static MethodInfo SetName;
    public static MethodInfo KeepAlive;
    public static MethodInfo MakeEmptyDict;
    public static MethodInfo MakeDictFromItems;
    public static MethodInfo MakeConstantDict;
    public static MethodInfo MakeSet;
    public static MethodInfo MakeEmptySet;
    public static MethodInfo MakeHomogeneousDictFromItems;
    public static MethodInfo CreateLocalContext;
    public static MethodInfo UpdateStackTrace;
    public static MethodInfo ForLoopDispose;
    public static MethodInfo GetClosureTupleFromContext;
    public static MethodInfo PushFrame;
    public static MethodInfo FormatString;
    public static MethodInfo GeneratorCheckThrowableAndReturnSendValue;
    public static MethodInfo DictMerge;
    public static MethodInfo DictUpdate;
    public static MethodInfo ListAppend;
    public static MethodInfo ListExtend;
    public static MethodInfo ListToTuple;
    public static MethodInfo SetAdd;
    public static MethodInfo SetUpdate;
    private static AstMethods();
    private static MethodInfo GetMethod(Delegate x);
}
public class IronPython.Compiler.Ast.AsyncStatement : Statement {
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.AugmentedAssignStatement : Statement {
    [CompilerGeneratedAttribute]
private PythonOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Right>k__BackingField;
    public PythonOperator Operator { get; }
    public Expression Left { get; }
    public Expression Right { get; }
    public AugmentedAssignStatement(PythonOperator op, Expression left, Expression right);
    [CompilerGeneratedAttribute]
public PythonOperator get_Operator();
    [CompilerGeneratedAttribute]
public Expression get_Left();
    [CompilerGeneratedAttribute]
public Expression get_Right();
    public virtual Expression Reduce();
    private static PythonOperationKind PythonOperatorToAction(PythonOperator op);
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.BinaryExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonOperator <Operator>k__BackingField;
    private static int MaximumInlineStringLength;
    public Expression Left { get; }
    public Expression Right { get; }
    public PythonOperator Operator { get; }
    public string NodeName { get; }
    internal bool CanThrow { get; }
    public BinaryExpression(PythonOperator op, Expression left, Expression right);
    [CompilerGeneratedAttribute]
public Expression get_Left();
    [CompilerGeneratedAttribute]
public Expression get_Right();
    [CompilerGeneratedAttribute]
public PythonOperator get_Operator();
    private bool IsComparison();
    private bool NeedComparisonTransformation();
    public static bool IsComparison(Expression expression);
    private Expression FinishCompare(Expression left);
    public virtual Expression Reduce();
    private sealed virtual override void Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(LightCompiler compiler);
    public virtual string get_NodeName();
    private Expression MakeBinaryOperation(PythonOperator op, Expression left, Expression right, SourceSpan span);
    private bool CanEmitWarning(PythonOperator op);
    public virtual void Walk(PythonWalker walker);
    private static PythonOperationKind PythonOperatorToAction(PythonOperator op);
    private static MethodInfo GetHelperMethod(PythonOperator op);
    internal virtual bool get_CanThrow();
    internal virtual ConstantExpression ConstantFold();
}
public class IronPython.Compiler.Ast.BreakStatement : Statement {
    [CompilerGeneratedAttribute]
private ILoopStatement <LoopStatement>k__BackingField;
    internal bool CanThrow { get; }
    internal ILoopStatement LoopStatement { get; internal set; }
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
    [CompilerGeneratedAttribute]
internal ILoopStatement get_LoopStatement();
    [CompilerGeneratedAttribute]
internal void set_LoopStatement(ILoopStatement value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.CallExpression : Expression {
    private Expression[] _args;
    private Keyword[] _kwargs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression[] _implicitArgs;
    [CompilerGeneratedAttribute]
private Expression <Target>k__BackingField;
    private static Argument _listTypeArgument;
    private static Argument _dictTypeArgument;
    public Expression Target { get; }
    public IReadOnlyList`1<Expression> Args { get; }
    public IReadOnlyList`1<Keyword> Kwargs { get; }
    public string NodeName { get; }
    public CallExpression(Expression target, IReadOnlyList`1<Expression> args, IReadOnlyList`1<Keyword> kwargs);
    private static CallExpression();
    [CompilerGeneratedAttribute]
public Expression get_Target();
    public IReadOnlyList`1<Expression> get_Args();
    public IReadOnlyList`1<Keyword> get_Kwargs();
    internal void SetImplicitArgs(Expression[] args);
    public bool NeedsLocalsDictionary();
    public virtual Expression Reduce();
    private sealed virtual override void Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(LightCompiler compiler);
    public virtual string get_NodeName();
    public virtual void Walk(PythonWalker walker);
    [CompilerGeneratedAttribute]
internal static void <Reduce>g__ScanArgs|15_0(ReadOnlySpan`1<Expression> args, Int32& numArgs, Int32& firstArgPos);
    [CompilerGeneratedAttribute]
internal static void <Reduce>g__ScanKwargs|15_1(ReadOnlySpan`1<Keyword> kwargs, Int32& numArgs, Int32& firstArgPos);
    [CompilerGeneratedAttribute]
internal static Expression <Reduce>g__UnpackListHelper|15_2(ReadOnlySpan`1<Expression> args);
    [CompilerGeneratedAttribute]
internal static Expression <Reduce>g__UnpackDictHelper|15_3(Expression context, ReadOnlySpan`1<Keyword> kwargs, int numDict);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.ClassDefinition : ScopeStatement {
    private string _name;
    private Expression[] _bases;
    private Keyword[] _keywords;
    [NullableAttribute("2")]
private LightLambdaExpression _dlrBody;
    private static int _classId;
    private static ParameterExpression _parentContextParam;
    private static Expression _tupleExpression;
    [CompilerGeneratedAttribute]
private int <HeaderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Statement <Body>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<Expression> <Decorators>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PythonVariable <PythonVariable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PythonVariable <ModVariable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PythonVariable <DocVariable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PythonVariable <ModuleNameVariable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PythonVariable <ClassCellVariable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PythonVariable <ClassVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <needClassCell>k__BackingField;
    private static Expression NullLambda;
    public SourceLocation Header { get; }
    public int HeaderIndex { get; public set; }
    public string Name { get; }
    public IReadOnlyList`1<Expression> Bases { get; }
    public IReadOnlyList`1<Keyword> Keywords { get; }
    public Statement Body { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<Expression> Decorators { get; internal set; }
    [NullableAttribute("2")]
internal PythonVariable PythonVariable { get; internal set; }
    [NullableAttribute("2")]
internal PythonVariable ModVariable { get; internal set; }
    [NullableAttribute("2")]
internal PythonVariable DocVariable { get; internal set; }
    [NullableAttribute("2")]
internal PythonVariable ModuleNameVariable { get; internal set; }
    [NullableAttribute("2")]
private PythonVariable ClassCellVariable { get; private set; }
    [NullableAttribute("2")]
private PythonVariable ClassVariable { get; private set; }
    internal bool HasLateBoundVariableSets { get; internal set; }
    private bool needClassCell { get; private set; }
    internal string ScopeDocumentation { get; }
    public ClassDefinition(string name, IReadOnlyList`1<Expression> bases, IReadOnlyList`1<Keyword> keywords, Statement body);
    private static ClassDefinition();
    public SourceLocation get_Header();
    [CompilerGeneratedAttribute]
public int get_HeaderIndex();
    [CompilerGeneratedAttribute]
public void set_HeaderIndex(int value);
    public virtual string get_Name();
    public IReadOnlyList`1<Expression> get_Bases();
    public IReadOnlyList`1<Keyword> get_Keywords();
    [CompilerGeneratedAttribute]
public Statement get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Statement value);
    [CompilerGeneratedAttribute]
public IList`1<Expression> get_Decorators();
    [CompilerGeneratedAttribute]
internal void set_Decorators(IList`1<Expression> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal PythonVariable get_PythonVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_PythonVariable(PythonVariable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal PythonVariable get_ModVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ModVariable(PythonVariable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal PythonVariable get_DocVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_DocVariable(PythonVariable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal PythonVariable get_ModuleNameVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ModuleNameVariable(PythonVariable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private PythonVariable get_ClassCellVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ClassCellVariable(PythonVariable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private PythonVariable get_ClassVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ClassVariable(PythonVariable value);
    internal virtual bool get_HasLateBoundVariableSets();
    internal virtual void set_HasLateBoundVariableSets(bool value);
    internal virtual bool ExposesLocalVariable(PythonVariable variable);
    [CompilerGeneratedAttribute]
private bool get_needClassCell();
    [CompilerGeneratedAttribute]
private void set_needClassCell(bool value);
    internal virtual bool TryBindOuter(ScopeStatement from, PythonReference reference, PythonVariable& variable);
    internal virtual PythonVariable BindReference(PythonNameBinder binder, PythonReference reference);
    internal virtual Expression LookupVariableExpression(PythonVariable variable);
    public virtual Expression Reduce();
    private LightExpression`1<Func`2<CodeContext, CodeContext>> MakeClassBody();
    internal virtual LightLambdaExpression GetLambda();
    internal virtual Expression GetParentClosureTuple();
    internal virtual string get_ScopeDocumentation();
    public virtual void Walk(PythonWalker walker);
    private string FindSelfNames();
    internal virtual void RewriteBody(ExpressionVisitor visitor);
    [CompilerGeneratedAttribute]
internal static Expression <Reduce>g__UnpackBasesHelper|64_1(ReadOnlySpan`1<Expression> bases);
    [CompilerGeneratedAttribute]
internal static Expression <Reduce>g__UnpackKeywordsHelper|64_2(Expression context, ReadOnlySpan`1<Keyword> kwargs);
}
internal class IronPython.Compiler.Ast.CollectableCompilationMode : CompilationMode {
    public Type DelegateType { get; }
    public virtual LightLambdaExpression ReduceAst(PythonAst instance, string name);
    public virtual void PrepareScope(PythonAst ast, ReadOnlyCollectionBuilder`1<ParameterExpression> locals, List`1<Expression> init);
    public virtual Expression GetGlobal(Expression globalContext, int arrayIndex, PythonVariable variable, PythonGlobal global);
    public virtual Type get_DelegateType();
}
public abstract class IronPython.Compiler.Ast.Comprehension : Expression {
    [CompilerGeneratedAttribute]
private ComprehensionScope <Scope>k__BackingField;
    public IReadOnlyList`1<ComprehensionIterator> Iterators { get; }
    public string NodeName { get; }
    internal ComprehensionScope Scope { get; private protected set; }
    public abstract virtual IReadOnlyList`1<ComprehensionIterator> get_Iterators();
    public abstract virtual string get_NodeName();
    protected abstract virtual ParameterExpression MakeParameter();
    protected abstract virtual MethodInfo Factory();
    protected abstract virtual Expression Body(ParameterExpression res);
    public abstract virtual void Walk(PythonWalker walker);
    public virtual Expression Reduce();
    [CompilerGeneratedAttribute]
internal ComprehensionScope get_Scope();
    [CompilerGeneratedAttribute]
private protected void set_Scope(ComprehensionScope value);
    internal Comprehension CopyForRewrite(ComprehensionScope scope);
}
public class IronPython.Compiler.Ast.ComprehensionFor : ComprehensionIterator {
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <List>k__BackingField;
    public Expression Left { get; }
    public Expression List { get; }
    public ComprehensionFor(Expression lhs, Expression list);
    [CompilerGeneratedAttribute]
public Expression get_Left();
    [CompilerGeneratedAttribute]
public Expression get_List();
    internal virtual Expression Transform(Expression body);
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.ComprehensionIf : ComprehensionIterator {
    [CompilerGeneratedAttribute]
private Expression <Test>k__BackingField;
    public Expression Test { get; }
    public ComprehensionIf(Expression test);
    [CompilerGeneratedAttribute]
public Expression get_Test();
    internal virtual Expression Transform(Expression body);
    public virtual void Walk(PythonWalker walker);
}
public abstract class IronPython.Compiler.Ast.ComprehensionIterator : Node {
    internal abstract virtual Expression Transform(Expression body);
}
internal class IronPython.Compiler.Ast.ComprehensionScope : ScopeStatement {
    private static int _comprehensionId;
    private ParameterExpression _compContext;
    private Comprehension _comprehension;
    internal Expression LocalContext { get; }
    public ComprehensionScope(Comprehension comprehension);
    internal virtual bool ExposesLocalVariable(PythonVariable variable);
    internal virtual Expression GetParentClosureTuple();
    internal virtual void AddFreeVariable(PythonVariable variable, bool accessedInScope);
    internal virtual bool TryBindOuter(ScopeStatement from, PythonReference reference, PythonVariable& variable);
    internal virtual PythonVariable BindReference(PythonNameBinder binder, PythonReference reference);
    internal virtual Expression GetVariableExpression(PythonVariable variable);
    internal virtual LightLambdaExpression GetLambda();
    public virtual void Walk(PythonWalker walker);
    internal virtual Expression get_LocalContext();
    internal Expression AddVariables(Expression expression);
}
public class IronPython.Compiler.Ast.ConditionalExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <FalseExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <TrueExpression>k__BackingField;
    public Expression FalseExpression { get; }
    public Expression Test { get; }
    public Expression TrueExpression { get; }
    public string NodeName { get; }
    public ConditionalExpression(Expression testExpression, Expression trueExpression, Expression falseExpression);
    [CompilerGeneratedAttribute]
public Expression get_FalseExpression();
    [CompilerGeneratedAttribute]
public Expression get_Test();
    [CompilerGeneratedAttribute]
public Expression get_TrueExpression();
    public virtual string get_NodeName();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.ConstantExpression : Expression {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    private static Expression EllipsisExpr;
    private static Expression TrueExpr;
    private static Expression FalseExpr;
    public object Value { get; }
    public Type Type { get; }
    public string NodeName { get; }
    internal bool CanThrow { get; }
    internal bool IsConstant { get; }
    public ConstantExpression(object value);
    private static ConstantExpression();
    [CompilerGeneratedAttribute]
public object get_Value();
    public virtual Expression Reduce();
    internal virtual ConstantExpression ConstantFold();
    public virtual Type get_Type();
    internal virtual string CheckAssign();
    public virtual void Walk(PythonWalker walker);
    public virtual string get_NodeName();
    internal virtual bool get_CanThrow();
    internal virtual object GetConstantValue();
    internal virtual bool get_IsConstant();
    private sealed virtual override void Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(LightCompiler compiler);
}
public static class IronPython.Compiler.Ast.ConstantStorage000 : object {
    public static object Constant000;
    public static object Constant001;
    public static object Constant002;
    public static object Constant003;
    public static object Constant004;
    public static object Constant005;
    public static object Constant006;
    public static object Constant007;
    public static object Constant008;
    public static object Constant009;
    public static object Constant010;
    public static object Constant011;
    public static object Constant012;
    public static object Constant013;
    public static object Constant014;
    public static object Constant015;
    public static object Constant016;
    public static object Constant017;
    public static object Constant018;
    public static object Constant019;
    public static object Constant020;
    public static object Constant021;
    public static object Constant022;
    public static object Constant023;
    public static object Constant024;
    public static object Constant025;
    public static object Constant026;
    public static object Constant027;
    public static object Constant028;
    public static object Constant029;
    public static object Constant030;
    public static object Constant031;
    public static object Constant032;
    public static object Constant033;
    public static object Constant034;
    public static object Constant035;
    public static object Constant036;
    public static object Constant037;
    public static object Constant038;
    public static object Constant039;
    public static object Constant040;
    public static object Constant041;
    public static object Constant042;
    public static object Constant043;
    public static object Constant044;
    public static object Constant045;
    public static object Constant046;
    public static object Constant047;
    public static object Constant048;
    public static object Constant049;
}
public static class IronPython.Compiler.Ast.ConstantStorage001 : object {
    public static object Constant000;
    public static object Constant001;
    public static object Constant002;
    public static object Constant003;
    public static object Constant004;
    public static object Constant005;
    public static object Constant006;
    public static object Constant007;
    public static object Constant008;
    public static object Constant009;
    public static object Constant010;
    public static object Constant011;
    public static object Constant012;
    public static object Constant013;
    public static object Constant014;
    public static object Constant015;
    public static object Constant016;
    public static object Constant017;
    public static object Constant018;
    public static object Constant019;
    public static object Constant020;
    public static object Constant021;
    public static object Constant022;
    public static object Constant023;
    public static object Constant024;
    public static object Constant025;
    public static object Constant026;
    public static object Constant027;
    public static object Constant028;
    public static object Constant029;
    public static object Constant030;
    public static object Constant031;
    public static object Constant032;
    public static object Constant033;
    public static object Constant034;
    public static object Constant035;
    public static object Constant036;
    public static object Constant037;
    public static object Constant038;
    public static object Constant039;
    public static object Constant040;
    public static object Constant041;
    public static object Constant042;
    public static object Constant043;
    public static object Constant044;
    public static object Constant045;
    public static object Constant046;
    public static object Constant047;
    public static object Constant048;
    public static object Constant049;
}
public static class IronPython.Compiler.Ast.ConstantStorage002 : object {
    public static object Constant000;
    public static object Constant001;
    public static object Constant002;
    public static object Constant003;
    public static object Constant004;
    public static object Constant005;
    public static object Constant006;
    public static object Constant007;
    public static object Constant008;
    public static object Constant009;
    public static object Constant010;
    public static object Constant011;
    public static object Constant012;
    public static object Constant013;
    public static object Constant014;
    public static object Constant015;
    public static object Constant016;
    public static object Constant017;
    public static object Constant018;
    public static object Constant019;
    public static object Constant020;
    public static object Constant021;
    public static object Constant022;
    public static object Constant023;
    public static object Constant024;
    public static object Constant025;
    public static object Constant026;
    public static object Constant027;
    public static object Constant028;
    public static object Constant029;
    public static object Constant030;
    public static object Constant031;
    public static object Constant032;
    public static object Constant033;
    public static object Constant034;
    public static object Constant035;
    public static object Constant036;
    public static object Constant037;
    public static object Constant038;
    public static object Constant039;
    public static object Constant040;
    public static object Constant041;
    public static object Constant042;
    public static object Constant043;
    public static object Constant044;
    public static object Constant045;
    public static object Constant046;
    public static object Constant047;
    public static object Constant048;
    public static object Constant049;
}
public static class IronPython.Compiler.Ast.ConstantStorage003 : object {
    public static object Constant000;
    public static object Constant001;
    public static object Constant002;
    public static object Constant003;
    public static object Constant004;
    public static object Constant005;
    public static object Constant006;
    public static object Constant007;
    public static object Constant008;
    public static object Constant009;
    public static object Constant010;
    public static object Constant011;
    public static object Constant012;
    public static object Constant013;
    public static object Constant014;
    public static object Constant015;
    public static object Constant016;
    public static object Constant017;
    public static object Constant018;
    public static object Constant019;
    public static object Constant020;
    public static object Constant021;
    public static object Constant022;
    public static object Constant023;
    public static object Constant024;
    public static object Constant025;
    public static object Constant026;
    public static object Constant027;
    public static object Constant028;
    public static object Constant029;
    public static object Constant030;
    public static object Constant031;
    public static object Constant032;
    public static object Constant033;
    public static object Constant034;
    public static object Constant035;
    public static object Constant036;
    public static object Constant037;
    public static object Constant038;
    public static object Constant039;
    public static object Constant040;
    public static object Constant041;
    public static object Constant042;
    public static object Constant043;
    public static object Constant044;
    public static object Constant045;
    public static object Constant046;
    public static object Constant047;
    public static object Constant048;
    public static object Constant049;
}
public static class IronPython.Compiler.Ast.ConstantStorage004 : object {
    public static object Constant000;
    public static object Constant001;
    public static object Constant002;
    public static object Constant003;
    public static object Constant004;
    public static object Constant005;
    public static object Constant006;
    public static object Constant007;
    public static object Constant008;
    public static object Constant009;
    public static object Constant010;
    public static object Constant011;
    public static object Constant012;
    public static object Constant013;
    public static object Constant014;
    public static object Constant015;
    public static object Constant016;
    public static object Constant017;
    public static object Constant018;
    public static object Constant019;
    public static object Constant020;
    public static object Constant021;
    public static object Constant022;
    public static object Constant023;
    public static object Constant024;
    public static object Constant025;
    public static object Constant026;
    public static object Constant027;
    public static object Constant028;
    public static object Constant029;
    public static object Constant030;
    public static object Constant031;
    public static object Constant032;
    public static object Constant033;
    public static object Constant034;
    public static object Constant035;
    public static object Constant036;
    public static object Constant037;
    public static object Constant038;
    public static object Constant039;
    public static object Constant040;
    public static object Constant041;
    public static object Constant042;
    public static object Constant043;
    public static object Constant044;
    public static object Constant045;
    public static object Constant046;
    public static object Constant047;
    public static object Constant048;
    public static object Constant049;
}
public static class IronPython.Compiler.Ast.ContextStorage000 : object {
    public static CodeContext Context000;
    public static CodeContext Context001;
    public static CodeContext Context002;
    public static CodeContext Context003;
    public static CodeContext Context004;
    public static CodeContext Context005;
    public static CodeContext Context006;
    public static CodeContext Context007;
    public static CodeContext Context008;
    public static CodeContext Context009;
    public static CodeContext Context010;
    public static CodeContext Context011;
    public static CodeContext Context012;
    public static CodeContext Context013;
    public static CodeContext Context014;
    public static CodeContext Context015;
    public static CodeContext Context016;
    public static CodeContext Context017;
    public static CodeContext Context018;
    public static CodeContext Context019;
    public static CodeContext Context020;
    public static CodeContext Context021;
    public static CodeContext Context022;
    public static CodeContext Context023;
    public static CodeContext Context024;
    public static CodeContext Context025;
    public static CodeContext Context026;
    public static CodeContext Context027;
    public static CodeContext Context028;
    public static CodeContext Context029;
    public static CodeContext Context030;
    public static CodeContext Context031;
    public static CodeContext Context032;
    public static CodeContext Context033;
    public static CodeContext Context034;
    public static CodeContext Context035;
    public static CodeContext Context036;
    public static CodeContext Context037;
    public static CodeContext Context038;
    public static CodeContext Context039;
    public static CodeContext Context040;
    public static CodeContext Context041;
    public static CodeContext Context042;
    public static CodeContext Context043;
    public static CodeContext Context044;
    public static CodeContext Context045;
    public static CodeContext Context046;
    public static CodeContext Context047;
    public static CodeContext Context048;
    public static CodeContext Context049;
}
public class IronPython.Compiler.Ast.ContinueStatement : Statement {
    [CompilerGeneratedAttribute]
private ILoopStatement <LoopStatement>k__BackingField;
    internal bool CanThrow { get; }
    internal ILoopStatement LoopStatement { get; internal set; }
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
    [CompilerGeneratedAttribute]
internal ILoopStatement get_LoopStatement();
    [CompilerGeneratedAttribute]
internal void set_LoopStatement(ILoopStatement value);
}
internal class IronPython.Compiler.Ast.DefineBinder : PythonWalkerNonRecursive {
    private PythonNameBinder _binder;
    public DefineBinder(PythonNameBinder binder);
    public virtual bool Walk(NameExpression node);
    public virtual bool Walk(ParenthesisExpression node);
    public virtual bool Walk(TupleExpression node);
    public virtual bool Walk(ListExpression node);
}
internal class IronPython.Compiler.Ast.DeleteBinder : PythonWalkerNonRecursive {
    private PythonNameBinder _binder;
    public DeleteBinder(PythonNameBinder binder);
    public virtual bool Walk(NameExpression node);
}
public class IronPython.Compiler.Ast.DelStatement : Statement {
    private Expression[] _expressions;
    public IList`1<Expression> Expressions { get; }
    internal bool CanThrow { get; }
    public DelStatement(Expression[] expressions);
    public IList`1<Expression> get_Expressions();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
public class IronPython.Compiler.Ast.DictionaryComprehension : Comprehension {
    private ComprehensionIterator[] _iterators;
    [CompilerGeneratedAttribute]
private Expression <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Value>k__BackingField;
    public Expression Key { get; }
    public Expression Value { get; }
    public IReadOnlyList`1<ComprehensionIterator> Iterators { get; }
    public string NodeName { get; }
    public DictionaryComprehension(Expression key, Expression value, ComprehensionIterator[] iterators);
    [CompilerGeneratedAttribute]
public Expression get_Key();
    [CompilerGeneratedAttribute]
public Expression get_Value();
    public virtual IReadOnlyList`1<ComprehensionIterator> get_Iterators();
    protected virtual ParameterExpression MakeParameter();
    protected virtual MethodInfo Factory();
    public virtual Expression Reduce();
    protected virtual Expression Body(ParameterExpression res);
    public virtual string get_NodeName();
    public virtual void Walk(PythonWalker walker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.DictionaryExpression : Expression {
    private SliceExpression[] _items;
    private bool _hasNullKey;
    private static Expression EmptyDictExpression;
    public IReadOnlyList`1<SliceExpression> Items { get; }
    public DictionaryExpression(SliceExpression[] items);
    private static DictionaryExpression();
    public IReadOnlyList`1<SliceExpression> get_Items();
    public virtual Expression Reduce();
    private static Expression ReduceDictionaryWithUnpack(Expression context, ReadOnlySpan`1<SliceExpression> items);
    private static Expression ReduceDictionaryWithItems(ReadOnlySpan`1<SliceExpression> items);
    [NullableContextAttribute("2")]
private Expression ReduceConstant();
    public virtual void Walk(PythonWalker walker);
    private sealed virtual override void Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(LightCompiler compiler);
}
public class IronPython.Compiler.Ast.DottedName : Node {
    private String[] _names;
    public IList`1<string> Names { get; }
    public DottedName(String[] names);
    public IList`1<string> get_Names();
    public string MakeString();
    public virtual void Walk(PythonWalker walker);
}
internal class IronPython.Compiler.Ast.DynamicConvertExpression : Expression {
    private PythonConversionBinder _binder;
    private CompilationMode _mode;
    private Expression _target;
    public bool CanReduce { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public DynamicConvertExpression(PythonConversionBinder binder, CompilationMode mode, Expression target);
    public virtual bool get_CanReduce();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual Expression Reduce();
    public sealed virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.Ast.DynamicGetMemberExpression : Expression {
    private PythonGetMemberBinder _binder;
    private CompilationMode _mode;
    private Expression _target;
    private Expression _codeContext;
    public bool CanReduce { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public DynamicGetMemberExpression(PythonGetMemberBinder binder, CompilationMode mode, Expression target, Expression codeContext);
    public virtual bool get_CanReduce();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual Expression Reduce();
    public sealed virtual void AddInstructions(LightCompiler compiler);
}
public class IronPython.Compiler.Ast.EmptyStatement : Statement {
    internal static EmptyStatement PreCompiledInstance;
    internal bool CanThrow { get; }
    private static EmptyStatement();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
public class IronPython.Compiler.Ast.ErrorExpression : Expression {
    public virtual void Walk(PythonWalker walker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class IronPython.Compiler.Ast.Expression : Node {
    internal bool IsConstant { get; }
    public Type Type { get; }
    protected internal static BlockExpression UnpackSequenceHelper(ReadOnlySpan`1<Expression> items, MethodInfo makeEmpty, MethodInfo append, MethodInfo extend);
    internal virtual Expression TransformSet(SourceSpan span, Expression right, PythonOperationKind op);
    internal virtual Expression TransformDelete();
    [NullableContextAttribute("2")]
internal virtual ConstantExpression ConstantFold();
    [NullableContextAttribute("2")]
internal virtual string CheckAssign();
    [NullableContextAttribute("2")]
internal virtual string CheckAugmentedAssign();
    [NullableContextAttribute("2")]
internal virtual string CheckDelete();
    internal virtual bool get_IsConstant();
    internal virtual object GetConstantValue();
    public virtual Type get_Type();
}
public class IronPython.Compiler.Ast.ExpressionStatement : Statement {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    public string Documentation { get; }
    internal bool CanThrow { get; }
    public ExpressionStatement(Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    public virtual Expression Reduce();
    private Expression ReduceWorker(Expression expression);
    public virtual void Walk(PythonWalker walker);
    public virtual string get_Documentation();
    internal virtual bool get_CanThrow();
}
internal class IronPython.Compiler.Ast.FlowChecker : PythonWalker {
    private BitArray _bits;
    private Stack`1<BitArray> _loops;
    private Dictionary`2<string, PythonVariable> _variables;
    private ScopeStatement _scope;
    private FlowDefiner _fdef;
    private FlowDeleter _fdel;
    private FlowChecker(ScopeStatement scope);
    [ConditionalAttribute("DEBUG")]
public void Dump(BitArray bits);
    private void SetAssigned(PythonVariable variable, bool value);
    private void SetInitialized(PythonVariable variable, bool value);
    private bool IsAssigned(PythonVariable variable);
    private bool IsInitialized(PythonVariable variable);
    public static void Check(ScopeStatement scope);
    public void Define(string name);
    public void Delete(string name);
    private void PushLoop(BitArray ba);
    private BitArray PeekLoop();
    private void PopLoop();
    public virtual bool Walk(LambdaExpression node);
    public virtual bool Walk(ListComprehension node);
    public virtual bool Walk(SetComprehension node);
    public virtual bool Walk(DictionaryComprehension node);
    public virtual bool Walk(NameExpression node);
    public virtual void PostWalk(NameExpression node);
    public virtual bool Walk(AssignmentStatement node);
    public virtual void PostWalk(AssignmentStatement node);
    public virtual bool Walk(AugmentedAssignStatement node);
    public virtual void PostWalk(AugmentedAssignStatement node);
    public virtual bool Walk(BreakStatement node);
    public virtual bool Walk(ClassDefinition node);
    public virtual bool Walk(ContinueStatement node);
    public virtual void PostWalk(DelStatement node);
    public virtual bool Walk(ForStatement node);
    public virtual bool Walk(FromImportStatement node);
    public virtual bool Walk(FunctionDefinition node);
    public virtual bool Walk(IfStatement node);
    public virtual bool Walk(ImportStatement node);
    public virtual void PostWalk(ReturnStatement node);
    public virtual bool Walk(WithStatement node);
    public virtual bool Walk(TryStatement node);
    public virtual bool Walk(WhileStatement node);
}
internal class IronPython.Compiler.Ast.FlowDefiner : PythonWalkerNonRecursive {
    private FlowChecker _fc;
    public FlowDefiner(FlowChecker fc);
    public virtual bool Walk(NameExpression node);
    public virtual bool Walk(MemberExpression node);
    public virtual bool Walk(IndexExpression node);
    public virtual bool Walk(ParenthesisExpression node);
    public virtual bool Walk(TupleExpression node);
    public virtual bool Walk(ListExpression node);
    public virtual bool Walk(Parameter node);
}
internal class IronPython.Compiler.Ast.FlowDeleter : PythonWalkerNonRecursive {
    private FlowChecker _fc;
    public FlowDeleter(FlowChecker fc);
    public virtual bool Walk(NameExpression node);
    public virtual bool Walk(ParenthesisExpression node);
    public virtual bool Walk(TupleExpression node);
    public virtual bool Walk(ListExpression node);
}
public class IronPython.Compiler.Ast.ForStatement : Statement {
    [CompilerGeneratedAttribute]
private int <HeaderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Statement <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <List>k__BackingField;
    [CompilerGeneratedAttribute]
private Statement <Else>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelTarget <IronPython.Compiler.Ast.ILoopStatement.BreakLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelTarget <IronPython.Compiler.Ast.ILoopStatement.ContinueLabel>k__BackingField;
    private int HeaderIndex { get; public set; }
    public Expression Left { get; }
    public Statement Body { get; public set; }
    public Expression List { get; public set; }
    public Statement Else { get; }
    private LabelTarget IronPython.Compiler.Ast.ILoopStatement.BreakLabel { get; private set; }
    private LabelTarget IronPython.Compiler.Ast.ILoopStatement.ContinueLabel { get; private set; }
    internal bool CanThrow { get; }
    public ForStatement(Expression left, Expression list, Statement body, Statement else_);
    [CompilerGeneratedAttribute]
private int get_HeaderIndex();
    [CompilerGeneratedAttribute]
public void set_HeaderIndex(int value);
    [CompilerGeneratedAttribute]
public Expression get_Left();
    [CompilerGeneratedAttribute]
public Statement get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Statement value);
    [CompilerGeneratedAttribute]
public Expression get_List();
    [CompilerGeneratedAttribute]
public void set_List(Expression value);
    [CompilerGeneratedAttribute]
public Statement get_Else();
    [CompilerGeneratedAttribute]
private sealed virtual override LabelTarget IronPython.Compiler.Ast.ILoopStatement.get_BreakLabel();
    [CompilerGeneratedAttribute]
private sealed virtual override void IronPython.Compiler.Ast.ILoopStatement.set_BreakLabel(LabelTarget value);
    [CompilerGeneratedAttribute]
private sealed virtual override LabelTarget IronPython.Compiler.Ast.ILoopStatement.get_ContinueLabel();
    [CompilerGeneratedAttribute]
private sealed virtual override void IronPython.Compiler.Ast.ILoopStatement.set_ContinueLabel(LabelTarget value);
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    internal static Expression TransformFor(ScopeStatement parent, ParameterExpression enumerator, Expression list, Expression left, Expression body, Statement else_, SourceSpan span, SourceLocation header, LabelTarget breakLabel, LabelTarget continueLabel, bool isStatement);
    internal virtual bool get_CanThrow();
}
public class IronPython.Compiler.Ast.FromImportStatement : Statement {
    private static String[] _star;
    private ModuleName _root;
    private String[] _names;
    private String[] _asNames;
    [CompilerGeneratedAttribute]
private bool <IsFromFuture>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonVariable[] <Variables>k__BackingField;
    public static IList`1<string> Star { get; }
    public DottedName Root { get; }
    public bool IsFromFuture { get; }
    public IList`1<string> Names { get; }
    public IList`1<string> AsNames { get; }
    internal PythonVariable[] Variables { get; internal set; }
    public FromImportStatement(ModuleName root, String[] names, String[] asNames, bool fromFuture);
    private static FromImportStatement();
    public static IList`1<string> get_Star();
    public DottedName get_Root();
    [CompilerGeneratedAttribute]
public bool get_IsFromFuture();
    public IList`1<string> get_Names();
    public IList`1<string> get_AsNames();
    [CompilerGeneratedAttribute]
internal PythonVariable[] get_Variables();
    [CompilerGeneratedAttribute]
internal void set_Variables(PythonVariable[] value);
    public virtual Expression Reduce();
    private object GetLevel();
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.FunctionDefinition : ScopeStatement {
    private string _name;
    private Parameter[] _parameters;
    internal PythonVariable _nameVariable;
    private LightLambdaExpression _dlrBody;
    internal bool _hasReturn;
    private static int _lambdaId;
    internal static ParameterExpression _functionParam;
    private static Expression _GetClosureTupleFromFunctionCall;
    private static Expression _parentContext;
    internal static LabelTarget _returnLabel;
    [CompilerGeneratedAttribute]
private bool <IsLambda>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private Statement <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HeaderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Expression> <Decorators>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ReturnAnnotation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GeneratorStop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanSetSysExcInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsTryFinally>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonVariable <PythonVariable>k__BackingField;
    internal static ArbitraryGlobalsVisitor ArbitraryGlobalsVisitorInstance;
    internal Expression LocalContext { get; }
    public bool IsLambda { get; }
    public bool IsAsync { get; }
    public IList`1<Parameter> Parameters { get; }
    internal String[] ParameterNames { get; }
    internal int ArgCount { get; }
    internal int KwOnlyArgCount { get; }
    public Statement Body { get; public set; }
    public SourceLocation Header { get; }
    public int HeaderIndex { get; public set; }
    public string Name { get; }
    public IList`1<Expression> Decorators { get; internal set; }
    public Expression ReturnAnnotation { get; internal set; }
    internal bool IsGeneratorMethod { get; }
    public bool IsGenerator { get; public set; }
    internal bool GeneratorStop { get; internal set; }
    private bool CanSetSysExcInfo { get; internal set; }
    internal bool ContainsTryFinally { get; internal set; }
    internal PythonVariable PythonVariable { get; internal set; }
    internal FunctionAttributes Flags { get; }
    internal Delegate OriginalDelegate { get; }
    internal string ScopeDocumentation { get; }
    internal FunctionCode FunctionCode { get; }
    internal string ProfilerName { get; }
    internal bool CanThrow { get; }
    public FunctionDefinition(string name, Parameter[] parameters, bool isAsync);
    public FunctionDefinition(string name, Parameter[] parameters, Statement body, bool isAsync);
    [ObsoleteAttribute("sourceUnit is now ignored.  FunctionDefinitions should belong to a PythonAst which has a SourceUnit")]
public FunctionDefinition(string name, Parameter[] parameters, SourceUnit sourceUnit);
    [ObsoleteAttribute("sourceUnit is now ignored.  FunctionDefinitions should belong to a PythonAst which has a SourceUnit")]
public FunctionDefinition(string name, Parameter[] parameters, Statement body, SourceUnit sourceUnit);
    private static FunctionDefinition();
    internal virtual Expression get_LocalContext();
    [CompilerGeneratedAttribute]
public bool get_IsLambda();
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    public IList`1<Parameter> get_Parameters();
    internal virtual String[] get_ParameterNames();
    internal virtual int get_ArgCount();
    internal virtual int get_KwOnlyArgCount();
    [CompilerGeneratedAttribute]
public Statement get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Statement value);
    public SourceLocation get_Header();
    [CompilerGeneratedAttribute]
public int get_HeaderIndex();
    [CompilerGeneratedAttribute]
public void set_HeaderIndex(int value);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public IList`1<Expression> get_Decorators();
    [CompilerGeneratedAttribute]
internal void set_Decorators(IList`1<Expression> value);
    [CompilerGeneratedAttribute]
public Expression get_ReturnAnnotation();
    [CompilerGeneratedAttribute]
internal void set_ReturnAnnotation(Expression value);
    internal virtual bool get_IsGeneratorMethod();
    [CompilerGeneratedAttribute]
public bool get_IsGenerator();
    [CompilerGeneratedAttribute]
public void set_IsGenerator(bool value);
    [CompilerGeneratedAttribute]
internal bool get_GeneratorStop();
    [CompilerGeneratedAttribute]
internal void set_GeneratorStop(bool value);
    [CompilerGeneratedAttribute]
private bool get_CanSetSysExcInfo();
    [CompilerGeneratedAttribute]
internal void set_CanSetSysExcInfo(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ContainsTryFinally();
    [CompilerGeneratedAttribute]
internal void set_ContainsTryFinally(bool value);
    [CompilerGeneratedAttribute]
internal PythonVariable get_PythonVariable();
    [CompilerGeneratedAttribute]
internal void set_PythonVariable(PythonVariable value);
    internal virtual bool ExposesLocalVariable(PythonVariable variable);
    internal virtual FunctionAttributes get_Flags();
    internal virtual void AddFreeVariable(PythonVariable variable, bool accessedInScope);
    internal virtual bool TryBindOuter(ScopeStatement from, PythonReference reference, PythonVariable& variable);
    internal virtual PythonVariable BindReference(PythonNameBinder binder, PythonReference reference);
    internal virtual void Bind(PythonNameBinder binder);
    internal virtual void FinishBind(PythonNameBinder binder);
    private void Verify(PythonNameBinder binder);
    internal virtual Expression GetParentClosureTuple();
    public virtual Expression Reduce();
    internal Expression MakeFunctionExpression();
    private sealed virtual override void Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(LightCompiler compiler);
    private void CreateFunctionInstructions(LightCompiler compiler);
    private static void CompileAssignment(LightCompiler compiler, Expression variable, Action`1<LightCompiler> compileValue);
    private LightLambdaExpression EnsureFunctionLambda();
    internal virtual Delegate get_OriginalDelegate();
    internal virtual string get_ScopeDocumentation();
    private LightLambdaExpression CreateFunctionLambda();
    internal virtual LightLambdaExpression GetLambda();
    internal FunctionCode get_FunctionCode();
    private static Expression AddDefaultReturn(Expression body, Type returnType);
    private ParameterExpression[] CreateParameters(bool needsWrapperMethod, ReadOnlyCollectionBuilder`1<ParameterExpression> locals);
    internal void CreateFunctionVariables(ReadOnlyCollectionBuilder`1<ParameterExpression> locals, List`1<Expression> init);
    internal Expression AddReturnTarget(Expression expression);
    internal virtual string get_ProfilerName();
    private bool EmitDebugFunction();
    internal virtual IList`1<string> GetVarNames();
    private void InitializeParameters(List`1<Expression> init, bool needsWrapperMethod, Expression[] parameters);
    public virtual void Walk(PythonWalker walker);
    private static Type GetDelegateType(Parameter[] parameters, bool wrapper, Delegate& originalTarget);
    internal virtual bool get_CanThrow();
    internal virtual void RewriteBody(ExpressionVisitor visitor);
}
public class IronPython.Compiler.Ast.GeneratorExpression : Expression {
    [CompilerGeneratedAttribute]
private FunctionDefinition <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Iterable>k__BackingField;
    public FunctionDefinition Function { get; }
    public Expression Iterable { get; }
    public string NodeName { get; }
    public GeneratorExpression(FunctionDefinition function, Expression iterable);
    public virtual Expression Reduce();
    [CompilerGeneratedAttribute]
public FunctionDefinition get_Function();
    [CompilerGeneratedAttribute]
public Expression get_Iterable();
    public virtual string get_NodeName();
    public virtual void Walk(PythonWalker walker);
}
internal class IronPython.Compiler.Ast.GetGlobalContextExpression : Expression {
    private Expression _parentContext;
    public bool CanReduce { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public GetGlobalContextExpression(Expression parentContext);
    public virtual bool get_CanReduce();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual Expression Reduce();
    public sealed virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.Ast.GetParentContextFromFunctionExpression : Expression {
    private static Expression _parentContext;
    public bool CanReduce { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    private static GetParentContextFromFunctionExpression();
    public virtual bool get_CanReduce();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual Expression Reduce();
    public sealed virtual void AddInstructions(LightCompiler compiler);
}
public class IronPython.Compiler.Ast.GlobalStatement : Statement {
    private String[] _names;
    public IList`1<string> Names { get; }
    internal bool CanThrow { get; }
    public GlobalStatement(String[] names);
    public IList`1<string> get_Names();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
public static class IronPython.Compiler.Ast.GlobalStorage000 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage001 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage002 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage003 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage004 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage005 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage006 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage007 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage008 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage009 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage010 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage011 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage012 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage013 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage014 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage015 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage016 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage017 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage018 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public static class IronPython.Compiler.Ast.GlobalStorage019 : object {
    public static PythonGlobal Global000;
    public static PythonGlobal Global001;
    public static PythonGlobal Global002;
    public static PythonGlobal Global003;
    public static PythonGlobal Global004;
    public static PythonGlobal Global005;
    public static PythonGlobal Global006;
    public static PythonGlobal Global007;
    public static PythonGlobal Global008;
    public static PythonGlobal Global009;
    public static PythonGlobal Global010;
    public static PythonGlobal Global011;
    public static PythonGlobal Global012;
    public static PythonGlobal Global013;
    public static PythonGlobal Global014;
    public static PythonGlobal Global015;
    public static PythonGlobal Global016;
    public static PythonGlobal Global017;
    public static PythonGlobal Global018;
    public static PythonGlobal Global019;
    public static PythonGlobal Global020;
    public static PythonGlobal Global021;
    public static PythonGlobal Global022;
    public static PythonGlobal Global023;
    public static PythonGlobal Global024;
    public static PythonGlobal Global025;
    public static PythonGlobal Global026;
    public static PythonGlobal Global027;
    public static PythonGlobal Global028;
    public static PythonGlobal Global029;
    public static PythonGlobal Global030;
    public static PythonGlobal Global031;
    public static PythonGlobal Global032;
    public static PythonGlobal Global033;
    public static PythonGlobal Global034;
    public static PythonGlobal Global035;
    public static PythonGlobal Global036;
    public static PythonGlobal Global037;
    public static PythonGlobal Global038;
    public static PythonGlobal Global039;
    public static PythonGlobal Global040;
    public static PythonGlobal Global041;
    public static PythonGlobal Global042;
    public static PythonGlobal Global043;
    public static PythonGlobal Global044;
    public static PythonGlobal Global045;
    public static PythonGlobal Global046;
    public static PythonGlobal Global047;
    public static PythonGlobal Global048;
    public static PythonGlobal Global049;
}
public class IronPython.Compiler.Ast.IfStatement : Statement {
    private IfStatementTest[] _tests;
    [CompilerGeneratedAttribute]
private Statement <ElseStatement>k__BackingField;
    public IList`1<IfStatementTest> Tests { get; }
    public Statement ElseStatement { get; }
    public IfStatement(IfStatementTest[] tests, Statement else_);
    public IList`1<IfStatementTest> get_Tests();
    [CompilerGeneratedAttribute]
public Statement get_ElseStatement();
    public virtual Expression Reduce();
    private sealed virtual override void Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(LightCompiler compiler);
    private Expression ReduceWorker(bool optimizeDynamicConvert);
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.IfStatementTest : Node {
    [CompilerGeneratedAttribute]
private int <HeaderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private Statement <Body>k__BackingField;
    public SourceLocation Header { get; }
    public int HeaderIndex { get; public set; }
    public Expression Test { get; }
    public Statement Body { get; public set; }
    public IfStatementTest(Expression test, Statement body);
    public SourceLocation get_Header();
    [CompilerGeneratedAttribute]
public void set_HeaderIndex(int value);
    [CompilerGeneratedAttribute]
public int get_HeaderIndex();
    [CompilerGeneratedAttribute]
public Expression get_Test();
    [CompilerGeneratedAttribute]
public Statement get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Statement value);
    public virtual void Walk(PythonWalker walker);
}
internal interface IronPython.Compiler.Ast.ILoopStatement {
    public LabelTarget BreakLabel { get; public set; }
    public LabelTarget ContinueLabel { get; public set; }
    public abstract virtual LabelTarget get_BreakLabel();
    public abstract virtual void set_BreakLabel(LabelTarget value);
    public abstract virtual LabelTarget get_ContinueLabel();
    public abstract virtual void set_ContinueLabel(LabelTarget value);
}
public class IronPython.Compiler.Ast.ImportStatement : Statement {
    private ModuleName[] _names;
    private String[] _asNames;
    [CompilerGeneratedAttribute]
private PythonVariable[] <Variables>k__BackingField;
    internal PythonVariable[] Variables { get; internal set; }
    public IList`1<DottedName> Names { get; }
    public IList`1<string> AsNames { get; }
    public ImportStatement(ModuleName[] names, String[] asNames);
    [CompilerGeneratedAttribute]
internal PythonVariable[] get_Variables();
    [CompilerGeneratedAttribute]
internal void set_Variables(PythonVariable[] value);
    public IList`1<DottedName> get_Names();
    public IList`1<string> get_AsNames();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.IndexExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Index>k__BackingField;
    public Expression Target { get; }
    public Expression Index { get; }
    private bool IsSlice { get; }
    public IndexExpression(Expression target, Expression index);
    [CompilerGeneratedAttribute]
public Expression get_Target();
    [CompilerGeneratedAttribute]
public Expression get_Index();
    public virtual Expression Reduce();
    private Expression[] GetActionArgumentsForGetOrDelete();
    private static Expression GetSliceValue(Expression expr);
    private Expression[] GetActionArgumentsForSet(Expression right);
    internal virtual Expression TransformSet(SourceSpan span, Expression right, PythonOperationKind op);
    internal virtual Expression TransformDelete();
    internal virtual string CheckAssign();
    internal virtual string CheckDelete();
    public virtual void Walk(PythonWalker walker);
    private bool get_IsSlice();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.Keyword : Node {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; }
    public Expression Expression { get; }
    public Keyword(string name, Expression expression);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    public virtual string ToString();
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.LambdaExpression : Expression {
    [CompilerGeneratedAttribute]
private FunctionDefinition <Function>k__BackingField;
    public FunctionDefinition Function { get; }
    public string NodeName { get; }
    public LambdaExpression(FunctionDefinition function);
    [CompilerGeneratedAttribute]
public FunctionDefinition get_Function();
    public virtual Expression Reduce();
    public virtual string get_NodeName();
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.ListComprehension : Comprehension {
    private ComprehensionIterator[] _iterators;
    [CompilerGeneratedAttribute]
private Expression <Item>k__BackingField;
    public Expression Item { get; }
    public IReadOnlyList`1<ComprehensionIterator> Iterators { get; }
    public string NodeName { get; }
    public ListComprehension(Expression item, ComprehensionIterator[] iterators);
    [CompilerGeneratedAttribute]
public Expression get_Item();
    public virtual IReadOnlyList`1<ComprehensionIterator> get_Iterators();
    protected virtual ParameterExpression MakeParameter();
    protected virtual MethodInfo Factory();
    public virtual Expression Reduce();
    protected virtual Expression Body(ParameterExpression res);
    public virtual string get_NodeName();
    public virtual void Walk(PythonWalker walker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.ListExpression : SequenceExpression {
    public ListExpression(Expression[] items);
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
}
internal class IronPython.Compiler.Ast.LookupCompilationMode : CompilationMode {
    public virtual ScriptCode MakeScriptCode(PythonAst ast);
    public virtual LightLambdaExpression ReduceAst(PythonAst instance, string name);
    public virtual Expression GetGlobal(Expression globalContext, int arrayIndex, PythonVariable variable, PythonGlobal global);
}
public class IronPython.Compiler.Ast.MemberExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Expression Target { get; }
    public string Name { get; }
    public MemberExpression(Expression target, string name);
    [CompilerGeneratedAttribute]
public Expression get_Target();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string ToString();
    public virtual Expression Reduce();
    internal virtual Expression TransformSet(SourceSpan span, Expression right, PythonOperationKind op);
    internal virtual string CheckAssign();
    internal virtual string CheckDelete();
    private Expression SetMemberOperator(Expression right, PythonOperationKind op, ParameterExpression temp);
    internal virtual Expression TransformDelete();
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.ModuleName : DottedName {
    public ModuleName(String[] names);
}
public class IronPython.Compiler.Ast.NameExpression : Expression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Assigned>k__BackingField;
    public string Name { get; }
    internal PythonReference Reference { get; internal set; }
    internal bool Assigned { get; internal set; }
    internal bool CanThrow { get; }
    public NameExpression(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal PythonReference get_Reference();
    [CompilerGeneratedAttribute]
internal void set_Reference(PythonReference value);
    [CompilerGeneratedAttribute]
internal bool get_Assigned();
    [CompilerGeneratedAttribute]
internal void set_Assigned(bool value);
    public virtual string ToString();
    public virtual Expression Reduce();
    internal virtual Expression TransformSet(SourceSpan span, Expression right, PythonOperationKind op);
    internal virtual string CheckAssign();
    internal virtual string CheckDelete();
    internal virtual Expression TransformDelete();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
public abstract class IronPython.Compiler.Ast.Node : Expression {
    internal static BlockExpression EmptyBlock;
    internal static Expression[] EmptyExpression;
    internal static ParameterExpression FunctionStackVariable;
    internal static LabelTarget GeneratorLabel;
    private static ParameterExpression _lineNumberUpdated;
    private static ParameterExpression _lineNoVar;
    [CompilerGeneratedAttribute]
private ScopeStatement <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexSpan <IndexSpan>k__BackingField;
    public ScopeStatement Parent { get; public set; }
    public IndexSpan IndexSpan { get; public set; }
    public SourceLocation Start { get; }
    public SourceLocation End { get; }
    public int EndIndex { get; public set; }
    public int StartIndex { get; public set; }
    public SourceSpan Span { get; }
    public string NodeName { get; }
    internal bool CanThrow { get; }
    public bool CanReduce { get; }
    public ExpressionType NodeType { get; }
    internal PythonAst GlobalParent { get; }
    internal bool EmitDebugSymbols { get; }
    internal bool StripDocStrings { get; }
    internal bool Optimize { get; }
    internal static ParameterExpression LineNumberUpdated { get; }
    internal static ParameterExpression LineNumberExpression { get; }
    private static Node();
    [CompilerGeneratedAttribute]
public ScopeStatement get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(ScopeStatement value);
    public void SetLoc(PythonAst globalParent, int start, int end);
    public void SetLoc(PythonAst globalParent, IndexSpan span);
    [CompilerGeneratedAttribute]
public IndexSpan get_IndexSpan();
    [CompilerGeneratedAttribute]
public void set_IndexSpan(IndexSpan value);
    public SourceLocation get_Start();
    public SourceLocation get_End();
    public int get_EndIndex();
    public void set_EndIndex(int value);
    public int get_StartIndex();
    public void set_StartIndex(int value);
    internal SourceLocation IndexToLocation(int index);
    public SourceSpan get_Span();
    public abstract virtual void Walk(PythonWalker walker);
    public virtual string get_NodeName();
    internal virtual bool get_CanThrow();
    public virtual bool get_CanReduce();
    public virtual ExpressionType get_NodeType();
    public virtual string ToString();
    internal PythonAst get_GlobalParent();
    internal bool get_EmitDebugSymbols();
    internal bool get_StripDocStrings();
    internal bool get_Optimize();
    internal virtual string GetDocumentation(Statement stmt);
    internal static Expression[] ToObjectArray(ReadOnlySpan`1<Expression> expressions);
    internal static Expression TransformOrConstantNull(Expression expression, Type type);
    internal Expression TransformAndDynamicConvert(Expression expression, Type type);
    internal static bool CanAssign(Type to, Type from);
    internal static Expression ConvertIfNeeded(Expression expression, Type type);
    internal static Expression TransformMaybeSingleLineSuite(Statement body, SourceLocation prevStart);
    internal static Expression RemoveDebugInfo(int prevStart, Expression res);
    internal static Expression AddFrame(Expression localContext, Expression codeObject, Expression body);
    internal static Expression RemoveFrame(Expression expression);
    internal static Expression MakeAssignment(ParameterExpression variable, Expression right);
    internal Expression MakeAssignment(ParameterExpression variable, Expression right, SourceSpan span);
    internal static Expression AssignValue(Expression expression, Expression value);
    internal static Expression Delete(Expression expression);
    internal static ParameterExpression get_LineNumberUpdated();
    internal static Expression UpdateLineNumber(int line);
    internal static Expression UpdateLineUpdated(bool updated);
    internal static Expression PushLineUpdated(bool updated, ParameterExpression saveCurrent);
    internal static Expression PopLineUpdated(ParameterExpression saveCurrent);
    internal static ParameterExpression get_LineNumberExpression();
}
public class IronPython.Compiler.Ast.NonlocalStatement : Statement {
    private String[] _names;
    public IList`1<string> Names { get; }
    internal bool CanThrow { get; }
    public NonlocalStatement(String[] names);
    public IList`1<string> get_Names();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.OrExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Right>k__BackingField;
    public Expression Left { get; }
    public Expression Right { get; }
    public Type Type { get; }
    internal bool CanThrow { get; }
    public OrExpression(Expression left, Expression right);
    [CompilerGeneratedAttribute]
public Expression get_Left();
    [CompilerGeneratedAttribute]
public Expression get_Right();
    public virtual Expression Reduce();
    public virtual Type get_Type();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
public class IronPython.Compiler.Ast.Parameter : Node {
    protected ParameterKind _kind;
    protected Expression _defaultValue;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Annotation>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonVariable <PythonVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterExpression <ParameterExpression>k__BackingField;
    public string Name { get; }
    public Expression Annotation { get; public set; }
    public Expression DefaultValue { get; public set; }
    public bool IsList { get; }
    public bool IsDictionary { get; }
    internal bool IsKeywordOnly { get; }
    internal ParameterKind Kind { get; }
    internal PythonVariable PythonVariable { get; internal set; }
    internal ParameterExpression ParameterExpression { get; private set; }
    public Parameter(string name);
    public Parameter(string name, ParameterKind kind);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Expression get_Annotation();
    [CompilerGeneratedAttribute]
public void set_Annotation(Expression value);
    public Expression get_DefaultValue();
    public void set_DefaultValue(Expression value);
    public bool get_IsList();
    public bool get_IsDictionary();
    internal bool get_IsKeywordOnly();
    internal ParameterKind get_Kind();
    [CompilerGeneratedAttribute]
internal PythonVariable get_PythonVariable();
    [CompilerGeneratedAttribute]
internal void set_PythonVariable(PythonVariable value);
    internal Expression FinishBind(bool needsLocalsDictionary);
    [CompilerGeneratedAttribute]
internal ParameterExpression get_ParameterExpression();
    [CompilerGeneratedAttribute]
private void set_ParameterExpression(ParameterExpression value);
    internal virtual void Init(List`1<Expression> init);
    public virtual void Walk(PythonWalker walker);
}
public enum IronPython.Compiler.Ast.ParameterKind : Enum {
    public int value__;
    public static ParameterKind Normal;
    public static ParameterKind List;
    public static ParameterKind Dictionary;
    public static ParameterKind KeywordOnly;
}
public class IronPython.Compiler.Ast.ParenthesisExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    public Type Type { get; }
    internal bool CanThrow { get; }
    public ParenthesisExpression(Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    public virtual Expression Reduce();
    internal virtual Expression TransformSet(SourceSpan span, Expression right, PythonOperationKind op);
    internal virtual string CheckAssign();
    internal virtual string CheckAugmentedAssign();
    internal virtual string CheckDelete();
    internal virtual Expression TransformDelete();
    public virtual Type get_Type();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
public class IronPython.Compiler.Ast.PythonAst : ScopeStatement {
    private Statement _body;
    private CompilationMode _mode;
    private bool _printExpressions;
    private ModuleOptions _languageFeatures;
    private CompilerContext _compilerContext;
    private SymbolDocumentInfo _document;
    private string _name;
    internal Int32[] _lineLocations;
    private ModuleContext _modContext;
    private bool _onDiskProxy;
    internal Expression _arrayExpression;
    private ConstantInfo _contextInfo;
    private Dictionary`2<PythonVariable, Expression> _globalVariables;
    internal Profiler _profiler;
    internal static string GlobalContextName;
    internal static ParameterExpression _functionCode;
    internal static ParameterExpression _globalArray;
    internal static ParameterExpression _globalContext;
    internal static ReadOnlyCollection`1<ParameterExpression> _arrayFuncParams;
    [CompilerGeneratedAttribute]
private PythonVariable <DocVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonVariable <NameVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonVariable <FileVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsModule>k__BackingField;
    public string Name { get; }
    internal Expression LocalContext { get; }
    internal bool IsGlobal { get; }
    internal PythonVariable DocVariable { get; internal set; }
    internal PythonVariable NameVariable { get; internal set; }
    internal PythonVariable FileVariable { get; internal set; }
    internal CompilerContext CompilerContext { get; }
    internal Expression GlobalArrayInstance { get; }
    internal SymbolDocumentInfo Document { get; }
    internal Dictionary`2<PythonVariable, Expression> ModuleVariables { get; }
    internal ModuleContext ModuleContext { get; }
    public Type Type { get; }
    internal bool GeneratorStop { get; }
    public Statement Body { get; }
    public bool IsModule { get; }
    internal bool PrintExpressions { get; }
    private string ModuleFileName { get; }
    private string ModuleName { get; }
    internal FunctionAttributes Flags { get; }
    internal SourceUnit SourceUnit { get; }
    internal CompilationMode CompilationMode { get; }
    internal string ProfilerName { get; }
    internal bool EmitDebugSymbols { get; }
    internal bool OnDiskProxy { get; }
    public PythonAst(Statement body, bool isModule, ModuleOptions languageFeatures, bool printExpressions);
    public PythonAst(Statement body, bool isModule, ModuleOptions languageFeatures, bool printExpressions, CompilerContext context, Int32[] lineLocations);
    public PythonAst(bool isModule, ModuleOptions languageFeatures, bool printExpressions, CompilerContext context);
    internal PythonAst(CompilerContext context);
    private static PythonAst();
    public void ParsingFinished(Int32[] lineLocations, Statement body, ModuleOptions languageFeatures);
    public void Bind();
    public virtual string get_Name();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool ExposesLocalVariable(PythonVariable variable);
    internal virtual void FinishBind(PythonNameBinder binder);
    internal virtual Expression get_LocalContext();
    internal virtual PythonVariable BindReference(PythonNameBinder binder, PythonReference reference);
    internal virtual bool TryBindOuter(ScopeStatement from, PythonReference reference, PythonVariable& variable);
    internal virtual bool get_IsGlobal();
    [CompilerGeneratedAttribute]
internal PythonVariable get_DocVariable();
    [CompilerGeneratedAttribute]
internal void set_DocVariable(PythonVariable value);
    [CompilerGeneratedAttribute]
internal PythonVariable get_NameVariable();
    [CompilerGeneratedAttribute]
internal void set_NameVariable(PythonVariable value);
    [CompilerGeneratedAttribute]
internal PythonVariable get_FileVariable();
    [CompilerGeneratedAttribute]
internal void set_FileVariable(PythonVariable value);
    internal CompilerContext get_CompilerContext();
    internal Expression get_GlobalArrayInstance();
    internal SymbolDocumentInfo get_Document();
    internal Dictionary`2<PythonVariable, Expression> get_ModuleVariables();
    internal ModuleContext get_ModuleContext();
    internal PythonVariable EnsureGlobalVariable(string name);
    internal virtual Expression GetVariableExpression(PythonVariable variable);
    public virtual Type get_Type();
    public virtual Expression Reduce();
    internal virtual LightLambdaExpression GetLambda();
    internal bool get_GeneratorStop();
    public Statement get_Body();
    [CompilerGeneratedAttribute]
public bool get_IsModule();
    internal ScriptCode ToScriptCode();
    internal Expression ReduceWorker();
    private void AddInitialiation(ReadOnlyCollectionBuilder`1<Expression> block);
    internal virtual bool get_PrintExpressions();
    private Expression AddModulePublishing(Expression body);
    private string get_ModuleFileName();
    private string get_ModuleName();
    internal virtual FunctionAttributes get_Flags();
    internal SourceUnit get_SourceUnit();
    internal String[] GetNames();
    private static CompilationMode GetCompilationMode(CompilerContext context);
    internal CompilationMode get_CompilationMode();
    private Expression GetGlobalContext();
    internal void PrepareScope(ReadOnlyCollectionBuilder`1<ParameterExpression> locals, List`1<Expression> init);
    internal Expression Constant(object value);
    internal Expression Convert(Type type, ConversionResultKind resultKind, Expression target);
    internal Expression Operation(Type resultType, PythonOperationKind operation, Expression arg0);
    internal Expression Operation(Type resultType, PythonOperationKind operation, Expression arg0, Expression arg1);
    internal Expression Set(string name, Expression target, Expression value);
    internal Expression Get(string name, Expression target);
    internal Expression Delete(Type resultType, string name, Expression target);
    internal Expression GetIndex(Expression[] expressions);
    internal Expression GetSlice(Expression[] expressions);
    internal Expression SetIndex(Expression[] expressions);
    internal Expression SetSlice(Expression[] expressions);
    internal Expression DeleteIndex(Expression[] expressions);
    internal Expression DeleteSlice(Expression[] expressions);
    internal PythonAst MakeLookupCode();
    internal virtual string get_ProfilerName();
    internal bool get_EmitDebugSymbols();
    internal bool get_OnDiskProxy();
}
internal class IronPython.Compiler.Ast.PythonConstantExpression : Expression {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private CompilationMode <Mode>k__BackingField;
    public bool CanReduce { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public object Value { get; }
    public CompilationMode Mode { get; }
    public PythonConstantExpression(CompilationMode mode, object value);
    public virtual bool get_CanReduce();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual Expression Reduce();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public CompilationMode get_Mode();
    public sealed virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.Ast.PythonNameBinder : PythonWalker {
    private PythonAst _globalScope;
    internal ScopeStatement _currentScope;
    private List`1<ScopeStatement> _scopes;
    private List`1<ILoopStatement> _loops;
    private List`1<int> _finallyCount;
    private DefineBinder _define;
    private DeleteBinder _delete;
    [CompilerGeneratedAttribute]
private CompilerContext <Context>k__BackingField;
    public CompilerContext Context { get; }
    private PythonNameBinder(CompilerContext context);
    [CompilerGeneratedAttribute]
public CompilerContext get_Context();
    internal static void BindAst(PythonAst ast, CompilerContext context);
    private void Bind(PythonAst unboundAst);
    private void PushScope(ScopeStatement node);
    private void PopScope();
    internal PythonReference Reference(string name);
    internal PythonVariable DefineName(string name);
    internal PythonVariable DefineParameter(string name);
    internal PythonVariable DefineDeleted(string name);
    internal void ReportSyntaxWarning(string message, Node node);
    internal void ReportSyntaxError(string message, Node node);
    public virtual bool Walk(AssignmentStatement node);
    public virtual bool Walk(AugmentedAssignStatement node);
    public virtual void PostWalk(CallExpression node);
    public virtual bool Walk(ClassDefinition node);
    public virtual void PostWalk(ClassDefinition node);
    public virtual bool Walk(DelStatement node);
    private void WalkComprehensionIterators(Comprehension node);
    public virtual bool Walk(ListComprehension node);
    public virtual void PostWalk(ListComprehension node);
    public virtual bool Walk(SetComprehension node);
    public virtual void PostWalk(SetComprehension node);
    public virtual bool Walk(DictionaryComprehension node);
    public virtual void PostWalk(DictionaryComprehension node);
    public virtual void PostWalk(ConditionalExpression node);
    public virtual bool Walk(AndExpression node);
    public virtual bool Walk(AssertStatement node);
    public virtual bool Walk(AsyncStatement node);
    public virtual bool Walk(BinaryExpression node);
    public virtual bool Walk(ComprehensionIf node);
    public virtual bool Walk(ConditionalExpression node);
    public virtual bool Walk(ConstantExpression node);
    public virtual bool Walk(DictionaryExpression node);
    public virtual bool Walk(DottedName node);
    public virtual bool Walk(EmptyStatement node);
    public virtual bool Walk(ErrorExpression node);
    public virtual bool Walk(ExpressionStatement node);
    public virtual bool Walk(GeneratorExpression node);
    public virtual bool Walk(IfStatement node);
    public virtual bool Walk(IfStatementTest node);
    public virtual bool Walk(IndexExpression node);
    public virtual bool Walk(Keyword node);
    public virtual bool Walk(LambdaExpression node);
    public virtual bool Walk(ListExpression node);
    public virtual bool Walk(MemberExpression node);
    public virtual bool Walk(ModuleName node);
    public virtual bool Walk(OrExpression node);
    public virtual bool Walk(Parameter node);
    public virtual bool Walk(ParenthesisExpression node);
    public virtual bool Walk(RelativeModuleName node);
    public virtual bool Walk(SetExpression node);
    public virtual bool Walk(SliceExpression node);
    public virtual bool Walk(StarredExpression node);
    public virtual bool Walk(SuiteStatement node);
    public virtual bool Walk(TryStatementHandler node);
    public virtual bool Walk(TupleExpression node);
    public virtual bool Walk(UnaryExpression node);
    public virtual bool Walk(YieldExpression node);
    public virtual bool Walk(YieldFromExpression node);
    public virtual bool Walk(RaiseStatement node);
    public virtual bool Walk(ForStatement node);
    private void PushLoop(ILoopStatement node);
    private void PopLoop();
    public virtual bool Walk(WhileStatement node);
    public virtual bool Walk(BreakStatement node);
    public virtual bool Walk(ContinueStatement node);
    public virtual bool Walk(ReturnStatement node);
    public virtual bool Walk(WithStatement node);
    public virtual bool Walk(FromImportStatement node);
    public virtual bool Walk(FunctionDefinition node);
    public virtual void PostWalk(FunctionDefinition node);
    public virtual bool Walk(GlobalStatement node);
    public virtual bool Walk(NameExpression node);
    public virtual bool Walk(NonlocalStatement node);
    public virtual bool Walk(PythonAst node);
    public virtual void PostWalk(PythonAst node);
    public virtual bool Walk(ImportStatement node);
    public virtual bool Walk(TryStatement node);
    public virtual bool Walk(ComprehensionFor node);
    public virtual bool Walk(CallExpression node);
}
internal class IronPython.Compiler.Ast.PythonReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonVariable <PythonVariable>k__BackingField;
    public string Name { get; }
    internal PythonVariable PythonVariable { get; internal set; }
    public PythonReference(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal PythonVariable get_PythonVariable();
    [CompilerGeneratedAttribute]
internal void set_PythonVariable(PythonVariable value);
}
internal class IronPython.Compiler.Ast.PythonReferenceVariable : PythonVariable {
    [CompilerGeneratedAttribute]
private PythonReference <Reference>k__BackingField;
    internal PythonReference Reference { get; }
    public PythonVariable LimitVariable { get; }
    internal PythonReferenceVariable(PythonReference reference, ScopeStatement scope);
    [CompilerGeneratedAttribute]
internal PythonReference get_Reference();
    public virtual PythonVariable get_LimitVariable();
}
[DebuggerDisplayAttribute("{Kind} {Name} from {Scope.Name}")]
public class IronPython.Compiler.Ast.PythonVariable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeStatement <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private VariableKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaybeDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadBeforeInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AccessedInNestedScope>k__BackingField;
    public string Name { get; }
    public ScopeStatement Scope { get; }
    public VariableKind Kind { get; private set; }
    public PythonVariable LimitVariable { get; }
    internal bool MaybeDeleted { get; private set; }
    internal int Index { get; internal set; }
    public bool ReadBeforeInitialized { get; public set; }
    public bool AccessedInNestedScope { get; public set; }
    public PythonVariable(string name, VariableKind kind, ScopeStatement scope);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ScopeStatement get_Scope();
    [CompilerGeneratedAttribute]
public VariableKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(VariableKind value);
    internal void LiftToGlobal();
    public virtual PythonVariable get_LimitVariable();
    [CompilerGeneratedAttribute]
internal bool get_MaybeDeleted();
    [CompilerGeneratedAttribute]
private void set_MaybeDeleted(bool value);
    internal void RegisterDeletion();
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [CompilerGeneratedAttribute]
public bool get_ReadBeforeInitialized();
    [CompilerGeneratedAttribute]
public void set_ReadBeforeInitialized(bool value);
    [CompilerGeneratedAttribute]
public bool get_AccessedInNestedScope();
    [CompilerGeneratedAttribute]
public void set_AccessedInNestedScope(bool value);
}
public class IronPython.Compiler.Ast.PythonWalker : object {
    public virtual bool Walk(AndExpression node);
    public virtual void PostWalk(AndExpression node);
    public virtual bool Walk(BinaryExpression node);
    public virtual void PostWalk(BinaryExpression node);
    public virtual bool Walk(CallExpression node);
    public virtual void PostWalk(CallExpression node);
    public virtual bool Walk(ConditionalExpression node);
    public virtual void PostWalk(ConditionalExpression node);
    public virtual bool Walk(ConstantExpression node);
    public virtual void PostWalk(ConstantExpression node);
    public virtual bool Walk(DictionaryComprehension node);
    public virtual void PostWalk(DictionaryComprehension node);
    public virtual bool Walk(DictionaryExpression node);
    public virtual void PostWalk(DictionaryExpression node);
    public virtual bool Walk(ErrorExpression node);
    public virtual void PostWalk(ErrorExpression node);
    public virtual bool Walk(GeneratorExpression node);
    public virtual void PostWalk(GeneratorExpression node);
    public virtual bool Walk(IndexExpression node);
    public virtual void PostWalk(IndexExpression node);
    public virtual bool Walk(LambdaExpression node);
    public virtual void PostWalk(LambdaExpression node);
    public virtual bool Walk(ListComprehension node);
    public virtual void PostWalk(ListComprehension node);
    public virtual bool Walk(ListExpression node);
    public virtual void PostWalk(ListExpression node);
    public virtual bool Walk(MemberExpression node);
    public virtual void PostWalk(MemberExpression node);
    public virtual bool Walk(NameExpression node);
    public virtual void PostWalk(NameExpression node);
    public virtual bool Walk(OrExpression node);
    public virtual void PostWalk(OrExpression node);
    public virtual bool Walk(ParenthesisExpression node);
    public virtual void PostWalk(ParenthesisExpression node);
    public virtual bool Walk(SetComprehension node);
    public virtual void PostWalk(SetComprehension node);
    public virtual bool Walk(SetExpression node);
    public virtual void PostWalk(SetExpression node);
    public virtual bool Walk(SliceExpression node);
    public virtual void PostWalk(SliceExpression node);
    public virtual bool Walk(StarredExpression node);
    public virtual void PostWalk(StarredExpression node);
    public virtual bool Walk(TupleExpression node);
    public virtual void PostWalk(TupleExpression node);
    public virtual bool Walk(UnaryExpression node);
    public virtual void PostWalk(UnaryExpression node);
    public virtual bool Walk(YieldExpression node);
    public virtual void PostWalk(YieldExpression node);
    public virtual bool Walk(YieldFromExpression node);
    public virtual void PostWalk(YieldFromExpression node);
    public virtual bool Walk(AssertStatement node);
    public virtual void PostWalk(AssertStatement node);
    public virtual bool Walk(AssignmentStatement node);
    public virtual void PostWalk(AssignmentStatement node);
    public virtual bool Walk(AsyncStatement node);
    public virtual void PostWalk(AsyncStatement node);
    public virtual bool Walk(AugmentedAssignStatement node);
    public virtual void PostWalk(AugmentedAssignStatement node);
    public virtual bool Walk(BreakStatement node);
    public virtual void PostWalk(BreakStatement node);
    public virtual bool Walk(ClassDefinition node);
    public virtual void PostWalk(ClassDefinition node);
    public virtual bool Walk(ContinueStatement node);
    public virtual void PostWalk(ContinueStatement node);
    public virtual bool Walk(DelStatement node);
    public virtual void PostWalk(DelStatement node);
    public virtual bool Walk(EmptyStatement node);
    public virtual void PostWalk(EmptyStatement node);
    public virtual bool Walk(ExpressionStatement node);
    public virtual void PostWalk(ExpressionStatement node);
    public virtual bool Walk(ForStatement node);
    public virtual void PostWalk(ForStatement node);
    public virtual bool Walk(FromImportStatement node);
    public virtual void PostWalk(FromImportStatement node);
    public virtual bool Walk(FunctionDefinition node);
    public virtual void PostWalk(FunctionDefinition node);
    public virtual bool Walk(GlobalStatement node);
    public virtual void PostWalk(GlobalStatement node);
    public virtual bool Walk(IfStatement node);
    public virtual void PostWalk(IfStatement node);
    public virtual bool Walk(ImportStatement node);
    public virtual void PostWalk(ImportStatement node);
    public virtual bool Walk(NonlocalStatement node);
    public virtual void PostWalk(NonlocalStatement node);
    public virtual bool Walk(PythonAst node);
    public virtual void PostWalk(PythonAst node);
    public virtual bool Walk(RaiseStatement node);
    public virtual void PostWalk(RaiseStatement node);
    public virtual bool Walk(ReturnStatement node);
    public virtual void PostWalk(ReturnStatement node);
    public virtual bool Walk(SuiteStatement node);
    public virtual void PostWalk(SuiteStatement node);
    public virtual bool Walk(TryStatement node);
    public virtual void PostWalk(TryStatement node);
    public virtual bool Walk(WhileStatement node);
    public virtual void PostWalk(WhileStatement node);
    public virtual bool Walk(WithStatement node);
    public virtual void PostWalk(WithStatement node);
    public virtual bool Walk(ComprehensionFor node);
    public virtual void PostWalk(ComprehensionFor node);
    public virtual bool Walk(ComprehensionIf node);
    public virtual void PostWalk(ComprehensionIf node);
    public virtual bool Walk(DottedName node);
    public virtual void PostWalk(DottedName node);
    public virtual bool Walk(IfStatementTest node);
    public virtual void PostWalk(IfStatementTest node);
    public virtual bool Walk(Keyword node);
    public virtual void PostWalk(Keyword node);
    public virtual bool Walk(ModuleName node);
    public virtual void PostWalk(ModuleName node);
    public virtual bool Walk(Parameter node);
    public virtual void PostWalk(Parameter node);
    public virtual bool Walk(RelativeModuleName node);
    public virtual void PostWalk(RelativeModuleName node);
    public virtual bool Walk(TryStatementHandler node);
    public virtual void PostWalk(TryStatementHandler node);
}
public class IronPython.Compiler.Ast.PythonWalkerNonRecursive : PythonWalker {
    public virtual bool Walk(AndExpression node);
    public virtual void PostWalk(AndExpression node);
    public virtual bool Walk(BinaryExpression node);
    public virtual void PostWalk(BinaryExpression node);
    public virtual bool Walk(CallExpression node);
    public virtual void PostWalk(CallExpression node);
    public virtual bool Walk(ConditionalExpression node);
    public virtual void PostWalk(ConditionalExpression node);
    public virtual bool Walk(ConstantExpression node);
    public virtual void PostWalk(ConstantExpression node);
    public virtual bool Walk(DictionaryComprehension node);
    public virtual void PostWalk(DictionaryComprehension node);
    public virtual bool Walk(DictionaryExpression node);
    public virtual void PostWalk(DictionaryExpression node);
    public virtual bool Walk(ErrorExpression node);
    public virtual void PostWalk(ErrorExpression node);
    public virtual bool Walk(GeneratorExpression node);
    public virtual void PostWalk(GeneratorExpression node);
    public virtual bool Walk(IndexExpression node);
    public virtual void PostWalk(IndexExpression node);
    public virtual bool Walk(LambdaExpression node);
    public virtual void PostWalk(LambdaExpression node);
    public virtual bool Walk(ListComprehension node);
    public virtual void PostWalk(ListComprehension node);
    public virtual bool Walk(ListExpression node);
    public virtual void PostWalk(ListExpression node);
    public virtual bool Walk(MemberExpression node);
    public virtual void PostWalk(MemberExpression node);
    public virtual bool Walk(NameExpression node);
    public virtual void PostWalk(NameExpression node);
    public virtual bool Walk(OrExpression node);
    public virtual void PostWalk(OrExpression node);
    public virtual bool Walk(ParenthesisExpression node);
    public virtual void PostWalk(ParenthesisExpression node);
    public virtual bool Walk(SetComprehension node);
    public virtual void PostWalk(SetComprehension node);
    public virtual bool Walk(SetExpression node);
    public virtual void PostWalk(SetExpression node);
    public virtual bool Walk(SliceExpression node);
    public virtual void PostWalk(SliceExpression node);
    public virtual bool Walk(StarredExpression node);
    public virtual void PostWalk(StarredExpression node);
    public virtual bool Walk(TupleExpression node);
    public virtual void PostWalk(TupleExpression node);
    public virtual bool Walk(UnaryExpression node);
    public virtual void PostWalk(UnaryExpression node);
    public virtual bool Walk(YieldExpression node);
    public virtual void PostWalk(YieldExpression node);
    public virtual bool Walk(YieldFromExpression node);
    public virtual void PostWalk(YieldFromExpression node);
    public virtual bool Walk(AssertStatement node);
    public virtual void PostWalk(AssertStatement node);
    public virtual bool Walk(AssignmentStatement node);
    public virtual void PostWalk(AssignmentStatement node);
    public virtual bool Walk(AsyncStatement node);
    public virtual void PostWalk(AsyncStatement node);
    public virtual bool Walk(AugmentedAssignStatement node);
    public virtual void PostWalk(AugmentedAssignStatement node);
    public virtual bool Walk(BreakStatement node);
    public virtual void PostWalk(BreakStatement node);
    public virtual bool Walk(ClassDefinition node);
    public virtual void PostWalk(ClassDefinition node);
    public virtual bool Walk(ContinueStatement node);
    public virtual void PostWalk(ContinueStatement node);
    public virtual bool Walk(DelStatement node);
    public virtual void PostWalk(DelStatement node);
    public virtual bool Walk(EmptyStatement node);
    public virtual void PostWalk(EmptyStatement node);
    public virtual bool Walk(ExpressionStatement node);
    public virtual void PostWalk(ExpressionStatement node);
    public virtual bool Walk(ForStatement node);
    public virtual void PostWalk(ForStatement node);
    public virtual bool Walk(FromImportStatement node);
    public virtual void PostWalk(FromImportStatement node);
    public virtual bool Walk(FunctionDefinition node);
    public virtual void PostWalk(FunctionDefinition node);
    public virtual bool Walk(GlobalStatement node);
    public virtual void PostWalk(GlobalStatement node);
    public virtual bool Walk(IfStatement node);
    public virtual void PostWalk(IfStatement node);
    public virtual bool Walk(ImportStatement node);
    public virtual void PostWalk(ImportStatement node);
    public virtual bool Walk(NonlocalStatement node);
    public virtual void PostWalk(NonlocalStatement node);
    public virtual bool Walk(PythonAst node);
    public virtual void PostWalk(PythonAst node);
    public virtual bool Walk(RaiseStatement node);
    public virtual void PostWalk(RaiseStatement node);
    public virtual bool Walk(ReturnStatement node);
    public virtual void PostWalk(ReturnStatement node);
    public virtual bool Walk(SuiteStatement node);
    public virtual void PostWalk(SuiteStatement node);
    public virtual bool Walk(TryStatement node);
    public virtual void PostWalk(TryStatement node);
    public virtual bool Walk(WhileStatement node);
    public virtual void PostWalk(WhileStatement node);
    public virtual bool Walk(WithStatement node);
    public virtual void PostWalk(WithStatement node);
    public virtual bool Walk(ComprehensionFor node);
    public virtual void PostWalk(ComprehensionFor node);
    public virtual bool Walk(ComprehensionIf node);
    public virtual void PostWalk(ComprehensionIf node);
    public virtual bool Walk(DottedName node);
    public virtual void PostWalk(DottedName node);
    public virtual bool Walk(IfStatementTest node);
    public virtual void PostWalk(IfStatementTest node);
    public virtual bool Walk(Keyword node);
    public virtual void PostWalk(Keyword node);
    public virtual bool Walk(ModuleName node);
    public virtual void PostWalk(ModuleName node);
    public virtual bool Walk(Parameter node);
    public virtual void PostWalk(Parameter node);
    public virtual bool Walk(RelativeModuleName node);
    public virtual void PostWalk(RelativeModuleName node);
    public virtual bool Walk(TryStatementHandler node);
    public virtual void PostWalk(TryStatementHandler node);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.RaiseStatement : Statement {
    [CompilerGeneratedAttribute]
private Expression <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Cause>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InFinally>k__BackingField;
    public Expression Exception { get; }
    public Expression Cause { get; }
    internal bool InFinally { get; internal set; }
    public RaiseStatement(Expression exception, Expression cause);
    [CompilerGeneratedAttribute]
public Expression get_Exception();
    [CompilerGeneratedAttribute]
public Expression get_Cause();
    [NullableContextAttribute("1")]
public virtual Expression Reduce();
    [CompilerGeneratedAttribute]
internal bool get_InFinally();
    [CompilerGeneratedAttribute]
internal void set_InFinally(bool value);
    [NullableContextAttribute("1")]
public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.RelativeModuleName : ModuleName {
    [CompilerGeneratedAttribute]
private int <DotCount>k__BackingField;
    public int DotCount { get; }
    public RelativeModuleName(String[] names, int dotCount);
    [CompilerGeneratedAttribute]
public int get_DotCount();
}
public class IronPython.Compiler.Ast.ReturnStatement : Statement {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    internal bool CanThrow { get; }
    public ReturnStatement(Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
internal class IronPython.Compiler.Ast.RewrittenBodyStatement : Statement {
    private Expression _body;
    private string _doc;
    private Statement _originalBody;
    public string Documentation { get; }
    public RewrittenBodyStatement(Statement originalBody, Expression body);
    public virtual Expression Reduce();
    public virtual string get_Documentation();
    public virtual void Walk(PythonWalker walker);
}
public abstract class IronPython.Compiler.Ast.ScopeStatement : Statement {
    private bool _forceCompile;
    private FunctionCode _funcCode;
    private ClosureInfo[] _closureVariables;
    private List`1<PythonVariable> _freeVars;
    private List`1<string> _globalVars;
    private List`1<string> _cellVars;
    private Dictionary`2<string, PythonReference> _references;
    private Dictionary`2<string, NonlocalStatement> _nonlocalVars;
    internal Dictionary`2<PythonVariable, Expression> _variableMapping;
    private DelayedFunctionCode _funcCodeExpr;
    internal static ParameterExpression LocalCodeContextVariable;
    private static ParameterExpression _catchException;
    internal static string NameForExec;
    [CompilerGeneratedAttribute]
private bool <ContainsImportStar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsExceptionHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterExpression <LocalParentTuple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsNestedFreeVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsLocalsDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasLateBoundVariableSets>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PythonVariable> <Variables>k__BackingField;
    internal bool ContainsImportStar { get; internal set; }
    internal bool ContainsExceptionHandling { get; internal set; }
    internal bool IsGeneratorMethod { get; }
    internal ParameterExpression LocalParentTuple { get; private set; }
    internal Expression LocalContext { get; }
    internal bool IsClosure { get; }
    internal bool ContainsNestedFreeVariables { get; internal set; }
    internal bool NeedsLocalsDictionary { get; internal set; }
    public string Name { get; }
    internal string Filename { get; }
    internal bool HasLateBoundVariableSets { get; internal set; }
    internal Dictionary`2<string, PythonVariable> Variables { get; private set; }
    internal bool IsGlobal { get; }
    internal bool NeedsLocalContext { get; }
    internal String[] ParameterNames { get; }
    internal int ArgCount { get; }
    internal int KwOnlyArgCount { get; }
    internal FunctionAttributes Flags { get; }
    internal string ScopeDocumentation { get; }
    internal Delegate OriginalDelegate { get; }
    internal bool ShouldInterpret { get; internal set; }
    internal IList`1<PythonVariable> FreeVariables { get; }
    internal IList`1<string> GlobalVariables { get; }
    internal IList`1<string> CellVariables { get; }
    internal int TupleCells { get; }
    internal PythonContext PyContext { get; }
    private SymbolDocumentInfo Document { get; }
    internal Expression FuncCodeExpr { get; internal set; }
    internal bool PrintExpressions { get; }
    internal string ProfilerName { get; }
    private static ScopeStatement();
    [CompilerGeneratedAttribute]
internal bool get_ContainsImportStar();
    [CompilerGeneratedAttribute]
internal void set_ContainsImportStar(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ContainsExceptionHandling();
    [CompilerGeneratedAttribute]
internal void set_ContainsExceptionHandling(bool value);
    internal virtual bool get_IsGeneratorMethod();
    [CompilerGeneratedAttribute]
internal ParameterExpression get_LocalParentTuple();
    [CompilerGeneratedAttribute]
private void set_LocalParentTuple(ParameterExpression value);
    internal virtual Expression get_LocalContext();
    internal bool get_IsClosure();
    [CompilerGeneratedAttribute]
internal bool get_ContainsNestedFreeVariables();
    [CompilerGeneratedAttribute]
internal void set_ContainsNestedFreeVariables(bool value);
    [CompilerGeneratedAttribute]
internal bool get_NeedsLocalsDictionary();
    [CompilerGeneratedAttribute]
internal void set_NeedsLocalsDictionary(bool value);
    public virtual string get_Name();
    internal virtual string get_Filename();
    [CompilerGeneratedAttribute]
internal virtual bool get_HasLateBoundVariableSets();
    [CompilerGeneratedAttribute]
internal virtual void set_HasLateBoundVariableSets(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, PythonVariable> get_Variables();
    [CompilerGeneratedAttribute]
private void set_Variables(Dictionary`2<string, PythonVariable> value);
    internal virtual bool get_IsGlobal();
    internal bool get_NeedsLocalContext();
    internal virtual String[] get_ParameterNames();
    internal virtual int get_ArgCount();
    internal virtual int get_KwOnlyArgCount();
    internal virtual FunctionAttributes get_Flags();
    internal abstract virtual LightLambdaExpression GetLambda();
    internal FunctionCode GetOrMakeFunctionCode();
    internal virtual string get_ScopeDocumentation();
    internal virtual Delegate get_OriginalDelegate();
    internal virtual IList`1<string> GetVarNames();
    internal virtual void AddFreeVariable(PythonVariable variable, bool accessedInScope);
    internal bool get_ShouldInterpret();
    internal void set_ShouldInterpret(bool value);
    internal string AddReferencedGlobal(string name);
    internal void AddCellVariable(PythonVariable variable);
    internal List`1<string> AppendVariables(List`1<string> res);
    internal IList`1<PythonVariable> get_FreeVariables();
    internal IList`1<string> get_GlobalVariables();
    internal IList`1<string> get_CellVariables();
    internal Type GetClosureTupleType();
    internal virtual int get_TupleCells();
    internal abstract virtual bool ExposesLocalVariable(PythonVariable variable);
    internal virtual Expression GetParentClosureTuple();
    private bool TryGetAnyVariable(string name, PythonVariable& variable);
    internal bool TryGetVariable(string name, PythonVariable& variable);
    internal virtual bool TryBindOuter(ScopeStatement from, PythonReference reference, PythonVariable& variable);
    internal abstract virtual PythonVariable BindReference(PythonNameBinder binder, PythonReference reference);
    internal virtual void Bind(PythonNameBinder binder);
    internal virtual void FinishBind(PythonNameBinder binder);
    private static bool HasClosureVariable(List`1<ClosureInfo> closureVariables, PythonVariable variable);
    private void EnsureVariables();
    internal void AddGlobalVariable(PythonVariable variable);
    internal PythonReference Reference(string name);
    internal bool IsReferenced(string name);
    internal bool IsFreeVariable(PythonVariable variable);
    private bool TryGetNonlocalStatement(string name, NonlocalStatement& node);
    internal PythonVariable CreateVariable(string name, VariableKind kind);
    internal PythonVariable EnsureVariable(string name);
    private PythonVariable CreateNonlocalVariable(string name);
    internal void EnsureNonlocalVariable(string name, NonlocalStatement node);
    internal PythonVariable DefineParameter(string name);
    internal PythonContext get_PyContext();
    private SymbolDocumentInfo get_Document();
    internal Expression AddDebugInfo(Expression expression, SourceLocation start, SourceLocation end);
    internal Expression AddDebugInfo(Expression expression, SourceSpan location);
    internal Expression AddDebugInfoAndVoid(Expression expression, SourceSpan location);
    internal Expression GetUpdateTrackbackExpression(ParameterExpression exception);
    private Expression UpdateStackTrace(ParameterExpression exception);
    internal Expression GetSaveLineNumberExpression(ParameterExpression exception, bool preventAdditionalAdds);
    internal Expression WrapScopeStatements(Expression body, bool canThrow);
    internal Expression get_FuncCodeExpr();
    internal void set_FuncCodeExpr(Expression value);
    internal MethodCallExpression CreateLocalContext(Expression parentContext);
    private Expression GetClosureCell(ClosureInfo variable);
    internal virtual Expression GetVariableExpression(PythonVariable variable);
    internal virtual Expression LookupVariableExpression(PythonVariable variable);
    internal void CreateVariables(ReadOnlyCollectionBuilder`1<ParameterExpression> locals, List`1<Expression> init);
    internal Expression AddDecorators(Expression ret, IList`1<Expression> decorators);
    internal Expression Invoke(CallSignature signature, Expression[] args);
    internal ScopeStatement CopyForRewrite();
    internal virtual void RewriteBody(ExpressionVisitor visitor);
    internal virtual bool get_PrintExpressions();
    internal virtual string get_ProfilerName();
    internal Expression AddProfiling(Expression body);
    [CompilerGeneratedAttribute]
private Expression <CreateLocalContext>b__121_0(ClosureInfo x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class IronPython.Compiler.Ast.SequenceExpression : Expression {
    protected Expression[] _items;
    public IReadOnlyList`1<Expression> Items { get; }
    internal Expression[] UnsafeItems { get; }
    protected bool HasStarredExpression { get; }
    internal bool CanThrow { get; }
    protected SequenceExpression(Expression[] items);
    public IReadOnlyList`1<Expression> get_Items();
    internal Expression[] get_UnsafeItems();
    protected bool get_HasStarredExpression();
    internal virtual Expression TransformSet(SourceSpan span, Expression right, PythonOperationKind op);
    [NullableContextAttribute("2")]
internal virtual string CheckAssign();
    [NullableContextAttribute("2")]
internal virtual string CheckDelete();
    internal virtual string CheckAugmentedAssign();
    private static bool IsComplexAssignment(Expression expr);
    internal virtual Expression TransformDelete();
    internal virtual bool get_CanThrow();
}
internal class IronPython.Compiler.Ast.SerializedScopeStatement : ScopeStatement {
    private string _name;
    private string _filename;
    private FunctionAttributes _flags;
    private String[] _parameterNames;
    private int _argCount;
    private int _kwOnlyArgCount;
    public string Name { get; }
    internal string Filename { get; }
    internal FunctionAttributes Flags { get; }
    internal bool IsGlobal { get; }
    internal String[] ParameterNames { get; }
    internal int ArgCount { get; }
    internal int KwOnlyArgCount { get; }
    internal SerializedScopeStatement(string name, String[] parameterNames, int argCount, FunctionAttributes flags, int startIndex, int endIndex, string path, String[] freeVars, String[] names, String[] cellVars, String[] varNames);
    internal virtual LightLambdaExpression GetLambda();
    internal virtual bool ExposesLocalVariable(PythonVariable variable);
    internal virtual PythonVariable BindReference(PythonNameBinder binder, PythonReference reference);
    public virtual void Walk(PythonWalker walker);
    public virtual string get_Name();
    internal virtual string get_Filename();
    internal virtual FunctionAttributes get_Flags();
    internal virtual bool get_IsGlobal();
    internal virtual String[] get_ParameterNames();
    internal virtual int get_ArgCount();
    internal virtual int get_KwOnlyArgCount();
}
public class IronPython.Compiler.Ast.SetComprehension : Comprehension {
    private ComprehensionIterator[] _iterators;
    [CompilerGeneratedAttribute]
private Expression <Item>k__BackingField;
    public Expression Item { get; }
    public IReadOnlyList`1<ComprehensionIterator> Iterators { get; }
    public string NodeName { get; }
    public SetComprehension(Expression item, ComprehensionIterator[] iterators);
    [CompilerGeneratedAttribute]
public Expression get_Item();
    public virtual IReadOnlyList`1<ComprehensionIterator> get_Iterators();
    protected virtual ParameterExpression MakeParameter();
    protected virtual MethodInfo Factory();
    public virtual Expression Reduce();
    protected virtual Expression Body(ParameterExpression res);
    public virtual string get_NodeName();
    public virtual void Walk(PythonWalker walker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.SetExpression : Expression {
    private Expression[] _items;
    public IReadOnlyList`1<Expression> Items { get; }
    protected bool HasStarredExpression { get; }
    public SetExpression(Expression[] items);
    public IReadOnlyList`1<Expression> get_Items();
    protected bool get_HasStarredExpression();
    public virtual Expression Reduce();
    internal virtual string CheckAssign();
    public virtual void Walk(PythonWalker walker);
}
public static class IronPython.Compiler.Ast.SiteStorage`1 : object {
    public static int SiteCount;
    public static CallSite`1[] Sites;
    private static SiteStorage`1();
    public static Type SiteStorageType(int index);
}
public static class IronPython.Compiler.Ast.SiteStorage000`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage001`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage002`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage003`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage004`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage005`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage006`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage007`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage008`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage009`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage010`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage011`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage012`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage013`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage014`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage015`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage016`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage017`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage018`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage019`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage020`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage021`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage022`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage023`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage024`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage025`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage026`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage027`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage028`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
public static class IronPython.Compiler.Ast.SiteStorage029`1 : object {
    public static CallSite`1<T> Site000;
    public static CallSite`1<T> Site001;
    public static CallSite`1<T> Site002;
    public static CallSite`1<T> Site003;
    public static CallSite`1<T> Site004;
    public static CallSite`1<T> Site005;
    public static CallSite`1<T> Site006;
    public static CallSite`1<T> Site007;
    public static CallSite`1<T> Site008;
    public static CallSite`1<T> Site009;
    public static CallSite`1<T> Site010;
    public static CallSite`1<T> Site011;
    public static CallSite`1<T> Site012;
    public static CallSite`1<T> Site013;
    public static CallSite`1<T> Site014;
    public static CallSite`1<T> Site015;
    public static CallSite`1<T> Site016;
    public static CallSite`1<T> Site017;
    public static CallSite`1<T> Site018;
    public static CallSite`1<T> Site019;
    public static CallSite`1<T> Site020;
    public static CallSite`1<T> Site021;
    public static CallSite`1<T> Site022;
    public static CallSite`1<T> Site023;
    public static CallSite`1<T> Site024;
    public static CallSite`1<T> Site025;
    public static CallSite`1<T> Site026;
    public static CallSite`1<T> Site027;
    public static CallSite`1<T> Site028;
    public static CallSite`1<T> Site029;
    public static CallSite`1<T> Site030;
    public static CallSite`1<T> Site031;
    public static CallSite`1<T> Site032;
    public static CallSite`1<T> Site033;
    public static CallSite`1<T> Site034;
    public static CallSite`1<T> Site035;
    public static CallSite`1<T> Site036;
    public static CallSite`1<T> Site037;
    public static CallSite`1<T> Site038;
    public static CallSite`1<T> Site039;
    public static CallSite`1<T> Site040;
    public static CallSite`1<T> Site041;
    public static CallSite`1<T> Site042;
    public static CallSite`1<T> Site043;
    public static CallSite`1<T> Site044;
    public static CallSite`1<T> Site045;
    public static CallSite`1<T> Site046;
    public static CallSite`1<T> Site047;
    public static CallSite`1<T> Site048;
    public static CallSite`1<T> Site049;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.SliceExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <SliceStart>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <SliceStop>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <SliceStep>k__BackingField;
    public Expression SliceStart { get; }
    public Expression SliceStop { get; }
    public Expression SliceStep { get; }
    public SliceExpression(Expression start, Expression stop, Expression step);
    [CompilerGeneratedAttribute]
public Expression get_SliceStart();
    [CompilerGeneratedAttribute]
public Expression get_SliceStop();
    [CompilerGeneratedAttribute]
public Expression get_SliceStep();
    [NullableContextAttribute("1")]
public virtual Expression Reduce();
    [NullableContextAttribute("1")]
public virtual void Walk(PythonWalker walker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.StarredExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Value>k__BackingField;
    public Expression Value { get; }
    public bool CanReduce { get; }
    public Type Type { get; }
    internal bool CanThrow { get; }
    public StarredExpression(Expression value);
    [CompilerGeneratedAttribute]
public Expression get_Value();
    public virtual bool get_CanReduce();
    internal virtual Expression TransformSet(SourceSpan span, Expression right, PythonOperationKind op);
    [NullableContextAttribute("2")]
internal virtual string CheckAssign();
    internal virtual string CheckDelete();
    internal virtual Expression TransformDelete();
    public virtual Type get_Type();
    public virtual void Walk(PythonWalker walker);
    internal virtual bool get_CanThrow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class IronPython.Compiler.Ast.StarredExpressionChecker : PythonWalker {
    private CompilerContext context;
    private StarredExpressionChecker(CompilerContext context);
    public static void Check(PythonAst ast, CompilerContext context);
    public virtual bool Walk(AssignmentStatement node);
    public virtual bool Walk(CallExpression node);
    public virtual bool Walk(ClassDefinition node);
    public virtual bool Walk(ForStatement node);
    public virtual bool Walk(StarredExpression node);
    public virtual bool Walk(ListExpression node);
    public virtual bool Walk(SetExpression node);
    public virtual bool Walk(TupleExpression node);
    private void ReportSyntaxError(string message, Node node);
    private void WalkAssignmentTarget(Expression expr);
    private bool WalkItems(IReadOnlyList`1<Expression> items);
}
public abstract class IronPython.Compiler.Ast.Statement : Node {
    public string Documentation { get; }
    public Type Type { get; }
    public virtual string get_Documentation();
    public virtual Type get_Type();
}
public static class IronPython.Compiler.Ast.StorageData : object {
    internal static int ContextCount;
    internal static int ConstantCount;
    internal static int SymbolCount;
    internal static int GlobalCount;
    public static int StaticFields;
    public static int ContextTypes;
    public static int ConstantTypes;
    public static int SymbolTypes;
    public static int GlobalTypes;
    public static int SiteTypes;
    public static CodeContext[] Contexts;
    public static Object[] Constants;
    public static PythonGlobal[] Globals;
    public static object SiteLockObj;
    private static StorageData();
    public static Type ContextStorageType(int index);
    public static Type ConstantStorageType(int index);
    public static Type GlobalStorageType(int index);
}
public class IronPython.Compiler.Ast.SuiteStatement : Statement {
    private Statement[] _statements;
    public IList`1<Statement> Statements { get; }
    public string Documentation { get; }
    internal bool CanThrow { get; }
    public SuiteStatement(Statement[] statements);
    public IList`1<Statement> get_Statements();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    public virtual string get_Documentation();
    internal virtual bool get_CanThrow();
}
internal class IronPython.Compiler.Ast.ToDiskCompilationMode : CollectableCompilationMode {
    public virtual Expression GetConstant(object value);
    public virtual void PrepareScope(PythonAst ast, ReadOnlyCollectionBuilder`1<ParameterExpression> locals, List`1<Expression> init);
    public virtual LightLambdaExpression ReduceAst(PythonAst instance, string name);
    public virtual ScriptCode MakeScriptCode(PythonAst ast);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.TryStatement : Statement {
    private TryStatementHandler[] _handlers;
    private static TryStatementHandler[] emptyArray;
    [CompilerGeneratedAttribute]
private int <HeaderIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Statement <Body>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Statement <Else>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Statement <Finally>k__BackingField;
    private int HeaderIndex { get; public set; }
    public Statement Body { get; }
    [NullableAttribute("2")]
public Statement Else { get; }
    [NullableAttribute("2")]
public Statement Finally { get; }
    public IReadOnlyList`1<TryStatementHandler> Handlers { get; }
    [NullableContextAttribute("2")]
public TryStatement(Statement body, TryStatementHandler[] handlers, Statement else_, Statement finally_);
    private static TryStatement();
    [CompilerGeneratedAttribute]
private int get_HeaderIndex();
    [CompilerGeneratedAttribute]
public void set_HeaderIndex(int value);
    [CompilerGeneratedAttribute]
public Statement get_Body();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Statement get_Else();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Statement get_Finally();
    public IReadOnlyList`1<TryStatementHandler> get_Handlers();
    public virtual Expression Reduce();
    [NullableContextAttribute("2")]
private static ReadOnlyCollectionBuilder`1<ParameterExpression> GetVariables(ParameterExpression lineUpdated, ParameterExpression runElse, ParameterExpression previousExceptionContext);
    private Expression AddFinally(Expression body);
    private Expression TransformHandlers(ParameterExpression exception, ParameterExpression previousException);
    internal static Expression GetTracebackHeader(Statement node, ParameterExpression exception, Expression body);
    public virtual void Walk(PythonWalker walker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.TryStatementHandler : Node {
    private int _headerIndex;
    private Expression _test;
    private Expression _target;
    private Statement _body;
    public SourceLocation Header { get; }
    public int HeaderIndex { get; public set; }
    public Expression Test { get; }
    public Expression Target { get; }
    public Statement Body { get; }
    public TryStatementHandler(Expression test, Expression target, Statement body);
    public SourceLocation get_Header();
    public int get_HeaderIndex();
    public void set_HeaderIndex(int value);
    public Expression get_Test();
    public Expression get_Target();
    public Statement get_Body();
    public virtual void Walk(PythonWalker walker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.TupleExpression : SequenceExpression {
    [CompilerGeneratedAttribute]
private bool <IsExpandable>k__BackingField;
    public bool IsExpandable { get; }
    internal bool IsConstant { get; }
    public TupleExpression(bool expandable, Expression[] items);
    [NullableContextAttribute("2")]
internal virtual string CheckAssign();
    [NullableContextAttribute("2")]
internal virtual string CheckDelete();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    [CompilerGeneratedAttribute]
public bool get_IsExpandable();
    internal virtual bool get_IsConstant();
    internal virtual object GetConstantValue();
}
public class IronPython.Compiler.Ast.UnaryExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonOperator <Operator>k__BackingField;
    public Expression Expression { get; }
    public PythonOperator Operator { get; }
    public UnaryExpression(PythonOperator op, Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public PythonOperator get_Operator();
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    private static PythonOperationKind PythonOperatorToOperatorString(PythonOperator op);
}
internal class IronPython.Compiler.Ast.UncollectableCompilationMode : CompilationMode {
    private static Dictionary`2<object, ConstantInfo> _allConstants;
    private static Dictionary`2<Type, DelegateCache> _delegateCache;
    public Type DelegateType { get; }
    private static UncollectableCompilationMode();
    public virtual LightLambdaExpression ReduceAst(PythonAst instance, string name);
    public virtual Expression GetConstant(object value);
    public virtual Type GetConstantType(object value);
    public virtual Expression GetGlobal(Expression globalContext, int arrayIndex, PythonVariable variable, PythonGlobal global);
    public virtual Type get_DelegateType();
    public virtual ConstantInfo GetContext();
    private static ConstantInfo NextConstant(int offset, object value);
    private static ConstantInfo NextGlobal(int offset);
    public static SiteInfo NextSite(DynamicMetaObjectBinder binder);
    private static SiteInfo NextSite(DynamicMetaObjectBinder binder, Type delegateType);
    public virtual void PublishContext(CodeContext context, ConstantInfo codeContextInfo);
    private static void PublishConstant(object constant, ConstantInfo info);
    private static SiteInfo PublishSite(SiteInfo si);
    private static void PublishWorker(int start, int nTypes, ConstantInfo info, T value, T[] fallbackArray);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0);
    private static Expression MakeDynamicExpression(DynamicMetaObjectBinder binder, Expression expr, FieldInfo targetField, MethodInfo invokeMethod, Expression arg0);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1);
    private static Expression MakeDynamicExpression(DynamicMetaObjectBinder binder, Expression expr, FieldInfo targetField, MethodInfo invokeMethod, Expression arg0, Expression arg1);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1, Expression arg2);
    private static Expression MakeDynamicExpression(DynamicMetaObjectBinder binder, Expression expr, FieldInfo targetField, MethodInfo invokeMethod, Expression arg0, Expression arg1, Expression arg2);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1, Expression arg2, Expression arg3);
    private static Expression MakeDynamicExpression(DynamicMetaObjectBinder binder, Expression expr, FieldInfo targetField, MethodInfo invokeMethod, Expression arg0, Expression arg1, Expression arg2, Expression arg3);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression[] args);
    private static Expression MakeDynamicExpression(DynamicMetaObjectBinder binder, Expression expr, FieldInfo targetField, MethodInfo invokeMethod, IList`1<Expression> args);
    private static Type GetDelegateType(Type retType, IList`1<Expression> args);
    private static Type GetFuncType(Type[] types);
    private static Type GetActionType(Type[] types);
}
public enum IronPython.Compiler.Ast.VariableKind : Enum {
    public int value__;
    public static VariableKind Local;
    public static VariableKind Parameter;
    public static VariableKind Global;
    public static VariableKind Nonlocal;
}
public class IronPython.Compiler.Ast.WhileStatement : Statement {
    private int _indexHeader;
    private LabelTarget _break;
    private LabelTarget _continue;
    [CompilerGeneratedAttribute]
private Expression <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private Statement <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Statement <ElseStatement>k__BackingField;
    public Expression Test { get; }
    public Statement Body { get; }
    public Statement ElseStatement { get; }
    private SourceSpan Header { get; }
    private LabelTarget IronPython.Compiler.Ast.ILoopStatement.BreakLabel { get; private set; }
    private LabelTarget IronPython.Compiler.Ast.ILoopStatement.ContinueLabel { get; private set; }
    public WhileStatement(Expression test, Statement body, Statement else_);
    [CompilerGeneratedAttribute]
public Expression get_Test();
    [CompilerGeneratedAttribute]
public Statement get_Body();
    [CompilerGeneratedAttribute]
public Statement get_ElseStatement();
    private SourceSpan get_Header();
    public void SetLoc(PythonAst globalParent, int start, int header, int end);
    private sealed virtual override LabelTarget IronPython.Compiler.Ast.ILoopStatement.get_BreakLabel();
    private sealed virtual override void IronPython.Compiler.Ast.ILoopStatement.set_BreakLabel(LabelTarget value);
    private sealed virtual override LabelTarget IronPython.Compiler.Ast.ILoopStatement.get_ContinueLabel();
    private sealed virtual override void IronPython.Compiler.Ast.ILoopStatement.set_ContinueLabel(LabelTarget value);
    public virtual Expression Reduce();
    private sealed virtual override void Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(LightCompiler compiler);
    private Expression ReduceWorker(bool optimizeDynamicConvert);
    public virtual void Walk(PythonWalker walker);
}
public class IronPython.Compiler.Ast.WithStatement : Statement {
    private int _headerIndex;
    private Expression _contextManager;
    private Expression _var;
    private Statement _body;
    unknown int HeaderIndex {public set; }
    public Expression Variable { get; }
    public Expression ContextManager { get; }
    public Statement Body { get; }
    public WithStatement(Expression contextManager, Expression var, Statement body);
    public void set_HeaderIndex(int value);
    public Expression get_Variable();
    public Expression get_ContextManager();
    public Statement get_Body();
    public virtual Expression Reduce();
    private Expression MakeExitCall(ParameterExpression exit, Expression exception);
    public virtual void Walk(PythonWalker walker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.YieldExpression : Expression {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [NullableAttribute("2")]
public Expression Expression { get; }
    public string NodeName { get; }
    [NullableContextAttribute("2")]
public YieldExpression(Expression expression);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Expression get_Expression();
    internal static Expression CreateCheckThrowExpression(SourceSpan span);
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    public virtual string get_NodeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Compiler.Ast.YieldFromExpression : Expression {
    private Statement statement;
    private NameExpression result;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    private static AST yieldFromAst;
    public Expression Expression { get; }
    public string NodeName { get; }
    public YieldFromExpression(Expression expression);
    private static YieldFromExpression();
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    private static Statement GenYieldFromStatement(Expression expression);
    public virtual Expression Reduce();
    public virtual void Walk(PythonWalker walker);
    public virtual string get_NodeName();
}
public class IronPython.Compiler.CallTarget0 : MulticastDelegate {
    public CallTarget0(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class IronPython.Compiler.ClosureExpression : Expression {
    private Expression _closureCell;
    private ParameterExpression _parameter;
    private PythonVariable _variable;
    internal static FieldInfo _cellField;
    public Expression ClosureCell { get; }
    public ParameterExpression OriginalParameter { get; }
    public PythonVariable PythonVariable { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public string Name { get; }
    public ClosureExpression(PythonVariable variable, Expression closureCell, ParameterExpression parameter);
    private static ClosureExpression();
    public Expression get_ClosureCell();
    public ParameterExpression get_OriginalParameter();
    public PythonVariable get_PythonVariable();
    public sealed virtual Expression Create();
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public virtual bool get_CanReduce();
    public string get_Name();
    public virtual Expression Reduce();
    public sealed virtual Expression Assign(Expression value);
    public sealed virtual Expression Delete();
}
public class IronPython.Compiler.CommentToken : Token {
    private string _comment;
    public string Comment { get; }
    public string Image { get; }
    public object Value { get; }
    public CommentToken(string comment);
    public string get_Comment();
    public virtual string get_Image();
    public virtual object get_Value();
}
internal abstract class IronPython.Compiler.CompilationMode : object {
    public static CompilationMode ToDisk;
    public static CompilationMode Uncollectable;
    public static CompilationMode Collectable;
    public static CompilationMode Lookup;
    public Type DelegateType { get; }
    private static CompilationMode();
    public virtual ScriptCode MakeScriptCode(PythonAst ast);
    public virtual Expression GetConstant(object value);
    public virtual Type GetConstantType(object value);
    public virtual void PrepareScope(PythonAst ast, ReadOnlyCollectionBuilder`1<ParameterExpression> locals, List`1<Expression> init);
    public virtual Type get_DelegateType();
    public virtual ConstantInfo GetContext();
    public virtual void PublishContext(CodeContext codeContext, ConstantInfo _contextInfo);
    public Expression Dynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0);
    public Expression Dynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1);
    public Expression Dynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1, Expression arg2);
    public Expression Dynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1, Expression arg2, Expression arg3);
    public Expression Dynamic(DynamicMetaObjectBinder binder, Type retType, Expression[] args);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1, Expression arg2);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression arg0, Expression arg1, Expression arg2, Expression arg3);
    public virtual Expression ReduceDynamic(DynamicMetaObjectBinder binder, Type retType, Expression[] args);
    public abstract virtual Expression GetGlobal(Expression globalContext, int arrayIndex, PythonVariable variable, PythonGlobal global);
    public abstract virtual LightLambdaExpression ReduceAst(PythonAst instance, string name);
}
public class IronPython.Compiler.ConstantValueToken : Token {
    private object _value;
    public object Constant { get; }
    public object Value { get; }
    public string Image { get; }
    public ConstantValueToken(object value);
    public object get_Constant();
    public virtual object get_Value();
    public virtual string get_Image();
}
internal class IronPython.Compiler.DelayedTupleAssign : Expression {
    private Expression _lhs;
    private Expression _rhs;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public DelayedTupleAssign(Expression lhs, Expression rhs);
    public virtual Expression Reduce();
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public virtual bool get_CanReduce();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
internal class IronPython.Compiler.DelayedTupleExpression : Expression {
    public int Index;
    private StrongBox`1<Type> _tupleType;
    private StrongBox`1<int> _tupleSize;
    private StrongBox`1<ParameterExpression> _tupleExpr;
    private Type _type;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public DelayedTupleExpression(int index, StrongBox`1<ParameterExpression> tupleExpr, StrongBox`1<Type> tupleType, StrongBox`1<int> tupleSize, Type type);
    public virtual Expression Reduce();
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public virtual bool get_CanReduce();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
public class IronPython.Compiler.ErrorToken : Token {
    private string _message;
    public string Message { get; }
    public string Image { get; }
    public object Value { get; }
    public ErrorToken(string message);
    public string get_Message();
    public virtual string get_Image();
    public virtual object get_Value();
}
internal class IronPython.Compiler.GeneratorRewriter : DynamicExpressionVisitor {
    private Expression _body;
    private string _name;
    private StrongBox`1<Type> _tupleType;
    private StrongBox`1<int> _tupleSize;
    private StrongBox`1<ParameterExpression> _tupleExpr;
    private Stack`1<LabelTarget> _returnLabels;
    private ParameterExpression _gotoRouter;
    private bool _inTryWithFinally;
    private List`1<YieldMarker> _yields;
    private Dictionary`2<ParameterExpression, DelayedTupleExpression> _vars;
    private List`1<KeyValuePair`2<ParameterExpression, DelayedTupleExpression>> _orderedVars;
    private List`1<ParameterExpression> _temps;
    private Expression _state;
    private Expression _current;
    private static int GotoRouterYielding;
    private static int GotoRouterNone;
    internal static int NotStarted;
    internal static int Finished;
    internal static ParameterExpression _generatorParam;
    internal GeneratorRewriter(string name, Expression body);
    private static GeneratorRewriter();
    internal Expression Reduce(bool shouldInterpret, bool emitDebugSymbols, int compilationThreshold, IList`1<ParameterExpression> parameters, Func`2<Expression`1<Func`2<MutableTuple, object>>, Expression`1<Func`2<MutableTuple, object>>> bodyConverter);
    private YieldMarker GetYieldMarker(YieldExpression node);
    private Expression ToTemp(Expression& e);
    private Expression MakeAssign(Expression variable, Expression value);
    private Expression MakeAssignLabel(Expression variable, LabelExpression value);
    private Expression MakeAssignLabel(Expression variable, GotoRewriteInfo curVariable, LabelTarget target, Expression defaultValue);
    private Expression MakeAssignBlock(Expression variable, Expression value);
    private Expression MakeAssignConditional(Expression variable, Expression value);
    private BlockExpression ToTemp(ReadOnlyCollection`1& args);
    protected virtual Expression VisitTry(TryExpression node);
    private Expression MakeSkipFinallyBlock(LabelTarget target);
    protected virtual CatchBlock VisitCatchBlock(CatchBlock node);
    private SwitchExpression MakeYieldRouter(Type type, int start, int end, LabelTarget newTarget);
    protected virtual Expression VisitExtension(Expression node);
    private Expression VisitYield(YieldExpression node);
    protected virtual Expression VisitBlock(BlockExpression node);
    private DelayedTupleExpression LiftVariable(ParameterExpression param);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    private Expression VisitAssign(BinaryExpression node);
    protected virtual Expression VisitDynamic(DynamicExpression node);
    protected virtual Expression VisitIndex(IndexExpression node);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    private static Expression DelayedAssign(Expression lhs, Expression rhs);
}
public class IronPython.Compiler.IncompleteStringErrorToken : ErrorToken {
    private string _value;
    public string Image { get; }
    public object Value { get; }
    public IncompleteStringErrorToken(string message, string value);
    public virtual string get_Image();
    public virtual object get_Value();
}
internal interface IronPython.Compiler.IPythonGlobalExpression {
    public abstract virtual Expression RawValue();
}
internal interface IronPython.Compiler.IPythonVariableExpression {
    public abstract virtual Expression Assign(Expression value);
    public abstract virtual Expression Delete();
    public abstract virtual Expression Create();
}
internal class IronPython.Compiler.LazyCode`1 : object {
    public Expression`1<T> Code;
    private T Delegate;
    private bool _shouldInterpret;
    private int _compilationThreshold;
    public LazyCode`1(Expression`1<T> code, bool shouldInterpret, int compilationThreshold);
    public T EnsureDelegate();
    private T Compile();
    public sealed virtual Expression CreateExpression();
}
public class IronPython.Compiler.LookupCompilationDelegate : MulticastDelegate {
    public LookupCompilationDelegate(object object, IntPtr method);
    public virtual object Invoke(CodeContext context, FunctionCode code);
    public virtual IAsyncResult BeginInvoke(CodeContext context, FunctionCode code, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class IronPython.Compiler.LookupGlobalInstruction : Instruction {
    private string _name;
    private bool _isLocal;
    private bool _lightThrow;
    public int ConsumedStack { get; }
    public int ProducedStack { get; }
    public LookupGlobalInstruction(string name, bool isLocal, bool lightThrow);
    public virtual int get_ConsumedStack();
    public virtual int get_ProducedStack();
    public virtual int Run(InterpretedFrame frame);
    public virtual string ToString();
}
internal class IronPython.Compiler.LookupGlobalVariable : Expression {
    private string _name;
    private bool _isLocal;
    private bool _lightThrow;
    private Expression _codeContextExpr;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public bool IsLocal { get; }
    public Expression CodeContext { get; }
    public string Name { get; }
    public LookupGlobalVariable(Expression codeContextExpr, string name, bool isLocal);
    public LookupGlobalVariable(Expression codeContextExpr, string name, bool isLocal, bool lightThrow);
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public virtual bool get_CanReduce();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public sealed virtual Expression RawValue();
    public virtual Expression Reduce();
    public sealed virtual Expression Assign(Expression value);
    public sealed virtual Expression Create();
    public bool get_IsLocal();
    public Expression get_CodeContext();
    public string get_Name();
    public sealed virtual Expression Delete();
    private sealed virtual override void Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(LightCompiler compiler);
    private sealed virtual override Expression Microsoft.Scripting.Ast.ILightExceptionAwareExpression.ReduceForLightExceptions();
}
public class IronPython.Compiler.NameToken : Token {
    private string _name;
    public string Name { get; }
    public object Value { get; }
    public string Image { get; }
    public NameToken(string name);
    public string get_Name();
    public virtual object get_Value();
    public virtual string get_Image();
}
internal class IronPython.Compiler.OnDiskScriptCode : RunnableScriptCode {
    private LookupCompilationDelegate _target;
    private CodeContext _optimizedContext;
    private string _moduleName;
    public string ModuleName { get; }
    public OnDiskScriptCode(LookupCompilationDelegate code, SourceUnit sourceUnit, string moduleName);
    private static PythonAst MakeAstFromSourceUnit(SourceUnit sourceUnit);
    public virtual object Run();
    public virtual object Run(Scope scope);
    public string get_ModuleName();
    public virtual FunctionCode GetFunctionCode(bool register);
    public virtual Scope CreateScope();
    internal CodeContext CreateContext();
}
public class IronPython.Compiler.OperatorToken : Token {
    private int _precedence;
    private string _image;
    public int Precedence { get; }
    public object Value { get; }
    public string Image { get; }
    public OperatorToken(TokenKind kind, string image, int precedence);
    public int get_Precedence();
    public virtual object get_Value();
    public virtual string get_Image();
}
public class IronPython.Compiler.Parser : object {
    private Tokenizer _tokenizer;
    private ErrorSink _errors;
    private ParserSink _sink;
    private SourceUnit _sourceUnit;
    private ModuleOptions _languageFeatures;
    private TokenWithSpan _token;
    private TokenWithSpan _lookahead;
    private Stack`1<FunctionDefinition> _functions;
    private Stack`1<ClassDefinition> _classes;
    private bool _fromFutureAllowed;
    private string _privatePrefix;
    private bool _parsingStarted;
    private bool _allowIncomplete;
    private bool _inLoop;
    private bool _inFinally;
    private bool _inFinallyLoop;
    private SourceCodeReader _sourceReader;
    private int _errorCode;
    private CompilerContext _context;
    private PythonAst _globalParent;
    private static Char[] newLineChar;
    private static Char[] whiteSpace;
    [NullableAttribute("1")]
public ErrorSink ErrorSink { get; public set; }
    [NullableAttribute("2")]
public ParserSink ParserSink { get; public set; }
    public int ErrorCode { get; }
    private ClassDefinition CurrentClass { get; }
    private FunctionDefinition CurrentFunction { get; }
    private bool GeneratorStop { get; }
    private Parser(CompilerContext context, Tokenizer tokenizer, ErrorSink errorSink, ParserSink parserSink, ModuleOptions languageFeatures);
    private static Parser();
    public static Parser CreateParser(CompilerContext context, PythonOptions options);
    [ObsoleteAttribute("pass verbatim via PythonCompilerOptions in PythonOptions")]
public static Parser CreateParser(CompilerContext context, PythonOptions options, bool verbatim);
    private static Parser CreateParserWorker(CompilerContext context, PythonOptions options, bool verbatim);
    public PythonAst ParseFile(bool makeModule);
    public PythonAst ParseFile(bool makeModule, bool returnValue);
    public PythonAst ParseInteractiveCode(ScriptCodeParseResult& properties);
    private PythonAst FinishParsing(Statement ret);
    public PythonAst ParseSingleStatement();
    public PythonAst ParseTopExpression();
    public static int GetNextAutoIndentSize(string text, int autoIndentTabWidth);
    [NullableContextAttribute("1")]
public ErrorSink get_ErrorSink();
    [NullableContextAttribute("1")]
public void set_ErrorSink(ErrorSink value);
    [NullableContextAttribute("2")]
public ParserSink get_ParserSink();
    [NullableContextAttribute("2")]
public void set_ParserSink(ParserSink value);
    public int get_ErrorCode();
    public void Reset(SourceUnit sourceUnit, ModuleOptions languageFeatures);
    public void Reset();
    private void ReportSyntaxError(TokenWithSpan t, int errorCode);
    private void ReportSyntaxError(Token t, IndexSpan span, int errorCode, bool allowIncomplete);
    private static string GetErrorMessage(Token t, int errorCode);
    private void ReportSyntaxError(string message);
    internal void ReportSyntaxError(int start, int end, string message, int errorCode);
    private static bool IsPrivateName(string name);
    private string FixName(string name);
    private string ReadName();
    private Statement ParseStmt();
    private Statement ParseSimpleStmt();
    private Statement ParseSmallStmt();
    private Statement ParseDelStmt();
    private Statement ParseReturnStmt();
    private Statement FinishSmallStmt(Statement stmt);
    private Statement ParseYieldStmt();
    private Expression ParseYieldExpression();
    private Statement FinishAssignments(Expression right);
    private Statement ParseExprStmt();
    private PythonOperator GetAssignOperator(Token t);
    private PythonOperator GetBinaryOperator(OperatorToken token);
    private ImportStatement ParseImportStmt();
    private ModuleName ParseModuleName();
    private ModuleName ParseRelativeModuleName();
    private String[] ReadNames();
    private FromImportStatement ParseFromImportStmt();
    private void ParseAsNameList(List`1<string> l, List`1<string> las);
    private string MaybeParseAsName();
    private NonlocalStatement ParseNonLocalStmt();
    private GlobalStatement ParseGlobalStmt();
    private RaiseStatement ParseRaiseStmt();
    private AssertStatement ParseAssertStmt();
    private string SetPrivatePrefix(string name);
    internal static string GetPrivatePrefix(string name);
    private ErrorExpression Error();
    private ExpressionStatement ErrorStmt();
    private ClassDefinition ParseClassDef();
    private List`1<Expression> ParseDecorators();
    private Statement ParseDecorated();
    private FunctionDefinition ParseFuncDef(bool isAsync);
    private void CheckUniqueParameter(HashSet`1<string> names, string name);
    private Parameter[] ParseParameterList(TokenKind terminator, bool allowAnnotations);
    private Parameter ParseDefParameter(HashSet`1<string> names, ParameterKind parameterKind, bool allowAnnotations, Boolean& needDefault);
    private Parameter ParseParameter(HashSet`1<string> names, ParameterKind parameterKind, bool allowAnnotations);
    private void CompleteParameterName(Node node, string name, HashSet`1<string> names);
    private Expression FinishLambdefNoCond();
    private Expression FinishLambdef();
    private FunctionDefinition ParseLambdaHelperStart(string name);
    private Expression ParseLambdaHelperEnd(FunctionDefinition func, Expression expr);
    private WhileStatement ParseWhileStmt();
    private WithStatement ParseWithStmt();
    private WithItem ParseWithItem();
    private Statement ParseAsyncStmt();
    private ForStatement ParseForStmt();
    private Statement ParseLoopSuite();
    private Statement ParseClassOrFuncBody();
    private IfStatement ParseIfStmt();
    private IfStatementTest ParseIfStmtTest();
    private Statement ParseTryStatement();
    private Statement ParseFinallySuite(Statement finallySuite);
    private void MarkFunctionContainsFinally();
    private TryStatementHandler ParseTryStmtHandler();
    private Statement ParseSuite();
    private void CheckSuiteEofError(TokenWithSpan cur);
    private Expression ParseTestNoCond();
    private Expression ParseTest();
    private Expression ParseOrTest();
    private Expression ParseConditionalTest(Expression trueExpr);
    private Expression ParseAndTest();
    private Expression ParseNotTest();
    private Expression ParseComparison();
    private Expression ParseExpr(int precedence);
    private Expression ParseFactor();
    private Expression FinishUnaryNegate();
    private Expression ParsePower();
    private Expression ParseAtom();
    private string FinishStringPlus(string s);
    private Bytes FinishBytesPlus(Bytes s);
    private Expression AddTrailers(Expression ret);
    private Expression AddTrailers(Expression ret, bool allowGeneratorExpression);
    private Expression ParseSubscriptList();
    private Expression ParseSliceEnd();
    private Expression FinishSlice(Expression e0, int start);
    private List`1<Expression> ParseExprList(Boolean& trailingComma);
    private IReadOnlyList`1<Node> FinishArgListOrGenExpr();
    private Keyword FinishKeywordArgument(Expression t);
    private void CheckUniqueArgument(List`1<Node> names, Keyword arg);
    private IReadOnlyList`1<Node> FinishArgumentList(Node first);
    private List`1<Expression> ParseTestList(Boolean& trailingComma);
    private Expression ParseTestList();
    private Expression ParseStarExpr();
    private Expression ParseTestListStarExpr();
    private Expression ParseTestListError();
    private Expression FinishExpressionListAsExpr(Expression expr);
    private Expression FinishTupleOrGenExp();
    private Expression ParseGeneratorExpression(Expression expr);
    private static Statement NestGenExpr(Statement current, Statement nested);
    private ForStatement ParseGenExprFor();
    private IfStatement ParseGenExprIf();
    private Expression FinishDictOrSetValue();
    private SetComprehension FinishSetComp(Expression item, int oStart, int oEnd);
    private DictionaryComprehension FinishDictComp(Expression key, Expression value, int oStart, int oEnd);
    private ComprehensionIterator[] ParseCompIter();
    private ComprehensionFor ParseCompFor();
    private Expression FinishListValue();
    private ComprehensionIf ParseCompIf();
    private Expression MakeTupleOrExpr(List`1<Expression> l, bool trailingComma);
    private Expression MakeTupleOrExpr(List`1<Expression> l, bool trailingComma, bool expandable);
    private static bool NeverTestToken(Token t);
    private ClassDefinition get_CurrentClass();
    private ClassDefinition PopClass();
    private void PushClass(ClassDefinition clazz);
    private FunctionDefinition get_CurrentFunction();
    private FunctionDefinition PopFunction();
    private void PushFunction(FunctionDefinition function);
    private CallExpression FinishCallExpr(Expression target, IEnumerable`1<Node> args);
    private void SplitAndValidateArguments(IEnumerable`1<Node> args, List`1& posargs, List`1& kwargs);
    public sealed virtual void Dispose();
    private PythonAst ParseFileWorker(bool makeModule, bool returnValue);
    private Statement InternalParseInteractiveInput(Boolean& parsingMultiLineCmpdStmt, Boolean& isEmptyStmt);
    private Expression ParseTestListAsExpression();
    private bool MaybeEatNewLine();
    private bool EatNewLine();
    private Token EatEndOfInput();
    private Exception BadSourceError(DecoderFallbackException dfe);
    private bool get_GeneratorStop();
    private void StartParsing();
    private int GetEnd();
    private int GetStart();
    private SourceSpan GetSourceSpan();
    private Token NextToken();
    private Token PeekToken();
    private void FetchLookahead();
    private bool PeekToken(TokenKind kind);
    private bool PeekToken(Token check);
    private bool Eat(TokenKind kind);
    private bool EatNoEof(TokenKind kind);
    private bool MaybeEat(TokenKind kind);
    [CompilerGeneratedAttribute]
private Expression <ParseTestList>g__ParseTestList|132_0(Expression expr);
}
internal static class IronPython.Compiler.PythonCallTargets : object {
    public static int MaxArgs;
    public static object OriginalCallTargetN(PythonFunction function, Object[] args);
    public static object OriginalCallTarget0(PythonFunction function);
    public static object OriginalCallTarget1(PythonFunction function, object arg0);
    public static object OriginalCallTarget2(PythonFunction function, object arg0, object arg1);
    public static object OriginalCallTarget3(PythonFunction function, object arg0, object arg1, object arg2);
    public static object OriginalCallTarget4(PythonFunction function, object arg0, object arg1, object arg2, object arg3);
    public static object OriginalCallTarget5(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4);
    public static object OriginalCallTarget6(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5);
    public static object OriginalCallTarget7(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6);
    public static object OriginalCallTarget8(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7);
    public static object OriginalCallTarget9(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8);
    public static object OriginalCallTarget10(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9);
    public static object OriginalCallTarget11(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10);
    public static object OriginalCallTarget12(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11);
    public static object OriginalCallTarget13(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12);
    public static object OriginalCallTarget14(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13);
    public static object OriginalCallTarget15(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14);
    internal static Type GetPythonTargetType(bool wrapper, int parameters, Delegate& originalTarget);
}
public class IronPython.Compiler.PythonCompilerOptions : CompilerOptions {
    private ModuleOptions _module;
    private bool _skipFirstLine;
    private bool _dontImplyIndent;
    private string _moduleName;
    private Int32[] _initialIndentation;
    private CompilationMode _compilationMode;
    public bool DontImplyDedent { get; public set; }
    public Int32[] InitialIndent { get; public set; }
    internal bool GeneratorStop { get; internal set; }
    public bool Verbatim { get; public set; }
    public bool Interpreted { get; public set; }
    public bool Optimized { get; public set; }
    public ModuleOptions Module { get; public set; }
    public string ModuleName { get; public set; }
    public bool SkipFirstLine { get; public set; }
    internal CompilationMode CompilationMode { get; internal set; }
    public PythonCompilerOptions(ModuleOptions features);
    public bool get_DontImplyDedent();
    public void set_DontImplyDedent(bool value);
    public Int32[] get_InitialIndent();
    public void set_InitialIndent(Int32[] value);
    internal bool get_GeneratorStop();
    internal void set_GeneratorStop(bool value);
    public bool get_Verbatim();
    public void set_Verbatim(bool value);
    public bool get_Interpreted();
    public void set_Interpreted(bool value);
    public bool get_Optimized();
    public void set_Optimized(bool value);
    public ModuleOptions get_Module();
    public void set_Module(ModuleOptions value);
    public string get_ModuleName();
    public void set_ModuleName(string value);
    public bool get_SkipFirstLine();
    public void set_SkipFirstLine(bool value);
    internal CompilationMode get_CompilationMode();
    internal void set_CompilationMode(CompilationMode value);
}
internal class IronPython.Compiler.PythonDynamicExpression1 : LightDynamicExpression1 {
    private CompilationMode _mode;
    public PythonDynamicExpression1(CallSiteBinder binder, CompilationMode mode, Expression arg0);
    protected virtual Expression Rewrite(CallSiteBinder binder, Expression arg0);
    public virtual Expression Reduce();
}
internal class IronPython.Compiler.PythonDynamicExpression1`1 : LightDynamicExpression1 {
    private CompilationMode _mode;
    public Type Type { get; }
    public PythonDynamicExpression1`1(CallSiteBinder binder, CompilationMode mode, Expression arg0);
    protected virtual Expression Rewrite(CallSiteBinder binder, Expression arg0);
    public virtual Expression Reduce();
    public virtual Type get_Type();
    public virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.PythonDynamicExpression2 : LightDynamicExpression2 {
    private CompilationMode _mode;
    public PythonDynamicExpression2(CallSiteBinder binder, CompilationMode mode, Expression arg0, Expression arg1);
    public virtual Expression Reduce();
    protected virtual Expression Rewrite(CallSiteBinder binder, Expression arg0, Expression arg1);
    public virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.PythonDynamicExpression2`1 : PythonDynamicExpression2 {
    private CompilationMode _mode;
    public Type Type { get; }
    public PythonDynamicExpression2`1(CallSiteBinder binder, CompilationMode mode, Expression arg0, Expression arg1);
    public virtual Expression Reduce();
    protected virtual Expression Rewrite(CallSiteBinder binder, Expression arg0, Expression arg1);
    public virtual Type get_Type();
    public virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.PythonDynamicExpression3 : LightDynamicExpression3 {
    private CompilationMode _mode;
    public PythonDynamicExpression3(CallSiteBinder binder, CompilationMode mode, Expression arg0, Expression arg1, Expression arg2);
    public virtual Expression Reduce();
    protected virtual Expression Rewrite(CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2);
    public virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.PythonDynamicExpression4 : LightDynamicExpression4 {
    private CompilationMode _mode;
    public PythonDynamicExpression4(CallSiteBinder binder, CompilationMode mode, Expression arg0, Expression arg1, Expression arg2, Expression arg3);
    public virtual Expression Reduce();
    protected virtual Expression Rewrite(CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3);
    public virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.PythonDynamicExpressionN : LightTypedDynamicExpressionN {
    private CompilationMode _mode;
    public PythonDynamicExpressionN(CallSiteBinder binder, CompilationMode mode, IList`1<Expression> args);
    protected virtual Expression Rewrite(CallSiteBinder binder, IList`1<Expression> args);
    public virtual Expression Reduce();
    public virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck0 : object {
    private Func`2<PythonFunction, object> _target;
    public PythonFunctionRecursionCheck0(Func`2<PythonFunction, object> target);
    public object CallTarget(PythonFunction function);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck1 : object {
    private Func`3<PythonFunction, object, object> _target;
    public PythonFunctionRecursionCheck1(Func`3<PythonFunction, object, object> target);
    public object CallTarget(PythonFunction function, object arg0);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck10 : object {
    private Func`12<PythonFunction, object, object, object, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck10(Func`12<PythonFunction, object, object, object, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck11 : object {
    private Func`13<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck11(Func`13<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck12 : object {
    private Func`14<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck12(Func`14<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck13 : object {
    private Func`15<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck13(Func`15<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck14 : object {
    private Func`16<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck14(Func`16<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck15 : object {
    private Func`17<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck15(Func`17<PythonFunction, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8, object arg9, object arg10, object arg11, object arg12, object arg13, object arg14);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck2 : object {
    private Func`4<PythonFunction, object, object, object> _target;
    public PythonFunctionRecursionCheck2(Func`4<PythonFunction, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck3 : object {
    private Func`5<PythonFunction, object, object, object, object> _target;
    public PythonFunctionRecursionCheck3(Func`5<PythonFunction, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck4 : object {
    private Func`6<PythonFunction, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck4(Func`6<PythonFunction, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck5 : object {
    private Func`7<PythonFunction, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck5(Func`7<PythonFunction, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck6 : object {
    private Func`8<PythonFunction, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck6(Func`8<PythonFunction, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck7 : object {
    private Func`9<PythonFunction, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck7(Func`9<PythonFunction, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck8 : object {
    private Func`10<PythonFunction, object, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck8(Func`10<PythonFunction, object, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheck9 : object {
    private Func`11<PythonFunction, object, object, object, object, object, object, object, object, object, object> _target;
    public PythonFunctionRecursionCheck9(Func`11<PythonFunction, object, object, object, object, object, object, object, object, object, object> target);
    public object CallTarget(PythonFunction function, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5, object arg6, object arg7, object arg8);
}
internal class IronPython.Compiler.PythonFunctionRecursionCheckN : object {
    private Func`3<PythonFunction, Object[], object> _target;
    public PythonFunctionRecursionCheckN(Func`3<PythonFunction, Object[], object> target);
    public object CallTarget(PythonFunction function, Object[] args);
}
internal class IronPython.Compiler.PythonGeneratorExpression : Expression {
    private LightLambdaExpression _lambda;
    private int _compilationThreshold;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public PythonGeneratorExpression(LightLambdaExpression lambda, int compilationThreshold);
    public virtual Expression Reduce();
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public virtual bool get_CanReduce();
}
[DebuggerDisplayAttribute("{Display}")]
public class IronPython.Compiler.PythonGlobal : object {
    private object _value;
    private ModuleGlobalCache _global;
    private string _name;
    private CodeContext _context;
    internal static PropertyInfo CurrentValueProperty;
    internal static PropertyInfo RawValueProperty;
    public object CurrentValue { get; public set; }
    public object CurrentValueLightThrow { get; }
    public string Name { get; }
    public object RawValue { get; internal set; }
    public string Display { get; }
    public PythonGlobal(CodeContext context, string name);
    private static PythonGlobal();
    public object get_CurrentValue();
    public void set_CurrentValue(object value);
    public object get_CurrentValueLightThrow();
    public string get_Name();
    private object GetCachedValue(bool lightThrow);
    public object get_RawValue();
    internal void set_RawValue(object value);
    public string get_Display();
    private static string GetStringDisplay(object val);
    public virtual string ToString();
}
internal class IronPython.Compiler.PythonGlobalInstruction : Instruction {
    protected PythonGlobal _global;
    public int ProducedStack { get; }
    public PythonGlobalInstruction(PythonGlobal global);
    public virtual int get_ProducedStack();
    public virtual int Run(InterpretedFrame frame);
    public virtual string ToString();
}
internal class IronPython.Compiler.PythonGlobalVariableExpression : Expression {
    private Expression _target;
    private PythonGlobal _global;
    private PythonVariable _variable;
    private bool _lightEh;
    internal static Expression Uninitialized;
    public Expression Target { get; }
    public PythonVariable Variable { get; }
    public PythonGlobal Global { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public PythonGlobalVariableExpression(Expression globalExpr, PythonVariable variable, PythonGlobal global);
    internal PythonGlobalVariableExpression(Expression globalExpr, PythonVariable variable, PythonGlobal global, bool lightEh);
    private static PythonGlobalVariableExpression();
    public Expression get_Target();
    public PythonVariable get_Variable();
    public PythonGlobal get_Global();
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public virtual bool get_CanReduce();
    public virtual Expression Reduce();
    public sealed virtual Expression RawValue();
    public sealed virtual Expression Assign(Expression value);
    public sealed virtual Expression Delete();
    public sealed virtual Expression Create();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public sealed virtual void AddInstructions(LightCompiler compiler);
    private sealed virtual override Expression Microsoft.Scripting.Ast.ILightExceptionAwareExpression.ReduceForLightExceptions();
}
internal class IronPython.Compiler.PythonLightThrowGlobalInstruction : PythonGlobalInstruction {
    public PythonLightThrowGlobalInstruction(PythonGlobal global);
    public virtual int Run(InterpretedFrame frame);
}
public enum IronPython.Compiler.PythonOperator : Enum {
    public int value__;
    public static PythonOperator None;
    public static PythonOperator Not;
    public static PythonOperator Pos;
    public static PythonOperator Invert;
    public static PythonOperator Negate;
    public static PythonOperator Add;
    public static PythonOperator Subtract;
    public static PythonOperator Multiply;
    public static PythonOperator MatMult;
    public static PythonOperator FloorDivide;
    public static PythonOperator TrueDivide;
    public static PythonOperator Mod;
    public static PythonOperator BitwiseAnd;
    public static PythonOperator BitwiseOr;
    public static PythonOperator Xor;
    public static PythonOperator LeftShift;
    public static PythonOperator RightShift;
    public static PythonOperator Power;
    public static PythonOperator LessThan;
    public static PythonOperator LessThanOrEqual;
    public static PythonOperator GreaterThan;
    public static PythonOperator GreaterThanOrEqual;
    public static PythonOperator Equal;
    public static PythonOperator NotEqual;
    public static PythonOperator In;
    public static PythonOperator NotIn;
    public static PythonOperator IsNot;
    public static PythonOperator Is;
    public static PythonOperator ExclusiveOr;
    public static PythonOperator Equals;
    public static PythonOperator NotEquals;
}
internal class IronPython.Compiler.PythonRawGlobalValueExpression : Expression {
    private PythonGlobalVariableExpression _global;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public PythonGlobalVariableExpression Global { get; }
    public PythonRawGlobalValueExpression(PythonGlobalVariableExpression global);
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public virtual bool get_CanReduce();
    public PythonGlobalVariableExpression get_Global();
    public virtual Expression Reduce();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
}
internal class IronPython.Compiler.PythonSavableScriptCode : SavableScriptCode {
    private Expression`1<LookupCompilationDelegate> _code;
    private String[] _names;
    private string _moduleName;
    public PythonSavableScriptCode(Expression`1<LookupCompilationDelegate> code, SourceUnit sourceUnit, String[] names, string moduleName);
    protected virtual KeyValuePair`2<MethodBuilder, Type> CompileForSave(TypeGen typeGen);
    public virtual object Run();
    public virtual object Run(Scope scope);
    public virtual Scope CreateScope();
    private sealed virtual override string Microsoft.Scripting.ICustomScriptCodeData.GetCustomScriptCodeData();
}
internal class IronPython.Compiler.PythonScriptCode : RunnableScriptCode {
    private CodeContext _defaultContext;
    private LookupCompilationDelegate _target;
    private LookupCompilationDelegate _tracingTarget;
    private CodeContext DefaultContext { get; }
    public PythonScriptCode(PythonAst ast);
    public virtual object Run();
    public virtual object Run(Scope scope);
    private object RunWorker(CodeContext ctx);
    private LookupCompilationDelegate GetTarget(bool register);
    public virtual FunctionCode GetFunctionCode(bool register);
    public virtual Scope CreateScope();
    private object EvalWrapper(CodeContext ctx);
    private LookupCompilationDelegate CompileBody(LightExpression`1<LookupCompilationDelegate> lambda);
    private bool ShouldInterpret(PythonContext pc);
    private static PythonConstantExpression ExtractConstant(LightExpression`1<LookupCompilationDelegate> lambda);
    private void EnsureTarget(bool register);
    private CodeContext get_DefaultContext();
    private void EnsureTracingTarget();
}
internal class IronPython.Compiler.PythonSetGlobalInstruction : Instruction {
    private PythonGlobal _global;
    public int ProducedStack { get; }
    public int ConsumedStack { get; }
    public PythonSetGlobalInstruction(PythonGlobal global);
    public virtual int get_ProducedStack();
    public virtual int get_ConsumedStack();
    public virtual int Run(InterpretedFrame frame);
    public virtual string ToString();
}
internal class IronPython.Compiler.PythonSetGlobalVariableExpression : Expression {
    private PythonGlobalVariableExpression _global;
    private Expression _value;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public Expression Value { get; }
    public bool CanReduce { get; }
    public PythonGlobalVariableExpression Global { get; }
    public PythonSetGlobalVariableExpression(PythonGlobalVariableExpression global, Expression value);
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public Expression get_Value();
    public virtual bool get_CanReduce();
    public PythonGlobalVariableExpression get_Global();
    public virtual Expression Reduce();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public sealed virtual void AddInstructions(LightCompiler compiler);
}
internal class IronPython.Compiler.ReducableDynamicExpression : Expression {
    private Expression _reduction;
    [CompilerGeneratedAttribute]
private DynamicMetaObjectBinder <Binder>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Expression> <Args>k__BackingField;
    public DynamicMetaObjectBinder Binder { get; }
    public IList`1<Expression> Args { get; }
    public bool CanReduce { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public ReducableDynamicExpression(Expression reduction, DynamicMetaObjectBinder binder, IList`1<Expression> args);
    [CompilerGeneratedAttribute]
public DynamicMetaObjectBinder get_Binder();
    [CompilerGeneratedAttribute]
public IList`1<Expression> get_Args();
    public virtual bool get_CanReduce();
    public sealed virtual ExpressionType get_NodeType();
    public sealed virtual Type get_Type();
    public virtual Expression Reduce();
    private sealed virtual override Expression Microsoft.Scripting.Ast.ILightExceptionAwareExpression.ReduceForLightExceptions();
}
internal class IronPython.Compiler.ReferenceClosureInfo : object {
    public PythonVariable Variable;
    public bool IsClosedOver;
    public PythonVariable PythonVariable { get; }
    public ReferenceClosureInfo(PythonVariable variable, int index, Expression tupleExpr, bool accessedInThisScope);
    public PythonVariable get_PythonVariable();
}
internal abstract class IronPython.Compiler.RunnableScriptCode : ScriptCode {
    internal FunctionCode _code;
    private PythonAst _ast;
    public PythonAst Ast { get; }
    public FunctionCode Code { get; }
    public RunnableScriptCode(PythonAst ast);
    public virtual object Run();
    public virtual object Run(Scope scope);
    protected static CodeContext CreateTopLevelCodeContext(PythonDictionary dict, LanguageContext context);
    protected static CodeContext GetContextForScope(Scope scope, SourceUnit sourceUnit);
    protected FunctionCode EnsureFunctionCode(Delegate dlg);
    protected FunctionCode EnsureFunctionCode(Delegate dlg, bool tracing, bool register);
    public PythonAst get_Ast();
    public FunctionCode get_Code();
    public abstract virtual FunctionCode GetFunctionCode(bool register);
    protected void PushFrame(CodeContext context, FunctionCode code);
    protected void PopFrame();
}
internal class IronPython.Compiler.RuntimeScriptCode : RunnableScriptCode {
    private CodeContext _optimizedContext;
    private Func`2<FunctionCode, object> _optimizedTarget;
    private ScriptCode _unoptimizedCode;
    public RuntimeScriptCode(PythonAst ast, CodeContext codeContext);
    public virtual object Run();
    public virtual object Run(Scope scope);
    public virtual FunctionCode GetFunctionCode(bool register);
    private object InvokeTarget(Scope scope);
    private object OptimizedEvalWrapper(FunctionCode funcCode);
    public virtual Scope CreateScope();
    private void EnsureCompiled();
    private Func`2<FunctionCode, object> Compile();
}
public class IronPython.Compiler.SymbolToken : Token {
    private string _image;
    public string Symbol { get; }
    public object Value { get; }
    public string Image { get; }
    public SymbolToken(TokenKind kind, string image);
    public string get_Symbol();
    public virtual object get_Value();
    public virtual string get_Image();
}
public abstract class IronPython.Compiler.Token : object {
    private TokenKind _kind;
    public TokenKind Kind { get; }
    public object Value { get; }
    public string Image { get; }
    protected Token(TokenKind kind);
    public TokenKind get_Kind();
    public virtual object get_Value();
    public virtual string ToString();
    public abstract virtual string get_Image();
}
public class IronPython.Compiler.Tokenizer : TokenizerService {
    private State _state;
    private bool _verbatim;
    internal bool _dontImplyDedent;
    private bool _disableLineFeedLineSeparator;
    private SourceUnit _sourceUnit;
    private ErrorSink _errors;
    private bool _endContinues;
    private List`1<int> _newLineLocations;
    private SourceLocation _initialLocation;
    private TextReader _reader;
    private Char[] _buffer;
    private bool _multiEolns;
    private int _position;
    private int _end;
    private int _tokenEnd;
    private int _start;
    private int _tokenStartIndex;
    private int _tokenEndIndex;
    private bool _bufferResized;
    private static int EOF;
    private static int MaxIndent;
    private static int DefaultBufferCapacity;
    private Dictionary`2<object, NameToken> _names;
    private static object _currentName;
    public bool IsRestartable { get; }
    public object CurrentState { get; }
    public SourceLocation CurrentPosition { get; }
    public SourceUnit SourceUnit { get; }
    public ErrorSink ErrorSink { get; public set; }
    public bool IsEndOfFile { get; }
    public IndexSpan TokenSpan { get; }
    public int GroupingLevel { get; }
    public bool EndContinues { get; }
    private int TokenLength { get; }
    private SourceLocation BufferTokenEnd { get; }
    private IndexSpan BufferTokenSpan { get; }
    private bool AtBeginning { get; }
    private int CurrentIndex { get; }
    public Tokenizer(ErrorSink errorSink);
    public Tokenizer(ErrorSink errorSink, PythonCompilerOptions options);
    internal Tokenizer(ErrorSink errorSink, PythonCompilerOptions options, bool verbatim);
    private static Tokenizer();
    public virtual bool get_IsRestartable();
    public virtual object get_CurrentState();
    public virtual SourceLocation get_CurrentPosition();
    public SourceLocation IndexToLocation(int index);
    public SourceUnit get_SourceUnit();
    public virtual ErrorSink get_ErrorSink();
    public virtual void set_ErrorSink(ErrorSink value);
    public bool get_IsEndOfFile();
    public IndexSpan get_TokenSpan();
    public void Initialize(SourceUnit sourceUnit);
    public virtual void Initialize(object state, TextReader reader, SourceUnit sourceUnit, SourceLocation initialLocation);
    public void Initialize(object state, TextReader reader, SourceUnit sourceUnit, SourceLocation initialLocation, int bufferCapacity);
    public void Initialize(object state, TextReader reader, SourceUnit sourceUnit, SourceLocation initialLocation, int bufferCapacity, PythonCompilerOptions compilerOptions);
    public virtual TokenInfo ReadToken();
    internal bool TryGetTokenString(int len, String& tokenString);
    public Token GetNextToken();
    private Token Next();
    private int SkipWhiteSpace(bool atBeginning);
    private int SkipSingleLineComment();
    private Token ReadSingleLineComment();
    private Token ReadNameOrString();
    private Token ReadNameOrBytes();
    private Token ReadNameOrRawStringOrBytes();
    private Token ReadEof();
    private static ErrorToken BadChar(int ch);
    private static bool IsNameStart(int ch);
    private static bool IsNamePart(int ch);
    private Token ReadString(char quote, bool isRaw, bool isUni, bool isBytes);
    private Token ContinueString(char quote, bool isRaw, bool isUnicode, bool isBytes, bool isTriple, int startAdd);
    private Token MakeStringToken(char quote, bool isRaw, bool isUnicode, bool isBytes, bool isTriple, int start, int length);
    private void UnexpectedEndOfString(bool isTriple, bool isIncomplete);
    private Token ReadNumber(int start);
    private Token ReadBinaryNumber();
    private Token ReadOctalNumber();
    private Token ReadHexNumber();
    private Token ReadFraction();
    private Token ReadExponent();
    private Token ReadName();
    public int get_GroupingLevel();
    public bool get_EndContinues();
    private bool ReadNewline();
    private void CheckIndent(StringBuilder sb);
    private void SetIndent(int spaces, StringBuilder chars);
    private int DoDedent(int spaces, int current);
    private object ParseInteger(string s, int radix);
    private object ParseFloat(string s);
    internal static string GetEncodingNameFromComment(string line);
    private void ReportSyntaxError(SourceSpan span, string message, int errorCode);
    private void ReportSyntaxError(IndexSpan span, string message, int errorCode);
    [ConditionalAttribute("DUMP_TOKENS")]
private void DumpBeginningOfUnit();
    [ConditionalAttribute("DUMP_TOKENS")]
private static void DumpToken(Token token);
    public Int32[] GetLineLocations();
    private string GetTokenSubstring(int offset);
    private string GetTokenSubstring(int offset, int length);
    [ConditionalAttribute("DEBUG")]
private void CheckInvariants();
    private int Peek();
    private int ReadLine();
    private void MarkTokenEnd();
    [ConditionalAttribute("DUMP_TOKENS")]
private void DumpToken();
    private void BufferBack();
    internal string GetTokenString();
    private int get_TokenLength();
    private void SeekRelative(int disp);
    private SourceLocation get_BufferTokenEnd();
    private IndexSpan get_BufferTokenSpan();
    private bool NextChar(int ch);
    private int NextChar();
    private bool get_AtBeginning();
    private int get_CurrentIndex();
    private void DiscardToken();
    private int ReadEolnOpt(int current);
    private bool IsEoln(int current);
    private void RefillBuffer();
    private static void ResizeInternal(Char[]& array, int newSize, int start, int count);
    [ConditionalAttribute("DEBUG")]
private void ClearInvalidChars();
    private Token NextOperator(int ch);
}
public enum IronPython.Compiler.TokenKind : Enum {
    public int value__;
    public static TokenKind EndOfFile;
    public static TokenKind Error;
    public static TokenKind NewLine;
    public static TokenKind Indent;
    public static TokenKind Dedent;
    public static TokenKind Comment;
    public static TokenKind Name;
    public static TokenKind Constant;
    public static TokenKind Dot;
    public static TokenKind At;
    public static TokenKind Add;
    public static TokenKind AddEqual;
    public static TokenKind Subtract;
    public static TokenKind SubtractEqual;
    public static TokenKind Power;
    public static TokenKind PowerEqual;
    public static TokenKind Multiply;
    public static TokenKind MultiplyEqual;
    public static TokenKind MatMult;
    public static TokenKind MatMultEqual;
    public static TokenKind FloorDivide;
    public static TokenKind FloorDivideEqual;
    public static TokenKind TrueDivide;
    public static TokenKind TrueDivideEqual;
    public static TokenKind Mod;
    public static TokenKind ModEqual;
    public static TokenKind LeftShift;
    public static TokenKind LeftShiftEqual;
    public static TokenKind RightShift;
    public static TokenKind RightShiftEqual;
    public static TokenKind BitwiseAnd;
    public static TokenKind BitwiseAndEqual;
    public static TokenKind BitwiseOr;
    public static TokenKind BitwiseOrEqual;
    public static TokenKind ExclusiveOr;
    public static TokenKind ExclusiveOrEqual;
    public static TokenKind LessThan;
    public static TokenKind GreaterThan;
    public static TokenKind LessThanOrEqual;
    public static TokenKind GreaterThanOrEqual;
    public static TokenKind Equals;
    public static TokenKind NotEquals;
    public static TokenKind LeftParenthesis;
    public static TokenKind RightParenthesis;
    public static TokenKind LeftBracket;
    public static TokenKind RightBracket;
    public static TokenKind LeftBrace;
    public static TokenKind RightBrace;
    public static TokenKind Comma;
    public static TokenKind Colon;
    public static TokenKind Semicolon;
    public static TokenKind Assign;
    public static TokenKind Twiddle;
    public static TokenKind RightArrow;
    public static TokenKind ReturnAnnotation;
    public static TokenKind FirstKeyword;
    public static TokenKind LastKeyword;
    public static TokenKind KeywordAnd;
    public static TokenKind KeywordAssert;
    public static TokenKind KeywordBreak;
    public static TokenKind KeywordClass;
    public static TokenKind KeywordContinue;
    public static TokenKind KeywordDef;
    public static TokenKind KeywordDel;
    public static TokenKind KeywordElseIf;
    public static TokenKind KeywordElse;
    public static TokenKind KeywordExcept;
    public static TokenKind KeywordFinally;
    public static TokenKind KeywordFor;
    public static TokenKind KeywordFrom;
    public static TokenKind KeywordGlobal;
    public static TokenKind KeywordIf;
    public static TokenKind KeywordImport;
    public static TokenKind KeywordIn;
    public static TokenKind KeywordIs;
    public static TokenKind KeywordLambda;
    public static TokenKind KeywordNot;
    public static TokenKind KeywordOr;
    public static TokenKind KeywordPass;
    public static TokenKind KeywordRaise;
    public static TokenKind KeywordReturn;
    public static TokenKind KeywordTry;
    public static TokenKind KeywordWhile;
    public static TokenKind KeywordYield;
    public static TokenKind KeywordAs;
    public static TokenKind KeywordWith;
    public static TokenKind KeywordAsync;
    public static TokenKind KeywordNonlocal;
    public static TokenKind NLToken;
}
public static class IronPython.Compiler.Tokens : object {
    public static Token EndOfFileToken;
    public static Token NewLineToken;
    public static Token NLToken;
    public static Token IndentToken;
    public static Token DedentToken;
    public static Token CommentToken;
    public static Token NoneToken;
    public static Token TrueToken;
    public static Token FalseToken;
    public static Token DotToken;
    [CompilerGeneratedAttribute]
private static Token <AddToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <AddEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <SubtractToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <SubtractEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <PowerToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <PowerEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <MultiplyToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <MultiplyEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <MatMultToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <MatMultEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <FloorDivideToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <FloorDivideEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <TrueDivideToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <TrueDivideEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <ModToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <ModEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <LeftShiftToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <LeftShiftEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <RightShiftToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <RightShiftEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <BitwiseAndToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <BitwiseAndEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <BitwiseOrToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <BitwiseOrEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <ExclusiveOrToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <ExclusiveOrEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <LessThanToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <GreaterThanToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <LessThanOrEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <GreaterThanOrEqualToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <EqualsToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <NotEqualsToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <LeftParenthesisToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <RightParenthesisToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <LeftBracketToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <RightBracketToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <LeftBraceToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <RightBraceToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <CommaToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <ColonToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <SemicolonToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <AssignToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <TwiddleToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <RightArrowToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <ReturnAnnotationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordAndToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordAsToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordAssertToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordAsyncToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordBreakToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordClassToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordContinueToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordDefToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordDelToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordElseIfToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordElseToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordExceptToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordFinallyToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordForToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordFromToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordGlobalToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordIfToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordImportToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordInToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordIsToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordLambdaToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordNonlocalToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordNotToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordOrToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordPassToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordRaiseToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordReturnToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordTryToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordWhileToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordWithToken>k__BackingField;
    [CompilerGeneratedAttribute]
private static Token <KeywordYieldToken>k__BackingField;
    public static Token AddToken { get; }
    public static Token AddEqualToken { get; }
    public static Token SubtractToken { get; }
    public static Token SubtractEqualToken { get; }
    public static Token PowerToken { get; }
    public static Token PowerEqualToken { get; }
    public static Token MultiplyToken { get; }
    public static Token MultiplyEqualToken { get; }
    public static Token MatMultToken { get; }
    public static Token MatMultEqualToken { get; }
    public static Token FloorDivideToken { get; }
    public static Token FloorDivideEqualToken { get; }
    public static Token TrueDivideToken { get; }
    public static Token TrueDivideEqualToken { get; }
    public static Token ModToken { get; }
    public static Token ModEqualToken { get; }
    public static Token LeftShiftToken { get; }
    public static Token LeftShiftEqualToken { get; }
    public static Token RightShiftToken { get; }
    public static Token RightShiftEqualToken { get; }
    public static Token BitwiseAndToken { get; }
    public static Token BitwiseAndEqualToken { get; }
    public static Token BitwiseOrToken { get; }
    public static Token BitwiseOrEqualToken { get; }
    public static Token ExclusiveOrToken { get; }
    public static Token ExclusiveOrEqualToken { get; }
    public static Token LessThanToken { get; }
    public static Token GreaterThanToken { get; }
    public static Token LessThanOrEqualToken { get; }
    public static Token GreaterThanOrEqualToken { get; }
    public static Token EqualsToken { get; }
    public static Token NotEqualsToken { get; }
    public static Token LeftParenthesisToken { get; }
    public static Token RightParenthesisToken { get; }
    public static Token LeftBracketToken { get; }
    public static Token RightBracketToken { get; }
    public static Token LeftBraceToken { get; }
    public static Token RightBraceToken { get; }
    public static Token CommaToken { get; }
    public static Token ColonToken { get; }
    public static Token SemicolonToken { get; }
    public static Token AssignToken { get; }
    public static Token TwiddleToken { get; }
    public static Token RightArrowToken { get; }
    public static Token ReturnAnnotationToken { get; }
    public static Token KeywordAndToken { get; }
    public static Token KeywordAsToken { get; }
    public static Token KeywordAssertToken { get; }
    public static Token KeywordAsyncToken { get; }
    public static Token KeywordBreakToken { get; }
    public static Token KeywordClassToken { get; }
    public static Token KeywordContinueToken { get; }
    public static Token KeywordDefToken { get; }
    public static Token KeywordDelToken { get; }
    public static Token KeywordElseIfToken { get; }
    public static Token KeywordElseToken { get; }
    public static Token KeywordExceptToken { get; }
    public static Token KeywordFinallyToken { get; }
    public static Token KeywordForToken { get; }
    public static Token KeywordFromToken { get; }
    public static Token KeywordGlobalToken { get; }
    public static Token KeywordIfToken { get; }
    public static Token KeywordImportToken { get; }
    public static Token KeywordInToken { get; }
    public static Token KeywordIsToken { get; }
    public static Token KeywordLambdaToken { get; }
    public static Token KeywordNonlocalToken { get; }
    public static Token KeywordNotToken { get; }
    public static Token KeywordOrToken { get; }
    public static Token KeywordPassToken { get; }
    public static Token KeywordRaiseToken { get; }
    public static Token KeywordReturnToken { get; }
    public static Token KeywordTryToken { get; }
    public static Token KeywordWhileToken { get; }
    public static Token KeywordWithToken { get; }
    public static Token KeywordYieldToken { get; }
    private static Tokens();
    [CompilerGeneratedAttribute]
public static Token get_AddToken();
    [CompilerGeneratedAttribute]
public static Token get_AddEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_SubtractToken();
    [CompilerGeneratedAttribute]
public static Token get_SubtractEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_PowerToken();
    [CompilerGeneratedAttribute]
public static Token get_PowerEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_MultiplyToken();
    [CompilerGeneratedAttribute]
public static Token get_MultiplyEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_MatMultToken();
    [CompilerGeneratedAttribute]
public static Token get_MatMultEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_FloorDivideToken();
    [CompilerGeneratedAttribute]
public static Token get_FloorDivideEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_TrueDivideToken();
    [CompilerGeneratedAttribute]
public static Token get_TrueDivideEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_ModToken();
    [CompilerGeneratedAttribute]
public static Token get_ModEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_LeftShiftToken();
    [CompilerGeneratedAttribute]
public static Token get_LeftShiftEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_RightShiftToken();
    [CompilerGeneratedAttribute]
public static Token get_RightShiftEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_BitwiseAndToken();
    [CompilerGeneratedAttribute]
public static Token get_BitwiseAndEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_BitwiseOrToken();
    [CompilerGeneratedAttribute]
public static Token get_BitwiseOrEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_ExclusiveOrToken();
    [CompilerGeneratedAttribute]
public static Token get_ExclusiveOrEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_LessThanToken();
    [CompilerGeneratedAttribute]
public static Token get_GreaterThanToken();
    [CompilerGeneratedAttribute]
public static Token get_LessThanOrEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_GreaterThanOrEqualToken();
    [CompilerGeneratedAttribute]
public static Token get_EqualsToken();
    [CompilerGeneratedAttribute]
public static Token get_NotEqualsToken();
    [CompilerGeneratedAttribute]
public static Token get_LeftParenthesisToken();
    [CompilerGeneratedAttribute]
public static Token get_RightParenthesisToken();
    [CompilerGeneratedAttribute]
public static Token get_LeftBracketToken();
    [CompilerGeneratedAttribute]
public static Token get_RightBracketToken();
    [CompilerGeneratedAttribute]
public static Token get_LeftBraceToken();
    [CompilerGeneratedAttribute]
public static Token get_RightBraceToken();
    [CompilerGeneratedAttribute]
public static Token get_CommaToken();
    [CompilerGeneratedAttribute]
public static Token get_ColonToken();
    [CompilerGeneratedAttribute]
public static Token get_SemicolonToken();
    [CompilerGeneratedAttribute]
public static Token get_AssignToken();
    [CompilerGeneratedAttribute]
public static Token get_TwiddleToken();
    [CompilerGeneratedAttribute]
public static Token get_RightArrowToken();
    [CompilerGeneratedAttribute]
public static Token get_ReturnAnnotationToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordAndToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordAsToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordAssertToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordAsyncToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordBreakToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordClassToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordContinueToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordDefToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordDelToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordElseIfToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordElseToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordExceptToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordFinallyToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordForToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordFromToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordGlobalToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordIfToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordImportToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordInToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordIsToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordLambdaToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordNonlocalToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordNotToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordOrToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordPassToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordRaiseToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordReturnToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordTryToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordWhileToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordWithToken();
    [CompilerGeneratedAttribute]
public static Token get_KeywordYieldToken();
}
[IsReadOnlyAttribute]
internal class IronPython.Compiler.TokenWithSpan : ValueType {
    [CompilerGeneratedAttribute]
private IndexSpan <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private Token <Token>k__BackingField;
    public IndexSpan Span { get; }
    public Token Token { get; }
    public TokenWithSpan(Token token, IndexSpan span);
    [CompilerGeneratedAttribute]
public IndexSpan get_Span();
    [CompilerGeneratedAttribute]
public Token get_Token();
}
[ExtensionAttribute]
public static class IronPython.Hosting.Python : object {
    public static ScriptRuntime CreateRuntime();
    public static ScriptRuntime CreateRuntime(IDictionary`2<string, object> options);
    public static ScriptRuntime CreateRuntime(AppDomain domain);
    public static ScriptRuntime CreateRuntime(AppDomain domain, IDictionary`2<string, object> options);
    public static ScriptEngine CreateEngine();
    public static ScriptEngine CreateEngine(IDictionary`2<string, object> options);
    public static ScriptEngine CreateEngine(AppDomain domain);
    public static ScriptEngine CreateEngine(AppDomain domain, IDictionary`2<string, object> options);
    public static ScriptEngine GetEngine(ScriptRuntime runtime);
    [ExtensionAttribute]
public static ScriptScope GetSysModule(ScriptRuntime runtime);
    [ExtensionAttribute]
public static ScriptScope GetSysModule(ScriptEngine engine);
    [ExtensionAttribute]
public static ScriptScope GetBuiltinModule(ScriptRuntime runtime);
    [ExtensionAttribute]
public static ScriptScope GetBuiltinModule(ScriptEngine engine);
    [ExtensionAttribute]
public static ScriptScope GetClrModule(ScriptRuntime runtime);
    [ExtensionAttribute]
public static ScriptScope GetClrModule(ScriptEngine engine);
    [ExtensionAttribute]
public static ScriptScope ImportModule(ScriptRuntime runtime, string moduleName);
    [ExtensionAttribute]
public static ScriptScope ImportModule(ScriptEngine engine, string moduleName);
    [ExtensionAttribute]
public static void ImportModule(ScriptScope scope, string moduleName);
    [ExtensionAttribute]
public static void SetHostVariables(ScriptRuntime runtime, string prefix, string executable, string version);
    [ExtensionAttribute]
public static void SetHostVariables(ScriptEngine engine, string prefix, string executable, string version);
    [ExtensionAttribute]
public static void SetTrace(ScriptEngine engine, TracebackDelegate traceFunc);
    [ExtensionAttribute]
public static void SetTrace(ScriptRuntime runtime, TracebackDelegate traceFunc);
    [ExtensionAttribute]
public static void CallTracing(ScriptRuntime runtime, object traceFunc, Object[] args);
    [ExtensionAttribute]
public static void CallTracing(ScriptEngine engine, object traceFunc, Object[] args);
    public static ScriptRuntimeSetup CreateRuntimeSetup(IDictionary`2<string, object> options);
    public static LanguageSetup CreateLanguageSetup(IDictionary`2<string, object> options);
    [ExtensionAttribute]
public static ScriptScope CreateModule(ScriptEngine engine, string name);
    [ExtensionAttribute]
public static ScriptScope CreateModule(ScriptEngine engine, string name, string filename);
    [ExtensionAttribute]
public static ScriptScope CreateModule(ScriptEngine engine, string name, string filename, string docString);
    [ExtensionAttribute]
public static String[] GetModuleFilenames(ScriptEngine engine);
    private static PythonService GetPythonService(ScriptEngine engine);
    private static PythonContext GetPythonContext(ScriptEngine engine);
}
internal class IronPython.Hosting.PythonCodeDomCodeGen : CodeDomCodeGen {
    private Stack`1<int> _indents;
    private int _generatedIndent;
    protected virtual void WriteExpressionStatement(CodeExpressionStatement s);
    protected virtual void WriteSnippetExpression(CodeSnippetExpression e);
    protected virtual void WriteSnippetStatement(CodeSnippetStatement s);
    protected virtual void WriteFunctionDefinition(CodeMemberMethod func);
    protected virtual string QuoteString(string val);
    private string IndentSnippet(string block);
    private string IndentSnippetStatement(string block);
}
public class IronPython.Hosting.PythonCommandLine : CommandLine {
    private PythonContext PythonContext { get; }
    private PythonConsoleOptions Options { get; }
    protected string Logo { get; }
    protected string Prompt { get; }
    public string PromptContinuation { get; }
    protected ErrorSink ErrorSink { get; }
    private PythonContext Language { get; }
    private PythonContext get_PythonContext();
    private PythonConsoleOptions get_Options();
    protected virtual string get_Logo();
    public static string GetLogoDisplay();
    private int GetEffectiveExitCode(SystemExitException e);
    protected virtual void Shutdown();
    protected virtual int Run();
    protected virtual int RunInteractiveLoop();
    protected virtual void Initialize();
    protected virtual Scope CreateScope();
    private void InitializePath(Int32& pathIndex);
    private void InitializeEnvironmentVariables();
    private void InitializeModules();
    private void InitializeExtensionDLLs();
    private void ImportSite();
    protected virtual int RunInteractive();
    protected virtual string get_Prompt();
    public virtual string get_PromptContinuation();
    private void RunStartup();
    protected virtual Nullable`1<int> TryInteractiveAction();
    private Nullable`1<int> TryInteractiveActionWorker();
    private Nullable`1<int> RunOneInteraction();
    protected virtual ErrorSink get_ErrorSink();
    protected virtual int GetNextAutoIndentSize(string text);
    protected virtual int RunCommand(string command);
    private int RunCommandWorker(string command);
    protected virtual int RunFile(string fileName);
    private int RunFileWorker(string fileName);
    public virtual IList`1<string> GetGlobals(string name);
    protected virtual void UnhandledException(Exception e);
    private PythonContext get_Language();
}
[CLSCompliantAttribute("True")]
public class IronPython.Hosting.PythonConsoleOptions : ConsoleOptions {
    [CompilerGeneratedAttribute]
private bool <IgnoreEnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipImportSite>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleToRun>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipFirstSourceLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BasicConsole>k__BackingField;
    public bool IgnoreEnvironmentVariables { get; public set; }
    public bool SkipImportSite { get; public set; }
    public string ModuleToRun { get; public set; }
    public bool SkipFirstSourceLine { get; public set; }
    public bool BasicConsole { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreEnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_IgnoreEnvironmentVariables(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipImportSite();
    [CompilerGeneratedAttribute]
public void set_SkipImportSite(bool value);
    [CompilerGeneratedAttribute]
public string get_ModuleToRun();
    [CompilerGeneratedAttribute]
public void set_ModuleToRun(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipFirstSourceLine();
    [CompilerGeneratedAttribute]
public void set_SkipFirstSourceLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_BasicConsole();
    [CompilerGeneratedAttribute]
public void set_BasicConsole(bool value);
}
public class IronPython.Hosting.PythonOptionsParser : OptionsParser`1<PythonConsoleOptions> {
    private List`1<string> _warningFilters;
    protected virtual void ParseArgument(string arg);
    protected virtual void AfterParse();
    public virtual void GetHelp(String& commandLine, String[0...,0...]& options, String[0...,0...]& environmentVariables, String& comments);
}
public class IronPython.Hosting.PythonService : MarshalByRefObject {
    private ScriptEngine _engine;
    private PythonContext _context;
    private ScriptScope _sys;
    private ScriptScope _builtins;
    private ScriptScope _clr;
    public PythonService(PythonContext context, ScriptEngine engine);
    public ScriptScope GetSystemState();
    public ScriptScope GetBuiltins();
    public ScriptScope GetClr();
    public ScriptScope CreateModule(string name, string filename, string docString);
    public ScriptScope ImportModule(ScriptEngine engine, string name);
    public String[] GetModuleFilenames();
    public void DispatchCommand(Action command);
    public ObjectHandle GetSetCommandDispatcher(ObjectHandle dispatcher);
    public ObjectHandle GetLocalCommandDispatcher();
    public virtual object InitializeLifetimeService();
    [CompilerGeneratedAttribute]
private void <GetLocalCommandDispatcher>b__14_0(Action action);
}
public static class IronPython.Modules._ast : object {
    public static string __version__;
    public static int PyCF_ONLY_AST;
    private static Char[] MODULE_NAME_SPLITTER;
    internal static bool _containsYield;
    public static PythonType arg { get; }
    private static _ast();
    internal static PythonAst ConvertToPythonAst(CodeContext codeContext, AST source, string filename);
    internal static AST BuildAst(CodeContext context, SourceUnit sourceUnit, PythonCompilerOptions opts, string mode);
    private static mod ConvertToAST(PythonAst pythonAst, string kind);
    private static mod ConvertToAST(SuiteStatement suite, string kind);
    public static PythonType get_arg();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DocumentationAttribute("")]
public static class IronPython.Modules.Builtin : object {
    public static string __doc__;
    [NullableAttribute("2")]
public static object __package__;
    public static string __name__;
    [NullableAttribute("2")]
public static object None;
    private static object UndefinedKeywordArgument;
    private static BigInteger MaxDouble;
    private static BigInteger MinDouble;
    public static object True { get; }
    public static object False { get; }
    public static Ellipsis Ellipsis { get; }
    public static NotImplementedType NotImplemented { get; }
    public static PythonType bool { get; }
    public static PythonType bytes { get; }
    public static PythonType bytearray { get; }
    public static PythonType classmethod { get; }
    public static PythonType complex { get; }
    public static PythonType dict { get; }
    public static PythonType enumerate { get; }
    public static PythonType filter { get; }
    public static PythonType float { get; }
    public static PythonType frozenset { get; }
    public static PythonType int { get; }
    public static PythonType set { get; }
    public static PythonType list { get; }
    public static PythonType memoryview { get; }
    public static PythonType map { get; }
    public static PythonType object { get; }
    public static PythonType property { get; }
    public static PythonType range { get; }
    public static PythonType reversed { get; }
    public static PythonType slice { get; }
    public static PythonType staticmethod { get; }
    public static PythonType super { get; }
    public static PythonType str { get; }
    public static PythonType tuple { get; }
    public static PythonType type { get; }
    public static PythonType zip { get; }
    public static PythonType BaseException { get; }
    public static PythonType EnvironmentError { get; }
    public static PythonType IOError { get; }
    public static PythonType WindowsError { get; }
    public static PythonType SystemExit { get; }
    public static PythonType KeyboardInterrupt { get; }
    public static PythonType GeneratorExit { get; }
    public static PythonType Exception { get; }
    public static PythonType StopIteration { get; }
    public static PythonType StopAsyncIteration { get; }
    public static PythonType ArithmeticError { get; }
    public static PythonType FloatingPointError { get; }
    public static PythonType OverflowError { get; }
    public static PythonType ZeroDivisionError { get; }
    public static PythonType AssertionError { get; }
    public static PythonType AttributeError { get; }
    public static PythonType BufferError { get; }
    public static PythonType EOFError { get; }
    public static PythonType ImportError { get; }
    public static PythonType LookupError { get; }
    public static PythonType IndexError { get; }
    public static PythonType KeyError { get; }
    public static PythonType MemoryError { get; }
    public static PythonType NameError { get; }
    public static PythonType UnboundLocalError { get; }
    public static PythonType OSError { get; }
    public static PythonType BlockingIOError { get; }
    public static PythonType ChildProcessError { get; }
    public static PythonType ConnectionError { get; }
    public static PythonType BrokenPipeError { get; }
    public static PythonType ConnectionAbortedError { get; }
    public static PythonType ConnectionRefusedError { get; }
    public static PythonType ConnectionResetError { get; }
    public static PythonType FileExistsError { get; }
    public static PythonType FileNotFoundError { get; }
    public static PythonType InterruptedError { get; }
    public static PythonType IsADirectoryError { get; }
    public static PythonType NotADirectoryError { get; }
    public static PythonType PermissionError { get; }
    public static PythonType ProcessLookupError { get; }
    public static PythonType TimeoutError { get; }
    public static PythonType ReferenceError { get; }
    public static PythonType RuntimeError { get; }
    public static PythonType NotImplementedError { get; }
    public static PythonType RecursionError { get; }
    public static PythonType SyntaxError { get; }
    public static PythonType IndentationError { get; }
    public static PythonType TabError { get; }
    public static PythonType SystemError { get; }
    public static PythonType TypeError { get; }
    public static PythonType ValueError { get; }
    public static PythonType UnicodeError { get; }
    public static PythonType UnicodeDecodeError { get; }
    public static PythonType UnicodeEncodeError { get; }
    public static PythonType UnicodeTranslateError { get; }
    public static PythonType Warning { get; }
    public static PythonType DeprecationWarning { get; }
    public static PythonType PendingDeprecationWarning { get; }
    public static PythonType RuntimeWarning { get; }
    public static PythonType SyntaxWarning { get; }
    public static PythonType UserWarning { get; }
    public static PythonType FutureWarning { get; }
    public static PythonType ImportWarning { get; }
    public static PythonType UnicodeWarning { get; }
    public static PythonType BytesWarning { get; }
    public static PythonType ResourceWarning { get; }
    private static Builtin();
    public static object get_True();
    public static object get_False();
    public static Ellipsis get_Ellipsis();
    public static NotImplementedType get_NotImplemented();
    [DocumentationAttribute("__import__(name, globals, locals, fromlist, level) -> module

Import a module.")]
[LightThrowingAttribute]
public static object __import__(CodeContext context, string name, object globals, object locals, object fromlist, int level);
    [DocumentationAttribute("abs(number) -> number

Return the absolute value of the argument.")]
public static object abs(CodeContext context, object o);
    public static bool all(CodeContext context, object x);
    public static bool any(CodeContext context, object x);
    public static string ascii(CodeContext context, object object);
    public static string bin(object obj);
    public static PythonType get_bool();
    public static PythonType get_bytes();
    public static PythonType get_bytearray();
    [DocumentationAttribute("callable(object) -> bool

Return whether the object is callable (i.e., some kind of function).")]
public static bool callable(CodeContext context, object o);
    [DocumentationAttribute("chr(i) -> character

Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.")]
[LightThrowingAttribute]
public static object chr(int value);
    public static PythonType get_classmethod();
    [DocumentationAttribute("compile(source, filename, mode[, flags[, dont_inherit]]) -> code object

Compile a unit of source code.

The source can be compiled either as exec, eval, or single.
exec compiles the code as if it were a file
eval compiles the code as if were an expression
single compiles a single statement

source can either be a string, bytes or an AST object")]
public static object compile(CodeContext context, AST source, string filename, string mode, object flags, bool dont_inherit, int optimize);
    [DocumentationAttribute("")]
public static object compile(CodeContext context, IBufferProtocol source, string filename, string mode, object flags, bool dont_inherit, int optimize);
    [DocumentationAttribute("")]
public static object compile(CodeContext context, string source, string filename, string mode, object flags, bool dont_inherit, int optimize);
    private static SourceCodeKind ValidateCompileMode(string mode);
    private static object CompileHelper(CodeContext context, SourceUnit sourceUnit, string mode, object flags, bool dont_inherit);
    public static PythonType get_complex();
    public static void delattr(CodeContext context, object o, string name);
    public static PythonType get_dict();
    public static PythonList dir(CodeContext context);
    public static PythonList dir(CodeContext context, object o);
    public static object divmod(CodeContext context, object x, object y);
    public static PythonType get_enumerate();
    [NullableContextAttribute("2")]
internal static PythonDictionary GetAttrLocals(CodeContext context, object locals);
    [DocumentationAttribute("eval(source[, globals[, locals]]) -> value

Evaluate the expression in the context of globals and locals.
The expression can be either be a string, bytes
or a code object returned by compile()")]
[LightThrowingAttribute]
public static object eval(CodeContext context, FunctionCode code, PythonDictionary globals, object locals);
    [DocumentationAttribute("")]
[LightThrowingAttribute]
public static object eval(CodeContext context, IBufferProtocol expression, PythonDictionary globals, object locals);
    [LightThrowingAttribute]
public static object eval(CodeContext context, string expression, PythonDictionary globals, object locals);
    [DocumentationAttribute("exec(object[, globals[, locals]])

Read and execute code from an object, which can be a string, bytes or a code object.
The globals and locals are dictionaries providing the context.")]
public static void exec(CodeContext context, FunctionCode code, PythonDictionary globals, object locals);
    [DocumentationAttribute("")]
public static void exec(CodeContext context, string code, PythonDictionary globals, object locals);
    [DocumentationAttribute("")]
public static void exec(CodeContext context, IBufferProtocol code, PythonDictionary globals, object locals);
    public static PythonType get_filter();
    public static PythonType get_float();
    public static string format(CodeContext context, object argValue, string formatSpec);
    public static PythonType get_frozenset();
    public static object getattr(CodeContext context, object o, string name);
    [NullableContextAttribute("2")]
public static object getattr(CodeContext context, object o, string name, object def);
    public static PythonDictionary globals(CodeContext context);
    public static bool hasattr(CodeContext context, object o, string name);
    public static int hash(CodeContext context, object o);
    public static int hash(CodeContext context, PythonTuple o);
    public static int hash(CodeContext context, char o);
    public static int hash(CodeContext context, int o);
    public static int hash(CodeContext context, Extensible`1<int> o);
    public static int hash(CodeContext context, string o);
    public static int hash(CodeContext context, ExtensibleString o);
    public static int hash(CodeContext context, BigInteger o);
    public static int hash(CodeContext context, Extensible`1<BigInteger> o);
    public static int hash(CodeContext context, double o);
    public static void help(CodeContext context, object o);
    private static void help(CodeContext context, List`1<object> doced, StringBuilder doc, int indent, object obj);
    private static void AppendMultiLine(StringBuilder doc, string multiline, int indent);
    private static void AppendIndent(StringBuilder doc, int indent);
    public static string hex(object o);
    public static object id(object o);
    public static PythonType get_int();
    public static bool isinstance(object o, PythonType typeinfo);
    public static bool isinstance(CodeContext context, object o, PythonTuple typeinfo);
    [NullableContextAttribute("2")]
public static bool isinstance(CodeContext context, object o, object typeinfo);
    public static bool issubclass(CodeContext context, PythonType c, object typeinfo);
    public static bool issubclass(CodeContext context, PythonType c, PythonType typeinfo);
    [LightThrowingAttribute]
public static object issubclass(CodeContext context, object o, object typeinfo);
    public static object iter(CodeContext context, object o);
    public static object iter(CodeContext context, object func, object sentinel);
    public static int len(string str);
    public static int len(ExtensibleString str);
    public static int len(PythonList list);
    public static int len(PythonTuple tuple);
    public static int len(PythonDictionary dict);
    public static int len(ICollection collection);
    public static object len(object o);
    public static PythonType get_set();
    public static PythonType get_list();
    public static object locals(CodeContext context);
    public static PythonType get_memoryview();
    public static PythonType get_map();
    [NullableContextAttribute("2")]
public static object max(CodeContext context, object x);
    [NullableContextAttribute("2")]
public static object max(CodeContext context, object x, object y);
    public static object max(CodeContext context, Object[] args);
    [NullableContextAttribute("2")]
public static object max(CodeContext context, object x, IDictionary`2<string, object> dict);
    [NullableContextAttribute("2")]
public static object max(CodeContext context, object x, object y, IDictionary`2<string, object> dict);
    public static object max(CodeContext context, IDictionary`2<string, object> dict, Object[] args);
    private static Tuple`2<object, object> GetMaxKwArg(IDictionary`2<string, object> dict, bool isDefaultAllowed);
    [NullableContextAttribute("2")]
public static object min(CodeContext context, object x);
    [NullableContextAttribute("2")]
public static object min(CodeContext context, object x, object y);
    public static object min(CodeContext context, Object[] args);
    [NullableContextAttribute("2")]
public static object min(CodeContext context, object x, IDictionary`2<string, object> dict);
    [NullableContextAttribute("2")]
public static object min(CodeContext context, object x, object y, IDictionary`2<string, object> dict);
    public static object min(CodeContext context, IDictionary`2<string, object> dict, Object[] args);
    private static Tuple`2<object, object> GetMinKwArg(IDictionary`2<string, object> dict, bool isDefaultAllowed);
    private static Tuple`2<object, object> VerifyKeys(string name, IDictionary`2<string, object> dict);
    public static object next(IEnumerator iter);
    [NullableContextAttribute("2")]
public static object next(IEnumerator iter, object defaultVal);
    [LightThrowingAttribute]
public static object next(PythonGenerator gen);
    [NullableContextAttribute("2")]
[LightThrowingAttribute]
public static object next(PythonGenerator gen, object defaultVal);
    [NullableContextAttribute("2")]
public static object next(CodeContext context, object iter);
    [NullableContextAttribute("2")]
public static object next(CodeContext context, object iter, object defaultVal);
    public static PythonType get_object();
    public static string oct(object o);
    public static _IOBase open(CodeContext context, object file, string mode, int buffering, string encoding, string errors, string newline, bool closefd, object opener);
    public static FileIO open(CodeContext context, Stream stream);
    [NullableContextAttribute("2")]
public static int ord(object value);
    public static object pow(CodeContext context, object x, object y);
    [NullableContextAttribute("2")]
public static object pow(CodeContext context, object x, object y, object z);
    public static void print(CodeContext context, Object[] args);
    public static void print(CodeContext context, IDictionary`2<string, object> kwargs, Object[] args);
    [NullableContextAttribute("2")]
private static object AttrCollectionPop(IDictionary`2<string, object> kwargs, string name, object defaultValue);
    private static void PrintHelper(CodeContext context, string sep, string end, object file, Object[] args, bool flush);
    public static PythonType get_property();
    public static PythonType get_range();
    public static string input(CodeContext context);
    [NullableContextAttribute("2")]
public static string input(CodeContext context, object prompt);
    public static object repr(CodeContext context, object o);
    public static PythonType get_reversed();
    [NullableContextAttribute("2")]
public static object round(CodeContext context, object number);
    [NullableContextAttribute("2")]
public static object round(CodeContext context, object number, object ndigits);
    public static void setattr(CodeContext context, object o, string name, object val);
    public static PythonType get_slice();
    public static PythonList sorted(CodeContext context, object iterable, IDictionary`2<string, object> kwArgs);
    public static PythonType get_staticmethod();
    [NullableContextAttribute("2")]
public static object sum(CodeContext context, object sequence);
    public static object sum(CodeContext context, PythonList sequence);
    public static object sum(CodeContext context, PythonTuple sequence);
    [NullableContextAttribute("2")]
public static object sum(CodeContext context, object sequence, object start);
    public static object sum(CodeContext context, PythonList sequence, object start);
    public static object sum(CodeContext context, PythonTuple sequence, object start);
    [NullableContextAttribute("2")]
private static void ValidateSumStart(object start);
    [NullableContextAttribute("2")]
private static void SumOne(SumState& state, object current);
    private static void SumBigIntAndDouble(SumState& state, BigInteger bigInt, double dbl);
    private static void SumObject(SumState& state, object value, object current);
    public static PythonType get_super();
    public static PythonType get_str();
    public static PythonType get_tuple();
    public static PythonType get_type();
    [DocumentationAttribute("vars([object]) -> dictionary

Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.")]
public static object vars(CodeContext context);
    [NullableContextAttribute("2")]
public static object vars(CodeContext context, object object);
    public static PythonType get_zip();
    public static PythonType get_BaseException();
    public static PythonType get_EnvironmentError();
    public static PythonType get_IOError();
    public static PythonType get_WindowsError();
    internal static PythonCompilerOptions GetRuntimeGeneratedCodeCompilerOptions(CodeContext context, bool inheritContext, CompileFlags cflags);
    [NullableContextAttribute("2")]
private static bool GetCompilerInheritance(object dontInherit);
    private static CompileFlags GetCompilerFlags(int flags);
    private static CodeContext GetExecEvalScopeOptional(CodeContext context, PythonDictionary globals, object localsDict, bool copyModule);
    internal static CodeContext GetExecEvalScope(CodeContext context, PythonDictionary globals, PythonDictionary locals, bool copyModule, bool setBuiltinsToModule);
    public static void PerformModuleReload(PythonContext context, PythonDictionary dict);
    public static PythonType get_SystemExit();
    public static PythonType get_KeyboardInterrupt();
    public static PythonType get_GeneratorExit();
    public static PythonType get_Exception();
    public static PythonType get_StopIteration();
    public static PythonType get_StopAsyncIteration();
    public static PythonType get_ArithmeticError();
    public static PythonType get_FloatingPointError();
    public static PythonType get_OverflowError();
    public static PythonType get_ZeroDivisionError();
    public static PythonType get_AssertionError();
    public static PythonType get_AttributeError();
    public static PythonType get_BufferError();
    public static PythonType get_EOFError();
    public static PythonType get_ImportError();
    public static PythonType get_LookupError();
    public static PythonType get_IndexError();
    public static PythonType get_KeyError();
    public static PythonType get_MemoryError();
    public static PythonType get_NameError();
    public static PythonType get_UnboundLocalError();
    public static PythonType get_OSError();
    public static PythonType get_BlockingIOError();
    public static PythonType get_ChildProcessError();
    public static PythonType get_ConnectionError();
    public static PythonType get_BrokenPipeError();
    public static PythonType get_ConnectionAbortedError();
    public static PythonType get_ConnectionRefusedError();
    public static PythonType get_ConnectionResetError();
    public static PythonType get_FileExistsError();
    public static PythonType get_FileNotFoundError();
    public static PythonType get_InterruptedError();
    public static PythonType get_IsADirectoryError();
    public static PythonType get_NotADirectoryError();
    public static PythonType get_PermissionError();
    public static PythonType get_ProcessLookupError();
    public static PythonType get_TimeoutError();
    public static PythonType get_ReferenceError();
    public static PythonType get_RuntimeError();
    public static PythonType get_NotImplementedError();
    public static PythonType get_RecursionError();
    public static PythonType get_SyntaxError();
    public static PythonType get_IndentationError();
    public static PythonType get_TabError();
    public static PythonType get_SystemError();
    public static PythonType get_TypeError();
    public static PythonType get_ValueError();
    public static PythonType get_UnicodeError();
    public static PythonType get_UnicodeDecodeError();
    public static PythonType get_UnicodeEncodeError();
    public static PythonType get_UnicodeTranslateError();
    public static PythonType get_Warning();
    public static PythonType get_DeprecationWarning();
    public static PythonType get_PendingDeprecationWarning();
    public static PythonType get_RuntimeWarning();
    public static PythonType get_SyntaxWarning();
    public static PythonType get_UserWarning();
    public static PythonType get_FutureWarning();
    public static PythonType get_ImportWarning();
    public static PythonType get_UnicodeWarning();
    public static PythonType get_BytesWarning();
    public static PythonType get_ResourceWarning();
    [CompilerGeneratedAttribute]
internal static string <hex>g__ToHexString|75_0(BigInteger b);
}
internal class IronPython.Modules.CharInfo : object {
    internal string Name;
    internal string General_Category;
    internal int Canonical_Combining_Class;
    internal string Bidi_Class;
    internal string Decomposition_Type;
    internal Nullable`1<int> Numeric_Value_Decimal;
    internal Nullable`1<int> Numeric_Value_Digit;
    internal Nullable`1<double> Numeric_Value_Numeric;
    internal int Bidi_Mirrored;
    internal string East_Asian_Width;
    internal CharInfo(String[] info);
}
public static class IronPython.Modules.PythonImport : object {
    public static string __doc__;
    internal static int PythonSource;
    internal static int PythonCompiled;
    internal static int CExtension;
    internal static int PythonResource;
    internal static int PackageDirectory;
    internal static int CBuiltin;
    internal static int PythonFrozen;
    internal static int PythonCodeResource;
    internal static int SearchError;
    internal static int ImporterHook;
    private static object _lockCountKey;
    private static PythonImport();
    public static void PerformModuleReload(PythonContext context, PythonDictionary dict);
    public static PythonList extension_suffixes();
    public static bool lock_held(CodeContext context);
    public static void acquire_lock(CodeContext context);
    public static void release_lock(CodeContext context);
    public static object init_builtin(CodeContext context, string name);
    public static object init_frozen(string name);
    public static object get_frozen_object(string name);
    public static int is_builtin(CodeContext context, string name);
    public static bool is_frozen(string name);
    public static bool is_frozen_package(string name);
    public static void _fix_co_filename();
    private static long GetLockCount(CodeContext context);
    private static void SetLockCount(CodeContext context, long lockCount);
}
[ExtensionAttribute]
public static class IronPython.Modules.PythonIOModule : object {
    public static int DEFAULT_BUFFER_SIZE;
    private static object _blockingIOErrorKey;
    private static object _unsupportedOperationKey;
    private static int O_RDONLY;
    private static int O_WRONLY;
    private static int O_RDWR;
    private static int O_APPEND;
    private static int O_CREAT;
    private static int O_TRUNC;
    private static int O_EXCL;
    private static HashSet`1<char> _validModes;
    public static PythonType BlockingIOError { get; }
    private static PythonIOModule();
    [ExtensionAttribute]
private static void Write(Stream stream, ReadOnlySpan`1<byte> buffer);
    public static void PerformModuleReload(PythonContext context, PythonDictionary dict);
    public static _IOBase open(CodeContext context, object file, string mode, int buffering, string encoding, string errors, string newline, bool closefd, object opener);
    internal static TextIOWrapper CreateConsole(PythonContext context, SharedIO io, ConsoleStreamType type, string name, FileIO& fio);
    public static PythonType get_BlockingIOError();
    private static HashSet`1<char> MakeSet(string chars);
    private static BigInteger GetBigInt(object i, string msg);
    private static bool TryGetBigInt(object i, BigInteger& res);
    private static int GetInt(object i);
    private static int GetInt(object i, int defaultValue);
    private static int GetInt(object i, string msg, Object[] args);
    private static int GetInt(object i, int defaultValue, string msg, Object[] args);
    private static bool TryGetInt(object i, Int32& value);
    private static Bytes GetBytes(object o, string name);
}
public static class IronPython.Modules.PythonLocale : object {
    public static string __doc__;
    private static object _localeKey;
    public static int CHAR_MAX;
    public static int LC_ALL;
    public static int LC_COLLATE;
    public static int LC_CTYPE;
    public static int LC_MONETARY;
    public static int LC_NUMERIC;
    public static int LC_TIME;
    internal static string PreferredEncoding { get; }
    private static PythonLocale();
    public static void PerformModuleReload(PythonContext context, PythonDictionary dict);
    internal static void EnsureLocaleInitialized(PythonContext context);
    internal static string get_PreferredEncoding();
    [DocumentationAttribute("gets the default locale tuple")]
public static object _getdefaultlocale();
    [DocumentationAttribute("gets the locale's conventions table.  

The conventions table is a dictionary that contains information on how to use 
the locale for numeric and monetary formatting")]
public static object localeconv(CodeContext context);
    [DocumentationAttribute("Sets the current locale for the given category.

LC_ALL:       sets locale for all options below
LC_COLLATE:   sets locale for collation (strcoll and strxfrm) only
LC_CTYPE:     sets locale for CType [unused]
LC_MONETARY:  sets locale for the monetary functions (localeconv())
LC_NUMERIC:   sets the locale for numeric functions (slocaleconv())
LC_TIME:      sets the locale for time functions [unused]

If locale is None then the current setting is returned.
")]
public static object setlocale(CodeContext context, int category, string locale);
    [DocumentationAttribute("compares two strings using the current locale")]
public static int strcoll(CodeContext context, string string1, string string2);
    [DocumentationAttribute("returns a wrapped System.Globalization.SortKey that can be compared using the built-in cmp.

Note: Return value differs from CPython - it is not a string.")]
public static object strxfrm(CodeContext context, string string);
    private static string GetDefaultLocale();
    internal static LocaleInfo GetLocaleInfo(CodeContext context);
    private static PythonType _localeerror(CodeContext context);
}
internal class IronPython.Modules.RangeInfo : CharInfo {
    internal int First;
    internal int Last;
    internal RangeInfo(int first, int last, String[] info);
}
[ExtensionAttribute]
internal static class IronPython.Modules.StreamReaderExtensions : object {
    [IteratorStateMachineAttribute("IronPython.Modules.StreamReaderExtensions/<ReadLines>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<string> ReadLines(StreamReader reader);
}
public static class IronPython.Modules.SysModule : object {
    public static string __doc__;
    public static int api_version;
    public static string byteorder;
    public static string copyright;
    public static BuiltinFunction displayhook;
    public static BuiltinFunction __displayhook__;
    public static int dllhandle;
    public static BuiltinFunction excepthook;
    public static BuiltinFunction __excepthook__;
    public static int maxsize;
    public static int maxunicode;
    public static string prefix;
    public static PythonTuple subversion;
    public static string winver;
    public static intinfo int_info;
    public static string float_repr_style;
    public static floatinfo float_info;
    public static hashinfo hash_info;
    private static SysModule();
    private static string GetPrefix();
    public static object callstats();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DocumentationAttribute("displayhook(object) -> None

Print an object to sys.stdout and also save it in __builtin__._")]
public static void displayhookImpl(CodeContext context, object value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DocumentationAttribute("excepthook(exctype, value, traceback) -> None

Handle an exception by displaying it with a traceback on sys.stderr._")]
public static void excepthookImpl(CodeContext context, object exctype, object value, object traceback);
    public static int getcheckinterval();
    public static void setcheckinterval(int value);
    public static PythonTuple exc_info(CodeContext context);
    public static string intern(object o);
    public static void exit();
    public static void exit(object code);
    public static string getdefaultencoding(CodeContext context);
    public static string getfilesystemencoding();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static TraceBackFrame _getframeImpl(CodeContext context);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static TraceBackFrame _getframeImpl(CodeContext context, int depth);
    internal static TraceBackFrame _getframeImpl(CodeContext context, int depth, List`1<FunctionStack> stack);
    public static int getsizeof(object o);
    public static PythonTuple getwindowsversion();
    public static void settrace(CodeContext context, object o);
    public static object call_tracing(CodeContext context, object func, PythonTuple args);
    public static object gettrace(CodeContext context);
    public static void setrecursionlimit(CodeContext context, int limit);
    public static int getrecursionlimit(CodeContext context);
    public static void PerformModuleReload(PythonContext context, PythonDictionary dict);
    internal static void PublishBuiltinModuleNames(PythonContext context, PythonDictionary dict);
}
public static class IronPython.Modules.unicodedata : object {
    private static UCD ucd_5_2_0;
    private static UCD _ucd_3_2_0;
    public static UCD ucd_3_2_0 { get; }
    public static string unidata_version { get; }
    public static UCD get_ucd_3_2_0();
    public static string get_unidata_version();
    public static void PerformModuleReload(PythonContext context, IDictionary dict);
    [MemberNotNullAttribute("ucd_5_2_0")]
internal static void EnsureInitialized();
    public static string lookup(string name);
    [NullableContextAttribute("1")]
public static string name(string unichr);
    [NullableContextAttribute("2")]
public static object name(string unichr, object default);
    [NullableContextAttribute("2")]
internal static bool TryGetName(int rune, String& name);
    public static int decimal(char unichr, int default);
    public static int decimal(char unichr);
    public static object decimal(char unichr, object default);
    public static int digit(char unichr, int default);
    public static object digit(char unichr, object default);
    public static int digit(char unichr);
    public static double numeric(char unichr, double default);
    public static double numeric(char unichr);
    public static object numeric(char unichr, object default);
    public static string category(char unichr);
    public static string bidirectional(char unichr);
    public static int combining(char unichr);
    public static string east_asian_width(char unichr);
    public static int mirrored(char unichr);
    public static string decomposition(char unichr);
    public static string normalize(string form, string unistr);
}
[IsReadOnlyAttribute]
internal class IronPython.OSPlatform : ValueType {
    private string _osPlatform;
    [CompilerGeneratedAttribute]
private static OSPlatform <Linux>k__BackingField;
    [CompilerGeneratedAttribute]
private static OSPlatform <OSX>k__BackingField;
    [CompilerGeneratedAttribute]
private static OSPlatform <Windows>k__BackingField;
    public static OSPlatform Linux { get; }
    public static OSPlatform OSX { get; }
    public static OSPlatform Windows { get; }
    private OSPlatform(string osPlatform);
    private static OSPlatform();
    [CompilerGeneratedAttribute]
public static OSPlatform get_Linux();
    [CompilerGeneratedAttribute]
public static OSPlatform get_OSX();
    [CompilerGeneratedAttribute]
public static OSPlatform get_Windows();
    public sealed virtual bool Equals(OSPlatform other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(OSPlatform left, OSPlatform right);
    public static bool op_Inequality(OSPlatform left, OSPlatform right);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class IronPython.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CantFindMember { get; }
    internal static string DefaultRequired { get; }
    internal static string DuplicateArgumentInFuncDef { get; }
    internal static string DuplicateKeywordArg { get; }
    internal static string EofInString { get; }
    internal static string EofInTripleQuotedString { get; }
    internal static string EolInSingleQuotedString { get; }
    internal static string ExpectedIndentation { get; }
    internal static string ExpectedName { get; }
    internal static string ExpectingIdentifier { get; }
    internal static string InconsistentWhitespace { get; }
    internal static string IndentationMismatch { get; }
    internal static string InvalidArgumentValue { get; }
    internal static string InvalidOperation_MakeGenericOnNonGeneric { get; }
    internal static string InvalidParameters { get; }
    internal static string InvalidSyntax { get; }
    internal static string InvalidToken { get; }
    internal static string KeywordCreateUnavailable { get; }
    internal static string KeywordOutOfSequence { get; }
    internal static string MemberDoesNotExist { get; }
    internal static string MisplacedFuture { get; }
    internal static string MisplacedReturn { get; }
    internal static string MisplacedYield { get; }
    internal static string NewLineInDoubleQuotedString { get; }
    internal static string NewLineInSingleQuotedString { get; }
    internal static string NoFutureStar { get; }
    internal static string NonKeywordAfterKeywordArg { get; }
    internal static string NotAChance { get; }
    internal static string NotImplemented { get; }
    internal static string OneKeywordArgOnly { get; }
    internal static string OneListArgOnly { get; }
    internal static string PythonContextRequired { get; }
    internal static string Slot_CantDelete { get; }
    internal static string Slot_CantGet { get; }
    internal static string Slot_CantSet { get; }
    internal static string StaticAccessFromInstanceError { get; }
    internal static string StaticAssignmentFromInstanceError { get; }
    internal static string TokenHasNoValue { get; }
    internal static string TooManyVersions { get; }
    internal static string UnexpectedToken { get; }
    internal static string UnknownFutureFeature { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CantFindMember();
    internal static string get_DefaultRequired();
    internal static string get_DuplicateArgumentInFuncDef();
    internal static string get_DuplicateKeywordArg();
    internal static string get_EofInString();
    internal static string get_EofInTripleQuotedString();
    internal static string get_EolInSingleQuotedString();
    internal static string get_ExpectedIndentation();
    internal static string get_ExpectedName();
    internal static string get_ExpectingIdentifier();
    internal static string get_InconsistentWhitespace();
    internal static string get_IndentationMismatch();
    internal static string get_InvalidArgumentValue();
    internal static string get_InvalidOperation_MakeGenericOnNonGeneric();
    internal static string get_InvalidParameters();
    internal static string get_InvalidSyntax();
    internal static string get_InvalidToken();
    internal static string get_KeywordCreateUnavailable();
    internal static string get_KeywordOutOfSequence();
    internal static string get_MemberDoesNotExist();
    internal static string get_MisplacedFuture();
    internal static string get_MisplacedReturn();
    internal static string get_MisplacedYield();
    internal static string get_NewLineInDoubleQuotedString();
    internal static string get_NewLineInSingleQuotedString();
    internal static string get_NoFutureStar();
    internal static string get_NonKeywordAfterKeywordArg();
    internal static string get_NotAChance();
    internal static string get_NotImplemented();
    internal static string get_OneKeywordArgOnly();
    internal static string get_OneListArgOnly();
    internal static string get_PythonContextRequired();
    internal static string get_Slot_CantDelete();
    internal static string get_Slot_CantGet();
    internal static string get_Slot_CantSet();
    internal static string get_StaticAccessFromInstanceError();
    internal static string get_StaticAssignmentFromInstanceError();
    internal static string get_TokenHasNoValue();
    internal static string get_TooManyVersions();
    internal static string get_UnexpectedToken();
    internal static string get_UnknownFutureFeature();
}
[NullableContextAttribute("1")]
internal interface IronPython.Runtime.ArrayData {
    public Type StorageType { get; }
    public abstract virtual Type get_StorageType();
    [NullableContextAttribute("2")]
public abstract virtual bool CanStore(object item);
    [NullableContextAttribute("2")]
public abstract virtual int CountItems(object item);
    public abstract virtual IntPtr GetAddress();
    public abstract virtual void AddRange(ArrayData value);
    public abstract virtual void InsertRange(int index, int count, ArrayData value);
    public abstract virtual void RemoveSlice(Slice slice);
    public abstract virtual ArrayData Multiply(int count);
    [NullableContextAttribute("2")]
public abstract virtual bool Remove(object item);
    public abstract virtual void Reverse();
    [NullableContextAttribute("0")]
public abstract virtual Span`1<byte> AsByteSpan();
    public abstract virtual IPythonBuffer GetBuffer(object owner, string format, BufferFlags flags);
}
[DefaultMemberAttribute("Item")]
internal class IronPython.Runtime.ArrayData`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] _items;
    private int _size;
    private Nullable`1<GCHandle> _dataHandle;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static T[] empty;
    private int _bufferCount;
    public int Count { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public T[] Data { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
private Type IronPython.Runtime.ArrayData.StorageType { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    public T Item { get; public set; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public ArrayData`1(int capacity);
    public ArrayData`1(IEnumerable`1<T> collection);
    internal ArrayData`1(ReadOnlySpan`1<T> data);
    private static ArrayData`1();
    protected virtual override void Finalize();
    public sealed virtual int get_Count();
    public T[] get_Data();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [NullableContextAttribute("1")]
private sealed virtual override Type IronPython.Runtime.ArrayData.get_StorageType();
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(T item);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object item);
    [NullableContextAttribute("1")]
public void AddRange(IPythonBuffer data);
    public void AddRange(IEnumerable`1<T> collection);
    [NullableContextAttribute("1")]
private sealed virtual override void IronPython.Runtime.ArrayData.AddRange(ArrayData value);
    [NullableContextAttribute("2")]
private sealed virtual override bool IronPython.Runtime.ArrayData.CanStore(object item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    [NullableContextAttribute("2")]
private sealed virtual override int IronPython.Runtime.ArrayData.CountItems(object item);
    private void EnsureSize(long size);
    private sealed virtual override IntPtr IronPython.Runtime.ArrayData.GetAddress();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static T GetValue(object value);
    public sealed virtual int IndexOf(T item);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object item);
    public sealed virtual void Insert(int index, T item);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object item);
    public void InsertRange(int index, int count, IList`1<T> value);
    [NullableContextAttribute("1")]
private sealed virtual override void IronPython.Runtime.ArrayData.InsertRange(int index, int count, ArrayData value);
    public void InPlaceMultiply(int count);
    [NullableContextAttribute("1")]
private sealed virtual override ArrayData IronPython.Runtime.ArrayData.Multiply(int count);
    public sealed virtual bool Remove(T item);
    [NullableContextAttribute("2")]
private sealed virtual override bool IronPython.Runtime.ArrayData.Remove(object item);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object item);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    [NullableContextAttribute("1")]
public sealed virtual void RemoveSlice(Slice slice);
    public sealed virtual void Reverse();
    public sealed virtual Span`1<byte> AsByteSpan();
    private static bool TryConvert(object value, T& result);
    [NullableContextAttribute("1")]
public sealed virtual IPythonBuffer GetBuffer(object owner, string format, BufferFlags flags);
    private void CheckBuffer();
}
internal class IronPython.Runtime.Binding.BinaryRetTypeBinder : ComboBinder {
    private DynamicMetaObjectBinder _opBinder;
    private PythonConversionBinder _convBinder;
    public Type ReturnType { get; }
    public BinaryRetTypeBinder(DynamicMetaObjectBinder operationBinder, PythonConversionBinder conversionBinder);
    public virtual Type get_ReturnType();
    public sealed virtual Expression CreateExpression();
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    private Func`4<CallSite, object, object, bool> GetIntObjectObjectDelegate(BinaryOperationBinder opBinder);
    public bool IntEqualRetBool(CallSite site, object self, object other);
    public bool IntNotEqualRetBool(CallSite site, object self, object other);
    public bool IntGreaterThanRetBool(CallSite site, object self, object other);
    public bool IntLessThanRetBool(CallSite site, object self, object other);
    public bool IntGreaterThanOrEqualRetBool(CallSite site, object self, object other);
    public bool IntLessThanOrEqualRetBool(CallSite site, object self, object other);
    private Func`4<CallSite, object, int, bool> GetIntObjectIntDelegate(BinaryOperationBinder opBinder);
    public bool IntEqualRetBool(CallSite site, object self, int other);
    public bool IntNotEqualRetBool(CallSite site, object self, int other);
    public bool IntGreaterThanRetBool(CallSite site, object self, int other);
    public bool IntLessThanRetBool(CallSite site, object self, int other);
    public bool IntGreaterThanOrEqualRetBool(CallSite site, object self, int other);
    public bool IntLessThanOrEqualRetBool(CallSite site, object self, int other);
    private Func`4<CallSite, int, object, bool> GetIntIntObjectDelegate(BinaryOperationBinder opBinder);
    public bool IntEqualRetBool(CallSite site, int self, object other);
    public bool IntNotEqualRetBool(CallSite site, int self, object other);
    public bool IntGreaterThanRetBool(CallSite site, int self, object other);
    public bool IntLessThanRetBool(CallSite site, int self, object other);
    public bool IntGreaterThanOrEqualRetBool(CallSite site, int self, object other);
    public bool IntLessThanOrEqualRetBool(CallSite site, int self, object other);
    private Func`4<CallSite, int, int, bool> GetIntIntIntDelegate(BinaryOperationBinder opBinder);
    public bool IntEqualRetBool(CallSite site, int self, int other);
    public bool IntNotEqualRetBool(CallSite site, int self, int other);
    public bool IntGreaterThanRetBool(CallSite site, int self, int other);
    public bool IntLessThanRetBool(CallSite site, int self, int other);
    public bool IntGreaterThanOrEqualRetBool(CallSite site, int self, int other);
    public bool IntLessThanOrEqualRetBool(CallSite site, int self, int other);
}
internal static class IronPython.Runtime.Binding.Binders : object {
    public static Expression Convert(Expression codeContext, PythonContext binder, Type type, ConversionResultKind resultKind, Expression target);
    public static Expression Get(Expression codeContext, PythonContext binder, Type resultType, string name, Expression target);
    public static Expression TryGet(Expression codeContext, PythonContext binder, Type resultType, string name, Expression target);
    public static DynamicMetaObjectBinder UnaryOperationBinder(PythonContext state, PythonOperationKind operatorName);
    private static Nullable`1<ExpressionType> GetExpressionTypeFromUnaryOperator(PythonOperationKind operatorName);
    public static DynamicMetaObjectBinder BinaryOperationBinder(PythonContext state, PythonOperationKind operatorName);
    private static Nullable`1<ExpressionType> GetExpressionTypeFromBinaryOperator(PythonOperationKind operatorName);
    public static PythonInvokeBinder InvokeSplat(PythonContext state);
    public static PythonInvokeBinder InvokeKeywords(PythonContext state);
}
internal static class IronPython.Runtime.Binding.BindingHelpers : object {
    internal static bool TryGetStaticFunction(PythonContext state, string op, DynamicMetaObject mo, BuiltinFunction& function);
    internal static bool IsNoThrow(DynamicMetaObjectBinder action);
    internal static DynamicMetaObject FilterShowCls(DynamicMetaObject codeContext, DynamicMetaObjectBinder action, DynamicMetaObject res, Expression failure);
    internal static CallSignature GetCallSignature(DynamicMetaObjectBinder action);
    public static Expression Invoke(Expression codeContext, PythonContext binder, Type resultType, CallSignature signature, Expression[] args);
    internal static DynamicMetaObject GenericInvokeMember(InvokeMemberBinder action, ValidationInfo valInfo, DynamicMetaObject target, DynamicMetaObject[] args);
    internal static bool NeedsDeferral(DynamicMetaObject[] args);
    internal static CallSignature CallInfoToSignature(CallInfo callInfo);
    internal static Type GetCompatibleType(Type t, Type otherType);
    internal static bool IsSubclassOf(DynamicMetaObject xType, DynamicMetaObject yType);
    private static BuiltinFunction TryConvertToBuiltinFunction(object o);
    internal static DynamicMetaObject AddDynamicTestAndDefer(DynamicMetaObjectBinder operation, DynamicMetaObject res, DynamicMetaObject[] args, ValidationInfo typeTest, ParameterExpression[] temps);
    internal static DynamicMetaObject AddDynamicTestAndDefer(DynamicMetaObjectBinder operation, DynamicMetaObject res, DynamicMetaObject[] args, ValidationInfo typeTest, Type deferType, ParameterExpression[] temps);
    internal static ValidationInfo GetValidationInfo(DynamicMetaObject tested, PythonType type);
    internal static ValidationInfo GetValidationInfo(DynamicMetaObject[] args);
    internal static MethodCallExpression CheckTypeVersion(Expression tested, int version);
    internal static Expression AddRecursionCheck(PythonContext pyContext, Expression expr);
    internal static Expression CreateBinderStateExpression();
    internal static DynamicMetaObject InvokeFallback(DynamicMetaObjectBinder action, Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
    internal static Expression TypeErrorForProtectedMember(Type type, string name);
    internal static DynamicMetaObject TypeErrorGenericMethod(Type type, string name, BindingRestrictions restrictions);
    internal static bool IsDataMember(object p);
    internal static DynamicMetaObject AddPythonBoxing(DynamicMetaObject res);
    internal static Expression AddPythonBoxing(Expression res);
    internal static DynamicMetaObject[] GetComArguments(DynamicMetaObject[] args);
    internal static DynamicMetaObject GetComArgument(DynamicMetaObject arg);
    internal static BindingResult CheckLightThrow(DynamicMetaObjectBinder call, DynamicMetaObject res, BindingTarget target);
    internal static DynamicMetaObject CheckLightThrowMO(DynamicMetaObjectBinder call, DynamicMetaObject res, BindingTarget target);
}
internal static class IronPython.Runtime.Binding.BindingWarnings : object {
    public static bool ShouldWarn(PythonContext context, OverloadInfo method, WarningInfo& info);
}
internal class IronPython.Runtime.Binding.CompatConversionBinder : ConvertBinder {
    private PythonConversionBinder _binder;
    public CompatConversionBinder(PythonConversionBinder binder, Type toType, bool isExplicit);
    public virtual DynamicMetaObject FallbackConvert(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
}
internal class IronPython.Runtime.Binding.CompatibilityGetMember : GetMemberBinder {
    private PythonContext _context;
    private bool _isNoThrow;
    public PythonContext Context { get; }
    public bool InvokeOnGet { get; }
    public CompatibilityGetMember(PythonContext context, string name);
    public CompatibilityGetMember(PythonContext context, string name, bool isNoThrow);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject self, DynamicMetaObject errorSuggestion);
    public sealed virtual PythonContext get_Context();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool get_InvokeOnGet();
}
internal class IronPython.Runtime.Binding.CompatibilityInvokeBinder : InvokeBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public CompatibilityInvokeBinder(PythonContext context, CallInfo callInfo);
    public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
    internal DynamicMetaObject InvokeFallback(DynamicMetaObject target, DynamicMetaObject[] args, CallSignature sig, DynamicMetaObject errorSuggestion);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
}
internal class IronPython.Runtime.Binding.ConditionalBuilder : object {
    private DynamicMetaObjectBinder _action;
    private List`1<Expression> _conditions;
    private List`1<Expression> _bodies;
    private List`1<ParameterExpression> _variables;
    private Expression _body;
    private BindingRestrictions _restrictions;
    private ParameterExpression _compareRetBool;
    private Type _retType;
    public ParameterExpression CompareRetBool { get; }
    public BindingRestrictions Restrictions { get; public set; }
    public DynamicMetaObjectBinder Action { get; }
    public bool NoConditions { get; }
    public bool IsFinal { get; }
    public ConditionalBuilder(DynamicMetaObjectBinder action);
    public void AddCondition(Expression condition, Expression body);
    public void ExtendLastCondition(Expression condition);
    public void FinishCondition(Expression body);
    public void FinishCondition(Expression body, Type retType);
    public ParameterExpression get_CompareRetBool();
    public BindingRestrictions get_Restrictions();
    public void set_Restrictions(BindingRestrictions value);
    public DynamicMetaObjectBinder get_Action();
    public bool get_NoConditions();
    public bool get_IsFinal();
    public DynamicMetaObject GetMetaObject(DynamicMetaObject[] types);
    public void AddVariable(ParameterExpression var);
}
public class IronPython.Runtime.Binding.ContextArgBuilder : ArgBuilder {
    public int Priority { get; }
    public int ConsumedArgumentCount { get; }
    public ContextArgBuilder(ParameterInfo info);
    public virtual int get_Priority();
    public virtual int get_ConsumedArgumentCount();
    protected virtual Expression ToExpression(OverloadResolver resolver, RestrictedArguments args, Boolean[] hasBeenUsed);
}
internal class IronPython.Runtime.Binding.CreateFallback : CreateInstanceBinder {
    private CompatibilityInvokeBinder _fallback;
    public PythonContext Context { get; }
    public CreateFallback(CompatibilityInvokeBinder realFallback, CallInfo callInfo);
    public virtual DynamicMetaObject FallbackCreateInstance(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
    public sealed virtual PythonContext get_Context();
}
[IsReadOnlyAttribute]
internal class IronPython.Runtime.Binding.FastBindResult`1 : ValueType {
    public T Target;
    public bool ShouldCache;
    public FastBindResult`1(T target, bool shouldCache);
    public FastBindResult`1(T target);
}
internal abstract class IronPython.Runtime.Binding.FastGetBase : object {
    internal Func`4<CallSite, object, CodeContext, object> _func;
    internal int _hitCount;
    internal bool ShouldCache { get; }
    internal bool ShouldUseNonOptimizedSite { get; }
    public abstract virtual bool IsValid(PythonType type);
    internal virtual bool get_ShouldCache();
    internal bool get_ShouldUseNonOptimizedSite();
    protected static object Update(CallSite site, object self, CodeContext context);
}
internal class IronPython.Runtime.Binding.FastSetBase : object {
    internal Delegate _func;
    internal int _version;
    internal int _hitCount;
    public bool ShouldUseNonOptimizedSite { get; }
    public FastSetBase(int version);
    public bool get_ShouldUseNonOptimizedSite();
}
internal class IronPython.Runtime.Binding.FastSetBase`1 : FastSetBase {
    public FastSetBase`1(int version);
    protected static object Update(CallSite site, object self, TValue value);
}
[FlagsAttribute]
internal enum IronPython.Runtime.Binding.GetMemberOptions : Enum {
    public int value__;
    public static GetMemberOptions None;
    public static GetMemberOptions IsNoThrow;
    public static GetMemberOptions IsCaseInsensitive;
}
internal interface IronPython.Runtime.Binding.IComConvertible {
    public abstract virtual DynamicMetaObject GetComMetaObject();
}
internal interface IronPython.Runtime.Binding.IFastGettable {
    public abstract virtual T MakeGetBinding(CallSite`1<T> site, PythonGetMemberBinder binder, CodeContext state, string name);
}
internal interface IronPython.Runtime.Binding.IFastInvokable {
    public abstract virtual FastBindResult`1<T> MakeInvokeBinding(CallSite`1<T> site, PythonInvokeBinder binder, CodeContext context, Object[] args);
}
internal interface IronPython.Runtime.Binding.IFastSettable {
    public abstract virtual T MakeSetBinding(CallSite`1<T> site, PythonSetMemberBinder binder);
}
internal interface IronPython.Runtime.Binding.IPythonConvertible {
    public abstract virtual DynamicMetaObject BindConvert(PythonConversionBinder binder);
}
public interface IronPython.Runtime.Binding.IPythonExpandable {
    public IDictionary`2<object, object> CustomAttributes { get; }
    public CodeContext Context { get; }
    public abstract virtual IDictionary`2<object, object> EnsureCustomAttributes();
    public abstract virtual IDictionary`2<object, object> get_CustomAttributes();
    public abstract virtual CodeContext get_Context();
}
internal interface IronPython.Runtime.Binding.IPythonGetable {
    public abstract virtual DynamicMetaObject GetMember(PythonGetMemberBinder member, DynamicMetaObject codeContext);
}
internal interface IronPython.Runtime.Binding.IPythonInvokable {
    public abstract virtual DynamicMetaObject Invoke(PythonInvokeBinder pythonInvoke, Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
}
internal interface IronPython.Runtime.Binding.IPythonOperable {
    public abstract virtual DynamicMetaObject BindOperation(PythonOperationBinder action, DynamicMetaObject[] args);
}
internal interface IronPython.Runtime.Binding.IPythonSite {
    public PythonContext Context { get; }
    public abstract virtual PythonContext get_Context();
}
internal class IronPython.Runtime.Binding.MetaBuiltinFunction : MetaPythonObject {
    public BuiltinFunction Value { get; }
    public MetaBuiltinFunction(Expression expression, BindingRestrictions restrictions, BuiltinFunction value);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder call, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindConvert(ConvertBinder conversion);
    public sealed virtual DynamicMetaObject BindConvert(PythonConversionBinder binder);
    public DynamicMetaObject ConvertWorker(DynamicMetaObjectBinder binder, Type toType, ConversionResultKind kind);
    private sealed virtual override DynamicMetaObject IronPython.Runtime.Binding.IPythonOperable.BindOperation(PythonOperationBinder action, DynamicMetaObject[] args);
    public sealed virtual DynamicMetaObject Invoke(PythonInvokeBinder pythonInvoke, Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
    private DynamicMetaObject InvokeWorker(DynamicMetaObjectBinder call, Expression codeContext, DynamicMetaObject[] args);
    private DynamicMetaObject MakeSelflessCall(DynamicMetaObjectBinder call, Expression codeContext, DynamicMetaObject[] args);
    private DynamicMetaObject MakeSelfCall(DynamicMetaObjectBinder call, Expression codeContext, DynamicMetaObject[] args);
    private DynamicMetaObject GetInstance(Expression instance, Type testType);
    private MemberExpression ReadStrongBoxValue(Expression instance);
    internal static CallSignature GetReversedSignature(CallSignature signature);
    public BuiltinFunction get_Value();
}
internal class IronPython.Runtime.Binding.MetaBuiltinMethodDescriptor : MetaPythonObject {
    public BuiltinMethodDescriptor Value { get; }
    public MetaBuiltinMethodDescriptor(Expression expression, BindingRestrictions restrictions, BuiltinMethodDescriptor value);
    public sealed virtual DynamicMetaObject Invoke(PythonInvokeBinder pythonInvoke, Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder action, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder call, DynamicMetaObject[] args);
    private DynamicMetaObject InvokeWorker(DynamicMetaObjectBinder call, Expression codeContext, DynamicMetaObject[] args);
    internal Expression MakeFunctionTest(Expression functionTarget);
    public BuiltinMethodDescriptor get_Value();
    private sealed virtual override DynamicMetaObject IronPython.Runtime.Binding.IPythonOperable.BindOperation(PythonOperationBinder action, DynamicMetaObject[] args);
}
public class IronPython.Runtime.Binding.MetaExpandable`1 : DynamicMetaObject {
    private static object _getFailed;
    public T Value { get; }
    public MetaExpandable`1(Expression parameter, IPythonExpandable value);
    private static MetaExpandable`1();
    public T get_Value();
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    private DynamicMetaObject DynamicTryGetMember(string name, Expression fallback, Func`2<Expression, Expression> transform);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    private BindingRestrictions GetRestrictions();
    private static Expression Convert(Expression expression, Type type);
    private static object TryGetMember(T target, string name);
    private static bool TrySetMember(T target, string name, object value);
    private static bool TryDeleteMember(T target, string name);
}
internal class IronPython.Runtime.Binding.MetaMethod : MetaPythonObject {
    public Method Value { get; }
    public MetaMethod(Expression expression, BindingRestrictions restrictions, Method value);
    public sealed virtual DynamicMetaObject Invoke(PythonInvokeBinder pythonInvoke, Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder action, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder callAction, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindConvert(ConvertBinder conversion);
    public sealed virtual DynamicMetaObject BindConvert(PythonConversionBinder binder);
    public DynamicMetaObject ConvertWorker(DynamicMetaObjectBinder binder, Type toType, ConversionResultKind kind);
    private DynamicMetaObject InvokeWorker(DynamicMetaObjectBinder callAction, DynamicMetaObject[] args);
    private DynamicMetaObject GetMetaSelf(DynamicMetaObject self);
    private DynamicMetaObject GetMetaFunction(DynamicMetaObject self);
    private static MemberExpression GetFunctionExpression(DynamicMetaObject self);
    private static MemberExpression GetSelfExpression(DynamicMetaObject self);
    public Method get_Value();
}
internal class IronPython.Runtime.Binding.MetaPythonFunction : MetaPythonObject {
    public PythonFunction Value { get; }
    public MetaPythonFunction(Expression expression, BindingRestrictions restrictions, PythonFunction value);
    public sealed virtual DynamicMetaObject Invoke(PythonInvokeBinder pythonInvoke, Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
    public sealed virtual DynamicMetaObject GetMember(PythonGetMemberBinder member, DynamicMetaObject codeContext);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder action, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder call, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindConvert(ConvertBinder conversion);
    public sealed virtual DynamicMetaObject BindConvert(PythonConversionBinder binder);
    public DynamicMetaObject ConvertWorker(DynamicMetaObjectBinder binder, Type type, ConversionResultKind kind);
    [IteratorStateMachineAttribute("IronPython.Runtime.Binding.MetaPythonFunction/<GetDynamicMemberNames>d__8")]
public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    private DynamicMetaObject BindGetMemberWorker(DynamicMetaObjectBinder binder, string name, DynamicMetaObject codeContext);
    private static DynamicMetaObject FallbackGetMember(DynamicMetaObjectBinder binder, DynamicMetaObject self, DynamicMetaObject codeContext);
    private static DynamicMetaObject FallbackGetMember(DynamicMetaObjectBinder binder, DynamicMetaObject self, DynamicMetaObject codeContext, DynamicMetaObject errorSuggestion);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    private static DynamicMetaObject MakeCallSignatureRule(DynamicMetaObject self);
    private static DynamicMetaObject MakeIsCallableRule(DynamicMetaObject self);
    public PythonFunction get_Value();
    private sealed virtual override DynamicMetaObject IronPython.Runtime.Binding.IPythonOperable.BindOperation(PythonOperationBinder action, DynamicMetaObject[] args);
    private sealed virtual override InferenceResult Microsoft.Scripting.Actions.Calls.IInferableInvokable.GetInferredType(Type delegateType, Type parameterType);
    private sealed virtual override bool Microsoft.Scripting.Runtime.IConvertibleMetaObject.CanConvertTo(Type type, bool explicit);
}
internal class IronPython.Runtime.Binding.MetaPythonObject : DynamicMetaObject {
    public PythonType PythonType { get; }
    public MetaPythonObject(Expression expression, BindingRestrictions restrictions);
    public MetaPythonObject(Expression expression, BindingRestrictions restrictions, object value);
    public DynamicMetaObject FallbackConvert(DynamicMetaObjectBinder binder);
    internal static MethodCallExpression MakeTryGetTypeMember(PythonContext PythonContext, PythonTypeSlot dts, Expression self, ParameterExpression tmp);
    internal static MethodCallExpression MakeTryGetTypeMember(PythonContext PythonContext, PythonTypeSlot dts, ParameterExpression tmp, Expression instance, Expression pythonType);
    public DynamicMetaObject Restrict(Type type);
    public PythonType get_PythonType();
    public static PythonType GetPythonType(DynamicMetaObject value);
    protected static DynamicMetaObject MakeDelegateTarget(DynamicMetaObjectBinder action, Type toType, DynamicMetaObject arg);
    protected static DynamicMetaObject GetMemberFallback(DynamicMetaObject self, DynamicMetaObjectBinder member, DynamicMetaObject codeContext);
    protected static string GetGetMemberName(DynamicMetaObjectBinder member);
}
internal class IronPython.Runtime.Binding.MetaPythonType : MetaPythonObject {
    public PythonType Value { get; }
    public MetaPythonType(Expression expression, BindingRestrictions restrictions, PythonType value);
    public sealed virtual DynamicMetaObject Invoke(PythonInvokeBinder pythonInvoke, Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder action, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder call, DynamicMetaObject[] args);
    private DynamicMetaObject InvokeWorker(DynamicMetaObjectBinder call, DynamicMetaObject[] args, Expression codeContext);
    private DynamicMetaObject MakeStandardDotNetTypeCall(DynamicMetaObjectBinder call, Expression codeContext, DynamicMetaObject[] args);
    private DynamicMetaObject MakePythonTypeCall(DynamicMetaObjectBinder call, Expression codeContext, DynamicMetaObject[] args);
    private void GetAdapters(ArgumentValues ai, DynamicMetaObjectBinder call, Expression codeContext, NewAdapter& newAdapter, InitAdapter& initAdapter);
    private InitAdapter GetInitAdapter(ArgumentValues ai, PythonTypeSlot init, DynamicMetaObjectBinder call, Expression codeContext);
    private NewAdapter GetNewAdapter(ArgumentValues ai, PythonTypeSlot newInst, DynamicMetaObjectBinder call, Expression codeContext);
    private DynamicMetaObject MakeIncorrectArgumentsForCallError(DynamicMetaObjectBinder call, ArgumentValues ai, ValidationInfo valInfo);
    private DynamicMetaObject MakeGenericTypeDefinitionError(DynamicMetaObjectBinder call, ArgumentValues ai, ValidationInfo valInfo);
    private DynamicMetaObject MakeAbstractInstantiationError(DynamicMetaObjectBinder call, ArgumentValues ai, ValidationInfo valInfo);
    private BindingRestrictions GetErrorRestrictions(ArgumentValues ai);
    private static BindingRestrictions GetInstanceRestriction(ArgumentValues ai);
    private bool HasFinalizer(DynamicMetaObjectBinder action);
    private bool HasDefaultNew(DynamicMetaObjectBinder action);
    private bool HasDefaultInit(DynamicMetaObjectBinder action);
    private bool HasDefaultNewAndInit(DynamicMetaObjectBinder action);
    private bool TooManyArgsForDefaultNew(DynamicMetaObjectBinder action, DynamicMetaObject[] args);
    private ValidationInfo MakeVersionCheck();
    private bool IsStandardDotNetType(DynamicMetaObjectBinder action);
    public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder create, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindConvert(ConvertBinder conversion);
    public sealed virtual DynamicMetaObject BindConvert(PythonConversionBinder binder);
    public DynamicMetaObject ConvertWorker(DynamicMetaObjectBinder binder, Type type, ConversionResultKind kind);
    [IteratorStateMachineAttribute("IronPython.Runtime.Binding.MetaPythonType/<GetDynamicMemberNames>d__36")]
public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public PythonType get_Value();
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder member);
    private ValidationInfo GetTypeTest();
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder member, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder member);
    public sealed virtual DynamicMetaObject GetMember(PythonGetMemberBinder member, DynamicMetaObject codeContext);
    private DynamicMetaObject GetMemberWorker(DynamicMetaObjectBinder member, Expression codeContext);
    private ValidationInfo MakeMetaTypeTest(Expression self);
    private DynamicMetaObject MakeSetMember(SetMemberBinder member, DynamicMetaObject value);
    private static bool IsProtectedSetter(MemberTracker mt);
    private DynamicMetaObject MakeDeleteMember(DeleteMemberBinder member);
    private ValidationInfo TestUserType();
}
internal class IronPython.Runtime.Binding.MetaUserObject : MetaPythonObject {
    private DynamicMetaObject _baseMetaObject;
    public IPythonObject Value { get; }
    public MetaUserObject(Expression expression, BindingRestrictions restrictions, DynamicMetaObject baseMetaObject, IPythonObject value);
    public sealed virtual DynamicMetaObject Invoke(PythonInvokeBinder pythonInvoke, Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder action, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindConvert(ConvertBinder conversion);
    public sealed virtual DynamicMetaObject BindConvert(PythonConversionBinder binder);
    public DynamicMetaObject ConvertWorker(DynamicMetaObjectBinder binder, Type type, Type retType, ConversionResultKind kind);
    public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg);
    public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder action, DynamicMetaObject[] args);
    [IteratorStateMachineAttribute("IronPython.Runtime.Binding.MetaUserObject/<GetDynamicMemberNames>d__13")]
public virtual IEnumerable`1<string> GetDynamicMemberNames();
    private DynamicMetaObject InvokeWorker(DynamicMetaObjectBinder action, Expression codeContext, DynamicMetaObject[] args);
    private DynamicMetaObject InvokeFallback(DynamicMetaObjectBinder action, Expression codeContext, DynamicMetaObject[] args);
    private DynamicMetaObject TryPythonConversion(DynamicMetaObjectBinder conversion, Type type);
    private DynamicMetaObject MakeConvertRuleForCall(DynamicMetaObjectBinder convertToAction, Type toType, DynamicMetaObject self, string name, string returner, Func`1<DynamicMetaObject> fallback, Func`2<Expression, Expression> resultConverter);
    private DynamicMetaObject MakeConvertRuleForCall(DynamicMetaObjectBinder convertToAction, Type toType, DynamicMetaObject self, string name, string returner);
    private static Expression AddExtensibleSelfCheck(DynamicMetaObjectBinder convertToAction, Type toType, DynamicMetaObject self, Expression callExpr);
    private static ConversionResultKind GetResultKind(DynamicMetaObjectBinder convertToAction);
    private Expression ConversionFallback(DynamicMetaObjectBinder convertToAction);
    private static bool IsBuiltinConversion(CodeContext context, PythonTypeSlot pts, string name, PythonType selfType);
    private static DynamicMetaObject GetConversionFailedReturnValue(PythonConversionBinder convertToAction, DynamicMetaObject self);
    private DynamicMetaObject Fallback(DynamicMetaObjectBinder action, DynamicMetaObject codeContext);
    private DynamicMetaObject Fallback(SetMemberBinder action, DynamicMetaObject value);
    public IPythonObject get_Value();
    private sealed virtual override DynamicMetaObject IronPython.Runtime.Binding.IPythonOperable.BindOperation(PythonOperationBinder action, DynamicMetaObject[] args);
    public sealed virtual DynamicMetaObject GetMember(PythonGetMemberBinder member, DynamicMetaObject codeContext);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder action);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder action, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder action);
    private DynamicMetaObject GetMemberWorker(DynamicMetaObjectBinder member, DynamicMetaObject codeContext);
    private static bool TryGetGetAttribute(CodeContext context, PythonType type, PythonTypeSlot& dts);
    private static MethodCallExpression MakeGetAttrTestAndGet(GetBindingInfo info, Expression getattr);
    private static Expression GetWeakSlot(PythonTypeSlot slot);
    private static Expression MakeTypeError(DynamicMetaObjectBinder binder, string name, PythonType type);
    private static bool IsStandardObjectMethod(PythonTypeSlot dts);
    private static void MakeSlotsDeleteTarget(MemberBindingInfo info, ReflectedSlotProperty rsp);
    private static void MakeSlotsSetTargetHelper(MemberBindingInfo info, ReflectedSlotProperty rsp, Expression value);
    private static DynamicMetaObject MakeSlotSet(SetBindingInfo info, PythonTypeSlot dts);
    private DynamicMetaObject MakeDeleteMemberRule(DeleteBindingInfo info);
    private static DynamicMetaObject MakeSlotDelete(DeleteBindingInfo info, PythonTypeSlot dts);
    private static void MakeDeleteAttrTarget(DeleteBindingInfo info, IPythonObject self, PythonTypeSlot dts);
    private static void MakeDictionaryDeleteTarget(DeleteBindingInfo info);
    private static PythonTypeSlot FindSlot(CodeContext context, string name, IPythonObject sdo, Boolean& systemTypeResolution, Boolean& extensionMethodResolution);
    private DynamicMetaObject FallbackGetError(DynamicMetaObjectBinder action, DynamicMetaObject codeContext);
    private DynamicMetaObject FallbackDeleteError(DeleteMemberBinder action, DynamicMetaObject[] args);
    private static Expression GetSlots(DynamicMetaObject self);
}
internal class IronPython.Runtime.Binding.PythonBinaryOperationBinder : BinaryOperationBinder {
    private PythonContext _context;
    private PythonBinaryOperationBinder _lightThrowBinder;
    public PythonContext Context { get; }
    public bool SupportsLightThrow { get; }
    public PythonBinaryOperationBinder(PythonContext context, ExpressionType operation);
    public virtual DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg, DynamicMetaObject errorSuggestion);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    private T BindModulo(CallSite`1<T> site, Object[] args);
    private T BindMultiply(CallSite`1<T> site, Object[] args);
    private T BindMultiplyDifferentTypes(CallSite`1<T> site, Object[] args);
    private T BindDivide(CallSite`1<T> site, Object[] args);
    private T BindLessThanOrEqual(CallSite`1<T> site, Object[] args);
    private T BindGreaterThanOrEqual(CallSite`1<T> site, Object[] args);
    private T BindGreaterThan(CallSite`1<T> site, Object[] args);
    private T BindLessThan(CallSite`1<T> site, Object[] args);
    private T BindAnd(CallSite`1<T> site, Object[] args);
    private T BindOr(CallSite`1<T> site, Object[] args);
    private T BindAdd(CallSite`1<T> site, Object[] args);
    private T BindSubtract(CallSite`1<T> site, Object[] args);
    private T BindEqual(CallSite`1<T> site, Object[] args);
    private T BindNotEqual(CallSite`1<T> site, Object[] args);
    private object StringModulo(CallSite site, string self, PythonDictionary other);
    private object StringModulo(CallSite site, string self, PythonTuple other);
    private object StringModulo(CallSite site, string self, object other);
    private object StringModulo(CallSite site, object self, PythonDictionary other);
    private object StringModulo(CallSite site, object self, PythonTuple other);
    private object StringModulo(CallSite site, object self, object other);
    private object DoubleAdd(CallSite site, object self, object other);
    private object IntAdd(CallSite site, object self, object other);
    private object IntAdd(CallSite site, object self, int other);
    private object IntAdd(CallSite site, int self, object other);
    private object ListIntMultiply(CallSite site, object self, object other);
    private object StringIntMultiply(CallSite site, object self, object other);
    private object TupleIntMultiply(CallSite site, object self, object other);
    private object IntMultiply(CallSite site, object self, object other);
    private object IntMultiply(CallSite site, object self, int other);
    private object IntMultiply(CallSite site, int self, object other);
    private object IntDivide(CallSite site, object self, object other);
    private object IntDivide(CallSite site, object self, int other);
    private object IntDivide(CallSite site, int self, object other);
    private object IntAnd(CallSite site, object self, object other);
    private object IntAnd(CallSite site, object self, int other);
    private object IntAnd(CallSite site, int self, object other);
    private object IntOr(CallSite site, object self, object other);
    private object IntOr(CallSite site, object self, int other);
    private object IntOr(CallSite site, int self, object other);
    private object ListAdd(CallSite site, object self, object other);
    private object ListAddAssign(CallSite site, object self, object other);
    private object TupleAdd(CallSite site, object self, object other);
    private object StringAdd(CallSite site, object self, object other);
    private object StringAdd(CallSite site, string self, object other);
    private object StringAdd(CallSite site, object self, string other);
    private object DoubleSubtract(CallSite site, object self, object other);
    private object IntSubtract(CallSite site, object self, object other);
    private object IntSubtract(CallSite site, object self, int other);
    private object IntSubtract(CallSite site, int self, object other);
    private object DoubleEqual(CallSite site, object self, object other);
    private object IntEqual(CallSite site, object self, object other);
    private object StringEqual(CallSite site, object self, object other);
    private object StringEqual(CallSite site, string self, object other);
    private object StringEqual(CallSite site, object self, string other);
    private object DoubleNotEqual(CallSite site, object self, object other);
    private object IntNotEqual(CallSite site, object self, object other);
    private object StringNotEqual(CallSite site, object self, object other);
    private object StringNotEqual(CallSite site, string self, object other);
    private object StringNotEqual(CallSite site, object self, string other);
    private object IntGreaterThan(CallSite site, object self, object other);
    private object IntGreaterThan(CallSite site, object self, int other);
    private object IntGreaterThan(CallSite site, int self, object other);
    private object IntLessThan(CallSite site, object self, object other);
    private object IntLessThan(CallSite site, object self, int other);
    private object IntLessThan(CallSite site, int self, object other);
    private object IntGreaterThanOrEqual(CallSite site, object self, object other);
    private object IntGreaterThanOrEqual(CallSite site, object self, int other);
    private object IntGreaterThanOrEqual(CallSite site, int self, object other);
    private object IntLessThanOrEqual(CallSite site, object self, object other);
    private object IntLessThanOrEqual(CallSite site, object self, int other);
    private object IntLessThanOrEqual(CallSite site, int self, object other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    public virtual string ToString();
    public sealed virtual Expression CreateExpression();
    public virtual bool get_SupportsLightThrow();
    public virtual CallSiteBinder GetLightExceptionBinder();
}
internal class IronPython.Runtime.Binding.PythonBinder : DefaultBinder {
    private PythonContext _context;
    private SlotCache _typeMembers;
    private SlotCache _resolvedMembers;
    private Dictionary`2<Type, IList`1<Type>> _dlrExtensionTypes;
    private bool _registeredInterfaceExtensions;
    private static Dictionary`2<Type, ExtensionTypeInfo> _sysTypes;
    public bool PrivateBinding { get; }
    internal ScriptDomainManager DomainManager { get; }
    internal PythonContext Context { get; }
    public PythonBinder(PythonContext pythonContext, CodeContext context);
    public PythonBinder(PythonBinder binder);
    private static PythonBinder();
    public DynamicMetaObject Create(CallSignature signature, DynamicMetaObject target, DynamicMetaObject[] args, Expression contextExpression);
    private static Type GetTargetType(object target);
    public virtual Expression ConvertExpression(Expression expr, Type toType, ConversionResultKind kind, OverloadResolverFactory factory);
    internal static MethodInfo GetGenericConvertMethod(Type toType);
    internal static MethodInfo GetFastConvertMethod(Type toType);
    public virtual object Convert(object obj, Type toType);
    public virtual bool CanConvertFrom(Type fromType, Type toType, bool toNotNullable, NarrowingLevel level);
    public virtual Candidate PreferConvert(Type t1, Type t2);
    public virtual bool get_PrivateBinding();
    public virtual ErrorInfo MakeSetValueTypeFieldError(FieldTracker field, DynamicMetaObject instance, DynamicMetaObject value);
    public virtual ErrorInfo MakeConversionError(Type toType, Expression value);
    public virtual ErrorInfo MakeNonPublicMemberGetError(OverloadResolverFactory resolverFactory, MemberTracker member, Type type, DynamicMetaObject instance);
    public virtual ErrorInfo MakeStaticAssignFromDerivedTypeError(Type accessingType, DynamicMetaObject instance, MemberTracker info, DynamicMetaObject assignedValue, OverloadResolverFactory factory);
    public virtual ErrorInfo MakeStaticPropertyInstanceAccessError(PropertyTracker tracker, bool isAssignment, IList`1<DynamicMetaObject> parameters);
    public virtual string GetTypeName(Type t);
    public virtual MemberGroup GetMember(MemberRequestKind actionKind, Type type, string name);
    public virtual ErrorInfo MakeEventValidation(MemberGroup members, DynamicMetaObject eventObject, DynamicMetaObject value, OverloadResolverFactory factory);
    public virtual ErrorInfo MakeMissingMemberError(Type type, DynamicMetaObject self, string name);
    public virtual ErrorInfo MakeMissingMemberErrorForAssign(Type type, DynamicMetaObject self, string name);
    public virtual ErrorInfo MakeMissingMemberErrorForAssignReadOnlyProperty(Type type, DynamicMetaObject self, string name);
    public virtual ErrorInfo MakeMissingMemberErrorForDelete(Type type, DynamicMetaObject self, string name);
    public virtual ErrorInfo MakeReadOnlyMemberError(Type type, string name);
    public virtual ErrorInfo MakeUndeletableMemberError(Type type, string name);
    internal IList`1<Type> GetExtensionTypesInternal(Type t);
    public virtual bool IncludeExtensionMember(MemberInfo member);
    public virtual IList`1<Type> GetExtensionTypes(Type t);
    private void AddExtensionTypes(Type t, List`1<Type> list);
    public bool HasExtensionTypes(Type t);
    public virtual DynamicMetaObject ReturnMemberTracker(Type type, MemberTracker memberTracker);
    private static DynamicMetaObject ReturnMemberTracker(Type type, MemberTracker memberTracker, bool privateBinding);
    public static PythonBinder GetBinder(CodeContext context);
    public bool TryLookupSlot(CodeContext context, PythonType type, string name, PythonTypeSlot& slot);
    internal bool TryLookupProtectedSlot(CodeContext context, PythonType type, string name, PythonTypeSlot& slot);
    public bool TryResolveSlot(CodeContext context, PythonType type, PythonType owner, string name, PythonTypeSlot& slot);
    public void LookupMembers(CodeContext context, PythonType type, PythonDictionary memberNames);
    public void ResolveMemberNames(CodeContext context, PythonType type, PythonType owner, Dictionary`2<string, string> memberNames);
    private static Expression ReturnFieldTracker(FieldTracker fieldTracker);
    private static Expression ReturnMethodGroup(MethodGroup methodGroup);
    private static Expression ReturnBoundTracker(BoundMemberTracker boundMemberTracker, bool privateBinding);
    private static BuiltinFunction GetBuiltinFunction(MethodGroup mg);
    private static Expression ReturnPropertyTracker(PropertyTracker propertyTracker, bool privateBinding);
    private static DynamicMetaObject ReturnTypeTracker(TypeTracker memberTracker);
    internal ScriptDomainManager get_DomainManager();
    internal static void AssertNotExtensionType(Type t);
    private static Dictionary`2<Type, IList`1<Type>> MakeExtensionTypes();
    private static Dictionary`2<Type, ExtensionTypeInfo> MakeSystemTypes();
    internal static string GetTypeNameInternal(Type t);
    public static bool IsExtendedType(Type t);
    public static bool IsPythonType(Type t);
    private void DomainManager_AssemblyLoaded(object sender, AssemblyLoadedEventArgs e);
    private static void LoadScriptCode(PythonContext pc, Assembly asm);
    internal PythonContext get_Context();
}
internal class IronPython.Runtime.Binding.PythonConversionBinder : DynamicMetaObjectBinder {
    private PythonContext _context;
    private ConversionResultKind _kind;
    private Type _type;
    private bool _retObject;
    private CompatConversionBinder _compatConvert;
    public Type Type { get; }
    public ConversionResultKind ResultKind { get; }
    public Type ReturnType { get; }
    internal CompatConversionBinder CompatBinder { get; }
    public PythonContext Context { get; }
    public PythonConversionBinder(PythonContext context, Type type, ConversionResultKind resultKind);
    public PythonConversionBinder(PythonContext context, Type type, ConversionResultKind resultKind, bool retObject);
    public Type get_Type();
    public ConversionResultKind get_ResultKind();
    public virtual DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual Type get_ReturnType();
    private DynamicMetaObject MyDefer(DynamicMetaObject self);
    private DynamicMetaObject BindConvert(DynamicMetaObject self);
    internal CompatConversionBinder get_CompatBinder();
    internal DynamicMetaObject FallbackConvert(Type returnType, DynamicMetaObject self, DynamicMetaObject errorSuggestion);
    private static DynamicMetaObject EnsureReturnType(Type returnType, DynamicMetaObject dynamicMetaObject);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    public string StringConversion(CallSite site, object value);
    public int IntConversion(CallSite site, object value);
    public int BoolToIntConversion(CallSite site, object value);
    public int BoolToIntConversion(CallSite site, bool value);
    public bool BoolConversion(CallSite site, object value);
    public bool IntToBoolConversion(CallSite site, object value);
    public bool StringToBoolConversion(CallSite site, object value);
    public bool NullToBoolConversion(CallSite site, object value);
    public bool ObjectToBoolConversion(CallSite site, object value);
    public bool ListToBoolConversion(CallSite site, object value);
    public bool TupleToBoolConversion(CallSite site, object value);
    public IEnumerable StringToIEnumerableConversion(CallSite site, string value);
    public IEnumerator StringToIEnumeratorConversion(CallSite site, string value);
    public IEnumerable BytesToIEnumerableConversion(CallSite site, Bytes value);
    public IEnumerator BytesToIEnumeratorConversion(CallSite site, Bytes value);
    public IEnumerable ObjectToIEnumerableConversion(CallSite site, object value);
    public IEnumerator ObjectToIEnumeratorConversion(CallSite site, object value);
    public Complex BigIntegerToComplexConversion(CallSite site, BigInteger value);
    public Complex BigIntegerObjectToComplexConversion(CallSite site, object value);
    public object BigIntegerToComplexObjectConversion(CallSite site, BigInteger value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    private static DynamicMetaObject TryToGenericInterfaceConversion(DynamicMetaObject self, Type toType, Type fromType, Type wrapperType);
    private static DynamicMetaObject MakeToArrayConversion(DynamicMetaObject self, Type toType);
    private DynamicMetaObject TryToCharConversion(DynamicMetaObject self);
    private DynamicMetaObject MakeToBoolConversion(DynamicMetaObject self);
    private static DynamicMetaObject MakeNoneToBoolConversion(DynamicMetaObject self);
    private static DynamicMetaObject MakePrimitiveToBoolComparison(DynamicMetaObject self);
    private DynamicMetaObject MakeStrongBoxToBoolConversionError(DynamicMetaObject self);
    private DynamicMetaObject ConvertFromMemoryToBufferProtocol(DynamicMetaObject self, Type fromType);
    private DynamicMetaObject ConvertFromBufferProtocolToByteList(DynamicMetaObject self, Type toType);
    private static IList`1<byte> ConvertFromBufferProtocolToByteListHelper(IBufferProtocol bp);
    internal static DynamicMetaObject ConvertToIEnumerable(DynamicMetaObjectBinder conversion, DynamicMetaObject metaUserObject);
    internal static DynamicMetaObject ConvertToIEnumerator(DynamicMetaObjectBinder conversion, DynamicMetaObject metaUserObject);
    private static DynamicMetaObject MakeGetItemIterable(DynamicMetaObject metaUserObject, PythonContext state, PythonTypeSlot pts, string method);
    private static DynamicMetaObject MakeIterRule(DynamicMetaObject self, string methodName);
    public virtual string ToString();
    public sealed virtual Expression CreateExpression();
}
internal class IronPython.Runtime.Binding.PythonDeleteIndexBinder : DeleteIndexBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonDeleteIndexBinder(PythonContext context, int argCount);
    public virtual DynamicMetaObject FallbackDeleteIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject errorSuggestion);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    public sealed virtual Expression CreateExpression();
}
internal class IronPython.Runtime.Binding.PythonDeleteMemberBinder : DeleteMemberBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonDeleteMemberBinder(PythonContext context, string name);
    public PythonDeleteMemberBinder(PythonContext context, string name, bool ignoreCase);
    public virtual DynamicMetaObject FallbackDeleteMember(DynamicMetaObject self, DynamicMetaObject errorSuggestion);
    public sealed virtual PythonContext get_Context();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public sealed virtual Expression CreateExpression();
}
internal class IronPython.Runtime.Binding.PythonDeleteSliceBinder : DynamicMetaObjectBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonDeleteSliceBinder(PythonContext context);
    public virtual DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    public sealed virtual Expression CreateExpression();
}
internal class IronPython.Runtime.Binding.PythonExtensionBinder : PythonBinder {
    private ExtensionMethodSet _extMethodSet;
    public PythonExtensionBinder(PythonBinder binder, ExtensionMethodSet extensionMethods);
    public virtual MemberGroup GetMember(MemberRequestKind actionKind, Type type, string name);
    internal static bool IsApplicableExtensionMethod(Type instanceType, Type extensionMethodThisType);
}
internal class IronPython.Runtime.Binding.PythonGetIndexBinder : GetIndexBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonGetIndexBinder(PythonContext context, int argCount);
    public virtual DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject errorSuggestion);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    private object ListIndex(CallSite site, PythonList target, object index);
    private object ListIndex(CallSite site, object target, object index);
    private object ListIndex(CallSite site, object target, int index);
    private object TupleIndex(CallSite site, PythonTuple target, object index);
    private object TupleIndex(CallSite site, object target, object index);
    private object TupleIndex(CallSite site, object target, int index);
    private object StringIndex(CallSite site, string target, object index);
    private object StringIndex(CallSite site, object target, object index);
    private object StringIndex(CallSite site, object target, int index);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    public sealed virtual Expression CreateExpression();
}
internal class IronPython.Runtime.Binding.PythonGetMemberBinder : DynamicMetaObjectBinder {
    private PythonContext _context;
    private GetMemberOptions _options;
    private string _name;
    private LightThrowBinder _lightThrowBinder;
    public string Name { get; }
    public PythonContext Context { get; }
    public bool IsNoThrow { get; }
    public bool SupportsLightThrow { get; }
    public PythonGetMemberBinder(PythonContext context, string name);
    public PythonGetMemberBinder(PythonContext context, string name, bool isNoThrow);
    public virtual DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    private Func`4<CallSite, TSelfType, CodeContext, object> MakeGetMemberTarget(string name, object target, CodeContext context);
    private DynamicMetaObject GetForeignObject(DynamicMetaObject self);
    public DynamicMetaObject Fallback(DynamicMetaObject self, DynamicMetaObject codeContext);
    public DynamicMetaObject Fallback(DynamicMetaObject self, DynamicMetaObject codeContext, DynamicMetaObject errorSuggestion);
    internal static DynamicMetaObject FallbackWorker(PythonContext context, DynamicMetaObject self, DynamicMetaObject codeContext, string name, GetMemberOptions options, DynamicMetaObjectBinder action, DynamicMetaObject errorSuggestion);
    private static Expression GetFailureExpression(Type limitType, DynamicMetaObject self, string name, bool isNoThrow, DynamicMetaObjectBinder action);
    public string get_Name();
    public sealed virtual PythonContext get_Context();
    public bool get_IsNoThrow();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public sealed virtual Expression CreateExpression();
    public virtual bool get_SupportsLightThrow();
    public virtual CallSiteBinder GetLightExceptionBinder();
}
internal class IronPython.Runtime.Binding.PythonGetSliceBinder : DynamicMetaObjectBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonGetSliceBinder(PythonContext context);
    public virtual DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    public sealed virtual Expression CreateExpression();
}
internal enum IronPython.Runtime.Binding.PythonIndexType : Enum {
    public int value__;
    public static PythonIndexType GetItem;
    public static PythonIndexType SetItem;
    public static PythonIndexType DeleteItem;
    public static PythonIndexType GetSlice;
    public static PythonIndexType SetSlice;
    public static PythonIndexType DeleteSlice;
}
internal class IronPython.Runtime.Binding.PythonInvokeBinder : DynamicMetaObjectBinder {
    private PythonContext _context;
    private CallSignature _signature;
    private LightThrowBinder _lightThrowBinder;
    public CallSignature Signature { get; }
    public PythonContext Context { get; }
    public bool SupportsLightThrow { get; }
    public PythonInvokeBinder(PythonContext context, CallSignature signature);
    public virtual DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
    private DynamicMetaObject BindWorker(DynamicMetaObject context, DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    internal DynamicMetaObject Fallback(Expression codeContext, DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public CallSignature get_Signature();
    internal DynamicMetaObject InvokeForeignObject(DynamicMetaObject target, DynamicMetaObject[] args);
    private void TranslateArguments(DynamicMetaObject target, DynamicMetaObject[] args, CallInfo& callInfo, List`1& metaArgs, Expression& test, BindingRestrictions& restrictions);
    public sealed virtual PythonContext get_Context();
    public virtual Expression CreateExpression();
    public virtual bool get_SupportsLightThrow();
    public virtual CallSiteBinder GetLightExceptionBinder();
    public CallSiteBinder GetLightExceptionBinder(bool really);
}
internal class IronPython.Runtime.Binding.PythonOperationBinder : DynamicMetaObjectBinder {
    private PythonContext _context;
    private PythonOperationKind _operation;
    public PythonOperationKind Operation { get; }
    public Type ReturnType { get; }
    public PythonContext Context { get; }
    public PythonOperationBinder(PythonContext context, PythonOperationKind operation);
    public virtual DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    private KeyValuePair`2<IEnumerator, IDisposable> GetListEnumerator(CallSite site, PythonList value);
    private KeyValuePair`2<IEnumerator, IDisposable> GetListEnumerator(CallSite site, object value);
    private KeyValuePair`2<IEnumerator, IDisposable> GetTupleEnumerator(CallSite site, PythonTuple value);
    private KeyValuePair`2<IEnumerator, IDisposable> GetTupleEnumerator(CallSite site, object value);
    private bool ListContains(CallSite site, object other, PythonList value);
    private bool ListContains(CallSite site, TOther other, object value);
    private bool TupleContains(CallSite site, object other, PythonTuple value);
    private bool TupleContains(CallSite site, TOther other, object value);
    private bool StringContains(CallSite site, string other, string value);
    private bool StringContains(CallSite site, object other, string value);
    private bool StringContains(CallSite site, string other, object value);
    private bool StringContains(CallSite site, object other, object value);
    private bool SetContains(CallSite site, object other, object value);
    private int HashPythonType(CallSite site, object value);
    public PythonOperationKind get_Operation();
    public virtual Type get_ReturnType();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    public virtual string ToString();
    public sealed virtual Expression CreateExpression();
}
internal enum IronPython.Runtime.Binding.PythonOperationKind : Enum {
    public int value__;
    public static PythonOperationKind None;
    public static PythonOperationKind Documentation;
    public static PythonOperationKind CallSignatures;
    public static PythonOperationKind IsCallable;
    public static PythonOperationKind Hash;
    public static PythonOperationKind Contains;
    public static PythonOperationKind Length;
    public static PythonOperationKind Compare;
    public static PythonOperationKind DivMod;
    public static PythonOperationKind AbsoluteValue;
    public static PythonOperationKind Positive;
    public static PythonOperationKind Negate;
    public static PythonOperationKind OnesComplement;
    public static PythonOperationKind GetItem;
    public static PythonOperationKind SetItem;
    public static PythonOperationKind DeleteItem;
    public static PythonOperationKind IsFalse;
    public static PythonOperationKind Not;
    public static PythonOperationKind GetEnumeratorForIteration;
    public static PythonOperationKind Add;
    public static PythonOperationKind Subtract;
    public static PythonOperationKind Power;
    public static PythonOperationKind Multiply;
    public static PythonOperationKind MatMult;
    public static PythonOperationKind FloorDivide;
    public static PythonOperationKind TrueDivide;
    public static PythonOperationKind Mod;
    public static PythonOperationKind LeftShift;
    public static PythonOperationKind RightShift;
    public static PythonOperationKind BitwiseAnd;
    public static PythonOperationKind BitwiseOr;
    public static PythonOperationKind ExclusiveOr;
    public static PythonOperationKind LessThan;
    public static PythonOperationKind GreaterThan;
    public static PythonOperationKind LessThanOrEqual;
    public static PythonOperationKind GreaterThanOrEqual;
    public static PythonOperationKind Equal;
    public static PythonOperationKind NotEqual;
    public static PythonOperationKind InPlaceAdd;
    public static PythonOperationKind InPlaceSubtract;
    public static PythonOperationKind InPlacePower;
    public static PythonOperationKind InPlaceMultiply;
    public static PythonOperationKind InPlaceMatMult;
    public static PythonOperationKind InPlaceFloorDivide;
    public static PythonOperationKind InPlaceTrueDivide;
    public static PythonOperationKind InPlaceMod;
    public static PythonOperationKind InPlaceLeftShift;
    public static PythonOperationKind InPlaceRightShift;
    public static PythonOperationKind InPlaceBitwiseAnd;
    public static PythonOperationKind InPlaceBitwiseOr;
    public static PythonOperationKind InPlaceExclusiveOr;
    public static PythonOperationKind ReverseAdd;
    public static PythonOperationKind ReverseSubtract;
    public static PythonOperationKind ReversePower;
    public static PythonOperationKind ReverseMultiply;
    public static PythonOperationKind ReverseMatMult;
    public static PythonOperationKind ReverseFloorDivide;
    public static PythonOperationKind ReverseTrueDivide;
    public static PythonOperationKind ReverseMod;
    public static PythonOperationKind ReverseLeftShift;
    public static PythonOperationKind ReverseRightShift;
    public static PythonOperationKind ReverseBitwiseAnd;
    public static PythonOperationKind ReverseBitwiseOr;
    public static PythonOperationKind ReverseExclusiveOr;
    public static PythonOperationKind ReverseDivMod;
    public static PythonOperationKind InPlace;
    public static PythonOperationKind Reversed;
    public static PythonOperationKind Comparison;
}
internal class IronPython.Runtime.Binding.PythonOverloadResolver : DefaultOverloadResolver {
    private Expression _context;
    public Expression ContextExpression { get; }
    private PythonBinder Binder { get; }
    public PythonOverloadResolver(PythonBinder binder, DynamicMetaObject instance, IList`1<DynamicMetaObject> args, CallSignature signature, Expression codeContext);
    public PythonOverloadResolver(PythonBinder binder, IList`1<DynamicMetaObject> args, CallSignature signature, Expression codeContext);
    public PythonOverloadResolver(PythonBinder binder, IList`1<DynamicMetaObject> args, CallSignature signature, CallTypes callType, Expression codeContext);
    public Expression get_ContextExpression();
    private PythonBinder get_Binder();
    public virtual Candidate SelectBestConversionFor(DynamicMetaObject arg, ParameterWrapper candidateOne, ParameterWrapper candidateTwo, NarrowingLevel level);
    public virtual bool CanConvertFrom(Type fromType, DynamicMetaObject fromArg, ParameterWrapper toParameter, NarrowingLevel level);
    protected virtual BitArray MapSpecialParameters(ParameterMapping mapping);
    protected virtual Expression GetByRefArrayExpression(Expression argumentArrayExpression);
    protected virtual bool AllowMemberInitialization(OverloadInfo method);
    public virtual Expression Convert(DynamicMetaObject metaObject, Type restrictedType, ParameterInfo info, Type toType);
    public virtual Expression GetDynamicConversion(Expression value, Type type);
    public virtual Type GetGenericInferenceType(DynamicMetaObject dynamicObject);
    private bool IsBytesLikeParameter(ParameterWrapper parameter);
}
internal class IronPython.Runtime.Binding.PythonOverloadResolverFactory : OverloadResolverFactory {
    private PythonBinder _binder;
    internal Expression _codeContext;
    public PythonOverloadResolverFactory(PythonBinder binder, Expression codeContext);
    public virtual DefaultOverloadResolver CreateOverloadResolver(IList`1<DynamicMetaObject> args, CallSignature signature, CallTypes callType);
}
internal static class IronPython.Runtime.Binding.PythonProtocol : object {
    [NullableContextAttribute("1")]
internal static DynamicMetaObject ConvertToBool(DynamicMetaObjectBinder conversion, DynamicMetaObject self);
    [NullableContextAttribute("1")]
private static Expression GetConvertByLengthBody(PythonContext state, Expression call);
    [NullableContextAttribute("1")]
internal static DynamicMetaObject Call(DynamicMetaObjectBinder call, DynamicMetaObject target, DynamicMetaObject[] args);
    [NullableContextAttribute("1")]
private static DynamicMetaObject GetPythonType(DynamicMetaObject self);
    [NullableContextAttribute("1")]
private static Expression GetCallError(DynamicMetaObjectBinder binder, DynamicMetaObject self);
    public static DynamicMetaObject Operation(BinaryOperationBinder operation, DynamicMetaObject target, DynamicMetaObject arg, DynamicMetaObject errorSuggestion);
    public static DynamicMetaObject Operation(UnaryOperationBinder operation, DynamicMetaObject arg, DynamicMetaObject errorSuggestion);
    public static DynamicMetaObject Index(DynamicMetaObjectBinder operation, PythonIndexType index, DynamicMetaObject[] args);
    public static DynamicMetaObject Index(DynamicMetaObjectBinder operation, PythonIndexType index, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
    public static DynamicMetaObject Operation(PythonOperationBinder operation, DynamicMetaObject[] args);
    private static DynamicMetaObject MakeOperationRule(PythonOperationBinder operation, DynamicMetaObject[] args);
    private static DynamicMetaObject MakeBinaryOperation(DynamicMetaObjectBinder operation, DynamicMetaObject[] args, PythonOperationKind opStr, DynamicMetaObject errorSuggestion);
    private static DynamicMetaObject MakeContainsOperation(PythonOperationBinder operation, DynamicMetaObject[] types);
    private static void RestrictTypes(DynamicMetaObject[] types);
    private static DynamicMetaObject MakeHashOperation(PythonOperationBinder operation, DynamicMetaObject self);
    private static DynamicExpression HashBigInt(PythonOperationBinder operation, Expression expression);
    private static DynamicExpression HashConvertToInt(PythonContext state, Expression expression);
    private static DynamicMetaObject MakeUnaryOperation(DynamicMetaObjectBinder binder, DynamicMetaObject self, string symbol, DynamicMetaObject errorSuggestion);
    private static DynamicMetaObject MakeEnumeratorOperation(PythonOperationBinder operation, DynamicMetaObject self);
    private static NewExpression MakeEnumeratorResult(Expression tmp);
    private static DynamicMetaObject MakeUnaryNotOperation(DynamicMetaObjectBinder operation, DynamicMetaObject self, Type retType, DynamicMetaObject errorSuggestion);
    private static DynamicMetaObject MakeDocumentationOperation(PythonOperationBinder operation, DynamicMetaObject[] args);
    internal static DynamicMetaObject MakeCallSignatureOperation(DynamicMetaObject self, IList`1<MethodBase> targets);
    private static DynamicMetaObject MakeIscallableOperation(PythonOperationBinder operation, DynamicMetaObject[] args);
    private static DynamicMetaObject MakeSimpleOperation(DynamicMetaObject[] types, DynamicMetaObjectBinder binder, PythonOperationKind operation, DynamicMetaObject errorSuggestion);
    private static void GetOperatorMethods(DynamicMetaObject[] types, PythonOperationKind oper, PythonContext state, SlotOrFunction& fbinder, SlotOrFunction& rbinder, PythonTypeSlot& fSlot, PythonTypeSlot& rSlot);
    private static bool IsReverseOperator(PythonOperationKind oper);
    private static bool IsSequence(DynamicMetaObject metaObject);
    private static DynamicMetaObject MakeBinaryOperatorResult(DynamicMetaObject[] types, DynamicMetaObjectBinder operation, PythonOperationKind op, SlotOrFunction fCand, SlotOrFunction rCand, PythonTypeSlot fSlot, PythonTypeSlot rSlot, DynamicMetaObject errorSuggestion);
    private static void MakeCompareReturn(ConditionalBuilder bodyBuilder, Expression retCondition, Expression retValue, bool isReverse, Type retType);
    private static bool MakeOneCompareGeneric(SlotOrFunction target, bool reverse, DynamicMetaObject[] types, ComparisonHelper returner, ConditionalBuilder bodyBuilder, Type retType);
    private static bool MakeOneTarget(PythonContext state, SlotOrFunction target, PythonTypeSlot slotTarget, ConditionalBuilder bodyBuilder, bool reverse, DynamicMetaObject[] types);
    private static void MakeSlotCall(PythonContext state, DynamicMetaObject[] types, ConditionalBuilder bodyBuilder, PythonTypeSlot slotTarget, bool reverse);
    private static void MakeSlotCallWorker(PythonContext state, PythonTypeSlot slotTarget, Expression self, ConditionalBuilder bodyBuilder, Expression[] args);
    private static DynamicMetaObject MakeComparisonOperation(DynamicMetaObject[] types, DynamicMetaObjectBinder operation, PythonOperationKind op, DynamicMetaObject errorSuggestion);
    private static Expression MakeFallbackCompare(DynamicMetaObjectBinder binder, PythonOperationKind op, DynamicMetaObject[] types);
    private static DynamicMetaObject MakeIndexerOperation(DynamicMetaObjectBinder operation, PythonIndexType op, DynamicMetaObject[] types, DynamicMetaObject errorSuggestion);
    private static DynamicMetaObject MakeUnindexableError(DynamicMetaObjectBinder operation, PythonIndexType op, DynamicMetaObject[] types, DynamicMetaObject indexedType, PythonContext state);
    private static DynamicMetaObject[] ConvertArgs(DynamicMetaObject[] types);
    private static DynamicMetaObject[] GetItemSliceArguments(PythonContext state, PythonIndexType op, DynamicMetaObject[] types);
    private static bool HasOnlyNumericTypes(DynamicMetaObjectBinder action, DynamicMetaObject[] types, bool skipLast);
    private static bool IsIndexType(PythonContext state, DynamicMetaObject obj);
    private static bool IsSlice(PythonIndexType op);
    private static void GetIndexOperators(PythonIndexType op, String& item, Int32& mandatoryArgs);
    private static DynamicMetaObject GetSetSlice(PythonContext state, DynamicMetaObject[] args);
    private static DynamicMetaObject GetGetOrDeleteSlice(PythonContext state, DynamicMetaObject[] args);
    private static Expression GetGetOrDeleteParameter(DynamicMetaObject[] args, int index);
    private static Expression GetSetParameter(DynamicMetaObject[] args, int index);
    private static bool IsComparison(PythonOperationKind op);
    private static Expression GetCompareNode(PythonOperationKind op, bool reverse, Expression expr);
    public static PythonOperationKind OperatorToReverseOperator(PythonOperationKind op);
    private static Expression GetCompareExpression(PythonOperationKind op, bool reverse, Expression value);
    internal static Expression CheckMissing(Expression toCheck);
    private static DynamicMetaObject MakeRuleForNoMatch(DynamicMetaObjectBinder operation, PythonOperationKind op, DynamicMetaObject errorSuggestion, DynamicMetaObject[] types);
    internal static string MakeUnaryOpErrorMessage(string op, string xType);
    internal static string MakeBinaryOpErrorMessage(PythonOperationKind op, string xType, string yType);
    internal static string GetOperatorDisplay(PythonOperationKind op);
    private static DynamicMetaObject MakeBinaryThrow(DynamicMetaObjectBinder action, PythonOperationKind op, DynamicMetaObject[] args);
    public static DynamicMetaObject TypeError(DynamicMetaObjectBinder action, string message, DynamicMetaObject[] types);
    private static DynamicMetaObject GenericFallback(DynamicMetaObjectBinder action, DynamicMetaObject[] types);
    [CompilerGeneratedAttribute]
internal static MethodInfo <MakeFallbackCompare>g__GetComparisonFallbackMethod|36_0(PythonOperationKind op);
}
internal class IronPython.Runtime.Binding.PythonSetIndexBinder : SetIndexBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonSetIndexBinder(PythonContext context, int argCount);
    public virtual DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    private object DictAssign(CallSite site, object dict, object key, object value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    public sealed virtual Expression CreateExpression();
}
internal class IronPython.Runtime.Binding.PythonSetMemberBinder : SetMemberBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonSetMemberBinder(PythonContext context, string name);
    public PythonSetMemberBinder(PythonContext context, string name, bool ignoreCase);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject self, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    public sealed virtual PythonContext get_Context();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public sealed virtual Expression CreateExpression();
}
internal class IronPython.Runtime.Binding.PythonSetSliceBinder : DynamicMetaObjectBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonSetSliceBinder(PythonContext context);
    public virtual DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual PythonContext get_Context();
    public sealed virtual Expression CreateExpression();
}
internal class IronPython.Runtime.Binding.PythonUnaryOperationBinder : UnaryOperationBinder {
    private PythonContext _context;
    public PythonContext Context { get; }
    public PythonUnaryOperationBinder(PythonContext context, ExpressionType operation);
    public virtual DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    private object IntNegate(CallSite site, object value);
    private bool StringIsFalse(CallSite site, object value);
    private bool ListIsFalse(CallSite site, object value);
    private bool NoneIsFalse(CallSite site, object value);
    private bool IntIsFalse(CallSite site, object value);
    private bool TupleIsFalse(CallSite site, object value);
    private bool BoolIsFalse(CallSite site, object value);
    private object StringNot(CallSite site, object value);
    private object ListNot(CallSite site, object value);
    private object NoneNot(CallSite site, object value);
    private object TupleNot(CallSite site, object value);
    private object BoolNot(CallSite site, object value);
    private object IntNot(CallSite site, object value);
    public sealed virtual PythonContext get_Context();
    public virtual string ToString();
    public sealed virtual Expression CreateExpression();
}
public class IronPython.Runtime.Binding.SiteLocalStorageBuilder : ArgBuilder {
    public int Priority { get; }
    public int ConsumedArgumentCount { get; }
    public SiteLocalStorageBuilder(ParameterInfo info);
    public virtual int get_Priority();
    public virtual int get_ConsumedArgumentCount();
    protected virtual Expression ToExpression(OverloadResolver resolver, RestrictedArguments args, Boolean[] hasBeenUsed);
}
internal class IronPython.Runtime.Binding.SlotOrFunction : object {
    private BindingTarget _function;
    private DynamicMetaObject _target;
    private PythonTypeSlot _slot;
    public static SlotOrFunction Empty;
    public NarrowingLevel NarrowingLevel { get; }
    public Type ReturnType { get; }
    public bool MaybeNotImplemented { get; }
    public bool Success { get; }
    public bool IsNull { get; }
    public DynamicMetaObject Target { get; }
    public SlotOrFunction(BindingTarget function, DynamicMetaObject target);
    public SlotOrFunction(DynamicMetaObject target);
    public SlotOrFunction(DynamicMetaObject target, PythonTypeSlot slot);
    private static SlotOrFunction();
    public NarrowingLevel get_NarrowingLevel();
    public Type get_ReturnType();
    public bool get_MaybeNotImplemented();
    public bool get_Success();
    public bool get_IsNull();
    public DynamicMetaObject get_Target();
    public static bool GetCombinedTargets(SlotOrFunction fCand, SlotOrFunction rCand, SlotOrFunction& fTarget, SlotOrFunction& rTarget);
    public bool ShouldWarn(PythonContext context, WarningInfo& info);
    public static SlotOrFunction GetSlotOrFunction(PythonContext state, string op, DynamicMetaObject[] types);
    internal static bool TryGetBinder(PythonContext state, DynamicMetaObject[] types, string op, string rop, SlotOrFunction& res);
    internal static bool TryGetBinder(PythonContext state, DynamicMetaObject[] types, string op, string rop, SlotOrFunction& res, PythonType& declaringType);
    private static BuiltinFunction CheckAlwaysNotImplemented(BuiltinFunction xBf);
    private static bool ContainsMethodSignature(IList`1<MethodBase> existing, MethodBase check);
    private static bool MatchesMethodSignature(ParameterInfo[] pis, MethodBase mb);
}
internal class IronPython.Runtime.Binding.ValidationInfo : object {
    public Expression Test;
    public static ValidationInfo Empty;
    public ValidationInfo(Expression test);
    private static ValidationInfo();
}
internal class IronPython.Runtime.Binding.WarningInfo : object {
    private string _message;
    private PythonType _type;
    private Expression _condition;
    public WarningInfo(PythonType type, string message, Expression condition);
    public DynamicMetaObject AddWarning(Expression codeContext, DynamicMetaObject result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class IronPython.Runtime.BufferBytesEnumerator : ValueType {
    [NullableAttribute("0")]
private ReadOnlySpan`1<byte> _span;
    private IEnumerator`1<int> _offsets;
    public byte Current { get; }
    public BufferBytesEnumerator(IPythonBuffer buffer);
    public byte get_Current();
    public bool MoveNext();
    public BufferBytesEnumerator GetEnumerator();
    [IteratorStateMachineAttribute("IronPython.Runtime.BufferBytesEnumerator/<EnumerateDimension>d__7")]
private static IEnumerable`1<int> EnumerateDimension(IPythonBuffer buffer, int ofs, int dim);
}
[FlagsAttribute]
public enum IronPython.Runtime.BufferFlags : Enum {
    public int value__;
    public static BufferFlags Writable;
    public static BufferFlags Format;
    public static BufferFlags ND;
    public static BufferFlags Strides;
    public static BufferFlags CContiguous;
    public static BufferFlags FContiguous;
    public static BufferFlags AnyContiguous;
    public static BufferFlags Indirect;
    public static BufferFlags Simple;
    public static BufferFlags Contig;
    public static BufferFlags ContigRO;
    public static BufferFlags Strided;
    public static BufferFlags StridedRO;
    public static BufferFlags Records;
    public static BufferFlags RecordsRO;
    public static BufferFlags Full;
    public static BufferFlags FullRO;
}
[ExtensionAttribute]
internal static class IronPython.Runtime.BufferProtocolExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static IPythonBuffer GetBufferNoThrow(IBufferProtocol bufferProtocol, BufferFlags flags);
}
public class IronPython.Runtime.BuiltinPythonModule : object {
    private PythonContext _context;
    private CodeContext _codeContext;
    protected PythonContext Context { get; }
    protected CodeContext Globals { get; }
    protected BuiltinPythonModule(PythonContext context);
    protected internal virtual void Initialize(CodeContext codeContext, Dictionary`2<string, PythonGlobal> optimizedGlobals);
    protected internal virtual IEnumerable`1<string> GetGlobalVariableNames();
    protected internal virtual void PerformModuleReload();
    protected PythonContext get_Context();
    protected CodeContext get_Globals();
}
internal class IronPython.Runtime.BuiltinsDictionaryStorage : ModuleDictionaryStorage {
    private EventHandler`1<ModuleChangeEventArgs> _change;
    private object _import;
    public BuiltinsDictionaryStorage(EventHandler`1<ModuleChangeEventArgs> change);
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    protected virtual void LazyAdd(object name, object value);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual void Clear(DictionaryStorage& storage);
    public virtual bool TryGetImport(Object& value);
    public virtual void Reload();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("bytearray")]
public class IronPython.Runtime.ByteArray : object {
    private ArrayData`1<byte> _bytes;
    public static object __hash__;
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ArrayData`1<byte> UnsafeByteList { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    private byte System.Collections.Generic.IList<System.Byte>.Item { get; private set; }
    private byte System.Collections.Generic.IReadOnlyList<System.Byte>.Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private ByteArray(ArrayData`1<byte> bytes);
    internal ByteArray(IEnumerable`1<byte> bytes);
    public void __init__();
    public void __init__(int source);
    public void __init__(IBufferProtocol source);
    public void __init__(CodeContext context, object source);
    public void __init__(string string);
    public void __init__(CodeContext context, string source, string encoding, string errors);
    internal static ByteArray Make(List`1<byte> bytes);
    internal ArrayData`1<byte> get_UnsafeByteList();
    public void append(int item);
    [NullableContextAttribute("2")]
public void append(object item);
    public void extend(IEnumerable`1<byte> seq);
    public void extend(CodeContext context, object seq);
    public void insert(int index, int value);
    [NullableContextAttribute("2")]
public void insert(int index, object value);
    public int pop();
    public int pop(int index);
    private void RemoveByte(byte value);
    public void remove(int value);
    [NullableContextAttribute("2")]
public void remove(object value);
    public void reverse();
    public ByteArray InPlaceAdd(ByteArray other);
    public ByteArray InPlaceAdd(IBufferProtocol other);
    public ByteArray InPlaceMultiply(int len);
    public ByteArray capitalize();
    public ByteArray center(int width);
    public ByteArray center(int width, IList`1<byte> fillchar);
    private ByteArray center(int width, byte fillchar);
    public void clear();
    public ByteArray copy();
    public int count(IList`1<byte> sub);
    public int count(IList`1<byte> sub, int start);
    public int count(IList`1<byte> sub, int start, int end);
    public int count(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int count(IList`1<byte> sub, object start, object end);
    public int count(BigInteger byte);
    public int count(BigInteger byte, int start);
    public int count(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int count(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int count(BigInteger byte, object start, object end);
    public string decode(CodeContext context, string encoding, string errors);
    public string decode(CodeContext context, Encoding encoding, string errors);
    public bool endswith(IList`1<byte> suffix);
    public bool endswith(IList`1<byte> suffix, int start);
    public bool endswith(IList`1<byte> suffix, int start, int end);
    public bool endswith(IList`1<byte> suffix, object start);
    [NullableContextAttribute("2")]
public bool endswith(IList`1<byte> suffix, object start, object end);
    public bool endswith(PythonTuple suffix);
    public bool endswith(PythonTuple suffix, int start);
    public bool endswith(PythonTuple suffix, int start, int end);
    public bool endswith(PythonTuple suffix, object start);
    [NullableContextAttribute("2")]
public bool endswith(PythonTuple suffix, object start, object end);
    [NullableContextAttribute("2")]
[DocumentationAttribute("
Return True if self ends with the specified suffix, False otherwise.
With optional start, test self beginning at that position.
With optional end, stop comparing self at that position.
suffix can also be a tuple of bytes-like objects to try.")]
public bool endswith(object suffix, object start, object end);
    public ByteArray expandtabs();
    public ByteArray expandtabs(int tabsize);
    public int find(IList`1<byte> sub);
    public int find(IList`1<byte> sub, int start);
    public int find(IList`1<byte> sub, int start, int end);
    public int find(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int find(IList`1<byte> sub, object start, object end);
    public int find(BigInteger byte);
    public int find(BigInteger byte, int start);
    public int find(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int find(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int find(BigInteger byte, object start, object end);
    public static ByteArray fromhex(string string);
    public string hex();
    public int index(IList`1<byte> sub);
    public int index(IList`1<byte> sub, int start);
    public int index(IList`1<byte> sub, int start, int end);
    public int index(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int index(IList`1<byte> sub, object start, object end);
    public int index(BigInteger byte);
    public int index(BigInteger byte, int start);
    public int index(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int index(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int index(BigInteger byte, object start, object end);
    public bool isalnum();
    public bool isalpha();
    public bool isdigit();
    public bool islower();
    public bool isspace();
    public bool istitle();
    public bool isupper();
    public ByteArray join(object sequence);
    public ByteArray join(PythonList sequence);
    public ByteArray ljust(int width);
    public ByteArray ljust(int width, IList`1<byte> fillchar);
    private ByteArray ljust(int width, byte fillchar);
    public ByteArray lower();
    public ByteArray lstrip();
    public ByteArray lstrip(IList`1<byte> chars);
    public static Bytes maketrans(IList`1<byte> from, IList`1<byte> to);
    public PythonTuple partition(IList`1<byte> sep);
    public ByteArray replace(IList`1<byte> old, IList`1<byte> new);
    public ByteArray replace(IList`1<byte> old, IList`1<byte> new, int count);
    public int rfind(IList`1<byte> sub);
    public int rfind(IList`1<byte> sub, int start);
    public int rfind(IList`1<byte> sub, int start, int end);
    public int rfind(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int rfind(IList`1<byte> sub, object start, object end);
    public int rfind(BigInteger byte);
    public int rfind(BigInteger byte, int start);
    public int rfind(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int rfind(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int rfind(BigInteger byte, object start, object end);
    public int rindex(IList`1<byte> sub);
    public int rindex(IList`1<byte> sub, int start);
    public int rindex(IList`1<byte> sub, int start, int end);
    public int rindex(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int rindex(IList`1<byte> sub, object start, object end);
    public int rindex(BigInteger byte);
    public int rindex(BigInteger byte, int start);
    public int rindex(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int rindex(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int rindex(BigInteger byte, object start, object end);
    public ByteArray rjust(int width);
    public ByteArray rjust(int width, IList`1<byte> fillchar);
    private ByteArray rjust(int width, int fillchar);
    public PythonTuple rpartition(IList`1<byte> sep);
    public PythonList rsplit(IList`1<byte> sep, int maxsplit);
    public ByteArray rstrip();
    public ByteArray rstrip(IList`1<byte> chars);
    public PythonList split(IList`1<byte> sep, int maxsplit);
    public PythonList splitlines();
    public PythonList splitlines(bool keepends);
    public bool startswith(IList`1<byte> prefix);
    public bool startswith(IList`1<byte> prefix, int start);
    public bool startswith(IList`1<byte> prefix, int start, int end);
    public bool startswith(IList`1<byte> prefix, object start);
    [NullableContextAttribute("2")]
public bool startswith(IList`1<byte> prefix, object start, object end);
    public bool startswith(PythonTuple prefix);
    public bool startswith(PythonTuple prefix, int start);
    public bool startswith(PythonTuple prefix, int start, int end);
    public bool startswith(PythonTuple prefix, object start);
    [NullableContextAttribute("2")]
public bool startswith(PythonTuple prefix, object start, object end);
    [NullableContextAttribute("2")]
[DocumentationAttribute("
Return True if self starts with the specified prefix, False otherwise.
With optional start, test self beginning at that position.
With optional end, stop comparing self at that position.
prefix can also be a tuple of bytes-like objects to try.")]
public bool startswith(object prefix, object start, object end);
    public ByteArray strip();
    public ByteArray strip(IList`1<byte> chars);
    public ByteArray swapcase();
    public ByteArray title();
    [NullableContextAttribute("2")]
private void ValidateTable(IList`1<byte> table);
    public ByteArray translate(IList`1<byte> table);
    public ByteArray translate(IList`1<byte> table, IList`1<byte> delete);
    [NullableContextAttribute("2")]
public ByteArray translate(IList`1<byte> table, object delete);
    public ByteArray upper();
    public ByteArray zfill(int width);
    public int __alloc__();
    public bool __contains__(IList`1<byte> bytes);
    public bool __contains__(int value);
    public bool __contains__(CodeContext context, object value);
    public IEnumerator`1<int> __iter__();
    public PythonTuple __reduce__(CodeContext context);
    private string Repr();
    public virtual string __str__(CodeContext context);
    public virtual string __repr__(CodeContext context);
    public virtual string ToString();
    public static ByteArray op_Addition(ByteArray self, ByteArray other);
    public static ByteArray op_Addition(ByteArray self, IBufferProtocol other);
    public static ByteArray op_Addition(ByteArray self, object other);
    private static Exception TypeErrorForConcat(object self, object other);
    private static ByteArray MultiplyWorker(ByteArray self, int count);
    public static ByteArray op_Multiply(ByteArray self, int count);
    public static object op_Multiply(ByteArray self, Index count);
    public static ByteArray op_Multiply(ByteArray self, object count);
    public static ByteArray op_Multiply(int count, ByteArray self);
    public static object op_Multiply(Index count, ByteArray self);
    public static ByteArray op_Multiply(object count, ByteArray self);
    public static bool op_GreaterThan(ByteArray x, ByteArray y);
    public static bool op_LessThan(ByteArray x, ByteArray y);
    public static bool op_GreaterThanOrEqual(ByteArray x, ByteArray y);
    public static bool op_LessThanOrEqual(ByteArray x, ByteArray y);
    public static bool op_GreaterThan(ByteArray x, Bytes y);
    public static bool op_LessThan(ByteArray x, Bytes y);
    public static bool op_GreaterThanOrEqual(ByteArray x, Bytes y);
    public static bool op_LessThanOrEqual(ByteArray x, Bytes y);
    [NullableContextAttribute("2")]
public object get_Item(int index);
    [NullableContextAttribute("2")]
public void set_Item(int index, object value);
    [NullableContextAttribute("2")]
public object get_Item(BigInteger index);
    [NullableContextAttribute("2")]
public void set_Item(BigInteger index, object value);
    public object get_Item(Slice slice);
    public void set_Item(Slice slice, object value);
    [NullableContextAttribute("2")]
public object get_Item(object index);
    [NullableContextAttribute("2")]
public void set_Item(object index, object value);
    public void DeleteItem(int index);
    public void DeleteItem(Slice slice);
    [NullableContextAttribute("2")]
public void DeleteItem(object slice);
    private static ByteArray JoinOne(object curVal);
    private ByteArray CopyThis();
    private void SliceNoStep(int start, int stop, IList`1<byte> other);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int IndexOf(byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Insert(int index, byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void RemoveAt(int index);
    private sealed virtual override byte System.Collections.Generic.IList<System.Byte>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Byte>.set_Item(int index, byte value);
    private sealed virtual override byte System.Collections.Generic.IReadOnlyList<System.Byte>.get_Item(int index);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(Byte[] array, int arrayIndex);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int get_Count();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool get_IsReadOnly();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<byte> GetEnumerator();
    [IteratorStateMachineAttribute("IronPython.Runtime.ByteArray/<System-Collections-IEnumerable-GetEnumerator>d__216")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool __eq__(CodeContext context, ByteArray value);
    public bool __eq__(CodeContext context, MemoryView value);
    public bool __eq__(CodeContext context, IBufferProtocol value);
    public NotImplementedType __eq__(CodeContext context, object value);
    public bool __ne__(CodeContext context, ByteArray value);
    public bool __ne__(CodeContext context, MemoryView value);
    public bool __ne__(CodeContext context, IBufferProtocol value);
    public NotImplementedType __ne__(CodeContext context, object value);
    private bool Equals(ByteArray other);
    private bool Equals(IList`1<byte> other);
    [NullableContextAttribute("0")]
private bool Equals(ReadOnlySpan`1<byte> other);
    private sealed virtual override IPythonBuffer IronPython.Runtime.IBufferProtocol.GetBuffer(BufferFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("bytes")]
public class IronPython.Runtime.Bytes : object {
    private Byte[] _bytes;
    internal static Bytes Empty;
    private static IReadOnlyList`1<Bytes> oneByteBytes;
    internal Byte[] UnsafeByteArray { get; }
    public int Item { get; public set; }
    public int Item { get; }
    public Bytes Item { get; }
    public int Item { get; }
    private byte System.Collections.Generic.IList<System.Byte>.Item { get; private set; }
    private byte System.Collections.Generic.IReadOnlyList<System.Byte>.Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Bytes(Bytes bytes);
    public Bytes(IEnumerable`1<byte> bytes);
    public Bytes(IBufferProtocol source);
    private Bytes(Byte[] bytes);
    private static Bytes();
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, IBufferProtocol source);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, object object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, Extensible`1<int> size);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, int size);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, ExtensibleString string);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, string string);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, string string, string encoding);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, string string, string encoding, string errors);
    internal static Bytes FromByte(byte b);
    internal static Bytes FromObject(CodeContext context, object o);
    internal static Bytes Make(Byte[] bytes);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Byte[] get_UnsafeByteArray();
    private Bytes AsBytes();
    public Bytes capitalize();
    public Bytes center(int width);
    public Bytes center(int width, IList`1<byte> fillchar);
    private Bytes center(int width, byte fillchar);
    public int count(IList`1<byte> sub);
    public int count(IList`1<byte> sub, int start);
    public int count(IList`1<byte> sub, int start, int end);
    public int count(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int count(IList`1<byte> sub, object start, object end);
    public int count(BigInteger byte);
    public int count(BigInteger byte, int start);
    public int count(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int count(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int count(BigInteger byte, object start, object end);
    public string decode(CodeContext context, string encoding, string errors);
    public string decode(CodeContext context, Encoding encoding, string errors);
    public bool endswith(IList`1<byte> suffix);
    public bool endswith(IList`1<byte> suffix, int start);
    public bool endswith(IList`1<byte> suffix, int start, int end);
    public bool endswith(IList`1<byte> suffix, object start);
    [NullableContextAttribute("2")]
public bool endswith(IList`1<byte> suffix, object start, object end);
    public bool endswith(PythonTuple suffix);
    public bool endswith(PythonTuple suffix, int start);
    public bool endswith(PythonTuple suffix, int start, int end);
    public bool endswith(PythonTuple suffix, object start);
    [NullableContextAttribute("2")]
public bool endswith(PythonTuple suffix, object start, object end);
    [NullableContextAttribute("2")]
[DocumentationAttribute("
Return True if self ends with the specified suffix, False otherwise.
With optional start, test self beginning at that position.
With optional end, stop comparing self at that position.
suffix can also be a tuple of bytes-like objects to try.")]
public bool endswith(object suffix, object start, object end);
    public Bytes expandtabs();
    public Bytes expandtabs(int tabsize);
    public int find(IList`1<byte> sub);
    public int find(IList`1<byte> sub, int start);
    public int find(IList`1<byte> sub, int start, int end);
    public int find(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int find(IList`1<byte> sub, object start, object end);
    public int find(BigInteger byte);
    public int find(BigInteger byte, int start);
    public int find(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int find(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int find(BigInteger byte, object start, object end);
    public static Bytes fromhex(string string);
    public string hex();
    [NullableContextAttribute("0")]
internal static string ToHex(ReadOnlySpan`1<byte> bytes);
    public int index(IList`1<byte> sub);
    public int index(IList`1<byte> sub, int start);
    public int index(IList`1<byte> sub, int start, int end);
    public int index(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int index(IList`1<byte> sub, object start, object end);
    public int index(BigInteger byte);
    public int index(BigInteger byte, Nullable`1<int> start);
    public int index(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int index(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int index(BigInteger byte, object start, object end);
    public bool isalnum();
    public bool isalpha();
    public bool isdigit();
    public bool islower();
    public bool isspace();
    public bool istitle();
    public bool isupper();
    public Bytes join(object sequence);
    public Bytes join(PythonList sequence);
    public Bytes ljust(int width);
    public Bytes ljust(int width, IList`1<byte> fillchar);
    private Bytes ljust(int width, byte fillchar);
    public Bytes lower();
    public Bytes lstrip();
    public Bytes lstrip(IList`1<byte> chars);
    public static Bytes maketrans(IList`1<byte> from, IList`1<byte> to);
    public PythonTuple partition(IList`1<byte> sep);
    public Bytes replace(IList`1<byte> old, IList`1<byte> new);
    public Bytes replace(IList`1<byte> old, IList`1<byte> new, int count);
    public int rfind(IList`1<byte> sub);
    public int rfind(IList`1<byte> sub, int start);
    public int rfind(IList`1<byte> sub, int start, int end);
    public int rfind(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int rfind(IList`1<byte> sub, object start, object end);
    public int rfind(BigInteger byte);
    public int rfind(BigInteger byte, int start);
    public int rfind(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int rfind(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int rfind(BigInteger byte, object start, object end);
    public int rindex(IList`1<byte> sub);
    public int rindex(IList`1<byte> sub, int start);
    public int rindex(IList`1<byte> sub, int start, int end);
    public int rindex(IList`1<byte> sub, object start);
    [NullableContextAttribute("2")]
public int rindex(IList`1<byte> sub, object start, object end);
    public int rindex(BigInteger byte);
    public int rindex(BigInteger byte, int start);
    public int rindex(BigInteger byte, int start, int end);
    [NullableContextAttribute("2")]
public int rindex(BigInteger byte, object start);
    [NullableContextAttribute("2")]
public int rindex(BigInteger byte, object start, object end);
    public Bytes rjust(int width);
    public Bytes rjust(int width, IList`1<byte> fillchar);
    private Bytes rjust(int width, byte fillchar);
    public PythonTuple rpartition(IList`1<byte> sep);
    public PythonList rsplit(IList`1<byte> sep, int maxsplit);
    public Bytes rstrip();
    public Bytes rstrip(IList`1<byte> chars);
    public PythonList split(IList`1<byte> sep, int maxsplit);
    public PythonList splitlines();
    public PythonList splitlines(bool keepends);
    public bool startswith(IList`1<byte> prefix);
    public bool startswith(IList`1<byte> prefix, int start);
    public bool startswith(IList`1<byte> prefix, int start, int end);
    public bool startswith(IList`1<byte> prefix, object start);
    [NullableContextAttribute("2")]
public bool startswith(IList`1<byte> prefix, object start, object end);
    public bool startswith(PythonTuple prefix);
    public bool startswith(PythonTuple prefix, int start);
    public bool startswith(PythonTuple prefix, int start, int end);
    public bool startswith(PythonTuple prefix, object start);
    [NullableContextAttribute("2")]
public bool startswith(PythonTuple prefix, object start, object end);
    [NullableContextAttribute("2")]
[DocumentationAttribute("
Return True if self starts with the specified prefix, False otherwise.
With optional start, test self beginning at that position.
With optional end, stop comparing self at that position.
prefix can also be a tuple of bytes-like objects to try.")]
public bool startswith(object prefix, object start, object end);
    public Bytes strip();
    public Bytes strip(IList`1<byte> chars);
    public Bytes swapcase();
    public Bytes title();
    [NullableContextAttribute("2")]
private void ValidateTable(IList`1<byte> table);
    public Bytes translate(IList`1<byte> table);
    public Bytes translate(IList`1<byte> table, IList`1<byte> delete);
    [NullableContextAttribute("2")]
public Bytes translate(IList`1<byte> table, object delete);
    public Bytes upper();
    public Bytes zfill(int width);
    public bool __contains__(IList`1<byte> bytes);
    public bool __contains__(CodeContext context, int value);
    public bool __contains__(CodeContext context, object value);
    public PythonTuple __getnewargs__();
    public IEnumerator`1<int> __iter__();
    public virtual string __str__(CodeContext context);
    public virtual string __repr__(CodeContext context);
    public virtual string ToString();
    public static Bytes op_Addition(Bytes self, Bytes other);
    public static Bytes op_Addition(Bytes self, ByteArray other);
    public static Bytes op_Addition(Bytes self, IBufferProtocol other);
    public static Bytes op_Addition(Bytes self, object other);
    private static Bytes MultiplyWorker(Bytes self, int count);
    public static Bytes op_Multiply(Bytes self, int count);
    public static object op_Multiply(Bytes self, Index count);
    public static Bytes op_Multiply(Bytes self, object count);
    public static Bytes op_Multiply(int count, Bytes self);
    public static object op_Multiply(Index count, Bytes self);
    public static Bytes op_Multiply(object count, Bytes self);
    public static bool op_GreaterThan(Bytes x, Bytes y);
    public static bool op_LessThan(Bytes x, Bytes y);
    public static bool op_GreaterThanOrEqual(Bytes x, Bytes y);
    public static bool op_LessThanOrEqual(Bytes x, Bytes y);
    public int get_Item(int index);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void set_Item(int index, int value);
    public int get_Item(BigInteger index);
    public Bytes get_Item(Slice slice);
    [NullableContextAttribute("2")]
public int get_Item(object index);
    [NullableContextAttribute("0")]
internal ReadOnlyMemory`1<byte> AsMemory();
    [NullableContextAttribute("2")]
private static bool TryInvokeBytesOperator(CodeContext context, object obj, Bytes& bytes);
    private static Bytes JoinOne(object curVal);
    internal static Bytes Concat(IList`1<Bytes> list, int length);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int IndexOf(byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Insert(int index, byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void RemoveAt(int index);
    private sealed virtual override byte System.Collections.Generic.IList<System.Byte>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Byte>.set_Item(int index, byte value);
    private sealed virtual override byte System.Collections.Generic.IReadOnlyList<System.Byte>.get_Item(int index);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(Byte[] array, int arrayIndex);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int get_Count();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool get_IsReadOnly();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(byte item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<byte> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool __eq__(CodeContext context, Bytes value);
    public NotImplementedType __eq__(CodeContext context, object value);
    public bool __ne__(CodeContext context, Bytes value);
    public NotImplementedType __ne__(CodeContext context, object value);
    [NullableContextAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Equals(Bytes other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override Expression Microsoft.Scripting.Runtime.IExpressionSerializable.CreateExpression();
    private sealed virtual override IPythonBuffer IronPython.Runtime.IBufferProtocol.GetBuffer(BufferFlags flags);
    [CompilerGeneratedAttribute]
internal static char <ToHex>g__ToAscii|64_0(int b);
}
[AttributeUsageAttribute("2048")]
public class IronPython.Runtime.BytesLikeAttribute : Attribute {
}
[PythonTypeAttribute]
public class IronPython.Runtime.classmethod : PythonTypeSlot {
    internal object _func;
    internal bool GetAlwaysSucceeds { get; }
    public object __func__ { get; }
    public bool __isabstractmethod__ { get; }
    public void __init__(CodeContext context, object func);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    public object get___func__();
    public bool get___isabstractmethod__();
    public object __get__(object instance, object owner);
}
[AttributeUsageAttribute("64")]
public class IronPython.Runtime.ClassMethodAttribute : Attribute {
}
[PythonTypeAttribute("method_descriptor")]
[DontMapGetMemberNamesToDirAttribute]
public class IronPython.Runtime.ClassMethodDescriptor : PythonTypeSlot {
    internal BuiltinFunction _func;
    internal ClassMethodDescriptor(BuiltinFunction func);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    private PythonType CheckGetArgs(CodeContext context, object instance, PythonType owner);
    public virtual string __repr__(CodeContext context);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[PythonTypeAttribute("cell")]
public class IronPython.Runtime.ClosureCell : object {
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Value;
    public static object __hash__;
    public object cell_contents { get; }
    internal ClosureCell(object value);
    public object get_cell_contents();
    public sealed virtual string __repr__(CodeContext context);
    private string GetContentsRepr();
    public object __eq__(CodeContext context, ClosureCell other);
    public object __ne__(CodeContext context, ClosureCell other);
    public object __lt__(CodeContext context, ClosureCell other);
    public object __le__(CodeContext context, ClosureCell other);
    public object __ge__(CodeContext context, ClosureCell other);
    public object __gt__(CodeContext context, ClosureCell other);
}
public static class IronPython.Runtime.ClrModule : object {
    public static bool IsNetCoreApp;
    public static bool IsDebug;
    private static int _isMono;
    private static PythonType _strongBoxType;
    public static string TargetFramework { get; }
    internal static string FileVersion { get; }
    internal static string FrameworkDescription { get; }
    public static bool IsMono { get; }
    public static PythonType Reference { get; }
    public static PythonType StrongBox { get; }
    private static ClrModule();
    public static string get_TargetFramework();
    internal static string get_FileVersion();
    internal static string get_FrameworkDescription();
    public static bool get_IsMono();
    public static void PerformModuleReload(PythonContext context, PythonDictionary dict);
    public static ScriptDomainManager GetCurrentRuntime(CodeContext context);
    [DocumentationAttribute("Adds a reference to a .NET assembly.  Parameters can be an already loaded
Assembly object, a full assembly name, or a partial assembly name. After the
load the assemblies namespaces and top-level types will be available via 
import Namespace.")]
public static void AddReference(CodeContext context, Object[] references);
    [DocumentationAttribute("Adds a reference to a .NET assembly.  One or more assembly names can
be provided.  The assembly is searched for in the directories specified in 
sys.path and dependencies will be loaded from sys.path as well.  The assembly 
name should be the filename on disk without a directory specifier and 
optionally including the .EXE or .DLL extension. After the load the assemblies 
namespaces and top-level types will be available via import Namespace.")]
public static void AddReferenceToFile(CodeContext context, String[] files);
    [DocumentationAttribute("Adds a reference to a .NET assembly.  Parameters are an assembly name. 
After the load the assemblies namespaces and top-level types will be available via 
import Namespace.")]
public static void AddReferenceByName(CodeContext context, String[] names);
    [DocumentationAttribute("Adds a reference to a .NET assembly.  Parameters are a partial assembly name. 
After the load the assemblies namespaces and top-level types will be available via 
import Namespace.")]
public static void AddReferenceByPartialName(CodeContext context, String[] names);
    [DocumentationAttribute("Adds a reference to a .NET assembly.  Parameters are a full path to an. 
assembly on disk. After the load the assemblies namespaces and top-level types 
will be available via import Namespace.")]
public static Assembly LoadAssemblyFromFileWithPath(CodeContext context, string file);
    [DocumentationAttribute("Loads an assembly from the specified filename and returns the assembly
object.  Namespaces or types in the assembly can be accessed directly from 
the assembly object.")]
public static Assembly LoadAssemblyFromFile(CodeContext context, string file);
    [DocumentationAttribute("Loads an assembly from the specified partial assembly name and returns the 
assembly object.  Namespaces or types in the assembly can be accessed directly 
from the assembly object.")]
public static Assembly LoadAssemblyByPartialName(string name);
    [DocumentationAttribute("Loads an assembly from the specified assembly name and returns the assembly
object.  Namespaces or types in the assembly can be accessed directly from 
the assembly object.")]
public static Assembly LoadAssemblyByName(CodeContext context, string name);
    public static object Use(CodeContext context, string name);
    [DocumentationAttribute("Converts an array of bytes to a string.")]
public static string GetString(Byte[] bytes);
    [DocumentationAttribute("Converts maxCount of an array of bytes to a string")]
public static string GetString(Byte[] bytes, int maxCount);
    [DocumentationAttribute("Converts a string to an array of bytes")]
public static Byte[] GetBytes(string s);
    [DocumentationAttribute("Converts maxCount of a string to an array of bytes")]
public static Byte[] GetBytes(string s, int maxCount);
    public static object Use(CodeContext context, string path, string language);
    public static Action`1<Action> SetCommandDispatcher(CodeContext context, Action`1<Action> dispatcher);
    public static void ImportExtensions(CodeContext context, PythonType type);
    public static void ImportExtensions(CodeContext context, NamespaceTracker namespace);
    public static ComTypeLibInfo LoadTypeLibrary(CodeContext context, object rcw);
    public static ComTypeLibInfo LoadTypeLibrary(CodeContext context, Guid typeLibGuid);
    public static void AddReferenceToTypeLibrary(CodeContext context, object rcw);
    public static void AddReferenceToTypeLibrary(CodeContext context, Guid typeLibGuid);
    private static void PublishTypeLibDesc(CodeContext context, ComTypeLibDesc typeLibDesc);
    private static void AddReference(CodeContext context, object reference);
    private static void AddReference(CodeContext context, Assembly assembly);
    private static void AddReference(CodeContext context, string name);
    private static void AddReferenceToFile(CodeContext context, string file);
    private static void AddReferenceByPartialName(CodeContext context, string name);
    private static void AddReferenceByName(CodeContext context, string name);
    [DocumentationAttribute("Adds a reference to a .NET assembly.  One or more assembly names can
be provided which are fully qualified names to the file on disk.  The 
directory is added to sys.path and AddReferenceToFile is then called. After the 
load the assemblies namespaces and top-level types will be available via 
import Namespace.")]
public static void AddReferenceToFileAndPath(CodeContext context, String[] files);
    private static void AddReferenceToFileAndPath(CodeContext context, string file);
    public static Type GetClrType(Type type);
    public static PythonType GetPythonType(Type t);
    [ObsoleteAttribute("Call clr.GetPythonType instead")]
public static PythonType GetDynamicType(Type t);
    public static PythonType get_Reference();
    public static PythonType get_StrongBox();
    public static object accepts(Object[] types);
    public static object returns(object type);
    public static object Self();
    public static PythonList Dir(object o);
    public static PythonList DirClr(object o);
    public static object Convert(CodeContext context, object o, Type toType);
    public static void CompileModules(CodeContext context, string assemblyName, IDictionary`2<string, object> kwArgs, String[] filenames);
    public static void CompileSubclassTypes(string assemblyName, Object[] newTypes);
    public static PythonTuple GetSubclassedTypes();
    private static Dictionary`2<string, string> BuildPackageMap(String[] filenames);
    private static void SortModules(List`1<string> modules);
    public static PythonTuple GetProfilerData(CodeContext context, bool includeUnused);
    public static void ClearProfilerData(CodeContext context);
    public static void EnableProfiler(CodeContext context, bool enable);
    public static PythonTuple Serialize(object self);
    public static object Deserialize(string serializationFormat, string data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("IronPython.Runtime.CodeContext/DebugProxy")]
[DebuggerDisplayAttribute("ModuleName = {ModuleName}")]
public class IronPython.Runtime.CodeContext : object {
    [CompilerGeneratedAttribute]
private ModuleContext <ModuleContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonDictionary <Dict>k__BackingField;
    public ModuleContext ModuleContext { get; }
    public Scope GlobalScope { get; }
    public PythonContext LanguageContext { get; }
    internal PythonDictionary GlobalDict { get; }
    internal bool ShowCls { get; internal set; }
    internal PythonDictionary Dict { get; }
    internal bool IsTopLevel { get; }
    internal PythonModule Module { get; }
    internal string ModuleName { get; }
    public CodeContext(PythonDictionary dict, ModuleContext moduleContext);
    [CompilerGeneratedAttribute]
public ModuleContext get_ModuleContext();
    public Scope get_GlobalScope();
    public PythonContext get_LanguageContext();
    internal PythonDictionary get_GlobalDict();
    internal bool get_ShowCls();
    internal void set_ShowCls(bool value);
    internal bool TryLookupName(string name, Object& value);
    internal bool TryLookupBuiltin(string name, Object& value);
    [CompilerGeneratedAttribute]
internal PythonDictionary get_Dict();
    internal bool TryGetVariable(string name, Object& value);
    internal bool TryRemoveVariable(string name);
    internal void SetVariable(string name, object value);
    internal bool TryGetGlobalVariable(string name, Object& res);
    internal void SetGlobalVariable(string name, object value);
    internal bool TryRemoveGlobalVariable(string name);
    internal PythonGlobal[] GetGlobalArray();
    internal bool get_IsTopLevel();
    [NullableContextAttribute("2")]
internal PythonDictionary GetBuiltinsDict();
    internal PythonModule get_Module();
    internal string get_ModuleName();
}
internal class IronPython.Runtime.CollectionDebugProxy : object {
    private ICollection _collection;
    [DebuggerBrowsableAttribute("3")]
internal IList Members { get; }
    public CollectionDebugProxy(ICollection collection);
    internal IList get_Members();
}
internal class IronPython.Runtime.CommonDictionaryStorage : DictionaryStorage {
    protected Bucket[] _buckets;
    private int _count;
    private int _version;
    private NullValue _nullValue;
    private Func`2<object, int> _hashFunc;
    private Func`3<object, object, bool> _eqFunc;
    private Type _keyType;
    private static int InitialBucketSize;
    private static int ResizeMultiplier;
    private static double Load;
    private static Func`2<object, int> _primitiveHash;
    private static Func`2<object, int> _doubleHash;
    private static Func`2<object, int> _intHash;
    private static Func`2<object, int> _tupleHash;
    private static Func`2<object, int> _genericHash;
    private static Func`3<object, object, bool> _intEquals;
    private static Func`3<object, object, bool> _doubleEquals;
    private static Func`3<object, object, bool> _stringEquals;
    private static Func`3<object, object, bool> _tupleEquals;
    private static Func`3<object, object, bool> _genericEquals;
    private static Func`3<object, object, bool> _objectEq;
    private static Type HeterogeneousType;
    private static object _removed;
    public int Version { get; }
    public int Count { get; }
    public CommonDictionaryStorage(int count);
    public CommonDictionaryStorage(Object[] items, bool isHomogeneous);
    private CommonDictionaryStorage(Bucket[] buckets, int count, Type keyType, Func`2<object, int> hashFunc, Func`3<object, object, bool> eqFunc, NullValue nullValue);
    private CommonDictionaryStorage(SerializationInfo info, StreamingContext context);
    private static CommonDictionaryStorage();
    public int get_Version();
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public void Add(object key, object value);
    private void AddNull(object value);
    public virtual void AddNoLock(DictionaryStorage& storage, object key, object value);
    public void AddNoLock(object key, object value);
    private void AddOne(object key, object value);
    private void UpdateHelperFunctions(Type t, object key);
    private void SetHeterogeneousSites();
    private void AssignSiteDelegates(CallSite`1<Func`3<CallSite, object, int>> hashSite, CallSite`1<Func`4<CallSite, object, object, bool>> equalSite);
    private void EnsureSize(int newSize);
    public virtual void EnsureCapacityNoLock(int size);
    private void Initialize();
    private bool Add(Bucket[] buckets, object key, object value);
    protected bool AddWorker(Bucket[] buckets, object key, object value, int hc);
    private static int ProbeNext(Bucket[] buckets, int index);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public bool Remove(object key);
    internal bool RemoveAlwaysHash(object key);
    public virtual bool TryRemoveValue(DictionaryStorage& storage, object key, Object& value);
    public bool TryRemoveValue(object key, Object& value);
    private bool TryRemoveNull(Object& value);
    private bool TryRemoveNoLock(object key, Object& value);
    protected bool TryRemoveNoLock(object key, Func`3<object, object, bool> eqFunc, int hc, Object& value);
    public virtual bool Contains(object key);
    public virtual bool TryGetValue(object key, Object& value);
    private bool TryGetValue(Bucket[] buckets, object key, Object& value);
    protected static bool TryGetValue(Bucket[] buckets, object key, int hc, Func`3<object, object, bool> eqFunc, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public void Clear();
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    [IteratorStateMachineAttribute("IronPython.Runtime.CommonDictionaryStorage/<GetEnumerator>d__62")]
public virtual IEnumerator`1<KeyValuePair`2<object, object>> GetEnumerator();
    public virtual IEnumerable`1<object> GetKeys();
    public virtual bool HasNonStringAttributes();
    public virtual DictionaryStorage Clone();
    public virtual void CopyTo(DictionaryStorage& into);
    public DictionaryStorage CopyTo(DictionaryStorage into);
    private void CommonCopyTo(CommonDictionaryStorage into);
    private void UncommonCopyTo(DictionaryStorage& into);
    private int Hash(object key);
    private static int PrimitiveHash(object o);
    private static int IntHash(object o);
    private static int DoubleHash(object o);
    private static int GenericHash(object o);
    private static int TupleHash(object o);
    private static bool StringEquals(object o1, object o2);
    private static bool IntEquals(object o1, object o2);
    private static bool DoubleEquals(object o1, object o2);
    private static bool TupleEquals(object o1, object o2);
    private static bool GenericEquals(object o1, object o2);
    private DeserializationNullValue GetDeserializationBucket();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
}
internal class IronPython.Runtime.CompareUtil : object {
    [ThreadStaticAttribute]
private static Stack`1<object> CmpStack;
    internal static bool Check(object o);
    internal static void Push(object o);
    internal static void Push(object o1, object o2);
    internal static void Pop(object o);
    internal static void Pop(object o1, object o2);
    private static Stack`1<object> EnsureStack();
}
public class IronPython.Runtime.CompiledLoader : object {
    private Dictionary`2<string, OnDiskScriptCode> _codes;
    internal void AddScriptCode(ScriptCode code);
    public ModuleLoader find_module(CodeContext context, string fullname, PythonList path);
}
[FlagsAttribute]
public enum IronPython.Runtime.CompileFlags : Enum {
    public int value__;
    public static CompileFlags CO_NESTED;
    public static CompileFlags CO_DONT_IMPLY_DEDENT;
    public static CompileFlags CO_GENERATOR_ALLOWED;
    public static CompileFlags CO_FUTURE_DIVISION;
    public static CompileFlags CO_FUTURE_ABSOLUTE_IMPORT;
    public static CompileFlags CO_FUTURE_WITH_STATEMENT;
    public static CompileFlags CO_FUTURE_PRINT_FUNCTION;
    public static CompileFlags CO_FUTURE_UNICODE_LITERALS;
    public static CompileFlags CO_FUTURE_BARRY_AS_BDFL;
    public static CompileFlags CO_FUTURE_GENERATOR_STOP;
}
internal class IronPython.Runtime.ConstantDictionaryStorage : DictionaryStorage {
    private CommonDictionaryStorage _storage;
    public int Count { get; }
    public ConstantDictionaryStorage(CommonDictionaryStorage storage);
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual void Clear(DictionaryStorage& storage);
    public virtual bool Contains(object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    public virtual DictionaryStorage Clone();
    public virtual bool HasNonStringAttributes();
    public sealed virtual Expression CreateExpression();
}
public static class IronPython.Runtime.Converter : object {
    private static CallSite`1<Func`3<CallSite, object, int>> _intSite;
    private static CallSite`1<Func`3<CallSite, object, double>> _doubleSite;
    private static CallSite`1<Func`3<CallSite, object, Complex>> _complexSite;
    private static CallSite`1<Func`3<CallSite, object, BigInteger>> _bigIntSite;
    private static CallSite`1<Func`3<CallSite, object, string>> _stringSite;
    private static CallSite`1<Func`3<CallSite, object, bool>> _boolSite;
    private static CallSite`1<Func`3<CallSite, object, char>> _charSite;
    private static CallSite`1<Func`3<CallSite, object, char>> _explicitCharSite;
    private static CallSite`1<Func`3<CallSite, object, IEnumerable>> _ienumerableSite;
    private static CallSite`1<Func`3<CallSite, object, IEnumerator>> _ienumeratorSite;
    private static Dictionary`2<Type, CallSite`1<Func`3<CallSite, object, object>>> _siteDict;
    private static CallSite`1<Func`3<CallSite, object, byte>> _byteSite;
    private static CallSite`1<Func`3<CallSite, object, sbyte>> _sbyteSite;
    private static CallSite`1<Func`3<CallSite, object, short>> _int16Site;
    private static CallSite`1<Func`3<CallSite, object, ushort>> _uint16Site;
    private static CallSite`1<Func`3<CallSite, object, UInt32>> _uint32Site;
    private static CallSite`1<Func`3<CallSite, object, long>> _int64Site;
    private static CallSite`1<Func`3<CallSite, object, ulong>> _uint64Site;
    private static CallSite`1<Func`3<CallSite, object, decimal>> _decimalSite;
    private static CallSite`1<Func`3<CallSite, object, float>> _floatSite;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryByteSite;
    private static CallSite`1<Func`3<CallSite, object, object>> _trySByteSite;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryInt16Site;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryInt32Site;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryInt64Site;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryUInt16Site;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryUInt32Site;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryUInt64Site;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryDoubleSite;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryCharSite;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryBigIntegerSite;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryComplexSite;
    private static CallSite`1<Func`3<CallSite, object, object>> _tryStringSite;
    private static Type StringType;
    private static Type Int32Type;
    private static Type DoubleType;
    private static Type DecimalType;
    private static Type Int64Type;
    private static Type UInt64Type;
    private static Type CharType;
    private static Type SingleType;
    private static Type BooleanType;
    private static Type BigIntegerType;
    private static Type ComplexType;
    private static Type DelegateType;
    private static Type IEnumerableType;
    private static Type TypeType;
    private static Type NullableOfTType;
    private static Type IListOfTType;
    private static Type IDictOfTType;
    private static Type IEnumerableOfTType;
    private static Type IListOfObjectType;
    private static Type IEnumerableOfObjectType;
    private static Type IDictionaryOfObjectType;
    private static Converter();
    private static CallSite`1<Func`3<CallSite, object, T>> MakeImplicitConvertSite();
    private static CallSite`1<Func`3<CallSite, object, T>> MakeExplicitConvertSite();
    private static CallSite`1<Func`3<CallSite, object, T>> MakeConvertSite(ConversionResultKind kind);
    private static CallSite`1<Func`3<CallSite, object, object>> MakeExplicitTrySite();
    private static CallSite`1<Func`3<CallSite, object, object>> MakeTrySite(ConversionResultKind kind);
    public static int ConvertToInt32(object value);
    public static string ConvertToString(object value);
    public static BigInteger ConvertToBigInteger(object value);
    public static double ConvertToDouble(object value);
    public static Complex ConvertToComplex(object value);
    public static bool ConvertToBoolean(object value);
    public static long ConvertToInt64(object value);
    public static byte ConvertToByte(object value);
    public static sbyte ConvertToSByte(object value);
    public static short ConvertToInt16(object value);
    public static ushort ConvertToUInt16(object value);
    public static UInt32 ConvertToUInt32(object value);
    public static ulong ConvertToUInt64(object value);
    public static float ConvertToSingle(object value);
    public static decimal ConvertToDecimal(object value);
    public static char ConvertToChar(object value);
    internal static bool TryConvertToByte(object value, Byte& result);
    internal static bool TryConvertToSByte(object value, SByte& result);
    internal static bool TryConvertToInt16(object value, Int16& result);
    internal static bool TryConvertToInt32(object value, Int32& result);
    internal static bool TryConvertToInt64(object value, Int64& result);
    internal static bool TryConvertToUInt16(object value, UInt16& result);
    internal static bool TryConvertToUInt32(object value, UInt32& result);
    internal static bool TryConvertToUInt64(object value, UInt64& result);
    internal static bool TryConvertToDouble(object value, Double& result);
    internal static bool TryConvertToBigInteger(object value, BigInteger& result);
    internal static bool TryConvertToComplex(object value, Complex& result);
    [NullableContextAttribute("2")]
internal static bool TryConvertToString(object value, String& result);
    internal static bool TryConvertToChar(object value, Char& result);
    internal static char ExplicitConvertToChar(object value);
    public static T Convert(object value);
    internal static bool TryConvert(object value, Type to, Object& result);
    internal static object Convert(object value, Type to);
    internal static bool TryConvertToIEnumerator(object o, IEnumerator& e);
    internal static IEnumerator ConvertToIEnumerator(object o);
    public static IEnumerable ConvertToIEnumerable(object o);
    internal static bool TryConvertToIndex(object value, Int32& index, bool throwOverflowError);
    internal static bool TryConvertToIndex(object value, Object& index);
    public static int ConvertToIndex(object value, bool throwOverflowError);
    internal static bool TryGetInt(object o, Int32& value, bool throwOverflowError);
    private static object ConvertToSliceIndexHelper(object value);
    internal static Exception CannotConvertOverflow(string name, object value);
    private static Exception MakeTypeError(Type expectedType, object o);
    private static Exception MakeTypeError(string expectedType, object o);
    public static object ConvertToReferenceType(object fromObject, RuntimeTypeHandle typeHandle);
    public static object ConvertToNullableType(object fromObject, RuntimeTypeHandle typeHandle);
    public static object ConvertToValueType(object fromObject, RuntimeTypeHandle typeHandle);
    public static Type ConvertToType(object value);
    public static object ConvertToDelegate(object value, Type to);
    public static bool CanConvertFrom(Type fromType, Type toType, NarrowingLevel allowNarrowing);
    private static TypeConverter GetTypeConverter(TypeConverterAttribute tca);
    private static bool HasImplicitNumericConversion(Type fromType, Type toType);
    public static Candidate PreferConvert(Type t1, Type t2);
    private static bool HasNarrowingConversion(Type fromType, Type toType, NarrowingLevel allowNarrowing);
    internal static bool HasImplicitConversion(Type fromType, Type toType);
    private static bool HasImplicitConversionWorker(Type lookupType, Type fromType, Type toType);
    public static Nullable`1<int> ImplicitConvertToInt32(object o);
    internal static bool IsNumeric(Type t);
    internal static bool IsFloatingPoint(Type t);
    internal static bool IsInteger(Type t);
    private static bool IsPythonType(Type t);
    private static bool HasPythonProtocol(Type t, string name);
}
internal static class IronPython.Runtime.CurrentVersion : object {
    [CompilerGeneratedAttribute]
private static int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <Micro>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ReleaseLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <ReleaseSerial>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DisplayName>k__BackingField;
    public static int Major { get; }
    public static int Minor { get; }
    public static int Micro { get; }
    public static string ReleaseLevel { get; }
    public static int ReleaseSerial { get; }
    public static string Series { get; }
    public static string DisplayName { get; }
    private static CurrentVersion();
    [CompilerGeneratedAttribute]
public static int get_Major();
    [CompilerGeneratedAttribute]
public static int get_Minor();
    [CompilerGeneratedAttribute]
public static int get_Micro();
    [CompilerGeneratedAttribute]
public static string get_ReleaseLevel();
    [CompilerGeneratedAttribute]
public static int get_ReleaseSerial();
    [CompilerGeneratedAttribute]
public static string get_Series();
    [CompilerGeneratedAttribute]
public static string get_DisplayName();
}
internal abstract class IronPython.Runtime.CustomDictionaryStorage : DictionaryStorage {
    private CommonDictionaryStorage _storage;
    public int Count { get; }
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual void AddNoLock(DictionaryStorage& storage, object key, object value);
    public void Add(object key, object value);
    public virtual bool Contains(object key);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public bool Remove(object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    protected abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> GetExtraItems();
    protected abstract virtual bool TrySetExtraValue(string key, object value);
    protected abstract virtual bool TryGetExtraValue(string key, Object& value);
    protected abstract virtual Nullable`1<bool> TryRemoveExtraValue(string key);
}
internal class IronPython.Runtime.DebuggerDictionaryStorage : DictionaryStorage {
    private IDictionary`2<object, object> _data;
    private CommonDictionaryStorage _hidden;
    public int Count { get; }
    public DebuggerDictionaryStorage(IDictionary`2<object, object> data);
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual void AddNoLock(DictionaryStorage& storage, object key, object value);
    public virtual bool Contains(object key);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    public virtual bool HasNonStringAttributes();
}
[ExtensionAttribute]
internal static class IronPython.Runtime.DecoderExtensions : object {
    [ExtensionAttribute]
public static int GetCharCount(Decoder decoder, ReadOnlySpan`1<byte> bytes, bool flush);
    [ExtensionAttribute]
internal static int GetChars(Decoder decoder, ReadOnlySpan`1<byte> bytes, Span`1<char> chars, bool flush);
}
public static class IronPython.Runtime.DefaultContext : object {
    internal static CodeContext _default;
    internal static CodeContext _defaultCLS;
    public static ContextId Id { get; }
    public static CodeContext Default { get; }
    public static PythonContext DefaultPythonContext { get; }
    public static CodeContext DefaultCLS { get; }
    public static ContextId get_Id();
    public static CodeContext get_Default();
    public static PythonContext get_DefaultPythonContext();
    public static CodeContext get_DefaultCLS();
    internal static CodeContext CreateDefaultCLSContext(PythonContext context);
    internal static void InitializeDefaults(CodeContext defaultContext, CodeContext defaultClsCodeContext);
}
[DefaultMemberAttribute("Item")]
public class IronPython.Runtime.DictionaryGenericWrapper`2 : object {
    private IDictionary`2<object, object> self;
    public ICollection`1<K> Keys { get; }
    public ICollection`1<V> Values { get; }
    public V Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public DictionaryGenericWrapper`2(IDictionary`2<object, object> self);
    public sealed virtual void Add(K key, V value);
    public sealed virtual bool ContainsKey(K key);
    public sealed virtual ICollection`1<K> get_Keys();
    public sealed virtual bool Remove(K key);
    public sealed virtual bool TryGetValue(K key, V& value);
    public sealed virtual ICollection`1<V> get_Values();
    public sealed virtual V get_Item(K key);
    public sealed virtual void set_Item(K key, V value);
    public sealed virtual void Add(KeyValuePair`2<K, V> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<K, V> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<K, V> item);
    [IteratorStateMachineAttribute("IronPython.Runtime.DictionaryGenericWrapper`2/<GetEnumerator>d__22")]
public sealed virtual IEnumerator`1<KeyValuePair`2<K, V>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[PythonTypeAttribute("dict_itemiterator")]
public class IronPython.Runtime.DictionaryItemEnumerator : object {
    private int _size;
    private DictionaryStorage _dict;
    private List`1<object> _keys;
    private List`1<object> _values;
    private int _pos;
    private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal DictionaryItemEnumerator(DictionaryStorage dict);
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.Generic.IEnumerator<System.Object>.get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
    public object __iter__();
    public int __len__();
    public object __reduce__(CodeContext context);
}
[PythonTypeAttribute("dict_items")]
public class IronPython.Runtime.DictionaryItemView : object {
    internal PythonDictionary _dict;
    private int System.Collections.Generic.ICollection<System.Object>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Object>.IsReadOnly { get; }
    internal DictionaryItemView(PythonDictionary dict);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Add(object item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.Contains(object item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.CopyTo(Object[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Object>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.Remove(object item);
    public static SetCollection op_BitwiseOr(DictionaryItemView x, IEnumerable y);
    public static SetCollection op_BitwiseOr(IEnumerable y, DictionaryItemView x);
    public static SetCollection op_BitwiseAnd(DictionaryItemView x, IEnumerable y);
    public static SetCollection op_BitwiseAnd(IEnumerable y, DictionaryItemView x);
    public static SetCollection op_ExclusiveOr(DictionaryItemView x, IEnumerable y);
    public static SetCollection op_ExclusiveOr(IEnumerable y, DictionaryItemView x);
    public static SetCollection op_Subtraction(DictionaryItemView x, IEnumerable y);
    public static SetCollection op_Subtraction(IEnumerable y, DictionaryItemView x);
    public virtual bool Equals(object obj);
    public static bool op_Equality(DictionaryItemView x, DictionaryItemView y);
    public static bool op_Inequality(DictionaryItemView x, DictionaryItemView y);
    public static bool op_GreaterThan(DictionaryItemView x, DictionaryItemView y);
    public static bool op_LessThan(DictionaryItemView x, DictionaryItemView y);
    public static bool op_GreaterThanOrEqual(DictionaryItemView x, DictionaryItemView y);
    public static bool op_LessThanOrEqual(DictionaryItemView x, DictionaryItemView y);
    public static bool op_Equality(DictionaryItemView x, DictionaryKeyView y);
    public static bool op_Inequality(DictionaryItemView x, DictionaryKeyView y);
    public static bool op_GreaterThan(DictionaryItemView x, DictionaryKeyView y);
    public static bool op_LessThan(DictionaryItemView x, DictionaryKeyView y);
    public static bool op_GreaterThanOrEqual(DictionaryItemView x, DictionaryKeyView y);
    public static bool op_LessThanOrEqual(DictionaryItemView x, DictionaryKeyView y);
    public static bool op_Equality(DictionaryItemView x, SetCollection y);
    public static bool op_Inequality(DictionaryItemView x, SetCollection y);
    public static bool op_GreaterThan(DictionaryItemView x, SetCollection y);
    public static bool op_LessThan(DictionaryItemView x, SetCollection y);
    public static bool op_GreaterThanOrEqual(DictionaryItemView x, SetCollection y);
    public static bool op_LessThanOrEqual(DictionaryItemView x, SetCollection y);
    public static bool op_Equality(DictionaryItemView x, FrozenSetCollection y);
    public static bool op_Inequality(DictionaryItemView x, FrozenSetCollection y);
    public static bool op_GreaterThan(DictionaryItemView x, FrozenSetCollection y);
    public static bool op_LessThan(DictionaryItemView x, FrozenSetCollection y);
    public static bool op_GreaterThanOrEqual(DictionaryItemView x, FrozenSetCollection y);
    public static bool op_LessThanOrEqual(DictionaryItemView x, FrozenSetCollection y);
    public sealed virtual string __repr__(CodeContext context);
    public object __reduce__(CodeContext context);
    public bool isdisjoint(IEnumerable other);
    public virtual int GetHashCode();
}
[PythonTypeAttribute("dict_keyiterator")]
public class IronPython.Runtime.DictionaryKeyEnumerator : object {
    private int _size;
    private DictionaryStorage _dict;
    private IEnumerator`1<object> _keys;
    private int _pos;
    private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal DictionaryKeyEnumerator(DictionaryStorage dict);
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.Generic.IEnumerator<System.Object>.get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
    public object __iter__();
    public int __length_hint__();
    public object __reduce__(CodeContext context);
}
[PythonTypeAttribute("dict_keys")]
public class IronPython.Runtime.DictionaryKeyView : object {
    internal PythonDictionary _dict;
    private int System.Collections.Generic.ICollection<System.Object>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Object>.IsReadOnly { get; }
    private int System.Collections.ICollection.Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    internal DictionaryKeyView(PythonDictionary dict);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Add(object key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.Contains(object key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.CopyTo(Object[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Object>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.Remove(object item);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public static SetCollection op_BitwiseOr(DictionaryKeyView x, IEnumerable y);
    public static SetCollection op_BitwiseOr(IEnumerable y, DictionaryKeyView x);
    public static SetCollection op_BitwiseAnd(DictionaryKeyView x, IEnumerable y);
    public static SetCollection op_BitwiseAnd(IEnumerable y, DictionaryKeyView x);
    public static SetCollection op_ExclusiveOr(DictionaryKeyView x, IEnumerable y);
    public static SetCollection op_ExclusiveOr(IEnumerable y, DictionaryKeyView x);
    public static SetCollection op_Subtraction(DictionaryKeyView x, IEnumerable y);
    public static SetCollection op_Subtraction(IEnumerable y, DictionaryKeyView x);
    public virtual bool Equals(object obj);
    public static bool op_Equality(DictionaryKeyView x, DictionaryKeyView y);
    public static bool op_Inequality(DictionaryKeyView x, DictionaryKeyView y);
    public static bool op_GreaterThan(DictionaryKeyView x, DictionaryKeyView y);
    public static bool op_LessThan(DictionaryKeyView x, DictionaryKeyView y);
    public static bool op_GreaterThanOrEqual(DictionaryKeyView x, DictionaryKeyView y);
    public static bool op_LessThanOrEqual(DictionaryKeyView x, DictionaryKeyView y);
    public static bool op_Equality(DictionaryKeyView x, DictionaryItemView y);
    public static bool op_Inequality(DictionaryKeyView x, DictionaryItemView y);
    public static bool op_GreaterThan(DictionaryKeyView x, DictionaryItemView y);
    public static bool op_LessThan(DictionaryKeyView x, DictionaryItemView y);
    public static bool op_GreaterThanOrEqual(DictionaryKeyView x, DictionaryItemView y);
    public static bool op_LessThanOrEqual(DictionaryKeyView x, DictionaryItemView y);
    public static bool op_Equality(DictionaryKeyView x, SetCollection y);
    public static bool op_Inequality(DictionaryKeyView x, SetCollection y);
    public static bool op_GreaterThan(DictionaryKeyView x, SetCollection y);
    public static bool op_LessThan(DictionaryKeyView x, SetCollection y);
    public static bool op_GreaterThanOrEqual(DictionaryKeyView x, SetCollection y);
    public static bool op_LessThanOrEqual(DictionaryKeyView x, SetCollection y);
    public static bool op_Equality(DictionaryKeyView x, FrozenSetCollection y);
    public static bool op_Inequality(DictionaryKeyView x, FrozenSetCollection y);
    public static bool op_GreaterThan(DictionaryKeyView x, FrozenSetCollection y);
    public static bool op_LessThan(DictionaryKeyView x, FrozenSetCollection y);
    public static bool op_GreaterThanOrEqual(DictionaryKeyView x, FrozenSetCollection y);
    public static bool op_LessThanOrEqual(DictionaryKeyView x, FrozenSetCollection y);
    public sealed virtual string __repr__(CodeContext context);
    public object __reduce__(CodeContext context);
    public bool isdisjoint(IEnumerable other);
    public virtual int GetHashCode();
}
public static class IronPython.Runtime.DictionaryOps : object {
    public static string __repr__(CodeContext context, IDictionary`2<object, object> self);
    public static object get(PythonDictionary self, object key, object defaultValue);
    private static PythonList ToList(IDictionary`2<object, object> self);
    public static object pop(PythonDictionary self, object key);
    public static object pop(PythonDictionary self, object key, object defaultValue);
    public static PythonTuple popitem(IDictionary`2<object, object> self);
    public static object setdefault(PythonDictionary self, object key);
    public static object setdefault(PythonDictionary self, object key, object defaultValue);
    public static void update(CodeContext context, PythonDictionary self, object other);
    private static void SlowUpdate(CodeContext context, PythonDictionary self, object other);
    internal static bool TryGetValueVirtual(CodeContext context, PythonDictionary self, object key, Object& DefaultGetItem, Object& value);
    internal static bool AddKeyValue(PythonDictionary self, object o);
}
internal abstract class IronPython.Runtime.DictionaryStorage : object {
    public int Count { get; }
    public abstract virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual void AddNoLock(DictionaryStorage& storage, object key, object value);
    public abstract virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual bool TryRemoveValue(DictionaryStorage& storage, object key, Object& value);
    public abstract virtual void Clear(DictionaryStorage& storage);
    public virtual void CopyTo(DictionaryStorage& into);
    public abstract virtual bool Contains(object key);
    public abstract virtual bool TryGetValue(object key, Object& value);
    public abstract virtual int get_Count();
    public virtual bool HasNonStringAttributes();
    public abstract virtual List`1<KeyValuePair`2<object, object>> GetItems();
    [IteratorStateMachineAttribute("IronPython.Runtime.DictionaryStorage/<GetKeys>d__12")]
public virtual IEnumerable`1<object> GetKeys();
    public virtual DictionaryStorage Clone();
    public virtual void EnsureCapacityNoLock(int size);
    public virtual IEnumerator`1<KeyValuePair`2<object, object>> GetEnumerator();
    public virtual bool TryGetPath(Object& value);
    public virtual bool TryGetPackage(Object& value);
    public virtual bool TryGetBuiltins(Object& value);
    public virtual bool TryGetName(Object& value);
    public virtual bool TryGetImport(Object& value);
}
[AttributeUsageAttribute("10624")]
public class IronPython.Runtime.DictionaryTypeInfoAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ValueType>k__BackingField;
    public Type KeyType { get; }
    public Type ValueType { get; }
    public DictionaryTypeInfoAttribute(Type keyType, Type valueType);
    [CompilerGeneratedAttribute]
public Type get_KeyType();
    [CompilerGeneratedAttribute]
public Type get_ValueType();
}
[PythonTypeAttribute("dict_valueiterator")]
public class IronPython.Runtime.DictionaryValueEnumerator : object {
    private int _size;
    private DictionaryStorage _dict;
    private Object[] _values;
    private int _pos;
    private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal DictionaryValueEnumerator(DictionaryStorage dict);
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.Generic.IEnumerator<System.Object>.get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
    public object __iter__();
    public int __len__();
    public object __reduce__(CodeContext context);
}
[PythonTypeAttribute("dict_values")]
public class IronPython.Runtime.DictionaryValueView : object {
    private PythonDictionary _dict;
    private int System.Collections.Generic.ICollection<System.Object>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Object>.IsReadOnly { get; }
    private int System.Collections.ICollection.Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    internal DictionaryValueView(PythonDictionary dict);
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Add(object item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.Contains(object item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.CopyTo(Object[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Object>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.Remove(object item);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual string __repr__(CodeContext context);
    public object __reduce__(CodeContext context);
}
[AttributeUsageAttribute("12")]
internal class IronPython.Runtime.DontMapGetMemberNamesToDirAttribute : Attribute {
}
[AttributeUsageAttribute("12")]
internal class IronPython.Runtime.DontMapICollectionToLenAttribute : Attribute {
}
[AttributeUsageAttribute("12")]
internal class IronPython.Runtime.DontMapIDisposableToContextManagerAttribute : Attribute {
}
[AttributeUsageAttribute("12")]
internal class IronPython.Runtime.DontMapIEnumerableToContainsAttribute : Attribute {
}
[AttributeUsageAttribute("12")]
internal class IronPython.Runtime.DontMapIEnumerableToIterAttribute : Attribute {
}
internal class IronPython.Runtime.EmptyDictionaryStorage : DictionaryStorage {
    public static EmptyDictionaryStorage Instance;
    public int Count { get; }
    private static EmptyDictionaryStorage();
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual void Clear(DictionaryStorage& storage);
    public virtual bool Contains(object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    public virtual DictionaryStorage Clone();
    public virtual bool HasNonStringAttributes();
}
[ExtensionAttribute]
internal static class IronPython.Runtime.EncoderExtensions : object {
    [ExtensionAttribute]
public static int GetByteCount(Encoder encoder, ReadOnlySpan`1<char> chars, bool flush);
    [ExtensionAttribute]
internal static int GetBytes(Encoder encoder, ReadOnlySpan`1<char> chars, Span`1<byte> bytes, bool flush);
}
[ExtensionAttribute]
internal static class IronPython.Runtime.EncodingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetString(Encoding encoding, ReadOnlySpan`1<byte> bytes);
}
[PythonTypeAttribute("enumerate")]
[DocumentationAttribute("enumerate(iterable) -> iterator for index, value of iterable")]
[DontMapIDisposableToContextManagerAttribute]
[DontMapIEnumerableToContainsAttribute]
public class IronPython.Runtime.Enumerate : object {
    private IEnumerator _iter;
    private object _index;
    private object System.Collections.IEnumerator.Current { get; }
    private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
    public Enumerate(object iter);
    public Enumerate(CodeContext context, object iter, object start);
    public object __iter__();
    public PythonTuple __reduce__();
    private static object AddOneTo(object _index);
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override object System.Collections.Generic.IEnumerator<System.Object>.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.IDisposable.Dispose();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected virtual void Dispose(bool notFinalizing);
}
internal class IronPython.Runtime.EnvironmentDictionaryStorage : DictionaryStorage {
    private CommonDictionaryStorage _storage;
    public int Count { get; }
    private void AddEnvironmentVars();
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual bool Contains(object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
}
public static class IronPython.Runtime.ErrorCodes : object {
    public static int IncompleteMask;
    public static int IncompleteStatement;
    public static int IncompleteToken;
    public static int ErrorMask;
    public static int SyntaxError;
    public static int IndentationError;
    public static int TabError;
    public static int NoCaret;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.AssertionException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public AssertionException(string msg);
    [NullableContextAttribute("1")]
public AssertionException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected AssertionException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
public class IronPython.Runtime.Exceptions.AttributeErrorException : MissingMemberException {
    private BaseException _pyExceptionObject;
    private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    public AttributeErrorException(string msg);
    public AttributeErrorException(string message, Exception innerException);
    protected AttributeErrorException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.BlockingIOException : OSException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public BlockingIOException(string msg);
    [NullableContextAttribute("1")]
public BlockingIOException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected BlockingIOException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.BrokenPipeException : ConnectionException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public BrokenPipeException(string msg);
    [NullableContextAttribute("1")]
public BrokenPipeException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected BrokenPipeException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.BufferException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public BufferException(string msg);
    [NullableContextAttribute("1")]
public BufferException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected BufferException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.BytesWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public BytesWarningException(string msg);
    [NullableContextAttribute("1")]
public BytesWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected BytesWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ChildProcessException : OSException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ChildProcessException(string msg);
    [NullableContextAttribute("1")]
public ChildProcessException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ChildProcessException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ConnectionAbortedException : ConnectionException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ConnectionAbortedException(string msg);
    [NullableContextAttribute("1")]
public ConnectionAbortedException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ConnectionAbortedException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ConnectionException : OSException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ConnectionException(string msg);
    [NullableContextAttribute("1")]
public ConnectionException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ConnectionException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ConnectionRefusedException : ConnectionException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ConnectionRefusedException(string msg);
    [NullableContextAttribute("1")]
public ConnectionRefusedException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ConnectionRefusedException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ConnectionResetException : ConnectionException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ConnectionResetException(string msg);
    [NullableContextAttribute("1")]
public ConnectionResetException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ConnectionResetException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.DeprecationWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public DeprecationWarningException(string msg);
    [NullableContextAttribute("1")]
public DeprecationWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected DeprecationWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.FileExistsException : OSException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public FileExistsException(string msg);
    [NullableContextAttribute("1")]
public FileExistsException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected FileExistsException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.FloatingPointException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public FloatingPointException(string msg);
    [NullableContextAttribute("1")]
public FloatingPointException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected FloatingPointException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.FutureWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public FutureWarningException(string msg);
    [NullableContextAttribute("1")]
public FutureWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected FutureWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
public class IronPython.Runtime.Exceptions.GeneratorExitException : Exception {
    public GeneratorExitException(string message);
    public GeneratorExitException(string message, Exception innerException);
    private GeneratorExitException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ImportException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ImportException(string msg);
    [NullableContextAttribute("1")]
public ImportException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ImportException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ImportWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ImportWarningException(string msg);
    [NullableContextAttribute("1")]
public ImportWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ImportWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
internal class IronPython.Runtime.Exceptions.IndentationException : SyntaxErrorException {
    public IndentationException(string message);
    public IndentationException(string message, Exception innerException);
    public IndentationException(string message, SourceUnit sourceUnit, SourceSpan span, int errorCode, Severity severity);
    protected IndentationException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.InterruptedException : OSException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public InterruptedException(string msg);
    [NullableContextAttribute("1")]
public InterruptedException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected InterruptedException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
internal interface IronPython.Runtime.Exceptions.IPythonAwareException {
    public BaseException PythonException { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<DynamicStackFrame> Frames { get; public set; }
    public TraceBack TraceBack { get; public set; }
    public abstract virtual BaseException get_PythonException();
    public abstract virtual void set_PythonException(BaseException value);
    public abstract virtual List`1<DynamicStackFrame> get_Frames();
    public abstract virtual void set_Frames(List`1<DynamicStackFrame> value);
    public abstract virtual TraceBack get_TraceBack();
    public abstract virtual void set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.IsADirectoryException : OSException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public IsADirectoryException(string msg);
    [NullableContextAttribute("1")]
public IsADirectoryException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected IsADirectoryException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.LookupException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public LookupException(string msg);
    [NullableContextAttribute("1")]
public LookupException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected LookupException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.NotADirectoryException : OSException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public NotADirectoryException(string msg);
    [NullableContextAttribute("1")]
public NotADirectoryException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected NotADirectoryException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.OSException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public OSException(string msg);
    [NullableContextAttribute("1")]
public OSException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected OSException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.PendingDeprecationWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public PendingDeprecationWarningException(string msg);
    [NullableContextAttribute("1")]
public PendingDeprecationWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected PendingDeprecationWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ProcessLookupException : OSException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ProcessLookupException(string msg);
    [NullableContextAttribute("1")]
public ProcessLookupException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ProcessLookupException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class IronPython.Runtime.Exceptions.PythonException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public PythonException(string msg);
    [NullableContextAttribute("1")]
public PythonException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected PythonException(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[ExtensionAttribute]
public static class IronPython.Runtime.Exceptions.PythonExceptions : object {
    private static object _pythonExceptionKey;
    internal static string DefaultExceptionModule;
    public static string __doc__;
    private static PythonType SystemExitStorage;
    private static PythonType KeyboardInterruptStorage;
    private static PythonType GeneratorExitStorage;
    private static PythonType ExceptionStorage;
    private static PythonType StopIterationStorage;
    private static PythonType StopAsyncIterationStorage;
    private static PythonType ArithmeticErrorStorage;
    private static PythonType FloatingPointErrorStorage;
    private static PythonType OverflowErrorStorage;
    private static PythonType ZeroDivisionErrorStorage;
    private static PythonType AssertionErrorStorage;
    private static PythonType AttributeErrorStorage;
    private static PythonType BufferErrorStorage;
    private static PythonType EOFErrorStorage;
    private static PythonType ImportErrorStorage;
    private static PythonType LookupErrorStorage;
    private static PythonType IndexErrorStorage;
    private static PythonType KeyErrorStorage;
    private static PythonType MemoryErrorStorage;
    private static PythonType NameErrorStorage;
    private static PythonType UnboundLocalErrorStorage;
    private static PythonType OSErrorStorage;
    private static PythonType BlockingIOErrorStorage;
    private static PythonType ChildProcessErrorStorage;
    private static PythonType ConnectionErrorStorage;
    private static PythonType BrokenPipeErrorStorage;
    private static PythonType ConnectionAbortedErrorStorage;
    private static PythonType ConnectionRefusedErrorStorage;
    private static PythonType ConnectionResetErrorStorage;
    private static PythonType FileExistsErrorStorage;
    private static PythonType FileNotFoundErrorStorage;
    private static PythonType InterruptedErrorStorage;
    private static PythonType IsADirectoryErrorStorage;
    private static PythonType NotADirectoryErrorStorage;
    private static PythonType PermissionErrorStorage;
    private static PythonType ProcessLookupErrorStorage;
    private static PythonType TimeoutErrorStorage;
    private static PythonType ReferenceErrorStorage;
    private static PythonType RuntimeErrorStorage;
    private static PythonType NotImplementedErrorStorage;
    private static PythonType RecursionErrorStorage;
    private static PythonType SyntaxErrorStorage;
    private static PythonType IndentationErrorStorage;
    private static PythonType TabErrorStorage;
    private static PythonType SystemErrorStorage;
    private static PythonType TypeErrorStorage;
    private static PythonType ValueErrorStorage;
    private static PythonType UnicodeErrorStorage;
    private static PythonType UnicodeDecodeErrorStorage;
    private static PythonType UnicodeEncodeErrorStorage;
    private static PythonType UnicodeTranslateErrorStorage;
    private static PythonType WarningStorage;
    private static PythonType DeprecationWarningStorage;
    private static PythonType PendingDeprecationWarningStorage;
    private static PythonType RuntimeWarningStorage;
    private static PythonType SyntaxWarningStorage;
    private static PythonType UserWarningStorage;
    private static PythonType FutureWarningStorage;
    private static PythonType ImportWarningStorage;
    private static PythonType UnicodeWarningStorage;
    private static PythonType BytesWarningStorage;
    private static PythonType ResourceWarningStorage;
    public static PythonType SystemExit { get; }
    public static PythonType KeyboardInterrupt { get; }
    public static PythonType GeneratorExit { get; }
    public static PythonType Exception { get; }
    public static PythonType StopIteration { get; }
    public static PythonType StopAsyncIteration { get; }
    public static PythonType ArithmeticError { get; }
    public static PythonType FloatingPointError { get; }
    public static PythonType OverflowError { get; }
    public static PythonType ZeroDivisionError { get; }
    public static PythonType AssertionError { get; }
    public static PythonType AttributeError { get; }
    public static PythonType BufferError { get; }
    public static PythonType EOFError { get; }
    public static PythonType ImportError { get; }
    public static PythonType LookupError { get; }
    public static PythonType IndexError { get; }
    public static PythonType KeyError { get; }
    public static PythonType MemoryError { get; }
    public static PythonType NameError { get; }
    public static PythonType UnboundLocalError { get; }
    public static PythonType OSError { get; }
    public static PythonType BlockingIOError { get; }
    public static PythonType ChildProcessError { get; }
    public static PythonType ConnectionError { get; }
    public static PythonType BrokenPipeError { get; }
    public static PythonType ConnectionAbortedError { get; }
    public static PythonType ConnectionRefusedError { get; }
    public static PythonType ConnectionResetError { get; }
    public static PythonType FileExistsError { get; }
    public static PythonType FileNotFoundError { get; }
    public static PythonType InterruptedError { get; }
    public static PythonType IsADirectoryError { get; }
    public static PythonType NotADirectoryError { get; }
    public static PythonType PermissionError { get; }
    public static PythonType ProcessLookupError { get; }
    public static PythonType TimeoutError { get; }
    public static PythonType ReferenceError { get; }
    public static PythonType RuntimeError { get; }
    public static PythonType NotImplementedError { get; }
    public static PythonType RecursionError { get; }
    public static PythonType SyntaxError { get; }
    public static PythonType IndentationError { get; }
    public static PythonType TabError { get; }
    public static PythonType SystemError { get; }
    public static PythonType TypeError { get; }
    public static PythonType ValueError { get; }
    public static PythonType UnicodeError { get; }
    public static PythonType UnicodeDecodeError { get; }
    public static PythonType UnicodeEncodeError { get; }
    public static PythonType UnicodeTranslateError { get; }
    public static PythonType Warning { get; }
    public static PythonType DeprecationWarning { get; }
    public static PythonType PendingDeprecationWarning { get; }
    public static PythonType RuntimeWarning { get; }
    public static PythonType SyntaxWarning { get; }
    public static PythonType UserWarning { get; }
    public static PythonType FutureWarning { get; }
    public static PythonType ImportWarning { get; }
    public static PythonType UnicodeWarning { get; }
    public static PythonType BytesWarning { get; }
    public static PythonType ResourceWarning { get; }
    private static PythonExceptions();
    internal static Exception CreateThrowable(PythonType type, Object[] args);
    internal static BaseException CreatePythonThrowable(PythonType type, Object[] args);
    [NullableContextAttribute("1")]
internal static BaseException CreateBaseExceptionForRaise(CodeContext context, PythonType type, object value);
    [NullableContextAttribute("1")]
internal static Exception ToClr(object pythonException);
    [NullableContextAttribute("1")]
internal static object ToPython(Exception clrException);
    [NullableContextAttribute("1")]
private static BaseException ToPythonNewStyle(Exception clrException);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
private static void SetPythonException(Exception e, BaseException exception);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static BaseException GetPythonException(Exception e);
    [ExtensionAttribute]
internal static List`1<DynamicStackFrame> GetFrameList(Exception e);
    [ExtensionAttribute]
internal static void SetFrameList(Exception e, List`1<DynamicStackFrame> frames);
    [ExtensionAttribute]
internal static void RemoveFrameList(Exception e);
    [ExtensionAttribute]
internal static TraceBack GetTraceBack(Exception e);
    [ExtensionAttribute]
internal static void SetTraceBack(Exception e, TraceBack traceback);
    [ExtensionAttribute]
internal static void RemoveTraceBack(Exception e);
    private static BaseException SyntaxErrorToPython(SyntaxErrorException e);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static PythonType CreateSubType(PythonContext context, PythonType baseType, string name, string module, string documentation, Func`3<string, Exception, Exception> exceptionMaker);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static PythonType CreateSubType(PythonContext context, PythonType baseType, Type underlyingType, string name, string module, string documentation, Func`3<string, Exception, Exception> exceptionMaker);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static PythonType CreateSubType(PythonContext context, PythonType[] baseTypes, Type underlyingType, string name, string module, string documentation, Func`3<string, Exception, Exception> exceptionMaker);
    private static PythonType CreateSubType(PythonType baseType, string name, Func`3<string, Exception, Exception> exceptionMaker);
    private static PythonType CreateSubType(PythonType baseType, Type concreteType, Func`3<string, Exception, Exception> exceptionMaker);
    internal static DynamicStackFrame[] GetDynamicStackFrames(Exception e);
    private static bool MethodsMatch(MethodBase method, MethodBase other);
    public static PythonType get_SystemExit();
    public static PythonType get_KeyboardInterrupt();
    public static PythonType get_GeneratorExit();
    public static PythonType get_Exception();
    public static PythonType get_StopIteration();
    public static PythonType get_StopAsyncIteration();
    public static PythonType get_ArithmeticError();
    public static PythonType get_FloatingPointError();
    public static PythonType get_OverflowError();
    public static PythonType get_ZeroDivisionError();
    public static PythonType get_AssertionError();
    public static PythonType get_AttributeError();
    public static PythonType get_BufferError();
    public static PythonType get_EOFError();
    public static PythonType get_ImportError();
    public static PythonType get_LookupError();
    public static PythonType get_IndexError();
    public static PythonType get_KeyError();
    public static PythonType get_MemoryError();
    public static PythonType get_NameError();
    public static PythonType get_UnboundLocalError();
    public static PythonType get_OSError();
    public static PythonType get_BlockingIOError();
    public static PythonType get_ChildProcessError();
    public static PythonType get_ConnectionError();
    public static PythonType get_BrokenPipeError();
    public static PythonType get_ConnectionAbortedError();
    public static PythonType get_ConnectionRefusedError();
    public static PythonType get_ConnectionResetError();
    public static PythonType get_FileExistsError();
    public static PythonType get_FileNotFoundError();
    public static PythonType get_InterruptedError();
    public static PythonType get_IsADirectoryError();
    public static PythonType get_NotADirectoryError();
    public static PythonType get_PermissionError();
    public static PythonType get_ProcessLookupError();
    public static PythonType get_TimeoutError();
    public static PythonType get_ReferenceError();
    public static PythonType get_RuntimeError();
    public static PythonType get_NotImplementedError();
    public static PythonType get_RecursionError();
    public static PythonType get_SyntaxError();
    public static PythonType get_IndentationError();
    public static PythonType get_TabError();
    public static PythonType get_SystemError();
    public static PythonType get_TypeError();
    public static PythonType get_ValueError();
    public static PythonType get_UnicodeError();
    public static PythonType get_UnicodeDecodeError();
    public static PythonType get_UnicodeEncodeError();
    public static PythonType get_UnicodeTranslateError();
    public static PythonType get_Warning();
    public static PythonType get_DeprecationWarning();
    public static PythonType get_PendingDeprecationWarning();
    public static PythonType get_RuntimeWarning();
    public static PythonType get_SyntaxWarning();
    public static PythonType get_UserWarning();
    public static PythonType get_FutureWarning();
    public static PythonType get_ImportWarning();
    public static PythonType get_UnicodeWarning();
    public static PythonType get_BytesWarning();
    public static PythonType get_ResourceWarning();
    private static BaseException ToPythonHelper(Exception clrException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.RecursionException : RuntimeException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public RecursionException(string msg);
    [NullableContextAttribute("1")]
public RecursionException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected RecursionException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ReferenceException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ReferenceException(string msg);
    [NullableContextAttribute("1")]
public ReferenceException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ReferenceException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.ResourceWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public ResourceWarningException(string msg);
    [NullableContextAttribute("1")]
public ResourceWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected ResourceWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.RuntimeException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public RuntimeException(string msg);
    [NullableContextAttribute("1")]
public RuntimeException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected RuntimeException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.RuntimeWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public RuntimeWarningException(string msg);
    [NullableContextAttribute("1")]
public RuntimeWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected RuntimeWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.StopAsyncIterationException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public StopAsyncIterationException(string msg);
    [NullableContextAttribute("1")]
public StopAsyncIterationException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected StopAsyncIterationException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.StopIterationException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public StopIterationException(string msg);
    [NullableContextAttribute("1")]
public StopIterationException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected StopIterationException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.SyntaxWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public SyntaxWarningException(string msg);
    [NullableContextAttribute("1")]
public SyntaxWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected SyntaxWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
public class IronPython.Runtime.Exceptions.SystemExitException : Exception {
    public SystemExitException(string msg);
    public SystemExitException(string message, Exception innerException);
    private SystemExitException(SerializationInfo info, StreamingContext context);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int GetExitCode(Object& otherCode);
}
internal class IronPython.Runtime.Exceptions.TabException : IndentationException {
    public TabException(string message);
    public TabException(string message, Exception innerException);
    public TabException(string message, SourceUnit sourceUnit, SourceSpan span, int errorCode, Severity severity);
}
[PythonTypeAttribute("traceback")]
public class IronPython.Runtime.Exceptions.TraceBack : object {
    private TraceBack _next;
    private TraceBackFrame _frame;
    private int _line;
    public TraceBack tb_next { get; }
    public TraceBackFrame tb_frame { get; }
    public int tb_lineno { get; }
    public int tb_lasti { get; }
    public TraceBack(TraceBack nextTraceBack, TraceBackFrame fromFrame);
    public TraceBack get_tb_next();
    public TraceBackFrame get_tb_frame();
    public int get_tb_lineno();
    public int get_tb_lasti();
    internal void SetLine(int lineNumber);
    internal string Extract();
}
public class IronPython.Runtime.Exceptions.TracebackDelegate : MulticastDelegate {
    public TracebackDelegate(object object, IntPtr method);
    public virtual TracebackDelegate Invoke(TraceBackFrame frame, string result, object payload);
    public virtual IAsyncResult BeginInvoke(TraceBackFrame frame, string result, object payload, AsyncCallback callback, object object);
    public virtual TracebackDelegate EndInvoke(IAsyncResult result);
}
[PythonTypeAttribute("frame")]
[DebuggerDisplayAttribute("Code = {f_code.co_name}, Line = {f_lineno}")]
public class IronPython.Runtime.Exceptions.TraceBackFrame : object {
    private PythonTracebackListener _traceAdapter;
    private TracebackDelegate _trace;
    private object _traceObject;
    internal int _lineNo;
    private PythonDebuggingPayload _debugProperties;
    private Func`1<IDictionary`2<object, object>> _scopeCallback;
    private PythonDictionary _globals;
    private object _locals;
    private FunctionCode _code;
    private CodeContext _context;
    private TraceBackFrame _back;
    internal CodeContext Context { get; }
    internal TracebackDelegate TraceDelegate { get; }
    public PythonDictionary f_globals { get; }
    public object f_locals { get; }
    public FunctionCode f_code { get; }
    public object f_builtins { get; }
    public TraceBackFrame f_back { get; }
    public object f_lineno { get; public set; }
    internal TraceBackFrame(CodeContext context, PythonDictionary globals, object locals, FunctionCode code);
    internal TraceBackFrame(CodeContext context, PythonDictionary globals, object locals, FunctionCode code, TraceBackFrame back);
    internal TraceBackFrame(PythonTracebackListener traceAdapter, FunctionCode code, TraceBackFrame back, PythonDebuggingPayload debugProperties, Func`1<IDictionary`2<object, object>> scopeCallback);
    [PropertyMethodAttribute]
public object Getf_trace();
    [PropertyMethodAttribute]
public void Setf_trace(object value);
    [PropertyMethodAttribute]
public void Deletef_trace();
    public void clear();
    internal CodeContext get_Context();
    internal TracebackDelegate get_TraceDelegate();
    public PythonDictionary get_f_globals();
    public object get_f_locals();
    public FunctionCode get_f_code();
    public object get_f_builtins();
    public TraceBackFrame get_f_back();
    public object get_f_lineno();
    public void set_f_lineno(object value);
    private void SetLineNumber(int newLineNum);
    private bool IsTopMostFrame(List`1<FunctionStack> pyThread);
    private static Exception BadForOrFinallyJump(int newLineNum, Dictionary`2<int, bool> jumpIntoLoopIds);
}
public class IronPython.Runtime.Exceptions.TypeErrorException : ArgumentTypeException {
    private BaseException _pyExceptionObject;
    private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    public TypeErrorException(string msg);
    public TypeErrorException(string message, Exception innerException);
    protected TypeErrorException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.UnicodeException : Exception {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public UnicodeException(string msg);
    [NullableContextAttribute("1")]
public UnicodeException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected UnicodeException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.UnicodeTranslateException : UnicodeException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public UnicodeTranslateException(string msg);
    [NullableContextAttribute("1")]
public UnicodeTranslateException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected UnicodeTranslateException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.UnicodeWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public UnicodeWarningException(string msg);
    [NullableContextAttribute("1")]
public UnicodeWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected UnicodeWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class IronPython.Runtime.Exceptions.UserWarningException : WarningException {
    private BaseException _pyExceptionObject;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    [NullableContextAttribute("1")]
public UserWarningException(string msg);
    [NullableContextAttribute("1")]
public UserWarningException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected UserWarningException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
public class IronPython.Runtime.Exceptions.ValueErrorException : ArgumentException {
    private BaseException _pyExceptionObject;
    private List`1<DynamicStackFrame> _frames;
    private TraceBack _traceback;
    private BaseException IronPython.Runtime.Exceptions.IPythonAwareException.PythonException { get; private set; }
    private List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.Frames { get; private set; }
    private TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.TraceBack { get; private set; }
    public ValueErrorException(string msg);
    public ValueErrorException(string message, Exception innerException);
    protected ValueErrorException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override BaseException IronPython.Runtime.Exceptions.IPythonAwareException.get_PythonException();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_PythonException(BaseException value);
    private sealed virtual override List`1<DynamicStackFrame> IronPython.Runtime.Exceptions.IPythonAwareException.get_Frames();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_Frames(List`1<DynamicStackFrame> value);
    private sealed virtual override TraceBack IronPython.Runtime.Exceptions.IPythonAwareException.get_TraceBack();
    private sealed virtual override void IronPython.Runtime.Exceptions.IPythonAwareException.set_TraceBack(TraceBack value);
}
internal class IronPython.Runtime.ExtensionMethodSet : object {
    private PythonExtensionBinder _extBinder;
    private Dictionary`2<Assembly, AssemblyLoadInfo> _loadedAssemblies;
    private int _id;
    private static int _curId;
    public static ExtensionMethodSet Empty;
    public static int OutOfIds;
    public int Id { get; }
    private ExtensionMethodSet(Dictionary`2<Assembly, AssemblyLoadInfo> dict);
    private static ExtensionMethodSet();
    public BindingRestrictions GetRestriction(Expression codeContext);
    [IteratorStateMachineAttribute("IronPython.Runtime.ExtensionMethodSet/<GetExtensionMethods>d__10")]
public IEnumerable`1<MethodInfo> GetExtensionMethods(string name);
    private void EnsureLoaded();
    [IteratorStateMachineAttribute("IronPython.Runtime.ExtensionMethodSet/<GetExtensionMethods>d__12")]
public IEnumerable`1<MethodInfo> GetExtensionMethods(PythonType type);
    private void LoadAllTypes();
    public static ExtensionMethodSet AddType(PythonContext context, ExtensionMethodSet existingSet, PythonType type);
    public static ExtensionMethodSet AddNamespace(PythonContext context, ExtensionMethodSet existingSet, NamespaceTracker ns);
    public static bool op_Equality(ExtensionMethodSet set1, ExtensionMethodSet set2);
    public static bool op_Inequality(ExtensionMethodSet set1, ExtensionMethodSet set2);
    public PythonExtensionBinder GetBinder(PythonContext context);
    private static Dictionary`2<Assembly, AssemblyLoadInfo> NewInfoOrCopy(ExtensionMethodSet existingSet);
    public int get_Id();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ExtensionMethodSet other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[PythonTypeAttribute("filter")]
[DocumentationAttribute("filter(function or None, iterable) -> filter object

Return an iterator yielding those items of iterable for which function(item)
is true. If function is None, return the items that are true.")]
public class IronPython.Runtime.Filter : object {
    [NullableAttribute("1")]
private CodeContext _context;
    private object _function;
    [NullableAttribute("1")]
private IEnumerator _enumerator;
    [CompilerGeneratedAttribute]
private object <Current>k__BackingField;
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; private set; }
    public Filter(CodeContext context, object function, object iterable);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(object value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Reset();
    [NullableContextAttribute("1")]
public PythonTuple __reduce__();
}
internal static class IronPython.Runtime.FormattingHelper : object {
    private static NumberFormatInfo _invariantCommaSeperatorInfo;
    public static NumberFormatInfo InvariantCommaNumberInfo { get; }
    public static NumberFormatInfo get_InvariantCommaNumberInfo();
    public static string ToCultureString(T val, NumberFormatInfo nfi, StringFormatSpec spec);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonTypeAttribute("frozenset")]
[DebuggerDisplayAttribute("frozenset, {Count} items")]
[DebuggerTypeProxyAttribute("IronPython.Runtime.CollectionDebugProxy")]
public class IronPython.Runtime.FrozenSetCollection : object {
    internal SetStorage _items;
    [NullableAttribute("2")]
private HashCache _hashCache;
    [CompilerGeneratedAttribute]
private static FrozenSetCollection <Empty>k__BackingField;
    [NullableAttribute("2")]
private WeakRefTracker _tracker;
    private static FrozenSetCollection Empty { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private FrozenSetCollection(SetStorage set);
    protected internal FrozenSetCollection(object set);
    private static FrozenSetCollection();
    public void __init__(Object[] o);
    public static FrozenSetCollection __new__(CodeContext context, PythonType cls);
    public static FrozenSetCollection __new__(CodeContext context, PythonType cls, object set);
    [CompilerGeneratedAttribute]
private static FrozenSetCollection get_Empty();
    internal static FrozenSetCollection Make(SetStorage items);
    internal static FrozenSetCollection Make(object set);
    public FrozenSetCollection copy();
    public int __len__();
    [NullableContextAttribute("2")]
public bool __contains__(object item);
    public PythonTuple __reduce__(CodeContext context);
    private int CalculateHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    public object __eq__(object other);
    public object __ne__(object other);
    public bool isdisjoint(FrozenSetCollection set);
    public bool isdisjoint(SetCollection set);
    [NullableContextAttribute("2")]
public bool isdisjoint(object set);
    public bool issubset(FrozenSetCollection set);
    public bool issubset(SetCollection set);
    [NullableContextAttribute("2")]
public bool issubset(object set);
    public bool issuperset(FrozenSetCollection set);
    public bool issuperset(SetCollection set);
    [NullableContextAttribute("2")]
public bool issuperset(object set);
    public FrozenSetCollection union();
    public FrozenSetCollection union(FrozenSetCollection set);
    public FrozenSetCollection union(SetCollection set);
    public FrozenSetCollection union(object set);
    public FrozenSetCollection union(Object[] sets);
    public FrozenSetCollection intersection();
    public FrozenSetCollection intersection(FrozenSetCollection set);
    public FrozenSetCollection intersection(SetCollection set);
    public FrozenSetCollection intersection(object set);
    public FrozenSetCollection intersection(Object[] sets);
    public FrozenSetCollection difference();
    public FrozenSetCollection difference(FrozenSetCollection set);
    public FrozenSetCollection difference(SetCollection set);
    public FrozenSetCollection difference(object set);
    public FrozenSetCollection difference(Object[] sets);
    public FrozenSetCollection symmetric_difference(FrozenSetCollection set);
    public FrozenSetCollection symmetric_difference(SetCollection set);
    public FrozenSetCollection symmetric_difference(object set);
    public static FrozenSetCollection op_BitwiseOr(FrozenSetCollection x, FrozenSetCollection y);
    public static FrozenSetCollection op_BitwiseAnd(FrozenSetCollection x, FrozenSetCollection y);
    public static FrozenSetCollection op_ExclusiveOr(FrozenSetCollection x, FrozenSetCollection y);
    public static FrozenSetCollection op_Subtraction(FrozenSetCollection x, FrozenSetCollection y);
    public static FrozenSetCollection op_BitwiseOr(FrozenSetCollection x, SetCollection y);
    public static FrozenSetCollection op_BitwiseAnd(FrozenSetCollection x, SetCollection y);
    public static FrozenSetCollection op_ExclusiveOr(FrozenSetCollection x, SetCollection y);
    public static FrozenSetCollection op_Subtraction(FrozenSetCollection x, SetCollection y);
    public static object op_GreaterThan(FrozenSetCollection self, object other);
    public static object op_LessThan(FrozenSetCollection self, object other);
    public static object op_GreaterThanOrEqual(FrozenSetCollection self, object other);
    public static object op_LessThanOrEqual(FrozenSetCollection self, object other);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    public virtual string __repr__(CodeContext context);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [NullableContextAttribute("2")]
private sealed virtual override WeakRefTracker IronPython.Runtime.IWeakReferenceable.GetWeakRef();
    private sealed virtual override bool IronPython.Runtime.IWeakReferenceable.SetWeakRef(WeakRefTracker value);
    private sealed virtual override void IronPython.Runtime.IWeakReferenceable.SetFinalizer(WeakRefTracker value);
}
[FlagsAttribute]
public enum IronPython.Runtime.FunctionAttributes : Enum {
    public int value__;
    public static FunctionAttributes None;
    public static FunctionAttributes ArgumentList;
    public static FunctionAttributes KeywordDictionary;
    public static FunctionAttributes Generator;
    public static FunctionAttributes CanSetSysExcInfo;
    public static FunctionAttributes ContainsTryFinally;
    public static FunctionAttributes GeneratorStop;
}
public class IronPython.Runtime.FunctionCaller : object {
    protected int _compat;
    internal FunctionCaller(int compat);
    public object Call0(CallSite site, CodeContext context, object func);
    public object Default1Call0(CallSite site, CodeContext context, object func);
    public object Default2Call0(CallSite site, CodeContext context, object func);
    public object Default3Call0(CallSite site, CodeContext context, object func);
    public object Default4Call0(CallSite site, CodeContext context, object func);
    public object Default5Call0(CallSite site, CodeContext context, object func);
    public object Default6Call0(CallSite site, CodeContext context, object func);
    public object Default7Call0(CallSite site, CodeContext context, object func);
    public object Default8Call0(CallSite site, CodeContext context, object func);
    public object Default9Call0(CallSite site, CodeContext context, object func);
    public object Default10Call0(CallSite site, CodeContext context, object func);
    public object Default11Call0(CallSite site, CodeContext context, object func);
    public object Default12Call0(CallSite site, CodeContext context, object func);
    public object Default13Call0(CallSite site, CodeContext context, object func);
}
public class IronPython.Runtime.FunctionCaller`1 : FunctionCaller {
    public FunctionCaller`1(int compat);
    public object Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default1Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default2Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default3Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default4Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default5Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default6Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default7Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default8Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default9Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default10Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default11Call1(CallSite site, CodeContext context, object func, T0 arg0);
    public object Default12Call1(CallSite site, CodeContext context, object func, T0 arg0);
}
public class IronPython.Runtime.FunctionCaller`10 : FunctionCaller {
    public FunctionCaller`10(int compat);
    public object Call10(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public object Default1Call10(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public object Default2Call10(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public object Default3Call10(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
}
public class IronPython.Runtime.FunctionCaller`11 : FunctionCaller {
    public FunctionCaller`11(int compat);
    public object Call11(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public object Default1Call11(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public object Default2Call11(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
}
public class IronPython.Runtime.FunctionCaller`12 : FunctionCaller {
    public FunctionCaller`12(int compat);
    public object Call12(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public object Default1Call12(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
}
public class IronPython.Runtime.FunctionCaller`13 : FunctionCaller {
    public FunctionCaller`13(int compat);
    public object Call13(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
}
public class IronPython.Runtime.FunctionCaller`2 : FunctionCaller {
    public FunctionCaller`2(int compat);
    public object Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default1Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default2Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default3Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default4Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default5Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default6Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default7Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default8Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default9Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default10Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
    public object Default11Call2(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1);
}
public class IronPython.Runtime.FunctionCaller`3 : FunctionCaller {
    public FunctionCaller`3(int compat);
    public object Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default1Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default2Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default3Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default4Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default5Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default6Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default7Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default8Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default9Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
    public object Default10Call3(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2);
}
public class IronPython.Runtime.FunctionCaller`4 : FunctionCaller {
    public FunctionCaller`4(int compat);
    public object Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default1Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default2Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default3Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default4Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default5Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default6Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default7Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default8Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    public object Default9Call4(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
}
public class IronPython.Runtime.FunctionCaller`5 : FunctionCaller {
    public FunctionCaller`5(int compat);
    public object Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public object Default1Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public object Default2Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public object Default3Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public object Default4Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public object Default5Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public object Default6Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public object Default7Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public object Default8Call5(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
}
public class IronPython.Runtime.FunctionCaller`6 : FunctionCaller {
    public FunctionCaller`6(int compat);
    public object Call6(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public object Default1Call6(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public object Default2Call6(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public object Default3Call6(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public object Default4Call6(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public object Default5Call6(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public object Default6Call6(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public object Default7Call6(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
}
public class IronPython.Runtime.FunctionCaller`7 : FunctionCaller {
    public FunctionCaller`7(int compat);
    public object Call7(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public object Default1Call7(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public object Default2Call7(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public object Default3Call7(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public object Default4Call7(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public object Default5Call7(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public object Default6Call7(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
}
public class IronPython.Runtime.FunctionCaller`8 : FunctionCaller {
    public FunctionCaller`8(int compat);
    public object Call8(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public object Default1Call8(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public object Default2Call8(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public object Default3Call8(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public object Default4Call8(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public object Default5Call8(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
}
public class IronPython.Runtime.FunctionCaller`9 : FunctionCaller {
    public FunctionCaller`9(int compat);
    public object Call9(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public object Default1Call9(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public object Default2Call9(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public object Default3Call9(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public object Default4Call9(CallSite site, CodeContext context, object func, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
}
internal class IronPython.Runtime.FunctionCallerProperties : object {
    internal static int MaxGeneratedFunctionArgs;
}
[PythonTypeAttribute("code")]
[DebuggerDisplayAttribute("{co_name}, FileName = {co_filename}")]
public class IronPython.Runtime.FunctionCode : object {
    internal Delegate _normalDelegate;
    private ScopeStatement _lambda;
    internal string _initialDoc;
    private int _localCount;
    private bool _compilingLight;
    private int _exceptionCount;
    private LambdaExpression _tracingLambda;
    internal Delegate _tracingDelegate;
    private static CodeList _CodeCreateAndUpdateDelegateLock;
    [CompilerGeneratedAttribute]
private int <co_argcount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <co_kwonlyargcount>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <LightThrowTarget>k__BackingField;
    private bool IsOnDiskCode { get; }
    public SourceSpan Span { get; }
    internal String[] ArgNames { get; }
    internal FunctionAttributes Flags { get; }
    internal bool IsModule { get; }
    public PythonTuple co_varnames { get; }
    public int co_argcount { get; }
    public int co_kwonlyargcount { get; }
    public PythonTuple co_cellvars { get; }
    public object co_code { get; }
    public PythonTuple co_consts { get; }
    public string co_filename { get; }
    public int co_firstlineno { get; }
    public int co_flags { get; }
    public PythonTuple co_freevars { get; }
    public object co_lnotab { get; }
    public string co_name { get; }
    public PythonTuple co_names { get; }
    public object co_nlocals { get; }
    public object co_stacksize { get; }
    internal LightLambdaExpression Code { get; }
    internal ScopeStatement PythonCode { get; }
    internal Delegate Target { get; private set; }
    internal Delegate LightThrowTarget { get; private set; }
    internal FunctionCode(PythonContext context, Delegate code, ScopeStatement scope, string documentation, int localCount);
    internal FunctionCode(PythonContext context, Delegate initialDelegate, ScopeStatement scope, string documentation, Nullable`1<bool> tracing, bool register);
    private static FunctionCode();
    private static PythonTuple SymbolListToTuple(IList`1<string> vars);
    private static PythonTuple StringArrayToTuple(String[] closureVars);
    private void RegisterFunctionCode(PythonContext context);
    internal static void CleanFunctionCodes(PythonContext context, bool synchronous);
    internal void SetTarget(Delegate target);
    internal void LightThrowCompile(CodeContext context);
    private bool get_IsOnDiskCode();
    [IteratorStateMachineAttribute("IronPython.Runtime.FunctionCode/<GetAllCode>d__19")]
private static IEnumerable`1<FunctionCode> GetAllCode(PythonContext context);
    internal static void UpdateAllCode(PythonContext context);
    private static void CodeCleanup(object state);
    private static CodeList GetRootCodeNoUpdating(PythonContext context);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SourceSpan get_Span();
    internal String[] get_ArgNames();
    internal FunctionAttributes get_Flags();
    internal bool get_IsModule();
    public PythonTuple get_co_varnames();
    [CompilerGeneratedAttribute]
public int get_co_argcount();
    [CompilerGeneratedAttribute]
public int get_co_kwonlyargcount();
    public PythonTuple get_co_cellvars();
    public object get_co_code();
    public PythonTuple get_co_consts();
    public string get_co_filename();
    public int get_co_firstlineno();
    public int get_co_flags();
    public PythonTuple get_co_freevars();
    public object get_co_lnotab();
    public string get_co_name();
    public PythonTuple get_co_names();
    public object get_co_nlocals();
    public object get_co_stacksize();
    public sealed virtual string __repr__(CodeContext context);
    internal LightLambdaExpression get_Code();
    internal ScopeStatement get_PythonCode();
    [CompilerGeneratedAttribute]
internal Delegate get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(Delegate value);
    [CompilerGeneratedAttribute]
internal Delegate get_LightThrowTarget();
    [CompilerGeneratedAttribute]
private void set_LightThrowTarget(Delegate value);
    internal object Call(CodeContext context);
    internal static FunctionCode FromSourceUnit(SourceUnit sourceUnit, PythonCompilerOptions options, bool register);
    private void ExpandArgsTuple(List`1<string> names, PythonTuple toExpand);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public NotImplementedType __gt__(CodeContext context, object other);
    public NotImplementedType __lt__(CodeContext context, object other);
    public NotImplementedType __ge__(CodeContext context, object other);
    public NotImplementedType __le__(CodeContext context, object other);
    internal void LazyCompileFirstTarget(PythonFunction function);
    internal void UpdateDelegate(PythonContext context, bool forceCreation);
    internal void SetDebugTarget(PythonContext context, Delegate target);
    private LambdaExpression GetGeneratorOrNormalLambdaTracing(PythonContext context);
    private LightLambdaExpression GetGeneratorOrNormalLambda();
    private Delegate CompileLambda(LightLambdaExpression code, EventHandler`1<LightLambdaCompileEventArgs> handler);
    private Delegate CompileLambda(LambdaExpression code, EventHandler`1<LightLambdaCompileEventArgs> handler);
    internal Delegate AddRecursionCheck(PythonContext context, Delegate finalTarget);
    private sealed virtual override Expression Microsoft.Scripting.Runtime.IExpressionSerializable.CreateExpression();
    private static Expression TupleToStringArray(PythonTuple tuple);
}
internal class IronPython.Runtime.GlobalDictionaryStorage : CustomDictionaryStorage {
    private Dictionary`2<string, PythonGlobal> _globals;
    private PythonGlobal[] _data;
    private PythonGlobal _path;
    private PythonGlobal _package;
    private PythonGlobal _builtins;
    private PythonGlobal _name;
    public PythonGlobal[] Data { get; }
    public GlobalDictionaryStorage(Dictionary`2<string, PythonGlobal> globals);
    public GlobalDictionaryStorage(Dictionary`2<string, PythonGlobal> globals, PythonGlobal[] data);
    [IteratorStateMachineAttribute("IronPython.Runtime.GlobalDictionaryStorage/<GetExtraItems>d__8")]
protected virtual IEnumerable`1<KeyValuePair`2<string, object>> GetExtraItems();
    protected virtual Nullable`1<bool> TryRemoveExtraValue(string key);
    protected virtual bool TrySetExtraValue(string key, object value);
    protected virtual bool TryGetExtraValue(string key, Object& value);
    public virtual bool TryGetBuiltins(Object& value);
    public virtual bool TryGetPath(Object& value);
    public virtual bool TryGetPackage(Object& value);
    public virtual bool TryGetName(Object& value);
    private bool TryGetCachedValue(PythonGlobal& storage, string name, Object& value);
    public PythonGlobal[] get_Data();
}
public class IronPython.Runtime.HashDelegate : MulticastDelegate {
    public HashDelegate(object object, IntPtr method);
    public virtual int Invoke(object o, HashDelegate& dlg);
    public virtual IAsyncResult BeginInvoke(object o, HashDelegate& dlg, AsyncCallback callback, object object);
    public virtual int EndInvoke(HashDelegate& dlg, IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface IronPython.Runtime.IBufferProtocol {
    public abstract virtual IPythonBuffer GetBuffer(BufferFlags flags);
}
public interface IronPython.Runtime.ICodeFormattable {
    public abstract virtual string __repr__(CodeContext context);
}
[PythonTypeAttribute("enumerable_wrapper")]
public class IronPython.Runtime.IEnumerableOfTWrapper`1 : object {
    private IEnumerable enumerable;
    public IEnumerableOfTWrapper`1(IEnumerable enumerable);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class IronPython.Runtime.IEnumeratorOfTWrapper`1 : object {
    private IEnumerator enumerable;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public IEnumeratorOfTWrapper`1(IEnumerator enumerable);
    public sealed virtual T get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public static class IronPython.Runtime.Importer : object {
    internal static string ModuleReloadMethod;
    public static object Import(CodeContext context, string fullName, PythonTuple from, int level);
    [LightThrowingAttribute]
internal static object ImportLightThrow(CodeContext context, string fullName, PythonTuple from, int level);
    public static object ImportFrom(CodeContext context, object from, string name);
    private static object ImportModuleFrom(CodeContext context, object from, ArraySegment`1<string> parts, object root);
    public static object ImportModule(CodeContext context, object globals, string modName, bool bottom, int level);
    private static bool TryGetNameAndPath(CodeContext context, object globals, string name, int level, string package, String& full, PythonList& path, PythonModule& parentMod);
    private static string GetParentPackageName(int level, String[] names);
    public static object ReloadModule(CodeContext context, PythonModule module);
    private static PythonList GetParentPathAndModule(CodeContext context, string parentModuleName, PythonModule& parentModule);
    private static void ReloadBuiltinModule(CodeContext context, PythonModule module);
    private static bool TryGetExistingOrMetaPathModule(CodeContext context, string fullName, PythonList path, Object& ret);
    private static bool TryLoadMetaPathModule(CodeContext context, string fullName, PythonList path, Object& ret);
    private static bool FindAndLoadModuleFromImporter(CodeContext context, object importer, string fullName, PythonList path, Object& ret);
    internal static bool TryGetExistingModule(CodeContext context, string fullName, Object& ret);
    private static object ImportTopAbsolute(CodeContext context, string name);
    private static String[] SubArray(String[] t, int len);
    private static bool TryGetNestedModule(CodeContext context, PythonModule scope, String[] parts, int current, Object& nested);
    private static object ImportNestedModule(CodeContext context, PythonModule module, ArraySegment`1<string> parts, PythonList path, string scopeModuleName);
    private static object FindImportFunction(CodeContext context);
    internal static object ImportBuiltin(CodeContext context, string name);
    private static object ImportReflected(CodeContext context, string name);
    internal static object MemberTrackerToPython(CodeContext context, object ret);
    internal static PythonModule TryImportSourceFile(PythonContext context, string name);
    internal static PythonModule ExecuteSourceUnit(PythonContext context, SourceUnit sourceUnit);
    internal static SourceUnit TryFindSourceFile(PythonContext context, string name);
    private static bool IsReflected(object module);
    private static string CreateFullName(string baseName, ArraySegment`1<string> parts);
    private static object ImportFromPath(CodeContext context, string name, string fullName, PythonList path);
    private static object ImportFromPathHook(CodeContext context, string name, string fullName, PythonList path, Func`5<CodeContext, string, string, string, object> defaultLoader);
    internal static bool TryImportMainFromZip(CodeContext context, string path, Object& importer);
    private static object LoadFromDisk(CodeContext context, string name, string fullName, string str);
    private static object FindImporterForPath(CodeContext context, string dirname);
    private static PythonModule LoadModuleFromSource(CodeContext context, string name, string path);
    private static string GetFullPathAndValidateCase(LanguageContext context, string path, bool isDir);
    internal static PythonModule LoadPackageFromSource(CodeContext context, string name, string path);
    private static PythonModule LoadFromSourceUnit(CodeContext context, SourceUnit sourceCode, string name, string path);
}
public class IronPython.Runtime.Index : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    internal object Value { get; }
    public Index(object value);
    [CompilerGeneratedAttribute]
internal object get_Value();
}
internal class IronPython.Runtime.InstancedModuleDictionaryStorage : ModuleDictionaryStorage {
    private BuiltinPythonModule _module;
    public BuiltinPythonModule Instance { get; }
    public InstancedModuleDictionaryStorage(BuiltinPythonModule moduleInstance, Dictionary`2<string, PythonGlobal> globalsDict);
    public virtual BuiltinPythonModule get_Instance();
}
internal class IronPython.Runtime.InstanceFinalizer : object {
    private object _instance;
    internal InstanceFinalizer(CodeContext context, object inst);
    internal object CallDirect(CodeContext context);
}
[DefaultMemberAttribute("Item")]
public interface IronPython.Runtime.IParameterSequence {
    public object Item { get; }
    public int Count { get; }
    public abstract virtual Object[] Expand(object initial);
    public abstract virtual object get_Item(int index);
    public abstract virtual int get_Count();
}
public interface IronPython.Runtime.IProxyObject {
    public object Target { get; }
    public abstract virtual object get_Target();
}
[NullableContextAttribute("2")]
public interface IronPython.Runtime.IPythonBuffer {
    [NullableAttribute("1")]
public object Object { get; }
    public bool IsReadOnly { get; }
    public int Offset { get; }
    public string Format { get; }
    public int ItemCount { get; }
    public int ItemSize { get; }
    public int NumOfDims { get; }
    public IReadOnlyList`1<int> Shape { get; }
    public IReadOnlyList`1<int> Strides { get; }
    public IReadOnlyList`1<int> SubOffsets { get; }
    [NullableContextAttribute("1")]
public abstract virtual object get_Object();
    public abstract virtual bool get_IsReadOnly();
    [NullableContextAttribute("0")]
public abstract virtual ReadOnlySpan`1<byte> AsReadOnlySpan();
    [NullableContextAttribute("0")]
public abstract virtual Span`1<byte> AsSpan();
    public abstract virtual int get_Offset();
    public abstract virtual string get_Format();
    public abstract virtual int get_ItemCount();
    public abstract virtual int get_ItemSize();
    public abstract virtual int get_NumOfDims();
    public abstract virtual IReadOnlyList`1<int> get_Shape();
    public abstract virtual IReadOnlyList`1<int> get_Strides();
    public abstract virtual IReadOnlyList`1<int> get_SubOffsets();
}
public interface IronPython.Runtime.IPythonMembersList {
    public abstract virtual IList`1<object> GetMemberNames(CodeContext context);
}
public interface IronPython.Runtime.IReversible {
    public abstract virtual IEnumerator __reversed__();
}
[PythonTypeAttribute("iterable")]
public class IronPython.Runtime.ItemEnumerable : object {
    private object _source;
    private object _getitem;
    private CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> _site;
    internal ItemEnumerable(object source, object getitem, CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> site);
    public IEnumerator __iter__();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[PythonTypeAttribute("iterator")]
public class IronPython.Runtime.ItemEnumerator : object {
    private object _source;
    private object _getItemMethod;
    private CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> _site;
    private object _current;
    private int _index;
    private object System.Collections.IEnumerator.Current { get; }
    internal ItemEnumerator(object source, object getItemMethod, CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> site);
    public PythonTuple __reduce__(CodeContext context);
    public void __setstate__(int index);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public interface IronPython.Runtime.IWeakReferenceable {
    public abstract virtual WeakRefTracker GetWeakRef();
    public abstract virtual bool SetWeakRef(WeakRefTracker value);
    public abstract virtual void SetFinalizer(WeakRefTracker value);
}
public interface IronPython.Runtime.IWeakReferenceableByProxy {
    public abstract virtual IWeakReferenceable GetWeakRefProxy(PythonContext context);
}
public class IronPython.Runtime.KwCallInfo : object {
    private Object[] _args;
    private String[] _names;
    public Object[] Arguments { get; }
    public String[] Names { get; }
    public KwCallInfo(Object[] args, String[] names);
    public Object[] get_Arguments();
    public String[] get_Names();
}
[DefaultMemberAttribute("Item")]
public class IronPython.Runtime.ListGenericWrapper`1 : object {
    private IList`1<object> _value;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ListGenericWrapper`1(IList`1<object> value);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class IronPython.Runtime.LiteralParser : object {
    private static Char[] signs;
    private static LiteralParser();
    internal static string ParseString(Char[] text, int start, int length, bool isRaw, bool isUniEscape, bool normalizeLineEndings);
    internal static string ParseString(Byte[] bytes, int start, int length, bool isRaw, ParseStringErrorHandler`1<byte> errorHandler);
    internal static string ParseString(ReadOnlySpan`1& bytes, bool isRaw, ParseStringErrorHandler`1<byte> errorHandler);
    private static string DoParseString(ReadOnlySpan`1<T> data, bool isRaw, bool isUniEscape, bool normalizeLineEndings, ParseStringErrorHandler`1<T> errorHandler);
    private static void StringBuilderInit(StringBuilder& sb, ReadOnlySpan`1& data, int toCopy);
    internal static List`1<byte> ParseBytes(ReadOnlySpan`1<T> data, bool isRaw, bool isAscii, bool normalizeLineEndings, ParseBytesErrorHandler`1<T> errorHandler);
    private static bool HexValue(char ch, Int32& value);
    private static int HexValue(char ch);
    private static int CharValue(char ch, int b);
    private static bool ParseInt(string text, int b, Int32& ret);
    private static bool TryParseInt(ReadOnlySpan`1& text, int start, int length, int b, Int32& value, Int32& consumed);
    public static object ParseInteger(string text, int b);
    public static object ParseIntegerSign(string text, int b, int start);
    internal static bool TryParseIntegerSign(string text, int b, int start, Object& val);
    private static void ParseIntegerStart(string text, Int32& b, Int32& start, int end, Int16& sign);
    private static void ParseIntegerEnd(string text, Int32& start, Int32& end);
    internal static BigInteger ParseBigInteger(string text, int b);
    internal static BigInteger ParseBigIntegerSign(string text, int b, int start);
    private static bool TryParseBigIntegerSign(string text, int b, int start, BigInteger& val);
    internal static bool TryParseFloat(string text, Double& res, bool replaceUnicode);
    public static double ParseFloat(string text);
    private static double ParseFloatNoCatch(string text, bool replaceUnicode);
    private static string ReplaceUnicodeCharacters(string text);
    private static Exception ExnMalformed();
    public static Complex ParseComplex(string s);
    public static Complex ParseImaginary(string text);
    [CompilerGeneratedAttribute]
internal static void <DoParseString>g__handleError|4_0(ReadOnlySpan`1& data, int start, int end, string reason, <>c__DisplayClass4_0`1& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[PythonTypeAttribute("map")]
[DocumentationAttribute("map(func, *iterables) -> map object

Make an iterator that computes the function using arguments from
each of the iterables.  Stops when the shortest iterable is exhausted.")]
public class IronPython.Runtime.Map : object {
    [NullableAttribute("1")]
private CodeContext _context;
    private object _func;
    [NullableAttribute("1")]
private IEnumerator[] _enumerators;
    [CompilerGeneratedAttribute]
private object <Current>k__BackingField;
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; private set; }
    [NullableContextAttribute("1")]
public Map(CodeContext context, object func, Object[] iterables);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(object value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Reset();
    [NullableContextAttribute("1")]
public PythonTuple __reduce__();
}
[AttributeUsageAttribute("8192")]
public class IronPython.Runtime.MaybeNotImplementedAttribute : Attribute {
}
public class IronPython.Runtime.MemoryBufferProtocolWrapper : object {
    private ReadOnlyMemory`1<byte> _rom;
    private Nullable`1<Memory`1<byte>> _memory;
    public MemoryBufferProtocolWrapper(ReadOnlyMemory`1<byte> memory);
    public MemoryBufferProtocolWrapper(Memory`1<byte> memory);
    [NullableContextAttribute("1")]
public sealed virtual IPythonBuffer GetBuffer(BufferFlags flags);
}
public class IronPython.Runtime.MemoryBufferWrapper : object {
    private ReadOnlyMemory`1<byte> _rom;
    private Nullable`1<Memory`1<byte>> _memory;
    private BufferFlags _flags;
    [NullableAttribute("1")]
public object Object { get; }
    public bool IsReadOnly { get; }
    public int Offset { get; }
    [NullableAttribute("2")]
public string Format { get; }
    public int ItemCount { get; }
    public int ItemSize { get; }
    public int NumOfDims { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<int> Shape { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<int> Strides { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<int> SubOffsets { get; }
    public MemoryBufferWrapper(ReadOnlyMemory`1<byte> memory, BufferFlags flags);
    public MemoryBufferWrapper(Memory`1<byte> memory, BufferFlags flags);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual object get_Object();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ReadOnlySpan`1<byte> AsReadOnlySpan();
    public sealed virtual Span`1<byte> AsSpan();
    public sealed virtual int get_Offset();
    [NullableContextAttribute("2")]
public sealed virtual string get_Format();
    public sealed virtual int get_ItemCount();
    public sealed virtual int get_ItemSize();
    public sealed virtual int get_NumOfDims();
    [NullableContextAttribute("2")]
public sealed virtual IReadOnlyList`1<int> get_Shape();
    [NullableContextAttribute("2")]
public sealed virtual IReadOnlyList`1<int> get_Strides();
    [NullableContextAttribute("2")]
public sealed virtual IReadOnlyList`1<int> get_SubOffsets();
}
internal class IronPython.Runtime.MemoryStreamContentProvider : TextContentProvider {
    private PythonContext _context;
    private Byte[] _data;
    private int _index;
    private int _count;
    private string _path;
    internal MemoryStreamContentProvider(PythonContext context, Byte[] data, string path);
    internal MemoryStreamContentProvider(PythonContext context, Byte[] data, int index, int count, string path);
    public virtual SourceCodeReader GetReader();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("memoryview")]
public class IronPython.Runtime.MemoryView : object {
    private static int MaximumDimensions;
    private static string ValidCodes;
    private IBufferProtocol _exporter;
    [NullableAttribute("2")]
private IPythonBuffer _buffer;
    private BufferFlags _flags;
    private int _offset;
    private bool _isReadOnly;
    private int _numDims;
    private string _format;
    private int _itemSize;
    private IReadOnlyList`1<int> _shape;
    private IReadOnlyList`1<int> _strides;
    private Nullable`1<int> _storedHash;
    [NullableAttribute("2")]
private WeakRefTracker _tracker;
    private int _numItems;
    private bool _isCContig;
    private bool _isFContig;
    public object obj { get; }
    public bool c_contiguous { get; }
    public bool f_contiguous { get; }
    public bool contiguous { get; }
    public string format { get; }
    public int itemsize { get; }
    public int ndim { get; }
    public int nbytes { get; }
    public bool readonly { get; }
    public PythonTuple shape { get; }
    public PythonTuple strides { get; }
    public PythonTuple suboffsets { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    private object IronPython.Runtime.IPythonBuffer.Object { get; }
    private bool IronPython.Runtime.IPythonBuffer.IsReadOnly { get; }
    private int IronPython.Runtime.IPythonBuffer.Offset { get; }
    private int IronPython.Runtime.IPythonBuffer.ItemCount { get; }
    [NullableAttribute("2")]
private string IronPython.Runtime.IPythonBuffer.Format { get; }
    private int IronPython.Runtime.IPythonBuffer.ItemSize { get; }
    private int IronPython.Runtime.IPythonBuffer.NumOfDims { get; }
    [NullableAttribute("2")]
private IReadOnlyList`1<int> IronPython.Runtime.IPythonBuffer.Shape { get; }
    [NullableAttribute("2")]
private IReadOnlyList`1<int> IronPython.Runtime.IPythonBuffer.Strides { get; }
    [NullableAttribute("2")]
private IReadOnlyList`1<int> IronPython.Runtime.IPythonBuffer.SubOffsets { get; }
    public MemoryView(IBufferProtocol object);
    public MemoryView(MemoryView object);
    internal MemoryView(IBufferProtocol object, bool readOnly);
    internal MemoryView(MemoryView mv, bool readOnly);
    private MemoryView(MemoryView mv, int newStart, int newStop, int newStep, int newLen);
    private MemoryView(MemoryView mv, string newFormat, int newItemSize, IReadOnlyList`1<int> newShape);
    private MemoryView(MemoryView object, BufferFlags flags);
    protected virtual override void Finalize();
    [MemberNotNullAttribute("_buffer")]
private void CheckBuffer();
    [NullableContextAttribute("2")]
private static bool VerifyStructure(int memlen, int itemsize, int ndim, IReadOnlyList`1<int> shape, IReadOnlyList`1<int> strides, int offset);
    private static IReadOnlyList`1<int> GetContiguousStrides(IReadOnlyList`1<int> shape, int itemSize);
    public int __len__();
    public object get_obj();
    public void release(CodeContext context);
    public object __enter__();
    public void __exit__(CodeContext context, Object[] excinfo);
    public bool get_c_contiguous();
    public bool get_f_contiguous();
    public bool get_contiguous();
    public string get_format();
    public int get_itemsize();
    public int get_ndim();
    public int get_nbytes();
    public bool get_readonly();
    public PythonTuple get_shape();
    public PythonTuple get_strides();
    public PythonTuple get_suboffsets();
    public string hex();
    public Bytes tobytes();
    public object tolist();
    public MemoryView cast(string format);
    public MemoryView cast(string format, object shape);
    private static bool IsSupportedTypecode(char code);
    [NullableContextAttribute("0")]
private static void UnpackBytes(char typecode, object o, Span`1<byte> dest);
    [NullableContextAttribute("0")]
private static object PackBytes(char typecode, ReadOnlySpan`1<byte> bytes);
    private object GetItem(int offset);
    [NullableContextAttribute("2")]
private void SetItem(int offset, object value);
    [NullableContextAttribute("2")]
public object get_Item(int index);
    [NullableContextAttribute("2")]
public void set_Item(int index, object value);
    public void __delitem__(int index);
    public void __delitem__(Slice slice);
    public object get_Item(Slice slice);
    public void set_Item(Slice slice, object value);
    [NullableContextAttribute("2")]
private void SliceAssign(int index, object value);
    private static void FixSlice(Slice slice, int len, Int32& start, Int32& stop, Int32& step, Int32& count);
    public object get_Item(PythonTuple index);
    public void set_Item(PythonTuple index, object value);
    private int GetItemOffset(PythonTuple tuple);
    private int GetItemOffset(int index);
    public int __hash__(CodeContext context);
    public bool __eq__(CodeContext context, MemoryView value);
    public bool __eq__(CodeContext context, IBufferProtocol value);
    public NotImplementedType __eq__(CodeContext context, object value);
    public bool __ne__(CodeContext context, MemoryView value);
    public bool __ne__(CodeContext context, IBufferProtocol value);
    public NotImplementedType __ne__(CodeContext context, object value);
    public NotImplementedType __lt__(CodeContext context, object value);
    public NotImplementedType __le__(CodeContext context, object value);
    public NotImplementedType __gt__(CodeContext context, object value);
    public NotImplementedType __ge__(CodeContext context, object value);
    public sealed virtual string __repr__(CodeContext context);
    [NullableContextAttribute("2")]
private sealed virtual override WeakRefTracker IronPython.Runtime.IWeakReferenceable.GetWeakRef();
    private sealed virtual override bool IronPython.Runtime.IWeakReferenceable.SetWeakRef(WeakRefTracker value);
    private sealed virtual override void IronPython.Runtime.IWeakReferenceable.SetFinalizer(WeakRefTracker value);
    private sealed virtual override IPythonBuffer IronPython.Runtime.IBufferProtocol.GetBuffer(BufferFlags flags);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override object IronPython.Runtime.IPythonBuffer.get_Object();
    private sealed virtual override bool IronPython.Runtime.IPythonBuffer.get_IsReadOnly();
    [NullableContextAttribute("0")]
private sealed virtual override ReadOnlySpan`1<byte> IronPython.Runtime.IPythonBuffer.AsReadOnlySpan();
    [NullableContextAttribute("0")]
private sealed virtual override Span`1<byte> IronPython.Runtime.IPythonBuffer.AsSpan();
    private sealed virtual override int IronPython.Runtime.IPythonBuffer.get_Offset();
    private sealed virtual override int IronPython.Runtime.IPythonBuffer.get_ItemCount();
    [NullableContextAttribute("2")]
private sealed virtual override string IronPython.Runtime.IPythonBuffer.get_Format();
    private sealed virtual override int IronPython.Runtime.IPythonBuffer.get_ItemSize();
    private sealed virtual override int IronPython.Runtime.IPythonBuffer.get_NumOfDims();
    [NullableContextAttribute("2")]
private sealed virtual override IReadOnlyList`1<int> IronPython.Runtime.IPythonBuffer.get_Shape();
    [NullableContextAttribute("2")]
private sealed virtual override IReadOnlyList`1<int> IronPython.Runtime.IPythonBuffer.get_Strides();
    [NullableContextAttribute("2")]
private sealed virtual override IReadOnlyList`1<int> IronPython.Runtime.IPythonBuffer.get_SubOffsets();
    [CompilerGeneratedAttribute]
internal static char <hex>g__ToAscii|56_0(int b);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <tolist>g__subdimensionToList|58_0(ReadOnlySpan`1<byte> source, int ofs, int dim, <>c__DisplayClass58_0& );
}
[PythonTypeAttribute("method")]
[DontMapGetMemberNamesToDirAttribute]
public class IronPython.Runtime.Method : PythonTypeSlot {
    private WeakRefTracker _weakref;
    [CompilerGeneratedAttribute]
private object <__func__>k__BackingField;
    [CompilerGeneratedAttribute]
private object <__self__>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonType <im_class>k__BackingField;
    internal string Name { get; }
    public string __doc__ { get; }
    public object __func__ { get; }
    public object __self__ { get; }
    internal PythonType im_class { get; }
    internal bool GetAlwaysSucceeds { get; }
    internal Method(object function, object instance, PythonType class);
    public Method(object function, object self);
    internal string get_Name();
    public string get___doc__();
    [CompilerGeneratedAttribute]
public object get___func__();
    [CompilerGeneratedAttribute]
public object get___self__();
    [CompilerGeneratedAttribute]
internal PythonType get_im_class();
    public object Call(CodeContext context, Object[] args);
    public object Call(CodeContext context, IDictionary`2<object, object> kwArgs, Object[] args);
    private string DeclaringClassAsString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override WeakRefTracker IronPython.Runtime.IWeakReferenceable.GetWeakRef();
    private sealed virtual override bool IronPython.Runtime.IWeakReferenceable.SetWeakRef(WeakRefTracker value);
    private sealed virtual override void IronPython.Runtime.IWeakReferenceable.SetFinalizer(WeakRefTracker value);
    public object GetCustomMember(CodeContext context, string name);
    public void SetMemberAfter(CodeContext context, string name, object value);
    public void DeleteMember(CodeContext context, string name);
    private sealed virtual override IList`1<string> Microsoft.Scripting.Runtime.IMembersList.GetMemberNames();
    private sealed virtual override IList`1<object> IronPython.Runtime.IPythonMembersList.GetMemberNames(CodeContext context);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    public sealed virtual string __repr__(CodeContext context);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override FastBindResult`1<T> IronPython.Runtime.Binding.IFastInvokable.MakeInvokeBinding(CallSite`1<T> site, PythonInvokeBinder binder, CodeContext context, Object[] args);
    private static BaseMethodBinding GetMethodBinding(PythonInvokeBinder binder, Type[] typeArgs, BaseMethodBinding binding);
    private static Type[] GetTypeArgs();
    private static PythonInvokeBinder GetSelfBinder(PythonInvokeBinder binder, CodeContext context);
}
public class IronPython.Runtime.MissingParameter : object {
    public static MissingParameter Value;
    private static MissingParameter();
}
public class IronPython.Runtime.ModuleContext : object {
    private PythonContext _pyContext;
    private PythonDictionary _globals;
    private CodeContext _globalContext;
    private PythonModule _module;
    private ExtensionMethodSet _extensionMethods;
    private ModuleOptions _features;
    public PythonDictionary Globals { get; }
    public PythonContext Context { get; }
    public Scope GlobalScope { get; }
    public CodeContext GlobalContext { get; }
    public PythonModule Module { get; }
    public ModuleOptions Features { get; public set; }
    public bool ShowCls { get; public set; }
    internal ExtensionMethodSet ExtensionMethods { get; internal set; }
    public ModuleContext(PythonDictionary globals, PythonContext creatingContext);
    public ModuleContext(PythonModule module, PythonContext creatingContext);
    public PythonDictionary get_Globals();
    public PythonContext get_Context();
    public Scope get_GlobalScope();
    public CodeContext get_GlobalContext();
    public PythonModule get_Module();
    public ModuleOptions get_Features();
    public void set_Features(ModuleOptions value);
    public bool get_ShowCls();
    public void set_ShowCls(bool value);
    internal ExtensionMethodSet get_ExtensionMethods();
    internal void set_ExtensionMethods(ExtensionMethodSet value);
    internal void InitializeBuiltins(bool moduleBuiltins);
}
internal class IronPython.Runtime.ModuleDictionaryStorage : GlobalDictionaryStorage {
    private Type _type;
    private bool _cleared;
    private static Dictionary`2<string, PythonGlobal> _emptyGlobalDict;
    private static PythonGlobal[] _emptyGlobals;
    public BuiltinPythonModule Instance { get; }
    public int Count { get; }
    public ModuleDictionaryStorage(Type moduleType);
    public ModuleDictionaryStorage(Type moduleType, Dictionary`2<string, PythonGlobal> globals);
    private static ModuleDictionaryStorage();
    public virtual BuiltinPythonModule get_Instance();
    public virtual bool Remove(DictionaryStorage& storage, object key);
    protected virtual void LazyAdd(object name, object value);
    public virtual bool Contains(object key);
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    public virtual int get_Count();
    private bool TryGetLazyValue(string name, Object& value);
    private bool TryGetLazyValue(string name, bool publish, Object& value);
    private static MemberInfo[] NonHiddenMembers(MemberInfo[] members);
    private MemberInfo[] GetMember(string name);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual void Reload();
}
public class IronPython.Runtime.ModuleGlobalCache : object {
    private object _value;
    internal static object NotCaching;
    internal static ModuleGlobalCache NoCache;
    public bool IsCaching { get; }
    public bool HasValue { get; }
    public object Value { get; public set; }
    public ModuleGlobalCache(object value);
    private static ModuleGlobalCache();
    public bool get_IsCaching();
    public bool get_HasValue();
    public object get_Value();
    public void set_Value(object value);
    public void Changed(object sender, ModuleChangeEventArgs e);
}
public class IronPython.Runtime.ModuleLoader : object {
    private OnDiskScriptCode _sc;
    private string _parentName;
    private string _name;
    internal ModuleLoader(OnDiskScriptCode sc, string parentName, string name);
    public PythonModule load_module(CodeContext context, string fullName);
}
[FlagsAttribute]
public enum IronPython.Runtime.ModuleOptions : Enum {
    public int value__;
    public static ModuleOptions None;
    public static ModuleOptions ShowClsMethods;
    public static ModuleOptions Optimized;
    public static ModuleOptions Initialize;
    public static ModuleOptions NoBuiltins;
    public static ModuleOptions ModuleBuiltins;
    public static ModuleOptions ExecOrEvalCode;
    public static ModuleOptions SkipFirstLine;
    public static ModuleOptions Interpret;
    public static ModuleOptions Verbatim;
    public static ModuleOptions LightThrow;
    public static ModuleOptions GeneratorStop;
}
[FlagsAttribute]
public enum IronPython.Runtime.NameType : Enum {
    public int value__;
    public static NameType None;
    public static NameType Python;
    public static NameType Method;
    public static NameType Field;
    public static NameType Property;
    public static NameType Event;
    public static NameType Type;
    public static NameType BaseTypeMask;
    public static NameType PythonMethod;
    public static NameType PythonField;
    public static NameType PythonProperty;
    public static NameType PythonEvent;
    public static NameType PythonType;
    public static NameType ClassMember;
    public static NameType ClassMethod;
}
internal class IronPython.Runtime.NewStringFormatter : object {
    private static Char[] _brackets;
    private static Char[] _fieldNameEnd;
    private static NewStringFormatter();
    public static string FormatString(PythonContext context, string format, PythonTuple args, IDictionary`2<object, object> kwArgs);
    public static IEnumerable`1<PythonTuple> GetFormatInfo(string format);
    public static PythonTuple GetFieldNameInfo(string name);
    private static FieldName ParseFieldName(string str, bool reportErrors);
    [IteratorStateMachineAttribute("IronPython.Runtime.NewStringFormatter/<ParseFieldAccessors>d__8")]
private static IEnumerable`1<FieldAccessor> ParseFieldAccessors(string str, int index, bool reportErrors);
    [IteratorStateMachineAttribute("IronPython.Runtime.NewStringFormatter/<AccessorsToPython>d__9")]
private static IEnumerable`1<PythonTuple> AccessorsToPython(IEnumerable`1<FieldAccessor> accessors);
    private static string ParseIdentifier(string str, bool isIndex, Int32& index);
}
internal class IronPython.Runtime.NoLineFeedSourceContentProvider : TextContentProvider {
    private string _code;
    public NoLineFeedSourceContentProvider(string code);
    public virtual SourceCodeReader GetReader();
}
internal class IronPython.Runtime.ObjectAttributesAdapter : DictionaryStorage {
    private object _backing;
    private CodeContext _context;
    internal object Backing { get; }
    public int Count { get; }
    private ICollection`1<object> Keys { get; }
    public ObjectAttributesAdapter(CodeContext context, object backing);
    internal object get_Backing();
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual bool Contains(object key);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    private ICollection`1<object> get_Keys();
}
internal class IronPython.Runtime.ObjectCollectionDebugProxy : object {
    private ICollection`1<object> _collection;
    [DebuggerBrowsableAttribute("3")]
internal IList`1<object> Members { get; }
    public ObjectCollectionDebugProxy(ICollection`1<object> collection);
    internal IList`1<object> get_Members();
}
[DebuggerDisplayAttribute("{Value}")]
internal class IronPython.Runtime.ObjectDebugView : object {
    [DebuggerBrowsableAttribute("0")]
private string _name;
    [DebuggerBrowsableAttribute("0")]
private object _value;
    [DebuggerBrowsableAttribute("3")]
public object Value { get; }
    public ObjectDebugView(object name, object value);
    public object get_Value();
    public string GetClassName();
    public string GetName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.ArrayOps : object {
    public static Array Add(Array data1, Array data2);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType pythonType, int length);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType pythonType, Int32[] lengths);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType pythonType, ICollection items);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType pythonType, object items);
    public static Array Multiply(Array data, int count);
    public static object GetItem(Array data, int index);
    public static object GetItem(Array data, Slice slice);
    public static object GetItem(Array data, PythonTuple tuple);
    public static object GetItem(Array data, Object[] indices);
    public static void SetItem(Array data, int index, object value);
    public static void SetItem(Array a, Object[] indexAndValue);
    public static void SetItem(Array a, Slice index, object value);
    public static string __repr__(CodeContext context, Array self);
    internal static Object[] Multiply(Object[] data, int size, int count);
    internal static Object[] Add(Object[] data1, int size1, Object[] data2, int size2);
    internal static Object[] GetSlice(Object[] data, int start, int stop);
    internal static Object[] GetSlice(Object[] data, int start, int stop, int step);
    internal static Object[] GetSlice(Object[] data, Slice slice);
    internal static Array GetSlice(Array data, int size, Slice slice);
    internal static Object[] CopyArray(Object[] data, int newSize);
    private static Int32[] TupleToIndices(Array a, IList`1<object> tuple);
}
public static class IronPython.Runtime.Operations.BigIntegerOps : object {
    private static bool hasShiftBug;
    private static BigIntegerOps();
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, string s, int radix);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, IList`1<byte> s, int base);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, object x);
    private static object ReturnObject(CodeContext context, PythonType cls, object value);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    public static object Power(BigInteger x, object y, object z);
    public static object Power(BigInteger x, int y, object z);
    public static object Power(BigInteger x, BigInteger y, object z);
    public static object Power(BigInteger x, int y, BigInteger z);
    public static object Power(BigInteger x, BigInteger y, BigInteger z);
    public static object Power(BigInteger x, int y);
    public static object Power(BigInteger x, long y);
    public static object Power(BigInteger x, BigInteger y);
    private static BigInteger DivMod(BigInteger x, BigInteger y, BigInteger& r);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Add(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Subtract(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Multiply(BigInteger x, BigInteger y);
    public static BigInteger FloorDivide(BigInteger x, BigInteger y);
    public static double TrueDivide(BigInteger x, BigInteger y);
    public static BigInteger op_Division(BigInteger x, BigInteger y);
    public static BigInteger op_Modulus(BigInteger x, BigInteger y);
    public static BigInteger op_LeftShift(BigInteger x, int y);
    public static BigInteger op_RightShift(BigInteger x, int y);
    public static BigInteger op_LeftShift(BigInteger x, BigInteger y);
    public static BigInteger op_RightShift(BigInteger x, BigInteger y);
    public static PythonTuple DivMod(BigInteger x, BigInteger y);
    public static object __abs__(BigInteger x);
    public static bool __bool__(BigInteger x);
    public static object Negate(BigInteger x);
    public static object __pos__(BigInteger x);
    public static object __int__(BigInteger x);
    public static object __float__(BigInteger self);
    public static object __getnewargs__(CodeContext context, BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger OnesComplement(BigInteger x);
    internal static BigInteger FloorDivideImpl(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger BitwiseAnd(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger BitwiseOr(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger ExclusiveOr(BigInteger x, BigInteger y);
    [PropertyMethodAttribute]
public static BigInteger Getreal(BigInteger self);
    [PropertyMethodAttribute]
public static BigInteger Getimag(BigInteger self);
    public static BigInteger conjugate(BigInteger self);
    [PropertyMethodAttribute]
public static BigInteger Getnumerator(BigInteger self);
    [PropertyMethodAttribute]
public static BigInteger Getdenominator(BigInteger self);
    public static int bit_length(BigInteger self);
    public static BigInteger __trunc__(BigInteger self);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(BigInteger self);
    [ExplicitConversionMethodAttribute]
public static int ConvertToInt32(BigInteger self);
    [ExplicitConversionMethodAttribute]
public static Complex ConvertToComplex(BigInteger self);
    [ImplicitConversionMethodAttribute]
public static BigInteger ConvertToBigInteger(bool self);
    public static bool LessThan(BigInteger x, BigInteger y);
    public static bool LessThanOrEqual(BigInteger x, BigInteger y);
    public static bool GreaterThan(BigInteger x, BigInteger y);
    public static bool GreaterThanOrEqual(BigInteger x, BigInteger y);
    public static bool Equals(BigInteger x, BigInteger y);
    public static bool NotEquals(BigInteger x, BigInteger y);
    public static bool LessThan(BigInteger x, int y);
    public static bool LessThanOrEqual(BigInteger x, int y);
    public static bool GreaterThan(BigInteger x, int y);
    public static bool GreaterThanOrEqual(BigInteger x, int y);
    public static bool Equals(BigInteger x, int y);
    public static bool NotEquals(BigInteger x, int y);
    public static bool LessThan(BigInteger x, UInt32 y);
    public static bool LessThanOrEqual(BigInteger x, UInt32 y);
    public static bool GreaterThan(BigInteger x, UInt32 y);
    public static bool GreaterThanOrEqual(BigInteger x, UInt32 y);
    public static bool Equals(BigInteger x, UInt32 y);
    public static bool NotEquals(BigInteger x, UInt32 y);
    public static BigInteger __long__(BigInteger self);
    public static BigInteger __index__(BigInteger self);
    public static int __hash__(BigInteger self);
    public static string __repr__(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static float ToFloat(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Xor(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Mod(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger LeftShift(BigInteger x, int y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger RightShift(BigInteger x, int y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger LeftShift(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger RightShift(BigInteger x, BigInteger y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool AsDecimal(BigInteger self, Decimal& res);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool AsInt32(BigInteger self, Int32& res);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool AsInt64(BigInteger self, Int64& res);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool AsUInt32(BigInteger self, UInt32& res);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool AsUInt64(BigInteger self, UInt64& res);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static int ToInt32(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static long ToInt64(BigInteger self);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static UInt32 ToUInt32(BigInteger self);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ulong ToUInt64(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool ToBoolean(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static byte ToByte(BigInteger self, IFormatProvider provider);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static sbyte ToSByte(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static char ToChar(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static decimal ToDecimal(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static double ToDouble(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static float ToSingle(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static short ToInt16(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static int ToInt32(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static long ToInt64(BigInteger self, IFormatProvider provider);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ushort ToUInt16(BigInteger self, IFormatProvider provider);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static UInt32 ToUInt32(BigInteger self, IFormatProvider provider);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ulong ToUInt64(BigInteger self, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static object ToType(BigInteger self, Type conversionType, IFormatProvider provider);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static TypeCode GetTypeCode(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Square(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool IsNegative(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool IsPositive(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static int GetBitCount(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static int GetByteCount(BigInteger self);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Create(Byte[] v);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Create(int v);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Create(long v);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Create(UInt32 v);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Create(ulong v);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Create(decimal v);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BigInteger Create(double v);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static UInt32[] GetWords(BigInteger self);
    [CLSCompliantAttribute("False")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static UInt32 GetWord(BigInteger self, int index);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static int GetWordCount(BigInteger self);
    public static string __format__(CodeContext context, BigInteger self, string formatSpec);
    public static Bytes to_bytes(BigInteger value, int length, string byteorder, bool signed);
    public static BigInteger __round__(BigInteger number);
    public static BigInteger __round__(BigInteger self, BigInteger ndigits);
    public static BigInteger __round__(BigInteger self, object ndigits);
    internal static string AbsToHex(BigInteger val, bool lowercase);
    private static string ToOctal(BigInteger val, bool lowercase);
    internal static string ToBinary(BigInteger val);
    private static string ToBinary(BigInteger val, bool includeType, bool lowercase);
    private static string ToDigits(BigInteger val, int radix, bool lower);
}
public static class IronPython.Runtime.Operations.BoolOps : object {
    [StaticExtensionMethodAttribute]
public static object __new__(object cls);
    [StaticExtensionMethodAttribute]
public static bool __new__(object cls, object o);
    public static bool BitwiseAnd(bool x, bool y);
    public static bool BitwiseOr(bool x, bool y);
    public static bool ExclusiveOr(bool x, bool y);
    public static int BitwiseAnd(int x, bool y);
    public static int BitwiseAnd(bool x, int y);
    public static int BitwiseOr(int x, bool y);
    public static int BitwiseOr(bool x, int y);
    public static int ExclusiveOr(int x, bool y);
    public static int ExclusiveOr(bool x, int y);
    public static string __repr__(bool self);
    public static string __format__(CodeContext context, bool self, string formatSpec);
    public static bool Equals(bool x, bool y);
    public static bool NotEquals(bool x, bool y);
    public static bool Equals(bool x, int y);
    public static bool NotEquals(bool x, int y);
    public static bool Equals(int x, bool y);
    public static bool NotEquals(int x, bool y);
    [ImplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(bool x);
    [ImplicitConversionMethodAttribute]
public static byte ConvertToByte(bool x);
    [ImplicitConversionMethodAttribute]
public static short ConvertToInt16(bool x);
    [ImplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(bool x);
    public static int __int__(bool x);
    [ImplicitConversionMethodAttribute]
public static int ConvertToInt32(bool x);
    [ImplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(bool x);
    [ImplicitConversionMethodAttribute]
public static long ConvertToInt64(bool x);
    [ImplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(bool x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(bool x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(bool x);
    [ImplicitConversionMethodAttribute]
public static Complex ConvertToComplex(bool x);
    [ImplicitConversionMethodAttribute]
public static decimal ConvertToDecimal(bool x);
}
[ExtensionAttribute]
public static class IronPython.Runtime.Operations.ByteOps : object {
    [ExtensionAttribute]
internal static byte ToByteChecked(int item);
    [ExtensionAttribute]
internal static byte ToByteChecked(BigInteger item);
    [ExtensionAttribute]
internal static byte ToByteChecked(double item);
    [ExtensionAttribute]
internal static bool IsSign(byte ch);
    [ExtensionAttribute]
internal static byte ToUpper(byte p);
    [ExtensionAttribute]
internal static byte ToLower(byte p);
    [ExtensionAttribute]
internal static bool IsLower(byte p);
    [ExtensionAttribute]
internal static bool IsUpper(byte p);
    [ExtensionAttribute]
internal static bool IsDigit(byte b);
    [ExtensionAttribute]
internal static bool IsLetter(byte b);
    [ExtensionAttribute]
internal static bool IsWhiteSpace(byte b);
    [NullableContextAttribute("1")]
internal static void AppendJoin(object value, int index, List`1<byte> byteList);
    [NullableContextAttribute("1")]
internal static IList`1<byte> CoerceBytes(object obj);
    [NullableContextAttribute("2")]
internal static IList`1<byte> GetBytes(object value, bool useHint, CodeContext context);
    [NullableContextAttribute("2")]
internal static byte GetByte(object o);
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls, object value);
    public static byte Plus(byte x);
    public static object Negate(byte x);
    public static byte Abs(byte x);
    public static object OnesComplement(byte x);
    public static bool __bool__(byte x);
    public static string __repr__(byte x);
    public static byte __trunc__(byte x);
    public static int __hash__(byte x);
    public static int __index__(byte x);
    public static object Add(byte x, byte y);
    public static object Add(byte x, sbyte y);
    public static object Add(sbyte x, byte y);
    public static object Subtract(byte x, byte y);
    public static object Subtract(byte x, sbyte y);
    public static object Subtract(sbyte x, byte y);
    public static object Multiply(byte x, byte y);
    public static object Multiply(byte x, sbyte y);
    public static object Multiply(sbyte x, byte y);
    public static double TrueDivide(byte x, byte y);
    public static double TrueDivide(byte x, sbyte y);
    public static double TrueDivide(sbyte x, byte y);
    public static byte FloorDivide(byte x, byte y);
    public static object FloorDivide(byte x, sbyte y);
    public static object FloorDivide(sbyte x, byte y);
    public static byte Mod(byte x, byte y);
    public static short Mod(byte x, sbyte y);
    public static short Mod(sbyte x, byte y);
    public static object Power(byte x, byte y);
    public static object Power(byte x, sbyte y);
    public static object Power(sbyte x, byte y);
    public static object LeftShift(byte x, BigInteger y);
    public static byte RightShift(byte x, BigInteger y);
    public static object LeftShift(byte x, int y);
    public static byte RightShift(byte x, int y);
    public static byte BitwiseAnd(byte x, byte y);
    public static short BitwiseAnd(byte x, sbyte y);
    public static short BitwiseAnd(sbyte x, byte y);
    public static byte BitwiseOr(byte x, byte y);
    public static short BitwiseOr(byte x, sbyte y);
    public static short BitwiseOr(sbyte x, byte y);
    public static byte ExclusiveOr(byte x, byte y);
    public static short ExclusiveOr(byte x, sbyte y);
    public static short ExclusiveOr(sbyte x, byte y);
    public static bool LessThan(byte x, byte y);
    public static bool LessThan(byte x, sbyte y);
    public static bool LessThanOrEqual(byte x, byte y);
    public static bool LessThanOrEqual(byte x, sbyte y);
    public static bool GreaterThan(byte x, byte y);
    public static bool GreaterThan(byte x, sbyte y);
    public static bool GreaterThanOrEqual(byte x, byte y);
    public static bool GreaterThanOrEqual(byte x, sbyte y);
    public static bool Equals(byte x, byte y);
    public static bool Equals(byte x, sbyte y);
    public static bool NotEquals(byte x, byte y);
    public static bool NotEquals(byte x, sbyte y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(byte x);
    [ImplicitConversionMethodAttribute]
public static short ConvertToInt16(byte x);
    [ImplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(byte x);
    [ImplicitConversionMethodAttribute]
public static int ConvertToInt32(byte x);
    [ImplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(byte x);
    [ImplicitConversionMethodAttribute]
public static long ConvertToInt64(byte x);
    [ImplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(byte x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(byte x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(byte x);
    [PropertyMethodAttribute]
public static byte Getreal(byte x);
    [PropertyMethodAttribute]
public static byte Getimag(byte x);
    public static byte conjugate(byte x);
    [PropertyMethodAttribute]
public static byte Getnumerator(byte x);
    [PropertyMethodAttribute]
public static byte Getdenominator(byte x);
    public static int bit_length(byte value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.CharOps : object {
    public static string __repr__(char self);
    public static int __hash__(char self);
    public static int __index__(char self);
    public static bool LessThan(char x, char y);
    public static bool LessThanOrEqual(char x, char y);
    public static bool GreaterThan(char x, char y);
    public static bool GreaterThanOrEqual(char x, char y);
    public static bool Equals(char x, char y);
    public static bool NotEquals(char x, char y);
    public static bool LessThan(char x, string y);
    public static bool LessThanOrEqual(char x, string y);
    public static bool GreaterThan(char x, string y);
    public static bool GreaterThanOrEqual(char x, string y);
    public static bool Equals(char x, string y);
    public static bool NotEquals(char x, string y);
    public static bool __contains__(char self, char other);
    [NullableContextAttribute("2")]
public static bool __contains__(char self, string other);
    [ImplicitConversionMethodAttribute]
public static string ConvertToString(char self);
    [ExplicitConversionMethodAttribute]
public static char ConvertToChar(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.ComOps : object {
    public static string __str__(object self);
    public static string __repr__(object self);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.ComplexOps : object {
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, object real, object imag);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, double real);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, double real, double imag);
    [PropertyMethodAttribute]
public static double Getreal(Complex self);
    [PropertyMethodAttribute]
public static double Getimag(Complex self);
    public static Complex Add(Complex x, Complex y);
    public static Complex Subtract(Complex x, Complex y);
    public static Complex Multiply(Complex x, Complex y);
    public static Complex TrueDivide(Complex x, Complex y);
    public static Complex op_Power(Complex x, Complex y);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Complex Power(Complex x, Complex y);
    public static Complex FloorDivide(CodeContext context, Complex x, Complex y);
    public static Complex Mod(CodeContext context, Complex x, Complex y);
    public static PythonTuple DivMod(CodeContext context, Complex x, Complex y);
    public static int __hash__(Complex x);
    public static bool __bool__(Complex x);
    public static Complex conjugate(Complex x);
    public static object __getnewargs__(CodeContext context, Complex self);
    public static object __pos__(Complex x);
    public static string __str__(CodeContext context, Complex x);
    public static string __repr__(CodeContext context, Complex x);
    public static string __format__(CodeContext context, Complex self, string formatSpec);
    public static double __float__(Complex self);
    public static int __int__(Complex self);
    public static BigInteger __long__(Complex self);
    private static string FormatComplexValue(CodeContext context, double x);
    public static double Abs(Complex x);
    public static bool LessThan(Complex x, Complex y);
    public static bool LessThanOrEqual(Complex x, Complex y);
    public static bool GreaterThan(Complex x, Complex y);
    public static bool GreaterThanOrEqual(Complex x, Complex y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.CustomTypeDescHelpers : object {
    public static AttributeCollection GetAttributes(object self);
    public static string GetClassName(object self);
    public static string GetComponentName(object self);
    public static TypeConverter GetConverter(object self);
    public static EventDescriptor GetDefaultEvent(object self);
    public static PropertyDescriptor GetDefaultProperty(object self);
    public static object GetEditor(object self, Type editorBaseType);
    public static EventDescriptorCollection GetEvents(object self, Attribute[] attributes);
    public static EventDescriptorCollection GetEvents(object self);
    public static PropertyDescriptorCollection GetProperties(object self);
    public static PropertyDescriptorCollection GetProperties(object self, Attribute[] attributes);
    private static PropertyDescriptor[] GetPropertiesImpl(object self, Attribute[] attributes);
    private static bool ShouldIncludeInstanceMember(string memberName, Attribute[] attributes);
    private static bool ShouldIncludeProperty(PythonTypeSlot attrSlot, Attribute[] attributes);
    public static object GetPropertyOwner(object self, PropertyDescriptor pd);
}
public static class IronPython.Runtime.Operations.DBNullOps : object {
    [NullableContextAttribute("1")]
public static bool __bool__(DBNull value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.DecimalOps : object {
    public static bool __bool__(decimal x);
    public static string __repr__(decimal x);
    public static bool LessThan(decimal x, decimal y);
    public static bool LessThanOrEqual(decimal x, decimal y);
    public static bool GreaterThan(decimal x, decimal y);
    public static bool GreaterThanOrEqual(decimal x, decimal y);
    public static bool Equals(decimal x, decimal y);
    public static bool NotEquals(decimal x, decimal y);
    public static bool LessThan(decimal x, BigInteger y);
    public static bool LessThanOrEqual(decimal x, BigInteger y);
    public static bool GreaterThan(decimal x, BigInteger y);
    public static bool GreaterThanOrEqual(decimal x, BigInteger y);
    public static bool Equals(decimal x, BigInteger y);
    public static bool NotEquals(decimal x, BigInteger y);
    private static int Compare(decimal x, BigInteger y);
    public static int __hash__(decimal x);
    public static string __format__(CodeContext context, decimal self, string formatSpec);
    private static string DecimalToFormatString(CodeContext context, decimal self, StringFormatSpec spec);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.DelegateOps : object {
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType type, object function);
    public static Delegate InPlaceAdd(Delegate self, Delegate other);
    public static Delegate InPlaceSubtract(Delegate self, Delegate other);
    public static object Call(CodeContext context, Delegate delegate, Object[] args);
    public static object Call(CodeContext context, Delegate delegate, IDictionary`2<object, object> dict, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.DictionaryOfTOps`2 : object {
    public static string __repr__(CodeContext context, Dictionary`2<K, V> self);
}
public static class IronPython.Runtime.Operations.DoubleOps : object {
    private static Regex _fromHexRegex;
    private static Char[] _whitespace;
    internal static double PositiveZero;
    internal static double NegativeZero;
    private static DoubleOps();
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    internal static object NewFloat(CodeContext context, PythonType type, object x);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, object x);
    public static PythonTuple as_integer_ratio(double self);
    [ClassMethodAttribute]
[StaticExtensionMethodAttribute]
public static object fromhex(CodeContext context, PythonType cls, string self);
    private static Nullable`1<double> TryParseSpecialFloat(string self);
    private static Exception HexStringOverflow();
    private static Exception InvalidHexString();
    public static string hex(double self);
    public static bool is_integer(double self);
    public static object DivMod(double x, double y);
    public static double Mod(double x, double y);
    public static object Power(double x, double y);
    public static object __int__(double d);
    public static object __getnewargs__(CodeContext context, double self);
    public static string __str__(CodeContext context, double x);
    public static string __str__(double x, IFormatProvider provider);
    public static string __str__(double x, string format);
    public static string __str__(double x, string format, IFormatProvider provider);
    public static int __hash__(double d);
    public static bool LessThan(double x, double y);
    public static bool LessThanOrEqual(double x, double y);
    public static bool GreaterThan(double x, double y);
    public static bool GreaterThanOrEqual(double x, double y);
    public static bool Equals(double x, double y);
    public static bool NotEquals(double x, double y);
    public static bool LessThan(double x, BigInteger y);
    public static bool LessThanOrEqual(double x, BigInteger y);
    public static bool GreaterThan(double x, BigInteger y);
    public static bool GreaterThanOrEqual(double x, BigInteger y);
    public static bool Equals(double x, BigInteger y);
    public static bool NotEquals(double x, BigInteger y);
    internal static bool IsPositiveZero(double value);
    internal static bool IsNegativeZero(double value);
    internal static int Sign(double value);
    internal static double CopySign(double value, double sign);
    private static int Compare(double x, BigInteger y);
    private static int Compare(BigInteger x, double y);
    public static bool LessThan(double x, decimal y);
    public static bool LessThanOrEqual(double x, decimal y);
    public static bool GreaterThan(double x, decimal y);
    public static bool GreaterThanOrEqual(double x, decimal y);
    public static bool Equals(double x, decimal y);
    public static bool NotEquals(double x, decimal y);
    private static int Compare(double x, decimal y);
    public static bool LessThan(double x, int y);
    public static bool LessThanOrEqual(double x, int y);
    public static bool GreaterThan(double x, int y);
    public static bool GreaterThanOrEqual(double x, int y);
    public static bool Equals(double x, int y);
    public static bool NotEquals(double x, int y);
    internal static string Repr(CodeContext context, double self, bool trailingZeroAfterWholeFloat);
    public static string __repr__(CodeContext context, double self);
    public static BigInteger __long__(double self);
    public static double __float__(double self);
    public static string __getformat__(CodeContext context, string typestr);
    public static string __format__(CodeContext context, double self, string formatSpec);
    private static string DoubleToFormatString(CodeContext context, double self, StringFormatSpec spec);
    private static bool IncludeExponent(double self);
    private static string DefaultFloatFormat();
    public static void __setformat__(CodeContext context, string typestr, string fmt);
    public static object __round__(double self);
    public static double __round__(double self, int ndigits);
    public static double __round__(double self, BigInteger ndigits);
    public static double __round__(double self, object ndigits);
    public static double Plus(double x);
    public static double Negate(double x);
    public static double Abs(double x);
    public static bool __bool__(double x);
    public static object __trunc__(double x);
    public static double Add(double x, double y);
    public static double Subtract(double x, double y);
    public static double Multiply(double x, double y);
    public static double TrueDivide(double x, double y);
    public static double FloorDivide(double x, double y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(double x);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(double x);
    [ExplicitConversionMethodAttribute]
public static short ConvertToInt16(double x);
    [ExplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(double x);
    [ExplicitConversionMethodAttribute]
public static int ConvertToInt32(double x);
    [ExplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(double x);
    [ExplicitConversionMethodAttribute]
public static long ConvertToInt64(double x);
    [ExplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(double x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(double x);
    [PropertyMethodAttribute]
public static double Getreal(double x);
    [PropertyMethodAttribute]
public static double Getimag(double x);
    public static double conjugate(double x);
    [CompilerGeneratedAttribute]
internal static bool <NewFloat>g__TryInvokeFloat|2_0(CodeContext context, object o, Object& result);
    [CompilerGeneratedAttribute]
internal static void <NewFloat>g__Warn|2_1(CodeContext context, object result);
    [CompilerGeneratedAttribute]
internal static void <__hash__>g__DecomposeDouble|21_0(Double& x, Int32& Sign, Int32& Exponent, Int64& Mantissa);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.EnumOps : object {
    public static object BitwiseOr(object self, object other);
    public static object BitwiseAnd(object self, object other);
    public static object ExclusiveOr(object self, object other);
    public static object OnesComplement(object self);
    public static bool __bool__(object self);
    public static string __repr__(object self);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class IronPython.Runtime.Operations.ExceptionState : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionState <PrevException>k__BackingField;
    public Exception Exception { get; public set; }
    public ExceptionState PrevException { get; public set; }
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public ExceptionState get_PrevException();
    [CompilerGeneratedAttribute]
public void set_PrevException(ExceptionState value);
}
public class IronPython.Runtime.Operations.ExtensibleComplex : Extensible`1<Complex> {
    public ExtensibleComplex(double real);
    public ExtensibleComplex(double real, double imag);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultMemberAttribute("Item")]
public class IronPython.Runtime.Operations.ExtensibleString : Extensible`1<string> {
    public object Item { get; }
    public object Item { get; }
    public ExtensibleString(string self);
    public virtual string ToString();
    public virtual string __repr__(CodeContext context);
    public object __eq__(object other);
    public object __ne__(object other);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    [NullableContextAttribute("2")]
private bool EqualsWorker(object other);
    private bool EqualsWorker(string other, IEqualityComparer comparer);
    public virtual object get_Item(int index);
    public object get_Item(Slice slice);
    public virtual int __len__();
    [NullableContextAttribute("2")]
public virtual bool __contains__(object value);
}
internal enum IronPython.Runtime.Operations.FloatFormat : Enum {
    public int value__;
    public static FloatFormat None;
    public static FloatFormat Unknown;
    public static FloatFormat IEEE_LittleEndian;
    public static FloatFormat IEEE_BigEndian;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("Code = {Code.co_name}, Line = {Frame.f_lineno}")]
public class IronPython.Runtime.Operations.FunctionStack : ValueType {
    public CodeContext Context;
    public FunctionCode Code;
    [NullableAttribute("2")]
public TraceBackFrame Frame;
    internal FunctionStack(CodeContext context, FunctionCode code);
    internal FunctionStack(CodeContext context, FunctionCode code, TraceBackFrame frame);
    internal FunctionStack(TraceBackFrame frame);
}
[NullableContextAttribute("1")]
internal interface IronPython.Runtime.Operations.IDelegateConvertible {
    public abstract virtual Delegate ConvertToDelegate(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class IronPython.Runtime.Operations.IListOfByteOps : object {
    [ExtensionAttribute]
internal static int Compare(IList`1<byte> self, IList`1<byte> other);
    [ExtensionAttribute]
internal static bool EndsWith(IList`1<byte> self, IList`1<byte> suffix);
    [ExtensionAttribute]
internal static bool EndsWith(IList`1<byte> self, IList`1<byte> suffix, int start, int end);
    [ExtensionAttribute]
internal static bool EndsWith(IList`1<byte> bytes, PythonTuple suffix);
    [ExtensionAttribute]
internal static bool EndsWith(IList`1<byte> bytes, PythonTuple suffix, int start, int end);
    [ExtensionAttribute]
internal static int IndexOfAny(IList`1<byte> str, IList`1<byte> separators, int i);
    [ExtensionAttribute]
internal static int IndexOf(IList`1<byte> bytes, IList`1<byte> sub, int start);
    [ExtensionAttribute]
internal static int IndexOf(IList`1<byte> self, IList`1<byte> sub, int start, int count);
    [ExtensionAttribute]
internal static bool IsTitle(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static bool IsUpper(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static List`1<byte> Title(IList`1<byte> self);
    [ExtensionAttribute]
internal static int LastIndexOf(IList`1<byte> self, IList`1<byte> sub, int start, int count);
    [ExtensionAttribute]
internal static List`1[] Split(IList`1<byte> str, IList`1<byte> separator, int maxComponents, StringSplitOptions options);
    [ExtensionAttribute]
internal static List`1[] SplitOnWhiteSpace(IList`1<byte> str, int maxComponents);
    [ExtensionAttribute]
internal static bool StartsWith(IList`1<byte> self, IList`1<byte> prefix);
    [ExtensionAttribute]
internal static bool StartsWith(IList`1<byte> self, IList`1<byte> prefix, int start, int end);
    [ExtensionAttribute]
internal static List`1<byte> Replace(IList`1<byte> bytes, IList`1<byte> old, IList`1<byte> new, Int32& count);
    [ExtensionAttribute]
private static List`1<byte> ReplaceEmpty(IList`1<byte> self, IList`1<byte> new, Int32& count);
    [ExtensionAttribute]
internal static int ReverseFind(IList`1<byte> bytes, IList`1<byte> sub, int start, int end);
    [ExtensionAttribute]
internal static PythonList RightSplit(IList`1<byte> bytes, IList`1<byte> sep, int maxsplit, Func`2<IList`1<byte>, IList`1<byte>> ctor);
    [ExtensionAttribute]
internal static int IndexOfWhiteSpace(IList`1<byte> str, int start);
    [ExtensionAttribute]
internal static Byte[] ReverseBytes(IList`1<byte> s);
    [ExtensionAttribute]
internal static List`1<byte> Substring(IList`1<byte> bytes, int start);
    [ExtensionAttribute]
internal static List`1<byte> Substring(IList`1<byte> bytes, int start, int len);
    [ExtensionAttribute]
internal static List`1<byte> Multiply(IList`1<byte> self, int count);
    [ExtensionAttribute]
internal static List`1<byte> Capitalize(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static List`1<byte> TryCenter(IList`1<byte> bytes, int width, int fillchar);
    [ExtensionAttribute]
internal static int CountOf(IList`1<byte> bytes, IList`1<byte> ssub, int start, int end);
    [ExtensionAttribute]
internal static List`1<byte> ExpandTabs(IList`1<byte> bytes, int tabsize);
    [ExtensionAttribute]
internal static int IndexOfByte(IList`1<byte> bytes, byte item, int start, int stop);
    [ExtensionAttribute]
internal static string BytesRepr(IReadOnlyList`1<byte> bytes);
    [ExtensionAttribute]
internal static List`1<byte> ZeroFill(IList`1<byte> bytes, int width, int spaces);
    [ExtensionAttribute]
internal static List`1<byte> ToLower(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static List`1<byte> ToUpper(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static List`1<byte> Translate(IList`1<byte> bytes, IList`1<byte> table, IList`1<byte> deletechars);
    [ExtensionAttribute]
internal static List`1<byte> Translate(IList`1<byte> bytes, IList`1<byte> table, IList`1<byte> deletechars, Boolean& changed);
    [ExtensionAttribute]
internal static List`1<byte> RightStrip(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static List`1<byte> RightStrip(IList`1<byte> bytes, IList`1<byte> chars);
    [ExtensionAttribute]
internal static PythonList SplitLines(IList`1<byte> bytes, bool keepends, Func`2<List`1<byte>, IList`1<byte>> ctor);
    [ExtensionAttribute]
internal static List`1<byte> LeftStrip(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static List`1<byte> LeftStrip(IList`1<byte> bytes, IList`1<byte> chars);
    [ExtensionAttribute]
internal static PythonList Split(IList`1<byte> bytes, IList`1<byte> sep, int maxsplit, Func`2<List`1<byte>, IList`1<byte>> ctor);
    [NullableContextAttribute("2")]
private static StringSplitOptions GetStringSplitOptions(IList`1<byte> seps);
    [ExtensionAttribute]
internal static PythonList SplitInternal(IList`1<byte> bytes, IList`1<byte> separator, int maxsplit, Func`2<List`1<byte>, IList`1<byte>> ctor);
    [ExtensionAttribute]
internal static List`1<byte> Strip(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static List`1<byte> Strip(IList`1<byte> bytes, IList`1<byte> chars);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static List`1<byte> Slice(IList`1<byte> bytes, Slice slice);
    [ExtensionAttribute]
internal static List`1<byte> SwapCase(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static bool StartsWith(IList`1<byte> bytes, PythonTuple prefix);
    [ExtensionAttribute]
internal static bool StartsWith(IList`1<byte> bytes, PythonTuple prefix, int start, int end);
    [ExtensionAttribute]
internal static bool IsWhiteSpace(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static bool IsLower(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static bool IsDigit(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static bool IsLetter(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static bool IsAlphaNumeric(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static int Find(IList`1<byte> bytes, IList`1<byte> sub, int start, int end);
    [ExtensionAttribute]
internal static byte ToByte(string self, string name, int pos);
    [ExtensionAttribute]
internal static byte ToByte(IList`1<byte> self, string name, int pos);
    internal static List`1<byte> FromHex(string string);
    internal static IEnumerable BytesEnumerable(IList`1<byte> bytes);
    internal static IEnumerator`1<int> BytesEnumerator(IList`1<byte> bytes);
    [CompilerGeneratedAttribute]
internal static PythonList <SplitInternal>g__SplitEmptyString|43_0(bool separators, Func`2<List`1<byte>, object> ctor);
}
public static class IronPython.Runtime.Operations.InstanceOps : object {
    private static BuiltinFunction _New;
    internal static BuiltinFunction NewCls;
    internal static BuiltinFunction OverloadedNew;
    internal static BuiltinFunction NonDefaultNewInst;
    internal static BuiltinMethodDescriptor _Init;
    internal static string ObjectNewNoParameters;
    internal static BuiltinMethodDescriptor Init { get; }
    internal static BuiltinFunction New { get; }
    private static InstanceOps();
    internal static BuiltinMethodDescriptor get_Init();
    internal static BuiltinFunction get_New();
    internal static BuiltinFunction CreateNonDefaultNew();
    public static object DefaultNew(CodeContext context, PythonType typeø, Object[] argsø);
    public static object DefaultNewClsKW(CodeContext context, PythonType typeø, IDictionary`2<object, object> kwargsø, Object[] argsø);
    public static object OverloadedNewBasic(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, BuiltinFunction overloadsø, PythonType typeø, Object[] argsø);
    public static object OverloadedNewKW(CodeContext context, BuiltinFunction overloadsø, PythonType typeø, IDictionary`2<object, object> kwargsø);
    public static object OverloadedNewClsKW(CodeContext context, BuiltinFunction overloadsø, PythonType typeø, IDictionary`2<object, object> kwargsø, Object[] argsø);
    public static void DefaultInit(CodeContext context, object self, Object[] argsø);
    public static void DefaultInitKW(CodeContext context, object self, IDictionary`2<object, object> kwargsø, Object[] argsø);
    [StaticExtensionMethodAttribute]
public static object NonDefaultNew(CodeContext context, PythonType typeø, Object[] argsø);
    [StaticExtensionMethodAttribute]
public static object NonDefaultNewKW(CodeContext context, PythonType typeø, IDictionary`2<object, object> kwargsø, Object[] argsø);
    [StaticExtensionMethodAttribute]
public static object NonDefaultNewKWNoParams(CodeContext context, PythonType typeø, IDictionary`2<object, object> kwargsø);
    public static object IterMethodForEnumerator(IEnumerator self);
    public static object IterMethodForEnumerable(IEnumerable self);
    public static object IterMethodForGenericEnumerator(IEnumerator`1<T> self);
    public static object IterMethodForGenericEnumerable(IEnumerable`1<T> self);
    public static object NextMethod(object self);
    public static PythonList DynamicDir(CodeContext context, IDynamicMetaObjectProvider self);
    public static int LengthMethod(ICollection self);
    public static int GenericLengthMethod(ICollection`1<T> self);
    public static string SimpleRepr(object self);
    public static string FancyRepr(object self);
    public static object ReprHelper(CodeContext context, object self);
    public static string ToStringMethod(object self);
    public static string Format(IFormattable formattable, string format);
    public static int StructuralHashMethod(CodeContext context, IStructuralEquatable x);
    public static bool StructuralEqualityMethod(CodeContext context, T x, T y);
    public static bool StructuralInequalityMethod(CodeContext context, T x, T y);
    public static object StructuralEqualityMethod(CodeContext context, T x, object y);
    public static object StructuralInequalityMethod(CodeContext context, T x, object y);
    public static object StructuralEqualityMethod(CodeContext context, object y, T x);
    public static object StructuralInequalityMethod(CodeContext context, object y, T x);
    private static int StructuralCompare(CodeContext context, IStructuralComparable x, object y);
    public static bool StructuralComparableEquality(CodeContext context, T x, T y);
    public static bool StructuralComparableInequality(CodeContext context, T x, T y);
    public static bool StructuralComparableGreaterThan(CodeContext context, T x, T y);
    public static bool StructuralComparableLessThan(CodeContext context, T x, T y);
    public static bool StructuralComparableGreaterEqual(CodeContext context, T x, T y);
    public static bool StructuralComparableLessEqual(CodeContext context, T x, T y);
    public static object StructuralComparableEquality(CodeContext context, T x, object y);
    public static object StructuralComparableInequality(CodeContext context, T x, object y);
    public static object StructuralComparableGreaterThan(CodeContext context, T x, object y);
    public static object StructuralComparableLessThan(CodeContext context, T x, object y);
    public static object StructuralComparableGreaterEqual(CodeContext context, T x, object y);
    public static object StructuralComparableLessEqual(CodeContext context, T x, object y);
    public static object StructuralComparableEquality(CodeContext context, object y, T x);
    public static object StructuralComparableInequality(CodeContext context, object y, T x);
    public static object StructuralComparableGreaterThan(CodeContext context, object y, T x);
    public static object StructuralComparableLessThan(CodeContext context, object y, T x);
    public static object StructuralComparableGreaterEqual(CodeContext context, object y, T x);
    public static object StructuralComparableLessEqual(CodeContext context, object y, T x);
    public static bool ComparableEquality(T x, T y);
    public static bool ComparableInequality(T x, T y);
    public static bool ComparableGreaterThan(T x, T y);
    public static bool ComparableLessThan(T x, T y);
    public static bool ComparableGreaterEqual(T x, T y);
    public static bool ComparableLessEqual(T x, T y);
    public static object ComparableEquality(T x, object y);
    public static object ComparableInequality(T x, object y);
    public static object ComparableGreaterThan(T x, object y);
    public static object ComparableLessThan(T x, object y);
    public static object ComparableGreaterEqual(T x, object y);
    public static object ComparableLessEqual(T x, object y);
    public static object ComparableEquality(object y, T x);
    public static object ComparableInequality(object y, T x);
    public static object ComparableGreaterThan(object y, T x);
    public static object ComparableLessThan(object y, T x);
    public static object ComparableGreaterEqual(object y, T x);
    public static object ComparableLessEqual(object y, T x);
    public static object EnterMethod(IDisposable self);
    public static void ExitMethod(IDisposable self, object exc_type, object exc_value, object exc_back);
    [PropertyMethodAttribute]
[StaticExtensionMethodAttribute]
public static PythonList Get__all__(CodeContext context);
    private static bool IsStaticTypeMemberInAll(CodeContext context, PythonType pt, string name, Object& res);
    public static bool ContainsGenericMethod(CodeContext context, IEnumerable`1<T> enumerable, T value);
    public static bool ContainsMethod(CodeContext context, IEnumerable enumerable, object value);
    public static bool ContainsGenericMethodIEnumerator(CodeContext context, IEnumerator`1<T> enumerator, T value);
    public static bool ContainsMethodIEnumerator(CodeContext context, IEnumerator enumerator, object value);
    public static PythonTuple SerializeReduce(CodeContext context, object self, int protocol);
    internal static void CheckNewArgs(CodeContext context, IDictionary`2<object, object> dict, Object[] args, PythonType pt);
    internal static void CheckInitArgs(CodeContext context, IDictionary`2<object, object> dict, Object[] args, object self);
    private static BuiltinMethodDescriptor GetInitMethod();
    private static BuiltinFunction CreateFunction(string name, String[] methodNames);
    private static void GetKeywordArgs(IDictionary`2<object, object> dict, Object[] args, Object[]& finalArgs, String[]& names);
}
public static class IronPython.Runtime.Operations.Int16Ops : object {
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls, object value);
    public static short Plus(short x);
    public static object Negate(short x);
    public static object Abs(short x);
    public static short OnesComplement(short x);
    public static bool __bool__(short x);
    public static string __repr__(short x);
    public static short __trunc__(short x);
    public static int __hash__(short x);
    public static int __index__(short x);
    public static object Add(short x, short y);
    public static object Subtract(short x, short y);
    public static object Multiply(short x, short y);
    public static double TrueDivide(short x, short y);
    public static object FloorDivide(short x, short y);
    public static short Mod(short x, short y);
    public static object Power(short x, short y);
    public static object LeftShift(short x, BigInteger y);
    public static short RightShift(short x, BigInteger y);
    public static object LeftShift(short x, int y);
    public static short RightShift(short x, int y);
    public static short BitwiseAnd(short x, short y);
    public static short BitwiseOr(short x, short y);
    public static short ExclusiveOr(short x, short y);
    public static bool LessThan(short x, short y);
    public static bool LessThanOrEqual(short x, short y);
    public static bool GreaterThan(short x, short y);
    public static bool GreaterThanOrEqual(short x, short y);
    public static bool Equals(short x, short y);
    public static bool NotEquals(short x, short y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(short x);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(short x);
    [ExplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(short x);
    [ImplicitConversionMethodAttribute]
public static int ConvertToInt32(short x);
    [ExplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(short x);
    [ImplicitConversionMethodAttribute]
public static long ConvertToInt64(short x);
    [ExplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(short x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(short x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(short x);
    [PropertyMethodAttribute]
public static short Getreal(short x);
    [PropertyMethodAttribute]
public static short Getimag(short x);
    public static short conjugate(short x);
    [PropertyMethodAttribute]
public static short Getnumerator(short x);
    [PropertyMethodAttribute]
public static short Getdenominator(short x);
    public static int bit_length(short value);
}
[ExtensionAttribute]
public static class IronPython.Runtime.Operations.Int32Ops : object {
    private static object FastNew(CodeContext context, object o, int base);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, object x, object base);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, object x);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, IBufferProtocol x, int base);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, IBufferProtocol x, object base);
    private static void ValidateType(PythonType cls);
    private static int BaseFromObject(object base);
    private static object ReturnObject(CodeContext context, PythonType cls, object value);
    internal static int FindStart(string s, int radix);
    [ExtensionAttribute]
private static bool IsInt32(BigInteger self);
    public static object FloorDivide(int x, int y);
    public static int Mod(int x, int y);
    public static object Power(int x, BigInteger power, BigInteger qmod);
    public static object Power(int x, double power, double qmod);
    public static object Power(int x, int power, Nullable`1<int> qmod);
    public static object Power(int x, int power);
    public static object LeftShift(int x, int y);
    public static int RightShift(int x, int y);
    public static PythonTuple __divmod__(int x, int y);
    public static object __divmod__(int x, object y);
    public static object __getnewargs__(CodeContext context, int self);
    public static object __rdivmod__(int x, int y);
    public static int __int__(int self);
    public static BigInteger __long__(int self);
    public static double __float__(int self);
    public static int __abs__(int self);
    public static string __format__(CodeContext context, int self, string formatSpec);
    public static Bytes to_bytes(int value, int length, string byteorder, bool signed);
    [ClassMethodAttribute]
[StaticExtensionMethodAttribute]
public static object from_bytes(CodeContext context, PythonType type, object bytes, string byteorder, bool signed);
    public static int __round__(int self);
    public static object __round__(int number, BigInteger ndigits);
    public static object __round__(int self, object ndigits);
    private static string ToHex(int self, bool lowercase);
    private static string ToOctal(int self, bool lowercase);
    internal static string ToBinary(int self);
    private static string ToBinary(int self, bool includeType);
    public static int Plus(int x);
    public static object Negate(int x);
    public static object Abs(int x);
    public static int OnesComplement(int x);
    public static bool __bool__(int x);
    public static string __repr__(int x);
    public static int __trunc__(int x);
    public static int __hash__(int x);
    public static int __index__(int x);
    public static object Add(int x, int y);
    public static object Subtract(int x, int y);
    public static object Multiply(int x, int y);
    public static double TrueDivide(int x, int y);
    public static object LeftShift(int x, BigInteger y);
    public static int RightShift(int x, BigInteger y);
    public static int BitwiseAnd(int x, int y);
    public static int BitwiseOr(int x, int y);
    public static int ExclusiveOr(int x, int y);
    public static bool LessThan(int x, int y);
    public static bool LessThanOrEqual(int x, int y);
    public static bool GreaterThan(int x, int y);
    public static bool GreaterThanOrEqual(int x, int y);
    public static bool Equals(int x, int y);
    public static bool NotEquals(int x, int y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(int x);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(int x);
    [ExplicitConversionMethodAttribute]
public static short ConvertToInt16(int x);
    [ExplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(int x);
    [ExplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(int x);
    [ImplicitConversionMethodAttribute]
public static long ConvertToInt64(int x);
    [ExplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(int x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(int x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(int x);
    [PropertyMethodAttribute]
public static int Getreal(int x);
    [PropertyMethodAttribute]
public static int Getimag(int x);
    public static int conjugate(int x);
    [PropertyMethodAttribute]
public static int Getnumerator(int x);
    [PropertyMethodAttribute]
public static int Getdenominator(int x);
    public static int bit_length(int value);
    [CompilerGeneratedAttribute]
internal static bool <FastNew>g__TryInvokeInt|0_0(CodeContext context, object o, Object& result);
    [CompilerGeneratedAttribute]
internal static void <FastNew>g__Warn|0_1(CodeContext context, object result);
}
public static class IronPython.Runtime.Operations.Int64Ops : object {
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls, object value);
    public static long Plus(long x);
    public static object Negate(long x);
    public static object Abs(long x);
    public static long OnesComplement(long x);
    public static bool __bool__(long x);
    public static string __repr__(long x);
    public static long __trunc__(long x);
    public static int __hash__(long x);
    public static BigInteger __index__(long x);
    public static object Add(long x, long y);
    public static object Subtract(long x, long y);
    public static object Multiply(long x, long y);
    public static double TrueDivide(long x, long y);
    public static object FloorDivide(long x, long y);
    public static long Mod(long x, long y);
    public static object Power(long x, long y);
    public static object LeftShift(long x, BigInteger y);
    public static long RightShift(long x, BigInteger y);
    public static long BitwiseAnd(long x, long y);
    public static long BitwiseOr(long x, long y);
    public static long ExclusiveOr(long x, long y);
    public static bool LessThan(long x, long y);
    public static bool LessThanOrEqual(long x, long y);
    public static bool GreaterThan(long x, long y);
    public static bool GreaterThanOrEqual(long x, long y);
    public static bool Equals(long x, long y);
    public static bool NotEquals(long x, long y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(long x);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(long x);
    [ExplicitConversionMethodAttribute]
public static short ConvertToInt16(long x);
    [ExplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(long x);
    [ExplicitConversionMethodAttribute]
public static int ConvertToInt32(long x);
    [ExplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(long x);
    [ExplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(long x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(long x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(long x);
    [PropertyMethodAttribute]
public static long Getreal(long x);
    [PropertyMethodAttribute]
public static long Getimag(long x);
    public static long conjugate(long x);
    [PropertyMethodAttribute]
public static long Getnumerator(long x);
    [PropertyMethodAttribute]
public static long Getdenominator(long x);
    public static int bit_length(long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.ListOfTOps`1 : object {
    public static string __repr__(CodeContext context, List`1<T> self);
    public static void DeleteItem(List`1<T> l, int index);
    public static void DeleteItem(List`1<T> l, object index);
    public static void DeleteItem(List`1<T> l, Slice slice);
    public static T __getitem__(List`1<T> l, int index);
    public static List`1<T> __getitem__(List`1<T> l, Slice slice);
}
public class IronPython.Runtime.Operations.MarshalOps : object {
    public static Byte[] GetBytes(object o, int version);
    public static object GetObject(IEnumerator`1<byte> bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.NamespaceTrackerOps : object {
    [PropertyMethodAttribute]
public static object Get__file__(NamespaceTracker self);
    public static string __repr__(NamespaceTracker self);
    public static string __str__(NamespaceTracker self);
    [PropertyMethodAttribute]
public static PythonDictionary Get__dict__(CodeContext context, NamespaceTracker self);
    [PropertyMethodAttribute]
public static string Get__name__(CodeContext context, NamespaceTracker self);
    private static string Get__name__(string name);
    public static object GetCustomMember(CodeContext context, NamespaceTracker self, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.ObjectOps : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static HashSet`1<PythonType> _nativelyPickleableTypes;
    [SlotFieldAttribute]
public static PythonTypeSlot __class__;
    private static HashSet`1<PythonType> NativelyPickleableTypes { get; }
    private static ObjectOps();
    public static void __delattr__(CodeContext context, object self, string name);
    public static int __hash__(object self);
    public static object __getattribute__(CodeContext context, object self, string name);
    public static void __init__(CodeContext context, object self);
    public static void __init__(CodeContext context, object self, Object[] argsø);
    public static void __init__(CodeContext context, object self, IDictionary`2<object, object> kwargs, Object[] argsø);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, Object[] argsø);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, IDictionary`2<object, object> kwargsø, Object[] argsø);
    public static object __reduce__(CodeContext context, object self);
    public static object __reduce_ex__(CodeContext context, object self);
    public static object __reduce_ex__(CodeContext context, object self, object protocol);
    public static string __repr__(object self);
    public static void __setattr__(CodeContext context, object self, string name, object value);
    private static int AdjustPointerSize(int size);
    public static int __sizeof__(object self);
    private static int GetTypeSize(Type t);
    public static string __str__(CodeContext context, object o);
    public static NotImplementedType __subclasshook__(Object[] args);
    public static object __eq__(object self, object value);
    public static object __ne__(CodeContext context, object self, object other);
    public static NotImplementedType __gt__(object self, object value);
    public static NotImplementedType __lt__(object self, object value);
    public static NotImplementedType __ge__(object self, object value);
    public static NotImplementedType __le__(object self, object value);
    public static string __format__(CodeContext context, object self, string formatSpec);
    private static HashSet`1<PythonType> get_NativelyPickleableTypes();
    private static PythonDictionary GetInitializedSlotValues(object obj);
    internal static object ReduceProtocol0(CodeContext context, object self);
    private static PythonTuple ReduceProtocol2(CodeContext context, object self);
}
public static class IronPython.Runtime.Operations.PythonAssemblyOps : object {
    private static object _key;
    private static PythonAssemblyOps();
    private static Dictionary`2<Assembly, TopNamespaceTracker> GetAssemblyMap(PythonContext context);
    public static object GetBoundMember(CodeContext context, Assembly self, string name);
    public static PythonList GetMemberNames(CodeContext context, Assembly self);
    public static object __repr__(Assembly self);
    private static TopNamespaceTracker GetReflectedAssembly(CodeContext context, Assembly assem);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.PythonCalls : object {
    public static object Call(object func, Object[] args);
    public static object Call(CodeContext context, object func);
    public static object Call(CodeContext context, object func, object arg0);
    public static object Call(CodeContext context, object func, object arg0, object arg1);
    public static object Call(CodeContext context, object func, Object[] args);
    [NullableContextAttribute("1")]
public static object CallWithKeywordArgs(CodeContext context, object func, Object[] args, String[] names);
    [NullableContextAttribute("1")]
public static object CallWithKeywordArgs(CodeContext context, object func, Object[] args, IDictionary`2<object, object> dict);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class IronPython.Runtime.Operations.PythonOps : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ThreadStaticAttribute]
private static List`1<object> InfiniteRepr;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
internal static ExceptionState CurrentExceptionState;
    public static PythonTuple EmptyTuple;
    private static Type[] _DelegateCtorSignature;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static List`1<FunctionStack> _funcStack;
    public static Ellipsis Ellipsis { get; }
    [EditorBrowsableAttribute("1")]
public static NotImplementedType NotImplemented { get; }
    private static PythonOps();
    [EditorBrowsableAttribute("1")]
public static PythonDictionary MakeEmptyDict();
    public static PythonDictionary MakeDictFromItems(Object[] data);
    public static PythonDictionary MakeConstantDict(object items);
    public static object MakeConstantDictStorage(Object[] data);
    public static SetCollection MakeSet(Object[] items);
    public static SetCollection MakeEmptySet();
    public static PythonDictionary MakeHomogeneousDictFromItems(Object[] data);
    public static bool IsCallable(CodeContext context, object o);
    public static bool UserObjectIsCallable(CodeContext context, object o);
    [NullableContextAttribute("2")]
public static bool IsTrue(object o);
    internal static List`1<object> GetReprInfinite();
    [LightThrowingAttribute]
internal static object LookupEncodingError(CodeContext context, string name);
    internal static void RegisterEncodingError(CodeContext context, string name, object handler);
    internal static PythonTuple LookupEncoding(CodeContext context, string encoding);
    internal static PythonTuple LookupTextEncoding(CodeContext context, string encoding, string alternateCommand);
    internal static void RegisterEncoding(CodeContext context, object search_function);
    internal static string GetPythonTypeName(object obj);
    public static string Ascii(CodeContext context, object o);
    public static string Repr(CodeContext context, object o);
    public static List`1<object> GetAndCheckInfinite(object o);
    public static string ToString(object o);
    public static string ToString(CodeContext context, object o);
    public static string FormatString(CodeContext context, string str, object data);
    public static object Plus(object o);
    public static object Negate(object o);
    internal static bool IsSubClass(PythonType c, PythonType typeinfo);
    internal static bool IsSubClass(CodeContext context, PythonType c, object typeinfo);
    internal static bool IsInstance(object o, PythonType typeinfo);
    internal static bool IsInstance(CodeContext context, object o, PythonTuple typeinfo);
    [NullableContextAttribute("2")]
internal static bool IsInstance(CodeContext context, object o, object typeinfo);
    private static bool IsInstanceDynamic(object o, object typeinfo);
    private static bool IsInstanceDynamic(object o, object typeinfo, PythonType odt);
    private static bool IsSubclassSlow(object cls, object typeinfo);
    public static object OnesComplement(object o);
    [NullableContextAttribute("2")]
public static bool Not(object o);
    [NullableContextAttribute("2")]
public static object Is(object x, object y);
    [NullableContextAttribute("2")]
public static bool IsRetBool(object x, object y);
    [NullableContextAttribute("2")]
public static object IsNot(object x, object y);
    internal static object MultiplySequence(MultiplySequenceWorker`1<T> multiplier, T sequence, Index count, bool isForward);
    internal static int GetSequenceMultiplier(object sequence, object count);
    public static object Equal(CodeContext context, object x, object y);
    [NullableContextAttribute("2")]
public static bool EqualRetBool(object x, object y);
    [NullableContextAttribute("2")]
public static bool EqualRetBool(CodeContext context, object x, object y);
    [NullableContextAttribute("2")]
internal static bool IsOrEqualsRetBool(object x, object y);
    [NullableContextAttribute("2")]
internal static bool IsOrEqualsRetBool(CodeContext context, object x, object y);
    [NullableContextAttribute("2")]
internal static object RichCompare(CodeContext context, object x, object y, PythonOperationKind op);
    [NullableContextAttribute("2")]
public static bool CompareTypesEqual(CodeContext context, object x, object y);
    [NullableContextAttribute("2")]
public static bool CompareTypesNotEqual(CodeContext context, object x, object y);
    internal static bool ArraysEqual(CodeContext context, ReadOnlySpan`1<object> data0, ReadOnlySpan`1<object> data1);
    internal static bool ArraysEqual(CodeContext context, ReadOnlySpan`1<object> data0, ReadOnlySpan`1<object> data1, IEqualityComparer comparer);
    private static object CompareLength(int length1, int length2, PythonOperationKind op);
    internal static object RichCompareSequences(CodeContext context, ReadOnlySpan`1<object> data0, ReadOnlySpan`1<object> data1, PythonOperationKind op);
    internal static object RichCompareSequences(CodeContext context, IList`1<object> data0, IList`1<object> data1, PythonOperationKind op);
    internal static object ArraysGreaterThan(CodeContext context, ReadOnlySpan`1<object> data0, ReadOnlySpan`1<object> data1);
    internal static object ArraysGreaterThan(CodeContext context, IList`1<object> data0, IList`1<object> data1);
    internal static object ArraysLessThan(CodeContext context, ReadOnlySpan`1<object> data0, ReadOnlySpan`1<object> data1);
    internal static object ArraysLessThan(CodeContext context, IList`1<object> data0, IList`1<object> data1);
    internal static object ArraysGreaterThanOrEqual(CodeContext context, ReadOnlySpan`1<object> data0, ReadOnlySpan`1<object> data1);
    internal static object ArraysGreaterThanOrEqual(CodeContext context, IList`1<object> data0, IList`1<object> data1);
    internal static object ArraysLessThanOrEqual(CodeContext context, ReadOnlySpan`1<object> data0, ReadOnlySpan`1<object> data1);
    internal static object ArraysLessThanOrEqual(CodeContext context, IList`1<object> data0, IList`1<object> data1);
    [NullableContextAttribute("2")]
public static object PowerMod(CodeContext context, object x, object y, object z);
    [NullableContextAttribute("2")]
public static long Id(object o);
    public static string HexId(object o);
    public static int Hash(CodeContext context, object o);
    public static object Index(object o);
    [NullableContextAttribute("2")]
internal static bool TryToIndex(object o, Object& index);
    private static bool IndexObjectToInt(object o, Int32& res, BigInteger& longRes);
    [NullableContextAttribute("2")]
internal static bool Length(object o, Int32& res, BigInteger& bigRes);
    [NullableContextAttribute("2")]
public static int Length(object o);
    internal static bool TryInvokeLengthHint(CodeContext context, object sequence, Int32& hint);
    [NullableContextAttribute("2")]
public static object CallWithContext(CodeContext context, object func, Object[] args);
    [NullableContextAttribute("2")]
public static object CallWithContextAndThis(CodeContext context, object func, object instance, Object[] args);
    [ObsoleteAttribute("Use ObjectOpertaions instead")]
public static object CallWithArgsTupleAndKeywordDictAndContext(CodeContext context, object func, Object[] args, String[] names, object argsTuple, object kwDict);
    public static object CallWithArgsTuple(object func, Object[] args, object argsTuple);
    public static object GetIndex(CodeContext context, object o, object index);
    [NullableContextAttribute("2")]
public static bool TryGetBoundAttr(object o, string name, Object& ret);
    public static void SetAttr(CodeContext context, object o, string name, object value);
    public static bool TryGetBoundAttr(CodeContext context, object o, string name, Object& ret);
    public static void DeleteAttr(CodeContext context, object o, string name);
    public static bool HasAttr(CodeContext context, object o, string name);
    public static object GetBoundAttr(CodeContext context, object o, string name);
    public static void ObjectSetAttribute(CodeContext context, object o, string name, object value);
    public static void ObjectDeleteAttribute(CodeContext context, object o, string name);
    public static object ObjectGetAttribute(CodeContext context, object o, string name);
    internal static IList`1<string> GetStringMemberList(IPythonMembersList pyMemList);
    public static IList`1<object> GetAttrNames(CodeContext context, object o);
    public static void CheckInitializedAttribute(object o, object self, string name);
    public static object GetUserSlotValue(CodeContext context, PythonTypeUserDescriptorSlot slot, object instance, PythonType type);
    public static object GetUserDescriptor(object o, object instance, object context);
    public static bool TrySetUserDescriptor(object o, object instance, object value);
    public static bool TryDeleteUserDescriptor(object o, object instance);
    [NullableContextAttribute("2")]
public static object Invoke(CodeContext context, object target, string name, object arg0);
    public static object Invoke(CodeContext context, object target, string name, Object[] args);
    public static Delegate CreateDynamicDelegate(DynamicMethod meth, Type delegateType, object target);
    public static double CheckMath(double v);
    public static double CheckMath(double input, double output);
    public static double CheckMath(double in0, double in1, double output);
    public static bool IsMappingType(CodeContext context, object o);
    public static int FixSliceIndex(int v, int len);
    public static long FixSliceIndex(long v, long len);
    internal static int GetSliceCount(int start, int stop, int step);
    private static long GetSliceCount(long start, long stop, long step);
    [NullableContextAttribute("2")]
internal static void FixSlice(int length, object start, object stop, object step, Int32& ostart, Int32& ostop, Int32& ostep);
    internal static void FixSlice(long length, Nullable`1<long> start, Nullable`1<long> stop, Nullable`1<long> step, Int64& ostart, Int64& ostop, Int64& ostep, Int64& ocount);
    internal static bool TryFixSubsequenceIndices(int len, Int32& start, Int32& end);
    public static int FixIndex(int v, int len);
    internal static bool TryFixIndex(int v, int len, Int32& res);
    public static void InitializeForFinalization(CodeContext context, object newObject);
    internal static object CallPrepare(CodeContext context, PythonType meta, string name, PythonTuple bases, PythonDictionary keywords, PythonDictionary dict);
    public static object MakeClass(FunctionCode funcCode, Func`2<CodeContext, CodeContext> body, CodeContext parentContext, string name, PythonTuple bases, PythonDictionary keywords, string selfNames);
    private static Func`2<CodeContext, CodeContext> GetClassCode(CodeContext context, FunctionCode funcCode, Func`2<CodeContext, CodeContext> body);
    private static object MakeClass(CodeContext context, string name, PythonTuple bases, object metaclass, PythonDictionary keywords, string selfNames, PythonDictionary vars);
    public static void RaiseAssertionError(CodeContext context);
    public static void RaiseAssertionError(CodeContext context, object msg);
    internal static PythonList MakeList(Object[] items);
    [NoSideEffectsAttribute]
[EditorBrowsableAttribute("1")]
public static PythonList MakeListNoCopy(Object[] items);
    [NoSideEffectsAttribute]
[EditorBrowsableAttribute("1")]
public static PythonList MakeEmptyList();
    [NoSideEffectsAttribute]
[EditorBrowsableAttribute("1")]
public static PythonTuple MakeTuple(Object[] items);
    [NoSideEffectsAttribute]
[EditorBrowsableAttribute("1")]
public static PythonTuple MakeTupleFromSequence(object items);
    [NoSideEffectsAttribute]
[EditorBrowsableAttribute("1")]
public static PythonTuple MakeEmptyTuple();
    [EditorBrowsableAttribute("1")]
public static void DictMerge(CodeContext context, PythonDictionary dict, object item);
    [EditorBrowsableAttribute("1")]
public static void DictMergeOne(CodeContext context, PythonDictionary dict, object key, object value);
    [EditorBrowsableAttribute("1")]
public static void DictUpdate(CodeContext context, PythonDictionary dict, object item);
    [EditorBrowsableAttribute("1")]
public static void ListAppend(PythonList list, object o);
    [EditorBrowsableAttribute("1")]
public static void ListExtend(PythonList list, object o);
    [EditorBrowsableAttribute("1")]
public static PythonTuple ListToTuple(PythonList list);
    [EditorBrowsableAttribute("1")]
public static void SetAdd(SetCollection set, object o);
    [EditorBrowsableAttribute("1")]
public static void SetUpdate(SetCollection set, object o);
    [LightThrowingAttribute]
public static object GetEnumeratorValues(CodeContext context, object e, int expected, int argcntafter);
    [LightThrowingAttribute]
public static object GetEnumeratorValuesNoComplexSets(CodeContext context, object e, int expected, int argcntafter);
    [LightThrowingAttribute]
private static object GetEnumeratorValuesFromTuple(PythonTuple pythonTuple, int expected, int argcntafter);
    [LightThrowingAttribute]
private static object GetEnumeratorValuesFromList(PythonList list, int expected, int argcntafter);
    [LightThrowingAttribute]
public static object UnpackIterable(CodeContext context, object e, int expected, int argcntafter);
    public static Slice MakeSlice(object start, object stop, object step);
    internal static void Write(CodeContext context, object f, string text);
    private static object ReadLine(CodeContext context, object f);
    internal static void PrintWithDest(CodeContext context, object dest, object o, bool noNewLine, bool flush);
    internal static object ReadLineFromSrc(CodeContext context, object src);
    internal static void PrintNewline(CodeContext context);
    internal static void PrintNewlineWithDest(CodeContext context, object dest);
    [EditorBrowsableAttribute("1")]
public static void PrintExpressionValue(CodeContext context, object value);
    internal static void PrintException(CodeContext context, Exception exception, object console);
    [ProfilerTreatsAsExternalAttribute]
[LightThrowingAttribute]
public static object ImportTop(CodeContext context, string fullName, int level);
    [ProfilerTreatsAsExternalAttribute]
[LightThrowingAttribute]
public static object ImportBottom(CodeContext context, string fullName, int level);
    [ProfilerTreatsAsExternalAttribute]
[LightThrowingAttribute]
public static object ImportWithNames(CodeContext context, string fullName, String[] names, int level);
    public static object ImportFrom(CodeContext context, object module, string name);
    [ProfilerTreatsAsExternalAttribute]
public static void ImportStar(CodeContext context, string fullName, int level);
    public static ICollection GetCollection(object o);
    public static IEnumerator GetEnumerator(object o);
    public static IEnumerator GetEnumerator(CodeContext context, object o);
    internal static Exception TypeErrorForNotAnIterator(object enumerable);
    public static object GetEnumeratorObject(CodeContext context, object o);
    [NullableContextAttribute("2")]
private static bool TryGetEnumeratorObject(CodeContext context, object o, Object& enumerator);
    public static Exception TypeErrorForNotIterable(object enumerable);
    public static KeyValuePair`2<IEnumerator, IDisposable> ThrowTypeErrorForBadIteration(CodeContext context, object enumerable);
    [NullableContextAttribute("2")]
internal static bool TryGetEnumerator(CodeContext context, object enumerable, IEnumerator& enumerator);
    public static void ForLoopDispose(KeyValuePair`2<IEnumerator, IDisposable> iteratorInfo);
    public static KeyValuePair`2<IEnumerator, IDisposable> StringEnumerator(string str);
    public static KeyValuePair`2<IEnumerator, IDisposable> BytesEnumerator(IList`1<byte> bytes);
    public static KeyValuePair`2<IEnumerator, IDisposable> GetEnumeratorFromEnumerable(IEnumerable enumerable);
    public static IEnumerable StringEnumerable(string str);
    public static IEnumerable BytesEnumerable(IList`1<byte> bytes);
    public static object SetCurrentException(CodeContext context, Exception clrException);
    [NullableContextAttribute("2")]
private static Exception GetCurrentException();
    public static void ClearCurrentException();
    [NullableContextAttribute("2")]
public static Exception SaveCurrentException();
    [NullableContextAttribute("2")]
public static void RestoreCurrentException(Exception clrException);
    public static object CheckException(CodeContext context, object exception, object test);
    private static TraceBack CreateTraceBack(PythonContext pyContext, Exception e);
    internal static TraceBack CreateTraceBack(Exception e, IList`1<DynamicStackFrame> frames, IList`1<FunctionStack> stacks, int frameCount);
    public static PythonTuple GetExceptionInfo(CodeContext context);
    public static PythonTuple GetExceptionInfoLocal(CodeContext context, Exception ex);
    public static Exception MakeRethrownException(CodeContext context);
    public static Exception MakeRethrowExceptionWorker(Exception e);
    public static Exception MakeException(CodeContext context, object exception);
    public static Exception MakeExceptionWithCause(CodeContext context, object exception, object cause);
    [NullableContextAttribute("2")]
internal static BaseException GetRawContextException();
    internal static Exception MakeExceptionForGenerator(CodeContext context, object type, object value, object traceback, object cause);
    [NullableContextAttribute("2")]
private static Exception MakeExceptionWorker(CodeContext context, object type, object value, object traceback, object cause, bool suppressContext, bool forRethrow);
    public static Exception CreateThrowable(PythonType type, Object[] args);
    public static String[] GetFunctionSignature(PythonFunction function);
    public static PythonDictionary CopyAndVerifyDictionary(PythonFunction function, IDictionary dict);
    public static PythonDictionary CopyAndVerifyUserMapping(PythonFunction function, object dict);
    public static PythonDictionary UserMappingToPythonDictionary(CodeContext context, object dict, string funcName);
    public static PythonDictionary CopyAndVerifyPythonDictionary(PythonFunction function, PythonDictionary dict);
    public static object ExtractDictionaryArgument(PythonFunction function, string name, int argCnt, PythonDictionary dict);
    public static void AddDictionaryArgument(PythonFunction function, string name, object value, PythonDictionary dict);
    public static void VerifyUnduplicatedByPosition(PythonFunction function, string name, int position, int listlen);
    public static void VerifyUnduplicatedByName(PythonFunction function, string name, PythonDictionary dict, bool keywordArg);
    public static PythonList CopyAndVerifyParamsList(PythonFunction function, object list);
    public static PythonTuple UserMappingToPythonTuple(CodeContext context, object list, string funcName);
    public static PythonTuple GetOrCopyParamsTuple(PythonFunction function, object input);
    public static object ExtractParamsArgument(PythonFunction function, int argCnt, PythonList list);
    public static void AddParamsArguments(PythonList list, Object[] args);
    public static object ExtractAnyArgument(PythonFunction function, string name, int argCnt, PythonList list, IDictionary dict);
    public static ArgumentTypeException SimpleTypeError(string message);
    public static object GetParamsValueOrDefault(PythonFunction function, int index, PythonList extraArgs);
    [NullableContextAttribute("2")]
public static object GetFunctionParameterValue(PythonFunction function, int index, string name, PythonList extraArgs, PythonDictionary dict);
    public static object GetFunctionKeywordOnlyParameterValue(PythonFunction function, string name, PythonDictionary dict);
    public static void CheckParamsZero(PythonFunction function, PythonList extraArgs);
    public static void CheckUserParamsZero(PythonFunction function, object sequence);
    public static void CheckDictionaryZero(PythonFunction function, IDictionary dict);
    public static bool CheckDictionaryMembers(PythonDictionary dict, String[] names);
    public static object PythonFunctionGetMember(PythonFunction function, string name);
    public static object PythonFunctionSetMember(PythonFunction function, string name, object value);
    public static void PythonFunctionDeleteDict();
    public static void PythonFunctionDeleteDoc(PythonFunction function);
    public static void PythonFunctionDeleteDefaults(PythonFunction function);
    public static bool PythonFunctionDeleteMember(PythonFunction function, string name);
    public static Object[] InitializeUserTypeSlots(PythonType type);
    public static bool IsClsVisible(CodeContext context);
    public static object GetInitMember(CodeContext context, PythonType type, object instance);
    public static object GetInitSlotMember(CodeContext context, PythonType type, PythonTypeSlot slot, object instance);
    [NullableContextAttribute("2")]
public static bool IsNumericObject(object value);
    internal static bool IsNumericType(Type t);
    internal static bool IsNonExtensibleNumericType(Type t);
    public static BoundEvent MakeBoundEvent(ReflectedEvent eventObj, object instance, Type type);
    public static bool CheckTypeVersion(object o, int version);
    public static bool CheckSpecificTypeVersion(PythonType type, int version);
    internal static MethodInfo GetConversionHelper(string name, ConversionResultKind resultKind);
    public static object ConvertToPythonPrimitive(object value);
    public static object ConvertFloatToComplex(object value);
    internal static bool CheckingConvertToInt(object value);
    internal static bool CheckingConvertToLong(object value);
    internal static bool CheckingConvertToFloat(object value);
    internal static bool CheckingConvertToComplex(object value);
    internal static bool CheckingConvertToString(object value);
    public static bool CheckingConvertToBool(object value);
    public static object NonThrowingConvertToInt(object value);
    public static object NonThrowingConvertToLong(object value);
    public static object NonThrowingConvertToFloat(object value);
    public static object NonThrowingConvertToComplex(object value);
    public static object NonThrowingConvertToString(object value);
    public static object NonThrowingConvertToBool(object value);
    public static object ThrowingConvertToInt(object value);
    public static object ThrowingConvertToFloat(object value);
    public static object ThrowingConvertToComplex(object value);
    public static object ThrowingConvertToLong(object value);
    public static object ThrowingConvertToString(object value);
    public static bool ThrowingConvertToBool(object value);
    public static bool SlotTryGetBoundValue(CodeContext context, PythonTypeSlot slot, object instance, PythonType owner, Object& value);
    public static bool SlotTryGetValue(CodeContext context, PythonTypeSlot slot, object instance, PythonType owner, Object& value);
    public static object SlotGetValue(CodeContext context, PythonTypeSlot slot, object instance, PythonType owner);
    public static bool SlotTrySetValue(CodeContext context, PythonTypeSlot slot, object instance, PythonType owner, object value);
    public static object SlotSetValue(CodeContext context, PythonTypeSlot slot, object instance, PythonType owner, object value);
    public static bool SlotTryDeleteValue(CodeContext context, PythonTypeSlot slot, object instance, PythonType owner);
    public static BuiltinFunction MakeBoundBuiltinFunction(BuiltinFunction function, object target);
    public static object GetBuiltinFunctionSelf(BuiltinFunction function);
    public static bool TestBoundBuiltinFunction(BuiltinFunction function, object data);
    public static BuiltinFunction GetBuiltinMethodDescriptorTemplate(BuiltinMethodDescriptor descriptor);
    public static int GetTypeVersion(PythonType type);
    public static bool TryResolveTypeSlot(CodeContext context, PythonType type, string name, PythonTypeSlot& slot);
    public static T[] ConvertTupleToArray(PythonTuple tuple);
    public static PythonGenerator MakeGenerator(PythonFunction function, MutableTuple data, object generatorCode);
    public static object MakeGeneratorExpression(object function, object input);
    public static FunctionCode MakeFunctionCode(CodeContext context, string name, string documentation, String[] parameterNames, int argCount, FunctionAttributes flags, int startIndex, int endIndex, string path, Delegate code, String[] freeVars, String[] names, String[] cellVars, String[] varNames, int localCount);
    [NoSideEffectsAttribute]
public static object MakeFunction(CodeContext context, FunctionCode funcInfo, object modName, Object[] defaults, PythonDictionary kwdefaults, PythonDictionary annotations);
    [NoSideEffectsAttribute]
public static object MakeFunctionDebug(CodeContext context, FunctionCode funcInfo, object modName, Object[] defaults, PythonDictionary kwdefaults, PythonDictionary annotations, Delegate target);
    public static CodeContext FunctionGetContext(PythonFunction func);
    public static object FunctionGetDefaultValue(PythonFunction func, int index);
    public static object FunctionGetKeywordOnlyDefaultValue(PythonFunction func, int index);
    public static int FunctionGetCompatibility(PythonFunction func);
    public static int FunctionGetID(PythonFunction func);
    public static Delegate FunctionGetTarget(PythonFunction func);
    public static Delegate FunctionGetLightThrowTarget(PythonFunction func);
    public static void FunctionPushFrame(PythonContext context);
    public static void FunctionPushFrameCodeContext(CodeContext context);
    public static void FunctionPopFrame();
    public static T ConvertFromObject(object obj);
    public static DynamicMetaObjectBinder MakeComplexCallAction(int count, bool list, String[] keywords);
    public static DynamicMetaObjectBinder MakeSimpleCallAction(int count);
    [LightThrowingAttribute]
public static object GeneratorCheckThrowableAndReturnSendValue(object self);
    public static ItemEnumerable CreateItemEnumerable(object source, object callable, CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> site);
    public static DictionaryKeyEnumerator MakeDictionaryKeyEnumerator(PythonDictionary dict);
    public static IEnumerable CreatePythonEnumerable(object baseObject);
    public static IEnumerator CreateItemEnumerator(object source, object callable, CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> site);
    public static IEnumerator CreatePythonEnumerator(object baseObject);
    public static bool ContainsFromEnumerable(CodeContext context, object enumerable, object value);
    public static object PythonTypeGetMember(CodeContext context, PythonType type, object instance, string name);
    [NoSideEffectsAttribute]
public static object CheckUninitializedFree(object value, string name);
    [NoSideEffectsAttribute]
public static object CheckUninitializedLocal(object value, string name);
    public static object PythonTypeSetCustomMember(CodeContext context, PythonType self, string name, object value);
    public static object PythonTypeDeleteCustomMember(CodeContext context, PythonType self, string name);
    public static bool IsPythonType(PythonType type);
    public static object PublishModule(CodeContext context, string name);
    public static void RemoveModule(CodeContext context, string name, object oldValue);
    public static Ellipsis get_Ellipsis();
    public static NotImplementedType get_NotImplemented();
    public static void ListAddForComprehension(PythonList l, object o);
    public static void SetAddForComprehension(SetCollection s, object o);
    [NullableContextAttribute("2")]
public static void DictAddForComprehension(PythonDictionary d, object k, object v);
    public static void ModuleStarted(CodeContext context, ModuleOptions features);
    public static void Warn(CodeContext context, PythonType category, string message, Object[] args);
    public static void ShowWarning(CodeContext context, PythonType category, string message, string filename, int lineNo);
    private static string FormatWarning(string message, Object[] args);
    public static DynamicMetaObjectBinder MakeComboAction(CodeContext context, DynamicMetaObjectBinder opBinder, DynamicMetaObjectBinder convBinder);
    public static DynamicMetaObjectBinder MakeInvokeAction(CodeContext context, CallSignature signature);
    public static DynamicMetaObjectBinder MakeGetAction(CodeContext context, string name, bool isNoThrow);
    public static DynamicMetaObjectBinder MakeCompatGetAction(CodeContext context, string name);
    public static DynamicMetaObjectBinder MakeCompatInvokeAction(CodeContext context, CallInfo callInfo);
    public static DynamicMetaObjectBinder MakeCompatConvertAction(CodeContext context, Type toType, bool isExplicit);
    public static DynamicMetaObjectBinder MakeSetAction(CodeContext context, string name);
    public static DynamicMetaObjectBinder MakeDeleteAction(CodeContext context, string name);
    public static DynamicMetaObjectBinder MakeConversionAction(CodeContext context, Type type, ConversionResultKind kind);
    public static DynamicMetaObjectBinder MakeTryConversionAction(CodeContext context, Type type, ConversionResultKind kind);
    public static DynamicMetaObjectBinder MakeOperationAction(CodeContext context, int operationName);
    public static DynamicMetaObjectBinder MakeUnaryOperationAction(CodeContext context, ExpressionType expressionType);
    public static DynamicMetaObjectBinder MakeBinaryOperationAction(CodeContext context, ExpressionType expressionType);
    public static DynamicMetaObjectBinder MakeGetIndexAction(CodeContext context, int argCount);
    public static DynamicMetaObjectBinder MakeSetIndexAction(CodeContext context, int argCount);
    public static DynamicMetaObjectBinder MakeDeleteIndexAction(CodeContext context, int argCount);
    public static DynamicMetaObjectBinder MakeGetSliceBinder(CodeContext context);
    public static DynamicMetaObjectBinder MakeSetSliceBinder(CodeContext context);
    public static DynamicMetaObjectBinder MakeDeleteSliceBinder(CodeContext context);
    public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access);
    public static Type MakeNewCustomDelegate(Type[] types);
    public static Type MakeNewCustomDelegate(Type[] types, Nullable`1<CallingConvention> callingConvention);
    public static int InitializeModule(Assembly precompiled, string main, String[] references);
    public static int InitializeModuleEx(Assembly precompiled, string main, String[] references, bool ignoreEnvVars);
    public static int InitializeModuleEx(Assembly precompiled, string main, String[] references, bool ignoreEnvVars, Dictionary`2<string, object> options);
    public static CodeContext GetPythonTypeContext(PythonType pt);
    public static Delegate GetDelegate(CodeContext context, object target, Type type);
    [ObsoleteAttribute("Use Bytes(IList<byte>) instead.")]
[EditorBrowsableAttribute("1")]
public static Bytes MakeBytes(Byte[] bytes);
    [ExtensionAttribute]
public static Byte[] MakeByteArray(string s);
    [ExtensionAttribute]
public static string MakeString(IList`1<byte> bytes);
    [ExtensionAttribute]
internal static string MakeString(IList`1<byte> bytes, int maxBytes);
    [ExtensionAttribute]
internal static string MakeString(IList`1<byte> bytes, int startIdx, int maxBytes);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
internal static string MakeString(Span`1<byte> bytes);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
internal static string MakeString(ReadOnlySpan`1<byte> bytes);
    public static void RemoveName(CodeContext context, string name);
    public static object LookupName(CodeContext context, string name);
    public static object LookupLocalName(CodeContext context, string name, object defaultValue);
    public static object SetName(CodeContext context, string name, object value);
    [ExtensionAttribute]
public static object ToPython(IntPtr handle);
    public static CodeContext CreateLocalContext(CodeContext outerContext, MutableTuple boxes, String[] args);
    public static CodeContext GetGlobalContext(CodeContext context);
    public static ClosureCell MakeClosureCell();
    public static ClosureCell MakeClosureCellWithValue(object initialValue);
    public static MutableTuple GetClosureTupleFromFunction(PythonFunction function);
    public static MutableTuple GetClosureTupleFromGenerator(PythonGenerator generator);
    public static MutableTuple GetClosureTupleFromContext(CodeContext context);
    public static CodeContext GetParentContextFromFunction(PythonFunction function);
    public static CodeContext GetParentContextFromGenerator(PythonGenerator generator);
    public static object GetGlobal(CodeContext context, string name);
    public static object GetLocal(CodeContext context, string name);
    internal static object GetVariable(CodeContext context, string name, bool isGlobal, bool lightThrow);
    public static object RawGetGlobal(CodeContext context, string name);
    public static object RawGetLocal(CodeContext context, string name);
    public static void SetGlobal(CodeContext context, string name, object value);
    public static void SetLocal(CodeContext context, string name, object value);
    public static void DeleteGlobal(CodeContext context, string name);
    public static void DeleteLocal(CodeContext context, string name);
    public static PythonGlobal[] GetGlobalArrayFromContext(CodeContext context);
    public static Exception MultipleArgumentError(PythonFunction function, string name);
    public static Exception MultipleKeywordArgumentError(PythonFunction function, string name);
    public static Exception UnexpectedKeywordArgumentError(PythonFunction function, string name);
    public static Exception StaticAssignmentFromInstanceError(PropertyTracker tracker, bool isAssignment);
    public static Exception FunctionBadArgumentError(PythonFunction func, int count);
    public static Exception BadKeywordArgumentError(PythonFunction func, int count);
    public static Exception AttributeErrorForMissingOrReadonly(CodeContext context, PythonType dt, string name);
    public static Exception AttributeErrorForMissingAttribute(object o, string name);
    public static Exception ValueError(string format, Object[] args);
    public static Exception KeyError(object key);
    public static Exception KeyError(string format, Object[] args);
    public static Exception UnicodeDecodeError(string message, Byte[] bytesUnknown, int index);
    public static Exception UnicodeEncodeError(string encoding, string object, int start, int end, string reason);
    public static Exception UnicodeEncodeError(string message, char charUnknown, int index);
    public static Exception UnicodeEncodeError(string message, char charUnknownHigh, char charUnknownLow, int index);
    internal static Exception UnicodeEncodeError(string message, int runeUnknown, int index);
    public static Exception IOError(Exception inner);
    public static Exception IOError(string format, Object[] args);
    internal static Exception OSError(int errno, string strerror, string filename, Nullable`1<int> winerror, string filename2);
    public static Exception EofError(string format, Object[] args);
    public static Exception ZeroDivisionError(string format, Object[] args);
    public static Exception SystemError(string format, Object[] args);
    public static Exception TypeError(string format, Object[] args);
    public static Exception IndexError(string format, Object[] args);
    public static Exception MemoryError();
    public static Exception MemoryError(string message);
    public static Exception MemoryError(string format, Object[] args);
    public static Exception ArithmeticError(string format, Object[] args);
    public static Exception NotImplementedError(string format, Object[] args);
    public static Exception AttributeError(string format, Object[] args);
    public static Exception OverflowError(string format, Object[] args);
    public static Exception WindowsError(string format, Object[] args);
    public static Exception TimeoutError(string format, Object[] args);
    public static Exception SystemExit();
    public static void SyntaxWarning(string message, SourceUnit sourceUnit, SourceSpan span, int errorCode);
    public static SyntaxErrorException SyntaxError(string format, Object[] args);
    public static SyntaxErrorException SyntaxError(string message, SourceUnit sourceUnit, SourceSpan span, int errorCode);
    public static SyntaxErrorException BadSourceEncodingError(string message, int line, string path);
    public static Exception StopIteration();
    public static Exception InvalidType(object o, RuntimeTypeHandle handle);
    public static Exception ZeroDivisionError();
    public static Exception ValueErrorForUnpackMismatch(int left, int argcntafter, int right);
    public static Exception NameError(string name);
    public static Exception GlobalNameError(string name);
    public static Exception TypeErrorForUnboundMethodCall(string methodName, Type methodType, object instance);
    public static Exception TypeErrorForUnboundMethodCall(string methodName, PythonType methodType, object instance);
    public static Exception TypeErrorForIllegalSend();
    public static Exception TypeErrorForArgumentCountMismatch(string methodName, int expectedArgCount, int actualArgCount);
    public static Exception TypeErrorForOptionalArgumentCountMismatch(string methodName, int expectedArgCount, int actualArgCount, bool positional);
    public static Exception TypeErrorForTypeMismatch(string expectedTypeName, object instance);
    public static Exception TypeErrorForBytesLikeTypeMismatch(object instance);
    public static Exception TypeErrorForUnhashableType(string typeName);
    public static Exception TypeErrorForUnhashableObject(object obj);
    internal static Exception TypeErrorForIncompatibleObjectLayout(string prefix, PythonType type, Type newType);
    public static Exception TypeErrorForNonStringAttribute();
    internal static Exception TypeErrorForBadInstance(string template, object instance);
    public static Exception TypeErrorForBinaryOp(string opSymbol, object x, object y);
    public static Exception TypeErrorForUnaryOp(string opSymbol, object x);
    public static Exception TypeErrorForNonIterableObject(object o);
    public static Exception TypeErrorForDefaultArgument(string message);
    public static Exception AttributeErrorForReadonlyAttribute(string typeName, string attributeName);
    public static Exception AttributeErrorForBuiltinAttributeDeletion(string typeName, string attributeName);
    public static Exception MissingInvokeMethodException(object o, string name);
    public static Exception AttributeErrorForObjectMissingAttribute(object obj, string attributeName);
    public static Exception AttributeErrorForMissingAttribute(string typeName, string attributeName);
    public static Exception AttributeErrorForOldInstanceMissingAttribute(string typeName, string attributeName);
    public static Exception AttributeErrorForOldClassMissingAttribute(string typeName, string attributeName);
    public static Exception UncallableError(object func);
    public static Exception TypeErrorForProtectedMember(Type type, string name);
    public static Exception TypeErrorForGenericMethod(Type type, string name);
    public static Exception TypeErrorForUnIndexableObject(object o);
    [NullableContextAttribute("2")]
public static T TypeErrorForBadEnumConversion(object value);
    public static Exception UnreadableProperty();
    public static Exception UnsetableProperty();
    public static Exception UndeletableProperty();
    public static Exception Warning(string format, Object[] args);
    public static List`1<FunctionStack> GetFunctionStack();
    [NullableContextAttribute("2")]
public static List`1<FunctionStack> GetFunctionStackNoCreate();
    public static List`1<FunctionStack> PushFrame(CodeContext context, FunctionCode function);
    [ExtensionAttribute]
internal static LightLambdaExpression ToGenerator(LightLambdaExpression code, bool shouldInterpret, bool debuggable, int compilationThreshold);
    public static void UpdateStackTrace(Exception e, CodeContext context, FunctionCode funcCode, int line);
    public static DynamicStackFrame[] GetDynamicStackFrames(Exception e);
    public static bool ModuleTryGetMember(CodeContext context, PythonModule module, string name, Object& res);
    internal static void ScopeSetMember(CodeContext context, Scope scope, string name, object value);
    internal static object ScopeGetMember(CodeContext context, Scope scope, string name);
    internal static bool ScopeTryGetMember(CodeContext context, Scope scope, string name, Object& value);
    internal static bool ScopeContainsMember(CodeContext context, Scope scope, string name);
    internal static bool ScopeDeleteMember(CodeContext context, Scope scope, string name);
    internal static IList`1<object> ScopeGetMemberNames(CodeContext context, Scope scope);
    public static bool IsExtensionSet(CodeContext codeContext, int id);
    public static object GetExtensionMethodSet(CodeContext context);
    [NullableContextAttribute("0")]
public static Exception ImportError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception RuntimeError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception UnicodeTranslateError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception PendingDeprecationWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception LookupError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception OSError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception DeprecationWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception UnicodeError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception FloatingPointError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ReferenceError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception FutureWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception AssertionError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception RuntimeWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ImportWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception UserWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception SyntaxWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception UnicodeWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception StopIteration(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception BytesWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception BufferError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ResourceWarning(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception FileExistsError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception BlockingIOError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception NotADirectoryError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception InterruptedError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ChildProcessError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception IsADirectoryError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ProcessLookupError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ConnectionError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ConnectionAbortedError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception BrokenPipeError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ConnectionRefusedError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception ConnectionResetError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception RecursionError(string format, Object[] args);
    [NullableContextAttribute("0")]
public static Exception StopAsyncIteration(string format, Object[] args);
    [CompilerGeneratedAttribute]
internal static object <RichCompare>g__InternalCompare|50_0(CodeContext context, PythonOperationKind op, object self, object other);
    [IteratorStateMachineAttribute("IronPython.Runtime.Operations.PythonOps/<<GetEnumeratorValues>g__OneTimeIEnumerableFromEnumerator|134_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<object> <GetEnumeratorValues>g__OneTimeIEnumerableFromEnumerator|134_0(IEnumerator ie);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static BaseException <MakeExceptionWorker>g__GetCause|184_0(CodeContext context, object cause);
    [CompilerGeneratedAttribute]
internal static BaseException <MakeExceptionWorker>g__GetBaseException|184_1(CodeContext context, object type, object value);
}
internal static class IronPython.Runtime.Operations.PythonTypeOps : object {
    private static Dictionary`2<FieldInfo, PythonTypeSlot> _fieldCache;
    private static Dictionary`2<BuiltinFunction, BuiltinMethodDescriptor> _methodCache;
    private static Dictionary`2<BuiltinFunction, ClassMethodDescriptor> _classMethodCache;
    internal static Dictionary`2<BuiltinFunctionKey, BuiltinFunction> _functions;
    private static Dictionary`2<MethodBaseCache, ConstructorFunction> _ctors;
    private static Dictionary`2<EventTracker, ReflectedEvent> _eventCache;
    internal static Dictionary`2<PropertyTracker, ReflectedGetterSetter> _propertyCache;
    private static PythonTypeOps();
    internal static PythonTuple MroToPython(IList`1<PythonType> types);
    internal static string GetModuleName(CodeContext context, Type type);
    internal static object CallParams(CodeContext context, PythonType cls, Object[] argsτ);
    internal static object CallWorker(CodeContext context, PythonType dt, Object[] args);
    internal static object CallWorker(CodeContext context, PythonType dt, IDictionary`2<string, object> kwArgs, Object[] args);
    internal static object CallWorker(CodeContext context, PythonType dt, KwCallInfo args);
    private static object GetInitMethod(CodeContext context, PythonType dt, object newObject);
    private static void AddFinalizer(CodeContext context, PythonType dt, object newObject);
    private static object GetTypeNew(CodeContext context, PythonType dt);
    internal static bool IsRuntimeAssembly(Assembly assembly);
    private static bool ShouldInvokeInit(PythonType cls, PythonType newObjectType, int argCnt);
    internal static string GetName(object o);
    internal static PythonType[] ObjectTypes(Object[] args);
    internal static Type[] ConvertToTypes(PythonType[] pythonTypes);
    private static Type ConvertToType(PythonType pythonType);
    internal static TrackerTypes GetMemberType(MemberGroup members);
    internal static PythonTypeSlot GetSlot(MemberGroup group, string name, bool privateBinding);
    internal static MemberGroup FilterNewSlots(MemberGroup group);
    private static BuiltinFunction GetConstructorFunction(Type t, bool privateBinding);
    internal static MethodBase[] GetConstructors(Type t, bool privateBinding, bool includeProtected);
    private static T CreateEnum(object value);
    internal static bool IsDefaultNew(MethodBase[] targets);
    internal static BuiltinFunction GetConstructorFunction(Type type, string name);
    internal static ReflectedEvent GetReflectedEvent(EventTracker tracker);
    internal static PythonTypeSlot GetFinalSlotForFunction(BuiltinFunction func);
    internal static BuiltinFunction GetBuiltinFunction(Type type, string name, MemberInfo[] mems);
    public static MethodBase[] GetNonBaseHelperMethodInfos(MemberInfo[] members);
    public static MemberInfo[] GetNonBaseHelperMemberInfos(MemberInfo[] members);
    internal static BuiltinFunction GetBuiltinFunction(Type type, string name, Nullable`1<FunctionType> funcType, MemberInfo[] mems);
    internal static BuiltinFunction GetBuiltinFunction(Type type, string cacheName, string pythonName, Nullable`1<FunctionType> funcType, MemberInfo[] mems);
    private static Type GetCommonBaseType(Type xType, Type yType);
    private static Type GetBaseDeclaringType(Type type, MemberInfo[] mems);
    internal static ConstructorFunction GetConstructor(Type type, BuiltinFunction realTarget, MethodBase[] mems);
    internal static FunctionType GetMethodFunctionType(Type type, MemberInfo[] methods);
    internal static FunctionType GetMethodFunctionType(Type type, MemberInfo[] methods, bool checkStatic);
    private static bool IsMethodAlwaysVisible(Type type, MemberInfo[] methods);
    private static bool IsStaticFunction(Type type, MethodInfo mi);
    internal static PythonTypeSlot GetReflectedField(FieldInfo info);
    internal static string GetDocumentation(Type type);
    private static string FixCtorDoc(Type type, string autoDoc);
    internal static ReflectedGetterSetter GetReflectedProperty(PropertyTracker pt, MemberGroup allProperties, bool privateBinding);
    private static MethodInfo FilterProtectedGetterOrSetter(MethodInfo info, bool privateBinding);
    internal static bool TryGetOperator(CodeContext context, object o, string name, Object& callable);
    internal static bool TryInvokeUnaryOperator(CodeContext context, object o, string name, Object& value);
    internal static bool TryInvokeBinaryOperator(CodeContext context, object o, object arg1, string name, Object& value);
    internal static bool TryInvokeTernaryOperator(CodeContext context, object o, object arg1, object arg2, string name, Object& value);
    internal static PythonTuple EnsureBaseType(PythonTuple bases);
    internal static Type GetFinalSystemType(Type type);
}
public static class IronPython.Runtime.Operations.SByteOps : object {
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls, object value);
    public static sbyte Plus(sbyte x);
    public static object Negate(sbyte x);
    public static object Abs(sbyte x);
    public static sbyte OnesComplement(sbyte x);
    public static bool __bool__(sbyte x);
    public static string __repr__(sbyte x);
    public static sbyte __trunc__(sbyte x);
    public static int __hash__(sbyte x);
    public static int __index__(sbyte x);
    public static object Add(sbyte x, sbyte y);
    public static object Subtract(sbyte x, sbyte y);
    public static object Multiply(sbyte x, sbyte y);
    public static double TrueDivide(sbyte x, sbyte y);
    public static object FloorDivide(sbyte x, sbyte y);
    public static sbyte Mod(sbyte x, sbyte y);
    public static object Power(sbyte x, sbyte y);
    public static object LeftShift(sbyte x, BigInteger y);
    public static sbyte RightShift(sbyte x, BigInteger y);
    public static object LeftShift(sbyte x, int y);
    public static sbyte RightShift(sbyte x, int y);
    public static sbyte BitwiseAnd(sbyte x, sbyte y);
    public static sbyte BitwiseOr(sbyte x, sbyte y);
    public static sbyte ExclusiveOr(sbyte x, sbyte y);
    public static bool LessThan(sbyte x, sbyte y);
    public static bool LessThanOrEqual(sbyte x, sbyte y);
    public static bool GreaterThan(sbyte x, sbyte y);
    public static bool GreaterThanOrEqual(sbyte x, sbyte y);
    public static bool Equals(sbyte x, sbyte y);
    public static bool NotEquals(sbyte x, sbyte y);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(sbyte x);
    [ImplicitConversionMethodAttribute]
public static short ConvertToInt16(sbyte x);
    [ExplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(sbyte x);
    [ImplicitConversionMethodAttribute]
public static int ConvertToInt32(sbyte x);
    [ExplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(sbyte x);
    [ImplicitConversionMethodAttribute]
public static long ConvertToInt64(sbyte x);
    [ExplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(sbyte x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(sbyte x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(sbyte x);
    [PropertyMethodAttribute]
public static sbyte Getreal(sbyte x);
    [PropertyMethodAttribute]
public static sbyte Getimag(sbyte x);
    public static sbyte conjugate(sbyte x);
    [PropertyMethodAttribute]
public static sbyte Getnumerator(sbyte x);
    [PropertyMethodAttribute]
public static sbyte Getdenominator(sbyte x);
    public static int bit_length(sbyte value);
}
public static class IronPython.Runtime.Operations.SingleOps : object {
    public static bool LessThan(float x, float y);
    public static bool LessThanOrEqual(float x, float y);
    public static bool GreaterThan(float x, float y);
    public static bool GreaterThanOrEqual(float x, float y);
    public static bool Equals(float x, float y);
    public static bool NotEquals(float x, float y);
    public static float Mod(float x, float y);
    public static object Power(float x, float y);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, object x);
    public static string __str__(CodeContext context, float x);
    public static string __repr__(CodeContext context, float self);
    public static string __format__(CodeContext context, float self, string formatSpec);
    public static int __hash__(float x);
    public static double __float__(float x);
    public static float Plus(float x);
    public static float Negate(float x);
    public static float Abs(float x);
    public static bool __bool__(float x);
    public static object __trunc__(float x);
    public static float Add(float x, float y);
    public static float Subtract(float x, float y);
    public static float Multiply(float x, float y);
    public static float TrueDivide(float x, float y);
    public static float FloorDivide(float x, float y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(float x);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(float x);
    [ExplicitConversionMethodAttribute]
public static short ConvertToInt16(float x);
    [ExplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(float x);
    [ExplicitConversionMethodAttribute]
public static int ConvertToInt32(float x);
    [ExplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(float x);
    [ExplicitConversionMethodAttribute]
public static long ConvertToInt64(float x);
    [ExplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(float x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(float x);
    [PropertyMethodAttribute]
public static float Getreal(float x);
    [PropertyMethodAttribute]
public static float Getimag(float x);
    public static float conjugate(float x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class IronPython.Runtime.Operations.StringOps : object {
    [NullableAttribute("2")]
[DisallowNullAttribute]
private static Encoding _latin1;
    private static CultureInfo CasingCultureInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<Encoding> NullFactory;
    private static IDictionary`2<string, string> DotNetNames;
    private static DecoderFallback ReplacementFallback;
    internal static Encoding Latin1Encoding { get; }
    private static StringOps();
    internal static Encoding get_Latin1Encoding();
    internal static object FastNew(CodeContext context, object x);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, object object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, string object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, ExtensibleString object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, char object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, BigInteger object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, Extensible`1<BigInteger> object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, int object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, bool object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, double object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, Extensible`1<double> object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, float object);
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls, IBufferProtocol object, string encoding, string errors);
    public static bool __contains__(string s, string item);
    public static bool __contains__(string s, char item);
    public static string __format__(CodeContext context, string self, string formatSpec);
    public static IEnumerator`1<string> __iter__(string s);
    public static int __len__(string s);
    public static string GetItem(string s, int index);
    public static string GetItem(string s, object index);
    public static string GetItem(string s, Slice slice);
    [ExtensionAttribute]
public static string capitalize(string self);
    [ExtensionAttribute]
public static string center(string self, int width);
    [ExtensionAttribute]
public static string center(string self, int width, char fillchar);
    [ExtensionAttribute]
public static int count(string self, string sub);
    [ExtensionAttribute]
public static int count(string self, string sub, int start);
    [ExtensionAttribute]
public static int count(string self, string sub, int start, int end);
    [ExtensionAttribute]
public static int count(string self, string sub, object start);
    [ExtensionAttribute]
public static int count(string self, string sub, object start, object end);
    public static Bytes encode(CodeContext context, string s, string encoding, string errors);
    public static Bytes encode(CodeContext context, string s, Encoding encoding, string errors);
    private static string CastString(object o);
    [NullableContextAttribute("2")]
internal static string AsString(object o);
    [ExtensionAttribute]
public static bool endswith(string self, object suffix);
    [ExtensionAttribute]
public static bool endswith(string self, object suffix, int start);
    [ExtensionAttribute]
public static bool endswith(string self, object suffix, int start, int end);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool endswith(string self, object suffix, object start);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool endswith(string self, object suffix, object start, object end);
    public static string expandtabs(string self);
    [ExtensionAttribute]
public static string expandtabs(string self, int tabsize);
    [ExtensionAttribute]
public static int find(string self, string sub);
    [ExtensionAttribute]
public static int find(string self, string sub, int start);
    [ExtensionAttribute]
public static int find(string self, string sub, int start, int end);
    [ExtensionAttribute]
public static int find(string self, string sub, object start);
    [ExtensionAttribute]
public static int find(string self, string sub, object start, object end);
    [ExtensionAttribute]
public static int index(string self, string sub);
    [ExtensionAttribute]
public static int index(string self, string sub, int start);
    [ExtensionAttribute]
public static int index(string self, string sub, int start, int end);
    [ExtensionAttribute]
public static int index(string self, string sub, object start);
    [ExtensionAttribute]
public static int index(string self, string sub, object start, object end);
    [ExtensionAttribute]
public static bool isalnum(string self);
    [ExtensionAttribute]
public static bool isalpha(string self);
    [ExtensionAttribute]
public static bool isdigit(string self);
    [ExtensionAttribute]
public static bool isidentifier(string self);
    internal static bool IsPrintable(char c);
    [ExtensionAttribute]
public static bool isprintable(string self);
    [ExtensionAttribute]
public static bool isspace(string self);
    [ExtensionAttribute]
public static bool isdecimal(string self);
    [ExtensionAttribute]
public static bool isnumeric(string self);
    [ExtensionAttribute]
public static bool islower(string self);
    [ExtensionAttribute]
public static bool isupper(string self);
    [ExtensionAttribute]
public static bool istitle(string self);
    [ExtensionAttribute]
public static string join(string self, object sequence);
    [ExtensionAttribute]
public static string join(string self, PythonList sequence);
    [ExtensionAttribute]
public static string ljust(string self, int width);
    [ExtensionAttribute]
public static string ljust(string self, int width, char fillchar);
    [ExtensionAttribute]
public static string lower(string self);
    [ExtensionAttribute]
internal static string ToLowerAsciiTriggered(string self);
    [ExtensionAttribute]
public static string lstrip(string self);
    [ExtensionAttribute]
public static string lstrip(string self, string chars);
    [StaticExtensionMethodAttribute]
public static PythonDictionary maketrans(string from, string to);
    [StaticExtensionMethodAttribute]
public static PythonDictionary maketrans(string x, string y, string z);
    [ExtensionAttribute]
public static PythonTuple partition(string self, string sep);
    [ExtensionAttribute]
public static string replace(string self, string old, string new);
    [ExtensionAttribute]
public static string replace(string self, string old, string new, int count);
    [ExtensionAttribute]
public static int rfind(string self, string sub);
    [ExtensionAttribute]
public static int rfind(string self, string sub, int start);
    [ExtensionAttribute]
public static int rfind(string self, string sub, int start, int end);
    [ExtensionAttribute]
public static int rfind(string self, string sub, object start);
    [ExtensionAttribute]
public static int rfind(string self, string sub, object start, object end);
    [ExtensionAttribute]
public static int rindex(string self, string sub);
    [ExtensionAttribute]
public static int rindex(string self, string sub, int start);
    [ExtensionAttribute]
public static int rindex(string self, string sub, int start, int end);
    [ExtensionAttribute]
public static int rindex(string self, string sub, object start);
    [ExtensionAttribute]
public static int rindex(string self, string sub, object start, object end);
    [ExtensionAttribute]
public static string rjust(string self, int width);
    [ExtensionAttribute]
public static string rjust(string self, int width, char fillchar);
    [ExtensionAttribute]
public static PythonTuple rpartition(string self, string sep);
    [ExtensionAttribute]
public static PythonList rsplit(string self, string sep, int maxsplit);
    [ExtensionAttribute]
public static string rstrip(string self);
    [ExtensionAttribute]
public static string rstrip(string self, string chars);
    [ExtensionAttribute]
public static PythonList split(string self, string sep, int maxsplit);
    [ExtensionAttribute]
public static PythonList splitlines(string self);
    [ExtensionAttribute]
public static PythonList splitlines(string self, bool keepends);
    [ExtensionAttribute]
public static bool startswith(string self, object prefix);
    [ExtensionAttribute]
public static bool startswith(string self, object prefix, int start);
    [ExtensionAttribute]
public static bool startswith(string self, object prefix, int start, int end);
    [ExtensionAttribute]
public static bool startswith(string self, object prefix, object start);
    [ExtensionAttribute]
public static bool startswith(string self, object prefix, object start, object end);
    [ExtensionAttribute]
public static string strip(string self);
    [ExtensionAttribute]
public static string strip(string self, string chars);
    [ExtensionAttribute]
public static string swapcase(string self);
    [ExtensionAttribute]
public static string title(string self);
    public static string translate(string self, PythonDictionary table);
    [ExtensionAttribute]
private static void AppendValueForTranslate(StringBuilder ret, object mapped);
    public static string translate(string self, string table);
    public static string translate(CodeContext context, string self, object table);
    [ExtensionAttribute]
public static string upper(string self);
    [ExtensionAttribute]
public static string zfill(string self, int width);
    public static string format(CodeContext context, string format_string, Object[] args);
    public static string format(CodeContext context, string format_stringø, IDictionary`2<object, object> kwargsø, Object[] argsø);
    public static string format_map(CodeContext context, string self, IDictionary`2<object, object> mapping);
    public static string Add(string self, string other);
    public static string Add(string self, char other);
    public static string Add(char self, string other);
    public static string Mod(CodeContext context, string self, object other);
    public static object Mod(CodeContext context, object other, string self);
    public static string Multiply(string s, int count);
    public static string Multiply(int other, string self);
    public static object Multiply(string self, Index count);
    public static object Multiply(Index count, string self);
    public static object Multiply(string self, object count);
    public static object Multiply(object count, string self);
    public static bool GreaterThan(string x, string y);
    public static bool LessThan(string x, string y);
    public static bool LessThanOrEqual(string x, string y);
    public static bool GreaterThanOrEqual(string x, string y);
    public static bool Equals(string x, string y);
    public static bool NotEquals(string x, string y);
    [ImplicitConversionMethodAttribute]
public static string ConvertFromChar(char c);
    [ExplicitConversionMethodAttribute]
public static char ConvertToChar(string s);
    [ImplicitConversionMethodAttribute]
public static IEnumerable ConvertToIEnumerable(string s);
    public static object __getnewargs__(CodeContext context, string self);
    public static string __str__(string self);
    public static string __str__(ExtensibleString self);
    public static string __repr__(string self);
    internal static string Quote(string s);
    internal static bool TryGetEncoding(string name, Encoding& encoding);
    private static bool TryGetNonaliasedEncoding(string name, Encoding& encoding);
    private static string ConvertForJoin(object value, int index);
    private static string ReplaceEmpty(string self, string new, int count);
    private static string Reverse(string s);
    internal static string AsciiEncode(string s);
    internal static string ReprEncode(string s, char quote);
    private static string ReprEncode(string s, int start, int count, bool isUniEscape, char quote);
    private static string RawUnicodeEscapeEncode(string s, int start, int count, bool escapeAscii);
    private static void StringBuilderInit(StringBuilder& sb, string s, int start, int end);
    private static bool IsSign(char ch);
    internal static string GetEncodingName(Encoding encoding, bool normalize, string defaultName);
    [NullableContextAttribute("2")]
internal static string NormalizeEncodingName(string name);
    private static string RenormalizeEncodingName(string name);
    internal static string RawDecode(CodeContext context, IBufferProtocol data, string encoding, string errors);
    internal static string DoDecode(CodeContext context, IPythonBuffer buffer, string errors, string encoding, Encoding e, int numBytes);
    [NullableContextAttribute("0")]
private static int GetStartingOffset(ReadOnlySpan`1<byte> bytes, Encoding e);
    internal static Bytes RawEncode(CodeContext context, string s, string encoding, string errors);
    internal static Bytes DoEncodeAscii(string s);
    internal static bool TryEncodeAscii(string s, Bytes& b);
    internal static Bytes DoEncodeUtf8(CodeContext context, string s);
    internal static Bytes DoEncode(CodeContext context, string s, string errors, string encoding, Encoding e, bool includePreamble);
    private static PythonTuple CallUserDecodeOrEncode(CodeContext context, object function, object data, string errors);
    private static Bytes UserEncode(CodeContext context, string encoding, PythonTuple codecInfo, string data, string errors);
    private static string UserDecode(CodeContext context, PythonTuple codecInfo, object data, string errors);
    private static PythonList SplitEmptyString(bool separators);
    private static PythonList SplitInternal(string self, Char[] seps, int maxsplit);
    private static PythonList SplitInternal(string self, string separator, int maxsplit);
    [NullableContextAttribute("2")]
private static void AssertStringOrTuple(object prefix);
    private static string GetString(object obj);
    public static bool endswith(string self, string suffix);
    public static bool endswith(string self, string suffix, int start);
    public static bool endswith(string self, string suffix, int start, int end);
    private static bool endswith(string self, PythonTuple suffix);
    private static bool endswith(string self, PythonTuple suffix, int start, int end);
    public static bool startswith(string self, string prefix);
    public static bool startswith(string self, string prefix, int start);
    public static bool startswith(string self, string prefix, int start, int end);
    private static bool startswith(string self, PythonTuple prefix);
    private static bool startswith(string self, PythonTuple prefix, int start, int end);
    internal static IEnumerable StringEnumerable(string str);
    internal static IEnumerator`1<string> StringEnumerator(string str);
    private static object StrictErrors(object unicodeError);
    private static object IgnoreErrors(object unicodeError);
    private static object ReplaceErrors(object unicodeError);
    private static object XmlCharRefReplaceErrors(object unicodeError);
    private static object BackslashReplaceErrors(object unicodeError);
    private static object NameReplaceErrors(object unicodeError);
    private static object SurrogateEscapeErrors(object unicodeError);
    private static object SurrogatePassErrors(object unicodeError);
    private static object SurrogateErrorsImpl(object unicodeError, DecodeErrorHandler decodeFallback, EncodeErrorHandler encodeFallback);
    internal static void IdentifyUtfEncoding(string encodingName, Int32& charWidth, Boolean& isBigEndian);
    [CompilerGeneratedAttribute]
internal static Encoding <DoDecode>g__setFallback|160_0(Encoding enc, DecoderFallback fb);
    [CompilerGeneratedAttribute]
internal static Encoding <DoEncode>g__setFallback|166_0(Encoding enc, EncoderFallback fb);
    [CompilerGeneratedAttribute]
internal static string <NameReplaceErrors>g__NameReplaceEncode|199_0(string s, int start, int count);
    [CompilerGeneratedAttribute]
internal static string <SurrogateEscapeErrors>g__surrogateEscapeDecode|202_0(IList`1<byte> bytes, int start, Int32& end);
    [CompilerGeneratedAttribute]
internal static Bytes <SurrogateEscapeErrors>g__surrogateEscapeEncode|202_1(string text, int start, Int32& end);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Operations.TypeGroupOps : object {
    public static string __repr__(TypeGroup self);
    public static PythonType GetItem(TypeGroup self, PythonType[] types);
    public static object Call(CodeContext context, TypeGroup self, Object[] args);
    public static object Call(CodeContext context, TypeGroup self, PythonDictionary kwArgs, Object[] args);
    public static PythonType GetItem(TypeGroup self, Object[] types);
    public static PythonType GetItem(TypeGroup self, PythonTuple tuple);
    private static PythonType GetItemHelper(TypeGroup self, PythonType[] types);
}
public static class IronPython.Runtime.Operations.TypeTrackerOps : object {
    [NullableContextAttribute("1")]
[PropertyMethodAttribute]
public static IDictionary Get__dict__(CodeContext context, TypeTracker self);
}
public static class IronPython.Runtime.Operations.UInt16Ops : object {
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls, object value);
    public static ushort Plus(ushort x);
    public static object Negate(ushort x);
    public static ushort Abs(ushort x);
    public static object OnesComplement(ushort x);
    public static bool __bool__(ushort x);
    public static string __repr__(ushort x);
    public static ushort __trunc__(ushort x);
    public static int __hash__(ushort x);
    public static int __index__(ushort x);
    public static object Add(ushort x, ushort y);
    public static object Add(ushort x, short y);
    public static object Add(short x, ushort y);
    public static object Subtract(ushort x, ushort y);
    public static object Subtract(ushort x, short y);
    public static object Subtract(short x, ushort y);
    public static object Multiply(ushort x, ushort y);
    public static object Multiply(ushort x, short y);
    public static object Multiply(short x, ushort y);
    public static double TrueDivide(ushort x, ushort y);
    public static double TrueDivide(ushort x, short y);
    public static double TrueDivide(short x, ushort y);
    public static ushort FloorDivide(ushort x, ushort y);
    public static object FloorDivide(ushort x, short y);
    public static object FloorDivide(short x, ushort y);
    public static ushort Mod(ushort x, ushort y);
    public static int Mod(ushort x, short y);
    public static int Mod(short x, ushort y);
    public static object Power(ushort x, ushort y);
    public static object Power(ushort x, short y);
    public static object Power(short x, ushort y);
    public static object LeftShift(ushort x, BigInteger y);
    public static ushort RightShift(ushort x, BigInteger y);
    public static object LeftShift(ushort x, int y);
    public static ushort RightShift(ushort x, int y);
    public static ushort BitwiseAnd(ushort x, ushort y);
    public static int BitwiseAnd(ushort x, short y);
    public static int BitwiseAnd(short x, ushort y);
    public static ushort BitwiseOr(ushort x, ushort y);
    public static int BitwiseOr(ushort x, short y);
    public static int BitwiseOr(short x, ushort y);
    public static ushort ExclusiveOr(ushort x, ushort y);
    public static int ExclusiveOr(ushort x, short y);
    public static int ExclusiveOr(short x, ushort y);
    public static bool LessThan(ushort x, ushort y);
    public static bool LessThan(ushort x, short y);
    public static bool LessThanOrEqual(ushort x, ushort y);
    public static bool LessThanOrEqual(ushort x, short y);
    public static bool GreaterThan(ushort x, ushort y);
    public static bool GreaterThan(ushort x, short y);
    public static bool GreaterThanOrEqual(ushort x, ushort y);
    public static bool GreaterThanOrEqual(ushort x, short y);
    public static bool Equals(ushort x, ushort y);
    public static bool Equals(ushort x, short y);
    public static bool NotEquals(ushort x, ushort y);
    public static bool NotEquals(ushort x, short y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(ushort x);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(ushort x);
    [ExplicitConversionMethodAttribute]
public static short ConvertToInt16(ushort x);
    [ImplicitConversionMethodAttribute]
public static int ConvertToInt32(ushort x);
    [ImplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(ushort x);
    [ImplicitConversionMethodAttribute]
public static long ConvertToInt64(ushort x);
    [ImplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(ushort x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(ushort x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(ushort x);
    [PropertyMethodAttribute]
public static ushort Getreal(ushort x);
    [PropertyMethodAttribute]
public static ushort Getimag(ushort x);
    public static ushort conjugate(ushort x);
    [PropertyMethodAttribute]
public static ushort Getnumerator(ushort x);
    [PropertyMethodAttribute]
public static ushort Getdenominator(ushort x);
    public static int bit_length(ushort value);
}
public static class IronPython.Runtime.Operations.UInt32Ops : object {
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls, object value);
    public static UInt32 Plus(UInt32 x);
    public static object Negate(UInt32 x);
    public static UInt32 Abs(UInt32 x);
    public static object OnesComplement(UInt32 x);
    public static bool __bool__(UInt32 x);
    public static string __repr__(UInt32 x);
    public static UInt32 __trunc__(UInt32 x);
    public static int __hash__(UInt32 x);
    public static BigInteger __index__(UInt32 x);
    public static object Add(UInt32 x, UInt32 y);
    public static object Add(UInt32 x, int y);
    public static object Add(int x, UInt32 y);
    public static object Subtract(UInt32 x, UInt32 y);
    public static object Subtract(UInt32 x, int y);
    public static object Subtract(int x, UInt32 y);
    public static object Multiply(UInt32 x, UInt32 y);
    public static object Multiply(UInt32 x, int y);
    public static object Multiply(int x, UInt32 y);
    public static double TrueDivide(UInt32 x, UInt32 y);
    public static double TrueDivide(UInt32 x, int y);
    public static double TrueDivide(int x, UInt32 y);
    public static UInt32 FloorDivide(UInt32 x, UInt32 y);
    public static object FloorDivide(UInt32 x, int y);
    public static object FloorDivide(int x, UInt32 y);
    public static UInt32 Mod(UInt32 x, UInt32 y);
    public static long Mod(UInt32 x, int y);
    public static long Mod(int x, UInt32 y);
    public static object Power(UInt32 x, UInt32 y);
    public static object Power(UInt32 x, int y);
    public static object Power(int x, UInt32 y);
    public static object LeftShift(UInt32 x, BigInteger y);
    public static UInt32 RightShift(UInt32 x, BigInteger y);
    public static UInt32 BitwiseAnd(UInt32 x, UInt32 y);
    public static long BitwiseAnd(UInt32 x, int y);
    public static long BitwiseAnd(int x, UInt32 y);
    public static UInt32 BitwiseOr(UInt32 x, UInt32 y);
    public static long BitwiseOr(UInt32 x, int y);
    public static long BitwiseOr(int x, UInt32 y);
    public static UInt32 ExclusiveOr(UInt32 x, UInt32 y);
    public static long ExclusiveOr(UInt32 x, int y);
    public static long ExclusiveOr(int x, UInt32 y);
    public static bool LessThan(UInt32 x, UInt32 y);
    public static bool LessThan(UInt32 x, int y);
    public static bool LessThanOrEqual(UInt32 x, UInt32 y);
    public static bool LessThanOrEqual(UInt32 x, int y);
    public static bool GreaterThan(UInt32 x, UInt32 y);
    public static bool GreaterThan(UInt32 x, int y);
    public static bool GreaterThanOrEqual(UInt32 x, UInt32 y);
    public static bool GreaterThanOrEqual(UInt32 x, int y);
    public static bool Equals(UInt32 x, UInt32 y);
    public static bool Equals(UInt32 x, int y);
    public static bool NotEquals(UInt32 x, UInt32 y);
    public static bool NotEquals(UInt32 x, int y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(UInt32 x);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(UInt32 x);
    [ExplicitConversionMethodAttribute]
public static short ConvertToInt16(UInt32 x);
    [ExplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(UInt32 x);
    [ExplicitConversionMethodAttribute]
public static int ConvertToInt32(UInt32 x);
    [ImplicitConversionMethodAttribute]
public static long ConvertToInt64(UInt32 x);
    [ImplicitConversionMethodAttribute]
public static ulong ConvertToUInt64(UInt32 x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(UInt32 x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(UInt32 x);
    [PropertyMethodAttribute]
public static UInt32 Getreal(UInt32 x);
    [PropertyMethodAttribute]
public static UInt32 Getimag(UInt32 x);
    public static UInt32 conjugate(UInt32 x);
    [PropertyMethodAttribute]
public static UInt32 Getnumerator(UInt32 x);
    [PropertyMethodAttribute]
public static UInt32 Getdenominator(UInt32 x);
    public static int bit_length(UInt32 value);
}
public static class IronPython.Runtime.Operations.UInt64Ops : object {
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls);
    [StaticExtensionMethodAttribute]
public static object __new__(PythonType cls, object value);
    public static ulong Plus(ulong x);
    public static object Negate(ulong x);
    public static ulong Abs(ulong x);
    public static object OnesComplement(ulong x);
    public static bool __bool__(ulong x);
    public static string __repr__(ulong x);
    public static ulong __trunc__(ulong x);
    public static int __hash__(ulong x);
    public static BigInteger __index__(ulong x);
    public static object Add(ulong x, ulong y);
    public static object Add(ulong x, long y);
    public static object Add(long x, ulong y);
    public static object Subtract(ulong x, ulong y);
    public static object Subtract(ulong x, long y);
    public static object Subtract(long x, ulong y);
    public static object Multiply(ulong x, ulong y);
    public static object Multiply(ulong x, long y);
    public static object Multiply(long x, ulong y);
    public static double TrueDivide(ulong x, ulong y);
    public static double TrueDivide(ulong x, long y);
    public static double TrueDivide(long x, ulong y);
    public static ulong FloorDivide(ulong x, ulong y);
    public static object FloorDivide(ulong x, long y);
    public static object FloorDivide(long x, ulong y);
    public static ulong Mod(ulong x, ulong y);
    public static BigInteger Mod(ulong x, long y);
    public static BigInteger Mod(long x, ulong y);
    public static object Power(ulong x, ulong y);
    public static object Power(ulong x, long y);
    public static object Power(long x, ulong y);
    public static object LeftShift(ulong x, BigInteger y);
    public static ulong RightShift(ulong x, BigInteger y);
    public static ulong BitwiseAnd(ulong x, ulong y);
    public static BigInteger BitwiseAnd(ulong x, long y);
    public static BigInteger BitwiseAnd(long x, ulong y);
    public static ulong BitwiseOr(ulong x, ulong y);
    public static BigInteger BitwiseOr(ulong x, long y);
    public static BigInteger BitwiseOr(long x, ulong y);
    public static ulong ExclusiveOr(ulong x, ulong y);
    public static BigInteger ExclusiveOr(ulong x, long y);
    public static BigInteger ExclusiveOr(long x, ulong y);
    public static bool LessThan(ulong x, ulong y);
    public static bool LessThan(ulong x, long y);
    public static bool LessThanOrEqual(ulong x, ulong y);
    public static bool LessThanOrEqual(ulong x, long y);
    public static bool GreaterThan(ulong x, ulong y);
    public static bool GreaterThan(ulong x, long y);
    public static bool GreaterThanOrEqual(ulong x, ulong y);
    public static bool GreaterThanOrEqual(ulong x, long y);
    public static bool Equals(ulong x, ulong y);
    public static bool Equals(ulong x, long y);
    public static bool NotEquals(ulong x, ulong y);
    public static bool NotEquals(ulong x, long y);
    [ExplicitConversionMethodAttribute]
public static sbyte ConvertToSByte(ulong x);
    [ExplicitConversionMethodAttribute]
public static byte ConvertToByte(ulong x);
    [ExplicitConversionMethodAttribute]
public static short ConvertToInt16(ulong x);
    [ExplicitConversionMethodAttribute]
public static ushort ConvertToUInt16(ulong x);
    [ExplicitConversionMethodAttribute]
public static int ConvertToInt32(ulong x);
    [ExplicitConversionMethodAttribute]
public static UInt32 ConvertToUInt32(ulong x);
    [ExplicitConversionMethodAttribute]
public static long ConvertToInt64(ulong x);
    [ImplicitConversionMethodAttribute]
public static float ConvertToSingle(ulong x);
    [ImplicitConversionMethodAttribute]
public static double ConvertToDouble(ulong x);
    [PropertyMethodAttribute]
public static ulong Getreal(ulong x);
    [PropertyMethodAttribute]
public static ulong Getimag(ulong x);
    public static ulong conjugate(ulong x);
    [PropertyMethodAttribute]
public static ulong Getnumerator(ulong x);
    [PropertyMethodAttribute]
public static ulong Getdenominator(ulong x);
    public static int bit_length(ulong value);
}
public class IronPython.Runtime.Operations.UserTypeDebugView : object {
    private IPythonObject _userObject;
    public PythonType __class__ { get; }
    [DebuggerBrowsableAttribute("3")]
internal List`1<ObjectDebugView> Members { get; }
    public UserTypeDebugView(IPythonObject userObject);
    public PythonType get___class__();
    internal List`1<ObjectDebugView> get_Members();
}
public static class IronPython.Runtime.Operations.UserTypeOps : object {
    public static string ToStringReturnHelper(object o);
    public static PythonDictionary SetDictHelper(PythonDictionary& dict, PythonDictionary value);
    public static object GetPropertyHelper(object prop, object instance, string name);
    public static void SetPropertyHelper(object prop, object instance, object newValue, string name);
    public static bool SetWeakRefHelper(IPythonObject obj, WeakRefTracker value);
    public static WeakRefTracker GetWeakRefHelper(IPythonObject obj);
    public static void SetFinalizerHelper(IPythonObject obj, WeakRefTracker value);
    public static Object[] GetSlotsCreate(IPythonObject obj, Object[]& slots);
    public static void AddRemoveEventHelper(object method, IPythonObject instance, object eventValue, string name);
    public static DynamicMetaObject GetMetaObjectHelper(IPythonObject self, Expression parameter, DynamicMetaObject baseMetaObject);
    public static bool TryGetDictionaryValue(PythonDictionary dict, string name, int keyVersion, int keyIndex, Object& res);
    public static object SetDictionaryValue(IPythonObject self, string name, object value);
    public static object SetDictionaryValueOptimized(IPythonObject ipo, string name, object value, int keysVersion, int index);
    public static object FastSetDictionaryValue(PythonDictionary& dict, string name, object value);
    public static object FastSetDictionaryValueOptimized(PythonType type, PythonDictionary& dict, string name, object value, int keysVersion, int index);
    public static object RemoveDictionaryValue(IPythonObject self, string name);
    internal static PythonDictionary GetDictionary(IPythonObject self);
    public static string ToStringHelper(IPythonObject o);
    public static bool TryGetNonInheritedMethodHelper(PythonType dt, object instance, string name, Object& callTarget);
    private static bool LookupValue(PythonType dt, object instance, string name, Object& value);
    public static bool TryGetNonInheritedValueHelper(IPythonObject instance, string name, Object& callTarget);
    public static object GetAttribute(CodeContext context, object self, string name, PythonTypeSlot getAttributeSlot, PythonTypeSlot getAttrSlot, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, string, object>>> callSite);
    public static object GetAttributeNoThrow(CodeContext context, object self, string name, PythonTypeSlot getAttributeSlot, PythonTypeSlot getAttrSlot, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, string, object>>> callSite);
    private static CallSite`1<Func`5<CallSite, CodeContext, object, string, object>> MakeGetAttrSite(CodeContext context);
    internal static FastBindResult`1<T> MakeGetBinding(CodeContext codeContext, CallSite`1<T> site, IPythonObject self, PythonGetMemberBinder getBinder);
    internal static FastBindResult`1<T> MakeSetBinding(CodeContext codeContext, CallSite`1<T> site, IPythonObject self, object value, PythonSetMemberBinder setBinder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Runtime.OrderedLocker : ValueType {
    private object _one;
    private object _two;
    private bool _oneLocked;
    private bool _twoLocked;
    public OrderedLocker(object one, object two);
    public sealed virtual void Dispose();
}
internal class IronPython.Runtime.OutputWriter : TextWriter {
    private PythonContext _context;
    private bool _isErrorOutput;
    public object Sink { get; }
    public Encoding Encoding { get; }
    public OutputWriter(PythonContext context, bool isErrorOutput);
    public object get_Sink();
    public virtual Encoding get_Encoding();
    public virtual void Write(string value);
    public virtual void Write(char value);
    public virtual void Write(Char[] value);
    public virtual void Flush();
}
public class IronPython.Runtime.PlatformsAttribute : Attribute {
    public static PlatformID[] WindowsFamily;
    public static PlatformID[] UnixFamily;
    [CompilerGeneratedAttribute]
private PlatformID[] <ValidPlatforms>k__BackingField;
    public PlatformID[] ValidPlatforms { get; protected set; }
    public bool IsPlatformValid { get; }
    private static PlatformsAttribute();
    [CompilerGeneratedAttribute]
public PlatformID[] get_ValidPlatforms();
    [CompilerGeneratedAttribute]
protected void set_ValidPlatforms(PlatformID[] value);
    public bool get_IsPlatformValid();
    protected void SetValidPlatforms(PlatformFamily validPlatformFamily);
}
public class IronPython.Runtime.Profiler : object {
    private Dictionary`2<MethodBase, int> _methods;
    private Dictionary`2<string, int> _names;
    private List`1<string> _counters;
    private List`1<Int64[0...,0...]> _profiles;
    private Int64[0...,0...] _profileData;
    private static int _initialSize;
    private static int TimeInBody;
    private static int TimeInChildMethods;
    private static int NumberOfCalls;
    private static object _profileKey;
    private static Profiler();
    public static Profiler GetProfiler(PythonContext context);
    private static string FormatMethodName(MethodBase method);
    private int GetProfilerIndex(MethodBase method);
    private int GetProfilerIndex(string name);
    private int GetNewProfilerIndex(string name);
    public List`1<Data> GetProfile(bool includeUnused);
    public void Reset();
    private static long DateTimeTicksFromTimeData(long elapsedStopwatchTicks);
    public long StartCall(int index);
    public long StartNestedCall(int index, long timestamp);
    public long FinishNestedCall(int index, long timestamp);
    public void FinishCall(int index, long timestamp);
    internal Expression AddOuterProfiling(Expression body, ParameterExpression tick, int profileIndex);
    internal Expression AddInnerProfiling(Expression body, ParameterExpression tick, int profileIndex);
    private static bool IgnoreMethod(MethodBase method);
    internal Expression AddProfiling(Expression body, ParameterExpression tick, string name, bool unique);
    internal Expression AddProfiling(Expression body, MethodBase method);
}
[AttributeUsageAttribute("64")]
public class IronPython.Runtime.ProfilerTreatsAsExternalAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class IronPython.Runtime.PythonBufferExtensions : object {
    [ExtensionAttribute]
public static int NumBytes(IPythonBuffer buffer);
    [ExtensionAttribute]
public static BufferBytesEnumerator EnumerateBytes(IPythonBuffer buffer);
    [ExtensionAttribute]
public static bool IsCContiguous(IPythonBuffer buffer);
    [ExtensionAttribute]
public static Byte[] ToArray(IPythonBuffer buffer);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void CopyTo(IPythonBuffer buffer, Span`1<byte> dest);
    [ExtensionAttribute]
internal static Byte[] AsUnsafeArray(IPythonBuffer buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonTypeAttribute("bytes_iterator")]
public class IronPython.Runtime.PythonBytesIterator : object {
    private IList`1<byte> _bytes;
    private int _index;
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal PythonBytesIterator(IList`1<byte> bytes);
    public int __length_hint__();
    public PythonTuple __reduce__(CodeContext context);
    public void __setstate__(int state);
    public sealed virtual int get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Reset();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
}
public class IronPython.Runtime.PythonContext : LanguageContext {
    internal static string IronPythonDisplayName;
    internal static string IronPythonNames;
    internal static string IronPythonFileExtensions;
    private static Guid PythonLanguageGuid;
    private static Guid LanguageVendor_Microsoft;
    private Dictionary`2<string, ModuleGlobalCache> _builtinCache;
    private AssemblyResolveHolder _resolveHolder;
    private HashSet`1<Assembly> _loadedAssemblies;
    private PythonService _pythonService;
    private string _initialExecutable;
    private string _initialVersionString;
    private PythonModule _clrModule;
    private PythonFileManager _fileManager;
    private ConcurrentDictionary`2<string, object> _errorHandlers;
    private List`1<object> _searchFunctions;
    private Dictionary`2<object, object> _moduleState;
    private Dictionary`2<Type, object> _genericSiteStorage;
    private CallSite`1[] _newUnarySites;
    private CallSite`1[] _newTernarySites;
    private Dictionary`2<AttrKey, CallSite`1<Func`4<CallSite, object, object, object>>> _setAttrSites;
    private Dictionary`2<AttrKey, CallSite`1<Action`2<CallSite, object>>> _deleteAttrSites;
    private CallSite`1<Func`8<CallSite, CodeContext, object, string, PythonTuple, object, PythonDictionary, object>> _metaClassSite;
    private CallSite`1<Func`5<CallSite, CodeContext, object, string, object>> _writeSite;
    private CallSite`1<Func`4<CallSite, object, object, object>> _getIndexSite;
    private CallSite`1<Func`4<CallSite, object, object, object>> _equalSite;
    private CallSite`1<Action`3<CallSite, object, object>> _delIndexSite;
    private CallSite`1<Func`4<CallSite, CodeContext, object, object>> _finalizerSite;
    private CallSite`1<Func`4<CallSite, CodeContext, PythonFunction, object>> _functionCallSite;
    private CallSite`1<Func`4<CallSite, object, object, bool>> _greaterThanSite;
    private CallSite`1<Func`4<CallSite, object, object, bool>> _lessThanSite;
    private CallSite`1<Func`4<CallSite, object, object, bool>> _greaterThanEqualSite;
    private CallSite`1<Func`4<CallSite, object, object, bool>> _lessThanEqualSite;
    private CallSite`1<Func`4<CallSite, object, object, bool>> _containsSite;
    private CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>> _callSplatSite;
    private CallSite`1<Func`6<CallSite, CodeContext, object, Object[], IDictionary`2<object, object>, object>> _callDictSite;
    private CallSite`1<Func`6<CallSite, CodeContext, object, object, object, object>> _callDictSiteLooselyTyped;
    private CallSite`1<Func`9<CallSite, CodeContext, object, string, PythonDictionary, PythonDictionary, PythonTuple, int, object>> _importSite;
    private CallSite`1<Func`3<CallSite, object, bool>> _isCallableSite;
    private CallSite`1<Func`3<CallSite, object, IList`1<string>>> _getSignaturesSite;
    private CallSite`1<Func`4<CallSite, object, object, object>> _addSite;
    private CallSite`1<Func`4<CallSite, object, object, object>> _divModSite;
    private CallSite`1<Func`4<CallSite, object, object, object>> _rdivModSite;
    private CallSite`1<Func`5<CallSite, object, object, object, object>> _setIndexSite;
    private CallSite`1<Func`5<CallSite, object, object, object, object>> _delSliceSite;
    private CallSite`1<Func`6<CallSite, object, object, object, object, object>> _setSliceSite;
    private CallSite`1<Func`3<CallSite, object, string>> _docSite;
    private CallSite`1<Func`3<CallSite, object, int>> _intSite;
    private CallSite`1<Func`3<CallSite, object, string>> _tryStringSite;
    private CallSite`1<Func`3<CallSite, object, object>> _tryIntSite;
    private CallSite`1<Func`3<CallSite, object, IEnumerable>> _tryIEnumerableSite;
    private Dictionary`2<Type, CallSite`1<Func`3<CallSite, object, object>>> _implicitConvertSites;
    private Dictionary`2<PythonOperationKind, CallSite`1<Func`4<CallSite, object, object, object>>> _binarySites;
    private Dictionary`2<Type, DefaultPythonComparer> _defaultComparer;
    private Dictionary`2<Type, DefaultPythonLtComparer> _defaultLtComparer;
    private CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> _getItemCallSite;
    private CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> _propGetSite;
    private CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> _propDelSite;
    private CallSite`1<Func`6<CallSite, CodeContext, object, object, object, object>> _propSetSite;
    private CompiledLoader _compiledLoader;
    private bool _importWarningThrows;
    private bool _importedEncodings;
    private Action`1<Action> _commandDispatcher;
    private ReferencesList _referencesList;
    private CultureInfo _collateCulture;
    private CultureInfo _ctypeCulture;
    private CultureInfo _timeCulture;
    private CultureInfo _monetaryCulture;
    private CultureInfo _numericCulture;
    private Dictionary`2<Type, CallSite`1<Func`4<CallSite, object, object, bool>>> _equalSites;
    private Dictionary`2<Type, PythonSiteCache> _systemSiteCache;
    internal static object _syntaxErrorNoCaret;
    private PythonInvokeBinder _invokeNoArgs;
    private PythonInvokeBinder _invokeOneArg;
    private Dictionary`2<CallSignature, PythonInvokeBinder> _invokeBinders;
    private Dictionary`2<string, PythonGetMemberBinder> _getMemberBinders;
    private Dictionary`2<string, PythonGetMemberBinder> _tryGetMemberBinders;
    private Dictionary`2<string, PythonSetMemberBinder> _setMemberBinders;
    private Dictionary`2<string, PythonDeleteMemberBinder> _deleteMemberBinders;
    private Dictionary`2<string, CompatibilityGetMember> _compatGetMember;
    private Dictionary`2<string, CompatibilityGetMember> _compatGetMemberNoThrow;
    private Dictionary`2<PythonOperationKind, PythonOperationBinder> _operationBinders;
    private Dictionary`2<ExpressionType, PythonUnaryOperationBinder> _unaryBinders;
    private PythonBinaryOperationBinder[] _binaryBinders;
    private Dictionary`2<OperationRetTypeKey`1<ExpressionType>, BinaryRetTypeBinder> _binaryRetTypeBinders;
    private Dictionary`2<OperationRetTypeKey`1<PythonOperationKind>, BinaryRetTypeBinder> _operationRetTypeBinders;
    private Dictionary`2[] _conversionBinders;
    private Dictionary`2[] _convertRetObjectBinders;
    private Dictionary`2<CallSignature, CreateFallback> _createBinders;
    private Dictionary`2<CallSignature, CompatibilityInvokeBinder> _compatInvokeBinders;
    private PythonGetSliceBinder _getSlice;
    private PythonSetSliceBinder _setSlice;
    private PythonDeleteSliceBinder _deleteSlice;
    private PythonGetIndexBinder[] _getIndexBinders;
    private PythonSetIndexBinder[] _setIndexBinders;
    private PythonDeleteIndexBinder[] _deleteIndexBinders;
    private static CultureInfo _CCulture;
    private DynamicDelegateCreator _delegateCreator;
    private DebugContext _debugContext;
    private TracePipeline _tracePipeline;
    private ThreadLocal`1<PythonTracebackListener> _tracebackListeners;
    private int _tracebackListenersCount;
    internal CodeList _allCodes;
    internal object _codeCleanupLock;
    internal object _codeUpdateLock;
    internal int _codeCount;
    internal int _nextCodeCleanup;
    private int _recursionLimit;
    internal List`1<FunctionStack> _mainThreadFunctionStack;
    private CallSite`1<Func`4<CallSite, CodeContext, object, object>> _callSite0LightEh;
    private List`1<WeakReference> _weakExtensionMethodSets;
    private CommonDictionaryStorage _systemPythonTypesWeakRefs;
    [CompilerGeneratedAttribute]
private TopNamespaceTracker <TopNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Thread <MainThread>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<object> <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <EqualityComparerNonGeneric>k__BackingField;
    internal HashDelegate InitialHasher;
    internal HashDelegate IntHasher;
    internal HashDelegate DoubleHasher;
    internal HashDelegate StringHasher;
    internal HashDelegate FallbackHasher;
    [CompilerGeneratedAttribute]
private PythonOptions <PythonOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonModule <SystemState>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <SystemStateModules>k__BackingField;
    [CompilerGeneratedAttribute]
private FloatFormat <FloatFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private FloatFormat <DoubleFormat>k__BackingField;
    private object copyRegModule;
    [CompilerGeneratedAttribute]
private Encoding <DefaultEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <BuiltinModules>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, string> <BuiltinModuleNames>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonModule <BuiltinModuleInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonDictionary <BuiltinModuleDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InitialPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeContext <SharedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonOverloadResolverFactory <SharedOverloadResolverFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeContext <SharedClsContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PythonBinder <Binder>k__BackingField;
    private CallSite`1<Func`4<CallSite, CodeContext, object, object>> _callSite0;
    private CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> _callSite1;
    private CallSite`1<Func`6<CallSite, CodeContext, object, object, object, object>> _callSite2;
    private CallSite`1<Func`7<CallSite, CodeContext, object, object, object, object, object>> _callSite3;
    private CallSite`1<Func`8<CallSite, CodeContext, object, object, object, object, object, object>> _callSite4;
    private CallSite`1<Func`9<CallSite, CodeContext, object, object, object, object, object, object, object>> _callSite5;
    private CallSite`1<Func`10<CallSite, CodeContext, object, object, object, object, object, object, object, object>> _callSite6;
    public int RecursionLimit { get; public set; }
    internal bool EnableTracing { get; }
    internal TopNamespaceTracker TopNamespace { get; }
    public Thread MainThread { get; public set; }
    public IEqualityComparer`1<object> EqualityComparer { get; }
    public IEqualityComparer EqualityComparerNonGeneric { get; }
    public LanguageOptions Options { get; }
    internal PythonOptions PythonOptions { get; }
    public Guid VendorGuid { get; }
    public Guid LanguageGuid { get; }
    public PythonModule SystemState { get; }
    public PythonModule ClrModule { get; }
    internal object SystemStandardOut { get; }
    internal object SystemStandardIn { get; }
    internal object SystemStandardError { get; }
    internal IDictionary`2<object, object> SystemStateModules { get; }
    public Version LanguageVersion { get; }
    internal FloatFormat FloatFormat { get; internal set; }
    internal FloatFormat DoubleFormat { get; internal set; }
    public Encoding DefaultEncoding { get; }
    internal Dictionary`2<string, Type> BuiltinModules { get; }
    internal Dictionary`2<Type, string> BuiltinModuleNames { get; }
    public PythonModule BuiltinModuleInstance { get; private set; }
    public PythonDictionary BuiltinModuleDict { get; private set; }
    internal string InitialPrefix { get; private set; }
    internal PythonFileManager RawFileManager { get; }
    internal PythonFileManager FileManager { get; }
    internal ConcurrentDictionary`2<string, object> ErrorHandlers { get; }
    internal List`1<object> SearchFunctions { get; }
    internal CallSite`1<Func`8<CallSite, CodeContext, object, string, PythonTuple, object, PythonDictionary, object>> MetaClassCallSite { get; }
    internal CallSite`1<Func`5<CallSite, CodeContext, object, string, object>> WriteCallSite { get; }
    internal CallSite`1<Func`4<CallSite, object, object, object>> GetIndexSite { get; }
    internal CallSite`1<Func`4<CallSite, object, object, object>> EqualSite { get; }
    internal CallSite`1<Func`4<CallSite, CodeContext, object, object>> FinalizerSite { get; }
    internal CallSite`1<Func`4<CallSite, CodeContext, PythonFunction, object>> FunctionCallSite { get; }
    internal CallSite`1<Func`9<CallSite, CodeContext, object, string, PythonDictionary, PythonDictionary, PythonTuple, int, object>> ImportSite { get; }
    internal CodeContext SharedContext { get; }
    internal PythonOverloadResolverFactory SharedOverloadResolverFactory { get; }
    internal CodeContext SharedClsContext { get; }
    internal ReferencesList ReferencedAssemblies { get; }
    internal static CultureInfo CCulture { get; }
    internal CultureInfo CollateCulture { get; internal set; }
    internal CultureInfo CTypeCulture { get; internal set; }
    internal CultureInfo TimeCulture { get; internal set; }
    internal CultureInfo MonetaryCulture { get; internal set; }
    internal CultureInfo NumericCulture { get; internal set; }
    internal CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> PropertyGetSite { get; }
    internal CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> PropertyDeleteSite { get; }
    internal CallSite`1<Func`6<CallSite, CodeContext, object, object, object, object>> PropertySetSite { get; }
    internal PythonBinder Binder { get; }
    internal CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> GetItemCallSite { get; }
    public DynamicDelegateCreator DelegateCreator { get; }
    internal PythonInvokeBinder InvokeNone { get; }
    internal PythonInvokeBinder InvokeOne { get; }
    internal PythonGetSliceBinder GetSlice { get; }
    internal PythonSetSliceBinder SetSliceBinder { get; }
    internal PythonDeleteSliceBinder DeleteSlice { get; }
    internal DebugContext DebugContext { get; }
    internal ITracePipeline TracePipeline { get; }
    internal CallSite`1<Func`4<CallSite, CodeContext, object, object>> CallSite0 { get; }
    internal CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> CallSite1 { get; }
    internal CallSite`1<Func`6<CallSite, CodeContext, object, object, object, object>> CallSite2 { get; }
    internal CallSite`1<Func`7<CallSite, CodeContext, object, object, object, object, object>> CallSite3 { get; }
    internal CallSite`1<Func`8<CallSite, CodeContext, object, object, object, object, object, object>> CallSite4 { get; }
    internal CallSite`1<Func`9<CallSite, CodeContext, object, object, object, object, object, object, object>> CallSite5 { get; }
    internal CallSite`1<Func`10<CallSite, CodeContext, object, object, object, object, object, object, object, object>> CallSite6 { get; }
    public PythonContext(ScriptDomainManager manager, IDictionary`2<string, object> options);
    private static PythonContext();
    private void ManagerAssemblyLoaded(object sender, AssemblyLoadedEventArgs e);
    public int get_RecursionLimit();
    public void set_RecursionLimit(int value);
    internal bool get_EnableTracing();
    [CompilerGeneratedAttribute]
internal TopNamespaceTracker get_TopNamespace();
    [CompilerGeneratedAttribute]
public Thread get_MainThread();
    [CompilerGeneratedAttribute]
public void set_MainThread(Thread value);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<object> get_EqualityComparer();
    [CompilerGeneratedAttribute]
public IEqualityComparer get_EqualityComparerNonGeneric();
    private int InitialHasherImpl(object o, HashDelegate& dlg);
    private int IntHasherImpl(object o, HashDelegate& dlg);
    private int DoubleHasherImpl(object o, HashDelegate& dlg);
    private int StringHasherImpl(object o, HashDelegate& dlg);
    private int FallbackHasherImpl(object o, HashDelegate& dlg);
    public virtual LanguageOptions get_Options();
    public bool HasModuleState(object key);
    private void EnsureModuleState();
    public object GetModuleState(object key);
    public void SetModuleState(object key, object value);
    public object GetSetModuleState(object key, object value);
    public T GetOrCreateModuleState(object key, Func`1<T> value);
    public PythonType EnsureModuleException(object key, PythonDictionary dict, string name, string module);
    public PythonType EnsureModuleException(object key, PythonType baseType, PythonDictionary dict, string name, string module);
    public PythonType EnsureModuleException(object key, PythonType baseType, Type underlyingType, PythonDictionary dict, string name, string module, Func`3<string, Exception, Exception> exceptionMaker);
    public PythonType EnsureModuleException(object key, PythonType baseType, Type underlyingType, PythonDictionary dict, string name, string module, string documentation, Func`3<string, Exception, Exception> exceptionMaker);
    public PythonType EnsureModuleException(object key, PythonType[] baseTypes, Type underlyingType, PythonDictionary dict, string name, string module);
    [CompilerGeneratedAttribute]
internal PythonOptions get_PythonOptions();
    public virtual Guid get_VendorGuid();
    public virtual Guid get_LanguageGuid();
    [CompilerGeneratedAttribute]
public PythonModule get_SystemState();
    public PythonModule get_ClrModule();
    internal bool TryGetSystemPath(PythonList& path);
    internal object get_SystemStandardOut();
    internal object get_SystemStandardIn();
    internal object get_SystemStandardError();
    [CompilerGeneratedAttribute]
internal IDictionary`2<object, object> get_SystemStateModules();
    internal PythonModule GetModuleByName(string name);
    internal PythonModule GetModuleByPath(string path);
    public virtual Version get_LanguageVersion();
    internal static Version GetPythonVersion();
    [CompilerGeneratedAttribute]
internal FloatFormat get_FloatFormat();
    [CompilerGeneratedAttribute]
internal void set_FloatFormat(FloatFormat value);
    [CompilerGeneratedAttribute]
internal FloatFormat get_DoubleFormat();
    [CompilerGeneratedAttribute]
internal void set_DoubleFormat(FloatFormat value);
    private void InitializeSystemState();
    internal bool EmitDebugSymbols(SourceUnit sourceUnit);
    private void InitializeSysFlags();
    internal bool ShouldInterpret(PythonCompilerOptions options, SourceUnit source);
    private static PythonAst ParseAndBindAst(CompilerContext context);
    internal static ScriptCode CompilePythonCode(SourceUnit sourceUnit, CompilerOptions options, ErrorSink errorSink);
    public virtual ScriptCode CompileSourceCode(SourceUnit sourceUnit, CompilerOptions options, ErrorSink errorSink);
    public virtual ScriptCode LoadCompiledCode(Delegate method, string path, string customData);
    public virtual SourceCodeReader GetSourceReader(Stream stream, Encoding defaultEncoding, string path);
    private static string ReadOneLine(Stream stream, int maxBytes);
    public virtual SourceUnit GenerateSourceCode(CodeObject codeDom, string path, SourceCodeKind kind);
    public virtual Scope GetScope(string path);
    public PythonModule InitializeModule(string fileName, ModuleContext moduleContext, ScriptCode scriptCode, ModuleOptions options);
    public virtual ScopeExtension CreateScopeExtension(Scope scope);
    public PythonModule CompileModule(string fileName, string moduleName, SourceUnit sourceCode, ModuleOptions options);
    public PythonModule CompileModule(string fileName, string moduleName, SourceUnit sourceCode, ModuleOptions options, ScriptCode& scriptCode);
    internal ScriptCode GetScriptCode(SourceUnit sourceCode, string moduleName, ModuleOptions options);
    internal ScriptCode GetScriptCode(SourceUnit sourceCode, string moduleName, ModuleOptions options, CompilationMode mode);
    internal PythonModule GetBuiltinModule(string name);
    internal PythonModule CreateBuiltinModule(string name);
    internal PythonModule CreateBuiltinModule(string moduleName, Type type);
    public void PublishModule(string name, PythonModule module);
    internal PythonModule GetReloadableModule(PythonModule module);
    internal object GetCopyRegModule();
    public object GetWarningsModule();
    public void EnsureEncodings();
    internal ModuleGlobalCache GetModuleGlobalCache(string name);
    internal Assembly LoadAssemblyFromFile(string file);
    internal bool TryLoadAssemblyFromFileWithPath(string path, Assembly& res);
    internal Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    private void HookAssemblyResolve();
    private void UnhookAssemblyResolve();
    public virtual ICollection`1<string> GetSearchPaths();
    public virtual void SetSearchPaths(ICollection`1<string> paths);
    public virtual void Shutdown();
    public virtual string FormatException(Exception exception);
    internal static string FormatPythonSyntaxError(SyntaxErrorException e);
    internal static string GetSourceLine(SyntaxErrorException e);
    private static string FormatCLSException(Exception e);
    internal static string FormatPythonException(object pythonException);
    private static string GetPythonExceptionClassName(object pythonException);
    public virtual IList`1<DynamicStackFrame> GetStackFrames(Exception exception);
    private string FormatStackTraces(Exception e);
    private string FormatStackTraces(Exception e, Boolean& printedHeader);
    private void PrintHeader(StringBuilder& result, Boolean& printedHeader);
    internal string FormatStackTraceNoDetail(Exception e, Boolean& printedHeader);
    private static string FrameToString(DynamicStackFrame frame);
    public virtual TService GetService(Object[] args);
    internal PythonService GetPythonService(ScriptEngine engine);
    internal static PythonOptions GetPythonOptions(CodeContext context);
    internal void InsertIntoPath(int index, string directory);
    internal void AddToPath(string directory);
    internal void AddToPath(string directory, int index);
    internal PythonCompilerOptions GetPythonCompilerOptions();
    public virtual CompilerOptions GetCompilerOptions();
    public virtual CompilerOptions GetCompilerOptions(Scope scope);
    public virtual void GetExceptionMessage(Exception exception, String& message, String& typeName);
    [CompilerGeneratedAttribute]
public virtual Encoding get_DefaultEncoding();
    public string GetDefaultEncodingName();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Type> get_BuiltinModules();
    [CompilerGeneratedAttribute]
internal Dictionary`2<Type, string> get_BuiltinModuleNames();
    private void InitializeBuiltins();
    private Dictionary`2<string, Type> CreateBuiltinTable();
    internal void LoadBuiltins(Dictionary`2<string, Type> builtinTable, Assembly assem, bool updateSys);
    public static string GetIronPythonAssembly(string baseName);
    [CompilerGeneratedAttribute]
public PythonModule get_BuiltinModuleInstance();
    [CompilerGeneratedAttribute]
private void set_BuiltinModuleInstance(PythonModule value);
    [CompilerGeneratedAttribute]
public PythonDictionary get_BuiltinModuleDict();
    [CompilerGeneratedAttribute]
private void set_BuiltinModuleDict(PythonDictionary value);
    private void BuiltinsChanged(object sender, ModuleChangeEventArgs e);
    internal bool TryGetModuleGlobalCache(string name, ModuleGlobalCache& cache);
    internal void SetHostVariables(string prefix, string executable, string versionString);
    [CompilerGeneratedAttribute]
internal string get_InitialPrefix();
    [CompilerGeneratedAttribute]
private void set_InitialPrefix(string value);
    internal void SetHostVariables(PythonDictionary dict);
    private void SetVersionVariables(PythonDictionary dict);
    internal static string GetPlatform();
    internal static string GetVersionString();
    private static string GetInitialPrefix();
    public virtual IList`1<string> GetMemberNames(object obj);
    public virtual string FormatObject(DynamicOperations operations, object obj);
    internal object GetSystemStateValue(string name);
    internal void SetSystemStateValue(string name, object value);
    internal void DelSystemStateValue(string name);
    private void SetStandardIO();
    internal PythonFileManager get_RawFileManager();
    internal PythonFileManager get_FileManager();
    public virtual int ExecuteProgram(SourceUnit program);
    internal ConcurrentDictionary`2<string, object> get_ErrorHandlers();
    internal List`1<object> get_SearchFunctions();
    internal SiteLocalStorage`1<T> GetGenericSiteStorage();
    internal SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> GetGenericCallSiteStorage();
    internal SiteLocalStorage`1<CallSite`1<Func`4<CallSite, CodeContext, object, object>>> GetGenericCallSiteStorage0();
    internal SiteLocalStorage`1<CallSite`1<Func`6<CallSite, CodeContext, object, Object[], IDictionary`2<object, object>, object>>> GetGenericKeywordCallSiteStorage();
    public virtual ConvertBinder CreateConvertBinder(Type toType, Nullable`1<bool> explicitCast);
    public virtual DeleteMemberBinder CreateDeleteMemberBinder(string name, bool ignoreCase);
    public virtual GetMemberBinder CreateGetMemberBinder(string name, bool ignoreCase);
    public virtual InvokeBinder CreateInvokeBinder(CallInfo callInfo);
    public virtual BinaryOperationBinder CreateBinaryOperationBinder(ExpressionType operation);
    public virtual UnaryOperationBinder CreateUnaryOperationBinder(ExpressionType operation);
    public virtual SetMemberBinder CreateSetMemberBinder(string name, bool ignoreCase);
    public virtual CreateInstanceBinder CreateCreateBinder(CallInfo callInfo);
    internal WeakRefTracker GetSystemPythonTypeWeakRef(PythonType type);
    internal bool SetSystemPythonTypeWeakRef(PythonType type, WeakRefTracker value);
    internal void SetSystemPythonTypeFinalizer(PythonType type, WeakRefTracker value);
    internal bool TryConvertToWeakReferenceable(object obj, IWeakReferenceable& weakref);
    internal IWeakReferenceable ConvertToWeakReferenceable(object obj);
    private bool InvokeOperatorWorker(CodeContext context, UnaryOperators oper, object target, Object& result);
    private static string GetUnarySymbol(UnaryOperators oper);
    private bool InvokeOperatorWorker(CodeContext context, TernaryOperators oper, object target, object value1, object value2, Object& result);
    private static string GetTernarySymbol(TernaryOperators oper);
    internal static object InvokeUnaryOperator(CodeContext context, UnaryOperators oper, object target, string errorMsg);
    internal static object InvokeUnaryOperator(CodeContext context, UnaryOperators oper, object target);
    internal static bool TryInvokeTernaryOperator(CodeContext context, TernaryOperators oper, object target, object value1, object value2, Object& res);
    internal void SetAttr(CodeContext context, object o, string name, object value);
    internal void DeleteAttr(CodeContext context, object o, string name);
    internal CallSite`1<Func`8<CallSite, CodeContext, object, string, PythonTuple, object, PythonDictionary, object>> get_MetaClassCallSite();
    internal CallSite`1<Func`5<CallSite, CodeContext, object, string, object>> get_WriteCallSite();
    internal CallSite`1<Func`4<CallSite, object, object, object>> get_GetIndexSite();
    internal void DelIndex(object target, object index);
    internal void DelSlice(object target, object start, object end);
    internal void SetIndex(object a, object b, object c);
    internal void SetSlice(object a, object start, object end, object value);
    internal CallSite`1<Func`4<CallSite, object, object, object>> get_EqualSite();
    internal CallSite`1<Func`4<CallSite, CodeContext, object, object>> get_FinalizerSite();
    internal CallSite`1<Func`4<CallSite, CodeContext, PythonFunction, object>> get_FunctionCallSite();
    public virtual string GetDocumentation(object obj);
    internal PythonSiteCache GetSiteCacheForSystemType(Type type);
    internal int ConvertToInt32(object value);
    internal bool TryConvertToString(object str, String& res);
    internal bool TryConvertToInt32(object val, Int32& res);
    internal bool TryConvertToIEnumerable(object enumerable, IEnumerable& res);
    private CallSite`1<Func`3<CallSite, object, T>> MakeExplicitTrySite();
    private CallSite`1<Func`3<CallSite, object, object>> MakeExplicitStructTrySite();
    private CallSite`1<Func`3<CallSite, object, TRet>> MakeTrySite(ConversionResultKind kind);
    internal object ImplicitConvertTo(object value);
    private CallSite`1<Func`3<CallSite, object, T>> MakeExplicitConvertSite();
    private CallSite`1<Func`3<CallSite, object, object>> MakeImplicitConvertSite();
    private CallSite`1<Func`3<CallSite, object, T>> MakeConvertSite(ConversionResultKind kind);
    internal object Operation(PythonOperationKind operation, object self, object other);
    internal bool GreaterThan(object self, object other);
    internal bool LessThan(object self, object other);
    internal bool GreaterThanOrEqual(object self, object other);
    internal bool LessThanOrEqual(object self, object other);
    internal bool Contains(object self, object other);
    internal static bool Equal(object self, object other);
    internal static bool NotEqual(object self, object other);
    private bool Comparison(object self, object other, ExpressionType operation, CallSite`1& comparisonSite);
    internal CallSite`1<Func`4<CallSite, object, object, bool>> CreateComparisonSite(ExpressionType op);
    private bool Comparison(object self, object other, PythonOperationKind operation, CallSite`1& comparisonSite);
    internal CallSite`1<Func`4<CallSite, object, object, bool>> CreateComparisonSite(PythonOperationKind op);
    internal object CallSplat(object func, Object[] args);
    internal object CallSplat(CodeContext context, object func, Object[] args);
    internal object CallWithContext(CodeContext context, object func, Object[] args);
    internal object Call(CodeContext context, object func);
    private void EnsureCall0SiteLightEh();
    internal object CallLightEh(CodeContext context, object func);
    internal object Call(CodeContext context, object func, object arg0);
    internal object Call(CodeContext context, object func, object arg0, object arg1);
    private void EnsureCallSplatSite();
    internal CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>> MakeSplatSite();
    internal object CallWithKeywords(object func, Object[] args, IDictionary`2<object, object> dict);
    internal object CallWithKeywordsAndContext(CodeContext context, object func, Object[] args, IDictionary`2<object, object> dict);
    internal CallSite`1<Func`6<CallSite, CodeContext, object, Object[], IDictionary`2<object, object>, object>> MakeKeywordSplatSite();
    internal object CallWithKeywords(object func, object args, object dict);
    internal CallSite`1<Func`6<CallSite, CodeContext, object, object, object, object>> MakeKeywordSplatSiteLooselyTyped();
    internal CallSite`1<Func`9<CallSite, CodeContext, object, string, PythonDictionary, PythonDictionary, PythonTuple, int, object>> get_ImportSite();
    public virtual bool IsCallable(object obj);
    internal static int Hash(object o);
    internal static bool IsHashable(object o);
    internal object Add(object x, object y);
    internal CallSite`1<Func`4<CallSite, object, object, object>> EnsureAddSite();
    internal object DivMod(object x, object y);
    internal CompiledLoader GetCompiledLoader();
    [CompilerGeneratedAttribute]
internal CodeContext get_SharedContext();
    [CompilerGeneratedAttribute]
internal PythonOverloadResolverFactory get_SharedOverloadResolverFactory();
    [CompilerGeneratedAttribute]
internal CodeContext get_SharedClsContext();
    internal ReferencesList get_ReferencedAssemblies();
    internal static CultureInfo get_CCulture();
    private static CultureInfo MakeCCulture();
    internal CultureInfo get_CollateCulture();
    internal void set_CollateCulture(CultureInfo value);
    internal CultureInfo get_CTypeCulture();
    internal void set_CTypeCulture(CultureInfo value);
    internal CultureInfo get_TimeCulture();
    internal void set_TimeCulture(CultureInfo value);
    internal CultureInfo get_MonetaryCulture();
    internal void set_MonetaryCulture(CultureInfo value);
    internal CultureInfo get_NumericCulture();
    internal void set_NumericCulture(CultureInfo value);
    public Action`1<Action> GetSetCommandDispatcher(Action`1<Action> newDispatcher);
    public Action`1<Action> GetCommandDispatcher();
    public void DispatchCommand(Action command);
    internal CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> get_PropertyGetSite();
    internal CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> get_PropertyDeleteSite();
    internal CallSite`1<Func`6<CallSite, CodeContext, object, object, object, object>> get_PropertySetSite();
    [CompilerGeneratedAttribute]
internal PythonBinder get_Binder();
    internal IComparer GetComparer(Type type);
    internal IComparer GetLtComparer(Type type);
    internal CallSite`1<Func`5<CallSite, CodeContext, object, int, object>> get_GetItemCallSite();
    internal CallSite`1<Func`4<CallSite, object, object, bool>> GetEqualSite(Type type);
    internal CallSite`1<Func`4<CallSite, object, object, bool>> MakeEqualSite();
    internal static CallSite`1<Func`3<CallSite, object, int>> GetHashSite(PythonType type);
    internal CallSite`1<Func`3<CallSite, object, int>> MakeHashSite();
    public virtual IList`1<string> GetCallSignatures(object obj);
    internal int Collect(int generation);
    public DynamicDelegateCreator get_DelegateCreator();
    internal CompatibilityInvokeBinder CompatInvoke(CallInfo callInfo);
    internal PythonConversionBinder Convert(Type type, ConversionResultKind resultKind);
    internal DynamicMetaObjectBinder ConvertRetObject(Type type, ConversionResultKind resultKind);
    internal CreateFallback Create(CompatibilityInvokeBinder realFallback, CallInfo callInfo);
    internal PythonGetMemberBinder GetMember(string name, bool isNoThrow);
    internal CompatibilityGetMember CompatGetMember(string name, bool isNoThrow);
    internal PythonSetMemberBinder SetMember(string name);
    internal PythonDeleteMemberBinder DeleteMember(string name);
    internal PythonInvokeBinder Invoke(CallSignature signature);
    internal PythonInvokeBinder get_InvokeNone();
    internal PythonInvokeBinder get_InvokeOne();
    internal PythonOperationBinder Operation(PythonOperationKind operation);
    internal PythonUnaryOperationBinder UnaryOperation(ExpressionType operation);
    internal PythonBinaryOperationBinder BinaryOperation(ExpressionType operation);
    internal BinaryRetTypeBinder BinaryOperationRetType(PythonBinaryOperationBinder opBinder, PythonConversionBinder convBinder);
    internal BinaryRetTypeBinder OperationRetType(PythonOperationBinder opBinder, PythonConversionBinder convBinder);
    internal PythonGetIndexBinder GetIndex(int argCount);
    internal PythonSetIndexBinder SetIndex(int argCount);
    internal PythonDeleteIndexBinder DeleteIndex(int argCount);
    internal PythonGetSliceBinder get_GetSlice();
    internal PythonSetSliceBinder get_SetSliceBinder();
    internal PythonDeleteSliceBinder get_DeleteSlice();
    public static PythonContext GetPythonContext(DynamicMetaObjectBinder action);
    public static Expression GetCodeContext(DynamicMetaObjectBinder action);
    public static DynamicMetaObject GetCodeContextMO(DynamicMetaObjectBinder action);
    public static DynamicMetaObject GetCodeContextMOCls(DynamicMetaObjectBinder action);
    public virtual T ScopeGetVariable(Scope scope, string name);
    public virtual object ScopeGetVariable(Scope scope, string name);
    public virtual void ScopeSetVariable(Scope scope, string name, object value);
    public virtual bool ScopeTryGetVariable(Scope scope, string name, Object& value);
    internal DebugContext get_DebugContext();
    private void EnsureDebugContext();
    internal ITracePipeline get_TracePipeline();
    internal void SetTrace(object o);
    internal object CallTracing(object func, PythonTuple args);
    internal object GetTrace();
    internal ExtensionMethodSet UniqifyExtensions(ExtensionMethodSet newSet);
    internal CallSite`1<Func`4<CallSite, CodeContext, object, object>> get_CallSite0();
    private void EnsureCall0Site();
    internal CallSite`1<Func`5<CallSite, CodeContext, object, object, object>> get_CallSite1();
    private void EnsureCall1Site();
    internal CallSite`1<Func`6<CallSite, CodeContext, object, object, object, object>> get_CallSite2();
    private void EnsureCall2Site();
    internal CallSite`1<Func`7<CallSite, CodeContext, object, object, object, object, object>> get_CallSite3();
    private void EnsureCall3Site();
    internal CallSite`1<Func`8<CallSite, CodeContext, object, object, object, object, object, object>> get_CallSite4();
    private void EnsureCall4Site();
    internal CallSite`1<Func`9<CallSite, CodeContext, object, object, object, object, object, object, object>> get_CallSite5();
    private void EnsureCall5Site();
    internal CallSite`1<Func`10<CallSite, CodeContext, object, object, object, object, object, object, object, object>> get_CallSite6();
    private void EnsureCall6Site();
    [CompilerGeneratedAttribute]
private void <.ctor>g__BootstrapImportLib|111_0();
    [CompilerGeneratedAttribute]
private PythonModule <.ctor>g__LoadModuleFromResource|111_2(string name, string resourceName);
    [CompilerGeneratedAttribute]
internal static void <Shutdown>g__Flush|229_0(CodeContext context, object obj);
}
internal class IronPython.Runtime.PythonDebuggingPayload : object {
    public FunctionCode Code;
    private Dictionary`2<int, bool> _handlerLocations;
    private Dictionary`2<int, Dictionary`2<int, bool>> _loopAndFinallyLocations;
    public Dictionary`2<int, bool> HandlerLocations { get; }
    public Dictionary`2<int, Dictionary`2<int, bool>> LoopAndFinallyLocations { get; }
    public PythonDebuggingPayload(FunctionCode code);
    public Dictionary`2<int, bool> get_HandlerLocations();
    public Dictionary`2<int, Dictionary`2<int, bool>> get_LoopAndFinallyLocations();
    private void GatherLocations();
}
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("dict")]
[DebuggerTypeProxyAttribute("IronPython.Runtime.PythonDictionary/DebugProxy")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class IronPython.Runtime.PythonDictionary : object {
    internal DictionaryStorage _storage;
    public static object __hash__;
    public ICollection`1<object> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal PythonDictionary(DictionaryStorage storage);
    internal PythonDictionary(IDictionary dict);
    internal PythonDictionary(IDictionary`2<object, object> dict);
    internal PythonDictionary(PythonDictionary dict);
    internal PythonDictionary(CodeContext context, object o);
    internal PythonDictionary(int size);
    internal static object MakeDict(CodeContext context, PythonType cls);
    internal static PythonDictionary FromIAC(CodeContext context, PythonDictionary iac);
    private static PythonDictionary MakeDictFromIAC(CodeContext context, PythonDictionary iac);
    internal static PythonDictionary MakeSymbolDictionary();
    internal static PythonDictionary MakeSymbolDictionary(int count);
    public void __init__(CodeContext context, object oø, IDictionary`2<object, object> kwArgs);
    public void __init__(CodeContext context, IDictionary`2<object, object> kwArgs);
    public void __init__(CodeContext context, object oø);
    public void __init__();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(object key, object value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool ContainsKey(object key);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual ICollection`1<object> get_Keys();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(object key);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool RemoveDirect(object key);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool TryGetValue(object key, Object& value);
    internal bool TryGetValueNoMissing(object key, Object& value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual ICollection`1<object> get_Values();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(KeyValuePair`2<object, object> item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(KeyValuePair`2<object, object> item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_IsReadOnly();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(KeyValuePair`2<object, object> item);
    [IteratorStateMachineAttribute("IronPython.Runtime.PythonDictionary/<GetEnumerator>d__36")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<KeyValuePair`2<object, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual object __iter__();
    public object get(object key);
    public object get(object key, object defaultValue);
    public virtual object get_Item(Object[] key);
    public virtual void set_Item(Object[] key, object value);
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    internal void SetItem(object key, object value);
    private object GetItem(object key);
    public virtual void __delitem__(object key);
    public virtual void __delitem__(Object[] key);
    public virtual int __len__();
    public void clear();
    public object pop(object key);
    public object pop(object key, object defaultValue);
    public PythonTuple popitem();
    public object setdefault(object key);
    public object setdefault(object key, object defaultValue);
    public DictionaryItemView items();
    public DictionaryKeyView keys();
    public DictionaryValueView values();
    public void update();
    public void update(CodeContext context, IDictionary`2<object, object> otherø);
    public void update(CodeContext context, object otherø);
    public void update(CodeContext context, object otherø, IDictionary`2<object, object> otherArgsø);
    private static object fromkeysAny(CodeContext context, PythonType cls, object o, object value);
    [ClassMethodAttribute]
public static object fromkeys(CodeContext context, PythonType cls, object seq);
    [ClassMethodAttribute]
public static object fromkeys(CodeContext context, PythonType cls, object seq, object value);
    public virtual PythonDictionary copy(CodeContext context);
    public virtual bool __contains__(object key);
    public object __eq__(CodeContext context, object other);
    public object __ne__(CodeContext context, object other);
    public NotImplementedType __gt__(CodeContext context, object other);
    public NotImplementedType __lt__(CodeContext context, object other);
    public NotImplementedType __ge__(CodeContext context, object other);
    public NotImplementedType __le__(CodeContext context, object other);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private bool EqualsWorker(object other, IEqualityComparer comparer);
    private bool ValueEqualsPythonDict(PythonDictionary pd, IEqualityComparer comparer);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public virtual string __repr__(CodeContext context);
    internal bool TryRemoveValue(object key, Object& value);
}
internal class IronPython.Runtime.PythonDocumentationProvider : DocumentationProvider {
    private PythonContext _context;
    public PythonDocumentationProvider(PythonContext context);
    public virtual ICollection`1<MemberDoc> GetMembers(object value);
    private static void AddMember(List`1<MemberDoc> res, KeyValuePair`2<object, object> member, bool fromClass);
    private static MemberDoc MakeMemberDoc(string name, object value, bool fromClass);
    public virtual ICollection`1<OverloadDoc> GetOverloads(object value);
    private static ICollection`1<ParameterDoc> GetParameterDocs(PythonFunction pf);
    private static ICollection`1<OverloadDoc> GetBuiltinFunctionOverloads(BuiltinFunction bf);
    private static OverloadDoc GetOverloadDoc(string name, MethodBase method);
}
internal class IronPython.Runtime.PythonDynamicStackFrame : DynamicStackFrame {
    private CodeContext _context;
    private FunctionCode _code;
    public CodeContext CodeContext { get; }
    public FunctionCode Code { get; }
    public PythonDynamicStackFrame(CodeContext context, FunctionCode funcCode, int line);
    private PythonDynamicStackFrame(SerializationInfo info, StreamingContext context);
    private static MethodBase GetMethod(CodeContext context, FunctionCode funcCode);
    public CodeContext get_CodeContext();
    public FunctionCode get_Code();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class IronPython.Runtime.PythonEncoding : Encoding {
    private static char Pass1Marker;
    private static char Pass2Marker;
    [CompilerGeneratedAttribute]
private int <CharacterWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBigEndian>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Pass1Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Pass2Encoding>k__BackingField;
    [NullableAttribute("2")]
private PythonEncoder _residentEncoder;
    [NullableAttribute("2")]
private PythonDecoder _residentDecoder;
    private static Nullable`1<bool> _hasBugCorefx29898;
    public int CharacterWidth { get; }
    public bool IsBigEndian { get; }
    private Encoding Pass1Encoding { get; }
    private Encoding Pass2Encoding { get; }
    public int CodePage { get; }
    public int WindowsCodePage { get; }
    public string EncodingName { get; }
    public string HeaderName { get; }
    public string BodyName { get; }
    public string WebName { get; }
    public bool IsBrowserDisplay { get; }
    public bool IsBrowserSave { get; }
    public bool IsMailNewsDisplay { get; }
    public bool IsMailNewsSave { get; }
    public bool IsSingleByte { get; }
    public static bool HasBugCorefx29898 { get; }
    public PythonEncoding(Encoding encoding, PythonEncoderFallback encoderFallback, PythonDecoderFallback decoderFallback);
    [CompilerGeneratedAttribute]
public int get_CharacterWidth();
    [CompilerGeneratedAttribute]
public bool get_IsBigEndian();
    [CompilerGeneratedAttribute]
private Encoding get_Pass1Encoding();
    [CompilerGeneratedAttribute]
private Encoding get_Pass2Encoding();
    private void PrepareResidentEncoder();
    private void PrepareResidentDecoder();
    public virtual int GetByteCount(Char[] chars, int index, int count);
    [NullableContextAttribute("0")]
public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(string s);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    [NullableContextAttribute("0")]
public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    [NullableContextAttribute("0")]
public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public string GetString(IPythonBuffer input, int index, int count);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual Encoder GetEncoder();
    public virtual Decoder GetDecoder();
    public virtual int get_CodePage();
    public virtual int get_WindowsCodePage();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual string get_BodyName();
    public virtual string get_WebName();
    public virtual bool get_IsBrowserDisplay();
    public virtual bool get_IsBrowserSave();
    public virtual bool get_IsMailNewsDisplay();
    public virtual bool get_IsMailNewsSave();
    public virtual bool get_IsSingleByte();
    public virtual int GetHashCode();
    public virtual Byte[] GetPreamble();
    public virtual bool IsAlwaysNormalized(NormalizationForm form);
    public static bool get_HasBugCorefx29898();
    internal static int GetUtf16SequenceLength(int rune);
}
[PythonTypeAttribute("enumerable")]
public class IronPython.Runtime.PythonEnumerable : object {
    private object _iterator;
    private PythonEnumerable(object iterator);
    public static bool TryCreate(object baseEnumerator, IEnumerable& enumerator);
    public static IEnumerable Create(object baseObject);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[PythonTypeAttribute("enumerator")]
public class IronPython.Runtime.PythonEnumerator : object {
    private object _baseObject;
    private object _current;
    public object Current { get; }
    internal PythonEnumerator(object iter);
    public static bool TryCastIEnumer(object baseObject, IEnumerator& enumerator);
    public static bool TryCreate(object baseObject, IEnumerator& enumerator);
    public static IEnumerator Create(object baseObject);
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public object __iter__();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class IronPython.Runtime.PythonErrorHandlerEncoding : PythonEncoding {
    private CodeContext _context;
    private string _errors;
    public PythonErrorHandlerEncoding(CodeContext context, Encoding encoding, string errors);
}
internal class IronPython.Runtime.PythonFileManager : object {
    private HybridMapping`1<object> mapping;
    public int AddToStrongMapping(FileIO file, int pos);
    public int AddToStrongMapping(Stream stream, int pos);
    public void Remove(object o);
    public void RemoveObjectOnId(int id);
    public FileIO GetFileFromId(PythonContext context, int id);
    public bool TryGetFileFromId(PythonContext context, int id, FileIO& pf);
    public bool TryGetObjectFromId(PythonContext context, int id, Object& o);
    public object GetObjectFromId(int id);
    public int GetIdFromFile(FileIO pf);
    public void CloseIfLast(CodeContext context, int fd, FileIO pf);
    public void CloseIfLast(int fd, Stream stream);
    public int GetOrAssignIdForFile(FileIO pf);
    public int GetIdFromObject(object o);
    public bool ValidateFdRange(int fd);
}
[PythonTypeAttribute("function")]
[DontMapGetMemberNamesToDirAttribute]
[DebuggerDisplayAttribute("function {__name__} in {__module__}")]
public class IronPython.Runtime.PythonFunction : PythonTypeSlot {
    private CodeContext _context;
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MutableTuple Closure;
    private Object[] _defaults;
    internal PythonDictionary _dict;
    private object _module;
    internal int _id;
    private FunctionCode _code;
    private string _name;
    private string _qualname;
    private object _doc;
    private PythonDictionary _annotations;
    private static Int32[] _depth_fast;
    [ThreadStaticAttribute]
private static int DepthSlow;
    private static int _CurrentId;
    [CompilerGeneratedAttribute]
private PythonDictionary <__kwdefaults__>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FunctionCompatibility>k__BackingField;
    private static Dictionary`2<FunctionCallerKey, FunctionCaller> _functionCallers;
    public object __globals__ { get; public set; }
    public PythonDictionary __annotations__ { get; public set; }
    public PythonTuple __defaults__ { get; public set; }
    public PythonDictionary __kwdefaults__ { get; public set; }
    public object __closure__ { get; public set; }
    public string __name__ { get; public set; }
    public string __qualname__ { get; public set; }
    public PythonDictionary __dict__ { get; public set; }
    public object __doc__ { get; public set; }
    public object __module__ { get; public set; }
    public FunctionCode __code__ { get; public set; }
    internal SourceSpan Span { get; }
    internal String[] ArgNames { get; }
    internal CodeContext Context { get; }
    internal int FunctionCompatibility { get; private set; }
    internal bool IsGeneratorWithExceptionHandling { get; }
    internal int FunctionID { get; }
    internal int ExpandListPosition { get; }
    internal int ExpandDictPosition { get; }
    internal int NormalArgumentCount { get; }
    internal int KeywordOnlyArgumentCount { get; }
    internal int ExtraArguments { get; }
    internal FunctionAttributes Flags { get; }
    internal Object[] Defaults { get; }
    internal bool GetAlwaysSucceeds { get; }
    public PythonFunction(CodeContext context, FunctionCode code, PythonDictionary globals, string name, PythonTuple defaults, PythonTuple closure);
    internal PythonFunction(CodeContext context, FunctionCode funcInfo, object modName, Object[] defaults, PythonDictionary kwdefaults, PythonDictionary annotations, MutableTuple closure);
    private static PythonFunction();
    public object get___globals__();
    public void set___globals__(object value);
    public PythonDictionary get___annotations__();
    public void set___annotations__(PythonDictionary value);
    [PropertyMethodAttribute]
public void Delete__globals__();
    public PythonTuple get___defaults__();
    public void set___defaults__(PythonTuple value);
    [CompilerGeneratedAttribute]
public PythonDictionary get___kwdefaults__();
    [CompilerGeneratedAttribute]
public void set___kwdefaults__(PythonDictionary value);
    public object get___closure__();
    public void set___closure__(object value);
    [PropertyMethodAttribute]
public void Delete__closure__();
    public string get___name__();
    public void set___name__(string value);
    public string get___qualname__();
    public void set___qualname__(string value);
    public PythonDictionary get___dict__();
    public void set___dict__(PythonDictionary value);
    public object get___doc__();
    public void set___doc__(object value);
    public object get___module__();
    public void set___module__(object value);
    public FunctionCode get___code__();
    public void set___code__(FunctionCode value);
    public object __call__(CodeContext context, Object[] args);
    public object __call__(CodeContext context, IDictionary`2<object, object> dict, Object[] args);
    internal SourceSpan get_Span();
    internal String[] get_ArgNames();
    internal CodeContext get_Context();
    internal string GetSignatureString();
    [CompilerGeneratedAttribute]
internal int get_FunctionCompatibility();
    [CompilerGeneratedAttribute]
private void set_FunctionCompatibility(int value);
    private int CalculatedCachedCompat();
    internal bool get_IsGeneratorWithExceptionHandling();
    internal int get_FunctionID();
    internal int get_ExpandListPosition();
    internal int get_ExpandDictPosition();
    internal int get_NormalArgumentCount();
    internal int get_KeywordOnlyArgumentCount();
    internal int get_ExtraArguments();
    internal FunctionAttributes get_Flags();
    internal Object[] get_Defaults();
    internal Exception BadArgumentError(int count);
    internal Exception BadKeywordArgumentError(int count);
    private sealed virtual override IList`1<string> Microsoft.Scripting.Runtime.IMembersList.GetMemberNames();
    private sealed virtual override IList`1<object> IronPython.Runtime.IPythonMembersList.GetMemberNames(CodeContext context);
    private sealed virtual override WeakRefTracker IronPython.Runtime.IWeakReferenceable.GetWeakRef();
    private sealed virtual override bool IronPython.Runtime.IWeakReferenceable.SetWeakRef(WeakRefTracker value);
    private sealed virtual override void IronPython.Runtime.IWeakReferenceable.SetFinalizer(WeakRefTracker value);
    internal PythonDictionary EnsureDict();
    internal static int AddRecursionDepth(int change);
    internal void EnsureID();
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    public sealed virtual string __repr__(CodeContext context);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override FastBindResult`1<T> IronPython.Runtime.Binding.IFastInvokable.MakeInvokeBinding(CallSite`1<T> site, PythonInvokeBinder binder, CodeContext state, Object[] args);
    private bool CanOptimizeCall(PythonInvokeBinder binder, Object[] args);
    private static FunctionCaller GetFunctionCaller(Type callerType, int funcCompat);
}
[PythonTypeAttribute("generator")]
[DontMapIDisposableToContextManagerAttribute]
[DontMapIEnumerableToContainsAttribute]
public class IronPython.Runtime.PythonGenerator : object {
    private Func`2<MutableTuple, object> _next;
    private PythonFunction _function;
    private MutableTuple _data;
    private MutableTuple`2<int, object> _dataTuple;
    private GeneratorFlags _flags;
    private GeneratorFinalizer _finalizer;
    private ExceptionState _state;
    private static GeneratorFinalizer _LastFinalizer;
    private Object[] _excInfo;
    private object _sendValue;
    private WeakRefTracker _tracker;
    [CompilerGeneratedAttribute]
private object <FinalValue>k__BackingField;
    private Nullable`1<FunctionStack> fnStack;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    public FunctionCode gi_code { get; }
    public int gi_running { get; }
    public TraceBackFrame gi_frame { get; }
    public string __name__ { get; }
    private int State { get; private set; }
    private object CurrentValue { get; private set; }
    private object FinalValue { get; private set; }
    internal CodeContext Context { get; }
    internal PythonFunction Function { get; }
    private bool Closed { get; private set; }
    private bool Active { get; private set; }
    internal bool CanSetSysExcInfo { get; }
    internal bool ContainsTryFinally { get; }
    private bool GeneratorStop { get; }
    private object System.Collections.IEnumerator.Current { get; }
    private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
    internal PythonGenerator(PythonFunction function, Func`2<MutableTuple, object> next, MutableTuple data);
    [LightThrowingAttribute]
public object __next__();
    [LightThrowingAttribute]
public object throw(object type);
    [LightThrowingAttribute]
public object throw(object type, object value);
    [LightThrowingAttribute]
public object throw(object type, object value, object traceback);
    [LightThrowingAttribute]
private object throw(object type, object value, object traceback, bool finalizing);
    [LightThrowingAttribute]
public object send(object value);
    [LightThrowingAttribute]
public object close();
    [LightThrowingAttribute]
private object close(bool finalizing);
    public FunctionCode get_gi_code();
    public int get_gi_running();
    public TraceBackFrame get_gi_frame();
    public string get___name__();
    private int get_State();
    private void set_State(int value);
    private object get_CurrentValue();
    private void set_CurrentValue(object value);
    [CompilerGeneratedAttribute]
private object get_FinalValue();
    [CompilerGeneratedAttribute]
private void set_FinalValue(object value);
    private MutableTuple`2<int, object> GetDataTuple();
    private static MutableTuple`2<int, object> GetBigData(MutableTuple data);
    internal CodeContext get_Context();
    internal PythonFunction get_Function();
    private void Finalizer();
    private void HandleFinalizerException(Exception e);
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private void SaveFunctionStack(bool done);
    private void RestoreFunctionStack();
    private bool MoveNextWorker();
    private object NextWorker();
    private void CheckSetActive();
    private static void AlreadyExecuting();
    [LightThrowingAttribute]
internal object CheckThrowableAndReturnSendValue();
    [LightThrowingAttribute]
private object CheckThrowable();
    [LightThrowingAttribute]
private object ThrowThrowable();
    private void Close();
    private void SuppressFinalize();
    private bool get_Closed();
    private void set_Closed(bool value);
    [CompilerGeneratedAttribute]
private bool get_Active();
    [CompilerGeneratedAttribute]
private void set_Active(bool value);
    private bool GetNext();
    internal bool get_CanSetSysExcInfo();
    internal bool get_ContainsTryFinally();
    private bool get_GeneratorStop();
    public sealed virtual string __repr__(CodeContext context);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.Generic.IEnumerator<System.Object>.get_Current();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override WeakRefTracker IronPython.Runtime.IWeakReferenceable.GetWeakRef();
    private sealed virtual override bool IronPython.Runtime.IWeakReferenceable.SetWeakRef(WeakRefTracker value);
    private sealed virtual override void IronPython.Runtime.IWeakReferenceable.SetFinalizer(WeakRefTracker value);
    [CompilerGeneratedAttribute]
private object <CheckThrowableAndReturnSendValue>g__SwapValues|54_0();
}
[AttributeUsageAttribute("964")]
public class IronPython.Runtime.PythonHiddenAttribute : PlatformsAttribute {
    public PythonHiddenAttribute(PlatformID[] hiddenPlatforms);
    public PythonHiddenAttribute(PlatformFamily hiddenPlatformFamily);
    public static bool IsHidden(MemberInfo m, bool inherit);
}
[AttributeUsageAttribute("4")]
public class IronPython.Runtime.PythonHiddenBaseClassAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("list")]
[DebuggerTypeProxyAttribute("IronPython.Runtime.ObjectCollectionDebugProxy")]
[DebuggerDisplayAttribute("list, {Count} items")]
public class IronPython.Runtime.PythonList : object {
    private static int INITIAL_SIZE;
    internal int _size;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Object[] modreq(System.Runtime.CompilerServices.IsVolatile) _data;
    private static object _boxedOne;
    public static object __hash__;
    [NullableAttribute("2")]
public object Item { get; public set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.Generic.ICollection<System.Object>.IsReadOnly { get; }
    private PythonList(IEnumerator e);
    internal PythonList(int capacity);
    private PythonList(Object[] items);
    internal PythonList(object sequence);
    internal PythonList(ICollection items);
    private static PythonList();
    public void __init__();
    public void __init__(IEnumerable enumerable);
    public void __init__(ICollection sequence);
    public void __init__(SetCollection sequence);
    public void __init__(FrozenSetCollection sequence);
    public void __init__(PythonList sequence);
    public void __init__(string sequence);
    public void __init__(CodeContext context, object sequence);
    public static object __new__(CodeContext context, PythonType cls);
    public static object __new__(CodeContext context, PythonType cls, object arg);
    public static object __new__(CodeContext context, PythonType cls, Object[] argsø);
    public static object __new__(CodeContext context, PythonType cls, IDictionary`2<object, object> kwArgsø, Object[] argsø);
    internal static PythonList FromArrayNoCopy(Object[] data);
    internal Object[] GetObjectArray();
    public static PythonList op_Addition(PythonList l1, PythonList l2);
    private static int GetAddSize(int s1, int s2);
    private static int GetNewSize(int length);
    public static PythonList op_Multiply(PythonList self, int count);
    public static PythonList op_Multiply(int count, PythonList self);
    public static object op_Multiply(PythonList self, Index count);
    public static object op_Multiply(Index count, PythonList self);
    public static object op_Multiply(PythonList self, object count);
    public static object op_Multiply(object count, PythonList self);
    private static PythonList MultiplyWorker(PythonList self, int count);
    public virtual int __len__();
    public virtual IEnumerator __iter__();
    public virtual IEnumerator __reversed__();
    [NullableContextAttribute("2")]
public virtual bool __contains__(object value);
    [NullableContextAttribute("2")]
internal bool ContainsWorker(object value);
    internal void AddRange(ICollection`1<T> otherList);
    public virtual object InPlaceAdd(object other);
    public PythonList InPlaceMultiply(int count);
    public object InPlaceMultiply(Index count);
    public object InPlaceMultiply(object count);
    private static PythonList InPlaceMultiplyWorker(PythonList self, int count);
    internal Object[] GetSliceAsArray(int start, int stop);
    public virtual object get_Item(Slice slice);
    public virtual void set_Item(Slice slice, object value);
    [NullableContextAttribute("2")]
private static bool ValueRequiresNoLocks(object value);
    private void SliceNoStep(int start, int stop, PythonList other);
    [NullableContextAttribute("2")]
private void SliceNoStep(int start, int stop, object value);
    [NullableContextAttribute("2")]
private void SliceAssign(int index, object value);
    [NullableContextAttribute("2")]
private void SliceAssignNoLock(int index, object value);
    public virtual void __delitem__(int index);
    [NullableContextAttribute("2")]
public virtual void __delitem__(object index);
    public void __delitem__(Slice slice);
    private void RawDelete(int index);
    internal void EnsureSize(int needed);
    [NullableContextAttribute("2")]
public void append(object item);
    [NullableContextAttribute("2")]
internal void AddNoLock(object item);
    [NullableContextAttribute("2")]
internal void AddNoLockNoDups(object item);
    internal void AppendListNoLockNoDups(PythonList list);
    public void clear();
    [NullableContextAttribute("2")]
public int count(object item);
    public void extend(PythonList seq);
    public void extend(PythonTuple seq);
    [NullableContextAttribute("2")]
public void extend(object seq);
    [NullableContextAttribute("2")]
private void ExtendNoLengthCheck(object seq);
    [NullableContextAttribute("2")]
public int index(object item);
    [NullableContextAttribute("2")]
public int index(object item, int start);
    [NullableContextAttribute("2")]
public int index(object item, int start, int stop);
    [NullableContextAttribute("2")]
public int index(object item, object start);
    [NullableContextAttribute("2")]
public int index(object item, object start, object stop);
    [NullableContextAttribute("2")]
public void insert(int index, object value);
    [NullableContextAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Insert(int index, object value);
    [NullableContextAttribute("2")]
public object pop();
    [NullableContextAttribute("2")]
public object pop(int index);
    [NullableContextAttribute("2")]
public void remove(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    public void reverse();
    internal void reverse(int index, int count);
    public void sort(CodeContext context, IDictionary`2<string, object> kwArgs);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Sort(CodeContext context, object key, bool reverse);
    [NullableContextAttribute("2")]
private Type GetComparisonType();
    private void DoSort(CodeContext context, IComparer cmp, object key, bool reverse, int index, int count);
    internal Object[] ListMergeSort(Object[] sortData, Object[] keys, IComparer cmp, int index, int count, bool reverse);
    private bool DoCompare(Object[] keys, IComparer cmp, int p, int q, bool reverse);
    internal int BinarySearch(int index, int count, object value, IComparer comparer);
    internal bool FastSwap(int i, int j);
    public PythonList copy();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [NullableContextAttribute("2")]
public virtual object get_Item(int index);
    [NullableContextAttribute("2")]
public virtual void set_Item(int index, object value);
    [NullableContextAttribute("2")]
public virtual object get_Item(BigInteger index);
    [NullableContextAttribute("2")]
public virtual void set_Item(BigInteger index, object value);
    [NullableContextAttribute("2")]
public virtual object get_Item(object index);
    [NullableContextAttribute("2")]
public virtual void set_Item(object index, object value);
    private Object[] GetData();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void RemoveAt(int index);
    [NullableContextAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(object value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [NullableContextAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int IndexOf(object value);
    [NullableContextAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int Add(object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual int get_Count();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(Array array, int index);
    internal void CopyTo(Array array, int index, int arrayIndex, int count);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    public virtual string __repr__(CodeContext context);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Add(object item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.get_IsReadOnly();
    [NullableContextAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(object item);
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private Span`1<object> AsSpan();
    private bool Equals(PythonList other, IEqualityComparer comparer);
    public static object op_GreaterThan(PythonList self, PythonList other);
    public static object op_LessThan(PythonList self, PythonList other);
    public static object op_GreaterThanOrEqual(PythonList self, PythonList other);
    public static object op_LessThanOrEqual(PythonList self, PythonList other);
}
[PythonTypeAttribute("list_iterator")]
public class IronPython.Runtime.PythonListIterator : object {
    [NullableAttribute("2")]
private PythonList _list;
    private int _index;
    [NullableAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; }
    [NullableContextAttribute("1")]
internal PythonListIterator(PythonList l);
    [NullableContextAttribute("1")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    [NullableContextAttribute("2")]
public sealed virtual object get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public PythonTuple __reduce__(CodeContext context);
    public void __setstate__(int state);
    public int __length_hint__();
}
[PythonTypeAttribute("list_reverseiterator")]
public class IronPython.Runtime.PythonListReverseIterator : object {
    [NullableAttribute("2")]
private PythonList _list;
    private int _index;
    [NullableAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; }
    [NullableContextAttribute("1")]
internal PythonListReverseIterator(PythonList l);
    [NullableContextAttribute("1")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    [NullableContextAttribute("2")]
public sealed virtual object get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public PythonTuple __reduce__(CodeContext context);
    public void __setstate__(int state);
    public int __length_hint__();
}
[PythonTypeAttribute("module")]
[DebuggerTypeProxyAttribute("IronPython.Runtime.PythonModule/DebugProxy")]
[DebuggerDisplayAttribute("module: {GetName()}")]
public class IronPython.Runtime.PythonModule : object {
    private PythonDictionary _dict;
    private Scope _scope;
    internal PythonDictionary __dict__ { get; }
    public Scope Scope { get; }
    internal bool IsBuiltin { get; }
    internal PythonModule(PythonContext context, Scope scope);
    internal PythonModule(PythonDictionary dict);
    public static PythonModule __new__(CodeContext context, PythonType cls, Object[] argsø);
    [StaticExtensionMethodAttribute]
public static PythonModule __new__(CodeContext context, PythonType cls, IDictionary`2<object, object> kwDict0, Object[] argsø);
    public void __init__(string name);
    public void __init__(string name, string doc);
    public object __getattribute__(CodeContext context, string name);
    internal object GetAttributeNoThrow(CodeContext context, string name);
    public void __setattr__(CodeContext context, string name, object value);
    public void __delattr__(CodeContext context, string name);
    public string __repr__();
    public string __str__();
    internal PythonDictionary get___dict__();
    [PropertyMethodAttribute]
public PythonDictionary Get__dict__();
    [PropertyMethodAttribute]
public void Set__dict__(object value);
    [PropertyMethodAttribute]
public void Delete__dict__();
    public Scope get_Scope();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual DynamicMetaObject GetMetaObject(Expression parameter);
    internal bool get_IsBuiltin();
    internal string GetFile();
    internal string GetName();
    private sealed virtual override IList`1<object> IronPython.Runtime.IPythonMembersList.GetMemberNames(CodeContext context);
    private sealed virtual override IList`1<string> Microsoft.Scripting.Runtime.IMembersList.GetMemberNames();
}
[AttributeUsageAttribute("1")]
public class IronPython.Runtime.PythonModuleAttribute : PlatformsAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; }
    public Type Type { get; }
    public PythonModuleAttribute(string name, Type type);
    public PythonModuleAttribute(string name, Type type, PlatformID[] validPlatforms);
    public PythonModuleAttribute(string name, Type type, PlatformFamily validPlatformFamily);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_Type();
}
internal static class IronPython.Runtime.PythonNarrowing : object {
    public static NarrowingLevel None;
    public static NarrowingLevel BinaryOperator;
    public static NarrowingLevel IndexOperator;
    public static NarrowingLevel All;
}
[CLSCompliantAttribute("True")]
public class IronPython.Runtime.PythonOptions : LanguageOptions {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optimize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StripDocStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <WarningFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <BytesWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inspect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoUserSite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoSite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecursionLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Frames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tracing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LightweightScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableProfiler>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <GCStress>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NoDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoImportLib>k__BackingField;
    public ReadOnlyCollection`1<string> Arguments { get; }
    public bool Optimize { get; }
    public bool StripDocStrings { get; }
    public ReadOnlyCollection`1<string> WarningFilters { get; }
    public Severity BytesWarning { get; }
    public bool Debug { get; }
    public bool Inspect { get; }
    public bool NoUserSite { get; }
    public bool NoSite { get; }
    public bool IgnoreEnvironment { get; }
    public bool Verbose { get; }
    public int RecursionLimit { get; }
    public bool Frames { get; }
    public bool FullFrames { get; }
    public bool Tracing { get; }
    public bool LightweightScopes { get; }
    public bool EnableProfiler { get; public set; }
    public Nullable`1<int> GCStress { get; }
    public Regex NoDebug { get; }
    public bool Quiet { get; }
    internal bool NoImportLib { get; }
    public PythonOptions(IDictionary`2<string, object> options);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public bool get_Optimize();
    [CompilerGeneratedAttribute]
public bool get_StripDocStrings();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_WarningFilters();
    [CompilerGeneratedAttribute]
public Severity get_BytesWarning();
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public bool get_Inspect();
    [CompilerGeneratedAttribute]
public bool get_NoUserSite();
    [CompilerGeneratedAttribute]
public bool get_NoSite();
    [CompilerGeneratedAttribute]
public bool get_IgnoreEnvironment();
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public int get_RecursionLimit();
    [CompilerGeneratedAttribute]
public bool get_Frames();
    [CompilerGeneratedAttribute]
public bool get_FullFrames();
    [CompilerGeneratedAttribute]
public bool get_Tracing();
    [CompilerGeneratedAttribute]
public bool get_LightweightScopes();
    [CompilerGeneratedAttribute]
public bool get_EnableProfiler();
    [CompilerGeneratedAttribute]
public void set_EnableProfiler(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_GCStress();
    [CompilerGeneratedAttribute]
public Regex get_NoDebug();
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
internal bool get_NoImportLib();
    private static IDictionary`2<string, object> EnsureSearchPaths(IDictionary`2<string, object> options);
}
[PythonTypeAttribute("property")]
public class IronPython.Runtime.PythonProperty : PythonTypeDataSlot {
    private object _fget;
    private object _fset;
    private object _fdel;
    private object _doc;
    internal bool GetAlwaysSucceeds { get; }
    public bool __isabstractmethod__ { get; }
    public object fdel { get; public set; }
    public object fset { get; public set; }
    public object fget { get; public set; }
    public PythonProperty(Object[] args);
    public PythonProperty(IDictionary`2<object, object> dict, Object[] args);
    public void __init__(object fget, object fset, object fdel, object doc);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    public bool get___isabstractmethod__();
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static object Get__doc__(CodeContext context, PythonProperty self);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static void Set__doc__(PythonProperty self, object value);
    public object get_fdel();
    public void set_fdel(object value);
    public object get_fset();
    public void set_fset(object value);
    public object get_fget();
    public void set_fget(object value);
    public virtual object __get__(CodeContext context, object instance, object owner);
    public virtual void __set__(CodeContext context, object instance, object value);
    public virtual void __delete__(CodeContext context, object instance);
    public PythonProperty getter(object fget);
    public PythonProperty setter(object fset);
    public PythonProperty deleter(object fdel);
}
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("range")]
[DontMapIEnumerableToContainsAttribute]
public class IronPython.Runtime.PythonRange : object {
    private int _length;
    [CompilerGeneratedAttribute]
private int <start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <stop>k__BackingField;
    [CompilerGeneratedAttribute]
private int <step>k__BackingField;
    public int start { get; private set; }
    public int stop { get; private set; }
    public int step { get; private set; }
    public object Item { get; }
    public object Item { get; }
    public object Item { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public PythonRange(object stop);
    public PythonRange(object start, object stop);
    public PythonRange(object start, object stop, object step);
    private void Initialize(object ostart, object ostop, object ostep);
    [CompilerGeneratedAttribute]
public int get_start();
    [CompilerGeneratedAttribute]
private void set_start(int value);
    [CompilerGeneratedAttribute]
public int get_stop();
    [CompilerGeneratedAttribute]
private void set_stop(int value);
    [CompilerGeneratedAttribute]
public int get_step();
    [CompilerGeneratedAttribute]
private void set_step(int value);
    private int GetLengthHelper();
    public PythonTuple __reduce__();
    public int __len__();
    public object get_Item(int index);
    public object get_Item(object index);
    private long Compute(long index);
    public object get_Item(Slice slice);
    public bool __eq__(PythonRange other);
    public NotImplementedType __eq__(CodeContext context, object other);
    public bool __ne__(PythonRange other);
    public NotImplementedType __ne__(CodeContext context, object other);
    public int __hash__();
    public NotImplementedType __lt__(CodeContext context, object other);
    public NotImplementedType __le__(CodeContext context, object other);
    public NotImplementedType __gt__(CodeContext context, object other);
    public NotImplementedType __ge__(CodeContext context, object other);
    public bool __contains__(CodeContext context, object item);
    private static bool TryConvertToInt(object value, Int32& converted);
    private int CountOf(int value);
    private int CountOf(CodeContext context, object obj);
    private int IndexOf(CodeContext context, object obj);
    public object count(CodeContext context, object value);
    public object index(CodeContext context, object value);
    private int Last();
    public sealed virtual IEnumerator __reversed__();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<int> System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator();
    public sealed virtual string __repr__(CodeContext context);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
[PythonTypeAttribute("range_iterator")]
public class IronPython.Runtime.PythonRangeIterator : object {
    private PythonRange _range;
    private int _value;
    private int _position;
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; }
    private int System.Collections.Generic.IEnumerator<System.Int32>.Current { get; }
    internal PythonRangeIterator(PythonRange range);
    public sealed virtual object get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Reset();
    public PythonTuple __reduce__(CodeContext context);
    public void __setstate__(int position);
    private sealed virtual override int System.Collections.Generic.IEnumerator<System.Int32>.get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    public int __length_hint__();
}
internal class IronPython.Runtime.PythonScopeExtension : ScopeExtension {
    private ModuleContext _modContext;
    private PythonModule _module;
    private Dictionary`2<object, object> _objectKeys;
    public ModuleContext ModuleContext { get; }
    public PythonModule Module { get; }
    public Dictionary`2<object, object> ObjectKeys { get; }
    public PythonScopeExtension(PythonContext context, Scope scope);
    public PythonScopeExtension(PythonContext context, PythonModule module, ModuleContext modContext);
    public ModuleContext get_ModuleContext();
    public PythonModule get_Module();
    public Dictionary`2<object, object> EnsureObjectKeys();
    public Dictionary`2<object, object> get_ObjectKeys();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonTypeAttribute("str_iterator")]
public class IronPython.Runtime.PythonStrIterator : object {
    private string _s;
    private int _index;
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal PythonStrIterator(string s);
    public PythonTuple __reduce__(CodeContext context);
    public void __setstate__(int index);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual string get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Reset();
}
internal class IronPython.Runtime.PythonSurrogateEscapeEncoding : PythonEncoding {
    private static ushort LoneSurrogateBase;
    [NullableContextAttribute("1")]
public PythonSurrogateEscapeEncoding(Encoding encoding);
}
internal class IronPython.Runtime.PythonSurrogatePassEncoding : PythonEncoding {
    private static ushort SurrogateRangeStart;
    private static ushort SurrogateRangeEnd;
    private static byte Utf8LeadByte;
    private static byte Utf8LeadBytePayload;
    private static byte Utf8ContByte;
    private static byte Utf8ContBytePayload;
    [NullableContextAttribute("1")]
public PythonSurrogatePassEncoding(Encoding encoding);
}
internal class IronPython.Runtime.PythonTracebackListener : object {
    private PythonContext _pythonContext;
    private object _traceObject;
    private TracebackDelegate _traceDispatch;
    private bool _inTraceBack;
    private bool _exceptionThrown;
    internal PythonContext PythonContext { get; }
    internal object TraceObject { get; }
    internal bool InTraceBack { get; internal set; }
    internal bool ExceptionThrown { get; }
    internal PythonTracebackListener(PythonContext pythonContext, object traceObject);
    internal PythonContext get_PythonContext();
    internal object get_TraceObject();
    internal bool get_InTraceBack();
    internal void set_InTraceBack(bool value);
    internal bool get_ExceptionThrown();
    public sealed virtual void OnTraceEvent(TraceEventKind kind, string name, string sourceFileName, SourceSpan sourceSpan, Func`1<IDictionary`2<object, object>> scopeCallback, object payload, object customPayload);
    private void DispatchTrace(List`1<FunctionStack> thread, TraceEventKind kind, object payload, TracebackDelegate traceDispatch, object traceDispatchObject, TraceBackFrame pyFrame);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("tuple")]
[DebuggerTypeProxyAttribute("IronPython.Runtime.CollectionDebugProxy")]
[DebuggerDisplayAttribute("tuple, {Count} items")]
public class IronPython.Runtime.PythonTuple : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Object[] _data;
    internal static PythonTuple EMPTY;
    [NullableAttribute("2")]
public object Item { get; }
    [NullableAttribute("2")]
public object Item { get; }
    [NullableAttribute("2")]
public object Item { get; }
    public object Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [NullableAttribute("2")]
private object System.Collections.Generic.IList<System.Object>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<System.Object>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public PythonTuple(object o);
    protected PythonTuple(Object[] items);
    internal PythonTuple(PythonTuple other, object o);
    private static PythonTuple();
    public static PythonTuple __new__(CodeContext context, PythonType cls);
    public static PythonTuple __new__(CodeContext context, PythonType cls, object sequence);
    [NullableContextAttribute("2")]
public int index(object obj, object start);
    [NullableContextAttribute("2")]
public int index(object obj, int start);
    [NullableContextAttribute("2")]
public int index(object obj, object start, object end);
    [NullableContextAttribute("2")]
public int index(object obj, int start, int end);
    [NullableContextAttribute("2")]
public int count(object obj);
    internal static PythonTuple Make(object o);
    internal static PythonTuple MakeTuple(Object[] items);
    [NullableContextAttribute("2")]
private static Object[] MakeItems(object o);
    internal Object[] ToArray();
    public virtual int __len__();
    [NullableContextAttribute("2")]
public virtual object get_Item(int index);
    [NullableContextAttribute("2")]
public virtual object get_Item(object index);
    [NullableContextAttribute("2")]
public virtual object get_Item(BigInteger index);
    public virtual object get_Item(Slice slice);
    public static PythonTuple op_Addition(PythonTuple x, object y);
    public static PythonTuple op_Addition(PythonTuple x, PythonTuple y);
    private static PythonTuple MultiplyWorker(PythonTuple self, int count);
    public static PythonTuple op_Multiply(PythonTuple x, int n);
    public static PythonTuple op_Multiply(int n, PythonTuple x);
    public static object op_Multiply(PythonTuple self, Index count);
    public static object op_Multiply(Index count, PythonTuple self);
    public static object op_Multiply(PythonTuple self, object count);
    public static object op_Multiply(object count, PythonTuple self);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int get_Count();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public virtual IEnumerator __iter__();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    [NullableContextAttribute("2")]
private Object[] Expand(object value);
    public object __getnewargs__();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    [NullableContextAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int IndexOf(object item);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.Generic.IList<System.Object>.Insert(int index, object item);
    private sealed virtual override void System.Collections.Generic.IList<System.Object>.RemoveAt(int index);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.Generic.IList<System.Object>.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.Generic.IList<System.Object>.set_Item(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Add(object item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Object>.Clear();
    [NullableContextAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(object item);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.Remove(object item);
    private ReadOnlySpan`1<object> AsSpan();
    public static object op_GreaterThan(PythonTuple self, PythonTuple other);
    public static object op_LessThan(PythonTuple self, PythonTuple other);
    public static object op_GreaterThanOrEqual(PythonTuple self, PythonTuple other);
    public static object op_LessThanOrEqual(PythonTuple self, PythonTuple other);
    internal bool Equals(PythonTuple other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int GetHashCode(HashDelegate dlg);
    private int GetHashCode(IEqualityComparer comparer);
    public virtual string ToString();
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    public virtual string __repr__(CodeContext context);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual Expression CreateExpression();
}
[PythonTypeAttribute("tuple_iterator")]
public class IronPython.Runtime.PythonTupleEnumerator : object {
    [NullableAttribute("2")]
private PythonTuple _tuple;
    private int _index;
    [NullableAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; }
    [NullableContextAttribute("1")]
internal PythonTupleEnumerator(PythonTuple t);
    [NullableContextAttribute("1")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    [NullableContextAttribute("2")]
public sealed virtual object get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public PythonTuple __reduce__(CodeContext context);
    public void __setstate__(int state);
    public int __length_hint__();
}
[AttributeUsageAttribute("1036")]
public class IronPython.Runtime.PythonTypeAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public PythonTypeAttribute(string name);
    public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonTypeAttribute("reversed")]
public class IronPython.Runtime.ReversedEnumerator : object {
    private int _savedIndex;
    [NullableAttribute("2")]
private object _obj;
    [NullableAttribute("2")]
private object _getItemMethod;
    private int _index;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Current>k__BackingField;
    [NullableAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; private set; }
    protected ReversedEnumerator(int length, object obj, object getitem);
    public static object __new__(CodeContext context, PythonType type, IReversible o);
    public static object __new__(CodeContext context, PythonType type, object o);
    public int __length_hint__();
    public ReversedEnumerator __iter__();
    public PythonTuple __reduce__();
    public void __setstate__(int position);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_Current();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Current(object value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
}
internal class IronPython.Runtime.RuntimeVariablesDictionaryStorage : CustomDictionaryStorage {
    private MutableTuple _boxes;
    private String[] _args;
    internal MutableTuple Tuple { get; }
    internal String[] Names { get; }
    public RuntimeVariablesDictionaryStorage(MutableTuple boxes, String[] args);
    internal MutableTuple get_Tuple();
    internal String[] get_Names();
    [IteratorStateMachineAttribute("IronPython.Runtime.RuntimeVariablesDictionaryStorage/<GetExtraItems>d__7")]
protected virtual IEnumerable`1<KeyValuePair`2<string, object>> GetExtraItems();
    protected virtual bool TrySetExtraValue(string key, object value);
    protected virtual bool TryGetExtraValue(string key, Object& value);
    protected virtual Nullable`1<bool> TryRemoveExtraValue(string key);
    internal ClosureCell GetCell(int i);
}
internal class IronPython.Runtime.ScopeDictionaryStorage : DictionaryStorage {
    private Scope _scope;
    private PythonContext _context;
    public int Count { get; }
    internal Scope Scope { get; }
    public ScopeDictionaryStorage(PythonContext context, Scope scope);
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual bool Contains(object key);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    private bool Remove(object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    internal Scope get_Scope();
}
[PythonTypeAttribute("callable_iterator")]
public class IronPython.Runtime.SentinelIterator : object {
    private object _target;
    private object _sentinel;
    private CodeContext _context;
    private CallSite`1<Func`4<CallSite, CodeContext, object, object>> _site;
    private object _current;
    private bool _sinkState;
    private object System.Collections.IEnumerator.Current { get; }
    private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
    public SentinelIterator(CodeContext context, object target, object sentinel);
    public object __iter__();
    public object __next__();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override object System.Collections.Generic.IEnumerator<System.Object>.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override void System.IDisposable.Dispose();
}
[AttributeUsageAttribute("10624")]
public class IronPython.Runtime.SequenceTypeInfoAttribute : Attribute {
    private ReadOnlyCollection`1<Type> _types;
    public ReadOnlyCollection`1<Type> Types { get; }
    public SequenceTypeInfoAttribute(Type[] types);
    public ReadOnlyCollection`1<Type> get_Types();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonTypeAttribute("set")]
[DebuggerDisplayAttribute("set, {Count} items")]
[DebuggerTypeProxyAttribute("IronPython.Runtime.CollectionDebugProxy")]
public class IronPython.Runtime.SetCollection : object {
    internal SetStorage _items;
    [NullableAttribute("2")]
public static object __hash__;
    [NullableAttribute("2")]
private WeakRefTracker _tracker;
    private SetCollection Empty { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal SetCollection(SetStorage items);
    internal SetCollection(Object[] items);
    public void __init__();
    public void __init__(SetCollection set);
    public void __init__(FrozenSetCollection set);
    [NullableContextAttribute("2")]
public void __init__(object set);
    public static object __new__(CodeContext context, PythonType cls);
    public static object __new__(CodeContext context, PythonType cls, object arg);
    public static object __new__(CodeContext context, PythonType cls, Object[] argsø);
    public static object __new__(CodeContext context, PythonType cls, IDictionary`2<object, object> kwArgs, Object[] argsø);
    private SetCollection get_Empty();
    internal static SetCollection Make(SetStorage items);
    internal static SetCollection Make(object set);
    public SetCollection copy();
    public int __len__();
    [NullableContextAttribute("2")]
public bool __contains__(object item);
    public PythonTuple __reduce__(CodeContext context);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    public object __eq__(object other);
    public object __ne__(object other);
    [NullableContextAttribute("2")]
public void add(object item);
    public void clear();
    [NullableContextAttribute("2")]
public void discard(object item);
    public object pop();
    [NullableContextAttribute("2")]
public void remove(object item);
    public void update(SetCollection set);
    public void update(FrozenSetCollection set);
    [NullableContextAttribute("2")]
public void update(object set);
    public void update(Object[] sets);
    public void intersection_update(SetCollection set);
    public void intersection_update(FrozenSetCollection set);
    [NullableContextAttribute("2")]
public void intersection_update(object set);
    public void intersection_update(Object[] sets);
    public void difference_update(SetCollection set);
    public void difference_update(FrozenSetCollection set);
    [NullableContextAttribute("2")]
public void difference_update(object set);
    public void difference_update(Object[] sets);
    public void symmetric_difference_update(SetCollection set);
    public void symmetric_difference_update(FrozenSetCollection set);
    [NullableContextAttribute("2")]
public void symmetric_difference_update(object set);
    public bool isdisjoint(SetCollection set);
    public bool isdisjoint(FrozenSetCollection set);
    [NullableContextAttribute("2")]
public bool isdisjoint(object set);
    public bool issubset(SetCollection set);
    public bool issubset(FrozenSetCollection set);
    [NullableContextAttribute("2")]
public bool issubset(object set);
    public bool issuperset(SetCollection set);
    public bool issuperset(FrozenSetCollection set);
    [NullableContextAttribute("2")]
public bool issuperset(object set);
    public SetCollection union();
    public SetCollection union(SetCollection set);
    public SetCollection union(FrozenSetCollection set);
    public SetCollection union(object set);
    public SetCollection union(Object[] sets);
    public SetCollection intersection();
    public SetCollection intersection(SetCollection set);
    public SetCollection intersection(FrozenSetCollection set);
    public SetCollection intersection(object set);
    public SetCollection intersection(Object[] sets);
    public SetCollection difference();
    public SetCollection difference(SetCollection set);
    public SetCollection difference(FrozenSetCollection set);
    public SetCollection difference(object set);
    public SetCollection difference(Object[] sets);
    public SetCollection symmetric_difference(SetCollection set);
    public SetCollection symmetric_difference(FrozenSetCollection set);
    public SetCollection symmetric_difference(object set);
    public SetCollection InPlaceBitwiseOr(SetCollection set);
    public SetCollection InPlaceBitwiseOr(FrozenSetCollection set);
    public SetCollection InPlaceBitwiseOr(object set);
    public SetCollection InPlaceBitwiseAnd(SetCollection set);
    public SetCollection InPlaceBitwiseAnd(FrozenSetCollection set);
    public SetCollection InPlaceBitwiseAnd(object set);
    public SetCollection InPlaceExclusiveOr(SetCollection set);
    public SetCollection InPlaceExclusiveOr(FrozenSetCollection set);
    public SetCollection InPlaceExclusiveOr(object set);
    public SetCollection InPlaceSubtract(SetCollection set);
    public SetCollection InPlaceSubtract(FrozenSetCollection set);
    public SetCollection InPlaceSubtract(object set);
    public static SetCollection op_BitwiseOr(SetCollection x, SetCollection y);
    public static SetCollection op_BitwiseAnd(SetCollection x, SetCollection y);
    public static SetCollection op_ExclusiveOr(SetCollection x, SetCollection y);
    public static SetCollection op_Subtraction(SetCollection x, SetCollection y);
    public static SetCollection op_BitwiseOr(SetCollection x, FrozenSetCollection y);
    public static SetCollection op_BitwiseAnd(SetCollection x, FrozenSetCollection y);
    public static SetCollection op_ExclusiveOr(SetCollection x, FrozenSetCollection y);
    public static SetCollection op_Subtraction(SetCollection x, FrozenSetCollection y);
    public static object op_GreaterThan(SetCollection self, object other);
    public static object op_LessThan(SetCollection self, object other);
    public static object op_GreaterThanOrEqual(SetCollection self, object other);
    public static object op_LessThanOrEqual(SetCollection self, object other);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    public virtual string __repr__(CodeContext context);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [NullableContextAttribute("2")]
private sealed virtual override WeakRefTracker IronPython.Runtime.IWeakReferenceable.GetWeakRef();
    private sealed virtual override bool IronPython.Runtime.IWeakReferenceable.SetWeakRef(WeakRefTracker value);
    private sealed virtual override void IronPython.Runtime.IWeakReferenceable.SetFinalizer(WeakRefTracker value);
}
[PythonTypeAttribute("set_iterator")]
public class IronPython.Runtime.SetIterator : object {
    [NullableAttribute("1")]
private SetStorage _items;
    private int _version;
    private int _maxIndex;
    private int _index;
    private int _cnt;
    [NullableAttribute("2")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; }
    [NullableContextAttribute("1")]
internal SetIterator(SetStorage items, bool mutable);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
public sealed virtual object get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Reset();
    [NullableContextAttribute("1")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    [NullableContextAttribute("1")]
public PythonTuple __reduce__(CodeContext context);
    public int __length_hint__();
}
internal class IronPython.Runtime.SetStorage : object {
    internal Bucket[] _buckets;
    internal int _count;
    private int _version;
    internal bool _hasNull;
    private Func`2<object, int> _hashFunc;
    private Func`3<object, object, bool> _eqFunc;
    private Type _itemType;
    private int _maxCount;
    private static int InitialBuckets;
    private static double Load;
    private static double MinLoad;
    private static Type HeterogeneousType;
    internal static object Removed;
    private static Func`2<object, int> _primitiveHash;
    private static Func`2<object, int> _intHash;
    private static Func`2<object, int> _doubleHash;
    private static Func`2<object, int> _tupleHash;
    private static Func`2<object, int> _genericHash;
    private static Func`3<object, object, bool> _stringEquals;
    private static Func`3<object, object, bool> _intEquals;
    private static Func`3<object, object, bool> _doubleEquals;
    private static Func`3<object, object, bool> _tupleEquals;
    private static Func`3<object, object, bool> _genericEquals;
    private static Func`3<object, object, bool> _objectEquals;
    public int Count { get; }
    public int Version { get; }
    public SetStorage(int count);
    private SetStorage(SerializationInfo info, StreamingContext context);
    private static SetStorage();
    private void Initialize();
    private void Initialize(int count);
    public int get_Count();
    public int get_Version();
    public void Add(object item);
    public void AddNoLock(object item);
    private void AddWorker(object item, int hashCode);
    private static bool AddWorker(Bucket[] buckets, object item, int hashCode, Func`3<object, object, bool> eqFunc, Int32& version);
    private void AddOrRemoveWorker(object item, int hashCode);
    public void Clear();
    public void ClearNoLock();
    public SetStorage Clone();
    public bool Contains(object item);
    public bool ContainsAlwaysHash(object item);
    private static bool ContainsWorker(Bucket[] buckets, object item, int hashCode, Func`3<object, object, bool> eqFunc);
    public void CopyTo(SetStorage into);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("IronPython.Runtime.SetStorage/<GetEnumerator>d__35")]
public sealed virtual IEnumerator`1<object> GetEnumerator();
    public PythonList GetItems();
    public bool Pop(Object& item);
    public bool Remove(object item);
    public bool RemoveNoLock(object item);
    internal bool RemoveAlwaysHash(object item);
    private bool RemoveNull();
    private bool RemoveItem(object item);
    private bool RemoveWorker(object item, int hashCode, Func`3<object, object, bool> eqFunc);
    public bool IsDisjoint(SetStorage other);
    public static bool IsDisjoint(SetStorage self, SetStorage other);
    public bool IsSubset(SetStorage other);
    public bool IsStrictSubset(SetStorage other);
    private bool IsSubsetWorker(SetStorage other);
    public void UnionUpdate(SetStorage other);
    public void IntersectionUpdate(SetStorage other);
    public void SymmetricDifferenceUpdate(SetStorage other);
    public void DifferenceUpdate(SetStorage other);
    public static SetStorage Union(SetStorage self, SetStorage other);
    public static SetStorage Intersection(SetStorage self, SetStorage other);
    public static SetStorage SymmetricDifference(SetStorage self, SetStorage other);
    public static SetStorage Difference(SetStorage self, SetStorage other);
    public static bool Equals(SetStorage x, SetStorage y, IEqualityComparer comparer);
    public static int GetHashCode(SetStorage set, IEqualityComparer comparer);
    private static int PrimitiveHash(object o);
    private static int IntHash(object o);
    private static int DoubleHash(object o);
    private static int TupleHash(object o);
    private static int GenericHash(object o);
    private static bool StringEquals(object o1, object o2);
    private static bool IntEquals(object o1, object o2);
    private static bool DoubleEquals(object o1, object o2);
    private static bool TupleEquals(object o1, object o2);
    private static bool GenericEquals(object o1, object o2);
    private void UpdateHelperFunctions(SetStorage other);
    private void UpdateHelperFunctions(Type t, object item);
    private void SetHeterogeneousSites();
    private void AssignSiteDelegates(CallSite`1<Func`3<CallSite, object, int>> hashSite, CallSite`1<Func`4<CallSite, object, object, bool>> equalSite);
    private int Hash(object item);
    private static Func`3<object, object, bool> GetEqFunc(SetStorage self, SetStorage other);
    internal static void SortBySize(SetStorage& x, SetStorage& y);
    internal static SetStorage GetItems(object set);
    internal static bool GetItems(object set, SetStorage& items);
    internal static SetStorage GetFrozenItems(object o);
    internal static SetStorage GetItemsWorker(object set);
    internal static SetStorage GetItemsWorker(IEnumerator en);
    public static bool GetItemsIfSet(object o, SetStorage& items);
    internal static bool GetHashableSetIfSet(Object& o);
    private static bool IsHashable(SetCollection set);
    internal static string SetToString(CodeContext context, object set, SetStorage items);
    private void Grow();
    private static void ProbeNext(Bucket[] buckets, Int32& index);
    private static int CeilLog2(int x);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PythonTypeAttribute("types.SimpleNamespace")]
public class IronPython.Runtime.SimpleNamespace : object {
    [CompilerGeneratedAttribute]
private PythonDictionary <__dict__>k__BackingField;
    public PythonDictionary __dict__ { get; }
    public SimpleNamespace(Dictionary`2<string, object> kwargsø);
    [CompilerGeneratedAttribute]
public PythonDictionary get___dict__();
    public object GetCustomMember(string name);
    public void SetMember(string name, object value);
    public void DeleteMember(string name);
    public string __repr__(CodeContext context);
    public bool __eq__(CodeContext context, SimpleNamespace other);
    public object __eq__(CodeContext context, object other);
}
public abstract class IronPython.Runtime.SiteLocalStorage : object {
}
public class IronPython.Runtime.SiteLocalStorage`1 : SiteLocalStorage {
    public T Data;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[PythonTypeAttribute("slice")]
public class IronPython.Runtime.Slice : object {
    [CompilerGeneratedAttribute]
private object <start>k__BackingField;
    [CompilerGeneratedAttribute]
private object <stop>k__BackingField;
    [CompilerGeneratedAttribute]
private object <step>k__BackingField;
    public object start { get; }
    public object stop { get; }
    public object step { get; }
    private object Microsoft.Scripting.Runtime.ISlice.Start { get; }
    private object Microsoft.Scripting.Runtime.ISlice.Stop { get; }
    private object Microsoft.Scripting.Runtime.ISlice.Step { get; }
    public Slice(object stop);
    public Slice(object start, object stop);
    public Slice(object start, object stop, object step);
    [CompilerGeneratedAttribute]
public object get_start();
    [CompilerGeneratedAttribute]
public object get_stop();
    [CompilerGeneratedAttribute]
public object get_step();
    public void indices(int length, Int32& ostart, Int32& ostop, Int32& ostep);
    public void indices(object length, Int32& ostart, Int32& ostop, Int32& ostep);
    [NullableContextAttribute("1")]
public PythonTuple __reduce__();
    public int __hash__();
    private sealed virtual override object Microsoft.Scripting.Runtime.ISlice.get_Start();
    private sealed virtual override object Microsoft.Scripting.Runtime.ISlice.get_Stop();
    private sealed virtual override object Microsoft.Scripting.Runtime.ISlice.get_Step();
    [NullableContextAttribute("1")]
public sealed virtual string __repr__(CodeContext context);
    [NullableContextAttribute("1")]
private PythonTuple ToTuple();
    [NullableContextAttribute("1")]
private bool Equals(Slice other);
    [NullableContextAttribute("1")]
public bool __eq__(Slice other);
    [NullableContextAttribute("1")]
public bool __ne__(Slice other);
    [NullableContextAttribute("1")]
public static object op_GreaterThan(Slice self, Slice other);
    [NullableContextAttribute("1")]
public static object op_LessThan(Slice self, Slice other);
    [NullableContextAttribute("1")]
public static object op_GreaterThanOrEqual(Slice self, Slice other);
    [NullableContextAttribute("1")]
public static object op_LessThanOrEqual(Slice self, Slice other);
    [NullableContextAttribute("1")]
internal void DoSliceAssign(SliceAssign assign, int size, object value);
    [NullableContextAttribute("1")]
private static void DoSliceAssign(SliceAssign assign, int start, int stop, int step, object value);
    [NullableContextAttribute("1")]
private static void ListSliceAssign(SliceAssign assign, int start, int n, int step, IList lst);
    [NullableContextAttribute("1")]
private static void OtherSliceAssign(SliceAssign assign, int start, int stop, int step, object value);
    internal void GetIndicesAndCount(int length, Int32& ostart, Int32& ostop, Int32& ostep, Int32& count);
}
[PythonTypeAttribute]
public class IronPython.Runtime.staticmethod : PythonTypeSlot {
    internal object _func;
    internal bool GetAlwaysSucceeds { get; }
    public object __func__ { get; }
    public bool __isabstractmethod__ { get; }
    public staticmethod(CodeContext context, object func);
    public void __init__(CodeContext context, object func);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    public object get___func__();
    public bool get___isabstractmethod__();
    public object __get__(object instance);
    public object __get__(object instance, object owner);
}
internal class IronPython.Runtime.StringDictionaryStorage : DictionaryStorage {
    private Dictionary`2<string, object> _data;
    public int Count { get; }
    public StringDictionaryStorage(int count);
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public void Add(object key, object value);
    public virtual void AddNoLock(DictionaryStorage& storage, object key, object value);
    public void AddNoLock(object key, object value);
    public virtual bool Contains(object key);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public bool Remove(object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    public virtual bool HasNonStringAttributes();
    private Dictionary`2<object, object> TryGetObjectDictionary();
    private Dictionary`2<object, object> GetObjectDictionary();
    private void EnsureData();
}
internal static class IronPython.Runtime.StringExtensions : object {
    [NullableContextAttribute("1")]
public static string Create(int length, TState state, SpanAction`2<char, TState> action);
}
internal class IronPython.Runtime.StringFormatSpec : object {
    internal Nullable`1<char> Fill;
    internal Nullable`1<char> Alignment;
    internal Nullable`1<char> Sign;
    internal Nullable`1<char> Type;
    internal Nullable`1<int> Width;
    internal Nullable`1<int> Precision;
    internal bool IncludeType;
    internal bool ThousandsComma;
    internal bool IsEmpty;
    internal string TypeRepr { get; }
    private StringFormatSpec(Nullable`1<char> fill, Nullable`1<char> alignment, Nullable`1<char> sign, Nullable`1<int> width, bool thousandsComma, Nullable`1<int> precision, Nullable`1<char> type, bool includeType, bool isEmpty);
    internal string get_TypeRepr();
    internal static StringFormatSpec FromString(string formatSpec);
    internal string AlignText(string text);
    internal string AlignNumericText(string text, bool isZero, bool isPos);
    private static string FinishText(string text, Nullable`1<char> sign, string type);
    private string GetTypeString();
    private Nullable`1<char> GetSign(bool isZero, bool isPos);
    private static Nullable`1<int> ParseInt(string formatSpec, Int32& curOffset);
}
internal class IronPython.Runtime.StringFormatter : object {
    private static int UnspecifiedPrecision;
    private CodeContext _context;
    private object _data;
    private int _dataIndex;
    private string _str;
    private int _index;
    private char _curCh;
    internal FormatSettings _opts;
    internal bool _TrailingZeroAfterWholeFloat;
    private StringBuilder _buf;
    [ThreadStaticAttribute]
private static NumberFormatInfo NumberFormatInfoForThreadLower;
    [ThreadStaticAttribute]
private static NumberFormatInfo NumberFormatInfoForThreadUpper;
    private NumberFormatInfo _nfi;
    private static Char[] zero;
    private static bool truncatedToString;
    private static long NegativeZeroBits;
    internal static NumberFormatInfo nfil { get; }
    internal static NumberFormatInfo nfiu { get; }
    public StringFormatter(CodeContext context, string str, object data);
    private static StringFormatter();
    internal static NumberFormatInfo get_nfil();
    internal static NumberFormatInfo get_nfiu();
    public string Format();
    private void DoFormatCode();
    private string ReadMappingKey();
    private void ReadConversionFlags();
    private int ReadNumberOrStar();
    private int ReadNumberOrStar(int noValSpecified);
    private void ReadMinimumFieldWidth();
    private void ReadPrecision();
    private void ReadLengthModifier();
    private void WriteConversion();
    private object GetData(int index);
    private object GetKey(string key);
    private object GetIntegerValue(Boolean& fPos);
    private void AppendChar();
    private void CheckDataUsed();
    private void AppendInt();
    private char AdjustForG(char type, double v);
    private void AppendFloat(char type);
    private void FixupAltFormDot(double v);
    private void FixupFloatMinus();
    private void AppendZeroPad(object val, bool fPos, char format);
    private void AppendZeroPadFloat(double val, char format);
    private void AppendNumeric(object val, bool fPos, char format);
    private void AppendNumericExp(object val, bool fPos, char format);
    private void AppendNumericDecimal(object val, bool fPos, char format);
    private void AppendNumericCommon(object val, char format);
    private string adjustExponent(string val);
    private void AppendLeftAdj(object val, bool fPos, char type);
    private static bool NeedsAltForm(char format, char last);
    private static string GetAltFormPrefixForRadix(char format, int radix);
    private void AppendBase(char format, int radix);
    private static void AppendNumberReversed(StringBuilder str, string res);
    private void AppendHex(char format);
    private void AppendOctal();
    private void AppendString();
    private void AppendAscii();
    private void AppendRepr();
    private void AppendString(string s);
    internal static bool IsNegativeZero(double x);
    [CompilerGeneratedAttribute]
internal static StringBuilder <AppendBase>g__ProcessNumber|50_0(char format, int radix, FormatSettings& _opts, object intVal);
}
[PythonTypeAttribute("super")]
public class IronPython.Runtime.Super : PythonTypeSlot {
    private PythonType _thisClass;
    private object _self;
    private object _selfClass;
    public PythonType __thisclass__ { get; }
    public object __self__ { get; }
    public object __self_class__ { get; }
    private PythonType DescriptorContext { get; }
    private PythonType PythonType { get; }
    internal bool GetAlwaysSucceeds { get; }
    public void __init__();
    public void __init__(PythonType type);
    public void __init__(PythonType type, object obj);
    public PythonType get___thisclass__();
    public object get___self__();
    public object get___self_class__();
    public object __get__(CodeContext context, object instance, object owner);
    public object GetCustomMember(CodeContext context, string name);
    public void SetMember(CodeContext context, string name, object value);
    public void DeleteCustomMember(CodeContext context, string name);
    private bool TryLookupInBase(CodeContext context, PythonType pt, string name, object self, Object& value);
    private PythonType get_DescriptorContext();
    private PythonType get_PythonType();
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    public sealed virtual string __repr__(CodeContext context);
}
public static class IronPython.Runtime.Symbols : object {
    internal static string OperatorToSymbol(PythonOperationKind op);
    internal static string OperatorToReversedSymbol(PythonOperationKind op);
    internal static PythonOperationKind OperatorToReverseOperator(PythonOperationKind op);
}
internal enum IronPython.Runtime.TernaryOperators : Enum {
    public int value__;
    public static TernaryOperators SetDescriptor;
    public static TernaryOperators GetDescriptor;
    public static TernaryOperators Maximum;
}
internal class IronPython.Runtime.ThrowingErrorSink : ErrorSink {
    public static ThrowingErrorSink Default;
    private static ThrowingErrorSink();
    public virtual void Add(SourceUnit sourceUnit, string message, SourceSpan span, int errorCode, Severity severity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class IronPython.Runtime.TupleExtensions : object {
    [ExtensionAttribute]
public static PythonTuple ToPythonTuple(Tuple`1<T1> value);
    [ExtensionAttribute]
public static PythonTuple ToPythonTuple(Tuple`2<T1, T2> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PythonTuple ToPythonTuple(Tuple`3<T1, T2, T3> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PythonTuple ToPythonTuple(Tuple`4<T1, T2, T3, T4> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class IronPython.Runtime.TypecodeOps : object {
    public static string ValidByteorder;
    public static string ValidCodes;
    public static bool TryDecomposeTypecode(string format, Char& byteorder, Char& code);
    public static void DecomposeTypecode(string format, Char& byteorder, Char& code);
    public static bool IsByteCode(char typecode);
    public static int GetTypecodeWidth(char typecode);
    [NullableContextAttribute("0")]
public static bool TryGetFromBytes(char typecode, ReadOnlySpan`1<byte> bytes, Object& result);
    [NullableContextAttribute("0")]
public static bool TryGetBytes(char typecode, object obj, Span`1<byte> dest);
    public static bool CausesOverflow(object value, char typecode);
}
[PythonTypeAttribute("builtin_function_or_method")]
[DontMapGetMemberNamesToDirAttribute]
public class IronPython.Runtime.Types.BuiltinFunction : PythonTypeSlot {
    internal BuiltinFunctionData _data;
    internal object _instance;
    private static object _noInstance;
    internal bool IsUnbound { get; }
    internal string Name { get; internal set; }
    public Type DeclaringType { get; }
    public IList`1<MethodBase> Targets { get; }
    internal bool IsAlwaysVisible { get; }
    internal bool IsReversedOperator { get; }
    internal bool IsBinaryOperator { get; }
    internal FunctionType FunctionType { get; internal set; }
    internal bool GetAlwaysSucceeds { get; }
    public BuiltinFunctionOverloadMapper Overloads { get; }
    internal Dictionary`2<TypeList, BuiltinFunction> OverloadDictionary { get; }
    public string __name__ { get; }
    public string __doc__ { get; }
    public object __self__ { get; }
    internal object BindingSelf { get; }
    private bool IsBuiltinModuleMethod { get; }
    internal bool IsOnlyGeneric { get; }
    private BinderType BinderType { get; }
    internal BuiltinFunction(string name, MethodBase[] originalTargets, Type declaringType, FunctionType functionType);
    internal BuiltinFunction(object instance, BuiltinFunctionData data);
    private static BuiltinFunction();
    internal static BuiltinFunction MakeFunction(string name, MethodBase[] infos, Type declaringType);
    internal static BuiltinFunction MakeMethod(string name, MethodBase[] infos, Type declaringType, FunctionType ft);
    internal virtual BuiltinFunction BindToInstance(object instance);
    internal void AddMethod(MethodInfo mi);
    internal bool TestData(object data);
    internal bool get_IsUnbound();
    internal string get_Name();
    internal void set_Name(string value);
    internal object Call(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, object instance, Object[] args);
    internal object Call0(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`4<CallSite, CodeContext, object, object>>> storage, object instance);
    private static SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> GetInitializedStorage(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage);
    private static SiteLocalStorage`1<CallSite`1<Func`4<CallSite, CodeContext, object, object>>> GetInitializedStorage(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`4<CallSite, CodeContext, object, object>>> storage);
    internal object Call(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`6<CallSite, CodeContext, object, Object[], IDictionary`2<object, object>, object>>> storage, object instance, Object[] args, IDictionary`2<object, object> keywordArgs);
    internal BuiltinFunction MakeGenericMethod(Type[] types);
    internal PythonTypeSlot GetDescriptor();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type get_DeclaringType();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<MethodBase> get_Targets();
    internal virtual bool get_IsAlwaysVisible();
    internal bool get_IsReversedOperator();
    internal bool get_IsBinaryOperator();
    internal FunctionType get_FunctionType();
    internal void set_FunctionType(FunctionType value);
    internal Expression MakeBoundFunctionTest(Expression functionTarget);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual void MakeGetExpression(PythonBinder binder, Expression codeContext, DynamicMetaObject instance, DynamicMetaObject owner, ConditionalBuilder builder);
    public sealed virtual string __repr__(CodeContext context);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    internal DynamicMetaObject MakeBuiltinFunctionCall(DynamicMetaObjectBinder call, Expression codeContext, DynamicMetaObject function, DynamicMetaObject[] args, bool hasSelf, BindingRestrictions functionRestriction, Func`2<DynamicMetaObject[], BindingResult> bind);
    internal static DynamicMetaObject TranslateArguments(DynamicMetaObjectBinder call, Expression codeContext, DynamicMetaObject function, DynamicMetaObject[] args, bool hasSelf, string name);
    private static bool IsThrowException(Expression expr);
    private bool Equals(BuiltinFunction other);
    public bool __eq__(BuiltinFunction other);
    public bool __ne__(BuiltinFunction other);
    public NotImplementedType __gt__(CodeContext context, object other);
    public NotImplementedType __lt__(CodeContext context, object other);
    public NotImplementedType __ge__(CodeContext context, object other);
    public NotImplementedType __le__(CodeContext context, object other);
    public int __hash__(CodeContext context);
    [PropertyMethodAttribute]
public string Get__module__(CodeContext context);
    [PropertyMethodAttribute]
public void Set__module__(string value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual BuiltinFunctionOverloadMapper get_Overloads();
    internal Dictionary`2<TypeList, BuiltinFunction> get_OverloadDictionary();
    public string get___name__();
    public virtual string get___doc__();
    public object get___self__();
    internal object get_BindingSelf();
    private bool get_IsBuiltinModuleMethod();
    public object __call__(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`6<CallSite, CodeContext, object, Object[], IDictionary`2<object, object>, object>>> storage, IDictionary`2<object, object> dictArgs, Object[] args);
    internal virtual bool get_IsOnlyGeneric();
    private BinderType get_BinderType();
    private void EnsureBoundGenericDict();
    private sealed virtual override Delegate IronPython.Runtime.Operations.IDelegateConvertible.ConvertToDelegate(Type type);
    private sealed virtual override FastBindResult`1<T> IronPython.Runtime.Binding.IFastInvokable.MakeInvokeBinding(CallSite`1<T> site, PythonInvokeBinder binder, CodeContext state, Object[] args);
    public string __reduce__();
}
[DefaultMemberAttribute("Item")]
public class IronPython.Runtime.Types.BuiltinFunctionOverloadMapper : object {
    private BuiltinFunction _function;
    private object _instance;
    private PythonTuple _allOverloads;
    public object Item { get; }
    public BuiltinFunction Function { get; }
    public IList`1<MethodBase> Targets { get; }
    public PythonTuple Functions { get; }
    public BuiltinFunctionOverloadMapper(BuiltinFunction builtinFunction, object instance);
    public object get_Item(Type[] types);
    protected object GetOverload(Type[] sig, IList`1<MethodBase> targets);
    private object GetOverload(Type[] sig, IList`1<MethodBase> targets, bool wrapCtors);
    private static MethodBase[] FindMatchingTargets(Type[] sig, IList`1<MethodBase> targets, bool removeCodeContext);
    public void ThrowOverloadException(Type[] sig, IList`1<MethodBase> targets);
    public BuiltinFunction get_Function();
    public virtual IList`1<MethodBase> get_Targets();
    public PythonTuple get_Functions();
    protected virtual object GetTargetFunction(BuiltinFunction bf);
    public virtual string __repr__(CodeContext context);
}
[PythonTypeAttribute("method_descriptor")]
[DontMapGetMemberNamesToDirAttribute]
public class IronPython.Runtime.Types.BuiltinMethodDescriptor : PythonTypeSlot {
    internal BuiltinFunction _template;
    internal bool GetAlwaysSucceeds { get; }
    internal BuiltinFunction Template { get; }
    public Type DeclaringType { get; }
    internal bool IsAlwaysVisible { get; }
    public string __name__ { get; }
    public string __doc__ { get; }
    public PythonType __objclass__ { get; }
    internal BuiltinMethodDescriptor(BuiltinFunction function);
    internal object UncheckedGetAttribute(object instance);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual void MakeGetExpression(PythonBinder binder, Expression codeContext, DynamicMetaObject instance, DynamicMetaObject owner, ConditionalBuilder builder);
    internal virtual bool get_GetAlwaysSucceeds();
    internal BuiltinFunction get_Template();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type get_DeclaringType();
    internal static void CheckSelfWorker(CodeContext context, object self, BuiltinFunction template);
    internal virtual bool get_IsAlwaysVisible();
    private void CheckSelf(CodeContext context, object self);
    public string get___name__();
    public string get___doc__();
    public object __call__(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`6<CallSite, CodeContext, object, Object[], IDictionary`2<object, object>, object>>> storage, IDictionary`2<object, object> dictArgs, Object[] args);
    public PythonType get___objclass__();
    public sealed virtual string __repr__(CodeContext context);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
}
internal class IronPython.Runtime.Types.CachedGetIdIntExtensionMethod : CachedGetKey {
    private int _id;
    public CachedGetIdIntExtensionMethod(string name, int id);
    public virtual int GetHashCode();
    public virtual bool Equals(CachedGetKey other);
}
internal class IronPython.Runtime.Types.CachedGetIdWeakRefExtensionMethod : CachedGetKey {
    private WeakReference _extMethodSet;
    public CachedGetIdWeakRefExtensionMethod(string name, WeakReference weakReference);
    public virtual bool Equals(CachedGetKey other);
}
internal abstract class IronPython.Runtime.Types.CachedGetKey : object {
    public string Name;
    public CachedGetKey(string name);
    public static CachedGetKey Make(string name, ExtensionMethodSet set);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public abstract virtual bool Equals(CachedGetKey key);
}
public class IronPython.Runtime.Types.CachedNewTypeInfo : object {
    private Type _type;
    private Dictionary`2<string, String[]> _specialNames;
    private Type[] _interfaceTypes;
    public IList`1<Type> InterfaceTypes { get; }
    public Type Type { get; }
    public Dictionary`2<string, String[]> SpecialNames { get; }
    public CachedNewTypeInfo(Type type, Dictionary`2<string, String[]> specialNames, Type[] interfaceTypes);
    public IList`1<Type> get_InterfaceTypes();
    public Type get_Type();
    public Dictionary`2<string, String[]> get_SpecialNames();
}
internal class IronPython.Runtime.Types.ChainedUserGet : UserGetBase {
    internal bool ShouldCache { get; }
    public ChainedUserGet(PythonGetMemberBinder binder, int version, Func`4<CallSite, object, CodeContext, object> func);
    internal virtual bool get_ShouldCache();
}
internal class IronPython.Runtime.Types.ClassMethodTracker : PythonCustomTracker {
    private MethodTracker[] _trackers;
    public Type DeclaringType { get; }
    public string Name { get; }
    public ClassMethodTracker(MemberGroup group);
    public virtual PythonTypeSlot GetSlot();
    public virtual DynamicMetaObject GetValue(OverloadResolverFactory factory, ActionBinder binder, Type instanceType);
    public virtual Type get_DeclaringType();
    public virtual string get_Name();
}
[PythonTypeAttribute("builtin_function_or_method")]
public class IronPython.Runtime.Types.ConstructorFunction : BuiltinFunction {
    private MethodBase[] _ctors;
    internal IList`1<MethodBase> ConstructorTargets { get; }
    public BuiltinFunctionOverloadMapper Overloads { get; }
    public string __name__ { get; }
    public string __doc__ { get; }
    internal ConstructorFunction(BuiltinFunction realTarget, IList`1<MethodBase> constructors);
    internal IList`1<MethodBase> get_ConstructorTargets();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual BuiltinFunctionOverloadMapper get_Overloads();
    private static IList`1<MethodBase> GetTargetsValidateFunction(BuiltinFunction realTarget);
    public string get___name__();
    public virtual string get___doc__();
}
public class IronPython.Runtime.Types.ConstructorOverloadMapper : BuiltinFunctionOverloadMapper {
    public IList`1<MethodBase> Targets { get; }
    public ConstructorOverloadMapper(ConstructorFunction builtinFunction, object instance);
    public virtual IList`1<MethodBase> get_Targets();
    protected virtual object GetTargetFunction(BuiltinFunction bf);
}
internal class IronPython.Runtime.Types.CustomAttributeTracker : PythonCustomTracker {
    private PythonTypeSlot _slot;
    private Type _declType;
    private string _name;
    public string Name { get; }
    public Type DeclaringType { get; }
    public CustomAttributeTracker(Type declaringType, string name, PythonTypeSlot slot);
    public virtual DynamicMetaObject GetValue(OverloadResolverFactory factory, ActionBinder binder, Type instanceType);
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual PythonTypeSlot GetSlot();
}
internal class IronPython.Runtime.Types.CustomInstanceDictionaryStorage : StringDictionaryStorage {
    private int _keyVersion;
    private String[] _extraKeys;
    private Object[] _values;
    private static int _namesVersion;
    public int Count { get; }
    public int KeyVersion { get; }
    public CustomInstanceDictionaryStorage(String[] extraKeys, int keyVersion);
    internal static int AllocateVersion();
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    public virtual void AddNoLock(DictionaryStorage& storage, object key, object value);
    public virtual bool Contains(object key);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
    public int get_KeyVersion();
    public int FindKey(object key);
    public int FindKey(string key);
    public bool TryGetValue(int index, Object& value);
    public void SetExtraValue(int index, object value);
}
internal static class IronPython.Runtime.Types.DocBuilder : object {
    private static object _CachedDocLockObject;
    private static List`1<Assembly> _AssembliesWithoutXmlDoc;
    private static XPathDocument _CachedDoc;
    private static string _CachedDocName;
    private static string _frameworkReferencePath;
    private static DocBuilder();
    internal static string GetDefaultDocumentation(string methodName);
    private static string DocOneInfoForProperty(Type declaringType, string propertyName, MethodInfo getter, MethodInfo setter, IEnumerable`1<DocumentationAttribute> attrs);
    public static string DocOneInfo(ExtensionPropertyInfo info);
    public static string DocOneInfo(PropertyInfo info);
    public static string DocOneInfo(FieldInfo info);
    public static string DocOneInfo(MethodBase info, string name);
    public static string DocOneInfo(MethodBase info, string name, bool includeSelf);
    public static string CreateAutoDoc(MethodBase info);
    public static string CreateAutoDoc(EventInfo info);
    public static string CreateAutoDoc(Type t);
    public static OverloadDoc GetOverloadDoc(MethodBase info, string name, int endParamSkip);
    public static OverloadDoc GetOverloadDoc(MethodBase info, string name, int endParamSkip, bool includeSelf);
    internal static string CreateAutoDoc(MethodBase info, string name, int endParamSkip);
    internal static string CreateAutoDoc(MethodBase info, string name, int endParamSkip, bool includeSelf);
    private static string GetPythonTypeName(Type type);
    private static string GetXmlName(Type type);
    private static string GetXmlName(EventInfo field);
    private static string GetXmlNameForProperty(Type declaringType, string propertyName);
    private static string GetXmlName(MethodBase info);
    private static void AppendTypeFormat(Type curType, StringBuilder res, ParameterInfo pi);
    private static string GetXmlDocLocation(Assembly assem);
    private static XPathDocument GetXPathDocument(Assembly asm);
    private static void GetXmlDoc(MethodBase info, String& summary, String& returns, List`1& parameters);
    private static void GetXmlDoc(Type type, String& summary);
    private static void GetXmlDocForProperty(Type declaringType, string propertyName, String& summary, String& returns);
    private static void GetXmlDoc(EventInfo info, String& summary, String& returns);
    private static string XmlToString(XPathNodeIterator iter);
}
[AttributeUsageAttribute("4")]
internal class IronPython.Runtime.Types.DynamicBaseTypeAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class IronPython.Runtime.Types.DynamicHelpers : object {
    public static PythonType GetPythonTypeFromType(Type type);
    public static PythonType GetPythonType(object o);
    public static BoundEvent MakeBoundEvent(ReflectedEvent eventObj, object instance, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonTypeAttribute("ellipsis")]
[DocumentationAttribute("")]
public class IronPython.Runtime.Types.Ellipsis : object {
    [NullableAttribute("2")]
private static Ellipsis _instance;
    internal static Ellipsis Value { get; }
    internal static Ellipsis get_Value();
    public static Ellipsis __new__(CodeContext context, PythonType cls);
    public sealed virtual string __repr__(CodeContext context);
    public int __hash__();
}
public class IronPython.Runtime.Types.ExtensionPropertyInfo : object {
    private MethodInfo _getter;
    private MethodInfo _setter;
    private MethodInfo _deleter;
    private Type _declaringType;
    public MethodInfo Getter { get; }
    public MethodInfo Setter { get; }
    public MethodInfo Deleter { get; }
    public Type DeclaringType { get; }
    public string Name { get; }
    public ExtensionPropertyInfo(Type logicalDeclaringType, MethodInfo mi);
    private void GetPropertyMethods(MethodInfo mi, string methodName, string prefix, string get, string set, string delete);
    public MethodInfo get_Getter();
    public MethodInfo get_Setter();
    public MethodInfo get_Deleter();
    public Type get_DeclaringType();
    public string get_Name();
}
internal class IronPython.Runtime.Types.FastGetDelegate : MulticastDelegate {
    public FastGetDelegate(object object, IntPtr method);
    public virtual bool Invoke(CodeContext context, object self, Object& result);
    public virtual IAsyncResult BeginInvoke(CodeContext context, object self, Object& result, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Object& result, IAsyncResult __result);
}
[FlagsAttribute]
public enum IronPython.Runtime.Types.FunctionType : Enum {
    public int value__;
    public static FunctionType None;
    public static FunctionType Function;
    public static FunctionType Method;
    public static FunctionType FunctionMethodMask;
    public static FunctionType AlwaysVisible;
    public static FunctionType ReversedOperator;
    public static FunctionType BinaryOperator;
    public static FunctionType ModuleMethod;
}
[DefaultMemberAttribute("Item")]
public class IronPython.Runtime.Types.GenericBuiltinFunction : BuiltinFunction {
    public BuiltinFunction Item { get; }
    public BuiltinFunction Item { get; }
    internal bool IsOnlyGeneric { get; }
    internal GenericBuiltinFunction(string name, MethodBase[] originalTargets, Type declaringType, FunctionType functionType);
    internal GenericBuiltinFunction(object instance, BuiltinFunctionData data);
    public BuiltinFunction get_Item(PythonTuple tuple);
    internal virtual BuiltinFunction BindToInstance(object instance);
    public BuiltinFunction get_Item(Object[] key);
    internal virtual bool get_IsOnlyGeneric();
}
internal class IronPython.Runtime.Types.GetAttributeDelegates : UserGetBase {
    private string _name;
    private PythonTypeSlot _getAttributeSlot;
    private PythonTypeSlot _getAttrSlot;
    private SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, string, object>>> _storage;
    private bool _isNoThrow;
    public GetAttributeDelegates(PythonGetMemberBinder binder, string name, int version, PythonTypeSlot getAttributeSlot, PythonTypeSlot getAttrSlot);
    public object GetAttribute(CallSite site, object self, CodeContext context);
}
internal class IronPython.Runtime.Types.GetMemberDelegates : UserGetBase {
    private string _name;
    private bool _isNoThrow;
    private PythonTypeSlot _slot;
    private PythonTypeSlot _getattrSlot;
    private SlotGetValue _slotFunc;
    private Func`4<CallSite, object, CodeContext, object> _fallback;
    private int _dictVersion;
    private int _dictIndex;
    private ExtensionMethodSet _extMethods;
    public GetMemberDelegates(OptimizedGetKind getKind, PythonType type, PythonGetMemberBinder binder, string name, int version, PythonTypeSlot slot, PythonTypeSlot getattrSlot, SlotGetValue slotFunc, Func`4<CallSite, object, CodeContext, object> fallback, ExtensionMethodSet extMethods);
    public object SlotDict(CallSite site, object self, CodeContext context);
    public object SlotDictOptimized(CallSite site, object self, CodeContext context);
    public object SlotOnly(CallSite site, object self, CodeContext context);
    public object UserSlotDict(CallSite site, object self, CodeContext context);
    public object UserSlotDictOptimized(CallSite site, object self, CodeContext context);
    public object UserSlotOnly(CallSite site, object self, CodeContext context);
    public object UserSlotDictGetAttr(CallSite site, object self, CodeContext context);
    public object UserSlotDictGetAttrOptimized(CallSite site, object self, CodeContext context);
    public object UserSlotOnlyGetAttr(CallSite site, object self, CodeContext context);
    public object UserSlot(CallSite site, object self, CodeContext context);
    private object GetAttr(CodeContext context, object res);
    private object TypeError(CallSite site, IPythonObject ipo, CodeContext context);
}
internal abstract class IronPython.Runtime.Types.InstanceCreator : object {
    [CompilerGeneratedAttribute]
private PythonType <Type>k__BackingField;
    protected PythonType Type { get; }
    protected InstanceCreator(PythonType type);
    public static InstanceCreator Make(PythonType type);
    [CompilerGeneratedAttribute]
protected PythonType get_Type();
    internal abstract virtual object CreateInstance(CodeContext context);
    internal abstract virtual object CreateInstance(CodeContext context, object arg0);
    internal abstract virtual object CreateInstance(CodeContext context, object arg0, object arg1);
    internal abstract virtual object CreateInstance(CodeContext context, object arg0, object arg1, object arg2);
    internal abstract virtual object CreateInstance(CodeContext context, Object[] args);
    internal abstract virtual object CreateInstance(CodeContext context, Object[] args, String[] names);
}
public interface IronPython.Runtime.Types.IPythonObject {
    public PythonDictionary Dict { get; }
    public PythonType PythonType { get; }
    public abstract virtual PythonDictionary get_Dict();
    public abstract virtual PythonDictionary SetDict(PythonDictionary dict);
    public abstract virtual bool ReplaceDict(PythonDictionary dict);
    public abstract virtual PythonType get_PythonType();
    public abstract virtual void SetPythonType(PythonType newType);
    public abstract virtual Object[] GetSlots();
    public abstract virtual Object[] GetSlotsCreate();
}
internal class IronPython.Runtime.Types.LateBoundInitBinder : DynamicMetaObjectBinder {
    private PythonType _newType;
    private CallSignature _signature;
    public static int MaxFastLateBoundInitArgs;
    public LateBoundInitBinder(PythonType type, CallSignature signature);
    public virtual DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
    public virtual T BindDelegate(CallSite`1<T> site, Object[] args);
    private bool NeedsInitCall(CodeContext context, PythonType type, int argCount);
    private DynamicExpression MakeDynamicInitInvoke(CodeContext context, DynamicMetaObject[] args, Expression initFunc, Expression codeContext);
}
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("mappingproxy")]
public class IronPython.Runtime.Types.MappingProxy : object {
    private PythonDictionary dictionary;
    private PythonType type;
    public static object __hash__;
    public object Item { get; public set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.Values { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly { get; }
    internal MappingProxy(CodeContext context, PythonType dt);
    public MappingProxy(PythonDictionary dict);
    internal PythonDictionary GetDictionary(CodeContext context);
    public int __len__(CodeContext context);
    public bool __contains__(CodeContext context, object value);
    public string __str__(CodeContext context);
    public object get(CodeContext context, object k, object d);
    public object keys(CodeContext context);
    public object values(CodeContext context);
    public object items(CodeContext context);
    public PythonDictionary copy(CodeContext context);
    public object __eq__(CodeContext context, object other);
    public sealed virtual object get_Item(object key);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void set_Item(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(object key, object value);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey(object key);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Keys();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove(object key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue(object key, Object& value);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add(KeyValuePair`2<object, object> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains(KeyValuePair`2<object, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove(KeyValuePair`2<object, object> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<object, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator();
}
internal static class IronPython.Runtime.Types.Mro : object {
    public static List`1<PythonType> Calculate(PythonType startingType, IList`1<PythonType> bases);
    private static IList`1<PythonType> TupleToList(IList`1<PythonType> t);
}
public static class IronPython.Runtime.Types.NameConverter : object {
    public static NameType TryGetName(PythonType dt, MethodInfo mi, String& name);
    public static NameType TryGetName(PythonType dt, EventInfo ei, MethodInfo eventMethod, String& name);
    public static NameType TryGetName(PythonType dt, PropertyInfo pi, MethodInfo prop, String& name);
    public static string GetTypeName(Type t);
    internal static NameType GetNameFromMethod(PythonType dt, MethodInfo mi, NameType res, String& name);
}
internal class IronPython.Runtime.Types.NewTypeInfo : object {
    private Type _baseType;
    private IList`1<Type> _interfaceTypes;
    private Nullable`1<int> _hash;
    public Type BaseType { get; }
    public IList`1<Type> InterfaceTypes { get; }
    public NewTypeInfo(Type baseType, IList`1<Type> interfaceTypes);
    public static NewTypeInfo GetTypeInfo(string typeName, PythonTuple bases);
    [IteratorStateMachineAttribute("IronPython.Runtime.Types.NewTypeInfo/<GetPythonTypes>d__5")]
private static IEnumerable`1<PythonType> GetPythonTypes(string typeName, ICollection`1<object> bases);
    private static Type GetBaseTypeFromUserType(PythonType curBasePythonType, IList`1<Type> baseInterfaces, Type curTypeToExtend);
    public Type get_BaseType();
    public IList`1<Type> get_InterfaceTypes();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class IronPython.Runtime.Types.NewTypeMaker : object {
    private Type _baseType;
    private IList`1<Type> _interfaceTypes;
    private TypeBuilder _tg;
    private FieldInfo _typeField;
    private FieldInfo _dictField;
    private FieldInfo _slotsField;
    private FieldInfo _explicitMO;
    private ILGen _cctor;
    private int _site;
    private static int _typeCount;
    public static string VtableNamesField;
    public static string TypePrefix;
    public static string BaseMethodPrefix;
    public static string FieldGetterPrefix;
    public static string FieldSetterPrefix;
    public static string ClassFieldName;
    public static string DictFieldName;
    public static string SlotsAndWeakRefFieldName;
    private static string _constructorTypeName;
    private static string _constructorMethodName;
    internal static Publisher`2<NewTypeInfo, Type> _newTypes;
    private static Dictionary`2<Type, Dictionary`2<string, List`1<MethodInfo>>> _overriddenMethods;
    private static Dictionary`2<Type, Dictionary`2<string, List`1<ExtensionPropertyTracker>>> _overriddenProperties;
    private static MethodAttributes MethodAttributesToEraseInOveride;
    private bool NeedsPythonObject { get; }
    private NewTypeMaker(NewTypeInfo typeInfo);
    private static NewTypeMaker();
    public static Type GetNewType(string typeName, PythonTuple bases);
    public static void SaveNewTypes(string assemblyName, IList`1<PythonTuple> types);
    public static void LoadNewTypes(Assembly asm);
    public static bool IsInstanceType(Type type);
    private Type CreateNewType();
    private string GetName();
    private Dictionary`2<string, String[]> ImplementType();
    private void DefineInterfaces();
    private void ImplementInterface(Type interfaceType);
    private void ImplementPythonObject();
    private void AddDebugView();
    private void EmitGetDict(ILGen gen);
    private void EmitSetDict(ILGen gen);
    private ParameterInfo[] GetOverrideCtorSignature(ParameterInfo[] original);
    private void ImplementConstructors();
    private static bool CanOverrideMethod(MethodInfo mi);
    private void DoInterfaceType(Type interfaceType, Dictionary`2<Type, bool> doneTypes, Dictionary`2<string, String[]> specialNames);
    private void OverrideConstructor(ConstructorInfo parentConstructor);
    private static int GetOriginalIndex(ParameterInfo[] pis, ParameterInfo[] overrideParams, int i);
    private static void CallBaseConstructor(ConstructorInfo parentConstructor, ParameterInfo[] pis, ParameterInfo[] overrideParams, ILGen il);
    private ILGen GetCCtor();
    private void ImplementCustomTypeDescriptor();
    private void ImplementCTDOverride(MethodInfo m);
    private bool get_NeedsPythonObject();
    private void ImplementDynamicObject();
    private void ImplementIPythonObject();
    private void DefineHelperInterface(Type intf);
    private void ImplementWeakReference();
    private void ImplementProtectedFieldAccessors(Dictionary`2<string, String[]> specialNames);
    private void OverrideMethods(Type type, Dictionary`2<string, String[]> specialNames);
    private void OverrideSpecialName(MethodInfo mi, Dictionary`2<string, String[]> specialNames, Dictionary`2<PropertyInfo, PropertyBuilder> overridden);
    private bool TryOverrideProperty(MethodInfo mi, Dictionary`2<string, String[]> specialNames, Dictionary`2<PropertyInfo, PropertyBuilder> overridden);
    private void AddPublicProperty(MethodInfo mi, Dictionary`2<PropertyInfo, PropertyBuilder> overridden, MethodBuilder mb, PropertyInfo foundProperty);
    private static void EmitBaseMethodDispatch(MethodInfo mi, ILGen il);
    private void OverrideBaseMethod(MethodInfo mi, Dictionary`2<string, String[]> specialNames);
    private PythonType GetBaseTypeForMethod(MethodInfo mi);
    private LocalBuilder EmitBaseClassCallCheckForProperties(ILGen il, MethodInfo baseMethod, string name);
    private MethodBuilder CreateVTableGetterOverride(MethodInfo mi, string name);
    private static void EmitConvertFromObject(ILGen il, Type toType);
    private MethodBuilder CreateVTableSetterOverride(MethodInfo mi, string name);
    private void CreateVTableEventOverride(MethodInfo mi, string name);
    private static LocalBuilder EmitBaseClassCallCheckForEvents(ILGen il, MethodInfo baseMethod, string name);
    private MethodBuilder CreateVTableMethodOverride(MethodInfo mi, string name);
    private void DefineVTableMethodOverride(MethodInfo mi, MethodBuilder& impl, ILGen& il);
    private LocalBuilder EmitNonInheritedMethodLookup(string name, ILGen il);
    private MethodBuilder CreateSuperCallHelper(MethodInfo mi);
    private KeyValuePair`2<Type, Dictionary`2<string, String[]>> SaveType(AssemblyGen ag, string name);
    private Type FinishType();
    private ILGen DefineExplicitInterfaceImplementation(MethodInfo baseMethod, MethodBuilder& builder);
    private ILGen DefineMethodOverride(MethodAttributes extra, Type type, string name, MethodInfo& decl, MethodBuilder& impl);
    private ILGen DefineMethodOverride(MethodInfo decl, MethodBuilder& impl);
    private ILGen DefineMethodOverride(MethodAttributes extra, MethodInfo decl, MethodBuilder& impl);
    private void EmitClrCallStub(ILGen il, MethodInfo mi, LocalBuilder callTarget);
    private static void EmitCodeContext(ILGen il, bool context);
    private static void EmitInt(ILGenerator ilg, int iVal);
    private static Type[] MakeSiteSignature(int nargs);
    private static void AddBaseMethods(Type finishedType, Dictionary`2<string, String[]> specialNames);
    private static void StoreOverriddenField(MethodInfo mi, string newName);
    private static ExtensionPropertyTracker AddPropertyInfo(Type baseType, string propName, MethodInfo get, MethodInfo set);
    private static void StoreOverriddenMethod(MethodInfo mi, string newName);
    private static void StoreOverriddenProperty(MethodInfo mi, string newName);
    private static IEnumerable`1<string> GetBaseName(MethodInfo mi, Dictionary`2<string, String[]> specialNames);
    internal static IList`1<MethodInfo> GetOverriddenMethods(Type type, string name);
    internal static IList`1<ExtensionPropertyTracker> GetOverriddenProperties(Type type, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronPython.Runtime.Types.NoneTypeOps : object {
    internal static int NoneHashCode;
    [NullableAttribute("2")]
public static string __doc__;
    [StaticExtensionMethodAttribute]
public static object __new__(CodeContext context, PythonType cls);
    public static int __hash__(DynamicNull self);
    public static string __repr__(DynamicNull self);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonTypeAttribute("NotImplementedType")]
[DocumentationAttribute("")]
public class IronPython.Runtime.Types.NotImplementedType : object {
    [NullableAttribute("2")]
private static NotImplementedType _instance;
    internal static NotImplementedType Value { get; }
    internal static NotImplementedType get_Value();
    public static NotImplementedType __new__(CodeContext context, PythonType cls);
    public sealed virtual string __repr__(CodeContext context);
    public int __hash__();
}
internal class IronPython.Runtime.Types.OperatorMapping : object {
    private static OperatorMapping[] _infos;
    private PythonOperationKind _operator;
    private string _name;
    [CompilerGeneratedAttribute]
private string <AlternateName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <AlternateExpectedType>k__BackingField;
    public PythonOperationKind Operator { get; }
    public string Name { get; }
    public string AlternateName { get; }
    public Type AlternateExpectedType { get; }
    private OperatorMapping(PythonOperationKind op, string name, string altName, Type alternateExpectedType);
    private static OperatorMapping();
    public static OperatorMapping GetOperatorMapping(PythonOperationKind op);
    public static OperatorMapping GetOperatorMapping(string name);
    public PythonOperationKind get_Operator();
    public string get_Name();
    [CompilerGeneratedAttribute]
public string get_AlternateName();
    [CompilerGeneratedAttribute]
public Type get_AlternateExpectedType();
    private static OperatorMapping[] MakeOperatorTable();
}
internal class IronPython.Runtime.Types.OperatorTracker : PythonCustomTracker {
    private MethodTracker[] _trackers;
    private bool _reversed;
    private string _name;
    private Type _declType;
    public Type DeclaringType { get; }
    public string Name { get; }
    public OperatorTracker(Type declaringType, string name, bool reversed, MethodTracker[] members);
    public virtual PythonTypeSlot GetSlot();
    public virtual Type get_DeclaringType();
    public virtual string get_Name();
}
internal enum IronPython.Runtime.Types.OptimizedGetKind : Enum {
    public int value__;
    public static OptimizedGetKind None;
    public static OptimizedGetKind SlotDict;
    public static OptimizedGetKind SlotOnly;
    public static OptimizedGetKind PropertySlot;
    public static OptimizedGetKind UserSlotDict;
    public static OptimizedGetKind UserSlotOnly;
}
internal enum IronPython.Runtime.Types.OptimizedSetKind : Enum {
    public int value__;
    public static OptimizedSetKind None;
    public static OptimizedSetKind SetAttr;
    public static OptimizedSetKind UserSlot;
    public static OptimizedSetKind SetDict;
    public static OptimizedSetKind Error;
}
[AttributeUsageAttribute("4")]
public class IronPython.Runtime.Types.PythonCachedTypeInfoAttribute : Attribute {
}
public abstract class IronPython.Runtime.Types.PythonCustomTracker : CustomTracker {
    public abstract virtual PythonTypeSlot GetSlot();
    public virtual DynamicMetaObject GetValue(OverloadResolverFactory resolverFactory, ActionBinder binder, Type type);
    public virtual MemberTracker BindToInstance(DynamicMetaObject instance);
    public virtual DynamicMetaObject SetValue(OverloadResolverFactory resolverFactory, ActionBinder binder, Type type, DynamicMetaObject value);
    public virtual DynamicMetaObject SetValue(OverloadResolverFactory resolverFactory, ActionBinder binder, Type type, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    protected virtual DynamicMetaObject GetBoundValue(OverloadResolverFactory factory, ActionBinder binder, Type instanceType, DynamicMetaObject instance);
    protected virtual DynamicMetaObject SetBoundValue(OverloadResolverFactory resolverFactory, ActionBinder binder, Type type, DynamicMetaObject value, DynamicMetaObject instance);
    protected virtual DynamicMetaObject SetBoundValue(OverloadResolverFactory factory, ActionBinder binder, Type type, DynamicMetaObject value, DynamicMetaObject instance, DynamicMetaObject errorSuggestion);
}
internal class IronPython.Runtime.Types.PythonSiteCache : object {
    private Dictionary`2<string, CallSite`1<Func`4<CallSite, object, CodeContext, object>>> _tryGetMemSite;
    private Dictionary`2<string, CallSite`1<Func`4<CallSite, object, CodeContext, object>>> _tryGetMemSiteShowCls;
    private CallSite`1<Func`4<CallSite, CodeContext, object, object>> _dirSite;
    private CallSite`1<Func`5<CallSite, CodeContext, object, string, object>> _getAttributeSite;
    private CallSite`1<Func`7<CallSite, CodeContext, object, object, string, object, object>> _setAttrSite;
    private CallSite`1<Func`4<CallSite, CodeContext, object, object>> _lenSite;
    internal CallSite`1<Func`4<CallSite, object, CodeContext, object>> GetTryGetMemberSite(CodeContext context, string name);
    internal CallSite`1<Func`4<CallSite, CodeContext, object, object>> GetDirSite(CodeContext context);
    internal CallSite`1<Func`5<CallSite, CodeContext, object, string, object>> GetGetAttributeSite(CodeContext context);
    internal CallSite`1<Func`7<CallSite, CodeContext, object, object, string, object, object>> GetSetAttrSite(CodeContext context);
    internal CallSite`1<Func`4<CallSite, CodeContext, object, object>> GetLenSite(CodeContext context);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("PythonType: {Name}")]
[DebuggerTypeProxyAttribute("IronPython.Runtime.Types.PythonType/DebugProxy")]
[PythonTypeAttribute("type")]
[DocumentationAttribute("type(object) -> gets the type of the object
type(name, bases, dict) -> creates a new type instance with the given name, base classes, and members from the dictionary")]
public class IronPython.Runtime.Types.PythonType : object {
    private Type _underlyingSystemType;
    private Dictionary`2<string, PythonTypeSlot> _dict;
    private PythonTypeAttributes _attrs;
    private int _flags;
    private int _version;
    private List`1<WeakReference> _subtypes;
    private PythonContext _pythonContext;
    private Nullable`1<bool> _objectNew;
    private Nullable`1<bool> _objectInit;
    internal Dictionary`2<CachedGetKey, FastGetBase> _cachedGets;
    internal Dictionary`2<CachedGetKey, FastGetBase> _cachedTryGets;
    internal Dictionary`2<SetMemberKey, FastSetBase> _cachedSets;
    internal Dictionary`2<string, TypeGetBase> _cachedTypeGets;
    internal Dictionary`2<string, TypeGetBase> _cachedTypeTryGets;
    private List`1<PythonType> _resolutionOrder;
    private PythonType[] _bases;
    private BuiltinFunction _ctor;
    private Type _finalSystemType;
    private WeakRefTracker _weakrefTracker;
    private WeakReference _weakRef;
    private String[] _slots;
    private int _originalSlotCount;
    private InstanceCreator _instanceCtor;
    private CallSite`1<Func`3<CallSite, object, int>> _hashSite;
    private CallSite`1<Func`4<CallSite, object, object, bool>> _eqSite;
    private Dictionary`2<CallSignature, LateBoundInitBinder> _lateBoundInitBinders;
    private String[] _optimizedInstanceNames;
    private int _optimizedInstanceVersion;
    private Dictionary`2<string, List`1<MethodInfo>> _extensionMethods;
    private PythonSiteCache _siteCache;
    private PythonTypeSlot _lenSlot;
    internal Func`3<string, Exception, Exception> _makeException;
    private static int MasterVersion;
    private static CommonDictionaryStorage _pythonTypes;
    internal static PythonType _pythonTypeType;
    private static WeakReference[] _emptyWeakRef;
    private static object _subtypesLock;
    internal static Func`3<string, Exception, Exception> DefaultMakeException;
    internal static Func`2<string, Exception> DefaultMakeExceptionNoInnerException;
    private static Dictionary`2<Type, Dictionary`2<Type, Delegate>> _fastBindCtors;
    private static Dictionary`2<Type, BuiltinFunction> _userTypeCtors;
    private static int TypeFlagHeapType;
    private static int TypeFlagAbstractMethodsDefined;
    private static int TypeFlagAbstractMethodsNonEmpty;
    [SlotFieldAttribute]
public static PythonTypeSlot __dict__;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QualName>k__BackingField;
    internal BuiltinFunction Ctor { get; }
    public PythonType Item { get; }
    public object Item { get; }
    internal int SlotCount { get; }
    internal string Name { get; internal set; }
    internal string QualName { get; internal set; }
    internal int Version { get; }
    internal bool IsNull { get; }
    internal IList`1<PythonType> ResolutionOrder { get; internal set; }
    internal CallSite`1<Func`3<CallSite, object, int>> HashSite { get; }
    internal Type UnderlyingSystemType { get; }
    internal Type FinalSystemType { get; }
    internal Type ExtensionType { get; }
    internal IList`1<PythonType> BaseTypes { get; internal set; }
    internal bool IsSystemType { get; internal set; }
    internal bool IsWeakReferencable { get; internal set; }
    internal bool HasDictionary { get; internal set; }
    internal bool HasSystemCtor { get; }
    internal bool IsPythonType { get; internal set; }
    internal PythonContext PythonContext { get; }
    internal PythonContext Context { get; }
    internal object SyncRoot { get; }
    internal Dictionary`2<string, List`1<MethodInfo>> ExtensionMethods { get; }
    private IList`1<WeakReference> SubTypes { get; }
    public PythonType(CodeContext context, string name, PythonTuple bases, PythonDictionary dict);
    internal PythonType(CodeContext context, string name, PythonTuple bases, PythonDictionary dict, string selfNames);
    internal PythonType(Type underlyingSystemType);
    internal PythonType(PythonType baseType, string name, Func`3<string, Exception, Exception> exceptionMaker);
    internal PythonType(PythonType[] baseTypes, string name);
    internal PythonType(PythonType[] baseTypes, Type underlyingType, string name, Func`3<string, Exception, Exception> exceptionMaker);
    internal PythonType(PythonContext context, PythonType baseType, string name, string module, string doc, Func`3<string, Exception, Exception> exceptionMaker);
    internal PythonType(PythonContext context, PythonType[] baseTypes, string name, string module, string doc);
    internal PythonType(PythonContext context, PythonType[] baseTypes, Type underlyingType, string name, string module, string doc, Func`3<string, Exception, Exception> exceptionMaker);
    private static PythonType();
    internal BuiltinFunction get_Ctor();
    public static object __new__(CodeContext context, PythonType cls, string name, PythonTuple bases, PythonDictionary dict);
    internal static object __new__(CodeContext context, PythonType cls, string name, PythonTuple bases, PythonDictionary dict, string selfNames);
    public void __init__(string name, PythonTuple bases, PythonDictionary dict);
    internal static PythonType FindMetaClass(PythonType cls, PythonTuple bases);
    public static object __new__(CodeContext context, object cls, object o);
    public void __init__(object o);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static PythonTuple Get__bases__(CodeContext context, PythonType type);
    private PythonTuple GetBasesTuple();
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static PythonType Get__base__(CodeContext context, PythonType type);
    private bool SetAbstractMethodFlags(string name, object value);
    internal bool IsIterable(CodeContext context);
    private void ClearAbstractMethodFlags(string name);
    internal bool HasAbstractMethods(CodeContext context);
    internal string GetAbstractErrorMessage(CodeContext context);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static int Get__flags__(CodeContext context, PythonType type);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static void Set__bases__(CodeContext context, PythonType type, object value);
    private static List`1<PythonType> CalculateMro(PythonType type, IList`1<PythonType> ldt);
    private static bool TryReplaceExtensibleWithBase(Type curType, Type& newType);
    public object __call__(CodeContext context, Object[] args);
    public object __call__(CodeContext context, IDictionary`2<string, object> kwArgs, Object[] args);
    public void __delattr__(CodeContext context, string name);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static object Get__doc__(CodeContext context, PythonType self);
    public object __getattribute__(CodeContext context, string name);
    public PythonType get_Item(Type[] args);
    public object get_Item(string member);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static object Get__module__(CodeContext context, PythonType self);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
[PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string Get__clr_assembly__(PythonType self);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static void Set__module__(CodeContext context, PythonType self, object value);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static void Delete__module__(CodeContext context, PythonType self);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static PythonTuple Get__mro__(PythonType type);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static string Get__name__(PythonType type);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static void Set__name__(PythonType type, string name);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static string Get__qualname__(PythonType type);
    [PropertyMethodAttribute]
[WrapperDescriptorAttribute]
public static void Set__qualname__(PythonType type, string name);
    public static PythonDictionary __prepare__(IDictionary`2<object, object> kwargs, Object[] args);
    public sealed virtual string __repr__(CodeContext context);
    internal string GetTypeDebuggerDisplay();
    public void __setattr__(CodeContext context, string name, object value);
    public PythonList __subclasses__(CodeContext context);
    public virtual PythonList mro();
    public virtual bool __instancecheck__(object instance);
    public virtual bool __subclasscheck__(PythonType sub);
    private bool SubclassImpl(PythonType sub);
    public static Type op_Implicit(PythonType self);
    public static TypeTracker op_Implicit(PythonType self);
    internal int get_SlotCount();
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal string get_QualName();
    [CompilerGeneratedAttribute]
internal void set_QualName(string value);
    internal int get_Version();
    internal bool get_IsNull();
    internal IList`1<PythonType> get_ResolutionOrder();
    internal void set_ResolutionOrder(IList`1<PythonType> value);
    internal static PythonType GetPythonType(Type type);
    internal static PythonType SetPythonType(Type type, PythonType pyType);
    internal object CreateInstance(CodeContext context);
    internal object CreateInstance(CodeContext context, object arg0);
    internal object CreateInstance(CodeContext context, object arg0, object arg1);
    internal object CreateInstance(CodeContext context, object arg0, object arg1, object arg2);
    internal object CreateInstance(CodeContext context, Object[] args);
    internal object CreateInstance(CodeContext context, Object[] args, String[] names);
    internal int Hash(object o);
    internal bool TryGetLength(CodeContext context, object o, Int32& length);
    internal bool EqualRetBool(object self, object other);
    internal CallSite`1<Func`4<CallSite, object, CodeContext, object>> GetTryGetMemberSite(CodeContext context, string name);
    internal bool TryGetBoundAttr(CodeContext context, object o, string name, Object& ret);
    internal CallSite`1<Func`3<CallSite, object, int>> get_HashSite();
    private void EnsureHashSite();
    internal Type get_UnderlyingSystemType();
    internal Type get_FinalSystemType();
    internal Type get_ExtensionType();
    internal IList`1<PythonType> get_BaseTypes();
    internal void set_BaseTypes(IList`1<PythonType> value);
    internal bool IsSubclassOf(PythonType other);
    private bool IsSubclassWorker(PythonType other);
    internal bool get_IsSystemType();
    internal void set_IsSystemType(bool value);
    internal bool get_IsWeakReferencable();
    internal void set_IsWeakReferencable(bool value);
    internal bool get_HasDictionary();
    internal void set_HasDictionary(bool value);
    internal bool get_HasSystemCtor();
    internal void SetConstructor(BuiltinFunction ctor);
    internal bool get_IsPythonType();
    internal void set_IsPythonType(bool value);
    internal PythonContext get_PythonContext();
    internal PythonContext get_Context();
    internal object get_SyncRoot();
    internal bool IsHiddenMember(string name);
    internal LateBoundInitBinder GetLateBoundInitBinder(CallSignature signature);
    internal Dictionary`2<string, List`1<MethodInfo>> get_ExtensionMethods();
    internal bool TryLookupSlot(CodeContext context, string name, PythonTypeSlot& slot);
    internal bool TryResolveSlot(CodeContext context, string name, PythonTypeSlot& slot);
    internal void AddSlot(string name, PythonTypeSlot slot);
    private void ClearObjectNewInSubclasses(PythonType pt);
    private void ClearObjectInitInSubclasses(PythonType pt);
    internal bool TryGetCustomSetAttr(CodeContext context, PythonTypeSlot& pts);
    internal void SetCustomMember(CodeContext context, string name, object value);
    internal static PythonTypeSlot ToTypeSlot(object value);
    internal bool DeleteCustomMember(CodeContext context, string name);
    internal bool TryGetBoundCustomMember(CodeContext context, string name, Object& value);
    private sealed virtual override T IronPython.Runtime.Binding.IFastGettable.MakeGetBinding(CallSite`1<T> site, PythonGetMemberBinder binder, CodeContext context, string name);
    internal object GetMember(CodeContext context, object instance, string name);
    internal void SetMember(CodeContext context, object instance, string name, object value);
    internal void DeleteMember(CodeContext context, object instance, string name);
    internal bool TryGetMember(CodeContext context, object instance, string name, Object& value);
    internal bool TryGetNonCustomMember(CodeContext context, object instance, string name, Object& value);
    internal bool TryGetBoundMember(CodeContext context, object instance, string name, Object& value);
    private object InvokeGetAttributeMethod(CodeContext context, string name, object getattr);
    internal bool TryGetNonCustomBoundMember(CodeContext context, object instance, string name, Object& value);
    private bool TryResolveSlot(CodeContext context, object instance, string name, Object& value);
    private bool TryResolveNonObjectSlot(CodeContext context, object instance, string name, Object& value);
    internal bool TrySetMember(CodeContext context, object instance, string name, object value);
    internal bool TrySetNonCustomMember(CodeContext context, object instance, string name, object value);
    internal bool TryDeleteMember(CodeContext context, object instance, string name);
    internal bool TryDeleteNonCustomMember(CodeContext context, object instance, string name);
    internal PythonList GetMemberNames(CodeContext context);
    internal PythonList GetMemberNames(CodeContext context, object self);
    private PythonList TryGetCustomDir(CodeContext context, object self);
    private static void AddUserTypeMembers(CodeContext context, Dictionary`2<string, string> keys, PythonType dt, PythonList res);
    private static void AddOneMember(Dictionary`2<string, string> keys, PythonList res, object name);
    private static PythonList AddInstanceMembers(object self, Dictionary`2<string, string> keys, PythonList res);
    internal PythonDictionary GetMemberDictionary(CodeContext context);
    internal PythonDictionary GetMemberDictionary(CodeContext context, bool excludeDict);
    private void InitializeUserType(CodeContext context, string name, PythonTuple bases, PythonDictionary vars, string selfNames);
    internal PythonDictionary MakeDictionary();
    internal IList`1<string> GetOptimizedInstanceNames();
    internal int GetOptimizedInstanceVersion();
    internal IList`1<string> GetTypeSlots();
    internal static List`1<string> GetSlots(PythonDictionary dict);
    internal static List`1<string> SlotsToList(object slots);
    internal bool HasObjectNew(CodeContext context);
    internal bool HasObjectInit(CodeContext context);
    private void UpdateObjectNewAndInit(CodeContext context);
    private static string GetSlotName(object o);
    private int GetUsedSlotCount();
    private void PopulateDictionary(CodeContext context, string name, PythonTuple bases, PythonDictionary vars);
    private bool CheckForSlotWithDefault(CodeContext context, IList`1<PythonType> resolutionOrder, List`1<string> slots, string name);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual Type __clrtype__();
    private void PopulateSlot(string key, object value);
    private static List`1<PythonType> GetBasesAsList(PythonTuple bases);
    private static PythonTuple ValidateBases(PythonTuple bases);
    private static void EnsureModule(CodeContext context, PythonDictionary dict);
    private void InitializeSystemType();
    private void AddSystemBases();
    private void AddSystemInterfaces(List`1<PythonType> mro);
    private void AddSystemConstructors();
    private BuiltinFunction GetConstructors();
    private void EnsureConstructor();
    private void EnsureInstanceCtor();
    private void UpdateVersion();
    private static int GetNextVersion();
    private void EnsureDict();
    private void AddSubType(PythonType subtype);
    private void RemoveSubType(PythonType subtype);
    private IList`1<WeakReference> get_SubTypes();
    private sealed virtual override IList`1<string> Microsoft.Scripting.Runtime.IMembersList.GetMemberNames();
    private sealed virtual override IList`1<object> IronPython.Runtime.IPythonMembersList.GetMemberNames(CodeContext context);
    private sealed virtual override WeakRefTracker IronPython.Runtime.IWeakReferenceable.GetWeakRef();
    private sealed virtual override bool IronPython.Runtime.IWeakReferenceable.SetWeakRef(WeakRefTracker value);
    private sealed virtual override void IronPython.Runtime.IWeakReferenceable.SetFinalizer(WeakRefTracker value);
    private sealed virtual override IWeakReferenceable IronPython.Runtime.IWeakReferenceableByProxy.GetWeakRefProxy(PythonContext context);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual DynamicMetaObject GetMetaObject(Expression parameter);
    internal WeakReference GetSharedWeakReference();
    private sealed virtual override T IronPython.Runtime.Binding.IFastSettable.MakeSetBinding(CallSite`1<T> site, PythonSetMemberBinder binder);
    private static Func`4<CallSite, object, T, object> MakeFastSet(CodeContext context, string name);
    private sealed virtual override FastBindResult`1<T> IronPython.Runtime.Binding.IFastInvokable.MakeInvokeBinding(CallSite`1<T> site, PythonInvokeBinder binder, CodeContext context, Object[] args);
    private object GetPythonType(CallSite site, CodeContext context, object type, object instance);
    private object EmptySet(CallSite site, CodeContext context, object type);
    private object NewObject(CallSite site, CodeContext context, object type);
}
public class IronPython.Runtime.Types.PythonTypeDataSlot : PythonTypeSlot {
    public virtual void __set__(CodeContext context, object instance, object value);
    public virtual void __delete__(CodeContext context, object instance);
    internal virtual bool IsSetDescriptor(CodeContext context, PythonType owner);
}
[PythonTypeAttribute("getset_descriptor")]
public class IronPython.Runtime.Types.PythonTypeDictSlot : PythonTypeSlot {
    private PythonType _type;
    public PythonTypeDictSlot(PythonType type);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual bool IsSetDescriptor(CodeContext context, PythonType owner);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    public void __set__(CodeContext context, object instance, object value);
    public sealed virtual string __repr__(CodeContext context);
}
internal static class IronPython.Runtime.Types.PythonTypeInfo : object {
    private static MemberResolver[] _resolvers;
    private static DocumentationDescriptor _docDescr;
    internal static Dictionary`2<string, PythonOperationKind> _pythonOperatorTable;
    private static Func`3<MemberBinder, Type, MemberGroup> _ComplexResolver;
    private static Func`3<MemberBinder, Type, MemberGroup> _FloatResolver;
    private static Func`3<MemberBinder, Type, MemberGroup> _IntResolver;
    private static Func`3<MemberBinder, Type, MemberGroup> _BigIntegerResolver;
    private static Func`3<MemberBinder, Type, MemberGroup> _GetItemResolver;
    private static Func`3<MemberBinder, Type, MemberGroup> _SetItemResolver;
    private static String[] CastNames;
    private static Func`3<MemberBinder, Type, MemberGroup> ComplexResolver { get; }
    private static Func`3<MemberBinder, Type, MemberGroup> FloatResolver { get; }
    private static Func`3<MemberBinder, Type, MemberGroup> IntResolver { get; }
    private static Func`3<MemberBinder, Type, MemberGroup> BigIntegerResolver { get; }
    private static Func`3<MemberBinder, Type, MemberGroup> GetItemResolver { get; }
    private static Func`3<MemberBinder, Type, MemberGroup> SetItemResolver { get; }
    private static PythonTypeInfo();
    public static MemberGroup GetMemberAll(PythonBinder binder, MemberRequestKind action, Type type, string name);
    public static IList`1<ResolvedMember> GetMembersAll(PythonBinder binder, MemberRequestKind action, Type type);
    public static MemberGroup GetMember(PythonBinder binder, MemberRequestKind action, Type type, string name);
    public static IList`1<ResolvedMember> GetMembers(PythonBinder binder, MemberRequestKind action, Type type);
    private static MemberResolver[] MakeResolverTable();
    private static Func`3<MemberBinder, Type, MemberGroup> get_ComplexResolver();
    private static Func`3<MemberBinder, Type, MemberGroup> get_FloatResolver();
    private static Func`3<MemberBinder, Type, MemberGroup> get_IntResolver();
    private static Func`3<MemberBinder, Type, MemberGroup> get_BigIntegerResolver();
    private static Func`3<MemberBinder, Type, MemberGroup> get_GetItemResolver();
    private static Func`3<MemberBinder, Type, MemberGroup> get_SetItemResolver();
    private static MemberGroup StringResolver(MemberBinder binder, Type type);
    private static MemberGroup ReprResolver(MemberBinder binder, Type type);
    private static MemberGroup SerializationResolver(MemberBinder binder, Type type);
    private static bool TypeOverridesMethod(MemberBinder binder, Type type, string methodName);
    private static MemberGroup HashResolver(MemberBinder binder, Type type);
    private static MemberGroup NewResolver(MemberBinder binder, Type type);
    internal static MemberGroup GetExtensionMemberGroup(Type type, MemberInfo[] news);
    private static MemberGroup NextResolver(MemberBinder binder, Type type);
    private static MemberGroup LengthResolver(MemberBinder binder, Type type);
    private static MemberGroup IterResolver(MemberBinder binder, Type type);
    private static MemberGroup AllResolver(MemberBinder binder, Type type);
    private static MemberGroup DirResolver(MemberBinder binder, Type type);
    private static MemberGroup DocResolver(MemberBinder binder, Type type);
    private static MemberGroup EnterResolver(MemberBinder binder, Type type);
    private static MemberGroup ExitResolver(MemberBinder binder, Type type);
    private static MemberGroup FormatResolver(MemberBinder binder, Type type);
    private static MemberGroup ContainsResolver(MemberBinder binder, Type type);
    private static void GetEnumeratorContains(Type type, IList`1<Type> intf, List`1& containsMembers, Boolean& hasObjectContains, Type ienumOfT, Type ienum);
    private static MethodTracker[] GetEqualityMethods(Type type, string name);
    private static MemberGroup GetMemberGroup(MemberBinder memberBinder, MemberRequestKind action, Type type, string name);
    private static IList`1<ResolvedMember> GetResolvedMembers(MemberBinder memberBinder, MemberRequestKind action, Type type);
    private static MemberGroup GetInstanceOpsMethod(Type extends, String[] names);
    private static MethodInfo FindCastMethod(MemberBinder binder, Type fromType, List`1<Type> toTypes);
    private static String[] GetCastNames(Type fromType, Type toType);
    private static Func`3<MemberBinder, Type, MemberGroup> MakeConversionResolver(List`1<Type> castPrec);
    private static Func`3<MemberBinder, Type, MemberGroup> MakeIndexerResolver(bool set);
    internal static bool IncludeOperatorMethod(Type t, PythonOperationKind op);
    private static MemberGroup FilterFieldAndEvent(MemberGroup members);
    private static bool ProtectedOnly(MemberInfo input);
    internal static bool IsReverseOperator(PythonOperationKind op);
    private static MemberGroup FilterForwardReverseMethods(string name, MemberGroup group, Type type, PythonOperationKind oper);
    private static bool AreTypesCompatible(Type paramType, Type declaringType);
    private static void EnsureOperatorTable();
    private static MemberGroup FilterObjectMembers(MemberGroup group);
    private static MemberGroup FilterSpecialNames(MemberGroup group, string name, MemberRequestKind action);
    private static bool IsPropertyWithParameters(MethodTracker meth);
    private static bool IsPythonRecognizedOperator(string name);
    private static bool IsPropertyDefaultMember(PropertyTracker pt);
    private static bool IsMethodDefaultMember(MethodTracker pt);
    private static List`1<MemberTracker> MakeListWithPreviousMembers(MemberGroup group, List`1<MemberTracker> mts, int i);
    private static MethodInfo[] GetMethodSet(string name, int expected);
    public static Dictionary`2<string, PythonOperationKind> InitializeOperatorTable();
}
[PythonTypeAttribute]
public class IronPython.Runtime.Types.PythonTypeSlot : object {
    internal bool IsAlwaysVisible { get; }
    internal bool CanOptimizeGets { get; }
    internal bool GetAlwaysSucceeds { get; }
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    internal virtual bool get_IsAlwaysVisible();
    internal virtual bool get_CanOptimizeGets();
    internal virtual void MakeGetExpression(PythonBinder binder, Expression codeContext, DynamicMetaObject instance, DynamicMetaObject owner, ConditionalBuilder builder);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual bool IsSetDescriptor(CodeContext context, PythonType owner);
    public virtual object __get__(CodeContext context, object instance, object typeContext);
}
public class IronPython.Runtime.Types.PythonTypeTypeSlot : PythonTypeDataSlot {
    public static string __doc__;
    internal bool GetAlwaysSucceeds { get; }
    private static PythonTypeTypeSlot();
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
}
public class IronPython.Runtime.Types.PythonTypeUserDescriptorSlot : PythonTypeSlot {
    private int _descVersion;
    private PythonTypeSlot _desc;
    private static int UserDescriptorFalse;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    internal object Value { get; internal set; }
    internal PythonTypeUserDescriptorSlot(object value);
    internal PythonTypeUserDescriptorSlot(object value, bool isntDescriptor);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal object GetValue(CodeContext context, object instance, PythonType owner);
    private void CalculateDescriptorInfo();
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual bool IsSetDescriptor(CodeContext context, PythonType owner);
    [CompilerGeneratedAttribute]
internal object get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(object value);
}
[PythonTypeAttribute("getset_descriptor")]
public class IronPython.Runtime.Types.PythonTypeWeakRefSlot : PythonTypeSlot {
    private PythonType _type;
    public PythonTypeWeakRefSlot(PythonType parent);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    public virtual string ToString();
    public void __set__(CodeContext context, object instance, object value);
    public sealed virtual string __repr__(CodeContext context);
}
[PythonTypeAttribute("event#")]
public class IronPython.Runtime.Types.ReflectedEvent : PythonTypeDataSlot {
    private bool _clsOnly;
    private EventTracker _tracker;
    internal bool GetAlwaysSucceeds { get; }
    internal bool IsAlwaysVisible { get; }
    public string __doc__ { get; }
    public EventInfo Info { get; }
    public EventTracker Tracker { get; }
    internal ReflectedEvent(EventTracker tracker, bool clsOnly);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    private bool EventInfosDiffer(BoundEvent et);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    internal virtual bool get_IsAlwaysVisible();
    public string get___doc__();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventInfo get_Info();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventTracker get_Tracker();
    private MissingMemberException ReadOnlyException(PythonType dt);
    public sealed virtual string __repr__(CodeContext context);
}
[PythonTypeAttribute("member_descriptor")]
public class IronPython.Runtime.Types.ReflectedExtensionProperty : ReflectedGetterSetter {
    private MethodInfo _deleter;
    private ExtensionPropertyInfo _extInfo;
    internal bool GetAlwaysSucceeds { get; }
    internal bool CanOptimizeGets { get; }
    internal Type DeclaringType { get; }
    internal ExtensionPropertyInfo ExtInfo { get; }
    public string __name__ { get; }
    public string __doc__ { get; }
    public ReflectedExtensionProperty(ExtensionPropertyInfo info, NameType nt);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    internal virtual bool IsSetDescriptor(CodeContext context, PythonType owner);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual bool get_CanOptimizeGets();
    public void __set__(CodeContext context, object instance, object value);
    public void __delete__(CodeContext context, object instance);
    internal virtual Type get_DeclaringType();
    internal ExtensionPropertyInfo get_ExtInfo();
    public virtual string get___name__();
    public string get___doc__();
}
[PythonTypeAttribute("field#")]
public class IronPython.Runtime.Types.ReflectedField : PythonTypeSlot {
    private NameType _nameType;
    internal FieldInfo _info;
    internal static string UpdateValueTypeFieldWarning;
    public FieldInfo Info { get; }
    public string __doc__ { get; }
    public PythonType FieldType { get; }
    internal bool GetAlwaysSucceeds { get; }
    internal bool CanOptimizeGets { get; }
    internal bool IsAlwaysVisible { get; }
    public ReflectedField(FieldInfo info, NameType nameType);
    public ReflectedField(FieldInfo info);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FieldInfo get_Info();
    public object GetValue(CodeContext context, object instance);
    public void SetValue(CodeContext context, object instance, object value);
    public void __set__(CodeContext context, object instance, object value);
    public void __delete__(object instance);
    public string get___doc__();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PythonType get_FieldType();
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual bool get_CanOptimizeGets();
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    private bool TrySetValueWorker(CodeContext context, object instance, PythonType owner, object value, bool suppressWarning);
    internal virtual bool IsSetDescriptor(CodeContext context, PythonType owner);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    internal virtual bool get_IsAlwaysVisible();
    internal virtual void MakeGetExpression(PythonBinder binder, Expression codeContext, DynamicMetaObject instance, DynamicMetaObject owner, ConditionalBuilder builder);
    private void DoSet(CodeContext context, object instance, object val, bool suppressWarning);
    private bool ShouldSetOrDelete(PythonType type);
    public sealed virtual string __repr__(CodeContext context);
}
public abstract class IronPython.Runtime.Types.ReflectedGetterSetter : PythonTypeSlot {
    private MethodInfo[] _getter;
    private MethodInfo[] _setter;
    private NameType _nameType;
    private BuiltinFunction _getfunc;
    private BuiltinFunction _setfunc;
    internal Type DeclaringType { get; }
    public string __name__ { get; }
    public PythonType __objclass__ { get; }
    internal MethodInfo[] Getter { get; }
    internal MethodInfo[] Setter { get; }
    public PythonType PropertyType { get; }
    internal NameType NameType { get; }
    internal bool IsAlwaysVisible { get; }
    protected ReflectedGetterSetter(MethodInfo[] getter, MethodInfo[] setter, NameType nt);
    protected ReflectedGetterSetter(ReflectedGetterSetter from);
    internal void AddGetter(MethodInfo mi);
    private void MakeGetFunc();
    internal void AddSetter(MethodInfo mi);
    private void MakeSetFunc();
    internal abstract virtual Type get_DeclaringType();
    public abstract virtual string get___name__();
    public PythonType get___objclass__();
    internal MethodInfo[] get_Getter();
    internal MethodInfo[] get_Setter();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual PythonType get_PropertyType();
    internal NameType get_NameType();
    internal object CallGetter(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, object instance, Object[] args);
    internal object CallTarget(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, MethodInfo[] targets, object instance, Object[] args);
    internal static bool NeedToReturnProperty(object instance, MethodInfo[] mis);
    internal bool CallSetter(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, object instance, Object[] args, object value);
    internal virtual bool get_IsAlwaysVisible();
    private static MethodInfo[] RemoveNullEntries(MethodInfo[] mis);
}
[DefaultMemberAttribute("Item")]
[PythonTypeAttribute("indexer#")]
public class IronPython.Runtime.Types.ReflectedIndexer : ReflectedGetterSetter {
    private object _instance;
    private PropertyInfo _info;
    internal bool GetAlwaysSucceeds { get; }
    internal Type DeclaringType { get; }
    public PythonType PropertyType { get; }
    public string __name__ { get; }
    public object Item { get; public set; }
    public ReflectedIndexer(PropertyInfo info, NameType nt, bool privateBinding);
    public ReflectedIndexer(ReflectedIndexer from, object instance);
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual Type get_DeclaringType();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual PythonType get_PropertyType();
    public virtual string get___name__();
    public bool SetValue(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, Object[] keys, object value);
    public object GetValue(CodeContext context, SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, Object[] keys);
    public object __get__(CodeContext context, object instance, object owner);
    public object get_Item(SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, Object[] key);
    public void set_Item(SiteLocalStorage`1<CallSite`1<Func`5<CallSite, CodeContext, object, Object[], object>>> storage, Object[] key, object value);
}
[PythonTypeAttribute("getset_descriptor")]
public class IronPython.Runtime.Types.ReflectedProperty : ReflectedGetterSetter {
    private PropertyInfo _info;
    internal bool CanOptimizeGets { get; }
    internal Type DeclaringType { get; }
    public string __name__ { get; }
    public PropertyInfo Info { get; }
    public PythonType PropertyType { get; }
    internal bool GetAlwaysSucceeds { get; }
    internal bool IsAlwaysVisible { get; }
    public string __doc__ { get; }
    public ReflectedProperty(PropertyInfo info, MethodInfo getter, MethodInfo setter, NameType nt);
    public ReflectedProperty(PropertyInfo info, MethodInfo[] getters, MethodInfo[] setters, NameType nt);
    internal virtual bool get_CanOptimizeGets();
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual Type get_DeclaringType();
    public virtual string get___name__();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PropertyInfo get_Info();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual PythonType get_PropertyType();
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    private object CallGetter(CodeContext context, PythonType owner, SiteLocalStorage`1<CallSite`1<Func`4<CallSite, CodeContext, object, object>>> storage, object instance);
    private static bool IsApplicableForType(Type type, MethodInfo mt);
    internal virtual bool get_GetAlwaysSucceeds();
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    internal virtual void MakeGetExpression(PythonBinder binder, Expression codeContext, DynamicMetaObject instance, DynamicMetaObject owner, ConditionalBuilder builder);
    internal virtual bool get_IsAlwaysVisible();
    internal virtual bool IsSetDescriptor(CodeContext context, PythonType owner);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object GetValue(CodeContext context, object instance);
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void SetValue(CodeContext context, object instance, object value);
    public void __set__(CodeContext context, object instance, object value);
    public void __delete__(object instance);
    public string get___doc__();
    public sealed virtual string __repr__(CodeContext context);
}
[PythonTypeAttribute("member_descriptor")]
internal class IronPython.Runtime.Types.ReflectedSlotProperty : PythonTypeDataSlot {
    private string _name;
    private string _typeName;
    private int _index;
    private static Dictionary`2<int, SlotValue> _methods;
    private SlotValue Value { get; }
    internal SlotGetValue Getter { get; }
    internal SlotSetValue Setter { get; }
    internal int Index { get; }
    public ReflectedSlotProperty(string name, string typeName, int index);
    private static ReflectedSlotProperty();
    internal virtual bool TryGetValue(CodeContext context, object instance, PythonType owner, Object& value);
    internal virtual bool TrySetValue(CodeContext context, object instance, PythonType owner, object value);
    internal virtual bool TryDeleteValue(CodeContext context, object instance, PythonType owner);
    public sealed virtual string __repr__(CodeContext context);
    private SlotValue get_Value();
    internal SlotGetValue get_Getter();
    internal SlotSetValue get_Setter();
    internal int get_Index();
    private void EnsureGetter(SlotValue value);
    private void EnsureSetter(SlotValue value);
    [CompilerGeneratedAttribute]
private object <EnsureGetter>b__17_0(object instance);
    [CompilerGeneratedAttribute]
private void <EnsureSetter>b__18_0(object instance, object setvalue);
}
internal class IronPython.Runtime.Types.ResolvedMember : object {
    public string Name;
    public MemberGroup Member;
    public static ResolvedMember[] Empty;
    public ResolvedMember(string name, MemberGroup member);
    private static ResolvedMember();
}
internal class IronPython.Runtime.Types.SetMemberDelegates`1 : FastSetBase`1<TValue> {
    private string _name;
    private PythonTypeSlot _slot;
    private SlotSetValue _slotFunc;
    private CodeContext _context;
    private int _index;
    private int _keysVersion;
    public SetMemberDelegates`1(CodeContext context, PythonType type, OptimizedSetKind kind, string name, int version, PythonTypeSlot slot, SlotSetValue slotFunc);
    public object SetAttr(CallSite site, object self, TValue value);
    public object SetDictOptimized(CallSite site, object self, TValue value);
    public object SetDict(CallSite site, object self, TValue value);
    public object Error(CallSite site, object self, TValue value);
    public object UserSlot(CallSite site, object self, TValue value);
    private object TypeError(IPythonObject ipo);
}
internal class IronPython.Runtime.Types.SetMemberKey : object {
    public Type Type;
    public string Name;
    public SetMemberKey(Type type, string name);
    public sealed virtual bool Equals(SetMemberKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("256")]
internal class IronPython.Runtime.Types.SlotFieldAttribute : Attribute {
}
internal class IronPython.Runtime.Types.SlotGetValue : MulticastDelegate {
    public SlotGetValue(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class IronPython.Runtime.Types.SlotSetValue : MulticastDelegate {
    public SlotSetValue(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class IronPython.Runtime.Types.SystemInstanceCreator : InstanceCreator {
    private CallSite`1<Func`5<CallSite, CodeContext, BuiltinFunction, Object[], object>> _ctorSite;
    private CallSite`1<Func`4<CallSite, CodeContext, BuiltinFunction, object>> _ctorSite0;
    private CallSite`1<Func`5<CallSite, CodeContext, BuiltinFunction, object, object>> _ctorSite1;
    private CallSite`1<Func`6<CallSite, CodeContext, BuiltinFunction, object, object, object>> _ctorSite2;
    private CallSite`1<Func`7<CallSite, CodeContext, BuiltinFunction, object, object, object, object>> _ctorSite3;
    public SystemInstanceCreator(PythonType type);
    internal virtual object CreateInstance(CodeContext context);
    internal virtual object CreateInstance(CodeContext context, object arg0);
    internal virtual object CreateInstance(CodeContext context, object arg0, object arg1);
    internal virtual object CreateInstance(CodeContext context, object arg0, object arg1, object arg2);
    internal virtual object CreateInstance(CodeContext context, Object[] args);
    internal virtual object CreateInstance(CodeContext context, Object[] args, String[] names);
}
internal class IronPython.Runtime.Types.SystemTypeGet : TypeGetBase {
    private PythonType _self;
    public SystemTypeGet(PythonGetMemberBinder binder, FastGetDelegate[] delegates, PythonType type, bool isMeta, bool optimizing);
    public object Target(CallSite site, object self, CodeContext context);
    public object MetaOnlyTarget(CallSite site, object self, CodeContext context);
    public object TargetOptimizing(CallSite site, object self, CodeContext context);
    public object MetaOnlyTargetOptimizing(CallSite site, object self, CodeContext context);
    public virtual bool IsValid(PythonType type);
}
public static class IronPython.Runtime.Types.TypeCache : object {
    private static PythonType array;
    private static PythonType builtinfunction;
    private static PythonType pythondictionary;
    private static PythonType frozensetcollection;
    private static PythonType pythonfunction;
    private static PythonType builtin;
    private static PythonType obj;
    private static PythonType setcollection;
    private static PythonType pythontype;
    private static PythonType str;
    private static PythonType bytes;
    private static PythonType pythontuple;
    private static PythonType weakreference;
    private static PythonType pythonlist;
    private static PythonType pythonmodule;
    private static PythonType method;
    private static PythonType enumerate;
    private static PythonType intType;
    private static PythonType singleType;
    private static PythonType doubleType;
    private static PythonType biginteger;
    private static PythonType complex;
    private static PythonType super;
    private static PythonType nullType;
    private static PythonType boolType;
    private static PythonType baseException;
    public static PythonType Array { get; }
    public static PythonType BuiltinFunction { get; }
    public static PythonType Dict { get; }
    public static PythonType FrozenSet { get; }
    public static PythonType Function { get; }
    public static PythonType Builtin { get; }
    public static PythonType Object { get; }
    public static PythonType Set { get; }
    public static PythonType PythonType { get; }
    public static PythonType String { get; }
    public static PythonType Bytes { get; }
    public static PythonType PythonTuple { get; }
    public static PythonType WeakReference { get; }
    public static PythonType PythonList { get; }
    public static PythonType Module { get; }
    public static PythonType Method { get; }
    public static PythonType Enumerate { get; }
    public static PythonType Int32 { get; }
    public static PythonType Single { get; }
    public static PythonType Double { get; }
    public static PythonType BigInteger { get; }
    public static PythonType Complex { get; }
    public static PythonType Super { get; }
    public static PythonType Null { get; }
    public static PythonType Boolean { get; }
    public static PythonType BaseException { get; }
    [ObsoleteAttribute("use Complex instead")]
public static PythonType Complex64 { get; }
    public static PythonType get_Array();
    public static PythonType get_BuiltinFunction();
    public static PythonType get_Dict();
    public static PythonType get_FrozenSet();
    public static PythonType get_Function();
    public static PythonType get_Builtin();
    public static PythonType get_Object();
    public static PythonType get_Set();
    public static PythonType get_PythonType();
    public static PythonType get_String();
    public static PythonType get_Bytes();
    public static PythonType get_PythonTuple();
    public static PythonType get_WeakReference();
    public static PythonType get_PythonList();
    public static PythonType get_Module();
    public static PythonType get_Method();
    public static PythonType get_Enumerate();
    public static PythonType get_Int32();
    public static PythonType get_Single();
    public static PythonType get_Double();
    public static PythonType get_BigInteger();
    public static PythonType get_Complex();
    public static PythonType get_Super();
    public static PythonType get_Null();
    public static PythonType get_Boolean();
    public static PythonType get_BaseException();
    public static PythonType get_Complex64();
}
internal class IronPython.Runtime.Types.TypeGet : TypeGetBase {
    private int _version;
    public TypeGet(PythonGetMemberBinder binder, FastGetDelegate[] delegates, int version, bool isMeta, bool canOptimize);
    public object Target(CallSite site, object self, CodeContext context);
    public object MetaOnlyTarget(CallSite site, object self, CodeContext context);
    public object TargetOptimizing(CallSite site, object self, CodeContext context);
    public object MetaOnlyTargetOptimizing(CallSite site, object self, CodeContext context);
    public virtual bool IsValid(PythonType type);
}
internal abstract class IronPython.Runtime.Types.TypeGetBase : FastGetBase {
    private FastGetDelegate[] _delegates;
    public TypeGetBase(PythonGetMemberBinder binder, FastGetDelegate[] delegates);
    protected object RunDelegates(object self, CodeContext context);
    protected object RunDelegatesNoOptimize(object self, CodeContext context);
}
internal class IronPython.Runtime.Types.UserGetBase : FastGetBase {
    internal int _version;
    public UserGetBase(PythonGetMemberBinder binder, int version);
    public virtual bool IsValid(PythonType type);
}
internal class IronPython.Runtime.Types.UserInstanceCreator : InstanceCreator {
    private CallSite`1<Func`6<CallSite, CodeContext, BuiltinFunction, PythonType, Object[], object>> _ctorSite;
    private CallSite`1<Func`5<CallSite, CodeContext, BuiltinFunction, PythonType, object>> _ctorSite0;
    private CallSite`1<Func`6<CallSite, CodeContext, BuiltinFunction, PythonType, object, object>> _ctorSite1;
    private CallSite`1<Func`7<CallSite, CodeContext, BuiltinFunction, PythonType, object, object, object>> _ctorSite2;
    private CallSite`1<Func`8<CallSite, CodeContext, BuiltinFunction, PythonType, object, object, object, object>> _ctorSite3;
    public UserInstanceCreator(PythonType type);
    internal virtual object CreateInstance(CodeContext context);
    internal virtual object CreateInstance(CodeContext context, object arg0);
    internal virtual object CreateInstance(CodeContext context, object arg0, object arg1);
    internal virtual object CreateInstance(CodeContext context, object arg0, object arg1, object arg2);
    internal virtual object CreateInstance(CodeContext context, Object[] args);
    internal virtual object CreateInstance(CodeContext context, Object[] args, String[] names);
}
internal enum IronPython.Runtime.UnaryOperators : Enum {
    public int value__;
    public static UnaryOperators Repr;
    public static UnaryOperators Length;
    public static UnaryOperators Hash;
    public static UnaryOperators String;
    public static UnaryOperators Maximum;
}
public class IronPython.Runtime.UnboundLocalException : UnboundNameException {
    public UnboundLocalException(string msg);
    public UnboundLocalException(string message, Exception innerException);
    protected UnboundLocalException(SerializationInfo info, StreamingContext context);
}
public class IronPython.Runtime.UnboundNameException : Exception {
    public UnboundNameException(string msg);
    public UnboundNameException(string message, Exception innerException);
    protected UnboundNameException(SerializationInfo info, StreamingContext context);
}
[PythonTypeAttribute("sys.version_info")]
public class IronPython.Runtime.VersionInfo : PythonTuple {
    public int major;
    public int minor;
    public int micro;
    public string releaselevel;
    public int serial;
    [CompilerGeneratedAttribute]
private static VersionInfo <Instance>k__BackingField;
    internal static VersionInfo Instance { get; }
    private VersionInfo(int major, int minor, int micro, string releaselevel, int serial);
    private static VersionInfo();
    [CompilerGeneratedAttribute]
internal static VersionInfo get_Instance();
    public virtual string __repr__(CodeContext context);
    internal int GetHexVersion();
    private string GetShortReleaseLevel();
    internal string GetVersionString();
}
public class IronPython.Runtime.WeakRefTracker : object {
    private ReaderWriterLockSlim _lock;
    private List`1<CallbackInfo> _callbacks;
    public int HandlerCount { get; }
    public WeakRefTracker(IWeakReferenceable target);
    public WeakRefTracker(IWeakReferenceable target, object callback, object weakRef);
    public void ChainCallback(object callback, object weakRef);
    public int get_HandlerCount();
    public void RemoveHandlerAt(int index);
    public void RemoveHandler(object o);
    internal bool Contains(object callback, object weakref);
    public object GetHandlerCallback(int index);
    public object GetWeakRef(int index);
    protected virtual override void Finalize();
}
[AttributeUsageAttribute("448")]
internal class IronPython.Runtime.WrapperDescriptorAttribute : Attribute {
}
internal class IronPython.Runtime.WrapperDictionaryStorage : DictionaryStorage {
    private TopNamespaceTracker _data;
    public int Count { get; }
    public WrapperDictionaryStorage(TopNamespaceTracker data);
    public virtual void Add(DictionaryStorage& storage, object key, object value);
    private static InvalidOperationException CannotModifyNamespaceDict();
    public virtual bool Contains(object key);
    public virtual bool Remove(DictionaryStorage& storage, object key);
    public virtual bool TryGetValue(object key, Object& value);
    public virtual int get_Count();
    public virtual void Clear(DictionaryStorage& storage);
    public virtual List`1<KeyValuePair`2<object, object>> GetItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PythonTypeAttribute("zip")]
[DocumentationAttribute("zip(iter1 [,iter2 [...]]) --> zip object

Return a zip object whose .__next__() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .__next__()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration.")]
public class IronPython.Runtime.Zip : object {
    private IEnumerator[] enumerators;
    [NullableAttribute("2")]
private object current;
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Current { get; }
    public Zip(CodeContext context, Object[] iters);
    public sealed virtual object get_Current();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool MoveNext();
    [PythonHiddenAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Reset();
    public PythonTuple __reduce__();
}
internal static class IronPython.RuntimeInformation : object {
    private static OSPlatform _osPlatform;
    private static RuntimeInformation();
    public static bool IsOSPlatform(OSPlatform osPlatform);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Scripting.Generation.ParameterInfoWrapper : ParameterInfo {
    private Type _type;
    private string _name;
    public Type ParameterType { get; }
    public string Name { get; }
    public ParameterInfoWrapper(Type parameterType);
    public ParameterInfoWrapper(Type parameterType, string parameterName);
    public virtual Type get_ParameterType();
    public virtual string get_Name();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
