internal static class Community.CsharpSqlite.HelperMethods : object {
    public static bool IsRunningMediumTrust();
}
public class Community.CsharpSqlite.Sqlite3 : object {
    private static FuncDef[] aAlterTableFuncs;
    private static _aTable[] aTable;
    private static FuncDef detach_func;
    private static FuncDef attach_func;
    private static int BITVEC_SZ;
    private static int BITVEC_USIZE;
    private static int BITVEC_SZELEM;
    private static int BITVEC_NELEM;
    private static int BITVEC_NBIT;
    private static UInt32 BITVEC_NINT;
    private static int BITVEC_MXHASH;
    private static int BITVEC_NPTR;
    private static string SQLITE_FILE_HEADER;
    private static byte PTF_INTKEY;
    private static byte PTF_ZERODATA;
    private static byte PTF_LEAFDATA;
    private static byte PTF_LEAF;
    private static int EXTRA_SIZE;
    private static int READ_LOCK;
    private static int WRITE_LOCK;
    private static byte TRANS_NONE;
    private static byte TRANS_READ;
    private static byte TRANS_WRITE;
    private static int BTCURSOR_MAX_DEPTH;
    private static int CURSOR_INVALID;
    private static int CURSOR_VALID;
    private static int CURSOR_REQUIRESEEK;
    private static int CURSOR_FAULT;
    private static int PTRMAP_ROOTPAGE;
    private static int PTRMAP_FREEPAGE;
    private static int PTRMAP_OVERFLOW1;
    private static int PTRMAP_OVERFLOW2;
    private static int PTRMAP_BTREE;
    private static Byte[] zMagicHeader;
    private static bool sqlite3BtreeTrace;
    private static int NN;
    private static int NB;
    private static Byte[] aBalanceQuickSpace;
    private static long refNULL;
    private static int SQLITE_N_BTREE_META;
    private static int SQLITE_DEFAULT_AUTOVACUUM;
    private static int BTREE_AUTOVACUUM_NONE;
    private static int BTREE_AUTOVACUUM_FULL;
    private static int BTREE_AUTOVACUUM_INCR;
    private static int BTREE_OMIT_JOURNAL;
    private static int BTREE_NO_READLOCK;
    private static int BTREE_MEMORY;
    private static int BTREE_SINGLE;
    private static int BTREE_UNORDERED;
    private static int BTREE_INTKEY;
    private static int BTREE_BLOBKEY;
    private static int BTREE_FREE_PAGE_COUNT;
    private static int BTREE_SCHEMA_VERSION;
    private static int BTREE_FILE_FORMAT;
    private static int BTREE_DEFAULT_CACHE_SIZE;
    private static int BTREE_LARGEST_ROOT_PAGE;
    private static int BTREE_TEXT_ENCODING;
    private static int BTREE_USER_VERSION;
    private static int BTREE_INCR_VACUUM;
    private static object nestingLock;
    private static int tkSEMI;
    private static int tkWS;
    private static int tkOTHER;
    private static int tkEXPLAIN;
    private static int tkCREATE;
    private static int tkTEMP;
    private static int tkTRIGGER;
    private static int tkEND;
    private static int SQLITE_ENCRYPT_WRITE_CTX;
    private static int SQLITE_ENCRYPT_READ_CTX;
    private static int SQLITE_DECRYPT;
    private static String[] azCompileOpt;
    private static StringBuilder zdtTemp;
    private static StringBuilder zdtBuf;
    public static Action`4<sqlite3_context, string, int, dxDel> ResultBlob;
    public static Action`2<sqlite3_context, double> ResultDouble;
    public static Action`3<sqlite3_context, string, int> ResultError;
    public static Action`2<sqlite3_context, int> ResultErrorCode;
    public static Action`1<sqlite3_context> ResultErrorNoMem;
    public static Action`1<sqlite3_context> ResultErrorTooBig;
    public static Action`2<sqlite3_context, int> ResultInt;
    public static Action`2<sqlite3_context, long> ResultInt64;
    public static Action`1<sqlite3_context> ResultNull;
    public static Action`4<sqlite3_context, string, int, dxDel> ResultText;
    public static Action`5<sqlite3_context, string, int, int, dxDel> ResultText_Offset;
    public static Action`2<sqlite3_context, Mem> ResultValue;
    public static Action`2<sqlite3_context, int> ResultZeroblob;
    public static Action`3<sqlite3_context, int, string> SetAuxdata;
    public static FinalizeDelegate Finalize;
    public static Func`2<Vdbe, int> ClearBindings;
    public static Func`3<Vdbe, int, Byte[]> ColumnBlob;
    public static Func`3<Vdbe, int, int> ColumnBytes;
    public static Func`3<Vdbe, int, int> ColumnBytes16;
    public static Func`2<Vdbe, int> ColumnCount;
    public static Func`3<Vdbe, int, string> ColumnDecltype;
    public static Func`3<Vdbe, int, double> ColumnDouble;
    public static Func`3<Vdbe, int, int> ColumnInt;
    public static Func`3<Vdbe, int, long> ColumnInt64;
    public static Func`3<Vdbe, int, string> ColumnName;
    public static Func`3<Vdbe, int, string> ColumnText;
    public static Func`3<Vdbe, int, int> ColumnType;
    public static Func`3<Vdbe, int, Mem> ColumnValue;
    public static Func`2<Vdbe, int> DataCount;
    public static Func`2<Vdbe, int> Reset;
    public static Func`2<Vdbe, int> Step;
    public static Func`6<Vdbe, int, Byte[], int, dxDel, int> BindBlob;
    public static Func`4<Vdbe, int, double, int> BindDouble;
    public static Func`4<Vdbe, int, int, int> BindInt;
    public static Func`4<Vdbe, int, long, int> BindInt64;
    public static Func`3<Vdbe, int, int> BindNull;
    public static Func`2<Vdbe, int> BindParameterCount;
    public static Func`3<Vdbe, string, int> BindParameterIndex;
    public static Func`3<Vdbe, int, string> BindParameterName;
    public static Func`6<Vdbe, int, string, int, dxDel, int> BindText;
    public static Func`4<Vdbe, int, Mem, int> BindValue;
    public static Func`4<Vdbe, int, int, int> BindZeroblob;
    public static Func`2<sqlite3, int> Close;
    public static Func`2<Vdbe, sqlite3> DbHandle;
    public static Func`2<sqlite3, string> Errmsg;
    public static OpenDelegate Open;
    public static Func`3<sqlite3, Vdbe, Vdbe> NextStmt;
    public static Func`1<int> Shutdown;
    public static Func`4<Vdbe, int, int, int> StmtStatus;
    public static PrepareDelegate Prepare;
    public static PrepareDelegate PrepareV2;
    public static PrepareDelegateNoTail PrepareV2NoTail;
    public static Func`3<sqlite3_context, int, Mem> AggregateContext;
    public static Func`3<sqlite3_context, int, object> GetAuxdata;
    public static Func`2<sqlite3_context, sqlite3> ContextDbHandle;
    public static Func`2<sqlite3_context, object> UserData;
    public static Func`2<Mem, Byte[]> ValueBlob;
    public static Func`2<Mem, int> ValueBytes;
    public static Func`2<Mem, int> ValueBytes16;
    public static Func`2<Mem, double> ValueDouble;
    public static Func`2<Mem, int> ValueInt;
    public static Func`2<Mem, long> ValueInt64;
    public static Func`2<Mem, string> ValueText;
    public static Func`2<Mem, int> ValueType;
    private static BenignMallocHooks sqlite3Hooks;
    private static BenignMallocHooks wsdHooks;
    private static compareInfo globInfo;
    private static compareInfo likeInfoNorm;
    private static compareInfo likeInfoAlt;
    private static Char[] hexdigits;
    private static Byte[] sqlite3CtypeMap;
    private static bool SQLITE_USE_URI;
    private static Sqlite3Config sqlite3Config;
    private static FuncDefHash sqlite3GlobalFunctions;
    private static Token[] sqlite3IntTokens;
    private static int sqlite3PendingByte;
    public static Int32[] sqlite3OpcodeProperty;
    private static string zText;
    private static Byte[] aHash;
    private static Byte[] aNext;
    private static Byte[] aLen;
    private static Int32[] aOffset;
    private static Byte[] aCode;
    public static int SQLITE_N_KEYWORD;
    private static int SQLITE_CORE;
    private static sqlite3_api_routines sqlite3Apis;
    private static sqlite3AutoExtList sqlite3Autoext;
    private static sqlite3AutoExtList wsdAutoext;
    public static string sqlite3_version;
    private static string sqlite3_temp_directory;
    private static Int32[] aHardLimit;
    private static Mem0Global mem0;
    private static int JOURNAL_CHUNKSIZE;
    private static sqlite3_io_methods MemJournalMethods;
    private static int mutexIsInit;
    private static Mutex SQLITE_W32_MUTEX_INITIALIZER;
    private static sqlite3_mutex[] winMutex_staticMutexes;
    private static int winMutex_isInit;
    private static long winMutex_lock;
    private static object lockThis;
    public static int OP_Goto;
    public static int OP_Gosub;
    public static int OP_Return;
    public static int OP_Yield;
    public static int OP_HaltIfNull;
    public static int OP_Halt;
    public static int OP_Integer;
    public static int OP_Int64;
    public static int OP_Real;
    public static int OP_String8;
    public static int OP_String;
    public static int OP_Null;
    public static int OP_Blob;
    public static int OP_Variable;
    public static int OP_Move;
    public static int OP_Copy;
    public static int OP_SCopy;
    public static int OP_ResultRow;
    public static int OP_Concat;
    public static int OP_Add;
    public static int OP_Subtract;
    public static int OP_Multiply;
    public static int OP_Divide;
    public static int OP_Remainder;
    public static int OP_CollSeq;
    public static int OP_Function;
    public static int OP_BitAnd;
    public static int OP_BitOr;
    public static int OP_ShiftLeft;
    public static int OP_ShiftRight;
    public static int OP_AddImm;
    public static int OP_MustBeInt;
    public static int OP_RealAffinity;
    public static int OP_ToText;
    public static int OP_ToBlob;
    public static int OP_ToNumeric;
    public static int OP_ToInt;
    public static int OP_ToReal;
    public static int OP_Eq;
    public static int OP_Ne;
    public static int OP_Lt;
    public static int OP_Le;
    public static int OP_Gt;
    public static int OP_Ge;
    public static int OP_Permutation;
    public static int OP_Compare;
    public static int OP_Jump;
    public static int OP_And;
    public static int OP_Or;
    public static int OP_Not;
    public static int OP_BitNot;
    public static int OP_If;
    public static int OP_IfNot;
    public static int OP_IsNull;
    public static int OP_NotNull;
    public static int OP_Column;
    public static int OP_Affinity;
    public static int OP_MakeRecord;
    public static int OP_Count;
    public static int OP_Savepoint;
    public static int OP_AutoCommit;
    public static int OP_Transaction;
    public static int OP_ReadCookie;
    public static int OP_SetCookie;
    public static int OP_VerifyCookie;
    public static int OP_OpenRead;
    public static int OP_OpenWrite;
    public static int OP_OpenAutoindex;
    public static int OP_OpenEphemeral;
    public static int OP_OpenPseudo;
    public static int OP_Close;
    public static int OP_SeekLt;
    public static int OP_SeekLe;
    public static int OP_SeekGe;
    public static int OP_SeekGt;
    public static int OP_Seek;
    public static int OP_NotFound;
    public static int OP_Found;
    public static int OP_IsUnique;
    public static int OP_NotExists;
    public static int OP_Sequence;
    public static int OP_NewRowid;
    public static int OP_Insert;
    public static int OP_InsertInt;
    public static int OP_Delete;
    public static int OP_ResetCount;
    public static int OP_RowKey;
    public static int OP_RowData;
    public static int OP_Rowid;
    public static int OP_NullRow;
    public static int OP_Last;
    public static int OP_Sort;
    public static int OP_Rewind;
    public static int OP_Prev;
    public static int OP_Next;
    public static int OP_IdxInsert;
    public static int OP_IdxDelete;
    public static int OP_IdxRowid;
    public static int OP_IdxLT;
    public static int OP_IdxGE;
    public static int OP_Destroy;
    public static int OP_Clear;
    public static int OP_CreateIndex;
    public static int OP_CreateTable;
    public static int OP_ParseSchema;
    public static int OP_LoadAnalysis;
    public static int OP_DropTable;
    public static int OP_DropIndex;
    public static int OP_DropTrigger;
    public static int OP_IntegrityCk;
    public static int OP_RowSetAdd;
    public static int OP_RowSetRead;
    public static int OP_RowSetTest;
    public static int OP_Program;
    public static int OP_Param;
    public static int OP_FkCounter;
    public static int OP_FkIfZero;
    public static int OP_MemMax;
    public static int OP_IfPos;
    public static int OP_IfNeg;
    public static int OP_IfZero;
    public static int OP_AggStep;
    public static int OP_AggFinal;
    public static int OP_Checkpoint;
    public static int OP_JournalMode;
    public static int OP_Vacuum;
    public static int OP_IncrVacuum;
    public static int OP_Expire;
    public static int OP_TableLock;
    public static int OP_VBegin;
    public static int OP_VCreate;
    public static int OP_VDestroy;
    public static int OP_VOpen;
    public static int OP_VFilter;
    public static int OP_VColumn;
    public static int OP_VNext;
    public static int OP_VRename;
    public static int OP_VUpdate;
    public static int OP_Pagecount;
    public static int OP_MaxPgcnt;
    public static int OP_Trace;
    public static int OP_Noop;
    public static int OP_Explain;
    public static int OP_NotUsed_138;
    public static int OP_NotUsed_139;
    public static int OP_NotUsed_140;
    public static int OPFLG_JUMP;
    public static int OPFLG_OUT2_PRERELEASE;
    public static int OPFLG_IN1;
    public static int OPFLG_IN2;
    public static int OPFLG_IN3;
    public static int OPFLG_OUT2;
    public static int OPFLG_OUT3;
    public static Int32[] OPFLG_INITIALIZER;
    private static sqlite3_vfs vfsList;
    private static bool isInit;
    private static bool sqlite3OsTrace;
    private static int TIMER_START;
    private static int TIMER_END;
    private static int TIMER_ELAPSED;
    private static bool SQLITE_OS_WIN;
    private static bool SQLITE_OS_UNIX;
    private static bool SQLITE_OS_OS2;
    private static int MAX_PATH;
    private static int SQLITE_TEMPNAME_SIZE;
    private static int SQLITE_DEFAULT_SECTOR_SIZE;
    private static string SQLITE_TEMP_FILE_PREFIX;
    private static int NO_LOCK;
    private static int SHARED_LOCK;
    private static int RESERVED_LOCK;
    private static int PENDING_LOCK;
    private static int EXCLUSIVE_LOCK;
    private static int PENDING_BYTE;
    private static int RESERVED_BYTE;
    private static int SHARED_FIRST;
    private static int SHARED_SIZE;
    private static UInt32 SQLITE_FCNTL_DB_UNCHANGED;
    private static int INVALID_FILE_ATTRIBUTES;
    private static LockingStrategy lockingStrategy;
    private static int sqlite3_os_type;
    private static int INVALID_SET_FILE_POINTER;
    public static int MX_CLOSE_ATTEMPT;
    private static sqlite3_io_methods winIoMethod;
    private static int MX_DELETION_ATTEMPTS;
    private static sqlite3_vfs winVfs;
    private static int NO_ERROR;
    private static bool sqlite3PagerTrace;
    private static int PAGER_OPEN;
    private static int PAGER_READER;
    private static int PAGER_WRITER_LOCKED;
    private static int PAGER_WRITER_CACHEMOD;
    private static int PAGER_WRITER_DBMOD;
    private static int PAGER_WRITER_FINISHED;
    private static int PAGER_ERROR;
    private static int UNKNOWN_LOCK;
    private static int MAX_SECTOR_SIZE;
    private static Byte[] aJournalMagic;
    private static int PAGER_MAX_PGNO;
    private static int SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT;
    private static int PAGER_OMIT_JOURNAL;
    private static int PAGER_NO_READLOCK;
    private static int PAGER_MEMORY;
    private static int PAGER_LOCKINGMODE_QUERY;
    private static int PAGER_LOCKINGMODE_NORMAL;
    private static int PAGER_LOCKINGMODE_EXCLUSIVE;
    private static int PAGER_JOURNALMODE_QUERY;
    private static int PAGER_JOURNALMODE_DELETE;
    private static int PAGER_JOURNALMODE_PERSIST;
    private static int PAGER_JOURNALMODE_OFF;
    private static int PAGER_JOURNALMODE_TRUNCATE;
    private static int PAGER_JOURNALMODE_MEMORY;
    private static int PAGER_JOURNALMODE_WAL;
    private static int YYNOERRORRECOVERY;
    private static int YYNOCODE;
    private static int YYWILDCARD;
    private static int YYSTACKDEPTH;
    private static int YYNSTATE;
    private static int YYNRULE;
    private static int YYFALLBACK;
    private static int YY_NO_ACTION;
    private static int YY_ACCEPT_ACTION;
    private static int YY_ERROR_ACTION;
    private YYMINORTYPE yyzerominor;
    private static int YY_ACTTAB_COUNT;
    private static Int32[] yy_action;
    private static Int32[] yy_lookahead;
    private static int YY_SHIFT_USE_DFLT;
    private static int YY_SHIFT_COUNT;
    private static int YY_SHIFT_MIN;
    private static int YY_SHIFT_MAX;
    private static Int16[] yy_shift_ofst;
    private static int YY_REDUCE_USE_DFLT;
    private static int YY_REDUCE_COUNT;
    private static int YY_REDUCE_MIN;
    private static int YY_REDUCE_MAX;
    private static Int16[] yy_reduce_ofst;
    private static Int32[] yy_default;
    private static Int32[] yyFallback;
    private static _yyRuleInfo[] yyRuleInfo;
    public static int TK_SEMI;
    public static int TK_EXPLAIN;
    public static int TK_QUERY;
    public static int TK_PLAN;
    public static int TK_BEGIN;
    public static int TK_TRANSACTION;
    public static int TK_DEFERRED;
    public static int TK_IMMEDIATE;
    public static int TK_EXCLUSIVE;
    public static int TK_COMMIT;
    public static int TK_END;
    public static int TK_ROLLBACK;
    public static int TK_SAVEPOINT;
    public static int TK_RELEASE;
    public static int TK_TO;
    public static int TK_TABLE;
    public static int TK_CREATE;
    public static int TK_IF;
    public static int TK_NOT;
    public static int TK_EXISTS;
    public static int TK_TEMP;
    public static int TK_LP;
    public static int TK_RP;
    public static int TK_AS;
    public static int TK_COMMA;
    public static int TK_ID;
    public static int TK_INDEXED;
    public static int TK_ABORT;
    public static int TK_ACTION;
    public static int TK_AFTER;
    public static int TK_ANALYZE;
    public static int TK_ASC;
    public static int TK_ATTACH;
    public static int TK_BEFORE;
    public static int TK_BY;
    public static int TK_CASCADE;
    public static int TK_CAST;
    public static int TK_COLUMNKW;
    public static int TK_CONFLICT;
    public static int TK_DATABASE;
    public static int TK_DESC;
    public static int TK_DETACH;
    public static int TK_EACH;
    public static int TK_FAIL;
    public static int TK_FOR;
    public static int TK_IGNORE;
    public static int TK_INITIALLY;
    public static int TK_INSTEAD;
    public static int TK_LIKE_KW;
    public static int TK_MATCH;
    public static int TK_NO;
    public static int TK_KEY;
    public static int TK_OF;
    public static int TK_OFFSET;
    public static int TK_PRAGMA;
    public static int TK_RAISE;
    public static int TK_REPLACE;
    public static int TK_RESTRICT;
    public static int TK_ROW;
    public static int TK_TRIGGER;
    public static int TK_VACUUM;
    public static int TK_VIEW;
    public static int TK_VIRTUAL;
    public static int TK_REINDEX;
    public static int TK_RENAME;
    public static int TK_CTIME_KW;
    public static int TK_ANY;
    public static int TK_OR;
    public static int TK_AND;
    public static int TK_IS;
    public static int TK_BETWEEN;
    public static int TK_IN;
    public static int TK_ISNULL;
    public static int TK_NOTNULL;
    public static int TK_NE;
    public static int TK_EQ;
    public static int TK_GT;
    public static int TK_LE;
    public static int TK_LT;
    public static int TK_GE;
    public static int TK_ESCAPE;
    public static int TK_BITAND;
    public static int TK_BITOR;
    public static int TK_LSHIFT;
    public static int TK_RSHIFT;
    public static int TK_PLUS;
    public static int TK_MINUS;
    public static int TK_STAR;
    public static int TK_SLASH;
    public static int TK_REM;
    public static int TK_CONCAT;
    public static int TK_COLLATE;
    public static int TK_BITNOT;
    public static int TK_STRING;
    public static int TK_JOIN_KW;
    public static int TK_CONSTRAINT;
    public static int TK_DEFAULT;
    public static int TK_NULL;
    public static int TK_PRIMARY;
    public static int TK_UNIQUE;
    public static int TK_CHECK;
    public static int TK_REFERENCES;
    public static int TK_AUTOINCR;
    public static int TK_ON;
    public static int TK_INSERT;
    public static int TK_DELETE;
    public static int TK_UPDATE;
    public static int TK_SET;
    public static int TK_DEFERRABLE;
    public static int TK_FOREIGN;
    public static int TK_DROP;
    public static int TK_UNION;
    public static int TK_ALL;
    public static int TK_EXCEPT;
    public static int TK_INTERSECT;
    public static int TK_SELECT;
    public static int TK_DISTINCT;
    public static int TK_DOT;
    public static int TK_FROM;
    public static int TK_JOIN;
    public static int TK_USING;
    public static int TK_ORDER;
    public static int TK_GROUP;
    public static int TK_HAVING;
    public static int TK_LIMIT;
    public static int TK_WHERE;
    public static int TK_INTO;
    public static int TK_VALUES;
    public static int TK_INTEGER;
    public static int TK_FLOAT;
    public static int TK_BLOB;
    public static int TK_REGISTER;
    public static int TK_VARIABLE;
    public static int TK_CASE;
    public static int TK_WHEN;
    public static int TK_THEN;
    public static int TK_ELSE;
    public static int TK_INDEX;
    public static int TK_ALTER;
    public static int TK_ADD;
    public static int TK_TO_TEXT;
    public static int TK_TO_BLOB;
    public static int TK_TO_NUMERIC;
    public static int TK_TO_INT;
    public static int TK_TO_REAL;
    public static int TK_ISNOT;
    public static int TK_END_OF_FILE;
    public static int TK_ILLEGAL;
    public static int TK_SPACE;
    public static int TK_UNCLOSED_STRING;
    public static int TK_FUNCTION;
    public static int TK_COLUMN;
    public static int TK_AGG_FUNCTION;
    public static int TK_AGG_COLUMN;
    public static int TK_CONST_FUNC;
    public static int TK_UMINUS;
    public static int TK_UPLUS;
    private static PCacheGlobal pcache;
    private static PCacheGlobal pcache1;
    private static int N_SORT_BUCKET;
    private static int PGHDR_DIRTY;
    private static int PGHDR_NEED_SYNC;
    private static int PGHDR_NEED_READ;
    private static int PGHDR_REUSE_UNLIKELY;
    private static int PGHDR_DONT_WRITE;
    private static EncName[] encnames;
    private static int etRADIX;
    private static int etFLOAT;
    private static int etEXP;
    private static int etGENERIC;
    private static int etSIZE;
    private static int etSTRING;
    private static int etDYNSTRING;
    private static int etPERCENT;
    private static int etCHARX;
    private static int etSQLESCAPE;
    private static int etSQLESCAPE2;
    private static int etTOKEN;
    private static int etSRCLIST;
    private static int etPOINTER;
    private static int etSQLESCAPE3;
    private static int etORDINAL;
    private static int etINVALID;
    private static byte FLAG_SIGNED;
    private static byte FLAG_INTERN;
    private static byte FLAG_STRING;
    private static string aDigits;
    private static string aPrefix;
    private static et_info[] fmtinfo;
    private static int SQLITE_PRINT_BUF_SIZE;
    private static int etBUFSIZE;
    private static Char[] buf;
    private static StrAccum acc;
    public static sqlite3PrngType sqlite3Prng;
    private static sqlite3PrngType sqlite3SavedPrng;
    private static int ROWSET_ALLOCATION_SIZE;
    private static int ROWSET_ENTRY_PER_CHUNK;
    private static SelectDest sdDummy;
    private static bool bDummy;
    public static string SQLITE_VERSION;
    public static int SQLITE_VERSION_NUMBER;
    public static string SQLITE_SOURCE_ID;
    public static int SQLITE_OK;
    public static int SQLITE_ERROR;
    public static int SQLITE_INTERNAL;
    public static int SQLITE_PERM;
    public static int SQLITE_ABORT;
    public static int SQLITE_BUSY;
    public static int SQLITE_LOCKED;
    public static int SQLITE_NOMEM;
    public static int SQLITE_READONLY;
    public static int SQLITE_INTERRUPT;
    public static int SQLITE_IOERR;
    public static int SQLITE_CORRUPT;
    public static int SQLITE_NOTFOUND;
    public static int SQLITE_FULL;
    public static int SQLITE_CANTOPEN;
    public static int SQLITE_PROTOCOL;
    public static int SQLITE_EMPTY;
    public static int SQLITE_SCHEMA;
    public static int SQLITE_TOOBIG;
    public static int SQLITE_CONSTRAINT;
    public static int SQLITE_MISMATCH;
    public static int SQLITE_MISUSE;
    public static int SQLITE_NOLFS;
    public static int SQLITE_AUTH;
    public static int SQLITE_FORMAT;
    public static int SQLITE_RANGE;
    public static int SQLITE_NOTADB;
    public static int SQLITE_ROW;
    public static int SQLITE_DONE;
    private static int SQLITE_IOERR_READ;
    private static int SQLITE_IOERR_SHORT_READ;
    private static int SQLITE_IOERR_WRITE;
    private static int SQLITE_IOERR_FSYNC;
    private static int SQLITE_IOERR_DIR_FSYNC;
    private static int SQLITE_IOERR_TRUNCATE;
    private static int SQLITE_IOERR_FSTAT;
    private static int SQLITE_IOERR_UNLOCK;
    private static int SQLITE_IOERR_RDLOCK;
    private static int SQLITE_IOERR_DELETE;
    private static int SQLITE_IOERR_BLOCKED;
    private static int SQLITE_IOERR_NOMEM;
    private static int SQLITE_IOERR_ACCESS;
    private static int SQLITE_IOERR_CHECKRESERVEDLOCK;
    private static int SQLITE_IOERR_LOCK;
    private static int SQLITE_IOERR_CLOSE;
    private static int SQLITE_IOERR_DIR_CLOSE;
    private static int SQLITE_IOERR_SHMOPEN;
    private static int SQLITE_IOERR_SHMSIZE;
    private static int SQLITE_IOERR_SHMLOCK;
    private static int SQLITE_IOERR_SHMMAP;
    private static int SQLITE_IOERR_SEEK;
    private static int SQLITE_LOCKED_SHAREDCACHE;
    private static int SQLITE_BUSY_RECOVERY;
    private static int SQLITE_CANTOPEN_NOTEMPDIR;
    private static int SQLITE_CORRUPT_VTAB;
    private static int SQLITE_READONLY_RECOVERY;
    private static int SQLITE_READONLY_CANTLOCK;
    public static int SQLITE_OPEN_READONLY;
    public static int SQLITE_OPEN_READWRITE;
    public static int SQLITE_OPEN_CREATE;
    public static int SQLITE_OPEN_DELETEONCLOSE;
    public static int SQLITE_OPEN_EXCLUSIVE;
    public static int SQLITE_OPEN_AUTOPROXY;
    public static int SQLITE_OPEN_URI;
    public static int SQLITE_OPEN_MAIN_DB;
    public static int SQLITE_OPEN_TEMP_DB;
    public static int SQLITE_OPEN_TRANSIENT_DB;
    public static int SQLITE_OPEN_MAIN_JOURNAL;
    public static int SQLITE_OPEN_TEMP_JOURNAL;
    public static int SQLITE_OPEN_SUBJOURNAL;
    public static int SQLITE_OPEN_MASTER_JOURNAL;
    public static int SQLITE_OPEN_NOMUTEX;
    public static int SQLITE_OPEN_FULLMUTEX;
    public static int SQLITE_OPEN_SHAREDCACHE;
    public static int SQLITE_OPEN_PRIVATECACHE;
    public static int SQLITE_OPEN_WAL;
    private static int SQLITE_IOCAP_ATOMIC;
    private static int SQLITE_IOCAP_ATOMIC512;
    private static int SQLITE_IOCAP_ATOMIC1K;
    private static int SQLITE_IOCAP_ATOMIC2K;
    private static int SQLITE_IOCAP_ATOMIC4K;
    private static int SQLITE_IOCAP_ATOMIC8K;
    private static int SQLITE_IOCAP_ATOMIC16K;
    private static int SQLITE_IOCAP_ATOMIC32K;
    private static int SQLITE_IOCAP_ATOMIC64K;
    private static int SQLITE_IOCAP_SAFE_APPEND;
    private static int SQLITE_IOCAP_SEQUENTIAL;
    private static int SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;
    private static int SQLITE_LOCK_NONE;
    private static int SQLITE_LOCK_SHARED;
    private static int SQLITE_LOCK_RESERVED;
    private static int SQLITE_LOCK_PENDING;
    private static int SQLITE_LOCK_EXCLUSIVE;
    private static int SQLITE_SYNC_NORMAL;
    private static int SQLITE_SYNC_FULL;
    private static int SQLITE_SYNC_DATAONLY;
    private static int SQLITE_FCNTL_LOCKSTATE;
    private static int SQLITE_GET_LOCKPROXYFILE;
    private static int SQLITE_SET_LOCKPROXYFILE;
    private static int SQLITE_LAST_ERRNO;
    private static int SQLITE_FCNTL_SIZE_HINT;
    private static int SQLITE_FCNTL_CHUNK_SIZE;
    private static int SQLITE_FCNTL_FILE_POINTER;
    private static int SQLITE_FCNTL_SYNC_OMITTED;
    private static int SQLITE_ACCESS_EXISTS;
    private static int SQLITE_ACCESS_READWRITE;
    private static int SQLITE_ACCESS_READ;
    private static int SQLITE_SHM_UNLOCK;
    private static int SQLITE_SHM_LOCK;
    private static int SQLITE_SHM_SHARED;
    private static int SQLITE_SHM_EXCLUSIVE;
    private static int SQLITE_SHM_NLOCK;
    public static int SQLITE_CONFIG_SINGLETHREAD;
    public static int SQLITE_CONFIG_MULTITHREAD;
    public static int SQLITE_CONFIG_SERIALIZED;
    public static int SQLITE_CONFIG_MALLOC;
    public static int SQLITE_CONFIG_GETMALLOC;
    public static int SQLITE_CONFIG_SCRATCH;
    public static int SQLITE_CONFIG_PAGECACHE;
    public static int SQLITE_CONFIG_HEAP;
    public static int SQLITE_CONFIG_MEMSTATUS;
    public static int SQLITE_CONFIG_MUTEX;
    public static int SQLITE_CONFIG_GETMUTEX;
    public static int SQLITE_CONFIG_LOOKASIDE;
    public static int SQLITE_CONFIG_PCACHE;
    public static int SQLITE_CONFIG_GETPCACHE;
    public static int SQLITE_CONFIG_LOG;
    public static int SQLITE_CONFIG_URI;
    private static int SQLITE_DBCONFIG_LOOKASIDE;
    private static int SQLITE_DBCONFIG_ENABLE_FKEY;
    private static int SQLITE_DBCONFIG_ENABLE_TRIGGER;
    private static int SQLITE_DENY;
    private static int SQLITE_IGNORE;
    private static int SQLITE_CREATE_INDEX;
    private static int SQLITE_CREATE_TABLE;
    private static int SQLITE_CREATE_TEMP_INDEX;
    private static int SQLITE_CREATE_TEMP_TABLE;
    private static int SQLITE_CREATE_TEMP_TRIGGER;
    private static int SQLITE_CREATE_TEMP_VIEW;
    private static int SQLITE_CREATE_TRIGGER;
    private static int SQLITE_CREATE_VIEW;
    private static int SQLITE_DELETE;
    private static int SQLITE_DROP_INDEX;
    private static int SQLITE_DROP_TABLE;
    private static int SQLITE_DROP_TEMP_INDEX;
    private static int SQLITE_DROP_TEMP_TABLE;
    private static int SQLITE_DROP_TEMP_TRIGGER;
    private static int SQLITE_DROP_TEMP_VIEW;
    private static int SQLITE_DROP_TRIGGER;
    private static int SQLITE_DROP_VIEW;
    private static int SQLITE_INSERT;
    private static int SQLITE_PRAGMA;
    private static int SQLITE_READ;
    private static int SQLITE_SELECT;
    private static int SQLITE_TRANSACTION;
    private static int SQLITE_UPDATE;
    private static int SQLITE_ATTACH;
    private static int SQLITE_DETACH;
    private static int SQLITE_ALTER_TABLE;
    private static int SQLITE_REINDEX;
    private static int SQLITE_ANALYZE;
    private static int SQLITE_CREATE_VTABLE;
    private static int SQLITE_DROP_VTABLE;
    private static int SQLITE_FUNCTION;
    private static int SQLITE_SAVEPOINT;
    private static int SQLITE_COPY;
    private static int SQLITE_LIMIT_LENGTH;
    private static int SQLITE_LIMIT_SQL_LENGTH;
    private static int SQLITE_LIMIT_COLUMN;
    private static int SQLITE_LIMIT_EXPR_DEPTH;
    private static int SQLITE_LIMIT_COMPOUND_SELECT;
    private static int SQLITE_LIMIT_VDBE_OP;
    private static int SQLITE_LIMIT_FUNCTION_ARG;
    private static int SQLITE_LIMIT_ATTACHED;
    private static int SQLITE_LIMIT_LIKE_PATTERN_LENGTH;
    private static int SQLITE_LIMIT_VARIABLE_NUMBER;
    private static int SQLITE_LIMIT_TRIGGER_DEPTH;
    public static byte SQLITE_INTEGER;
    public static byte SQLITE_FLOAT;
    public static byte SQLITE_BLOB;
    public static byte SQLITE_NULL;
    public static byte SQLITE_TEXT;
    public static byte SQLITE3_TEXT;
    public static byte SQLITE_UTF8;
    public static byte SQLITE_UTF16LE;
    public static byte SQLITE_UTF16BE;
    public static byte SQLITE_UTF16;
    public static byte SQLITE_ANY;
    public static byte SQLITE_UTF16_ALIGNED;
    public static dxDel SQLITE_STATIC;
    public static dxDel SQLITE_TRANSIENT;
    private static int SQLITE_INDEX_CONSTRAINT_EQ;
    private static int SQLITE_INDEX_CONSTRAINT_GT;
    private static int SQLITE_INDEX_CONSTRAINT_LE;
    private static int SQLITE_INDEX_CONSTRAINT_LT;
    private static int SQLITE_INDEX_CONSTRAINT_GE;
    private static int SQLITE_INDEX_CONSTRAINT_MATCH;
    private static int SQLITE_MUTEX_FAST;
    private static int SQLITE_MUTEX_RECURSIVE;
    private static int SQLITE_MUTEX_STATIC_MASTER;
    private static int SQLITE_MUTEX_STATIC_MEM;
    private static int SQLITE_MUTEX_STATIC_MEM2;
    private static int SQLITE_MUTEX_STATIC_OPEN;
    private static int SQLITE_MUTEX_STATIC_PRNG;
    private static int SQLITE_MUTEX_STATIC_LRU;
    private static int SQLITE_MUTEX_STATIC_LRU2;
    private static int SQLITE_MUTEX_STATIC_PMEM;
    public static int SQLITE_TESTCTRL_FIRST;
    public static int SQLITE_TESTCTRL_PRNG_SAVE;
    public static int SQLITE_TESTCTRL_PRNG_RESTORE;
    public static int SQLITE_TESTCTRL_PRNG_RESET;
    public static int SQLITE_TESTCTRL_BITVEC_TEST;
    public static int SQLITE_TESTCTRL_FAULT_INSTALL;
    public static int SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS;
    public static int SQLITE_TESTCTRL_PENDING_BYTE;
    public static int SQLITE_TESTCTRL_ASSERT;
    public static int SQLITE_TESTCTRL_ALWAYS;
    public static int SQLITE_TESTCTRL_RESERVE;
    public static int SQLITE_TESTCTRL_OPTIMIZATIONS;
    public static int SQLITE_TESTCTRL_ISKEYWORD;
    public static int SQLITE_TESTCTRL_PGHDRSZ;
    public static int SQLITE_TESTCTRL_SCRATCHMALLOC;
    public static int SQLITE_TESTCTRL_LOCALTIME_FAULT;
    public static int SQLITE_TESTCTRL_LAST;
    public static int SQLITE_STATUS_MEMORY_USED;
    public static int SQLITE_STATUS_PAGECACHE_USED;
    public static int SQLITE_STATUS_PAGECACHE_OVERFLOW;
    public static int SQLITE_STATUS_SCRATCH_USED;
    public static int SQLITE_STATUS_SCRATCH_OVERFLOW;
    public static int SQLITE_STATUS_MALLOC_SIZE;
    public static int SQLITE_STATUS_PARSER_STACK;
    public static int SQLITE_STATUS_PAGECACHE_SIZE;
    public static int SQLITE_STATUS_SCRATCH_SIZE;
    public static int SQLITE_STATUS_MALLOC_COUNT;
    public static int SQLITE_DBSTATUS_LOOKASIDE_USED;
    public static int SQLITE_DBSTATUS_CACHE_USED;
    public static int SQLITE_DBSTATUS_SCHEMA_USED;
    public static int SQLITE_DBSTATUS_STMT_USED;
    public static int SQLITE_DBSTATUS_LOOKASIDE_HIT;
    public static int SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE;
    public static int SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL;
    public static int SQLITE_DBSTATUS_MAX;
    public static int SQLITE_STMTSTATUS_FULLSCAN_STEP;
    public static int SQLITE_STMTSTATUS_SORT;
    public static int SQLITE_STMTSTATUS_AUTOINDEX;
    public static int SQLITE_CHECKPOINT_PASSIVE;
    public static int SQLITE_CHECKPOINT_FULL;
    public static int SQLITE_CHECKPOINT_RESTART;
    public static int SQLITE_VTAB_CONSTRAINT_SUPPORT;
    public static int SQLITE_ROLLBACK;
    public static int SQLITE_FAIL;
    public static int SQLITE_REPLACE;
    public static int SQLITE_INDEX_SAMPLES;
    private static int SQLITE_THREADSAFE;
    private static int SQLITE_DEFAULT_MEMSTATUS;
    private static int SQLITE_MALLOC_SOFT_LIMIT;
    private static int _XOPEN_SOURCE;
    private static double SQLITE_BIG_DBL;
    private static int OMIT_TEMPDB;
    public static int SQLITE_MAX_FILE_FORMAT;
    private static int SQLITE_DEFAULT_FILE_FORMAT;
    public static bool SQLITE_DEFAULT_RECURSIVE_TRIGGERS;
    private static int SQLITE_TEMP_STORE;
    private static int SQLITE_ASCII;
    private static UInt32 SQLITE_MAX_U32;
    private static bool sqlite3one;
    private static byte SQLITE_BIGENDIAN;
    private static byte SQLITE_LITTLEENDIAN;
    private static byte SQLITE_UTF16NATIVE;
    private static long LARGEST_INT64;
    private static long SMALLEST_INT64;
    private static string MASTER_NAME;
    private static string TEMP_MASTER_NAME;
    private static int MASTER_ROOT;
    private static dxDel SQLITE_DYNAMIC;
    private static Sqlite3Config sqlite3GlobalConfig;
    private static ushort DB_SchemaLoaded;
    private static ushort DB_UnresetViews;
    private static ushort DB_Empty;
    private static int SQLITE_N_LIMIT;
    private static int SQLITE_VdbeTrace;
    private static int SQLITE_InternChanges;
    private static int SQLITE_FullColNames;
    private static int SQLITE_ShortColNames;
    private static int SQLITE_CountRows;
    private static int SQLITE_NullCallback;
    private static int SQLITE_SqlTrace;
    private static int SQLITE_VdbeListing;
    private static int SQLITE_WriteSchema;
    private static int SQLITE_NoReadlock;
    private static int SQLITE_IgnoreChecks;
    private static int SQLITE_ReadUncommitted;
    private static int SQLITE_LegacyFileFmt;
    private static int SQLITE_FullFSync;
    private static int SQLITE_CkptFullFSync;
    private static int SQLITE_RecoveryMode;
    private static int SQLITE_ReverseOrder;
    private static int SQLITE_RecTriggers;
    private static int SQLITE_ForeignKeys;
    private static int SQLITE_AutoIndex;
    private static int SQLITE_PreferBuiltin;
    private static int SQLITE_LoadExtension;
    private static int SQLITE_EnableTrigger;
    private static int SQLITE_QueryFlattener;
    private static int SQLITE_ColumnCache;
    private static int SQLITE_IndexSort;
    private static int SQLITE_IndexSearch;
    private static int SQLITE_IndexCover;
    private static int SQLITE_GroupByOrder;
    private static int SQLITE_FactorOutConst;
    private static int SQLITE_IdxRealAsInt;
    private static int SQLITE_OptMask;
    private static int SQLITE_MAGIC_OPEN;
    private static int SQLITE_MAGIC_CLOSED;
    private static int SQLITE_MAGIC_SICK;
    private static int SQLITE_MAGIC_BUSY;
    private static int SQLITE_MAGIC_ERROR;
    private static int SQLITE_FUNC_LIKE;
    private static int SQLITE_FUNC_CASE;
    private static int SQLITE_FUNC_EPHEM;
    private static int SQLITE_FUNC_NEEDCOLL;
    private static int SQLITE_FUNC_PRIVATE;
    private static int SQLITE_FUNC_COUNT;
    private static int SQLITE_FUNC_COALESCE;
    private static int SAVEPOINT_BEGIN;
    private static int SAVEPOINT_RELEASE;
    private static int SAVEPOINT_ROLLBACK;
    private static int SQLITE_COLL_BINARY;
    private static int SQLITE_COLL_NOCASE;
    private static int SQLITE_COLL_REVERSE;
    private static int SQLITE_COLL_USER;
    private static int SQLITE_SO_ASC;
    private static int SQLITE_SO_DESC;
    private static char SQLITE_AFF_TEXT;
    private static char SQLITE_AFF_NONE;
    private static char SQLITE_AFF_NUMERIC;
    private static char SQLITE_AFF_INTEGER;
    private static char SQLITE_AFF_REAL;
    private static int SQLITE_AFF_MASK;
    private static int SQLITE_JUMPIFNULL;
    private static int SQLITE_STOREP2;
    private static int SQLITE_NULLEQ;
    private static int TF_Readonly;
    private static int TF_Ephemeral;
    private static int TF_HasPrimaryKey;
    private static int TF_Autoincrement;
    private static int TF_Virtual;
    private static int TF_NeedMetadata;
    private static int OE_None;
    private static int OE_Rollback;
    private static int OE_Abort;
    private static int OE_Fail;
    private static int OE_Ignore;
    private static int OE_Replace;
    private static int OE_Restrict;
    private static int OE_SetNull;
    private static int OE_SetDflt;
    private static int OE_Cascade;
    private static int OE_Default;
    private static int UNPACKED_NEED_FREE;
    private static int UNPACKED_NEED_DESTROY;
    private static int UNPACKED_IGNORE_ROWID;
    private static int UNPACKED_INCRKEY;
    private static int UNPACKED_PREFIX_MATCH;
    private static int UNPACKED_PREFIX_SEARCH;
    private static ushort EP_FromJoin;
    private static ushort EP_Agg;
    private static ushort EP_Resolved;
    private static ushort EP_Error;
    private static ushort EP_Distinct;
    private static ushort EP_VarSelect;
    private static ushort EP_DblQuoted;
    private static ushort EP_InfixFunc;
    private static ushort EP_ExpCollate;
    private static ushort EP_FixedDest;
    private static ushort EP_IntValue;
    private static ushort EP_xIsSelect;
    private static ushort EP_Reduced;
    private static ushort EP_TokenOnly;
    private static ushort EP_Static;
    private static byte EP2_MallocedToken;
    private static byte EP2_Irreducible;
    private static int EXPR_FULLSIZE;
    private static int EXPR_REDUCEDSIZE;
    private static int EXPR_TOKENONLYSIZE;
    private static int EXPRDUP_REDUCE;
    private static int BMS;
    private static int JT_INNER;
    private static int JT_CROSS;
    private static int JT_NATURAL;
    private static int JT_LEFT;
    private static int JT_RIGHT;
    private static int JT_OUTER;
    private static int JT_ERROR;
    private static int WHERE_ORDERBY_NORMAL;
    private static int WHERE_ORDERBY_MIN;
    private static int WHERE_ORDERBY_MAX;
    private static int WHERE_ONEPASS_DESIRED;
    private static int WHERE_DUPLICATES_OK;
    private static int WHERE_OMIT_OPEN;
    private static int WHERE_OMIT_CLOSE;
    private static int WHERE_FORCE_TABLE;
    private static int WHERE_ONETABLE_ONLY;
    private static int SF_Distinct;
    private static int SF_Resolved;
    private static int SF_Aggregate;
    private static int SF_UsesEphemeral;
    private static int SF_Expanded;
    private static int SF_HasTypeInfo;
    private static int SRT_Union;
    private static int SRT_Except;
    private static int SRT_Exists;
    private static int SRT_Discard;
    private static int SRT_Output;
    private static int SRT_Mem;
    private static int SRT_Set;
    private static int SRT_Table;
    private static int SRT_EphemTab;
    private static int SRT_Coroutine;
    private static int SQLITE_N_COLCACHE;
    private static byte OPFLAG_NCHANGE;
    private static byte OPFLAG_LASTROWID;
    private static byte OPFLAG_ISUPDATE;
    private static byte OPFLAG_APPEND;
    private static byte OPFLAG_USESEEKRESULT;
    private static byte OPFLAG_CLEARCACHE;
    private static byte TRIGGER_BEFORE;
    private static byte TRIGGER_AFTER;
    private static int WRC_Continue;
    private static int WRC_Prune;
    private static int WRC_Abort;
    private static int SQLITE_FAULTINJECTOR_MALLOC;
    private static int SQLITE_FAULTINJECTOR_COUNT;
    private static int IN_INDEX_ROWID;
    private static int IN_INDEX_EPH;
    private static int IN_INDEX_INDEX;
    public static int MEMTYPE_HEAP;
    public static int MEMTYPE_LOOKASIDE;
    public static int MEMTYPE_SCRATCH;
    public static int MEMTYPE_PCACHE;
    public static int MEMTYPE_DB;
    private static int SQLITE_MAX_LENGTH;
    private static int SQLITE_MAX_COLUMN;
    private static int SQLITE_MAX_SQL_LENGTH;
    private static int SQLITE_MAX_EXPR_DEPTH;
    private static int SQLITE_MAX_COMPOUND_SELECT;
    private static int SQLITE_MAX_VDBE_OP;
    private static int SQLITE_MAX_FUNCTION_ARG;
    private static int SQLITE_DEFAULT_CACHE_SIZE;
    private static int SQLITE_DEFAULT_TEMP_CACHE_SIZE;
    private static int SQLITE_DEFAULT_WAL_AUTOCHECKPOINT;
    private static int SQLITE_MAX_ATTACHED;
    private static int SQLITE_MAX_VARIABLE_NUMBER;
    private static int SQLITE_MAX_PAGE_SIZE;
    private static int SQLITE_DEFAULT_PAGE_SIZE;
    private static int SQLITE_MAX_DEFAULT_PAGE_SIZE;
    private static int SQLITE_MAX_PAGE_COUNT;
    private static int SQLITE_MAX_LIKE_PATTERN_LENGTH;
    private static int SQLITE_MAX_TRIGGER_DEPTH;
    public static sqlite3StatType sqlite3Stat;
    private static sqlite3StatType wsdStat;
    private static Byte[] sqlite3Utf8Trans1;
    private static Byte[] pByte4;
    private static Byte[] bufByte10;
    private static int SLOT_2_0;
    private static UInt32 SLOT_4_2_0;
    private static long TWOPOWER32;
    private static long TWOPOWER31;
    public static int SQLITE_MAX_SCHEMA_RETRY;
    private static bool sqlite3VdbeAddopTrace;
    private static VdbeOp dummy;
    private static StringBuilder zTemp;
    private static UInt32[] aSize;
    private static Mem mem1;
    private static int CACHE_STALE;
    private static int MEM_Null;
    private static int MEM_Str;
    private static int MEM_Int;
    private static int MEM_Real;
    private static int MEM_Blob;
    private static int MEM_RowSet;
    private static int MEM_Frame;
    private static int MEM_Invalid;
    private static int MEM_TypeMask;
    private static int MEM_Term;
    private static int MEM_Dyn;
    private static int MEM_Static;
    private static int MEM_Ephem;
    private static int MEM_Agg;
    private static int MEM_Zero;
    private static UInt32 VDBE_MAGIC_INIT;
    private static UInt32 VDBE_MAGIC_RUN;
    private static UInt32 VDBE_MAGIC_HALT;
    private static UInt32 VDBE_MAGIC_DEAD;
    private static StringBuilder zCsr;
    private static int P4_NOTUSED;
    private static int P4_DYNAMIC;
    private static int P4_STATIC;
    private static int P4_COLLSEQ;
    private static int P4_FUNCDEF;
    private static int P4_KEYINFO;
    private static int P4_VDBEFUNC;
    private static int P4_MEM;
    private static int P4_TRANSIENT;
    private static int P4_VTAB;
    private static int P4_MPRINTF;
    private static int P4_REAL;
    private static int P4_INT64;
    private static int P4_INT32;
    private static int P4_INTARRAY;
    private static int P4_SUBPROGRAM;
    private static int P4_KEYINFO_HANDOFF;
    private static int P4_KEYINFO_STATIC;
    private static int COLNAME_NAME;
    private static int COLNAME_DECLTYPE;
    private static int COLNAME_DATABASE;
    private static int COLNAME_TABLE;
    private static int COLNAME_COLUMN;
    private static int COLNAME_N;
    private static Int32[] aMap;
    private static bool sqlite3WhereTrace;
    private static int TERM_DYNAMIC;
    private static int TERM_VIRTUAL;
    private static int TERM_CODED;
    private static int TERM_COPIED;
    private static int TERM_ORINFO;
    private static int TERM_ANDINFO;
    private static int TERM_OR_OK;
    private static int TERM_VNULL;
    private static int WO_IN;
    private static int WO_EQ;
    private static int WO_LT;
    private static int WO_LE;
    private static int WO_GT;
    private static int WO_GE;
    private static int WO_MATCH;
    private static int WO_ISNULL;
    private static int WO_OR;
    private static int WO_AND;
    private static int WO_NOOP;
    private static int WO_ALL;
    private static int WO_SINGLE;
    private static int WHERE_ROWID_EQ;
    private static int WHERE_ROWID_RANGE;
    private static int WHERE_COLUMN_EQ;
    private static int WHERE_COLUMN_RANGE;
    private static int WHERE_COLUMN_IN;
    private static int WHERE_COLUMN_NULL;
    private static int WHERE_INDEXED;
    private static int WHERE_IN_ABLE;
    private static int WHERE_NOT_FULLSCAN;
    private static int WHERE_TOP_LIMIT;
    private static int WHERE_BTM_LIMIT;
    private static int WHERE_BOTH_LIMIT;
    private static int WHERE_IDX_ONLY;
    private static int WHERE_ORDERBY;
    private static int WHERE_REVERSE;
    private static int WHERE_UNIQUE;
    private static int WHERE_VIRTUALTABLE;
    private static int WHERE_MULTI_OR;
    private static int WHERE_TEMP_INDEX;
    private static Regex oRegex;
    private static object lock_va_list;
    private static string vaFORMAT;
    private static int vaNEXT;
    private static long ERROR_FILE_NOT_FOUND;
    private static long ERROR_HANDLE_DISK_FULL;
    private static long ERROR_NOT_SUPPORTED;
    private static long ERROR_DISK_FULL;
    private static SQLite3UpperToLower sqlite3UpperToLower;
    private static SQLite3UpperToLower UpperToLower;
    private static Sqlite3();
    private static void renameTableFunc(sqlite3_context context, int NotUsed, Mem[] argv);
    private static void renameParentFunc(sqlite3_context context, int NotUsed, Mem[] argv);
    private static void renameTriggerFunc(sqlite3_context context, int NotUsed, Mem[] argv);
    private static void sqlite3AlterFunctions();
    private static string whereOrName(sqlite3 db, string zWhere, string zConstant);
    private static string whereForeignKeys(Parse pParse, Table pTab);
    private static string whereTempTriggers(Parse pParse, Table pTab);
    private static void reloadTableSchema(Parse pParse, Table pTab, string zName);
    private static int isSystemTable(Parse pParse, string zName);
    private static void sqlite3AlterRenameTable(Parse pParse, SrcList pSrc, Token pName);
    private static void sqlite3MinimumFileFormat(Parse pParse, int iDb, int minFormat);
    private static void sqlite3AlterFinishAddColumn(Parse pParse, Token pColDef);
    private static void sqlite3AlterBeginAddColumn(Parse pParse, SrcList pSrc);
    private static void openStatTable(Parse pParse, int iDb, int iStatCur, string zWhere, string zWhereType);
    private static void analyzeOneTable(Parse pParse, Table pTab, Index pOnlyIdx, int iStatCur, int iMem);
    private static void loadAnalysis(Parse pParse, int iDb);
    private static void analyzeDatabase(Parse pParse, int iDb);
    private static void analyzeTable(Parse pParse, Table pTab, Index pOnlyIdx);
    private static void sqlite3Analyze(Parse pParse, int null_2, int null_3);
    private static void sqlite3Analyze(Parse pParse, Token pName1, Token pName2);
    private static int analysisLoader(object pData, long argc, object Oargv, object NotUsed);
    private static void sqlite3DeleteIndexSamples(sqlite3 db, Index pIdx);
    private static int sqlite3AnalysisLoad(sqlite3 db, int iDb);
    private static int resolveAttachExpr(NameContext pName, Expr pExpr);
    private static void attachFunc(sqlite3_context context, int NotUsed, Mem[] argv);
    private static void detachFunc(sqlite3_context context, int NotUsed, Mem[] argv);
    private static void codeAttach(Parse pParse, int type, FuncDef pFunc, Expr pAuthArg, Expr pFilename, Expr pDbname, Expr pKey);
    private static void sqlite3Detach(Parse pParse, Expr pDbname);
    private static void sqlite3Attach(Parse pParse, Expr p, Expr pDbname, Expr pKey);
    private static int sqlite3FixInit(DbFixer pFix, Parse pParse, int iDb, string zType, Token pName);
    private static int sqlite3FixSrcList(DbFixer pFix, SrcList pList);
    private static int sqlite3FixSelect(DbFixer pFix, Select pSelect);
    private static int sqlite3FixExpr(DbFixer pFix, Expr pExpr);
    private static int sqlite3FixExprList(DbFixer pFix, ExprList pList);
    private static int sqlite3FixTriggerStep(DbFixer pFix, TriggerStep pStep);
    private static Btree findBtree(sqlite3 pErrorDb, sqlite3 pDb, string zDb);
    private static int setDestPgsz(sqlite3_backup p);
    public static sqlite3_backup sqlite3_backup_init(sqlite3 pDestDb, string zDestDb, sqlite3 pSrcDb, string zSrcDb);
    private static bool isFatalError(int rc);
    private static int backupOnePage(sqlite3_backup p, UInt32 iSrcPg, Byte[] zSrcData);
    private static int backupTruncateFile(sqlite3_file pFile, int iSize);
    private static void attachBackupObject(sqlite3_backup p);
    public static int sqlite3_backup_step(sqlite3_backup p, int nPage);
    public static int sqlite3_backup_finish(sqlite3_backup p);
    private static int sqlite3_backup_remaining(sqlite3_backup p);
    private static int sqlite3_backup_pagecount(sqlite3_backup p);
    private static void sqlite3BackupUpdate(sqlite3_backup pBackup, UInt32 iPage, Byte[] aData);
    private static void sqlite3BackupRestart(sqlite3_backup pBackup);
    private static int sqlite3BtreeCopyFile(Btree pTo, Btree pFrom);
    private static UInt32 BITVEC_HASH(UInt32 X);
    private static Bitvec sqlite3BitvecCreate(UInt32 iSize);
    private static int sqlite3BitvecTest(Bitvec p, UInt32 i);
    private static int sqlite3BitvecSet(Bitvec p, UInt32 i);
    private static void sqlite3BitvecClear(Bitvec p, UInt32 i, UInt32[] pBuf);
    private static void sqlite3BitvecDestroy(Bitvec& p);
    private static UInt32 sqlite3BitvecSize(Bitvec p);
    private static void SETBIT(Byte[] V, int I);
    private static void CLEARBIT(Byte[] V, int I);
    private static int TESTBIT(Byte[] V, int I);
    private static int sqlite3BitvecBuiltinTest(UInt32 sz, Int32[] aOp);
    private static int MX_CELL_SIZE(BtShared pBt);
    private static int MX_CELL(BtShared pBt);
    private static UInt32 PENDING_BYTE_PAGE(BtShared pBt);
    private static UInt32 PTRMAP_PAGENO(BtShared pBt, UInt32 pgno);
    private static UInt32 PTRMAP_PTROFFSET(UInt32 pgptrmap, UInt32 pgno);
    private static bool PTRMAP_ISPAGE(BtShared pBt, UInt32 pgno);
    private static void btreeIntegrity(Btree p);
    private static int get2byte(Byte[] p, int offset);
    private static void put2byte(Byte[] pData, int Offset, UInt32 v);
    private static void put2byte(Byte[] pData, int Offset, int v);
    private static void TRACE(string X, Object[] ap);
    private static int get2byteNotZero(Byte[] X, int offset);
    private static int querySharedCacheTableLock(Btree p, UInt32 iTab, byte eLock);
    private static void clearAllSharedCacheTableLocks(Btree a);
    private static void downgradeAllSharedCacheTableLocks(Btree a);
    private static bool hasSharedCacheTableLock(Btree a, UInt32 b, int c, int d);
    private static bool hasReadConflicts(Btree a, UInt32 b);
    private static bool cursorHoldsMutex(BtCursor p);
    private static void invalidateOverflowCache(BtCursor pCur);
    private static void invalidateAllOverflowCache(BtShared pBt);
    private static void invalidateIncrblobCursors(Btree x, long y, int z);
    private static int btreeSetHasContent(BtShared pBt, UInt32 pgno);
    private static bool btreeGetHasContent(BtShared pBt, UInt32 pgno);
    private static void btreeClearHasContent(BtShared pBt);
    private static int saveCursorPosition(BtCursor pCur);
    private static int saveAllCursors(BtShared pBt, UInt32 iRoot, BtCursor pExcept);
    private static void sqlite3BtreeClearCursor(BtCursor pCur);
    private static int btreeMoveto(BtCursor pCur, Byte[] pKey, long nKey, int bias, Int32& pRes);
    private static int btreeRestoreCursorPosition(BtCursor pCur);
    private static int restoreCursorPosition(BtCursor pCur);
    private static int sqlite3BtreeCursorHasMoved(BtCursor pCur, Int32& pHasMoved);
    private static UInt32 ptrmapPageno(BtShared pBt, UInt32 pgno);
    private static void ptrmapPut(BtShared pBt, UInt32 key, byte eType, UInt32 parent, Int32& pRC);
    private static int ptrmapGet(BtShared pBt, UInt32 key, Byte& pEType, UInt32& pPgno);
    private static int findCell(MemPage pPage, int iCell);
    private static Byte[] findCellv2(Byte[] pPage, ushort iCell, ushort O, int I);
    private static int findOverflowCell(MemPage pPage, int iCell);
    private static void btreeParseCellPtr(MemPage pPage, int iCell, CellInfo& pInfo);
    private static void btreeParseCellPtr(MemPage pPage, Byte[] pCell, CellInfo& pInfo);
    private static void btreeParseCellPtr(MemPage pPage, Byte[] pCell, int iCell, CellInfo& pInfo);
    private static void parseCell(MemPage pPage, int iCell, CellInfo& pInfo);
    private static void btreeParseCell(MemPage pPage, int iCell, CellInfo& pInfo);
    private static ushort cellSizePtr(MemPage pPage, int iCell);
    private static ushort cellSizePtr(MemPage pPage, Byte[] pCell, int offset);
    private static ushort cellSizePtr(MemPage pPage, Byte[] pCell);
    private static ushort cellSize(MemPage pPage, int iCell);
    private static void ptrmapPutOvflPtr(MemPage pPage, int pCell, Int32& pRC);
    private static void ptrmapPutOvflPtr(MemPage pPage, Byte[] pCell, Int32& pRC);
    private static int defragmentPage(MemPage pPage);
    private static int allocateSpace(MemPage pPage, int nByte, Int32& pIdx);
    private static int freeSpace(MemPage pPage, UInt32 start, int size);
    private static int freeSpace(MemPage pPage, int start, int size);
    private static int decodeFlags(MemPage pPage, int flagByte);
    private static int btreeInitPage(MemPage pPage);
    private static void zeroPage(MemPage pPage, int flags);
    private static MemPage btreePageFromDbPage(PgHdr pDbPage, UInt32 pgno, BtShared pBt);
    private static int btreeGetPage(BtShared pBt, UInt32 pgno, MemPage& ppPage, int noContent);
    private static MemPage btreePageLookup(BtShared pBt, UInt32 pgno);
    private static UInt32 btreePagecount(BtShared pBt);
    private static UInt32 sqlite3BtreeLastPage(Btree p);
    private static int getAndInitPage(BtShared pBt, UInt32 pgno, MemPage& ppPage);
    private static void releasePage(MemPage pPage);
    private static void pageReinit(PgHdr pData);
    private static int btreeInvokeBusyHandler(object pArg);
    private static int sqlite3BtreeOpen(sqlite3_vfs pVfs, string zFilename, sqlite3 db, Btree& ppBtree, int flags, int vfsFlags);
    private static bool removeFromSharingList(BtShared pBt);
    private static void allocateTempSpace(BtShared pBt);
    private static void freeTempSpace(BtShared pBt);
    private static int sqlite3BtreeClose(Btree& p);
    private static int sqlite3BtreeSetCacheSize(Btree p, int mxPage);
    private static int sqlite3BtreeSetSafetyLevel(Btree p, int level, int fullSync, int ckptFullSync);
    private static int sqlite3BtreeSyncDisabled(Btree p);
    private static int sqlite3BtreeSetPageSize(Btree p, int pageSize, int nReserve, int iFix);
    private static int sqlite3BtreeGetPageSize(Btree p);
    private static int sqlite3BtreeGetReserve(Btree p);
    private static UInt32 sqlite3BtreeMaxPageCount(Btree p, int mxPage);
    private static int sqlite3BtreeSecureDelete(Btree p, int newFlag);
    private static int sqlite3BtreeSetAutoVacuum(Btree p, int autoVacuum);
    private static int sqlite3BtreeGetAutoVacuum(Btree p);
    private static int lockBtree(BtShared pBt);
    private static void unlockBtreeIfUnused(BtShared pBt);
    private static int newDatabase(BtShared pBt);
    private static int sqlite3BtreeBeginTrans(Btree p, int wrflag);
    private static int setChildPtrmaps(MemPage pPage);
    private static int modifyPagePointer(MemPage pPage, UInt32 iFrom, UInt32 iTo, byte eType);
    private static int relocatePage(BtShared pBt, MemPage pDbPage, byte eType, UInt32 iPtrPage, UInt32 iFreePage, int isCommit);
    private static int incrVacuumStep(BtShared pBt, UInt32 nFin, UInt32 iLastPg);
    private static int sqlite3BtreeIncrVacuum(Btree p);
    private static int autoVacuumCommit(BtShared pBt);
    private static int sqlite3BtreeCommitPhaseOne(Btree p, string zMaster);
    private static void btreeEndTransaction(Btree p);
    private static int sqlite3BtreeCommitPhaseTwo(Btree p, int bCleanup);
    private static int sqlite3BtreeCommit(Btree p);
    private static int countWriteCursors(BtShared pBt);
    private static void sqlite3BtreeTripAllCursors(Btree pBtree, int errCode);
    private static int sqlite3BtreeRollback(Btree p);
    private static int sqlite3BtreeBeginStmt(Btree p, int iStatement);
    private static int sqlite3BtreeSavepoint(Btree p, int op, int iSavepoint);
    private static int btreeCursor(Btree p, int iTable, int wrFlag, KeyInfo pKeyInfo, BtCursor pCur);
    private static int sqlite3BtreeCursor(Btree p, int iTable, int wrFlag, KeyInfo pKeyInfo, BtCursor pCur);
    private static int sqlite3BtreeCursorSize();
    private static void sqlite3BtreeCursorZero(BtCursor p);
    private static void sqlite3BtreeSetCachedRowid(BtCursor pCur, long iRowid);
    private static long sqlite3BtreeGetCachedRowid(BtCursor pCur);
    private static int sqlite3BtreeCloseCursor(BtCursor pCur);
    private static void assertCellInfo(BtCursor pCur);
    private static void getCellInfo(BtCursor pCur);
    private static bool sqlite3BtreeCursorIsValid(BtCursor pCur);
    private static int sqlite3BtreeKeySize(BtCursor pCur, Int64& pSize);
    private static int sqlite3BtreeDataSize(BtCursor pCur, UInt32& pSize);
    private static int getOverflowPage(BtShared pBt, UInt32 ovfl, MemPage& ppPage, UInt32& pPgnoNext);
    private static int copyPayload(Byte[] pPayload, UInt32 payloadOffset, Byte[] pBuf, UInt32 pBufOffset, UInt32 nByte, int eOp, PgHdr pDbPage);
    private static int accessPayload(BtCursor pCur, UInt32 offset, UInt32 amt, Byte[] pBuf, int eOp);
    private static int sqlite3BtreeKey(BtCursor pCur, UInt32 offset, UInt32 amt, Byte[] pBuf);
    private static int sqlite3BtreeData(BtCursor pCur, UInt32 offset, UInt32 amt, Byte[] pBuf);
    private static Byte[] fetchPayload(BtCursor pCur, Int32& pAmt, Int32& outOffset, bool skipKey);
    private static Byte[] sqlite3BtreeKeyFetch(BtCursor pCur, Int32& pAmt, Int32& outOffset);
    private static Byte[] sqlite3BtreeDataFetch(BtCursor pCur, Int32& pAmt, Int32& outOffset);
    private static int moveToChild(BtCursor pCur, UInt32 newPgno);
    private static void assertParentIndex(MemPage pParent, int iIdx, UInt32 iChild);
    private static void moveToParent(BtCursor pCur);
    private static int moveToRoot(BtCursor pCur);
    private static int moveToLeftmost(BtCursor pCur);
    private static int moveToRightmost(BtCursor pCur);
    private static int sqlite3BtreeFirst(BtCursor pCur, Int32& pRes);
    private static int sqlite3BtreeLast(BtCursor pCur, Int32& pRes);
    private static int sqlite3BtreeMovetoUnpacked(BtCursor pCur, UnpackedRecord pIdxKey, long intKey, int biasRight, Int32& pRes);
    private static bool sqlite3BtreeEof(BtCursor pCur);
    private static int sqlite3BtreeNext(BtCursor pCur, Int32& pRes);
    private static int sqlite3BtreePrevious(BtCursor pCur, Int32& pRes);
    private static int allocateBtreePage(BtShared pBt, MemPage& ppPage, UInt32& pPgno, UInt32 nearby, byte exact);
    private static int freePage2(BtShared pBt, MemPage pMemPage, UInt32 iPage);
    private static void freePage(MemPage pPage, Int32& pRC);
    private static int clearCell(MemPage pPage, int pCell);
    private static int fillInCell(MemPage pPage, Byte[] pCell, Byte[] pKey, long nKey, Byte[] pData, int nData, int nZero, Int32& pnSize);
    private static void dropCell(MemPage pPage, int idx, int sz, Int32& pRC);
    private static void insertCell(MemPage pPage, int i, Byte[] pCell, int sz, Byte[] pTemp, UInt32 iChild, Int32& pRC);
    private static void assemblePage(MemPage pPage, int nCell, Byte[] apCell, Int32[] aSize);
    private static void assemblePage(MemPage pPage, int nCell, Byte[][] apCell, UInt16[] aSize, int offset);
    private static void assemblePage(MemPage pPage, int nCell, Byte[] apCell, UInt16[] aSize);
    private static int balance_quick(MemPage pParent, MemPage pPage, Byte[] pSpace);
    private static void copyNodeContent(MemPage pFrom, MemPage pTo, Int32& pRC);
    private static int balance_nonroot(MemPage pParent, int iParentIdx, Byte[] aOvflSpace, int isRoot);
    private static int balance_deeper(MemPage pRoot, MemPage& ppChild);
    private static int balance(BtCursor pCur);
    private static int sqlite3BtreeInsert(BtCursor pCur, Byte[] pKey, long nKey, Byte[] pData, int nData, int nZero, int appendBias, int seekResult);
    private static int sqlite3BtreeDelete(BtCursor pCur);
    private static int btreeCreateTable(Btree p, Int32& piTable, int createTabFlags);
    private static int sqlite3BtreeCreateTable(Btree p, Int32& piTable, int flags);
    private static int clearDatabasePage(BtShared pBt, UInt32 pgno, int freePageFlag, Int32& pnChange);
    private static int sqlite3BtreeClearTable(Btree p, int iTable, Int32& pnChange);
    private static int btreeDropTable(Btree p, UInt32 iTable, Int32& piMoved);
    private static int sqlite3BtreeDropTable(Btree p, int iTable, Int32& piMoved);
    private static void sqlite3BtreeGetMeta(Btree p, int idx, UInt32& pMeta);
    private static int sqlite3BtreeUpdateMeta(Btree p, int idx, UInt32 iMeta);
    private static int sqlite3BtreeCount(BtCursor pCur, Int64& pnEntry);
    private static Pager sqlite3BtreePager(Btree p);
    private static void checkAppendMsg(IntegrityCk pCheck, string zMsg1, string zFormat, Object[] ap);
    private static void checkAppendMsg(IntegrityCk pCheck, StringBuilder zMsg1, string zFormat, Object[] ap);
    private static int checkRef(IntegrityCk pCheck, UInt32 iPage, string zContext);
    private static void checkPtrmap(IntegrityCk pCheck, UInt32 iChild, byte eType, UInt32 iParent, string zContext);
    private static void checkList(IntegrityCk pCheck, int isFreeList, int iPage, int N, string zContext);
    private static int checkTreePage(IntegrityCk pCheck, int iPage, string zParentContext, Int64& pnParentMinKey, Int64& pnParentMaxKey, object _pnParentMinKey, object _pnParentMaxKey);
    private static string sqlite3BtreeIntegrityCheck(Btree p, Int32[] aRoot, int nRoot, int mxErr, Int32& pnErr);
    private static string sqlite3BtreeGetFilename(Btree p);
    private static string sqlite3BtreeGetJournalname(Btree p);
    private static bool sqlite3BtreeIsInTrans(Btree p);
    private static bool sqlite3BtreeIsInReadTrans(Btree p);
    private static bool sqlite3BtreeIsInBackup(Btree p);
    private static Schema sqlite3BtreeSchema(Btree p, int nBytes, dxFreeSchema xFree);
    private static int sqlite3BtreeSchemaLocked(Btree p);
    private static int sqlite3BtreeSetVersion(Btree pBtree, int iVersion);
    private static void sqlite3BtreeEnter(Btree bt);
    private static void sqlite3BtreeEnterAll(sqlite3 p);
    private static bool sqlite3BtreeSharable(Btree X);
    private static void sqlite3BtreeLeave(Btree X);
    private static void sqlite3BtreeEnterCursor(BtCursor X);
    private static void sqlite3BtreeLeaveCursor(BtCursor X);
    private static void sqlite3BtreeLeaveAll(sqlite3 X);
    private static bool sqlite3BtreeHoldsMutex(Btree X);
    private static bool sqlite3BtreeHoldsAllMutexes(sqlite3 X);
    private static bool sqlite3SchemaMutexHeld(sqlite3 X, int y, Schema z);
    private static void sqlite3BeginParse(Parse pParse, int explainFlag);
    private static void codeTableLocks(Parse pParse);
    private static void sqlite3FinishCoding(Parse pParse);
    private static void sqlite3NestedParse(Parse pParse, string zFormat, Object[] ap);
    private static Table sqlite3FindTable(sqlite3 db, string zName, string zDatabase);
    private static Table sqlite3LocateTable(Parse pParse, int isView, string zName, string zDbase);
    private static Index sqlite3FindIndex(sqlite3 db, string zName, string zDb);
    private static void freeIndex(sqlite3 db, Index& p);
    private static void sqlite3UnlinkAndDeleteIndex(sqlite3 db, int iDb, string zIdxName);
    private static void sqlite3ResetInternalSchema(sqlite3 db, int iDb);
    private static void sqlite3CommitInternalChanges(sqlite3 db);
    private static void sqliteDeleteColumnNames(sqlite3 db, Table pTable);
    private static void sqlite3DeleteTable(sqlite3 db, Table& pTable);
    private static void sqlite3UnlinkAndDeleteTable(sqlite3 db, int iDb, string zTabName);
    private static string sqlite3NameFromToken(sqlite3 db, Token pName);
    private static void sqlite3OpenMasterTable(Parse p, int iDb);
    private static int sqlite3FindDbName(sqlite3 db, string zName);
    private static int sqlite3FindDb(sqlite3 db, Token pName);
    private static int sqlite3TwoPartName(Parse pParse, Token pName1, Token pName2, Token& pUnqual);
    private static int sqlite3CheckObjectName(Parse pParse, string zName);
    private static void sqlite3StartTable(Parse pParse, Token pName1, Token pName2, int isTemp, int isView, int isVirtual, int noErr);
    private static void sqlite3AddColumn(Parse pParse, Token pName);
    private static void sqlite3AddNotNull(Parse pParse, int onError);
    private static char sqlite3AffinityType(string zIn);
    private static void sqlite3AddColumnType(Parse pParse, Token pType);
    private static void sqlite3AddDefaultValue(Parse pParse, ExprSpan pSpan);
    private static void sqlite3AddPrimaryKey(Parse pParse, int null_2, int onError, int autoInc, int sortOrder);
    private static void sqlite3AddPrimaryKey(Parse pParse, ExprList pList, int onError, int autoInc, int sortOrder);
    private static void sqlite3AddCheckConstraint(Parse pParse, Expr pCheckExpr);
    private static void sqlite3AddCollateType(Parse pParse, Token pToken);
    private static CollSeq sqlite3LocateCollSeq(Parse pParse, string zName);
    private static void sqlite3ChangeCookie(Parse pParse, int iDb);
    private static int identLength(string z);
    private static void identPut(StringBuilder z, Int32& pIdx, string zSignedIdent);
    private static string createTableStmt(sqlite3 db, Table p);
    private static void sqlite3EndTable(Parse pParse, Token pCons, Token pEnd, int null_4);
    private static void sqlite3EndTable(Parse pParse, int null_2, int null_3, Select pSelect);
    private static void sqlite3EndTable(Parse pParse, Token pCons, Token pEnd, Select pSelect);
    private static void sqlite3CreateView(Parse pParse, Token pBegin, Token pName1, Token pName2, Select pSelect, int isTemp, int noErr);
    private static int sqlite3ViewGetColumnNames(Parse pParse, Table pTable);
    private static void sqliteViewResetAll(sqlite3 db, int idx);
    private static void sqlite3RootPageMoved(sqlite3 db, int iDb, int iFrom, int iTo);
    private static void destroyRootPage(Parse pParse, int iTable, int iDb);
    private static void destroyTable(Parse pParse, Table pTab);
    private static void sqlite3DropTable(Parse pParse, SrcList pName, int isView, int noErr);
    private static void sqlite3CreateForeignKey(Parse pParse, int null_2, Token pTo, ExprList pToCol, int flags);
    private static void sqlite3CreateForeignKey(Parse pParse, ExprList pFromCol, Token pTo, ExprList pToCol, int flags);
    private static void sqlite3DeferForeignKey(Parse pParse, int isDeferred);
    private static void sqlite3RefillIndex(Parse pParse, Index pIndex, int memRootPage);
    private static Index sqlite3CreateIndex(Parse pParse, int null_2, int null_3, int null_4, int null_5, int onError, int null_7, int null_8, int sortOrder, int ifNotExist);
    private static Index sqlite3CreateIndex(Parse pParse, int null_2, int null_3, int null_4, ExprList pList, int onError, int null_7, int null_8, int sortOrder, int ifNotExist);
    private static Index sqlite3CreateIndex(Parse pParse, Token pName1, Token pName2, SrcList pTblName, ExprList pList, int onError, Token pStart, Token pEnd, int sortOrder, int ifNotExist);
    private static void sqlite3DefaultRowEst(Index pIdx);
    private static void sqlite3DropIndex(Parse pParse, SrcList pName, int ifExists);
    private static T[] sqlite3ArrayAllocate(sqlite3 db, T[] pArray, int szEntry, int initSize, Int32& pnEntry, Int32& pnAlloc, Int32& pIdx);
    private static IdList sqlite3IdListAppend(sqlite3 db, int null_2, Token pToken);
    private static IdList sqlite3IdListAppend(sqlite3 db, IdList pList, Token pToken);
    private static void sqlite3IdListDelete(sqlite3 db, IdList& pList);
    private static int sqlite3IdListIndex(IdList pList, string zName);
    private static SrcList sqlite3SrcListEnlarge(sqlite3 db, SrcList pSrc, int nExtra, int iStart);
    private static SrcList sqlite3SrcListAppend(sqlite3 db, int null_2, Token pTable, int null_4);
    private static SrcList sqlite3SrcListAppend(sqlite3 db, int null_2, Token pTable, Token pDatabase);
    private static SrcList sqlite3SrcListAppend(sqlite3 db, SrcList pList, Token pTable, Token pDatabase);
    private static void sqlite3SrcListAssignCursors(Parse pParse, SrcList pList);
    private static void sqlite3SrcListDelete(sqlite3 db, SrcList& pList);
    private static SrcList sqlite3SrcListAppendFromTerm(Parse pParse, SrcList p, int null_3, int null_4, Token pAlias, Select pSubquery, Expr pOn, IdList pUsing);
    private static SrcList sqlite3SrcListAppendFromTerm(Parse pParse, SrcList p, Token pTable, Token pDatabase, Token pAlias, int null_6, Expr pOn, IdList pUsing);
    private static SrcList sqlite3SrcListAppendFromTerm(Parse pParse, SrcList p, Token pTable, Token pDatabase, Token pAlias, Select pSubquery, Expr pOn, IdList pUsing);
    private static void sqlite3SrcListIndexedBy(Parse pParse, SrcList p, Token pIndexedBy);
    private static void sqlite3SrcListShiftJoinType(SrcList p);
    private static void sqlite3BeginTransaction(Parse pParse, int type);
    private static void sqlite3CommitTransaction(Parse pParse);
    private static void sqlite3RollbackTransaction(Parse pParse);
    private static void sqlite3Savepoint(Parse pParse, int op, Token pName);
    private static int sqlite3OpenTempDatabase(Parse pParse);
    private static void sqlite3CodeVerifySchema(Parse pParse, int iDb);
    private static void sqlite3CodeVerifyNamedSchema(Parse pParse, string zDb);
    private static void sqlite3BeginWriteOperation(Parse pParse, int setStatement, int iDb);
    private static void sqlite3MultiWrite(Parse pParse);
    private static void sqlite3MayAbort(Parse pParse);
    private static void sqlite3HaltConstraint(Parse pParse, int onError, string p4, int p4type);
    private static void sqlite3HaltConstraint(Parse pParse, int onError, Byte[] p4, int p4type);
    private static bool collationMatch(string zColl, Index pIndex);
    private static void reindexTable(Parse pParse, Table pTab, string zColl);
    private static void reindexDatabases(Parse pParse, string zColl);
    private static void sqlite3Reindex(Parse pParse, int null_2, int null_3);
    private static void sqlite3Reindex(Parse pParse, Token pName1, Token pName2);
    private static KeyInfo sqlite3IndexKeyinfo(Parse pParse, Index pIdx);
    private static void callCollNeeded(sqlite3 db, int enc, string zName);
    private static int synthCollSeq(sqlite3 db, CollSeq pColl);
    private static CollSeq sqlite3GetCollSeq(sqlite3 db, byte enc, CollSeq pColl, string zName);
    private static int sqlite3CheckCollSeq(Parse pParse, CollSeq pColl);
    private static CollSeq[] findCollSeqEntry(sqlite3 db, string zName, int create);
    private static CollSeq sqlite3FindCollSeq(sqlite3 db, byte enc, string zName, byte create);
    private static int matchQuality(FuncDef p, int nArg, int enc);
    private static FuncDef functionSearch(FuncDefHash pHash, int h, string zFunc, int nFunc);
    private static void sqlite3FuncDefInsert(FuncDefHash pHash, FuncDef pDef);
    private static FuncDef sqlite3FindFunction(sqlite3 db, string zName, int nName, int nArg, byte enc, byte createFlag);
    private static void sqlite3SchemaClear(Schema p);
    private static Schema sqlite3SchemaGet(sqlite3 db, Btree pBt);
    private static bool IdChar(byte C);
    public static int sqlite3_complete(string zSql);
    private static int sqlite3_compileoption_used(string zOptName);
    private static string sqlite3_compileoption_get(int N);
    private static int getDigits(string zDate, int N0, int min0, int max0, char nextC0, Int32& pVal0, int N1, int min1, int max1, char nextC1, Int32& pVal1);
    private static int getDigits(string zDate, int N0, int min0, int max0, char nextC0, Int32& pVal0, int N1, int min1, int max1, char nextC1, Int32& pVal1, int N2, int min2, int max2, char nextC2, Int32& pVal2);
    private static int getDigits(string zDate, int N, int min, int max, char nextC, Int32& pVal);
    private static int parseTimezone(string zDate, DateTime p);
    private static int parseHhMmSs(string zDate, DateTime p);
    private static void computeJD(DateTime p);
    private static int parseYyyyMmDd(string zDate, DateTime p);
    private static void setDateTimeToCurrent(sqlite3_context context, DateTime p);
    private static int parseDateOrTime(sqlite3_context context, string zDate, DateTime& p);
    private static void computeYMD(DateTime p);
    private static void computeHMS(DateTime p);
    private static void computeYMD_HMS(DateTime p);
    private static void clearYMD_HMS_TZ(DateTime p);
    private static int osLocaltime(long t, tm& pTm);
    private static long localtimeOffset(DateTime p, sqlite3_context pCtx, Int32& pRc);
    private static int parseModifier(sqlite3_context pCtx, string zMod, DateTime p);
    private static int isDate(sqlite3_context context, int argc, Mem[] argv, DateTime& p);
    private static void juliandayFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void datetimeFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void timeFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void dateFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void strftimeFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void ctimeFunc(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static void cdateFunc(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static void ctimestampFunc(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static void sqlite3RegisterDateTimeFunctions();
    private static Table sqlite3SrcListLookup(Parse pParse, SrcList pSrc);
    private static bool sqlite3IsReadOnly(Parse pParse, Table pTab, int viewOk);
    private static void sqlite3MaterializeView(Parse pParse, Table pView, Expr pWhere, int iCur);
    private static void sqlite3DeleteFrom(Parse pParse, SrcList pTabList, Expr pWhere);
    private static void sqlite3GenerateRowDelete(Parse pParse, Table pTab, int iCur, int iRowid, int count, Trigger pTrigger, int onconf);
    private static void sqlite3GenerateRowIndexDelete(Parse pParse, Table pTab, int iCur, int nothing);
    private static void sqlite3GenerateRowIndexDelete(Parse pParse, Table pTab, int iCur, Int32[] aRegIdx);
    private static int sqlite3GenerateIndexKey(Parse pParse, Index pIdx, int iCur, int regOut, bool doMakeRec);
    private static char sqlite3ExprAffinity(Expr pExpr);
    private static Expr sqlite3ExprSetColl(Expr pExpr, CollSeq pColl);
    private static Expr sqlite3ExprSetCollByToken(Parse pParse, Expr pExpr, Token pCollName);
    private static CollSeq sqlite3ExprCollSeq(Parse pParse, Expr pExpr);
    private static char sqlite3CompareAffinity(Expr pExpr, char aff2);
    private static char comparisonAffinity(Expr pExpr);
    private static bool sqlite3IndexAffinityOk(Expr pExpr, char idx_affinity);
    private static byte binaryCompareP5(Expr pExpr1, Expr pExpr2, int jumpIfNull);
    private static CollSeq sqlite3BinaryCompareCollSeq(Parse pParse, Expr pLeft, Expr pRight);
    private static int codeCompare(Parse pParse, Expr pLeft, Expr pRight, int opcode, int in1, int in2, int dest, int jumpIfNull);
    private static int sqlite3ExprCheckHeight(Parse pParse, int nHeight);
    private static void heightOfExpr(Expr p, Int32& pnHeight);
    private static void heightOfExprList(ExprList p, Int32& pnHeight);
    private static void heightOfSelect(Select p, Int32& pnHeight);
    private static void exprSetHeight(Expr p);
    private static void sqlite3ExprSetHeight(Parse pParse, Expr p);
    private static int sqlite3SelectExprHeight(Select p);
    private static Expr sqlite3ExprAlloc(sqlite3 db, int op, Token pToken, int dequote);
    private static Expr sqlite3Expr(sqlite3 db, int op, string zToken);
    private static void sqlite3ExprAttachSubtrees(sqlite3 db, Expr pRoot, Expr pLeft, Expr pRight);
    private static Expr sqlite3PExpr(Parse pParse, int op, int null_3, int null_4, int null_5);
    private static Expr sqlite3PExpr(Parse pParse, int op, int null_3, int null_4, Token pToken);
    private static Expr sqlite3PExpr(Parse pParse, int op, Expr pLeft, int null_4, int null_5);
    private static Expr sqlite3PExpr(Parse pParse, int op, Expr pLeft, int null_4, Token pToken);
    private static Expr sqlite3PExpr(Parse pParse, int op, Expr pLeft, Expr pRight, int null_5);
    private static Expr sqlite3PExpr(Parse pParse, int op, Expr pLeft, Expr pRight, Token pToken);
    private static Expr sqlite3ExprAnd(sqlite3 db, Expr pLeft, Expr pRight);
    private static Expr sqlite3ExprFunction(Parse pParse, int null_2, Token pToken);
    private static Expr sqlite3ExprFunction(Parse pParse, ExprList pList, int null_3);
    private static Expr sqlite3ExprFunction(Parse pParse, ExprList pList, Token pToken);
    private static void sqlite3ExprAssignVarNumber(Parse pParse, Expr pExpr);
    private static void sqlite3ExprDelete(sqlite3 db, Expr& p);
    private static int exprStructSize(Expr p);
    private static int dupedExprStructSize(Expr p, int flags);
    private static int dupedExprNodeSize(Expr p, int flags);
    private static int dupedExprSize(Expr p, int flags);
    private static Expr exprDup(sqlite3 db, Expr p, int flags, Expr& pzBuffer);
    private static Expr sqlite3ExprDup(sqlite3 db, Expr p, int flags);
    private static ExprList sqlite3ExprListDup(sqlite3 db, ExprList p, int flags);
    private static SrcList sqlite3SrcListDup(sqlite3 db, SrcList p, int flags);
    private static IdList sqlite3IdListDup(sqlite3 db, IdList p);
    private static Select sqlite3SelectDup(sqlite3 db, Select p, int flags);
    private static ExprList sqlite3ExprListAppend(Parse pParse, int null_2, Expr pExpr);
    private static ExprList sqlite3ExprListAppend(Parse pParse, ExprList pList, Expr pExpr);
    private static void sqlite3ExprListSetName(Parse pParse, ExprList pList, Token pName, int dequote);
    private static void sqlite3ExprListSetSpan(Parse pParse, ExprList pList, ExprSpan pSpan);
    private static void sqlite3ExprListCheckLength(Parse pParse, ExprList pEList, string zObject);
    private static void sqlite3ExprListDelete(sqlite3 db, ExprList& pList);
    private static int exprNodeIsConstant(Walker pWalker, Expr& pExpr);
    private static int selectNodeIsConstant(Walker pWalker, Select NotUsed);
    private static int exprIsConst(Expr p, int initFlag);
    private static int sqlite3ExprIsConstant(Expr p);
    private static int sqlite3ExprIsConstantNotJoin(Expr p);
    private static int sqlite3ExprIsConstantOrFunction(Expr p);
    private static int sqlite3ExprIsInteger(Expr p, Int32& pValue);
    private static int sqlite3ExprCanBeNull(Expr p);
    private static void sqlite3ExprCodeIsNullJump(Vdbe v, Expr pExpr, int iReg, int iDest);
    private static int sqlite3ExprNeedsNoAffinityChange(Expr p, char aff);
    private static bool sqlite3IsRowid(string z);
    private static int isCandidateForInOpt(Select p);
    private static int sqlite3FindInIndex(Parse pParse, Expr pX, Int32& prNotFound);
    private static int sqlite3CodeSubselect(Parse pParse, Expr pExpr, int rMayHaveNull, bool isRowid);
    private static void sqlite3ExprCodeIN(Parse pParse, Expr pExpr, int destIfFalse, int destIfNull);
    private static void codeReal(Vdbe v, string z, bool negateFlag, int iMem);
    private static void codeInteger(Parse pParse, Expr pExpr, bool negFlag, int iMem);
    private static void cacheEntryClear(Parse pParse, yColCache p);
    private static void sqlite3ExprCacheStore(Parse pParse, int iTab, int iCol, int iReg);
    private static void sqlite3ExprCacheRemove(Parse pParse, int iReg, int nReg);
    private static void sqlite3ExprCachePush(Parse pParse);
    private static void sqlite3ExprCachePop(Parse pParse, int N);
    private static void sqlite3ExprCachePinRegister(Parse pParse, int iReg);
    private static void sqlite3ExprCodeGetColumnOfTable(Vdbe v, Table pTab, int iTabCur, int iCol, int regOut);
    private static int sqlite3ExprCodeGetColumn(Parse pParse, Table pTab, int iColumn, int iTable, int iReg);
    private static void sqlite3ExprCacheClear(Parse pParse);
    private static void sqlite3ExprCacheAffinityChange(Parse pParse, int iStart, int iCount);
    private static void sqlite3ExprCodeMove(Parse pParse, int iFrom, int iTo, int nReg);
    private static void sqlite3ExprCodeCopy(Parse pParse, int iFrom, int iTo, int nReg);
    private static int usedAsColumnCache(Parse pParse, int iFrom, int iTo);
    private static int sqlite3ExprCodeTarget(Parse pParse, Expr pExpr, int target);
    private static int sqlite3ExprCodeTemp(Parse pParse, Expr pExpr, Int32& pReg);
    private static int sqlite3ExprCode(Parse pParse, Expr pExpr, int target);
    private static int sqlite3ExprCodeAndCache(Parse pParse, Expr pExpr, int target);
    private static int isAppropriateForFactoring(Expr p);
    private static int evalConstExpr(Walker pWalker, Expr& pExpr);
    private static void sqlite3ExprCodeConstants(Parse pParse, Expr pExpr);
    private static int sqlite3ExprCodeExprList(Parse pParse, ExprList pList, int target, bool doHardCopy);
    private static void exprCodeBetween(Parse pParse, Expr pExpr, int dest, int jumpIfTrue, int jumpIfNull);
    private static void sqlite3ExprIfTrue(Parse pParse, Expr pExpr, int dest, int jumpIfNull);
    private static void sqlite3ExprIfFalse(Parse pParse, Expr pExpr, int dest, int jumpIfNull);
    private static int sqlite3ExprCompare(Expr pA, Expr pB);
    private static int sqlite3ExprListCompare(ExprList pA, ExprList pB);
    private static int addAggInfoColumn(sqlite3 db, AggInfo pInfo);
    private static int addAggInfoFunc(sqlite3 db, AggInfo pInfo);
    private static int analyzeAggregate(Walker pWalker, Expr& pExpr);
    private static int analyzeAggregatesInSelect(Walker pWalker, Select pSelect);
    private static void sqlite3ExprAnalyzeAggregates(NameContext pNC, Expr& pExpr);
    private static void sqlite3ExprAnalyzeAggList(NameContext pNC, ExprList pList);
    private static int sqlite3GetTempReg(Parse pParse);
    private static void sqlite3ReleaseTempReg(Parse pParse, int iReg);
    private static int sqlite3GetTempRange(Parse pParse, int nReg);
    private static void sqlite3ReleaseTempRange(Parse pParse, int iReg, int nReg);
    private static void wsdHooksInit();
    private static void sqlite3BenignMallocHooks(void_function xBenignBegin, void_function xBenignEnd);
    private static void sqlite3BeginBenignMalloc();
    private static void sqlite3EndBenignMalloc();
    private static int locateFkeyIndex(Parse pParse, Table pParent, FKey pFKey, Index& ppIdx, Int32[]& paiCol);
    private static void fkLookupParent(Parse pParse, int iDb, Table pTab, Index pIdx, FKey pFKey, Int32[] aiCol, int regData, int nIncr, int isIgnore);
    private static void fkScanChildren(Parse pParse, SrcList pSrc, Table pTab, Index pIdx, FKey pFKey, Int32[] aiCol, int regData, int nIncr);
    private static FKey sqlite3FkReferences(Table pTab);
    private static void fkTriggerDelete(sqlite3 dbMem, Trigger p);
    private static void sqlite3FkDropTable(Parse pParse, SrcList pName, Table pTab);
    private static void sqlite3FkCheck(Parse pParse, Table pTab, int regOld, int regNew);
    private static UInt32 COLUMN_MASK(int x);
    private static UInt32 sqlite3FkOldmask(Parse pParse, Table pTab);
    private static int sqlite3FkRequired(Parse pParse, Table pTab, Int32[] aChange, int chngRowid);
    private static Trigger fkActionTrigger(Parse pParse, Table pTab, FKey pFKey, ExprList pChanges);
    private static void sqlite3FkActions(Parse pParse, Table pTab, ExprList pChanges, int regOld);
    private static void sqlite3FkDelete(sqlite3 db, Table pTab);
    private static CollSeq sqlite3GetFuncCollSeq(sqlite3_context context);
    private static void minmaxFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void typeofFunc(sqlite3_context context, int NotUsed, Mem[] argv);
    private static void lengthFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void absFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void substrFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void roundFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void upperFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void lowerFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void randomFunc(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static void randomBlob(sqlite3_context context, int argc, Mem[] argv);
    private static void last_insert_rowid(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static void changes(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static void total_changes(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static bool patternCompare(string zPattern, string zString, compareInfo pInfo, UInt32 esc);
    private static void likeFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void nullifFunc(sqlite3_context context, int NotUsed, Mem[] argv);
    private static void versionFunc(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static void sourceidFunc(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    private static void errlogFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void compileoptionusedFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void compileoptiongetFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void quoteFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void hexFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void zeroblobFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void replaceFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void trimFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void loadExt(sqlite3_context context, int argc, Mem[] argv);
    private static void sumStep(sqlite3_context context, int argc, Mem[] argv);
    private static void sumFinalize(sqlite3_context context);
    private static void avgFinalize(sqlite3_context context);
    private static void totalFinalize(sqlite3_context context);
    private static void countStep(sqlite3_context context, int argc, Mem[] argv);
    private static void countFinalize(sqlite3_context context);
    private static void minmaxStep(sqlite3_context context, int NotUsed, Mem[] argv);
    private static void minMaxFinalize(sqlite3_context context);
    private static void groupConcatStep(sqlite3_context context, int argc, Mem[] argv);
    private static void groupConcatFinalize(sqlite3_context context);
    private static void sqlite3RegisterBuiltinFunctions(sqlite3 db);
    private static void setLikeOptFlag(sqlite3 db, string zName, int flagVal);
    private static void sqlite3RegisterLikeFunctions(sqlite3 db, int caseSensitive);
    private static bool sqlite3IsLikeFunction(sqlite3 db, Expr pExpr, Boolean& pIsNocase, Char[] aWc);
    private static void sqlite3RegisterGlobalFunctions();
    private static void sqlite3HashInit(Hash pNew);
    private static void sqlite3HashClear(Hash pH);
    private static UInt32 strHash(string z, int nKey);
    private static void insertElement(Hash pH, _ht pEntry, HashElem pNew);
    private static bool rehash(Hash& pH, UInt32 new_size);
    private static HashElem findElementGivenHash(Hash pH, string pKey, int nKey, UInt32 h);
    private static void removeElementGivenHash(Hash pH, HashElem& elem, UInt32 h);
    private static T sqlite3HashFind(Hash pH, string pKey, int nKey, T nullType);
    private static T sqlite3HashInsert(Hash& pH, string pKey, int nKey, T data);
    private static HashElem sqliteHashFirst(Hash H);
    private static HashElem sqliteHashNext(HashElem E);
    private static object sqliteHashData(HashElem E);
    private static ulong sqlite3Hwtime();
    private static void sqlite3OpenTable(Parse p, int iCur, int iDb, Table pTab, int opcode);
    private static string sqlite3IndexAffinityStr(Vdbe v, Index pIdx);
    private static void sqlite3TableAffinityStr(Vdbe v, Table pTab);
    private static bool readsTable(Parse p, int iStartAddr, int iDb, Table pTab);
    private static int autoIncBegin(Parse pParse, int iDb, Table pTab);
    private static void sqlite3AutoincrementBegin(Parse pParse);
    private static void autoIncStep(Parse pParse, int memId, int regRowid);
    private static void sqlite3AutoincrementEnd(Parse pParse);
    private static void sqlite3Insert(Parse pParse, SrcList pTabList, int null_3, int null_4, IdList pColumn, int onError);
    private static void sqlite3Insert(Parse pParse, SrcList pTabList, int null_3, Select pSelect, IdList pColumn, int onError);
    private static void sqlite3Insert(Parse pParse, SrcList pTabList, ExprList pList, int null_4, IdList pColumn, int onError);
    private static void sqlite3Insert(Parse pParse, SrcList pTabList, ExprList pList, Select pSelect, IdList pColumn, int onError);
    private static void sqlite3GenerateConstraintChecks(Parse pParse, Table pTab, int baseCur, int regRowid, Int32[] aRegIdx, int rowidChng, bool isUpdate, int overrideError, int ignoreDest, Int32& pbMayReplace);
    private static void sqlite3CompleteInsertion(Parse pParse, Table pTab, int baseCur, int regRowid, Int32[] aRegIdx, bool isUpdate, bool appendBias, bool useSeekResult);
    private static int sqlite3OpenTableAndIndices(Parse pParse, Table pTab, int baseCur, int op);
    private static bool xferCompatibleCollation(string z1, string z2);
    private static bool xferCompatibleIndex(Index pDest, Index pSrc);
    private static int xferOptimization(Parse pParse, Table pDest, Select pSelect, int onError, int iDbDest);
    private static int keywordCode(string z, int iOffset, int n);
    private static int sqlite3KeywordCode(string z, int n);
    public static int exec(sqlite3 db, string zSql, int NoCallback, int NoArgs, int NoErrors);
    public static int exec(sqlite3 db, string zSql, dxCallback xCallback, object pArg, int NoErrors);
    public static int exec(sqlite3 db, string zSql, dxCallback xCallback, object pArg, String& pzErrMsg);
    public static int sqlite3_exec(sqlite3 db, string zSql, int NoCallback, int NoArgs, int NoErrors);
    public static int sqlite3_exec(sqlite3 db, string zSql, dxCallback xCallback, object pArg, int NoErrors);
    public static int sqlite3_exec(sqlite3 db, string zSql, dxCallback xCallback, object pArg, String& pzErrMsg);
    private static string sqlite3_errmsg16(sqlite3 db);
    private static void sqlite3_result_text16(sqlite3_context pCtx, string z, int n, dxDel xDel);
    public static int sqlite3_free_table(String[]& pazResult);
    public static int sqlite3_get_table(sqlite3 db, string zSql, String[]& pazResult, Int32& pnRow, object dummy, String& pzErrmsg);
    public static int sqlite3_get_table(sqlite3 db, string zSql, String[]& pazResult, Int32& pnRow, Int32& pnColumn, String& pzErrmsg);
    private static int sqlite3LoadExtension(sqlite3 db, string zFile, string zProc, String& pzErrMsg);
    public static int sqlite3_load_extension(sqlite3 db, string zFile, string zProc, String& pzErrMsg);
    private static void sqlite3CloseExtensions(sqlite3 db);
    public static int sqlite3_enable_load_extension(sqlite3 db, int onoff);
    private static void wsdAutoextInit();
    private static int sqlite3_auto_extension(dxInit xInit);
    private static void sqlite3_reset_auto_extension();
    private static void sqlite3AutoLoadExtensions(sqlite3 db);
    public static string sqlite3_libversion();
    public static string sqlite3_sourceid();
    public static int sqlite3_libversion_number();
    public static int sqlite3_threadsafe();
    public static int sqlite3_initialize();
    public static int sqlite3_shutdown();
    public static int sqlite3_config(int op, sqlite3_pcache_methods ap);
    public static int sqlite3_config(int op, sqlite3_pcache_methods& ap);
    public static int sqlite3_config(int op, sqlite3_mem_methods ap);
    public static int sqlite3_config(int op, sqlite3_mem_methods& ap);
    public static int sqlite3_config(int op, sqlite3_mutex_methods ap);
    public static int sqlite3_config(int op, sqlite3_mutex_methods& ap);
    public static int sqlite3_config(int op, Object[] ap);
    private static int setupLookaside(sqlite3 db, Byte[] pBuf, int sz, int cnt);
    private static sqlite3_mutex sqlite3_db_mutex(sqlite3 db);
    private static int sqlite3_db_config(sqlite3 db, int op, Object[] ap);
    private static bool allSpaces(string z, int iStart, int n);
    private static int binCollFunc(object padFlag, int nKey1, string pKey1, int nKey2, string pKey2);
    private static int nocaseCollatingFunc(object NotUsed, int nKey1, string pKey1, int nKey2, string pKey2);
    public static long sqlite3_last_insert_rowid(sqlite3 db);
    public static int sqlite3_changes(sqlite3 db);
    public static int sqlite3_total_changes(sqlite3 db);
    private static void sqlite3CloseSavepoints(sqlite3 db);
    private static void functionDestroy(sqlite3 db, FuncDef p);
    public static int sqlite3_close(sqlite3 db);
    private static void sqlite3RollbackAll(sqlite3 db);
    private static string sqlite3ErrStr(int rc);
    private static int sqliteDefaultBusyCallback(object ptr, int count);
    private static int sqlite3InvokeBusyHandler(BusyHandler p);
    private static int sqlite3_busy_handler(sqlite3 db, dxBusy xBusy, object pArg);
    private static void sqlite3_progress_handler(sqlite3 db, int nOps, dxProgress xProgress, object pArg);
    public static int sqlite3_busy_timeout(sqlite3 db, int ms);
    public static void sqlite3_interrupt(sqlite3 db);
    private static int sqlite3CreateFunc(sqlite3 db, string zFunctionName, int nArg, byte enc, object pUserData, dxFunc xFunc, dxStep xStep, dxFinal xFinal, FuncDestructor pDestructor);
    public static int sqlite3_create_function(sqlite3 db, string zFunc, int nArg, byte enc, object p, dxFunc xFunc, dxStep xStep, dxFinal xFinal);
    private static int sqlite3_create_function_v2(sqlite3 db, string zFunc, int nArg, int enc, object p, dxFunc xFunc, dxStep xStep, dxFinal xFinal, dxFDestroy xDestroy);
    private static int sqlite3_overload_function(sqlite3 db, string zName, int nArg);
    private static object sqlite3_trace(sqlite3 db, dxTrace xTrace, object pArg);
    private static object sqlite3_profile(sqlite3 db, dxProfile xProfile, object pArg);
    public static object sqlite3_commit_hook(sqlite3 db, dxCommitCallback xCallback, object pArg);
    public static object sqlite3_update_hook(sqlite3 db, dxUpdateCallback xCallback, object pArg);
    public static object sqlite3_rollback_hook(sqlite3 db, dxRollbackCallback xCallback, object pArg);
    private static int sqlite3_wal_autocheckpoint(sqlite3 db, int nFrame);
    private static object sqlite3_wal_hook(sqlite3 db, dxWalCallback xCallback, object pArg);
    private static int sqlite3_wal_checkpoint_v2(sqlite3 db, string zDb, int eMode, Int32& pnLog, Int32& pnCkpt);
    private static int sqlite3_wal_checkpoint(sqlite3 db, string zDb);
    private static bool sqlite3TempInMemory(sqlite3 db);
    public static string sqlite3_errmsg(sqlite3 db);
    public static int sqlite3_errcode(sqlite3 db);
    private static int sqlite3_extended_errcode(sqlite3 db);
    private static int createCollation(sqlite3 db, string zName, byte enc, byte collType, object pCtx, dxCompare xCompare, dxDelCollSeq xDel);
    private static int sqlite3_limit(sqlite3 db, int limitId, int newLimit);
    private static int sqlite3ParseUri(string zDefaultVfs, string zUri, Int32& pFlags, sqlite3_vfs& ppVfs, String& pzFile, String& pzErrMsg);
    private static int openDatabase(string zFilename, sqlite3& ppDb, int flags, string zVfs);
    public static int sqlite3_open(string zFilename, sqlite3& ppDb);
    public static int sqlite3_open_v2(string filename, sqlite3& ppDb, int flags, string zVfs);
    public static int sqlite3_create_collation(sqlite3 db, string zName, int enc, object pCtx, dxCompare xCompare);
    private static int sqlite3_create_collation_v2(sqlite3 db, string zName, int enc, object pCtx, dxCompare xCompare, dxDelCollSeq xDel);
    private static int sqlite3_collation_needed(sqlite3 db, object pCollNeededArg, dxCollNeeded xCollNeeded);
    private static byte sqlite3_get_autocommit(sqlite3 db);
    private static int sqlite3CorruptError(int lineno);
    private static int sqlite3MisuseError(int lineno);
    private static int sqlite3CantopenError(int lineno);
    public static int sqlite3_table_column_metadata(sqlite3 db, string zDbName, string zTableName, string zColumnName, String& pzDataType, String& pzCollSeq, Int32& pNotNull, Int32& pPrimaryKey, Int32& pAutoinc);
    public static int sqlite3_sleep(int ms);
    private static int sqlite3_extended_result_codes(sqlite3 db, bool onoff);
    private static int sqlite3_file_control(sqlite3 db, string zDbName, int op, Int64& pArg);
    public static int sqlite3_test_control(int op, Object[] ap);
    private static string sqlite3_uri_parameter(string zFilename, string zParam);
    private static int sqlite3_release_memory(int n);
    private static void softHeapLimitEnforcer(object NotUsed, long NotUsed2, int allocSize);
    private static long sqlite3_soft_heap_limit64(long n);
    private void sqlite3_soft_heap_limit(int n);
    private static int sqlite3MallocInit();
    private static bool sqlite3HeapNearlyFull();
    private static void sqlite3MallocEnd();
    private static long sqlite3_memory_used();
    private static long sqlite3_memory_highwater(int resetFlag);
    private static int sqlite3MemoryAlarm(dxalarmCallback xCallback, object pArg, long iThreshold);
    private static void sqlite3MallocAlarm(int nByte);
    private static int mallocWithAlarm(int n, Int32[]& pp);
    private static int mallocWithAlarm(int n, Byte[]& pp);
    private static Mem sqlite3Malloc(Mem pMem);
    private static Int32[] sqlite3Malloc(Int32[] pInt, UInt32 n);
    private static Int32[] sqlite3Malloc(Int32[] pInt, int n);
    private static Byte[] sqlite3Malloc(UInt32 n);
    private static Byte[] sqlite3Malloc(int n);
    public static Byte[] sqlite3_malloc(int n);
    private static Byte[][] sqlite3ScratchMalloc(Byte[][] apCell, int n);
    private static Byte[] sqlite3ScratchMalloc(int n);
    private static void sqlite3ScratchFree(Byte[][] p);
    private static bool isLookaside(sqlite3 db, object p);
    private static int sqlite3MallocSize(Byte[][] p);
    private static int sqlite3MallocSize(Int32[] p);
    private static int sqlite3MallocSize(Byte[] p);
    private static int sqlite3DbMallocSize(sqlite3 db, Byte[] p);
    public static void sqlite3_free(Byte[]& p);
    public static void sqlite3_free(Mem& p);
    private static void sqlite3DbFree(sqlite3 db, Byte[]& p);
    private static Byte[] sqlite3Realloc(Byte[] pOld, int nBytes);
    private static Byte[] sqlite3_realloc(Byte[] pOld, int n);
    private static Byte[] sqlite3MallocZero(int n);
    private static Mem sqlite3DbMallocZero(sqlite3 db, Mem m);
    private static Byte[] sqlite3DbMallocZero(sqlite3 db, int n);
    private static Byte[] sqlite3DbMallocRaw(sqlite3 db, int n);
    private static Byte[] sqlite3DbRealloc(sqlite3 db, Byte[] p, int n);
    private static Byte[] sqlite3DbReallocOrFree(sqlite3 db, Byte[] p, int n);
    private static void sqlite3SetString(String& pz, sqlite3 db, string zFormat, String[] ap);
    private static int sqlite3ApiExit(int zero, int rc);
    private static int sqlite3ApiExit(sqlite3 db, int rc);
    private static int MIN(int x, int y);
    private static int MIN(int x, UInt32 y);
    private static int memjrnlRead(sqlite3_file pJfd, Byte[] zBuf, int iAmt, long iOfst);
    private static int memjrnlWrite(sqlite3_file pJfd, Byte[] zBuf, int iAmt, long iOfst);
    private static int memjrnlTruncate(sqlite3_file pJfd, long size);
    private static int memjrnlClose(sqlite3_file pJfd);
    private static int memjrnlSync(sqlite3_file NotUsed, int NotUsed2);
    private static int memjrnlFileSize(sqlite3_file pJfd, Int64& pSize);
    private static void sqlite3MemJournalOpen(sqlite3_file pJfd);
    private static bool sqlite3IsMemJournal(sqlite3_file pJfd);
    private static int sqlite3MemJournalSize();
    private static void sqlite3MemFree(T& x);
    private static void sqlite3MemFree(String& x);
    private static Byte[] sqlite3MemMalloc(int nByte);
    private static Int32[] sqlite3MemMallocInt(int nInt);
    private static Mem sqlite3MemMallocMem(Mem pMem);
    private static void sqlite3MemFree(Byte[]& pPrior);
    private static void sqlite3MemFreeInt(Int32[]& pPrior);
    private static void sqlite3MemFreeMem(Mem& pPrior);
    private static int sqlite3MemInit();
    private static void sqlite3MemShutdown();
    private static BtCursor sqlite3MemMallocBtCursor(BtCursor dummy);
    private static void sqlite3MemFreeBtCursor(BtCursor& pPrior);
    private static Byte[] sqlite3MemRealloc(Byte[] pPrior, int nByte);
    private static int sqlite3MemSize(Byte[] pPrior);
    private static int sqlite3MemRoundup(int n);
    private static int sqlite3MemInit(object NotUsed);
    private static void sqlite3MemShutdown(object NotUsed);
    private static void sqlite3MemSetDefault();
    private static void sqlite3DbFree(sqlite3 db, Int32[]& pPrior);
    private static void sqlite3DbFree(sqlite3 db, Mem& pPrior);
    private static void sqlite3DbFree(sqlite3 db, Mem[]& pPrior);
    private static void sqlite3DbFree(sqlite3 db, T& pT);
    private static void sqlite3DbFree(sqlite3 db, String& pString);
    private static int sqlite3MutexInit();
    private static int sqlite3MutexEnd();
    private static sqlite3_mutex sqlite3_mutex_alloc(int id);
    private static sqlite3_mutex sqlite3MutexAlloc(int id);
    private static void sqlite3_mutex_free(sqlite3_mutex p);
    private static void sqlite3_mutex_enter(sqlite3_mutex p);
    private static int sqlite3_mutex_try(sqlite3_mutex p);
    private static void sqlite3_mutex_leave(sqlite3_mutex p);
    private static bool sqlite3_mutex_held(sqlite3_mutex p);
    private static bool sqlite3_mutex_notheld(sqlite3_mutex p);
    private static bool debugMutexHeld(sqlite3_mutex pX);
    private static bool debugMutexNotheld(sqlite3_mutex pX);
    private static int debugMutexInit();
    private static int debugMutexEnd();
    private static sqlite3_mutex debugMutexAlloc(int id);
    private static void debugMutexFree(sqlite3_mutex pX);
    private static void debugMutexEnter(sqlite3_mutex pX);
    private static int debugMutexTry(sqlite3_mutex pX);
    private static void debugMutexLeave(sqlite3_mutex pX);
    private static sqlite3_mutex_methods sqlite3NoopMutex();
    private static bool winMutexHeld(sqlite3_mutex p);
    private static bool winMutexNotheld2(sqlite3_mutex p, int tid);
    private static bool winMutexNotheld(sqlite3_mutex p);
    private static int winMutexInit();
    private static int winMutexEnd();
    private static sqlite3_mutex winMutexAlloc(int iType);
    private static void winMutexFree(sqlite3_mutex p);
    private static void winMutexEnter(sqlite3_mutex p);
    private static int winMutexTry(sqlite3_mutex p);
    private static void winMutexLeave(sqlite3_mutex p);
    private static sqlite3_mutex_methods sqlite3DefaultMutex();
    private static string sqlite3OpcodeName(int i);
    private static void DO_OS_MALLOC_TEST(sqlite3_file x);
    private static int sqlite3OsClose(sqlite3_file pId);
    private static int sqlite3OsRead(sqlite3_file id, Byte[] pBuf, int amt, long offset);
    private static int sqlite3OsWrite(sqlite3_file id, Byte[] pBuf, int amt, long offset);
    private static int sqlite3OsTruncate(sqlite3_file id, long size);
    private static int sqlite3OsSync(sqlite3_file id, int flags);
    private static int sqlite3OsFileSize(sqlite3_file id, Int64& pSize);
    private static int sqlite3OsLock(sqlite3_file id, int lockType);
    private static int sqlite3OsUnlock(sqlite3_file id, int lockType);
    private static int sqlite3OsCheckReservedLock(sqlite3_file id, Int32& pResOut);
    private static int sqlite3OsFileControl(sqlite3_file id, UInt32 op, Int64& pArg);
    private static int sqlite3OsSectorSize(sqlite3_file id);
    private static int sqlite3OsDeviceCharacteristics(sqlite3_file id);
    private static int sqlite3OsShmLock(sqlite3_file id, int offset, int n, int flags);
    private static void sqlite3OsShmBarrier(sqlite3_file id);
    private static int sqlite3OsShmUnmap(sqlite3_file id, int deleteFlag);
    private static int sqlite3OsShmMap(sqlite3_file id, int iPage, int pgsz, int bExtend, Object& pp);
    private static int sqlite3OsOpen(sqlite3_vfs pVfs, string zPath, sqlite3_file pFile, int flags, Int32& pFlagsOut);
    private static int sqlite3OsDelete(sqlite3_vfs pVfs, string zPath, int dirSync);
    private static int sqlite3OsAccess(sqlite3_vfs pVfs, string zPath, int flags, Int32& pResOut);
    private static int sqlite3OsFullPathname(sqlite3_vfs pVfs, string zPath, int nPathOut, StringBuilder zPathOut);
    private static IntPtr sqlite3OsDlOpen(sqlite3_vfs pVfs, string zPath);
    private static void sqlite3OsDlError(sqlite3_vfs pVfs, int nByte, string zBufOut);
    private static object sqlite3OsDlSym(sqlite3_vfs pVfs, IntPtr pHdle, String& zSym);
    private static void sqlite3OsDlClose(sqlite3_vfs pVfs, IntPtr pHandle);
    private static int sqlite3OsRandomness(sqlite3_vfs pVfs, int nByte, Byte[] zBufOut);
    private static int sqlite3OsSleep(sqlite3_vfs pVfs, int nMicro);
    private static int sqlite3OsCurrentTimeInt64(sqlite3_vfs pVfs, Int64& pTimeOut);
    private static int sqlite3OsOpenMalloc(sqlite3_vfs& pVfs, string zFile, sqlite3_file& ppFile, int flags, Int32& pOutFlags);
    private static int sqlite3OsCloseFree(sqlite3_file pFile);
    private static int sqlite3OsInit();
    public static sqlite3_vfs sqlite3_vfs_find(string zVfs);
    private static void vfsUnlink(sqlite3_vfs pVfs);
    public static int sqlite3_vfs_register(sqlite3_vfs pVfs, int makeDflt);
    private static int sqlite3_vfs_unregister(sqlite3_vfs pVfs);
    private static void OSTRACE(string X, Object[] ap);
    private static bool SimulateIOError();
    private static void SimulateIOErrorBenign(int x);
    private static bool isNT();
    private static int getLastErrorMsg(int nBuf, String& zBuf);
    private static int winLogError(int a, string b, string c);
    private static int winLogErrorAtLine(int errcode, string zFunc, string zPath, int iLine);
    private static int seekWinFile(sqlite3_file id, long iOffset);
    private static int winClose(sqlite3_file id);
    private static int winRead(sqlite3_file id, Byte[] pBuf, int amt, long offset);
    private static int winWrite(sqlite3_file id, Byte[] pBuf, int amt, long offset);
    private static int winTruncate(sqlite3_file id, long nByte);
    private static int winSync(sqlite3_file id, int flags);
    private static int winFileSize(sqlite3_file id, Int64& pSize);
    private static int getReadLock(sqlite3_file pFile);
    private static int unlockReadLock(sqlite3_file pFile);
    private static int winLock(sqlite3_file id, int locktype);
    private static int winCheckReservedLock(sqlite3_file id, Int32& pResOut);
    private static int winUnlock(sqlite3_file id, int locktype);
    private static int winFileControl(sqlite3_file id, int op, Int64& pArg);
    private static int winSectorSize(sqlite3_file id);
    private static int winDeviceCharacteristics(sqlite3_file id);
    private static int winShmMap(sqlite3_file fd, int iRegion, int szRegion, int isWrite, Object& pp);
    private static int winShmLock(sqlite3_file fd, int ofst, int n, int flags);
    private static void winShmBarrier(sqlite3_file fd);
    private static int winShmUnmap(sqlite3_file fd, int deleteFlag);
    private static string convertUtf8Filename(string zFilename);
    private static int getTempname(int nBuf, StringBuilder zBuf);
    private static int winOpen(sqlite3_vfs pVfs, string zName, sqlite3_file pFile, int flags, Int32& pOutFlags);
    private static int winDelete(sqlite3_vfs pVfs, string zFilename, int syncDir);
    private static int winAccess(sqlite3_vfs pVfs, string zFilename, int flags, Int32& pResOut);
    private static int winFullPathname(sqlite3_vfs pVfs, string zRelative, int nFull, StringBuilder zFull);
    private static int getSectorSize(sqlite3_vfs pVfs, string zRelative);
    private static IntPtr winDlOpen(sqlite3_vfs vfs, string zFilename);
    private static int winDlError(sqlite3_vfs vfs, int nByte, string zErrMsg);
    private static IntPtr winDlSym(sqlite3_vfs vfs, IntPtr data, string zSymbol);
    private static int winDlClose(sqlite3_vfs vfs, IntPtr data);
    private static int winRandomness(sqlite3_vfs pVfs, int nBuf, Byte[] zBuf);
    private static int winSleep(sqlite3_vfs pVfs, int microsec);
    private static int winCurrentTimeInt64(sqlite3_vfs pVfs, Int64& piNow);
    private static int winCurrentTime(sqlite3_vfs pVfs, Double& prNow);
    private static int winGetLastError(sqlite3_vfs pVfs, int nBuf, String& zBuf);
    private static int sqlite3_os_init();
    private static int sqlite3_os_end();
    private static void PAGERTRACE(string T, Object[] ap);
    private static int PAGERID(Pager p);
    private static int FILEHANDLEID(sqlite3_file fd);
    private static bool CODEC1(Pager P, Byte[] D, UInt32 N, int X);
    private static bool CODEC2(Pager P, Byte[] D, UInt32 N, int X, Byte[]& O);
    private static void PAGER_INCR(Int32& v);
    private static int JOURNAL_PG_SZ(Pager pPager);
    private static UInt32 JOURNAL_HDR_SZ(Pager pPager);
    private static bool isOpen(sqlite3_file pFd);
    private static bool pagerUseWal(Pager x);
    private static int pagerRollbackWal(Pager x);
    private static int pagerWalFrames(Pager v, PgHdr w, UInt32 x, int y, int z);
    private static int pagerOpenWalIfPresent(Pager z);
    private static int pagerBeginReadTransaction(Pager z);
    private static bool assert_pager_state(Pager p);
    private static string print_pager_state(Pager p);
    private static bool subjRequiresPage(PgHdr pPg);
    private static bool pageInJournal(PgHdr pPg);
    private static int read32bits(sqlite3_file fd, int offset, Int32& pRes);
    private static int read32bits(sqlite3_file fd, long offset, UInt32& pRes);
    private static int read32bits(sqlite3_file fd, int offset, UInt32& pRes);
    private static void put32bits(string ac, int offset, int val);
    private static void put32bits(Byte[] ac, int offset, int val);
    private static void put32bits(Byte[] ac, UInt32 val);
    private static void put32bits(Byte[] ac, int offset, UInt32 val);
    private static int write32bits(sqlite3_file fd, long offset, UInt32 val);
    private static int pagerUnlockDb(Pager pPager, int eLock);
    private static int pagerLockDb(Pager pPager, int eLock);
    private static int pager_datahash(int X, Byte[] Y);
    private static int pager_pagehash(PgHdr X);
    private static void pager_set_pagehash(PgHdr X);
    private static int readMasterJournal(sqlite3_file pJrnl, Byte[] zMaster, UInt32 nMaster);
    private static long journalHdrOffset(Pager pPager);
    private static void seekJournalHdr(Pager pPager);
    private static int zeroJournalHdr(Pager pPager, int doTruncate);
    private static int writeJournalHdr(Pager pPager);
    private static int readJournalHdr(Pager pPager, int isHot, long journalSize, UInt32& pNRec, UInt32& pDbSize);
    private static int writeMasterJournal(Pager pPager, string zMaster);
    private static PgHdr pager_lookup(Pager pPager, UInt32 pgno);
    private static void pager_reset(Pager pPager);
    private static void releaseAllSavepoints(Pager pPager);
    private static int addToSavepointBitvecs(Pager pPager, UInt32 pgno);
    private static void pager_unlock(Pager pPager);
    private static int pager_error(Pager pPager, int rc);
    private static int pager_end_transaction(Pager pPager, int hasMaster);
    private static void pagerUnlockAndRollback(Pager pPager);
    private static UInt32 pager_cksum(Pager pPager, Byte[] aData);
    private static void pagerReportSize(Pager X);
    private static int pager_playback_one_page(Pager pPager, Int64& pOffset, Bitvec pDone, int isMainJrnl, int isSavepnt);
    private static int pager_delmaster(Pager pPager, string zMaster);
    private static int pager_truncate(Pager pPager, UInt32 nPage);
    private static void setSectorSize(Pager pPager);
    private static int pager_playback(Pager pPager, int isHot);
    private static int readDbPage(PgHdr pPg);
    private static void pager_write_changecounter(PgHdr pPg);
    private static int pagerPagecount(Pager pPager, UInt32& pnPage);
    private static int pagerPlaybackSavepoint(Pager pPager, PagerSavepoint pSavepoint);
    private static void sqlite3PagerSetCachesize(Pager pPager, int mxPage);
    private static void sqlite3PagerSetSafetyLevel(Pager pPager, int level, int bFullFsync, int bCkptFullFsync);
    private static int pagerOpentemp(Pager pPager, sqlite3_file& pFile, int vfsFlags);
    private static void sqlite3PagerSetBusyhandler(Pager pPager, dxBusyHandler xBusyHandler, object pBusyHandlerArg);
    private static int sqlite3PagerSetPagesize(Pager pPager, UInt32& pPageSize, int nReserve);
    private static Byte[] sqlite3PagerTempSpace(Pager pPager);
    private static UInt32 sqlite3PagerMaxPageCount(Pager pPager, int mxPage);
    private static int sqlite3PagerReadFileheader(Pager pPager, int N, Byte[] pDest);
    private static void sqlite3PagerPagecount(Pager pPager, UInt32& pnPage);
    private static int pager_wait_on_lock(Pager pPager, int locktype);
    private static void assertTruncateConstraintCb(PgHdr pPg);
    private static void assertTruncateConstraint(Pager pPager);
    private static void sqlite3PagerTruncateImage(Pager pPager, UInt32 nPage);
    private static int pagerSyncHotJournal(Pager pPager);
    private static int sqlite3PagerClose(Pager pPager);
    private static UInt32 sqlite3PagerPagenumber(PgHdr pPg);
    private static void sqlite3PagerRef(PgHdr pPg);
    private static int syncJournal(Pager pPager, int newHdr);
    private static int pager_write_pagelist(Pager pPager, PgHdr pList);
    private static int openSubJournal(Pager pPager);
    private static int subjournalPage(PgHdr pPg);
    private static int pagerStress(object p, PgHdr pPg);
    private static int sqlite3PagerOpen(sqlite3_vfs pVfs, Pager& ppPager, string zFilename, int nExtra, int flags, int vfsFlags, dxReiniter xReinit);
    private static int hasHotJournal(Pager pPager, Int32& pExists);
    private static int sqlite3PagerSharedLock(Pager pPager);
    private static void pagerUnlockIfUnused(Pager pPager);
    private static int sqlite3PagerGet(Pager pPager, UInt32 pgno, PgHdr& ppPage);
    private static int sqlite3PagerAcquire(Pager pPager, UInt32 pgno, PgHdr& ppPage, byte noContent);
    private static PgHdr sqlite3PagerLookup(Pager pPager, UInt32 pgno);
    private static void sqlite3PagerUnref(PgHdr pPg);
    private static int pager_open_journal(Pager pPager);
    private static int sqlite3PagerBegin(Pager pPager, bool exFlag, int subjInMemory);
    private static int pager_write(PgHdr pPg);
    private static int sqlite3PagerWrite(PgHdr pDbPage);
    private static bool sqlite3PagerIswriteable(PgHdr pPg);
    private static void sqlite3PagerDontWrite(PgHdr pPg);
    private static int pager_incr_changecounter(Pager pPager, bool isDirectMode);
    private static int sqlite3PagerSync(Pager pPager);
    private static int sqlite3PagerExclusiveLock(Pager pPager);
    private static int sqlite3PagerCommitPhaseOne(Pager pPager, string zMaster, bool noSync);
    private static int sqlite3PagerCommitPhaseTwo(Pager pPager);
    private static int sqlite3PagerRollback(Pager pPager);
    private static bool sqlite3PagerIsreadonly(Pager pPager);
    private static int sqlite3PagerRefcount(Pager pPager);
    private static int sqlite3PagerMemUsed(Pager pPager);
    private static int sqlite3PagerPageRefcount(PgHdr pPage);
    private static bool sqlite3PagerIsMemdb(Pager pPager);
    private static int sqlite3PagerOpenSavepoint(Pager pPager, int nSavepoint);
    private static int sqlite3PagerSavepoint(Pager pPager, int op, int iSavepoint);
    private static string sqlite3PagerFilename(Pager pPager);
    private static sqlite3_vfs sqlite3PagerVfs(Pager pPager);
    private static sqlite3_file sqlite3PagerFile(Pager pPager);
    private static string sqlite3PagerJournalname(Pager pPager);
    private static bool sqlite3PagerNosync(Pager pPager);
    private static int sqlite3PagerMovepage(Pager pPager, PgHdr pPg, UInt32 pgno, int isCommit);
    private static Byte[] sqlite3PagerGetData(PgHdr pPg);
    private static MemPage sqlite3PagerGetExtra(PgHdr pPg);
    private static bool sqlite3PagerLockingMode(Pager pPager, int eMode);
    private static int sqlite3PagerSetJournalMode(Pager pPager, int eMode);
    private static int sqlite3PagerGetJournalMode(Pager pPager);
    private static int sqlite3PagerOkToChangeJournalMode(Pager pPager);
    private static long sqlite3PagerJournalSizeLimit(Pager pPager, long iLimit);
    private static sqlite3_backup sqlite3PagerBackupPtr(Pager pPager);
    private static UInt32 PAGER_MJ_PGNO(Pager x);
    private static void yytestcase(T X);
    private static void spanSet(ExprSpan pOut, Token pStart, Token pEnd);
    private static void spanExpr(ExprSpan pOut, Parse pParse, int op, Token pValue);
    private static void spanBinaryExpr(ExprSpan pOut, Parse pParse, int op, ExprSpan pLeft, ExprSpan pRight);
    private static void spanUnaryPostfix(ExprSpan pOut, Parse pParse, int op, ExprSpan pOperand, Token pPostOp);
    private static void binaryToUnaryIfNull(Parse pParse, Expr pY, Expr pA, int op);
    private static void spanUnaryPrefix(ExprSpan pOut, Parse pParse, int op, ExprSpan pOperand, Token pPreOp);
    private static yyParser sqlite3ParserAlloc();
    private static void yy_destructor(yyParser yypParser, int yymajor, YYMINORTYPE yypminor);
    private static int yy_pop_parser_stack(yyParser pParser);
    private static void sqlite3ParserFree(yyParser p, dxDel freeProc);
    private static int yy_find_shift_action(yyParser pParser, int iLookAhead);
    private static int yy_find_reduce_action(int stateno, int iLookAhead);
    private static void yyStackOverflow(yyParser yypParser, YYMINORTYPE yypMinor);
    private static void yy_shift(yyParser yypParser, int yyNewState, int yyMajor, YYMINORTYPE yypMinor);
    private static void yy_reduce(yyParser yypParser, int yyruleno);
    private static void yy_parse_failed(yyParser yypParser);
    private static void yy_syntax_error(yyParser yypParser, int yymajor, YYMINORTYPE yyminor);
    private static void yy_accept(yyParser yypParser);
    private static void sqlite3Parser(yyParser yyp, int yymajor, Token yyminor, Parse pParse);
    private static PgHdr PGHDR1_TO_PAGE(PgHdr1 p);
    private static PgHdr1 PAGE_TO_PGHDR1(PCache1 c, PgHdr p);
    private static void pcache1EnterMutex(PGroup X);
    private static void pcache1LeaveMutex(PGroup X);
    private static void sqlite3PCacheBufferSetup(object pBuf, int sz, int n);
    private static PgHdr pcache1Alloc(int nByte);
    private static void pcache1Free(PgHdr& p);
    private static PgHdr1 pcache1AllocPage(PCache1 pCache);
    private static void pcache1FreePage(PgHdr1& p);
    private static PgHdr sqlite3PageMalloc(int sz);
    private static void sqlite3PageFree(Byte[]& p);
    private static void sqlite3PageFree(PgHdr& p);
    private static bool pcache1UnderMemoryPressure(PCache1 pCache);
    private static int pcache1ResizeHash(PCache1 p);
    private static void pcache1PinPage(PgHdr1 pPage);
    private static void pcache1RemoveFromHash(PgHdr1 pPage);
    private static void pcache1EnforceMaxPage(PGroup pGroup);
    private static void pcache1TruncateUnsafe(PCache1 pCache, UInt32 iLimit);
    private static int pcache1Init(T NotUsed);
    private static void pcache1Shutdown(T NotUsed);
    private static PCache1 pcache1Create(int szPage, bool bPurgeable);
    private static void pcache1Cachesize(PCache1 p, int nMax);
    private static int pcache1Pagecount(PCache1 p);
    private static PgHdr pcache1Fetch(PCache1 p, UInt32 iKey, int createFlag);
    private static void pcache1Unpin(PCache1 p, PgHdr pPg, bool reuseUnlikely);
    private static void pcache1Rekey(PCache1 p, PgHdr pPg, UInt32 iOld, UInt32 iNew);
    private static void pcache1Truncate(PCache1 p, UInt32 iLimit);
    private static void pcache1Destroy(PCache1& p);
    private static void sqlite3PCacheSetDefault();
    private static void pcacheRemoveFromDirtyList(PgHdr pPage);
    private static void pcacheAddToDirtyList(PgHdr pPage);
    private static void pcacheUnpin(PgHdr p);
    private static int sqlite3PcacheInitialize();
    private static void sqlite3PcacheShutdown();
    private static int sqlite3PcacheSize();
    private static void sqlite3PcacheOpen(int szPage, int szExtra, bool bPurgeable, dxStress xStress, object pStress, PCache p);
    private static void sqlite3PcacheSetPageSize(PCache pCache, int szPage);
    private static int sqlite3PcacheFetch(PCache pCache, UInt32 pgno, int createFlag, PgHdr& ppPage);
    private static void sqlite3PcacheRelease(PgHdr p);
    private static void sqlite3PcacheRef(PgHdr p);
    private static void sqlite3PcacheDrop(PgHdr p);
    private static void sqlite3PcacheMakeDirty(PgHdr p);
    private static void sqlite3PcacheMakeClean(PgHdr p);
    private static void sqlite3PcacheCleanAll(PCache pCache);
    private static void sqlite3PcacheClearSyncFlags(PCache pCache);
    private static void sqlite3PcacheMove(PgHdr p, UInt32 newPgno);
    private static void sqlite3PcacheTruncate(PCache pCache, UInt32 pgno);
    private static void sqlite3PcacheClose(PCache pCache);
    private static void sqlite3PcacheClear(PCache pCache);
    private static PgHdr pcacheMergeDirtyList(PgHdr pA, PgHdr pB);
    private static PgHdr pcacheSortDirtyList(PgHdr pIn);
    private static PgHdr sqlite3PcacheDirtyList(PCache pCache);
    private static int sqlite3PcacheRefCount(PCache pCache);
    private static int sqlite3PcachePageRefcount(PgHdr p);
    private static int sqlite3PcachePagecount(PCache pCache);
    private static void sqlite3PcacheSetCachesize(PCache pCache, int mxPage);
    private static void sqlite3PcacheIterateDirty(PCache pCache, dxIter xIter);
    private static byte getSafetyLevel(string z);
    private static byte sqlite3GetBoolean(string z);
    private static int getLockingMode(string z);
    private static byte getAutoVacuum(string z);
    private static int getTempStore(string z);
    private static int invalidateTempStorage(Parse pParse);
    private static int changeTempStorage(Parse pParse, string zStorageType);
    private static void returnSingleInt(Parse pParse, string zLabel, long value);
    private static int flagPragma(Parse pParse, string zLeft, string zRight);
    private static string actionName(int action);
    private static string sqlite3JournalModename(int eMode);
    private static void sqlite3Pragma(Parse pParse, Token pId1, Token pId2, int null_4, int minusFlag);
    private static void sqlite3Pragma(Parse pParse, Token pId1, Token pId2, Token pValue, int minusFlag);
    private static void corruptSchema(InitData pData, string zObj, string zExtra);
    private static int sqlite3InitCallback(object pInit, long argc, object p2, object NotUsed);
    private static int sqlite3InitOne(sqlite3 db, int iDb, String& pzErrMsg);
    private static int sqlite3Init(sqlite3 db, String& pzErrMsg);
    private static int sqlite3ReadSchema(Parse pParse);
    private static void schemaIsValid(Parse pParse);
    private static int sqlite3SchemaToIndex(sqlite3 db, Schema pSchema);
    private static int sqlite3Prepare(sqlite3 db, string zSql, int nBytes, int saveSqlFlag, Vdbe pReprepare, Vdbe& ppStmt, String& pzTail);
    private static int sqlite3LockAndPrepare(sqlite3 db, string zSql, int nBytes, int saveSqlFlag, Vdbe pOld, Vdbe& ppStmt, int dummy);
    private static int sqlite3LockAndPrepare(sqlite3 db, string zSql, int nBytes, int saveSqlFlag, Vdbe pOld, Vdbe& ppStmt, String& pzTail);
    private static int sqlite3Reprepare(Vdbe p);
    public static int sqlite3_prepare(sqlite3 db, string zSql, int nBytes, Vdbe& ppStmt, int dummy);
    public static int sqlite3_prepare(sqlite3 db, StringBuilder zSql, int nBytes, Vdbe& ppStmt, int dummy);
    public static int sqlite3_prepare(sqlite3 db, string zSql, int nBytes, Vdbe& ppStmt, String& pzTail);
    public static int sqlite3_prepare_v2(sqlite3 db, string zSql, int nBytes, Vdbe& ppStmt, int dummy);
    public static int sqlite3_prepare_v2(sqlite3 db, string zSql, int nBytes, Vdbe& ppStmt, String& pzTail);
    private static char et_getdigit(Double& val, Int32& cnt);
    private static void appendSpace(StrAccum pAccum, int N);
    private static void sqlite3VXPrintf(StrAccum pAccum, int useExtended, string fmt, Object[] ap);
    private static void sqlite3StrAccumAppend(StrAccum p, string z, int N);
    private static string sqlite3StrAccumFinish(StrAccum p);
    private static void sqlite3StrAccumReset(StrAccum p);
    private static void sqlite3StrAccumInit(StrAccum p, StringBuilder zBase, int n, int mx);
    private static string sqlite3VMPrintf(sqlite3 db, string zFormat, Object[] ap);
    private static string sqlite3MPrintf(sqlite3 db, string zFormat, Object[] ap);
    private static string sqlite3MAppendf(sqlite3 db, string zStr, string zFormat, Object[] ap);
    private static string sqlite3_vmprintf(string zFormat, Object[] ap);
    public static string sqlite3_mprintf(string zFormat, Object[] ap);
    public static void sqlite3_vsnprintf(int n, StringBuilder zBuf, string zFormat, Object[] ap);
    public static void sqlite3_snprintf(int n, StringBuilder zBuf, string zFormat, Object[] ap);
    private static void renderLogMsg(int iErrCode, string zFormat, Object[] ap);
    private static void sqlite3_log(int iErrCode, string zFormat, Object[] ap);
    private static void sqlite3DebugPrintf(string zFormat, Object[] ap);
    private static void sqlite3XPrintf(StrAccum p, string zFormat, Object[] ap);
    private static byte randomu8();
    private static void sqlite3_randomness(int N, Int64& pBuf);
    private static void sqlite3_randomness(Byte[] pBuf, int Offset, int N);
    private static void sqlite3PrngSaveState();
    private static void sqlite3PrngRestoreState();
    private static void sqlite3PrngResetState();
    private static void resolveAlias(Parse pParse, ExprList pEList, int iCol, Expr pExpr, string zType);
    private static int lookupName(Parse pParse, string zDb, string zTab, string zCol, NameContext pNC, Expr pExpr);
    private static Expr sqlite3CreateColumnExpr(sqlite3 db, SrcList pSrc, int iSrc, int iCol);
    private static int resolveExprStep(Walker pWalker, Expr& pExpr);
    private static int resolveAsName(Parse pParse, ExprList pEList, Expr pE);
    private static int resolveOrderByTermToExprList(Parse pParse, Select pSelect, Expr pE);
    private static void resolveOutOfRangeError(Parse pParse, string zType, int i, int mx);
    private static int resolveCompoundOrderBy(Parse pParse, Select pSelect);
    private static int sqlite3ResolveOrderGroupBy(Parse pParse, Select pSelect, ExprList pOrderBy, string zType);
    private static int resolveOrderGroupBy(NameContext pNC, Select pSelect, ExprList pOrderBy, string zType);
    private static int resolveSelectStep(Walker pWalker, Select p);
    private static int sqlite3ResolveExprNames(NameContext pNC, Expr& pExpr);
    private static void sqlite3ResolveSelectNames(Parse pParse, Select p, NameContext pOuterNC);
    private static RowSet sqlite3RowSetInit(sqlite3 db, object pSpace, UInt32 N);
    private static void sqlite3RowSetClear(RowSet p);
    private static void sqlite3RowSetInsert(RowSet p, long rowid);
    private static RowSetEntry rowSetMerge(RowSetEntry pA, RowSetEntry pB);
    private static void rowSetSort(RowSet p);
    private static void rowSetTreeToList(RowSetEntry pIn, RowSetEntry& ppFirst, RowSetEntry& ppLast);
    private static RowSetEntry rowSetNDeepTree(RowSetEntry& ppList, int iDepth);
    private static RowSetEntry rowSetListToTree(RowSetEntry pList);
    private static void rowSetToList(RowSet p);
    private static int sqlite3RowSetNext(RowSet p, Int64& pRowid);
    private static int sqlite3RowSetTest(RowSet pRowSet, byte iBatch, long iRowid);
    private static void clearSelect(sqlite3 db, Select p);
    private static void sqlite3SelectDestInit(SelectDest pDest, int eDest, int iParm);
    private static Select sqlite3SelectNew(Parse pParse, int null_2, SrcList pSrc, int null_4, int null_5, int null_6, int null_7, int isDistinct, int null_9, int null_10);
    private static Select sqlite3SelectNew(Parse pParse, ExprList pEList, SrcList pSrc, Expr pWhere, ExprList pGroupBy, Expr pHaving, ExprList pOrderBy, int isDistinct, Expr pLimit, Expr pOffset);
    private static void sqlite3SelectDelete(sqlite3 db, Select& p);
    private static int sqlite3JoinType(Parse pParse, Token pA, int null_3, int null_4);
    private static int sqlite3JoinType(Parse pParse, Token pA, Token pB, int null_4);
    private static int sqlite3JoinType(Parse pParse, Token pA, Token pB, Token pC);
    private static int columnIndex(Table pTab, string zCol);
    private static int tableAndColumnIndex(SrcList pSrc, int N, string zCol, Int32& piTab, Int32& piCol);
    private static void addWhereTerm(Parse pParse, SrcList pSrc, int iLeft, int iColLeft, int iRight, int iColRight, int isOuterJoin, Expr& ppWhere);
    private static void setJoinExpr(Expr p, int iTable);
    private static int sqliteProcessJoin(Parse pParse, Select p);
    private static void pushOntoSorter(Parse pParse, ExprList pOrderBy, Select pSelect, int regData);
    private static void codeOffset(Vdbe v, Select p, int iContinue);
    private static void codeDistinct(Parse pParse, int iTab, int addrRepeat, int N, int iMem);
    private static bool checkForMultiColumnSelectError(Parse pParse, SelectDest pDest, int nExpr);
    private static void selectInnerLoop(Parse pParse, Select p, ExprList pEList, int srcTab, int nColumn, ExprList pOrderBy, int distinct, SelectDest pDest, int iContinue, int iBreak);
    private static KeyInfo keyInfoFromExprList(Parse pParse, ExprList pList);
    private static string selectOpName(int id);
    private static void explainTempTable(Parse pParse, string zUsage);
    private static void explainSetInteger(Int32& a, int b);
    private static void explainSetInteger(Byte& a, int b);
    private static void explainComposite(Parse pParse, int op, int iSub1, int iSub2, bool bUseTmp);
    private static void generateSortTail(Parse pParse, Select p, Vdbe v, int nColumn, SelectDest pDest);
    private static string columnType(NameContext pNC, Expr pExpr, String& pzOriginDb, String& pzOriginTab, String& pzOriginCol);
    private static void generateColumnTypes(Parse pParse, SrcList pTabList, ExprList pEList);
    private static void generateColumnNames(Parse pParse, SrcList pTabList, ExprList pEList);
    private static int selectColumnsFromExprList(Parse pParse, ExprList pEList, Int32& pnCol, Column[]& paCol);
    private static void selectAddColumnTypeAndCollation(Parse pParse, int nCol, Column[] aCol, Select pSelect);
    private static Table sqlite3ResultSetOfSelect(Parse pParse, Select pSelect);
    private static Vdbe sqlite3GetVdbe(Parse pParse);
    private static void computeLimitRegisters(Parse pParse, Select p, int iBreak);
    private static CollSeq multiSelectCollSeq(Parse pParse, Select p, int iCol);
    private static int multiSelect(Parse pParse, Select p, SelectDest pDest);
    private static int generateOutputSubroutine(Parse pParse, Select p, SelectDest pIn, SelectDest pDest, int regReturn, int regPrev, KeyInfo pKeyInfo, int p4type, int iBreak);
    private static int multiSelectOrderBy(Parse pParse, Select p, SelectDest pDest);
    private static Expr substExpr(sqlite3 db, Expr pExpr, int iTable, ExprList pEList);
    private static void substExprList(sqlite3 db, ExprList pList, int iTable, ExprList pEList);
    private static void substSelect(sqlite3 db, Select p, int iTable, ExprList pEList);
    private static int flattenSubquery(Parse pParse, Select p, int iFrom, bool isAgg, bool subqueryIsAgg);
    private static byte minMaxQuery(Select p);
    private static Table isSimpleCount(Select p, AggInfo pAggInfo);
    private static int sqlite3IndexedByLookup(Parse pParse, SrcList_item pFrom);
    private static int selectExpander(Walker pWalker, Select p);
    private static int exprWalkNoop(Walker NotUsed, Expr& NotUsed2);
    private static void sqlite3SelectExpand(Parse pParse, Select pSelect);
    private static int selectAddSubqueryTypeInfo(Walker pWalker, Select p);
    private static void sqlite3SelectAddTypeInfo(Parse pParse, Select pSelect);
    private static void sqlite3SelectPrep(Parse pParse, Select p, NameContext pOuterNC);
    private static void resetAccumulator(Parse pParse, AggInfo pAggInfo);
    private static void finalizeAggFunctions(Parse pParse, AggInfo pAggInfo);
    private static void updateAccumulator(Parse pParse, AggInfo pAggInfo);
    private static void explainSimpleCount(Parse pParse, Table pTab, Index pIdx);
    private static int sqlite3Select(Parse pParse, Select p, SelectDest& pDest);
    private void sqlite3PrintExpr(Expr p);
    private void sqlite3PrintExprList(ExprList pList);
    private void sqlite3PrintSelect(Select p, int indent);
    private static void testcase(T X);
    private static bool ALWAYS(bool X);
    private static byte ALWAYS(byte X);
    private static int ALWAYS(int X);
    private static bool ALWAYS(T X);
    private static bool NEVER(bool X);
    private static byte NEVER(byte X);
    private static int NEVER(int X);
    private static bool NEVER(T X);
    private static bool IS_BIG_INT(long X);
    private static bool likely(bool X);
    private static bool unlikely(bool X);
    private static int ROUND8(int x);
    private static int ROUNDDOWN8(int x);
    private static string SCHEMA_TABLE(int x);
    private static int ArraySize(T[] x);
    private static void UNUSED_PARAMETER(T x);
    private static void UNUSED_PARAMETER2(T1 x, T2 y);
    private static bool DbHasProperty(sqlite3 D, int I, ushort P);
    private static void DbSetProperty(sqlite3 D, int I, ushort P);
    private static void DbClearProperty(sqlite3 D, int I, ushort P);
    private static byte ENC(sqlite3 db);
    private static FuncDef FUNCTION(string zName, short nArg, int iArg, byte bNC, dxFunc xFunc);
    private static FuncDef LIKEFUNC(string zName, short nArg, object arg, byte flags);
    private static FuncDef AGGREGATE(string zName, short nArg, int arg, byte nc, dxStep xStep, dxFinal xFinal);
    private static bool IsVirtual(Table X);
    private static bool IsHiddenColumn(Column X);
    private static void ExprSetIrreducible(Expr X);
    private static bool ExprHasProperty(Expr E, int P);
    private static bool ExprHasAnyProperty(Expr E, int P);
    private static void ExprSetProperty(Expr E, int P);
    private static void ExprClearProperty(Expr E, int P);
    private static bool IN_DECLARE_VTAB(Parse pParse);
    private static void SQLITE_SKIP_UTF8(string zIn, Int32& iz);
    private static void SQLITE_SKIP_UTF8(Byte[] zIn, Int32& iz);
    private static int SQLITE_CORRUPT_BKPT();
    private static int SQLITE_MISUSE_BKPT();
    private static int SQLITE_CANTOPEN_BKPT();
    private static bool sqlite3Isspace(byte x);
    private static bool sqlite3Isspace(char x);
    private static bool sqlite3Isalnum(byte x);
    private static bool sqlite3Isalnum(char x);
    private static bool sqlite3Isdigit(byte x);
    private static bool sqlite3Isdigit(char x);
    private static bool sqlite3Isxdigit(byte x);
    private static bool sqlite3Isxdigit(char x);
    private static Parse sqlite3ParseToplevel(Parse p);
    private static void sqlite3AuthRead(Parse a, Expr b, Schema c, SrcList d);
    private static int sqlite3AuthCheck(Parse a, int b, string c, Byte[] d, Byte[] e);
    private static void sqlite3AuthContextPush(Parse a, AuthContext b, string c);
    private static Parse sqlite3AuthContextPop(Parse a);
    private static void sqlite3FileSuffix3(string X, string Y);
    private static void sqlite3TableLock(Parse p, int p1, int p2, byte p3, Byte[] p4);
    private static void sqlite3TableLock(Parse p, int p1, int p2, byte p3, string p4);
    private static bool sqlite3VtabInSync(sqlite3 db);
    private static int sqlite3JournalSize(sqlite3_vfs pVfs);
    private static void sqlite3ConnectionBlocked(sqlite3 x, sqlite3 y);
    private static void sqlite3ConnectionUnlocked(sqlite3 x);
    private static void sqlite3ConnectionClosed(sqlite3 x);
    private static void IOTRACE(string F, Object[] ap);
    private static void sqlite3VdbeIOTraceSql(Vdbe X);
    private static void sqlite3MemdebugSetType(T X, int Y);
    private static bool sqlite3MemdebugHasType(T X, int Y);
    private static bool sqlite3MemdebugNoType(T X, int Y);
    private static void wsdStatInit();
    private static int sqlite3StatusValue(int op);
    private static void sqlite3StatusAdd(int op, int N);
    private static void sqlite3StatusSet(int op, int X);
    public static int sqlite3_status(int op, Int32& pCurrent, Int32& pHighwater, int resetFlag);
    public static int sqlite3_db_status(sqlite3 db, int op, Int32& pCurrent, Int32& pHighwater, int resetFlag);
    private static int sqlite3GetToken(string z, int iOffset, Int32& tokenType);
    private static int sqlite3RunParser(Parse pParse, string zSql, String& pzErrMsg);
    private static void sqlite3DeleteTriggerStep(sqlite3 db, TriggerStep& pTriggerStep);
    private static Trigger sqlite3TriggerList(Parse pParse, Table pTab);
    private static void sqlite3BeginTrigger(Parse pParse, Token pName1, Token pName2, int tr_tm, int op, IdList pColumns, SrcList pTableName, Expr pWhen, int isTemp, int noErr);
    private static void sqlite3FinishTrigger(Parse pParse, TriggerStep pStepList, Token pAll);
    private static TriggerStep sqlite3TriggerSelectStep(sqlite3 db, Select pSelect);
    private static TriggerStep triggerStepAllocate(sqlite3 db, byte op, Token pName);
    private static TriggerStep sqlite3TriggerInsertStep(sqlite3 db, Token pTableName, IdList pColumn, int null_4, int null_5, byte orconf);
    private static TriggerStep sqlite3TriggerInsertStep(sqlite3 db, Token pTableName, IdList pColumn, ExprList pEList, int null_5, byte orconf);
    private static TriggerStep sqlite3TriggerInsertStep(sqlite3 db, Token pTableName, IdList pColumn, int null_4, Select pSelect, byte orconf);
    private static TriggerStep sqlite3TriggerInsertStep(sqlite3 db, Token pTableName, IdList pColumn, ExprList pEList, Select pSelect, byte orconf);
    private static TriggerStep sqlite3TriggerUpdateStep(sqlite3 db, Token pTableName, ExprList pEList, Expr pWhere, byte orconf);
    private static TriggerStep sqlite3TriggerDeleteStep(sqlite3 db, Token pTableName, Expr pWhere);
    private static void sqlite3DeleteTrigger(sqlite3 db, Trigger& pTrigger);
    private static void sqlite3DropTrigger(Parse pParse, SrcList pName, int noErr);
    private static Table tableOfTrigger(Trigger pTrigger);
    private static void sqlite3DropTriggerPtr(Parse pParse, Trigger pTrigger);
    private static void sqlite3UnlinkAndDeleteTrigger(sqlite3 db, int iDb, string zName);
    private static int checkColumnOverlap(IdList pIdList, ExprList pEList);
    private static Trigger sqlite3TriggersExist(Parse pParse, Table pTab, int op, ExprList pChanges, Int32& pMask);
    private static SrcList targetSrcList(Parse pParse, TriggerStep pStep);
    private static int codeTriggerProgram(Parse pParse, TriggerStep pStepList, int orconf);
    private static string onErrorText(int onError);
    private static void transferParseError(Parse pTo, Parse pFrom);
    private static TriggerPrg codeRowTrigger(Parse pParse, Trigger pTrigger, Table pTab, int orconf);
    private static TriggerPrg getRowTrigger(Parse pParse, Trigger pTrigger, Table pTab, int orconf);
    private static void sqlite3CodeRowTriggerDirect(Parse pParse, Trigger p, Table pTab, int reg, int orconf, int ignoreJump);
    private static void sqlite3CodeRowTrigger(Parse pParse, Trigger pTrigger, int op, ExprList pChanges, int tr_tm, Table pTab, int reg, int orconf, int ignoreJump);
    private static UInt32 sqlite3TriggerColmask(Parse pParse, Trigger pTrigger, ExprList pChanges, int isNew, int tr_tm, Table pTab, int orconf);
    private static void sqlite3ColumnDefault(Vdbe v, Table pTab, int i, int iReg);
    private static void sqlite3Update(Parse pParse, SrcList pTabList, ExprList pChanges, Expr pWhere, int onError);
    private static void updateVirtualTable(Parse pParse, SrcList pSrc, Table pTab, ExprList pChanges, Expr pRowid, Int32[] aXRef, Expr pWhere, int onError);
    private static UInt32 sqlite3Utf8Read(string zIn, String& pzNext);
    private static int sqlite3Utf8CharLen(string zIn, int nByte);
    private static bool sqlite3IsNaN(double x);
    private static int sqlite3Strlen30(int z);
    private static int sqlite3Strlen30(StringBuilder z);
    private static int sqlite3Strlen30(string z);
    private static void sqlite3Error(sqlite3 db, int err_code, int noString);
    private static void sqlite3Error(sqlite3 db, int err_code, string zFormat, Object[] ap);
    private static void sqlite3ErrorMsg(Parse pParse, string zFormat, Object[] ap);
    private static int sqlite3Dequote(String& z);
    private static int sqlite3StrNICmp(string zLeft, int offsetLeft, string zRight, int N);
    private static int sqlite3StrNICmp(string zLeft, string zRight, int N);
    private static bool sqlite3AtoF(string z, Double& pResult, int length, byte enc);
    private static int compare2pow63(string zNum, int incr);
    private static int sqlite3Atoi64(string zNum, Int64& pNum, int length, byte enc);
    private static bool sqlite3GetInt32(string zNum, Int32& pValue);
    private static bool sqlite3GetInt32(string zNum, int iZnum, Int32& pValue);
    private static int sqlite3Atoi(string z);
    private static int getVarint(Byte[] p, UInt32& v);
    private static int getVarint(Byte[] p, int offset, UInt32& v);
    private static int getVarint(Byte[] p, int offset, Int32& v);
    private static int getVarint(Byte[] p, int offset, Int64& v);
    private static int getVarint(Byte[] p, int offset, UInt64& v);
    private static int getVarint32(Byte[] p, UInt32& v);
    private static int getVarint32(string s, UInt32 offset, Int32& v);
    private static int getVarint32(string s, UInt32 offset, UInt32& v);
    private static int getVarint32(Byte[] p, UInt32 offset, UInt32& v);
    private static int getVarint32(Byte[] p, int offset, UInt32& v);
    private static int getVarint32(Byte[] p, int offset, Int32& v);
    private static int putVarint(Byte[] p, int offset, int v);
    private static int putVarint(Byte[] p, int offset, ulong v);
    private static int sqlite3PutVarint(Byte[] p, int offset, int v);
    private static int sqlite3PutVarint(Byte[] p, int offset, ulong v);
    private static int putVarint32(Byte[] p, int offset, int v);
    private static int putVarint32(Byte[] p, int v);
    private static byte sqlite3GetVarint(Byte[] p, int offset, UInt64& v);
    private static byte sqlite3GetVarint32(Byte[] p, Int32& v);
    private static byte sqlite3GetVarint32(Byte[] p, int offset, Int32& v);
    private static byte sqlite3GetVarint32(Byte[] p, UInt32& v);
    private static byte sqlite3GetVarint32(Byte[] p, int offset, UInt32& v);
    private static int sqlite3VarintLen(ulong v);
    private static UInt32 sqlite3Get4byte(Byte[] p, int p_offset, int offset);
    private static UInt32 sqlite3Get4byte(Byte[] p, int offset);
    private static UInt32 sqlite3Get4byte(Byte[] p, UInt32 offset);
    private static UInt32 sqlite3Get4byte(Byte[] p);
    private static void sqlite3Put4byte(Byte[] p, int v);
    private static void sqlite3Put4byte(Byte[] p, int offset, int v);
    private static void sqlite3Put4byte(Byte[] p, UInt32 offset, UInt32 v);
    private static void sqlite3Put4byte(Byte[] p, int offset, ulong v);
    private static void sqlite3Put4byte(Byte[] p, ulong v);
    private static int sqlite3HexToInt(int h);
    private static Byte[] sqlite3HexToBlob(sqlite3 db, string z, int n);
    private static void logBadConnection(string zType);
    private static bool sqlite3SafetyCheckOk(sqlite3 db);
    private static bool sqlite3SafetyCheckSickOrOk(sqlite3 db);
    private static int sqlite3AddInt64(Int64& pA, long iB);
    private static int sqlite3SubInt64(Int64& pA, long iB);
    private static int sqlite3MulInt64(Int64& pA, long iB);
    private static int sqlite3AbsInt32(int x);
    private static int vacuumFinalize(sqlite3 db, Vdbe pStmt, string pzErrMsg);
    private static int execSql(sqlite3 db, string pzErrMsg, string zSql);
    private static int execExecSql(sqlite3 db, string pzErrMsg, string zSql);
    private static void sqlite3Vacuum(Parse pParse);
    private static int sqlite3RunVacuum(String& pzErrMsg, sqlite3 db);
    private static bool vdbeSafety(Vdbe p);
    private static bool vdbeSafetyNotNull(Vdbe p);
    public static int sqlite3_finalize(Vdbe pStmt);
    public static int sqlite3_reset(Vdbe pStmt);
    public static int sqlite3_clear_bindings(Vdbe pStmt);
    public static Byte[] sqlite3_value_blob(Mem pVal);
    public static int sqlite3_value_bytes(Mem pVal);
    public static int sqlite3_value_bytes16(Mem pVal);
    public static double sqlite3_value_double(Mem pVal);
    public static int sqlite3_value_int(Mem pVal);
    public static long sqlite3_value_int64(Mem pVal);
    public static string sqlite3_value_text(Mem pVal);
    public static int sqlite3_value_type(Mem pval);
    private static void setResultStrOrError(sqlite3_context pCtx, string z, int o, int n, byte enc, dxDel xDel);
    private static void setResultStrOrError(sqlite3_context pCtx, string z, int n, byte enc, dxDel xDel);
    public static void sqlite3_result_blob(sqlite3_context pCtx, string z, int n, dxDel xDel);
    public static void sqlite3_result_double(sqlite3_context pCtx, double rVal);
    public static void sqlite3_result_error(sqlite3_context pCtx, string z, int n);
    public static void sqlite3_result_int(sqlite3_context pCtx, int iVal);
    public static void sqlite3_result_int64(sqlite3_context pCtx, long iVal);
    public static void sqlite3_result_null(sqlite3_context pCtx);
    public static void sqlite3_result_text(sqlite3_context pCtx, string z, int o, int n, dxDel xDel);
    public static void sqlite3_result_text(sqlite3_context pCtx, StringBuilder z, int n, dxDel xDel);
    public static void sqlite3_result_text(sqlite3_context pCtx, string z, int n, dxDel xDel);
    public static void sqlite3_result_value(sqlite3_context pCtx, Mem pValue);
    public static void sqlite3_result_zeroblob(sqlite3_context pCtx, int n);
    public static void sqlite3_result_error_code(sqlite3_context pCtx, int errCode);
    public static void sqlite3_result_error_toobig(sqlite3_context pCtx);
    public static void sqlite3_result_error_nomem(sqlite3_context pCtx);
    private static int doWalCallbacks(sqlite3 db);
    private static int sqlite3Step(Vdbe p);
    public static int sqlite3_step(Vdbe pStmt);
    public static object sqlite3_user_data(sqlite3_context p);
    public static sqlite3 sqlite3_context_db_handle(sqlite3_context p);
    public static void sqlite3InvalidFunction(sqlite3_context context, int NotUsed, Mem[] NotUsed2);
    public static Mem sqlite3_aggregate_context(sqlite3_context p, int nByte);
    public static object sqlite3_get_auxdata(sqlite3_context pCtx, int iArg);
    public static void sqlite3_set_auxdata(sqlite3_context pCtx, int iArg, object pAux);
    public static int sqlite3_column_count(Vdbe pStmt);
    public static int sqlite3_data_count(Vdbe pStmt);
    private static Mem columnMem(Vdbe pStmt, int i);
    private static void columnMallocFailure(Vdbe pStmt);
    public static Byte[] sqlite3_column_blob(Vdbe pStmt, int i);
    public static int sqlite3_column_bytes(Vdbe pStmt, int i);
    public static int sqlite3_column_bytes16(Vdbe pStmt, int i);
    public static double sqlite3_column_double(Vdbe pStmt, int i);
    public static int sqlite3_column_int(Vdbe pStmt, int i);
    public static long sqlite3_column_int64(Vdbe pStmt, int i);
    public static string sqlite3_column_text(Vdbe pStmt, int i);
    public static Mem sqlite3_column_value(Vdbe pStmt, int i);
    public static int sqlite3_column_type(Vdbe pStmt, int i);
    public static string columnName(Vdbe pStmt, int N, dxColname xFunc, int useType);
    public static string sqlite3_column_name(Vdbe pStmt, int N);
    public static string sqlite3_column_decltype(Vdbe pStmt, int N);
    public static string sqlite3_column_database_name(Vdbe pStmt, int N);
    public static string sqlite3_column_table_name(Vdbe pStmt, int N);
    public static string sqlite3_column_origin_name(Vdbe pStmt, int N);
    public static int vdbeUnbind(Vdbe p, int i);
    private static int bindBlob(Vdbe pStmt, int i, Byte[] zData, int nData, dxDel xDel, byte encoding);
    public static int bindText(Vdbe pStmt, int i, string zData, int nData, dxDel xDel, byte encoding);
    public static int sqlite3_bind_double(Vdbe pStmt, int i, double rValue);
    public static int sqlite3_bind_int(Vdbe p, int i, int iValue);
    public static int sqlite3_bind_int64(Vdbe pStmt, int i, long iValue);
    public static int sqlite3_bind_null(Vdbe pStmt, int i);
    public static int sqlite3_bind_text(Vdbe pStmt, int i, string zData, int nData, dxDel xDel);
    public static int sqlite3_bind_blob(Vdbe pStmt, int i, Byte[] zData, int nData, dxDel xDel);
    public static int sqlite3_bind_value(Vdbe pStmt, int i, Mem pValue);
    public static int sqlite3_bind_zeroblob(Vdbe pStmt, int i, int n);
    public static int sqlite3_bind_parameter_count(Vdbe pStmt);
    public static string sqlite3_bind_parameter_name(Vdbe pStmt, int i);
    public static int sqlite3VdbeParameterIndex(Vdbe p, string zName, int nName);
    public static int sqlite3_bind_parameter_index(Vdbe pStmt, string zName);
    public static int sqlite3TransferBindings(Vdbe pFromStmt, Vdbe pToStmt);
    public static sqlite3 sqlite3_db_handle(Vdbe pStmt);
    private static bool sqlite3_stmt_readonly(Vdbe pStmt);
    public static Vdbe sqlite3_next_stmt(sqlite3 pDb, Vdbe pStmt);
    public static int sqlite3_stmt_status(Vdbe pStmt, int op, int resetFlag);
    private static Vdbe sqlite3VdbeCreate(sqlite3 db);
    private static void sqlite3VdbeSetSql(Vdbe p, string z, int n, int isPrepareV2);
    public static string sqlite3_sql(Vdbe pStmt);
    private static void sqlite3VdbeSwap(Vdbe pA, Vdbe pB);
    private static void sqlite3VdbeTrace(Vdbe p, TextWriter trace);
    private static int growOpArray(Vdbe p);
    private static int sqlite3VdbeAddOp3(Vdbe p, int op, int p1, int p2, int p3);
    private static int sqlite3VdbeAddOp0(Vdbe p, int op);
    private static int sqlite3VdbeAddOp1(Vdbe p, int op, int p1);
    private static int sqlite3VdbeAddOp2(Vdbe p, int op, int p1, bool b2);
    private static int sqlite3VdbeAddOp2(Vdbe p, int op, int p1, int p2);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, int pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, char pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, StringBuilder pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, string pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, Byte[] pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, Int32[] pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, long pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, double pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, FuncDef pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, CollSeq pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, KeyInfo pP4, int p4type);
    private static int sqlite3VdbeAddOp4(Vdbe p, int op, int p1, int p2, int p3, VTable pP4, int p4type);
    private static void sqlite3VdbeAddParseSchemaOp(Vdbe p, int iDb, string zWhere);
    private static int sqlite3VdbeAddOp4Int(Vdbe p, int op, int p1, int p2, int p3, int p4);
    private static int sqlite3VdbeMakeLabel(Vdbe p);
    private static void sqlite3VdbeResolveLabel(Vdbe p, int x);
    private static void sqlite3VdbeRunOnlyOnce(Vdbe p);
    private static VdbeOp opIterNext(VdbeOpIter p);
    private static int sqlite3VdbeAssertMayAbort(Vdbe v, int mayAbort);
    private static void resolveP2Values(Vdbe p, Int32& pMaxFuncArgs);
    private static int sqlite3VdbeCurrentAddr(Vdbe p);
    private static VdbeOp[] sqlite3VdbeTakeOpArray(Vdbe p, Int32& pnOp, Int32& pnMaxArg);
    private static int sqlite3VdbeAddOpList(Vdbe p, int nOp, VdbeOpList[] aOp);
    private static void sqlite3VdbeChangeP1(Vdbe p, int addr, int val);
    private static void sqlite3VdbeChangeP2(Vdbe p, int addr, int val);
    private static void sqlite3VdbeChangeP3(Vdbe p, int addr, int val);
    private static void sqlite3VdbeChangeP5(Vdbe p, byte val);
    private static void sqlite3VdbeJumpHere(Vdbe p, int addr);
    private static void freeEphemeralFunction(sqlite3 db, FuncDef pDef);
    private static void freeP4(sqlite3 db, int p4type, object p4);
    private static void vdbeFreeOpArray(sqlite3 db, VdbeOp[]& aOp, int nOp);
    private static void sqlite3VdbeLinkSubProgram(Vdbe pVdbe, SubProgram p);
    private static void sqlite3VdbeChangeToNoop(Vdbe p, int addr, int N);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, CollSeq pColl, int n);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, FuncDef pFunc, int n);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, int i32n, int n);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, KeyInfo pKeyInfo, int n);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, char c, int n);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, Mem m, int n);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, string z, dxDel P4_Type);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, SubProgram pProgram, int n);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, string z, int n);
    private static void sqlite3VdbeChangeP4(Vdbe p, int addr, union_p4 _p4, int n);
    private static VdbeOp sqlite3VdbeGetOp(Vdbe p, int addr);
    private static string displayP4(VdbeOp pOp, string zBuffer, int nTemp);
    private static void sqlite3VdbeUsesBtree(Vdbe p, int i);
    private static void sqlite3VdbePrintOp(TextWriter pOut, int pc, VdbeOp pOp);
    private static void releaseMemArray(Mem[] p, int N);
    private static void releaseMemArray(Mem[] p, int starting, int N);
    private static void sqlite3VdbeFrameDelete(VdbeFrame p);
    private static int sqlite3VdbeList(Vdbe p);
    private static void sqlite3VdbePrintSql(Vdbe p);
    private static void sqlite3VdbeRewind(Vdbe p);
    private static void sqlite3VdbeMakeReady(Vdbe p, Parse pParse);
    private static void sqlite3VdbeFreeCursor(Vdbe p, VdbeCursor pCx);
    private static int sqlite3VdbeFrameRestore(VdbeFrame pFrame);
    private static void closeAllCursors(Vdbe p);
    private static void Cleanup(Vdbe p);
    private static void sqlite3VdbeSetNumCols(Vdbe p, int nResColumn);
    private static int sqlite3VdbeSetColName(Vdbe p, int idx, int var, string zName, dxDel xDel);
    private static int vdbeCommit(sqlite3 db, Vdbe p);
    private static void checkActiveVdbeCnt(sqlite3 db);
    private static void invalidateCursorsOnModifiedBtrees(sqlite3 db);
    private static int sqlite3VdbeCloseStatement(Vdbe p, int eOp);
    private static int sqlite3VdbeCheckFk(Vdbe p, int deferred);
    private static int sqlite3VdbeHalt(Vdbe p);
    private static void sqlite3VdbeResetStepResult(Vdbe p);
    private static int sqlite3VdbeReset(Vdbe p);
    private static int sqlite3VdbeFinalize(Vdbe& p);
    private static void sqlite3VdbeDeleteAuxData(VdbeFunc pVdbeFunc, int mask);
    private static void sqlite3VdbeDeleteObject(sqlite3 db, Vdbe& p);
    private static void sqlite3VdbeDelete(Vdbe& p);
    private static int sqlite3VdbeCursorMoveto(VdbeCursor p);
    private static UInt32 sqlite3VdbeSerialType(Mem pMem, int file_format);
    private static UInt32 sqlite3VdbeSerialTypeLen(UInt32 serial_type);
    private static UInt32 sqlite3VdbeSerialPut(Byte[] buf, int offset, int nBuf, Mem pMem, int file_format);
    private static UInt32 sqlite3VdbeSerialGet(Byte[] buf, int offset, UInt32 serial_type, Mem pMem);
    private static int sqlite3VdbeSerialGet(Byte[] buf, UInt32 serial_type, Mem pMem);
    private static UnpackedRecord sqlite3VdbeRecordUnpack(KeyInfo pKeyInfo, int nKey, Byte[] pKey, UnpackedRecord pSpace, int szSpace);
    private static void sqlite3VdbeDeleteUnpackedRecord(UnpackedRecord p);
    private static int sqlite3VdbeRecordCompare(int nKey1, Byte[] pKey1, UnpackedRecord pPKey2);
    private static int sqlite3VdbeRecordCompare(int nKey1, Byte[] pKey1, int offset, UnpackedRecord pPKey2);
    private static int sqlite3VdbeIdxRowid(sqlite3 db, BtCursor pCur, Int64& rowid);
    private static int sqlite3VdbeIdxKeyCompare(VdbeCursor pC, UnpackedRecord pUnpacked, Int32& res);
    private static void sqlite3VdbeSetChanges(sqlite3 db, int nChange);
    private static void sqlite3VdbeCountChanges(Vdbe v);
    private static void sqlite3ExpirePreparedStatements(sqlite3 db);
    private static sqlite3 sqlite3VdbeDb(Vdbe v);
    private static Mem sqlite3VdbeGetValue(Vdbe v, int iVar, byte aff);
    private static void sqlite3VdbeSetVarmask(Vdbe v, int iVar);
    private static void MemSetTypeFlag(Mem p, int f);
    private static bool memIsValid(Mem M);
    private static void sqlite3VdbeEnter(Vdbe p);
    private static void sqlite3VdbeLeave(Vdbe p);
    private static int sqlite3VdbeMemExpandBlob(Mem x);
    private static void expandBlob(Mem P);
    private static int sqlite3VdbeChangeEncoding(Mem pMem, int desiredEnc);
    private static int sqlite3VdbeMemGrow(Mem pMem, int n, int preserve);
    private static int sqlite3VdbeMemMakeWriteable(Mem pMem);
    private static int sqlite3VdbeMemNulTerminate(Mem pMem);
    private static int sqlite3VdbeMemStringify(Mem pMem, int enc);
    private static int sqlite3VdbeMemFinalize(Mem pMem, FuncDef pFunc);
    private static void sqlite3VdbeMemReleaseExternal(Mem p);
    private static void sqlite3VdbeMemRelease(Mem p);
    private static long doubleToInt64(double r);
    private static long sqlite3VdbeIntValue(Mem pMem);
    private static double sqlite3VdbeRealValue(Mem pMem);
    private static void sqlite3VdbeIntegerAffinity(Mem pMem);
    private static int sqlite3VdbeMemIntegerify(Mem pMem);
    private static int sqlite3VdbeMemRealify(Mem pMem);
    private static int sqlite3VdbeMemNumerify(Mem pMem);
    private static void sqlite3VdbeMemSetNull(Mem pMem);
    private static void sqlite3VdbeMemSetZeroBlob(Mem pMem, int n);
    private static void sqlite3VdbeMemSetInt64(Mem pMem, long val);
    private static void sqlite3VdbeMemSetDouble(Mem pMem, double val);
    private static void sqlite3VdbeMemSetRowSet(Mem pMem);
    private static bool sqlite3VdbeMemTooBig(Mem p);
    private static void sqlite3VdbeMemPrepareToChange(Vdbe pVdbe, Mem pMem);
    private static void sqlite3VdbeMemShallowCopy(Mem pTo, Mem pFrom, int srcType);
    private static int sqlite3VdbeMemCopy(Mem pTo, Mem pFrom);
    private static void sqlite3VdbeMemMove(Mem pTo, Mem pFrom);
    private static int sqlite3VdbeMemSetBlob(Mem pMem, Byte[] zBlob, int n, byte enc, dxDel xDel);
    private static int sqlite3VdbeMemSetBlob(Mem pMem, Byte[] zBlob, int offset, int n, byte enc, dxDel xDel);
    private static int sqlite3VdbeMemSetStr(Mem pMem, string z, int n, byte enc, dxDel xDel);
    private static int sqlite3VdbeMemSetStr(Mem pMem, string z, int offset, int n, byte enc, dxDel xDel);
    private static int sqlite3MemCompare(Mem pMem1, Mem pMem2, CollSeq pColl);
    private static int sqlite3VdbeMemFromBtree(BtCursor pCur, int offset, int amt, bool key, Mem pMem);
    private static string sqlite3ValueText(Mem pVal, int enc);
    private static Mem sqlite3ValueNew(sqlite3 db);
    private static int sqlite3ValueFromExpr(sqlite3 db, Expr pExpr, int enc, char affinity, Mem& ppVal);
    private static void sqlite3ValueSetStr(Mem v, int n, string z, byte enc, dxDel xDel);
    private static void sqlite3ValueFree(Mem& v);
    private static int sqlite3ValueBytes(Mem pVal, int enc);
    private static int findNextHostParameter(string zSql, int iOffset, Int32& pnToken);
    private static string sqlite3VdbeExpandSql(Vdbe p, string zRawSql);
    private static void memAboutToChange(Vdbe P, Mem M);
    private static void UPDATE_MAX_BLOBSIZE(Mem P);
    private static void Deephemeralize(Mem P);
    private static int ExpandBlob(Mem P);
    private static void sqlite3VdbeMemStoreType(Mem pMem);
    private static VdbeCursor allocateCursor(Vdbe p, int iCur, int nField, int iDb, int isBtreeCursor);
    private static void applyNumericAffinity(Mem pRec);
    private static void applyAffinity(Mem pRec, char affinity, int enc);
    private static int sqlite3_value_numeric_type(Mem pVal);
    private static void sqlite3ValueApplyAffinity(Mem pVal, char affinity, int enc);
    private static void sqlite3VdbeMemPrettyPrint(Mem pMem, StringBuilder zBuf);
    private static void memTracePrint(TextWriter _out, Mem p);
    private static void registerTrace(TextWriter _out, int iReg, Mem p);
    private static void REGISTER_TRACE(Vdbe p, int R, Mem M);
    private static int checkSavepointCount(sqlite3 db);
    private static void importVtabErrMsg(Vdbe p, sqlite3_vtab pVtab);
    private static int sqlite3VdbeExec(Vdbe p);
    private static int ADDR(int x);
    private static void VdbeComment(Vdbe v, string zFormat, Object[] ap);
    private static void VdbeNoopComment(Vdbe v, string zFormat, Object[] ap);
    private static int createModule(sqlite3 db, string zName, sqlite3_module pModule, object pAux, smdxDestroy xDestroy);
    private static int sqlite3_create_module(sqlite3 db, string zName, sqlite3_module pModule, object pAux);
    private static int sqlite3_create_module_v2(sqlite3 db, string zName, sqlite3_module pModule, sqlite3_vtab pAux, smdxDestroy xDestroy);
    private static void sqlite3VtabLock(VTable pVTab);
    private static VTable sqlite3GetVTable(sqlite3 db, Table pTab);
    private static void sqlite3VtabUnlock(VTable pVTab);
    private static VTable vtabDisconnectAll(sqlite3 db, Table p);
    private static void sqlite3VtabUnlockList(sqlite3 db);
    private static void sqlite3VtabClear(sqlite3 db, Table p);
    private static void addModuleArgument(sqlite3 db, Table pTable, string zArg);
    private static void sqlite3VtabBeginParse(Parse pParse, Token pName1, Token pName2, Token pModuleName);
    private static void addArgumentToVtab(Parse pParse);
    private static void sqlite3VtabFinishParse(Parse pParse, Token pEnd);
    private static void sqlite3VtabArgInit(Parse pParse);
    private static void sqlite3VtabArgExtend(Parse pParse, Token p);
    private static int vtabCallConstructor(sqlite3 db, Table pTab, Module pMod, smdxCreateConnect xConstruct, String& pzErr);
    private static int sqlite3VtabCallConnect(Parse pParse, Table pTab);
    private static int growVTrans(sqlite3 db);
    private static void addToVTrans(sqlite3 db, VTable pVTab);
    private static int sqlite3VtabCallCreate(sqlite3 db, int iDb, string zTab, String& pzErr);
    private static int sqlite3_declare_vtab(sqlite3 db, string zCreateTable);
    private static int sqlite3VtabCallDestroy(sqlite3 db, int iDb, string zTab);
    private static void callFinaliser(sqlite3 db, int offset);
    private static int sqlite3VtabSync(sqlite3 db, String& pzErrmsg);
    private static int sqlite3VtabRollback(sqlite3 db);
    private static int sqlite3VtabCommit(sqlite3 db);
    private static int sqlite3VtabBegin(sqlite3 db, VTable pVTab);
    private static int sqlite3VtabSavepoint(sqlite3 db, int op, int iSavepoint);
    private static FuncDef sqlite3VtabOverloadFunction(sqlite3 db, FuncDef pDef, int nArg, Expr pExpr);
    private static void sqlite3VtabMakeWritable(Parse pParse, Table pTab);
    private static int sqlite3_vtab_on_conflict(sqlite3 db);
    private static int sqlite3_vtab_config(sqlite3 db, int op, Object[] ap);
    private static int sqlite3WalkExpr(Walker pWalker, Expr& pExpr);
    private static int sqlite3WalkExprList(Walker pWalker, ExprList p);
    private static int sqlite3WalkSelectExpr(Walker pWalker, Select p);
    private static int sqlite3WalkSelectFrom(Walker pWalker, Select p);
    private static int sqlite3WalkSelect(Walker pWalker, Select p);
    private static int sqlite3WalOpen(sqlite3_vfs x, sqlite3_file y, string z);
    private static void sqlite3WalLimit(sqlite3_vfs x, long y);
    private static int sqlite3WalClose(object w, int x, int y, byte z);
    private static int sqlite3WalBeginReadTransaction(object y, int z);
    private static void sqlite3WalEndReadTransaction(object z);
    private static int sqlite3WalRead(object v, UInt32 w, Int32& x, int y, Byte[] z);
    private static UInt32 sqlite3WalDbsize(object y);
    private static int sqlite3WalBeginWriteTransaction(object y);
    private static int sqlite3WalEndWriteTransaction(object x);
    private static int sqlite3WalUndo(object x, int y, object z);
    private static void sqlite3WalSavepoint(object y, object z);
    private static int sqlite3WalSavepointUndo(object y, object z);
    private static int sqlite3WalFrames(object u, int v, PgHdr w, UInt32 x, int y, int z);
    private static int sqlite3WalCheckpoint(object r, int s, int t, Byte[] u, int v, int w, Byte[] x, Int32& y, Int32& z);
    private static int sqlite3WalCallback(object z);
    private static bool sqlite3WalExclusiveMode(object y, int z);
    private static bool sqlite3WalHeapMemory(object z);
    private static void WHERETRACE(string X, Object[] ap);
    private static void whereClauseInit(WhereClause pWC, Parse pParse, WhereMaskSet pMaskSet);
    private static void whereOrInfoDelete(sqlite3 db, WhereOrInfo p);
    private static void whereAndInfoDelete(sqlite3 db, WhereAndInfo p);
    private static void whereClauseClear(WhereClause pWC);
    private static int whereClauseInsert(WhereClause pWC, Expr p, byte wtFlags);
    private static void whereSplit(WhereClause pWC, Expr pExpr, int op);
    private static ulong getMask(WhereMaskSet pMaskSet, int iCursor);
    private static void createMask(WhereMaskSet pMaskSet, int iCursor);
    private static ulong exprTableUsage(WhereMaskSet pMaskSet, Expr p);
    private static ulong exprListTableUsage(WhereMaskSet pMaskSet, ExprList pList);
    private static ulong exprSelectTableUsage(WhereMaskSet pMaskSet, Select pS);
    private static bool allowedOp(int op);
    private static void exprCommute(Parse pParse, Expr pExpr);
    private static ushort operatorMask(int op);
    private static WhereTerm findTerm(WhereClause pWC, int iCur, int iColumn, ulong notReady, UInt32 op, Index pIdx);
    private static void exprAnalyzeAll(SrcList pTabList, WhereClause pWC);
    private static int isLikeOrGlob(Parse pParse, Expr pExpr, Expr& ppPrefix, Boolean& pisComplete, Boolean& pnoCase);
    private static int isMatchOfColumn(Expr pExpr);
    private static void transferJoinMarkings(Expr pDerived, Expr pBase);
    private static void exprAnalyzeOrTerm(SrcList pSrc, WhereClause pWC, int idxTerm);
    private static void exprAnalyze(SrcList pSrc, WhereClause pWC, int idxTerm);
    private static bool referencesOtherTables(ExprList pList, WhereMaskSet pMaskSet, int iFirst, int iBase);
    private static bool isSortingIndex(Parse pParse, WhereMaskSet pMaskSet, Index pIdx, int _base, ExprList pOrderBy, int nEqCol, int wsFlags, Int32& pbRev);
    private static double estLog(double N);
    private static void TRACE_IDX_INPUTS(sqlite3_index_info p);
    private static void TRACE_IDX_OUTPUTS(sqlite3_index_info p);
    private static void bestOrClauseIndex(Parse pParse, WhereClause pWC, SrcList_item pSrc, ulong notReady, ulong notValid, ExprList pOrderBy, WhereCost pCost);
    private static int termCanDriveIndex(WhereTerm pTerm, SrcList_item pSrc, ulong notReady);
    private static void bestAutomaticIndex(Parse pParse, WhereClause pWC, SrcList_item pSrc, ulong notReady, WhereCost pCost);
    private static void constructAutomaticIndex(Parse pParse, WhereClause pWC, SrcList_item pSrc, ulong notReady, WhereLevel pLevel);
    private static sqlite3_index_info allocateIndexInfo(Parse pParse, WhereClause pWC, SrcList_item pSrc, ExprList pOrderBy);
    private static int vtabBestIndex(Parse pParse, Table pTab, sqlite3_index_info p);
    private static void bestVirtualIndex(Parse pParse, WhereClause pWC, SrcList_item pSrc, ulong notReady, ulong notValid, ExprList pOrderBy, WhereCost& pCost, sqlite3_index_info& ppIdxInfo);
    private static int whereRangeScanEst(Parse pParse, Index p, int nEq, WhereTerm pLower, WhereTerm pUpper, Int32& piEst);
    private static void bestBtreeIndex(Parse pParse, WhereClause pWC, SrcList_item pSrc, ulong notReady, ulong notValid, ExprList pOrderBy, WhereCost& pCost);
    private static void bestIndex(Parse pParse, WhereClause pWC, SrcList_item pSrc, ulong notReady, ulong notValid, ExprList pOrderBy, WhereCost& pCost);
    private static void disableTerm(WhereLevel pLevel, WhereTerm pTerm);
    private static void codeApplyAffinity(Parse pParse, int _base, int n, string zAff);
    private static int codeEqualityTerm(Parse pParse, WhereTerm pTerm, WhereLevel pLevel, int iTarget);
    private static int codeAllEqualityTerms(Parse pParse, WhereLevel pLevel, WhereClause pWC, ulong notReady, int nExtraReg, StringBuilder& pzAff);
    private static void explainAppendTerm(StrAccum pStr, int iTerm, string zColumn, string zOp);
    private static string explainIndexRange(sqlite3 db, WhereLevel pLevel, Table pTab);
    private static void explainOneScan(Parse pParse, SrcList pTabList, WhereLevel pLevel, int iLevel, int iFrom, ushort wctrlFlags);
    private static ulong codeOneLoopStart(WhereInfo pWInfo, int iLevel, ushort wctrlFlags, ulong notReady);
    private static void whereInfoFree(sqlite3 db, WhereInfo pWInfo);
    private static WhereInfo sqlite3WhereBegin(Parse pParse, SrcList pTabList, Expr pWhere, ExprList& ppOrderBy, ushort wctrlFlags);
    private static void sqlite3WhereEnd(WhereInfo pWInfo);
    private static int atoi(Byte[] inStr);
    private static int atoi(string inStr);
    private static void fprintf(TextWriter tw, string zFormat, Object[] ap);
    private static void printf(string zFormat, Object[] ap);
    private static int memcmp(Byte[] bA, Byte[] bB, int Limit);
    private static int memcmp(string A, Byte[] bB, int Limit);
    private static int memcmp(Byte[] a, int Offset, Byte[] b, int Limit);
    private static int memcmp(Byte[] a, int Aoffset, Byte[] b, int Boffset, int Limit);
    private static int memcmp(Byte[] a, int Offset, string b, int Limit);
    private static int memcmp(string A, string B, int Limit);
    private static void regexpFunc(sqlite3_context context, int argc, Mem[] argv);
    private static void va_start(Object[] ap, string zFormat);
    private static bool va_arg(Object[] ap, bool sysType);
    private static Byte[] va_arg(Object[] ap, Byte[] sysType);
    private static Byte[][] va_arg(Object[] ap, Byte[][] sysType);
    private static char va_arg(Object[] ap, char sysType);
    private static double va_arg(Object[] ap, double sysType);
    private static dxLog va_arg(Object[] ap, dxLog sysType);
    private static long va_arg(Object[] ap, long sysType);
    private static int va_arg(Object[] ap, int sysType);
    private static Int32[] va_arg(Object[] ap, Int32[] sysType);
    private static MemPage va_arg(Object[] ap, MemPage sysType);
    private static object va_arg(Object[] ap, object sysType);
    private static sqlite3 va_arg(Object[] ap, sqlite3 sysType);
    private static sqlite3_mem_methods va_arg(Object[] ap, sqlite3_mem_methods sysType);
    private static sqlite3_mutex_methods va_arg(Object[] ap, sqlite3_mutex_methods sysType);
    private static SrcList va_arg(Object[] ap, SrcList sysType);
    private static string va_arg(Object[] ap, string sysType);
    private static Token va_arg(Object[] ap, Token sysType);
    private static UInt32 va_arg(Object[] ap, UInt32 sysType);
    private static ulong va_arg(Object[] ap, ulong sysType);
    private static void_function va_arg(Object[] ap, void_function sysType);
    private static void va_end(String[]& ap);
    private static void va_end(Object[]& ap);
    public static tm localtime(long baseTime);
    public static long ToUnixtime(DateTime date);
    public static DateTime ToCSharpTime(long unixTime);
    private static void SWAP(T& A, T& B);
    private static void x_CountStep(sqlite3_context context, int argc, Mem[] argv);
    private static void x_CountFinalize(sqlite3_context context);
    private static int GetCurrentThreadId();
    private static long InterlockedIncrement(long location);
    private static void EnterCriticalSection(object mtx);
    private static void InitializeCriticalSection(object mtx);
    private static void DeleteCriticalSection(object mtx);
    private static void LeaveCriticalSection(object mtx);
}
public static class IronPython.SQLite.PythonSQLite : object {
    public static int SQLITE_OK;
    public static int SQLITE_DENY;
    public static int SQLITE_IGNORE;
    public static int SQLITE_CREATE_INDEX;
    public static int SQLITE_CREATE_TABLE;
    public static int SQLITE_CREATE_TEMP_INDEX;
    public static int SQLITE_CREATE_TEMP_TABLE;
    public static int SQLITE_CREATE_TEMP_TRIGGER;
    public static int SQLITE_CREATE_TEMP_VIEW;
    public static int SQLITE_CREATE_TRIGGER;
    public static int SQLITE_CREATE_VIEW;
    public static int SQLITE_DELETE;
    public static int SQLITE_DROP_INDEX;
    public static int SQLITE_DROP_TABLE;
    public static int SQLITE_DROP_TEMP_INDEX;
    public static int SQLITE_DROP_TEMP_TABLE;
    public static int SQLITE_DROP_TEMP_TRIGGER;
    public static int SQLITE_DROP_TEMP_VIEW;
    public static int SQLITE_DROP_TRIGGER;
    public static int SQLITE_DROP_VIEW;
    public static int SQLITE_INSERT;
    public static int SQLITE_PRAGMA;
    public static int SQLITE_READ;
    public static int SQLITE_SELECT;
    public static int SQLITE_TRANSACTION;
    public static int SQLITE_UPDATE;
    public static int SQLITE_ATTACH;
    public static int SQLITE_DETACH;
    public static int SQLITE_ALTER_TABLE;
    public static int SQLITE_REINDEX;
    public static int SQLITE_ANALYZE;
    public static int PARSE_DECLTYPES;
    public static int PARSE_COLNAMES;
    public static PythonType Warning;
    public static PythonType Error;
    public static PythonType InterfaceError;
    public static PythonType DatabaseError;
    public static PythonType DataError;
    public static PythonType OperationalError;
    public static PythonType IntegrityError;
    public static PythonType InternalError;
    public static PythonType ProgrammingError;
    public static PythonType NotSupportedError;
    public static string version;
    public static string sqlite_version;
    public static PythonDictionary converters;
    public static PythonDictionary adapters;
    public static Type OptimizedUnicode;
    internal static Encoding Latin1;
    private static PythonSQLite();
    private static void InitModuleExceptions(PythonContext context, PythonDictionary dict);
    internal static Exception MakeWarning(Object[] args);
    internal static Exception MakeError(Object[] args);
    internal static Exception MakeInterfaceError(Object[] args);
    internal static Exception MakeDatabaseError(Object[] args);
    internal static Exception MakeDataError(Object[] args);
    internal static Exception MakeOperationalError(Object[] args);
    internal static Exception MakeIntegrityError(Object[] args);
    internal static Exception MakeInternalError(Object[] args);
    internal static Exception MakeProgrammingError(Object[] args);
    internal static Exception MakeNotSupportedError(Object[] args);
    internal static Exception GetSqliteError(sqlite3 db, Vdbe st);
    private static Exception CreateThrowable(PythonType type, Object[] args);
    public static void PerformModuleReload(PythonContext context, PythonDictionary dict);
    public static object connect(CodeContext context, string database, double timeout, int detect_types, string isolation_level, bool check_same_thread, object factory, int cached_statements);
    [DocumentationAttribute("register_adapter(type, callable)

Registers an adapter with pysqlite's adapter registry. Non-standard.")]
public static void register_adapter(CodeContext context, PythonType type, object adapter);
    [DocumentationAttribute("register_converter(typename, callable)

Registers a converter with pysqlite. Non-standard.")]
public static void register_converter(CodeContext context, string type, object converter);
}
[DebuggerDisplayAttribute("{sql}")]
internal class IronPython.SQLite.Statement : object {
    private Guid uniqueid;
    private sqlite3 db;
    internal Vdbe st;
    private object current;
    private object nextRow;
    private bool started;
    private string sql;
    private bool bound;
    internal bool in_use;
    [CompilerGeneratedAttribute]
private string <Tail>k__BackingField;
    private StatementType _type;
    public string Tail { get; private set; }
    public StatementType StatementType { get; }
    public Statement(Connection connection, string operation);
    private Statement(sqlite3 db, Vdbe stmt, string operation, string tail);
    [CompilerGeneratedAttribute]
public string get_Tail();
    [CompilerGeneratedAttribute]
private void set_Tail(string value);
    protected virtual override void Finalize();
    public StatementType get_StatementType();
    public void BindParameters(CodeContext context, object parameters);
    private void BindParameters(CodeContext context, IDictionary args, int num_params_needed);
    private void BindParameters(CodeContext context, IList args, int num_params_needed);
    private void BindParameter(CodeContext context, int index, object arg);
    private object maybeAdapt(CodeContext context, object value);
    private bool needsAdaptation(CodeContext context, object value);
    private object adaptValue(CodeContext context, object value);
    public int RawStep();
    public int SqliteFinalize();
    public int Reset();
    private void ClearParameters();
    internal void MarkDirty();
    internal int Recompile(CodeContext context, object parameters);
}
internal enum IronPython.SQLite.StatementType : Enum {
    public int value__;
    public static StatementType Unknown;
    public static StatementType Select;
    public static StatementType Insert;
    public static StatementType Update;
    public static StatementType Delete;
    public static StatementType Replace;
    public static StatementType Other;
}
[ExtensionAttribute]
internal static class IronPython.SQLite.StringExtensions : object {
    [ExtensionAttribute]
public static string Format(string format, Object[] args);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
}
internal static class IronPython.SQLite.Util : object {
    public static int Step(Vdbe statement);
}
