internal static class IronSnappy.Crc32 : object {
    private static UInt32 DefaultPolynomial;
    private static UInt32 DefaultSeed;
    private static UInt32[] defaultTable;
    public static UInt32 Compute(Byte[] buffer);
    public static UInt32 Compute(ReadOnlySpan`1<byte> buffer);
    public static UInt32 Compute(UInt32 seed, ReadOnlySpan`1<byte> buffer);
    public static UInt32 Compute(UInt32 polynomial, UInt32 seed, ReadOnlySpan`1<byte> buffer);
    private static UInt32[] InitializeTable(UInt32 polynomial);
    private static UInt32 CalculateHash(UInt32[] table, UInt32 seed, ReadOnlySpan`1<byte> buffer);
}
public interface IronSnappy.IRentedBuffer {
    public Span`1<byte> Span { get; }
    public abstract virtual Span`1<byte> get_Span();
}
internal class IronSnappy.RentedBuffer : object {
    private static ArrayPool`1<byte> BytePool;
    private Byte[] _buffer;
    private RentedBuffer _parent;
    private int _start;
    private int _count;
    private int _capacity;
    public Span`1<byte> Span { get; }
    public RentedBuffer(int capacity);
    public RentedBuffer(RentedBuffer parent, int start, int count);
    private static RentedBuffer();
    public sealed virtual Span`1<byte> get_Span();
    public sealed virtual void Dispose();
}
public static class IronSnappy.Snappy : object {
    internal static string MagicBody;
    internal static Byte[] MagicChunk;
    internal static int MaxBlockSize;
    internal static int ChecksumSize;
    private static int ChunkHeaderSize;
    internal static int MaxEncodedLenOfMaxBlockSize;
    internal static int InputMargin;
    internal static int MinNonLiteralBlockSize;
    internal static int TagLiteral;
    internal static int TagCopy1;
    internal static int TagCopy2;
    internal static int TagCopy4;
    internal static int ChunkTypeCompressedData;
    internal static int ChunkTypeUncompressedData;
    private static int ChunkTypePadding;
    internal static byte ChunkTypeStreamIdentifier;
    internal static int ObufHeaderLen;
    internal static int ObufLen;
    internal static ArrayPool`1<byte> BytePool;
    private static Snappy();
    public static Stream OpenWriter(Stream destination);
    public static Stream OpenReader(Stream source);
    public static Byte[] Encode(ReadOnlySpan`1<byte> src);
    public static Byte[] Decode(ReadOnlySpan`1<byte> src);
}
internal class IronSnappy.SnappyReader : Stream {
    private static int DecodeErrCodeCorrupt;
    private static int DecodeErrCodeUnsupportedLiteralLength;
    private static string ErrCorrupt;
    private static string ErrUnsupported;
    private static ArrayPool`1<byte> BytePool;
    private Stream _parent;
    private int _i;
    private int _j;
    private bool _readHeader;
    private Byte[] _buf;
    private Byte[] _decoded;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SnappyReader(Stream parent);
    private static SnappyReader();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private static ulong Uvarint(ReadOnlySpan`1<byte> buf, Int32& bytesRead);
    public static int DecodedLen(ReadOnlySpan`1<byte> src);
    private static void DecodedLen(ReadOnlySpan`1<byte> src, Int32& blockLen, Int32& headerLen);
    private static int DecodeInternal(Span`1<byte> dst, ReadOnlySpan`1<byte> src);
    public static Span`1<byte> Decode(Span`1<byte> dst, ReadOnlySpan`1<byte> src);
}
internal class IronSnappy.SnappyWriter : Stream {
    private Stream _parent;
    private Byte[] _ibuf;
    private Byte[] _obuf;
    private int _ibufIdx;
    private bool _wroteStreamHeader;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SnappyWriter(Stream parent);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private void WriteChunk(ReadOnlySpan`1<byte> p);
    public static ReadOnlySpan`1<byte> Encode(Span`1<byte> dst, ReadOnlySpan`1<byte> src);
    public static int GetMaxEncodedLen(int srcLen);
    private static int PutUvarint(Span`1<byte> buf, ulong x);
    private static UInt32 Load32(ReadOnlySpan`1<byte> b, int i);
    private static ulong Load64(ReadOnlySpan`1<byte> b, int i);
    private static UInt32 Hash(UInt32 u, int shift);
    private static int EncodeBlock(Span`1<byte> dst, ReadOnlySpan`1<byte> src);
    private static int EmitCopy(Span`1<byte> dst, int offset, int length);
    private static int EmitLiteral(Span`1<byte> dst, ReadOnlySpan`1<byte> lit);
}
internal static class IronSnappy.Spans : object {
    public static void Write(Stream dst, ReadOnlySpan`1<byte> data);
    public static int Read(Stream src, Span`1<byte> buffer);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
