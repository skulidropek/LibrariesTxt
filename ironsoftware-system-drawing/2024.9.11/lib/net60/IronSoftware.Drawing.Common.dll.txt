public class IronSoftware.Drawing.AnyBitmap : object {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Image <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Binary>k__BackingField;
    [CompilerGeneratedAttribute]
private IImageFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private TiffCompression <TiffCompression>k__BackingField;
    private Image Image { get; private set; }
    private Byte[] Binary { get; private set; }
    private IImageFormat Format { get; private set; }
    private TiffCompression TiffCompression { get; private set; }
    public int Width { get; }
    public int Height { get; }
    public int Length { get; }
    public int BitsPerPixel { get; }
    public int FrameCount { get; }
    public IEnumerable`1<AnyBitmap> GetAllFrames { get; }
    public int Stride { get; }
    public IntPtr Scan0 { get; }
    public string MimeType { get; }
    public Nullable`1<double> HorizontalResolution { get; }
    public Nullable`1<double> VerticalResolution { get; }
    public AnyBitmap(ReadOnlySpan`1<byte> span);
    public AnyBitmap(Byte[] bytes);
    public AnyBitmap(MemoryStream stream);
    public AnyBitmap(Stream stream);
    public AnyBitmap(AnyBitmap original, int width, int height);
    public AnyBitmap(string file);
    public AnyBitmap(Uri uri);
    public AnyBitmap(int width, int height, Color backgroundColor);
    [CompilerGeneratedAttribute]
private Image get_Image();
    [CompilerGeneratedAttribute]
private void set_Image(Image value);
    [CompilerGeneratedAttribute]
private Byte[] get_Binary();
    [CompilerGeneratedAttribute]
private void set_Binary(Byte[] value);
    [CompilerGeneratedAttribute]
private IImageFormat get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(IImageFormat value);
    [CompilerGeneratedAttribute]
private TiffCompression get_TiffCompression();
    [CompilerGeneratedAttribute]
private void set_TiffCompression(TiffCompression value);
    public sealed virtual int get_Width();
    public sealed virtual int get_Height();
    public int get_Length();
    public virtual int GetHashCode();
    public virtual string ToString();
    public Byte[] GetBytes();
    public MemoryStream GetStream();
    public AnyBitmap Clone();
    public AnyBitmap Clone(Rectangle rectangle);
    public Byte[] ExportBytes(ImageFormat format, int lossy);
    public sealed virtual Byte[] ExportBytesAsJpg();
    public void ExportFile(string file, ImageFormat format, int lossy);
    public MemoryStream ToStream(ImageFormat format, int lossy);
    public Func`1<Stream> ToStreamFn(ImageFormat format, int lossy);
    public void ExportStream(Stream stream, ImageFormat format, int lossy);
    public void SaveAs(string file);
    public void SaveAs(string file, ImageFormat format, int lossy);
    public bool TrySaveAs(string file, ImageFormat format, int lossy);
    public bool TrySaveAs(string file);
    public static AnyBitmap FromBitmap(T otherBitmapFormat);
    public T ToBitmap();
    public static AnyBitmap FromSpan(ReadOnlySpan`1<byte> span);
    public static AnyBitmap FromBytes(Byte[] bytes);
    public static AnyBitmap FromStream(MemoryStream stream);
    public static AnyBitmap FromStream(Stream stream);
    public static AnyBitmap FromFile(string file);
    [AsyncStateMachineAttribute("IronSoftware.Drawing.AnyBitmap/<FromUriAsync>d__54")]
public static Task`1<AnyBitmap> FromUriAsync(Uri uri);
    [ObsoleteAttribute("FromUri(Uri) is obsolete for net60 or greater because it uses WebClient which is obsolete. Consider using FromUriAsync(Uri) method.")]
public static AnyBitmap FromUri(Uri uri);
    public static AnyBitmap LoadAnyBitmapFromRGBBuffer(Byte[] buffer, int width, int height);
    public int get_BitsPerPixel();
    public int get_FrameCount();
    public IEnumerable`1<AnyBitmap> get_GetAllFrames();
    public static AnyBitmap CreateMultiFrameTiff(IEnumerable`1<string> imagePaths);
    public static AnyBitmap CreateMultiFrameTiff(IEnumerable`1<AnyBitmap> images);
    public static AnyBitmap CreateMultiFrameGif(IEnumerable`1<string> imagePaths);
    public static AnyBitmap CreateMultiFrameGif(IEnumerable`1<AnyBitmap> images);
    public Byte[] ExtractAlphaData();
    public AnyBitmap RotateFlip(RotateMode rotateMode, FlipMode flipMode);
    [ObsoleteAttribute("The parameter type RotateFlipType is legacy support from System.Drawing. Please use RotateMode and FlipMode instead.")]
public AnyBitmap RotateFlip(RotateFlipType rotateFlipType);
    public static AnyBitmap RotateFlip(AnyBitmap bitmap, RotateMode rotateMode, FlipMode flipMode);
    public AnyBitmap Redact(Rectangle Rectangle, Color color);
    public static AnyBitmap Redact(AnyBitmap bitmap, Rectangle Rectangle, Color color);
    public int get_Stride();
    public IntPtr get_Scan0();
    public string get_MimeType();
    public ImageFormat GetImageFormat();
    public Nullable`1<double> get_HorizontalResolution();
    public Nullable`1<double> get_VerticalResolution();
    public Color GetPixel(int x, int y);
    public void SetPixel(int x, int y, Color color);
    public Byte[] GetRGBBuffer();
    public static AnyBitmap op_Implicit(Image`1<Rgb24> image);
    public static Image`1<Rgb24> op_Implicit(AnyBitmap bitmap);
    public static AnyBitmap op_Implicit(Image`1<Rgba32> image);
    public static Image`1<Rgba32> op_Implicit(AnyBitmap bitmap);
    public static AnyBitmap op_Implicit(Image image);
    public static Image op_Implicit(AnyBitmap bitmap);
    public static AnyBitmap op_Implicit(SKImage image);
    public static SKImage op_Implicit(AnyBitmap bitmap);
    public static AnyBitmap op_Implicit(SKBitmap image);
    public static SKBitmap op_Implicit(AnyBitmap bitmap);
    public static AnyBitmap op_Implicit(PlatformImage image);
    public static PlatformImage op_Implicit(AnyBitmap bitmap);
    public static AnyBitmap op_Implicit(Bitmap image);
    public static Bitmap op_Implicit(AnyBitmap bitmap);
    public static AnyBitmap op_Implicit(Image image);
    public static Image op_Implicit(AnyBitmap bitmap);
    [ObsoleteAttribute("RotateFlipType is legacy support from System.Drawing. Please use RotateMode and FlipMode instead.")]
internal static ValueTuple`2<RotateMode, FlipMode> ParseRotateFlipType(RotateFlipType rotateFlipType);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void CreateNewImageInstance(int width, int height, Color backgroundColor);
    private void LoadImage(ReadOnlySpan`1<byte> bytes);
    private void LoadImage(Stream stream);
    private static AnyBitmap LoadSVGImage(string file);
    private static SKBitmap DecodeSVG(string strInput);
    private static PlatformNotSupportedException SystemDotDrawingPlatformNotSupported(Exception innerException);
    private static string GetMimeType(Bitmap image);
    private static string GetMimeType(Image image);
    private static SKImage OpenTiffToSKImage(AnyBitmap anyBitmap);
    private static SKBitmap OpenTiffToSKBitmap(AnyBitmap anyBitmap);
    private void OpenTiffToImageSharp(ReadOnlySpan`1<byte> bytes);
    private void SetTiffCompression(Tiff tiff);
    private bool IsThumbnail(Tiff tiff);
    private ReadOnlySpan`1<byte> PrepareByteArray(Image`1<Rgba32> bmp, Int32[] raster, int width, int height);
    private ValueTuple`2<int, int> SetWidthHeight(Tiff tiff, short index, Int32& imageWidth, Int32& imageHeight);
    private static List`1<AnyBitmap> CreateAnyBitmaps(IEnumerable`1<string> imagePaths);
    private static MemoryStream CreateMultiFrameImage(IEnumerable`1<AnyBitmap> images, ImageFormat imageFormat);
    private static void FindMaxWidthAndHeight(IEnumerable`1<Image> images, Int32& maxWidth, Int32& maxHeight);
    private static void FindMaxWidthAndHeight(IEnumerable`1<AnyBitmap> images, Int32& maxWidth, Int32& maxHeight);
    private static Image`1<Rgba32> CloneAndResizeImageSharp(Image source, int maxWidth, int maxHeight);
    private static Image`1<Rgba32> LoadAndResizeImageSharp(Byte[] bytes, int maxWidth, int maxHeight, int index);
    private static Image`1<Rgba32> ResizeWithPadToPng(Image`1<Rgba32> result, int maxWidth, int maxHeight);
    private int GetStride(Image source);
    private IntPtr GetFirstPixelData();
    private static void ConvertRGBAtoBGRA(Byte[] data, int width, int height, int samplesPerPixel);
    private Color GetPixelColor(int x, int y);
    private void SetPixelColor(int x, int y, Color color);
    private void LoadAndResizeImage(AnyBitmap original, int width, int height);
    private static ImageFormat GetImageFormat(string filename);
    [AsyncStateMachineAttribute("IronSoftware.Drawing.AnyBitmap/<LoadUriAsync>d__140")]
private static Task`1<Stream> LoadUriAsync(Uri uri);
}
public class IronSoftware.Drawing.Color : object {
    [CompilerGeneratedAttribute]
private byte <A>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <G>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <B>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <R>k__BackingField;
    public static Color Empty;
    public static Color AliceBlue;
    public static Color AntiqueWhite;
    public static Color Aqua;
    public static Color Aquamarine;
    public static Color Azure;
    public static Color Beige;
    public static Color Bisque;
    public static Color Black;
    public static Color BlanchedAlmond;
    public static Color Blue;
    public static Color BlueViolet;
    public static Color Brown;
    public static Color BurlyWood;
    public static Color CadetBlue;
    public static Color Chartreuse;
    public static Color Chocolate;
    public static Color Coral;
    public static Color CornflowerBlue;
    public static Color Cornsilk;
    public static Color Crimson;
    public static Color Cyan;
    public static Color DarkBlue;
    public static Color DarkCyan;
    public static Color DarkGoldenrod;
    public static Color DarkGray;
    public static Color DarkGreen;
    public static Color DarkKhaki;
    public static Color DarkMagenta;
    public static Color DarkOliveGreen;
    public static Color DarkOrange;
    public static Color DarkOrchid;
    public static Color DarkRed;
    public static Color DarkSalmon;
    public static Color DarkSeaGreen;
    public static Color DarkSlateBlue;
    public static Color DarkSlateGray;
    public static Color DarkTurquoise;
    public static Color DarkViolet;
    public static Color DeepPink;
    public static Color DeepSkyBlue;
    public static Color DimGray;
    public static Color DodgerBlue;
    public static Color Firebrick;
    public static Color FloralWhite;
    public static Color ForestGreen;
    public static Color Fuchsia;
    public static Color Gainsboro;
    public static Color GhostWhite;
    public static Color Gold;
    public static Color Goldenrod;
    public static Color Gray;
    public static Color Green;
    public static Color GreenYellow;
    public static Color Honeydew;
    public static Color HotPink;
    public static Color IndianRed;
    public static Color Indigo;
    public static Color Ivory;
    public static Color Khaki;
    public static Color Lavender;
    public static Color LavenderBlush;
    public static Color LawnGreen;
    public static Color LemonChiffon;
    public static Color LightBlue;
    public static Color LightCoral;
    public static Color LightCyan;
    public static Color LightGoldenrodYellow;
    public static Color LightGray;
    public static Color LightGreen;
    public static Color LightPink;
    public static Color LightSalmon;
    public static Color LightSeaGreen;
    public static Color LightSkyBlue;
    public static Color LightSlateGray;
    public static Color LightSteelBlue;
    public static Color LightYellow;
    public static Color Lime;
    public static Color LimeGreen;
    public static Color Linen;
    public static Color Magenta;
    public static Color Maroon;
    public static Color MediumAquamarine;
    public static Color MediumBlue;
    public static Color MediumOrchid;
    public static Color MediumPurple;
    public static Color MediumSeaGreen;
    public static Color MediumSlateBlue;
    public static Color MediumSpringGreen;
    public static Color MediumTurquoise;
    public static Color MediumVioletRed;
    public static Color MidnightBlue;
    public static Color MintCream;
    public static Color MistyRose;
    public static Color Moccasin;
    public static Color NavajoWhite;
    public static Color Navy;
    public static Color OldLace;
    public static Color Olive;
    public static Color OliveDrab;
    public static Color Orange;
    public static Color OrangeRed;
    public static Color Orchid;
    public static Color PaleGoldenrod;
    public static Color PaleGreen;
    public static Color PaleTurquoise;
    public static Color PaleVioletRed;
    public static Color PapayaWhip;
    public static Color PeachPuff;
    public static Color Peru;
    public static Color Pink;
    public static Color Plum;
    public static Color PowderBlue;
    public static Color Purple;
    public static Color RebeccaPurple;
    public static Color Red;
    public static Color RosyBrown;
    public static Color RoyalBlue;
    public static Color SaddleBrown;
    public static Color Salmon;
    public static Color SandyBrown;
    public static Color SeaGreen;
    public static Color SeaShell;
    public static Color Sienna;
    public static Color Silver;
    public static Color SkyBlue;
    public static Color SlateBlue;
    public static Color SlateGray;
    public static Color Snow;
    public static Color SpringGreen;
    public static Color SteelBlue;
    public static Color Tan;
    public static Color Teal;
    public static Color Thistle;
    public static Color Tomato;
    public static Color Transparent;
    public static Color Turquoise;
    public static Color Violet;
    public static Color Wheat;
    public static Color White;
    public static Color WhiteSmoke;
    public static Color Yellow;
    public static Color YellowGreen;
    public byte A { get; internal set; }
    public byte G { get; internal set; }
    public byte B { get; internal set; }
    public byte R { get; internal set; }
    public Color(string colorcode);
    public Color(int alpha, int red, int green, int blue);
    public Color(int red, int green, int blue);
    private static Color();
    [CompilerGeneratedAttribute]
public byte get_A();
    [CompilerGeneratedAttribute]
internal void set_A(byte value);
    [CompilerGeneratedAttribute]
public byte get_G();
    [CompilerGeneratedAttribute]
internal void set_G(byte value);
    [CompilerGeneratedAttribute]
public byte get_B();
    [CompilerGeneratedAttribute]
internal void set_B(byte value);
    [CompilerGeneratedAttribute]
public byte get_R();
    [CompilerGeneratedAttribute]
internal void set_R(byte value);
    public static Color FromArgb(int red, int green, int blue);
    public static Color FromArgb(int alpha, int red, int green, int blue);
    public static Color FromArgb(int alpha, Color baseColor);
    public static Color FromArgb(int argb);
    public static Color FromName(string name);
    public virtual string ToString();
    public double GetLuminance();
    public double GetBrightness();
    public int ToArgb();
    public static Color op_Implicit(Color color);
    public static Color op_Implicit(Color color);
    public static Color op_Implicit(SKColor color);
    public static SKColor op_Implicit(Color color);
    public static Color op_Implicit(Color color);
    public static Color op_Implicit(Color color);
    public static Color op_Implicit(Rgba32 color);
    public static Rgba32 op_Implicit(Color color);
    public static Color op_Implicit(Bgra32 color);
    public static Bgra32 op_Implicit(Color color);
    public static Color op_Implicit(Rgb24 color);
    public static Rgb24 op_Implicit(Color color);
    public static Color op_Implicit(Bgr24 color);
    public static Bgr24 op_Implicit(Color color);
    public static Color op_Implicit(Rgb48 color);
    public static Rgb48 op_Implicit(Color color);
    public static Color op_Implicit(Rgba64 color);
    public static Rgba64 op_Implicit(Color color);
    public static Color op_Implicit(Abgr32 color);
    public static Abgr32 op_Implicit(Color color);
    public static Color op_Implicit(Argb32 color);
    public static Argb32 op_Implicit(Color color);
    public static Color op_Implicit(Color color);
    public static Color op_Implicit(Color color);
    public static bool op_Equality(Color left, Color right);
    public static bool op_Inequality(Color left, Color right);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public string ToHtmlCssColorCode();
    private static InvalidOperationException NoConverterException(string color, Exception innerException);
    private static double Percentage(int total, double value);
    private static byte ConvertToHexNumberByte(string colorcode, int start, int length);
    private double CalculateLuminance();
}
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Please use Rectangle instead of CropRectangle", "False")]
public class IronSoftware.Drawing.CropRectangle : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementUnits <Units>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public MeasurementUnits Units { get; public set; }
    public int Top { get; }
    public int Right { get; }
    public int Bottom { get; }
    public int Left { get; }
    public CropRectangle(int x, int y, int width, int height, MeasurementUnits units);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public MeasurementUnits get_Units();
    [CompilerGeneratedAttribute]
public void set_Units(MeasurementUnits value);
    public CropRectangle ConvertTo(MeasurementUnits units, int dpi);
    public int get_Top();
    public int get_Right();
    public int get_Bottom();
    public int get_Left();
    public bool Contains(int x, int y);
    public static CropRectangle op_Implicit(Rectangle rectangle);
    public static Rectangle op_Implicit(CropRectangle cropRectangle);
    public static CropRectangle op_Implicit(SKRect sKRect);
    public static SKRect op_Implicit(CropRectangle cropRectangle);
    public static CropRectangle op_Implicit(SKRectI sKRectI);
    public static SKRectI op_Implicit(CropRectangle cropRectangle);
    public static CropRectangle op_Implicit(Rectangle rectangle);
    public static Rectangle op_Implicit(CropRectangle cropRectangle);
    public static CropRectangle op_Implicit(RectangleF rectangle);
    public static RectangleF op_Implicit(CropRectangle cropRectangle);
    public static CropRectangle op_Implicit(Rect rectangle);
    public static Rect op_Implicit(CropRectangle cropRectangle);
    public static CropRectangle op_Implicit(RectF rectangle);
    public static RectF op_Implicit(CropRectangle cropRectangle);
    public static CropRectangle op_Implicit(Rectangle rectangle);
    public static Rectangle op_Implicit(CropRectangle rectangle);
    private static CropRectangle CreateCropRectangle(int left, int top, int right, int bottom);
}
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
public abstract class IronSoftware.Drawing.Extensions.Enumeration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public string Name { get; private set; }
    public int Id { get; private set; }
    internal Enumeration(int id, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    public virtual string ToString();
    public static IEnumerable`1<T> GetAll();
    public virtual bool Equals(object obj);
    public sealed virtual int CompareTo(object other);
    public virtual int GetHashCode();
}
public class IronSoftware.Drawing.Font : object {
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Size>k__BackingField;
    private static String[] _obliqueFonts;
    public string FamilyName { get; internal set; }
    public FontStyle Style { get; internal set; }
    public bool Bold { get; }
    public bool Italic { get; }
    public bool Underline { get; }
    public bool Strikeout { get; }
    public float Size { get; internal set; }
    public Font(string familyName);
    public Font(string familyName, FontStyle style);
    public Font(string familyName, FontStyle style, float size);
    public Font(string familyName, float size);
    private static Font();
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
internal void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public FontStyle get_Style();
    [CompilerGeneratedAttribute]
internal void set_Style(FontStyle value);
    public bool get_Bold();
    public bool get_Italic();
    public bool get_Underline();
    public bool get_Strikeout();
    [CompilerGeneratedAttribute]
public float get_Size();
    [CompilerGeneratedAttribute]
internal void set_Size(float value);
    public static Font op_Implicit(Font font);
    public static Font op_Implicit(Font font);
    public static Font op_Implicit(Font font);
    public static Font op_Implicit(Font font);
    public static Font op_Implicit(SKFont font);
    public static SKFont op_Implicit(Font font);
    public static Font op_Implicit(Font font);
    public static Font op_Implicit(Font font);
    public static Font op_Implicit(FontTypes fontTypes);
    public static FontTypes op_Implicit(Font font);
}
[FlagsAttribute]
public enum IronSoftware.Drawing.FontStyle : Enum {
    public int value__;
    public static FontStyle Regular;
    public static FontStyle Bold;
    public static FontStyle Italic;
    public static FontStyle Underline;
    public static FontStyle Strikeout;
    public static FontStyle BoldItalic;
}
public class IronSoftware.Drawing.FontTypes : Enumeration {
    [CompilerGeneratedAttribute]
private string <FontFilePath>k__BackingField;
    [EditorBrowsableAttribute("1")]
public string FontFilePath { get; private set; }
    public static FontTypes Arial { get; }
    public static FontTypes ArialBold { get; }
    public static FontTypes ArialBoldItalic { get; }
    public static FontTypes ArialItalic { get; }
    public static FontTypes Courier { get; }
    public static FontTypes CourierBoldOblique { get; }
    public static FontTypes CourierOblique { get; }
    public static FontTypes CourierBold { get; }
    public static FontTypes CourierNew { get; }
    public static FontTypes CourierNewBold { get; }
    public static FontTypes CourierNewBoldItalic { get; }
    public static FontTypes CourierNewItalic { get; }
    public static FontTypes Helvetica { get; }
    public static FontTypes HelveticaBold { get; }
    public static FontTypes HelveticaBoldOblique { get; }
    public static FontTypes HelveticaOblique { get; }
    public static FontTypes Symbol { get; }
    public static FontTypes TimesNewRoman { get; }
    public static FontTypes TimesNewRomanBold { get; }
    public static FontTypes TimesNewRomanBoldItalic { get; }
    public static FontTypes TimesNewRomanItalic { get; }
    public static FontTypes ZapfDingbats { get; }
    internal FontTypes(int id, string name, string fontFilePath);
    [CompilerGeneratedAttribute]
public string get_FontFilePath();
    [CompilerGeneratedAttribute]
private void set_FontFilePath(string value);
    [EditorBrowsableAttribute("1")]
public static FontTypes GenerateInstance(int id, string name, string fontFilePath);
    public static FontTypes get_Arial();
    public static FontTypes get_ArialBold();
    public static FontTypes get_ArialBoldItalic();
    public static FontTypes get_ArialItalic();
    public static FontTypes get_Courier();
    public static FontTypes get_CourierBoldOblique();
    public static FontTypes get_CourierOblique();
    public static FontTypes get_CourierBold();
    public static FontTypes get_CourierNew();
    public static FontTypes get_CourierNewBold();
    public static FontTypes get_CourierNewBoldItalic();
    public static FontTypes get_CourierNewItalic();
    public static FontTypes get_Helvetica();
    public static FontTypes get_HelveticaBold();
    public static FontTypes get_HelveticaBoldOblique();
    public static FontTypes get_HelveticaOblique();
    public static FontTypes get_Symbol();
    public static FontTypes get_TimesNewRoman();
    public static FontTypes get_TimesNewRomanBold();
    public static FontTypes get_TimesNewRomanBoldItalic();
    public static FontTypes get_TimesNewRomanItalic();
    public static FontTypes get_ZapfDingbats();
    public static FontTypes FromString(string fontName);
}
public enum IronSoftware.Drawing.KnownColor : Enum {
    public int value__;
    public static KnownColor ActiveBorder;
    public static KnownColor ActiveCaption;
    public static KnownColor ActiveCaptionText;
    public static KnownColor AppWorkspace;
    public static KnownColor Control;
    public static KnownColor ControlDark;
    public static KnownColor ControlDarkDark;
    public static KnownColor ControlLight;
    public static KnownColor ControlLightLight;
    public static KnownColor ControlText;
    public static KnownColor Desktop;
    public static KnownColor GrayText;
    public static KnownColor Highlight;
    public static KnownColor HighlightText;
    public static KnownColor HotTrack;
    public static KnownColor InactiveBorder;
    public static KnownColor InactiveCaption;
    public static KnownColor InactiveCaptionText;
    public static KnownColor Info;
    public static KnownColor InfoText;
    public static KnownColor Menu;
    public static KnownColor MenuText;
    public static KnownColor ScrollBar;
    public static KnownColor Window;
    public static KnownColor WindowFrame;
    public static KnownColor WindowText;
    public static KnownColor Transparent;
    public static KnownColor AliceBlue;
    public static KnownColor AntiqueWhite;
    public static KnownColor Aqua;
    public static KnownColor Aquamarine;
    public static KnownColor Azure;
    public static KnownColor Beige;
    public static KnownColor Bisque;
    public static KnownColor Black;
    public static KnownColor BlanchedAlmond;
    public static KnownColor Blue;
    public static KnownColor BlueViolet;
    public static KnownColor Brown;
    public static KnownColor BurlyWood;
    public static KnownColor CadetBlue;
    public static KnownColor Chartreuse;
    public static KnownColor Chocolate;
    public static KnownColor Coral;
    public static KnownColor CornflowerBlue;
    public static KnownColor Cornsilk;
    public static KnownColor Crimson;
    public static KnownColor Cyan;
    public static KnownColor DarkBlue;
    public static KnownColor DarkCyan;
    public static KnownColor DarkGoldenrod;
    public static KnownColor DarkGray;
    public static KnownColor DarkGreen;
    public static KnownColor DarkKhaki;
    public static KnownColor DarkMagenta;
    public static KnownColor DarkOliveGreen;
    public static KnownColor DarkOrange;
    public static KnownColor DarkOrchid;
    public static KnownColor DarkRed;
    public static KnownColor DarkSalmon;
    public static KnownColor DarkSeaGreen;
    public static KnownColor DarkSlateBlue;
    public static KnownColor DarkSlateGray;
    public static KnownColor DarkTurquoise;
    public static KnownColor DarkViolet;
    public static KnownColor DeepPink;
    public static KnownColor DeepSkyBlue;
    public static KnownColor DimGray;
    public static KnownColor DodgerBlue;
    public static KnownColor Firebrick;
    public static KnownColor FloralWhite;
    public static KnownColor ForestGreen;
    public static KnownColor Fuchsia;
    public static KnownColor Gainsboro;
    public static KnownColor GhostWhite;
    public static KnownColor Gold;
    public static KnownColor Goldenrod;
    public static KnownColor Gray;
    public static KnownColor Green;
    public static KnownColor GreenYellow;
    public static KnownColor Honeydew;
    public static KnownColor HotPink;
    public static KnownColor IndianRed;
    public static KnownColor Indigo;
    public static KnownColor Ivory;
    public static KnownColor Khaki;
    public static KnownColor Lavender;
    public static KnownColor LavenderBlush;
    public static KnownColor LawnGreen;
    public static KnownColor LemonChiffon;
    public static KnownColor LightBlue;
    public static KnownColor LightCoral;
    public static KnownColor LightCyan;
    public static KnownColor LightGoldenrodYellow;
    public static KnownColor LightGray;
    public static KnownColor LightGreen;
    public static KnownColor LightPink;
    public static KnownColor LightSalmon;
    public static KnownColor LightSeaGreen;
    public static KnownColor LightSkyBlue;
    public static KnownColor LightSlateGray;
    public static KnownColor LightSteelBlue;
    public static KnownColor LightYellow;
    public static KnownColor Lime;
    public static KnownColor LimeGreen;
    public static KnownColor Linen;
    public static KnownColor Magenta;
    public static KnownColor Maroon;
    public static KnownColor MediumAquamarine;
    public static KnownColor MediumBlue;
    public static KnownColor MediumOrchid;
    public static KnownColor MediumPurple;
    public static KnownColor MediumSeaGreen;
    public static KnownColor MediumSlateBlue;
    public static KnownColor MediumSpringGreen;
    public static KnownColor MediumTurquoise;
    public static KnownColor MediumVioletRed;
    public static KnownColor MidnightBlue;
    public static KnownColor MintCream;
    public static KnownColor MistyRose;
    public static KnownColor Moccasin;
    public static KnownColor NavajoWhite;
    public static KnownColor Navy;
    public static KnownColor OldLace;
    public static KnownColor Olive;
    public static KnownColor OliveDrab;
    public static KnownColor Orange;
    public static KnownColor OrangeRed;
    public static KnownColor Orchid;
    public static KnownColor PaleGoldenrod;
    public static KnownColor PaleGreen;
    public static KnownColor PaleTurquoise;
    public static KnownColor PaleVioletRed;
    public static KnownColor PapayaWhip;
    public static KnownColor PeachPuff;
    public static KnownColor Peru;
    public static KnownColor Pink;
    public static KnownColor Plum;
    public static KnownColor PowderBlue;
    public static KnownColor Purple;
    public static KnownColor Red;
    public static KnownColor RosyBrown;
    public static KnownColor RoyalBlue;
    public static KnownColor SaddleBrown;
    public static KnownColor Salmon;
    public static KnownColor SandyBrown;
    public static KnownColor SeaGreen;
    public static KnownColor SeaShell;
    public static KnownColor Sienna;
    public static KnownColor Silver;
    public static KnownColor SkyBlue;
    public static KnownColor SlateBlue;
    public static KnownColor SlateGray;
    public static KnownColor Snow;
    public static KnownColor SpringGreen;
    public static KnownColor SteelBlue;
    public static KnownColor Tan;
    public static KnownColor Teal;
    public static KnownColor Thistle;
    public static KnownColor Tomato;
    public static KnownColor Turquoise;
    public static KnownColor Violet;
    public static KnownColor Wheat;
    public static KnownColor White;
    public static KnownColor WhiteSmoke;
    public static KnownColor Yellow;
    public static KnownColor YellowGreen;
    public static KnownColor ButtonFace;
    public static KnownColor ButtonHighlight;
    public static KnownColor ButtonShadow;
    public static KnownColor GradientActiveCaption;
    public static KnownColor GradientInactiveCaption;
    public static KnownColor MenuBar;
    public static KnownColor MenuHighlight;
}
internal class IronSoftware.Drawing.KnownColors : object {
    internal static UInt32[] ArgbValues;
    internal static String[] Names;
    private static Dictionary`2<string, UInt32> _argbByName;
    private static Dictionary`2<UInt32, string> _nameByArgb;
    internal static Dictionary`2<string, UInt32> ArgbByName { get; }
    internal static Dictionary`2<UInt32, string> NameByArgb { get; }
    private static KnownColors();
    internal static Dictionary`2<string, UInt32> get_ArgbByName();
    internal static Dictionary`2<UInt32, string> get_NameByArgb();
    public static Color FromKnownColor(KnownColor kc);
    public static string GetName(short kc);
    public static string GetName(KnownColor kc);
    public static Color FindColorMatch(Color c);
    [BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static void Update(int knownColor, int color);
}
public enum IronSoftware.Drawing.MeasurementUnits : Enum {
    public int value__;
    public static MeasurementUnits Pixels;
    public static MeasurementUnits Millimeters;
}
public class IronSoftware.Drawing.Point : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public Point(int x, int y);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    public void Offset(int dx, int dy);
    public static Point op_Implicit(Point point);
    public static Point op_Implicit(Point point);
    public static Point op_Implicit(Point point);
    public static Point op_Implicit(Point point);
    public static Point op_Implicit(Point point);
    public static Point op_Implicit(Point point);
    public static Point op_Implicit(SKPointI point);
    public static SKPointI op_Implicit(Point point);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class IronSoftware.Drawing.PointF : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public PointF(float x, float y);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    public void Offset(float dx, float dy);
    public static PointF op_Implicit(PointF point);
    public static PointF op_Implicit(PointF point);
    public static PointF op_Implicit(PointF point);
    public static PointF op_Implicit(PointF point);
    public static PointF op_Implicit(SKPoint point);
    public static SKPoint op_Implicit(PointF point);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class IronSoftware.Drawing.Rectangle : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementUnits <Units>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public MeasurementUnits Units { get; public set; }
    [EditorBrowsableAttribute("1")]
public Size Size { get; public set; }
    public int Top { get; }
    public int Right { get; }
    public int Bottom { get; }
    public int Left { get; }
    public Rectangle(int x, int y, int width, int height, MeasurementUnits units);
    public Rectangle(Point point, Size size, MeasurementUnits units);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public MeasurementUnits get_Units();
    [CompilerGeneratedAttribute]
public void set_Units(MeasurementUnits value);
    public Rectangle ConvertTo(MeasurementUnits units, int dpi);
    public Size get_Size();
    public void set_Size(Size value);
    public int get_Top();
    public int get_Right();
    public int get_Bottom();
    public int get_Left();
    public bool Contains(int x, int y);
    public static RectangleF op_Implicit(Rectangle Rectangle);
    public static Rectangle op_Implicit(Rectangle rectangle);
    public static Rectangle op_Implicit(Rectangle Rectangle);
    public static Rectangle op_Implicit(SKRect sKRect);
    public static SKRect op_Implicit(Rectangle Rectangle);
    public static Rectangle op_Implicit(SKRectI sKRectI);
    public static SKRectI op_Implicit(Rectangle Rectangle);
    public static Rectangle op_Implicit(Rectangle rectangle);
    public static Rectangle op_Implicit(Rectangle Rectangle);
    public static Rectangle op_Implicit(RectangleF rectangle);
    public static RectangleF op_Implicit(Rectangle Rectangle);
    public static Rectangle op_Implicit(Rect rectangle);
    public static Rect op_Implicit(Rectangle Rectangle);
    public static Rectangle op_Implicit(RectF rectangle);
    public static RectF op_Implicit(Rectangle Rectangle);
    private static Rectangle CreateRectangle(int left, int top, int right, int bottom);
}
public class IronSoftware.Drawing.RectangleF : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementUnits <Units>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public MeasurementUnits Units { get; public set; }
    [EditorBrowsableAttribute("1")]
public SizeF Size { get; public set; }
    public float Top { get; }
    public float Right { get; }
    public float Bottom { get; }
    public float Left { get; }
    public RectangleF(float x, float y, float width, float height, MeasurementUnits units);
    public RectangleF(PointF point, SizeF size, MeasurementUnits units);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    [CompilerGeneratedAttribute]
public MeasurementUnits get_Units();
    [CompilerGeneratedAttribute]
public void set_Units(MeasurementUnits value);
    public RectangleF ConvertTo(MeasurementUnits units, int dpi);
    public SizeF get_Size();
    public void set_Size(SizeF value);
    public float get_Top();
    public float get_Right();
    public float get_Bottom();
    public float get_Left();
    public bool Contains(int x, int y);
    public static RectangleF op_Implicit(RectangleF RectangleF);
    public static RectangleF op_Implicit(RectangleF RectangleF);
    public static RectangleF op_Implicit(SKRect sKRect);
    public static SKRect op_Implicit(RectangleF RectangleF);
    public static RectangleF op_Implicit(RectangleF RectangleF);
    public static RectangleF op_Implicit(RectangleF RectangleF);
    public static RectangleF op_Implicit(Rect RectangleF);
    public static Rect op_Implicit(RectangleF RectangleF);
    public static RectangleF op_Implicit(RectF RectangleF);
    public static RectF op_Implicit(RectangleF RectangleF);
    private static RectangleF CreateRectangleF(float left, float top, float right, float bottom);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronSoftware.Drawing.Size : ValueType {
    public static Size Empty;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public Size(int value);
    public Size(int width, int height);
    public Size(Size size);
    public Size(Point point);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    public bool get_IsEmpty();
    public static SizeF op_Implicit(Size size);
    public static Point op_Explicit(Size size);
    public static Size op_Addition(Size left, Size right);
    public static Size op_Subtraction(Size left, Size right);
    public static Size op_Multiply(int left, Size right);
    public static Size op_Multiply(Size left, int right);
    public static Size op_Division(Size left, int right);
    public static SizeF op_Multiply(float left, Size right);
    public static SizeF op_Multiply(Size left, float right);
    public static SizeF op_Division(Size left, float right);
    public static bool op_Equality(Size left, Size right);
    public static bool op_Inequality(Size left, Size right);
    public static Size op_Implicit(Size v);
    public static Size op_Implicit(Size v);
    public static Size op_Implicit(Size v);
    public static Size op_Implicit(Size v);
    public static Size op_Implicit(SKSizeI v);
    public static SKSizeI op_Implicit(Size v);
    public static Size op_Implicit(Size v);
    public static Size op_Implicit(Size v);
    public static Size Add(Size left, Size right);
    public static Size Subtract(Size left, Size right);
    public static SizeF Transform(Size size, Matrix3x2 matrix);
    public static Size Truncate(SizeF size);
    public void Deconstruct(Int32& width, Int32& height);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Size other);
    private static Size Multiply(Size size, int multiplier);
    private static SizeF Multiply(Size size, float multiplier);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class IronSoftware.Drawing.SizeF : ValueType {
    public static SizeF Empty;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    public float Width { get; public set; }
    public float Height { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool IsEmpty { get; }
    public SizeF(float width, float height);
    public SizeF(SizeF size);
    public SizeF(PointF point);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    public bool get_IsEmpty();
    public static Vector2 op_Implicit(SizeF point);
    public static Size op_Explicit(SizeF size);
    public static PointF op_Explicit(SizeF size);
    public static SizeF op_Addition(SizeF left, SizeF right);
    public static SizeF op_Subtraction(SizeF left, SizeF right);
    public static SizeF op_Multiply(float left, SizeF right);
    public static SizeF op_Multiply(SizeF left, float right);
    public static SizeF op_Division(SizeF left, float right);
    public static bool op_Equality(SizeF left, SizeF right);
    public static bool op_Inequality(SizeF left, SizeF right);
    public static SizeF op_Implicit(SizeF v);
    public static SizeF op_Implicit(SizeF v);
    public static SizeF op_Implicit(SizeF v);
    public static SizeF op_Implicit(SizeF v);
    public static SizeF op_Implicit(SKSize v);
    public static SKSize op_Implicit(SizeF v);
    public static SizeF op_Implicit(SizeF v);
    public static SizeF op_Implicit(SizeF v);
    public static SizeF Add(SizeF left, SizeF right);
    public static SizeF Subtract(SizeF left, SizeF right);
    public static SizeF Transform(SizeF size, Matrix3x2 matrix);
    public void Deconstruct(Single& width, Single& height);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SizeF other);
    private static SizeF Multiply(SizeF size, float multiplier);
    public virtual int GetHashCode();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
