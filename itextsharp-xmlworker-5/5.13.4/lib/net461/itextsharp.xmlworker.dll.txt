public class iTextSharp.tool.xml.css.apply.ChunkCssApplier : CssApplier`1<Chunk> {
    public static IList`1<string> BOLD;
    protected CssUtils utils;
    protected IFontProvider fontProvider;
    public IFontProvider FontProvider { get; public set; }
    public ChunkCssApplier(IFontProvider fontProvider);
    private static ChunkCssApplier();
    public virtual Chunk Apply(Chunk c, Tag t);
    public virtual Chunk Apply(Chunk c, Tag t, IMarginMemory mm, IPageSizeContainable psc, HtmlPipelineContext ctx);
    public virtual Font ApplyFontStyles(Tag t);
    protected bool IsBoldValue(string value);
    public virtual float GetWidestWord(Chunk c);
    public virtual void CopyChunkStyles(Chunk source, Chunk target);
    public virtual IFontProvider get_FontProvider();
    public virtual void set_FontProvider(IFontProvider value);
}
public class iTextSharp.tool.xml.css.apply.DivCssApplier : CssApplier`1<PdfDiv> {
    private CssUtils utils;
    private static ILogger LOG;
    private static DivCssApplier();
    public virtual PdfDiv Apply(PdfDiv div, Tag t, IMarginMemory memory, IPageSizeContainable psc, HtmlPipelineContext context);
}
public class iTextSharp.tool.xml.css.apply.HtmlCellCssApplier : CssApplier`1<HtmlCell> {
    private CssUtils utils;
    public virtual HtmlCell Apply(HtmlCell cell, Tag t, IMarginMemory memory, IPageSizeContainable psc);
    public virtual HtmlCell Apply(HtmlCell cell, Tag t, IMarginMemory memory, IPageSizeContainable psc, HtmlPipelineContext ctx);
    private void SetTopOfBorder(HtmlCell cell, string key, string value, TableStyleValues values);
    private void SetBottomOfBorder(HtmlCell cell, string key, string value, TableStyleValues values);
    private void SetLeftOfBorder(HtmlCell cell, string key, string value, TableStyleValues values);
    private void SetRightOfBorder(HtmlCell cell, string key, string value, TableStyleValues values);
}
public class iTextSharp.tool.xml.css.apply.ImageCssApplier : CssApplier`1<Image> {
    public virtual Image Apply(Image img, Tag tag);
    public virtual Image Apply(Image img, Tag tag, IMarginMemory mm, IPageSizeContainable psc, HtmlPipelineContext ctx);
}
public interface iTextSharp.tool.xml.css.apply.IMarginMemory {
    public float LastMarginBottom { get; public set; }
    public abstract virtual float get_LastMarginBottom();
    public abstract virtual void set_LastMarginBottom(float value);
    public abstract virtual IList`1<string> GetRootTags();
}
public interface iTextSharp.tool.xml.css.apply.IPageSizeContainable {
    public Rectangle PageSize { get; }
    public abstract virtual Rectangle get_PageSize();
}
public class iTextSharp.tool.xml.css.apply.LineSeparatorCssApplier : CssApplier`1<LineSeparator> {
    public virtual LineSeparator Apply(LineSeparator ls, Tag t, IPageSizeContainable psc);
    public virtual LineSeparator Apply(LineSeparator ls, Tag t, IMarginMemory mm, IPageSizeContainable psc, HtmlPipelineContext ctx);
}
public class iTextSharp.tool.xml.css.apply.ListStyleTypeCssApplier : CssApplier`1<List> {
    private CssUtils utils;
    private static ILogger LOG;
    private static ListStyleTypeCssApplier();
    public virtual List Apply(List list, Tag t, HtmlPipelineContext context);
    public virtual List Apply(List lst, Tag t, IMarginMemory configuration, IPageSizeContainable psc, HtmlPipelineContext context);
    private void SynchronizeSymbol(float fontSize, List lst, BaseColor color);
    private void ShrinkSymbol(List lst, float fontSize, BaseColor color);
}
public class iTextSharp.tool.xml.css.apply.MaxLeadingAndSize : object {
    private CssUtils utils;
    private FontSizeTranslator fontSizeTranslator;
    private float largestLeading;
    private float largestFont;
    public float GetLargestLeading();
    public float GetLargestFont();
    public void SetVariablesBasedOnChildren(Tag t);
    public void SetLeading(Tag tag);
    public float GetLargestFontFromChildren(IList`1<Tag> children);
    private float GetLargestLeadingFromChildren(IList`1<Tag> children);
    public float CalculateLeading(Tag t);
}
public class iTextSharp.tool.xml.css.apply.NoNewLineParagraphCssApplier : CssApplier`1<NoNewLineParagraph> {
    private CssUtils utils;
    public virtual NoNewLineParagraph Apply(NoNewLineParagraph p, Tag t, IMarginMemory configuration);
    public virtual NoNewLineParagraph Apply(NoNewLineParagraph p, Tag t, IMarginMemory configuration, IPageSizeContainable psc, HtmlPipelineContext ctx);
}
public class iTextSharp.tool.xml.css.apply.ParagraphCssApplier : CssApplier`1<Paragraph> {
    private CssAppliers appliers;
    public ParagraphCssApplier(CssAppliers appliers);
    public virtual Paragraph Apply(Paragraph p, Tag t, IMarginMemory configuration);
    public virtual Paragraph Apply(Paragraph p, Tag t, IMarginMemory configuration, IPageSizeContainable psc, HtmlPipelineContext ctx);
}
public static class iTextSharp.tool.xml.css.CSS : object {
    private static Dictionary`2<string, int> cssAlignMap;
    private static string Default;
    private static CSS();
    public static int GetElementAlignment(string cssAlignment);
}
public class iTextSharp.tool.xml.css.CssFileImpl : object {
    private IList`1<CssRule> rules;
    private bool persistent;
    public virtual bool Add(string selector, IDictionary`2<string, string> props);
    public virtual IList`1<CssRule> Get(Tag t);
    public virtual bool IsPersistent();
    public virtual void IsPersistent(bool isPeristent);
}
public class iTextSharp.tool.xml.css.CssFileProcessor : object {
    private ICssFile css;
    private CssStateController controller;
    public virtual void Process(int i);
    public virtual ICssFile GetCss();
}
public class iTextSharp.tool.xml.css.CssFilesImpl : object {
    private IList`1<ICssFile> files;
    private CssUtils utils;
    public CssFilesImpl(ICssFile css);
    public virtual bool HasFiles();
    public virtual IDictionary`2<string, string> GetCSS(Tag t);
    public virtual void PopulateCss(Tag t, IDictionary`2<string, string> aggregatedProps);
    public virtual void PopulateOneCss(IDictionary`2<string, string> aggregatedProps, IDictionary`2<string, string> cssDeclaration);
    public virtual void Add(ICssFile css);
    public virtual void Clear();
}
public class iTextSharp.tool.xml.css.CSSFileWrapper : object {
    private bool persistent;
    private ICssFile css;
    public CSSFileWrapper(ICssFile css, bool b);
    public virtual bool Add(string selector, IDictionary`2<string, string> props);
    public virtual IList`1<CssRule> Get(Tag t);
    public virtual bool IsPersistent();
    public virtual void IsPersistent(bool b);
}
public class iTextSharp.tool.xml.css.CssRule : object {
    private CssSelector selector;
    private IDictionary`2<string, string> normalDeclarations;
    private IDictionary`2<string, string> importantDeclarations;
    private static Regex importantMatcher;
    public CssSelector Selector { get; }
    public IDictionary`2<string, string> NormalDeclarations { get; }
    public IDictionary`2<string, string> ImportantDeclarations { get; }
    public CssRule(IList`1<ICssSelectorItem> selector, IDictionary`2<string, string> declarations);
    private static CssRule();
    public virtual CssSelector get_Selector();
    public virtual IDictionary`2<string, string> get_NormalDeclarations();
    public virtual IDictionary`2<string, string> get_ImportantDeclarations();
    public virtual string ToString();
    public sealed virtual int CompareTo(CssRule o);
}
public class iTextSharp.tool.xml.css.CssSelector : object {
    private IList`1<ICssSelectorItem> selectorItems;
    public CssSelector(IList`1<ICssSelectorItem> selector);
    public virtual bool Matches(Tag t);
    private bool Matches(Tag t, int index);
    public virtual int CalculateSpecifity();
    public virtual string ToString();
}
public class iTextSharp.tool.xml.css.CssUtils : object {
    private static string COLOR;
    private static string STYLE;
    private static string WIDTH;
    private static string BORDER2;
    private static string _0_LEFT_1;
    private static string _0_RIGHT_1;
    private static string _0_BOTTOM_1;
    private static string _0_TOP_1;
    private static CssUtils instance;
    private static object syncroot;
    public static int DEFAULT_FONT_SIZE_PT;
    private static IDictionary`2<string, object> borderwidth;
    private static String[] bwc;
    private static IDictionary`2<string, object> borderstyle;
    private static String[] bsc;
    private static IDictionary`2<string, object> backgroundPositions;
    private static String[] bgc;
    public static Char[] whitespace;
    private static Regex numerics1;
    private static Regex numerics2;
    private static CssUtils();
    public static CssUtils GetInstance();
    public virtual IDictionary`2<string, string> ParseBoxValues(string box, string pre, string post);
    public virtual IDictionary`2<string, string> ParseBoxValues(string box, string pre, string post, string preKey);
    public static void MapPutAll(IDictionary`2<string, string> dest, IDictionary`2<string, string> src);
    public static void MapPutAll(IDictionary`2<string, object> dest, IDictionary`2<string, object> src);
    public virtual IDictionary`2<string, string> ParseBorder(string border);
    public virtual IDictionary`2<string, string> ParseBorder(string border, string borderKey);
    public virtual string StripDoubleSpacesAndTrim(string str);
    public virtual string StripDoubleSpacesTrimAndToLowerCase(string str);
    public virtual IDictionary`2<string, string> ProcessBackground(string background);
    public virtual IDictionary`2<string, string> ProcessListStyle(string listStyle);
    public virtual IDictionary`2<string, string> ProcessFont(string font);
    public virtual float CheckMetricStyle(Tag t, string style);
    public virtual Nullable`1<float> CheckMetricStyle(IDictionary`2<string, string> css, string style);
    public virtual bool IsMetricValue(string value);
    public virtual bool IsRelativeValue(string value);
    public virtual bool IsNumericValue(string value);
    public virtual float ParseValueToPt(string value, float baseValue);
    public virtual float ParseRelativeValue(string relativeValue, float baseValue);
    public virtual float ParsePxInCmMmPcToPt(string length, string defaultMetric);
    public virtual float ParsePxInCmMmPcToPt(string length);
    public virtual int DeterminePositionBetweenValueAndUnit(string str);
    public virtual float GetLeftAndRightMargin(Tag t, float pageWidth);
    public virtual string ExtractUrl(string url);
    public virtual float ValidateTextHeight(IDictionary`2<string, string> css, float textHeight);
    public virtual float CalculateMarginTop(string value, float largestFont, IMarginMemory configuration);
    public virtual float CalculateMarginTop(float value, IMarginMemory configuration);
    public virtual string TrimAndRemoveQuoutes(string s);
    public virtual String[] SplitComplexCssStyle(string s);
}
public class iTextSharp.tool.xml.css.DefaultCssInheritanceRules : object {
    private static IList`1<string> GLOBAL;
    private static IList`1<string> PARENT_TO_TABLE;
    private static IList`1<string> TABLE_IN_ROW;
    private static IList`1<string> TD_TO_CONTENT;
    private static List`1<string> DIV_TO_CONTENT;
    private static DefaultCssInheritanceRules();
    public virtual bool InheritCssTag(string tag);
    public virtual bool InheritCssSelector(Tag tag, string key);
}
public class iTextSharp.tool.xml.css.FontSizeTranslator : object {
    public static float DEFAULT_FONT_SIZE;
    private static CssUtils utils;
    private static FontSizeTranslator myself;
    private static object syncroot;
    private static FontSizeTranslator();
    public static FontSizeTranslator GetInstance();
    public virtual float TranslateFontSize(Tag tag);
    public virtual float GetFontSize(Tag tag);
}
public class iTextSharp.tool.xml.css.HeightCalculator : object {
    private CssUtils utils;
    public virtual Nullable`1<float> GetHeight(Tag tag, float pageHeight);
}
public interface iTextSharp.tool.xml.css.ICssFile {
    public abstract virtual bool Add(string selector, IDictionary`2<string, string> props);
    public abstract virtual IList`1<CssRule> Get(Tag t);
    public abstract virtual bool IsPersistent();
    public abstract virtual void IsPersistent(bool b);
}
public interface iTextSharp.tool.xml.css.ICssFiles {
    public abstract virtual bool HasFiles();
    public abstract virtual IDictionary`2<string, string> GetCSS(Tag t);
    public abstract virtual void Add(ICssFile css);
    public abstract virtual void Clear();
}
public interface iTextSharp.tool.xml.css.ICssInheritanceRules {
    public abstract virtual bool InheritCssTag(string tag);
    public abstract virtual bool InheritCssSelector(Tag tag, string key);
}
public interface iTextSharp.tool.xml.css.ICssSelectorItem {
    public char Separator { get; }
    public int Specificity { get; }
    public abstract virtual bool Matches(Tag t);
    public abstract virtual char get_Separator();
    public abstract virtual int get_Specificity();
}
public class iTextSharp.tool.xml.css.parser.CssSelectorParser : object {
    private static string selectorPatternString;
    private static Regex selectorPattern;
    private static int a;
    private static int b;
    private static int c;
    private static CssSelectorParser();
    public static IList`1<ICssSelectorItem> CreateCssSelector(string selector);
}
public class iTextSharp.tool.xml.css.parser.CssStateController : object {
    private IState current;
    private IState previous;
    private IState commentEnd;
    private IState commentStart;
    private IState commentInside;
    private StringBuilder buffer;
    private IState properties;
    private IState unknown;
    private string currentSelector;
    private IState rule;
    private CssUtils utils;
    private ICssFile css;
    public CssStateController(ICssFile file);
    public virtual void Append(char c);
    public virtual void Previous();
    public virtual void Process(char c);
    private void ProcessProps(string props);
    private void SetState(IState state);
    private void SetPrevious();
    public virtual void StateCommentEnd();
    public virtual void StateCommentInside();
    public virtual void StateCommentStart();
    public virtual void StateProperties();
    public virtual void StateUnknown();
    public virtual void StateRule();
    public virtual void StoreSelector();
    public virtual void StoreProperties();
}
public interface iTextSharp.tool.xml.css.parser.IState {
    public abstract virtual void Process(char c);
}
public class iTextSharp.tool.xml.css.parser.state.CommentEnd : object {
    private CssStateController controller;
    public CommentEnd(CssStateController controller);
    public virtual void Process(char c);
}
public class iTextSharp.tool.xml.css.parser.state.CommentInside : object {
    private CssStateController controller;
    public CommentInside(CssStateController cssStateController);
    public virtual void Process(char c);
}
public class iTextSharp.tool.xml.css.parser.state.CommentStart : object {
    private CssStateController controller;
    public CommentStart(CssStateController controller);
    public virtual void Process(char c);
}
public class iTextSharp.tool.xml.css.parser.state.Properties : object {
    private CssStateController controller;
    public Properties(CssStateController cssStateController);
    public virtual void Process(char c);
}
public class iTextSharp.tool.xml.css.parser.state.Rule : object {
    private CssStateController controller;
    private bool isCss3AtRule;
    private int openParenthesesCount;
    public Rule(CssStateController cssStateController);
    public virtual void Process(char c);
}
public class iTextSharp.tool.xml.css.parser.state.Unknown : object {
    private CssStateController controller;
    public Unknown(CssStateController cssStateController);
    public virtual void Process(char c);
}
public class iTextSharp.tool.xml.css.StyleAttrCSSResolver : object {
    public static string STYLE;
    private CssUtils utils;
    private ICssInheritanceRules inherit;
    private ICssFiles cssFiles;
    private IFileRetrieve retrieve;
    private static Char[] splitColon;
    unknown IFileRetrieve FileRetrieve {public set; }
    public StyleAttrCSSResolver(ICssFiles cssFiles);
    public StyleAttrCSSResolver(ICssFiles cssFiles, CssUtils utils);
    public StyleAttrCSSResolver(ICssInheritanceRules rules, ICssFiles cssFiles, CssUtils utils);
    public StyleAttrCSSResolver(ICssInheritanceRules rules, ICssFiles cssFiles, CssUtils utils, IFileRetrieve fileRetrieve);
    public StyleAttrCSSResolver(ICssFiles cssFiles, IFileRetrieve r);
    private static StyleAttrCSSResolver();
    public virtual void ResolveStyles(Tag t);
    private string MergeTextDecorationRules(string oldRule, string newRule);
    private void SplitRules(IDictionary`2<string, string> css, string key, string value);
    public virtual void SetCssInheritance(ICssInheritanceRules cssInheritanceRules);
    private bool CanInherite(Tag t, string property);
    private bool MustInherit(string tag);
    public virtual void AddCss(string content, string charSet, bool isPersistent);
    public virtual void AddCssFile(string href, bool isPersistent);
    public virtual void AddCss(ICssFile file);
    public virtual void AddCss(string content, bool isPersistent);
    public virtual void SetCssInheritanceRules(ICssInheritanceRules inherit);
    public virtual void set_FileRetrieve(IFileRetrieve value);
    public virtual ICSSResolver Clear();
}
public class iTextSharp.tool.xml.css.WidthCalculator : object {
    private CssUtils utils;
    private static float TOLERANCE;
    public virtual float GetWidth(Tag tag, IList`1<string> rootTags, float pageWidth);
    public virtual float GetWidth(Tag tag, IList`1<string> rootTags, float pageWidth, float initialTotalWidth);
}
public class iTextSharp.tool.xml.ElementList : List`1<IElement> {
    private static long serialVersionUID;
    public virtual void Add(IWritable w);
}
public class iTextSharp.tool.xml.exceptions.CssResolverException : Exception {
    public CssResolverException(string message, Exception cause);
    public CssResolverException(string message);
    public CssResolverException(Exception cause);
    protected CssResolverException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.exceptions.LocaleMessages : object {
    public static string UNSUPPORTED_CHARSET;
    public static string INVALID_NESTED_TAG;
    public static string NO_CUSTOM_CONTEXT;
    public static string CUSTOMCONTEXT_404_CONTINUE;
    public static string UNSUPPORTED_CLONING;
    public static string NO_TAGPROCESSOR;
    public static string NO_SIBLING;
    public static string PIPELINE_AUTODOC;
    public static string STACK_404;
    public static string OWN_CONTEXT_404;
    public static string ELEMENT_NOT_ADDED;
    public static string ELEMENT_NOT_ADDED_EXC;
    public static string IMG_SRC_NOTCONVERTED;
    public static string HTML_IMG_USE;
    public static string HTML_IMG_RETRIEVE_FAIL;
    public static string ADD_HEADER;
    public static string HEADER_BM_DISABLED;
    public static string A_LOCALGOTO;
    public static string A_EXTERNAL;
    public static string A_SETLOCALGOTO;
    public static string SPACEHACK;
    public static string COLSPAN;
    public static string LINK_404;
    public static string META_CC;
    public static string META_404;
    public static string STYLE_NOTPARSED;
    private static LocaleMessages myself;
    private LocalizedResource bundle;
    public LocaleMessages(CultureInfo locale);
    private static LocaleMessages();
    public static LocaleMessages GetInstance();
    public virtual string GetMessage(string key);
}
public class iTextSharp.tool.xml.exceptions.NoDataException : Exception {
    public NoDataException(string message);
    public NoDataException(Exception cause);
    public NoDataException(string message, Exception cause);
    protected NoDataException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.exceptions.NoSiblingException : Exception {
    public NoSiblingException(string s);
    public NoSiblingException(string s, Exception e);
    protected NoSiblingException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.exceptions.NoTagProcessorException : Exception {
    public NoTagProcessorException(string tag);
    public NoTagProcessorException(string tag, Exception e);
    protected NoTagProcessorException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.exceptions.NotImplementedException : Exception {
    public NotImplementedException(string arg0);
    public NotImplementedException(Exception arg0);
    public NotImplementedException(string arg0, Exception arg1);
    protected NotImplementedException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.exceptions.RuntimeWorkerException : Exception {
    public RuntimeWorkerException(string message, Exception cause);
    public RuntimeWorkerException(string message);
    public RuntimeWorkerException(Exception cause);
    protected RuntimeWorkerException(SerializationInfo info, StreamingContext context);
}
public abstract class iTextSharp.tool.xml.html.AbstractTagProcessor : object {
    private FontSizeTranslator fontsizeTrans;
    private CssAppliers cssAppliers;
    private HashSet2`1<string> ignoreDirAttribute;
    private IList`1<Tag> tree;
    public virtual ICSSResolver GetCSSResolver(IWorkerContext context);
    public virtual HtmlPipelineContext GetHtmlPipelineContext(IWorkerContext ctx);
    public sealed virtual IList`1<IElement> StartElement(IWorkerContext ctx, Tag tag);
    public virtual IList`1<IElement> Start(IWorkerContext ctx, Tag tag);
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    private string GetParentDirection();
    protected virtual int GetRunDirection(Tag tag);
    protected virtual List`1<IElement> TextContent(IWorkerContext ctx, Tag tag, string content);
    public sealed virtual IList`1<IElement> EndElement(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual bool IsStackOwner();
    public virtual IList`1<IElement> CurrentContentToParagraph(IList`1<IElement> currentContent, bool addNewLines, bool applyCSS, Tag tag, IWorkerContext ctx);
    public IList`1<IElement> CurrentContentToParagraph(IList`1<IElement> currentContent, bool addNewLines);
    public virtual void SetCssAppliers(CssAppliers cssAppliers);
    public virtual CssAppliers GetCssAppliers();
    protected virtual Paragraph CreateParagraph();
    protected void DoRtlIndentCorrections(IIndentable p);
    protected void InvertTextAlignForParagraph(Paragraph p);
    protected void InvertTextAlignForParagraph(NoNewLineParagraph p);
    protected void UpdateParagraphFontIfNeeded(Phrase p, IElement child);
}
public class iTextSharp.tool.xml.html.Anchor : AbstractTagProcessor {
    private static ILogger LOGGER;
    private static Anchor();
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.Body : AbstractTagProcessor {
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> Start(IWorkerContext ctx, Tag tag);
}
public class iTextSharp.tool.xml.html.Break : AbstractTagProcessor {
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
}
public abstract class iTextSharp.tool.xml.html.CssApplier`1 : object {
    public abstract virtual T Apply(T e, Tag t, IMarginMemory mm, IPageSizeContainable psc, HtmlPipelineContext ctx);
    private sealed virtual override IElement iTextSharp.tool.xml.html.ICssApplier.Apply(IElement e, Tag t, IMarginMemory mm, IPageSizeContainable psc, HtmlPipelineContext ctx);
}
public interface iTextSharp.tool.xml.html.CssAppliers {
    public ChunkCssApplier ChunkCssAplier { get; public set; }
    public abstract virtual IElement Apply(IElement e, Tag t, IMarginMemory mm, IPageSizeContainable psc, HtmlPipelineContext ctx);
    public abstract virtual IElement Apply(IElement e, Tag t, HtmlPipelineContext ctx);
    public abstract virtual ChunkCssApplier get_ChunkCssAplier();
    public abstract virtual void set_ChunkCssAplier(ChunkCssApplier value);
    public abstract virtual CssAppliers Clone();
}
public interface iTextSharp.tool.xml.html.CssAppliersAware {
    public abstract virtual void SetCssAppliers(CssAppliers cssAppliers);
    public abstract virtual CssAppliers GetCssAppliers();
}
public class iTextSharp.tool.xml.html.CssAppliersImpl : object {
    private IDictionary`2<Type, ICssApplier> map;
    public ChunkCssApplier ChunkCssAplier { get; public set; }
    public CssAppliersImpl(IFontProvider fontProvider);
    public void PutCssApplier(Type t, ICssApplier c);
    public ICssApplier GetCssApplier(Type t);
    public virtual IElement Apply(IElement e, Tag t, IMarginMemory mm, IPageSizeContainable psc, HtmlPipelineContext ctx);
    public virtual IElement Apply(IElement e, Tag t, HtmlPipelineContext ctx);
    public virtual ChunkCssApplier GetChunkCssAplier();
    public virtual ChunkCssApplier get_ChunkCssAplier();
    public virtual void set_ChunkCssAplier(ChunkCssApplier value);
    public virtual CssAppliers Clone();
    protected virtual CssAppliersImpl GetClonedObject();
}
public class iTextSharp.tool.xml.html.DefaultTagProcessorFactory : object {
    private IDictionary`2<string, FactoryObject> map;
    protected virtual ITagProcessor Load(string className);
    public virtual ITagProcessor GetProcessor(string tag, string nameSpace);
    public virtual void AddProcessor(string tag, string className);
    public virtual void AddProcessor(string tag, ITagProcessor processor);
    public virtual void AddProcessor(ITagProcessor processor, String[] tags);
    public virtual void AddProcessor(string className, String[] tags);
    public virtual void RemoveProcessor(string tag);
}
public class iTextSharp.tool.xml.html.Div : AbstractTagProcessor {
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    private void invertTextAlignForDiv(PdfDiv div);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.DummyTagProcessor : object {
    public virtual IList`1<IElement> StartElement(IWorkerContext ctx, Tag tag);
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> EndElement(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.head.Link : AbstractTagProcessor {
    private static ILogger LOG;
    private static Link();
    public virtual IList`1<IElement> Start(IWorkerContext ctx, Tag tag);
}
public class iTextSharp.tool.xml.html.head.Meta : AbstractTagProcessor {
    private static ILogger LOGGER;
    private static Meta();
    public virtual IList`1<IElement> Start(IWorkerContext ctx, Tag tag);
}
public class iTextSharp.tool.xml.html.head.Style : AbstractTagProcessor {
    private static ILogger LOG;
    private static Style();
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
}
public class iTextSharp.tool.xml.html.head.Title : AbstractTagProcessor {
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
}
public class iTextSharp.tool.xml.html.head.XML : AbstractTagProcessor {
    private static ILogger LOGGER;
    private static XML();
    public virtual IList`1<IElement> Start(IWorkerContext ctx, Tag tag);
}
public class iTextSharp.tool.xml.html.Header : AbstractTagProcessor {
    private static ILogger LOGGER;
    private static Header();
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    private PdfName getHeaderRole(int level);
    private int GetLevel(Tag tag);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.HeaderNode : object {
    private int level;
    private PdfOutline outline;
    private HeaderNode parent;
    public HeaderNode Parent { get; }
    public int Level { get; }
    public PdfOutline Outline { get; }
    public HeaderNode(int level, PdfOutline outline, HeaderNode parent);
    public virtual HeaderNode get_Parent();
    public virtual int get_Level();
    public virtual PdfOutline get_Outline();
}
public class iTextSharp.tool.xml.html.HorizontalRule : AbstractTagProcessor {
    public virtual IList`1<IElement> Start(IWorkerContext ctx, Tag tag);
}
public class iTextSharp.tool.xml.html.HTML : object {
}
public static class iTextSharp.tool.xml.html.HTMLUtils : object {
    private static List`1<Chunk> Sanitize(string str, bool preserveWhiteSpace, bool replaceNonBreakableSpaces);
    public static List`1<Chunk> Sanitize(string str, bool preserveWhiteSpace);
    public static List`1<Chunk> SanitizeInline(string str, bool preserveWhiteSpace);
    public static List`1<Chunk> SanitizeInline(string str, bool preserveWhiteSpace, bool replaceNonBreakableSpaces);
    public static bool IsWhiteSpace(char c);
}
public interface iTextSharp.tool.xml.html.ICssApplier {
    public abstract virtual IElement Apply(IElement e, Tag t, IMarginMemory mm, IPageSizeContainable psc, HtmlPipelineContext ctx);
}
public class iTextSharp.tool.xml.html.Image : AbstractTagProcessor {
    private CssUtils utils;
    private static ILogger logger;
    private static Image();
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual bool IsStackOwner();
}
public interface iTextSharp.tool.xml.html.ITagProcessor {
    public abstract virtual IList`1<IElement> StartElement(IWorkerContext ctx, Tag tag);
    public abstract virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public abstract virtual IList`1<IElement> EndElement(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public abstract virtual bool IsStackOwner();
}
public interface iTextSharp.tool.xml.html.ITagProcessorFactory {
    public abstract virtual ITagProcessor GetProcessor(string tag, string nameSpace);
    public abstract virtual void AddProcessor(ITagProcessor processor, String[] tags);
    public abstract virtual void RemoveProcessor(string tag);
}
public class iTextSharp.tool.xml.html.NonSanitizedTag : AbstractTagProcessor {
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
}
public class iTextSharp.tool.xml.html.OrderedUnorderedList : AbstractTagProcessor {
    private static FontSizeTranslator fst;
    private static CssUtils utils;
    private static ILogger LOG;
    private static OrderedUnorderedList();
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    private IList`1<IElement> PopulateList(IList`1<IElement> currentContent);
    private float CalculateTopOrBottomSpacing(bool isTop, bool storeMarginBottom, Tag tag, Tag child, IWorkerContext ctx);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.OrderedUnorderedListItem : AbstractTagProcessor {
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.ParaGraph : AbstractTagProcessor {
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    private Tag GetLastChild(Tag tag);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    protected virtual void ProcessParagraphItems(IWorkerContext ctx, Tag tag, IList`1<IElement> paragraphItems, IList`1<IElement> l);
    protected virtual void ProcessListItems(IWorkerContext ctx, Tag tag, IList`1<ListItem> listItems, IList`1<IElement> l);
    private void AddTabIntervalContent(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent, Paragraph p, string value);
    private void AddTabStopsContent(IList`1<IElement> currentContent, Paragraph p, string value);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.pdfelement.HtmlCell : PdfPCell {
    private float fixedWidth;
    private TableStyleValues values;
    public float FixedWidth { get; public set; }
    public TableStyleValues CellValues { get; public set; }
    public HtmlCell(PdfPCell pdfPCell, bool b);
    public HtmlCell(PdfPCell pdfPCell);
    public virtual float get_FixedWidth();
    public virtual void set_FixedWidth(float value);
    public virtual TableStyleValues get_CellValues();
    public virtual void set_CellValues(TableStyleValues value);
}
public class iTextSharp.tool.xml.html.pdfelement.NoNewLineParagraph : Phrase {
    protected internal int alignment;
    protected internal float indentationLeft;
    protected internal float indentationRight;
    private float firstLineIndent;
    protected internal float spacingBefore;
    protected internal float spacingAfter;
    private float extraParagraphSpace;
    protected internal bool keeptogether;
    public int Alignment { get; public set; }
    public float IndentationLeft { get; public set; }
    public float IndentationRight { get; public set; }
    public float FirstLineIndent { get; public set; }
    public float SpacingBefore { get; public set; }
    public float SpacingAfter { get; public set; }
    public bool KeepTogether { get; public set; }
    public float ExtraParagraphSpace { get; public set; }
    public NoNewLineParagraph(float leading);
    public NoNewLineParagraph(Chunk chunk);
    public NoNewLineParagraph(float leading, Chunk chunk);
    public NoNewLineParagraph(string str);
    public NoNewLineParagraph(string str, Font font);
    public NoNewLineParagraph(float leading, string str);
    public NoNewLineParagraph(float leading, string str, Font font);
    public NoNewLineParagraph(Phrase phrase);
    public virtual bool Add(IElement o);
    public virtual void set_Alignment(int value);
    public virtual int get_Alignment();
    public virtual void set_IndentationLeft(float value);
    public virtual float get_IndentationLeft();
    public virtual void set_IndentationRight(float value);
    public virtual float get_IndentationRight();
    public virtual void set_FirstLineIndent(float value);
    public virtual float get_FirstLineIndent();
    public virtual void set_SpacingBefore(float value);
    public virtual float get_SpacingBefore();
    public virtual void set_SpacingAfter(float value);
    public virtual float get_SpacingAfter();
    public virtual void set_KeepTogether(bool value);
    public virtual bool get_KeepTogether();
    public virtual void set_ExtraParagraphSpace(float value);
    public virtual float get_ExtraParagraphSpace();
}
public class iTextSharp.tool.xml.html.pdfelement.TabbedChunk : Chunk {
    private int tabCount;
    private string alignment;
    public int TabCount { get; public set; }
    public string Alignment { get; public set; }
    public TabbedChunk(string content);
    public TabbedChunk(VerticalPositionMark verticalPositionMark, float parseToPt, bool b, string alignment);
    public TabbedChunk(VerticalPositionMark verticalPositionMark, float parseToPt, bool b);
    public virtual int get_TabCount();
    public virtual void set_TabCount(int value);
    public virtual string get_Alignment();
    public virtual void set_Alignment(string value);
}
public class iTextSharp.tool.xml.html.Span : AbstractTagProcessor {
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.table.CellSpacingEvent : object {
    private TableStyleValues styleValues;
    public CellSpacingEvent(TableStyleValues styleValues);
    public virtual void CellLayout(PdfPCell cell, Rectangle position, PdfContentByte[] canvases);
}
public class iTextSharp.tool.xml.html.table.Table : AbstractTagProcessor {
    public static float DEFAULT_CELL_BORDER_WIDTH;
    private static ILogger LOG;
    private static CssUtils utils;
    private static FontSizeTranslator fst;
    private static Table();
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    protected internal virtual PdfPTable IntPdfPTable(int numberOfColumn);
    private float CalculateTargetWidth(Tag tag, Single[] columnWidths, float outerWidth, IWorkerContext ctx);
    private void WidenLastCell(IList`1<TableRowElement> tableRows, float horBorderSpacing);
    public static TableStyleValues SetStyleValues(Tag tag);
    public static TableStyleValues SetBorderAttributeForCell(Tag tag);
    public static float GetBorderOrCellSpacing(bool getHor, IDictionary`2<string, string> css, IDictionary`2<string, string> attributes);
    private Single[] SetCellWidthAndWidestWord(HtmlCell cell);
    private float CalculateDivWidestElementWidth(List`1<IElement> divContent);
    private float GetTableWidth(Single[] widths, float outerWidth);
    private float GetTableOuterWidth(Tag tag, float horBorderSpacing, IWorkerContext ctx);
    private float GetCellStartWidth(HtmlCell cell);
    private void SetVerticalMargin(PdfPTable table, Tag t, TableStyleValues values, IWorkerContext ctx);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.table.TableBorderEvent : object {
    private TableStyleValues styleValues;
    public TableStyleValues TableStyleValues { get; }
    public TableBorderEvent(TableStyleValues styleValues);
    public virtual void TableLayout(PdfPTable table, Single[][] width, Single[] height, int headerRows, int rowStart, PdfContentByte[] canvas);
    public virtual TableStyleValues get_TableStyleValues();
}
public class iTextSharp.tool.xml.html.table.TableData : AbstractTagProcessor {
    public virtual IList`1<IElement> Content(IWorkerContext ctx, Tag tag, string content);
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual bool IsStackOwner();
    protected void ProcessChunkItems(IList`1<IElement> chunks, HtmlCell cell);
    protected void ProcessListItems(IWorkerContext ctx, Tag tag, IList`1<ListItem> listItems, HtmlCell cell);
}
public class iTextSharp.tool.xml.html.table.TableRow : AbstractTagProcessor {
    public virtual IList`1<IElement> End(IWorkerContext ctx, Tag tag, IList`1<IElement> currentContent);
    public virtual bool IsStackOwner();
}
public class iTextSharp.tool.xml.html.table.TableRowElement : object {
    private Place place;
    private IList`1<HtmlCell> content;
    public int Type { get; }
    public IList`1<Chunk> Chunks { get; }
    public IList`1<HtmlCell> Content { get; }
    public Place RowPlace { get; }
    public TableRowElement(IList`1<IElement> currentContent, Place place);
    public virtual bool Process(IElementListener listener);
    public virtual int get_Type();
    public virtual bool IsContent();
    public virtual bool IsNestable();
    public virtual IList`1<Chunk> get_Chunks();
    public virtual IList`1<HtmlCell> get_Content();
    public virtual Place get_RowPlace();
}
public class iTextSharp.tool.xml.html.table.TableStyleValues : object {
    private float horBorderSpacing;
    private float verBorderSpacing;
    private Nullable`1<float> borderLeftWidth;
    private BaseColor borderLeftColor;
    private Nullable`1<float> borderRightWidth;
    private BaseColor borderRightColor;
    private Nullable`1<float> borderTopWidth;
    private BaseColor borderTopColor;
    private Nullable`1<float> borderBottomWidth;
    private BaseColor borderBottomColor;
    private bool isLastInRow;
    private BaseColor background;
    public float HorBorderSpacing { get; public set; }
    public float VerBorderSpacing { get; public set; }
    public float BorderWidthLeft { get; public set; }
    public BaseColor BorderColorLeft { get; public set; }
    public float BorderWidthRight { get; public set; }
    public BaseColor BorderColorRight { get; public set; }
    public float BorderWidthTop { get; public set; }
    public BaseColor BorderColorTop { get; public set; }
    public float BorderWidthBottom { get; public set; }
    public BaseColor BorderColorBottom { get; public set; }
    public bool IsLastInRow { get; public set; }
    public BaseColor Background { get; public set; }
    unknown float BorderWidth {public set; }
    unknown BaseColor BorderColor {public set; }
    public virtual float get_HorBorderSpacing();
    public virtual void set_HorBorderSpacing(float value);
    public virtual float get_VerBorderSpacing();
    public virtual void set_VerBorderSpacing(float value);
    public virtual float get_BorderWidthLeft();
    public virtual void set_BorderWidthLeft(float value);
    public virtual Nullable`1<float> GetBorderWidthLeft(bool defaultIfNotSet);
    public virtual BaseColor get_BorderColorLeft();
    public virtual void set_BorderColorLeft(BaseColor value);
    public virtual float get_BorderWidthRight();
    public virtual void set_BorderWidthRight(float value);
    public virtual Nullable`1<float> GetBorderWidthRight(bool defaultIfNotSet);
    public virtual BaseColor get_BorderColorRight();
    public virtual void set_BorderColorRight(BaseColor value);
    public virtual float get_BorderWidthTop();
    public virtual void set_BorderWidthTop(float value);
    public virtual Nullable`1<float> GetBorderWidthTop(bool defaultIfNotSet);
    public virtual BaseColor get_BorderColorTop();
    public virtual void set_BorderColorTop(BaseColor value);
    public virtual float get_BorderWidthBottom();
    public virtual void set_BorderWidthBottom(float value);
    public virtual Nullable`1<float> GetBorderWidthBottom(bool defaultIfNotSet);
    public virtual BaseColor get_BorderColorBottom();
    public virtual void set_BorderColorBottom(BaseColor value);
    public virtual bool get_IsLastInRow();
    public virtual void set_IsLastInRow(bool value);
    public virtual BaseColor get_Background();
    public virtual void set_Background(BaseColor value);
    public virtual void set_BorderWidth(float value);
    public virtual void set_BorderColor(BaseColor value);
}
public class iTextSharp.tool.xml.html.Tags : object {
    private static string defaultpackage;
    private static string dummyTagProcessor;
    private static string headers;
    private static string span;
    private static string nonSanitized;
    private static string paragraph;
    public static ITagProcessorFactory GetHtmlTagProcessorFactory();
}
public interface iTextSharp.tool.xml.ICustomContext {
}
public interface iTextSharp.tool.xml.IElementHandler {
    public abstract virtual void Add(IWritable w);
}
public interface iTextSharp.tool.xml.IPipeline {
    public abstract virtual IPipeline Init(IWorkerContext context);
    public abstract virtual IPipeline Open(IWorkerContext context, Tag t, ProcessObject po);
    public abstract virtual IPipeline Content(IWorkerContext context, Tag t, string content, ProcessObject po);
    public abstract virtual IPipeline Close(IWorkerContext context, Tag t, ProcessObject po);
    public abstract virtual IPipeline GetNext();
}
public interface iTextSharp.tool.xml.IWorkerContext {
    public abstract virtual ICustomContext Get(string key);
    public abstract virtual void Put(string contextKey, ICustomContext context);
    public abstract virtual void SetCurrentTag(Tag t);
    public abstract virtual Tag GetCurrentTag();
}
public interface iTextSharp.tool.xml.IWritable {
}
public class iTextSharp.tool.xml.net.exc.NoImageException : Exception {
    public NoImageException(string src);
    public NoImageException(string src, Exception e);
    protected NoImageException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.net.FileRetrieveImpl : object {
    private static ILogger LOGGER;
    private IList`1<string> rootdirs;
    private IList`1<string> urls;
    public FileRetrieveImpl(String[] strings);
    public FileRetrieveImpl(string rootdir);
    private static FileRetrieveImpl();
    public virtual void ProcessFromHref(string href, IReadingProcessor processor);
    private Uri DetectWithRootUrls(string href);
    public virtual void ProcessFromStream(Stream inp, IReadingProcessor processor);
    private void Read(IReadingProcessor processor, Stream inp);
    public virtual void AddRootDir(string dir);
    public virtual void AddURL(string url);
}
public interface iTextSharp.tool.xml.net.IFileRetrieve {
    public abstract virtual void ProcessFromHref(string href, IReadingProcessor processor);
    public abstract virtual void ProcessFromStream(Stream inp, IReadingProcessor processor);
}
public class iTextSharp.tool.xml.net.ImageRetrieve : object {
    private IImageProvider provider;
    private string resourceRootPath;
    public ImageRetrieve(string resourceRootPath, IImageProvider imageProvider);
    public ImageRetrieve(string resourceRootPath);
    public ImageRetrieve(IImageProvider imageProvider);
    public virtual Image RetrieveImage(string src);
    private Image TryRetrieveImageWithImageProvider(string src);
    private Uri GetImageUrl(string src);
}
public interface iTextSharp.tool.xml.net.IReadingProcessor {
    public abstract virtual void Process(int character);
}
public class iTextSharp.tool.xml.NoCustomContextException : Exception {
    public NoCustomContextException(string arg0);
    public NoCustomContextException(Exception arg0);
    public NoCustomContextException(string arg0, Exception arg1);
    protected NoCustomContextException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.parser.io.EncodingUtil : object {
    public static string GetDeclaredEncoding(string decl);
}
public interface iTextSharp.tool.xml.parser.io.IAppender {
    public abstract virtual IAppender Append(string str);
    public abstract virtual IAppender Append(char c);
}
public interface iTextSharp.tool.xml.parser.io.IParserMonitor {
    public abstract virtual void Read(Char[] c, int offset, int length);
}
public class iTextSharp.tool.xml.parser.io.MonitorInputReader : TextReader {
    private IParserMonitor monitor;
    private TextReader reader;
    public MonitorInputReader(TextReader reader, IParserMonitor monitor);
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual int Peek();
}
public class iTextSharp.tool.xml.parser.io.ParserListenerWriter : object {
    private IAppender writer;
    private bool formatted;
    public ParserListenerWriter(IAppender writer, bool formatted);
    public ParserListenerWriter(IAppender writer);
    public virtual void UnknownText(string str);
    public virtual void Text(string text);
    public virtual void StartElement(string currentTag, IDictionary`2<string, string> attributes, string ns);
    public virtual void EndElement(string curentTag, string ns);
    public virtual void Comment(string comment);
    public virtual void Init();
    public virtual void Close();
}
public interface iTextSharp.tool.xml.parser.IState {
    public abstract virtual void Process(char read);
}
public interface iTextSharp.tool.xml.parser.IXMLParserListener {
    public abstract virtual void StartElement(string tag, IDictionary`2<string, string> attributes, string ns);
    public abstract virtual void Text(string text);
    public abstract virtual void EndElement(string tag, string ns);
    public abstract virtual void UnknownText(string text);
    public abstract virtual void Comment(string comment);
    public abstract virtual void Init();
    public abstract virtual void Close();
}
public class iTextSharp.tool.xml.parser.state.AttributeValueState : object {
    private XMLParser parser;
    public AttributeValueState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.CdataState : object {
    private XMLParser parser;
    public CdataState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.CloseCommentState : object {
    private XMLParser parser;
    public CloseCommentState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.CloseStarCommentState : object {
    private XMLParser parser;
    public CloseStarCommentState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.ClosingTagState : object {
    private XMLParser parser;
    public ClosingTagState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.CommentState : object {
    private XMLParser parser;
    public CommentState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.DocTypeState : object {
    private XMLParser parser;
    public DocTypeState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.DoubleQuotedAttrValueState : object {
    private XMLParser parser;
    public DoubleQuotedAttrValueState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.InsideTagHTMLState : object {
    private XMLParser parser;
    private IList`1<string> noSanitize;
    private IList`1<string> ignoreLastChars;
    public InsideTagHTMLState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.InsideTagState : object {
    private XMLParser parser;
    public InsideTagState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.ProcessingInstructionEncounteredState : TagAttributeState {
    protected string name;
    public ProcessingInstructionEncounteredState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.SelfClosingTagState : object {
    private XMLParser parser;
    public SelfClosingTagState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.SingleQuotedAttrValueState : object {
    private XMLParser parser;
    public SingleQuotedAttrValueState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.SpecialCharState : object {
    private XMLParser parser;
    public SpecialCharState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.StarCommentState : object {
    private XMLParser parser;
    public StarCommentState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.TagAttributeState : object {
    protected XMLParser parser;
    public TagAttributeState(XMLParser parser);
    public virtual void Process(char character);
    protected virtual void CheckAttributeWithNoValue();
    protected internal virtual bool SetAttribute();
}
public class iTextSharp.tool.xml.parser.state.TagEncounteredState : object {
    private XMLParser parser;
    public TagEncounteredState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.UnknownState : object {
    private XMLParser parser;
    public UnknownState(XMLParser xmlParser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.UnquotedAttrState : object {
    private XMLParser parser;
    public UnquotedAttrState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.state.XmlState : object {
    private XMLParser parser;
    public XmlState(XMLParser parser);
    public virtual void Process(char character);
}
public class iTextSharp.tool.xml.parser.StateController : object {
    private IState unknown;
    private IState tagEncountered;
    private IState tagAttributes;
    private IState inTag;
    private IState attrValue;
    private IState singleQuoted;
    private IState doubleQuoted;
    private IState selfClosing;
    private IState specialChar;
    private IState closingTag;
    private IState comment;
    private IState closeComment;
    private IState cdata;
    private IState xml;
    private IState doctype;
    private IState unquoted;
    private IState processingInstruction;
    private XMLParser parser;
    private IState currentState;
    private IState previousState;
    private IState starComment;
    private IState closeStarComment;
    public StateController(XMLParser parser, bool isHTML);
    public virtual XMLParser SetState(IState state);
    public virtual XMLParser PreviousState();
    public virtual XMLParser Unknown();
    public virtual XMLParser TagEncountered();
    public virtual XMLParser TagAttributes();
    public virtual XMLParser InTag();
    public virtual XMLParser AttributeValue();
    public virtual XMLParser SingleQuotedAttr();
    public virtual XMLParser DoubleQuotedAttr();
    public virtual XMLParser ProcessingInstructions();
    public virtual XMLParser SelfClosing();
    public virtual XMLParser SpecialChar();
    public virtual XMLParser ClosingTag();
    public virtual XMLParser Comment();
    public virtual XMLParser CloseComment();
    public virtual XMLParser Cdata();
    public virtual XMLParser Xml();
    public virtual XMLParser Doctype();
    public virtual XMLParser UnquotedAttr();
    public virtual XMLParser StarComment();
    public virtual XMLParser CloseStarComment();
    public virtual IState GetPreviousState();
}
public enum iTextSharp.tool.xml.parser.TagState : Enum {
    public int value__;
    public static TagState OPEN;
    public static TagState CLOSE;
    public static TagState NONE;
}
public class iTextSharp.tool.xml.parser.XMLParser : object {
    private IState state;
    private StateController controller;
    private IList`1<IXMLParserListener> listeners;
    private XMLParserMemory memory;
    private IParserMonitor monitor;
    private string text;
    private TagState tagState;
    private Encoding charset;
    private bool decodeSpecialChars;
    public Encoding Charset { get; }
    public XMLParser(bool isHtml, Encoding charset);
    public XMLParser(IXMLParserListener listener, Encoding charset);
    public XMLParser(bool b, IXMLParserListener listener);
    public XMLParser(IXMLParserListener listener);
    public XMLParser(bool isHtml, IXMLParserListener listener, Encoding charset);
    public virtual XMLParser AddListener(IXMLParserListener pl);
    public virtual XMLParser RemoveListener(IXMLParserListener pl);
    public virtual void Parse(Stream inp);
    public virtual void Parse(Stream inp, bool detectEncoding);
    public virtual void Parse(Stream inp, Encoding charSet);
    public virtual void Parse(TextReader reader);
    private void ParseWithReader(TextReader reader);
    public virtual StreamReader DetectEncoding(Stream inp);
    protected internal virtual void SetState(IState state);
    public virtual XMLParser Append(char character);
    public virtual StateController SelectState();
    public virtual void UnknownData();
    public virtual void Flush();
    public virtual string Current();
    public virtual XMLParserMemory Memory();
    public virtual void StartElement();
    private void CallText();
    public virtual void EndElement();
    public virtual void Text(string bs);
    public virtual void Comment();
    public virtual char CurrentLastChar();
    public virtual string CurrentTag();
    public virtual TagState CurrentTagState();
    private void CurrentTagState(TagState state);
    public virtual void SetMonitor(IParserMonitor monitor);
    public virtual void SetDecodeSpecialChars(bool decodeSpecialChars);
    public virtual bool IsDecodeSpecialChars();
    public virtual string BufferToString();
    public virtual XMLParser Append(Char[] bytes);
    public virtual int BufferSize();
    public virtual XMLParser Append(string str);
    public virtual Encoding get_Charset();
}
public class iTextSharp.tool.xml.parser.XMLParserMemory : object {
    private string currentTag;
    private string currentAttr;
    private StringBuilder currentEntity;
    private StringBuilder comment;
    private StringBuilder baos;
    private StringBuilder processingInstruction;
    private IDictionary`2<string, string> attr;
    private string wsTag;
    private string currentNameSpace;
    private char lastChar;
    private bool isHtml;
    private string storedString;
    public char LastChar { get; public set; }
    public string StoredString { get; public set; }
    public XMLParserMemory(bool isHtml);
    public virtual void CurrentTag(string content);
    public virtual void CurrentAttr(string attr);
    public virtual bool HasCurrentAttribute();
    public virtual void PutCurrentAttrValue(string content);
    public virtual StringBuilder Current();
    public virtual string GetCurrentTag();
    public virtual IDictionary`2<string, string> GetAttributes();
    public virtual StringBuilder CurrentEntity();
    public virtual StringBuilder Comment();
    public virtual StringBuilder ProcessingInstruction();
    public virtual string WhitespaceTag();
    public virtual void WhitespaceTag(string tag);
    public virtual void Namespace(string ns);
    public virtual void FlushNameSpace();
    public virtual string GetNameSpace();
    public virtual void ResetBuffer();
    public virtual char get_LastChar();
    public virtual void set_LastChar(char value);
    public virtual string get_StoredString();
    public virtual void set_StoredString(string value);
}
public abstract class iTextSharp.tool.xml.pipeline.AbstractPipeline : object {
    private IPipeline next;
    public AbstractPipeline(IPipeline next);
    public virtual IPipeline GetNext();
    public virtual IPipeline Open(IWorkerContext context, Tag t, ProcessObject po);
    public virtual IPipeline Content(IWorkerContext ctx, Tag currentTag, string text, ProcessObject po);
    public virtual IPipeline Close(IWorkerContext context, Tag t, ProcessObject po);
    public virtual ICustomContext GetLocalContext(IWorkerContext context);
    public virtual void SetNext(IPipeline next);
    public virtual string GetContextKey();
    public virtual IPipeline Init(IWorkerContext context);
}
public class iTextSharp.tool.xml.pipeline.css.CssResolverPipeline : AbstractPipeline {
    private ICSSResolver resolver;
    public static string CSS_RESOLVER;
    public CssResolverPipeline(ICSSResolver cssResolver, IPipeline next);
    public virtual IPipeline Init(IWorkerContext context);
    public virtual IPipeline Open(IWorkerContext context, Tag t, ProcessObject po);
    public virtual void SetResolver(ICSSResolver resolver);
    public virtual string GetContextKey();
}
public interface iTextSharp.tool.xml.pipeline.css.ICSSResolver {
    unknown IFileRetrieve FileRetrieve {public set; }
    public abstract virtual void ResolveStyles(Tag t);
    public abstract virtual void AddCss(string content, string charSet, bool isPersistent);
    public abstract virtual void AddCssFile(string href, bool isPersistent);
    public abstract virtual void AddCss(string content, bool isPersistent);
    public abstract virtual void AddCss(ICssFile file);
    public abstract virtual void set_FileRetrieve(IFileRetrieve value);
    public abstract virtual ICSSResolver Clear();
}
[DefaultMemberAttribute("Item")]
public class iTextSharp.tool.xml.pipeline.ctx.MapContext : object {
    private IDictionary`2<string, object> map;
    public object Item { get; public set; }
    public object get_Item(string key);
    public void set_Item(string key, object value);
}
public class iTextSharp.tool.xml.pipeline.ctx.ObjectContext`1 : object {
    private T obj;
    public ObjectContext`1(T t);
    public virtual T Get();
}
public class iTextSharp.tool.xml.pipeline.ctx.WorkerContextImpl : object {
    private MapContext mc;
    private Tag tag;
    public virtual ICustomContext Get(string klass);
    public virtual void Put(string key, ICustomContext context);
    public virtual void SetCurrentTag(Tag t);
    public virtual Tag GetCurrentTag();
}
public class iTextSharp.tool.xml.pipeline.end.ElementHandlerPipeline : AbstractPipeline {
    private IElementHandler handler;
    public ElementHandlerPipeline(IElementHandler handler, IPipeline next);
    public virtual IPipeline Open(IWorkerContext context, Tag t, ProcessObject po);
    private void Consume(IWorkerContext context, ProcessObject po);
    public virtual IPipeline Content(IWorkerContext context, Tag t, string text, ProcessObject po);
    public virtual IPipeline Close(IWorkerContext context, Tag t, ProcessObject po);
}
public class iTextSharp.tool.xml.pipeline.end.PdfWriterPipeline : AbstractPipeline {
    private static ILogger LOG;
    private Document doc;
    private PdfWriter writer;
    public static string DOCUMENT;
    public static string WRITER;
    public static string CONTINUOUS;
    private bool continiously;
    public PdfWriterPipeline(IPipeline next);
    public PdfWriterPipeline(Document doc, PdfWriter writer);
    private static PdfWriterPipeline();
    public virtual IPipeline Init(IWorkerContext context);
    private void Write(IWorkerContext context, ProcessObject po);
    public virtual IPipeline Open(IWorkerContext context, Tag t, ProcessObject po);
    public virtual IPipeline Content(IWorkerContext context, Tag t, string text, ProcessObject po);
    public virtual IPipeline Close(IWorkerContext context, Tag t, ProcessObject po);
    public virtual void SetDocument(Document document);
    public virtual void SetWriter(PdfWriter writer);
}
public abstract class iTextSharp.tool.xml.pipeline.html.AbstractImageProvider : object {
    private IDictionary`2<string, Image> map;
    public virtual Image Retrieve(string src);
    public virtual void Store(string src, Image img);
    public virtual void Reset();
    public abstract virtual string GetImageRootPath();
}
public class iTextSharp.tool.xml.pipeline.html.AutoDocPipeline : AbstractPipeline {
    private IFileMaker fm;
    private string tag;
    private string opentag;
    private Rectangle pagesize;
    public AutoDocPipeline(IFileMaker fm, string tag, string opentag, Rectangle pagesize);
    public virtual IPipeline Open(IWorkerContext context, Tag t, ProcessObject po);
    public virtual IPipeline Close(IWorkerContext context, Tag t, ProcessObject po);
}
public class iTextSharp.tool.xml.pipeline.html.HtmlPipeline : AbstractPipeline {
    private HtmlPipelineContext hpc;
    public HtmlPipeline(HtmlPipelineContext hpc, IPipeline next);
    public virtual IPipeline Init(IWorkerContext context);
    public virtual IPipeline Open(IWorkerContext context, Tag t, ProcessObject po);
    public virtual IPipeline Content(IWorkerContext context, Tag t, string text, ProcessObject po);
    public virtual string GetContextKey();
    public virtual IPipeline Close(IWorkerContext context, Tag t, ProcessObject po);
    protected virtual void AddStackKeeper(Tag t, HtmlPipelineContext hcc, ITagProcessor tp);
}
public class iTextSharp.tool.xml.pipeline.html.HtmlPipelineContext : object {
    public static string BOOKMARK_TREE;
    public static string LAST_MARGIN_BOTTOM;
    private LinkedList`1<StackKeeper> queue;
    private bool acceptUnknown;
    private ITagProcessorFactory tagFactory;
    private IList`1<IElement> ctn;
    private IImageProvider imageProvider;
    private Rectangle pageSize;
    private Encoding charset;
    private IList`1<string> roottags;
    private ILinkProvider linkprovider;
    private bool autoBookmark;
    private IDictionary`2<string, object> memory;
    private CssAppliers cssAppliers;
    private string resourcePath;
    public float LastMarginBottom { get; public set; }
    public Rectangle PageSize { get; }
    public string ResourcePath { get; public set; }
    public HtmlPipelineContext(CssAppliers cssAppliers);
    protected internal virtual ITagProcessor ResolveProcessor(string tag, string nameSpace);
    protected internal virtual void AddFirst(StackKeeper stackKeeper);
    protected internal virtual StackKeeper Peek();
    protected internal virtual IList`1<IElement> CurrentContent();
    public virtual bool AcceptUnknown();
    protected internal virtual bool IsEmpty();
    protected internal virtual StackKeeper Poll();
    public virtual bool AutoBookmark();
    public virtual IDictionary`2<string, object> GetMemory();
    public virtual IImageProvider GetImageProvider();
    public virtual HtmlPipelineContext CharSet(Encoding cSet);
    public virtual Encoding CharSet();
    public virtual IList`1<string> GetRootTags();
    public virtual ILinkProvider GetLinkProvider();
    public virtual HtmlPipelineContext SetPageSize(Rectangle pageSize);
    public virtual object Clone();
    public virtual HtmlPipelineContext SetAcceptUnknown(bool acceptUnknown);
    public virtual HtmlPipelineContext SetTagFactory(ITagProcessorFactory tagFactory);
    public virtual HtmlPipelineContext AutoBookmark(bool autoBookmark);
    public virtual HtmlPipelineContext SetRootTags(IList`1<string> roottags);
    public virtual HtmlPipelineContext SetImageProvider(IImageProvider imageProvider);
    public virtual HtmlPipelineContext SetLinkProvider(ILinkProvider linkprovider);
    public virtual float get_LastMarginBottom();
    public virtual void set_LastMarginBottom(float value);
    public virtual Rectangle get_PageSize();
    public virtual CssAppliers GetCssAppliers();
    public virtual void SetCssAppliers(CssAppliers cssAppliers);
    public virtual string get_ResourcePath();
    public virtual void set_ResourcePath(string value);
}
public interface iTextSharp.tool.xml.pipeline.html.IFileMaker {
    public abstract virtual Stream GetStream();
}
public interface iTextSharp.tool.xml.pipeline.html.IImageProvider {
    public abstract virtual Image Retrieve(string src);
    public abstract virtual string GetImageRootPath();
    public abstract virtual void Store(string src, Image img);
    public abstract virtual void Reset();
}
public interface iTextSharp.tool.xml.pipeline.html.ILinkProvider {
    public abstract virtual string GetLinkRoot();
}
public class iTextSharp.tool.xml.pipeline.html.NoImageProviderException : Exception {
    protected NoImageProviderException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.pipeline.html.NoStackException : Exception {
    public NoStackException(string message);
    public NoStackException(Exception cause);
    public NoStackException(string message, Exception cause);
    protected NoStackException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.pipeline.html.StackKeeper : object {
    private Tag tag;
    private IList`1<IElement> stack;
    public StackKeeper(Tag t);
    public virtual void Add(IElement content);
    public virtual IList`1<IElement> GetElements();
    public virtual void Add(ICollection`1<K> elements);
    public virtual Tag GetTag();
}
internal class iTextSharp.tool.xml.pipeline.html.UrlLinkResolver : object {
    private string rootPath;
    public UrlLinkResolver(string localRootPath);
    public virtual Uri ResolveUrl(string src);
    public virtual Uri ResolveLocalUrl(string src);
    public virtual void SetLocalRootPath(string rootPath);
}
public class iTextSharp.tool.xml.pipeline.WritableElement : object {
    private List`1<IElement> list;
    public WritableElement(IElement e);
    public virtual void Add(IElement e);
    public virtual void AddAll(IList`1<IElement> l);
    public virtual IList`1<IElement> Elements();
}
public class iTextSharp.tool.xml.PipelineException : Exception {
    public PipelineException(Exception e);
    public PipelineException(string msg, Exception e);
    public PipelineException(string msg);
    protected PipelineException(SerializationInfo info, StreamingContext context);
}
public class iTextSharp.tool.xml.ProcessObject : object {
    private Queue`1<IWritable> queue;
    public virtual bool ContainsWritable();
    public virtual IWritable Poll();
    public virtual void Add(IWritable writable);
    public virtual void AddAll(IList`1<IWritable> elems);
}
public class iTextSharp.tool.xml.Tag : object {
    private Tag parent;
    private string tag;
    private IDictionary`2<string, string> attributes;
    private IDictionary`2<string, string> css;
    private IList`1<Tag> children;
    private string ns;
    private object lastMarginBottom;
    public Tag Parent { get; public set; }
    public string Name { get; }
    public IDictionary`2<string, string> CSS { get; public set; }
    public IDictionary`2<string, string> Attributes { get; }
    public object LastMarginBottom { get; public set; }
    public IList`1<Tag> Children { get; }
    public string NameSpace { get; }
    public Tag(string tag, IDictionary`2<string, string> attr);
    public Tag(string tag);
    public Tag(string tag, IDictionary`2<string, string> attr, IDictionary`2<string, string> css, string ns);
    public Tag(string tag, IDictionary`2<string, string> attr, string ns);
    public Tag(string tag, string ns);
    public virtual void set_Parent(Tag value);
    public virtual Tag get_Parent();
    public virtual string get_Name();
    public virtual void set_CSS(IDictionary`2<string, string> value);
    public virtual IDictionary`2<string, string> get_CSS();
    public virtual IDictionary`2<string, string> get_Attributes();
    public virtual object get_LastMarginBottom();
    public virtual void set_LastMarginBottom(object value);
    public virtual void AddChild(Tag t);
    public virtual IList`1<Tag> get_Children();
    public virtual IList`1<Tag> GetChildren(string name);
    public virtual string get_NameSpace();
    public virtual string ToString();
    public virtual bool CompareTag(Tag t);
    public virtual IEnumerator`1<Tag> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual Tag GetChild(string name, string ns);
    public virtual Tag GetChild(string name, string ns, bool recursive);
    public virtual bool HasChildren();
    public virtual bool HasParent();
    public virtual bool HasChild(string name, string ns);
    public virtual bool HasChild(string name, string ns, bool recursive);
    private bool RecursiveHasChild(Tag tag, string name, string ns, bool recursive);
    private Tag RecursiveGetChild(Tag tag, string name, string ns, bool recursive);
}
public class iTextSharp.tool.xml.TagUtils : object {
    private static TagUtils myself;
    private static TagUtils();
    public virtual Tag GetSibling(Tag t, int i);
    public static TagUtils GetInstance();
}
public class iTextSharp.tool.xml.util.ParentTreeUtil : object {
    public IList`1<string> GetParentTree(Tag t);
    public IList`1<Tag> GetParentTagTree(Tag tag, IList`1<Tag> tree);
}
public class iTextSharp.tool.xml.util.SortUtil : object {
    public static void InsertionSort(IList`1<T> list, Comparison`1<T> comparison);
    public static void InsertionSort(IList`1<T> list);
    public static void MergeSort(List`1<T> list, Comparison`1<T> comparison);
    public static void MergeSort(List`1<T> list);
    private static void MergeSort(List`1<T> list, int left, int right, Comparison`1<T> comparison);
    private static void Merge(List`1<T> list, int left, int mid, int right, Comparison`1<T> comparison);
}
public class iTextSharp.tool.xml.XMLWorker : object {
    protected IPipeline rootpPipe;
    private static LocalDataStoreSlot context;
    protected bool parseHtml;
    public XMLWorker(IPipeline pipeline, bool parseHtml);
    private static XMLWorker();
    public virtual void Init();
    public virtual void StartElement(string tag, IDictionary`2<string, string> attr, string ns);
    protected virtual Tag CreateTag(string tag, IDictionary`2<string, string> attr, string ns);
    public virtual void EndElement(string tag, string ns);
    public virtual void Text(string text);
    public virtual void UnknownText(string text);
    public virtual void Comment(string comment);
    public virtual void Close();
    protected internal virtual Tag GetCurrentTag();
    protected internal static IWorkerContext GetLocalWC();
    protected internal static void CloseLocalWC();
    protected virtual bool IgnoreCdata();
}
public class iTextSharp.tool.xml.XMLWorkerFontProvider : FontFactoryImp {
    public static string DONTLOOKFORFONTS;
    protected Dictionary`2<string, string> fontSubstitutionMap;
    protected bool useUnicode;
    unknown bool UseUnicode {public set; }
    public XMLWorkerFontProvider(string fontsPath);
    public XMLWorkerFontProvider(string fontsPath, Dictionary`2<string, string> fontSubstitutionMap);
    public virtual void AddFontSubstitute(string font, string substitute);
    public virtual void set_UseUnicode(bool value);
    public virtual Font GetFont(string fontname, string encoding, bool embedded, float size, int style, BaseColor color);
    public virtual Font GetFont(string fontname, string encoding, float size, int style);
    private Font GetUnicodeFont(string fontName, string encoding, float size, int style);
}
public class iTextSharp.tool.xml.XMLWorkerHelper : object {
    private static XMLWorkerHelper myself;
    private ICssFile defaultCssFile;
    private ITagProcessorFactory tpf;
    private static XMLWorkerHelper();
    public static XMLWorkerHelper GetInstance();
    public static ICssFile GetCSS(Stream inp);
    public virtual ICssFile GetDefaultCSS();
    public virtual void ParseXHtml(IElementHandler d, TextReader inp);
    public virtual void ParseXHtml(PdfWriter writer, Document doc, TextReader inp);
    public virtual void ParseXHtml(PdfWriter writer, Document doc, Stream inp, Stream inCssFile, Encoding charset, IFontProvider fontProvider);
    public virtual void ParseXHtml(PdfWriter writer, Document doc, Stream inp, Stream inCssFile, Encoding charset, IFontProvider fontProvider, string resourcesRootPath);
    public virtual void ParseXHtml(PdfWriter writer, Document doc, Stream inp, Stream inCssFile);
    public virtual void ParseXHtml(PdfWriter writer, Document doc, Stream inp, Stream inCssFile, Encoding charset);
    public virtual void ParseXHtml(PdfWriter writer, Document doc, Stream inp, Encoding charset);
    public virtual void ParseXHtml(PdfWriter writer, Document doc, Stream inp, Stream inCssFile, IFontProvider fontProvider);
    public virtual void ParseXHtml(IElementHandler d, Stream inp, Encoding charset);
    public virtual ICSSResolver GetDefaultCssResolver(bool addDefaultCss);
    protected internal virtual ITagProcessorFactory GetDefaultTagProcessorFactory();
    public static ElementList ParseToElementList(string html, string css);
}
