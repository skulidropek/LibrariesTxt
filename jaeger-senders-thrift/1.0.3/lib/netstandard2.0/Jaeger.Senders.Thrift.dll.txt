public class Jaeger.Senders.Thrift.HttpSender : ThriftSender {
    private static string HttpCollectorJaegerThriftFormatParam;
    private static int OneMbInBytes;
    private TProtocol _protocol;
    private THttpTransport _transport;
    public HttpSender(string endpoint);
    private HttpSender(Builder builder);
    [AsyncStateMachineAttribute("Jaeger.Senders.Thrift.HttpSender/<SendAsync>d__6")]
protected virtual Task SendAsync(Process process, List`1<Span> spans, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Jaeger.Senders.Thrift.HttpSender/<CloseAsync>d__7")]
public virtual Task`1<int> CloseAsync(CancellationToken cancellationToken);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(CancellationToken cancellationToken);
}
public static class Jaeger.Senders.Thrift.Protocols.JaegerThriftSpanConverter : object {
    public static Span ConvertSpan(Span span);
    internal static List`1<SpanRef> BuildReferences(IReadOnlyList`1<Reference> references);
    private static List`1<Log> BuildLogs(IEnumerable`1<LogData> logs);
    internal static List`1<Tag> BuildTags(IEnumerable`1<KeyValuePair`2<string, object>> tags);
    internal static Tag BuildTag(string key, object value);
}
public abstract class Jaeger.Senders.Thrift.ThriftSender : ThriftSenderBase {
    private Process _process;
    private int _processBytesSize;
    private List`1<Span> _spanBuffer;
    private int _byteBufferSize;
    protected ThriftSender(ProtocolType protocolType, int maxPacketSize);
    [AsyncStateMachineAttribute("Jaeger.Senders.Thrift.ThriftSender/<AppendAsync>d__5")]
public sealed virtual Task`1<int> AppendAsync(Span span, CancellationToken cancellationToken);
    protected int CalculateProcessSize(Process proc);
    protected int CalculateSpanSize(Span span);
    protected abstract virtual Task SendAsync(Process process, List`1<Span> spans, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Jaeger.Senders.Thrift.ThriftSender/<FlushAsync>d__9")]
public sealed virtual Task`1<int> FlushAsync(CancellationToken cancellationToken);
    public virtual Task`1<int> CloseAsync(CancellationToken cancellationToken);
    public virtual string ToString();
}
public class Jaeger.Senders.Thrift.ThriftSenderFactory : object {
    public static string Name;
    public string FactoryName { get; }
    public sealed virtual ISender GetSender(ILoggerFactory loggerFactory, SenderConfiguration senderConfiguration);
    public sealed virtual string get_FactoryName();
    private static string StringOrDefault(string value, string defaultValue);
    public virtual string ToString();
}
public class Jaeger.Senders.Thrift.UdpSender : ThriftSender {
    public static string DefaultAgentUdpHost;
    public static int DefaultAgentUdpCompactPort;
    private Client _agentClient;
    private ThriftUdpClientTransport _udpTransport;
    public UdpSender(string host, int port, int maxPacketSize);
    [AsyncStateMachineAttribute("Jaeger.Senders.Thrift.UdpSender/<SendAsync>d__6")]
protected virtual Task SendAsync(Process process, List`1<Span> spans, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Jaeger.Senders.Thrift.UdpSender/<CloseAsync>d__7")]
public virtual Task`1<int> CloseAsync(CancellationToken cancellationToken);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(CancellationToken cancellationToken);
}
