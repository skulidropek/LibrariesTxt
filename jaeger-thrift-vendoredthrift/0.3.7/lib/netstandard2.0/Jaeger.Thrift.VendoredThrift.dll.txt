public class Thrift.Collections.TCollections : object {
    public static bool Equals(IEnumerable first, IEnumerable second);
    public static int GetHashCode(IEnumerable enumerable);
}
public class Thrift.Collections.THashSet`1 : object {
    private HashSet`1<T> _set;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public sealed virtual bool Remove(T item);
}
public interface Thrift.ITAsyncProcessor {
    public abstract virtual Task`1<bool> ProcessAsync(TProtocol iprot, TProtocol oprot);
    public abstract virtual Task`1<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
}
public interface Thrift.ITProcessorFactory {
    public abstract virtual ITAsyncProcessor GetAsyncProcessor(TClientTransport trans, TBaseServer baseServer);
}
public class Thrift.Protocols.Entities.TField : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private short <ID>k__BackingField;
    public string Name { get; public set; }
    public TType Type { get; public set; }
    public short ID { get; public set; }
    public TField(string name, TType type, short id);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TType value);
    [CompilerGeneratedAttribute]
public short get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(short value);
}
public class Thrift.Protocols.Entities.TList : ValueType {
    [CompilerGeneratedAttribute]
private TType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public TType ElementType { get; public set; }
    public int Count { get; public set; }
    public TList(TType elementType, int count);
    [CompilerGeneratedAttribute]
public TType get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(TType value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
public class Thrift.Protocols.Entities.TMap : ValueType {
    [CompilerGeneratedAttribute]
private TType <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private TType <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public TType KeyType { get; public set; }
    public TType ValueType { get; public set; }
    public int Count { get; public set; }
    public TMap(TType keyType, TType valueType, int count);
    [CompilerGeneratedAttribute]
public TType get_KeyType();
    [CompilerGeneratedAttribute]
public void set_KeyType(TType value);
    [CompilerGeneratedAttribute]
public TType get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(TType value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
public class Thrift.Protocols.Entities.TMessage : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TMessageType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SeqID>k__BackingField;
    public string Name { get; public set; }
    public TMessageType Type { get; public set; }
    public int SeqID { get; public set; }
    public TMessage(string name, TMessageType type, int seqid);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TMessageType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TMessageType value);
    [CompilerGeneratedAttribute]
public int get_SeqID();
    [CompilerGeneratedAttribute]
public void set_SeqID(int value);
}
public enum Thrift.Protocols.Entities.TMessageType : Enum {
    public int value__;
    public static TMessageType Call;
    public static TMessageType Reply;
    public static TMessageType Exception;
    public static TMessageType Oneway;
}
public class Thrift.Protocols.Entities.TSet : ValueType {
    [CompilerGeneratedAttribute]
private TType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public TType ElementType { get; public set; }
    public int Count { get; public set; }
    public TSet(TType elementType, int count);
    public TSet(TList list);
    [CompilerGeneratedAttribute]
public TType get_ElementType();
    [CompilerGeneratedAttribute]
public void set_ElementType(TType value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
public class Thrift.Protocols.Entities.TStruct : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public TStruct(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public enum Thrift.Protocols.Entities.TType : Enum {
    public byte value__;
    public static TType Stop;
    public static TType Void;
    public static TType Bool;
    public static TType Byte;
    public static TType Double;
    public static TType I16;
    public static TType I32;
    public static TType I64;
    public static TType String;
    public static TType Struct;
    public static TType Map;
    public static TType Set;
    public static TType List;
}
public interface Thrift.Protocols.ITProtocolFactory {
    public abstract virtual TProtocol GetProtocol(TClientTransport trans);
}
public interface Thrift.Protocols.TAbstractBase {
    public abstract virtual Task WriteAsync(TProtocol tProtocol, CancellationToken cancellationToken);
}
public interface Thrift.Protocols.TBase {
    public abstract virtual Task ReadAsync(TProtocol tProtocol, CancellationToken cancellationToken);
}
public class Thrift.Protocols.TBinaryProtocol : TProtocol {
    protected static UInt32 VersionMask;
    protected static UInt32 Version1;
    protected bool StrictRead;
    protected bool StrictWrite;
    public TBinaryProtocol(TClientTransport trans);
    public TBinaryProtocol(TClientTransport trans, bool strictRead, bool strictWrite);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteMessageBeginAsync>d__6")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteMessageEndAsync>d__7")]
public virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteStructBeginAsync>d__8")]
public virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteStructEndAsync>d__9")]
public virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteFieldBeginAsync>d__10")]
public virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteFieldEndAsync>d__11")]
public virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteFieldStopAsync>d__12")]
public virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteMapBeginAsync>d__13")]
public virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteMapEndAsync>d__14")]
public virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteListBeginAsync>d__15")]
public virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteListEndAsync>d__16")]
public virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteSetBeginAsync>d__17")]
public virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteSetEndAsync>d__18")]
public virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteBoolAsync>d__19")]
public virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    protected internal static Byte[] CreateWriteByte(sbyte b);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteByteAsync>d__21")]
public virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    protected internal static Byte[] CreateWriteI16(short s);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteI16Async>d__23")]
public virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    protected internal static Byte[] CreateWriteI32(int i32);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteI32Async>d__25")]
public virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    protected internal static Byte[] CreateWriteI64(long i64);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteI64Async>d__27")]
public virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteDoubleAsync>d__28")]
public virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<WriteBinaryAsync>d__29")]
public virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadMessageBeginAsync>d__30")]
public virtual Task`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadMessageEndAsync>d__31")]
public virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadStructBeginAsync>d__32")]
public virtual Task`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadStructEndAsync>d__33")]
public virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadFieldBeginAsync>d__34")]
public virtual Task`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadFieldEndAsync>d__35")]
public virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadMapBeginAsync>d__36")]
public virtual Task`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadMapEndAsync>d__37")]
public virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadListBeginAsync>d__38")]
public virtual Task`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadListEndAsync>d__39")]
public virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadSetBeginAsync>d__40")]
public virtual Task`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadSetEndAsync>d__41")]
public virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadBoolAsync>d__42")]
public virtual Task`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadByteAsync>d__43")]
public virtual Task`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadI16Async>d__44")]
public virtual Task`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadI32Async>d__45")]
public virtual Task`1<int> ReadI32Async(CancellationToken cancellationToken);
    protected internal long CreateReadI64(Byte[] buf);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadI64Async>d__47")]
public virtual Task`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadDoubleAsync>d__48")]
public virtual Task`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadBinaryAsync>d__49")]
public virtual Task`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TBinaryProtocol/<ReadStringBodyAsync>d__50")]
private Task`1<string> ReadStringBodyAsync(int size, CancellationToken cancellationToken);
}
public class Thrift.Protocols.TCompactProtocol : TProtocol {
    private static byte ProtocolId;
    private static byte Version;
    private static byte VersionMask;
    private static byte TypeMask;
    private static byte TypeBits;
    private static int TypeShiftAmount;
    private static TStruct AnonymousStruct;
    private static TField Tstop;
    private static Byte[] TTypeToCompactType;
    private Stack`1<short> _lastField;
    private Nullable`1<TField> _booleanField;
    private Nullable`1<bool> _boolValue;
    private short _lastFieldId;
    public TCompactProtocol(TClientTransport trans);
    private static TCompactProtocol();
    public void Reset();
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteMessageBeginAsync>d__15")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteMessageEndAsync>d__16")]
public virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteStructBeginAsync>d__17")]
public virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteStructEndAsync>d__18")]
public virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteFieldBeginInternalAsync>d__19")]
private Task WriteFieldBeginInternalAsync(TField field, byte typeOverride, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteFieldBeginAsync>d__20")]
public virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteFieldEndAsync>d__21")]
public virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteFieldStopAsync>d__22")]
public virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteCollectionBeginAsync>d__23")]
protected Task WriteCollectionBeginAsync(TType elemType, int size, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteListBeginAsync>d__24")]
public virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteListEndAsync>d__25")]
public virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteSetBeginAsync>d__26")]
public virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteSetEndAsync>d__27")]
public virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteBoolAsync>d__28")]
public virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteByteAsync>d__29")]
public virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteI16Async>d__30")]
public virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    protected internal Tuple`2<Byte[], int> CreateWriteVarInt32(UInt32 n);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteI32Async>d__32")]
public virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    protected internal Tuple`2<Byte[], int> CreateWriteVarInt64(ulong n);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteI64Async>d__34")]
public virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteDoubleAsync>d__35")]
public virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteStringAsync>d__36")]
public virtual Task WriteStringAsync(string str, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteBinaryAsync>d__37")]
public virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteMapBeginAsync>d__38")]
public virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<WriteMapEndAsync>d__39")]
public virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadMessageBeginAsync>d__40")]
public virtual Task`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadMessageEndAsync>d__41")]
public virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadStructBeginAsync>d__42")]
public virtual Task`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadStructEndAsync>d__43")]
public virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadFieldBeginAsync>d__44")]
public virtual Task`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadFieldEndAsync>d__45")]
public virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadMapBeginAsync>d__46")]
public virtual Task`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadMapEndAsync>d__47")]
public virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadSetBeginAsync>d__48")]
public virtual Task`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadBoolAsync>d__49")]
public virtual Task`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadByteAsync>d__50")]
public virtual Task`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadI16Async>d__51")]
public virtual Task`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadI32Async>d__52")]
public virtual Task`1<int> ReadI32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadI64Async>d__53")]
public virtual Task`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadDoubleAsync>d__54")]
public virtual Task`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadStringAsync>d__55")]
public virtual Task`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadBinaryAsync>d__56")]
public virtual Task`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadListBeginAsync>d__57")]
public virtual Task`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadListEndAsync>d__58")]
public virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadSetEndAsync>d__59")]
public virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    private static byte GetCompactType(TType ttype);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadVarInt32Async>d__61")]
private Task`1<UInt32> ReadVarInt32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TCompactProtocol/<ReadVarInt64Async>d__62")]
private Task`1<ulong> ReadVarInt64Async(CancellationToken cancellationToken);
    private static int ZigzagToInt(UInt32 n);
    private static long ZigzagToLong(ulong n);
    private static long BytesToLong(Byte[] bytes);
    private static bool IsBoolType(byte b);
    private static TType GetTType(byte type);
    private static ulong LongToZigzag(long n);
    private static UInt32 IntToZigzag(int n);
    private static void FixedLongToBytes(long n, Byte[] buf, int off);
}
public class Thrift.Protocols.TJsonProtocol : TProtocol {
    private static long Version;
    private Byte[] _tempBuffer;
    protected JSONBaseContext Context;
    protected Stack`1<JSONBaseContext> ContextStack;
    protected LookaheadReader Reader;
    protected Encoding Utf8Encoding;
    public TJsonProtocol(TClientTransport trans);
    protected void PushContext(JSONBaseContext c);
    protected void PopContext();
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonSyntaxCharAsync>d__9")]
protected Task ReadJsonSyntaxCharAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteJsonStringAsync>d__10")]
private Task WriteJsonStringAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteJsonIntegerAsync>d__11")]
private Task WriteJsonIntegerAsync(long num, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteJsonDoubleAsync>d__12")]
private Task WriteJsonDoubleAsync(double num, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteJsonBase64Async>d__13")]
private Task WriteJsonBase64Async(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteJsonObjectStartAsync>d__14")]
private Task WriteJsonObjectStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteJsonObjectEndAsync>d__15")]
private Task WriteJsonObjectEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteJsonArrayStartAsync>d__16")]
private Task WriteJsonArrayStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteJsonArrayEndAsync>d__17")]
private Task WriteJsonArrayEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteMessageBeginAsync>d__18")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteMessageEndAsync>d__19")]
public virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteStructBeginAsync>d__20")]
public virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteStructEndAsync>d__21")]
public virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteFieldBeginAsync>d__22")]
public virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteFieldEndAsync>d__23")]
public virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteFieldStopAsync>d__24")]
public virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteMapBeginAsync>d__25")]
public virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteMapEndAsync>d__26")]
public virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteListBeginAsync>d__27")]
public virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteListEndAsync>d__28")]
public virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteSetBeginAsync>d__29")]
public virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteSetEndAsync>d__30")]
public virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteBoolAsync>d__31")]
public virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteByteAsync>d__32")]
public virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteI16Async>d__33")]
public virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteI32Async>d__34")]
public virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteI64Async>d__35")]
public virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteDoubleAsync>d__36")]
public virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteStringAsync>d__37")]
public virtual Task WriteStringAsync(string s, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<WriteBinaryAsync>d__38")]
public virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonStringAsync>d__39")]
private Task`1<Byte[]> ReadJsonStringAsync(bool skipContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonNumericCharsAsync>d__40")]
private Task`1<string> ReadJsonNumericCharsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonIntegerAsync>d__41")]
private Task`1<long> ReadJsonIntegerAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonDoubleAsync>d__42")]
private Task`1<double> ReadJsonDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonBase64Async>d__43")]
private Task`1<Byte[]> ReadJsonBase64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonObjectStartAsync>d__44")]
private Task ReadJsonObjectStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonObjectEndAsync>d__45")]
private Task ReadJsonObjectEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonArrayStartAsync>d__46")]
private Task ReadJsonArrayStartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadJsonArrayEndAsync>d__47")]
private Task ReadJsonArrayEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadMessageBeginAsync>d__48")]
public virtual Task`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadMessageEndAsync>d__49")]
public virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadStructBeginAsync>d__50")]
public virtual Task`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadStructEndAsync>d__51")]
public virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadFieldBeginAsync>d__52")]
public virtual Task`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadFieldEndAsync>d__53")]
public virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadMapBeginAsync>d__54")]
public virtual Task`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadMapEndAsync>d__55")]
public virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadListBeginAsync>d__56")]
public virtual Task`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadListEndAsync>d__57")]
public virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadSetBeginAsync>d__58")]
public virtual Task`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadSetEndAsync>d__59")]
public virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadBoolAsync>d__60")]
public virtual Task`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadByteAsync>d__61")]
public virtual Task`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadI16Async>d__62")]
public virtual Task`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadI32Async>d__63")]
public virtual Task`1<int> ReadI32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadI64Async>d__64")]
public virtual Task`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadDoubleAsync>d__65")]
public virtual Task`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadStringAsync>d__66")]
public virtual Task`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TJsonProtocol/<ReadBinaryAsync>d__67")]
public virtual Task`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
}
public class Thrift.Protocols.TMultiplexedProtocol : TProtocolDecorator {
    public static string Separator;
    private string _serviceName;
    public TMultiplexedProtocol(TProtocol protocol, string serviceName);
    [AsyncStateMachineAttribute("Thrift.Protocols.TMultiplexedProtocol/<WriteMessageBeginAsync>d__3")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(TMessage message, CancellationToken cancellationToken);
}
public abstract class Thrift.Protocols.TProtocol : object {
    public static int DefaultRecursionDepth;
    private bool _isDisposed;
    protected int RecursionDepth;
    protected TClientTransport Trans;
    [CompilerGeneratedAttribute]
private int <RecursionLimit>k__BackingField;
    public TClientTransport Transport { get; }
    protected int RecursionLimit { get; protected set; }
    protected TProtocol(TClientTransport trans);
    public TClientTransport get_Transport();
    [CompilerGeneratedAttribute]
protected int get_RecursionLimit();
    [CompilerGeneratedAttribute]
protected void set_RecursionLimit(int value);
    public sealed virtual void Dispose();
    public void IncrementRecursionDepth();
    public void DecrementRecursionDepth();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteMessageBeginAsync>d__15")]
public virtual Task WriteMessageBeginAsync(TMessage message);
    public abstract virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteMessageEndAsync>d__17")]
public virtual Task WriteMessageEndAsync();
    public abstract virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteStructBeginAsync>d__19")]
public virtual Task WriteStructBeginAsync(TStruct struct);
    public abstract virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteStructEndAsync>d__21")]
public virtual Task WriteStructEndAsync();
    public abstract virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteFieldBeginAsync>d__23")]
public virtual Task WriteFieldBeginAsync(TField field);
    public abstract virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteFieldEndAsync>d__25")]
public virtual Task WriteFieldEndAsync();
    public abstract virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteFieldStopAsync>d__27")]
public virtual Task WriteFieldStopAsync();
    public abstract virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteMapBeginAsync>d__29")]
public virtual Task WriteMapBeginAsync(TMap map);
    public abstract virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteMapEndAsync>d__31")]
public virtual Task WriteMapEndAsync();
    public abstract virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteListBeginAsync>d__33")]
public virtual Task WriteListBeginAsync(TList list);
    public abstract virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteListEndAsync>d__35")]
public virtual Task WriteListEndAsync();
    public abstract virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteSetBeginAsync>d__37")]
public virtual Task WriteSetBeginAsync(TSet set);
    public abstract virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteSetEndAsync>d__39")]
public virtual Task WriteSetEndAsync();
    public abstract virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteBoolAsync>d__41")]
public virtual Task WriteBoolAsync(bool b);
    public abstract virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteByteAsync>d__43")]
public virtual Task WriteByteAsync(sbyte b);
    public abstract virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteI16Async>d__45")]
public virtual Task WriteI16Async(short i16);
    public abstract virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteI32Async>d__47")]
public virtual Task WriteI32Async(int i32);
    public abstract virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteI64Async>d__49")]
public virtual Task WriteI64Async(long i64);
    public abstract virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteDoubleAsync>d__51")]
public virtual Task WriteDoubleAsync(double d);
    public abstract virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteStringAsync>d__53")]
public virtual Task WriteStringAsync(string s);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteStringAsync>d__54")]
public virtual Task WriteStringAsync(string s, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<WriteBinaryAsync>d__55")]
public virtual Task WriteBinaryAsync(Byte[] bytes);
    public abstract virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadMessageBeginAsync>d__57")]
public virtual Task`1<TMessage> ReadMessageBeginAsync();
    public abstract virtual Task`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadMessageEndAsync>d__59")]
public virtual Task ReadMessageEndAsync();
    public abstract virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadStructBeginAsync>d__61")]
public virtual Task`1<TStruct> ReadStructBeginAsync();
    public abstract virtual Task`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadStructEndAsync>d__63")]
public virtual Task ReadStructEndAsync();
    public abstract virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadFieldBeginAsync>d__65")]
public virtual Task`1<TField> ReadFieldBeginAsync();
    public abstract virtual Task`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadFieldEndAsync>d__67")]
public virtual Task ReadFieldEndAsync();
    public abstract virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadMapBeginAsync>d__69")]
public virtual Task`1<TMap> ReadMapBeginAsync();
    public abstract virtual Task`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadMapEndAsync>d__71")]
public virtual Task ReadMapEndAsync();
    public abstract virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadListBeginAsync>d__73")]
public virtual Task`1<TList> ReadListBeginAsync();
    public abstract virtual Task`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadListEndAsync>d__75")]
public virtual Task ReadListEndAsync();
    public abstract virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadSetBeginAsync>d__77")]
public virtual Task`1<TSet> ReadSetBeginAsync();
    public abstract virtual Task`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadSetEndAsync>d__79")]
public virtual Task ReadSetEndAsync();
    public abstract virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadBoolAsync>d__81")]
public virtual Task`1<bool> ReadBoolAsync();
    public abstract virtual Task`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadByteAsync>d__83")]
public virtual Task`1<sbyte> ReadByteAsync();
    public abstract virtual Task`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadI16Async>d__85")]
public virtual Task`1<short> ReadI16Async();
    public abstract virtual Task`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadI32Async>d__87")]
public virtual Task`1<int> ReadI32Async();
    public abstract virtual Task`1<int> ReadI32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadI64Async>d__89")]
public virtual Task`1<long> ReadI64Async();
    public abstract virtual Task`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadDoubleAsync>d__91")]
public virtual Task`1<double> ReadDoubleAsync();
    public abstract virtual Task`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadStringAsync>d__93")]
public virtual Task`1<string> ReadStringAsync();
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadStringAsync>d__94")]
public virtual Task`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocol/<ReadBinaryAsync>d__95")]
public virtual Task`1<Byte[]> ReadBinaryAsync();
    public abstract virtual Task`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
}
public abstract class Thrift.Protocols.TProtocolDecorator : TProtocol {
    private TProtocol _wrappedProtocol;
    protected TProtocolDecorator(TProtocol protocol);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteMessageBeginAsync>d__2")]
public virtual Task WriteMessageBeginAsync(TMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteMessageEndAsync>d__3")]
public virtual Task WriteMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteStructBeginAsync>d__4")]
public virtual Task WriteStructBeginAsync(TStruct struct, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteStructEndAsync>d__5")]
public virtual Task WriteStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteFieldBeginAsync>d__6")]
public virtual Task WriteFieldBeginAsync(TField field, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteFieldEndAsync>d__7")]
public virtual Task WriteFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteFieldStopAsync>d__8")]
public virtual Task WriteFieldStopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteMapBeginAsync>d__9")]
public virtual Task WriteMapBeginAsync(TMap map, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteMapEndAsync>d__10")]
public virtual Task WriteMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteListBeginAsync>d__11")]
public virtual Task WriteListBeginAsync(TList list, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteListEndAsync>d__12")]
public virtual Task WriteListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteSetBeginAsync>d__13")]
public virtual Task WriteSetBeginAsync(TSet set, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteSetEndAsync>d__14")]
public virtual Task WriteSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteBoolAsync>d__15")]
public virtual Task WriteBoolAsync(bool b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteByteAsync>d__16")]
public virtual Task WriteByteAsync(sbyte b, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteI16Async>d__17")]
public virtual Task WriteI16Async(short i16, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteI32Async>d__18")]
public virtual Task WriteI32Async(int i32, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteI64Async>d__19")]
public virtual Task WriteI64Async(long i64, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteDoubleAsync>d__20")]
public virtual Task WriteDoubleAsync(double d, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteStringAsync>d__21")]
public virtual Task WriteStringAsync(string s, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<WriteBinaryAsync>d__22")]
public virtual Task WriteBinaryAsync(Byte[] bytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadMessageBeginAsync>d__23")]
public virtual Task`1<TMessage> ReadMessageBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadMessageEndAsync>d__24")]
public virtual Task ReadMessageEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadStructBeginAsync>d__25")]
public virtual Task`1<TStruct> ReadStructBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadStructEndAsync>d__26")]
public virtual Task ReadStructEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadFieldBeginAsync>d__27")]
public virtual Task`1<TField> ReadFieldBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadFieldEndAsync>d__28")]
public virtual Task ReadFieldEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadMapBeginAsync>d__29")]
public virtual Task`1<TMap> ReadMapBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadMapEndAsync>d__30")]
public virtual Task ReadMapEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadListBeginAsync>d__31")]
public virtual Task`1<TList> ReadListBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadListEndAsync>d__32")]
public virtual Task ReadListEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadSetBeginAsync>d__33")]
public virtual Task`1<TSet> ReadSetBeginAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadSetEndAsync>d__34")]
public virtual Task ReadSetEndAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadBoolAsync>d__35")]
public virtual Task`1<bool> ReadBoolAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadByteAsync>d__36")]
public virtual Task`1<sbyte> ReadByteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadI16Async>d__37")]
public virtual Task`1<short> ReadI16Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadI32Async>d__38")]
public virtual Task`1<int> ReadI32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadI64Async>d__39")]
public virtual Task`1<long> ReadI64Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadDoubleAsync>d__40")]
public virtual Task`1<double> ReadDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadStringAsync>d__41")]
public virtual Task`1<string> ReadStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Protocols.TProtocolDecorator/<ReadBinaryAsync>d__42")]
public virtual Task`1<Byte[]> ReadBinaryAsync(CancellationToken cancellationToken);
}
public class Thrift.Protocols.TProtocolException : TException {
    public static int UNKNOWN;
    public static int INVALID_DATA;
    public static int NEGATIVE_SIZE;
    public static int SIZE_LIMIT;
    public static int BAD_VERSION;
    public static int NOT_IMPLEMENTED;
    public static int DEPTH_LIMIT;
    protected int Type;
    public TProtocolException(int type);
    public TProtocolException(int type, string message);
    public TProtocolException(string message);
    public int GetExceptionType();
}
internal static class Thrift.Protocols.Utilities.TBase64Helper : object {
    internal static string EncodeTable;
    private static Int32[] DecodeTable;
    private static TBase64Helper();
    internal static void Encode(Byte[] src, int srcOff, int len, Byte[] dst, int dstOff);
    internal static void Decode(Byte[] src, int srcOff, int len, Byte[] dst, int dstOff);
}
internal static class Thrift.Protocols.Utilities.TBase64Utils : object {
    internal static string EncodeTable;
    private static Int32[] DecodeTable;
    private static TBase64Utils();
    internal static void Encode(Byte[] src, int srcOff, int len, Byte[] dst, int dstOff);
    internal static void Decode(Byte[] src, int srcOff, int len, Byte[] dst, int dstOff);
}
public static class Thrift.Protocols.Utilities.TJSONProtocolConstants : object {
    public static Byte[] Comma;
    public static Byte[] Colon;
    public static Byte[] LeftBrace;
    public static Byte[] RightBrace;
    public static Byte[] LeftBracket;
    public static Byte[] RightBracket;
    public static Byte[] Quote;
    public static Byte[] Backslash;
    public static Byte[] JsonCharTable;
    public static Char[] EscapeChars;
    public static Byte[] EscapeCharValues;
    public static Byte[] EscSequences;
    private static TJSONProtocolConstants();
}
public static class Thrift.Protocols.Utilities.TJSONProtocolHelper : object {
    public static Byte[] GetTypeNameForTypeId(TType typeId);
    public static TType GetTypeIdForTypeName(Byte[] name);
    public static bool IsJsonNumeric(byte b);
    public static byte ToHexVal(byte ch);
    public static byte ToHexChar(byte val);
}
public static class Thrift.Protocols.Utilities.TProtocolUtil : object {
    [AsyncStateMachineAttribute("Thrift.Protocols.Utilities.TProtocolUtil/<SkipAsync>d__0")]
public static Task SkipAsync(TProtocol protocol, TType type, CancellationToken cancellationToken);
}
public abstract class Thrift.Server.TBaseServer : object {
    protected ITProtocolFactory InputProtocolFactory;
    protected TTransportFactory InputTransportFactory;
    protected ITProcessorFactory ItProcessorFactory;
    protected ITProtocolFactory OutputProtocolFactory;
    protected TTransportFactory OutputTransportFactory;
    protected TServerEventHandler ServerEventHandler;
    protected TServerTransport ServerTransport;
    protected TBaseServer(ITProcessorFactory itProcessorFactory, TServerTransport serverTransport, TTransportFactory inputTransportFactory, TTransportFactory outputTransportFactory, ITProtocolFactory inputProtocolFactory, ITProtocolFactory outputProtocolFactory);
    public void SetEventHandler(TServerEventHandler seh);
    public TServerEventHandler GetEventHandler();
    public abstract virtual void Stop();
    public virtual void Start();
    [AsyncStateMachineAttribute("Thrift.Server.TBaseServer/<ServeAsync>d__12")]
public virtual Task ServeAsync(CancellationToken cancellationToken);
}
public interface Thrift.Server.TServerEventHandler {
    public abstract virtual Task PreServeAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<object> CreateContextAsync(TProtocol input, TProtocol output, CancellationToken cancellationToken);
    public abstract virtual Task DeleteContextAsync(object serverContext, TProtocol input, TProtocol output, CancellationToken cancellationToken);
    public abstract virtual Task ProcessContextAsync(object serverContext, TClientTransport transport, CancellationToken cancellationToken);
}
public class Thrift.SingletonTProcessorFactory : object {
    private ITAsyncProcessor _tAsyncProcessor;
    public SingletonTProcessorFactory(ITAsyncProcessor tAsyncProcessor);
    public sealed virtual ITAsyncProcessor GetAsyncProcessor(TClientTransport trans, TBaseServer baseServer);
}
public class Thrift.TApplicationException : TException {
    private static int MessageTypeFieldId;
    private static int ExTypeFieldId;
    protected ExceptionType Type;
    public TApplicationException(ExceptionType type);
    public TApplicationException(ExceptionType type, string message);
    [AsyncStateMachineAttribute("Thrift.TApplicationException/<ReadAsync>d__7")]
public static Task`1<TApplicationException> ReadAsync(TProtocol inputProtocol, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.TApplicationException/<WriteAsync>d__8")]
public Task WriteAsync(TProtocol outputProtocol, CancellationToken cancellationToken);
}
public abstract class Thrift.TBaseClient : object {
    private TProtocol _inputProtocol;
    private TProtocol _outputProtocol;
    private bool _isDisposed;
    private int _seqId;
    public Guid ClientId;
    public TProtocol InputProtocol { get; }
    public TProtocol OutputProtocol { get; }
    public int SeqId { get; }
    protected TBaseClient(TProtocol inputProtocol, TProtocol outputProtocol);
    public TProtocol get_InputProtocol();
    public TProtocol get_OutputProtocol();
    public int get_SeqId();
    [AsyncStateMachineAttribute("Thrift.TBaseClient/<OpenTransportAsync>d__12")]
public virtual Task OpenTransportAsync();
    [AsyncStateMachineAttribute("Thrift.TBaseClient/<OpenTransportAsync>d__13")]
public virtual Task OpenTransportAsync(CancellationToken cancellationToken);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Thrift.TException : Exception {
    public TException(string message);
}
public class Thrift.TMultiplexedProcessor : object {
    private Dictionary`2<string, ITAsyncProcessor> _serviceProcessorMap;
    [AsyncStateMachineAttribute("Thrift.TMultiplexedProcessor/<ProcessAsync>d__1")]
public sealed virtual Task`1<bool> ProcessAsync(TProtocol iprot, TProtocol oprot);
    [AsyncStateMachineAttribute("Thrift.TMultiplexedProcessor/<ProcessAsync>d__2")]
public sealed virtual Task`1<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    public void RegisterProcessor(string serviceName, ITAsyncProcessor processor);
    [AsyncStateMachineAttribute("Thrift.TMultiplexedProcessor/<FailAsync>d__4")]
private Task FailAsync(TProtocol oprot, TMessage message, ExceptionType extype, string etxt, CancellationToken cancellationToken);
}
public class Thrift.Transports.Client.TBufferedClientTransport : TClientTransport {
    private int _bufSize;
    private MemoryStream _inputBuffer;
    private MemoryStream _outputBuffer;
    private TClientTransport _transport;
    private bool _isDisposed;
    public TClientTransport UnderlyingTransport { get; }
    public bool IsOpen { get; }
    public TBufferedClientTransport(TClientTransport transport, int bufSize);
    public TClientTransport get_UnderlyingTransport();
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TBufferedClientTransport/<OpenAsync>d__10")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TBufferedClientTransport/<ReadAsync>d__12")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TBufferedClientTransport/<WriteAsync>d__13")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TBufferedClientTransport/<FlushAsync>d__14")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    private void CheckNotDisposed();
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transports.Client.TFramedClientTransport : TClientTransport {
    private static int HeaderSize;
    private Byte[] _headerBuf;
    private MemoryStream _readBuffer;
    private TClientTransport _transport;
    private MemoryStream _writeBuffer;
    private bool _isDisposed;
    public bool IsOpen { get; }
    public TFramedClientTransport(TClientTransport transport);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TFramedClientTransport/<OpenAsync>d__9")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TFramedClientTransport/<ReadAsync>d__11")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TFramedClientTransport/<ReadFrameAsync>d__12")]
private Task ReadFrameAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TFramedClientTransport/<WriteAsync>d__13")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TFramedClientTransport/<FlushAsync>d__14")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    private void InitWriteBuffer();
    private static void EncodeFrameSize(int frameSize, Byte[] buf);
    private static int DecodeFrameSize(Byte[] buf);
    private void CheckNotDisposed();
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transports.Client.THttpClientTransport : TClientTransport {
    private X509Certificate[] _certificates;
    private Uri _uri;
    private int _connectTimeout;
    private HttpClient _httpClient;
    private Stream _inputStream;
    private bool _isDisposed;
    private MemoryStream _outputStream;
    private static MediaTypeWithQualityHeaderValue ApacheThriftMediaType;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <CustomHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <CustomProperties>k__BackingField;
    public IDictionary`2<string, string> CustomHeaders { get; }
    public IDictionary`2<string, object> CustomProperties { get; }
    unknown int ConnectTimeout {public set; }
    public bool IsOpen { get; }
    public THttpClientTransport(Uri u, IDictionary`2<string, string> customHeaders);
    public THttpClientTransport(Uri u, IDictionary`2<string, string> customHeaders, IDictionary`2<string, object> customProperties);
    public THttpClientTransport(Uri u, IEnumerable`1<X509Certificate> certificates, IDictionary`2<string, string> customHeaders, IDictionary`2<string, object> customProperties);
    private static THttpClientTransport();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_CustomHeaders();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_CustomProperties();
    public void set_ConnectTimeout(int value);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.THttpClientTransport/<OpenAsync>d__21")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.THttpClientTransport/<ReadAsync>d__23")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.THttpClientTransport/<WriteAsync>d__24")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    private void AddCertificates(HttpClientHandler handler);
    private HttpClient CreateClient();
    private HttpRequestMessage CreateRequestMessage(StreamContent streamContent);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.THttpClientTransport/<FlushAsync>d__28")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transports.Client.TMemoryBufferClientTransport : TClientTransport {
    private MemoryStream _byteStream;
    private bool _isDisposed;
    public bool IsOpen { get; }
    public TMemoryBufferClientTransport(Byte[] buf);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TMemoryBufferClientTransport/<OpenAsync>d__6")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TMemoryBufferClientTransport/<ReadAsync>d__8")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TMemoryBufferClientTransport/<WriteAsync>d__9")]
public virtual Task WriteAsync(Byte[] buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TMemoryBufferClientTransport/<WriteAsync>d__10")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TMemoryBufferClientTransport/<FlushAsync>d__11")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public Byte[] GetBuffer();
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transports.Client.TNamedPipeClientTransport : TClientTransport {
    private NamedPipeClientStream _client;
    public bool IsOpen { get; }
    public TNamedPipeClientTransport(string pipe);
    public TNamedPipeClientTransport(string server, string pipe);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TNamedPipeClientTransport/<OpenAsync>d__5")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TNamedPipeClientTransport/<ReadAsync>d__7")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TNamedPipeClientTransport/<WriteAsync>d__8")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TNamedPipeClientTransport/<FlushAsync>d__9")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transports.Client.TSocketClientTransport : TStreamClientTransport {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private TcpClient <TcpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public TcpClient TcpClient { get; private set; }
    public IPAddress Host { get; }
    public int Port { get; }
    unknown int Timeout {public set; }
    public bool IsOpen { get; }
    public TSocketClientTransport(TcpClient client);
    public TSocketClientTransport(IPAddress host, int port);
    public TSocketClientTransport(IPAddress host, int port, int timeout);
    [CompilerGeneratedAttribute]
public TcpClient get_TcpClient();
    [CompilerGeneratedAttribute]
private void set_TcpClient(TcpClient value);
    [CompilerGeneratedAttribute]
public IPAddress get_Host();
    [CompilerGeneratedAttribute]
public int get_Port();
    public void set_Timeout(int value);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TSocketClientTransport/<OpenAsync>d__18")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transports.Client.TStreamClientTransport : TClientTransport {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private Stream <OutputStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <InputStream>k__BackingField;
    protected Stream OutputStream { get; protected set; }
    protected Stream InputStream { get; protected set; }
    public bool IsOpen { get; }
    public TStreamClientTransport(Stream inputStream, Stream outputStream);
    [CompilerGeneratedAttribute]
protected Stream get_OutputStream();
    [CompilerGeneratedAttribute]
protected void set_OutputStream(Stream value);
    [CompilerGeneratedAttribute]
protected Stream get_InputStream();
    [CompilerGeneratedAttribute]
protected void set_InputStream(Stream value);
    public virtual bool get_IsOpen();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TStreamClientTransport/<OpenAsync>d__13")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TStreamClientTransport/<ReadAsync>d__15")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TStreamClientTransport/<WriteAsync>d__16")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TStreamClientTransport/<FlushAsync>d__17")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public class Thrift.Transports.Client.TTlsSocketClientTransport : TStreamClientTransport {
    private X509Certificate2 _certificate;
    private RemoteCertificateValidationCallback _certValidator;
    private IPAddress _host;
    private bool _isServer;
    private LocalCertificateSelectionCallback _localCertificateSelectionCallback;
    private int _port;
    private SslProtocols _sslProtocols;
    private TcpClient _client;
    private SslStream _secureStream;
    private int _timeout;
    unknown int Timeout {public set; }
    public TcpClient TcpClient { get; }
    public IPAddress Host { get; }
    public int Port { get; }
    public bool IsOpen { get; }
    public TTlsSocketClientTransport(TcpClient client, X509Certificate2 certificate, bool isServer, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsSocketClientTransport(IPAddress host, int port, string certificatePath, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsSocketClientTransport(IPAddress host, int port, X509Certificate2 certificate, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsSocketClientTransport(IPAddress host, int port, int timeout, X509Certificate2 certificate, RemoteCertificateValidationCallback certValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public void set_Timeout(int value);
    public TcpClient get_TcpClient();
    public IPAddress get_Host();
    public int get_Port();
    public virtual bool get_IsOpen();
    private void InitSocket();
    private bool DefaultCertificateValidator(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslValidationErrors);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TTlsSocketClientTransport/<OpenAsync>d__26")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.Client.TTlsSocketClientTransport/<SetupTlsAsync>d__27")]
public Task SetupTlsAsync();
    public virtual void Close();
}
public class Thrift.Transports.Server.TNamedPipeServerTransport : TServerTransport {
    private string _pipeAddress;
    private bool _asyncMode;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isPending;
    private NamedPipeServerStream _stream;
    public TNamedPipeServerTransport(string pipeAddress);
    public virtual void Listen();
    public virtual void Close();
    public virtual bool IsClientPending();
    private void EnsurePipeInstance();
    [AsyncStateMachineAttribute("Thrift.Transports.Server.TNamedPipeServerTransport/<AcceptImplementationAsync>d__9")]
protected virtual Task`1<TClientTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
}
public class Thrift.Transports.Server.TServerFramedTransport : TServerTransport {
    private int _clientTimeout;
    private int _port;
    private TcpListener _server;
    public TServerFramedTransport(TcpListener listener);
    public TServerFramedTransport(TcpListener listener, int clientTimeout);
    public TServerFramedTransport(int port);
    public TServerFramedTransport(int port, int clientTimeout);
    public virtual void Listen();
    public virtual bool IsClientPending();
    [AsyncStateMachineAttribute("Thrift.Transports.Server.TServerFramedTransport/<AcceptImplementationAsync>d__9")]
protected virtual Task`1<TClientTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
    public virtual void Close();
}
public class Thrift.Transports.Server.TServerSocketTransport : TServerTransport {
    private int _clientTimeout;
    private int _port;
    private bool _useBufferedSockets;
    private bool _useFramedTransport;
    private TcpListener _server;
    public TServerSocketTransport(TcpListener listener);
    public TServerSocketTransport(TcpListener listener, int clientTimeout);
    public TServerSocketTransport(int port);
    public TServerSocketTransport(int port, int clientTimeout);
    public TServerSocketTransport(int port, int clientTimeout, bool useBufferedSockets);
    public TServerSocketTransport(int port, int clientTimeout, bool useBufferedSockets, bool useFramedTransport);
    public virtual void Listen();
    public virtual bool IsClientPending();
    [AsyncStateMachineAttribute("Thrift.Transports.Server.TServerSocketTransport/<AcceptImplementationAsync>d__13")]
protected virtual Task`1<TClientTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
    public virtual void Close();
}
public class Thrift.Transports.Server.TTlsServerSocketTransport : TServerTransport {
    private RemoteCertificateValidationCallback _clientCertValidator;
    private int _clientTimeout;
    private LocalCertificateSelectionCallback _localCertificateSelectionCallback;
    private int _port;
    private X509Certificate2 _serverCertificate;
    private SslProtocols _sslProtocols;
    private bool _useBufferedSockets;
    private bool _useFramedTransport;
    private TcpListener _server;
    public TTlsServerSocketTransport(int port, X509Certificate2 certificate);
    public TTlsServerSocketTransport(int port, bool useBufferedSockets, X509Certificate2 certificate, RemoteCertificateValidationCallback clientCertValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public TTlsServerSocketTransport(int port, bool useBufferedSockets, bool useFramedTransport, X509Certificate2 certificate, RemoteCertificateValidationCallback clientCertValidator, LocalCertificateSelectionCallback localCertificateSelectionCallback, SslProtocols sslProtocols);
    public virtual void Listen();
    public virtual bool IsClientPending();
    [AsyncStateMachineAttribute("Thrift.Transports.Server.TTlsServerSocketTransport/<AcceptImplementationAsync>d__14")]
protected virtual Task`1<TClientTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
    public virtual void Close();
}
public abstract class Thrift.Transports.TClientTransport : object {
    private Byte[] _peekBuffer;
    private bool _hasPeekByte;
    public bool IsOpen { get; }
    public abstract virtual bool get_IsOpen();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<PeekAsync>d__5")]
public Task`1<bool> PeekAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<OpenAsync>d__6")]
public virtual Task OpenAsync();
    public abstract virtual Task OpenAsync(CancellationToken cancellationToken);
    public abstract virtual void Close();
    protected static void ValidateBufferArgs(Byte[] buffer, int offset, int length);
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<ReadAsync>d__10")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int length);
    public abstract virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<ReadAllAsync>d__12")]
public virtual Task`1<int> ReadAllAsync(Byte[] buffer, int offset, int length);
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<ReadAllAsync>d__13")]
public virtual Task`1<int> ReadAllAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<WriteAsync>d__14")]
public virtual Task WriteAsync(Byte[] buffer);
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<WriteAsync>d__15")]
public virtual Task WriteAsync(Byte[] buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<WriteAsync>d__16")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int length);
    public abstract virtual Task WriteAsync(Byte[] buffer, int offset, int length, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.TClientTransport/<FlushAsync>d__18")]
public virtual Task FlushAsync();
    public abstract virtual Task FlushAsync(CancellationToken cancellationToken);
    protected abstract virtual void Dispose(bool disposing);
}
public abstract class Thrift.Transports.TServerTransport : object {
    public abstract virtual void Listen();
    public abstract virtual void Close();
    public abstract virtual bool IsClientPending();
    [AsyncStateMachineAttribute("Thrift.Transports.TServerTransport/<AcceptImplementationAsync>d__3")]
protected virtual Task`1<TClientTransport> AcceptImplementationAsync();
    protected abstract virtual Task`1<TClientTransport> AcceptImplementationAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Thrift.Transports.TServerTransport/<AcceptAsync>d__5")]
public Task`1<TClientTransport> AcceptAsync();
    [AsyncStateMachineAttribute("Thrift.Transports.TServerTransport/<AcceptAsync>d__6")]
public Task`1<TClientTransport> AcceptAsync(CancellationToken cancellationToken);
}
public class Thrift.Transports.TTransportException : TException {
    protected ExceptionType ExType;
    public ExceptionType Type { get; }
    public TTransportException(ExceptionType exType);
    public TTransportException(ExceptionType exType, string message);
    public TTransportException(string message);
    public ExceptionType get_Type();
}
public class Thrift.Transports.TTransportFactory : object {
    public virtual TClientTransport GetTransport(TClientTransport trans);
}
