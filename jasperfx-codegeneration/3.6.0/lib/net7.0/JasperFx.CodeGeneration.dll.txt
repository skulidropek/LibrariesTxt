public static class JasperFx.CodeGeneration.CodeFormatter : object {
    [NullableContextAttribute("1")]
public static string Write(object value);
}
public class JasperFx.CodeGeneration.CodeGenerationException : Exception {
    [NullableContextAttribute("1")]
public CodeGenerationException(ICodeFile file, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JasperFx.CodeGeneration.CodeGenerationExtensions : object {
    [ExtensionAttribute]
public static Type FindPreGeneratedType(Assembly assembly, string namespace, string typeName);
    [ExtensionAttribute]
public static GeneratedAssembly StartAssembly(ICodeFileCollection generator, GenerationRules rules);
    [ExtensionAttribute]
public static string ToNamespace(ICodeFileCollection codeFileCollection, GenerationRules rules);
    [ExtensionAttribute]
public static string ToExportDirectory(ICodeFileCollection generator, string exportDirectory);
    [ExtensionAttribute]
public static GeneratedAssembly AssembleTypes(ICodeFileCollection generator, GenerationRules rules);
    [ExtensionAttribute]
public static Setter AddStringConstant(GeneratedType generatedType, string constantName, string value);
    [ExtensionAttribute]
public static void ReturnNewStringConstant(FramesCollection frames, string constantName, string value);
    [ExtensionAttribute]
public static void AssertPreBuildTypesExist(ICodeFileCollection collection, IServiceProvider services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JasperFx.CodeGeneration.ConditionalCompilation : object {
    public static OneLineCodeFragment If(string target);
    public static OneLineCodeFragment EndIf();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JasperFx.CodeGeneration.DependencyGatherer : object {
    private IMethodVariables _methodVariables;
    public LightweightCache`2<Frame, List`1<Frame>> Dependencies;
    public LightweightCache`2<Variable, List`1<Frame>> Variables;
    public DependencyGatherer(IMethodVariables methodVariables, IList`1<Frame> frames);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.DependencyGatherer/<findDependencies>d__4")]
private IEnumerable`1<Frame> findDependencies(Frame frame);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.DependencyGatherer/<findDependencies>d__5")]
private IEnumerable`1<Frame> findDependencies(Variable variable);
    [CompilerGeneratedAttribute]
private List`1<Frame> <.ctor>b__3_0(Frame frame);
    [CompilerGeneratedAttribute]
private List`1<Frame> <.ctor>b__3_1(Variable v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.DynamicCodeBuilder : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceVariableSource <ServiceVariableSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private ICodeFileCollection[] <Collections>k__BackingField;
    [NullableAttribute("2")]
public IServiceVariableSource ServiceVariableSource { get; public set; }
    public String[] ChildNamespaces { get; }
    public IServiceProvider Services { get; }
    public ICodeFileCollection[] Collections { get; }
    public DynamicCodeBuilder(IServiceProvider services, ICodeFileCollection[] collections);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceVariableSource get_ServiceVariableSource();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ServiceVariableSource(IServiceVariableSource value);
    public String[] get_ChildNamespaces();
    [CompilerGeneratedAttribute]
public IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public ICodeFileCollection[] get_Collections();
    public string GenerateAllCode();
    public void DeleteAllGeneratedCode();
    public string GenerateCodeFor(string childNamespace);
    public void WriteGeneratedCode(Action`1<string> onFileWritten);
    private string generateCode(ICodeFileCollection collection);
    public void TryBuildAndCompileAll(Action`2<GeneratedAssembly, IServiceVariableSource> withAssembly);
    [AsyncStateMachineAttribute("JasperFx.CodeGeneration.DynamicCodeBuilder/<LoadPrebuiltTypes>d__19")]
public Task LoadPrebuiltTypes(Assembly assembly);
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.Expressions.IResolverFrame {
    public abstract virtual void WriteExpressions(LambdaDefinition definition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Expressions.LambdaDefinition : object {
    private Dictionary`2<Variable, Expression> _variables;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterExpression[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Expression> <Body>k__BackingField;
    [NullableAttribute("2")]
public object Context { get; public set; }
    public ParameterExpression[] Arguments { get; public set; }
    public IList`1<Expression> Body { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Context();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Context(object value);
    [CompilerGeneratedAttribute]
public ParameterExpression[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ParameterExpression[] value);
    [CompilerGeneratedAttribute]
public IList`1<Expression> get_Body();
    public void RegisterExpression(Variable variable, Expression expression);
    public Expression RegisterExpression(Variable variable);
    public Expression ExpressionFor(Variable variable);
    public TFunc Compile();
    public void Assign(Variable variable, Expression expression);
    public void Assign(ParameterExpression variable, Expression expression);
}
public abstract class JasperFx.CodeGeneration.Frames.AsyncFrame : Frame {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.CodeFrame : Frame {
    private string _format;
    private Object[] _values;
    public CodeFrame(bool isAsync, string format, Object[] values);
    private sealed virtual override ICodeFrame JasperFx.CodeGeneration.Frames.ICodeFrame.Creates(Variable variable);
    private static void validateFormat(string format, Object[] values);
    public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.CodeFrame/<FindVariables>d__6")]
public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.CommentFrame : SyncFrame {
    private string _commentText;
    public CommentFrame(string commentText);
    public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JasperFx.CodeGeneration.Frames.CompositeFrame : Frame {
    private Frame[] _inner;
    public IEnumerable`1<Variable> Creates { get; }
    protected CompositeFrame(Frame[] inner);
    public virtual IEnumerable`1<Variable> get_Creates();
    public sealed virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    protected abstract virtual void generateCode(GeneratedMethod method, ISourceWriter writer, Frame inner);
    public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
    public virtual bool CanReturnTask();
}
public enum JasperFx.CodeGeneration.Frames.ConstructorCallMode : Enum {
    public int value__;
    public static ConstructorCallMode Variable;
    public static ConstructorCallMode ReturnValue;
    public static ConstructorCallMode UsingNestedVariable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.ConstructorFrame : SyncFrame {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICodeFragment <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BuiltType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <DeclaredType>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructorInfo <Ctor>k__BackingField;
    [CompilerGeneratedAttribute]
private Variable[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private FramesCollection <ActivatorFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructorCallMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SetterArg> <Setters>k__BackingField;
    [CompilerGeneratedAttribute]
private Variable <Variable>k__BackingField;
    [NullableAttribute("2")]
public ICodeFragment Header { get; public set; }
    public Type BuiltType { get; }
    [NullableAttribute("2")]
public Type DeclaredType { get; public set; }
    public ConstructorInfo Ctor { get; }
    public Variable[] Parameters { get; public set; }
    public FramesCollection ActivatorFrames { get; }
    public ConstructorCallMode Mode { get; public set; }
    public IList`1<SetterArg> Setters { get; }
    public Variable Variable { get; protected set; }
    public ConstructorFrame(ConstructorInfo ctor);
    public ConstructorFrame(Type builtType, ConstructorInfo ctor);
    public ConstructorFrame(Type builtType, ConstructorInfo ctor, Func`2<ConstructorFrame, Variable> variableSource);
    public void Comment(string text);
    public void MultiLineComment(string text);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICodeFragment get_Header();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Header(ICodeFragment value);
    [CompilerGeneratedAttribute]
public Type get_BuiltType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_DeclaredType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DeclaredType(Type value);
    [CompilerGeneratedAttribute]
public ConstructorInfo get_Ctor();
    [CompilerGeneratedAttribute]
public Variable[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Variable[] value);
    [CompilerGeneratedAttribute]
public FramesCollection get_ActivatorFrames();
    [CompilerGeneratedAttribute]
public ConstructorCallMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ConstructorCallMode value);
    [CompilerGeneratedAttribute]
public IList`1<SetterArg> get_Setters();
    [CompilerGeneratedAttribute]
public Variable get_Variable();
    [CompilerGeneratedAttribute]
protected void set_Variable(Variable value);
    public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    public string Declaration();
    public string Invocation();
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.ConstructorFrame/<FindVariables>d__40")]
public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.ConstructorFrame`1 : ConstructorFrame {
    public ConstructorFrame`1(ConstructorInfo ctor);
    public ConstructorFrame`1(Expression`1<Func`1<T>> expression);
    public void Set(Expression`1<Func`2<T, object>> expression, Variable variable);
}
public enum JasperFx.CodeGeneration.Frames.DisposalMode : Enum {
    public int value__;
    public static DisposalMode UsingBlock;
    public static DisposalMode None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JasperFx.CodeGeneration.Frames.Frame : object {
    protected internal IList`1<Variable> creates;
    protected IList`1<Frame> dependencies;
    protected internal IList`1<Variable> uses;
    private bool _hasResolved;
    [NullableAttribute("2")]
private Frame _next;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wraps>k__BackingField;
    public bool IsAsync { get; protected set; }
    public bool Wraps { get; protected set; }
    [NullableAttribute("2")]
public Frame Next { get; public set; }
    public IEnumerable`1<Variable> Uses { get; }
    public IEnumerable`1<Variable> Creates { get; }
    public Frame[] Dependencies { get; }
    protected Frame(bool isAsync);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
protected void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public bool get_Wraps();
    [CompilerGeneratedAttribute]
protected void set_Wraps(bool value);
    [NullableContextAttribute("2")]
public Frame get_Next();
    [NullableContextAttribute("2")]
public void set_Next(Frame value);
    public IEnumerable`1<Variable> get_Uses();
    public virtual IEnumerable`1<Variable> get_Creates();
    public Frame[] get_Dependencies();
    public Variable Create(Type variableType);
    public Variable Create();
    public Variable Create(string name);
    public abstract virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    public void ResolveVariables(IMethodVariables method);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.Frame/<FindVariables>d__28")]
public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
    public virtual bool CanReturnTask();
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.Frame/<AllFrames>d__30")]
public IEnumerable`1<Frame> AllFrames();
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.Frame/<AllVariables>d__31")]
internal IEnumerable`1<Variable> AllVariables();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ResolveVariables>b__27_0(Variable x);
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.Frames.ICodeFrame {
    public abstract virtual ICodeFrame Creates(Variable variable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.IfBlock : CompositeFrame {
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string Condition { get; }
    public IfBlock(string condition, Frame[] inner);
    public IfBlock(Variable variable, Frame[] inner);
    [CompilerGeneratedAttribute]
public string get_Condition();
    protected virtual void generateCode(GeneratedMethod method, ISourceWriter writer, Frame inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.IfElseNullGuardFrame : Frame {
    private Frame[] _existsPath;
    private Frame[] _nullPath;
    private Variable _subject;
    public IfElseNullGuardFrame(Variable subject, Frame[] nullPath, Frame[] existsPath);
    public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.IfElseNullGuardFrame/<FindVariables>d__5")]
public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.MethodCall : Frame {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Type> <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <HandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Variable <ReturnVariable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CommentText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Variable <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Variable[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private DisposalMode <DisposalMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ReturnAction <ReturnAction>k__BackingField;
    public Dictionary`2<Type, Type> Aliases { get; }
    public Type HandlerType { get; }
    public MethodInfo Method { get; }
    [NullableAttribute("2")]
public Variable ReturnVariable { get; private set; }
    [NullableAttribute("2")]
public Type ReturnType { get; }
    [NullableAttribute("2")]
public string CommentText { get; public set; }
    public bool IsLocal { get; public set; }
    [NullableAttribute("2")]
public Variable Target { get; public set; }
    public Variable[] Arguments { get; }
    public DisposalMode DisposalMode { get; public set; }
    public ReturnAction ReturnAction { get; public set; }
    public MethodCall(Type handlerType, string methodName);
    public MethodCall(Type handlerType, MethodInfo method);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.MethodCall/<buildTupleCreateVariables>d__2")]
private IEnumerable`1<Variable> buildTupleCreateVariables();
    [NullableContextAttribute("2")]
public bool CreatesNewOf();
    public bool CreatesNewOf(Type objectType);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, Type> get_Aliases();
    [CompilerGeneratedAttribute]
public Type get_HandlerType();
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Variable get_ReturnVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ReturnVariable(Variable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_ReturnType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CommentText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CommentText(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLocal();
    [CompilerGeneratedAttribute]
public void set_IsLocal(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Variable get_Target();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Target(Variable value);
    [CompilerGeneratedAttribute]
public Variable[] get_Arguments();
    [CompilerGeneratedAttribute]
public DisposalMode get_DisposalMode();
    [CompilerGeneratedAttribute]
public void set_DisposalMode(DisposalMode value);
    [CompilerGeneratedAttribute]
public ReturnAction get_ReturnAction();
    [CompilerGeneratedAttribute]
public void set_ReturnAction(ReturnAction value);
    public void AssignResultTo(Variable variable);
    public static MethodCall For(Expression`1<Action`1<T>> expression);
    private Type correctedReturnType(Type type);
    private Variable findVariable(ParameterInfo param, IMethodVariables chain);
    public bool TrySetArgument(Variable variable);
    public bool TrySetArgument(string parameterName, Variable variable);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.MethodCall/<FindVariables>d__50")]
public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
    private string returnActionCode(GeneratedMethod method);
    private bool shouldWriteInUsingBlock(GeneratedMethod method);
    public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    private string invocationCode();
    private bool returnsValueTask();
    public string InvocationCode(GeneratedMethod method);
    public string AssignmentCode(GeneratedMethod method);
    private string determineTarget();
    public virtual bool CanReturnTask();
    public virtual string ToString();
    public void AssignResultTo(int index, Variable variable);
    public void TryReplaceVariableCreationWithAssignment(Variable variable);
}
public enum JasperFx.CodeGeneration.Frames.ReturnAction : Enum {
    public int value__;
    public static ReturnAction Return;
    public static ReturnAction Assign;
    public static ReturnAction Initialize;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.ReturnFrame : SyncFrame {
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Variable <ReturnedVariable>k__BackingField;
    public Type ReturnType { get; }
    public Variable ReturnedVariable { get; private set; }
    [NullableContextAttribute("1")]
public ReturnFrame(Type returnType);
    [NullableContextAttribute("1")]
public ReturnFrame(Variable returnVariable);
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    [CompilerGeneratedAttribute]
public Variable get_ReturnedVariable();
    [CompilerGeneratedAttribute]
private void set_ReturnedVariable(Variable value);
    [NullableContextAttribute("1")]
public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.ReturnFrame/<FindVariables>d__11")]
public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.ReturnValueTask : SyncFrame {
    private Type _variableType;
    private Variable _returnValue;
    public ReturnValueTask(Type variableType);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.ReturnValueTask/<FindVariables>d__3")]
public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
    public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.SetterArg : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Variable <Variable>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    public string PropertyName { get; }
    [NullableAttribute("2")]
public Variable Variable { get; private set; }
    public Type PropertyType { get; }
    public SetterArg(string propertyName, Variable variable);
    public SetterArg(string propertyName, Type propertyType);
    public SetterArg(PropertyInfo property);
    public SetterArg(PropertyInfo property, Variable variable);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Variable get_Variable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Variable(Variable value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    public string Assignment();
    [MemberNotNullAttribute("Variable")]
internal void FindVariable(IMethodVariables chain);
}
public abstract class JasperFx.CodeGeneration.Frames.SyncFrame : Frame {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JasperFx.CodeGeneration.Frames.TemplateFrame : SyncFrame {
    private IList`1<VariableProxy> _proxies;
    [NullableAttribute("2")]
private string _template;
    protected abstract virtual string Template();
    protected object Arg();
    protected object Arg(string name);
    public sealed virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    public sealed virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
}
public class JasperFx.CodeGeneration.Frames.ThrowExceptionFrame : SyncFrame {
    [NullableContextAttribute("1")]
public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.ThrowExceptionFrame`1 : CodeFrame {
    public ThrowExceptionFrame`1(Object[] values);
    public static string ToFormat(Object[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.TryFinallyWrapperFrame : Frame {
    private Frame _inner;
    private Frame[] _finallys;
    public TryFinallyWrapperFrame(Frame inner, Frame[] finallys);
    public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Frames.TryFinallyWrapperFrame/<FindVariables>d__4")]
public virtual IEnumerable`1<Variable> FindVariables(IMethodVariables chain);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.Use : object {
    [NullableAttribute("2")]
private string _variableName;
    private Type _variableType;
    public Use(Type variableType);
    public Use(Type variableType, string variableName);
    internal Variable FindVariable(IMethodVariables variables);
    [NullableContextAttribute("2")]
public static Use Type(string variableName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Frames.VariableProxy : object {
    [NullableAttribute("2")]
private string _name;
    [NullableAttribute("2")]
private string _substitution;
    private Type _variableType;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Variable <Variable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [NullableAttribute("2")]
public Variable Variable { get; private set; }
    public int Index { get; }
    public VariableProxy(int index, Type variableType);
    public VariableProxy(int index, Type variableType, string name);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Variable get_Variable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Variable(Variable value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [MemberNotNullAttribute("Variable")]
public Variable Resolve(IMethodVariables variables);
    public virtual string ToString();
    public string Substitute(string code);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JasperFx.CodeGeneration.FramesCollection : List`1<Frame> {
    [CompilerGeneratedAttribute]
private GeneratedMethod <ParentMethod>k__BackingField;
    public GeneratedMethod ParentMethod { get; }
    public FramesCollection(GeneratedMethod parentMethod);
    [CompilerGeneratedAttribute]
public GeneratedMethod get_ParentMethod();
    public ICodeFrame ReturnNewGeneratedTypeObject(GeneratedType typeBeingReturned, String[] values);
    public FramesCollection Return(Type returnType);
    public FramesCollection Return(object returnValue);
    public FramesCollection CallConstructor(Expression`1<Func`1<T>> constructor, Action`1<ConstructorFrame`1<T>> configure);
    public FramesCollection Append();
    public FramesCollection Append(Frame[] frames);
    public FramesCollection Call(Expression`1<Action`1<T>> expression, Action`1<MethodCall> configure);
    public void Write(GeneratedMethod method, ISourceWriter writer);
    public FramesCollection ReturnNull();
    public FramesCollection ThrowNotImplementedException();
    public FramesCollection ThrowNotSupportedException();
    public FramesCollection Throw(Object[] arguments);
    public ICodeFrame Code(string code, Object[] values);
    public ICodeFrame CodeAsync(string code, Object[] values);
    public void Return();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.GeneratedAssembly : object {
    private IList`1<Assembly> _assemblies;
    private List`1<GeneratedType> _generatedTypes;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private GenerationRules <Rules>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICodeFragment <Header>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICodeFragment <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <UsingNamespaces>k__BackingField;
    public IReadOnlyList`1<GeneratedType> GeneratedTypes { get; }
    public string Namespace { get; }
    public GenerationRules Rules { get; }
    [NullableAttribute("2")]
public Assembly Assembly { get; private set; }
    [NullableAttribute("2")]
public ICodeFragment Header { get; public set; }
    [NullableAttribute("2")]
public ICodeFragment Footer { get; public set; }
    public IList`1<string> UsingNamespaces { get; }
    public GeneratedAssembly(GenerationRules rules);
    public GeneratedAssembly(GenerationRules rules, string ns);
    public IReadOnlyList`1<GeneratedType> get_GeneratedTypes();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public GenerationRules get_Rules();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Assembly(Assembly value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICodeFragment get_Header();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Header(ICodeFragment value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICodeFragment get_Footer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Footer(ICodeFragment value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_UsingNamespaces();
    public void ReferenceAssembly(Assembly assembly);
    public GeneratedType AddType(string typeName, Type baseType);
    public void AttachAssembly(Assembly assembly);
    public string GenerateCode(IServiceVariableSource services);
    public List`1<string> AllReferencedNamespaces();
    private void attachSourceCodeToTypes(String& code);
    public static GeneratedAssembly Empty();
    public IEnumerable`1<Assembly> AllReferencedAssemblies();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.GeneratedMethod : object {
    private AsyncMode _asyncMode;
    [NullableAttribute("2")]
private MethodInfo _parentMethod;
    [NullableAttribute("2")]
private Frame _top;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overrides>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Variable <ReturnVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private GeneratedType <ParentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Argument[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Variable> <DerivedVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IVariableSource> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private FramesCollection <Frames>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICodeFragment <Header>k__BackingField;
    public Type ReturnType { get; }
    public string MethodName { get; }
    public bool Overrides { get; public set; }
    public AsyncMode AsyncMode { get; public set; }
    [NullableAttribute("2")]
public Variable ReturnVariable { get; public set; }
    public GeneratedType ParentType { get; public set; }
    public Argument[] Arguments { get; }
    public IList`1<Variable> DerivedVariables { get; }
    public IList`1<IVariableSource> Sources { get; }
    public FramesCollection Frames { get; }
    [NullableAttribute("2")]
public ICodeFragment Header { get; public set; }
    public GeneratedMethod(MethodInfo method);
    public GeneratedMethod(string methodName, Type returnType, Argument[] arguments);
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MethodName();
    [CompilerGeneratedAttribute]
public bool get_Overrides();
    [CompilerGeneratedAttribute]
public void set_Overrides(bool value);
    public AsyncMode get_AsyncMode();
    public void set_AsyncMode(AsyncMode value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Variable get_ReturnVariable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ReturnVariable(Variable value);
    [CompilerGeneratedAttribute]
public GeneratedType get_ParentType();
    [CompilerGeneratedAttribute]
public void set_ParentType(GeneratedType value);
    [CompilerGeneratedAttribute]
public sealed virtual Argument[] get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Variable> get_DerivedVariables();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IVariableSource> get_Sources();
    [CompilerGeneratedAttribute]
public sealed virtual FramesCollection get_Frames();
    public static GeneratedMethod For(string name, Argument[] arguments);
    public static GeneratedMethod ForNoArg(string name);
    public static GeneratedMethod ForNoArg(string name);
    public virtual string ToString();
    public bool WillGenerate();
    public void Comment(string text);
    public void MultiLineComment(string text);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICodeFragment get_Header();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Header(ICodeFragment value);
    public void WriteMethod(ISourceWriter writer);
    protected void writeReturnStatement(ISourceWriter writer);
    protected string determineReturnExpression();
    public void ArrangeFrames(GeneratedType type, IServiceVariableSource services);
    public string ToExitStatement();
    public void Return();
    public IEnumerable`1<Assembly> AllReferencedAssemblies();
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.GeneratedMethod/<findAllReferencedAssemblies>d__56")]
public IEnumerable`1<Assembly> findAllReferencedAssemblies();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("GeneratedType: {BaseType}")]
public class JasperFx.CodeGeneration.GeneratedType : object {
    private IList`1<Type> _interfaces;
    private IList`1<GeneratedMethod> _methods;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICodeFragment <Header>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICodeFragment <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private Variable[] <BaseConstructorArguments>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SourceCode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <CompiledType>k__BackingField;
    [CompilerGeneratedAttribute]
private GeneratedAssembly <ParentAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private GenerationRules <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Setter> <Setters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<InjectedField> <AllInjectedFields>k__BackingField;
    [NullableAttribute("2")]
public ICodeFragment Header { get; public set; }
    [NullableAttribute("2")]
public ICodeFragment Footer { get; public set; }
    public string TypeName { get; }
    public string Namespace { get; internal set; }
    [NullableAttribute("2")]
public Type BaseType { get; private set; }
    public Variable[] BaseConstructorArguments { get; private set; }
    public IEnumerable`1<Type> Interfaces { get; }
    public IEnumerable`1<GeneratedMethod> Methods { get; }
    [NullableAttribute("2")]
public string SourceCode { get; public set; }
    [NullableAttribute("2")]
public Type CompiledType { get; private set; }
    public string FullName { get; }
    public GeneratedAssembly ParentAssembly { get; internal set; }
    public GenerationRules Rules { get; }
    public IList`1<Setter> Setters { get; }
    public IList`1<InjectedField> AllInjectedFields { get; }
    public GeneratedType(string typeName);
    public GeneratedType(GenerationRules rules, string typeName);
    public GeneratedType(GeneratedAssembly parent, string typeName);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICodeFragment get_Header();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Header(ICodeFragment value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICodeFragment get_Footer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Footer(ICodeFragment value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
internal void set_Namespace(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_BaseType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_BaseType(Type value);
    [CompilerGeneratedAttribute]
public Variable[] get_BaseConstructorArguments();
    [CompilerGeneratedAttribute]
private void set_BaseConstructorArguments(Variable[] value);
    public IEnumerable`1<Type> get_Interfaces();
    public IEnumerable`1<GeneratedMethod> get_Methods();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SourceCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SourceCode(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_CompiledType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CompiledType(Type value);
    public string get_FullName();
    [CompilerGeneratedAttribute]
public GeneratedAssembly get_ParentAssembly();
    [CompilerGeneratedAttribute]
internal void set_ParentAssembly(GeneratedAssembly value);
    [CompilerGeneratedAttribute]
public sealed virtual GenerationRules get_Rules();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Setter> get_Setters();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<InjectedField> get_AllInjectedFields();
    private sealed virtual override bool JasperFx.CodeGeneration.Model.IVariableSource.Matches(Type type);
    private sealed virtual override Variable JasperFx.CodeGeneration.Model.IVariableSource.Create(Type type);
    public void CommentType(string text);
    public void MultiLineCommentType(string text);
    public GeneratedType InheritsFrom();
    public GeneratedType InheritsFrom(Type baseType);
    public GeneratedType Implements(Type type);
    public GeneratedType Implements();
    public void AddMethod(GeneratedMethod method);
    public GeneratedMethod MethodFor(string methodName);
    public GeneratedMethod AddVoidMethod(string name, Argument[] args);
    public GeneratedMethod AddMethodThatReturns(string name, Argument[] args);
    public void Write(ISourceWriter writer);
    private void writeSetters(ISourceWriter writer);
    private void writeConstructorMethod(ISourceWriter writer, IList`1<InjectedField> args);
    private void writeFieldDeclarations(ISourceWriter writer, IList`1<InjectedField> args);
    private void writeDeclaration(ISourceWriter writer);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.GeneratedType/<implements>d__72")]
private IEnumerable`1<Type> implements();
    public Type FindType(IEnumerable`1<Type> types);
    [NullableContextAttribute("2")]
public void ArrangeFrames(IServiceVariableSource services);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.GeneratedType/<AssemblyReferences>d__75")]
public IEnumerable`1<Assembly> AssemblyReferences();
    public T CreateInstance(Object[] arguments);
    public void ApplySetterValues(object builtObject);
    public void UseConstantForBaseCtor(Variable variable);
    internal IEnumerable`1<Assembly> AllReferencedAssemblies();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <FindType>b__73_0(Type x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.GenerationRules : object {
    public IList`1<Assembly> Assemblies;
    public IDictionary`2<string, object> Properties;
    public IList`1<IVariableSource> Sources;
    [CompilerGeneratedAttribute]
private bool <SourceCodeWritingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratedNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeLoadMode <TypeLoadMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratedCodeOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <ApplicationAssembly>k__BackingField;
    public bool SourceCodeWritingEnabled { get; public set; }
    public string GeneratedNamespace { get; public set; }
    [ObsoleteAttribute("Use GeneratedNamespace instead")]
public string ApplicationNamespace { get; public set; }
    public TypeLoadMode TypeLoadMode { get; public set; }
    public string GeneratedCodeOutputPath { get; public set; }
    public Assembly ApplicationAssembly { get; public set; }
    public GenerationRules(string applicationNamespace);
    public GenerationRules(string applicationNamespace, TypeLoadMode typeLoadMode);
    [CompilerGeneratedAttribute]
public bool get_SourceCodeWritingEnabled();
    [CompilerGeneratedAttribute]
public void set_SourceCodeWritingEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_GeneratedNamespace();
    [CompilerGeneratedAttribute]
public void set_GeneratedNamespace(string value);
    public string get_ApplicationNamespace();
    public void set_ApplicationNamespace(string value);
    [CompilerGeneratedAttribute]
public TypeLoadMode get_TypeLoadMode();
    [CompilerGeneratedAttribute]
public void set_TypeLoadMode(TypeLoadMode value);
    [CompilerGeneratedAttribute]
public string get_GeneratedCodeOutputPath();
    [CompilerGeneratedAttribute]
public void set_GeneratedCodeOutputPath(string value);
    [CompilerGeneratedAttribute]
public Assembly get_ApplicationAssembly();
    [CompilerGeneratedAttribute]
public void set_ApplicationAssembly(Assembly value);
    public void ReferenceAssembly(Assembly assembly);
    public void ReferenceTypes(Type[] types);
}
public class JasperFx.CodeGeneration.GeneratorCompilationFailureException : Exception {
    [NullableContextAttribute("1")]
public GeneratorCompilationFailureException(ICodeFileCollection generator, Exception innerException);
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.ICodeFile {
    public string FileName { get; }
    public abstract virtual string get_FileName();
    public abstract virtual void AssembleTypes(GeneratedAssembly assembly);
    public abstract virtual Task`1<bool> AttachTypes(GenerationRules rules, Assembly assembly, IServiceProvider services, string containingNamespace);
    public abstract virtual bool AttachTypesSynchronously(GenerationRules rules, Assembly assembly, IServiceProvider services, string containingNamespace);
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.ICodeFileCollection {
    public string ChildNamespace { get; }
    public GenerationRules Rules { get; }
    public abstract virtual string get_ChildNamespace();
    public abstract virtual GenerationRules get_Rules();
    public abstract virtual IReadOnlyList`1<ICodeFile> BuildFiles();
}
public interface JasperFx.CodeGeneration.ICodeFileCollectionWithServices {
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.ICodeFragment {
    public abstract virtual void Write(ISourceWriter writer);
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.IGeneratedMethod {
    public FramesCollection Frames { get; }
    public Argument[] Arguments { get; }
    public IList`1<Variable> DerivedVariables { get; }
    public IList`1<IVariableSource> Sources { get; }
    public string MethodName { get; }
    public abstract virtual FramesCollection get_Frames();
    public abstract virtual Argument[] get_Arguments();
    public abstract virtual IList`1<Variable> get_DerivedVariables();
    public abstract virtual IList`1<IVariableSource> get_Sources();
    public abstract virtual string get_MethodName();
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.IGeneratedType {
    public IList`1<Setter> Setters { get; }
    public IList`1<InjectedField> AllInjectedFields { get; }
    public GenerationRules Rules { get; }
    public string TypeName { get; }
    public abstract virtual IList`1<Setter> get_Setters();
    public abstract virtual IList`1<InjectedField> get_AllInjectedFields();
    public abstract virtual GenerationRules get_Rules();
    public abstract virtual string get_TypeName();
}
[NullableContextAttribute("2")]
public interface JasperFx.CodeGeneration.ISourceWriter {
    public int IndentionLevel { get; public set; }
    public abstract virtual int get_IndentionLevel();
    public abstract virtual void set_IndentionLevel(int value);
    public abstract virtual void BlankLine();
    public abstract virtual void Write(string text);
    public abstract virtual void FinishBlock(string extra);
    [NullableContextAttribute("1")]
public abstract virtual void WriteLine(string text);
}
public class JasperFx.CodeGeneration.MissingTypeException : Exception {
    [NullableContextAttribute("2")]
public MissingTypeException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.Argument : Variable {
    public string Declaration { get; }
    public Argument(Type variableType, string usage);
    public Argument(ParameterInfo parameter);
    public string get_Declaration();
    [NullableContextAttribute("2")]
public static Argument For(string argName);
    protected bool Equals(Argument other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JasperFx.CodeGeneration.Model.AsyncMode : Enum {
    public int value__;
    public static AsyncMode ReturnCompletedTask;
    public static AsyncMode AsyncTask;
    public static AsyncMode ReturnFromLastNode;
    public static AsyncMode None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.BaseConstructorArgument : Variable {
    private InjectedField _field;
    public string Usage { get; protected set; }
    public BaseConstructorArgument(InjectedField field);
    public virtual string get_Usage();
    protected virtual void set_Usage(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.CastVariable : Variable {
    [CompilerGeneratedAttribute]
private Variable <Inner>k__BackingField;
    public Variable Inner { get; }
    public CastVariable(Variable parent, Type specificType);
    [CompilerGeneratedAttribute]
public Variable get_Inner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JasperFx.CodeGeneration.Model.Constant : object {
    public static Variable For(object value);
    public static Variable ForEnum(T value);
    public static Variable ForString(string value);
    public static Variable ForType(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.IfStyle : object {
    public static IfStyle If;
    public static IfStyle ElseIf;
    public static IfStyle Else;
    public static IfStyle None;
    private bool _writes;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Code { get; }
    private IfStyle(string code, bool writes);
    private static IfStyle();
    [CompilerGeneratedAttribute]
public string get_Code();
    public void Open(ISourceWriter writer, string condition);
    public void Close(ISourceWriter writer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.Model.IMethodVariables {
    public abstract virtual Variable FindVariable(Type type);
    public abstract virtual Variable FindVariableByName(Type dependency, string name);
    public abstract virtual bool TryFindVariableByName(Type dependency, string name, Variable& variable);
    public abstract virtual Variable TryFindVariable(Type type, VariableSource source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.InjectedField : Variable {
    [CompilerGeneratedAttribute]
private Type <ArgType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CtorArg>k__BackingField;
    public Type ArgType { get; }
    public string CtorArg { get; protected set; }
    public string CtorArgDeclaration { get; }
    public InjectedField(Type argType);
    public InjectedField(Type argType, string name);
    public virtual void OverrideName(string variableName);
    [CompilerGeneratedAttribute]
public Type get_ArgType();
    [CompilerGeneratedAttribute]
public string get_CtorArg();
    [CompilerGeneratedAttribute]
protected void set_CtorArg(string value);
    public virtual string get_CtorArgDeclaration();
    public void WriteDeclaration(ISourceWriter writer);
    public void WriteAssignment(ISourceWriter writer);
    public Variable ToBaseCtorVariable();
}
public interface JasperFx.CodeGeneration.Model.IServiceVariableSource {
    [NullableContextAttribute("1")]
public abstract virtual void ReplaceVariables(IMethodVariables method);
    public abstract virtual void StartNewType();
    public abstract virtual void StartNewMethod();
}
[NullableContextAttribute("1")]
public interface JasperFx.CodeGeneration.Model.IVariableSource {
    public abstract virtual bool Matches(Type type);
    public abstract virtual Variable Create(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.MemberAccessVariable : Variable {
    private MemberInfo _member;
    private Variable _parent;
    public string Usage { get; }
    public MemberAccessVariable(Variable parent, MemberInfo member);
    public virtual string get_Usage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JasperFx.CodeGeneration.Model.MethodFrameArranger : object {
    private IGeneratedMethod _method;
    [NullableAttribute("2")]
private IServiceVariableSource _services;
    private IGeneratedType _type;
    private Dictionary`2<Type, Variable> _variables;
    public MethodFrameArranger(IGeneratedMethod method, IGeneratedType type, IServiceVariableSource services);
    public MethodFrameArranger(IGeneratedMethod method, IGeneratedType type);
    public sealed virtual Variable FindVariableByName(Type dependency, string name);
    public sealed virtual Variable FindVariable(Type type);
    public sealed virtual bool TryFindVariableByName(Type dependency, string name, Variable& variable);
    public sealed virtual Variable TryFindVariable(Type type, VariableSource source);
    public void Arrange(AsyncMode& asyncMode, Frame& topFrame);
    protected Frame chainFrames(Frame[] frames);
    protected Frame[] compileFrames(IList`1<Frame> frames);
    internal void findInjectedFields(DependencyGatherer dependencies);
    internal void findSetters(DependencyGatherer dependencies);
    [IteratorStateMachineAttribute("JasperFx.CodeGeneration.Model.MethodFrameArranger/<allVariableSources>d__15")]
private IEnumerable`1<IVariableSource> allVariableSources(VariableSource variableSource);
    private Variable findVariable(Type type, VariableSource variableSource);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <findInjectedFields>b__13_0(Variable key, int _);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <findSetters>b__14_0(Variable key, int _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.NowFetchFrame : SyncFrame {
    [CompilerGeneratedAttribute]
private Variable <Variable>k__BackingField;
    public Variable Variable { get; }
    public NowFetchFrame(Type variableType);
    [CompilerGeneratedAttribute]
public Variable get_Variable();
    public virtual void GenerateCode(GeneratedMethod method, ISourceWriter writer);
}
public class JasperFx.CodeGeneration.Model.NowTimeVariableSource : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Matches(Type type);
    [NullableContextAttribute("1")]
public sealed virtual Variable Create(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.OutArgument : Variable {
    public string ArgumentDeclaration { get; }
    public OutArgument(Type variableType);
    public OutArgument(Type variableType, string usage);
    public OutArgument(Type variableType, string usage, Frame creator);
    public OutArgument(Type variableType, Frame creator);
    public virtual string get_ArgumentDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.Setter : Variable {
    [CompilerGeneratedAttribute]
private string <PropName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <InitialValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Variable <ReadOnlyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private SetterType <Type>k__BackingField;
    public string PropName { get; public set; }
    [NullableAttribute("2")]
public object InitialValue { get; public set; }
    public Variable ReadOnlyValue { get; public set; }
    public SetterType Type { get; public set; }
    [NullableContextAttribute("0")]
public Setter(Type variableType);
    public Setter(Type variableType, string name);
    [CompilerGeneratedAttribute]
public string get_PropName();
    [CompilerGeneratedAttribute]
public void set_PropName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_InitialValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_InitialValue(object value);
    [CompilerGeneratedAttribute]
public Variable get_ReadOnlyValue();
    [CompilerGeneratedAttribute]
public void set_ReadOnlyValue(Variable value);
    [CompilerGeneratedAttribute]
public SetterType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SetterType value);
    public static Setter ReadOnly(string name, Variable value);
    public static Setter StaticReadOnly(string name, Variable value);
    public static Setter Constant(string name, Variable value);
    public virtual void WriteDeclaration(ISourceWriter writer);
    public string ToDeclaration();
    public void SetInitialValue(object object);
    public virtual Expression ToVariableExpression(LambdaDefinition definition);
}
public enum JasperFx.CodeGeneration.Model.SetterType : Enum {
    public int value__;
    public static SetterType ReadWrite;
    public static SetterType ReadOnly;
    public static SetterType Constant;
    public static SetterType StaticReadOnly;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.StaticVariable : Variable {
    public StaticVariable(Type variableType, string usage);
    public sealed virtual bool Matches(Type type);
    public sealed virtual Variable Create(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.ValueTypeReturnVariable : Variable {
    [CompilerGeneratedAttribute]
private TupleVariable[] <Inners>k__BackingField;
    public string Usage { get; }
    public TupleVariable[] Inners { get; }
    public ValueTypeReturnVariable(Type returnType, Variable[] inner);
    public virtual string get_Usage();
    [CompilerGeneratedAttribute]
public TupleVariable[] get_Inners();
    public void AssignResultTo(int index, Variable variable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Model.Variable : object {
    private static String[] _reservedNames;
    [NullableAttribute("2")]
private Frame _frame;
    [CompilerGeneratedAttribute]
private Type <VariableType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Usage>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Variable> <Dependencies>k__BackingField;
    [NullableAttribute("2")]
public Frame Creator { get; protected set; }
    public Type VariableType { get; }
    public string Usage { get; protected set; }
    public string AssignmentUsage { get; }
    public string ArgumentDeclaration { get; }
    public Dictionary`2<string, object> Properties { get; }
    public IList`1<Variable> Dependencies { get; }
    public Variable(Type variableType);
    public Variable(Type variableType, string usage);
    public Variable(Type variableType, string usage, Frame creator);
    public Variable(Type variableType, Frame creator);
    private static Variable();
    [NullableContextAttribute("2")]
public Frame get_Creator();
    [NullableContextAttribute("2")]
protected void set_Creator(Frame value);
    [CompilerGeneratedAttribute]
public Type get_VariableType();
    [CompilerGeneratedAttribute]
public virtual string get_Usage();
    [CompilerGeneratedAttribute]
protected virtual void set_Usage(string value);
    public virtual string get_AssignmentUsage();
    public virtual string get_ArgumentDeclaration();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public IList`1<Variable> get_Dependencies();
    public static Variable[] VariablesForProperties(string rootArgName);
    [NullableContextAttribute("2")]
public static Variable For(string variableName);
    public static string SanitizeVariableName(string variableName);
    public static string DefaultArgName(Type argType);
    public static string DefaultArgName();
    public virtual void OverrideName(string variableName);
    public void OverrideType(Type variableType);
    public virtual string ToString();
    protected bool Equals(Variable other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual Expression ToVariableExpression(LambdaDefinition definition);
}
public enum JasperFx.CodeGeneration.Model.VariableCreation : Enum {
    public int value__;
    public static VariableCreation Created;
    public static VariableCreation Injected;
    public static VariableCreation BuiltByFrame;
}
public enum JasperFx.CodeGeneration.Model.VariableSource : Enum {
    public int value__;
    public static VariableSource All;
    public static VariableSource NotServices;
}
public enum JasperFx.CodeGeneration.Model.Visibility : Enum {
    public int value__;
    public static Visibility Public;
    public static Visibility Protected;
    public static Visibility Private;
    public static Visibility Internal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.MultiLineComment : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public MultiLineComment(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    public sealed virtual void Write(ISourceWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.OneLineCodeFragment : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public OneLineCodeFragment(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    public sealed virtual void Write(ISourceWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.OneLineComment : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public OneLineComment(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    public sealed virtual void Write(ISourceWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JasperFx.CodeGeneration.SourceCodeParser : object {
    private LightweightCache`2<string, string> _code;
    [NullableAttribute("2")]
private StringWriter _current;
    [NullableAttribute("2")]
private string _name;
    internal SourceCodeParser(string code);
    public sealed virtual void Dispose();
    public string CodeFor(string typeName);
}
public class JasperFx.CodeGeneration.SourceWriter : object {
    [NullableAttribute("1")]
private StringWriter _writer;
    [NullableAttribute("1")]
private string _leadingSpaces;
    private int _level;
    public int IndentionLevel { get; public set; }
    public sealed virtual void Dispose();
    public sealed virtual int get_IndentionLevel();
    public sealed virtual void set_IndentionLevel(int value);
    public sealed virtual void BlankLine();
    [NullableContextAttribute("2")]
public sealed virtual void Write(string text);
    [NullableContextAttribute("1")]
public sealed virtual void WriteLine(string text);
    [NullableContextAttribute("2")]
public sealed virtual void FinishBlock(string extra);
    private void StartBlock();
    [NullableContextAttribute("1")]
public string Code();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Write>b__8_0(string line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JasperFx.CodeGeneration.SourceWriterExtensions : object {
    private static string returnCompletedTask;
    private static string returnFromResult;
    private static SourceWriterExtensions();
    [ExtensionAttribute]
public static void Namespace(ISourceWriter writer, string namespace);
    [ExtensionAttribute]
public static void UsingNamespace(ISourceWriter writer);
    [ExtensionAttribute]
public static void UsingNamespace(ISourceWriter writer, string namespace);
    [ExtensionAttribute]
public static void UsingBlock(ISourceWriter writer, string declaration, Action`1<ISourceWriter> inner);
    [ExtensionAttribute]
public static void WriteReturnStatement(ISourceWriter writer, GeneratedMethod method);
    [ExtensionAttribute]
public static void WriteReturnStatement(ISourceWriter writer, GeneratedMethod method, Variable variable);
    [ExtensionAttribute]
public static void WriteComment(ISourceWriter writer, string comment);
    [ExtensionAttribute]
public static void WriteElse(ISourceWriter writer);
    [ExtensionAttribute]
public static void StartClass(ISourceWriter writer, string className, Type[] inheritsOrImplements);
}
public enum JasperFx.CodeGeneration.TypeLoadMode : Enum {
    public int value__;
    public static TypeLoadMode Dynamic;
    public static TypeLoadMode Auto;
    public static TypeLoadMode Static;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.UnResolvableVariableException : Exception {
    [CompilerGeneratedAttribute]
private Type <DependencyType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private IGeneratedMethod <Method>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private GeneratedType <Type>k__BackingField;
    public Type DependencyType { get; }
    [NullableAttribute("2")]
public string VariableName { get; }
    public IGeneratedMethod Method { get; }
    [NullableAttribute("2")]
public GeneratedType Type { get; public set; }
    public string Message { get; }
    public UnResolvableVariableException(Type dependencyType, string variableName, IGeneratedMethod method);
    public UnResolvableVariableException(Type dependencyType, IGeneratedMethod method);
    [CompilerGeneratedAttribute]
public Type get_DependencyType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public IGeneratedMethod get_Method();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public GeneratedType get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Type(GeneratedType value);
    public virtual string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JasperFx.CodeGeneration.Util.ConstructorFinderVisitor`1 : ExpressionVisitor {
    private Type _type;
    [CompilerGeneratedAttribute]
private ConstructorInfo <Constructor>k__BackingField;
    public ConstructorInfo Constructor { get; private set; }
    public ConstructorFinderVisitor`1(Type type);
    [CompilerGeneratedAttribute]
public ConstructorInfo get_Constructor();
    [CompilerGeneratedAttribute]
private void set_Constructor(ConstructorInfo value);
    protected virtual Expression VisitNew(NewExpression node);
    public static ConstructorInfo Find(Expression`1<Func`1<T>> expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JasperFx.CodeGeneration.Value : Variable {
    public Value(object value);
    public static string RepresentationInCode(object value);
}
public static class JasperFx.CodeGeneration.WalkReferencedAssemblies : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("JasperFx.CodeGeneration.WalkReferencedAssemblies/<ForTypes>d__0")]
public static IEnumerable`1<Assembly> ForTypes(Type[] types);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
