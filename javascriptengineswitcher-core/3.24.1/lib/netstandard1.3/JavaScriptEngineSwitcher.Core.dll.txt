internal static class JavaScriptEngineSwitcher.Core.Constants.JsErrorCategory : object {
    public static string Unknown;
    public static string Compilation;
    public static string Runtime;
    public static string Interrupted;
    public static string Timeout;
    public static string Usage;
    public static string Engine;
    public static string EngineLoad;
    public static string Fatal;
}
public static class JavaScriptEngineSwitcher.Core.Constants.JsErrorType : object {
    public static string Common;
    public static string Eval;
    public static string Internal;
    public static string Range;
    public static string Reference;
    public static string RegExp;
    public static string Syntax;
    public static string Type;
    public static string URI;
}
[ExtensionAttribute]
public static class JavaScriptEngineSwitcher.Core.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static bool ContainsQuotedValue(string source, string value);
    [ExtensionAttribute]
public static string TrimStart(string source, string trimString);
    [ExtensionAttribute]
public static String[] SplitToLines(string source);
    [ExtensionAttribute]
internal static bool TryGetChar(string source, int index, Char& result);
}
[ExtensionAttribute]
public static class JavaScriptEngineSwitcher.Core.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static TypeCode GetTypeCode(Type source);
}
public static class JavaScriptEngineSwitcher.Core.Helpers.CommonRegExps : object {
    public static string JsNamePattern;
    public static string JsFullNamePattern;
    public static string DocumentNamePattern;
    private static CommonRegExps();
}
public class JavaScriptEngineSwitcher.Core.Helpers.ErrorLocationItem : object {
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFragment>k__BackingField;
    public string FunctionName { get; public set; }
    public string DocumentName { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public string SourceFragment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentName();
    [CompilerGeneratedAttribute]
public void set_DocumentName(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public string get_SourceFragment();
    [CompilerGeneratedAttribute]
public void set_SourceFragment(string value);
}
public static class JavaScriptEngineSwitcher.Core.Helpers.JsErrorHelpers : object {
    private static string DocumentNameWithCoordinatesPattern;
    private static Regex _errorLocationLineRegex;
    private static JsErrorHelpers();
    public static ErrorLocationItem[] ParseErrorLocation(string errorLocation);
    public static string StringifyErrorLocationItems(ErrorLocationItem[] errorLocationItems, bool omitSourceFragment);
    public static void WriteErrorLocationLine(StringBuilder buffer, string functionName, string documentName, int lineNumber, int columnNumber, string sourceFragment);
    public static string GenerateEngineLoadErrorMessage(string description, string engineName, bool quoteDescription);
    public static string GenerateScriptErrorMessage(string type, string description, string documentName, int lineNumber, int columnNumber, string sourceFragment);
    public static string GenerateScriptErrorMessage(string type, string description, string callStack);
    private static string GenerateScriptErrorMessage(string type, string description, string documentName, int lineNumber, int columnNumber, string sourceFragment, string callStack);
    public static string GenerateErrorDetails(JsException jsException, bool omitMessage);
    public static string GenerateErrorDetails(JsScriptException jsScriptException, bool omitMessage);
    public static string GenerateErrorDetails(JsRuntimeException jsRuntimeException, bool omitMessage);
    private static void WriteCommonErrorDetails(StringBuilder buffer, JsException jsException, bool omitMessage);
    private static void WriteScriptErrorDetails(StringBuilder buffer, JsScriptException jsScriptException);
    private static void WriteRuntimeErrorDetails(StringBuilder buffer, JsRuntimeException jsRuntimeException);
    public static JsEngineLoadException WrapEngineLoadException(Exception exception, string engineName, string engineVersion, bool quoteDescription);
    [ObsoleteAttribute("Use a `GenerateErrorDetails` method")]
public static string Format(JsException jsException);
    [ObsoleteAttribute("Use a `GenerateErrorDetails` method")]
public static string Format(JsScriptException jsScriptException);
    [ObsoleteAttribute("Use a `GenerateErrorDetails` method")]
public static string Format(JsRuntimeException jsRuntimeException);
}
public static class JavaScriptEngineSwitcher.Core.Helpers.TextHelpers : object {
    private static Char[] _nextLineBreakChars;
    private static TextHelpers();
    public static string GetTextFragment(string sourceText, int lineNumber, int columnNumber, int maxFragmentLength);
    public static string GetTextFragmentFromLine(string textLine, int columnNumber, int maxFragmentLength);
    private static string GetTextFragmentInternal(string source, int position, int length, int columnNumber, int maxFragmentLength);
    private static void GetPositionOfLine(string sourceCode, int lineNumber, Int32& position, Int32& length);
    private static void FindLineBreak(string sourceText, int startPosition, Int32& lineBreakPosition, Int32& lineBreakLength);
    public static void FindNextLineBreak(string sourceText, int startPosition, int length, Int32& lineBreakPosition, Int32& lineBreakLength);
}
public static class JavaScriptEngineSwitcher.Core.Helpers.ValidationHelpers : object {
    private static Type[] _supportedTypes;
    private static TypeCode[] _primitiveTypeCodes;
    private static Regex _jsNameRegex;
    private static Regex _documentNameRegex;
    private static ValidationHelpers();
    public static bool IsSupportedType(Type type);
    public static bool IsPrimitiveType(Type type);
    public static bool CheckNameFormat(string name);
    public static bool CheckDocumentNameFormat(string name);
}
public interface JavaScriptEngineSwitcher.Core.IJsEngine {
    public string Name { get; }
    public string Version { get; }
    public bool SupportsScriptPrecompilation { get; }
    public bool SupportsScriptInterruption { get; }
    public bool SupportsGarbageCollection { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Version();
    public abstract virtual bool get_SupportsScriptPrecompilation();
    public abstract virtual bool get_SupportsScriptInterruption();
    public abstract virtual bool get_SupportsGarbageCollection();
    public abstract virtual IPrecompiledScript Precompile(string code);
    public abstract virtual IPrecompiledScript Precompile(string code, string documentName);
    public abstract virtual IPrecompiledScript PrecompileFile(string path, Encoding encoding);
    public abstract virtual IPrecompiledScript PrecompileResource(string resourceName, Type type);
    public abstract virtual IPrecompiledScript PrecompileResource(string resourceName, Assembly assembly);
    public abstract virtual object Evaluate(string expression);
    public abstract virtual object Evaluate(string expression, string documentName);
    public abstract virtual T Evaluate(string expression);
    public abstract virtual T Evaluate(string expression, string documentName);
    public abstract virtual void Execute(string code);
    public abstract virtual void Execute(string code, string documentName);
    public abstract virtual void Execute(IPrecompiledScript precompiledScript);
    public abstract virtual void ExecuteFile(string path, Encoding encoding);
    public abstract virtual void ExecuteResource(string resourceName, Type type);
    public abstract virtual void ExecuteResource(string resourceName, Assembly assembly);
    public abstract virtual object CallFunction(string functionName, Object[] args);
    public abstract virtual T CallFunction(string functionName, Object[] args);
    public abstract virtual bool HasVariable(string variableName);
    public abstract virtual object GetVariableValue(string variableName);
    public abstract virtual T GetVariableValue(string variableName);
    public abstract virtual void SetVariableValue(string variableName, object value);
    public abstract virtual void RemoveVariable(string variableName);
    public abstract virtual void EmbedHostObject(string itemName, object value);
    public abstract virtual void EmbedHostType(string itemName, Type type);
    public abstract virtual void Interrupt();
    public abstract virtual void CollectGarbage();
}
public interface JavaScriptEngineSwitcher.Core.IJsEngineFactory {
    public string EngineName { get; }
    public abstract virtual string get_EngineName();
    public abstract virtual IJsEngine CreateEngine();
}
public interface JavaScriptEngineSwitcher.Core.IJsEngineSwitcher {
    public string DefaultEngineName { get; public set; }
    public JsEngineFactoryCollection EngineFactories { get; }
    public abstract virtual string get_DefaultEngineName();
    public abstract virtual void set_DefaultEngineName(string value);
    public abstract virtual JsEngineFactoryCollection get_EngineFactories();
    public abstract virtual IJsEngine CreateEngine(string name);
    public abstract virtual IJsEngine CreateDefaultEngine();
}
public interface JavaScriptEngineSwitcher.Core.IPrecompiledScript {
    public string EngineName { get; }
    public abstract virtual string get_EngineName();
}
public class JavaScriptEngineSwitcher.Core.JsCompilationException : JsScriptException {
    public JsCompilationException(string message);
    public JsCompilationException(string message, Exception innerException);
    public JsCompilationException(string message, string engineName, string engineVersion);
    public JsCompilationException(string message, string engineName, string engineVersion, Exception innerException);
}
public abstract class JavaScriptEngineSwitcher.Core.JsEngineBase : object {
    protected static string DefaultDocumentName;
    protected InterlockedStatedFlag _disposedFlag;
    public string Name { get; }
    public string Version { get; }
    public bool SupportsScriptPrecompilation { get; }
    public bool SupportsScriptInterruption { get; }
    public bool SupportsGarbageCollection { get; }
    protected void VerifyNotDisposed();
    protected virtual IPrecompiledScript InnerPrecompile(string code);
    protected virtual IPrecompiledScript InnerPrecompile(string code, string documentName);
    protected abstract virtual object InnerEvaluate(string expression);
    protected abstract virtual object InnerEvaluate(string expression, string documentName);
    protected abstract virtual T InnerEvaluate(string expression);
    protected abstract virtual T InnerEvaluate(string expression, string documentName);
    protected abstract virtual void InnerExecute(string code);
    protected abstract virtual void InnerExecute(string code, string documentName);
    protected virtual void InnerExecute(IPrecompiledScript precompiledScript);
    protected abstract virtual object InnerCallFunction(string functionName, Object[] args);
    protected abstract virtual T InnerCallFunction(string functionName, Object[] args);
    protected abstract virtual bool InnerHasVariable(string variableName);
    protected abstract virtual object InnerGetVariableValue(string variableName);
    protected abstract virtual T InnerGetVariableValue(string variableName);
    protected abstract virtual void InnerSetVariableValue(string variableName, object value);
    protected abstract virtual void InnerRemoveVariable(string variableName);
    protected virtual void InnerEmbedHostObject(string itemName, object value);
    protected virtual void InnerEmbedHostType(string itemName, Type type);
    protected virtual void InnerInterrupt();
    protected virtual void InnerCollectGarbage();
    public abstract virtual string get_Name();
    public abstract virtual string get_Version();
    public virtual bool get_SupportsScriptPrecompilation();
    public virtual bool get_SupportsScriptInterruption();
    public virtual bool get_SupportsGarbageCollection();
    public virtual IPrecompiledScript Precompile(string code);
    public virtual IPrecompiledScript Precompile(string code, string documentName);
    public virtual IPrecompiledScript PrecompileFile(string path, Encoding encoding);
    public virtual IPrecompiledScript PrecompileResource(string resourceName, Type type);
    public virtual IPrecompiledScript PrecompileResource(string resourceName, Assembly assembly);
    public virtual object Evaluate(string expression);
    public virtual object Evaluate(string expression, string documentName);
    public virtual T Evaluate(string expression);
    public virtual T Evaluate(string expression, string documentName);
    public virtual void Execute(string code);
    public virtual void Execute(string code, string documentName);
    public virtual void Execute(IPrecompiledScript precompiledScript);
    public virtual void ExecuteFile(string path, Encoding encoding);
    public virtual void ExecuteResource(string resourceName, Type type);
    public virtual void ExecuteResource(string resourceName, Assembly assembly);
    public virtual object CallFunction(string functionName, Object[] args);
    public virtual T CallFunction(string functionName, Object[] args);
    public virtual bool HasVariable(string variableName);
    public virtual object GetVariableValue(string variableName);
    public virtual T GetVariableValue(string variableName);
    public virtual void SetVariableValue(string variableName, object value);
    public virtual void RemoveVariable(string variableName);
    public virtual void EmbedHostObject(string itemName, object value);
    public virtual void EmbedHostType(string itemName, Type type);
    public virtual void Interrupt();
    public virtual void CollectGarbage();
    public abstract virtual void Dispose();
}
public class JavaScriptEngineSwitcher.Core.JsEngineException : JsException {
    public JsEngineException(string message);
    public JsEngineException(string message, Exception innerException);
    public JsEngineException(string message, string engineName, string engineVersion);
    public JsEngineException(string message, string engineName, string engineVersion, Exception innerException);
}
public class JavaScriptEngineSwitcher.Core.JsEngineFactoryCollection : object {
    private Dictionary`2<string, IJsEngineFactory> _factories;
    public int Count { get; }
    public int get_Count();
    public ReadOnlyCollection`1<IJsEngineFactory> GetRegisteredFactories();
    public IJsEngineFactory Get(string engineName);
    public void Add(IJsEngineFactory factory);
    public bool Remove(string engineName);
    public bool Remove(IJsEngineFactory factory);
    public void Clear();
    public sealed virtual IEnumerator`1<IJsEngineFactory> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JavaScriptEngineSwitcher.Core.JsEngineLoadException : JsEngineException {
    public JsEngineLoadException(string message);
    public JsEngineLoadException(string message, Exception innerException);
    public JsEngineLoadException(string message, string engineName, string engineVersion);
    public JsEngineLoadException(string message, string engineName, string engineVersion, Exception innerException);
}
public class JavaScriptEngineSwitcher.Core.JsEngineNotFoundException : Exception {
    public JsEngineNotFoundException(string message);
    public JsEngineNotFoundException(string message, Exception innerException);
}
public class JavaScriptEngineSwitcher.Core.JsEngineSwitcher : object {
    private static bool _allowCurrentProperty;
    private static Lazy`1<IJsEngineSwitcher> _default;
    private static IJsEngineSwitcher _current;
    [CompilerGeneratedAttribute]
private string <DefaultEngineName>k__BackingField;
    [CompilerGeneratedAttribute]
private JsEngineFactoryCollection <EngineFactories>k__BackingField;
    public static bool AllowCurrentProperty { get; public set; }
    public static IJsEngineSwitcher Current { get; public set; }
    [ObsoleteAttribute("Use a `Current` property")]
public static IJsEngineSwitcher Instance { get; }
    public string DefaultEngineName { get; public set; }
    public JsEngineFactoryCollection EngineFactories { get; private set; }
    public JsEngineSwitcher(JsEngineFactoryCollection engineFactories);
    public JsEngineSwitcher(JsEngineFactoryCollection engineFactories, string defaultEngineName);
    private static JsEngineSwitcher();
    public static bool get_AllowCurrentProperty();
    public static void set_AllowCurrentProperty(bool value);
    public static IJsEngineSwitcher get_Current();
    public static void set_Current(IJsEngineSwitcher value);
    public static IJsEngineSwitcher get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultEngineName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultEngineName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual JsEngineFactoryCollection get_EngineFactories();
    [CompilerGeneratedAttribute]
private void set_EngineFactories(JsEngineFactoryCollection value);
    public sealed virtual IJsEngine CreateEngine(string name);
    public sealed virtual IJsEngine CreateDefaultEngine();
}
public class JavaScriptEngineSwitcher.Core.JsException : Exception {
    private string _engineName;
    private string _engineVersion;
    private string _category;
    private string _description;
    public string EngineName { get; }
    public string EngineVersion { get; }
    public string Category { get; public set; }
    public string Description { get; public set; }
    public JsException(string message);
    public JsException(string message, Exception innerException);
    public JsException(string message, string engineName, string engineVersion);
    public JsException(string message, string engineName, string engineVersion, Exception innerException);
    public string get_EngineName();
    public string get_EngineVersion();
    public string get_Category();
    public void set_Category(string value);
    public string get_Description();
    public void set_Description(string value);
    public virtual string ToString();
}
public class JavaScriptEngineSwitcher.Core.JsFatalException : JsException {
    public JsFatalException(string message);
    public JsFatalException(string message, Exception innerException);
    public JsFatalException(string message, string engineName, string engineVersion);
    public JsFatalException(string message, string engineName, string engineVersion, Exception innerException);
}
public class JavaScriptEngineSwitcher.Core.JsInterruptedException : JsRuntimeException {
    public JsInterruptedException(string message);
    public JsInterruptedException(string message, Exception innerException);
    public JsInterruptedException(string message, string engineName, string engineVersion);
    public JsInterruptedException(string message, string engineName, string engineVersion, Exception innerException);
}
public class JavaScriptEngineSwitcher.Core.JsRuntimeException : JsScriptException {
    private string _callStack;
    public string CallStack { get; public set; }
    public JsRuntimeException(string message);
    public JsRuntimeException(string message, Exception innerException);
    public JsRuntimeException(string message, string engineName, string engineVersion);
    public JsRuntimeException(string message, string engineName, string engineVersion, Exception innerException);
    public string get_CallStack();
    public void set_CallStack(string value);
}
public class JavaScriptEngineSwitcher.Core.JsScriptException : JsException {
    private string _type;
    private string _documentName;
    private int _lineNumber;
    private int _columnNumber;
    private string _sourceFragment;
    public string Type { get; public set; }
    public string DocumentName { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public string SourceFragment { get; public set; }
    public JsScriptException(string message);
    public JsScriptException(string message, Exception innerException);
    public JsScriptException(string message, string engineName, string engineVersion);
    public JsScriptException(string message, string engineName, string engineVersion, Exception innerException);
    public string get_Type();
    public void set_Type(string value);
    public string get_DocumentName();
    public void set_DocumentName(string value);
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public string get_SourceFragment();
    public void set_SourceFragment(string value);
}
public class JavaScriptEngineSwitcher.Core.JsTimeoutException : JsRuntimeException {
    public JsTimeoutException(string message);
    public JsTimeoutException(string message, Exception innerException);
    public JsTimeoutException(string message, string engineName, string engineVersion);
    public JsTimeoutException(string message, string engineName, string engineVersion, Exception innerException);
}
public class JavaScriptEngineSwitcher.Core.JsUsageException : JsException {
    public JsUsageException(string message);
    public JsUsageException(string message, Exception innerException);
    public JsUsageException(string message, string engineName, string engineVersion);
    public JsUsageException(string message, string engineName, string engineVersion, Exception innerException);
}
[ExtensionAttribute]
internal static class JavaScriptEngineSwitcher.Core.Polyfills.System.Reflection.TypeInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsInstanceOfType(TypeInfo source, object o);
}
public class JavaScriptEngineSwitcher.Core.Resources.Strings : object {
    private static Lazy`1<ResourceManager> _resourceManager;
    private static CultureInfo _resourceCulture;
    public static ResourceManager ResourceManager { get; }
    public static CultureInfo Culture { get; public set; }
    public static string Common_ArgumentIsEmpty { get; }
    public static string Common_ArgumentIsNull { get; }
    public static string Common_CannotConvertObjectToType { get; }
    public static string Common_EnumValueConversionFailed { get; }
    public static string Common_FileNotExist { get; }
    public static string Common_ResourceIsNull { get; }
    public static string Common_SeeOriginalErrorMessage { get; }
    public static string Common_ValueIsEmpty { get; }
    public static string Common_ValueIsNull { get; }
    public static string Common_ValueTypeCannotBeNull { get; }
    public static string Configuration_AssigningToJsEngineSwitcherCurrentPropertyForbidden { get; }
    public static string Configuration_DefaultJsEngineNameNotSpecified { get; }
    public static string Configuration_GettingFromJsEngineSwitcherCurrentPropertyForbidden { get; }
    public static string Configuration_JsEngineFactoryNotFound { get; }
    public static string Engine_AssemblyNotFound { get; }
    public static string Engine_JsEngineNotLoaded { get; }
    public static string Engine_NoNuGetPackageForProcessorArchitecture { get; }
    public static string Engine_NuGetPackageInstallationRequired { get; }
    public static string Engine_OperatingSystemNotSupported { get; }
    public static string Engine_ProcessorArchitectureNotSupported { get; }
    public static string ErrorDetails_CallStack { get; }
    public static string ErrorDetails_Category { get; }
    public static string ErrorDetails_ColumnNumber { get; }
    public static string ErrorDetails_Description { get; }
    public static string ErrorDetails_DocumentName { get; }
    public static string ErrorDetails_EngineName { get; }
    public static string ErrorDetails_EngineVersion { get; }
    public static string ErrorDetails_LineNumber { get; }
    public static string ErrorDetails_Message { get; }
    public static string ErrorDetails_SourceFragment { get; }
    public static string ErrorDetails_Type { get; }
    public static string Runtime_FunctionNotExist { get; }
    public static string Runtime_InvalidErrorLocationLineFormat { get; }
    public static string Runtime_ScriptInterrupted { get; }
    public static string Runtime_ScriptTimeoutExceeded { get; }
    public static string Runtime_VariableNotExist { get; }
    public static string Usage_CannotConvertPrecompiledScriptToInternalType { get; }
    public static string Usage_CannotExecuteEmptyFile { get; }
    public static string Usage_CannotExecuteEmptyResource { get; }
    public static string Usage_CannotExecutePrecompiledScriptForAnotherJsEngine { get; }
    public static string Usage_CannotPrecompileEmptyFile { get; }
    public static string Usage_CannotPrecompileEmptyResource { get; }
    public static string Usage_EmbeddedHostObjectTypeNotSupported { get; }
    public static string Usage_EmbeddedHostTypeNotSupported { get; }
    public static string Usage_FunctionParameterTypeNotSupported { get; }
    public static string Usage_InvalidDocumentNameFormat { get; }
    public static string Usage_InvalidFileNameFormat { get; }
    public static string Usage_InvalidFunctionNameFormat { get; }
    public static string Usage_InvalidResourceNameFormat { get; }
    public static string Usage_InvalidScriptItemNameFormat { get; }
    public static string Usage_InvalidVariableNameFormat { get; }
    public static string Usage_ReturnValueTypeNotSupported { get; }
    public static string Usage_VariableTypeNotSupported { get; }
    private static Strings();
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Common_ArgumentIsEmpty();
    public static string get_Common_ArgumentIsNull();
    public static string get_Common_CannotConvertObjectToType();
    public static string get_Common_EnumValueConversionFailed();
    public static string get_Common_FileNotExist();
    public static string get_Common_ResourceIsNull();
    public static string get_Common_SeeOriginalErrorMessage();
    public static string get_Common_ValueIsEmpty();
    public static string get_Common_ValueIsNull();
    public static string get_Common_ValueTypeCannotBeNull();
    public static string get_Configuration_AssigningToJsEngineSwitcherCurrentPropertyForbidden();
    public static string get_Configuration_DefaultJsEngineNameNotSpecified();
    public static string get_Configuration_GettingFromJsEngineSwitcherCurrentPropertyForbidden();
    public static string get_Configuration_JsEngineFactoryNotFound();
    public static string get_Engine_AssemblyNotFound();
    public static string get_Engine_JsEngineNotLoaded();
    public static string get_Engine_NoNuGetPackageForProcessorArchitecture();
    public static string get_Engine_NuGetPackageInstallationRequired();
    public static string get_Engine_OperatingSystemNotSupported();
    public static string get_Engine_ProcessorArchitectureNotSupported();
    public static string get_ErrorDetails_CallStack();
    public static string get_ErrorDetails_Category();
    public static string get_ErrorDetails_ColumnNumber();
    public static string get_ErrorDetails_Description();
    public static string get_ErrorDetails_DocumentName();
    public static string get_ErrorDetails_EngineName();
    public static string get_ErrorDetails_EngineVersion();
    public static string get_ErrorDetails_LineNumber();
    public static string get_ErrorDetails_Message();
    public static string get_ErrorDetails_SourceFragment();
    public static string get_ErrorDetails_Type();
    public static string get_Runtime_FunctionNotExist();
    public static string get_Runtime_InvalidErrorLocationLineFormat();
    public static string get_Runtime_ScriptInterrupted();
    public static string get_Runtime_ScriptTimeoutExceeded();
    public static string get_Runtime_VariableNotExist();
    public static string get_Usage_CannotConvertPrecompiledScriptToInternalType();
    public static string get_Usage_CannotExecuteEmptyFile();
    public static string get_Usage_CannotExecuteEmptyResource();
    public static string get_Usage_CannotExecutePrecompiledScriptForAnotherJsEngine();
    public static string get_Usage_CannotPrecompileEmptyFile();
    public static string get_Usage_CannotPrecompileEmptyResource();
    public static string get_Usage_EmbeddedHostObjectTypeNotSupported();
    public static string get_Usage_EmbeddedHostTypeNotSupported();
    public static string get_Usage_FunctionParameterTypeNotSupported();
    public static string get_Usage_InvalidDocumentNameFormat();
    public static string get_Usage_InvalidFileNameFormat();
    public static string get_Usage_InvalidFunctionNameFormat();
    public static string get_Usage_InvalidResourceNameFormat();
    public static string get_Usage_InvalidScriptItemNameFormat();
    public static string get_Usage_InvalidVariableNameFormat();
    public static string get_Usage_ReturnValueTypeNotSupported();
    public static string get_Usage_VariableTypeNotSupported();
    private static string GetString(string name);
}
public class JavaScriptEngineSwitcher.Core.Undefined : object {
    public static Undefined Value;
    private static Undefined();
    public virtual string ToString();
}
public class JavaScriptEngineSwitcher.Core.Utilities.InterlockedStatedFlag : ValueType {
    private int _counter;
    public bool IsSet();
    public bool Set();
}
public class JavaScriptEngineSwitcher.Core.Utilities.StatedFlag : ValueType {
    private bool _isSet;
    public bool IsSet();
    public bool Set();
}
public static class JavaScriptEngineSwitcher.Core.Utilities.TypeConverter : object {
    public static T ConvertToType(object value);
    public static object ConvertToType(object value, Type targetType);
    public static bool TryConvertToType(object value, T& convertedValue);
    public static bool TryConvertToType(object value, Type targetType, Object& convertedValue);
    private static bool ConvertObjectToType(object obj, Type type, bool throwOnError, Object& convertedObject);
    private static bool InnerConvertObjectToType(object obj, Type type, bool throwOnError, Object& convertedObject);
    private static bool IsNonNullableValueType(Type type);
}
public class JavaScriptEngineSwitcher.Core.Utilities.UniqueDocumentNameManager : object {
    private string _defaultName;
    private Dictionary`2<string, UInt32> _storage;
    private object _storageSynchronizer;
    public UniqueDocumentNameManager(string defaultName);
    public string GetUniqueName(string name);
}
public static class JavaScriptEngineSwitcher.Core.Utilities.Utils : object {
    private static bool _isMonoRuntime;
    private static Utils();
    public static bool IsMonoRuntime();
    public static bool Is64BitProcess();
    public static string GetResourceAsString(string resourceName, Type type);
    public static string GetResourceAsString(string resourceName, Assembly assembly);
    private static string InnerGetResourceAsString(string resourceName, Assembly assembly);
    public static string GetFileTextContent(string path, Encoding encoding);
    public static TDest GetEnumFromOtherEnum(TSource value);
}
