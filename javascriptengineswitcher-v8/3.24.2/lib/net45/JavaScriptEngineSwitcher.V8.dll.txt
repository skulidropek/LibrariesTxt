[ExtensionAttribute]
public static class JavaScriptEngineSwitcher.V8.JsEngineFactoryCollectionExtensions : object {
    [ExtensionAttribute]
public static JsEngineFactoryCollection AddV8(JsEngineFactoryCollection source);
    [ExtensionAttribute]
public static JsEngineFactoryCollection AddV8(JsEngineFactoryCollection source, Action`1<V8Settings> configure);
    [ExtensionAttribute]
public static JsEngineFactoryCollection AddV8(JsEngineFactoryCollection source, V8Settings settings);
}
internal class JavaScriptEngineSwitcher.V8.Resources.Strings : object {
    private static Lazy`1<ResourceManager> _resourceManager;
    private static CultureInfo _resourceCulture;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Usage_PrecompiledScriptNotAccepted { get; }
    private static Strings();
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Usage_PrecompiledScriptNotAccepted();
    private static string GetString(string name);
}
public class JavaScriptEngineSwitcher.V8.V8JsEngine : JsEngineBase {
    public static string EngineName;
    private static string EngineVersion;
    private V8ScriptEngine _jsEngine;
    private static Regex _errorMessageWithTypeRegex;
    private static Regex _libraryLoadErrorMessage;
    private static Dictionary`2<string, string> _nativeAssemblyPackageMap;
    public string Name { get; }
    public string Version { get; }
    public bool SupportsScriptPrecompilation { get; }
    public bool SupportsScriptInterruption { get; }
    public bool SupportsGarbageCollection { get; }
    public V8JsEngine(V8Settings settings);
    private static V8JsEngine();
    private static object MapToScriptType(object value);
    private static object MapToHostType(object value);
    private static JsException WrapScriptEngineException(ScriptEngineException originalException);
    private static JsInterruptedException WrapScriptInterruptedException(ScriptInterruptedException originalInterruptedException);
    private static JsEngineLoadException WrapTypeLoadException(TypeLoadException originalTypeLoadException);
    protected virtual IPrecompiledScript InnerPrecompile(string code);
    protected virtual IPrecompiledScript InnerPrecompile(string code, string documentName);
    protected virtual object InnerEvaluate(string expression);
    protected virtual object InnerEvaluate(string expression, string documentName);
    protected virtual T InnerEvaluate(string expression);
    protected virtual T InnerEvaluate(string expression, string documentName);
    protected virtual void InnerExecute(string code);
    protected virtual void InnerExecute(string code, string documentName);
    protected virtual void InnerExecute(IPrecompiledScript precompiledScript);
    protected virtual object InnerCallFunction(string functionName, Object[] args);
    protected virtual T InnerCallFunction(string functionName, Object[] args);
    protected virtual bool InnerHasVariable(string variableName);
    protected virtual object InnerGetVariableValue(string variableName);
    protected virtual T InnerGetVariableValue(string variableName);
    protected virtual void InnerSetVariableValue(string variableName, object value);
    protected virtual void InnerRemoveVariable(string variableName);
    protected virtual void InnerEmbedHostObject(string itemName, object value);
    protected virtual void InnerEmbedHostType(string itemName, Type type);
    protected virtual void InnerInterrupt();
    protected virtual void InnerCollectGarbage();
    public virtual string get_Name();
    public virtual string get_Version();
    public virtual bool get_SupportsScriptPrecompilation();
    public virtual bool get_SupportsScriptInterruption();
    public virtual bool get_SupportsGarbageCollection();
    public virtual void Dispose();
}
public class JavaScriptEngineSwitcher.V8.V8JsEngineFactory : object {
    private V8Settings _settings;
    public string EngineName { get; }
    public V8JsEngineFactory(V8Settings settings);
    public sealed virtual string get_EngineName();
    public sealed virtual IJsEngine CreateEngine();
}
internal class JavaScriptEngineSwitcher.V8.V8PrecompiledScript : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private V8CacheKind <CacheKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CachedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentName>k__BackingField;
    public string Code { get; private set; }
    public V8CacheKind CacheKind { get; private set; }
    public Byte[] CachedBytes { get; private set; }
    public string DocumentName { get; private set; }
    public string EngineName { get; }
    public V8PrecompiledScript(string code, V8CacheKind cacheKind, Byte[] cachedBytes, string documentName);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public V8CacheKind get_CacheKind();
    [CompilerGeneratedAttribute]
private void set_CacheKind(V8CacheKind value);
    [CompilerGeneratedAttribute]
public Byte[] get_CachedBytes();
    [CompilerGeneratedAttribute]
private void set_CachedBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_DocumentName();
    [CompilerGeneratedAttribute]
private void set_DocumentName(string value);
    public sealed virtual string get_EngineName();
}
public class JavaScriptEngineSwitcher.V8.V8Settings : object {
    [CompilerGeneratedAttribute]
private bool <AddPerformanceObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowReflection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AwaitDebuggerAndPauseOnStart>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <DebugPort>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDynamicBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableGlobalMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDebugging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRemoteDebugging>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HeapExpansionMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HeapSizeSampleInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MaxArrayBufferAllocation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxExecutableSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UIntPtr <MaxHeapSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxNewSpaceSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxOldSpaceSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UIntPtr <MaxStackUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetTimerResolution>k__BackingField;
    public bool AddPerformanceObject { get; public set; }
    public bool AllowReflection { get; public set; }
    public bool AwaitDebuggerAndPauseOnStart { get; public set; }
    public ushort DebugPort { get; public set; }
    public bool DisableDynamicBinding { get; public set; }
    public bool DisableGlobalMembers { get; public set; }
    public bool EnableDebugging { get; public set; }
    public bool EnableRemoteDebugging { get; public set; }
    public double HeapExpansionMultiplier { get; public set; }
    public TimeSpan HeapSizeSampleInterval { get; public set; }
    public ulong MaxArrayBufferAllocation { get; public set; }
    [ObsoleteAttribute("Executable code now occupies the old object heap. Use a `MaxOldSpaceSize` property instead.")]
public int MaxExecutableSize { get; public set; }
    public UIntPtr MaxHeapSize { get; public set; }
    public int MaxNewSpaceSize { get; public set; }
    public int MaxOldSpaceSize { get; public set; }
    public UIntPtr MaxStackUsage { get; public set; }
    public bool SetTimerResolution { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AddPerformanceObject();
    [CompilerGeneratedAttribute]
public void set_AddPerformanceObject(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowReflection();
    [CompilerGeneratedAttribute]
public void set_AllowReflection(bool value);
    [CompilerGeneratedAttribute]
public bool get_AwaitDebuggerAndPauseOnStart();
    [CompilerGeneratedAttribute]
public void set_AwaitDebuggerAndPauseOnStart(bool value);
    [CompilerGeneratedAttribute]
public ushort get_DebugPort();
    [CompilerGeneratedAttribute]
public void set_DebugPort(ushort value);
    [CompilerGeneratedAttribute]
public bool get_DisableDynamicBinding();
    [CompilerGeneratedAttribute]
public void set_DisableDynamicBinding(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableGlobalMembers();
    [CompilerGeneratedAttribute]
public void set_DisableGlobalMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugging();
    [CompilerGeneratedAttribute]
public void set_EnableDebugging(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableRemoteDebugging();
    [CompilerGeneratedAttribute]
public void set_EnableRemoteDebugging(bool value);
    [CompilerGeneratedAttribute]
public double get_HeapExpansionMultiplier();
    [CompilerGeneratedAttribute]
public void set_HeapExpansionMultiplier(double value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HeapSizeSampleInterval();
    [CompilerGeneratedAttribute]
public void set_HeapSizeSampleInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public ulong get_MaxArrayBufferAllocation();
    [CompilerGeneratedAttribute]
public void set_MaxArrayBufferAllocation(ulong value);
    [CompilerGeneratedAttribute]
public int get_MaxExecutableSize();
    [CompilerGeneratedAttribute]
public void set_MaxExecutableSize(int value);
    [CompilerGeneratedAttribute]
public UIntPtr get_MaxHeapSize();
    [CompilerGeneratedAttribute]
public void set_MaxHeapSize(UIntPtr value);
    [CompilerGeneratedAttribute]
public int get_MaxNewSpaceSize();
    [CompilerGeneratedAttribute]
public void set_MaxNewSpaceSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxOldSpaceSize();
    [CompilerGeneratedAttribute]
public void set_MaxOldSpaceSize(int value);
    [CompilerGeneratedAttribute]
public UIntPtr get_MaxStackUsage();
    [CompilerGeneratedAttribute]
public void set_MaxStackUsage(UIntPtr value);
    [CompilerGeneratedAttribute]
public bool get_SetTimerResolution();
    [CompilerGeneratedAttribute]
public void set_SetTimerResolution(bool value);
}
