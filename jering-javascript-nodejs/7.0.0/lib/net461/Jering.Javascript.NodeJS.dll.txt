[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.BlockDrainerService : object {
    private TaskCompletionSource`1<bool> _drainTaskCompletionSource;
    private int _count;
    private SemaphoreSlim _entranceLock;
    private bool _disposed;
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.BlockDrainerService/<EnterBlockAsync>d__4")]
public sealed virtual Task EnterBlockAsync();
    public sealed virtual void ExitBlock();
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.BlockDrainerService/<DrainBlockAndPreventEntryAsync>d__6")]
public sealed virtual Task DrainBlockAndPreventEntryAsync();
    public sealed virtual void ResetAfterDraining();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public enum Jering.Javascript.NodeJS.Concurrency : Enum {
    public int value__;
    public static Concurrency None;
    public static Concurrency MultiProcess;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.ConfigureNodeJSProcessOptions : object {
    private IServiceScopeFactory _serviceScopeFactory;
    public ConfigureNodeJSProcessOptions(IServiceScopeFactory serviceScopeFactory);
    public sealed virtual void Configure(NodeJSProcessOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.ConnectionException : Exception {
    public ConnectionException(string message);
    protected ConnectionException(SerializationInfo info, StreamingContext context);
    public ConnectionException(string message, Exception innerException);
}
internal class Jering.Javascript.NodeJS.DisposeTrackingSemaphoreSlim : SemaphoreSlim {
    private bool _disposed;
    public DisposeTrackingSemaphoreSlim(int initialCount, int maxCount);
    public void ReleaseIfNotDisposed();
    protected virtual void Dispose(bool explicitDisposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.EmbeddedResourcesService : object {
    public sealed virtual string ReadAsString(Assembly embeddedResourceAssembly, string name);
    public sealed virtual string ReadAsString(Type typeFromEmbeddedResourceAssembly, string name);
    public sealed virtual Stream ReadAsStream(Assembly embeddedResourceAssembly, string name);
    public sealed virtual Stream ReadAsStream(Type typeFromEmbeddedResourceAssembly, string name);
}
public class Jering.Javascript.NodeJS.EnvironmentService : object {
    public int ProcessorCount { get; }
    public sealed virtual int get_ProcessorCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.FileWatcherService : object {
    private bool _debugLoggingEnabled;
    private bool _infoLoggingEnabled;
    private ILogger`1<FileWatcherService> _logger;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action _fileChanged;
    private NodeJSProcessOptions _nodeJSProcessOptions;
    private OutOfProcessNodeJSServiceOptions _outOfProcessNodeJSServiceOptions;
    [NullableAttribute("2")]
private FileSystemWatcher modreq(System.Runtime.CompilerServices.IsVolatile) _fileSystemWatcher;
    private SemaphoreSlim _createFileSystemWatcherLock;
    [NullableAttribute("2")]
private CancellationTokenSource _cancellationTokenSource;
    private object _cancellationTokenSourceLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ReadOnlyCollection`1<Regex> _filters;
    private bool _disposed;
    public FileWatcherService(IOptions`1<NodeJSProcessOptions> nodeJSProcessOptionsAccessor, IOptions`1<OutOfProcessNodeJSServiceOptions> outOfProcessNodeJSServiceOptions, ILogger`1<FileWatcherService> logger);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void add__fileChanged(Action value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void remove__fileChanged(Action value);
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.FileWatcherService/<AddFileChangedListenerAsync>d__15")]
public sealed virtual Task AddFileChangedListenerAsync(Action fileChanged);
    internal virtual FileSystemWatcher CreateFileSystemWatcher();
    internal virtual void InternalFileChangedHandler(object _, FileSystemEventArgs fileSystemEventArgs);
    internal virtual void InternalFileRenamedHandler(object _, RenamedEventArgs renamedEventArgs);
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.FileWatcherService/<InternalFileHandlerCoreAsync>d__19")]
internal virtual Task InternalFileHandlerCoreAsync(string path);
    internal virtual CancellationTokenSource CancelExistingAndGetNewCancellationTokenSource();
    internal virtual void DisposeAndRemoveCancellationTokenSource(CancellationTokenSource cancellationTokenSource);
    internal virtual bool IsPathWatched(string path);
    internal virtual string ResolveDirectoryPath(string directoryPath, string projectPath);
    internal virtual ReadOnlyCollection`1<Regex> ResolveFilters(IEnumerable`1<string> fileNamePatterns);
    internal virtual Regex CreateRegex(string fileNamePattern);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.HttpClientService : object {
    private HttpClient _httpClient;
    public TimeSpan Timeout { get; public set; }
    public HttpClientService(HttpClient httpClient, IOptions`1<OutOfProcessNodeJSServiceOptions> outOfProcessNodeJSServiceOptionsAccessor);
    public sealed virtual TimeSpan get_Timeout();
    public sealed virtual void set_Timeout(TimeSpan value);
    public sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.HttpNodeJSPoolService : object {
    [NullableAttribute("1")]
private ReadOnlyCollection`1<HttpNodeJSService> _httpNodeJSServices;
    private bool _disposed;
    private int _nextIndex;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public int Size { get; }
    [NullableContextAttribute("1")]
public HttpNodeJSPoolService(ReadOnlyCollection`1<HttpNodeJSService> httpNodeJSServices);
    [CompilerGeneratedAttribute]
public int get_Size();
    [NullableContextAttribute("1")]
internal HttpNodeJSService GetHttpNodeJSService();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public sealed virtual Task InvokeFromFileAsync(string modulePath, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task InvokeFromStreamAsync(Func`1<Stream> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual Task InvokeFromStreamAsync(Stream moduleStream, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task InvokeFromStringAsync(Func`1<string> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual Task InvokeFromStringAsync(string moduleString, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual Task`1<ValueTuple`2<bool, T>> TryInvokeFromCacheAsync(string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<bool> TryInvokeFromCacheAsync(string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> InvokeFromFileAsync(string modulePath, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> InvokeFromStreamAsync(Func`1<Stream> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> InvokeFromStreamAsync(Stream moduleStream, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> InvokeFromStringAsync(Func`1<string> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> InvokeFromStringAsync(string moduleString, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public sealed virtual ValueTask MoveToNewProcessAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.HttpNodeJSService : OutOfProcessNodeJSService {
    private static Regex _sharedConnectionEstablishedMessageRegex;
    internal static string HTTP11_SERVER_SCRIPT_NAME;
    internal static string HTTP20_SERVER_SCRIPT_NAME;
    private IHttpContentFactory _httpContentFactory;
    private IJsonService _jsonService;
    private ILogger`1<HttpNodeJSService> _logger;
    private IHttpClientService _httpClientService;
    private bool _disposed;
    [NullableAttribute("2")]
internal Uri modreq(System.Runtime.CompilerServices.IsVolatile) _endpoint;
    protected Regex ConnectionEstablishedMessageRegex { get; }
    public HttpNodeJSService(IOptions`1<OutOfProcessNodeJSServiceOptions> outOfProcessNodeJSServiceOptionsAccessor, IOptions`1<HttpNodeJSServiceOptions> httpNodeJSServiceOptionsAccessor, IHttpContentFactory httpContentFactory, IEmbeddedResourcesService embeddedResourcesService, IFileWatcherService fileWatcherService, ITaskService taskService, IBlockDrainerService blockDrainerService, IHttpClientService httpClientService, IJsonService jsonService, INodeJSProcessFactory nodeJSProcessFactory, ILogger`1<HttpNodeJSService> logger);
    private static HttpNodeJSService();
    protected virtual Regex get_ConnectionEstablishedMessageRegex();
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.HttpNodeJSService/<TryInvokeAsync>d__12`1")]
protected virtual Task`1<ValueTuple`2<bool, T>> TryInvokeAsync(InvocationRequest invocationRequest, CancellationToken cancellationToken);
    protected virtual void OnConnectionEstablishedMessageReceived(Match connectionMessageMatch);
    protected virtual void Dispose(bool disposing);
}
public class Jering.Javascript.NodeJS.HttpNodeJSServiceOptions : object {
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.IBlockDrainerService {
    public abstract virtual Task EnterBlockAsync();
    public abstract virtual void ExitBlock();
    public abstract virtual Task DrainBlockAndPreventEntryAsync();
    public abstract virtual void ResetAfterDraining();
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.IEmbeddedResourcesService {
    public abstract virtual string ReadAsString(Assembly embeddedResourceAssembly, string name);
    public abstract virtual string ReadAsString(Type typeFromEmbeddedResourceAssembly, string name);
    public abstract virtual Stream ReadAsStream(Assembly embeddedResourceAssembly, string name);
    public abstract virtual Stream ReadAsStream(Type typeFromEmbeddedResourceAssembly, string name);
}
public interface Jering.Javascript.NodeJS.IEnvironmentService {
    public int ProcessorCount { get; }
    public abstract virtual int get_ProcessorCount();
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.IFileWatcherService {
    public abstract virtual Task AddFileChangedListenerAsync(Action fileChanged);
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.IHttpClientService {
    public TimeSpan Timeout { get; public set; }
    public abstract virtual TimeSpan get_Timeout();
    public abstract virtual void set_Timeout(TimeSpan value);
    public abstract virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.IHttpContentFactory {
    public abstract virtual HttpContent Create(InvocationRequest invocationRequest);
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.IJsonService {
    public abstract virtual ValueTask`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual Task SerializeAsync(Stream stream, T value, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.INodeJSProcess {
    public bool Connected { get; }
    public bool HasExited { get; }
    public string ExitStatus { get; }
    public int SafeID { get; }
    public abstract virtual void AddOutputReceivedHandler(MessageReceivedEventHandler messageReceivedHandler);
    public abstract virtual void AddErrorReceivedHandler(MessageReceivedEventHandler messageReceivedHandler);
    public abstract virtual void BeginOutputAndErrorReading();
    public abstract virtual void AddOutputDataReceivedHandler(DataReceivedEventHandler dataReceivedEventHandler);
    public abstract virtual void AddErrorDataReceivedHandler(DataReceivedEventHandler dataReceivedEventHandler);
    public abstract virtual bool get_Connected();
    public abstract virtual bool get_HasExited();
    public abstract virtual string get_ExitStatus();
    public abstract virtual int get_SafeID();
    public abstract virtual void SetConnected();
    public abstract virtual void BeginErrorReadLine();
    public abstract virtual void BeginOutputReadLine();
    public abstract virtual void Kill();
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.INodeJSProcessFactory {
    public abstract virtual INodeJSProcess Create(string serverScript);
    public abstract virtual INodeJSProcess Create(string serverScript, EventHandler exitedEventHandler);
}
[NullableContextAttribute("2")]
public interface Jering.Javascript.NodeJS.INodeJSService {
    public abstract virtual Task`1<T> InvokeFromFileAsync(string modulePath, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task InvokeFromFileAsync(string modulePath, string exportName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> InvokeFromStringAsync(string moduleString, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task InvokeFromStringAsync(string moduleString, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> InvokeFromStringAsync(Func`1<string> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task InvokeFromStringAsync(Func`1<string> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> InvokeFromStreamAsync(Stream moduleStream, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task InvokeFromStreamAsync(Stream moduleStream, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> InvokeFromStreamAsync(Func`1<Stream> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task InvokeFromStreamAsync(Func`1<Stream> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task`1<ValueTuple`2<bool, T>> TryInvokeFromCacheAsync(string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<bool> TryInvokeFromCacheAsync(string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual ValueTask MoveToNewProcessAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.InvocationContent : HttpContent {
    internal static Byte[] _boundaryBytes;
    private static MediaTypeHeaderValue _multipartContentType;
    private IJsonService _jsonService;
    private InvocationRequest _invocationRequest;
    public InvocationContent(IJsonService jsonService, InvocationRequest invocationRequest);
    private static InvocationContent();
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.InvocationContent/<SerializeToStreamAsync>d__5")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.InvocationContentFactory : object {
    private IJsonService _jsonService;
    public InvocationContentFactory(IJsonService jsonService);
    public sealed virtual HttpContent Create(InvocationRequest invocationRequest);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.InvocationError : object {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorStack>k__BackingField;
    public string ErrorMessage { get; public set; }
    [NullableAttribute("2")]
public string ErrorStack { get; public set; }
    public InvocationError(string errorMessage, string errorStack);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorStack();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ErrorStack(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.InvocationException : Exception {
    public InvocationException(string message);
    public InvocationException(string message, string stack);
    protected InvocationException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.InvocationRequest : object {
    private long _streamInitialPosition;
    [CompilerGeneratedAttribute]
private ModuleSourceType <ModuleSourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExportName>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ModuleStreamSource>k__BackingField;
    public ModuleSourceType ModuleSourceType { get; }
    public string ModuleSource { get; }
    public string CacheIdentifier { get; }
    public string ExportName { get; }
    public Object[] Args { get; }
    [JsonIgnoreAttribute]
public Stream ModuleStreamSource { get; }
    public InvocationRequest(ModuleSourceType moduleSourceType, string moduleSource, string cacheIdentifier, string exportName, Object[] args, Stream moduleStreamSource);
    public void ResetStreamPosition();
    public bool CheckStreamAtInitialPosition();
    [CompilerGeneratedAttribute]
public ModuleSourceType get_ModuleSourceType();
    [CompilerGeneratedAttribute]
public string get_ModuleSource();
    [CompilerGeneratedAttribute]
public string get_CacheIdentifier();
    [CompilerGeneratedAttribute]
public string get_ExportName();
    [CompilerGeneratedAttribute]
public Object[] get_Args();
    [CompilerGeneratedAttribute]
public Stream get_ModuleStreamSource();
}
[NullableContextAttribute("1")]
public interface Jering.Javascript.NodeJS.ITaskService {
    public abstract virtual Task Run(Action action);
    public abstract virtual void WaitAll(Task[] tasks);
    public abstract virtual Task WhenAll(Task[] tasks);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.JsonService : object {
    private static JsonSerializerOptions _jsonSerializerOptions;
    private static JsonService();
    public sealed virtual ValueTask`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    public sealed virtual Task SerializeAsync(Stream stream, T value, CancellationToken cancellationToken);
}
public class Jering.Javascript.NodeJS.MessageReceivedEventHandler : MulticastDelegate {
    public MessageReceivedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(string message);
    public virtual IAsyncResult BeginInvoke(string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Jering.Javascript.NodeJS.ModuleSourceType : Enum {
    public int value__;
    public static ModuleSourceType Cache;
    public static ModuleSourceType File;
    public static ModuleSourceType String;
    public static ModuleSourceType Stream;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.NodeJSProcess : object {
    internal static string EXIT_STATUS_NOT_EXITED;
    internal static string EXIT_STATUS_DISPOSED;
    private Process _process;
    private bool _connected;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private StringBuilder _outputDataStringBuilder;
    [NullableAttribute("2")]
private MessageReceivedEventHandler _outputReceivedHandler;
    private bool _internalOutputDataReceivedHandlerAdded;
    private StringBuilder _errorDataStringBuilder;
    [NullableAttribute("2")]
private MessageReceivedEventHandler _errorReceivedHandler;
    private bool _internalErrorDataReceivedHandlerAdded;
    private SemaphoreSlim _lock;
    public string ExitStatus { get; }
    public bool HasExited { get; }
    public bool Connected { get; }
    private bool HasExitedSync { get; }
    public int SafeID { get; }
    public NodeJSProcess(Process process);
    internal NodeJSProcess(Process process, StringBuilder outputDataStringBuilder, StringBuilder errorDataStringBuilder);
    public sealed virtual void BeginOutputAndErrorReading();
    [NullableContextAttribute("2")]
private void OutputThreadStart(object arg);
    [NullableContextAttribute("2")]
private void ErrorThreadStart(object arg);
    public virtual void AddOutputReceivedHandler(MessageReceivedEventHandler messageReceivedEventHandler);
    public virtual void AddErrorReceivedHandler(MessageReceivedEventHandler messageReceivedEventHandler);
    public virtual void AddOutputDataReceivedHandler(DataReceivedEventHandler dataReceivedEventHandler);
    public virtual void AddErrorDataReceivedHandler(DataReceivedEventHandler dataReceivedEventHandler);
    public sealed virtual void BeginOutputReadLine();
    public sealed virtual void BeginErrorReadLine();
    public virtual void SetConnected();
    public virtual string get_ExitStatus();
    public virtual bool get_HasExited();
    public virtual bool get_Connected();
    private bool get_HasExitedSync();
    public sealed virtual void Kill();
    public sealed virtual int get_SafeID();
    internal virtual void InternalOutputDataReceivedHandler(object _, DataReceivedEventArgs dataReceivedEventArgs);
    internal virtual void InternalErrorDataReceivedHandler(object _, DataReceivedEventArgs dataReceivedEventArgs);
    internal virtual void DataReceivedHandler(StringBuilder stringBuilder, MessageReceivedEventHandler messageReceivedEventHandler, DataReceivedEventArgs dataReceivedEventArgs);
    [NullableContextAttribute("2")]
internal virtual bool TryCreateMessage(StringBuilder stringBuilder, string data, String& message);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.NodeJSProcessFactory : object {
    private NodeJSProcessOptions _nodeJSProcessOptions;
    public NodeJSProcessFactory(IOptions`1<NodeJSProcessOptions> optionsAccessor);
    public sealed virtual INodeJSProcess Create(string serverScript);
    public sealed virtual INodeJSProcess Create(string serverScript, EventHandler exitedEventHandler);
    internal ProcessStartInfo CreateStartInfo(string nodeServerScript);
    internal static Process CreateProcess(ProcessStartInfo startInfo, EventHandler exitedEventHandler);
    internal static string EscapeCommandLineArg(string arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.NodeJSProcessOptions : object {
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <NodeAndV8Options>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    public string ProjectPath { get; public set; }
    [NullableAttribute("2")]
public string ExecutablePath { get; public set; }
    [NullableAttribute("2")]
public string NodeAndV8Options { get; public set; }
    public int Port { get; public set; }
    public IDictionary`2<string, string> EnvironmentVariables { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
public void set_ProjectPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ExecutablePath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_NodeAndV8Options();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NodeAndV8Options(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(IDictionary`2<string, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Jering.Javascript.NodeJS.NodeJSServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddNodeJS(IServiceCollection services);
    internal static INodeJSService INodeJSServiceFactory(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Jering.Javascript.NodeJS.OutOfProcessNodeJSService : object {
    protected ILogger Logger;
    private bool _debugLoggingEnabled;
    private bool _warningLoggingEnabled;
    private bool _infoLoggingEnabled;
    private IEmbeddedResourcesService _embeddedResourcesService;
    private ITaskService _taskService;
    private IBlockDrainerService _blockDrainerService;
    private IFileWatcherService _fileWatcherService;
    private INodeJSProcessFactory _nodeProcessFactory;
    private string _serverScriptName;
    private Assembly _serverScriptAssembly;
    private OutOfProcessNodeJSServiceOptions _options;
    private SemaphoreSlim _connectingLock;
    private int _numRetries;
    private int _numProcessRetries;
    private int _numConnectionRetries;
    private bool _enableProcessRetriesForJavascriptErrors;
    private int _connectionTimeoutMS;
    private int _invocationTimeoutMS;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Task, object> _trackedInvokeTasks;
    private bool _trackInvokeTasks;
    private bool _disposed;
    [NullableAttribute("2")]
private INodeJSProcess modreq(System.Runtime.CompilerServices.IsVolatile) _nodeJSProcess;
    protected Regex ConnectionEstablishedMessageRegex { get; }
    protected OutOfProcessNodeJSService(INodeJSProcessFactory nodeProcessFactory, ILogger logger, IOptions`1<OutOfProcessNodeJSServiceOptions> optionsAccessor, IEmbeddedResourcesService embeddedResourcesService, IFileWatcherService fileWatcherService, ITaskService taskService, IBlockDrainerService blockDrainerService, Assembly serverScriptAssembly, string serverScriptName);
    protected abstract virtual Regex get_ConnectionEstablishedMessageRegex();
    protected abstract virtual Task`1<ValueTuple`2<bool, T>> TryInvokeAsync(InvocationRequest invocationRequest, CancellationToken cancellationToken);
    protected abstract virtual void OnConnectionEstablishedMessageReceived(Match connectionMessageMatch);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<InvokeFromFileAsync>d__28`1")]
public virtual Task`1<T> InvokeFromFileAsync(string modulePath, string exportName, Object[] args, CancellationToken cancellationToken);
    public virtual Task InvokeFromFileAsync(string modulePath, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<InvokeFromStringAsync>d__30`1")]
public virtual Task`1<T> InvokeFromStringAsync(string moduleString, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Task InvokeFromStringAsync(string moduleString, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<InvokeFromStringAsync>d__32`1")]
public virtual Task`1<T> InvokeFromStringAsync(Func`1<string> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public virtual Task InvokeFromStringAsync(Func`1<string> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<InvokeFromStreamAsync>d__34`1")]
public virtual Task`1<T> InvokeFromStreamAsync(Stream moduleStream, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Task InvokeFromStreamAsync(Stream moduleStream, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<InvokeFromStreamAsync>d__36`1")]
public virtual Task`1<T> InvokeFromStreamAsync(Func`1<Stream> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public virtual Task InvokeFromStreamAsync(Func`1<Stream> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual Task`1<ValueTuple`2<bool, T>> TryInvokeFromCacheAsync(string moduleCacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<TryInvokeFromCacheAsync>d__39")]
public virtual Task`1<bool> TryInvokeFromCacheAsync(string moduleCacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public virtual ValueTask MoveToNewProcessAsync();
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<TryInvokeCoreAsync>d__41`1")]
internal virtual Task`1<ValueTuple`2<bool, T>> TryInvokeCoreAsync(InvocationRequest invocationRequest, CancellationToken cancellationToken);
    internal virtual ValueTuple`2<CancellationToken, CancellationTokenSource> CreateCancellationToken(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<ConnectIfNotConnectedAsync>d__43")]
internal virtual ValueTask ConnectIfNotConnectedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<CreateNewProcessAndConnectAsync>d__44")]
internal virtual Task CreateNewProcessAndConnectAsync();
    internal virtual ValueTuple`2<bool, ConcurrentDictionary`2<Task, object>> InitializeFileWatching();
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<TryTrackedInvokeAsync>d__46`1")]
internal virtual Task`1<ValueTuple`2<bool, T>> TryTrackedInvokeAsync(InvocationRequest invocationRequest, ConcurrentDictionary`2<Task, object> trackedInvokeTasks, CancellationToken cancellationToken);
    internal virtual void FileChangedHandler();
    [AsyncStateMachineAttribute("Jering.Javascript.NodeJS.OutOfProcessNodeJSService/<MoveToNewProcessAsync>d__48")]
internal virtual ValueTask MoveToNewProcessAsync(bool reconnectIfJustConnected);
    internal virtual INodeJSProcess CreateAndSetUpProcess(DisposeTrackingSemaphoreSlim semaphoreSlim);
    internal void OutputReceivedHandler(string message, DisposeTrackingSemaphoreSlim semaphoreSlim);
    internal void ErrorReceivedHandler(string message);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.OutOfProcessNodeJSServiceOptions : object {
    [CompilerGeneratedAttribute]
private int <ConnectionTimeoutMS>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvocationTimeoutMS>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumProcessRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableProcessRetriesForJavascriptErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumConnectionRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private Concurrency <Concurrency>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConcurrencyDegree>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableFileWatching>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <WatchPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WatchSubdirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WatchFileNamePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GracefulProcessShutdown>k__BackingField;
    public int ConnectionTimeoutMS { get; public set; }
    public int InvocationTimeoutMS { get; public set; }
    public int NumRetries { get; public set; }
    public int NumProcessRetries { get; public set; }
    public bool EnableProcessRetriesForJavascriptErrors { get; public set; }
    public int NumConnectionRetries { get; public set; }
    public Concurrency Concurrency { get; public set; }
    public int ConcurrencyDegree { get; public set; }
    public bool EnableFileWatching { get; public set; }
    [NullableAttribute("2")]
public string WatchPath { get; public set; }
    public bool WatchSubdirectories { get; public set; }
    public IEnumerable`1<string> WatchFileNamePatterns { get; public set; }
    public bool GracefulProcessShutdown { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ConnectionTimeoutMS();
    [CompilerGeneratedAttribute]
public void set_ConnectionTimeoutMS(int value);
    [CompilerGeneratedAttribute]
public int get_InvocationTimeoutMS();
    [CompilerGeneratedAttribute]
public void set_InvocationTimeoutMS(int value);
    [CompilerGeneratedAttribute]
public int get_NumRetries();
    [CompilerGeneratedAttribute]
public void set_NumRetries(int value);
    [CompilerGeneratedAttribute]
public int get_NumProcessRetries();
    [CompilerGeneratedAttribute]
public void set_NumProcessRetries(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableProcessRetriesForJavascriptErrors();
    [CompilerGeneratedAttribute]
public void set_EnableProcessRetriesForJavascriptErrors(bool value);
    [CompilerGeneratedAttribute]
public int get_NumConnectionRetries();
    [CompilerGeneratedAttribute]
public void set_NumConnectionRetries(int value);
    [CompilerGeneratedAttribute]
public Concurrency get_Concurrency();
    [CompilerGeneratedAttribute]
public void set_Concurrency(Concurrency value);
    [CompilerGeneratedAttribute]
public int get_ConcurrencyDegree();
    [CompilerGeneratedAttribute]
public void set_ConcurrencyDegree(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableFileWatching();
    [CompilerGeneratedAttribute]
public void set_EnableFileWatching(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_WatchPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_WatchPath(string value);
    [CompilerGeneratedAttribute]
public bool get_WatchSubdirectories();
    [CompilerGeneratedAttribute]
public void set_WatchSubdirectories(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_WatchFileNamePatterns();
    [CompilerGeneratedAttribute]
public void set_WatchFileNamePatterns(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_GracefulProcessShutdown();
    [CompilerGeneratedAttribute]
public void set_GracefulProcessShutdown(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Jering.Javascript.NodeJS.StaticNodeJSService : object {
    private static ServiceProvider modreq(System.Runtime.CompilerServices.IsVolatile) _serviceProvider;
    private static IServiceCollection modreq(System.Runtime.CompilerServices.IsVolatile) _services;
    private static INodeJSService modreq(System.Runtime.CompilerServices.IsVolatile) _nodeJSService;
    [NullableAttribute("1")]
private static object _createLock;
    private static StaticNodeJSService();
    [NullableContextAttribute("1")]
private static INodeJSService GetOrCreateNodeJSService();
    public static void DisposeServiceProvider();
    [NullableContextAttribute("1")]
public static void Configure(Action`1<T> configureOptions);
    [NullableContextAttribute("1")]
public static void SetServices(ServiceCollection services);
    [NullableContextAttribute("1")]
public static Task InvokeFromFileAsync(string modulePath, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static Task InvokeFromStreamAsync(Func`1<Stream> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public static Task InvokeFromStreamAsync(Stream moduleStream, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static Task InvokeFromStringAsync(Func`1<string> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public static Task InvokeFromStringAsync(string moduleString, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public static Task`1<ValueTuple`2<bool, T>> TryInvokeFromCacheAsync(string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static Task`1<bool> TryInvokeFromCacheAsync(string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public static Task`1<T> InvokeFromFileAsync(string modulePath, string exportName, Object[] args, CancellationToken cancellationToken);
    public static Task`1<T> InvokeFromStreamAsync(Func`1<Stream> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public static Task`1<T> InvokeFromStreamAsync(Stream moduleStream, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public static Task`1<T> InvokeFromStringAsync(Func`1<string> moduleFactory, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public static Task`1<T> InvokeFromStringAsync(string moduleString, string cacheIdentifier, string exportName, Object[] args, CancellationToken cancellationToken);
    public static ValueTask MoveToNewProcessAsync();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Jering.Javascript.NodeJS.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentException_InvocationRequest_ModuleSourceCannotBeNull { get; }
    internal static string ArgumentException_InvocationRequest_ModuleSourceCannotBeNullWhitespaceOrAnEmptyString { get; }
    internal static string ArgumentException_InvocationRequest_ModuleStreamSourceCannotBeNull { get; }
    internal static string ArgumentException_NodeJSProcess_ExpectedAStreamReader { get; }
    internal static string ArgumentException_NodeJSProcess_ProcessHasExited { get; }
    internal static string ArgumentException_NodeJSProcess_ProcessHasNotBeenStartedOrHasBeenDisposed { get; }
    internal static string ArgumentException_Shared_ValueCannotBeEmpty { get; }
    internal static string ArgumentException_Shared_ValueCannotBeNullWhitespaceOrAnEmptyString { get; }
    internal static string ConnectionException_OutOfProcessNodeJSService_ConnectionAttemptTimedOut { get; }
    internal static string ConnectionException_OutOfProcessNodeJSService_FailedToConnect { get; }
    internal static string ConnectionException_OutOfProcessNodeJSService_ProcessExitedBeforeConnecting { get; }
    internal static string InvalidOperationException_BlockDrain_OperationCountBelowMinimum { get; }
    internal static string InvalidOperationException_InvocationRequest_StreamIsNull { get; }
    internal static string InvalidOperationException_InvocationRequest_StreamIsUnseekable { get; }
    internal static string InvalidOperationException_NodeJSProcessFactory_FailedToStartNodeProcess { get; }
    internal static string InvalidOperations_EmbeddedResourcesService_NoEmbeddedResourceWithSpecifiedName { get; }
    internal static string InvocationException_HttpNodeJSService_UnexpectedStatusCode { get; }
    internal static string InvocationException_OutOfProcessNodeJSService_InvocationTimedOut { get; }
    internal static string LogDebug_FileChangedHandlerInvokedForProcess { get; }
    internal static string LogDebug_InternalFileChangedHandlerCallDebounced { get; }
    internal static string LogDebug_InternalFileChangedHandlerCalled { get; }
    internal static string LogDebug_OutOfProcessNodeJSService_ReleasingProcessConnectionSemaphore { get; }
    internal static string LogDebug_OutOfProcessNodeJSService_StartingFileWatcher { get; }
    internal static string LogDebug_OutOfProcessNodeJSService_StoppingFileWatcher { get; }
    internal static string LogDebug_OutOfProcessNodeJSService_WaitingOnProcessConnectionSemaphore { get; }
    internal static string LogInformation_ConnectedToNodeJSProcess { get; }
    internal static string LogInformation_FileChangedMovingtoNewNodeJSProcess { get; }
    internal static string LogInformation_HttpEndpoint { get; }
    internal static string LogInformation_InvokingRegisteredFileChangedHandlers { get; }
    internal static string LogInformation_KillingNodeJSProcess { get; }
    internal static string LogInformation_ProcessExitedBeforeConnecting { get; }
    internal static string LogWarning_ConnectionAttemptFailed { get; }
    internal static string LogWarning_InvocationAttemptFailed { get; }
    internal static string LogWarning_RetriesInExistingProcessExhausted { get; }
    internal static string Obsolete_MoveToNewProcess { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentException_InvocationRequest_ModuleSourceCannotBeNull();
    internal static string get_ArgumentException_InvocationRequest_ModuleSourceCannotBeNullWhitespaceOrAnEmptyString();
    internal static string get_ArgumentException_InvocationRequest_ModuleStreamSourceCannotBeNull();
    internal static string get_ArgumentException_NodeJSProcess_ExpectedAStreamReader();
    internal static string get_ArgumentException_NodeJSProcess_ProcessHasExited();
    internal static string get_ArgumentException_NodeJSProcess_ProcessHasNotBeenStartedOrHasBeenDisposed();
    internal static string get_ArgumentException_Shared_ValueCannotBeEmpty();
    internal static string get_ArgumentException_Shared_ValueCannotBeNullWhitespaceOrAnEmptyString();
    internal static string get_ConnectionException_OutOfProcessNodeJSService_ConnectionAttemptTimedOut();
    internal static string get_ConnectionException_OutOfProcessNodeJSService_FailedToConnect();
    internal static string get_ConnectionException_OutOfProcessNodeJSService_ProcessExitedBeforeConnecting();
    internal static string get_InvalidOperationException_BlockDrain_OperationCountBelowMinimum();
    internal static string get_InvalidOperationException_InvocationRequest_StreamIsNull();
    internal static string get_InvalidOperationException_InvocationRequest_StreamIsUnseekable();
    internal static string get_InvalidOperationException_NodeJSProcessFactory_FailedToStartNodeProcess();
    internal static string get_InvalidOperations_EmbeddedResourcesService_NoEmbeddedResourceWithSpecifiedName();
    internal static string get_InvocationException_HttpNodeJSService_UnexpectedStatusCode();
    internal static string get_InvocationException_OutOfProcessNodeJSService_InvocationTimedOut();
    internal static string get_LogDebug_FileChangedHandlerInvokedForProcess();
    internal static string get_LogDebug_InternalFileChangedHandlerCallDebounced();
    internal static string get_LogDebug_InternalFileChangedHandlerCalled();
    internal static string get_LogDebug_OutOfProcessNodeJSService_ReleasingProcessConnectionSemaphore();
    internal static string get_LogDebug_OutOfProcessNodeJSService_StartingFileWatcher();
    internal static string get_LogDebug_OutOfProcessNodeJSService_StoppingFileWatcher();
    internal static string get_LogDebug_OutOfProcessNodeJSService_WaitingOnProcessConnectionSemaphore();
    internal static string get_LogInformation_ConnectedToNodeJSProcess();
    internal static string get_LogInformation_FileChangedMovingtoNewNodeJSProcess();
    internal static string get_LogInformation_HttpEndpoint();
    internal static string get_LogInformation_InvokingRegisteredFileChangedHandlers();
    internal static string get_LogInformation_KillingNodeJSProcess();
    internal static string get_LogInformation_ProcessExitedBeforeConnecting();
    internal static string get_LogWarning_ConnectionAttemptFailed();
    internal static string get_LogWarning_InvocationAttemptFailed();
    internal static string get_LogWarning_RetriesInExistingProcessExhausted();
    internal static string get_Obsolete_MoveToNewProcess();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jering.Javascript.NodeJS.TaskService : object {
    public sealed virtual Task Run(Action action);
    public sealed virtual void WaitAll(Task[] tasks);
    public sealed virtual Task WhenAll(Task[] tasks);
}
public class Jering.Javascript.NodeJS.Void : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
