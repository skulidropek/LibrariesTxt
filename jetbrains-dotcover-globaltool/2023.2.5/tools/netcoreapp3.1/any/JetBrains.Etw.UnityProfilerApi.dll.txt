public class JetBrains.Etw.Api.UnityProfilerApi : object {
    private string myBinDirectory;
    private UnityProfilerInterop myUnityProf;
    public UnityProfilerApi(string binDirectory);
    public void StartProfiling();
    public void StopProfiling();
    private void CreateProfiler();
}
public class JetBrains.Etw.Api.UnityProfilerInterop : object {
    public StartProfilingDelegate StartProfiling;
    public StopProfilingDelegate StopProfiling;
    public IsProfilerCreatedDelegate IsProfilerCreated;
    private ReleaseStringDelegate ReleaseString;
    private NativeLibrary myLib;
    private static string libraryName;
    public UnityProfilerInterop(string libraryPath);
    private static UnityProfilerInterop();
    public void CheckError(IntPtr errorMessage);
    public void UnloadProfiler();
}
internal enum JetBrains.Profiler.SelfApi.Impl.ArchitectureId : Enum {
    public int value__;
    public static ArchitectureId Arm;
    public static ArchitectureId Arm64;
    public static ArchitectureId X64;
    public static ArchitectureId X86;
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.SelfApi.Impl.Helper : object {
    private static Lazy`1<PlatformId> ourPlatformLazy;
    private static Lazy`1<ArchitectureId> ourOsArchitectureLazy;
    private static Lazy`1<Nullable`1<LinuxLibCId>> ourLinuxLibCLazy;
    public static PlatformId Platform { get; }
    public static ArchitectureId OsArchitecture { get; }
    public static Nullable`1<LinuxLibCId> LinuxLibC { get; }
    private static Helper();
    public static PlatformId get_Platform();
    public static ArchitectureId get_OsArchitecture();
    public static Nullable`1<LinuxLibCId> get_LinuxLibC();
    private static PlatformId DeducePlatformId();
    private static ArchitectureId DeduceOsArchitecture();
    private static Nullable`1<LinuxLibCId> DeduceLinuxLibC();
    public static string MakeRid();
    public static string MakePlatformSpecificLibraryName(string libraryName);
    [ExtensionAttribute]
private static string GetRidName(PlatformId platform);
    [ExtensionAttribute]
private static string GetRidName(LinuxLibCId linuxLibC);
    [ExtensionAttribute]
private static string GetRidName(ArchitectureId architecture);
}
internal class JetBrains.Profiler.SelfApi.Impl.Lazy`1 : object {
    private FuncDelegate<TValue> myFunc;
    private object myFuncLock;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) myHasValue;
    private TValue myValue;
    public TValue Value { get; }
    public Lazy`1(FuncDelegate<TValue> func);
    public TValue get_Value();
}
public class JetBrains.Profiler.SelfApi.Impl.Linux.LibDl : object {
    private static string LibraryName;
    public static IntPtr dlopen(string filename, int flags);
    public static IntPtr dlsym(IntPtr handle, string symbol);
    public static int dlclose(IntPtr handle);
}
internal static class JetBrains.Profiler.SelfApi.Impl.Linux.LinuxHelper : object {
    private static Lazy`1<Tuple`2<LinuxLibCId, ArchitectureId>> ourLibCLazy;
    public static LinuxLibCId LibC { get; }
    public static ArchitectureId ProcessArchitecture { get; }
    private static LinuxHelper();
    public static LinuxLibCId get_LibC();
    public static ArchitectureId get_ProcessArchitecture();
    private static LinuxLibCId GetInterpreterLibC(string interpreter);
    private static Tuple`2<LinuxLibCId, ArchitectureId> DeduceElfConfig();
}
public class JetBrains.Profiler.SelfApi.Impl.Linux.NativeLibrary : object {
    private Lazy`1<IntPtr> myLibrary;
    public NativeLibrary(string libraryPath);
    public sealed virtual TDelegate GetNativeFunction(string functionName);
    public sealed virtual void Unload();
}
internal enum JetBrains.Profiler.SelfApi.Impl.LinuxLibCId : Enum {
    public int value__;
    public static LinuxLibCId Glibc;
    public static LinuxLibCId Musl;
}
public static class JetBrains.Profiler.SelfApi.Impl.MacOsX.LibDyldDylib : object {
    private static string LibraryName;
    public static IntPtr dlopen(string filename, int flags);
    public static IntPtr dlsym(IntPtr handle, string symbol);
    public static int dlclose(IntPtr handle);
}
public class JetBrains.Profiler.SelfApi.Impl.MacOsX.NativeLibrary : object {
    private Lazy`1<IntPtr> myLibrary;
    public NativeLibrary(string libraryPath);
    public sealed virtual TDelegate GetNativeFunction(string functionName);
    public sealed virtual void Unload();
}
public interface JetBrains.Profiler.SelfApi.Impl.NativeLibrary {
    public abstract virtual TDelegate GetNativeFunction(string functionName);
    public abstract virtual void Unload();
}
internal enum JetBrains.Profiler.SelfApi.Impl.PlatformId : Enum {
    public int value__;
    public static PlatformId Linux;
    public static PlatformId MacOsX;
    public static PlatformId Windows;
}
internal class JetBrains.Profiler.SelfApi.Impl.Unix.Elf32_Ehdr : ValueType {
    [FixedBufferAttribute("System.Byte", "16")]
public <e_ident>e__FixedBuffer e_ident;
    public ushort e_type;
    public ushort e_machine;
    public UInt32 e_version;
    public UInt32 e_entry;
    public UInt32 e_phoff;
    public UInt32 e_shoff;
    public UInt32 e_flags;
    public ushort e_ehsize;
    public ushort e_phentsize;
    public ushort e_shentsize;
    public ushort e_phnum;
    public ushort e_shnum;
    public ushort e_shstrndx;
}
internal class JetBrains.Profiler.SelfApi.Impl.Unix.Elf32_Phdr : ValueType {
    public UInt32 p_type;
    public UInt32 p_offset;
    public UInt32 p_vaddr;
    public UInt32 p_paddr;
    public UInt32 p_filesz;
    public UInt32 p_memsz;
    public UInt32 p_flags;
    public UInt32 p_align;
}
internal class JetBrains.Profiler.SelfApi.Impl.Unix.Elf64_Ehdr : ValueType {
    [FixedBufferAttribute("System.Byte", "16")]
public <e_ident>e__FixedBuffer e_ident;
    public ushort e_type;
    public ushort e_machine;
    public UInt32 e_version;
    public ulong e_entry;
    public ulong e_phoff;
    public ulong e_shoff;
    public UInt32 e_flags;
    public ushort e_ehsize;
    public ushort e_phentsize;
    public ushort e_shentsize;
    public ushort e_phnum;
    public ushort e_shnum;
    public ushort e_shstrndx;
}
internal class JetBrains.Profiler.SelfApi.Impl.Unix.Elf64_Phdr : ValueType {
    public UInt32 p_type;
    public UInt32 p_flags;
    public ulong p_offset;
    public ulong p_vaddr;
    public ulong p_paddr;
    public ulong p_filesz;
    public ulong p_memsz;
    public ulong p_align;
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfClass : Enum {
    public byte value__;
    public static ElfClass ELFCLASSNONE;
    public static ElfClass ELFCLASS32;
    public static ElfClass ELFCLASS64;
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfData : Enum {
    public byte value__;
    public static ElfData ELFDATANONE;
    public static ElfData ELFDATA2LSB;
    public static ElfData ELFDATA2MSB;
}
[FlagsAttribute]
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfFlags : Enum {
    public UInt32 value__;
    public static ElfFlags EF_ARM_RELEXEC;
    public static ElfFlags EF_ARM_HASENTRY;
    public static ElfFlags EF_ARM_SYMSARESORTED;
    public static ElfFlags EF_ARM_DYNSYMSUSESEGIDX;
    public static ElfFlags EF_ARM_MAPSYMSFIRST;
    public static ElfFlags EF_ARM_LE8;
    public static ElfFlags EF_ARM_BE8;
    public static ElfFlags EF_ARM_EABIMASK;
    public static ElfFlags EF_ARM_EABI_UNKNOWN;
    public static ElfFlags EF_ARM_EABI_VER1;
    public static ElfFlags EF_ARM_EABI_VER2;
    public static ElfFlags EF_ARM_EABI_VER3;
    public static ElfFlags EF_ARM_EABI_VER4;
    public static ElfFlags EF_ARM_EABI_VER5;
    public static ElfFlags EF_ARM_INTERWORK;
    public static ElfFlags EF_ARM_APCS_26;
    public static ElfFlags EF_ARM_APCS_FLOAT;
    public static ElfFlags EF_ARM_PIC;
    public static ElfFlags EF_ARM_ALIGN8;
    public static ElfFlags EF_ARM_NEW_ABI;
    public static ElfFlags EF_ARM_OLD_ABI;
    public static ElfFlags EF_ARM_ABI_FLOAT_SOFT;
    public static ElfFlags EF_ARM_ABI_FLOAT_HARD;
    public static ElfFlags EF_ARM_MAVERICK_FLOAT;
    public static ElfFlags EF_MIPS_NOREORDER;
    public static ElfFlags EF_MIPS_PIC;
    public static ElfFlags EF_MIPS_CPIC;
    public static ElfFlags EF_MIPS_UCODE;
    public static ElfFlags EF_MIPS_ABI2;
    public static ElfFlags EF_MIPS_OPTIONS_FIRST;
    public static ElfFlags EF_MIPS_32BITMODE;
    public static ElfFlags EF_MIPS_ABI;
    public static ElfFlags EF_MIPS_ABI_O32;
    public static ElfFlags EF_MIPS_ABI_O64;
    public static ElfFlags EF_MIPS_ABI_EABI32;
    public static ElfFlags EF_MIPS_ABI_EABI64;
    public static ElfFlags EF_MIPS_ARCH_ASE;
    public static ElfFlags EF_MIPS_ARCH_ASE_MDMX;
    public static ElfFlags EF_MIPS_ARCH_ASE_M16;
    public static ElfFlags EF_MIPS_ARCH;
    public static ElfFlags EF_MIPS_ARCH_1;
    public static ElfFlags EF_MIPS_ARCH_2;
    public static ElfFlags EF_MIPS_ARCH_3;
    public static ElfFlags EF_MIPS_ARCH_4;
    public static ElfFlags EF_MIPS_ARCH_5;
    public static ElfFlags EF_MIPS_ARCH_32;
    public static ElfFlags EF_MIPS_ARCH_64;
    public static ElfFlags EF_MIPS_ARCH_32R2;
    public static ElfFlags EF_MIPS_ARCH_64R2;
    public static ElfFlags EF_PPC_EMB;
    public static ElfFlags EF_PPC_RELOCATABLE;
    public static ElfFlags EF_PPC_RELOCATABLE_LIB;
    public static ElfFlags EF_PPC64_ABI_VER0;
    public static ElfFlags EF_PPC64_ABI_VER1;
    public static ElfFlags EF_PPC64_ABI_VER2;
    public static ElfFlags EF_PPC64_ABI;
    public static ElfFlags EF_RISCV_RVC;
    public static ElfFlags EF_RISCV_FLOAT_ABI_MASK;
    public static ElfFlags EF_RISCV_FLOAT_ABI_SOFT;
    public static ElfFlags EF_RISCV_FLOAT_ABI_SINGLE;
    public static ElfFlags EF_RISCV_FLOAT_ABI_DOUBLE;
    public static ElfFlags EF_RISCV_FLOAT_ABI_QUAD;
    public static ElfFlags EF_RISCV_RVE;
    public static ElfFlags EF_RISCV_TSO;
    public static ElfFlags EF_SPARC_EXT_MASK;
    public static ElfFlags EF_SPARC_32PLUS;
    public static ElfFlags EF_SPARC_SUN_US1;
    public static ElfFlags EF_SPARC_HAL_R1;
    public static ElfFlags EF_SPARC_SUN_US3;
    public static ElfFlags EF_SPARCV9_MM;
    public static ElfFlags EF_SPARCV9_TSO;
    public static ElfFlags EF_SPARCV9_PSO;
    public static ElfFlags EF_SPARCV9_RMO;
    public static ElfFlags EF_PARISC_TRAPNIL;
    public static ElfFlags EF_PARISC_EXT;
    public static ElfFlags EF_PARISC_LSB;
    public static ElfFlags EF_PARISC_WIDE;
    public static ElfFlags EF_PARISC_NO_KABP;
    public static ElfFlags EF_PARISC_LAZYSWAP;
    public static ElfFlags EF_PARISC_ARCH;
    public static ElfFlags EFA_PARISC_1_0;
    public static ElfFlags EFA_PARISC_1_1;
    public static ElfFlags EFA_PARISC_2_0;
    public static ElfFlags EF_SH_MACH_MASK;
    public static ElfFlags EF_SH_UNKNOWN;
    public static ElfFlags EF_SH_SH1;
    public static ElfFlags EF_SH_SH2;
    public static ElfFlags EF_SH_SH3;
    public static ElfFlags EF_SH_DSP;
    public static ElfFlags EF_SH_SH3_DSP;
    public static ElfFlags EF_SH_SH3E;
    public static ElfFlags EF_SH_SH4;
    public static ElfFlags EF_SH5;
    public static ElfFlags EF_SH2E;
    public static ElfFlags EF_SH4A;
    public static ElfFlags EF_SH2A;
    public static ElfFlags EF_SH4_NOFPU;
    public static ElfFlags EF_SH4A_NOFPU;
    public static ElfFlags EF_SH4_NOMMU_NOFPU;
    public static ElfFlags EF_SH2A_NOFPU;
    public static ElfFlags EF_SH3_NOMMU;
    public static ElfFlags EF_SH2A_SH4_NOFPU;
    public static ElfFlags EF_SH2A_SH3_NOFPU;
    public static ElfFlags EF_SH2A_SH4;
    public static ElfFlags EF_SH2A_SH3E;
    public static ElfFlags EF_IA_64_MASKOS;
    public static ElfFlags EF_IA_64_ARCH;
    public static ElfFlags EF_IA_64_ARCHVER_1;
    public static ElfFlags EF_IA_64_TRAPNIL;
    public static ElfFlags EF_IA_64_EXT;
    public static ElfFlags EF_IA_64_BE;
    public static ElfFlags EFA_IA_64_EAS2_3;
    public static ElfFlags EF_IA_64_ABI64;
    public static ElfFlags EF_IA_64_REDUCEDFP;
    public static ElfFlags EF_IA_64_CONS_GP;
    public static ElfFlags EF_IA_64_NOFUNCDESC_CONS_GP;
    public static ElfFlags EF_IA_64_ABSOLUTE;
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfIdentIndex : Enum {
    public int value__;
    public static ElfIdentIndex EI_MAG0;
    public static ElfIdentIndex EI_MAG1;
    public static ElfIdentIndex EI_MAG2;
    public static ElfIdentIndex EI_MAG3;
    public static ElfIdentIndex EI_CLASS;
    public static ElfIdentIndex EI_DATA;
    public static ElfIdentIndex EI_VERSION;
    public static ElfIdentIndex EI_OSABI;
    public static ElfIdentIndex EI_ABIVERSION;
    public static ElfIdentIndex EI_PAD;
    public static ElfIdentIndex EI_NIDENT;
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfMachine : Enum {
    public ushort value__;
    public static ElfMachine EM_NONE;
    public static ElfMachine EM_M32;
    public static ElfMachine EM_SPARC;
    public static ElfMachine EM_386;
    public static ElfMachine EM_68K;
    public static ElfMachine EM_88K;
    public static ElfMachine EM_IAMCU;
    public static ElfMachine EM_860;
    public static ElfMachine EM_MIPS;
    public static ElfMachine EM_S370;
    public static ElfMachine EM_MIPS_RS3_LE;
    public static ElfMachine EM_PARISC;
    public static ElfMachine EM_VPP500;
    public static ElfMachine EM_SPARC32PLUS;
    public static ElfMachine EM_960;
    public static ElfMachine EM_PPC;
    public static ElfMachine EM_PPC64;
    public static ElfMachine EM_S390;
    public static ElfMachine EM_V800;
    public static ElfMachine EM_FR20;
    public static ElfMachine EM_RH32;
    public static ElfMachine EM_RCE;
    public static ElfMachine EM_ARM;
    public static ElfMachine EM_SH;
    public static ElfMachine EM_SPARCV9;
    public static ElfMachine EM_TRICORE;
    public static ElfMachine EM_ARC;
    public static ElfMachine EM_H8_300;
    public static ElfMachine EM_H8_300H;
    public static ElfMachine EM_H8S;
    public static ElfMachine EM_H8_500;
    public static ElfMachine EM_IA_64;
    public static ElfMachine EM_MIPS_X;
    public static ElfMachine EM_COLDFIRE;
    public static ElfMachine EM_68HC12;
    public static ElfMachine EM_MMA;
    public static ElfMachine EM_PCP;
    public static ElfMachine EM_NCPU;
    public static ElfMachine EM_NDR1;
    public static ElfMachine EM_STARCORE;
    public static ElfMachine EM_ME16;
    public static ElfMachine EM_ST100;
    public static ElfMachine EM_TINYJ;
    public static ElfMachine EM_X86_64;
    public static ElfMachine EM_PDSP;
    public static ElfMachine EM_FX66;
    public static ElfMachine EM_ST9PLUS;
    public static ElfMachine EM_ST7;
    public static ElfMachine EM_68HC16;
    public static ElfMachine EM_68HC11;
    public static ElfMachine EM_68HC08;
    public static ElfMachine EM_68HC05;
    public static ElfMachine EM_SVX;
    public static ElfMachine EM_ST19;
    public static ElfMachine EM_VAX;
    public static ElfMachine EM_CRIS;
    public static ElfMachine EM_JAVELIN;
    public static ElfMachine EM_FIREPATH;
    public static ElfMachine EM_ZSP;
    public static ElfMachine EM_MMIX;
    public static ElfMachine EM_HUANY;
    public static ElfMachine EM_PRISM;
    public static ElfMachine EM_AVR;
    public static ElfMachine EM_FR30;
    public static ElfMachine EM_D10V;
    public static ElfMachine EM_D30V;
    public static ElfMachine EM_V850;
    public static ElfMachine EM_M32R;
    public static ElfMachine EM_MN10300;
    public static ElfMachine EM_MN10200;
    public static ElfMachine EM_PJ;
    public static ElfMachine EM_OPENRISC;
    public static ElfMachine EM_ARC_A5;
    public static ElfMachine EM_XTENSA;
    public static ElfMachine EM_VIDEOCORE;
    public static ElfMachine EM_TMM_GPP;
    public static ElfMachine EM_NS32K;
    public static ElfMachine EM_TPC;
    public static ElfMachine EM_SNP1K;
    public static ElfMachine EM_ST200;
    public static ElfMachine EM_IP2K;
    public static ElfMachine EM_MAX;
    public static ElfMachine EM_CR;
    public static ElfMachine EM_F2MC16;
    public static ElfMachine EM_MSP430;
    public static ElfMachine EM_BLACKFIN;
    public static ElfMachine EM_SE_C33;
    public static ElfMachine EM_SEP;
    public static ElfMachine EM_ARCA;
    public static ElfMachine EM_UNICORE;
    public static ElfMachine EM_AARCH64;
    public static ElfMachine EM_RISCV;
    public static ElfMachine EM_ALPHA_STD;
    public static ElfMachine EM_ALPHA;
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfMagic : Enum {
    public byte value__;
    public static ElfMagic ELFMAG0;
    public static ElfMagic ELFMAG1;
    public static ElfMagic ELFMAG2;
    public static ElfMagic ELFMAG3;
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfOsAbi : Enum {
    public byte value__;
    public static ElfOsAbi ELFOSABI_NONE;
    public static ElfOsAbi ELFOSABI_HPUX;
    public static ElfOsAbi ELFOSABI_NETBSD;
    public static ElfOsAbi ELFOSABI_LINUX;
    public static ElfOsAbi ELFOSABI_HURD;
    public static ElfOsAbi ELFOSABI_86OPEN;
    public static ElfOsAbi ELFOSABI_SOLARIS;
    public static ElfOsAbi ELFOSABI_AIX;
    public static ElfOsAbi ELFOSABI_IRIX;
    public static ElfOsAbi ELFOSABI_FREEBSD;
    public static ElfOsAbi ELFOSABI_TRU64;
    public static ElfOsAbi ELFOSABI_MODESTO;
    public static ElfOsAbi ELFOSABI_OPENBSD;
    public static ElfOsAbi ELFOSABI_OPENVMS;
    public static ElfOsAbi ELFOSABI_NSK;
    public static ElfOsAbi ELFOSABI_AROS;
    public static ElfOsAbi ELFOSABI_FENIXOS;
    public static ElfOsAbi ELFOSABI_CLOUDABI;
    public static ElfOsAbi ELFOSABI_OPENVOS;
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfSegmentType : Enum {
    public UInt32 value__;
    public static ElfSegmentType PT_NULL;
    public static ElfSegmentType PT_LOAD;
    public static ElfSegmentType PT_DYNAMIC;
    public static ElfSegmentType PT_INTERP;
    public static ElfSegmentType PT_NOTE;
    public static ElfSegmentType PT_SHLIB;
    public static ElfSegmentType PT_PHDR;
    public static ElfSegmentType PT_TLS;
    public static ElfSegmentType PT_NUM;
    public static ElfSegmentType PT_LOOS;
    public static ElfSegmentType PT_GNU_EH_FRAME;
    public static ElfSegmentType PT_GNU_STACK;
    public static ElfSegmentType PT_GNU_RELRO;
    public static ElfSegmentType PT_LOSUNW;
    public static ElfSegmentType PT_SUNWBSS;
    public static ElfSegmentType PT_SUNWSTACK;
    public static ElfSegmentType PT_HISUNW;
    public static ElfSegmentType PT_HIOS;
    public static ElfSegmentType PT_LOPROC;
    public static ElfSegmentType PT_HIPROC;
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfType : Enum {
    public ushort value__;
    public static ElfType ET_NONE;
    public static ElfType ET_REL;
    public static ElfType ET_EXEC;
    public static ElfType ET_DYN;
    public static ElfType ET_CORE;
    public static ElfType ET_LOOS;
    public static ElfType ET_HIOS;
    public static ElfType ET_LOPROC;
    public static ElfType ET_HIPROC;
}
internal static class JetBrains.Profiler.SelfApi.Impl.Unix.ElfUtil : object {
    public static ElfInfo GetElfInfo(string file);
    private static ushort ConvertUInt16(ushort value);
    private static UInt32 ConvertUInt32(UInt32 value);
    private static ulong ConvertUInt64(ulong value);
    private static UInt32 StrNLenZ(Byte* str, UInt32 maxLen);
    private static ulong StrNLenZ(Byte* str, ulong maxLen);
    [CompilerGeneratedAttribute]
internal static ushort <GetElfInfo>g__GetUInt16|0_0(ushort value, <>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static UInt32 <GetElfInfo>g__GetUInt32|0_1(UInt32 value, <>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static ulong <GetElfInfo>g__GetUInt64|0_2(ulong value, <>c__DisplayClass0_0& );
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.ElfVersion : Enum {
    public byte value__;
    public static ElfVersion EV_NONE;
    public static ElfVersion EV_CURRENT;
}
internal static class JetBrains.Profiler.SelfApi.Impl.Unix.LibC : object {
    private static string LibraryName;
    public static int uname(IntPtr buf);
    public static int chmod(string pathname, UnixFileModes mode);
    public static ulong strnlen(IntPtr s, ulong maxlen);
}
public static class JetBrains.Profiler.SelfApi.Impl.Unix.RTLD : object {
    public static int RTLD_LAZY;
    public static int RTLD_NOW;
    public static int RTLD_NOLOAD;
    public static int RTLD_DEEPBIND;
    public static int RTLD_LOCAL;
    public static int RTLD_GLOBAL;
    public static int RTLD_NODELETE;
    private static RTLD();
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes : Enum {
    public UInt32 value__;
    public static UnixFileModes S_ISUID;
    public static UnixFileModes S_ISGID;
    public static UnixFileModes S_ISVTX;
    public static UnixFileModes S_IRUSR;
    public static UnixFileModes S_IWUSR;
    public static UnixFileModes S_IXUSR;
    public static UnixFileModes S_IRGRP;
    public static UnixFileModes S_IWGRP;
    public static UnixFileModes S_IXGRP;
    public static UnixFileModes S_IROTH;
    public static UnixFileModes S_IWOTH;
    public static UnixFileModes S_IXOTH;
    public static UnixFileModes S_IRWXG;
    public static UnixFileModes S_IRWXU;
    public static UnixFileModes S_IRWXO;
    public static UnixFileModes ACCESSPERMS;
    public static UnixFileModes ALLPERMS;
    public static UnixFileModes DEFFILEMODE;
    public static UnixFileModes S_IFMT;
    public static UnixFileModes S_IFDIR;
    public static UnixFileModes S_IFCHR;
    public static UnixFileModes S_IFBLK;
    public static UnixFileModes S_IFREG;
    public static UnixFileModes S_IFIFO;
    public static UnixFileModes S_IFLNK;
    public static UnixFileModes S_IFSOCK;
    public static UnixFileModes rw_r__r__;
    public static UnixFileModes rwxr_xr_x;
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.SelfApi.Impl.Unix.UnixHelper : object {
    private static Lazy`1<Tuple`2<PlatformId, ArchitectureId>> ourUnixConfigLazy;
    public static PlatformId Platform { get; }
    public static ArchitectureId KernelArchitecture { get; }
    private static UnixHelper();
    public static PlatformId get_Platform();
    public static ArchitectureId get_KernelArchitecture();
    private static PlatformId ToPlatformId(string sysname);
    [ExtensionAttribute]
private static int ToNameLen(PlatformId platformId);
    private static ArchitectureId ToArchitecture(string machine);
    private static Tuple`2<PlatformId, ArchitectureId> DeduceUnixConfig();
    public static void UnixChMod(string path, UnixFileModes mode);
}
public static class JetBrains.Profiler.SelfApi.Impl.Windows.LibKernel32 : object {
    public static Void* LoadLibraryW(string lpFileName);
    public static int FreeLibrary(Void* hModule);
    public static int SetDllDirectoryW(string lpPathName);
    public static Void* GetProcAddress(Void* hModule, string lpProcName);
}
public class JetBrains.Profiler.SelfApi.Impl.Windows.NativeLibrary : object {
    private Lazy`1<IntPtr> myLibrary;
    public NativeLibrary(string libraryPath);
    public sealed virtual TDelegate GetNativeFunction(string functionName);
    public sealed virtual void Unload();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
