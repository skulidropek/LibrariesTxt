public static class JetBrains.Etw.Api.Controller : object {
}
internal class JetBrains.Etw.Api.ErrorInfo : ValueType {
    public int code;
    public IntPtr message;
}
public static class JetBrains.Etw.Api.ErrorUtils : object {
    public static void CheckError(IntPtr err, ReleaseErrorInfoDelegate releaseErrorInfo, Func`2<HResults, bool> hresultErrorHandler);
}
internal static class JetBrains.Etw.BuildScript.EtwNativeFiles : object {
    [NotNullAttribute]
public static RelativePath GetCollectorHost(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetTimelineCollector(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetDpaCollector(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetDpaCollectorApi(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetHostApi(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetTests(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetMonoProfiler(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetEventPipeTestProf(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetEventPipeTimelineCollector(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetDTraceProfiler(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetProcessMonitor(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetDbgHelpLibrary(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetSymSrvLibrary(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static RelativePath GetSymSrvYes(JetRuntimeId runtimeId, bool debug);
}
internal static class JetBrains.Etw.BuildScript.EtwNativeNames : object {
    public static string GetHostApi(JetPlatform platform);
    public static string GetCollectorHost(JetPlatform platform);
    public static string GetTimelineCollector(JetPlatform platform);
    public static string GetDpaCollector(JetPlatform platform);
    public static string GetDpaCollectorApi(JetPlatform platform);
    public static string GetTests(JetPlatform platform);
    public static string GetMonoProfiler(JetPlatform platform);
    public static string GetEventPipeTestProf(JetPlatform platform);
    public static string GetEventPipeTimelineCollector(JetPlatform platform);
    public static string GetDTraceProfiler(JetPlatform platform);
    public static string GetProcessMonitor(JetPlatform platform);
    public static string GetDbgHelpLibrary(JetPlatform platform);
    public static string GetSymSrvLibrary(JetPlatform platform);
    public static string GetSymSrvYes(JetPlatform platform);
}
internal static class JetBrains.Etw.BuildScript.EtwNativeTargets : object {
    private static string JetBrainsPrefix;
    private static string EtwPrefix;
    private static string DpaPrefix;
    public static string ProcessElevatorApi;
    public static string CollectorHost;
    public static string TimelineCollector;
    public static string DpaCollector;
    public static string DpaCollectorApi;
    public static string Tests;
    public static string MonoProfiler;
    public static string EventPipeTestProf;
    public static string EventPipeTimelineCollector;
    public static string DTraceProfiler;
    public static string ProcessMonitor;
    public static string DbgHelp;
    public static string SymSrv;
}
public class JetBrains.Etw.ControllerApi : object {
    protected LifetimeDefinition LifetimeDefinition;
    protected List`1<NativeDelegate> NativeDelegates;
    protected ControllerApi(Lifetime lifetime);
    protected static Task RunTask(Action func);
    protected static Task`1<T> RunTask(Func`1<T> func);
    private void SetOnLifetime(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <SetOnLifetime>b__6_0();
}
public class JetBrains.Etw.DpaCollectorApi : ControllerApi {
    private IntPtr myDpaCollector;
    private bool myIsCollectorReleased;
    public DpaCollectorApi(Lifetime lifetime, string ipcSocketPath, string logDir);
    public void WriteCancelHeader(UInt32 pid, UInt32 handleOwnerPid, UInt32 streamingFileHandle, bool withRundown, UInt32 errorCode);
    public UInt32 StartCollectingClr(UInt32 pid, UInt32 streamingFileHandle, bool withRundown, byte collectFlags);
    public UInt32 StartCollectingClr2(UInt32 pid, UInt32 handleCreatorPid, UInt32 streamingFileHandle, bool withRundown, byte collectFlags);
    public UInt32 StartCollectingProcesses(UInt32 streamingFileHandle);
    public void DebuggerBreak(int pid, DateTime timestamp);
    public void DebuggerContinue(int pid, DateTime timestamp);
    public void StopSession(UInt32 sessionId);
    public void WaitForSessionFinish(UInt32 sessionId);
    public void StopDpaCollector();
    private void SetOnLifetime();
    private static void CheckError(IntPtr err);
    [CompilerGeneratedAttribute]
private void <SetOnLifetime>b__12_0();
}
public class JetBrains.Etw.EtwControllerException : Exception {
    [CompilerGeneratedAttribute]
private string <EtwControllerMessage>k__BackingField;
    public string EtwControllerMessage { get; }
    public EtwControllerException(string errorMessage, string controllerMessage);
    [CompilerGeneratedAttribute]
public string get_EtwControllerMessage();
}
public static class JetBrains.Etw.EtwFiles : object {
    private static FileSystemPath ourEtwDirectory;
    private static EtwFiles();
    [NotNullAttribute]
public static String[] GetUtilityProcessNames(JetRuntimeId runtimeId);
    private static bool IsIncludePdb(bool includePdb);
    [NotNullAttribute]
public static FileSystemPath GetCollectorHost(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static FileSystemPath GetTimelineCollector(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetServerFiles(JetRuntimeId runtimeId, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetEtwClientFiles(JetRuntimeId runtimeId, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetElevatorClientFiles(JetRuntimeId runtimeId, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetDpaCollectorFiles(JetRuntimeId runtimeId, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetDpaCollectorApiFiles(JetRuntimeId runtimeId, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetEventPipeTestProfFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetEventPipeTimelineCollectorFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetDTraceProfilerFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetProcessMonitorFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetMonoFiles(JetRuntimeId runtimeId, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetEtwFiles(JetRuntimeId runtimeId, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetDpaFiles(JetRuntimeId processRuntimeId, JetRuntimeId osRuntimeId, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`2[] MakeShadowCopy(Tuple`2[] etwBinFiles, FileSystemPath outDir);
    [NotNullAttribute]
public static FileSystemPath GetTestCollector();
}
public static class JetBrains.Etw.EtwHResults : object {
    public static HResults ETW_E_INTERNAL;
    public static HResults ETW_E_ETW_ALREADY_IN_USE;
    public static HResults ETW_E_PROVIDER_CANNOT_START;
    public static HResults ETW_E_IO_ERROR;
    public static HResults ETW_E_DISK_IS_FULL;
    public static HResults ETW_E_VERIFY_EXE;
    public static HResults ETW_E_MAX_SESSIONS;
    public static HResults ETW_E_OPEN_PROCESS;
    public static HResults ETW_E_PROCESS_ACCESS_DENIED;
    public static HResults ETW_E_EMULATED_PROCESS_X64_ARM64;
    [CanBeNullAttribute]
public static string TryGetMessageForHr(HResults hr);
}
public static class JetBrains.Etw.EtwLaunchUtils : object {
    private static string ourJavaProfEnvName;
    private static EtwLaunchUtils();
    public static void PrepeareEtwHostToDeleteOnLifetime(Lifetime lifetime, FileSystemPath procFilePath, bool isDeleteFullDir);
    public static string BuildCommandLine(IEnumerable`1<ICollectorParam> collectorParams);
    public static bool IsJavaProcessExpected(IEnumerable`1<KeyValuePair`2<string, string>> environmentVariables);
}
public static class JetBrains.Etw.EventPipeCollectorApi : object {
    public static void Run(Lifetime lifetime, string bridgeEndpoint, UInt32 pid, string filename, string args, string ipcSocketPath, bool enableTpl, bool useTestProfiler);
    private static void CheckError(IntPtr err);
}
public interface JetBrains.Etw.IEtwMonitoring {
    public abstract virtual Task Cancel();
    public abstract virtual void Terminate();
}
public interface JetBrains.Etw.IEtwSession {
    public int ProcessId { get; }
    public abstract virtual Task`1<Task`1<FileSystemPath>> SnapshotStart(FileSystemPath snapshotPath);
    public abstract virtual Task SnapshotGet();
    public abstract virtual Task Detach();
    public abstract virtual void Terminate();
    public abstract virtual IntPtr GetHandle();
    public abstract virtual int get_ProcessId();
}
internal static class JetBrains.Etw.Impl.DpaCollector : object {
    public static ReleaseErrorInfoDelegate ReleaseErrorInfo;
    public static CreateDpaCollectorDelegate CreateDpaCollector;
    public static ReleaseDpaCollectorDelegate ReleaseDpaCollector;
    public static WriteCancelHeader2Delegate WriteCancelHeader2;
    public static StartCollectingClrDelegate StartCollectingClr;
    public static StartCollectingClr2Delegate StartCollectingClr2;
    public static StartCollectingProcessesDelegate StartCollectingProcesses;
    public static RaiseDebuggerBreakDelegate RaiseDebuggerBreak;
    public static RaiseDebuggerContinueDelegate RaiseDebuggerContinue;
    public static StopSessionDelegate StopSession;
    public static WaitForSessionFinishDelegate WaitForSessionFinish;
    public static StopDpaCollectorDelegate StopDpaCollector;
    private static DpaCollector();
}
internal static class JetBrains.Etw.Impl.EventPipeCollector : object {
    public static ReleaseErrorInfoDelegate ReleaseErrorInfo;
    public static CreateEventPipeCollectorDelegate CreateEventPipeCollector;
    public static ReleaseEventPipeCollectorDelegate ReleaseEventPipeCollector;
    public static CreateNettraceCollectorDelegate CreateNettraceCollector;
    public static ReleaseNettraceCollectorDelegate ReleaseNettraceCollector;
    private static EventPipeCollector();
}
internal static class JetBrains.Etw.Impl.ProcessElevator : object {
    public static ReleaseStringDelegate ReleaseString;
    public static ReleaseUnicodeStringDelegate ReleaseUnicodeString;
    public static ReleaseErrorInfoDelegate ReleaseErrorInfo;
    public static CreateProcessElevatorDelegate CreateProcessElevator;
    public static ElevateProcessDelegate ElevateProcess;
    public static ReleaseHostControllerDelegate ReleaseProcessElevator;
    public static GetElevationHostDirectoriesDelegate GetElevationHostDirectories;
    public static ReleaseElevationHostDirectoriesDelegate ReleaseElevationHostDirectories;
    public static TerminateHostControllerDelegate TerminateProcessElevator;
    public static TerminateAndWaitElevatorExitDelegate TerminateAndWaitProcessElevatorExit;
    public static IsCompatibleElevationHostRunningDelegate IsCompatibleElevationHostRunning;
    private static ProcessElevator();
}
public class JetBrains.Etw.NettraceCollectorApi : ControllerApi {
    private Task myTerminationTask;
    public NettraceCollectorApi(Lifetime lifetime, FileSystemPath nettracePath, FileSystemPath snapshotIndexPath, string xmlConfig, Progress progress);
    public bool WaitForTermination(TimeSpan terminationTimeout);
    private static void CheckError(IntPtr err);
}
public class JetBrains.Etw.Param.CmdParam : object {
    private string myCmd;
    public CmdParam(string cmd);
    [LocalizableAttribute("False")]
public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.DbgHelpParam : object {
    private string myDbgHelpPath;
    public DbgHelpParam(string dbgHelpPath);
    [LocalizableAttribute("False")]
public sealed virtual String[] GetArguments();
}
[LocalizableAttribute("False")]
public class JetBrains.Etw.Param.DisabledProvidersParam : object {
    private string myDisabledProviders;
    public DisabledProvidersParam(IEnumerable`1<EvProvider> disabledProviders);
    public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.EtwCollectorBuffer : object {
    public static UInt32 GetDefaultValue(EvProvider k);
}
public class JetBrains.Etw.Param.EtwCollectorBufferParam : object {
    private EvProvider provider;
    private UInt32 value;
    public EtwCollectorBufferParam(EvProvider provider, UInt32 value);
    [LocalizableAttribute("False")]
public sealed virtual String[] GetArguments();
}
public enum JetBrains.Etw.Param.EtwCollectorLogIndex : Enum {
    public byte value__;
    public static EtwCollectorLogIndex Debug;
    public static EtwCollectorLogIndex SymbolResolver;
    public static EtwCollectorLogIndex SymbolLoader;
    public static EtwCollectorLogIndex MetadataLoader;
    public static EtwCollectorLogIndex Callstack;
    public static EtwCollectorLogIndex Thread;
}
[FlagsAttribute]
public enum JetBrains.Etw.Param.EtwCollectorLogMask : Enum {
    public UInt32 value__;
    public static EtwCollectorLogMask None;
    public static EtwCollectorLogMask Debug;
    public static EtwCollectorLogMask SymbolResolver;
    public static EtwCollectorLogMask SymbolLoader;
    public static EtwCollectorLogMask MetadataLoader;
    public static EtwCollectorLogMask Callstack;
    public static EtwCollectorLogMask Thread;
}
public enum JetBrains.Etw.Param.EvProvider : Enum {
    public int value__;
    public static EvProvider core_provider;
    public static EvProvider kernel_provider;
    public static EvProvider net_provider;
    public static EvProvider net_rundown_provider;
    public static EvProvider Microsoft_Windows_Win32k;
    public static EvProvider sql_trace_provider;
    public static EvProvider odbc_trace_provider;
    public static EvProvider http_service_provider;
    public static EvProvider own_provider;
    public static EvProvider crit_sec_provider;
    public static EvProvider HeapTraceProvider;
    public static EvProvider JetBrains_Common_DebugOutput;
    public static EvProvider System_Threading_Tasks_TplEventSource;
    public static EvProvider Microsoft_Diagnostics_DiagnosticSource;
}
public static class JetBrains.Etw.Param.EvProviderPresentation : object {
    [LocalizableAttribute("False")]
public static string GetName(EvProvider pr);
}
public interface JetBrains.Etw.Param.ICollectorParam {
    [NotNullAttribute]
public abstract virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.LightweightParam : object {
    [LocalizableAttribute("False")]
public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.LoggerDirectoryParam : object {
    private FileSystemPath myDirectory;
    public LoggerDirectoryParam(FileSystemPath directory);
    [LocalizableAttribute("False")]
public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.LoggerMaskParam : object {
    private EtwCollectorLogMask myLogMask;
    public LoggerMaskParam(EtwCollectorLogMask logMask);
    [LocalizableAttribute("False")]
public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.SymbolPathParam : object {
    private string mySymPaths;
    public SymbolPathParam(string symPaths);
    [LocalizableAttribute("False")]
public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.TopRootFactorParam : object {
    private UInt32 myFactor;
    public TopRootFactorParam(UInt32 factor);
    [LocalizableAttribute("False")]
public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.UnregisteredParams : object {
    private string myKey;
    private string myValue;
    public UnregisteredParams(string key, string value);
    public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.ProcessElevatorApi : ControllerApi {
    private IntPtr myProcessElevator;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    public string Connection { get; public set; }
    private ProcessElevatorApi(Lifetime lifetime, ErrorCallback errorCallback, bool runHostAllowed, HostLaunchMode hostMode, HostDeleteOptions hostDeleteOptions, bool tryWaitHostExit, FileSystemPath hostPath, FileSystemPath elevatorLogPath, FileSystemPath hostLogPath);
    public static string GetDiagFilePrefix(DiagnosticFileSource source);
    public static bool IsCompatibleElevationHostRunning();
    public static ProcessElevatorApi Create(Lifetime lifetime, ErrorCallback errorCallback, bool runHostAllowed, HostLaunchMode hostMode, HostDeleteOptions hostDeleteOptions, bool tryWaitHostExit, FileSystemPath hostPath, FileSystemPath hostLogPath, FileSystemPath elevatorLogPath);
    public void ElevateProcess(FileSystemPath processPath, string processParams, string productName, string productDescription, int timeout);
    public HostDirectories GetHostDirectories(FileSystemPath logCopyDirectory, DiagnosticFileSource source, DiagnosticFileType type, UInt32 pid, UInt32 count, int timeout);
    public void Terminate();
    public void TerminateAndWaitElevatorExit(int timeout);
    [CompilerGeneratedAttribute]
public string get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(string value);
    private void SetOnLifetime(HostLaunchMode hostMode, bool tryWaitHostExit);
    private static void CheckError(IntPtr err, Func`2<HResults, bool> hresultErrorHandler);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.Etw.Resources.UITexts : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string Profiler_Error_Internal { get; }
    public static string Profiler_Error_EtwAlreadyInUse { get; }
    public static string Profiler_Error_ProviderCannotStart { get; }
    public static string Profiler_Error_IOError { get; }
    public static string Profiler_Error_DiskIsFull { get; }
    public static string Profiler_Error_VerifyExe { get; }
    public static string Profiler_Error_MaxSessions { get; }
    public static string Profiler_Error_EmulatedPprocessX64_ARM64 { get; }
    public static string ErrorUtils_Error_Pattern { get; }
    private static UITexts();
    public static JetResourceManager get_ResourceManager();
    public static string get_Profiler_Error_Internal();
    public static string get_Profiler_Error_EtwAlreadyInUse();
    public static string get_Profiler_Error_ProviderCannotStart();
    public static string get_Profiler_Error_IOError();
    public static string get_Profiler_Error_DiskIsFull();
    public static string get_Profiler_Error_VerifyExe();
    public static string get_Profiler_Error_MaxSessions();
    public static string get_Profiler_Error_EmulatedPprocessX64_ARM64();
    public static string get_ErrorUtils_Error_Pattern();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
