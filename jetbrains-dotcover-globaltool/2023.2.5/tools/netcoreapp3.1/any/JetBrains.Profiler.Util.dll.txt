public class JetBrains.Profiler.Util.AsyncOrderedSequenceQueue`2 : object {
    private static ILogger ourLogger;
    private Dictionary`2<TSequence, SortedList`2<TIndex, Data<TSequence, TIndex>>> myIds;
    public bool IsEmpty { get; }
    private static AsyncOrderedSequenceQueue`2();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual IAsyncOrderedSequenceTransaction Run(TSequence sequence, TIndex index);
    private void DoneIfCan(TSequence sequence);
}
public static class JetBrains.Profiler.Util.ConvertUtil : object {
    [NotNullAttribute]
public static Byte[] HexStringToArray(string str);
    [NotNullAttribute]
public static string HexStringFromArray(Byte[] data);
}
public class JetBrains.Profiler.Util.CoreHandleException : IOException {
    public CoreHandleException(string message);
    public CoreHandleException(string message, Exception innerException);
}
public static class JetBrains.Profiler.Util.CoreHandlesFactory : object {
    private static UInt32 MaxAttempts;
    private static Random ourRandom;
    private static CoreHandlesFactory();
    public static Nullable`1<IntPtr> DuplicateHandle(Process srcProcess, IntPtr srcHandle, Process dstProcess);
    [NotNullAttribute]
public static Tuple`2<SafeFileHandle, FileSystemPath> CreateTemporaryHandle(FileSystemPath dir, int processId);
    [NotNullAttribute]
public static Tuple`2<SafeFileHandle, FileSystemPath> CreateDiagnosticsHandle(FileSystemPath dir, int processId);
    public static Tuple`2<SafeFileHandle, FileSystemPath> CreateStreamingHandle(FileSystemPath dir, int processId);
    public static Tuple`2<SafeFileHandle, FileSystemPath> CreateSnapshotHandle(FileSystemPath dir, int processId);
    public static void SetDeleteOnClose(SafeFileHandle handle, bool deleteFile);
    [NotNullAttribute]
private static string GenerateRandomString();
    [LocalizableAttribute("False")]
private static string GenerateFilename(int processId, string extWithoutDot);
    [ObsoleteAttribute("Do not call, should be deleted shortly")]
public static string GenerateStreamingFilename(int processId);
    [LocalizableAttribute("False")]
private static Tuple`2<SafeFileHandle, FileSystemPath> CreateHandle(FileSystemPath dir, Func`1<string> generateUniquePair, Func`2<FileSystemPath, SafeFileHandle> creator);
}
public static class JetBrains.Profiler.Util.DfsUtil : object {
    public static void Dfs(IEnumerable`1<TValue> roots, Func`2<TValue, IEnumerable`1<TValue>> doProcessDownAndGetReferences);
    public static void Dfs(IEnumerable`1<TValue> roots, Func`2<TValue, IEnumerable`1<TValue>> doProcessDownAndGetReferences, Action`1<TValue> doProcessUp);
}
public static class JetBrains.Profiler.Util.EllipsisUtil : object {
    public static string LongHorizontal;
    public static string Horizontal;
    private static char ourDirectorySeparatorChar;
    private static IEqualityComparer`1<string> ourInvariantCulture;
    private static EllipsisUtil();
    [NotNullAttribute]
public static String[] CompactPathsSeparately(string ellipsis, String[] files);
    [NotNullAttribute]
public static String[] CompactPathsTogether(string ellipsis, String[] files);
    [NotNullAttribute]
private static string GetFileName(string file);
    [NotNullAttribute]
private static String[] GetDirectoryComponents(string file);
    private static void CompactPaths(string ellipsis, String[] result, IReadOnlyList`1<FileItem> items, Func`2<int, string> getFileName);
    [NotNullAttribute]
private static TreeItem BuildTree(IReadOnlyList`1<FileItem> items);
    private static void ProcessTree(string ellipsis, TreeItem tree, StringBuilder[] builders);
    [NotNullAttribute]
private static string MergeParts(TreeItem& cur);
}
public static class JetBrains.Profiler.Util.EqualsUtil : object {
    public static bool CleverEquals(object obj1, object obj2);
    [CanBeNullAttribute]
public static T GetNearestLesserThenGreater(IEnumerable`1<T> values, T targetValue);
}
public static class JetBrains.Profiler.Util.ExpandUtil : object {
    [ContractAnnotationAttribute("str:null => null")]
public static string ExpandString(string str, Func`2<string, string> substutute);
}
public static class JetBrains.Profiler.Util.FileSystemPathHelper : object {
    [CanBeNullAttribute]
public static FileSystemPath BuildPath(string path);
    [CanBeNullAttribute]
public static FileSystemPath BuildAbsolutePath(string path);
    [CanBeNullAttribute]
public static FileSystemPath BuildPathFromCommandLine(string path);
    [CanBeNullAttribute]
public static FileSystemPath BuildAbsolutePathFromCommandLine(string path);
    [CanBeNullAttribute]
private static string FixCommandLine(string path);
}
public interface JetBrains.Profiler.Util.IAsyncOrderedSequenceQueue`2 {
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    [NotNullAttribute]
public abstract virtual IAsyncOrderedSequenceTransaction Run(TSequence sequence, TIndex index);
}
public interface JetBrains.Profiler.Util.IAsyncOrderedSequenceTransaction {
    public abstract virtual void Commit(Action action, Action`1<Exception> failed);
    public abstract virtual void Rollback();
}
[ComVisibleAttribute("True")]
public class JetBrains.Profiler.Util.IncompatibleException : ApplicationException {
    public IncompatibleException(string message);
    public IncompatibleException(string message, Exception innerException);
    protected IncompatibleException(SerializationInfo info, StreamingContext context);
}
public static class JetBrains.Profiler.Util.IO.BaseTempUtil : object {
    private static Random ourRandom;
    private static BaseTempUtil();
    [NotNullAttribute]
public static string CreateUniqueTemp(string path, string prefix, Action`1<string> createPathAction, Action`1<string> testAction);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Util.IO.GuidIO : object {
    [ExtensionAttribute]
public static Guid ReadGuid(BinaryReader reader);
    [ExtensionAttribute]
public static void WriteGuid(BinaryWriter writer, Guid guid);
}
public static class JetBrains.Profiler.Util.IO.IOSecurityUtil : object {
    private static ILogger ourLogger;
    private static bool ourIsWindows8;
    private static FileSystemRights FileSystemRights_ReadAndExecute;
    private static FileSystemRights FileSystemRights_Modify;
    private static RegistryRights RegistryRights_Read;
    private static SecurityIdentifier ourAllAppPackages;
    private static SecurityIdentifier ourBuiltinUsers;
    private static IOSecurityUtil();
    public static bool GrantDirectory_AllAppPackages_ReadAndExecute(FileSystemPath dir, bool inherit, bool throwOnError);
    public static bool GrantFile_AllAppPackages_ReadAndExecute(FileSystemPath dir, bool throwOnError);
    public static bool GrantRegistryReadAccess_AllAppPackages(RegistryHiveAccess key, BackSlashSeparatedRelativePath subKey, bool inherit, bool throwOnError);
    public static bool GrantDirectory_BuiltinUsers_ReadAndExecute(FileSystemPath dir, bool inherit, bool throwOnError);
    public static bool GrantDirectory_BuiltinUsers_Modify(FileSystemPath dir, bool inherit, bool throwOnError);
    public static bool GrantFile_BuiltinUsers_ReadAndExecute(FileSystemPath dir, bool throwOnError);
    public static bool GrantFile_BuiltinUsers_Modify(FileSystemPath dir, bool throwOnError);
    private static bool HasACLs(FileSystemPath path);
    private static bool CheckEffectiveAccess(TSecurity security, SecurityIdentifier sid, FileSystemRights rights);
    private static bool CheckEffectiveAccess(RegistrySecurity security, SecurityIdentifier sid, RegistryRights rights);
    private static bool Grant(FileSystemPath path, SecurityIdentifier sid, FileSystemRights rights, bool inherit, Func`2<FileSystemPath, TSecurity> getter, Action`2<FileSystemPath, TSecurity> setter, Func`1<string> throwOnError);
    private static bool GrantDirectory(FileSystemPath dir, SecurityIdentifier sid, FileSystemRights rights, bool inherit, Func`1<string> throwOnError);
    private static bool GrantFile(FileSystemPath file, SecurityIdentifier sid, FileSystemRights rights, Func`1<string> throwOnError);
    private static bool GrantRegistry(RegistryHiveAccess key, BackSlashSeparatedRelativePath subKey, SecurityIdentifier sid, RegistryRights rights, bool inherit, Func`1<string> throwOnError);
}
public static class JetBrains.Profiler.Util.IO.PackedIO : object {
    public static int Read(BinaryReader reader);
    public static void Write(BinaryWriter writer, int value);
    public static byte GetPackedSize(int value);
}
public static class JetBrains.Profiler.Util.IO.StreamUtil : object {
    [CanBeNullAttribute]
[ThreadStaticAttribute]
private static WeakReference ourHolder;
    [NotNullAttribute]
private static Byte[] GetBuffer();
    public static long CopyAll(Stream sourceStream, Stream destinationStream);
    public static long CopyAll(Stream srcStream, Stream dstStream, Action`1<long> progress);
    public static void Copy(Stream sourceStream, Stream destinationStream, long totalSize);
    public static void Copy(Stream srcStream, Stream dstStream, long totalSize, Action`1<long> progress);
    public static void Copy(Stream srcStream, Stream dstStream, long count, IProgressIndicator progress);
}
public static class JetBrains.Profiler.Util.IO.StringIO`1 : object {
    private static Encoding ourEncoding;
    private static StringIO`1();
    [NotNullAttribute]
public static Char[] ReadChars(BinaryReader reader);
    [NotNullAttribute]
public static string ReadString(BinaryReader reader);
    public static void Write(BinaryWriter writer, Char[] chars);
    public static void Write(BinaryWriter writer, string str);
    [NotNullAttribute]
private static Byte[] Read(BinaryReader reader);
    private static void Write(BinaryWriter writer, Byte[] bytes);
}
public static class JetBrains.Profiler.Util.IO.TempUtil : object {
    private static string TempFileExtension;
    private static FileSystemPath ourGlobalTempPath;
    private static FileSystemPath ourTempPath;
    [NotNullAttribute]
public static FileSystemPath GlobalTempPath { get; }
    [NotNullAttribute]
public static FileSystemPath TempPath { get; }
    public static FileSystemPath get_GlobalTempPath();
    public static FileSystemPath get_TempPath();
    [NotNullAttribute]
private static FileSystemPath CreateGlobalTempPath();
    [NotNullAttribute]
private static FileSystemPath CreateTempPath();
    [NotNullAttribute]
public static FileSystemPath CreateSpecificTempFile(FileSystemPath directory, string prefix);
    [NotNullAttribute]
public static FileSystemPath CreateSpecificTempDirectory(FileSystemPath directory, string prefix);
    [NotNullAttribute]
public static FileSystemPath CreateTempFile(string prefix);
    [NotNullAttribute]
public static FileSystemPath CreateTempDirectory(string prefix);
    [NotNullAttribute]
public static FileSystemPath CreateGlobalTempFile(string prefix);
    [NotNullAttribute]
public static FileSystemPath CreateGlobalTempDirectory(string prefix);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Util.IO.VersionIO : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static Version ReadVersion(BinaryReader reader);
    [ExtensionAttribute]
public static void WriteVersion(BinaryWriter writer, Version version);
}
public interface JetBrains.Profiler.Util.IPropertyCollector`1 {
    public abstract virtual void Add(IProperty`1<TValue> property);
    [NotNullAttribute]
public abstract virtual IProperty`1<TValue> Create();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Util.JavaTimeUtil : object {
    private static DateTime ourJavaBaseTime;
    private static JavaTimeUtil();
    [ExtensionAttribute]
public static long ToJavaTime(DateTime dateTime);
    public static DateTime FromJavaTime(long milliseconds);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Util.LogUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToLog(string text);
}
public static class JetBrains.Profiler.Util.Metadata.MetadataSpecials : object {
    public static MetadataTableId MetadataTableId_JBSpecificMethod;
    public static MetadataTableId MetadataTableId_JBSpecificType;
    public static MetadataTableId MetadataTableId_MethodDef;
    public static MetadataToken NativeCallIdToken;
    public static MetadataToken ThreadStoppedByUnknownReasonCallIdToken;
    public static MetadataToken GcCallIdToken;
    public static MetadataToken AppDomainShutdownCallIdToken;
    public static MetadataToken CodePitchingCallIdToken;
    public static MetadataToken UnmanagedStackFrameCallIdToken;
    public static MetadataToken UnsafeStackFrameCallIdToken;
    public static MetadataToken RootIdToken;
    public static MetadataToken NativeTypeIdToken;
    public static MetadataToken ArrayTypeIdToken;
    private static MetadataSpecials();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Util.Metadata.MetadataTokenEx : object {
    [ExtensionAttribute]
public static bool IsNativeCallIdToken(MetadataToken token);
    [ExtensionAttribute]
public static bool IsUnmanagedStackFrameCall(MetadataToken token);
    [ExtensionAttribute]
public static bool IsUnsafeStackFrame(MetadataToken token);
    [ExtensionAttribute]
public static bool IsRootId(MetadataToken token);
}
public class JetBrains.Profiler.Util.OrPropertyCollector : object {
    private string myId;
    private Lifetime myLifetime;
    private List`1<IProperty`1<bool>> mySources;
    public OrPropertyCollector(Lifetime lifetime, string id);
    public sealed virtual void Add(IProperty`1<bool> property);
    public sealed virtual IProperty`1<bool> Create();
}
public static class JetBrains.Profiler.Util.ParserUtil : object {
    [NotNullAttribute]
public static string PrepareForLinkLabel(string message, IEnumerable`1& urlRanges);
}
public class JetBrains.Profiler.Util.PassToFinallyException : Exception {
    public PassToFinallyException(Exception innerException);
}
public static class JetBrains.Profiler.Util.ProfilerEnvironmentConstants : object {
    public static string PrefixProfiler;
    public static string Temp;
}
public static class JetBrains.Profiler.Util.PropertyUtil : object {
    [NotNullAttribute]
public static IDictionary`2<string, string> StringsToDictionary(IEnumerable`1<string> enumerable);
    [NotNullAttribute]
public static String[] DictionaryToStrings(IEnumerable`1<KeyValuePair`2<string, string>> enumerable);
}
public static class JetBrains.Profiler.Util.RedundantUtil : object {
    private static ILogger ourLogger;
    private static RedundantUtil();
    public static Result`1<TData> Redundant(IReadOnlyCollection`1<TData> roots, Func`2<TData, TKey> getKey, Func`2<TData, IEnumerable`1<TData>> getOutgoings);
}
public static class JetBrains.Profiler.Util.RegistryUtil : object {
    public static KeyAccessRights GetRegistryRights(JetArchitecture osArchitecture, JetArchitecture processArchitecture, JetArchitecture targetArchitecture);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Util.ReorderUtil : object {
    [ExtensionAttribute]
public static T[] Reorder(IEnumerable`1<T> t, Func`2<T, bool> checkAction, IEqualityComparer`1<T> comparer, Func`2<T, long> getTimeAction);
}
[LocalizableAttribute("False")]
public static class JetBrains.Profiler.Util.RootRegistryPaths : object {
    public static BackSlashSeparatedRelativePath Software;
    public static BackSlashSeparatedRelativePath Microsoft;
    public static BackSlashSeparatedRelativePath SystemCurrentControlSet;
    public static BackSlashSeparatedRelativePath WindowsNtCurrentVersion;
    public static BackSlashSeparatedRelativePath Environment;
    public static BackSlashSeparatedRelativePath Control;
    public static BackSlashSeparatedRelativePath Services;
    public static BackSlashSeparatedRelativePath AllUserEnvironment;
    public static BackSlashSeparatedRelativePath RegisteredApplications;
    public static BackSlashSeparatedRelativePath NetFramework;
    public static BackSlashSeparatedRelativePath NetFrameworkPolicy;
    public static BackSlashSeparatedRelativePath NetFrameworkNdp;
    public static BackSlashSeparatedRelativePath UrlAssociations;
    public static BackSlashSeparatedRelativePath ProfileList;
    public static BackSlashSeparatedRelativePath SvcHost;
    public static BackSlashSeparatedRelativePath Clsid;
    public static BackSlashSeparatedRelativePath Classes;
    public static BackSlashSeparatedRelativePath ClassesClsid;
    public static BackSlashSeparatedRelativePath IISExpress;
    public static BackSlashSeparatedRelativePath InetStp;
    public static BackSlashSeparatedRelativePath Mono;
    private static RootRegistryPaths();
}
public static class JetBrains.Profiler.Util.SearchUtil : object {
    public static int BinarySearch(int index, int length, TValue value, Func`2<int, TValue> get, Func`3<TValue, TValue, int> compare);
}
public static class JetBrains.Profiler.Util.SerializeUtil : object {
    private static BinaryFormatter ourFormatter;
    private static SerializeUtil();
    [CanBeNullAttribute]
public static Byte[] SerializeParameters(Object[] parameters);
    [CanBeNullAttribute]
public static Object[] DeserializeParameters(Byte[] rawParameters);
    [NotNullAttribute]
public static Byte[] SerializeResult(object returnValue, Object[] byRefParameters);
    [NotNullAttribute]
public static Tuple`2<object, Object[]> DeserializeResult(Byte[] rawResult, bool hasByRefParameters);
}
public static class JetBrains.Profiler.Util.Service.ServiceUtil : object {
    public static int GetProcessId(ServiceController service);
    [NotNullAttribute]
public static string GetImagePath(ServiceController service);
    [CanBeNullAttribute]
public static string GetSvcHostGroup(string serviceName, KeyAccessRights rights);
    [NotNullAttribute]
public static String[] GetSvcHostServices(string grp, KeyAccessRights rights);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Util.SignalWithDelegatesEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static SignalWithDelegates`1<TValue> EnsureBeforeAdvise(SignalWithDelegates`1<TValue> signal, Func`2<Action`1<TValue>, bool> beforeAdviseHandler);
    [ExtensionAttribute]
[NotNullAttribute]
public static SimpleSignalWithDelegates EnsureBeforeAdvise(SimpleSignalWithDelegates signal, Func`2<Action`1<bool>, bool> beforeAdviseHandler);
}
public static class JetBrains.Profiler.Util.TerminalUtil : object {
    public static bool CanUseExternalConsole { get; }
    public static bool get_CanUseExternalConsole();
    [IteratorStateMachineAttribute("JetBrains.Profiler.Util.TerminalUtil/<GetTerminalProbes>d__2")]
[NotNullAttribute]
public static IEnumerable`1<Pair`2<Func`1<FileSystemPath>, string>> GetTerminalProbes();
}
public static class JetBrains.Profiler.Util.ThrowUtil : object {
    [NotNullAttribute]
public static T ThrowIfNull(T obj);
    [NotNullAttribute]
public static T ThrowIfNull(T obj, string message);
    [NotNullAttribute]
public static T ThrowIfNull(T obj, Func`1<string> message);
}
public static class JetBrains.Profiler.Util.WaitUtil : object {
    private static ILogger ourLogger;
    private static WaitUtil();
    public static bool Wait(int timeout, Func`1<bool> isDone, Action wait);
    public static void Wait(Func`1<bool> isDone, Action wait);
}
public static class JetBrains.Profiler.Util.XmlUtil : object {
    private static string ATTR_TYPE;
    [CanBeNullAttribute]
public static Version ReadFromXml_Version(XmlElement element, string tagName);
    [CanBeNullAttribute]
public static Version2 ReadFromXml_Version2(XmlElement element, string tagName);
    public static void WriteToXml_Version(XmlElement element, Version data, string tagName);
    public static void WriteToXml_Version2(XmlElement element, Version2 data, string tagName);
    [CanBeNullAttribute]
public static TClass ReadFromXml(XmlElement element, string tagName);
    public static void WriteToXml(XmlElement element, TClass data, string tagName);
    [CanBeNullAttribute]
public static TClass ReadFromXml(XmlElement element, string tagName, Func`2<string, TClass> resolve);
    public static void WriteToXml(XmlElement element, TClass data, string tagName, Func`2<TClass, string> resolve);
    [NotNullAttribute]
public static String[] ReadArrayFromXml(XmlNode element, string name, string itemName);
    [NotNullAttribute]
public static T[] ReadArrayFromXml(XmlNode element, string name, string itemName);
    [NotNullAttribute]
public static String[] ReadArrayFromXml_SkipFailed(XmlNode element, string name, string itemName);
    [NotNullAttribute]
public static T[] ReadArrayFromXml_SkipFailed(XmlNode element, string name, string itemName);
    [NotNullAttribute]
public static T[] ReadArrayFromXmlEx(XmlNode element, string name, string itemName, Action`2<Action`1<T>, XmlElement> readAction);
    public static void WriteArrayToXml(XmlNode element, IEnumerable`1<string> enumerable, string name, string itemName);
    public static void WriteArrayToXml(XmlNode element, IEnumerable`1<T> enumerable, string name, string itemName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
