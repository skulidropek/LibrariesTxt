public class JetBrains.Profiler.Windows.RemoteAgent.BuildScript.RequestAppConfigInstall : object {
    [BuildStepAttribute]
public static InstallAppConfig[] Run(AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir);
}
public class JetBrains.Profiler.Windows.RemoteAgent.ElevationServiceAgent : object {
    private static ElevationAgentManager ourElevationAgentManager;
    private IProperty`1<bool> myHasCommunicationError;
    private SysTools myService;
    public bool IsRemote { get; }
    public IProperty`1<bool> HasCommunicationError { get; }
    public SysTools Service { get; }
    public ElevationServiceAgent(Lifetime lifetime);
    private static ElevationServiceAgent();
    public sealed virtual bool get_IsRemote();
    public sealed virtual IProperty`1<bool> get_HasCommunicationError();
    public sealed virtual SysTools get_Service();
}
public interface JetBrains.Profiler.Windows.RemoteAgent.IClient`1 {
    [NotNullAttribute]
public IProperty`1<bool> HasCommunicationError { get; }
    [NotNullAttribute]
public TService Proxy { get; }
    public abstract virtual IProperty`1<bool> get_HasCommunicationError();
    public abstract virtual TService get_Proxy();
}
internal abstract class JetBrains.Profiler.Windows.RemoteAgent.Impl.BaseInterceptor : object {
    protected IClient`1<IAgentService> Client;
    protected String[] Ids;
    protected string ServiceName;
    protected BaseInterceptor(IClient`1<IAgentService> client, string serviceName, String[] ids);
}
internal class JetBrains.Profiler.Windows.RemoteAgent.Impl.CallInterceptor : BaseInterceptor {
    public CallInterceptor(IClient`1<IAgentService> client, string serviceName, String[] ids);
    public sealed virtual void Intercept(IInvocation invocation);
}
public class JetBrains.Profiler.Windows.RemoteAgent.Impl.ClientProxy`2 : object {
    private static ProxyGenerator ourGenerator;
    private static ProxyGenerationOptions ourProxyGenerationOptions;
    protected IClient`1<IAgentService> Client;
    public ClientProxy`2(IClient`1<IAgentService> client);
    private static ClientProxy`2();
    public static TTools Create(IClient`1<IAgentService> client, string serviceName);
    public static TTools Create(IClient`1<IAgentService> client, String[] ids, string serviceName);
    [NotNullAttribute]
private static object CreateProxy(IClient`1<IAgentService> client, string serviceName, TTools root, String[] ids, Type type);
}
public class JetBrains.Profiler.Windows.RemoteAgent.Impl.ClientSysTools : SysTools {
    [NotNullAttribute]
private IClient`1<IAgentService> myClient;
    public ClientSysTools(IClient`1<IAgentService> client, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    protected virtual Stream OpenReadFile(string fileName);
    protected virtual Stream CreateAppendFile(string fileName);
    private static RemoteStreamFlags RemoteStreamOptimizer(int size);
}
internal class JetBrains.Profiler.Windows.RemoteAgent.Impl.CrossDomainProxy`1 : BaseCrossDomainProxy {
    private static ILogger ourLogger;
    private ServerProxy`1<TTools> myProxy;
    public CrossDomainProxy`1(Func`3<ServiceLocation, ServiceCreatorDelegate<TTools>, TTools> toolsFactory);
    private static CrossDomainProxy`1();
    public virtual void Dispose();
    public virtual Byte[] Call(long callId, String[] ids, string method, String[] parametersTypes, Byte[] rawParametersValues);
}
internal class JetBrains.Profiler.Windows.RemoteAgent.Impl.ElevationAgentManager : object {
    private static int TimeoutListen;
    private static int TimeoutExit;
    private static ILogger ourLogger;
    private EventWaitHandle myControlEvent;
    private object myLock;
    private string myControlEventName;
    private string myVirtualRoot;
    private Process myProcess;
    [NotNullAttribute]
public Uri Uri { get; }
    public ElevationAgentManager(Lifetime lifetime);
    private static ElevationAgentManager();
    public Uri get_Uri();
    public void RunIfNeed();
    [NotNullAttribute]
private static Process CreateElevationAgent(EventWaitHandle controlEvent, string virtualRoot, string controlEventName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0();
    [CompilerGeneratedAttribute]
private EventWaitHandle <.ctor>b__8_1();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.RemoteAgent.Impl.IInvocationEx : object {
    [ExtensionAttribute]
public static bool HasByRefParameters(IInvocation invocation);
    [ExtensionAttribute]
public static void SetByRefArguments(IInvocation invocation, Object[] byRefParameters);
    [NotNullAttribute]
public static IEnumerable`1<int> GetByRefParametersIndexes(MethodInfo methodInfo);
}
internal class JetBrains.Profiler.Windows.RemoteAgent.Impl.InterceptorSelector : object {
    public static IInterceptorSelector Instance;
    private static InterceptorSelector();
    public sealed virtual IInterceptor[] SelectInterceptors(Type type, MethodInfo methodInfo, IInterceptor[] interceptors);
}
internal class JetBrains.Profiler.Windows.RemoteAgent.Impl.LongCallInterceptor : BaseInterceptor {
    private static TimeSpan ourCallCheckTimespan;
    public LongCallInterceptor(IClient`1<IAgentService> client, string serviceName, String[] ids);
    private static LongCallInterceptor();
    public sealed virtual void Intercept(IInvocation invocation);
}
internal class JetBrains.Profiler.Windows.RemoteAgent.Impl.ProxyGenerationHook : object {
    public static IProxyGenerationHook Instance;
    private static ProxyGenerationHook();
    public sealed virtual void MethodsInspected();
    public sealed virtual void NonProxyableMemberNotification(Type type, MemberInfo memberInfo);
    public sealed virtual bool ShouldInterceptMethod(Type type, MethodInfo methodInfo);
}
public class JetBrains.Profiler.Windows.RemoteAgent.Impl.ServerProxy`1 : object {
    private static ILogger ourLogger;
    private TTools myTools;
    public ServerProxy`1(Func`3<ServiceLocation, ServiceCreatorDelegate<TTools>, TTools> toolsFactory);
    private static ServerProxy`1();
    public Byte[] Call(long callId, String[] ids, string method, String[] parametersTypes, Byte[] rawParametersValues);
    private void WalkHierarchy(String[] ids, Type& type, Object& obj);
    private static object CreateRemote(TTools root, String[] ids, Type type);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.RemoteAgent.Impl.ServiceUtil : object {
    private static int MaxBufferSize;
    private static ILogger ourLogger;
    private static VersionData4 ourAgentVersion;
    private static HashSet`1<string> ourAssembliesWhitelist;
    private static ServiceUtil();
    [ExtensionAttribute]
public static void UploadService(IClient`1<IAgentService> client, string serviceName, Type serviceType);
    [ExtensionAttribute]
private static void UploadServiceFiles(IClient`1<IAgentService> client, string serviceName, FileSystemPath rootDir, FileDescriptor[] corrupted);
    [NotNullAttribute]
private static FileDescriptor[] CreateDescriptors(Assembly assembly);
    private static bool IsExcluded(AssemblyName name);
}
public class JetBrains.Profiler.Windows.RemoteAgent.Impl.SysToolsClientProxy : ClientProxy`2<SysTools, ClientSysTools> {
    public SysToolsClientProxy(IClient`1<IAgentService> client);
}
internal class JetBrains.Profiler.Windows.RemoteAgent.Impl.SysToolsCrossDomainProxy : CrossDomainProxy`1<SysTools> {
}
internal class JetBrains.Profiler.Windows.RemoteAgent.Impl.WcfAgentServiceClient`1 : object {
    private static ILogger ourLogger;
    private IProperty`1<bool> myHasCommunicationError;
    private TService myProxy;
    public IProperty`1<bool> HasCommunicationError { get; }
    public TService Proxy { get; }
    public WcfAgentServiceClient`1(Lifetime lifetime, Uri url, string configurationName, Action`2<ClientCredentials, ServiceEndpoint> beforeCreate);
    private static WcfAgentServiceClient`1();
    public sealed virtual IProperty`1<bool> get_HasCommunicationError();
    public sealed virtual TService get_Proxy();
}
public class JetBrains.Profiler.Windows.RemoteAgent.RemoteServiceAgent : object {
    private IProperty`1<bool> myHasCommunicationError;
    private SysTools myService;
    public bool IsRemote { get; }
    public IProperty`1<bool> HasCommunicationError { get; }
    public SysTools Service { get; }
    private RemoteServiceAgent(Lifetime lifetime, Uri url, Action`2<ClientCredentials, ServiceEndpoint> beforeCreate);
    public RemoteServiceAgent(Lifetime lifetime, Uri url);
    public RemoteServiceAgent(Lifetime lifetime, Uri url, string userName, string password, string domain);
    public sealed virtual bool get_IsRemote();
    public sealed virtual IProperty`1<bool> get_HasCommunicationError();
    public sealed virtual SysTools get_Service();
    [NotNullAttribute]
internal static string GetEndpointConfigurationName(string scheme);
}
public class JetBrains.Profiler.Windows.RemoteAgent.RemoteStream : Stream {
    private static int MaxWriteBufferSize;
    private IClient`1<IAgentService> myClient;
    private Mode myMode;
    private string myRemoteFile;
    private Func`2<int, RemoteStreamFlags> mySelector;
    private long myCurrentOffset;
    private int myWasDisposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public RemoteStream(IClient`1<IAgentService> client, string remoteFile, Mode mode, Func`2<int, RemoteStreamFlags> selector);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private void AssertAlive();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
