public interface JetBrains.Profiler.Configuration.Argument.IArgument {
    public bool IsRequiredFieldsAssigned { get; }
    public abstract virtual bool get_IsRequiredFieldsAssigned();
}
public interface JetBrains.Profiler.Configuration.Argument.ICommandLineParameterized {
    public string FileName { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string Arguments { get; public set; }
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual string get_WorkingDirectory();
    public abstract virtual void set_WorkingDirectory(string value);
    public abstract virtual string get_Arguments();
    public abstract virtual void set_Arguments(string value);
}
public enum JetBrains.Profiler.Configuration.CoreRegistration : Enum {
    public byte value__;
    public static CoreRegistration Default;
    public static CoreRegistration RegistryFreeArchitecture;
    [ObsoleteAttribute("Use RegistryFreeArchitecture instead")]
[UsedImplicitlyAttribute]
public static CoreRegistration RegistryFreeInstructionSet;
    public static CoreRegistration RegistryFree;
}
public class JetBrains.Profiler.Configuration.DescriptionProperty : object {
    [CanBeNullAttribute]
public string DisplayName;
    [NotNullAttribute]
public String[] DisplayValues;
    public DescriptionPropertyFlags Flags;
    public Guid Id;
    [CanBeNullAttribute]
public object Value;
    public DescriptionProperty(Guid id, object value, DescriptionPropertyFlags flags, string displayName, String[] displayValues);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Configuration.DescriptionPropertyFlags : Enum {
    public byte value__;
    public static DescriptionPropertyFlags Minor;
    public static DescriptionPropertyFlags Significant;
    public static DescriptionPropertyFlags AnywayHide;
    public static DescriptionPropertyFlags AnywayArray;
}
[AttributeUsageAttribute("384")]
public class JetBrains.Profiler.Configuration.HostFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <StringIgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipEquals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    public bool StringIgnoreCase { get; public set; }
    public bool SkipEquals { get; public set; }
    public bool Ignore { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_StringIgnoreCase();
    [CompilerGeneratedAttribute]
public void set_StringIgnoreCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipEquals();
    [CompilerGeneratedAttribute]
public void set_SkipEquals(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
}
public interface JetBrains.Profiler.Configuration.HostParameters.IHostParameters {
    public CoreConfiguration ToolsConfiguration { get; public set; }
    public abstract virtual CoreConfiguration get_ToolsConfiguration();
    public abstract virtual void set_ToolsConfiguration(CoreConfiguration value);
}
public interface JetBrains.Profiler.Configuration.HostParameters.ILocalHostParameters {
}
public interface JetBrains.Profiler.Configuration.HostParameters.IRemoteHostParameters {
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Configuration.HostXmlUtil : object {
    public static string TagConfiguration;
    public static string TagArgument;
    public static string TagCoreOptions;
    public static string TagHostOptions;
    public static string TagHostParameters;
    public static string TagInfo;
    [NotNullAttribute]
private static string ToString(XmlDocument document);
    [NotNullAttribute]
public static T[] ReadArrayFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string name, string itemName);
    [NotNullAttribute]
public static T[] ReadArrayFromXml_SkipFailed(IHostXmlResurrector hostXmlResurrector, XmlElement element, string name, string itemName);
    public static void WriteArrayToXml(XmlElement element, IEnumerable`1<T> enumerable, string name, string itemName);
    [CanBeNullAttribute]
public static TClass ReadFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    public static void WriteToXml(XmlElement element, TClass data, string tagName);
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToXmlString(IHostParameters hostParameters);
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToXmlString(IArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToXmlString(IInfo info);
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToXmlString(ProfileConfiguration profileConfiguration);
    [NotNullAttribute]
public static ProfileConfiguration CreateProfileConfiguration(string xmlString, IHostXmlResurrector hostXmlResurrector);
    [ExtensionAttribute]
[NotNullAttribute]
public static XmlDocument ToXmlDocument(ProfileConfiguration profileConfiguration);
    public static void FromXmlString(string xmlConfig, Action`1<XmlElement> action);
    public static void WriteArgumentToXml(XmlElement element, IArgument t, string tagName);
    public static void WriteInfoToXml(XmlElement element, IInfo t, string tagName);
    public static void WriteHostParametersToXml(XmlElement element, IHostParameters t, string tagName);
    public static void WriteCoreOptionsToXml(XmlElement element, ICoreOptions t, string tagName);
    public static void WriteHostOptionsToXml(XmlElement element, IHostOptions t, string tagName);
    [CanBeNullAttribute]
public static IArgument ReadArgumentFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CanBeNullAttribute]
public static IInfo ReadInfoFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CanBeNullAttribute]
public static IHostParameters ReadHostParametersFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CanBeNullAttribute]
public static ICoreOptions ReadCoreOptionsFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CanBeNullAttribute]
public static IHostOptions ReadHostOptionsFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
}
public interface JetBrains.Profiler.Configuration.IHostXmlExternalizable {
    public abstract virtual void ReadFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element);
    public abstract virtual void WriteToXml(XmlElement element);
}
public interface JetBrains.Profiler.Configuration.IHostXmlResurrector {
    [NotNullAttribute]
public abstract virtual IHostParameters CreateEmptyHostParametersFrom(string name);
    [NotNullAttribute]
public abstract virtual IArgument CreateEmptyArgumentFrom(string name);
    [NotNullAttribute]
public abstract virtual IInfo CreateEmptyInfoFrom(string name);
    [NotNullAttribute]
public abstract virtual ICoreOptions CreateEmptyCoreOptionsFrom(string name);
    [NotNullAttribute]
public abstract virtual IHostOptions CreateEmptyHostOptionsFrom(string name);
}
public interface JetBrains.Profiler.Configuration.IInterface`1 {
}
public interface JetBrains.Profiler.Configuration.Info.IInfo {
}
public interface JetBrains.Profiler.Configuration.Info.IInfoWrite {
    public abstract virtual void WriteToBridge(BinaryWriter writer);
}
[AttributeUsageAttribute("4")]
public class JetBrains.Profiler.Configuration.Info.InfoAttribute : Attribute {
    public Guid Id;
    public InfoAttribute(string guid);
}
public enum JetBrains.Profiler.Configuration.Options.ControlKind : Enum {
    public byte value__;
    public static ControlKind Manual;
    public static ControlKind Api;
    public static ControlKind ApiFirst;
    public static ControlKind RemoteApi;
}
public interface JetBrains.Profiler.Configuration.Options.ICoreOptions {
    public ControlKind ControlKind { get; public set; }
    public string RemoteEndPoint { get; public set; }
    public abstract virtual ControlKind get_ControlKind();
    public abstract virtual void set_ControlKind(ControlKind value);
    public abstract virtual string get_RemoteEndPoint();
    public abstract virtual void set_RemoteEndPoint(string value);
}
public interface JetBrains.Profiler.Configuration.Options.IHostOptions {
    public ReprofileDisableReason ReprofileDisableReason { get; public set; }
    public abstract virtual ReprofileDisableReason get_ReprofileDisableReason();
    public abstract virtual void set_ReprofileDisableReason(ReprofileDisableReason value);
}
public enum JetBrains.Profiler.Configuration.Options.ReprofileDisableReason : Enum {
    public UInt32 value__;
    public static ReprofileDisableReason None;
    public static ReprofileDisableReason LaunchedByReSharperUnitTestRunner;
    public static ReprofileDisableReason ProcessPidIsUnavailable;
}
public class JetBrains.Profiler.Configuration.ProfileConfiguration : object {
    [HostFieldAttribute]
[CanBeNullAttribute]
public IArgument Argument;
    [HostFieldAttribute]
[CanBeNullAttribute]
public IHostParameters HostParameters;
    [HostFieldAttribute]
[CanBeNullAttribute]
public IInfo Info;
    [HostFieldAttribute]
[CanBeNullAttribute]
public ICoreOptions CoreOptions;
    [HostFieldAttribute]
[CanBeNullAttribute]
public IHostOptions HostOptions;
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual ProfileConfiguration Clone();
    public sealed virtual bool Equals(ProfileConfiguration other);
    public sealed virtual void ReadFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ProfileConfiguration left, ProfileConfiguration right);
    public static bool op_Inequality(ProfileConfiguration left, ProfileConfiguration right);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Configuration.ProfileConfigurationExtensions : object {
    [ExtensionAttribute]
public static FileSystemPath CreateProfileConfigurationFile(ProfileConfiguration configuration);
    private static void WriteProfileConfigurationToFile(ProfileConfiguration configuration, FileSystemPath filePath);
}
public class JetBrains.Profiler.Configuration.TitleProperty : object {
    [NotNullAttribute]
public string DisplayValue;
    public TitlePropertyFlags Flags;
    [NotNullAttribute]
public string TooltipValue;
    [NotNullAttribute]
public object Value;
    public TitleProperty(object value, TitlePropertyFlags flags, string displayValue);
    public TitleProperty(object value, TitlePropertyFlags flags, string displayValue, string tooltipValue);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Configuration.TitlePropertyFlags : Enum {
    public byte value__;
    public static TitlePropertyFlags Text;
    public static TitlePropertyFlags FilePath;
}
public static class JetBrains.Profiler.Constants.HostUIConstants : object {
    public static string WindowsServiceIsInSystemGroups;
    public static string WindowsServiceShared;
    public static string SilverlightKillBrowsers;
    public static string KillUsingPortProcess;
    public static string NotAllCoresInstalled;
    public static string OpenUIOpenSnapshotFailed;
    public static string OpenUIOpenSnapshotTimeout;
}
public static class JetBrains.Profiler.Constants.SnapshotConstants : object {
    public static string SnapshotSettingsFileName;
    public static string SnapshotRealtimeChartFileName;
    public static string SnapshotRealtimeSnapshotsFileName;
    public static string SnapshotKeptRawSnapshotExtension;
    public static string SnapshotTempStorageSnapshotSuffix;
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IArgumentFactory")]
[MeansImplicitUseAttribute]
public class JetBrains.Profiler.Factories.ArgumentFactoryAttribute : HostFactoryAttribute {
    public int SequenceIndex;
    public ArgumentFactoryAttribute(int sequenceIndex);
}
public abstract class JetBrains.Profiler.Factories.ArgumentFactoryBase`1 : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileMode <ProfileMode>k__BackingField;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    protected ArgumentFactoryBase`1(string displayName, ProfileMode mode);
    public sealed virtual Type get_RelatedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IArgument CreateEmpty();
    public virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Factories.CoreConfiguration : Enum {
    public byte value__;
    public static CoreConfiguration Release;
    public static CoreConfiguration Debug;
    public static CoreConfiguration Test;
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.ICoreOptionsFactory")]
[MeansImplicitUseAttribute]
public class JetBrains.Profiler.Factories.CoreOptionsFactoryAttribute : HostFactoryAttribute {
}
[FlagsAttribute]
public enum JetBrains.Profiler.Factories.HostCompatibilityOptions : Enum {
    public UInt32 value__;
    public static HostCompatibilityOptions Default;
    public static HostCompatibilityOptions AsAdministrator;
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IHostOptionsFactory")]
[MeansImplicitUseAttribute]
public class JetBrains.Profiler.Factories.HostOptionsFactoryAttribute : HostFactoryAttribute {
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IHostParametersFactory")]
[MeansImplicitUseAttribute]
public class JetBrains.Profiler.Factories.HostParametersFactoryAttribute : HostFactoryAttribute {
    public int SequenceIndex;
    public HostParametersFactoryAttribute(int sequenceIndex);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IHostParametersFactoryGroup")]
[MeansImplicitUseAttribute]
public class JetBrains.Profiler.Factories.HostParametersFactoryGroupAttribute : HostFactoryAttribute {
    public int SequenceIndex;
    public HostParametersFactoryGroupAttribute(int sequenceIndex);
}
public interface JetBrains.Profiler.Factories.IArgumentFactory {
    public ProfileMode ProfileMode { get; }
    public abstract virtual ProfileMode get_ProfileMode();
    [NotNullAttribute]
public abstract virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
}
public interface JetBrains.Profiler.Factories.ICoreOptionsFactory {
}
public interface JetBrains.Profiler.Factories.IFactory`1 {
    [NotNullAttribute]
public Type RelatedType { get; }
    [NotNullAttribute]
public string DisplayName { get; }
    public abstract virtual Type get_RelatedType();
    public abstract virtual string get_DisplayName();
    [NotNullAttribute]
public abstract virtual TInterface CreateEmpty();
}
public interface JetBrains.Profiler.Factories.IHostOptionsFactory {
}
public interface JetBrains.Profiler.Factories.IHostParametersFactory {
    [NotNullAttribute]
public Type CoreOptionsType { get; }
    [NotNullAttribute]
public Type HostOptionsType { get; }
    [NotNullAttribute]
public string Description { get; }
    [NotNullAttribute]
public MessageResult IsActive { get; }
    [CanBeNullAttribute]
public IHostParameters AutoConnectHostParameters { get; }
    public abstract virtual Type get_CoreOptionsType();
    public abstract virtual Type get_HostOptionsType();
    public abstract virtual string get_Description();
    public abstract virtual MessageResult get_IsActive();
    public abstract virtual IHostParameters get_AutoConnectHostParameters();
    [CanBeNullAttribute]
public abstract virtual TFactoryFeatures GetInfoFactoryFeatures(IArgumentFactory argumentFactory);
    [NotNullAttribute]
public abstract virtual IHost CreateHost(Lifetime lifetime, IHostParameters hostParameters);
    [NotNullAttribute]
public abstract virtual IHostParameters UpdateDisplayFields(IHostParameters hostParameters);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IHostParameters obj);
}
public interface JetBrains.Profiler.Factories.IHostParametersFactoryGroup {
    [NotNullAttribute]
public Type[] RelatedTypes { get; }
    public abstract virtual Type[] get_RelatedTypes();
}
public interface JetBrains.Profiler.Factories.IInfoFactory {
    public HostBridgeType HostBridgeType { get; }
    public abstract virtual HostBridgeType get_HostBridgeType();
    [NotNullAttribute]
public abstract virtual string GetProfiler(IInfo info, CoreConfiguration configuration);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfo info);
    [NotNullAttribute]
public abstract virtual MessageResult IsCompatible(IHostParametersFactory factory, IArgumentFactory argumentFactory);
    [NotNullAttribute]
public abstract virtual MessageResult IsCompatible(IHost host, IArgumentFactory argumentFactory);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IInfoFactory")]
[MeansImplicitUseAttribute]
public class JetBrains.Profiler.Factories.InfoFactoryAttribute : HostFactoryAttribute {
    public int SequenceIndex;
    public InfoFactoryAttribute(int sequenceIndex);
}
public interface JetBrains.Profiler.Factories.IProcessToAttachFilter {
    public abstract virtual bool Filter(ProcessInfo processInfo);
}
public enum JetBrains.Profiler.Factories.ProfileMode : Enum {
    public byte value__;
    public static ProfileMode StartProcess;
    public static ProfileMode AttachToProcess;
}
public class JetBrains.Profiler.FactoryNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [NotNullAttribute]
public string TypeName { get; private set; }
    [CanBeNullAttribute]
public Type Type { get; private set; }
    public FactoryNotFoundException(string message, string typeName);
    public FactoryNotFoundException(string message, Type type);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
}
public interface JetBrains.Profiler.Features.IArgumentFeatures {
    public abstract virtual MessageResult IsSupported(T what, HostCompatibilityOptions options);
}
public interface JetBrains.Profiler.Features.IFactoryFeatures {
}
public interface JetBrains.Profiler.Features.IInfoFactoryFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsProfileSupported(IInfo info);
    [NotNullAttribute]
public abstract virtual MessageResult IsDetachSupported(IInfo info);
}
public interface JetBrains.Profiler.Features.IInfoFeatures`2 {
    [NotNullAttribute]
public TClass Default { get; }
    [NotNullAttribute]
public TFactoryFeature FactoryFeatures { get; }
    public abstract virtual TClass get_Default();
    public abstract virtual TFactoryFeature get_FactoryFeatures();
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.CopyFileMode : Enum {
    public UInt32 value__;
    public static CopyFileMode None;
    public static CopyFileMode Overwrite;
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.HostCleanUpFlags : Enum {
    public byte value__;
    public static HostCleanUpFlags Regsitry;
    public static HostCleanUpFlags TempFolders;
    public static HostCleanUpFlags TransparentIntegration;
    public static HostCleanUpFlags All;
}
public enum JetBrains.Profiler.Host.HostElevationMode : Enum {
    public byte value__;
    public static HostElevationMode Default;
    public static HostElevationMode Full;
    public static HostElevationMode Limited;
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IFactory`1")]
[MeansImplicitUseAttribute]
public abstract class JetBrains.Profiler.Host.HostFactoryAttribute : ComponentAttribute {
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Host.HostUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IHost CreateHost(IHostParameters hostParameters, Lifetime lifetime, IHostManager hostManager);
}
public interface JetBrains.Profiler.Host.IHost {
    [CanBeNullAttribute]
public ISystemHost Local { get; }
    [NotNullAttribute]
public IHostParameters HostParameters { get; }
    public bool AcceptLocalFileSystem { get; }
    [NotNullAttribute]
public CoreRegistration[] SupportedAdditionalCoreRegistrations { get; }
    public abstract virtual ISystemHost get_Local();
    public abstract virtual IHostParameters get_HostParameters();
    public abstract virtual bool get_AcceptLocalFileSystem();
    public abstract virtual CoreRegistration[] get_SupportedAdditionalCoreRegistrations();
    [CanBeNullAttribute]
public abstract virtual IArgumentFeatures GetArgumentFeatures();
    [CanBeNullAttribute]
public abstract virtual TFeatures GetInfoFeatures(IArgumentFactory argumentFactory);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ProcessInfo> GetProcessesToAttach(bool includeNative);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IISExpressInfo> GetIISExpresses();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IISSiteInfo> GetIISExpressSites(string configurationFile);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<WcfHostInfo> GetWcfHosts();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<PackageInfo> GetMetroPackages();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<MonoInfo> GetMonoRuntimes();
    [NotNullAttribute]
public abstract virtual IArgument UpdateDisplayFields(IArgument argument);
    [NotNullAttribute]
public abstract virtual IHostProfileSubscription Profile(Lifetime lifetime, IArgument argument, IInfo info, ICoreOptions coreOptions, IHostOptions hostOptions);
    public abstract virtual void CleanUp(IProgressIndicator progress, HostCleanUpFlags hostCleanUpFlags);
}
public interface JetBrains.Profiler.Host.IHostBrowser {
    [NotNullAttribute]
public abstract virtual string GetDefaultInternetBrowser();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<InternetBrowserInfo> GetInternetBrowsers();
}
public interface JetBrains.Profiler.Host.IHostDirectory {
    [NotNullAttribute]
public abstract virtual string CreateGlobalTempDirectory(Lifetime lifetime, string prefix);
    [NotNullAttribute]
public abstract virtual string CreateUserTempDirectory(Lifetime lifetime, string prefix);
    public abstract virtual bool ExistsDirectory(string remotePath);
    public abstract virtual void CreateDirectory(string remotePath);
    public abstract virtual void DeleteDirectory(string remotePath);
    [NotNullAttribute]
public abstract virtual String[] GetChildDirectories(string remotePath, string searchPattern);
    [NotNullAttribute]
public abstract virtual String[] GetChildFiles(string remotePath, string searchPattern);
}
public interface JetBrains.Profiler.Host.IHostEnvironment {
    [NotNullAttribute]
public OperatingSystem OSVersion { get; }
    public JetPlatform RuntimePlatform { get; }
    public bool IsElevatedProcess { get; }
    public bool IsNetCoreInstalled { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<JetArchitecture> Architectures { get; }
    public abstract virtual OperatingSystem get_OSVersion();
    public abstract virtual JetPlatform get_RuntimePlatform();
    public abstract virtual bool get_IsElevatedProcess();
    public abstract virtual bool get_IsNetCoreInstalled();
    public abstract virtual IReadOnlyCollection`1<JetArchitecture> get_Architectures();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<Version> GetInstalledRuntimeVersions(JetArchitecture architecture);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<Version> GetInstalledFrameworkVersions(JetArchitecture architecture, Version runtimeVersion);
    [NotNullAttribute]
public abstract virtual string GetRuntimeDirectory(JetArchitecture architecture, Version runtimeVersion);
    [NotNullAttribute]
public abstract virtual string GetFolderPath(Nullable`1<JetArchitecture> architecture, SpecialFolder specialFolder);
    [NotNullAttribute]
public abstract virtual string Expand(Nullable`1<JetArchitecture> architecture, string str);
    [NotNullAttribute]
public abstract virtual string GetSymbolPaths();
}
public interface JetBrains.Profiler.Host.IHostFile {
    [NotNullAttribute]
public abstract virtual string CreateGlobalTempFile(Lifetime lifetime, string prefix);
    [NotNullAttribute]
public abstract virtual string CreateUserTempFile(Lifetime lifetime, string prefix);
    public abstract virtual long GetFileLength(string remoteFile);
    public abstract virtual bool ExistsFile(string remoteFile);
    public abstract virtual void PutFile(IProgressIndicator progress, string localFile, string remoteFile);
    public abstract virtual void GetFile(IProgressIndicator progress, string localFile, string remoteFile);
    public abstract virtual void DeleteFile(string remoteFile);
    public abstract virtual void CopyFile(IProgressIndicator progress, string remoteSourceFile, string remoteDestinationFile, CopyFileMode mode);
    public abstract virtual void MoveFile(IProgressIndicator progress, string remoteSourceFile, string remoteDestinationFile, MoveFileMode mode);
}
public interface JetBrains.Profiler.Host.IHostService {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<WindowsServiceInfo> GetServices();
}
public class JetBrains.Profiler.Host.IISBindingInfo : object {
    [NotNullAttribute]
public string Host;
    [CanBeNullAttribute]
public IPAddress IPAddress;
    public ushort Port;
    [NotNullAttribute]
public string Protocol;
    private static string SerNameProtocol;
    private static string SerNameHost;
    private static string SerNamePort;
    private static string SerNameIPAddress;
    public IISBindingInfo(string protocol, string host, ushort port, IPAddress ipAddress);
    protected IISBindingInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.IISExpressInfo : object {
    [NotNullAttribute]
public string Executable;
    public JetArchitecture Architecture;
    [NotNullAttribute]
public Version2 ToolVersion;
    private static string SerNamePath;
    private static string SerNameToolVersion;
    private static string SerNameArchitecture;
    public IISExpressInfo(JetArchitecture architecture, Version2 toolVersion, string executable);
    protected IISExpressInfo(SerializationInfo info, StreamingContext context);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.IISSiteInfo : object {
    [NotNullAttribute]
public IISBindingInfo[] Bindings;
    public UInt32 Id;
    [NotNullAttribute]
public string Name;
    private static string SerNameName;
    private static string SerNameId;
    private static string SerNameBindings;
    public IISSiteInfo(string name, UInt32 id, IISBindingInfo[] bindings);
    protected IISSiteInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.InternetBrowserFlags : Enum {
    public UInt32 value__;
    public static InternetBrowserFlags None;
    public static InternetBrowserFlags SupportSilverlight;
}
public class JetBrains.Profiler.Host.InternetBrowserInfo : object {
    [NotNullAttribute]
public string Browser;
    [NotNullAttribute]
public string DisplayBrowser;
    public InternetBrowserFlags Flags;
    public InternetBrowserInfo(string browser, string displayBrowser, InternetBrowserFlags flags);
    public virtual string ToString();
}
public interface JetBrains.Profiler.Host.ISystemHost {
    [NotNullAttribute]
public IProperty`1<bool> HasCommunicationError { get; }
    public abstract virtual IProperty`1<bool> get_HasCommunicationError();
}
public class JetBrains.Profiler.Host.MonoInfo : object {
    [NotNullAttribute]
public string Executable;
    public JetArchitecture Architecture;
    [NotNullAttribute]
public Version RuntimeVersion;
    private static string SerNamePath;
    private static string SerNameRuntimeVersion;
    private static string SerNameArchitecture;
    public MonoInfo(JetArchitecture architecture, Version runtimeVersion, string executable);
    protected MonoInfo(SerializationInfo info, StreamingContext context);
    [LocalizableAttribute("False")]
public virtual string ToString();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.MoveFileMode : Enum {
    public UInt32 value__;
    public static MoveFileMode None;
    public static MoveFileMode Overwrite;
    public static MoveFileMode ResetPermissions;
    public static MoveFileMode Modifiable;
}
public class JetBrains.Profiler.Host.PackageInfo : object {
    [NotNullAttribute]
public ApplicationInfo[] Applications;
    public ProcessorArchitecture Architecture;
    [NotNullAttribute]
public string DisplayName;
    [NotNullAttribute]
public string FamilyName;
    [NotNullAttribute]
public string FullName;
    [NotNullAttribute]
public string InstalledLocation;
    public bool IsFramework;
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Publisher;
    [NotNullAttribute]
public string PublisherDisplayName;
    [NotNullAttribute]
public string PublisherId;
    [NotNullAttribute]
public Version Version;
    private static string SerNameDisplayName;
    private static string SerNamePublisherDisplayName;
    private static string SerNameName;
    private static string SerNameFamilyName;
    private static string SerNameFullName;
    private static string SerNameIsFramework;
    private static string SerNameVersion;
    private static string SerNameArchitecture;
    private static string SerNamePublisher;
    private static string SerNamePublisherId;
    private static string SerNameInstalledLocation;
    private static string SerNameApplications;
    public PackageInfo(string displayName, string publisherDisplayName, bool isFramework, string name, string familyName, string fullName, Version version, ProcessorArchitecture architecture, string publisher, string publisherId, string installedLocation, ApplicationInfo[] applications);
    protected PackageInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.ProcessInfo : object {
    public JetArchitecture Architecture;
    [NotNullAttribute]
public string CommandLine;
    [NotNullAttribute]
public string Executable;
    [NotNullAttribute]
public string ExecutableName;
    [NotNullAttribute]
public string MainWindowTitle;
    [NotNullAttribute]
public string PackageFullName;
    public int ProcessId;
    [NotNullAttribute]
public string ProcessName;
    [NotNullAttribute]
public RuntimeInfo[] Runtimes;
    [CanBeNullAttribute]
public UserInfo UserInfo;
    public ProcessInfoFlags Flags;
    private static string SerNameUserInfo;
    private static string SerNameExecutableName;
    private static string SerNameProcessName;
    private static string SerNameExecutable;
    private static string SerNameCommandLine;
    private static string SerNameArchitecture;
    private static string SerNameMainWindowTitle;
    private static string SerNameProcessId;
    private static string SerNameRuntimesCount;
    private static string SerNameFlags;
    private static string SerNameRuntimes;
    public ProcessInfo(int processId, JetArchitecture architecture, UserInfo userInfo, string executableName, string processName, string packageFullName, string executable, string commandLine, string mainWindowTitle, ProcessInfoFlags flags, RuntimeInfo[] runtimes);
    protected ProcessInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.ProcessInfoFlags : Enum {
    public UInt32 value__;
    public static ProcessInfoFlags None;
    public static ProcessInfoFlags PerServiceSid;
    public static ProcessInfoFlags WriteRestricted;
}
public class JetBrains.Profiler.Host.ProfileeProcessInfo : object {
    public JetArchitecture Architecture;
    [NotNullAttribute]
public string Executable;
    public bool IsFirstProcess;
    public int ProcessId;
    [NotNullAttribute]
public string UserName;
    [NotNullAttribute]
public string CommandLine;
    [NotNullAttribute]
public RuntimeInfo Runtime;
    public ProfileeProcessInfo(int processId, bool isFirstProcess, RuntimeInfo runtimeInfo, JetArchitecture architecture, string userName, string executable, string commandLine);
}
public class JetBrains.Profiler.Host.RuntimeInfo : object {
    public RuntimeType Type;
    public Version Version;
    private static string SerNameType;
    private static string SerNameVersion;
    public RuntimeInfo(RuntimeType type, Version version);
    private RuntimeInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual int CompareTo(RuntimeInfo other);
    public sealed virtual bool Equals(RuntimeInfo other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Host.RuntimeInfoEx : object {
    [ExtensionAttribute]
public static string ToPresentableString(RuntimeInfo source);
    private static string PresentRuntimeType(RuntimeType source);
}
public enum JetBrains.Profiler.Host.RuntimeType : Enum {
    public byte value__;
    public static RuntimeType Unknown;
    public static RuntimeType Clr;
    public static RuntimeType CoreClr;
    public static RuntimeType Silverlight;
    public static RuntimeType Mono;
}
public class JetBrains.Profiler.Host.UserInfo : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Sid;
    public UserInfo(string name, string sid);
}
public class JetBrains.Profiler.Host.WcfHostInfo : object {
    [NotNullAttribute]
public string Executable;
    [NotNullAttribute]
public Version2 RuntimeVersion;
    [NotNullAttribute]
public string VsInstanceId;
    [NotNullAttribute]
public Version2 VsVersion;
    private static string SerNamePath;
    private static string SerNameRuntimeVersion;
    private static string SerNameVsVersion;
    private static string SerNameVsInstanceId;
    public WcfHostInfo(Version2 runtimeVersion, Version2 vsVersion, string vsInstanceId, string executable);
    protected WcfHostInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.WindowsServiceInfo : object {
    [NotNullAttribute]
public string DisplayServiceName;
    [NotNullAttribute]
public string ServiceName;
    public WindowsServiceInfo(string serviceName, string displayServiceName);
}
public class JetBrains.Profiler.Identities.CoreIdentity : object {
    public Guid CoreGuid;
    public Guid ProcessGuid;
    private CoreIdentity JetBrains.Profiler.Identities.IIdentity.CoreIdentity { get; }
    private SnapshotIdentity JetBrains.Profiler.Identities.IIdentity.SnapshotIdentity { get; }
    public CoreIdentity(Guid processGuid, Guid coreGuid);
    public sealed virtual bool Equals(CoreIdentity other);
    private sealed virtual override CoreIdentity JetBrains.Profiler.Identities.IIdentity.get_CoreIdentity();
    private sealed virtual override SnapshotIdentity JetBrains.Profiler.Identities.IIdentity.get_SnapshotIdentity();
    public sealed virtual bool Equals(IIdentity other);
    [LocalizableAttribute("False")]
public string ToLog();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Identities.IdentityUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToLog(IIdentity identity);
}
public interface JetBrains.Profiler.Identities.IIdentity {
    [NotNullAttribute]
public CoreIdentity CoreIdentity { get; }
    [CanBeNullAttribute]
public SnapshotIdentity SnapshotIdentity { get; }
    public abstract virtual CoreIdentity get_CoreIdentity();
    public abstract virtual SnapshotIdentity get_SnapshotIdentity();
}
public class JetBrains.Profiler.Identities.SnapshotIdentity : object {
    public CoreIdentity CoreIdentity;
    public Guid SequenceGuid;
    public UInt32 SequenceIndex;
    public Guid SnapshotGuid;
    private CoreIdentity JetBrains.Profiler.Identities.IIdentity.CoreIdentity { get; }
    private SnapshotIdentity JetBrains.Profiler.Identities.IIdentity.SnapshotIdentity { get; }
    public SnapshotIdentity(CoreIdentity coreIdentity, Guid sequenceGuid, UInt32 sequenceIndex, Guid snapshotGuid);
    public sealed virtual bool Equals(SnapshotIdentity other);
    private sealed virtual override CoreIdentity JetBrains.Profiler.Identities.IIdentity.get_CoreIdentity();
    private sealed virtual override SnapshotIdentity JetBrains.Profiler.Identities.IIdentity.get_SnapshotIdentity();
    public sealed virtual bool Equals(IIdentity other);
    [LocalizableAttribute("False")]
public string ToLog();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public interface JetBrains.Profiler.IHostManager {
    [NotNullAttribute]
public IEnumerable`1<IHostParametersFactory> HostParametersFactories { get; }
    [NotNullAttribute]
public IEnumerable`1<IArgumentFactory> ArgumentFactories { get; }
    [NotNullAttribute]
public IEnumerable`1<IInfoFactory> InfoFactories { get; }
    public abstract virtual IEnumerable`1<IHostParametersFactory> get_HostParametersFactories();
    public abstract virtual IEnumerable`1<IArgumentFactory> get_ArgumentFactories();
    public abstract virtual IEnumerable`1<IInfoFactory> get_InfoFactories();
    [NotNullAttribute]
public abstract virtual IArgumentFactory GetArgumentFactory(Type type);
    [NotNullAttribute]
public abstract virtual IInfoFactory GetInfoFactory(Type type);
    [NotNullAttribute]
public abstract virtual IHostParametersFactory GetHostParametersFactory(Type type);
    [NotNullAttribute]
public abstract virtual ICoreOptionsFactory GetCoreOptionsFactory(Type type);
    [NotNullAttribute]
public abstract virtual IHostOptionsFactory GetHostOptionsFactory(Type type);
    [NotNullAttribute]
public abstract virtual IHostParametersFactoryGroup GetHostParametersFactoryGroup(Type type);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
internal class JetBrains.Profiler.Impl.HostManager : HostManagerBase {
    public HostManager(Lifetime lifetime, NestedComponentContainerDefaultByPartAttribute`2<HostFactoryAttribute, ShellPartCatalogSet> container);
}
public abstract class JetBrains.Profiler.Impl.HostManagerBase : object {
    private IList`1<IArgumentFactory> myArgumentFactories;
    private IList`1<ICoreOptionsFactory> myCoreOptionsFactories;
    private IList`1<IHostOptionsFactory> myHostOptionsFactories;
    private IList`1<IHostParametersFactory> myHostParametersFactories;
    private IList`1<IHostParametersFactoryGroup> myHostParametersFactoryGroups;
    private IList`1<IInfoFactory> myInfoFactories;
    public IEnumerable`1<IHostParametersFactory> HostParametersFactories { get; }
    public IEnumerable`1<IArgumentFactory> ArgumentFactories { get; }
    public IEnumerable`1<IInfoFactory> InfoFactories { get; }
    public sealed virtual IEnumerable`1<IHostParametersFactory> get_HostParametersFactories();
    public sealed virtual IEnumerable`1<IArgumentFactory> get_ArgumentFactories();
    public sealed virtual IEnumerable`1<IInfoFactory> get_InfoFactories();
    public sealed virtual IArgumentFactory GetArgumentFactory(Type td);
    public sealed virtual IInfoFactory GetInfoFactory(Type td);
    public sealed virtual IHostParametersFactory GetHostParametersFactory(Type type);
    public sealed virtual ICoreOptionsFactory GetCoreOptionsFactory(Type type);
    public sealed virtual IHostOptionsFactory GetHostOptionsFactory(Type type);
    public sealed virtual IHostParametersFactoryGroup GetHostParametersFactoryGroup(Type type);
    public sealed virtual IArgument CreateEmptyArgumentFrom(string name);
    public sealed virtual IInfo CreateEmptyInfoFrom(string name);
    public sealed virtual IHostParameters CreateEmptyHostParametersFrom(string name);
    public sealed virtual ICoreOptions CreateEmptyCoreOptionsFrom(string name);
    public sealed virtual IHostOptions CreateEmptyHostOptionsFrom(string name);
    protected void SetArgumentFactories(IEnumerable`1<IArgumentFactory> factories);
    protected void SetArgumentFactoriesStable(IEnumerable`1<IArgumentFactory> factories);
    protected void SetInfoFactories(IEnumerable`1<IInfoFactory> factories);
    protected void SetInfoFactoriesStable(IEnumerable`1<IInfoFactory> factories);
    protected void SetHostParametersFactories(IEnumerable`1<IHostParametersFactory> factories);
    protected void SetHostParametersFactoryGroups(IEnumerable`1<IHostParametersFactoryGroup> factoryGroups);
    protected void SetCoreOptionsFactories(IEnumerable`1<ICoreOptionsFactory> factories);
    protected void SetHostOptionsFactories(IEnumerable`1<IHostOptionsFactory> factories);
    private static void CheckCollisions(IList`1<TFactory> factories);
    private static void CheckCollisions(IEnumerable`1<IHostParametersFactoryGroup> factoryGroups);
    private static void SortList(IList`1<T> list, Comparison`1<TAttribute> comparer);
    private static IFactory`1<T> FindByType(IEnumerable`1<IFactory`1<T>> list, Type td, string expectedBase);
    private static IFactory`1<T> FindByName(IEnumerable`1<IFactory`1<T>> list, string typeName);
}
public interface JetBrains.Profiler.Launcher.IProfilingLauncher {
    public abstract virtual void Profile(ProfileConfiguration configuration);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Launcher.LauncherController : object {
    private static ILogger ourLogger;
    private static LauncherController();
    [ExtensionAttribute]
[NotNullAttribute]
public static IHostProfile RunProfiler(ProfileConfiguration configuration, Lifetime lifetime, IHostManager hostManager, IProgressIndicator connectingProgress, Func`2<IHostProfileSubscription, Pair`2<IProgressIndicator, IHostUI>> eventSubscriptionCallback);
    private static TResult Rethrow(Func`1<string> failMessage, Func`1<TResult> func);
    private static void CheckMessageResult(MessageResult argumentResult);
}
public class JetBrains.Profiler.Launcher.LauncherException : Exception {
    public LauncherException(string message);
    public LauncherException(string message, Exception innerException);
}
public class JetBrains.Profiler.Launcher.NoHostUI : object {
    public static IHostUI Instance;
    private static NoHostUI();
    public sealed virtual bool ShowYesNo(string id, string message, bool defaultButton);
}
public class JetBrains.Profiler.MessageResult : object {
    public static MessageResult Success;
    public static MessageResult UnnamedFail;
    public string Message;
    public bool IsSuccess { get; }
    public bool IsFail { get; }
    public bool IsUnnamedFail { get; }
    public bool IsNamedFail { get; }
    [NotNullAttribute]
public string MessageWithoutUrl { get; }
    public MessageResult(string message);
    private static MessageResult();
    public bool get_IsSuccess();
    public bool get_IsFail();
    public bool get_IsUnnamedFail();
    public bool get_IsNamedFail();
    public string get_MessageWithoutUrl();
    private bool Equals(MessageResult other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.OperationUtil : object {
    public static void Walk(IHostDirectory directory, string topPath, Func`2<string, bool> doDirectory, Action`1<string> doFile);
    public static void CleanUpTemp(IHost host, string path);
    [ExtensionAttribute]
public static void PutFolder(IHost host, string localPath, string remotePath);
    [ExtensionAttribute]
public static void PutFolder(IHost host, string localPath, string remotePath, Func`2<string, bool> directoryFilter, Func`2<string, bool> fileFilter);
    [ExtensionAttribute]
public static void GetFolder(IHost host, string localPath, string remotePath);
    [ExtensionAttribute]
public static void GetFolder(IHost host, string localPath, string remotePath, Func`2<string, bool> directoryFilter, Func`2<string, bool> fileFilter);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Options.FindProcessExtension : object {
    private static ILogger ourLogger;
    private static FindProcessExtension();
    [ExtensionAttribute]
public static ProcessInfo FindProcessByPid(PidProcessSpec pidSpec, IHost host);
    [ExtensionAttribute]
public static ProcessInfo FindProcessByPid(PidProcessSpec pidSpec, IEnumerable`1<ProcessInfo> allProcesses);
    [ExtensionAttribute]
public static IEnumerable`1<ProcessInfo> FindProcessesByName(NameProcessSpec nameSpec, IHost host, Nullable`1<int> pidToExclude);
    [ExtensionAttribute]
public static IEnumerable`1<ProcessInfo> FindProcessesByName(NameProcessSpec nameSpec, IEnumerable`1<ProcessInfo> allProcesses, Nullable`1<int> pidToExclude);
    [ExtensionAttribute]
private static IEnumerable`1<ProcessInfo> WithMaxMemory(IEnumerable`1<ProcessInfo> processes, double threshold);
}
public interface JetBrains.Profiler.Options.ProcessFilter.IProcessSpec {
    public abstract virtual string GetIdentity();
}
[ImplicitGroupDefinitionAttribute("<name-spec>")]
public class JetBrains.Profiler.Options.ProcessFilter.NameProcessSpec : object {
    [StringOptionAttribute("1", "<process-name>")]
public string ProcessName;
    [BoolOptionAttribute("with-max-mem", "M")]
[WindowsOptionFilterAttribute]
public bool WithMaxMemory;
    public NameProcessSpec(string processName, bool withMaxMemory);
    public sealed virtual string GetIdentity();
}
[ImplicitGroupDefinitionAttribute("<pid-spec>")]
public class JetBrains.Profiler.Options.ProcessFilter.PidProcessSpec : object {
    [IntOptionAttribute("1", "<pid>")]
public int ProcessId;
    public PidProcessSpec(int processId);
    [LocalizableAttribute("False")]
public sealed virtual string GetIdentity();
}
public class JetBrains.Profiler.Profile.AlertEventArgs : EventArgs {
    public DateTime DateTime;
    public HResults HResult;
    [CanBeNullAttribute]
public IIdentity Identity;
    [NotNullAttribute]
public string Message;
    public AlertSeverity Severity;
    private AlertEventArgs(AlertSeverity severity, HResults hr, string message, IIdentity identity, Nullable`1<DateTime> date);
    [NotNullAttribute]
public static AlertEventArgs CreateAutonomic(AlertSeverity severity, HResults hr, string message);
    [NotNullAttribute]
public static AlertEventArgs CreateCoreBound(AlertSeverity severity, HResults hr, string message, CoreIdentity coreIdentity);
    [NotNullAttribute]
public static AlertEventArgs CreateSnapshotBound(AlertSeverity severity, HResults hr, string message, SnapshotIdentity snapshotIdentity);
    [NotNullAttribute]
public static AlertEventArgs CreateWithNewMessage(AlertEventArgs sourceMessage, string newMessage);
}
public enum JetBrains.Profiler.Profile.AlertSeverity : Enum {
    public byte value__;
    public static AlertSeverity Warning;
    public static AlertSeverity Error;
}
public abstract class JetBrains.Profiler.Profile.BaseProgressStatus : object {
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Progress>k__BackingField;
    [NotNullAttribute]
public string OperationName { get; }
    public double Progress { get; }
    protected BaseProgressStatus(double progress, string operationName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OperationName();
    [CompilerGeneratedAttribute]
public sealed virtual double get_Progress();
    [LocalizableAttribute("False")]
public virtual string ToLog();
}
public abstract class JetBrains.Profiler.Profile.Bridge.BaseBridge : object {
    [NotNullAttribute]
protected string LoggerId;
    [NotNullAttribute]
protected ILogger Logger;
    private static ReadonlyToken ourReadonlyToken;
    public ISignal`1<ConnectingEventArgs> Connecting;
    public ICollectionEvents`1<ICoreHostProfile> Connections;
    public ISignal`1<AlertEventArgs> Alert;
    private BaseBridgeParam myParam;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myBlockSubscription;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsActive;
    public HostBridgeType HostBridgeType { get; }
    protected BaseBridge(BaseBridgeParam param);
    private static BaseBridge();
    public HostBridgeType get_HostBridgeType();
    protected void FireAlert(AlertEventArgs args);
    public void Activate();
    public void Deactivate();
    public void BlockSubscription();
    private bool ThrowIfNeed(Action`1<TValue> action);
    public abstract virtual void Start();
    protected abstract virtual void Stop();
}
public class JetBrains.Profiler.Profile.Bridge.BaseBridgeParam : object {
    [NotNullAttribute]
public BridgeConnectionParam ConnectionParam;
    public HostBridgeType HostBridgeType;
    public Lifetime Lifetime;
    [NotNullAttribute]
public string ParentLoggerId;
    public BaseBridgeParam(Lifetime lifetime, string parentLoggerId, HostBridgeType hostBridgeType, BridgeConnectionParam connectionParam);
}
public class JetBrains.Profiler.Profile.Bridge.BridgeConnectionParam : object {
    [NotNullAttribute]
public IEnumerable`1<CleanBridgeEnvironment> CleanBridgeEnvironmentVariables;
    public ControlKind ControlKind;
    [NotNullAttribute]
public IHostManager HostManager;
    [NotNullAttribute]
public IInfo Info;
    [CanBeNullAttribute]
public Action`1<int> Kill;
    public UInt32 MemoryThresholdInMb;
    [CanBeNullAttribute]
public string PdbServerId;
    public bool PossibleDetach;
    [NotNullAttribute]
public ISessionFilesManager SessionFilesManager;
    [NotNullAttribute]
public Func`2<HResults, string> TryGetMessageForHr;
    [NotNullAttribute]
public string XmlConfig;
    public BridgeConnectionParam(IHostManager hostManager, ISessionFilesManager sessionFilesManager, string pdbServerId, ControlKind controlKind, IInfo info, string xmlConfig, IEnumerable`1<CleanBridgeEnvironment> cleanBridgeEnvironmentVariables, UInt32 memoryThresholdInMb, Action`1<int> kill, bool possibleDetach, Func`2<HResults, string> tryGetMessageForHr);
}
public class JetBrains.Profiler.Profile.Bridge.CleanBridgeEnvironment : object {
    [NotNullAttribute]
public string Key;
    public bool StartedWith;
    public CleanBridgeEnvironment(string key, bool startedWith);
}
public class JetBrains.Profiler.Profile.Bridge.CoreDirs : object {
    [CanBeNullAttribute]
public FileSystemPath DiagnosticsDir;
    [CanBeNullAttribute]
public FileSystemPath TemporaryDir;
    [CanBeNullAttribute]
public FileSystemPath SnapshotsDir;
    [CanBeNullAttribute]
public FileSystemPath StreamingDir;
    public CoreDirs(FileSystemPath temporaryDir, FileSystemPath diagnosticsDir, FileSystemPath snapshotsDir, FileSystemPath streamingDir);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
public class JetBrains.Profiler.Profile.Bridge.Downloader : object {
    private static int UnblockLogLocalTimeout;
    private static int UnblockLogRemoteTimeout;
    private static int UnblockLogTestTimeout;
    private static ILogger ourLogger;
    private static ReadonlyToken ourReadonlyToken;
    private static Dictionary`2<LogSource, UInt32> ourIndexes;
    private IAsyncExecutor myExecutor;
    private IHost myHost;
    private bool myIsLocal;
    private bool myIsTest;
    private IAsyncOrderedSequenceQueue`2<Guid, int> myLogQueue;
    private IAsyncOrderedSequenceQueue`2<Guid, int> mySnapshotQueue;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myBlockSubscription;
    private int myId;
    [CompilerGeneratedAttribute]
private ISignal`1<AlertEventArgs> <Alert>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> <LogDone>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<HostOperationEventArgs> <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<HostScopeEventArgs> <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> <SnapshotDone>k__BackingField;
    public ISignal`1<AlertEventArgs> Alert { get; }
    public ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> LogDone { get; }
    public ISignal`1<HostOperationEventArgs> Operation { get; }
    public ISignal`1<HostScopeEventArgs> Scope { get; }
    public ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> SnapshotDone { get; }
    public Downloader(Lifetime lifetime, IThreading threading, IHost host, bool isLocal, bool isTest);
    private static Downloader();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<AlertEventArgs> get_Alert();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> get_LogDone();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<HostOperationEventArgs> get_Operation();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<HostScopeEventArgs> get_Scope();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> get_SnapshotDone();
    public sealed virtual void BlockSubscribtion();
    private sealed virtual override void JetBrains.Profiler.Profile.Bridge.IDownloadRequests.ProcessSnapshot(SnapshotIdentity identity, FileSystemPath localDir, string remoteIndexFile, String[] remoteLocalFiles, Action remoteCleanUp);
    private sealed virtual override void JetBrains.Profiler.Profile.Bridge.IDownloadRequests.ProcessCoreLog(CoreIdentity identity, string remoteLog);
    public sealed virtual void ProcessLog(LogSource logSource, string remoteLog);
    private bool ThrowIfNeed(Action`1<TValue> action);
    private void DoOperation(int id, IIdentity identity, HostOperation hostOperation, Action cancel, Action`1<IProgressIndicator> doAction);
    private static void PassExceptionToFinally(Action action);
    private static bool TryAction(int timeout, Action`1<int> action);
    private void FireScope(int id, IIdentity identity, StartFinish action);
    private void FireOperation(int id, IIdentity identity, StartProgressFinish action, HostOperation hostOperation);
    private void FireProgressOperation(int id, IIdentity identity, HostOperation hostOperation, HostProgressStatus status);
    private void FireSnapshotDone(int id, SnapshotIdentity snapshotIdentity, FileSystemPath localSnapshot);
    private void FireLogDone(int id, IIdentity identity, LogSource logSource, FileSystemPath localLog);
    [NotNullAttribute]
private FileSystemPath DoDownloadSnapshot(int id, SnapshotIdentity identity, Action cancel, FileSystemPath localDir, string remoteIndexFile, String[] remoteDataFiles, Action remoteCleanUp);
    private static void SafeDeleteLocalSnapshot(FileSystemPath localIndexFile);
    [NotNullAttribute]
private static FileSystemPath UnderLog(LogSource logSource, Action`1<FileSystemPath> action);
    [NotNullAttribute]
private FileSystemPath DoDownloadLog(LogSource logSource, int id, IIdentity identity, Action cancel, string remoteLog);
    private static void TrimLog(FileSystemPath localLog);
    private static void SafeDeleteLocalLog(FileSystemPath localLog);
}
public interface JetBrains.Profiler.Profile.Bridge.ICommandProcessor {
    [NotNullAttribute]
public ICoreHostProfile CoreHostProfile { get; }
    public abstract virtual ICoreHostProfile get_CoreHostProfile();
    public abstract virtual void FireAlert(AlertEventArgs args);
    public abstract virtual bool Process(byte answer, BinaryReader reader);
}
public interface JetBrains.Profiler.Profile.Bridge.ICoreFilesManager {
    [NotNullAttribute]
public abstract virtual Tuple`2<SafeFileHandle, FileSystemPath> CreateTemporaryFile();
    [NotNullAttribute]
public abstract virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateDiagnosticFile();
    [NotNullAttribute]
public abstract virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateStreamingFile();
    [NotNullAttribute]
public abstract virtual Tuple`3<Guid, SafeFileHandle, FileSystemPath> CreateSnapshotFile();
    public abstract virtual void DeleteSnapshotFile(Guid id);
    public abstract virtual bool CanStartStreaming();
    [NotNullAttribute]
public abstract virtual Tuple`2<SafeFileHandle, FileSystemPath> TakeStreaming(Guid id);
    public abstract virtual void ProcessSnapshot(SnapshotIdentity snapshotIdentity, Guid indexId, Guid[] dataIds);
    public abstract virtual void ProcessCoreLog(CoreIdentity coreIdentity, string remoteLog);
}
public interface JetBrains.Profiler.Profile.Bridge.IDownloader {
    [NotNullAttribute]
public ISignal`1<AlertEventArgs> Alert { get; }
    [NotNullAttribute]
public ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> LogDone { get; }
    [NotNullAttribute]
public ISignal`1<HostOperationEventArgs> Operation { get; }
    [NotNullAttribute]
public ISignal`1<HostScopeEventArgs> Scope { get; }
    [NotNullAttribute]
public ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> SnapshotDone { get; }
    public abstract virtual ISignal`1<AlertEventArgs> get_Alert();
    public abstract virtual ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> get_LogDone();
    public abstract virtual ISignal`1<HostOperationEventArgs> get_Operation();
    public abstract virtual ISignal`1<HostScopeEventArgs> get_Scope();
    public abstract virtual ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> get_SnapshotDone();
    public abstract virtual void BlockSubscribtion();
}
public interface JetBrains.Profiler.Profile.Bridge.IDownloadRequests {
    public abstract virtual void ProcessSnapshot(SnapshotIdentity snapshotIdentity, FileSystemPath localDir, string remoteIndexFile, String[] remoteLocalFiles, Action remoteCleanUp);
    public abstract virtual void ProcessCoreLog(CoreIdentity coreIdentity, string remoteLog);
    public abstract virtual void ProcessLog(LogSource logSource, string remoteLog);
}
public class JetBrains.Profiler.Profile.Bridge.Impl.AsyncExecutor : object {
    private static ILogger ourLogger;
    private IThreading myThreading;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myStopRequest;
    public AsyncExecutor(Lifetime lifetime, IThreading threading);
    private static AsyncExecutor();
    public sealed virtual void Execute(Action`1<Action> process, Action`1<Exception> failed);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
internal abstract class JetBrains.Profiler.Profile.Bridge.Impl.CommandProcessor : object {
    [NotNullAttribute]
protected ILogger Logger;
    protected static ReadonlyToken ReadonlyToken;
    protected static object StateLock;
    [NotNullAttribute]
protected CommandProcessorParam Param;
    protected bool IsOutprocessProfiler;
    private Nullable`1<CoreCloseWay> myCoreQueuedCloseWay;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myBlockSubscription;
    private OperationInfo myCurrentOperation;
    private bool myEnableDetach;
    private Property`1<bool> snapshotProcessing;
    [CompilerGeneratedAttribute]
private IProperty`1<RuntimeInfo> <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CommandLine>k__BackingField;
    [CanBeNullAttribute]
private Func`1<Tuple`2<SafeFileHandle, FileSystemPath>> myTakeStreamingAction;
    [CompilerGeneratedAttribute]
private ISignal`1<CoreOperationEventArgs> <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<AlertEventArgs> <Alert>k__BackingField;
    public IProperty`1<RuntimeInfo> Runtime { get; }
    public IProperty`1<string> CommandLine { get; }
    public ICoreHostProfile CoreHostProfile { get; }
    public CoreIdentity CoreIdentity { get; }
    public ProfileeProcessInfo ProfileeProcessInfo { get; }
    public ISignal`1<CoreOperationEventArgs> Operation { get; }
    public ISignal`1<AlertEventArgs> Alert { get; }
    public IProperty`1<CoreHostProfileStates> AggregatedState { get; }
    protected CommandProcessor(CommandProcessorParam param);
    private static CommandProcessor();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<RuntimeInfo> get_Runtime();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_CommandLine();
    public sealed virtual ICoreHostProfile get_CoreHostProfile();
    public sealed virtual void FireAlert(AlertEventArgs args);
    public virtual bool Process(byte answer, BinaryReader reader);
    public sealed virtual CoreIdentity get_CoreIdentity();
    public sealed virtual Tuple`2<SafeFileHandle, FileSystemPath> TakeStreaming();
    public sealed virtual ProfileeProcessInfo get_ProfileeProcessInfo();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<CoreOperationEventArgs> get_Operation();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<AlertEventArgs> get_Alert();
    public abstract virtual IProperty`1<CoreHostProfileStates> get_AggregatedState();
    public sealed virtual bool CanClose(CoreCloseWay coreCloseWay);
    public sealed virtual bool Close(CoreCloseWay coreCloseWay);
    public sealed virtual void ThrowException();
    private static void WriteAnonymousHandle(IPacketWriter packetWriter, UInt32 correlationId, Tuple`2<SafeFileHandle, FileSystemPath> handleDescription);
    private static void WriteIdentifiedHandle(IPacketWriter packetWriter, UInt32 correlationId, Tuple`3<Guid, SafeFileHandle, FileSystemPath> handleDescription, bool disposeHandle);
    protected abstract virtual void SwitchToError();
    protected abstract virtual void SwitchToTerminating();
    private bool ThrowIfNeed(Action`1<TValue> action);
    private void FireOperation(StartProgressFinish action, OperationInfo operationInfo);
    private void FireProgressOperation(OperationInfo operationInfo, IProgressStatus status);
    private void ReproduceQueuedClose(bool cancelNeeded);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0(AlertEventArgs x);
    [CompilerGeneratedAttribute]
private void <Close>b__36_0();
    [CompilerGeneratedAttribute]
private void <Close>b__36_1();
    [CompilerGeneratedAttribute]
private void <Close>b__36_2();
    [CompilerGeneratedAttribute]
private void <ThrowException>b__37_0();
    [CompilerGeneratedAttribute]
private void <ReproduceQueuedClose>b__45_0();
    [CompilerGeneratedAttribute]
private void <ReproduceQueuedClose>b__45_3(BinaryWriter writer);
    [CompilerGeneratedAttribute]
private void <ReproduceQueuedClose>b__45_1();
    [CompilerGeneratedAttribute]
private void <ReproduceQueuedClose>b__45_2();
}
public class JetBrains.Profiler.Profile.Bridge.Impl.CommandProcessorParam : object {
    [NotNullAttribute]
public ICoreFilesManager CoreFilesManager;
    [NotNullAttribute]
public CoreIdentity CoreIdentity;
    [NotNullAttribute]
public Action`1<AlertEventArgs> GlobalAlertFire;
    [CanBeNullAttribute]
public Action`1<int> Kill;
    public Lifetime Lifetime;
    [NotNullAttribute]
public string ParentLoggerId;
    [NotNullAttribute]
public IPacketWriter PacketWriter;
    public bool PossibleDetach;
    [NotNullAttribute]
public ProfileeProcessInfo ProfileeProcessInfo;
    [NotNullAttribute]
public Action`1<ICoreHostProfile> ReadyAction;
    [NotNullAttribute]
public Action ThrowRequest;
    [NotNullAttribute]
public Func`2<HResults, string> TryGetMessageForHr;
    [NotNullAttribute]
public Property`1<string> RemoteLogFile;
    public CommandProcessorParam(Lifetime lifetime, string parentLoggerId, ICoreFilesManager coreFilesManager, CoreIdentity coreIdentity, ProfileeProcessInfo profileeProcessInfo, IPacketWriter packetWriter, Action`1<int> kill, bool possibleDetach, Func`2<HResults, string> tryGetMessageForHr, Action throwRequest, Action`1<AlertEventArgs> globalAlert, Action`1<ICoreHostProfile> readyAction, Property`1<string> remoteLogFile);
}
public class JetBrains.Profiler.Profile.Bridge.Impl.HostBridgeDeclarations : object {
    public static Guid BridgeVersion;
    private static HostBridgeDeclarations();
}
public interface JetBrains.Profiler.Profile.Bridge.Impl.IAsyncExecutor {
    public abstract virtual void Execute(Action`1<Action> process, Action`1<Exception> failed);
}
internal class JetBrains.Profiler.Profile.Bridge.Impl.MeasureCommandProcessor : CommandProcessor {
    private IPacketWriter myWriter;
    [CompilerGeneratedAttribute]
private IProperty`1<MeasureCoreHostProfileStates> <MeasureState>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<CoreHostProfileStates> <AggregatedState>k__BackingField;
    public object MeasureStateLock { get; }
    public IProperty`1<MeasureCoreHostProfileStates> MeasureState { get; }
    public IProperty`1<CoreHostProfileStates> AggregatedState { get; }
    public MeasureCommandProcessor(CommandProcessorParam param);
    public sealed virtual object get_MeasureStateLock();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<MeasureCoreHostProfileStates> get_MeasureState();
    [CompilerGeneratedAttribute]
public virtual IProperty`1<CoreHostProfileStates> get_AggregatedState();
    public sealed virtual void Start();
    public sealed virtual void StopDrop();
    public sealed virtual void StopSave();
    public sealed virtual void StopDropStart();
    public sealed virtual void StopSaveStart();
    private static CoreHostProfileStates TranslateState(MeasureCoreHostProfileStates state);
    protected virtual void SwitchToError();
    protected virtual void SwitchToTerminating();
    public virtual bool Process(byte answer, BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(PropertyChangedEventArgs`1<MeasureCoreHostProfileStates> x);
    [CompilerGeneratedAttribute]
private void <Start>b__10_0();
    [CompilerGeneratedAttribute]
private void <StopDrop>b__11_0();
    [CompilerGeneratedAttribute]
private void <StopSave>b__12_0();
    [CompilerGeneratedAttribute]
private void <StopDropStart>b__13_0();
    [CompilerGeneratedAttribute]
private void <StopSaveStart>b__14_0();
}
internal class JetBrains.Profiler.Profile.Bridge.Impl.MemoryCommandProcessor : CommandProcessor {
    private IPacketWriter myWriter;
    [CompilerGeneratedAttribute]
private IProperty`1<CoreHostProfileStates> <AggregatedState>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<CoreHostProfileStates> <MemoryState>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<SwitchCoreHostProfileStates> <AllocationsState>k__BackingField;
    public IProperty`1<CoreHostProfileStates> AggregatedState { get; }
    public IProperty`1<CoreHostProfileStates> MemoryState { get; }
    public IProperty`1<SwitchCoreHostProfileStates> AllocationsState { get; }
    public MemoryCommandProcessor(CommandProcessorParam param);
    [CompilerGeneratedAttribute]
public virtual IProperty`1<CoreHostProfileStates> get_AggregatedState();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<CoreHostProfileStates> get_MemoryState();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<SwitchCoreHostProfileStates> get_AllocationsState();
    public sealed virtual void ForceGc();
    public sealed virtual void Dump();
    public sealed virtual void EnableAllocations();
    public sealed virtual void DisableAllocations();
    private static CoreHostProfileStates TranslateState(SwitchCoreHostProfileStates state);
    private static CoreHostProfileStates AggregateStates(CoreHostProfileStates[] states);
    protected virtual void SwitchToError();
    protected virtual void SwitchToTerminating();
    public virtual bool Process(byte answer, BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <.ctor>g__UpdateState|1_0();
    [CompilerGeneratedAttribute]
private void <ForceGc>b__11_0();
    [CompilerGeneratedAttribute]
private void <Dump>b__12_0();
    [CompilerGeneratedAttribute]
private void <EnableAllocations>b__13_0();
    [CompilerGeneratedAttribute]
private void <DisableAllocations>b__14_0();
}
public static class JetBrains.Profiler.Profile.Bridge.Impl.OperationProgressProcessor : object {
    public static IProgressStatus ReadOperationProgress(BinaryReader reader);
}
public interface JetBrains.Profiler.Profile.Bridge.IPacketReader {
    public abstract virtual void Receive(Action`2<byte, BinaryReader> dataReader);
    public abstract virtual TResult Receive(Func`3<byte, BinaryReader, TResult> dataReader);
}
public interface JetBrains.Profiler.Profile.Bridge.IPacketWriter {
    public abstract virtual void Send(byte command, Action`1<BinaryWriter> writerAction);
}
public interface JetBrains.Profiler.Profile.Bridge.ISessionFilesManager {
    [NotNullAttribute]
public abstract virtual ICoreFilesManager CreateCoreFilesManager(int coreProcessId, CoreDirs coreDirs);
}
public enum JetBrains.Profiler.Profile.Bridge.LogSource : Enum {
    public byte value__;
    public static LogSource Core;
    public static LogSource PdbServer;
    public static LogSource EtwHost;
    public static LogSource EtwCollector;
}
public class JetBrains.Profiler.Profile.ConnectingEventArgs : CancelEventArgs {
    [NotNullAttribute]
public CoreIdentity CoreIdentity;
    [NotNullAttribute]
public ProfileeProcessInfo ProfileeProcessInfo;
    [CompilerGeneratedAttribute]
private CoreDirs <CoreDirs>k__BackingField;
    [CanBeNullAttribute]
public CoreDirs CoreDirs { get; public set; }
    public ConnectingEventArgs(ProfileeProcessInfo profileeProcessInfo, CoreIdentity coreIdentity);
    [CompilerGeneratedAttribute]
public CoreDirs get_CoreDirs();
    [CompilerGeneratedAttribute]
public void set_CoreDirs(CoreDirs value);
}
public static class JetBrains.Profiler.Profile.CoreApiHResults : object {
    public static HResults CORE_API_E_NO_PROFILER_DETECTED;
    public static HResults CORE_API_E_API_DISABLED;
    public static HResults CORE_API_E_NOT_SUPPORTED;
    public static HResults CORE_API_E_UNRECOVERABLE_ERROR;
    public static HResults CORE_API_E_INVALID_CALL_SEQUENCE;
    public static HResults CORE_API_E_NOT_IMPLEMENTED;
    public static HResults CORE_API_E_REQUESTED_NOT_CALLED;
    [CanBeNullAttribute]
public static string TryGetMessageForHr(HResults hr);
}
public enum JetBrains.Profiler.Profile.CoreCloseWay : Enum {
    public byte value__;
    public static CoreCloseWay Throw;
    public static CoreCloseWay Kill;
    public static CoreCloseWay Detach;
}
public enum JetBrains.Profiler.Profile.CoreCommand : Enum {
    public byte value__;
    public static CoreCommand StartStop;
    public static CoreCommand Dump;
    public static CoreCommand Allocations;
}
public enum JetBrains.Profiler.Profile.CoreHostProfileStates : Enum {
    public byte value__;
    public static CoreHostProfileStates Initializing;
    public static CoreHostProfileStates Terminating;
    public static CoreHostProfileStates Unsupported;
    public static CoreHostProfileStates Error;
    public static CoreHostProfileStates Pending;
    public static CoreHostProfileStates Done;
}
public enum JetBrains.Profiler.Profile.CoreOperation : Enum {
    public byte value__;
    public static CoreOperation SnapShotSaving;
    public static CoreOperation SnapShotFlushing;
}
public class JetBrains.Profiler.Profile.CoreOperationEventArgs : EventArgs {
    public StartProgressFinish Action;
    [NotNullAttribute]
public IIdentity Identity;
    private IProgressStatus myStatus;
    public CoreOperation Operation;
    [NotNullAttribute]
public IProgressStatus Status { get; }
    public CoreOperationEventArgs(StartProgressFinish action, CoreOperation operation, IIdentity identity, IProgressStatus status);
    public IProgressStatus get_Status();
}
public static class JetBrains.Profiler.Profile.CorProfHResults : object {
    public static HResults CORPROF_E_PROFILER_DETACHING;
    public static HResults CORPROF_E_PROFILER_NOT_ATTACHABLE;
    public static HResults CORPROF_E_UNRECOGNIZED_PIPE_MSG_FORMAT;
    public static HResults CORPROF_E_PROFILER_ALREADY_ACTIVE;
    public static HResults CORPROF_E_PROFILEE_INCOMPATIBLE_WITH_TRIGGER;
    public static HResults CORPROF_E_IPC_FAILED;
    public static HResults CORPROF_E_PROFILEE_PROCESS_NOT_FOUND;
    public static HResults CORPROF_E_PROFILER_CANCEL_ACTIVATION;
    public static HResults CORPROF_E_CONCURRENT_GC_NOT_PROFILABLE;
    public static HResults CORPROF_E_INCONSISTENT_FLAGS_WITH_HOST_PROTECTION_SETTING;
    [CanBeNullAttribute]
public static string TryGetMessageForHr(HResults hr);
}
public class JetBrains.Profiler.Profile.DefaultProgressStatus : BaseProgressStatus {
    public DefaultProgressStatus(double progress, string operationName);
    [LocalizableAttribute("False")]
public virtual string ToLog();
}
public class JetBrains.Profiler.Profile.GcProcessedObjectsProgressStatus : BaseProgressStatus {
    public ulong GcProcessedObjects;
    public GcProcessedObjectsProgressStatus(double progress, string operationName, ulong gcProcessedObjects);
    [LocalizableAttribute("False")]
public virtual string ToLog();
}
public class JetBrains.Profiler.Profile.GcProcessedRootsProgressStatus : BaseProgressStatus {
    public ulong GcProcessedRoots;
    public GcProcessedRootsProgressStatus(double progress, string operationName, ulong gcProcessedRoots);
    [LocalizableAttribute("False")]
public virtual string ToLog();
}
public enum JetBrains.Profiler.Profile.HostBridgeType : Enum {
    public byte value__;
    public static HostBridgeType Measure;
    public static HostBridgeType Memory;
}
public enum JetBrains.Profiler.Profile.HostOperation : Enum {
    public byte value__;
    public static HostOperation SnapshotQueueing;
    public static HostOperation SnapshotDownloading;
    public static HostOperation SnapshotSending;
    public static HostOperation LogQueueing;
    public static HostOperation LogDownloading;
    public static HostOperation LogSending;
}
public class JetBrains.Profiler.Profile.HostOperationEventArgs : CancelEventArgs {
    public StartProgressFinish Action;
    public int Id;
    [CanBeNullAttribute]
public IIdentity Identity;
    private HostProgressStatus myStatus;
    public HostOperation Operation;
    [NotNullAttribute]
public HostProgressStatus Status { get; }
    public HostOperationEventArgs(StartProgressFinish action, int id, IIdentity identity, HostOperation operation, HostProgressStatus status);
    public HostProgressStatus get_Status();
}
public class JetBrains.Profiler.Profile.HostProgressStatus : BaseProgressStatus {
    public HostProgressStatus(double progress, string operationName);
}
public class JetBrains.Profiler.Profile.HostScopeEventArgs : EventArgs {
    public StartFinish Action;
    public int Id;
    [CanBeNullAttribute]
public IIdentity Identity;
    public HostScopeEventArgs(StartFinish action, int id, IIdentity identity);
}
public interface JetBrains.Profiler.Profile.ICoreHostProfile {
    [NotNullAttribute]
public CoreIdentity CoreIdentity { get; }
    [NotNullAttribute]
public ProfileeProcessInfo ProfileeProcessInfo { get; }
    [NotNullAttribute]
public ISignal`1<CoreOperationEventArgs> Operation { get; }
    [NotNullAttribute]
public ISignal`1<AlertEventArgs> Alert { get; }
    [NotNullAttribute]
public IProperty`1<RuntimeInfo> Runtime { get; }
    [NotNullAttribute]
public IProperty`1<string> CommandLine { get; }
    [NotNullAttribute]
public IProperty`1<CoreHostProfileStates> AggregatedState { get; }
    public abstract virtual CoreIdentity get_CoreIdentity();
    public abstract virtual ProfileeProcessInfo get_ProfileeProcessInfo();
    public abstract virtual ISignal`1<CoreOperationEventArgs> get_Operation();
    public abstract virtual ISignal`1<AlertEventArgs> get_Alert();
    public abstract virtual IProperty`1<RuntimeInfo> get_Runtime();
    public abstract virtual IProperty`1<string> get_CommandLine();
    public abstract virtual IProperty`1<CoreHostProfileStates> get_AggregatedState();
    [CanBeNullAttribute]
public abstract virtual Tuple`2<SafeFileHandle, FileSystemPath> TakeStreaming();
    public abstract virtual bool CanClose(CoreCloseWay coreCloseWay);
    public abstract virtual bool Close(CoreCloseWay coreCloseWay);
    public abstract virtual void ThrowException();
}
public interface JetBrains.Profiler.Profile.IHostProfile {
    public HostBridgeType HostBridgeType { get; }
    public bool IsConnectionFilterRequired { get; }
    public bool UseTransparentIntegration { get; }
    [NotNullAttribute]
public IEnumerable`1<MainCloseWay> SupportedMainCloseWays { get; }
    [NotNullAttribute]
public IEnumerable`1<CoreCloseWay> SupportedCoreCloseWays { get; }
    [NotNullAttribute]
public IEnumerable`1<CoreCommand> SupportedCoreCommands { get; }
    [NotNullAttribute]
public IProperty`1<bool> Finished { get; }
    public abstract virtual HostBridgeType get_HostBridgeType();
    public abstract virtual bool get_IsConnectionFilterRequired();
    public abstract virtual bool get_UseTransparentIntegration();
    public abstract virtual IEnumerable`1<MainCloseWay> get_SupportedMainCloseWays();
    public abstract virtual IEnumerable`1<CoreCloseWay> get_SupportedCoreCloseWays();
    public abstract virtual IEnumerable`1<CoreCommand> get_SupportedCoreCommands();
    public abstract virtual IProperty`1<bool> get_Finished();
    public abstract virtual bool CloseAll(CoreCloseWay[] sequenceCoreCloseWays);
    public abstract virtual bool CanCloseMain(MainCloseWay mainCloseWay);
    public abstract virtual void CloseMain(MainCloseWay mainCloseWay);
    [CanBeNullAttribute]
public abstract virtual IDisposable TryUserActionWait();
}
public interface JetBrains.Profiler.Profile.IHostProfileSubscription {
    [NotNullAttribute]
public ISignal`1<AlertEventArgs> Alert { get; }
    [NotNullAttribute]
public ISignal`1<ConnectingEventArgs> Connecting { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ICoreHostProfile> Connections { get; }
    [NotNullAttribute]
public ISignal`1<HostScopeEventArgs> Scope { get; }
    [NotNullAttribute]
public ISignal`1<HostOperationEventArgs> Operation { get; }
    [NotNullAttribute]
public ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> SnapshotDone { get; }
    [NotNullAttribute]
public ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> LogDone { get; }
    public abstract virtual ISignal`1<AlertEventArgs> get_Alert();
    public abstract virtual ISignal`1<ConnectingEventArgs> get_Connecting();
    public abstract virtual ICollectionEvents`1<ICoreHostProfile> get_Connections();
    public abstract virtual ISignal`1<HostScopeEventArgs> get_Scope();
    public abstract virtual ISignal`1<HostOperationEventArgs> get_Operation();
    public abstract virtual ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> get_SnapshotDone();
    public abstract virtual ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> get_LogDone();
    public abstract virtual void Start(IProgressIndicator progressIndicator, IHostUI ui);
}
public interface JetBrains.Profiler.Profile.IHostUI {
    public abstract virtual bool ShowYesNo(string id, string message, bool defaultButton);
}
public interface JetBrains.Profiler.Profile.IMeasureCoreHostProfile {
    [ObsoleteAttribute("Do not use, the internal lock will be remove shortly from interface")]
[NotNullAttribute]
public object MeasureStateLock { get; }
    [NotNullAttribute]
public IProperty`1<MeasureCoreHostProfileStates> MeasureState { get; }
    public abstract virtual object get_MeasureStateLock();
    public abstract virtual IProperty`1<MeasureCoreHostProfileStates> get_MeasureState();
    public abstract virtual void Start();
    public abstract virtual void StopDrop();
    public abstract virtual void StopSave();
    public abstract virtual void StopDropStart();
    public abstract virtual void StopSaveStart();
}
public interface JetBrains.Profiler.Profile.IMemoryCoreHostProfile {
    [NotNullAttribute]
public IProperty`1<CoreHostProfileStates> MemoryState { get; }
    [NotNullAttribute]
public IProperty`1<SwitchCoreHostProfileStates> AllocationsState { get; }
    public abstract virtual IProperty`1<CoreHostProfileStates> get_MemoryState();
    public abstract virtual IProperty`1<SwitchCoreHostProfileStates> get_AllocationsState();
    public abstract virtual void ForceGc();
    public abstract virtual void Dump();
    public abstract virtual void EnableAllocations();
    public abstract virtual void DisableAllocations();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Profile.IOUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static RuntimeInfo ReadRuntimeInfo(BinaryReader reader);
}
public interface JetBrains.Profiler.Profile.IProgressStatus {
    public string OperationName { get; }
    public double Progress { get; }
    public abstract virtual string get_OperationName();
    public abstract virtual double get_Progress();
    [LocalizableAttribute("False")]
public abstract virtual string ToLog();
}
public interface JetBrains.Profiler.Profile.IServiceHostProfile {
    public bool CanStop { get; }
    public abstract virtual bool get_CanStop();
    public abstract virtual void Stop();
    public abstract virtual bool WaitForStop(TimeSpan timeout);
    public abstract virtual bool WaitForStop(int timeout);
}
public interface JetBrains.Profiler.Profile.IServiceHostProfileSubscription {
}
public interface JetBrains.Profiler.Profile.IStandaloneHostProfile {
    public int ProcessId { get; }
    public bool HasExited { get; }
    public Nullable`1<int> ExitCode { get; }
    public abstract virtual int get_ProcessId();
    public abstract virtual bool get_HasExited();
    public abstract virtual Nullable`1<int> get_ExitCode();
    public abstract virtual bool CloseMainWindow();
    public abstract virtual void Kill();
    public abstract virtual void KillTree();
    public abstract virtual bool WaitForExit(TimeSpan timeout);
    public abstract virtual bool WaitForExit(int timeout);
    public abstract virtual bool WaitForExit();
}
public interface JetBrains.Profiler.Profile.IStandaloneHostProfileSubscription {
}
public enum JetBrains.Profiler.Profile.JetNativeArchitecture : Enum {
    public ushort value__;
    public static JetNativeArchitecture X86;
    public static JetNativeArchitecture X64;
    public static JetNativeArchitecture Arm;
    public static JetNativeArchitecture Arm64;
    public static JetNativeArchitecture S390x;
    public static JetNativeArchitecture La64;
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Profile.JetNativeArchitectureEx : object {
    [ExtensionAttribute]
public static JetArchitecture ToArchitecture(JetNativeArchitecture nativeArchitecture);
    [ExtensionAttribute]
public static JetNativeArchitecture ToNativeArchitecture(JetArchitecture architecture);
}
public class JetBrains.Profiler.Profile.LoadSymbolsProgressStatus : BaseProgressStatus {
    public string Name;
    public LoadSymbolsProgressStatus(double progress, string operationName, string name);
    [LocalizableAttribute("False")]
public virtual string ToLog();
}
public class JetBrains.Profiler.Profile.LogDoneEventArgs : EventArgs {
    [CanBeNullAttribute]
public IIdentity Identity;
    [NotNullAttribute]
public FileSystemPath LogFile;
    public LogSource LogSource;
    public LogDoneEventArgs(IIdentity identity, LogSource logSource, FileSystemPath logFile);
}
public enum JetBrains.Profiler.Profile.MainCloseWay : Enum {
    public byte value__;
    public static MainCloseWay StopService;
}
public enum JetBrains.Profiler.Profile.MeasureCoreHostProfileStates : Enum {
    public byte value__;
    public static MeasureCoreHostProfileStates Initializing;
    public static MeasureCoreHostProfileStates Terminating;
    public static MeasureCoreHostProfileStates Unsupported;
    public static MeasureCoreHostProfileStates Error;
    public static MeasureCoreHostProfileStates Pending;
    public static MeasureCoreHostProfileStates Started;
    public static MeasureCoreHostProfileStates Stopped;
}
public class JetBrains.Profiler.Profile.MessageInfo : object {
    private string myExecutableName;
    private int myProcessId;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private AlertSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private HResults <HResult>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    public string Message { get; public set; }
    public string Header { get; }
    public AlertSeverity Severity { get; }
    public HResults HResult { get; }
    public DateTime DateTime { get; }
    public bool HasProcessId { get; }
    public int ProcessId { get; }
    [NotNullAttribute]
public string ExecutableName { get; }
    public MessageInfo(AlertEventArgs args);
    protected MessageInfo(MessageInfo info);
    public MessageInfo(AlertEventArgs args, int processId, string executableName);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public AlertSeverity get_Severity();
    [CompilerGeneratedAttribute]
public HResults get_HResult();
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    public bool get_HasProcessId();
    public int get_ProcessId();
    public string get_ExecutableName();
    [NotNullAttribute]
private static string GetHeader(string message);
}
public static class JetBrains.Profiler.Profile.MessageInfoHelpers : object {
    public static ProfilerAlertException BuildExceptionFromAlertInfo(MessageInfo messageInfo);
}
public static class JetBrains.Profiler.Profile.ProfHResults : object {
    public static HResults PROF_E_NOT_SUPPORTED_CLR_V1;
    public static HResults PROF_E_NOT_SUPPORTED_CLR_V2;
    public static HResults PROF_E_INVALID_BRIDGE_PROTOCOL;
    public static HResults PROF_E_INVALID_BRIDGE_VERSION;
    public static HResults PROF_E_INVALID_BRIDGE_INFO;
    public static HResults PROF_E_SYNC_STACK_WALK_NOT_SUPPORTED;
    [CanBeNullAttribute]
public static string TryGetMessageForHr(HResults hr);
}
public class JetBrains.Profiler.Profile.ProfilerAlertException : ApplicationException {
    public ProfilerAlertException(string message);
}
public static class JetBrains.Profiler.Profile.ResponsibilityEventArgs : object {
    [NotNullAttribute]
public static ResponsibilityEventArgs`1<TArgs> Of(TArgs args);
}
public class JetBrains.Profiler.Profile.ResponsibilityEventArgs`1 : EventArgs {
    private Thread myThread;
    private TArgs myArgs;
    private TArgs myArgsCopy;
    public ResponsibilityEventArgs`1(TArgs args);
    [NotNullAttribute]
public TArgs Take();
    [NotNullAttribute]
public TArgs TakeWithoutResponsibility();
    [CanBeNullAttribute]
public TArgs TryTake();
}
public class JetBrains.Profiler.Profile.SnapshotDoneEventArgs : EventArgs {
    [NotNullAttribute]
public FileSystemPath IndexFile;
    [NotNullAttribute]
public SnapshotIdentity SnapshotIdentity;
    public SnapshotDoneEventArgs(SnapshotIdentity snapshotIdentity, FileSystemPath indexFile);
}
public enum JetBrains.Profiler.Profile.StartFinish : Enum {
    public byte value__;
    public static StartFinish Start;
    public static StartFinish Finish;
}
public enum JetBrains.Profiler.Profile.StartProgressFinish : Enum {
    public byte value__;
    public static StartProgressFinish Start;
    public static StartProgressFinish Progress;
    public static StartProgressFinish Finish;
}
public class JetBrains.Profiler.Profile.StreamingInitializedEventArgs : EventArgs {
    [NotNullAttribute]
public FileSystemPath StreamingFilePath;
    public StreamingInitializedEventArgs(FileSystemPath streamingFilePath);
}
public enum JetBrains.Profiler.Profile.SwitchCoreHostProfileStates : Enum {
    public byte value__;
    public static SwitchCoreHostProfileStates Initializing;
    public static SwitchCoreHostProfileStates Terminating;
    public static SwitchCoreHostProfileStates Unsupported;
    public static SwitchCoreHostProfileStates Error;
    public static SwitchCoreHostProfileStates Pending;
    public static SwitchCoreHostProfileStates Enabled;
    public static SwitchCoreHostProfileStates Disabled;
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.Profiler.Resources.UITexts : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string UseEnvironmentVariables { get; }
    public static string AnyDotNetWarning { get; }
    public static string AnyDotNetWarningHeader { get; }
    public static string NotEnoughDiskSpaceToSaveSnapshot_DialogText { get; }
    public static string NotEnoughDiskSpaceToSaveSnapshot_DialogTitle { get; }
    public static string SamplingNotSupportedForNetCore3AndEarlier { get; }
    public static string ApplicationKind_Standalone { get; }
    public static string ApplicationKind_NetCore { get; }
    public static string ApplicationKind_NetProcess { get; }
    public static string ApplicationKind_AttachedProcess { get; }
    public static string ApplicationKind_IISExpress { get; }
    public static string ApplicationKind_IISServer { get; }
    public static string ApplicationKind_WindowsStore { get; }
    public static string ApplicationKind_WCFLibrary { get; }
    public static string ApplicationKind_WindowsService { get; }
    public static string ApplicationKind_UnitTests { get; }
    public static string ApplicationKind_Mono { get; }
    public static string ApplicationKind_Unity { get; }
    public static string ApplicationKind_NoLongerSupported { get; }
    public static string SnapshotExport_FilePrefixWhenNoProcessName { get; }
    public static string SnapshotExport_FilePrefixForUnitTests { get; }
    public static string Argument_PresentableName_IIS { get; }
    public static string Argument_PresentableName_Silverlight { get; }
    public static string ProfilingType_Timeline { get; }
    public static string ProfilingType_Sampling { get; }
    public static string ProfilingType_Tracing { get; }
    public static string ProfilingType_LineByLine { get; }
    public static string RuntimeType_Native { get; }
    public static string RuntimeType_CLR { get; }
    public static string RuntimeType_CoreCLR { get; }
    public static string RuntimeType_Silverlight { get; }
    public static string RuntimeType_Mono { get; }
    public static string NoWritePermissionsForSnapshotDirectory { get; }
    public static string SnapshotsDirectoryDoesntExist { get; }
    public static string FailedToStartProfilingWithException { get; }
    public static string MeasureType_Sampling { get; }
    public static string MeasureType_Tracing { get; }
    public static string MeasureType_LineByLine { get; }
    public static string MeterKind_None { get; }
    public static string MeterKind_PerformanceCounter { get; }
    public static string MeterKind_ThreadTime { get; }
    public static string MeterKind_Rdtsc { get; }
    public static string MeterKind_ThreadCycleTime { get; }
    public static string HostOptions_HostTempPath { get; }
    public static string HostOptions_AllowKillProcess { get; }
    public static string HostOptions_DenyKillProcess { get; }
    public static string HostOptions_PdbServerLogMask { get; }
    public static string HostOptions_FinishProfilingAfterTimeout_Title { get; }
    public static string HostOptions_FinishProfilingNormally { get; }
    public static string HostOptions_FinishProfilingManually { get; }
    public static string HostOptions_FinishProfilingAfterMs { get; }
    public static string HostOptions_Reprofile_Enabled { get; }
    public static string HostOptions_Reprofile_DisabledForTests { get; }
    public static string HostOptions_Reprofile_DisabledNoProcessId { get; }
    public static string HostOptions_PdbServerLogMask_NoLogs { get; }
    public static string HostOptions_PdbServerLogMask_LogsEnabled { get; }
    public static string CoreOptions_CoreTempPath { get; }
    public static string CoreOptions_CoreRegistration { get; }
    public static string CoreOptions_AdditionalEnvironmentVariables { get; }
    public static string CoreOptions_TCPBridge { get; }
    public static string CoreOptions_NamedPipesBridge { get; }
    public static string CoreOptions_AdditionalEnvironmentVariables_None { get; }
    public static string CoreRegistration_Default { get; }
    public static string CoreRegistration_RegistryFree { get; }
    public static string CoreRegistration_RegistryFreeArchitecture { get; }
    public static string CoreDebug_None { get; }
    public static string CoreDebug_ShowMessageBox { get; }
    public static string CoreDebug_InfiniteSleep { get; }
    public static string CoreOptions_CoreLogsMask { get; }
    public static string CoreConfiguration_Release { get; }
    public static string CoreConfiguration_Debug { get; }
    public static string ControlKind_Manual { get; }
    public static string ControlKind_Api { get; }
    public static string ControlKind_ApiFirst { get; }
    public static string ControlKind_RemoteApi { get; }
    public static string CoreOptions_CoreLogMask_Disabled { get; }
    public static string CoreOptions_CoreLogMask_Enabled { get; }
    public static string ScopeInfo_PatternFilters { get; }
    public static string ScopeInfo_ExcludeAttributeFilters { get; }
    public static string ScopeInfo_PatternFilters_None { get; }
    public static string ScopeInfo_ExcludeAttributeFilters_None { get; }
    public static string StartImmediately { get; }
    public static string DontStartImmediately { get; }
    public static string TimelineInfo_EnableNativeAllocations { get; }
    public static string TimelineInfo_DontEnableNativeAllocations { get; }
    public static string TimelineInfo_EnableDebugOutput { get; }
    public static string TimelineInfo_DontEnableDebugOutput { get; }
    public static string TimelineInfo_EnableTPL { get; }
    public static string TimelineInfo_DontEnableTPL { get; }
    public static string TimelineInfo_EnableNativeProfiling { get; }
    public static string TimelineInfo_DontEnableNativeProfiling { get; }
    public static string TimelineInfo_LoadPdb { get; }
    public static string TimelineInfo_DontLoadPdb { get; }
    public static string SymbolSearchInfo_SearchPaths { get; }
    public static string SymbolSearchInfo_SearchPolicy { get; }
    public static string SymbolSearchInfo_SearchPaths_None { get; }
    public static string SymbolSearchInfo_SearchPolicy_None { get; }
    public static string PerformanceInfo_EnableInlining { get; }
    public static string PerformanceInfo_DisableInlining { get; }
    public static string PerformanceInfo_HighAccuracy { get; }
    public static string PerformanceInfo_LowAccuracy { get; }
    public static string InjectInfo_UseNGenImages { get; }
    public static string InjectInfo_DontUseNGenImages { get; }
    public static string AttributeFilterInfo_Classes { get; }
    public static string AttributeFilterInfo_Class { get; }
    public static string AttributeFilterInfo_Everything { get; }
    public static string PatternFilterInfo_Allow { get; }
    public static string PatternFilterInfo_Deny { get; }
    public static string PatternFilterInfo_Functions { get; }
    public static string PatternFilterInfo_Function { get; }
    public static string PatternFilterInfo_Classes { get; }
    public static string PatternFilterInfo_Class { get; }
    public static string PatternFilterInfo_InAssemblies { get; }
    public static string PatternFilterInfo_InAssembly { get; }
    public static string PatternFilterInfo_Assemblies { get; }
    public static string PatternFilterInfo_Assembly { get; }
    public static string PatternFilterInfo_Everything { get; }
    public static string RemoteHost_Url { get; }
    public static string RemoteHost_Authentication { get; }
    public static string RemoteHost_Login { get; }
    public static string RemoteHost_Password { get; }
    public static string RunBrowser_DisplayName_Default { get; }
    public static string RunBrowser_DisplayName_DefaultWithBrowser { get; }
    public static string Argument_Arguments { get; }
    public static string Argument_WorkingDirectory { get; }
    public static string Argument_FileName { get; }
    public static string Argument_CreateConsoleWindow { get; }
    public static string Argument_DontCreateConsoleWindow { get; }
    public static string Argument_ProfileChildProcesses { get; }
    public static string Argument_ProfileOneProcess { get; }
    public static string Argument_ProcessFilters { get; }
    public static string Argument_ProcessFilters_None { get; }
    public static string Argument_ProfileNet5ChildProcesses { get; }
    public static string WcfHost_LibraryConfigPath { get; }
    public static string WcfHost_WcfHost { get; }
    public static string WcfHost_ClientPath { get; }
    public static string WcfHost_ClientArguments { get; }
    public static string WcfHost_LibraryPath { get; }
    public static string WindowsService_ServiceName { get; }
    public static string WindowsService_StartDependentServices { get; }
    public static string WindowsService_DontStartDependentServices { get; }
    public static string Nettrace_ConvertedFrom { get; }
    public static string ProcessFilter_Allow { get; }
    public static string ProcessFilter_Deny { get; }
    public static string ProcessFilter_Processes { get; }
    public static string ProcessFilter_Process { get; }
    public static string ProcessFilter_Everything { get; }
    public static string Metro_Name { get; }
    public static string RunBrowser_Browser { get; }
    public static string RunBrowser_Url { get; }
    public static string IIS_RunBrowserOnRemote { get; }
    public static string IIS_RunBrowserLocally { get; }
    public static string IIS_DontRunBrowser { get; }
    public static string Attach_Process { get; }
    public static string Attach_RuntimeVersion { get; }
    public static string IISExpress_Server { get; }
    public static string IISExpress_ConfigFilePath { get; }
    public static string IISExpress_Site { get; }
    public static string IISExpress_ApplicationPath { get; }
    public static string IISExpress_Port { get; }
    public static string IISExpress_RuntimeVersion { get; }
    public static string IISExpress_Port_Auto { get; }
    public static string IISExpress_ShowInTray { get; }
    public static string IISExpress_DontShowInTray { get; }
    public static string ClrEngine_None { get; }
    public static string ClrEngine_Clr { get; }
    public static string ClrEngine_CoreClr { get; }
    public static string ClrEngine_Mono { get; }
    public static string ClrEngine_ClrOrCoreClr { get; }
    public static string ClrEngine_ClrOrCoreClrOrMono { get; }
    public static string Converage_GatherCyclomaticComplexity { get; }
    public static string Converage_DontGatherCyclomaticComplexity { get; }
    public static string Converage_GatherMethodRegions { get; }
    public static string Converage_DontGatherMethodRegions { get; }
    public static string HomeMenuItem_Profiling { get; }
    public static string HomeMenuItem_Workspaces { get; }
    public static string HomeMenuItem_Snapshots { get; }
    public static string HomeMenuItem_Settings { get; }
    public static string HomeMenuItem_Tutorials { get; }
    public static string HomeMenuItem_About { get; }
    public static string HomeMenuItem_Help { get; }
    public static string ProcessTable_Column_ProcessName { get; }
    public static string ProcessTable_Column_Pid { get; }
    public static string DragAndDrop_Text01 { get; }
    public static string DragAndDrop_Text02 { get; }
    public static string RunningProcess_Title { get; }
    public static string RunningProcess_ShowProcesses { get; }
    public static string ProfilingTemplates_AddRunConfiguration { get; }
    public static string ProfileCfg_Menu_Create { get; }
    public static string ProfileCfg_Menu_Edit { get; }
    public static string ProfileCfg_Menu_Delete { get; }
    public static string ProfileCfg_NoConfigurations { get; }
    public static string ProfileCfg_NoConfigurations_Add { get; }
    public static string ProfilingTemplates_AddRunConfigurationXml { get; }
    public static string ProfileCfg_OrWord { get; }
    public static string ProfileCfg_ImportFromXml { get; }
    public static string ProfileCfg_NewProcessRun { get; }
    public static string ProfilingProcessFilter_Default { get; }
    public static string ProfilingProcessFilter_EntireTree { get; }
    public static string ProfilingProcessFilter_Add { get; }
    public static string RunningProcess_AddRunConfiguration { get; }
    public static string Profiler_Error_Clr1NotSupported { get; }
    public static string Profiler_Error_Clr2NotSupported { get; }
    public static string Profiler_Error_InvalidBridgeProtocol { get; }
    public static string Profiler_Error_InvalidBridgeVersion { get; }
    public static string Profiler_Error_InvalidBridgeInfo { get; }
    public static string Profiler_Error_SyncStackWalkNotSupported { get; }
    public static string Profiler_Error_ProfilerDetaching { get; }
    public static string Profiler_Error_ProfilerNotAttachable { get; }
    public static string Profiler_Error_UnrecognizedPipeMsgFormat { get; }
    public static string Profiler_Error_ProfilerAlreadyActive { get; }
    public static string Profiler_Error_ProfileeIncompatibleWithTrigger { get; }
    public static string Profiler_Error_IpcFailed { get; }
    public static string Profiler_Error_ProfileeProcessNotFound { get; }
    public static string Profiler_Error_ProfilerCancelActivation { get; }
    public static string Profiler_Error_ConcurrentGcNotProfilable { get; }
    public static string Profiler_Error_InconsistentFlagsWithHostProtectionSetting { get; }
    public static string Profiler_Alert_InvalidBridgeProtocol { get; }
    public static string Profiler_Alert_InvalidBridgeVersion { get; }
    public static string Profiler_Alert_InvalidBridgeInfo { get; }
    public static string Profiler_Launcher_Connecting { get; }
    public static string Profiler_Launcher_CantConnect { get; }
    public static string Profiler_Launcher_Initializing { get; }
    public static string Profiler_Launcher_UnableToStart { get; }
    public static string Profiler_Launcher_CantInitialize { get; }
    public static string Profiler_Launcher_StartingProfiler { get; }
    public static string Profiler_Api_NoProfilerDetected { get; }
    public static string Profiler_Api_ApiDisabled { get; }
    public static string Profiler_Api_NotSupported { get; }
    public static string Profiler_Api_UnrecoverableError { get; }
    public static string Profiler_Api_InvalidCallSequence { get; }
    public static string Profiler_Api_NotImplemented { get; }
    public static string Profiler_Api_RequestedNotCalled { get; }
    public static string CommandProcessor_Alert_MessageWithHr { get; }
    public static string Profiler_SaveSnapshot_ActionText { get; }
    public static string Profiler_LocateSnapshot_ActionText { get; }
    public static string Profiler_CloseSnapshot_ActionText { get; }
    public static string Configurations_Templates_Sampling { get; }
    public static string Configurations_Templates_ExperimentalSampling { get; }
    public static string Configurations_Templates_Tracing { get; }
    public static string Configurations_Templates_LineByLine { get; }
    public static string Configurations_Templates_Timeline { get; }
    public static string Configurations_Templates_TimelineMono { get; }
    public static string Configurations_Templates_TimelineUnity { get; }
    public static string Configurations_Templates_MemoryFull { get; }
    public static string Configurations_Templates_MemorySampled { get; }
    public static string SnapshotOpening_SomeFilesAreNotFound { get; }
    public static string SnapshotOpening_UnsupportedSnapshotFormat { get; }
    public static string SnapshotOpening_IndexFileIsCorrupted { get; }
    public static string SnapshotOpening_Reading { get; }
    public static string NewRunCfg_ChooseAppType { get; }
    public static string NewRunCfg_AppType_Standalone_Header { get; }
    public static string NewRunCfg_AppType_NetCore_Header { get; }
    public static string NewRunCfg_AppType_IIS_Header { get; }
    public static string NewRunCfg_AppType_IISExpress_Header { get; }
    public static string NewRunCfg_AppType_WinService_Header { get; }
    public static string NewRunCfg_AppType_WCF_Header { get; }
    public static string NewRunCfg_AppType_WinRT_Header { get; }
    public static string NewRunCfg_AppType_NetProcess_Header { get; }
    public static string NewRunCfg_AppType_Mono_Header { get; }
    public static string NewRunCfg_AppType_Unity_Header { get; }
    public static string NewRunCfg_AppType_WinService_Description { get; }
    public static string NewRunCfg_AppType_NetCore_Description { get; }
    public static string NewRunCfg_AppType_Mono_Description { get; }
    public static string NewRunCfg_AppType_IISExpress_Description { get; }
    public static string NewRunCfg_AppType_IIS_Description { get; }
    public static string NewRunCfg_AppType_WCF_Description { get; }
    public static string NewRunCfg_AppType_Unity_Description { get; }
    public static string NewRunCfg_AppType_WinRT_Description { get; }
    public static string NewRunCfg_AppType_NetProcess_Description { get; }
    public static string NewRunCfg_RunningProcess_AppType_Standalone_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_WinService_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_NetCore_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_Mono_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_IISExpress_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_IIS_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_WCF_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_Unity_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_WinRT_Header { get; }
    public static string NewRunCfg_RunningProcess_AppType_NetProcess_Header { get; }
    public static string NewRunCfg_EnvVar_Hint { get; }
    public static string NewRunCfg_Path_Label { get; }
    public static string NewRunCfg_Arguments_Label { get; }
    public static string NewRunCfg_WorkingDir_Label { get; }
    public static string NewRunCfg_OpenUrl_Label { get; }
    public static string NewRunCfg_InBrowser_Label { get; }
    public static string NewRunCfg_CfgName_Label { get; }
    public static string IISExpress_RandomPort { get; }
    public static string NewRunCfg_UnityArg_Hint { get; }
    public static string WcfHost_ConfigPath { get; }
    public static string WcfHost_ClientArgs { get; }
    public static string NewRunCfg_Package_Label { get; }
    public static string NewRunCfg_NetProcessDescription { get; }
    public static string NewRunCfg_RefreshBtn { get; }
    public static string NewRunCfg_WinTitle { get; }
    public static string NewRunCfg_BackBtn { get; }
    public static string NewRunCfg_SaveBtn { get; }
    public static string NewRunCfg_CancelBtn { get; }
    public static string NewRunCfg_NextBtn { get; }
    public static string Profiling_Progress_WaitingForEvents { get; }
    public static string Profiling_Progress_ResolvingCallTree { get; }
    public static string Profiling_Progress_ResolvingSymbols { get; }
    public static string Profiling_Progress_SnapshotSaving { get; }
    public static string Profiling_Progress_ProcessingObjects { get; }
    public static string Profiling_Progress_ProcessingRoots { get; }
    public static string FilterProcessCaption { get; }
    public static string Label_EverythingFilter { get; }
    public static string StandaloneCaption { get; }
    public static string IncludePatternFilters { get; }
    public static string ExcludePatternFilters { get; }
    public static string AttributeFilters { get; }
    public static string ProfilingFiltersTitle { get; }
    private static UITexts();
    public static JetResourceManager get_ResourceManager();
    public static string get_UseEnvironmentVariables();
    public static string get_AnyDotNetWarning();
    public static string get_AnyDotNetWarningHeader();
    public static string get_NotEnoughDiskSpaceToSaveSnapshot_DialogText();
    public static string get_NotEnoughDiskSpaceToSaveSnapshot_DialogTitle();
    public static string get_SamplingNotSupportedForNetCore3AndEarlier();
    public static string get_ApplicationKind_Standalone();
    public static string get_ApplicationKind_NetCore();
    public static string get_ApplicationKind_NetProcess();
    public static string get_ApplicationKind_AttachedProcess();
    public static string get_ApplicationKind_IISExpress();
    public static string get_ApplicationKind_IISServer();
    public static string get_ApplicationKind_WindowsStore();
    public static string get_ApplicationKind_WCFLibrary();
    public static string get_ApplicationKind_WindowsService();
    public static string get_ApplicationKind_UnitTests();
    public static string get_ApplicationKind_Mono();
    public static string get_ApplicationKind_Unity();
    public static string get_ApplicationKind_NoLongerSupported();
    public static string get_SnapshotExport_FilePrefixWhenNoProcessName();
    public static string get_SnapshotExport_FilePrefixForUnitTests();
    public static string get_Argument_PresentableName_IIS();
    public static string get_Argument_PresentableName_Silverlight();
    public static string get_ProfilingType_Timeline();
    public static string get_ProfilingType_Sampling();
    public static string get_ProfilingType_Tracing();
    public static string get_ProfilingType_LineByLine();
    public static string get_RuntimeType_Native();
    public static string get_RuntimeType_CLR();
    public static string get_RuntimeType_CoreCLR();
    public static string get_RuntimeType_Silverlight();
    public static string get_RuntimeType_Mono();
    public static string get_NoWritePermissionsForSnapshotDirectory();
    public static string get_SnapshotsDirectoryDoesntExist();
    public static string get_FailedToStartProfilingWithException();
    public static string get_MeasureType_Sampling();
    public static string get_MeasureType_Tracing();
    public static string get_MeasureType_LineByLine();
    public static string get_MeterKind_None();
    public static string get_MeterKind_PerformanceCounter();
    public static string get_MeterKind_ThreadTime();
    public static string get_MeterKind_Rdtsc();
    public static string get_MeterKind_ThreadCycleTime();
    public static string get_HostOptions_HostTempPath();
    public static string get_HostOptions_AllowKillProcess();
    public static string get_HostOptions_DenyKillProcess();
    public static string get_HostOptions_PdbServerLogMask();
    public static string get_HostOptions_FinishProfilingAfterTimeout_Title();
    public static string get_HostOptions_FinishProfilingNormally();
    public static string get_HostOptions_FinishProfilingManually();
    public static string get_HostOptions_FinishProfilingAfterMs();
    public static string get_HostOptions_Reprofile_Enabled();
    public static string get_HostOptions_Reprofile_DisabledForTests();
    public static string get_HostOptions_Reprofile_DisabledNoProcessId();
    public static string get_HostOptions_PdbServerLogMask_NoLogs();
    public static string get_HostOptions_PdbServerLogMask_LogsEnabled();
    public static string get_CoreOptions_CoreTempPath();
    public static string get_CoreOptions_CoreRegistration();
    public static string get_CoreOptions_AdditionalEnvironmentVariables();
    public static string get_CoreOptions_TCPBridge();
    public static string get_CoreOptions_NamedPipesBridge();
    public static string get_CoreOptions_AdditionalEnvironmentVariables_None();
    public static string get_CoreRegistration_Default();
    public static string get_CoreRegistration_RegistryFree();
    public static string get_CoreRegistration_RegistryFreeArchitecture();
    public static string get_CoreDebug_None();
    public static string get_CoreDebug_ShowMessageBox();
    public static string get_CoreDebug_InfiniteSleep();
    public static string get_CoreOptions_CoreLogsMask();
    public static string get_CoreConfiguration_Release();
    public static string get_CoreConfiguration_Debug();
    public static string get_ControlKind_Manual();
    public static string get_ControlKind_Api();
    public static string get_ControlKind_ApiFirst();
    public static string get_ControlKind_RemoteApi();
    public static string get_CoreOptions_CoreLogMask_Disabled();
    public static string get_CoreOptions_CoreLogMask_Enabled();
    public static string get_ScopeInfo_PatternFilters();
    public static string get_ScopeInfo_ExcludeAttributeFilters();
    public static string get_ScopeInfo_PatternFilters_None();
    public static string get_ScopeInfo_ExcludeAttributeFilters_None();
    public static string get_StartImmediately();
    public static string get_DontStartImmediately();
    public static string get_TimelineInfo_EnableNativeAllocations();
    public static string get_TimelineInfo_DontEnableNativeAllocations();
    public static string get_TimelineInfo_EnableDebugOutput();
    public static string get_TimelineInfo_DontEnableDebugOutput();
    public static string get_TimelineInfo_EnableTPL();
    public static string get_TimelineInfo_DontEnableTPL();
    public static string get_TimelineInfo_EnableNativeProfiling();
    public static string get_TimelineInfo_DontEnableNativeProfiling();
    public static string get_TimelineInfo_LoadPdb();
    public static string get_TimelineInfo_DontLoadPdb();
    public static string get_SymbolSearchInfo_SearchPaths();
    public static string get_SymbolSearchInfo_SearchPolicy();
    public static string get_SymbolSearchInfo_SearchPaths_None();
    public static string get_SymbolSearchInfo_SearchPolicy_None();
    public static string get_PerformanceInfo_EnableInlining();
    public static string get_PerformanceInfo_DisableInlining();
    public static string get_PerformanceInfo_HighAccuracy();
    public static string get_PerformanceInfo_LowAccuracy();
    public static string get_InjectInfo_UseNGenImages();
    public static string get_InjectInfo_DontUseNGenImages();
    public static string get_AttributeFilterInfo_Classes();
    public static string get_AttributeFilterInfo_Class();
    public static string get_AttributeFilterInfo_Everything();
    public static string get_PatternFilterInfo_Allow();
    public static string get_PatternFilterInfo_Deny();
    public static string get_PatternFilterInfo_Functions();
    public static string get_PatternFilterInfo_Function();
    public static string get_PatternFilterInfo_Classes();
    public static string get_PatternFilterInfo_Class();
    public static string get_PatternFilterInfo_InAssemblies();
    public static string get_PatternFilterInfo_InAssembly();
    public static string get_PatternFilterInfo_Assemblies();
    public static string get_PatternFilterInfo_Assembly();
    public static string get_PatternFilterInfo_Everything();
    public static string get_RemoteHost_Url();
    public static string get_RemoteHost_Authentication();
    public static string get_RemoteHost_Login();
    public static string get_RemoteHost_Password();
    public static string get_RunBrowser_DisplayName_Default();
    public static string get_RunBrowser_DisplayName_DefaultWithBrowser();
    public static string get_Argument_Arguments();
    public static string get_Argument_WorkingDirectory();
    public static string get_Argument_FileName();
    public static string get_Argument_CreateConsoleWindow();
    public static string get_Argument_DontCreateConsoleWindow();
    public static string get_Argument_ProfileChildProcesses();
    public static string get_Argument_ProfileOneProcess();
    public static string get_Argument_ProcessFilters();
    public static string get_Argument_ProcessFilters_None();
    public static string get_Argument_ProfileNet5ChildProcesses();
    public static string get_WcfHost_LibraryConfigPath();
    public static string get_WcfHost_WcfHost();
    public static string get_WcfHost_ClientPath();
    public static string get_WcfHost_ClientArguments();
    public static string get_WcfHost_LibraryPath();
    public static string get_WindowsService_ServiceName();
    public static string get_WindowsService_StartDependentServices();
    public static string get_WindowsService_DontStartDependentServices();
    public static string get_Nettrace_ConvertedFrom();
    public static string get_ProcessFilter_Allow();
    public static string get_ProcessFilter_Deny();
    public static string get_ProcessFilter_Processes();
    public static string get_ProcessFilter_Process();
    public static string get_ProcessFilter_Everything();
    public static string get_Metro_Name();
    public static string get_RunBrowser_Browser();
    public static string get_RunBrowser_Url();
    public static string get_IIS_RunBrowserOnRemote();
    public static string get_IIS_RunBrowserLocally();
    public static string get_IIS_DontRunBrowser();
    public static string get_Attach_Process();
    public static string get_Attach_RuntimeVersion();
    public static string get_IISExpress_Server();
    public static string get_IISExpress_ConfigFilePath();
    public static string get_IISExpress_Site();
    public static string get_IISExpress_ApplicationPath();
    public static string get_IISExpress_Port();
    public static string get_IISExpress_RuntimeVersion();
    public static string get_IISExpress_Port_Auto();
    public static string get_IISExpress_ShowInTray();
    public static string get_IISExpress_DontShowInTray();
    public static string get_ClrEngine_None();
    public static string get_ClrEngine_Clr();
    public static string get_ClrEngine_CoreClr();
    public static string get_ClrEngine_Mono();
    public static string get_ClrEngine_ClrOrCoreClr();
    public static string get_ClrEngine_ClrOrCoreClrOrMono();
    public static string get_Converage_GatherCyclomaticComplexity();
    public static string get_Converage_DontGatherCyclomaticComplexity();
    public static string get_Converage_GatherMethodRegions();
    public static string get_Converage_DontGatherMethodRegions();
    public static string get_HomeMenuItem_Profiling();
    public static string get_HomeMenuItem_Workspaces();
    public static string get_HomeMenuItem_Snapshots();
    public static string get_HomeMenuItem_Settings();
    public static string get_HomeMenuItem_Tutorials();
    public static string get_HomeMenuItem_About();
    public static string get_HomeMenuItem_Help();
    public static string get_ProcessTable_Column_ProcessName();
    public static string get_ProcessTable_Column_Pid();
    public static string get_DragAndDrop_Text01();
    public static string get_DragAndDrop_Text02();
    public static string get_RunningProcess_Title();
    public static string get_RunningProcess_ShowProcesses();
    public static string get_ProfilingTemplates_AddRunConfiguration();
    public static string get_ProfileCfg_Menu_Create();
    public static string get_ProfileCfg_Menu_Edit();
    public static string get_ProfileCfg_Menu_Delete();
    public static string get_ProfileCfg_NoConfigurations();
    public static string get_ProfileCfg_NoConfigurations_Add();
    public static string get_ProfilingTemplates_AddRunConfigurationXml();
    public static string get_ProfileCfg_OrWord();
    public static string get_ProfileCfg_ImportFromXml();
    public static string get_ProfileCfg_NewProcessRun();
    public static string get_ProfilingProcessFilter_Default();
    public static string get_ProfilingProcessFilter_EntireTree();
    public static string get_ProfilingProcessFilter_Add();
    public static string get_RunningProcess_AddRunConfiguration();
    public static string get_Profiler_Error_Clr1NotSupported();
    public static string get_Profiler_Error_Clr2NotSupported();
    public static string get_Profiler_Error_InvalidBridgeProtocol();
    public static string get_Profiler_Error_InvalidBridgeVersion();
    public static string get_Profiler_Error_InvalidBridgeInfo();
    public static string get_Profiler_Error_SyncStackWalkNotSupported();
    public static string get_Profiler_Error_ProfilerDetaching();
    public static string get_Profiler_Error_ProfilerNotAttachable();
    public static string get_Profiler_Error_UnrecognizedPipeMsgFormat();
    public static string get_Profiler_Error_ProfilerAlreadyActive();
    public static string get_Profiler_Error_ProfileeIncompatibleWithTrigger();
    public static string get_Profiler_Error_IpcFailed();
    public static string get_Profiler_Error_ProfileeProcessNotFound();
    public static string get_Profiler_Error_ProfilerCancelActivation();
    public static string get_Profiler_Error_ConcurrentGcNotProfilable();
    public static string get_Profiler_Error_InconsistentFlagsWithHostProtectionSetting();
    public static string get_Profiler_Alert_InvalidBridgeProtocol();
    public static string get_Profiler_Alert_InvalidBridgeVersion();
    public static string get_Profiler_Alert_InvalidBridgeInfo();
    public static string get_Profiler_Launcher_Connecting();
    public static string get_Profiler_Launcher_CantConnect();
    public static string get_Profiler_Launcher_Initializing();
    public static string get_Profiler_Launcher_UnableToStart();
    public static string get_Profiler_Launcher_CantInitialize();
    public static string get_Profiler_Launcher_StartingProfiler();
    public static string get_Profiler_Api_NoProfilerDetected();
    public static string get_Profiler_Api_ApiDisabled();
    public static string get_Profiler_Api_NotSupported();
    public static string get_Profiler_Api_UnrecoverableError();
    public static string get_Profiler_Api_InvalidCallSequence();
    public static string get_Profiler_Api_NotImplemented();
    public static string get_Profiler_Api_RequestedNotCalled();
    public static string get_CommandProcessor_Alert_MessageWithHr();
    public static string get_Profiler_SaveSnapshot_ActionText();
    public static string get_Profiler_LocateSnapshot_ActionText();
    public static string get_Profiler_CloseSnapshot_ActionText();
    public static string get_Configurations_Templates_Sampling();
    public static string get_Configurations_Templates_ExperimentalSampling();
    public static string get_Configurations_Templates_Tracing();
    public static string get_Configurations_Templates_LineByLine();
    public static string get_Configurations_Templates_Timeline();
    public static string get_Configurations_Templates_TimelineMono();
    public static string get_Configurations_Templates_TimelineUnity();
    public static string get_Configurations_Templates_MemoryFull();
    public static string get_Configurations_Templates_MemorySampled();
    public static string get_SnapshotOpening_SomeFilesAreNotFound();
    public static string get_SnapshotOpening_UnsupportedSnapshotFormat();
    public static string get_SnapshotOpening_IndexFileIsCorrupted();
    public static string get_SnapshotOpening_Reading();
    public static string get_NewRunCfg_ChooseAppType();
    public static string get_NewRunCfg_AppType_Standalone_Header();
    public static string get_NewRunCfg_AppType_NetCore_Header();
    public static string get_NewRunCfg_AppType_IIS_Header();
    public static string get_NewRunCfg_AppType_IISExpress_Header();
    public static string get_NewRunCfg_AppType_WinService_Header();
    public static string get_NewRunCfg_AppType_WCF_Header();
    public static string get_NewRunCfg_AppType_WinRT_Header();
    public static string get_NewRunCfg_AppType_NetProcess_Header();
    public static string get_NewRunCfg_AppType_Mono_Header();
    public static string get_NewRunCfg_AppType_Unity_Header();
    public static string get_NewRunCfg_AppType_WinService_Description();
    public static string get_NewRunCfg_AppType_NetCore_Description();
    public static string get_NewRunCfg_AppType_Mono_Description();
    public static string get_NewRunCfg_AppType_IISExpress_Description();
    public static string get_NewRunCfg_AppType_IIS_Description();
    public static string get_NewRunCfg_AppType_WCF_Description();
    public static string get_NewRunCfg_AppType_Unity_Description();
    public static string get_NewRunCfg_AppType_WinRT_Description();
    public static string get_NewRunCfg_AppType_NetProcess_Description();
    public static string get_NewRunCfg_RunningProcess_AppType_Standalone_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_WinService_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_NetCore_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_Mono_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_IISExpress_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_IIS_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_WCF_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_Unity_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_WinRT_Header();
    public static string get_NewRunCfg_RunningProcess_AppType_NetProcess_Header();
    public static string get_NewRunCfg_EnvVar_Hint();
    public static string get_NewRunCfg_Path_Label();
    public static string get_NewRunCfg_Arguments_Label();
    public static string get_NewRunCfg_WorkingDir_Label();
    public static string get_NewRunCfg_OpenUrl_Label();
    public static string get_NewRunCfg_InBrowser_Label();
    public static string get_NewRunCfg_CfgName_Label();
    public static string get_IISExpress_RandomPort();
    public static string get_NewRunCfg_UnityArg_Hint();
    public static string get_WcfHost_ConfigPath();
    public static string get_WcfHost_ClientArgs();
    public static string get_NewRunCfg_Package_Label();
    public static string get_NewRunCfg_NetProcessDescription();
    public static string get_NewRunCfg_RefreshBtn();
    public static string get_NewRunCfg_WinTitle();
    public static string get_NewRunCfg_BackBtn();
    public static string get_NewRunCfg_SaveBtn();
    public static string get_NewRunCfg_CancelBtn();
    public static string get_NewRunCfg_NextBtn();
    public static string get_Profiling_Progress_WaitingForEvents();
    public static string get_Profiling_Progress_ResolvingCallTree();
    public static string get_Profiling_Progress_ResolvingSymbols();
    public static string get_Profiling_Progress_SnapshotSaving();
    public static string get_Profiling_Progress_ProcessingObjects();
    public static string get_Profiling_Progress_ProcessingRoots();
    public static string get_FilterProcessCaption();
    public static string get_Label_EverythingFilter();
    public static string get_StandaloneCaption();
    public static string get_IncludePatternFilters();
    public static string get_ExcludePatternFilters();
    public static string get_AttributeFilters();
    public static string get_ProfilingFiltersTitle();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.UiExtensions.ProcessInfoHelpers : object {
    [ExtensionAttribute]
public static string GetPresentableName(ProcessInfo pi);
    public static string GetPresentableName(string processName, string commandLine);
    [LocalizableAttribute("False")]
public static string ExtractLaunchedApplicationFromArguments(string processNameNoExt, string commandLine);
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.ICoverageProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IMemoryProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IPerformanceProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IRemoteProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.ITimelineProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IWinFormsUIProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IWpfUIProfilerZone {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
