public static class JetBrains.dotCover.Shared.ConsoleTools.ConsoleGreeting : object {
    public static string Copyright;
    private static string ourBuild;
    private static string ourRuntime;
    private static ConsoleGreeting();
    public static string GetGreeting(string entryPointName);
}
[ShellComponentAttribute]
internal class JetBrains.dotCover.Shared.CoverageTree.CoverageNodeIconProvider : object {
    private IEnumerable`1<ICoverageNodeKindIconProvider> myNodeKindIconProviders;
    private ICoverageNodeModifierIconProvider myModifierIconProvider;
    private IDictionary`2<Pair`2<CoverageNodeKind, CoverageNodeModifier>, IconId> myCache;
    private ILogger myLogger;
    public CoverageNodeIconProvider(IEnumerable`1<ICoverageNodeKindIconProvider> nodeKindIconProviders, ICoverageNodeModifierIconProvider modifierIconProvider);
    public sealed virtual IconId GetIcon(CoverageNodeKind kind, CoverageNodeModifier modifier);
}
public class JetBrains.dotCover.Shared.CoverageTree.CoverageNodeKind : object {
    private static IDictionary`2<int, CoverageNodeKindData> ourDataDictionary;
    public static CoverageNodeKind Root;
    public static CoverageNodeKind Assembly;
    public static CoverageNodeKind Namespace;
    public static CoverageNodeKind Class;
    public static CoverageNodeKind Interface;
    public static CoverageNodeKind Record;
    public static CoverageNodeKind Method;
    public static CoverageNodeKind LocalFunction;
    public static CoverageNodeKind Property;
    public static CoverageNodeKind AutoProperty;
    public static CoverageNodeKind Event;
    public static CoverageNodeKind Indexer;
    public static CoverageNodeKind Constructor;
    public static CoverageNodeKind AnonymousMethod;
    public static CoverageNodeKind OwnCoverage;
    public static CoverageNodeKind ExtensionMethod;
    public static CoverageNodeKind InternalCompiledMethod;
    public static CoverageNodeKind PropertyGetter;
    public static CoverageNodeKind PropertySetter;
    public static CoverageNodeKind PropertyInitOnlySetter;
    public static CoverageNodeKind EventAdder;
    public static CoverageNodeKind EventRemover;
    public static CoverageNodeKind EventRaiser;
    public static CoverageNodeKind UnresolvedStateMachineMethod;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public byte Priority { get; }
    public bool IsAssembly { get; }
    public bool IsType { get; }
    public bool IsTypeMember { get; }
    public bool IsFunction { get; }
    public CoverageNodeKind(int id);
    private static CoverageNodeKind();
    [CompilerGeneratedAttribute]
public int get_Id();
    protected static CoverageNodeKind CreateCoverageNodeKind(string name, byte priority, bool isAssembly, bool isType, bool isTypeMember, bool isFunction);
    public byte get_Priority();
    public bool get_IsAssembly();
    public bool get_IsType();
    public bool get_IsTypeMember();
    public bool get_IsFunction();
    public sealed virtual bool Equals(CoverageNodeKind other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(CoverageNodeKind left, CoverageNodeKind right);
    public static bool op_Inequality(CoverageNodeKind left, CoverageNodeKind right);
    private static int GetCoverageNodeKindIdByName(string name);
}
[ShellComponentAttribute]
public class JetBrains.dotCover.Shared.CoverageTree.CoverageNodeKindIconProvider : CoverageNodeKindIconProviderBase {
    private static IDictionary`2<CoverageNodeKind, IconId> ourIcons;
    private static CoverageNodeKindIconProvider();
}
public class JetBrains.dotCover.Shared.CoverageTree.CoverageNodeKindIconProviderBase : object {
    private IDictionary`2<CoverageNodeKind, IconId> myIcons;
    [CompilerGeneratedAttribute]
private IconId <Undefined>k__BackingField;
    public IconId Undefined { get; }
    protected IEnumerable`1<IconId> AllIconIds { get; }
    protected CoverageNodeKindIconProviderBase(IDictionary`2<CoverageNodeKind, IconId> icons);
    [CompilerGeneratedAttribute]
public virtual IconId get_Undefined();
    public sealed virtual bool TryGetIcon(CoverageNodeKind kind, IconId& iconId);
    protected IEnumerable`1<IconId> get_AllIconIds();
}
[FlagsAttribute]
[DataContractAttribute]
public enum JetBrains.dotCover.Shared.CoverageTree.CoverageNodeModifier : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CoverageNodeModifier None;
    [EnumMemberAttribute]
public static CoverageNodeModifier WriteAccess;
    [EnumMemberAttribute]
public static CoverageNodeModifier Static;
    [EnumMemberAttribute]
public static CoverageNodeModifier Private;
    [EnumMemberAttribute]
public static CoverageNodeModifier Protected;
    [EnumMemberAttribute]
public static CoverageNodeModifier Internal;
    [EnumMemberAttribute]
public static CoverageNodeModifier ProtectedInternal;
    [EnumMemberAttribute]
public static CoverageNodeModifier Public;
}
[ShellComponentAttribute]
public class JetBrains.dotCover.Shared.CoverageTree.CoverageNodeModifierIconProvider : object {
    private IDictionary`2<CoverageNodeModifier, IconId> myModifierIcons;
    public IEnumerable`1<CoverageNodeModifier> KnownModifiers { get; }
    public sealed virtual IEnumerable`1<CoverageNodeModifier> get_KnownModifiers();
    public sealed virtual IconId GetIcon(CoverageNodeModifier modifier);
}
public interface JetBrains.dotCover.Shared.CoverageTree.ICoverageNodeIconProvider {
    public abstract virtual IconId GetIcon(CoverageNodeKind kind, CoverageNodeModifier modifier);
}
public interface JetBrains.dotCover.Shared.CoverageTree.ICoverageNodeKindIconProvider {
    public IconId Undefined { get; }
    public abstract virtual IconId get_Undefined();
    public abstract virtual bool TryGetIcon(CoverageNodeKind kind, IconId& iconId);
}
public interface JetBrains.dotCover.Shared.CoverageTree.ICoverageNodeModifierIconProvider {
    public IEnumerable`1<CoverageNodeModifier> KnownModifiers { get; }
    public abstract virtual IEnumerable`1<CoverageNodeModifier> get_KnownModifiers();
    public abstract virtual IconId GetIcon(CoverageNodeModifier modifier);
}
public class JetBrains.dotCover.Shared.CoverageTree.SolutionBasedCoverageNodeKind : CoverageNodeKind {
    public static CoverageNodeKind SolutionRoot;
    public static CoverageNodeKind SolutionFolder;
    public static CoverageNodeKind Project;
    private static SolutionBasedCoverageNodeKind();
}
[ShellComponentAttribute]
public class JetBrains.dotCover.Shared.CoverageTree.SolutionBasedCoverageNodeKindIconProvider : CoverageNodeKindIconProviderBase {
    private static IDictionary`2<CoverageNodeKind, IconId> ourIcons;
    private static SolutionBasedCoverageNodeKindIconProvider();
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.Shared.CoverageTree.ZoneMarker : object {
}
public interface JetBrains.dotCover.Shared.DotCoverHost.IDotCoverHost {
    public abstract virtual ILightContainer GetContainer();
    public abstract virtual void RunMessageLoop();
    public abstract virtual void RequestShutdown();
}
public class JetBrains.dotCover.Shared.DotCoverHost.ShellBasedHost : object {
    private IList`1<IJetHostMixin> myMixins;
    public ShellBasedHost(Type environmentZone, IHostCommandLine commandLine, IJetHostMixin[] additionalMixins);
    public sealed virtual ILightContainer GetContainer();
    public sealed virtual void RunMessageLoop();
    public sealed virtual void RequestShutdown();
    [CompilerGeneratedAttribute]
private object <.ctor>b__1_1();
}
public class JetBrains.dotCover.Shared.DotCoverHost.SimpleHost : object {
    private Lifetime myLifetime;
    private IModifiableContainer myContainer;
    private IProperty`1<bool> myShutdownRequested;
    public SimpleHost(Lifetime lifetime);
    public sealed virtual ILightContainer GetContainer();
    public IModifiableContainer GetModifiableContainer();
    public sealed virtual void RunMessageLoop();
    public sealed virtual void RequestShutdown();
}
[EnvironmentComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.dotCover.Shared.DummyEnvironmentComponent : object {
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotCover.Shared.IDotCoverFeatureZone {
}
[ZoneDefinitionAttribute]
[ZoneDefinitionProductAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("dotCover", ".NET unit test runner and code coverage tool", "True")]
[ZoneLicenseAttribute("2580547157951247273676517266823712873503005138864249708837")]
public interface JetBrains.dotCover.Shared.IDotCoverProductZone {
}
[LicensedEntityIconsAttribute("JetBrains.dotCover.Shared.Resources.DotCoverProductThemedIcons/DotCoverLicense", "JetBrains.dotCover.Shared.Resources.DotCoverProductThemedIcons/DotCoverLicense")]
public abstract class JetBrains.dotCover.Shared.License.DotCoverLicensedEntity : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISupportsLicenseServer> <LicenseServer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISupportsJetBrainsAccount> <JetBrainsAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserLicenseChecker> <UserLicenseCheckers>k__BackingField;
    public string TechnicalName { get; }
    public string PresentableName { get; }
    public Version EntityVersion { get; }
    public string EntityMarketingVersionString { get; }
    public string PurchaseUrl { get; }
    public string ProductCode { get; }
    public ISupportsEvaluation Evaluation { get; }
    public ISupportsUserLicense UserLicense { get; }
    public IEnumerable`1<ISupportsLicenseServer> LicenseServer { get; }
    public IEnumerable`1<ISupportsJetBrainsAccount> JetBrainsAccount { get; }
    public string ProductGuid { get; }
    public IEnumerable`1<string> Signatures { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public EvaluationUsageMode Mode { get; }
    public IList`1<Pair`2<string, string>> OptInSubscriptions { get; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public IEnumerable`1<UserLicenseChecker> UserLicenseCheckers { get; }
    protected DotCoverLicensedEntity(bool preferUltimateLicenseOverProductLicense);
    public sealed virtual string get_TechnicalName();
    public sealed virtual string get_PresentableName();
    public sealed virtual Version get_EntityVersion();
    public sealed virtual string get_EntityMarketingVersionString();
    public sealed virtual string get_PurchaseUrl();
    public sealed virtual string get_ProductCode();
    public virtual ISupportsEvaluation get_Evaluation();
    public virtual ISupportsUserLicense get_UserLicense();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<ISupportsLicenseServer> get_LicenseServer();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<ISupportsJetBrainsAccount> get_JetBrainsAccount();
    public abstract virtual string get_ProductGuid();
    public abstract virtual IEnumerable`1<string> get_Signatures();
    public sealed virtual int get_FreeTrialPeriod();
    public sealed virtual int get_FeedbackRequestPeriod();
    public sealed virtual int get_LeftDaysNotification();
    public virtual EvaluationUsageMode get_Mode();
    public sealed virtual IList`1<Pair`2<string, string>> get_OptInSubscriptions();
    public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    public sealed virtual bool get_DoCheckLicenseReuseOverNetwork();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<UserLicenseChecker> get_UserLicenseCheckers();
    public sealed virtual string GetLicenseAgreement(LicenseType licenseType);
    private static T[] InvertIfRequired(bool invert, T[] source);
    protected static string CreateProductGuid(ApplicationPackageArtifact apppkg);
}
public abstract class JetBrains.dotCover.Shared.License.LiberalDotCoverLicensedEntity : DotCoverLicensedEntity {
    public ISupportsEvaluation Evaluation { get; }
    public ISupportsUserLicense UserLicense { get; }
    public IEnumerable`1<ISupportsLicenseServer> LicenseServer { get; }
    public IEnumerable`1<ISupportsJetBrainsAccount> JetBrainsAccount { get; }
    public string ProductGuid { get; }
    public virtual ISupportsEvaluation get_Evaluation();
    public virtual ISupportsUserLicense get_UserLicense();
    public virtual IEnumerable`1<ISupportsLicenseServer> get_LicenseServer();
    public virtual IEnumerable`1<ISupportsJetBrainsAccount> get_JetBrainsAccount();
    public virtual string get_ProductGuid();
}
public class JetBrains.dotCover.Shared.LightContainer.ContainerInitializer : object {
    private IList`1<SyncInitializerEntry> mySyncEntries;
    private IList`1<AsyncInitializerEntry> myAsyncEntries;
    private int myProgressEntriesNumber;
    public sealed virtual void AddInitAction(Action action, int priority);
    public sealed virtual void AddAsyncInitAction(Func`1<Task> asyncAction, int priority);
    public sealed virtual void AddAsyncInitAction(Func`2<IProgressIndicator, Task> asyncAction, int priority);
    public void Init();
    public Task InitAsync(IProgressIndicator progress);
}
public interface JetBrains.dotCover.Shared.LightContainer.IContainerInitializer {
    public abstract virtual void AddInitAction(Action action, int priority);
    public abstract virtual void AddAsyncInitAction(Func`1<Task> asyncAction, int priority);
    public abstract virtual void AddAsyncInitAction(Func`2<IProgressIndicator, Task> asyncAction, int priority);
}
public interface JetBrains.dotCover.Shared.LightContainer.ILightContainer {
    [NotNullAttribute]
public abstract virtual object GetComponent(Type interfaceType);
    [CanBeNullAttribute]
public abstract virtual object TryGetComponent(Type interfaceType);
    [NotNullAttribute]
public abstract virtual TInterface GetComponent();
    [CanBeNullAttribute]
public abstract virtual TInterface TryGetComponent();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<object> GetComponents(Type interfaceType);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<TInterface> GetComponents();
}
public interface JetBrains.dotCover.Shared.LightContainer.IModifiableContainer {
    public abstract virtual void AddComponent(object component);
}
public class JetBrains.dotCover.Shared.LightContainer.ShellBasedContainer : object {
    [CompilerGeneratedAttribute]
private IComponentContainer <ComponentContainer>k__BackingField;
    public IComponentContainer ComponentContainer { get; }
    public ShellBasedContainer(IComponentContainer container);
    public sealed virtual object GetComponent(Type interfaceType);
    public sealed virtual object TryGetComponent(Type interfaceType);
    public sealed virtual TInterface GetComponent();
    public sealed virtual TInterface TryGetComponent();
    public sealed virtual IReadOnlyCollection`1<object> GetComponents(Type interfaceType);
    public sealed virtual IReadOnlyCollection`1<TInterface> GetComponents();
    [CompilerGeneratedAttribute]
public IComponentContainer get_ComponentContainer();
}
[ShellComponentAttribute]
internal class JetBrains.dotCover.Shared.LightContainer.ShellContainerWrapper : ShellBasedContainer {
    public ShellContainerWrapper(IComponentContainer shellContainer);
}
public class JetBrains.dotCover.Shared.LightContainer.SimpleContainer : object {
    private ILightContainer myParentContainer;
    private IDictionary`2<Type, List`1<object>> myDictionary;
    public SimpleContainer(ILightContainer parentContainer);
    public sealed virtual void AddComponent(object component);
    private void AddComponent(Type interfaceType, object component);
    public sealed virtual IReadOnlyCollection`1<object> GetComponents(Type interfaceType);
    public sealed virtual object TryGetComponent(Type interfaceType);
    public sealed virtual object GetComponent(Type interfaceType);
    public sealed virtual TInterface GetComponent();
    public sealed virtual TInterface TryGetComponent();
    public sealed virtual IReadOnlyCollection`1<TInterface> GetComponents();
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.Shared.LightContainer.ZoneMarker : object {
}
public static class JetBrains.dotCover.Shared.Logging.DotCoverLoggerInitializer : object {
    public static string LogFileKey;
    public static string LogLevelKey;
    public static void Initialize(string entryPointName, FileSystemPath startupDirectory, string logsSubFolder, string logFile, string logLevel);
}
public interface JetBrains.dotCover.Shared.Logging.ILoggerProvider {
    public abstract virtual ILogger GetLogger(Type callerType);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Logging.LoggerExtensions : object {
    [ExtensionAttribute]
public static void LogAggregatedException(ILogger logger, AggregateException exception, bool silently);
}
[ShellComponentAttribute]
public class JetBrains.dotCover.Shared.Logging.LoggerProvider : object {
    public sealed virtual ILogger GetLogger(Type callerType);
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.Shared.Logging.ZoneMarker : object {
}
public class JetBrains.dotCover.Shared.Progress.ThreadSafeProgressIndicator : object {
    private object mySyncObj;
    private IProgressIndicator myInternalProgress;
    public string CurrentItemText { get; public set; }
    public bool IsCanceled { get; }
    public string TaskName { get; public set; }
    public ThreadSafeProgressIndicator(IProgressIndicator internalProgress);
    public sealed virtual void Dispose();
    public sealed virtual string get_CurrentItemText();
    public sealed virtual void set_CurrentItemText(string value);
    public sealed virtual bool get_IsCanceled();
    public sealed virtual string get_TaskName();
    public sealed virtual void set_TaskName(string value);
    public sealed virtual void Advance(double units);
    public sealed virtual void Start(int totalWorkUnits);
    public sealed virtual void Stop();
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.RdProtocol.RdProtocolUtils : object {
    [AsyncStateMachineAttribute("JetBrains.dotCover.Shared.RdProtocol.RdProtocolUtils/<WhenAllConnected>d__0")]
[ExtensionAttribute]
public static Task WhenAllConnected(IReadOnlyCollection`1<RdExtBase> rdExtComponents, Lifetime lifetime, TimeSpan timeout);
}
public class JetBrains.dotCover.Shared.Resources.CoverageTreeModifiersThemedIcons : object {
}
public class JetBrains.dotCover.Shared.Resources.CoverageTreeThemedIcons : object {
}
public class JetBrains.dotCover.Shared.Resources.DotCoverProductThemedIcons : object {
}
public class JetBrains.dotCover.Shared.Resources.SolutionBasedCoverageTreeThemedIcons : object {
}
public static class JetBrains.dotCover.Shared.RiderPlugin.RiderPluginAssemblyResolver : object {
    public static string ADDITIONAL_PROBING_PATHS_ENV_VAR;
    private static List`1<string> ourAdditionalProbingPaths;
    private static RiderPluginAssemblyResolver();
    public static Assembly Resolve(object sender, ResolveEventArgs eventArgs);
}
internal static class JetBrains.dotCover.Shared.SimpleContainer.SharedComponentsFactory : object {
    public static void AddShellComponents(IModifiableContainer container);
}
public static class JetBrains.dotCover.Shared.TargetFrameworks.TargetFrameworkComparer : object {
    public static IEqualityComparer`1<TargetFrameworkId> IgnoreTargetPlatform;
    public static IEqualityComparer`1<TargetFrameworkId> DefaultPlatformVersionsAware;
    private static TargetFrameworkComparer();
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.TargetFrameworks.TargetFrameworkPresentableNameProvider : object {
    private static string UndefinedNetFramework;
    [ExtensionAttribute]
public static string GetShortName(TargetFrameworkId id);
    [ExtensionAttribute]
public static string GetFullName(TargetFrameworkId id);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Tasks.TaskExtensions : object {
    [ExtensionAttribute]
public static void LogOnFaulted(Task task, ILogger logger, bool silently);
    [ExtensionAttribute]
public static Task WithLogOnFaulted(Task task, ILogger logger, bool silently);
    [ExtensionAttribute]
public static Task`1<TToRes> ConvertResult(Task`1<TFromRes> task, Func`2<TFromRes, TToRes> converter);
    [ExtensionAttribute]
public static TTask AttachToParentWithExceptionPropagation(TTask task);
    [ExtensionAttribute]
public static Task ContinueWithExceptionPropagation(Task`1<TTaskRes> task, Action`1<TTaskRes> action, CancellationToken cancellationToken, TaskScheduler scheduler);
    [ExtensionAttribute]
public static Task`1<TActionRes> ContinueWithExceptionPropagation(Task task, Func`1<TActionRes> action, CancellationToken cancellationToken, TaskScheduler scheduler);
    [ExtensionAttribute]
public static Task`1<TActionRes> ContinueWithExceptionPropagation(Task`1<TTaskRes> task, Func`2<TTaskRes, TActionRes> action, CancellationToken cancellationToken, TaskScheduler scheduler);
    public static Task WhenAllIfAnyRanToCompletion(Task[] tasks);
    [ExtensionAttribute]
public static void FlowInto(Task`1<TTaskResult> task, TaskCompletionSource`1<TTaskResult> taskCompletionSource, TaskScheduler scheduler);
}
public class JetBrains.dotCover.Shared.Tasks.TaskGroup : object {
    private Task[] myTaskQueues;
    public TaskGroup(UInt32 maxParallelTasksCount);
    public Task`1<TResult> AddTask(Func`1<Task`1<TResult>> startTask);
}
public class JetBrains.dotCover.Shared.Tasks.TaskSequentialSync : object {
    private TaskScheduler myTaskScheduler;
    private object mySyncObj;
    private Task myLastTask;
    public TaskSequentialSync(TaskScheduler taskScheduler);
    public Task Add(Func`1<Task> run);
    public Task Add(Lifetime lifetime, Func`1<Task> run);
    public Task Add(Action action);
    public Task Add(Lifetime lifetime, Action action);
}
public interface JetBrains.dotCover.Shared.TypedContext.ITypedContext {
    public abstract virtual bool HasValue();
    public abstract virtual TValue GetValue();
    [CanBeNullAttribute]
public abstract virtual TValue TryGetValue();
    public abstract virtual bool TryGetValue(TValue& value);
}
public class JetBrains.dotCover.Shared.TypedContext.TypedContext : object {
    private IDictionary`2<Type, object> myDictionary;
    public sealed virtual bool HasValue();
    public sealed virtual TValue GetValue();
    public sealed virtual bool TryGetValue(TValue& value);
    public sealed virtual TValue TryGetValue();
    public void AddValue(object value);
}
public static class JetBrains.dotCover.Shared.Utils.CoveragePercentCalculator : object {
    public static int GetCoveragePercent(long totalStatements, long coveredStatements);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Utils.ExceptionExtension : object {
    [ExtensionAttribute]
public static T ThrowIfNull(T obj, string message);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Utils.TimeSpanExtensions : object {
    [ExtensionAttribute]
public static TimeSpan SubtractElapsedTime(TimeSpan span, Stopwatch stopwatch);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Utils.XmlDocumentExtensions : object {
    [ExtensionAttribute]
public static string ToFormattedString(XmlDocument xmlDocument);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
