[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class JetBrains.Rd.Base.AllowBindCookie : ValueType {
    private bool myCreated;
    [ThreadStaticAttribute]
public static int IsBindAllowedCount;
    public static bool IsBindAllowed { get; }
    public static bool IsBindNotAllowed { get; }
    private AllowBindCookie(bool created);
    public static bool get_IsBindAllowed();
    public static bool get_IsBindNotAllowed();
    public static AllowBindCookie Create();
    public void Dispose();
}
public enum JetBrains.Rd.Base.BindState : Enum {
    public int value__;
    public static BindState NotBound;
    public static BindState PreBound;
    public static BindState Bound;
}
internal class JetBrains.Rd.Base.ExtWire : object {
    internal ViewableProperty`1<bool> Connected;
    public IWire RealWire;
    private Queue`1<QueueItem> mySendQ;
    public bool IsStub { get; }
    public ProtocolContexts Contexts { get; public set; }
    public sealed virtual bool get_IsStub();
    public sealed virtual ProtocolContexts get_Contexts();
    public sealed virtual void set_Contexts(ProtocolContexts value);
    public sealed virtual void Send(RdId id, TContext param, Action`2<TContext, UnsafeWriter> writer);
    public sealed virtual void Advise(Lifetime lifetime, IRdWireable entity);
    public sealed virtual IRdWireable TryGetById(RdId rdId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(Lifetime _);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface JetBrains.Rd.Base.IPerContextMap`2 {
    public RdContext`1<K> Context { get; }
    public V Item { get; }
    public abstract virtual RdContext`1<K> get_Context();
    public abstract virtual V GetForCurrentContext();
    public abstract virtual void View(Lifetime lifetime, Action`2<Lifetime, KeyValuePair`2<K, V>> handler);
    public abstract virtual void View(Lifetime lifetime, Action`3<Lifetime, K, V> handler);
    public abstract virtual V get_Item(K key);
    public abstract virtual bool TryGetValue(K key, V& value);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Base.IPrintable {
    public abstract virtual void Print(PrettyPrinter printer);
}
public interface JetBrains.Rd.Base.IRdBindable {
    public RdId RdId { get; public set; }
    public abstract virtual RdId get_RdId();
    public abstract virtual void set_RdId(RdId value);
    [NullableContextAttribute("1")]
public abstract virtual void PreBind(Lifetime lf, IRdDynamic parent, string name);
    public abstract virtual void Bind();
    [NullableContextAttribute("1")]
public abstract virtual void Identify(IIdentities identities, RdId id);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Base.IRdDynamic {
    public RName Location { get; }
    public abstract virtual RName get_Location();
    [NullableContextAttribute("2")]
public abstract virtual IProtocol TryGetProto();
    public abstract virtual bool TryGetSerializationContext(SerializationCtx& ctx);
}
public interface JetBrains.Rd.Base.IRdReactive {
    public bool Async { get; public set; }
    public abstract virtual bool get_Async();
    public abstract virtual void set_Async(bool value);
}
public interface JetBrains.Rd.Base.IRdWireable {
    public RdId RdId { get; }
    public abstract virtual RdId get_RdId();
    [NullableContextAttribute("1")]
public abstract virtual void OnWireReceived(UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Base.IRdWireableDispatchHelper {
    public RdId RdId { get; }
    public Lifetime Lifetime { get; }
    public abstract virtual RdId get_RdId();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual void Dispatch(Lifetime lifetime, IScheduler scheduler, Action action);
}
[NullableContextAttribute("1")]
internal interface JetBrains.Rd.Base.ISingleContextHandler {
    public RdContextBase ContextBase { get; }
    public abstract virtual void WriteValue(SerializationCtx context, UnsafeWriter writer);
    public abstract virtual void RegisterValueInValueSet();
    public abstract virtual object ReadValueBoxed(SerializationCtx context, UnsafeReader reader);
    public abstract virtual RdContextBase get_ContextBase();
}
[NullableContextAttribute("1")]
internal interface JetBrains.Rd.Base.ISingleContextHandler`1 {
    public RdContext`1<T> Context { get; }
    public abstract virtual RdContext`1<T> get_Context();
    public abstract virtual T ReadValue(SerializationCtx context, UnsafeReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Base.PrintableEx : object {
    [ExtensionAttribute]
public static void PrintEx(object me, PrettyPrinter printer);
    [ExtensionAttribute]
public static string PrintToString(object me);
    [ExtensionAttribute]
public static string PrintToStringNoLimits(object me);
}
public class JetBrains.Rd.Base.ProtocolNotBoundException : Exception {
    [NullableContextAttribute("1")]
public ProtocolNotBoundException(string id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.Rd.Base.RdBindableBase : object {
    [CompilerGeneratedAttribute]
private RdId <RdId>k__BackingField;
    internal static RName NotBound;
    [CompilerGeneratedAttribute]
private RName <Location>k__BackingField;
    [NullableAttribute("2")]
protected IRdDynamic Parent;
    private Lifetime myBindLifetime;
    [CompilerGeneratedAttribute]
private BindState <BindState>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected List`1<KeyValuePair`2<string, object>> BindableChildren;
    private IDictionary`2<string, object> myExtensions;
    public RdId RdId { get; public set; }
    public RName Location { get; private set; }
    public bool IsBound { get; }
    public BindState BindState { get; private set; }
    [NullableAttribute("2")]
public RdExtBase ContainingExt { get; }
    protected string ShortName { get; }
    private static RdBindableBase();
    [CompilerGeneratedAttribute]
public sealed virtual RdId get_RdId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RdId(RdId value);
    [CompilerGeneratedAttribute]
public sealed virtual RName get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(RName value);
    public bool get_IsBound();
    [CompilerGeneratedAttribute]
public BindState get_BindState();
    [CompilerGeneratedAttribute]
private void set_BindState(BindState value);
    [NullableContextAttribute("2")]
public virtual IProtocol TryGetProto();
    public virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    [NullableContextAttribute("2")]
public RdExtBase get_ContainingExt();
    public sealed virtual void PreBind(Lifetime lf, IRdDynamic parent, string name);
    public sealed virtual void Bind();
    protected virtual void Unbind();
    public sealed virtual void OnTermination(Lifetime lifetime);
    protected virtual void AssertBindingThread();
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
    protected virtual void PreInitBindableFields(Lifetime lifetime);
    protected virtual void InitBindableFields(Lifetime lifetime);
    public virtual void Identify(IIdentities identities, RdId id);
    public virtual RdBindableBase FindByRName(RName rName);
    protected virtual string get_ShortName();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
    public T GetExtension(string name);
    public T GetOrCreateExtension(string name, Func`1<T> create);
    internal T GetOrCreateHighPriorityExtension(string name, Func`1<T> create);
    private T GetOrCreateExtension(string name, bool highPriorityExtension, Func`1<T> create);
    public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Base.RdBindableEx : object {
    [ExtensionAttribute]
internal static void PreBindPolymorphic(object value, Lifetime lifetime, IRdDynamic parent, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static void BindPolymorphic(object value);
    [ExtensionAttribute]
internal static bool IsBindable(T obj);
    [ExtensionAttribute]
private static void PreBind0(IEnumerable items, Lifetime lifetime, IRdDynamic parent, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static void Bind0(IEnumerable items);
    [ExtensionAttribute]
public static void PreBindEx(T value, Lifetime lifetime, IRdDynamic parent, string name);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void BindEx(T value);
    [ExtensionAttribute]
public static void BindTopLevel(T value, Lifetime lifetime, IProtocol parent, string name);
    [ExtensionAttribute]
internal static void IdentifyPolymorphic(object value, IIdentities ids, RdId id);
    [ExtensionAttribute]
private static void Identify0(IEnumerable items, IIdentities ids, RdId id);
    [ExtensionAttribute]
public static void IdentifyEx(T value, IIdentities ids, RdId id);
    [ExtensionAttribute]
public static void IdentifyEx(List`1<T> items, IIdentities ids, RdId id);
    [ExtensionAttribute]
public static void IdentifyEx(T[] items, IIdentities ids, RdId id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Base.RdDelegateBase`1 : object {
    [CompilerGeneratedAttribute]
private T <Delegate>k__BackingField;
    public T Delegate { get; }
    public RName Location { get; }
    public RdId RdId { get; public set; }
    public RdDelegateBase`1(T delegate);
    [CompilerGeneratedAttribute]
public T get_Delegate();
    [NullableContextAttribute("2")]
public sealed virtual IProtocol TryGetProto();
    public sealed virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    public sealed virtual RName get_Location();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual void PreBind(Lifetime lf, IRdDynamic parent, string name);
    public virtual void Bind();
    public sealed virtual void Identify(IIdentities identities, RdId id);
    public sealed virtual RdId get_RdId();
    public sealed virtual void set_RdId(RdId value);
}
[ExtensionAttribute]
public static class JetBrains.Rd.Base.RdDynamicEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IProtocol GetProtoOrThrow(IRdDynamic dynamic);
}
public abstract class JetBrains.Rd.Base.RdExtBase : RdReactiveBase {
    private ExtWire myExtWire;
    [CanBeNullAttribute]
private IProtocol myExtProtocol;
    public IReadonlyProperty`1<bool> Connected;
    protected Action`1<ISerializers> Register { get; }
    protected long SerializationHash { get; }
    protected string ShortName { get; }
    public sealed virtual IProtocol TryGetProto();
    protected abstract virtual Action`1<ISerializers> get_Register();
    protected virtual long get_SerializationHash();
    protected virtual void PreInit(Lifetime lifetime, IProtocol parentProto);
    protected virtual void Init(Lifetime lifetime, IProtocol parentProto, SerializationCtx ctx);
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    private void SendState(IWire parentWire, ExtState state);
    protected virtual void InitBindableFields(Lifetime lifetime);
    protected virtual string get_ShortName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(Lifetime lifetime, IProtocol proto);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
}
public abstract class JetBrains.Rd.Base.RdReactiveBase : RdBindableBase {
    [NullableAttribute("1")]
internal static ILog ourLogReceived;
    [NullableAttribute("1")]
internal static ILog ourLogSend;
    [CompilerGeneratedAttribute]
private bool <Async>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueCanBeNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocalChange>k__BackingField;
    internal static Nullable`1<LogWithLevel> ReceiveTrace { get; }
    internal static Nullable`1<LogWithLevel> SendTrace { get; }
    public bool Async { get; public set; }
    public bool ValueCanBeNull { get; public set; }
    public bool IsLocalChange { get; protected set; }
    private static RdReactiveBase();
    internal static Nullable`1<LogWithLevel> get_ReceiveTrace();
    internal static Nullable`1<LogWithLevel> get_SendTrace();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Async();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Async(bool value);
    [AssertionMethodAttribute]
protected virtual void AssertThreading();
    [CompilerGeneratedAttribute]
public bool get_ValueCanBeNull();
    [CompilerGeneratedAttribute]
public void set_ValueCanBeNull(bool value);
    [NullableContextAttribute("1")]
protected internal void AssertNullability(T value);
    [AssertionMethodAttribute]
protected void AssertBound();
    [CompilerGeneratedAttribute]
public bool get_IsLocalChange();
    [CompilerGeneratedAttribute]
protected void set_IsLocalChange(bool value);
    protected internal ThreadLocalDebugInfo UsingDebugInfo();
    protected internal LocalChangeCookie UsingLocalChange();
    [NullableContextAttribute("1")]
public sealed virtual void OnWireReceived(UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    [NullableContextAttribute("1")]
public abstract virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Base.RdReactiveEx : object {
    [ExtensionAttribute]
public static void SetValue(IViewableProperty`1<T> p, T value);
    [ExtensionAttribute]
public static void Set(IViewableProperty`1<T> p, T value);
    [ExtensionAttribute]
public static T WithId(T thIs, RdId id);
    [ExtensionAttribute]
public static T Static(T thIs, int id);
    [ExtensionAttribute]
public static T WithIdFromName(T thIs, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Base.RdWireableDispatchHelperEx : object {
    [ExtensionAttribute]
public static void Dispatch(IRdWireableDispatchHelper helper, Lifetime lifetime, Action action);
    [ExtensionAttribute]
public static void Dispatch(IRdWireableDispatchHelper helper, IScheduler scheduler, Action action);
    [ExtensionAttribute]
public static void Dispatch(IRdWireableDispatchHelper helper, Action action);
}
public class JetBrains.Rd.CtxReadDelegate`1 : MulticastDelegate {
    public CtxReadDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke(SerializationCtx ctx, UnsafeReader reader);
    public virtual IAsyncResult BeginInvoke(SerializationCtx ctx, UnsafeReader reader, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public class JetBrains.Rd.CtxWriteDelegate`1 : MulticastDelegate {
    public CtxWriteDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(SerializationCtx ctx, UnsafeWriter writer, T value);
    public virtual IAsyncResult BeginInvoke(SerializationCtx ctx, UnsafeWriter writer, T value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.ExtCreationInfo : ValueType {
    public RName Name;
    public Nullable`1<RdId> Id;
    public long Hash;
    [NullableAttribute("2")]
public RdExtBase Ext;
    public ExtCreationInfo(RName name, Nullable`1<RdId> id, long hash, RdExtBase ext);
}
public enum JetBrains.Rd.IdKind : Enum {
    public int value__;
    public static IdKind Client;
    public static IdKind Server;
}
public interface JetBrains.Rd.IIdentities {
    public abstract virtual RdId Next(RdId parent);
}
public interface JetBrains.Rd.IInternRoot`1 {
    public abstract virtual InternId TryGetInterned(TBase value);
    public abstract virtual InternId Intern(TBase value);
    public abstract virtual T UnIntern(InternId id);
    public abstract virtual bool TryUnIntern(InternId id, T& result);
    public abstract virtual void Remove(TBase value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class JetBrains.Rd.Impl.AsyncRdMap`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RdMapBackend<K, V> myMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncSignal`1<MapEvent`2<K, V>> mySignal;
    public bool IsMaster;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncSource`1<MapEvent`2<K, V>> Change { get; }
    public RdId RdId { get; public set; }
    public bool OptimizeNested { get; public set; }
    public bool ValueCanBeNull { get; public set; }
    public bool Async { get; public set; }
    public RName Location { get; }
    public V Item { get; public set; }
    public ICollection`1<K> Keys { get; }
    public ICollection`1<V> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [PublicAPIAttribute]
public CtxReadDelegate`1<K> ReadKeyDelegate { get; }
    [PublicAPIAttribute]
public CtxWriteDelegate`1<K> WriteKeyDelegate { get; }
    [PublicAPIAttribute]
public CtxReadDelegate`1<V> ReadValueDelegate { get; }
    [PublicAPIAttribute]
public CtxWriteDelegate`1<V> WriteValueDelegate { get; }
    public AsyncRdMap`2(CtxReadDelegate`1<K> readKey, CtxWriteDelegate`1<K> writeKey, CtxReadDelegate`1<V> readValue, CtxWriteDelegate`1<V> writeValue);
    public IAsyncSource`1<MapEvent`2<K, V>> get_Change();
    public sealed virtual RdId get_RdId();
    public sealed virtual void set_RdId(RdId value);
    public sealed virtual void PreBind(Lifetime lf, IRdDynamic parent, string name);
    public sealed virtual void Bind();
    public sealed virtual void Identify(IIdentities identities, RdId id);
    public bool get_OptimizeNested();
    public void set_OptimizeNested(bool value);
    public bool get_ValueCanBeNull();
    public void set_ValueCanBeNull(bool value);
    public bool get_Async();
    public void set_Async(bool value);
    public sealed virtual RName get_Location();
    [NullableContextAttribute("2")]
public sealed virtual IProtocol TryGetProto();
    public sealed virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    public sealed virtual bool ContainsKey(K key);
    public sealed virtual void Add(K key, V value);
    public sealed virtual bool Remove(K key);
    public sealed virtual bool TryGetValue(K key, V& value);
    public sealed virtual V get_Item(K key);
    public sealed virtual void set_Item(K key, V value);
    public sealed virtual ICollection`1<K> get_Keys();
    public sealed virtual ICollection`1<V> get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K,V>>.Add(KeyValuePair`2<K, V> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<K, V> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<K, V> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<KeyValuePair`2<K, V>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [PublicAPIAttribute]
public static AsyncRdMap`2<K, V> Read(SerializationCtx ctx, UnsafeReader reader);
    [PublicAPIAttribute]
public static AsyncRdMap`2<K, V> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<K> readKey, CtxWriteDelegate`1<K> writeKey, CtxReadDelegate`1<V> readValue, CtxWriteDelegate`1<V> writeValue);
    [PublicAPIAttribute]
public static void Write(SerializationCtx ctx, UnsafeWriter writer, AsyncRdMap`2<K, V> value);
    public CtxReadDelegate`1<K> get_ReadKeyDelegate();
    public CtxWriteDelegate`1<K> get_WriteKeyDelegate();
    public CtxReadDelegate`1<V> get_ReadValueDelegate();
    public CtxWriteDelegate`1<V> get_WriteValueDelegate();
    public sealed virtual void Print(PrettyPrinter printer);
    public sealed virtual void AdviseOn(Lifetime lifetime, IScheduler scheduler, Action`1<MapEvent`2<K, V>> action);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(MapEvent`2<K, V> x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.AsyncRdProperty`1 : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<T> <ReadValueDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<T> <WriteValueDelegate>k__BackingField;
    public bool IsMaster;
    private int myMasterVersion;
    [CompilerGeneratedAttribute]
private RdId <RdId>k__BackingField;
    [CompilerGeneratedAttribute]
private RName <Location>k__BackingField;
    [NullableAttribute("2")]
private IRdDynamic myParent;
    private Lifetime myBindLifetime;
    private ThreadLocal`1<bool> myIsLocalChange;
    [CompilerGeneratedAttribute]
private bool <ValueCanBeNull>k__BackingField;
    private IViewableProperty`1<T> myProperty;
    private AsyncSignal`1<T> myChange;
    public CtxReadDelegate`1<T> ReadValueDelegate { get; private set; }
    public CtxWriteDelegate`1<T> WriteValueDelegate { get; private set; }
    public bool OptimizeNested { get; public set; }
    public bool Async { get; public set; }
    public RdId RdId { get; public set; }
    public RName Location { get; private set; }
    public IAsyncSource`1<T> Change { get; }
    public bool ValueCanBeNull { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Maybe`1<T> Maybe { get; }
    public T Value { get; public set; }
    public AsyncRdProperty`1(CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    [PublicAPIAttribute]
public AsyncRdProperty`1(CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue, T defaultValue);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<T> get_ReadValueDelegate();
    [CompilerGeneratedAttribute]
private void set_ReadValueDelegate(CtxReadDelegate`1<T> value);
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<T> get_WriteValueDelegate();
    [CompilerGeneratedAttribute]
private void set_WriteValueDelegate(CtxWriteDelegate`1<T> value);
    public static AsyncRdProperty`1<T> Read(SerializationCtx ctx, UnsafeReader reader);
    public static AsyncRdProperty`1<T> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    public static void Write(SerializationCtx ctx, UnsafeWriter writer, AsyncRdProperty`1<T> value);
    private void Write(SerializationCtx ctx, UnsafeWriter writer);
    public bool get_OptimizeNested();
    public void set_OptimizeNested(bool value);
    public sealed virtual bool get_Async();
    public sealed virtual void set_Async(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual RdId get_RdId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RdId(RdId value);
    [CompilerGeneratedAttribute]
public sealed virtual RName get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(RName value);
    [NullableContextAttribute("2")]
public sealed virtual IProtocol TryGetProto();
    public sealed virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    public sealed virtual IAsyncSource`1<T> get_Change();
    public sealed virtual void Identify(IIdentities identities, RdId id);
    public sealed virtual void OnTermination(Lifetime lifetime);
    public sealed virtual void PreBind(Lifetime lifetime, IRdDynamic parent, string name);
    public sealed virtual void Bind();
    public sealed virtual void OnWireReceived(UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    [CompilerGeneratedAttribute]
public bool get_ValueCanBeNull();
    [CompilerGeneratedAttribute]
public void set_ValueCanBeNull(bool value);
    private void AssertNullability(T value);
    public sealed virtual Maybe`1<T> get_Maybe();
    public sealed virtual T get_Value();
    public sealed virtual void set_Value(T value);
    public sealed virtual void AdviseOn(Lifetime lifetime, IScheduler scheduler, Action`1<T> action);
    public sealed virtual void Print(PrettyPrinter printer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.AsyncRdSet`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RdSetBackend<T> mySet;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncSignal`1<SetEvent`1<T>> mySignal;
    public bool IsMaster;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncSource`1<SetEvent`1<T>> Change { get; }
    public RdId RdId { get; public set; }
    public bool OptimizeNested { get; public set; }
    public bool ValueCanBeNull { get; public set; }
    public bool Async { get; public set; }
    public RName Location { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public CtxReadDelegate`1<T> ReadValueDelegate { get; }
    public CtxWriteDelegate`1<T> WriteValueDelegate { get; }
    public AsyncRdSet`1(CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    public IAsyncSource`1<SetEvent`1<T>> get_Change();
    public sealed virtual RdId get_RdId();
    public sealed virtual void set_RdId(RdId value);
    public sealed virtual void PreBind(Lifetime lf, IRdDynamic parent, string name);
    public sealed virtual void Bind();
    public sealed virtual void Identify(IIdentities identities, RdId id);
    public bool get_OptimizeNested();
    public void set_OptimizeNested(bool value);
    public bool get_ValueCanBeNull();
    public void set_ValueCanBeNull(bool value);
    public bool get_Async();
    public void set_Async(bool value);
    public sealed virtual RName get_Location();
    [NullableContextAttribute("2")]
public sealed virtual IProtocol TryGetProto();
    public sealed virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ISet<T>.Add(T item);
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static AsyncRdSet`1<T> Read(SerializationCtx ctx, UnsafeReader reader);
    public static AsyncRdSet`1<T> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    public static void Write(SerializationCtx ctx, UnsafeWriter writer, AsyncRdSet`1<T> value);
    public CtxReadDelegate`1<T> get_ReadValueDelegate();
    public CtxWriteDelegate`1<T> get_WriteValueDelegate();
    public sealed virtual void Print(PrettyPrinter printer);
    public sealed virtual void AdviseOn(Lifetime lifetime, IScheduler scheduler, Action`1<SetEvent`1<T>> action);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(SetEvent`1<T> x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.BufferWindow : ValueType {
    public Byte[] Data;
    public int Lo;
    public int Hi;
    public int Available { get; }
    public BufferWindow(int length);
    public int get_Available();
    public void Clear();
    public void MoveTo(Byte[] dst, int offset, int size);
    public bool Read(BufferWindow& helper, Receiver receiver);
    public bool Read(BufferWindow& helper, Receiver receiver, int size);
}
internal class JetBrains.Rd.Impl.ConcurrentRdSet`1 : RdReactiveBase {
    private ProtocolContexts myProtocolContexts;
    private ViewableConcurrentSet`1<T> mySet;
    private ThreadLocal`1<bool> myIsThreadLocal;
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<T> <ReadValueDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<T> <WriteValueDelegate>k__BackingField;
    public int Count { get; }
    public CtxReadDelegate`1<T> ReadValueDelegate { get; }
    public CtxWriteDelegate`1<T> WriteValueDelegate { get; }
    public ConcurrentRdSet`1(CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue, ProtocolContexts protocolContexts, IEqualityComparer`1<T> comparer);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<T> get_ReadValueDelegate();
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<T> get_WriteValueDelegate();
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime bindLifetime, IProtocol proto, SerializationCtx ctx);
    private void SendAdd(IWire wire, SendContext`2<T, ConcurrentRdSet`1<T>> context);
    public virtual void Print(PrettyPrinter printer);
    public sealed virtual bool Add(T value);
    public sealed virtual bool Contains(T value);
    public sealed virtual void View(Lifetime lifetime, Action`2<Lifetime, T> action);
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Impl.ExtCreatedUtils : object {
    [ExtensionAttribute]
public static RdSignal`1<ExtCreationInfo> CreateExtSignal(IRdDynamic this);
    internal static RName ReadRName(UnsafeReader reader);
    internal static void WriteRName(UnsafeWriter writer, RName value);
    private static void TraverseRName(RName rName, bool last, Action`2<RName, bool> handler);
}
internal class JetBrains.Rd.Impl.HeavySingleContextHandler`1 : RdReactiveBase {
    private ProtocolContexts myHandler;
    private InternRoot`1<T> myInternRoot;
    private ConcurrentRdSet`1<T> myProtocolValueSet;
    [CompilerGeneratedAttribute]
private RdContext`1<T> <Context>k__BackingField;
    internal IAppendOnlyViewableConcurrentSet`1<T> LocalValueSet { get; }
    public RdContextBase ContextBase { get; }
    public RdContext`1<T> Context { get; }
    public HeavySingleContextHandler`1(RdContext`1<T> context, ProtocolContexts handler);
    internal IAppendOnlyViewableConcurrentSet`1<T> get_LocalValueSet();
    public sealed virtual object ReadValueBoxed(SerializationCtx context, UnsafeReader reader);
    public sealed virtual RdContextBase get_ContextBase();
    [CompilerGeneratedAttribute]
public sealed virtual RdContext`1<T> get_Context();
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
    private void HandleProtocolSetEvent(Lifetime lifetime, T value);
    public sealed virtual void WriteValue(SerializationCtx context, UnsafeWriter writer);
    private void AddValueToProtocolValueSetImpl(T value);
    public sealed virtual void RegisterValueInValueSet();
    public sealed virtual T ReadValue(SerializationCtx context, UnsafeReader reader);
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
}
public class JetBrains.Rd.Impl.Identities : object {
    private IdKind Kind;
    private int myId;
    private static int BaseClientId;
    private static int BaseServerId;
    public Identities(IdKind kind);
    public sealed virtual RdId Next(RdId parent);
}
public class JetBrains.Rd.Impl.InternRoot`1 : object {
    private ConcurrentDictionary`2<InternId, TBase> myDirectMap;
    private ConcurrentDictionary`2<TBase, IdPair<TBase>> myInverseMap;
    private int myInternedIdCounter;
    private CtxReadDelegate`1<TBase> myReadDelegate;
    private CtxWriteDelegate`1<TBase> myWriteDelegate;
    [CanBeNullAttribute]
private IRdDynamic myParent;
    [CompilerGeneratedAttribute]
private RName <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private RdId <RdId>k__BackingField;
    public RName Location { get; private set; }
    public RdId RdId { get; public set; }
    public bool IsBound { get; }
    public bool Async { get; public set; }
    public InternRoot`1(CtxReadDelegate`1<TBase> readDelegate, CtxWriteDelegate`1<TBase> writeDelegate);
    public sealed virtual InternId TryGetInterned(TBase value);
    public sealed virtual InternId Intern(TBase value);
    private object TryGetValue(InternId id);
    public sealed virtual bool TryUnIntern(InternId id, T& result);
    public sealed virtual void Remove(TBase value);
    public sealed virtual T UnIntern(InternId id);
    public sealed virtual IProtocol TryGetProto();
    public sealed virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    [CompilerGeneratedAttribute]
public sealed virtual RName get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(RName value);
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual RdId get_RdId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RdId(RdId value);
    public bool get_IsBound();
    public sealed virtual void PreBind(Lifetime lf, IRdDynamic parent, string name);
    public sealed virtual void Bind();
    public sealed virtual void Identify(IIdentities identities, RdId id);
    public sealed virtual bool get_Async();
    public sealed virtual void set_Async(bool value);
    public sealed virtual void OnWireReceived(UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
}
internal class JetBrains.Rd.Impl.LightSingleContextHandler`1 : object {
    [CompilerGeneratedAttribute]
private RdContext`1<T> <Context>k__BackingField;
    public RdContext`1<T> Context { get; }
    public RdContextBase ContextBase { get; }
    public LightSingleContextHandler`1(RdContext`1<T> context);
    [CompilerGeneratedAttribute]
public sealed virtual RdContext`1<T> get_Context();
    public sealed virtual RdContextBase get_ContextBase();
    public sealed virtual object ReadValueBoxed(SerializationCtx context, UnsafeReader reader);
    public sealed virtual void WriteValue(SerializationCtx context, UnsafeWriter writer);
    public sealed virtual void RegisterValueInValueSet();
    public sealed virtual T ReadValue(SerializationCtx context, UnsafeReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.MessageBroker : object {
    private ILog myLogger;
    public bool BackwardsCompatibleWireFormat;
    private object myLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<RdId, ValueLifetimed`1<IRdWireable>> mySubscriptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<Byte[]> myUnprocessedMessages;
    public MessageBroker(bool withholdMessageDeliveryInitially);
    public void StartDeliveringMessages();
    public void Dispatch(Byte[] msg);
    private void DispatchImpl(Byte[] msg);
    private static ThreadLocalDebugInfo UsingDebugInfoCookie(IRdWireable reactive);
    public void Advise(Lifetime lifetime, IRdWireable reactive);
    public bool TryGetById(RdId rdId, ValueLifetimed`1& subscription);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Rd.Impl.Polymorphic`1 : object {
    public static CtxReadDelegate`1<T> Read;
    public static CtxWriteDelegate`1<T> Write;
    private static Polymorphic`1();
    public static CtxReadDelegate`1<T> ReadAbstract(CtxReadDelegate`1<T> unknownInstanceReader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.Protocol : object {
    public static ILog Logger;
    public static ILog InitLogger;
    public static Nullable`1<LogWithLevel> InitTrace;
    private static string ProtocolInternRootRdId;
    private static string ContextHandlerRdId;
    internal static string ProtocolExtCreatedRdId;
    private static string ProtocolInternScopeStringId;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IWire <Wire>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializers <Serializers>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentities <Identities>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializationCtx <SerializationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewableSet`1<RdExtBase> <OutOfSyncModels>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtocolContexts <Contexts>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ExtCreationInfo> <ExtCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private RdSignal`1<ExtCreationInfo> <ExtConfirmation>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadLocal`1<bool> <ExtIsLocal>k__BackingField;
    [PublicAPIAttribute]
public bool ThrowErrorOnOutOfSyncModels;
    [CompilerGeneratedAttribute]
private RName <Location>k__BackingField;
    public Lifetime Lifetime { get; }
    public string Name { get; }
    public IWire Wire { get; }
    public ISerializers Serializers { get; }
    public IIdentities Identities { get; }
    public IScheduler Scheduler { get; }
    public SerializationCtx SerializationContext { get; }
    public ViewableSet`1<RdExtBase> OutOfSyncModels { get; }
    public ProtocolContexts Contexts { get; }
    public ISignal`1<ExtCreationInfo> ExtCreated { get; }
    private RdSignal`1<ExtCreationInfo> ExtConfirmation { get; }
    private ThreadLocal`1<bool> ExtIsLocal { get; }
    public RName Location { get; }
    public Protocol(string name, ISerializers serializers, IIdentities identities, IScheduler scheduler, IWire wire, Lifetime lifetime, RdContextBase[] initialContexts);
    internal Protocol(string name, ISerializers serializers, IIdentities identities, IScheduler scheduler, IWire wire, Lifetime lifetime, Nullable`1<SerializationCtx> serializationCtx, ProtocolContexts parentContexts, ISignal`1<ExtCreationInfo> parentExtCreated, RdSignal`1<ExtCreationInfo> parentExtConfirmation, RdContextBase[] initialContexts);
    private static Protocol();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    public sealed virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    private InternRoot`1<object> CreateProtocolInternRoot(Lifetime lifetime);
    private void BindContexts(Lifetime lifetime);
    internal void SubmitExtCreated(ExtCreationInfo info);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IWire get_Wire();
    [CompilerGeneratedAttribute]
public sealed virtual ISerializers get_Serializers();
    [CompilerGeneratedAttribute]
public sealed virtual IIdentities get_Identities();
    [CompilerGeneratedAttribute]
public sealed virtual IScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public sealed virtual SerializationCtx get_SerializationContext();
    [CompilerGeneratedAttribute]
public sealed virtual ViewableSet`1<RdExtBase> get_OutOfSyncModels();
    [CompilerGeneratedAttribute]
public sealed virtual ProtocolContexts get_Contexts();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ExtCreationInfo> get_ExtCreated();
    [CompilerGeneratedAttribute]
private RdSignal`1<ExtCreationInfo> get_ExtConfirmation();
    [CompilerGeneratedAttribute]
private ThreadLocal`1<bool> get_ExtIsLocal();
    [CompilerGeneratedAttribute]
public sealed virtual RName get_Location();
    private sealed virtual override IProtocol JetBrains.Rd.Base.IRdDynamic.TryGetProto();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_1(ExtCreationInfo message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.ProtocolContexts : RdReactiveBase {
    private CopyOnWriteList`1<ISingleContextHandler> myCounterpartHandlers;
    private CopyOnWriteList`1<ISingleContextHandler> myHandlersToWrite;
    private IViewableList`1<ISingleContextHandler> myHandlerOrder;
    private ConcurrentDictionary`2<RdContextBase, ISingleContextHandler> myHandlersMap;
    private object myOrderingLock;
    private ThreadLocal`1<bool> mySendWithoutContexts;
    private SerializationCtx mySerializationCtx;
    public bool IsSendWithoutContexts { get; }
    public ICollection`1<RdContextBase> RegisteredContexts { get; }
    public ProtocolContexts(SerializationCtx serializationCtx);
    internal SendWithoutContextsCookie CreateSendWithoutContextsCookie();
    public bool get_IsSendWithoutContexts();
    public ICollection`1<RdContextBase> get_RegisteredContexts();
    internal ISingleContextHandler`1<T> GetHandlerForContext(RdContext`1<T> context);
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    private void DoAddHandler(RdContext`1<T> context, ISingleContextHandler`1<T> handler);
    private void PreBindHandler(Lifetime lifetime, string key, ISingleContextHandler handler);
    private void BindHandler(ISingleContextHandler handler);
    private void SendContextToRemote(RdContextBase context);
    private void EnsureHeavyHandlerExists(RdContext`1<T> context);
    private void EnsureLightHandlerExists(RdContext`1<T> context);
    public IAppendOnlyViewableConcurrentSet`1<T> GetValueSet(RdContext`1<T> context);
    public void RegisterContext(RdContext`1<T> context);
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
    internal MessageContext ReadContextsIntoCookie(UnsafeReader reader);
    public void WriteContexts(UnsafeWriter writer);
    public void RegisterCurrentValuesInValueSets();
    public static void WriteEmptyContexts(UnsafeWriter writer);
    private void BindAndSendHandler(ISingleContextHandler handler);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <PreInit>b__24_0(Lifetime handlerLt, int _, ISingleContextHandler handler);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Init>b__25_0(Lifetime handlerLt, int _, ISingleContextHandler handler);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Rd.Impl.RdList`1 : RdReactiveBase {
    private ViewableList`1<V> myList;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<V> <ReadValueDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<V> <WriteValueDelegate>k__BackingField;
    private static int versionedFlagShift;
    private long myNextVersion;
    [CompilerGeneratedAttribute]
private bool <OptimizeNested>k__BackingField;
    [ItemCanBeNullAttribute]
private SynchronizedList`1 modreq(System.Runtime.CompilerServices.IsVolatile) myBindDefinitions;
    [PublicAPIAttribute]
public CtxReadDelegate`1<V> ReadValueDelegate { get; private set; }
    [PublicAPIAttribute]
public CtxWriteDelegate`1<V> WriteValueDelegate { get; private set; }
    public bool OptimizeNested { get; public set; }
    protected string ShortName { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ISource`1<ListEvent`1<V>> Change { get; }
    public V Item { get; public set; }
    public RdList`1(CtxReadDelegate`1<V> readValue, CtxWriteDelegate`1<V> writeValue, long nextVersion);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<V> get_ReadValueDelegate();
    [CompilerGeneratedAttribute]
private void set_ReadValueDelegate(CtxReadDelegate`1<V> value);
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<V> get_WriteValueDelegate();
    [CompilerGeneratedAttribute]
private void set_WriteValueDelegate(CtxWriteDelegate`1<V> value);
    [PublicAPIAttribute]
public static RdList`1<V> Read(SerializationCtx ctx, UnsafeReader reader);
    [PublicAPIAttribute]
public static RdList`1<V> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<V> readValue, CtxWriteDelegate`1<V> writeValue);
    [PublicAPIAttribute]
public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdList`1<V> value);
    [CompilerGeneratedAttribute]
[PublicAPIAttribute]
public bool get_OptimizeNested();
    [CompilerGeneratedAttribute]
public void set_OptimizeNested(bool value);
    protected virtual void Unbind();
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
    protected virtual string get_ShortName();
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader stream, IRdWireableDispatchHelper dispatchHelper);
    [CanBeNullAttribute]
[ItemCanBeNullAttribute]
private SynchronizedList`1<LifetimeDefinition> TryGetBindDefinitions(Lifetime lifetime);
    [NullableContextAttribute("2")]
private LifetimeDefinition TryPreBindValue(Lifetime lifetime, V value, int index, bool bindAlso);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<V> GetEnumerator();
    public sealed virtual bool Contains(V item);
    public sealed virtual void CopyTo(V[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(V item);
    public sealed virtual ISource`1<ListEvent`1<V>> get_Change();
    public sealed virtual void Insert(int index, V value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual V get_Item(int index);
    public sealed virtual void set_Item(int index, V value);
    public sealed virtual bool Remove(V item);
    public sealed virtual void Add(V item);
    public sealed virtual void Clear();
    public sealed virtual void Advise(Lifetime lifetime, Action`1<ListEvent`1<V>> handler);
    public virtual RdBindableBase FindByRName(RName rName);
    public virtual void Print(PrettyPrinter printer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(AddRemove kind, int idx, V v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class JetBrains.Rd.Impl.RdMap`2 : RdReactiveBase {
    private ViewableMap`2<K, V> myMap;
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<K> <ReadKeyDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<K> <WriteKeyDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<V> <ReadValueDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<V> <WriteValueDelegate>k__BackingField;
    private static int versionedFlagShift;
    private static int Ack;
    public bool IsMaster;
    private long myNextVersion;
    private Dictionary`2<K, long> myPendingForAck;
    [CompilerGeneratedAttribute]
private bool <OptimizeNested>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SynchronizedDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myBindDefinitions;
    [PublicAPIAttribute]
public CtxReadDelegate`1<K> ReadKeyDelegate { get; private set; }
    [PublicAPIAttribute]
public CtxWriteDelegate`1<K> WriteKeyDelegate { get; private set; }
    [PublicAPIAttribute]
public CtxReadDelegate`1<V> ReadValueDelegate { get; private set; }
    [PublicAPIAttribute]
public CtxWriteDelegate`1<V> WriteValueDelegate { get; private set; }
    public bool OptimizeNested { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<K> Keys { get; }
    public ICollection`1<V> Values { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISource`1<MapEvent`2<K, V>> Change { get; }
    public V Item { get; public set; }
    protected string ShortName { get; }
    public RdMap`2(CtxReadDelegate`1<K> readKey, CtxWriteDelegate`1<K> writeKey, CtxReadDelegate`1<V> readValue, CtxWriteDelegate`1<V> writeValue);
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<K> get_ReadKeyDelegate();
    [CompilerGeneratedAttribute]
private void set_ReadKeyDelegate(CtxReadDelegate`1<K> value);
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<K> get_WriteKeyDelegate();
    [CompilerGeneratedAttribute]
private void set_WriteKeyDelegate(CtxWriteDelegate`1<K> value);
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<V> get_ReadValueDelegate();
    [CompilerGeneratedAttribute]
private void set_ReadValueDelegate(CtxReadDelegate`1<V> value);
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<V> get_WriteValueDelegate();
    [CompilerGeneratedAttribute]
private void set_WriteValueDelegate(CtxWriteDelegate`1<V> value);
    [PublicAPIAttribute]
public static RdMap`2<K, V> Read(SerializationCtx ctx, UnsafeReader reader);
    [PublicAPIAttribute]
public static RdMap`2<K, V> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<K> readKey, CtxWriteDelegate`1<K> writeKey, CtxReadDelegate`1<V> readValue, CtxWriteDelegate`1<V> writeValue);
    [PublicAPIAttribute]
public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdMap`2<K, V> value);
    [CompilerGeneratedAttribute]
[PublicAPIAttribute]
public bool get_OptimizeNested();
    [CompilerGeneratedAttribute]
public void set_OptimizeNested(bool value);
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
    protected virtual void Unbind();
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader stream, IRdWireableDispatchHelper dispatchHelper);
    private SynchronizedDictionary`2<K, LifetimeDefinition> TryGetBindDefinitions(Lifetime lifetime);
    private bool IsPendingForAck(K key);
    [NullableContextAttribute("2")]
private LifetimeDefinition TryPreBindValue(Lifetime lifetime, K key, V value, bool bindAlso);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<K, V>> GetEnumerator();
    public sealed virtual bool Contains(KeyValuePair`2<K, V> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool ContainsKey(K key);
    public sealed virtual bool TryGetValue(K key, V& value);
    public sealed virtual ICollection`1<K> get_Keys();
    public sealed virtual ICollection`1<V> get_Values();
    public sealed virtual ISource`1<MapEvent`2<K, V>> get_Change();
    public sealed virtual void Add(K key, V value);
    public sealed virtual bool Remove(K key);
    public sealed virtual V get_Item(K key);
    public sealed virtual void set_Item(K key, V value);
    public sealed virtual bool Remove(KeyValuePair`2<K, V> item);
    public sealed virtual void Add(KeyValuePair`2<K, V> item);
    public sealed virtual void Clear();
    public sealed virtual void Advise(Lifetime lifetime, Action`1<MapEvent`2<K, V>> handler);
    public virtual RdBindableBase FindByRName(RName rName);
    protected virtual string get_ShortName();
    public virtual void Print(PrettyPrinter printer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class JetBrains.Rd.Impl.RdPerContextMap`2 : RdReactiveBase {
    [CompilerGeneratedAttribute]
private RdContext`1<K> <Context>k__BackingField;
    private Func`2<bool, V> myValueFactory;
    private IViewableMap`2<K, V> myMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ReactiveQueue`1<K, V, KeyValuePair`2<K, V>> myQueue;
    public bool IsMaster;
    public RdContext`1<K> Context { get; }
    public V Item { get; }
    public RdPerContextMap`2(RdContext`1<K> context, Func`2<bool, V> valueFactory);
    [CompilerGeneratedAttribute]
public sealed virtual RdContext`1<K> get_Context();
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader stream, IRdWireableDispatchHelper dispatchHelper);
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
    public sealed virtual V GetForCurrentContext();
    public sealed virtual void View(Lifetime lifetime, Action`2<Lifetime, KeyValuePair`2<K, V>> handler);
    public sealed virtual void View(Lifetime lifetime, Action`3<Lifetime, K, V> handler);
    public sealed virtual V get_Item(K key);
    public sealed virtual bool TryGetValue(K key, V& value);
    public static void Write(SerializationCtx context, UnsafeWriter writer, RdPerContextMap`2<K, V> value);
    public static RdPerContextMap`2<K, V> Read(SerializationCtx context, UnsafeReader reader, RdContext`1<K> key, Func`2<bool, V> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.RdProperty`1 : RdPropertyBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<T> <ReadValueDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<T> <WriteValueDelegate>k__BackingField;
    public bool IsMaster;
    private int myMasterVersion;
    public bool OptimizeNested;
    [NullableAttribute("2")]
private LifetimeDefinition myBindDefinition;
    private IViewableProperty`1<T> myProperty;
    public CtxReadDelegate`1<T> ReadValueDelegate { get; private set; }
    public CtxWriteDelegate`1<T> WriteValueDelegate { get; private set; }
    public ISource`1<T> Change { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Maybe`1<T> Maybe { get; }
    public T Value { get; public set; }
    protected string ShortName { get; }
    public RdProperty`1(CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    [PublicAPIAttribute]
public RdProperty`1(CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue, T defaultValue);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<T> get_ReadValueDelegate();
    [CompilerGeneratedAttribute]
private void set_ReadValueDelegate(CtxReadDelegate`1<T> value);
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<T> get_WriteValueDelegate();
    [CompilerGeneratedAttribute]
private void set_WriteValueDelegate(CtxWriteDelegate`1<T> value);
    public static RdProperty`1<T> Read(SerializationCtx ctx, UnsafeReader reader);
    public static RdProperty`1<T> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdProperty`1<T> value);
    public virtual void Identify(IIdentities identities, RdId id);
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
    protected virtual void Unbind();
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    private LifetimeDefinition TryPreBindValue(Lifetime lifetime, T value, bool bindAlso);
    public sealed virtual ISource`1<T> get_Change();
    public sealed virtual Maybe`1<T> get_Maybe();
    public sealed virtual T get_Value();
    public sealed virtual void set_Value(T value);
    public sealed virtual void Advise(Lifetime lifetime, Action`1<T> handler);
    public virtual RdBindableBase FindByRName(RName rName);
    protected virtual string get_ShortName();
    public virtual void Print(PrettyPrinter printer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(T _);
}
public abstract class JetBrains.Rd.Impl.RdPropertyBase : RdReactiveBase {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.RdSecureString : ValueType {
    public string Contents;
    public RdSecureString(string contents);
    public virtual string ToString();
    public sealed virtual bool Equals(RdSecureString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RdSecureString left, RdSecureString right);
    public static bool op_Inequality(RdSecureString left, RdSecureString right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.RdSet`1 : RdReactiveBase {
    private IViewableSet`1<T> mySet;
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<T> <ReadValueDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<T> <WriteValueDelegate>k__BackingField;
    public bool IsMaster;
    [CompilerGeneratedAttribute]
private bool <OptimizeNested>k__BackingField;
    public CtxReadDelegate`1<T> ReadValueDelegate { get; private set; }
    public CtxWriteDelegate`1<T> WriteValueDelegate { get; private set; }
    public bool OptimizeNested { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISource`1<SetEvent`1<T>> Change { get; }
    protected string ShortName { get; }
    public RdSet`1(CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<T> get_ReadValueDelegate();
    [CompilerGeneratedAttribute]
private void set_ReadValueDelegate(CtxReadDelegate`1<T> value);
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<T> get_WriteValueDelegate();
    [CompilerGeneratedAttribute]
private void set_WriteValueDelegate(CtxWriteDelegate`1<T> value);
    public static RdSet`1<T> Read(SerializationCtx ctx, UnsafeReader reader);
    public static RdSet`1<T> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdSet`1<T> value);
    [CompilerGeneratedAttribute]
[PublicAPIAttribute]
public bool get_OptimizeNested();
    [CompilerGeneratedAttribute]
public void set_OptimizeNested(bool value);
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    protected virtual void Init(Lifetime lifetime, IProtocol proto, SerializationCtx ctx);
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader stream, IRdWireableDispatchHelper dispatchHelper);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ISource`1<SetEvent`1<T>> get_Change();
    public sealed virtual bool Remove(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual bool Add(T item);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
    public sealed virtual void Clear();
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual void Advise(Lifetime lifetime, Action`1<SetEvent`1<T>> handler);
    protected virtual string get_ShortName();
    public virtual void Print(PrettyPrinter printer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.RdSignal`1 : RdReactiveBase {
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<T> <ReadValueDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<T> <WriteValueDelegate>k__BackingField;
    private Signal`1<T> mySignal;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    public CtxReadDelegate`1<T> ReadValueDelegate { get; }
    public CtxWriteDelegate`1<T> WriteValueDelegate { get; }
    [NullableAttribute("2")]
public IScheduler Scheduler { get; public set; }
    protected string ShortName { get; }
    public RdSignal`1(CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<T> get_ReadValueDelegate();
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<T> get_WriteValueDelegate();
    public static RdSignal`1<T> Read(SerializationCtx ctx, UnsafeReader reader);
    public static RdSignal`1<T> Read(SerializationCtx _, UnsafeReader reader, CtxReadDelegate`1<T> readValue, CtxWriteDelegate`1<T> writeValue);
    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdSignal`1<T> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IScheduler get_Scheduler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Scheduler(IScheduler value);
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    public sealed virtual void Fire(T value);
    public sealed virtual void Advise(Lifetime lifetime, Action`1<T> handler);
    protected virtual string get_ShortName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.RdSimpleDispatcher : object {
    private Lifetime myLifetime;
    private ILog myLogger;
    [NullableAttribute("2")]
private string myId;
    private Queue`1<Action> myTasks;
    private AutoResetEvent myEvent;
    public Nullable`1<TimeSpan> MessageTimeout;
    public bool IsActive { get; }
    public bool OutOfOrderExecution { get; }
    public RdSimpleDispatcher(Lifetime lifetime, ILog logger, string id);
    public virtual void Run();
    public virtual bool get_IsActive();
    public virtual bool get_OutOfOrderExecution();
    public sealed virtual void Queue(Action action);
    private string FormatLogMessage(string message);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
internal static class JetBrains.Rd.Impl.SendContext : object {
    [NullableContextAttribute("1")]
internal static SendContext`2<TEvt, TReactive> Of(SerializationCtx serializationContext, TEvt event, TReactive me);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Rd.Impl.SendContext`2 : ValueType {
    internal SerializationCtx SzrCtx;
    internal TEvt Event;
    internal TReactive This;
    public SendContext`2(SerializationCtx serializationContext, TEvt event, TReactive me);
    public void Deconstruct(SerializationCtx& serializationContext, TEvt& event, TReactive& map);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.Serializers : object {
    private Dictionary`2<Type, RdId> myTypeMapping;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<RdId, CtxReadDelegate`1<object>> myReaders;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<RdId, CtxWriteDelegate`1<object>> myWriters;
    [NullableAttribute("2")]
private ITypesRegistrar myRegistrar;
    private object myLock;
    private StealingScheduler myBackgroundRegistrar;
    public static CtxReadDelegate`1<byte> ReadByte;
    public static CtxReadDelegate`1<short> ReadShort;
    public static CtxReadDelegate`1<int> ReadInt;
    public static CtxReadDelegate`1<long> ReadLong;
    public static CtxReadDelegate`1<float> ReadFloat;
    public static CtxReadDelegate`1<double> ReadDouble;
    public static CtxReadDelegate`1<char> ReadChar;
    public static CtxReadDelegate`1<bool> ReadBool;
    public static CtxReadDelegate`1<Unit> ReadVoid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<string> ReadString;
    public static CtxReadDelegate`1<Guid> ReadGuid;
    public static CtxReadDelegate`1<DateTime> ReadDateTime;
    public static CtxReadDelegate`1<TimeSpan> ReadTimeSpan;
    public static CtxReadDelegate`1<Uri> ReadUri;
    public static CtxReadDelegate`1<RdId> ReadRdId;
    public static CtxReadDelegate`1<RdSecureString> ReadSecureString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Byte[]> ReadByteArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Int16[]> ReadShortArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Int32[]> ReadIntArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Int64[]> ReadLongArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Single[]> ReadFloatArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Double[]> ReadDoubleArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Char[]> ReadCharArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Boolean[]> ReadBoolArray;
    public static CtxReadDelegate`1<byte> ReadUByte;
    public static CtxReadDelegate`1<ushort> ReadUShort;
    public static CtxReadDelegate`1<UInt32> ReadUInt;
    public static CtxReadDelegate`1<ulong> ReadULong;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<Byte[]> ReadUByteArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<UInt16[]> ReadUShortArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<UInt32[]> ReadUIntArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<UInt64[]> ReadULongArray;
    public static CtxWriteDelegate`1<byte> WriteByte;
    public static CtxWriteDelegate`1<short> WriteShort;
    public static CtxWriteDelegate`1<int> WriteInt;
    public static CtxWriteDelegate`1<long> WriteLong;
    public static CtxWriteDelegate`1<float> WriteFloat;
    public static CtxWriteDelegate`1<double> WriteDouble;
    public static CtxWriteDelegate`1<char> WriteChar;
    public static CtxWriteDelegate`1<bool> WriteBool;
    public static CtxWriteDelegate`1<Unit> WriteVoid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<string> WriteString;
    public static CtxWriteDelegate`1<Guid> WriteGuid;
    public static CtxWriteDelegate`1<DateTime> WriteDateTime;
    public static CtxWriteDelegate`1<TimeSpan> WriteTimeSpan;
    public static CtxWriteDelegate`1<Uri> WriteUri;
    public static CtxWriteDelegate`1<RdId> WriteRdId;
    public static CtxWriteDelegate`1<RdSecureString> WriteSecureString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Byte[]> WriteByteArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Int16[]> WriteShortArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Int32[]> WriteIntArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Int64[]> WriteLongArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Single[]> WriteFloatArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Double[]> WriteDoubleArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Char[]> WriteCharArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Boolean[]> WriteBoolArray;
    public static CtxWriteDelegate`1<byte> WriteUByte;
    public static CtxWriteDelegate`1<ushort> WriteUShort;
    public static CtxWriteDelegate`1<UInt32> WriteUInt;
    public static CtxWriteDelegate`1<ulong> WriteULong;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<Byte[]> WriteUByteArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<UInt16[]> WriteUShortArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<UInt32[]> WriteUIntArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<UInt64[]> WriteULongArray;
    private HashSet`1<Type> myRegisteredToplevels;
    [NullableContextAttribute("2")]
public Serializers(TaskScheduler scheduler, ITypesRegistrar registrar);
    [NullableContextAttribute("2")]
public Serializers(ITypesRegistrar registrar);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Lifetime is not required anymore", "False")]
public Serializers(Lifetime lifetime, TaskScheduler scheduler, ITypesRegistrar registrar);
    private static Serializers();
    public static void RegisterFrameworkMarshallers(ISerializersContainer serializers);
    [NullableContextAttribute("0")]
public static T ReadEnum(SerializationCtx ctx, UnsafeReader reader);
    [NullableContextAttribute("0")]
public static void WriteEnum(SerializationCtx ctx, UnsafeWriter writer, T value);
    [NullableContextAttribute("0")]
public sealed virtual void RegisterEnum();
    public sealed virtual void Register(CtxReadDelegate`1<T> reader, CtxWriteDelegate`1<T> writer, Nullable`1<long> predefinedId);
    [NullableContextAttribute("2")]
public sealed virtual T Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<T> unknownInstanceReader);
    public sealed virtual void Write(SerializationCtx ctx, UnsafeWriter writer, T value);
    public sealed virtual void RegisterToplevelOnce(Type toplevelType, Action`1<ISerializers> registerDeclaredTypesSerializers);
    private void RegisterToplevelInternal(Type type, Action`1<ISerializers> register);
    [CompilerGeneratedAttribute]
private bool <Write>g__TryGetTypeMapping|80_0(Type type1, RdId& rdId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Impl.SerializersEx : object {
    [ExtensionAttribute]
public static List`1<T> ReadList(UnsafeReader reader, CtxReadDelegate`1<T> itemReader, SerializationCtx ctx);
    [ExtensionAttribute]
public static void WriteList(UnsafeWriter writer, CtxWriteDelegate`1<T> itemWriter, SerializationCtx ctx, List`1<T> value);
    [ExtensionAttribute]
public static void WriteEnumerable(UnsafeWriter writer, CtxWriteDelegate`1<T> itemWriter, SerializationCtx ctx, IEnumerable`1<T> value);
    [ExtensionAttribute]
public static T[] ReadArray(UnsafeReader reader, CtxReadDelegate`1<T> itemReader, SerializationCtx ctx);
    [ExtensionAttribute]
public static void WriteArray(UnsafeWriter writer, CtxWriteDelegate`1<T> itemWriter, SerializationCtx ctx, T[] value);
    [ExtensionAttribute]
public static T ReadNullableClass(UnsafeReader reader, CtxReadDelegate`1<T> itemReader, SerializationCtx ctx);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<T> ReadNullableStruct(UnsafeReader reader, CtxReadDelegate`1<T> itemReader, SerializationCtx ctx);
    [ExtensionAttribute]
public static void WriteNullableClass(UnsafeWriter writer, CtxWriteDelegate`1<T> itemWriter, SerializationCtx ctx, T value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void WriteNullableStruct(UnsafeWriter writer, CtxWriteDelegate`1<T> itemWriter, SerializationCtx ctx, Nullable`1<T> value);
    [ExtensionAttribute]
public static RdSecureString ReadSecureString(UnsafeReader reader);
    [ExtensionAttribute]
public static void Write(UnsafeWriter writer, RdSecureString string);
    [ExtensionAttribute]
public static RdId ReadRdId(UnsafeReader reader);
    [ExtensionAttribute]
public static void Write(UnsafeWriter writer, RdId id);
    [ExtensionAttribute]
public static Unit ReadVoid(UnsafeReader reader);
    [ExtensionAttribute]
public static void Write(UnsafeWriter writer, Unit value);
    [ExtensionAttribute]
public static CtxReadDelegate`1<T[]> Array(CtxReadDelegate`1<T> inner);
    [ExtensionAttribute]
public static CtxReadDelegate`1<List`1<T>> List(CtxReadDelegate`1<T> inner);
    [ExtensionAttribute]
public static CtxReadDelegate`1<T> NullableClass(CtxReadDelegate`1<T> inner);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static CtxReadDelegate`1<Nullable`1<T>> NullableStruct(CtxReadDelegate`1<T> inner);
    [ExtensionAttribute]
public static CtxReadDelegate`1<T> Interned(CtxReadDelegate`1<T> inner, string internKey);
    [ExtensionAttribute]
public static CtxWriteDelegate`1<T[]> Array(CtxWriteDelegate`1<T> inner);
    [ExtensionAttribute]
public static CtxWriteDelegate`1<List`1<T>> List(CtxWriteDelegate`1<T> inner);
    [ExtensionAttribute]
public static CtxWriteDelegate`1<T> NullableClass(CtxWriteDelegate`1<T> inner);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static CtxWriteDelegate`1<Nullable`1<T>> NullableStruct(CtxWriteDelegate`1<T> inner);
    [ExtensionAttribute]
public static CtxWriteDelegate`1<T> Interned(CtxWriteDelegate`1<T> inner, string internKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Rd.Impl.SocketWire : object {
    private static ILog ourStaticLog;
    private static SocketWire();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Impl.StealingScheduler : TaskScheduler {
    private bool myAllowParallelJoin;
    private TaskScheduler myScheduler;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) myActive;
    private ConcurrentQueue`1<Task> myActions;
    [NullableContextAttribute("2")]
public StealingScheduler(TaskScheduler scheduler, bool allowParallelJoin);
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    public void Join();
    private void ProcessTasks();
    private bool ExecuteOne();
    [CompilerGeneratedAttribute]
private bool <Join>b__8_0();
}
[IsReadOnlyAttribute]
public class JetBrains.Rd.InternId : ValueType {
    private static int InvalidId;
    private int myValue;
    public static InternId Invalid;
    public bool IsValid { get; }
    public bool IsLocal { get; }
    internal InternId(int value);
    private static InternId();
    public bool get_IsValid();
    public bool get_IsLocal();
    public static InternId Read(UnsafeReader reader);
    public static void Write(UnsafeWriter writer, InternId value);
    public sealed virtual bool Equals(InternId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(InternId left, InternId right);
    public static bool op_Inequality(InternId left, InternId right);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.IProtocol {
    public Lifetime Lifetime { get; }
    public SerializationCtx SerializationContext { get; }
    public ViewableSet`1<RdExtBase> OutOfSyncModels { get; }
    public string Name { get; }
    public ISerializers Serializers { get; }
    public IIdentities Identities { get; }
    public IScheduler Scheduler { get; }
    public IWire Wire { get; }
    public ProtocolContexts Contexts { get; }
    public ISignal`1<ExtCreationInfo> ExtCreated { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual SerializationCtx get_SerializationContext();
    public abstract virtual ViewableSet`1<RdExtBase> get_OutOfSyncModels();
    public abstract virtual string get_Name();
    public abstract virtual ISerializers get_Serializers();
    public abstract virtual IIdentities get_Identities();
    public abstract virtual IScheduler get_Scheduler();
    public abstract virtual IWire get_Wire();
    public abstract virtual ProtocolContexts get_Contexts();
    public abstract virtual ISignal`1<ExtCreationInfo> get_ExtCreated();
}
public interface JetBrains.Rd.ISerializers {
    [NullableContextAttribute("2")]
public abstract virtual T Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<T> unknownInstanceReader);
    [NullableContextAttribute("1")]
public abstract virtual void Write(SerializationCtx ctx, UnsafeWriter writer, T value);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.ISerializersContainer {
    public abstract virtual void Register(CtxReadDelegate`1<T> reader, CtxWriteDelegate`1<T> writer, Nullable`1<long> predefinedType);
    [NullableContextAttribute("0")]
public abstract virtual void RegisterEnum();
    public abstract virtual void RegisterToplevelOnce(Type toplevelType, Action`1<ISerializers> registerDeclaredTypesSerializers);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.ITypesRegistrar {
    public abstract virtual void TryRegister(RdId id, ISerializers serializers);
    public abstract virtual void TryRegister(Type clrType, ISerializers serializers);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.IWire {
    public bool IsStub { get; }
    public ProtocolContexts Contexts { get; public set; }
    public abstract virtual bool get_IsStub();
    public abstract virtual void Send(RdId id, TParam param, Action`2<TParam, UnsafeWriter> writer);
    public abstract virtual void Advise(Lifetime lifetime, IRdWireable entity);
    public abstract virtual ProtocolContexts get_Contexts();
    public abstract virtual void set_Contexts(ProtocolContexts value);
    [NullableContextAttribute("2")]
public abstract virtual IRdWireable TryGetById(RdId rdId);
}
public interface JetBrains.Rd.IWireWithDelayedDelivery {
    public abstract virtual void StartDeliveringMessages();
}
public abstract class JetBrains.Rd.RdContext`1 : RdContextBase {
    [NotNullAttribute]
public CtxReadDelegate`1<T> ReadDelegate;
    [NotNullAttribute]
public CtxWriteDelegate`1<T> WriteDelegate;
    public T Value { get; }
    public T ValueForPerContextEntity { get; }
    internal object ValueBoxed { get; }
    protected RdContext`1(string key, bool isHeavy, CtxReadDelegate`1<T> readDelegate, CtxWriteDelegate`1<T> writeDelegate);
    public abstract virtual T get_Value();
    public virtual T get_ValueForPerContextEntity();
    internal sealed virtual object get_ValueBoxed();
    public abstract virtual IDisposable UpdateValue(T newValue);
    public virtual IDisposable UpdateValueBoxed(object newValue);
    protected internal sealed virtual void RegisterOn(ProtocolContexts contexts);
}
public abstract class JetBrains.Rd.RdContextBase : object {
    [NotNullAttribute]
public string Key;
    public bool IsHeavy;
    internal object ValueBoxed { get; }
    protected RdContextBase(string key, bool isHeavy);
    public static RdContextBase Read(SerializationCtx ctx, UnsafeReader reader);
    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdContextBase value);
    public sealed virtual bool Equals(RdContextBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RdContextBase left, RdContextBase right);
    public static bool op_Inequality(RdContextBase left, RdContextBase right);
    protected internal abstract virtual void RegisterOn(ProtocolContexts contexts);
    protected internal abstract virtual void RegisterOn(ISerializers serializers);
    internal abstract virtual object get_ValueBoxed();
    public abstract virtual IDisposable UpdateValueBoxed(object newValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.RdId : ValueType {
    public static RdId Nil;
    public static RdId Root;
    public static RdId TestValue;
    public static int MaxStaticId;
    private long myValue;
    public bool IsNil { get; }
    public long Value { get; }
    public RdId(long value);
    private static RdId();
    [NullableContextAttribute("2")]
public static RdId Define(Nullable`1<long> id);
    public static RdId Define(Type type, Nullable`1<long> id);
    public static RdId DefineByFqn(Type type);
    [PureAttribute]
public RdId Mix(string tail);
    [PureAttribute]
public RdId Mix(int tail);
    [PureAttribute]
public RdId Mix(long tail);
    [NullableContextAttribute("2")]
public static long Hash(string s, long initValue);
    public bool get_IsNil();
    public long get_Value();
    public sealed virtual bool Equals(RdId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [PureAttribute]
public void Write(UnsafeWriter writer);
    public static RdId Read(UnsafeReader reader);
    public static void Write(UnsafeWriter writer, RdId value);
    public static bool op_Equality(RdId left, RdId right);
    public static bool op_Inequality(RdId left, RdId right);
}
public class JetBrains.Rd.SerializationCtx : ValueType {
    [CompilerGeneratedAttribute]
private ISerializers <Serializers>k__BackingField;
    [NotNullAttribute]
public IDictionary`2<string, IInternRoot`1<object>> InternRoots;
    public ISerializers Serializers { get; private set; }
    public SerializationCtx(ISerializers serializers, IDictionary`2<string, IInternRoot`1<object>> internRoots);
    public SerializationCtx(IProtocol protocol, IDictionary`2<string, IInternRoot`1<object>> internRoots);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ISerializers get_Serializers();
    [CompilerGeneratedAttribute]
private void set_Serializers(ISerializers value);
    public SerializationCtx WithInternRootsHere(RdBindableBase owner, String[] keys);
    public T ReadInterned(UnsafeReader stream, string internKey, CtxReadDelegate`1<T> readValueDelegate);
    public void WriteInterned(UnsafeWriter stream, T value, string internKey, CtxWriteDelegate`1<T> writeValueDelegate);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Tasks.IRdCall`2 {
    public abstract virtual TRes Sync(TReq request, RpcTimeouts timeouts);
    [ObsoleteAttribute("Use overload with Lifetime")]
public abstract virtual IRdTask`1<TRes> Start(TReq request, IScheduler responseScheduler);
    public abstract virtual IRdTask`1<TRes> Start(Lifetime lifetime, TReq request, IScheduler responseScheduler);
}
[NullableContextAttribute("2")]
public interface JetBrains.Rd.Tasks.IRdEndpoint`2 {
    [ObsoleteAttribute("This is an internal API. It is preferable to use SetSync or SetAsync extension methods")]
public abstract virtual void Set(Func`3<Lifetime, TReq, RdTask`1<TRes>> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    public abstract virtual void SetRdTask(Func`3<Lifetime, TReq, RdTask`1<TRes>> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
}
[NullableContextAttribute("1")]
[PublicAPIAttribute]
public interface JetBrains.Rd.Tasks.IRdTask`1 {
    public IReadonlyProperty`1<RdTaskResult`1<T>> Result { get; }
    public abstract virtual IReadonlyProperty`1<RdTaskResult`1<T>> get_Result();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Tasks.RdCall`2 : RdReactiveBase {
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<TReq> <ReadRequestDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<TReq> <WriteRequestDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxReadDelegate`1<TRes> <ReadResponseDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private CtxWriteDelegate`1<TRes> <WriteResponseDelegate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<Lifetime, TReq, RdTask`1<TRes>> <Handler>k__BackingField;
    private Lifetime myBindLifetime;
    [NullableAttribute("2")]
private IScheduler myCancellationScheduler;
    [NullableAttribute("2")]
private IScheduler myHandlerScheduler;
    [PublicAPIAttribute]
public CtxReadDelegate`1<TReq> ReadRequestDelegate { get; }
    [PublicAPIAttribute]
public CtxWriteDelegate`1<TReq> WriteRequestDelegate { get; }
    [PublicAPIAttribute]
public CtxReadDelegate`1<TRes> ReadResponseDelegate { get; }
    [PublicAPIAttribute]
public CtxWriteDelegate`1<TRes> WriteResponseDelegate { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PublicAPIAttribute]
public Func`3<Lifetime, TReq, RdTask`1<TRes>> Handler { get; private set; }
    protected string ShortName { get; }
    public RdCall`2(CtxReadDelegate`1<TReq> readRequest, CtxWriteDelegate`1<TReq> writeRequest, CtxReadDelegate`1<TRes> readResponse, CtxWriteDelegate`1<TRes> writeResponse);
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<TReq> get_ReadRequestDelegate();
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<TReq> get_WriteRequestDelegate();
    [CompilerGeneratedAttribute]
public CtxReadDelegate`1<TRes> get_ReadResponseDelegate();
    [CompilerGeneratedAttribute]
public CtxWriteDelegate`1<TRes> get_WriteResponseDelegate();
    [CompilerGeneratedAttribute]
public Func`3<Lifetime, TReq, RdTask`1<TRes>> get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(Func`3<Lifetime, TReq, RdTask`1<TRes>> value);
    protected virtual void PreInit(Lifetime lifetime, IProtocol proto);
    [NullableContextAttribute("2")]
public sealed virtual void SetRdTask(Func`3<Lifetime, TReq, RdTask`1<TRes>> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This is an internal API. It is preferable to use SetSync or SetAsync extension methods")]
public sealed virtual void Set(Func`3<Lifetime, TReq, RdTask`1<TRes>> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [PublicAPIAttribute]
public virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    private void OnWireReceived(SerializationCtx ctx, UnsafeReader reader, Endpoint<TReq, TRes> wiredTask, IRdWireableDispatchHelper dispatchHelper);
    public sealed virtual TRes Sync(TReq request, RpcTimeouts timeouts);
    public sealed virtual IRdTask`1<TRes> Start(TReq request, IScheduler responseScheduler);
    public sealed virtual IRdTask`1<TRes> Start(Lifetime lifetime, TReq request, IScheduler responseScheduler);
    private IRdTask`1<TRes> StartInternal(Lifetime requestLifetime, TReq request, IScheduler scheduler);
    public static RdCall`2<TReq, TRes> Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<TReq> readRequest, CtxWriteDelegate`1<TReq> writeRequest, CtxReadDelegate`1<TRes> readResponse, CtxWriteDelegate`1<TRes> writeResponse);
    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdCall`2<TReq, TRes> value);
    protected virtual string get_ShortName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class JetBrains.Rd.Tasks.RdFault : Exception {
    [CompilerGeneratedAttribute]
private string <ReasonTypeFqn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonMessage>k__BackingField;
    public string ReasonTypeFqn { get; private set; }
    public string ReasonText { get; private set; }
    public string ReasonMessage { get; private set; }
    public RdFault(Exception inner);
    protected RdFault(SerializationInfo info, StreamingContext context);
    public RdFault(string reasonTypeFqn, string reasonMessage, string reasonText, Exception reason);
    [CompilerGeneratedAttribute]
public string get_ReasonTypeFqn();
    [CompilerGeneratedAttribute]
private void set_ReasonTypeFqn(string value);
    [CompilerGeneratedAttribute]
public string get_ReasonText();
    [CompilerGeneratedAttribute]
private void set_ReasonText(string value);
    [CompilerGeneratedAttribute]
public string get_ReasonMessage();
    [CompilerGeneratedAttribute]
private void set_ReasonMessage(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static RdFault Read(SerializationCtx ctx, UnsafeReader reader);
    public static void Write(SerializationCtx ctx, UnsafeWriter writer, RdFault value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Rd.Tasks.RdTask : object {
    [PublicAPIAttribute]
public static RdTask`1<T> Successful(T result);
    [PublicAPIAttribute]
public static RdTask`1<T> Faulted(Exception exception);
    [PublicAPIAttribute]
public static RdTask`1<T> Cancelled();
    private static RdTask`1<T> FromResult(RdTaskResult`1<T> result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Tasks.RdTask`1 : object {
    internal WriteOnceProperty`1<RdTaskResult`1<T>> ResultInternal;
    public IReadonlyProperty`1<RdTaskResult`1<T>> Result { get; }
    public sealed virtual IReadonlyProperty`1<RdTaskResult`1<T>> get_Result();
    public void Set(T value);
    public void SetCancelled();
    public void Set(Exception e);
    [ObsoleteAttribute("Use 'RdTask.Successful<T>(T)' instead")]
public static RdTask`1<T> Successful(T result);
    [ObsoleteAttribute("Use 'RdTask.Faulted<T>(Exception)' instead")]
public static RdTask`1<T> Faulted(Exception exception);
    [ObsoleteAttribute("Use 'RdTask.Cancelled<T>()' instead")]
public static RdTask`1<T> Cancelled();
    [PublicAPIAttribute]
public static Task`1<T> op_Implicit(RdTask`1<T> task);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Tasks.RdTaskEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static bool IsSucceed(IRdTask`1<T> task);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static bool IsCanceled(IRdTask`1<T> task);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static bool IsFaulted(IRdTask`1<T> task);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Wait(IRdTask`1<T> task, TimeSpan timeout);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static RdTask`1<T> ToRdTask(Task`1<T> task);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static RdTask`1<Unit> ToRdTask(Task task);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static void Set(IRdEndpoint`2<TReq, TRes> endpoint, Func`3<Lifetime, TReq, Task`1<TRes>> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static void SetAsync(IRdEndpoint`2<TReq, TRes> endpoint, Func`3<Lifetime, TReq, Task`1<TRes>> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static void SetVoidAsync(IRdEndpoint`2<TReq, Unit> endpoint, Func`3<Lifetime, TReq, Task> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static void Set(IRdEndpoint`2<TReq, TRes> endpoint, Func`3<Lifetime, TReq, TRes> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static void SetSync(IRdEndpoint`2<TReq, TRes> endpoint, Func`3<Lifetime, TReq, TRes> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static void Set(IRdEndpoint`2<TReq, TRes> endpoint, Func`2<TReq, TRes> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static void SetSync(IRdEndpoint`2<TReq, TRes> endpoint, Func`2<TReq, TRes> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [ExtensionAttribute]
[PublicAPIAttribute]
public static void SetVoid(IRdEndpoint`2<TReq, Unit> endpoint, Action`1<TReq> handler, IScheduler cancellationScheduler, IScheduler handlerScheduler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static Task`1<T> AsTask(IRdTask`1<T> task);
}
public class JetBrains.Rd.Tasks.RdTaskResult`1 : object {
    [CompilerGeneratedAttribute]
private RdTaskStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private RdFault <Error>k__BackingField;
    public RdTaskStatus Status { get; }
    public T Result { get; }
    public RdFault Error { get; }
    private RdTaskResult`1(RdTaskStatus status, T result, RdFault error);
    [CompilerGeneratedAttribute]
public RdTaskStatus get_Status();
    [CompilerGeneratedAttribute]
public T get_Result();
    [CompilerGeneratedAttribute]
public RdFault get_Error();
    internal static RdTaskResult`1<T> Success(T result);
    internal static RdTaskResult`1<T> Cancelled();
    internal static RdTaskResult`1<T> Faulted(Exception exception);
    public T Unwrap();
    public static RdTaskResult`1<T> Read(CtxReadDelegate`1<T> readDelegate, SerializationCtx ctx, UnsafeReader reader);
    public static void Write(CtxWriteDelegate`1<T> writeDelegate, SerializationCtx ctx, UnsafeWriter writer, RdTaskResult`1<T> value);
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Rd.Tasks.RdTaskStatus : Enum {
    public int value__;
    public static RdTaskStatus Success;
    public static RdTaskStatus Canceled;
    public static RdTaskStatus Faulted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Tasks.RpcTimeouts : object {
    public static RpcTimeouts Default;
    public static RpcTimeouts Maximal;
    public static bool RespectRpcTimeouts;
    public TimeSpan WarnAwaitTime;
    public TimeSpan ErrorAwaitTime;
    public RpcTimeouts(TimeSpan warnAwaitTime, TimeSpan errorAwaitTime);
    private static RpcTimeouts();
    public static RpcTimeouts Max(RpcTimeouts x, RpcTimeouts y);
    public static RpcTimeouts GetRpcTimeouts(RpcTimeouts timeouts);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class JetBrains.Rd.Tasks.WiredRdTask`2 : RdTask`1<TRes> {
    private RdCall`2<TReq, TRes> myCall;
    [CompilerGeneratedAttribute]
private RdId <RdId>k__BackingField;
    [CompilerGeneratedAttribute]
private IScheduler <WireScheduler>k__BackingField;
    [NullableAttribute("2")]
public IWire Wire;
    [CompilerGeneratedAttribute]
private RName <Location>k__BackingField;
    public RdId RdId { get; }
    public bool IsBound { get; }
    public IScheduler WireScheduler { get; }
    public RName Location { get; }
    protected WiredRdTask`2(RdCall`2<TReq, TRes> call, RdId rdId, IScheduler wireScheduler);
    [CompilerGeneratedAttribute]
public sealed virtual RdId get_RdId();
    public bool get_IsBound();
    [CompilerGeneratedAttribute]
public IScheduler get_WireScheduler();
    [CompilerGeneratedAttribute]
public sealed virtual RName get_Location();
    [NullableContextAttribute("2")]
public sealed virtual IProtocol TryGetProto();
    public sealed virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    public sealed virtual void OnWireReceived(UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    public abstract virtual void OnWireReceived(IProtocol proto, SerializationCtx ctx, UnsafeReader reader, IRdWireableDispatchHelper dispatchHelper);
    protected void Trace(ILog log, string message, object additional);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Text.Impl.Intrinsics.RdAssertion : object {
    [CompilerGeneratedAttribute]
private int <MasterVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SlaveVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public static CtxReadDelegate`1<RdAssertion> Read;
    public static CtxWriteDelegate`1<RdAssertion> Write;
    public int MasterVersion { get; private set; }
    public int SlaveVersion { get; private set; }
    public string Text { get; private set; }
    public RdAssertion(int masterVersion, int slaveVersion, string text);
    private static RdAssertion();
    [CompilerGeneratedAttribute]
public int get_MasterVersion();
    [CompilerGeneratedAttribute]
private void set_MasterVersion(int value);
    [CompilerGeneratedAttribute]
public int get_SlaveVersion();
    [CompilerGeneratedAttribute]
private void set_SlaveVersion(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(RdAssertion other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Rd.Text.Impl.Intrinsics.RdChangeOrigin : Enum {
    public int value__;
    public static RdChangeOrigin Slave;
    public static RdChangeOrigin Master;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Text.Impl.Intrinsics.RdTextBufferChange : object {
    public RdTextChange Change;
    public TextBufferVersion Version;
    public RdChangeOrigin Origin;
    public static CtxReadDelegate`1<RdTextBufferChange> ReadDelegate;
    public static CtxWriteDelegate`1<RdTextBufferChange> WriteDelegate;
    public RdTextBufferChange(TextBufferVersion version, RdChangeOrigin origin, RdTextChange change);
    private static RdTextBufferChange();
    public sealed virtual void Print(PrettyPrinter printer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Text.Impl.Intrinsics.RdTextBufferState : RdBindableBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RdProperty`1<RdTextBufferChange> _Changes;
    private RdProperty`1<TextBufferVersion> _VersionBeforeTypingSession;
    private RdProperty`1<RdAssertion> _AssertedMasterText;
    private RdProperty`1<RdAssertion> _AssertedSlaveText;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxReadDelegate`1<RdTextBufferChange> ReadRdTextBufferChangeNullable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CtxWriteDelegate`1<RdTextBufferChange> WriteRdTextBufferChangeNullable;
    public static CtxReadDelegate`1<RdTextBufferState> Read;
    public static CtxWriteDelegate`1<RdTextBufferState> Write;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IViewableProperty`1<RdTextBufferChange> Changes { get; }
    public IViewableProperty`1<TextBufferVersion> VersionBeforeTypingSession { get; }
    public IViewableProperty`1<RdAssertion> AssertedMasterText { get; }
    public IViewableProperty`1<RdAssertion> AssertedSlaveText { get; }
    private RdTextBufferState(RdProperty`1<RdTextBufferChange> changes, RdProperty`1<TextBufferVersion> versionBeforeTypingSession, RdProperty`1<RdAssertion> assertedMasterText, RdProperty`1<RdAssertion> assertedSlaveText);
    private static RdTextBufferState();
    public IViewableProperty`1<RdTextBufferChange> get_Changes();
    public IViewableProperty`1<TextBufferVersion> get_VersionBeforeTypingSession();
    public IViewableProperty`1<RdAssertion> get_AssertedMasterText();
    public IViewableProperty`1<RdAssertion> get_AssertedSlaveText();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Rd.Text.Impl.RdTextBuffer : RdDelegateBase`1<RdTextBufferState> {
    [CompilerGeneratedAttribute]
private bool <IsMaster>k__BackingField;
    private RdChangeOrigin myLocalOrigin;
    private List`1<RdTextBufferChange> myChangesToConfirmOrRollback;
    private IViewableProperty`1<RdTextChange> myTextChanged;
    [NullableAttribute("2")]
private TextBufferTypingSession myActiveSession;
    [CompilerGeneratedAttribute]
private TextBufferVersion <BufferVersion>k__BackingField;
    private Lifetime myBindLifetime;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IScheduler <Scheduler>k__BackingField;
    public bool IsMaster { get; }
    public bool IsCommitting { get; }
    public TextBufferVersion BufferVersion { get; private set; }
    [NullableAttribute("2")]
public IScheduler Scheduler { get; public set; }
    public RdTextBuffer(RdTextBufferState state, bool isMaster);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMaster();
    public bool get_IsCommitting();
    [CompilerGeneratedAttribute]
public sealed virtual TextBufferVersion get_BufferVersion();
    [CompilerGeneratedAttribute]
private void set_BufferVersion(TextBufferVersion value);
    public virtual void PreBind(Lifetime lf, IRdDynamic parent, string name);
    public virtual void Bind();
    private void ReceiveChange(RdTextBufferChange rdTextBufferChange);
    private void ClearState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IScheduler get_Scheduler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Scheduler(IScheduler value);
    public sealed virtual void Fire(RdTextChange change);
    private void IncrementBufferVersion();
    public sealed virtual void Advise(Lifetime lifetime, Action`1<RdTextChange> change);
    public sealed virtual void Reset(string text);
    public sealed virtual void AssertState(string allText);
    public sealed virtual ITypingSession StartTypingSession(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <Bind>b__17_0(RdTextBufferChange change);
    [CompilerGeneratedAttribute]
private void <StartTypingSession>b__29_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Text.Intrinsics.RdTextChange : object {
    public int FullTextLength;
    public RdTextChangeKind Kind;
    public string New;
    public string Old;
    public int StartOffset;
    public RdTextChange(RdTextChangeKind kind, int startOffset, string old, string new, int fullTextLength);
    public sealed virtual void Print(PrettyPrinter printer);
    public RdTextChange Reverse();
    private static RdTextChangeKind ReverseKind(RdTextChangeKind kind);
    private static string Escape(string s);
    public virtual string ToString();
}
public enum JetBrains.Rd.Text.Intrinsics.RdTextChangeKind : Enum {
    public int value__;
    public static RdTextChangeKind Insert;
    public static RdTextChangeKind Remove;
    public static RdTextChangeKind Replace;
    public static RdTextChangeKind Reset;
    public static RdTextChangeKind PromoteVersion;
    public static RdTextChangeKind InsertLeftSide;
    public static RdTextChangeKind InsertRightSide;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Rd.Text.Intrinsics.RdTextChangeSerializer : object {
    public static CtxReadDelegate`1<RdTextChange> ReadDelegate;
    public static CtxWriteDelegate`1<RdTextChange> WriteDelegate;
    private static RdTextChangeSerializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Text.Intrinsics.TextBufferVersion : ValueType {
    public static TextBufferVersion InitVersion;
    [CompilerGeneratedAttribute]
private int <Master>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slave>k__BackingField;
    private static IEqualityComparer`1<TextBufferVersion> ourMasterVersionSlaveVersionComparerInstance;
    public int Master { get; }
    public int Slave { get; }
    public static IEqualityComparer`1<TextBufferVersion> MasterVersionSlaveVersionComparer { get; }
    public TextBufferVersion(int master, int slave);
    private static TextBufferVersion();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Master();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Slave();
    public bool Equals(TextBufferVersion other);
    public static bool op_Equality(TextBufferVersion left, TextBufferVersion right);
    public static bool op_Inequality(TextBufferVersion left, TextBufferVersion right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static IEqualityComparer`1<TextBufferVersion> get_MasterVersionSlaveVersionComparer();
    public TextBufferVersion IncrementMaster();
    public TextBufferVersion IncrementSlave();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Rd.Text.Intrinsics.TextBufferVersionSerializer : object {
    public static CtxReadDelegate`1<TextBufferVersion> ReadDelegate;
    public static CtxWriteDelegate`1<TextBufferVersion> WriteDelegate;
    private static TextBufferVersionSerializer();
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Text.ITextBuffer {
    public TextBufferVersion BufferVersion { get; }
    public bool IsMaster { get; }
    public abstract virtual TextBufferVersion get_BufferVersion();
    public abstract virtual bool get_IsMaster();
    public abstract virtual void Reset(string text);
    public abstract virtual void AssertState(string allText);
}
public interface JetBrains.Rd.Text.ITextBufferWithTypingSession {
    [NullableContextAttribute("1")]
public abstract virtual ITypingSession StartTypingSession(Lifetime lifetime);
}
public interface JetBrains.Rd.Text.ITypingSession {
    public abstract virtual void CommitRemoteChanges();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Text.RdTextChangeEx : object {
    [ExtensionAttribute]
public static int GetDelta(RdTextChange that);
    [ExtensionAttribute]
public static void AssertDocumentLength(RdTextChange that, int currentLen);
}
public abstract class JetBrains.Rd.ThreadLocalRdContext`1 : RdContext`1<T> {
    [ThreadStaticAttribute]
[CanBeNullAttribute]
private static SingleThreadObjectPool`1<UpdateValueCookie<T>> ourPool;
    private AsyncLocal`1<T> myValue;
    public T Value { get; }
    protected ThreadLocalRdContext`1(string key, bool isHeavy, CtxReadDelegate`1<T> readDelegate, CtxWriteDelegate`1<T> writeDelegate);
    public virtual T get_Value();
    public virtual IDisposable UpdateValue(T newValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Rd.Util.ConcurrentSet`1 : object {
    private ConcurrentDictionary`2<T, bool> myDictionary;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ISet<T>.Add(T item);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Util.PrettyPrinter : object {
    private bool myNeedIndent;
    private int myIndent;
    private StringBuilder myBuilder;
    [PublicAPIAttribute]
public static int InfiniteCapacity;
    [CompilerGeneratedAttribute]
private int <BufferCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CollectionMaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintContent>k__BackingField;
    [PublicAPIAttribute]
public int BufferCapacity { get; public set; }
    [PublicAPIAttribute]
public int Step { get; public set; }
    [PublicAPIAttribute]
public int CollectionMaxLength { get; public set; }
    [PublicAPIAttribute]
public bool PrintContent { get; public set; }
    public bool BufferExceeded { get; }
    [CompilerGeneratedAttribute]
public int get_BufferCapacity();
    [CompilerGeneratedAttribute]
public void set_BufferCapacity(int value);
    [CompilerGeneratedAttribute]
public int get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(int value);
    [CompilerGeneratedAttribute]
public int get_CollectionMaxLength();
    [CompilerGeneratedAttribute]
public void set_CollectionMaxLength(int value);
    [CompilerGeneratedAttribute]
public bool get_PrintContent();
    [CompilerGeneratedAttribute]
public void set_PrintContent(bool value);
    public bool get_BufferExceeded();
    public PrettyPrinterIndentCookie IndentCookie();
    public void Print(string str);
    public void Println();
    public void Println(string str);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Rd.Util.PrintableEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string PrintToString(IPrintable printable, Nullable`1<int> collectionMaxLength);
}
public class JetBrains.Rd.Util.SingleLinePrettyPrinter : PrettyPrinter {
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.Rd.WireBase : object {
    protected MessageBroker MessageBroker;
    private ProtocolContexts myContexts;
    private bool myBackwardsCompatibleWireFormat;
    public bool IsStub { get; }
    public ProtocolContexts Contexts { get; public set; }
    public bool BackwardsCompatibleWireFormat { get; public set; }
    [ObsoleteAttribute]
protected WireBase(IScheduler scheduler);
    public sealed virtual bool get_IsStub();
    public sealed virtual ProtocolContexts get_Contexts();
    public sealed virtual void set_Contexts(ProtocolContexts value);
    public sealed virtual void StartDeliveringMessages();
    public bool get_BackwardsCompatibleWireFormat();
    public void set_BackwardsCompatibleWireFormat(bool value);
    protected void Receive(Byte[] msg);
    protected abstract virtual void SendPkg(Cookie pkg);
    public sealed virtual void Send(RdId id, TParam param, Action`2<TParam, UnsafeWriter> writer);
    public sealed virtual void Advise(Lifetime lifetime, IRdWireable reactive);
    [NullableContextAttribute("2")]
public sealed virtual IRdWireable TryGetById(RdId rdId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.WireEx : object {
    [ExtensionAttribute]
public static int GetServerPort(IWire wire);
    [ExtensionAttribute]
public static void Send(IWire wire, RdId id, Action`1<UnsafeWriter> writer);
    [ExtensionAttribute]
public static void WriteContext(IWire wire, UnsafeWriter writer);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
