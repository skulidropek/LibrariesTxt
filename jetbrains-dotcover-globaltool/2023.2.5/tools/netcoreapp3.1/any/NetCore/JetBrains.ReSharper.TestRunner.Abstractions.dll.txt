[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Abstractions.Extensions.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrCreate(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> factory);
    [ExtensionAttribute]
public static TValue GetOrCreate(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> factory);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Abstractions.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> sequence, Action`1<T> action);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Abstractions.Extensions.ObjectExtensions : object {
    [ExtensionAttribute]
public static T As(object instance);
    [ExtensionAttribute]
public static TInput With(TInput o, Action`1<TInput> action);
    [ExtensionAttribute]
public static TResult With(TInput o, Func`2<TInput, TResult> evaluator);
    [ExtensionAttribute]
public static TResult With(TInput o, Func`2<TInput, TResult> evaluator, TResult defaultValue);
    [ExtensionAttribute]
public static T NotNull(T value, string message);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Abstractions.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static string SubstringBefore(string original, string value);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.TestRunner.Abstractions.Extensions.StringExtensions/<SubstringsBefore>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<string> SubstringsBefore(string original, string value, bool includeSelf);
    [ExtensionAttribute]
public static string SubstringBeforeLast(string original, string value);
    [ExtensionAttribute]
private static string SubstringBefore(string original, int index);
    [ExtensionAttribute]
public static string SubstringAfter(string original, string value);
    [ExtensionAttribute]
public static string SubstringAfterLast(string original, string value);
    [ExtensionAttribute]
private static string SubstringAfter(string original, int index, int length);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IAsyncMessageHandler`1 {
    public abstract virtual Task Execute(T message);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IAsyncMessageHandler`2 {
    public abstract virtual Task`1<TResult> Execute(T message);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IClientEndpoint {
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IInteroperableMessageBroker {
    public abstract virtual void SendMessage(IMessage message, MarshaledTask task);
    public abstract virtual void SendMessage(IMessage`1<TResult> message, MarshaledTask`1<TResult> task);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.ILogger {
    public abstract virtual bool IsEnabled(LoggingLevel level);
    public abstract virtual void Log(LoggingLevel level, string message, Object[] args);
    public abstract virtual void Log(LoggingLevel level, Exception exception, string message, Object[] args);
    public abstract virtual void Log(LoggingLevel level, LogMessageGenerator messageFunc);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.ILoggerFactory {
    public abstract virtual ILogger GetLogger(string category);
    public abstract virtual void Setup(AppDomain appDomain, LoggerFactoryAppointment appointment);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IMessage {
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IMessage`1 {
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IMessageBroker {
    public abstract virtual Task SendMessage(IMessage message);
    public abstract virtual Task`1<TResult> SendMessage(IMessage`1<TResult> message);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IMessageHandler`1 {
    public abstract virtual void Execute(T message);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IMessageHandler`2 {
    public abstract virtual TResult Execute(T message);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IMessageHandlerMarker {
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IMessageTransport {
    public abstract virtual Task`1<IAutoRegisterInProtocol> SendMessage(IAutoRegisterInProtocol message);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.IServerEndpoint {
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Isolation.IAssemblyResolver {
    public abstract virtual Type GetType(string fullyQualifiedName);
    public abstract virtual Assembly LoadFrom(string assemblyFile);
    public abstract virtual IDisposable RegisterAssembly(AssemblyName asmName, string pathToAssembly);
    public abstract virtual IDisposable RegisterPath(string path);
    public abstract virtual IDisposable ResolveRelativeTo(string path);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Isolation.IDefaultTestAdapterLoadContextFactory {
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Isolation.IFileSystem {
    public string CacheDirectory { get; }
    public abstract virtual string get_CacheDirectory();
    public abstract virtual string CreateTempDirectory();
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Isolation.ILoadContext {
    public string Name { get; }
    public bool IsCollectible { get; }
    public IAssemblyResolver AssemblyResolver { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsCollectible();
    public abstract virtual IAssemblyResolver get_AssemblyResolver();
    public abstract virtual void Unload();
    public abstract virtual object Create(Type type, T1 p1);
    public abstract virtual object Create(Type type, T1 p1, T2 p2);
    public abstract virtual object Create(Type type, T1 p1, T2 p2, T3 p3);
    public abstract virtual object Create(Type type, Object[] args);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Isolation.ITestAdapterLoadContext {
    public abstract virtual ITestDiscoverer InitializeTestDiscoverer();
    public abstract virtual ITestExecutor InitializeTestExecutor();
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Isolation.ITestAdapterLoadContextFactory {
    public abstract virtual ITestAdapterLoadContext Initialize(TestRequest request);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.ITestDiscoverer {
    public abstract virtual void DiscoverTests(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    public abstract virtual void AbortDiscovery();
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.ITestDiscoverySink {
    public abstract virtual void TestsDiscovered(RemoteTask[] tasks);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.ITestExecutionSink {
    public abstract virtual void TestStarting(RemoteTask task);
    public abstract virtual void TestException(RemoteTask task, ExceptionInfo[] exceptions);
    public abstract virtual void TestFinished(RemoteTask task, TestOutcome outcome, string message, Nullable`1<TimeSpan> duration);
    public abstract virtual void TestOutput(RemoteTask task, string text, TestOutputType outputType);
    public abstract virtual void DynamicTestDiscovered(RemoteTask task);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.ITestExecutor {
    public abstract virtual void RunTests(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    public abstract virtual void AbortRun();
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.ITestRunnerClientController {
    public abstract virtual void BeforeRunStarted();
    public abstract virtual void AfterRunFinished();
    public abstract virtual void BeforeTestStarted(RemoteTask task);
    public abstract virtual void AfterTestFinished(RemoteTask remoteTask, String& message, TestOutcome& outcome);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Abstractions.Logger : object {
    [CompilerGeneratedAttribute]
private static ILoggerFactory <Factory>k__BackingField;
    public static ILoggerFactory Factory { get; internal set; }
    [CompilerGeneratedAttribute]
public static ILoggerFactory get_Factory();
    [CompilerGeneratedAttribute]
internal static void set_Factory(ILoggerFactory value);
    public static ILogger GetLogger(Type type);
    public static ILogger GetLogger();
    public static ILogger GetLogger(string category);
    [ExtensionAttribute]
public static bool IsTraceEnabled(ILogger this);
    [ExtensionAttribute]
public static bool IsVerboseEnabled(ILogger this);
    [ExtensionAttribute]
public static bool IsDebugEnabled(ILogger this);
    [ExtensionAttribute]
public static bool IsInfoEnabled(ILogger this);
    [ExtensionAttribute]
public static bool IsWarnEnabled(ILogger this);
    [ExtensionAttribute]
public static void LogFormat(ILogger this, LoggingLevel level, string message, T1 t1);
    [ExtensionAttribute]
public static void LogFormat(ILogger this, LoggingLevel level, string message, T1 t1, T2 t2);
    [ExtensionAttribute]
public static void LogFormat(ILogger this, LoggingLevel level, string message, T1 t1, T2 t2, T3 t3);
    [ExtensionAttribute]
public static void LogFormat(ILogger this, LoggingLevel level, string message, T1 t1, T2 t2, T3 t3, T4 t4);
    [ExtensionAttribute]
public static void LogFormat(ILogger this, LoggingLevel level, string message, Object[] args);
    [ExtensionAttribute]
public static void Trace(ILogger this, string message);
    [ExtensionAttribute]
public static void Trace(ILogger this, string message, T1 t1);
    [ExtensionAttribute]
public static void Trace(ILogger this, string message, T1 t1, T2 t2);
    [ExtensionAttribute]
public static void Trace(ILogger this, string message, T1 t1, T2 t2, T3 t3);
    [ExtensionAttribute]
public static void Trace(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4);
    [ExtensionAttribute]
public static void Trace(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5);
    [ExtensionAttribute]
public static void Trace(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6);
    [ExtensionAttribute]
public static void Trace(ILogger this, Exception ex, string message);
    [ExtensionAttribute]
public static void Verbose(ILogger this, string message);
    [ExtensionAttribute]
public static void Verbose(ILogger this, string message, T1 t1);
    [ExtensionAttribute]
public static void Verbose(ILogger this, string message, T1 t1, T2 t2);
    [ExtensionAttribute]
public static void Verbose(ILogger this, string message, T1 t1, T2 t2, T3 t3);
    [ExtensionAttribute]
public static void Verbose(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4);
    [ExtensionAttribute]
public static void Verbose(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5);
    [ExtensionAttribute]
public static void Verbose(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6);
    [ExtensionAttribute]
public static void Verbose(ILogger this, string message, Object[] args);
    [ExtensionAttribute]
public static void Verbose(ILogger this, Exception ex, string message);
    [ExtensionAttribute]
public static void Debug(ILogger this, string message);
    [ExtensionAttribute]
public static void Debug(ILogger this, string message, T1 t1);
    [ExtensionAttribute]
public static void Debug(ILogger this, string message, T1 t1, T2 t2);
    [ExtensionAttribute]
public static void Debug(ILogger this, string message, T1 t1, T2 t2, T3 t3);
    [ExtensionAttribute]
public static void Debug(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4);
    [ExtensionAttribute]
public static void Debug(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5);
    [ExtensionAttribute]
public static void Debug(ILogger this, string message, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6);
    [ExtensionAttribute]
public static void Debug(ILogger this, string message, Object[] args);
    [ExtensionAttribute]
public static void Debug(ILogger this, Exception ex, string message);
    [ExtensionAttribute]
public static void Info(ILogger this, string message);
    [ExtensionAttribute]
public static void Info(ILogger this, string message, Object[] args);
    [ExtensionAttribute]
public static void Info(ILogger this, Exception ex, string message);
    [ExtensionAttribute]
public static void Warn(ILogger this, string message);
    [ExtensionAttribute]
public static void Warn(ILogger this, string message, Object[] args);
    [ExtensionAttribute]
public static void Warn(ILogger this, Exception ex, string message);
    [ExtensionAttribute]
public static void Error(ILogger this, string message);
    [ExtensionAttribute]
public static void Error(ILogger this, string message, Object[] args);
    [ExtensionAttribute]
public static void Error(ILogger this, Exception ex, string message);
    [ExtensionAttribute]
public static void Catch(ILogger log, Action action);
    [ExtensionAttribute]
public static T Catch(ILogger log, Func`1<T> action);
    [ExtensionAttribute]
public static void CatchWarn(ILogger log, Action action);
    [ExtensionAttribute]
public static T CatchWarn(ILogger log, Func`1<T> action);
    [ExtensionAttribute]
private static string FormatEx(string s, Object[] p);
}
public enum JetBrains.ReSharper.TestRunner.Abstractions.LoggerFactoryAppointment : Enum {
    public int value__;
    public static LoggerFactoryAppointment Principal;
    public static LoggerFactoryAppointment Proxy;
}
public class JetBrains.ReSharper.TestRunner.Abstractions.LogMessageGenerator : MulticastDelegate {
    public LogMessageGenerator(object object, IntPtr method);
    public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.LongLivedMarshalByRefObject : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.MarshaledTask : MarshalByRefObject {
    private TaskCompletionSource`1<int> myTcs;
    public Task Task { get; }
    public void SetResult();
    public void SetException(Exception e);
    public void SetCanceled();
    public Task get_Task();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.MarshaledTask`1 : MarshalByRefObject {
    private TaskCompletionSource`1<TResult> myTcs;
    public Task`1<TResult> Task { get; }
    public void SetResult(TResult r);
    public void SetException(Exception e);
    public void SetCanceled();
    public Task`1<TResult> get_Task();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.AccumulatedTestResultsMessage : object {
    [CompilerGeneratedAttribute]
private RemoteTask[] <DiscoveredTests>k__BackingField;
    [CompilerGeneratedAttribute]
private TestResult[] <Results>k__BackingField;
    public RemoteTask[] DiscoveredTests { get; }
    public TestResult[] Results { get; }
    public AccumulatedTestResultsMessage(RemoteTask[] discoveredTests, TestResult[] results);
    [CompilerGeneratedAttribute]
public RemoteTask[] get_DiscoveredTests();
    [CompilerGeneratedAttribute]
public TestResult[] get_Results();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.ClientControllerInfo : object {
    [CompilerGeneratedAttribute]
private TypeInfo <ClientController>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AdditionalProbingPaths>k__BackingField;
    public TypeInfo ClientController { get; }
    public String[] AdditionalProbingPaths { get; public set; }
    public ClientControllerInfo(TypeInfo controller);
    [CompilerGeneratedAttribute]
public TypeInfo get_ClientController();
    [CompilerGeneratedAttribute]
public String[] get_AdditionalProbingPaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalProbingPaths(String[] value);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.ConnectMessage : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public ConnectMessage(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.CustomLoader : TestAdapterLoader {
    [CompilerGeneratedAttribute]
private TypeInfo <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    public TypeInfo Factory { get; }
    public IDictionary`2<string, string> Properties { get; }
    public CustomLoader(TypeInfo factory);
    [CompilerGeneratedAttribute]
public TypeInfo get_Factory();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Abstractions.Objects.DataCollector.DataCollectorBrokerExtensions : object {
    [ExtensionAttribute]
public static Task`1<DataCollectorInitializationResult> Initialize(IMessageBroker messageBroker, DataCollectorInitializationRequest request);
    [ExtensionAttribute]
public static Task Finalize(IMessageBroker messageBroker, bool wasCanceled);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.DataCollector.DataCollectorFinalizeMessage : object {
    [CompilerGeneratedAttribute]
private bool <WasCanceled>k__BackingField;
    public bool WasCanceled { get; }
    public DataCollectorFinalizeMessage(bool wasCanceled);
    [CompilerGeneratedAttribute]
public bool get_WasCanceled();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.DataCollector.DataCollectorInitializationRequest : object {
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Config>k__BackingField;
    public string RunSettings { get; public set; }
    public string VisualStudioDirectory { get; public set; }
    public string Config { get; public set; }
    public DataCollectorInitializationRequest(string runSettings, string visualStudioDirectory);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public string get_VisualStudioDirectory();
    [CompilerGeneratedAttribute]
public void set_VisualStudioDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(string value);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.DataCollector.DataCollectorInitializationResult : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    public IDictionary`2<string, string> EnvironmentVariables { get; }
    public DataCollectorInitializationResult(IDictionary`2<string, string> environmentVariables);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.DynamicTestDiscovered : object {
    [CompilerGeneratedAttribute]
private RemoteTask[] <Tasks>k__BackingField;
    public RemoteTask[] Tasks { get; }
    public DynamicTestDiscovered(RemoteTask[] tasks);
    [CompilerGeneratedAttribute]
public RemoteTask[] get_Tasks();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.ExceptionInfo : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public string Type { get; public set; }
    public string Message { get; public set; }
    public string StackTrace { get; public set; }
    public ExceptionInfo(Exception inner);
    public ExceptionInfo(string type, string message, string stackTrace);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    public static ExceptionInfo Wrap(Exception inner);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Objects.IAutoRegisterInProtocol {
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Objects.ITestMessage {
    public Guid TaskId { get; }
    public abstract virtual Guid get_TaskId();
}
public enum JetBrains.ReSharper.TestRunner.Abstractions.Objects.LoggingLevel : Enum {
    public int value__;
    public static LoggingLevel OFF;
    public static LoggingLevel FATAL;
    public static LoggingLevel ERROR;
    public static LoggingLevel WARN;
    public static LoggingLevel INFO;
    public static LoggingLevel VERBOSE;
    public static LoggingLevel DEBUG;
    public static LoggingLevel TRACE;
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.LogMessage : object {
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoggerName>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionInfo <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public DateTime Timestamp { get; public set; }
    public LoggingLevel Level { get; public set; }
    public string LoggerName { get; public set; }
    public ExceptionInfo Exception { get; public set; }
    public string Message { get; public set; }
    public LogMessage(DateTime timestamp, LoggingLevel level, string loggerName, ExceptionInfo exceptionInfo, string message);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public LoggingLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LoggingLevel value);
    [CompilerGeneratedAttribute]
public string get_LoggerName();
    [CompilerGeneratedAttribute]
public void set_LoggerName(string value);
    [CompilerGeneratedAttribute]
public ExceptionInfo get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(ExceptionInfo value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.RemoteAgentInitializationRequest : object {
    [CompilerGeneratedAttribute]
private TestAdapterLoader <TestAdapterLoader>k__BackingField;
    public TestAdapterLoader TestAdapterLoader { get; }
    public RemoteAgentInitializationRequest(TestAdapterLoader loader);
    [CompilerGeneratedAttribute]
public TestAdapterLoader get_TestAdapterLoader();
}
public abstract class JetBrains.ReSharper.TestRunner.Abstractions.Objects.RemoteTask : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    protected bool Equals(RemoteTask other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.RequestAbortMessage : object {
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.RunFinishedMessage : object {
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.RunStartingMessage : object {
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.SetCacheDirectoryMessage : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    public SetCacheDirectoryMessage(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.ShadowCopy : object {
    public static ShadowCopy None;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecursive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileMask>k__BackingField;
    public bool IsEnabled { get; }
    public bool IsRecursive { get; }
    public string FileMask { get; }
    private ShadowCopy(string fileMask, bool isRecursive);
    private static ShadowCopy();
    public static ShadowCopy Custom(string fileMask, bool isRecursive);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public bool get_IsRecursive();
    [CompilerGeneratedAttribute]
public string get_FileMask();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.ShutdownMessage : object {
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestAdapterInfo : TestAdapterLoader {
    [CompilerGeneratedAttribute]
private TypeInfo <Discoverer>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <Executor>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProbingPaths>k__BackingField;
    public TypeInfo Discoverer { get; }
    public TypeInfo Executor { get; }
    public String[] ProbingPaths { get; public set; }
    public TestAdapterInfo(TypeInfo discoverer, TypeInfo executor);
    [CompilerGeneratedAttribute]
public TypeInfo get_Discoverer();
    [CompilerGeneratedAttribute]
public TypeInfo get_Executor();
    [CompilerGeneratedAttribute]
public String[] get_ProbingPaths();
    [CompilerGeneratedAttribute]
public void set_ProbingPaths(String[] value);
}
public abstract class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestAdapterLoader : object {
    [CompilerGeneratedAttribute]
private String[] <AdditionalAssemblies>k__BackingField;
    public String[] AdditionalAssemblies { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AdditionalAssemblies();
    [CompilerGeneratedAttribute]
public void set_AdditionalAssemblies(String[] value);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestContainer : object {
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ShadowCopy <ShadowCopy>k__BackingField;
    public string Location { get; internal set; }
    public ShadowCopy ShadowCopy { get; public set; }
    public TestContainer(string location, ShadowCopy shadowCopy);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    [CompilerGeneratedAttribute]
public ShadowCopy get_ShadowCopy();
    [CompilerGeneratedAttribute]
public void set_ShadowCopy(ShadowCopy value);
    public virtual string ToString();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestDiscoveryRequest : TestRequest {
    public TestDiscoveryRequest(TestContainer container);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestExceptionMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionInfo[] <Exceptions>k__BackingField;
    public Guid TaskId { get; }
    public ExceptionInfo[] Exceptions { get; }
    public TestExceptionMessage(RemoteTask task, ExceptionInfo[] exceptions);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TaskId();
    [CompilerGeneratedAttribute]
public ExceptionInfo[] get_Exceptions();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestFinishedMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private TestOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Duration>k__BackingField;
    public Guid TaskId { get; }
    public TestOutcome Outcome { get; }
    public string Message { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public TestFinishedMessage(RemoteTask task, TestOutcome outcome, string message, Nullable`1<TimeSpan> duration);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TaskId();
    [CompilerGeneratedAttribute]
public TestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Duration();
}
public enum JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestOutcome : Enum {
    public int value__;
    public static TestOutcome Inconclusive;
    public static TestOutcome Ignored;
    public static TestOutcome Success;
    public static TestOutcome Failed;
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestOutput : object {
    public string Text;
    public TestOutputType Type;
    public TestOutput(string text, TestOutputType type);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestOutputMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private TestOutput <Output>k__BackingField;
    public Guid TaskId { get; }
    public TestOutput Output { get; }
    public TestOutputMessage(RemoteTask task, TestOutput output);
    public TestOutputMessage(RemoteTask task, string text, TestOutputType outputType);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TaskId();
    [CompilerGeneratedAttribute]
public TestOutput get_Output();
}
public enum JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestOutputType : Enum {
    public int value__;
    public static TestOutputType STDOUT;
    public static TestOutputType STDERR;
    public static TestOutputType DEBUGTRACE;
}
public abstract class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestRequest : object {
    [CompilerGeneratedAttribute]
private TestContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoIsolation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    public TestContainer Container { get; }
    public bool NoIsolation { get; public set; }
    public string TargetFrameworkName { get; public set; }
    public string RunSettings { get; public set; }
    protected TestRequest(TestContainer container);
    [CompilerGeneratedAttribute]
public TestContainer get_Container();
    [CompilerGeneratedAttribute]
public bool get_NoIsolation();
    [CompilerGeneratedAttribute]
public void set_NoIsolation(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkName();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkName(string value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(string value);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestResult : object {
    [CompilerGeneratedAttribute]
private Guid <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FinishTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestOutcome> <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExceptionInfo> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TestOutput> <Output>k__BackingField;
    public Guid TaskId { get; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public Nullable`1<DateTime> FinishTime { get; public set; }
    public Nullable`1<TestOutcome> Outcome { get; public set; }
    public string Message { get; public set; }
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public List`1<ExceptionInfo> Exceptions { get; private set; }
    public List`1<TestOutput> Output { get; private set; }
    public TestResult(RemoteTask task);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TaskId();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FinishTime();
    [CompilerGeneratedAttribute]
public void set_FinishTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestOutcome> get_Outcome();
    [CompilerGeneratedAttribute]
public void set_Outcome(Nullable`1<TestOutcome> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public List`1<ExceptionInfo> get_Exceptions();
    [CompilerGeneratedAttribute]
private void set_Exceptions(List`1<ExceptionInfo> value);
    [CompilerGeneratedAttribute]
public List`1<TestOutput> get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(List`1<TestOutput> value);
    public void AddExceptions(ExceptionInfo[] exceptions);
    public void AddOutput(TestOutput output);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestRunRequest : TestRequest {
    [CompilerGeneratedAttribute]
private RemoteTask[] <Selection>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientControllerInfo <ClientController>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SynchronousEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ResultEventsFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ResultEventsTimeout>k__BackingField;
    public RemoteTask[] Selection { get; }
    public ClientControllerInfo ClientController { get; public set; }
    public Nullable`1<bool> SynchronousEvents { get; public set; }
    public Nullable`1<bool> DisableParallelization { get; public set; }
    public Nullable`1<TimeSpan> ResultEventsFrequency { get; public set; }
    public Nullable`1<TimeSpan> ResultEventsTimeout { get; public set; }
    public TestRunRequest(TestContainer container, RemoteTask[] selection);
    [CompilerGeneratedAttribute]
public RemoteTask[] get_Selection();
    [CompilerGeneratedAttribute]
public ClientControllerInfo get_ClientController();
    [CompilerGeneratedAttribute]
public void set_ClientController(ClientControllerInfo value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SynchronousEvents();
    [CompilerGeneratedAttribute]
public void set_SynchronousEvents(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableParallelization();
    [CompilerGeneratedAttribute]
public void set_DisableParallelization(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ResultEventsFrequency();
    [CompilerGeneratedAttribute]
public void set_ResultEventsFrequency(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ResultEventsTimeout();
    [CompilerGeneratedAttribute]
public void set_ResultEventsTimeout(Nullable`1<TimeSpan> value);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestsDiscoveredMessage : object {
    [CompilerGeneratedAttribute]
private RemoteTask[] <Tasks>k__BackingField;
    public RemoteTask[] Tasks { get; }
    public TestsDiscoveredMessage(RemoteTask[] tasks);
    [CompilerGeneratedAttribute]
public RemoteTask[] get_Tasks();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TestStartingMessage : object {
    [CompilerGeneratedAttribute]
private Guid <TaskId>k__BackingField;
    public Guid TaskId { get; }
    public TestStartingMessage(RemoteTask task);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_TaskId();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.TypeInfo : object {
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string Assembly { get; }
    public string TypeName { get; }
    public TypeInfo(Type type);
    public TypeInfo(string typeName, string assemblyLocation);
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    public static TypeInfo Create();
}
[DebuggerDisplayAttribute("UnitTestElementId({TestId})")]
public class JetBrains.ReSharper.TestRunner.Abstractions.Objects.UnitTestElementId : object {
    public static char Delimiter;
    private string myProjectId;
    private string myTargetFrameworkId;
    private string myProviderId;
    [CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    [DataMemberAttribute]
public string ProjectId { get; public set; }
    [DataMemberAttribute]
public string TargetFrameworkId { get; public set; }
    [DataMemberAttribute]
public string ProviderId { get; public set; }
    [DataMemberAttribute]
public string TestId { get; }
    public UnitTestElementId(string projectId, string targetFrameworkId, string providerId, string testId);
    public string get_ProjectId();
    public void set_ProjectId(string value);
    public string get_TargetFrameworkId();
    public void set_TargetFrameworkId(string value);
    public string get_ProviderId();
    public void set_ProviderId(string value);
    [CompilerGeneratedAttribute]
public string get_TestId();
    public sealed virtual bool Equals(UnitTestElementId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static UnitTestElementId FromString(string persistentId);
    private static void PopulatePart(string part, int partPosition, String& testId, String& projectId, String& targtFrameworkId, String& providerId);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Abstractions.Objects.UnitTestRemoteAgentBrokerExtension : object {
    [ExtensionAttribute]
public static Task Initialize(IMessageBroker broker, RemoteAgentInitializationRequest request);
    [ExtensionAttribute]
public static Task DiscoverTests(IMessageBroker broker, TestDiscoveryRequest request);
    [ExtensionAttribute]
public static Task RunTests(IMessageBroker broker, TestRunRequest request);
    [ExtensionAttribute]
public static Task Abort(IMessageBroker broker);
    [ExtensionAttribute]
public static Task Shutdown(IMessageBroker broker);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Abstractions.Objects.UnitTestServerExtensions : object {
    [ExtensionAttribute]
public static Task Connect(IMessageBroker broker, string id);
    [ExtensionAttribute]
public static Task SetCacheDirectory(IMessageBroker broker, string path);
    [ExtensionAttribute]
public static Task TestsDiscovered(IMessageBroker broker, RemoteTask[] tasks);
    [ExtensionAttribute]
public static Task DynamicTestDiscovered(IMessageBroker broker, RemoteTask[] tasks);
    [ExtensionAttribute]
public static Task TestStarting(IMessageBroker broker, RemoteTask task);
    [ExtensionAttribute]
public static Task TestException(IMessageBroker broker, RemoteTask task, ExceptionInfo[] exceptions);
    [ExtensionAttribute]
public static Task TestFinished(IMessageBroker broker, RemoteTask task, TestOutcome outcome, string message, Nullable`1<TimeSpan> duration);
    [ExtensionAttribute]
public static Task TestOutput(IMessageBroker broker, RemoteTask task, string text, TestOutputType outputType);
    [ExtensionAttribute]
public static Task RunStarting(IMessageBroker broker);
    [ExtensionAttribute]
public static Task RunFinished(IMessageBroker broker);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Serialization.IUnsafeMarshaller`1 {
    public abstract virtual T Read(IUnsafeReader reader);
    public abstract virtual void Write(IUnsafeWriter writer, T value);
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Serialization.IUnsafeReader {
    public abstract virtual bool ReadBoolean();
    public abstract virtual byte ReadByte();
    public abstract virtual Guid ReadGuid();
    public abstract virtual char ReadChar();
    public abstract virtual decimal ReadDecimal();
    public abstract virtual double ReadDouble();
    public abstract virtual float ReadFloat();
    public abstract virtual short ReadInt16();
    public abstract virtual int ReadInt32();
    public abstract virtual long ReadInt64();
    public abstract virtual ushort ReadUInt16();
    public abstract virtual UInt32 ReadUInt32();
    public abstract virtual ulong ReadUInt64();
    public abstract virtual DateTime ReadDateTime();
    public abstract virtual Uri ReadUri();
    public abstract virtual string ReadString();
    public abstract virtual Int32[] ReadIntArray();
    public abstract virtual Byte[] ReadByteArray();
    public abstract virtual TCol ReadCollection(ReadDelegate`1<T> readDelegate, Func`2<int, TCol> constructor);
    public abstract virtual TDict ReadDictionary(ReadDelegate`1<TK> readKeyDelegate, ReadDelegate`1<TV> readValueDelegate, Func`2<int, TDict> constructor);
    public abstract virtual bool ReadNullness();
}
public interface JetBrains.ReSharper.TestRunner.Abstractions.Serialization.IUnsafeWriter {
    public abstract virtual void Write(bool value);
    public abstract virtual void Write(byte value);
    public abstract virtual void Write(Guid value);
    public abstract virtual void Write(char value);
    public abstract virtual void Write(decimal value);
    public abstract virtual void Write(double value);
    public abstract virtual void Write(float value);
    public abstract virtual void Write(short value);
    public abstract virtual void Write(int value);
    public abstract virtual void Write(long value);
    public abstract virtual void Write(ushort value);
    public abstract virtual void Write(UInt32 value);
    public abstract virtual void Write(ulong value);
    public abstract virtual void Write(DateTime value);
    public abstract virtual void Write(Uri value);
    public abstract virtual void Write(string value);
    public abstract virtual void Write(Int32[] value);
    public abstract virtual void Write(Byte[] value);
    public abstract virtual void Write(WriteDelegate`1<T> writeDelegate, TCol value);
    public abstract virtual void Write(WriteDelegate`1<TK> writeKeyDelegate, WriteDelegate`1<TV> writeValueDelegate, TDict dict);
    public abstract virtual bool WriteNullness(Nullable`1<T> value);
    public abstract virtual bool WriteNullness(T value);
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.TestRunner.Abstractions.Serialization.MarshallerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <SerializerType>k__BackingField;
    public Type SerializerType { get; }
    public MarshallerAttribute(Type serializerType);
    [CompilerGeneratedAttribute]
public Type get_SerializerType();
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Serialization.ReadDelegate`1 : MulticastDelegate {
    public ReadDelegate`1(object object, IntPtr method);
    public virtual T Invoke(IUnsafeReader reader);
    public virtual IAsyncResult BeginInvoke(IUnsafeReader reader, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public class JetBrains.ReSharper.TestRunner.Abstractions.Serialization.WriteDelegate`1 : MulticastDelegate {
    public WriteDelegate`1(object object, IntPtr method);
    public virtual void Invoke(IUnsafeWriter writer, T value);
    public virtual IAsyncResult BeginInvoke(IUnsafeWriter writer, T value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class JetBrains.ReSharper.TestRunner.Abstractions.Util.ErrorCodes : object {
    public static int CANNOT_CONNECT_TO_SERVER;
    public static int PARENT_PROCESS_EXITED;
    public static int UNKNOWN_ERROR;
    public static int INVALID_ARGUMENTS;
}
public static class JetBrains.ReSharper.TestRunner.PublicKey : object {
    public static string Product;
}
