internal static class FxResources.System.Drawing.Common.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorAttribute("System.Drawing.Design.BitmapEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Drawing.Bitmap : Image {
    private static Color s_defaultTransparentColor;
    internal Bitmap(IntPtr ptr);
    public Bitmap(string filename);
    public Bitmap(string filename, bool useIcm);
    public Bitmap(Stream stream);
    public Bitmap(int width, int height);
    public Bitmap(int width, int height, Graphics g);
    public Bitmap(int width, int height, int stride, PixelFormat format, IntPtr scan0);
    public Bitmap(int width, int height, PixelFormat format);
    public Bitmap(Image original);
    public Bitmap(Image original, Size newSize);
    public Bitmap(Image original, int width, int height);
    private Bitmap(SerializationInfo info, StreamingContext context);
    public Bitmap(Type type, string resource);
    public Bitmap(Stream stream, bool useIcm);
    private static Bitmap();
    public static Bitmap FromHicon(IntPtr hicon);
    public static Bitmap FromResource(IntPtr hinstance, string bitmapName);
    [EditorBrowsableAttribute("2")]
public IntPtr GetHbitmap();
    [EditorBrowsableAttribute("2")]
public IntPtr GetHbitmap(Color background);
    [EditorBrowsableAttribute("2")]
public IntPtr GetHicon();
    public Bitmap Clone(RectangleF rect, PixelFormat format);
    public void MakeTransparent();
    public void MakeTransparent(Color transparentColor);
    public BitmapData LockBits(Rectangle rect, ImageLockMode flags, PixelFormat format);
    public BitmapData LockBits(Rectangle rect, ImageLockMode flags, PixelFormat format, BitmapData bitmapData);
    public void UnlockBits(BitmapData bitmapdata);
    public Color GetPixel(int x, int y);
    public void SetPixel(int x, int y, Color color);
    public void SetResolution(float xDpi, float yDpi);
    public Bitmap Clone(Rectangle rect, PixelFormat format);
}
internal static class System.Drawing.BitmapSelector : object {
    private static string s_suffix;
    internal static string Suffix { get; internal set; }
    internal static string get_Suffix();
    internal static void set_Suffix(string value);
    internal static string AppendSuffix(string filePath);
    public static string GetFileName(string originalPath);
    private static Stream GetResourceStreamHelper(Assembly assembly, Type type, string name);
    private static bool DoesAssemblyHaveCustomAttribute(Assembly assembly, string typeName);
    private static bool DoesAssemblyHaveCustomAttribute(Assembly assembly, Type attrType);
    internal static bool SatelliteAssemblyOptIn(Assembly assembly);
    internal static bool SameAssemblyOptIn(Assembly assembly);
    public static Stream GetResourceStream(Assembly assembly, Type type, string originalName);
    public static Stream GetResourceStream(Type type, string originalName);
    public static Icon CreateIcon(Type type, string originalName);
    public static Bitmap CreateBitmap(Type type, string originalName);
}
[AttributeUsageAttribute("1")]
public class System.Drawing.BitmapSuffixInSameAssemblyAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
public class System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute : Attribute {
}
public abstract class System.Drawing.Brush : MarshalByRefObject {
    private IntPtr _nativeBrush;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
internal IntPtr NativeBrush { get; }
    [NullableContextAttribute("1")]
public abstract virtual object Clone();
    protected internal void SetNativeBrush(IntPtr brush);
    internal void SetNativeBrushInternal(IntPtr brush);
    internal IntPtr get_NativeBrush();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Drawing.Brushes : object {
    private static object s_transparentKey;
    private static object s_aliceBlueKey;
    private static object s_antiqueWhiteKey;
    private static object s_aquaKey;
    private static object s_aquamarineKey;
    private static object s_azureKey;
    private static object s_beigeKey;
    private static object s_bisqueKey;
    private static object s_blackKey;
    private static object s_blanchedAlmondKey;
    private static object s_blueKey;
    private static object s_blueVioletKey;
    private static object s_brownKey;
    private static object s_burlyWoodKey;
    private static object s_cadetBlueKey;
    private static object s_chartreuseKey;
    private static object s_chocolateKey;
    private static object s_coralKey;
    private static object s_cornflowerBlueKey;
    private static object s_cornsilkKey;
    private static object s_crimsonKey;
    private static object s_cyanKey;
    private static object s_darkBlueKey;
    private static object s_darkCyanKey;
    private static object s_darkGoldenrodKey;
    private static object s_darkGrayKey;
    private static object s_darkGreenKey;
    private static object s_darkKhakiKey;
    private static object s_darkMagentaKey;
    private static object s_darkOliveGreenKey;
    private static object s_darkOrangeKey;
    private static object s_darkOrchidKey;
    private static object s_darkRedKey;
    private static object s_darkSalmonKey;
    private static object s_darkSeaGreenKey;
    private static object s_darkSlateBlueKey;
    private static object s_darkSlateGrayKey;
    private static object s_darkTurquoiseKey;
    private static object s_darkVioletKey;
    private static object s_deepPinkKey;
    private static object s_deepSkyBlueKey;
    private static object s_dimGrayKey;
    private static object s_dodgerBlueKey;
    private static object s_firebrickKey;
    private static object s_floralWhiteKey;
    private static object s_forestGreenKey;
    private static object s_fuchsiaKey;
    private static object s_gainsboroKey;
    private static object s_ghostWhiteKey;
    private static object s_goldKey;
    private static object s_goldenrodKey;
    private static object s_grayKey;
    private static object s_greenKey;
    private static object s_greenYellowKey;
    private static object s_honeydewKey;
    private static object s_hotPinkKey;
    private static object s_indianRedKey;
    private static object s_indigoKey;
    private static object s_ivoryKey;
    private static object s_khakiKey;
    private static object s_lavenderKey;
    private static object s_lavenderBlushKey;
    private static object s_lawnGreenKey;
    private static object s_lemonChiffonKey;
    private static object s_lightBlueKey;
    private static object s_lightCoralKey;
    private static object s_lightCyanKey;
    private static object s_lightGoldenrodYellowKey;
    private static object s_lightGreenKey;
    private static object s_lightGrayKey;
    private static object s_lightPinkKey;
    private static object s_lightSalmonKey;
    private static object s_lightSeaGreenKey;
    private static object s_lightSkyBlueKey;
    private static object s_lightSlateGrayKey;
    private static object s_lightSteelBlueKey;
    private static object s_lightYellowKey;
    private static object s_limeKey;
    private static object s_limeGreenKey;
    private static object s_linenKey;
    private static object s_magentaKey;
    private static object s_maroonKey;
    private static object s_mediumAquamarineKey;
    private static object s_mediumBlueKey;
    private static object s_mediumOrchidKey;
    private static object s_mediumPurpleKey;
    private static object s_mediumSeaGreenKey;
    private static object s_mediumSlateBlueKey;
    private static object s_mediumSpringGreenKey;
    private static object s_mediumTurquoiseKey;
    private static object s_mediumVioletRedKey;
    private static object s_midnightBlueKey;
    private static object s_mintCreamKey;
    private static object s_mistyRoseKey;
    private static object s_moccasinKey;
    private static object s_navajoWhiteKey;
    private static object s_navyKey;
    private static object s_oldLaceKey;
    private static object s_oliveKey;
    private static object s_oliveDrabKey;
    private static object s_orangeKey;
    private static object s_orangeRedKey;
    private static object s_orchidKey;
    private static object s_paleGoldenrodKey;
    private static object s_paleGreenKey;
    private static object s_paleTurquoiseKey;
    private static object s_paleVioletRedKey;
    private static object s_papayaWhipKey;
    private static object s_peachPuffKey;
    private static object s_peruKey;
    private static object s_pinkKey;
    private static object s_plumKey;
    private static object s_powderBlueKey;
    private static object s_purpleKey;
    private static object s_redKey;
    private static object s_rosyBrownKey;
    private static object s_royalBlueKey;
    private static object s_saddleBrownKey;
    private static object s_salmonKey;
    private static object s_sandyBrownKey;
    private static object s_seaGreenKey;
    private static object s_seaShellKey;
    private static object s_siennaKey;
    private static object s_silverKey;
    private static object s_skyBlueKey;
    private static object s_slateBlueKey;
    private static object s_slateGrayKey;
    private static object s_snowKey;
    private static object s_springGreenKey;
    private static object s_steelBlueKey;
    private static object s_tanKey;
    private static object s_tealKey;
    private static object s_thistleKey;
    private static object s_tomatoKey;
    private static object s_turquoiseKey;
    private static object s_violetKey;
    private static object s_wheatKey;
    private static object s_whiteKey;
    private static object s_whiteSmokeKey;
    private static object s_yellowKey;
    private static object s_yellowGreenKey;
    public static Brush Transparent { get; }
    public static Brush AliceBlue { get; }
    public static Brush AntiqueWhite { get; }
    public static Brush Aqua { get; }
    public static Brush Aquamarine { get; }
    public static Brush Azure { get; }
    public static Brush Beige { get; }
    public static Brush Bisque { get; }
    public static Brush Black { get; }
    public static Brush BlanchedAlmond { get; }
    public static Brush Blue { get; }
    public static Brush BlueViolet { get; }
    public static Brush Brown { get; }
    public static Brush BurlyWood { get; }
    public static Brush CadetBlue { get; }
    public static Brush Chartreuse { get; }
    public static Brush Chocolate { get; }
    public static Brush Coral { get; }
    public static Brush CornflowerBlue { get; }
    public static Brush Cornsilk { get; }
    public static Brush Crimson { get; }
    public static Brush Cyan { get; }
    public static Brush DarkBlue { get; }
    public static Brush DarkCyan { get; }
    public static Brush DarkGoldenrod { get; }
    public static Brush DarkGray { get; }
    public static Brush DarkGreen { get; }
    public static Brush DarkKhaki { get; }
    public static Brush DarkMagenta { get; }
    public static Brush DarkOliveGreen { get; }
    public static Brush DarkOrange { get; }
    public static Brush DarkOrchid { get; }
    public static Brush DarkRed { get; }
    public static Brush DarkSalmon { get; }
    public static Brush DarkSeaGreen { get; }
    public static Brush DarkSlateBlue { get; }
    public static Brush DarkSlateGray { get; }
    public static Brush DarkTurquoise { get; }
    public static Brush DarkViolet { get; }
    public static Brush DeepPink { get; }
    public static Brush DeepSkyBlue { get; }
    public static Brush DimGray { get; }
    public static Brush DodgerBlue { get; }
    public static Brush Firebrick { get; }
    public static Brush FloralWhite { get; }
    public static Brush ForestGreen { get; }
    public static Brush Fuchsia { get; }
    public static Brush Gainsboro { get; }
    public static Brush GhostWhite { get; }
    public static Brush Gold { get; }
    public static Brush Goldenrod { get; }
    public static Brush Gray { get; }
    public static Brush Green { get; }
    public static Brush GreenYellow { get; }
    public static Brush Honeydew { get; }
    public static Brush HotPink { get; }
    public static Brush IndianRed { get; }
    public static Brush Indigo { get; }
    public static Brush Ivory { get; }
    public static Brush Khaki { get; }
    public static Brush Lavender { get; }
    public static Brush LavenderBlush { get; }
    public static Brush LawnGreen { get; }
    public static Brush LemonChiffon { get; }
    public static Brush LightBlue { get; }
    public static Brush LightCoral { get; }
    public static Brush LightCyan { get; }
    public static Brush LightGoldenrodYellow { get; }
    public static Brush LightGreen { get; }
    public static Brush LightGray { get; }
    public static Brush LightPink { get; }
    public static Brush LightSalmon { get; }
    public static Brush LightSeaGreen { get; }
    public static Brush LightSkyBlue { get; }
    public static Brush LightSlateGray { get; }
    public static Brush LightSteelBlue { get; }
    public static Brush LightYellow { get; }
    public static Brush Lime { get; }
    public static Brush LimeGreen { get; }
    public static Brush Linen { get; }
    public static Brush Magenta { get; }
    public static Brush Maroon { get; }
    public static Brush MediumAquamarine { get; }
    public static Brush MediumBlue { get; }
    public static Brush MediumOrchid { get; }
    public static Brush MediumPurple { get; }
    public static Brush MediumSeaGreen { get; }
    public static Brush MediumSlateBlue { get; }
    public static Brush MediumSpringGreen { get; }
    public static Brush MediumTurquoise { get; }
    public static Brush MediumVioletRed { get; }
    public static Brush MidnightBlue { get; }
    public static Brush MintCream { get; }
    public static Brush MistyRose { get; }
    public static Brush Moccasin { get; }
    public static Brush NavajoWhite { get; }
    public static Brush Navy { get; }
    public static Brush OldLace { get; }
    public static Brush Olive { get; }
    public static Brush OliveDrab { get; }
    public static Brush Orange { get; }
    public static Brush OrangeRed { get; }
    public static Brush Orchid { get; }
    public static Brush PaleGoldenrod { get; }
    public static Brush PaleGreen { get; }
    public static Brush PaleTurquoise { get; }
    public static Brush PaleVioletRed { get; }
    public static Brush PapayaWhip { get; }
    public static Brush PeachPuff { get; }
    public static Brush Peru { get; }
    public static Brush Pink { get; }
    public static Brush Plum { get; }
    public static Brush PowderBlue { get; }
    public static Brush Purple { get; }
    public static Brush Red { get; }
    public static Brush RosyBrown { get; }
    public static Brush RoyalBlue { get; }
    public static Brush SaddleBrown { get; }
    public static Brush Salmon { get; }
    public static Brush SandyBrown { get; }
    public static Brush SeaGreen { get; }
    public static Brush SeaShell { get; }
    public static Brush Sienna { get; }
    public static Brush Silver { get; }
    public static Brush SkyBlue { get; }
    public static Brush SlateBlue { get; }
    public static Brush SlateGray { get; }
    public static Brush Snow { get; }
    public static Brush SpringGreen { get; }
    public static Brush SteelBlue { get; }
    public static Brush Tan { get; }
    public static Brush Teal { get; }
    public static Brush Thistle { get; }
    public static Brush Tomato { get; }
    public static Brush Turquoise { get; }
    public static Brush Violet { get; }
    public static Brush Wheat { get; }
    public static Brush White { get; }
    public static Brush WhiteSmoke { get; }
    public static Brush Yellow { get; }
    public static Brush YellowGreen { get; }
    private static Brushes();
    public static Brush get_Transparent();
    public static Brush get_AliceBlue();
    public static Brush get_AntiqueWhite();
    public static Brush get_Aqua();
    public static Brush get_Aquamarine();
    public static Brush get_Azure();
    public static Brush get_Beige();
    public static Brush get_Bisque();
    public static Brush get_Black();
    public static Brush get_BlanchedAlmond();
    public static Brush get_Blue();
    public static Brush get_BlueViolet();
    public static Brush get_Brown();
    public static Brush get_BurlyWood();
    public static Brush get_CadetBlue();
    public static Brush get_Chartreuse();
    public static Brush get_Chocolate();
    public static Brush get_Coral();
    public static Brush get_CornflowerBlue();
    public static Brush get_Cornsilk();
    public static Brush get_Crimson();
    public static Brush get_Cyan();
    public static Brush get_DarkBlue();
    public static Brush get_DarkCyan();
    public static Brush get_DarkGoldenrod();
    public static Brush get_DarkGray();
    public static Brush get_DarkGreen();
    public static Brush get_DarkKhaki();
    public static Brush get_DarkMagenta();
    public static Brush get_DarkOliveGreen();
    public static Brush get_DarkOrange();
    public static Brush get_DarkOrchid();
    public static Brush get_DarkRed();
    public static Brush get_DarkSalmon();
    public static Brush get_DarkSeaGreen();
    public static Brush get_DarkSlateBlue();
    public static Brush get_DarkSlateGray();
    public static Brush get_DarkTurquoise();
    public static Brush get_DarkViolet();
    public static Brush get_DeepPink();
    public static Brush get_DeepSkyBlue();
    public static Brush get_DimGray();
    public static Brush get_DodgerBlue();
    public static Brush get_Firebrick();
    public static Brush get_FloralWhite();
    public static Brush get_ForestGreen();
    public static Brush get_Fuchsia();
    public static Brush get_Gainsboro();
    public static Brush get_GhostWhite();
    public static Brush get_Gold();
    public static Brush get_Goldenrod();
    public static Brush get_Gray();
    public static Brush get_Green();
    public static Brush get_GreenYellow();
    public static Brush get_Honeydew();
    public static Brush get_HotPink();
    public static Brush get_IndianRed();
    public static Brush get_Indigo();
    public static Brush get_Ivory();
    public static Brush get_Khaki();
    public static Brush get_Lavender();
    public static Brush get_LavenderBlush();
    public static Brush get_LawnGreen();
    public static Brush get_LemonChiffon();
    public static Brush get_LightBlue();
    public static Brush get_LightCoral();
    public static Brush get_LightCyan();
    public static Brush get_LightGoldenrodYellow();
    public static Brush get_LightGreen();
    public static Brush get_LightGray();
    public static Brush get_LightPink();
    public static Brush get_LightSalmon();
    public static Brush get_LightSeaGreen();
    public static Brush get_LightSkyBlue();
    public static Brush get_LightSlateGray();
    public static Brush get_LightSteelBlue();
    public static Brush get_LightYellow();
    public static Brush get_Lime();
    public static Brush get_LimeGreen();
    public static Brush get_Linen();
    public static Brush get_Magenta();
    public static Brush get_Maroon();
    public static Brush get_MediumAquamarine();
    public static Brush get_MediumBlue();
    public static Brush get_MediumOrchid();
    public static Brush get_MediumPurple();
    public static Brush get_MediumSeaGreen();
    public static Brush get_MediumSlateBlue();
    public static Brush get_MediumSpringGreen();
    public static Brush get_MediumTurquoise();
    public static Brush get_MediumVioletRed();
    public static Brush get_MidnightBlue();
    public static Brush get_MintCream();
    public static Brush get_MistyRose();
    public static Brush get_Moccasin();
    public static Brush get_NavajoWhite();
    public static Brush get_Navy();
    public static Brush get_OldLace();
    public static Brush get_Olive();
    public static Brush get_OliveDrab();
    public static Brush get_Orange();
    public static Brush get_OrangeRed();
    public static Brush get_Orchid();
    public static Brush get_PaleGoldenrod();
    public static Brush get_PaleGreen();
    public static Brush get_PaleTurquoise();
    public static Brush get_PaleVioletRed();
    public static Brush get_PapayaWhip();
    public static Brush get_PeachPuff();
    public static Brush get_Peru();
    public static Brush get_Pink();
    public static Brush get_Plum();
    public static Brush get_PowderBlue();
    public static Brush get_Purple();
    public static Brush get_Red();
    public static Brush get_RosyBrown();
    public static Brush get_RoyalBlue();
    public static Brush get_SaddleBrown();
    public static Brush get_Salmon();
    public static Brush get_SandyBrown();
    public static Brush get_SeaGreen();
    public static Brush get_SeaShell();
    public static Brush get_Sienna();
    public static Brush get_Silver();
    public static Brush get_SkyBlue();
    public static Brush get_SlateBlue();
    public static Brush get_SlateGray();
    public static Brush get_Snow();
    public static Brush get_SpringGreen();
    public static Brush get_SteelBlue();
    public static Brush get_Tan();
    public static Brush get_Teal();
    public static Brush get_Thistle();
    public static Brush get_Tomato();
    public static Brush get_Turquoise();
    public static Brush get_Violet();
    public static Brush get_Wheat();
    public static Brush get_White();
    public static Brush get_WhiteSmoke();
    public static Brush get_Yellow();
    public static Brush get_YellowGreen();
    private static Brush GetBrush(object key, Color color);
}
public class System.Drawing.BufferedGraphics : object {
    private Graphics _targetGraphics;
    private IntPtr _targetDC;
    [CompilerGeneratedAttribute]
private bool <DisposeContext>k__BackingField;
    private Graphics _bufferedGraphicsSurface;
    private BufferedGraphicsContext _context;
    private Point _targetLoc;
    private Size _virtualSize;
    internal bool DisposeContext { get; internal set; }
    [NullableAttribute("1")]
public Graphics Graphics { get; }
    internal BufferedGraphics(Graphics bufferedGraphicsSurface, BufferedGraphicsContext context, Graphics targetGraphics, IntPtr targetDC, Point targetLoc, Size virtualSize);
    [CompilerGeneratedAttribute]
internal bool get_DisposeContext();
    [CompilerGeneratedAttribute]
internal void set_DisposeContext(bool value);
    public void Render();
    public void Render(IntPtr targetDC);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public Graphics get_Graphics();
    [NullableContextAttribute("2")]
public void Render(Graphics target);
    private void RenderInternal(HandleRef refTargetDC);
}
public class System.Drawing.BufferedGraphicsContext : object {
    private Size _maximumBuffer;
    private Size _bufferSize;
    private Size _virtualSize;
    private Point _targetLoc;
    private IntPtr _compatDC;
    private IntPtr _dib;
    private IntPtr _oldBitmap;
    private Graphics _compatGraphics;
    private BufferedGraphics _buffer;
    private int _busy;
    private bool _invalidateWhenFree;
    private static int BufferFree;
    private static int BufferBusyPainting;
    private static int BufferBusyDisposing;
    public Size MaximumBuffer { get; public set; }
    public Size get_MaximumBuffer();
    public void set_MaximumBuffer(Size value);
    protected virtual override void Finalize();
    [NullableContextAttribute("1")]
public BufferedGraphics Allocate(Graphics targetGraphics, Rectangle targetRectangle);
    [NullableContextAttribute("1")]
public BufferedGraphics Allocate(IntPtr targetDC, Rectangle targetRectangle);
    private BufferedGraphics AllocBufferInTempManager(Graphics targetGraphics, IntPtr targetDC, Rectangle targetRectangle);
    public sealed virtual void Dispose();
    private bool ShouldUseTempManager(Rectangle targetBounds);
    private BufferedGraphics AllocBuffer(Graphics targetGraphics, IntPtr targetDC, Rectangle targetRectangle);
    private bool FillBitmapInfo(IntPtr hdc, IntPtr hpal, BITMAPINFO_FLAT& pbmi);
    private bool FillColorTable(IntPtr hdc, IntPtr hpal, BITMAPINFO_FLAT& pbmi);
    private Graphics CreateBuffer(IntPtr src, int offsetX, int offsetY, int width, int height);
    private IntPtr CreateCompatibleDIB(IntPtr hdc, IntPtr hpal, int ulWidth, int ulHeight, IntPtr& ppvBits);
    private void DisposeDC();
    private void DisposeBitmap();
    private void Dispose(bool disposing);
    public void Invalidate();
    internal void ReleaseBuffer(BufferedGraphics buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Drawing.BufferedGraphicsManager : object {
    [CompilerGeneratedAttribute]
private static BufferedGraphicsContext <Current>k__BackingField;
    public static BufferedGraphicsContext Current { get; }
    private static BufferedGraphicsManager();
    [CompilerGeneratedAttribute]
public static BufferedGraphicsContext get_Current();
    private static void OnShutdown(object sender, EventArgs e);
}
public class System.Drawing.CharacterRange : ValueType {
    private int _first;
    private int _length;
    public int First { get; public set; }
    public int Length { get; public set; }
    public CharacterRange(int First, int Length);
    public int get_First();
    public void set_First(int value);
    public int get_Length();
    public void set_Length(int value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(CharacterRange cr1, CharacterRange cr2);
    public static bool op_Inequality(CharacterRange cr1, CharacterRange cr2);
    public virtual int GetHashCode();
}
internal static class System.Drawing.ClientUtils : object {
    public static bool IsCriticalException(Exception ex);
    public static bool IsSecurityOrCriticalException(Exception ex);
}
[EditorAttribute("System.Drawing.Design.ContentAlignmentEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public enum System.Drawing.ContentAlignment : Enum {
    public int value__;
    public static ContentAlignment TopLeft;
    public static ContentAlignment TopCenter;
    public static ContentAlignment TopRight;
    public static ContentAlignment MiddleLeft;
    public static ContentAlignment MiddleCenter;
    public static ContentAlignment MiddleRight;
    public static ContentAlignment BottomLeft;
    public static ContentAlignment BottomCenter;
    public static ContentAlignment BottomRight;
}
public enum System.Drawing.CopyPixelOperation : Enum {
    public int value__;
    public static CopyPixelOperation Blackness;
    public static CopyPixelOperation CaptureBlt;
    public static CopyPixelOperation DestinationInvert;
    public static CopyPixelOperation MergeCopy;
    public static CopyPixelOperation MergePaint;
    public static CopyPixelOperation NoMirrorBitmap;
    public static CopyPixelOperation NotSourceCopy;
    public static CopyPixelOperation NotSourceErase;
    public static CopyPixelOperation PatCopy;
    public static CopyPixelOperation PatInvert;
    public static CopyPixelOperation PatPaint;
    public static CopyPixelOperation SourceAnd;
    public static CopyPixelOperation SourceCopy;
    public static CopyPixelOperation SourceErase;
    public static CopyPixelOperation SourceInvert;
    public static CopyPixelOperation SourcePaint;
    public static CopyPixelOperation Whiteness;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Drawing.Design.CategoryNameCollection : ReadOnlyCollectionBase {
    public string Item { get; }
    public CategoryNameCollection(CategoryNameCollection value);
    public CategoryNameCollection(String[] value);
    public string get_Item(int index);
    public bool Contains(string value);
    public void CopyTo(String[] array, int index);
    public int IndexOf(string value);
}
public class System.Drawing.Drawing2D.AdjustableArrowCap : CustomLineCap {
    public float Height { get; public set; }
    public float Width { get; public set; }
    public float MiddleInset { get; public set; }
    public bool Filled { get; public set; }
    internal AdjustableArrowCap(IntPtr nativeCap);
    public AdjustableArrowCap(float width, float height);
    public AdjustableArrowCap(float width, float height, bool isFilled);
    public float get_Height();
    public void set_Height(float value);
    public float get_Width();
    public void set_Width(float value);
    public float get_MiddleInset();
    public void set_MiddleInset(float value);
    public bool get_Filled();
    public void set_Filled(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.Blend : object {
    [CompilerGeneratedAttribute]
private Single[] <Factors>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Positions>k__BackingField;
    public Single[] Factors { get; public set; }
    public Single[] Positions { get; public set; }
    public Blend(int count);
    [CompilerGeneratedAttribute]
public Single[] get_Factors();
    [CompilerGeneratedAttribute]
public void set_Factors(Single[] value);
    [CompilerGeneratedAttribute]
public Single[] get_Positions();
    [CompilerGeneratedAttribute]
public void set_Positions(Single[] value);
}
internal enum System.Drawing.Drawing2D.BrushType : Enum {
    public int value__;
    public static BrushType SolidColor;
    public static BrushType HatchFill;
    public static BrushType TextureFill;
    public static BrushType PathGradient;
    public static BrushType LinearGradient;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.ColorBlend : object {
    [CompilerGeneratedAttribute]
private Color[] <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Positions>k__BackingField;
    public Color[] Colors { get; public set; }
    public Single[] Positions { get; public set; }
    public ColorBlend(int count);
    [CompilerGeneratedAttribute]
public Color[] get_Colors();
    [CompilerGeneratedAttribute]
public void set_Colors(Color[] value);
    [CompilerGeneratedAttribute]
public Single[] get_Positions();
    [CompilerGeneratedAttribute]
public void set_Positions(Single[] value);
}
public enum System.Drawing.Drawing2D.CombineMode : Enum {
    public int value__;
    public static CombineMode Replace;
    public static CombineMode Intersect;
    public static CombineMode Union;
    public static CombineMode Xor;
    public static CombineMode Exclude;
    public static CombineMode Complement;
}
public enum System.Drawing.Drawing2D.CompositingMode : Enum {
    public int value__;
    public static CompositingMode SourceOver;
    public static CompositingMode SourceCopy;
}
public enum System.Drawing.Drawing2D.CompositingQuality : Enum {
    public int value__;
    public static CompositingQuality Invalid;
    public static CompositingQuality Default;
    public static CompositingQuality HighSpeed;
    public static CompositingQuality HighQuality;
    public static CompositingQuality GammaCorrected;
    public static CompositingQuality AssumeLinear;
}
public enum System.Drawing.Drawing2D.CoordinateSpace : Enum {
    public int value__;
    public static CoordinateSpace World;
    public static CoordinateSpace Page;
    public static CoordinateSpace Device;
}
public class System.Drawing.Drawing2D.CustomLineCap : MarshalByRefObject {
    internal SafeCustomLineCapHandle nativeCap;
    private bool _disposed;
    public LineJoin StrokeJoin { get; public set; }
    public LineCap BaseCap { get; public set; }
    public float BaseInset { get; public set; }
    public float WidthScale { get; public set; }
    [NullableContextAttribute("2")]
public CustomLineCap(GraphicsPath fillPath, GraphicsPath strokePath);
    [NullableContextAttribute("2")]
public CustomLineCap(GraphicsPath fillPath, GraphicsPath strokePath, LineCap baseCap);
    [NullableContextAttribute("2")]
public CustomLineCap(GraphicsPath fillPath, GraphicsPath strokePath, LineCap baseCap, float baseInset);
    internal CustomLineCap(IntPtr nativeLineCap);
    internal void SetNativeLineCap(IntPtr handle);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    [NullableContextAttribute("1")]
public sealed virtual object Clone();
    internal virtual object CoreClone();
    public void SetStrokeCaps(LineCap startCap, LineCap endCap);
    public void GetStrokeCaps(LineCap& startCap, LineCap& endCap);
    public LineJoin get_StrokeJoin();
    public void set_StrokeJoin(LineJoin value);
    public LineCap get_BaseCap();
    public void set_BaseCap(LineCap value);
    public float get_BaseInset();
    public void set_BaseInset(float value);
    public float get_WidthScale();
    public void set_WidthScale(float value);
    internal static CustomLineCap CreateCustomLineCapObject(IntPtr cap);
}
internal enum System.Drawing.Drawing2D.CustomLineCapType : Enum {
    public int value__;
    public static CustomLineCapType Default;
    public static CustomLineCapType AdjustableArrowCap;
}
public enum System.Drawing.Drawing2D.DashCap : Enum {
    public int value__;
    public static DashCap Flat;
    public static DashCap Round;
    public static DashCap Triangle;
}
public enum System.Drawing.Drawing2D.DashStyle : Enum {
    public int value__;
    public static DashStyle Solid;
    public static DashStyle Dash;
    public static DashStyle Dot;
    public static DashStyle DashDot;
    public static DashStyle DashDotDot;
    public static DashStyle Custom;
}
public enum System.Drawing.Drawing2D.FillMode : Enum {
    public int value__;
    public static FillMode Alternate;
    public static FillMode Winding;
}
public enum System.Drawing.Drawing2D.FlushIntention : Enum {
    public int value__;
    public static FlushIntention Flush;
    public static FlushIntention Sync;
}
public class System.Drawing.Drawing2D.GraphicsContainer : MarshalByRefObject {
    internal int nativeGraphicsContainer;
    internal GraphicsContainer(int graphicsContainer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.GraphicsPath : MarshalByRefObject {
    internal IntPtr _nativePath;
    private static float Flatness;
    public FillMode FillMode { get; public set; }
    public PathData PathData { get; }
    public int PointCount { get; }
    public Byte[] PathTypes { get; }
    public PointF[] PathPoints { get; }
    public GraphicsPath(FillMode fillMode);
    public GraphicsPath(PointF[] pts, Byte[] types);
    public GraphicsPath(PointF[] pts, Byte[] types, FillMode fillMode);
    public GraphicsPath(Point[] pts, Byte[] types);
    public GraphicsPath(Point[] pts, Byte[] types, FillMode fillMode);
    private GraphicsPath(IntPtr nativePath, int extra);
    public sealed virtual object Clone();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public void Reset();
    public FillMode get_FillMode();
    public void set_FillMode(FillMode value);
    private PathData _GetPathData();
    public PathData get_PathData();
    public void StartFigure();
    public void CloseFigure();
    public void CloseAllFigures();
    public void SetMarkers();
    public void ClearMarkers();
    public void Reverse();
    public PointF GetLastPoint();
    public bool IsVisible(float x, float y);
    public bool IsVisible(PointF point);
    [NullableContextAttribute("2")]
public bool IsVisible(float x, float y, Graphics graphics);
    [NullableContextAttribute("2")]
public bool IsVisible(PointF pt, Graphics graphics);
    public bool IsVisible(int x, int y);
    public bool IsVisible(Point point);
    [NullableContextAttribute("2")]
public bool IsVisible(int x, int y, Graphics graphics);
    [NullableContextAttribute("2")]
public bool IsVisible(Point pt, Graphics graphics);
    public bool IsOutlineVisible(float x, float y, Pen pen);
    public bool IsOutlineVisible(PointF point, Pen pen);
    public bool IsOutlineVisible(float x, float y, Pen pen, Graphics graphics);
    public bool IsOutlineVisible(PointF pt, Pen pen, Graphics graphics);
    public bool IsOutlineVisible(int x, int y, Pen pen);
    public bool IsOutlineVisible(Point point, Pen pen);
    public bool IsOutlineVisible(int x, int y, Pen pen, Graphics graphics);
    public bool IsOutlineVisible(Point pt, Pen pen, Graphics graphics);
    public void AddLine(PointF pt1, PointF pt2);
    public void AddLine(float x1, float y1, float x2, float y2);
    public void AddLines(PointF[] points);
    public void AddLine(Point pt1, Point pt2);
    public void AddLine(int x1, int y1, int x2, int y2);
    public void AddLines(Point[] points);
    public void AddArc(RectangleF rect, float startAngle, float sweepAngle);
    public void AddArc(float x, float y, float width, float height, float startAngle, float sweepAngle);
    public void AddArc(Rectangle rect, float startAngle, float sweepAngle);
    public void AddArc(int x, int y, int width, int height, float startAngle, float sweepAngle);
    public void AddBezier(PointF pt1, PointF pt2, PointF pt3, PointF pt4);
    public void AddBezier(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);
    public void AddBeziers(PointF[] points);
    public void AddBezier(Point pt1, Point pt2, Point pt3, Point pt4);
    public void AddBezier(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
    public void AddBeziers(Point[] points);
    public void AddCurve(PointF[] points);
    public void AddCurve(PointF[] points, float tension);
    public void AddCurve(PointF[] points, int offset, int numberOfSegments, float tension);
    public void AddCurve(Point[] points);
    public void AddCurve(Point[] points, float tension);
    public void AddCurve(Point[] points, int offset, int numberOfSegments, float tension);
    public void AddClosedCurve(PointF[] points);
    public void AddClosedCurve(PointF[] points, float tension);
    public void AddClosedCurve(Point[] points);
    public void AddClosedCurve(Point[] points, float tension);
    public void AddRectangle(RectangleF rect);
    public void AddRectangles(RectangleF[] rects);
    public void AddRectangle(Rectangle rect);
    public void AddRectangles(Rectangle[] rects);
    public void AddEllipse(RectangleF rect);
    public void AddEllipse(float x, float y, float width, float height);
    public void AddEllipse(Rectangle rect);
    public void AddEllipse(int x, int y, int width, int height);
    public void AddPie(Rectangle rect, float startAngle, float sweepAngle);
    public void AddPie(float x, float y, float width, float height, float startAngle, float sweepAngle);
    public void AddPie(int x, int y, int width, int height, float startAngle, float sweepAngle);
    public void AddPolygon(PointF[] points);
    public void AddPolygon(Point[] points);
    public void AddPath(GraphicsPath addingPath, bool connect);
    public void AddString(string s, FontFamily family, int style, float emSize, PointF origin, StringFormat format);
    public void AddString(string s, FontFamily family, int style, float emSize, Point origin, StringFormat format);
    public void AddString(string s, FontFamily family, int style, float emSize, RectangleF layoutRect, StringFormat format);
    public void AddString(string s, FontFamily family, int style, float emSize, Rectangle layoutRect, StringFormat format);
    public void Transform(Matrix matrix);
    public RectangleF GetBounds();
    [NullableContextAttribute("2")]
public RectangleF GetBounds(Matrix matrix);
    [NullableContextAttribute("2")]
public RectangleF GetBounds(Matrix matrix, Pen pen);
    public void Flatten();
    [NullableContextAttribute("2")]
public void Flatten(Matrix matrix);
    [NullableContextAttribute("2")]
public void Flatten(Matrix matrix, float flatness);
    public void Widen(Pen pen);
    public void Widen(Pen pen, Matrix matrix);
    public void Widen(Pen pen, Matrix matrix, float flatness);
    public void Warp(PointF[] destPoints, RectangleF srcRect);
    public void Warp(PointF[] destPoints, RectangleF srcRect, Matrix matrix);
    public void Warp(PointF[] destPoints, RectangleF srcRect, Matrix matrix, WarpMode warpMode);
    public void Warp(PointF[] destPoints, RectangleF srcRect, Matrix matrix, WarpMode warpMode, float flatness);
    public int get_PointCount();
    public Byte[] get_PathTypes();
    public PointF[] get_PathPoints();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.GraphicsPathIterator : MarshalByRefObject {
    internal IntPtr nativeIter;
    public int Count { get; }
    public int SubpathCount { get; }
    [NullableContextAttribute("2")]
public GraphicsPathIterator(GraphicsPath path);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public int NextSubpath(Int32& startIndex, Int32& endIndex, Boolean& isClosed);
    public int NextSubpath(GraphicsPath path, Boolean& isClosed);
    public int NextPathType(Byte& pathType, Int32& startIndex, Int32& endIndex);
    public int NextMarker(Int32& startIndex, Int32& endIndex);
    public int NextMarker(GraphicsPath path);
    public int get_Count();
    public int get_SubpathCount();
    public bool HasCurve();
    public void Rewind();
    public int Enumerate(PointF[]& points, Byte[]& types);
    public int CopyData(PointF[]& points, Byte[]& types, int startIndex, int endIndex);
}
public class System.Drawing.Drawing2D.GraphicsState : MarshalByRefObject {
    internal int nativeState;
    internal GraphicsState(int nativeState);
}
public class System.Drawing.Drawing2D.HatchBrush : Brush {
    public HatchStyle HatchStyle { get; }
    public Color ForegroundColor { get; }
    public Color BackgroundColor { get; }
    public HatchBrush(HatchStyle hatchstyle, Color foreColor);
    public HatchBrush(HatchStyle hatchstyle, Color foreColor, Color backColor);
    internal HatchBrush(IntPtr nativeBrush);
    [NullableContextAttribute("1")]
public virtual object Clone();
    public HatchStyle get_HatchStyle();
    public Color get_ForegroundColor();
    public Color get_BackgroundColor();
}
public enum System.Drawing.Drawing2D.HatchStyle : Enum {
    public int value__;
    public static HatchStyle Horizontal;
    public static HatchStyle Vertical;
    public static HatchStyle ForwardDiagonal;
    public static HatchStyle BackwardDiagonal;
    public static HatchStyle Cross;
    public static HatchStyle DiagonalCross;
    public static HatchStyle Percent05;
    public static HatchStyle Percent10;
    public static HatchStyle Percent20;
    public static HatchStyle Percent25;
    public static HatchStyle Percent30;
    public static HatchStyle Percent40;
    public static HatchStyle Percent50;
    public static HatchStyle Percent60;
    public static HatchStyle Percent70;
    public static HatchStyle Percent75;
    public static HatchStyle Percent80;
    public static HatchStyle Percent90;
    public static HatchStyle LightDownwardDiagonal;
    public static HatchStyle LightUpwardDiagonal;
    public static HatchStyle DarkDownwardDiagonal;
    public static HatchStyle DarkUpwardDiagonal;
    public static HatchStyle WideDownwardDiagonal;
    public static HatchStyle WideUpwardDiagonal;
    public static HatchStyle LightVertical;
    public static HatchStyle LightHorizontal;
    public static HatchStyle NarrowVertical;
    public static HatchStyle NarrowHorizontal;
    public static HatchStyle DarkVertical;
    public static HatchStyle DarkHorizontal;
    public static HatchStyle DashedDownwardDiagonal;
    public static HatchStyle DashedUpwardDiagonal;
    public static HatchStyle DashedHorizontal;
    public static HatchStyle DashedVertical;
    public static HatchStyle SmallConfetti;
    public static HatchStyle LargeConfetti;
    public static HatchStyle ZigZag;
    public static HatchStyle Wave;
    public static HatchStyle DiagonalBrick;
    public static HatchStyle HorizontalBrick;
    public static HatchStyle Weave;
    public static HatchStyle Plaid;
    public static HatchStyle Divot;
    public static HatchStyle DottedGrid;
    public static HatchStyle DottedDiamond;
    public static HatchStyle Shingle;
    public static HatchStyle Trellis;
    public static HatchStyle Sphere;
    public static HatchStyle SmallGrid;
    public static HatchStyle SmallCheckerBoard;
    public static HatchStyle LargeCheckerBoard;
    public static HatchStyle OutlinedDiamond;
    public static HatchStyle SolidDiamond;
    public static HatchStyle LargeGrid;
    public static HatchStyle Min;
    public static HatchStyle Max;
}
public enum System.Drawing.Drawing2D.InterpolationMode : Enum {
    public int value__;
    public static InterpolationMode Invalid;
    public static InterpolationMode Default;
    public static InterpolationMode Low;
    public static InterpolationMode High;
    public static InterpolationMode Bilinear;
    public static InterpolationMode Bicubic;
    public static InterpolationMode NearestNeighbor;
    public static InterpolationMode HighQualityBilinear;
    public static InterpolationMode HighQualityBicubic;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.LinearGradientBrush : Brush {
    private bool _interpolationColorsWasSet;
    public Color[] LinearColors { get; public set; }
    public RectangleF Rectangle { get; }
    public bool GammaCorrection { get; public set; }
    [NullableAttribute("2")]
public Blend Blend { get; public set; }
    public ColorBlend InterpolationColors { get; public set; }
    public WrapMode WrapMode { get; public set; }
    public Matrix Transform { get; public set; }
    public LinearGradientBrush(PointF point1, PointF point2, Color color1, Color color2);
    public LinearGradientBrush(Point point1, Point point2, Color color1, Color color2);
    public LinearGradientBrush(RectangleF rect, Color color1, Color color2, LinearGradientMode linearGradientMode);
    public LinearGradientBrush(Rectangle rect, Color color1, Color color2, LinearGradientMode linearGradientMode);
    public LinearGradientBrush(RectangleF rect, Color color1, Color color2, float angle);
    public LinearGradientBrush(RectangleF rect, Color color1, Color color2, float angle, bool isAngleScaleable);
    public LinearGradientBrush(Rectangle rect, Color color1, Color color2, float angle);
    public LinearGradientBrush(Rectangle rect, Color color1, Color color2, float angle, bool isAngleScaleable);
    internal LinearGradientBrush(IntPtr nativeBrush);
    public virtual object Clone();
    public Color[] get_LinearColors();
    public void set_LinearColors(Color[] value);
    public RectangleF get_Rectangle();
    public bool get_GammaCorrection();
    public void set_GammaCorrection(bool value);
    [NullableContextAttribute("2")]
public Blend get_Blend();
    [NullableContextAttribute("2")]
public void set_Blend(Blend value);
    public void SetSigmaBellShape(float focus);
    public void SetSigmaBellShape(float focus, float scale);
    public void SetBlendTriangularShape(float focus);
    public void SetBlendTriangularShape(float focus, float scale);
    public ColorBlend get_InterpolationColors();
    public void set_InterpolationColors(ColorBlend value);
    public WrapMode get_WrapMode();
    public void set_WrapMode(WrapMode value);
    public Matrix get_Transform();
    public void set_Transform(Matrix value);
    public void ResetTransform();
    public void MultiplyTransform(Matrix matrix);
    public void MultiplyTransform(Matrix matrix, MatrixOrder order);
    public void TranslateTransform(float dx, float dy);
    public void TranslateTransform(float dx, float dy, MatrixOrder order);
    public void ScaleTransform(float sx, float sy);
    public void ScaleTransform(float sx, float sy, MatrixOrder order);
    public void RotateTransform(float angle);
    public void RotateTransform(float angle, MatrixOrder order);
}
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public enum System.Drawing.Drawing2D.LinearGradientMode : Enum {
    public int value__;
    public static LinearGradientMode Horizontal;
    public static LinearGradientMode Vertical;
    public static LinearGradientMode ForwardDiagonal;
    public static LinearGradientMode BackwardDiagonal;
}
public enum System.Drawing.Drawing2D.LineCap : Enum {
    public int value__;
    public static LineCap Flat;
    public static LineCap Square;
    public static LineCap Round;
    public static LineCap Triangle;
    public static LineCap NoAnchor;
    public static LineCap SquareAnchor;
    public static LineCap RoundAnchor;
    public static LineCap DiamondAnchor;
    public static LineCap ArrowAnchor;
    public static LineCap Custom;
    public static LineCap AnchorMask;
}
public enum System.Drawing.Drawing2D.LineJoin : Enum {
    public int value__;
    public static LineJoin Miter;
    public static LineJoin Bevel;
    public static LineJoin Round;
    public static LineJoin MiterClipped;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.Matrix : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private IntPtr <NativeMatrix>k__BackingField;
    internal IntPtr NativeMatrix { get; private set; }
    public Single[] Elements { get; }
    public float OffsetX { get; }
    public float OffsetY { get; }
    public bool IsInvertible { get; }
    public bool IsIdentity { get; }
    public Matrix(float m11, float m12, float m21, float m22, float dx, float dy);
    private Matrix(IntPtr nativeMatrix);
    public Matrix(RectangleF rect, PointF[] plgpts);
    public Matrix(Rectangle rect, Point[] plgpts);
    [CompilerGeneratedAttribute]
internal IntPtr get_NativeMatrix();
    [CompilerGeneratedAttribute]
private void set_NativeMatrix(IntPtr value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public Matrix Clone();
    public Single[] get_Elements();
    public float get_OffsetX();
    public float get_OffsetY();
    public void Reset();
    public void Multiply(Matrix matrix);
    public void Multiply(Matrix matrix, MatrixOrder order);
    public void Translate(float offsetX, float offsetY);
    public void Translate(float offsetX, float offsetY, MatrixOrder order);
    public void Scale(float scaleX, float scaleY);
    public void Scale(float scaleX, float scaleY, MatrixOrder order);
    public void Rotate(float angle);
    public void Rotate(float angle, MatrixOrder order);
    public void RotateAt(float angle, PointF point);
    public void RotateAt(float angle, PointF point, MatrixOrder order);
    public void Shear(float shearX, float shearY);
    public void Shear(float shearX, float shearY, MatrixOrder order);
    public void Invert();
    public void TransformPoints(PointF[] pts);
    public void TransformPoints(Point[] pts);
    public void TransformVectors(PointF[] pts);
    public void VectorTransformPoints(Point[] pts);
    public void TransformVectors(Point[] pts);
    public bool get_IsInvertible();
    public bool get_IsIdentity();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum System.Drawing.Drawing2D.MatrixOrder : Enum {
    public int value__;
    public static MatrixOrder Prepend;
    public static MatrixOrder Append;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.PathData : object {
    [CompilerGeneratedAttribute]
private PointF[] <Points>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Types>k__BackingField;
    public PointF[] Points { get; public set; }
    public Byte[] Types { get; public set; }
    [CompilerGeneratedAttribute]
public PointF[] get_Points();
    [CompilerGeneratedAttribute]
public void set_Points(PointF[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Types();
    [CompilerGeneratedAttribute]
public void set_Types(Byte[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.PathGradientBrush : Brush {
    public Color CenterColor { get; public set; }
    public Color[] SurroundColors { get; public set; }
    public PointF CenterPoint { get; public set; }
    public RectangleF Rectangle { get; }
    public Blend Blend { get; public set; }
    public ColorBlend InterpolationColors { get; public set; }
    public Matrix Transform { get; public set; }
    public PointF FocusScales { get; public set; }
    public WrapMode WrapMode { get; public set; }
    public PathGradientBrush(PointF[] points);
    public PathGradientBrush(PointF[] points, WrapMode wrapMode);
    public PathGradientBrush(Point[] points);
    public PathGradientBrush(Point[] points, WrapMode wrapMode);
    public PathGradientBrush(GraphicsPath path);
    internal PathGradientBrush(IntPtr nativeBrush);
    public virtual object Clone();
    public Color get_CenterColor();
    public void set_CenterColor(Color value);
    public Color[] get_SurroundColors();
    public void set_SurroundColors(Color[] value);
    public PointF get_CenterPoint();
    public void set_CenterPoint(PointF value);
    public RectangleF get_Rectangle();
    public Blend get_Blend();
    public void set_Blend(Blend value);
    public void SetSigmaBellShape(float focus);
    public void SetSigmaBellShape(float focus, float scale);
    public void SetBlendTriangularShape(float focus);
    public void SetBlendTriangularShape(float focus, float scale);
    public ColorBlend get_InterpolationColors();
    public void set_InterpolationColors(ColorBlend value);
    public Matrix get_Transform();
    public void set_Transform(Matrix value);
    public void ResetTransform();
    public void MultiplyTransform(Matrix matrix);
    public void MultiplyTransform(Matrix matrix, MatrixOrder order);
    public void TranslateTransform(float dx, float dy);
    public void TranslateTransform(float dx, float dy, MatrixOrder order);
    public void ScaleTransform(float sx, float sy);
    public void ScaleTransform(float sx, float sy, MatrixOrder order);
    public void RotateTransform(float angle);
    public void RotateTransform(float angle, MatrixOrder order);
    public PointF get_FocusScales();
    public void set_FocusScales(PointF value);
    public WrapMode get_WrapMode();
    public void set_WrapMode(WrapMode value);
}
public enum System.Drawing.Drawing2D.PathPointType : Enum {
    public int value__;
    public static PathPointType Start;
    public static PathPointType Line;
    public static PathPointType Bezier;
    public static PathPointType PathTypeMask;
    public static PathPointType DashMode;
    public static PathPointType PathMarker;
    public static PathPointType CloseSubpath;
    public static PathPointType Bezier3;
}
public enum System.Drawing.Drawing2D.PenAlignment : Enum {
    public int value__;
    public static PenAlignment Center;
    public static PenAlignment Inset;
    public static PenAlignment Outset;
    public static PenAlignment Left;
    public static PenAlignment Right;
}
public enum System.Drawing.Drawing2D.PenType : Enum {
    public int value__;
    public static PenType SolidColor;
    public static PenType HatchFill;
    public static PenType TextureFill;
    public static PenType PathGradient;
    public static PenType LinearGradient;
}
public enum System.Drawing.Drawing2D.PixelOffsetMode : Enum {
    public int value__;
    public static PixelOffsetMode Invalid;
    public static PixelOffsetMode Default;
    public static PixelOffsetMode HighSpeed;
    public static PixelOffsetMode HighQuality;
    public static PixelOffsetMode None;
    public static PixelOffsetMode Half;
}
public enum System.Drawing.Drawing2D.QualityMode : Enum {
    public int value__;
    public static QualityMode Invalid;
    public static QualityMode Default;
    public static QualityMode Low;
    public static QualityMode High;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Drawing2D.RegionData : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; public set; }
    internal RegionData(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
}
internal class System.Drawing.Drawing2D.SafeCustomLineCapHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal SafeCustomLineCapHandle(IntPtr h);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    public static IntPtr op_Implicit(SafeCustomLineCapHandle handle);
    public static SafeCustomLineCapHandle op_Explicit(IntPtr handle);
}
public enum System.Drawing.Drawing2D.SmoothingMode : Enum {
    public int value__;
    public static SmoothingMode Invalid;
    public static SmoothingMode Default;
    public static SmoothingMode HighSpeed;
    public static SmoothingMode HighQuality;
    public static SmoothingMode None;
    public static SmoothingMode AntiAlias;
}
public enum System.Drawing.Drawing2D.WarpMode : Enum {
    public int value__;
    public static WarpMode Perspective;
    public static WarpMode Bilinear;
}
public enum System.Drawing.Drawing2D.WrapMode : Enum {
    public int value__;
    public static WrapMode Tile;
    public static WrapMode TileFlipX;
    public static WrapMode TileFlipY;
    public static WrapMode TileFlipXY;
    public static WrapMode Clamp;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorAttribute("System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("System.Drawing.FontConverter")]
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Drawing.Font : MarshalByRefObject {
    private IntPtr _nativeFont;
    private float _fontSize;
    private FontStyle _fontStyle;
    private FontFamily _fontFamily;
    private GraphicsUnit _fontUnit;
    private byte _gdiCharSet;
    private bool _gdiVerticalFont;
    private string _systemFontName;
    private string _originalFontName;
    public float Size { get; }
    [BrowsableAttribute("False")]
public FontStyle Style { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool Bold { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool Italic { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool Strikeout { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool Underline { get; }
    [BrowsableAttribute("False")]
public FontFamily FontFamily { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("System.Drawing.FontConverter/FontNameConverter")]
public string Name { get; }
    [TypeConverterAttribute("System.Drawing.FontConverter/FontUnitConverter")]
public GraphicsUnit Unit { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public byte GdiCharSet { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool GdiVerticalFont { get; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
public string OriginalFontName { get; }
    [BrowsableAttribute("False")]
public string SystemFontName { get; }
    [BrowsableAttribute("False")]
public bool IsSystemFont { get; }
    [BrowsableAttribute("False")]
public int Height { get; }
    internal IntPtr NativeFont { get; }
    [BrowsableAttribute("False")]
public float SizeInPoints { get; }
    private Font(SerializationInfo info, StreamingContext context);
    public Font(Font prototype, FontStyle newStyle);
    public Font(FontFamily family, float emSize, FontStyle style, GraphicsUnit unit);
    public Font(FontFamily family, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet);
    public Font(FontFamily family, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);
    public Font(string familyName, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet);
    public Font(string familyName, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);
    public Font(FontFamily family, float emSize, FontStyle style);
    public Font(FontFamily family, float emSize, GraphicsUnit unit);
    public Font(FontFamily family, float emSize);
    public Font(string familyName, float emSize, FontStyle style, GraphicsUnit unit);
    public Font(string familyName, float emSize, FontStyle style);
    public Font(string familyName, float emSize, GraphicsUnit unit);
    public Font(string familyName, float emSize);
    private Font(IntPtr nativeFont, byte gdiCharSet, bool gdiVerticalFont);
    public float get_Size();
    public FontStyle get_Style();
    public bool get_Bold();
    public bool get_Italic();
    public bool get_Strikeout();
    public bool get_Underline();
    public FontFamily get_FontFamily();
    public string get_Name();
    public GraphicsUnit get_Unit();
    public byte get_GdiCharSet();
    public bool get_GdiVerticalFont();
    [NullableContextAttribute("2")]
public string get_OriginalFontName();
    public string get_SystemFontName();
    public bool get_IsSystemFont();
    public int get_Height();
    internal IntPtr get_NativeFont();
    protected virtual override void Finalize();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    private static bool IsVerticalName(string familyName);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public float GetHeight(Graphics graphics);
    public float GetHeight(float dpi);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal void SetSystemFontName(string systemFontName);
    public void ToLogFont(object logFont, Graphics graphics);
    private LOGFONT ToLogFontInternal(Graphics graphics);
    private void CreateNativeFont();
    private void Initialize(string familyName, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);
    private void Initialize(FontFamily family, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);
    public static Font FromHfont(IntPtr hfont);
    public static Font FromLogFont(object lf);
    internal static Font FromLogFont(LOGFONT& logFont);
    internal static Font FromLogFontInternal(LOGFONT& logFont, IntPtr hdc);
    public static Font FromLogFont(object lf, IntPtr hdc);
    public static Font FromHdc(IntPtr hdc);
    public sealed virtual object Clone();
    private void SetFontFamily(FontFamily family);
    private static string StripVerticalName(string familyName);
    public void ToLogFont(object logFont);
    public IntPtr ToHfont();
    public float GetHeight();
    public float get_SizeInPoints();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.FontConverter : TypeConverter {
    private static string StylePrefix;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    private ValueTuple`2<string, string> ParseSizeTokens(string text, char separator);
    private GraphicsUnit ParseGraphicsUnits(string units);
    [NullableContextAttribute("1")]
public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    [NullableContextAttribute("1")]
public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.FontFamily : MarshalByRefObject {
    private static int NeutralLanguage;
    private IntPtr _nativeFamily;
    private bool _createDefaultOnFail;
    internal IntPtr NativeFamily { get; }
    private static int CurrentLanguage { get; }
    public string Name { get; }
    public static FontFamily[] Families { get; }
    public static FontFamily GenericSansSerif { get; }
    public static FontFamily GenericSerif { get; }
    public static FontFamily GenericMonospace { get; }
    internal FontFamily(IntPtr family);
    internal FontFamily(string name, bool createDefaultOnFail);
    public FontFamily(string name);
    public FontFamily(string name, FontCollection fontCollection);
    public FontFamily(GenericFontFamilies genericFamily);
    private void SetNativeFamily(IntPtr family);
    private void CreateFontFamily(string name, FontCollection fontCollection);
    protected virtual override void Finalize();
    internal IntPtr get_NativeFamily();
    public virtual string ToString();
    public virtual int GetHashCode();
    private static int get_CurrentLanguage();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public string get_Name();
    public string GetName(int language);
    public static FontFamily[] get_Families();
    public static FontFamily get_GenericSansSerif();
    private static IntPtr GetGdipGenericSansSerif();
    public static FontFamily get_GenericSerif();
    public static FontFamily get_GenericMonospace();
    [ObsoleteAttribute("Do not use method GetFamilies, use property Families instead")]
public static FontFamily[] GetFamilies(Graphics graphics);
    public bool IsStyleAvailable(FontStyle style);
    public int GetEmHeight(FontStyle style);
    public int GetCellAscent(FontStyle style);
    public int GetCellDescent(FontStyle style);
    public int GetLineSpacing(FontStyle style);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[FlagsAttribute]
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public enum System.Drawing.FontStyle : Enum {
    public int value__;
    public static FontStyle Regular;
    public static FontStyle Bold;
    public static FontStyle Italic;
    public static FontStyle Underline;
    public static FontStyle Strikeout;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Graphics : MarshalByRefObject {
    private IntPtr _nativeHdc;
    [CompilerGeneratedAttribute]
private IntPtr <NativeGraphics>k__BackingField;
    private GraphicsContext _previousContext;
    private static object s_syncObject;
    private object _printingHelper;
    private static IntPtr s_halftonePalette;
    private Image _backingImage;
    internal IntPtr NativeGraphics { get; private set; }
    public Region Clip { get; public set; }
    public RectangleF ClipBounds { get; }
    public CompositingMode CompositingMode { get; public set; }
    public CompositingQuality CompositingQuality { get; public set; }
    public float DpiX { get; }
    public float DpiY { get; }
    public InterpolationMode InterpolationMode { get; public set; }
    public bool IsClipEmpty { get; }
    public bool IsVisibleClipEmpty { get; }
    public float PageScale { get; public set; }
    public GraphicsUnit PageUnit { get; public set; }
    public PixelOffsetMode PixelOffsetMode { get; public set; }
    public Point RenderingOrigin { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public int TextContrast { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Matrix Transform { get; public set; }
    [NullableAttribute("2")]
internal object PrintingHelper { get; internal set; }
    public RectangleF VisibleClipBounds { get; }
    private Graphics(IntPtr gdipNativeGraphics);
    private static Graphics();
    [CompilerGeneratedAttribute]
internal IntPtr get_NativeGraphics();
    [CompilerGeneratedAttribute]
private void set_NativeGraphics(IntPtr value);
    public Region get_Clip();
    public void set_Clip(Region value);
    public RectangleF get_ClipBounds();
    public CompositingMode get_CompositingMode();
    public void set_CompositingMode(CompositingMode value);
    public CompositingQuality get_CompositingQuality();
    public void set_CompositingQuality(CompositingQuality value);
    public float get_DpiX();
    public float get_DpiY();
    public InterpolationMode get_InterpolationMode();
    public void set_InterpolationMode(InterpolationMode value);
    public bool get_IsClipEmpty();
    public bool get_IsVisibleClipEmpty();
    public float get_PageScale();
    public void set_PageScale(float value);
    public GraphicsUnit get_PageUnit();
    public void set_PageUnit(GraphicsUnit value);
    public PixelOffsetMode get_PixelOffsetMode();
    public void set_PixelOffsetMode(PixelOffsetMode value);
    public Point get_RenderingOrigin();
    public void set_RenderingOrigin(Point value);
    public SmoothingMode get_SmoothingMode();
    public void set_SmoothingMode(SmoothingMode value);
    public int get_TextContrast();
    public void set_TextContrast(int value);
    public TextRenderingHint get_TextRenderingHint();
    public void set_TextRenderingHint(TextRenderingHint value);
    public Matrix get_Transform();
    public void set_Transform(Matrix value);
    public sealed virtual IntPtr GetHdc();
    [EditorBrowsableAttribute("2")]
public void ReleaseHdc(IntPtr hdc);
    public sealed virtual void ReleaseHdc();
    public void Flush();
    public void Flush(FlushIntention intention);
    public void SetClip(Graphics g);
    public void SetClip(Graphics g, CombineMode combineMode);
    public void SetClip(Rectangle rect);
    public void SetClip(Rectangle rect, CombineMode combineMode);
    public void SetClip(RectangleF rect);
    public void SetClip(RectangleF rect, CombineMode combineMode);
    public void SetClip(GraphicsPath path);
    public void SetClip(GraphicsPath path, CombineMode combineMode);
    public void SetClip(Region region, CombineMode combineMode);
    public void IntersectClip(Rectangle rect);
    public void IntersectClip(RectangleF rect);
    public void IntersectClip(Region region);
    public void ExcludeClip(Rectangle rect);
    public void ExcludeClip(Region region);
    public void ResetClip();
    public void TranslateClip(float dx, float dy);
    public void TranslateClip(int dx, int dy);
    public bool IsVisible(int x, int y);
    public bool IsVisible(Point point);
    public bool IsVisible(float x, float y);
    public bool IsVisible(PointF point);
    public bool IsVisible(int x, int y, int width, int height);
    public bool IsVisible(Rectangle rect);
    public bool IsVisible(float x, float y, float width, float height);
    public bool IsVisible(RectangleF rect);
    public void ResetTransform();
    public void MultiplyTransform(Matrix matrix);
    public void MultiplyTransform(Matrix matrix, MatrixOrder order);
    public void TranslateTransform(float dx, float dy);
    public void TranslateTransform(float dx, float dy, MatrixOrder order);
    public void ScaleTransform(float sx, float sy);
    public void ScaleTransform(float sx, float sy, MatrixOrder order);
    public void RotateTransform(float angle);
    public void RotateTransform(float angle, MatrixOrder order);
    public void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public void DrawArc(Pen pen, RectangleF rect, float startAngle, float sweepAngle);
    public void DrawArc(Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);
    public void DrawArc(Pen pen, Rectangle rect, float startAngle, float sweepAngle);
    public void DrawBezier(Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);
    public void DrawBezier(Pen pen, PointF pt1, PointF pt2, PointF pt3, PointF pt4);
    public void DrawBezier(Pen pen, Point pt1, Point pt2, Point pt3, Point pt4);
    public void DrawRectangle(Pen pen, Rectangle rect);
    public void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public void DrawRectangles(Pen pen, RectangleF[] rects);
    public void DrawRectangles(Pen pen, Rectangle[] rects);
    public void DrawEllipse(Pen pen, RectangleF rect);
    public void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public void DrawEllipse(Pen pen, Rectangle rect);
    public void DrawEllipse(Pen pen, int x, int y, int width, int height);
    public void DrawPie(Pen pen, RectangleF rect, float startAngle, float sweepAngle);
    public void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public void DrawPie(Pen pen, Rectangle rect, float startAngle, float sweepAngle);
    public void DrawPie(Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);
    public void DrawPolygon(Pen pen, PointF[] points);
    public void DrawPolygon(Pen pen, Point[] points);
    public void DrawPath(Pen pen, GraphicsPath path);
    public void DrawCurve(Pen pen, PointF[] points);
    public void DrawCurve(Pen pen, PointF[] points, float tension);
    public void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments);
    public void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public void DrawCurve(Pen pen, Point[] points);
    public void DrawCurve(Pen pen, Point[] points, float tension);
    public void DrawCurve(Pen pen, Point[] points, int offset, int numberOfSegments, float tension);
    public void DrawClosedCurve(Pen pen, PointF[] points);
    public void DrawClosedCurve(Pen pen, PointF[] points, float tension, FillMode fillmode);
    public void DrawClosedCurve(Pen pen, Point[] points);
    public void DrawClosedCurve(Pen pen, Point[] points, float tension, FillMode fillmode);
    public void Clear(Color color);
    public void FillRectangle(Brush brush, RectangleF rect);
    public void FillRectangle(Brush brush, float x, float y, float width, float height);
    public void FillRectangle(Brush brush, Rectangle rect);
    public void FillRectangle(Brush brush, int x, int y, int width, int height);
    public void FillRectangles(Brush brush, RectangleF[] rects);
    public void FillRectangles(Brush brush, Rectangle[] rects);
    public void FillPolygon(Brush brush, PointF[] points);
    public void FillPolygon(Brush brush, PointF[] points, FillMode fillMode);
    public void FillPolygon(Brush brush, Point[] points);
    public void FillPolygon(Brush brush, Point[] points, FillMode fillMode);
    public void FillEllipse(Brush brush, RectangleF rect);
    public void FillEllipse(Brush brush, float x, float y, float width, float height);
    public void FillEllipse(Brush brush, Rectangle rect);
    public void FillEllipse(Brush brush, int x, int y, int width, int height);
    public void FillPie(Brush brush, Rectangle rect, float startAngle, float sweepAngle);
    public void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public void FillPie(Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);
    public void FillClosedCurve(Brush brush, PointF[] points);
    public void FillClosedCurve(Brush brush, PointF[] points, FillMode fillmode);
    public void FillClosedCurve(Brush brush, PointF[] points, FillMode fillmode, float tension);
    public void FillClosedCurve(Brush brush, Point[] points);
    public void FillClosedCurve(Brush brush, Point[] points, FillMode fillmode);
    public void FillClosedCurve(Brush brush, Point[] points, FillMode fillmode, float tension);
    public void DrawString(string s, Font font, Brush brush, float x, float y);
    public void DrawString(string s, Font font, Brush brush, PointF point);
    public void DrawString(string s, Font font, Brush brush, float x, float y, StringFormat format);
    public void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle);
    public void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    [NullableContextAttribute("2")]
public SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, Int32& charactersFitted, Int32& linesFilled);
    [NullableContextAttribute("2")]
public SizeF MeasureString(string text, Font font, PointF origin, StringFormat stringFormat);
    public SizeF MeasureString(string text, Font font, SizeF layoutArea);
    [NullableContextAttribute("2")]
public SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public SizeF MeasureString(string text, Font font);
    public SizeF MeasureString(string text, Font font, int width);
    [NullableContextAttribute("2")]
public SizeF MeasureString(string text, Font font, int width, StringFormat format);
    public Region[] MeasureCharacterRanges(string text, Font font, RectangleF layoutRect, StringFormat stringFormat);
    public void DrawImage(Image image, PointF point);
    public void DrawImage(Image image, float x, float y);
    public void DrawImage(Image image, RectangleF rect);
    public void DrawImage(Image image, float x, float y, float width, float height);
    public void DrawImage(Image image, Point point);
    public void DrawImage(Image image, int x, int y);
    public void DrawImage(Image image, Rectangle rect);
    public void DrawImage(Image image, int x, int y, int width, int height);
    public void DrawImageUnscaled(Image image, Point point);
    public void DrawImageUnscaled(Image image, int x, int y);
    public void DrawImageUnscaled(Image image, Rectangle rect);
    public void DrawImageUnscaled(Image image, int x, int y, int width, int height);
    public void DrawImageUnscaledAndClipped(Image image, Rectangle rect);
    public void DrawImage(Image image, PointF[] destPoints);
    public void DrawImage(Image image, Point[] destPoints);
    public void DrawImage(Image image, float x, float y, RectangleF srcRect, GraphicsUnit srcUnit);
    public void DrawImage(Image image, int x, int y, Rectangle srcRect, GraphicsUnit srcUnit);
    public void DrawImage(Image image, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit);
    public void DrawImage(Image image, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit);
    public void DrawImage(Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit);
    public void DrawImage(Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public void DrawImage(Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback);
    public void DrawImage(Image image, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback, int callbackData);
    public void DrawImage(Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit);
    public void DrawImage(Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public void DrawImage(Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback);
    public void DrawImage(Image image, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback, int callbackData);
    public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit);
    public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    [NullableContextAttribute("2")]
public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback);
    [NullableContextAttribute("2")]
public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback, IntPtr callbackData);
    public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit);
    public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    [NullableContextAttribute("2")]
public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback);
    [NullableContextAttribute("2")]
public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback, IntPtr callbackData);
    public void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public void DrawLines(Pen pen, PointF[] points);
    public void DrawLine(Pen pen, int x1, int y1, int x2, int y2);
    public void DrawLine(Pen pen, Point pt1, Point pt2);
    public void DrawLines(Pen pen, Point[] points);
    public void CopyFromScreen(Point upperLeftSource, Point upperLeftDestination, Size blockRegionSize);
    public void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, Size blockRegionSize);
    public void CopyFromScreen(Point upperLeftSource, Point upperLeftDestination, Size blockRegionSize, CopyPixelOperation copyPixelOperation);
    public void EnumerateMetafile(Metafile metafile, PointF destPoint, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, PointF destPoint, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, Point destPoint, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, Point destPoint, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, RectangleF destRect, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, RectangleF destRect, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, Rectangle destRect, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, Rectangle destRect, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, Point[] destPoints, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, Point[] destPoints, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData);
    public void EnumerateMetafile(Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback);
    public void EnumerateMetafile(Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit srcUnit, EnumerateMetafileProc callback, IntPtr callbackData);
    public void TransformPoints(CoordinateSpace destSpace, CoordinateSpace srcSpace, PointF[] pts);
    public void TransformPoints(CoordinateSpace destSpace, CoordinateSpace srcSpace, Point[] pts);
    private void CheckErrorStatus(int status);
    private void IgnoreMetafileErrors(Image image, Int32& errorStatus);
    [EditorBrowsableAttribute("2")]
public static Graphics FromHdc(IntPtr hdc);
    [EditorBrowsableAttribute("2")]
public static Graphics FromHdcInternal(IntPtr hdc);
    [EditorBrowsableAttribute("2")]
public static Graphics FromHdc(IntPtr hdc, IntPtr hdevice);
    [EditorBrowsableAttribute("2")]
public static Graphics FromHwnd(IntPtr hwnd);
    [EditorBrowsableAttribute("2")]
public static Graphics FromHwndInternal(IntPtr hwnd);
    public static Graphics FromImage(Image image);
    [EditorBrowsableAttribute("1")]
public void ReleaseHdcInternal(IntPtr hdc);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    private void FlushCore();
    internal object get_PrintingHelper();
    internal void set_PrintingHelper(object value);
    public void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, Size blockRegionSize, CopyPixelOperation copyPixelOperation);
    public Color GetNearestColor(Color color);
    public void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public void DrawBeziers(Pen pen, PointF[] points);
    public void DrawBeziers(Pen pen, Point[] points);
    public void FillPath(Brush brush, GraphicsPath path);
    public void FillRegion(Brush brush, Region region);
    public void DrawIcon(Icon icon, int x, int y);
    public void DrawIcon(Icon icon, Rectangle targetRect);
    public void DrawIconUnstretched(Icon icon, Rectangle targetRect);
    public void EnumerateMetafile(Metafile metafile, PointF destPoint, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, Point destPoint, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, RectangleF destRect, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, Rectangle destRect, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, Point[] destPoints, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, PointF destPoint, RectangleF srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, Point destPoint, Rectangle srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, RectangleF destRect, RectangleF srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, Rectangle destRect, Rectangle srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, PointF[] destPoints, RectangleF srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    public void EnumerateMetafile(Metafile metafile, Point[] destPoints, Rectangle srcRect, GraphicsUnit unit, EnumerateMetafileProc callback, IntPtr callbackData, ImageAttributes imageAttr);
    [EditorBrowsableAttribute("1")]
public object GetContextInfo();
    public RectangleF get_VisibleClipBounds();
    private void PushContext(GraphicsContext context);
    private void PopContext(int currentContextState);
    public GraphicsState Save();
    public void Restore(GraphicsState gstate);
    public GraphicsContainer BeginContainer(RectangleF dstrect, RectangleF srcrect, GraphicsUnit unit);
    public GraphicsContainer BeginContainer();
    public void EndContainer(GraphicsContainer container);
    public GraphicsContainer BeginContainer(Rectangle dstrect, Rectangle srcrect, GraphicsUnit unit);
    public void AddMetafileComment(Byte[] data);
    public static IntPtr GetHalftonePalette();
    private static void OnDomainUnload(object sender, EventArgs e);
}
internal class System.Drawing.GraphicsContext : object {
    private int _contextState;
    private PointF _transformOffset;
    private Region _clipRegion;
    private GraphicsContext _nextContext;
    private GraphicsContext _prevContext;
    private bool _isCumulative;
    public int State { get; public set; }
    public PointF TransformOffset { get; }
    public Region Clip { get; }
    public GraphicsContext Next { get; public set; }
    public GraphicsContext Previous { get; public set; }
    public bool IsCumulative { get; public set; }
    public GraphicsContext(Graphics g);
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
    public int get_State();
    public void set_State(int value);
    public PointF get_TransformOffset();
    public Region get_Clip();
    public GraphicsContext get_Next();
    public void set_Next(GraphicsContext value);
    public GraphicsContext get_Previous();
    public void set_Previous(GraphicsContext value);
    public bool get_IsCumulative();
    public void set_IsCumulative(bool value);
}
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public enum System.Drawing.GraphicsUnit : Enum {
    public int value__;
    public static GraphicsUnit World;
    public static GraphicsUnit Display;
    public static GraphicsUnit Pixel;
    public static GraphicsUnit Point;
    public static GraphicsUnit Inch;
    public static GraphicsUnit Document;
    public static GraphicsUnit Millimeter;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorAttribute("System.Drawing.Design.IconEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("System.Drawing.IconConverter")]
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Drawing.Icon : MarshalByRefObject {
    private static int s_bitDepth;
    private static int PNGSignature1;
    private static int PNGSignature2;
    private Byte[] _iconData;
    private UInt32 _bestImageOffset;
    private UInt32 _bestBitDepth;
    private UInt32 _bestBytesInRes;
    private Nullable`1<bool> _isBestImagePng;
    private Size _iconSize;
    private IntPtr _handle;
    private bool _ownHandle;
    [BrowsableAttribute("False")]
public IntPtr Handle { get; }
    [BrowsableAttribute("False")]
public int Height { get; }
    public Size Size { get; }
    [BrowsableAttribute("False")]
public int Width { get; }
    internal Icon(IntPtr handle);
    internal Icon(IntPtr handle, bool takeOwnership);
    public Icon(string fileName);
    public Icon(string fileName, Size size);
    public Icon(string fileName, int width, int height);
    public Icon(Icon original, Size size);
    public Icon(Icon original, int width, int height);
    public Icon(Type type, string resource);
    public Icon(Stream stream);
    public Icon(Stream stream, Size size);
    public Icon(Stream stream, int width, int height);
    private Icon(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    public static Icon ExtractAssociatedIcon(string filePath);
    private static Icon ExtractAssociatedIcon(string filePath, int index);
    public IntPtr get_Handle();
    public int get_Height();
    public Size get_Size();
    public int get_Width();
    public sealed virtual object Clone();
    internal void DestroyHandle();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void DrawIcon(IntPtr dc, Rectangle imageRect, Rectangle targetRect, bool stretch);
    private static IntPtr SaveClipRgn(IntPtr hDC);
    internal void Draw(Graphics graphics, int x, int y);
    internal void Draw(Graphics graphics, Rectangle targetRect);
    internal void DrawUnstretched(Graphics graphics, Rectangle targetRect);
    protected virtual override void Finalize();
    public static Icon FromHandle(IntPtr handle);
    private void Initialize(int width, int height);
    public void Save(Stream outputStream);
    private void CopyBitmapData(BitmapData sourceData, BitmapData targetData);
    private static bool BitmapHasAlpha(BitmapData bmpData);
    public Bitmap ToBitmap();
    private Bitmap BmpFrame();
    private Bitmap PngFrame();
    private bool HasPngSignature();
    public virtual string ToString();
    internal static IPicture OleCreatePictureIndirect(PICTDESC pictdesc, Guid& refiid, bool fOwn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.IconConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public interface System.Drawing.IDeviceContext {
    public abstract virtual IntPtr GetHdc();
    public abstract virtual void ReleaseHdc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorAttribute("System.Drawing.Design.ImageEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ImmutableObjectAttribute("True")]
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("System.Drawing.ImageConverter")]
public abstract class System.Drawing.Image : MarshalByRefObject {
    internal IntPtr nativeImage;
    private object _userData;
    private Byte[] _rawData;
    [NullableAttribute("2")]
[LocalizableAttribute("False")]
[DefaultValueAttribute("")]
public object Tag { get; public set; }
    public SizeF PhysicalDimension { get; }
    public Size Size { get; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Width { get; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Height { get; }
    public float HorizontalResolution { get; }
    public float VerticalResolution { get; }
    [BrowsableAttribute("False")]
public int Flags { get; }
    public ImageFormat RawFormat { get; }
    public PixelFormat PixelFormat { get; }
    [BrowsableAttribute("False")]
public Guid[] FrameDimensionsList { get; }
    [BrowsableAttribute("False")]
public ColorPalette Palette { get; public set; }
    [BrowsableAttribute("False")]
public Int32[] PropertyIdList { get; }
    [BrowsableAttribute("False")]
public PropertyItem[] PropertyItems { get; }
    private protected Image(SerializationInfo info, StreamingContext context);
    internal Image(IntPtr nativeImage);
    [NullableContextAttribute("2")]
public object get_Tag();
    [NullableContextAttribute("2")]
public void set_Tag(object value);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    public static Image FromFile(string filename);
    public static Image FromFile(string filename, bool useEmbeddedColorManagement);
    public static Image FromStream(Stream stream);
    public static Image FromStream(Stream stream, bool useEmbeddedColorManagement);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public void Save(string filename);
    private static void ThrowIfDirectoryDoesntExist(string filename);
    public SizeF get_PhysicalDimension();
    public Size get_Size();
    public int get_Width();
    public int get_Height();
    public float get_HorizontalResolution();
    public float get_VerticalResolution();
    public int get_Flags();
    public ImageFormat get_RawFormat();
    public PixelFormat get_PixelFormat();
    public int GetFrameCount(FrameDimension dimension);
    public int SelectActiveFrame(FrameDimension dimension, int frameIndex);
    public void RotateFlip(RotateFlipType rotateFlipType);
    public void RemovePropertyItem(int propid);
    [NullableContextAttribute("2")]
public EncoderParameters GetEncoderParameterList(Guid encoder);
    public static Bitmap FromHbitmap(IntPtr hbitmap);
    public static Bitmap FromHbitmap(IntPtr hbitmap, IntPtr hpalette);
    public static bool IsExtendedPixelFormat(PixelFormat pixfmt);
    public static bool IsCanonicalPixelFormat(PixelFormat pixfmt);
    internal void SetNativeImage(IntPtr handle);
    public Guid[] get_FrameDimensionsList();
    public static int GetPixelFormatSize(PixelFormat pixfmt);
    public static bool IsAlphaPixelFormat(PixelFormat pixfmt);
    internal static Image CreateImageObject(IntPtr nativeImage);
    internal static void EnsureSave(Image image, string filename, Stream dataStream);
    public static Image FromStream(Stream stream, bool useEmbeddedColorManagement, bool validateImageData);
    private IntPtr InitializeFromStream(Stream stream);
    public sealed virtual object Clone();
    protected virtual void Dispose(bool disposing);
    public void Save(string filename, ImageFormat format);
    public void Save(string filename, ImageCodecInfo encoder, EncoderParameters encoderParams);
    private void Save(MemoryStream stream);
    public void Save(Stream stream, ImageFormat format);
    public void Save(Stream stream, ImageCodecInfo encoder, EncoderParameters encoderParams);
    [NullableContextAttribute("2")]
public void SaveAdd(EncoderParameters encoderParams);
    public void SaveAdd(Image image, EncoderParameters encoderParams);
    public RectangleF GetBounds(GraphicsUnit& pageUnit);
    public ColorPalette get_Palette();
    public void set_Palette(ColorPalette value);
    public Image GetThumbnailImage(int thumbWidth, int thumbHeight, GetThumbnailImageAbort callback, IntPtr callbackData);
    public Int32[] get_PropertyIdList();
    [NullableContextAttribute("2")]
public PropertyItem GetPropertyItem(int propid);
    public void SetPropertyItem(PropertyItem propitem);
    public PropertyItem[] get_PropertyItems();
    internal static void ValidateImage(IntPtr image);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.ImageAnimator : object {
    private static List`1<ImageInfo> s_imageInfoList;
    private static bool s_anyFrameDirty;
    private static Thread s_animationThread;
    private static ReaderWriterLock s_rwImgListLock;
    [ThreadStaticAttribute]
private static int t_threadWriterLockWaitCount;
    private static ImageAnimator();
    public static void UpdateFrames(Image image);
    public static void UpdateFrames();
    public static void Animate(Image image, EventHandler onFrameChangedHandler);
    [NullableContextAttribute("2")]
public static bool CanAnimate(Image image);
    public static void StopAnimate(Image image, EventHandler onFrameChangedHandler);
    private static void AnimateImages50ms();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.ImageConverter : TypeConverter {
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> PBrush { get; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> BMBytes { get; }
    private static ReadOnlySpan`1<byte> get_PBrush();
    private static ReadOnlySpan`1<byte> get_BMBytes();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    [NullableContextAttribute("1")]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private static ImageCodecInfo FindEncoder(ImageFormat imageformat);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    private Stream GetBitmapStream(ReadOnlySpan`1<byte> rawData);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.ImageFormatConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    [NullableContextAttribute("1")]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [NullableContextAttribute("1")]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal enum System.Drawing.ImageType : Enum {
    public int value__;
    public static ImageType Unknown;
    public static ImageType Bitmap;
    public static ImageType Metafile;
}
public class System.Drawing.Imaging.BitmapData : object {
    private int _width;
    private int _height;
    private int _stride;
    private PixelFormat _pixelFormat;
    private IntPtr _scan0;
    private int _reserved;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int Stride { get; public set; }
    public PixelFormat PixelFormat { get; public set; }
    public IntPtr Scan0 { get; public set; }
    public int Reserved { get; public set; }
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public int get_Stride();
    public void set_Stride(int value);
    public PixelFormat get_PixelFormat();
    public void set_PixelFormat(PixelFormat value);
    public IntPtr get_Scan0();
    public void set_Scan0(IntPtr value);
    public int get_Reserved();
    public void set_Reserved(int value);
}
public enum System.Drawing.Imaging.ColorAdjustType : Enum {
    public int value__;
    public static ColorAdjustType Default;
    public static ColorAdjustType Bitmap;
    public static ColorAdjustType Brush;
    public static ColorAdjustType Pen;
    public static ColorAdjustType Text;
    public static ColorAdjustType Count;
    public static ColorAdjustType Any;
}
public enum System.Drawing.Imaging.ColorChannelFlag : Enum {
    public int value__;
    public static ColorChannelFlag ColorChannelC;
    public static ColorChannelFlag ColorChannelM;
    public static ColorChannelFlag ColorChannelY;
    public static ColorChannelFlag ColorChannelK;
    public static ColorChannelFlag ColorChannelLast;
}
public class System.Drawing.Imaging.ColorMap : object {
    private Color _oldColor;
    private Color _newColor;
    public Color OldColor { get; public set; }
    public Color NewColor { get; public set; }
    public Color get_OldColor();
    public void set_OldColor(Color value);
    public Color get_NewColor();
    public void set_NewColor(Color value);
}
public enum System.Drawing.Imaging.ColorMapType : Enum {
    public int value__;
    public static ColorMapType Default;
    public static ColorMapType Brush;
}
[DefaultMemberAttribute("Item")]
public class System.Drawing.Imaging.ColorMatrix : object {
    private float _matrix00;
    private float _matrix01;
    private float _matrix02;
    private float _matrix03;
    private float _matrix04;
    private float _matrix10;
    private float _matrix11;
    private float _matrix12;
    private float _matrix13;
    private float _matrix14;
    private float _matrix20;
    private float _matrix21;
    private float _matrix22;
    private float _matrix23;
    private float _matrix24;
    private float _matrix30;
    private float _matrix31;
    private float _matrix32;
    private float _matrix33;
    private float _matrix34;
    private float _matrix40;
    private float _matrix41;
    private float _matrix42;
    private float _matrix43;
    private float _matrix44;
    public float Matrix00 { get; public set; }
    public float Matrix01 { get; public set; }
    public float Matrix02 { get; public set; }
    public float Matrix03 { get; public set; }
    public float Matrix04 { get; public set; }
    public float Matrix10 { get; public set; }
    public float Matrix11 { get; public set; }
    public float Matrix12 { get; public set; }
    public float Matrix13 { get; public set; }
    public float Matrix14 { get; public set; }
    public float Matrix20 { get; public set; }
    public float Matrix21 { get; public set; }
    public float Matrix22 { get; public set; }
    public float Matrix23 { get; public set; }
    public float Matrix24 { get; public set; }
    public float Matrix30 { get; public set; }
    public float Matrix31 { get; public set; }
    public float Matrix32 { get; public set; }
    public float Matrix33 { get; public set; }
    public float Matrix34 { get; public set; }
    public float Matrix40 { get; public set; }
    public float Matrix41 { get; public set; }
    public float Matrix42 { get; public set; }
    public float Matrix43 { get; public set; }
    public float Matrix44 { get; public set; }
    public float Item { get; public set; }
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public ColorMatrix(Single[][] newColorMatrix);
    public float get_Matrix00();
    public void set_Matrix00(float value);
    public float get_Matrix01();
    public void set_Matrix01(float value);
    public float get_Matrix02();
    public void set_Matrix02(float value);
    public float get_Matrix03();
    public void set_Matrix03(float value);
    public float get_Matrix04();
    public void set_Matrix04(float value);
    public float get_Matrix10();
    public void set_Matrix10(float value);
    public float get_Matrix11();
    public void set_Matrix11(float value);
    public float get_Matrix12();
    public void set_Matrix12(float value);
    public float get_Matrix13();
    public void set_Matrix13(float value);
    public float get_Matrix14();
    public void set_Matrix14(float value);
    public float get_Matrix20();
    public void set_Matrix20(float value);
    public float get_Matrix21();
    public void set_Matrix21(float value);
    public float get_Matrix22();
    public void set_Matrix22(float value);
    public float get_Matrix23();
    public void set_Matrix23(float value);
    public float get_Matrix24();
    public void set_Matrix24(float value);
    public float get_Matrix30();
    public void set_Matrix30(float value);
    public float get_Matrix31();
    public void set_Matrix31(float value);
    public float get_Matrix32();
    public void set_Matrix32(float value);
    public float get_Matrix33();
    public void set_Matrix33(float value);
    public float get_Matrix34();
    public void set_Matrix34(float value);
    public float get_Matrix40();
    public void set_Matrix40(float value);
    public float get_Matrix41();
    public void set_Matrix41(float value);
    public float get_Matrix42();
    public void set_Matrix42(float value);
    public float get_Matrix43();
    public void set_Matrix43(float value);
    public float get_Matrix44();
    public void set_Matrix44(float value);
    internal void SetMatrix(Single[][] newColorMatrix);
    internal Single[][] GetMatrix();
    public float get_Item(int row, int column);
    public void set_Item(int row, int column, float value);
}
public enum System.Drawing.Imaging.ColorMatrixFlag : Enum {
    public int value__;
    public static ColorMatrixFlag Default;
    public static ColorMatrixFlag SkipGrays;
    public static ColorMatrixFlag AltGrays;
}
public enum System.Drawing.Imaging.ColorMode : Enum {
    public int value__;
    public static ColorMode Argb32Mode;
    public static ColorMode Argb64Mode;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.ColorPalette : object {
    private int _flags;
    private Color[] _entries;
    public int Flags { get; }
    public Color[] Entries { get; }
    internal ColorPalette(int count);
    public int get_Flags();
    public Color[] get_Entries();
    internal void ConvertFromMemory(IntPtr memory);
    internal IntPtr ConvertToMemory();
}
internal enum System.Drawing.Imaging.EmfPlusFlags : Enum {
    public int value__;
    public static EmfPlusFlags Display;
    public static EmfPlusFlags NonDualGdi;
}
public enum System.Drawing.Imaging.EmfPlusRecordType : Enum {
    public int value__;
    public static EmfPlusRecordType WmfRecordBase;
    public static EmfPlusRecordType WmfSetBkColor;
    public static EmfPlusRecordType WmfSetBkMode;
    public static EmfPlusRecordType WmfSetMapMode;
    public static EmfPlusRecordType WmfSetROP2;
    public static EmfPlusRecordType WmfSetRelAbs;
    public static EmfPlusRecordType WmfSetPolyFillMode;
    public static EmfPlusRecordType WmfSetStretchBltMode;
    public static EmfPlusRecordType WmfSetTextCharExtra;
    public static EmfPlusRecordType WmfSetTextColor;
    public static EmfPlusRecordType WmfSetTextJustification;
    public static EmfPlusRecordType WmfSetWindowOrg;
    public static EmfPlusRecordType WmfSetWindowExt;
    public static EmfPlusRecordType WmfSetViewportOrg;
    public static EmfPlusRecordType WmfSetViewportExt;
    public static EmfPlusRecordType WmfOffsetWindowOrg;
    public static EmfPlusRecordType WmfScaleWindowExt;
    public static EmfPlusRecordType WmfOffsetViewportOrg;
    public static EmfPlusRecordType WmfScaleViewportExt;
    public static EmfPlusRecordType WmfLineTo;
    public static EmfPlusRecordType WmfMoveTo;
    public static EmfPlusRecordType WmfExcludeClipRect;
    public static EmfPlusRecordType WmfIntersectClipRect;
    public static EmfPlusRecordType WmfArc;
    public static EmfPlusRecordType WmfEllipse;
    public static EmfPlusRecordType WmfFloodFill;
    public static EmfPlusRecordType WmfPie;
    public static EmfPlusRecordType WmfRectangle;
    public static EmfPlusRecordType WmfRoundRect;
    public static EmfPlusRecordType WmfPatBlt;
    public static EmfPlusRecordType WmfSaveDC;
    public static EmfPlusRecordType WmfSetPixel;
    public static EmfPlusRecordType WmfOffsetCilpRgn;
    public static EmfPlusRecordType WmfTextOut;
    public static EmfPlusRecordType WmfBitBlt;
    public static EmfPlusRecordType WmfStretchBlt;
    public static EmfPlusRecordType WmfPolygon;
    public static EmfPlusRecordType WmfPolyline;
    public static EmfPlusRecordType WmfEscape;
    public static EmfPlusRecordType WmfRestoreDC;
    public static EmfPlusRecordType WmfFillRegion;
    public static EmfPlusRecordType WmfFrameRegion;
    public static EmfPlusRecordType WmfInvertRegion;
    public static EmfPlusRecordType WmfPaintRegion;
    public static EmfPlusRecordType WmfSelectClipRegion;
    public static EmfPlusRecordType WmfSelectObject;
    public static EmfPlusRecordType WmfSetTextAlign;
    public static EmfPlusRecordType WmfChord;
    public static EmfPlusRecordType WmfSetMapperFlags;
    public static EmfPlusRecordType WmfExtTextOut;
    public static EmfPlusRecordType WmfSetDibToDev;
    public static EmfPlusRecordType WmfSelectPalette;
    public static EmfPlusRecordType WmfRealizePalette;
    public static EmfPlusRecordType WmfAnimatePalette;
    public static EmfPlusRecordType WmfSetPalEntries;
    public static EmfPlusRecordType WmfPolyPolygon;
    public static EmfPlusRecordType WmfResizePalette;
    public static EmfPlusRecordType WmfDibBitBlt;
    public static EmfPlusRecordType WmfDibStretchBlt;
    public static EmfPlusRecordType WmfDibCreatePatternBrush;
    public static EmfPlusRecordType WmfStretchDib;
    public static EmfPlusRecordType WmfExtFloodFill;
    public static EmfPlusRecordType WmfSetLayout;
    public static EmfPlusRecordType WmfDeleteObject;
    public static EmfPlusRecordType WmfCreatePalette;
    public static EmfPlusRecordType WmfCreatePatternBrush;
    public static EmfPlusRecordType WmfCreatePenIndirect;
    public static EmfPlusRecordType WmfCreateFontIndirect;
    public static EmfPlusRecordType WmfCreateBrushIndirect;
    public static EmfPlusRecordType WmfCreateRegion;
    public static EmfPlusRecordType EmfHeader;
    public static EmfPlusRecordType EmfPolyBezier;
    public static EmfPlusRecordType EmfPolygon;
    public static EmfPlusRecordType EmfPolyline;
    public static EmfPlusRecordType EmfPolyBezierTo;
    public static EmfPlusRecordType EmfPolyLineTo;
    public static EmfPlusRecordType EmfPolyPolyline;
    public static EmfPlusRecordType EmfPolyPolygon;
    public static EmfPlusRecordType EmfSetWindowExtEx;
    public static EmfPlusRecordType EmfSetWindowOrgEx;
    public static EmfPlusRecordType EmfSetViewportExtEx;
    public static EmfPlusRecordType EmfSetViewportOrgEx;
    public static EmfPlusRecordType EmfSetBrushOrgEx;
    public static EmfPlusRecordType EmfEof;
    public static EmfPlusRecordType EmfSetPixelV;
    public static EmfPlusRecordType EmfSetMapperFlags;
    public static EmfPlusRecordType EmfSetMapMode;
    public static EmfPlusRecordType EmfSetBkMode;
    public static EmfPlusRecordType EmfSetPolyFillMode;
    public static EmfPlusRecordType EmfSetROP2;
    public static EmfPlusRecordType EmfSetStretchBltMode;
    public static EmfPlusRecordType EmfSetTextAlign;
    public static EmfPlusRecordType EmfSetColorAdjustment;
    public static EmfPlusRecordType EmfSetTextColor;
    public static EmfPlusRecordType EmfSetBkColor;
    public static EmfPlusRecordType EmfOffsetClipRgn;
    public static EmfPlusRecordType EmfMoveToEx;
    public static EmfPlusRecordType EmfSetMetaRgn;
    public static EmfPlusRecordType EmfExcludeClipRect;
    public static EmfPlusRecordType EmfIntersectClipRect;
    public static EmfPlusRecordType EmfScaleViewportExtEx;
    public static EmfPlusRecordType EmfScaleWindowExtEx;
    public static EmfPlusRecordType EmfSaveDC;
    public static EmfPlusRecordType EmfRestoreDC;
    public static EmfPlusRecordType EmfSetWorldTransform;
    public static EmfPlusRecordType EmfModifyWorldTransform;
    public static EmfPlusRecordType EmfSelectObject;
    public static EmfPlusRecordType EmfCreatePen;
    public static EmfPlusRecordType EmfCreateBrushIndirect;
    public static EmfPlusRecordType EmfDeleteObject;
    public static EmfPlusRecordType EmfAngleArc;
    public static EmfPlusRecordType EmfEllipse;
    public static EmfPlusRecordType EmfRectangle;
    public static EmfPlusRecordType EmfRoundRect;
    public static EmfPlusRecordType EmfRoundArc;
    public static EmfPlusRecordType EmfChord;
    public static EmfPlusRecordType EmfPie;
    public static EmfPlusRecordType EmfSelectPalette;
    public static EmfPlusRecordType EmfCreatePalette;
    public static EmfPlusRecordType EmfSetPaletteEntries;
    public static EmfPlusRecordType EmfResizePalette;
    public static EmfPlusRecordType EmfRealizePalette;
    public static EmfPlusRecordType EmfExtFloodFill;
    public static EmfPlusRecordType EmfLineTo;
    public static EmfPlusRecordType EmfArcTo;
    public static EmfPlusRecordType EmfPolyDraw;
    public static EmfPlusRecordType EmfSetArcDirection;
    public static EmfPlusRecordType EmfSetMiterLimit;
    public static EmfPlusRecordType EmfBeginPath;
    public static EmfPlusRecordType EmfEndPath;
    public static EmfPlusRecordType EmfCloseFigure;
    public static EmfPlusRecordType EmfFillPath;
    public static EmfPlusRecordType EmfStrokeAndFillPath;
    public static EmfPlusRecordType EmfStrokePath;
    public static EmfPlusRecordType EmfFlattenPath;
    public static EmfPlusRecordType EmfWidenPath;
    public static EmfPlusRecordType EmfSelectClipPath;
    public static EmfPlusRecordType EmfAbortPath;
    public static EmfPlusRecordType EmfReserved069;
    public static EmfPlusRecordType EmfGdiComment;
    public static EmfPlusRecordType EmfFillRgn;
    public static EmfPlusRecordType EmfFrameRgn;
    public static EmfPlusRecordType EmfInvertRgn;
    public static EmfPlusRecordType EmfPaintRgn;
    public static EmfPlusRecordType EmfExtSelectClipRgn;
    public static EmfPlusRecordType EmfBitBlt;
    public static EmfPlusRecordType EmfStretchBlt;
    public static EmfPlusRecordType EmfMaskBlt;
    public static EmfPlusRecordType EmfPlgBlt;
    public static EmfPlusRecordType EmfSetDIBitsToDevice;
    public static EmfPlusRecordType EmfStretchDIBits;
    public static EmfPlusRecordType EmfExtCreateFontIndirect;
    public static EmfPlusRecordType EmfExtTextOutA;
    public static EmfPlusRecordType EmfExtTextOutW;
    public static EmfPlusRecordType EmfPolyBezier16;
    public static EmfPlusRecordType EmfPolygon16;
    public static EmfPlusRecordType EmfPolyline16;
    public static EmfPlusRecordType EmfPolyBezierTo16;
    public static EmfPlusRecordType EmfPolylineTo16;
    public static EmfPlusRecordType EmfPolyPolyline16;
    public static EmfPlusRecordType EmfPolyPolygon16;
    public static EmfPlusRecordType EmfPolyDraw16;
    public static EmfPlusRecordType EmfCreateMonoBrush;
    public static EmfPlusRecordType EmfCreateDibPatternBrushPt;
    public static EmfPlusRecordType EmfExtCreatePen;
    public static EmfPlusRecordType EmfPolyTextOutA;
    public static EmfPlusRecordType EmfPolyTextOutW;
    public static EmfPlusRecordType EmfSetIcmMode;
    public static EmfPlusRecordType EmfCreateColorSpace;
    public static EmfPlusRecordType EmfSetColorSpace;
    public static EmfPlusRecordType EmfDeleteColorSpace;
    public static EmfPlusRecordType EmfGlsRecord;
    public static EmfPlusRecordType EmfGlsBoundedRecord;
    public static EmfPlusRecordType EmfPixelFormat;
    public static EmfPlusRecordType EmfDrawEscape;
    public static EmfPlusRecordType EmfExtEscape;
    public static EmfPlusRecordType EmfStartDoc;
    public static EmfPlusRecordType EmfSmallTextOut;
    public static EmfPlusRecordType EmfForceUfiMapping;
    public static EmfPlusRecordType EmfNamedEscpae;
    public static EmfPlusRecordType EmfColorCorrectPalette;
    public static EmfPlusRecordType EmfSetIcmProfileA;
    public static EmfPlusRecordType EmfSetIcmProfileW;
    public static EmfPlusRecordType EmfAlphaBlend;
    public static EmfPlusRecordType EmfSetLayout;
    public static EmfPlusRecordType EmfTransparentBlt;
    public static EmfPlusRecordType EmfReserved117;
    public static EmfPlusRecordType EmfGradientFill;
    public static EmfPlusRecordType EmfSetLinkedUfis;
    public static EmfPlusRecordType EmfSetTextJustification;
    public static EmfPlusRecordType EmfColorMatchToTargetW;
    public static EmfPlusRecordType EmfCreateColorSpaceW;
    public static EmfPlusRecordType EmfMax;
    public static EmfPlusRecordType EmfMin;
    public static EmfPlusRecordType EmfPlusRecordBase;
    public static EmfPlusRecordType Invalid;
    public static EmfPlusRecordType Header;
    public static EmfPlusRecordType EndOfFile;
    public static EmfPlusRecordType Comment;
    public static EmfPlusRecordType GetDC;
    public static EmfPlusRecordType MultiFormatStart;
    public static EmfPlusRecordType MultiFormatSection;
    public static EmfPlusRecordType MultiFormatEnd;
    public static EmfPlusRecordType Object;
    public static EmfPlusRecordType Clear;
    public static EmfPlusRecordType FillRects;
    public static EmfPlusRecordType DrawRects;
    public static EmfPlusRecordType FillPolygon;
    public static EmfPlusRecordType DrawLines;
    public static EmfPlusRecordType FillEllipse;
    public static EmfPlusRecordType DrawEllipse;
    public static EmfPlusRecordType FillPie;
    public static EmfPlusRecordType DrawPie;
    public static EmfPlusRecordType DrawArc;
    public static EmfPlusRecordType FillRegion;
    public static EmfPlusRecordType FillPath;
    public static EmfPlusRecordType DrawPath;
    public static EmfPlusRecordType FillClosedCurve;
    public static EmfPlusRecordType DrawClosedCurve;
    public static EmfPlusRecordType DrawCurve;
    public static EmfPlusRecordType DrawBeziers;
    public static EmfPlusRecordType DrawImage;
    public static EmfPlusRecordType DrawImagePoints;
    public static EmfPlusRecordType DrawString;
    public static EmfPlusRecordType SetRenderingOrigin;
    public static EmfPlusRecordType SetAntiAliasMode;
    public static EmfPlusRecordType SetTextRenderingHint;
    public static EmfPlusRecordType SetTextContrast;
    public static EmfPlusRecordType SetInterpolationMode;
    public static EmfPlusRecordType SetPixelOffsetMode;
    public static EmfPlusRecordType SetCompositingMode;
    public static EmfPlusRecordType SetCompositingQuality;
    public static EmfPlusRecordType Save;
    public static EmfPlusRecordType Restore;
    public static EmfPlusRecordType BeginContainer;
    public static EmfPlusRecordType BeginContainerNoParams;
    public static EmfPlusRecordType EndContainer;
    public static EmfPlusRecordType SetWorldTransform;
    public static EmfPlusRecordType ResetWorldTransform;
    public static EmfPlusRecordType MultiplyWorldTransform;
    public static EmfPlusRecordType TranslateWorldTransform;
    public static EmfPlusRecordType ScaleWorldTransform;
    public static EmfPlusRecordType RotateWorldTransform;
    public static EmfPlusRecordType SetPageTransform;
    public static EmfPlusRecordType ResetClip;
    public static EmfPlusRecordType SetClipRect;
    public static EmfPlusRecordType SetClipPath;
    public static EmfPlusRecordType SetClipRegion;
    public static EmfPlusRecordType OffsetClip;
    public static EmfPlusRecordType DrawDriverString;
    public static EmfPlusRecordType Total;
    public static EmfPlusRecordType Max;
    public static EmfPlusRecordType Min;
}
public enum System.Drawing.Imaging.EmfType : Enum {
    public int value__;
    public static EmfType EmfOnly;
    public static EmfType EmfPlusOnly;
    public static EmfType EmfPlusDual;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.Encoder : object {
    public static Encoder Compression;
    public static Encoder ColorDepth;
    public static Encoder ScanMethod;
    public static Encoder Version;
    public static Encoder RenderMethod;
    public static Encoder Quality;
    public static Encoder Transformation;
    public static Encoder LuminanceTable;
    public static Encoder ChrominanceTable;
    public static Encoder SaveFlag;
    public static Encoder ColorSpace;
    public static Encoder ImageItems;
    public static Encoder SaveAsCmyk;
    private Guid _guid;
    public Guid Guid { get; }
    public Encoder(Guid guid);
    private static Encoder();
    public Guid get_Guid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.EncoderParameter : object {
    private Guid _parameterGuid;
    private int _numberOfValues;
    private EncoderParameterValueType _parameterValueType;
    private IntPtr _parameterValue;
    public Encoder Encoder { get; public set; }
    public EncoderParameterValueType Type { get; }
    public EncoderParameterValueType ValueType { get; }
    public int NumberOfValues { get; }
    public EncoderParameter(Encoder encoder, byte value);
    public EncoderParameter(Encoder encoder, byte value, bool undefined);
    public EncoderParameter(Encoder encoder, short value);
    public EncoderParameter(Encoder encoder, long value);
    public EncoderParameter(Encoder encoder, int numerator, int denominator);
    public EncoderParameter(Encoder encoder, long rangebegin, long rangeend);
    public EncoderParameter(Encoder encoder, int numerator1, int demoninator1, int numerator2, int demoninator2);
    public EncoderParameter(Encoder encoder, string value);
    public EncoderParameter(Encoder encoder, Byte[] value);
    public EncoderParameter(Encoder encoder, Byte[] value, bool undefined);
    public EncoderParameter(Encoder encoder, Int16[] value);
    public EncoderParameter(Encoder encoder, Int64[] value);
    public EncoderParameter(Encoder encoder, Int32[] numerator, Int32[] denominator);
    public EncoderParameter(Encoder encoder, Int64[] rangebegin, Int64[] rangeend);
    public EncoderParameter(Encoder encoder, Int32[] numerator1, Int32[] denominator1, Int32[] numerator2, Int32[] denominator2);
    [ObsoleteAttribute("This constructor has been deprecated. Use EncoderParameter(Encoder encoder, int numberValues, EncoderParameterValueType type, IntPtr value) instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
public EncoderParameter(Encoder encoder, int NumberOfValues, int Type, int Value);
    public EncoderParameter(Encoder encoder, int numberValues, EncoderParameterValueType type, IntPtr value);
    protected virtual override void Finalize();
    public Encoder get_Encoder();
    public void set_Encoder(Encoder value);
    public EncoderParameterValueType get_Type();
    public EncoderParameterValueType get_ValueType();
    public int get_NumberOfValues();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.EncoderParameters : object {
    private EncoderParameter[] _param;
    public EncoderParameter[] Param { get; public set; }
    public EncoderParameters(int count);
    public EncoderParameter[] get_Param();
    public void set_Param(EncoderParameter[] value);
    internal IntPtr ConvertToMemory();
    internal static EncoderParameters ConvertFromMemory(IntPtr memory);
    public sealed virtual void Dispose();
}
public enum System.Drawing.Imaging.EncoderParameterValueType : Enum {
    public int value__;
    public static EncoderParameterValueType ValueTypeByte;
    public static EncoderParameterValueType ValueTypeAscii;
    public static EncoderParameterValueType ValueTypeShort;
    public static EncoderParameterValueType ValueTypeLong;
    public static EncoderParameterValueType ValueTypeRational;
    public static EncoderParameterValueType ValueTypeLongRange;
    public static EncoderParameterValueType ValueTypeUndefined;
    public static EncoderParameterValueType ValueTypeRationalRange;
    public static EncoderParameterValueType ValueTypePointer;
}
public enum System.Drawing.Imaging.EncoderValue : Enum {
    public int value__;
    public static EncoderValue ColorTypeCMYK;
    public static EncoderValue ColorTypeYCCK;
    public static EncoderValue CompressionLZW;
    public static EncoderValue CompressionCCITT3;
    public static EncoderValue CompressionCCITT4;
    public static EncoderValue CompressionRle;
    public static EncoderValue CompressionNone;
    public static EncoderValue ScanMethodInterlaced;
    public static EncoderValue ScanMethodNonInterlaced;
    public static EncoderValue VersionGif87;
    public static EncoderValue VersionGif89;
    public static EncoderValue RenderProgressive;
    public static EncoderValue RenderNonProgressive;
    public static EncoderValue TransformRotate90;
    public static EncoderValue TransformRotate180;
    public static EncoderValue TransformRotate270;
    public static EncoderValue TransformFlipHorizontal;
    public static EncoderValue TransformFlipVertical;
    public static EncoderValue MultiFrame;
    public static EncoderValue LastFrame;
    public static EncoderValue Flush;
    public static EncoderValue FrameDimensionTime;
    public static EncoderValue FrameDimensionResolution;
    public static EncoderValue FrameDimensionPage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.FrameDimension : object {
    private static FrameDimension s_time;
    private static FrameDimension s_resolution;
    private static FrameDimension s_page;
    private Guid _guid;
    public Guid Guid { get; }
    public static FrameDimension Time { get; }
    public static FrameDimension Resolution { get; }
    public static FrameDimension Page { get; }
    public FrameDimension(Guid guid);
    private static FrameDimension();
    public Guid get_Guid();
    public static FrameDimension get_Time();
    public static FrameDimension get_Resolution();
    public static FrameDimension get_Page();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.ImageAttributes : object {
    internal IntPtr nativeImageAttributes;
    internal ImageAttributes(IntPtr newNativeImageAttributes);
    internal void SetNativeImageAttributes(IntPtr handle);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual object Clone();
    public void SetColorMatrix(ColorMatrix newColorMatrix);
    public void SetColorMatrix(ColorMatrix newColorMatrix, ColorMatrixFlag flags);
    public void SetColorMatrix(ColorMatrix newColorMatrix, ColorMatrixFlag mode, ColorAdjustType type);
    public void ClearColorMatrix();
    public void ClearColorMatrix(ColorAdjustType type);
    public void SetColorMatrices(ColorMatrix newColorMatrix, ColorMatrix grayMatrix);
    public void SetColorMatrices(ColorMatrix newColorMatrix, ColorMatrix grayMatrix, ColorMatrixFlag flags);
    public void SetColorMatrices(ColorMatrix newColorMatrix, ColorMatrix grayMatrix, ColorMatrixFlag mode, ColorAdjustType type);
    public void SetThreshold(float threshold);
    public void SetThreshold(float threshold, ColorAdjustType type);
    public void ClearThreshold();
    public void ClearThreshold(ColorAdjustType type);
    public void SetGamma(float gamma);
    public void SetGamma(float gamma, ColorAdjustType type);
    public void ClearGamma();
    public void ClearGamma(ColorAdjustType type);
    public void SetNoOp();
    public void SetNoOp(ColorAdjustType type);
    public void ClearNoOp();
    public void ClearNoOp(ColorAdjustType type);
    public void SetColorKey(Color colorLow, Color colorHigh);
    public void SetColorKey(Color colorLow, Color colorHigh, ColorAdjustType type);
    public void ClearColorKey();
    public void ClearColorKey(ColorAdjustType type);
    public void SetOutputChannel(ColorChannelFlag flags);
    public void SetOutputChannel(ColorChannelFlag flags, ColorAdjustType type);
    public void ClearOutputChannel();
    public void ClearOutputChannel(ColorAdjustType type);
    public void SetOutputChannelColorProfile(string colorProfileFilename);
    public void SetOutputChannelColorProfile(string colorProfileFilename, ColorAdjustType type);
    public void ClearOutputChannelColorProfile();
    public void ClearOutputChannelColorProfile(ColorAdjustType type);
    public void SetRemapTable(ColorMap[] map);
    public void SetRemapTable(ColorMap[] map, ColorAdjustType type);
    public void ClearRemapTable();
    public void ClearRemapTable(ColorAdjustType type);
    public void SetBrushRemapTable(ColorMap[] map);
    public void ClearBrushRemapTable();
    public void SetWrapMode(WrapMode mode);
    public void SetWrapMode(WrapMode mode, Color color);
    public void SetWrapMode(WrapMode mode, Color color, bool clamp);
    public void GetAdjustedPalette(ColorPalette palette, ColorAdjustType type);
}
[FlagsAttribute]
public enum System.Drawing.Imaging.ImageCodecFlags : Enum {
    public int value__;
    public static ImageCodecFlags Encoder;
    public static ImageCodecFlags Decoder;
    public static ImageCodecFlags SupportBitmap;
    public static ImageCodecFlags SupportVector;
    public static ImageCodecFlags SeekableEncode;
    public static ImageCodecFlags BlockingDecode;
    public static ImageCodecFlags Builtin;
    public static ImageCodecFlags System;
    public static ImageCodecFlags User;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.ImageCodecInfo : object {
    private Guid _clsid;
    private Guid _formatID;
    private string _codecName;
    private string _dllName;
    private string _formatDescription;
    private string _filenameExtension;
    private string _mimeType;
    private ImageCodecFlags _flags;
    private int _version;
    private Byte[][] _signaturePatterns;
    private Byte[][] _signatureMasks;
    public Guid Clsid { get; public set; }
    public Guid FormatID { get; public set; }
    public string CodecName { get; public set; }
    public string DllName { get; public set; }
    public string FormatDescription { get; public set; }
    public string FilenameExtension { get; public set; }
    public string MimeType { get; public set; }
    public ImageCodecFlags Flags { get; public set; }
    public int Version { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public Byte[][] SignaturePatterns { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public Byte[][] SignatureMasks { get; public set; }
    public Guid get_Clsid();
    public void set_Clsid(Guid value);
    public Guid get_FormatID();
    public void set_FormatID(Guid value);
    public string get_CodecName();
    public void set_CodecName(string value);
    public string get_DllName();
    public void set_DllName(string value);
    public string get_FormatDescription();
    public void set_FormatDescription(string value);
    public string get_FilenameExtension();
    public void set_FilenameExtension(string value);
    public string get_MimeType();
    public void set_MimeType(string value);
    public ImageCodecFlags get_Flags();
    public void set_Flags(ImageCodecFlags value);
    public int get_Version();
    public void set_Version(int value);
    public Byte[][] get_SignaturePatterns();
    public void set_SignaturePatterns(Byte[][] value);
    public Byte[][] get_SignatureMasks();
    public void set_SignatureMasks(Byte[][] value);
    [NullableContextAttribute("1")]
public static ImageCodecInfo[] GetImageDecoders();
    [NullableContextAttribute("1")]
public static ImageCodecInfo[] GetImageEncoders();
    private static ImageCodecInfo[] ConvertFromMemory(IntPtr memoryStart, int numCodecs);
}
internal class System.Drawing.Imaging.ImageCodecInfoPrivate : object {
    public Guid Clsid;
    public Guid FormatID;
    public IntPtr CodecName;
    public IntPtr DllName;
    public IntPtr FormatDescription;
    public IntPtr FilenameExtension;
    public IntPtr MimeType;
    public int Flags;
    public int Version;
    public int SigCount;
    public int SigSize;
    public IntPtr SigPattern;
    public IntPtr SigMask;
}
[FlagsAttribute]
public enum System.Drawing.Imaging.ImageFlags : Enum {
    public int value__;
    public static ImageFlags None;
    public static ImageFlags Scalable;
    public static ImageFlags HasAlpha;
    public static ImageFlags HasTranslucent;
    public static ImageFlags PartiallyScalable;
    public static ImageFlags ColorSpaceRgb;
    public static ImageFlags ColorSpaceCmyk;
    public static ImageFlags ColorSpaceGray;
    public static ImageFlags ColorSpaceYcbcr;
    public static ImageFlags ColorSpaceYcck;
    public static ImageFlags HasRealDpi;
    public static ImageFlags HasRealPixelSize;
    public static ImageFlags ReadOnly;
    public static ImageFlags Caching;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Drawing.ImageFormatConverter")]
public class System.Drawing.Imaging.ImageFormat : object {
    private static ImageFormat s_memoryBMP;
    private static ImageFormat s_bmp;
    private static ImageFormat s_emf;
    private static ImageFormat s_wmf;
    private static ImageFormat s_jpeg;
    private static ImageFormat s_png;
    private static ImageFormat s_gif;
    private static ImageFormat s_tiff;
    private static ImageFormat s_exif;
    private static ImageFormat s_icon;
    private Guid _guid;
    public Guid Guid { get; }
    public static ImageFormat MemoryBmp { get; }
    public static ImageFormat Bmp { get; }
    public static ImageFormat Emf { get; }
    public static ImageFormat Wmf { get; }
    public static ImageFormat Gif { get; }
    public static ImageFormat Jpeg { get; }
    public static ImageFormat Png { get; }
    public static ImageFormat Tiff { get; }
    public static ImageFormat Exif { get; }
    public static ImageFormat Icon { get; }
    public ImageFormat(Guid guid);
    private static ImageFormat();
    public Guid get_Guid();
    public static ImageFormat get_MemoryBmp();
    public static ImageFormat get_Bmp();
    public static ImageFormat get_Emf();
    public static ImageFormat get_Wmf();
    public static ImageFormat get_Gif();
    public static ImageFormat get_Jpeg();
    public static ImageFormat get_Png();
    public static ImageFormat get_Tiff();
    public static ImageFormat get_Exif();
    public static ImageFormat get_Icon();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    internal ImageCodecInfo FindEncoder();
    public virtual string ToString();
}
public enum System.Drawing.Imaging.ImageLockMode : Enum {
    public int value__;
    public static ImageLockMode ReadOnly;
    public static ImageLockMode WriteOnly;
    public static ImageLockMode ReadWrite;
    public static ImageLockMode UserInputBuffer;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorAttribute("System.Drawing.Design.MetafileEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Drawing.Imaging.Metafile : Image {
    private static int MaxPath;
    public Metafile(IntPtr hmetafile, WmfPlaceableFileHeader wmfHeader, bool deleteWmf);
    public Metafile(IntPtr henhmetafile, bool deleteEmf);
    public Metafile(string filename);
    public Metafile(IntPtr referenceHdc, Rectangle frameRect);
    public Metafile(IntPtr referenceHdc, EmfType emfType);
    public Metafile(IntPtr referenceHdc, RectangleF frameRect);
    public Metafile(IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit);
    public Metafile(IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type);
    [NullableContextAttribute("2")]
public Metafile(IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, string description);
    public Metafile(IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit);
    public Metafile(IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type);
    public Metafile(string fileName, IntPtr referenceHdc);
    public Metafile(string fileName, IntPtr referenceHdc, EmfType type);
    public Metafile(string fileName, IntPtr referenceHdc, RectangleF frameRect);
    public Metafile(string fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit);
    public Metafile(string fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type);
    public Metafile(string fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, string desc);
    public Metafile(string fileName, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, string description);
    public Metafile(string fileName, IntPtr referenceHdc, Rectangle frameRect);
    public Metafile(string fileName, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit);
    public Metafile(string fileName, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type);
    public Metafile(string fileName, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, string description);
    public Metafile(Stream stream, IntPtr referenceHdc);
    public Metafile(Stream stream, IntPtr referenceHdc, EmfType type);
    public Metafile(Stream stream, IntPtr referenceHdc, RectangleF frameRect);
    public Metafile(Stream stream, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit);
    public Metafile(Stream stream, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type);
    public Metafile(Stream stream, IntPtr referenceHdc, Rectangle frameRect);
    public Metafile(Stream stream, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit);
    public Metafile(Stream stream, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type);
    private Metafile(SerializationInfo info, StreamingContext context);
    internal Metafile(IntPtr ptr);
    public Metafile(IntPtr hmetafile, WmfPlaceableFileHeader wmfHeader);
    public Metafile(Stream stream);
    [NullableContextAttribute("2")]
public Metafile(IntPtr referenceHdc, EmfType emfType, string description);
    [NullableContextAttribute("2")]
public Metafile(IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type, string desc);
    public Metafile(string fileName, IntPtr referenceHdc, EmfType type, string description);
    public Metafile(string fileName, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type, string description);
    public Metafile(Stream stream, IntPtr referenceHdc, EmfType type, string description);
    public Metafile(Stream stream, IntPtr referenceHdc, RectangleF frameRect, MetafileFrameUnit frameUnit, EmfType type, string description);
    public Metafile(Stream stream, IntPtr referenceHdc, Rectangle frameRect, MetafileFrameUnit frameUnit, EmfType type, string description);
    public void PlayRecord(EmfPlusRecordType recordType, int flags, int dataSize, Byte[] data);
    public static MetafileHeader GetMetafileHeader(IntPtr hmetafile, WmfPlaceableFileHeader wmfHeader);
    public static MetafileHeader GetMetafileHeader(IntPtr henhmetafile);
    public static MetafileHeader GetMetafileHeader(string fileName);
    public static MetafileHeader GetMetafileHeader(Stream stream);
    public MetafileHeader GetMetafileHeader();
    public IntPtr GetHenhmetafile();
}
public enum System.Drawing.Imaging.MetafileFrameUnit : Enum {
    public int value__;
    public static MetafileFrameUnit Pixel;
    public static MetafileFrameUnit Point;
    public static MetafileFrameUnit Inch;
    public static MetafileFrameUnit Document;
    public static MetafileFrameUnit Millimeter;
    public static MetafileFrameUnit GdiCompatible;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.MetafileHeader : object {
    internal MetafileHeaderWmf wmf;
    internal MetafileHeaderEmf emf;
    public MetafileType Type { get; }
    public int MetafileSize { get; }
    public int Version { get; }
    public float DpiX { get; }
    public float DpiY { get; }
    public Rectangle Bounds { get; }
    public MetaHeader WmfHeader { get; }
    public int EmfPlusHeaderSize { get; }
    public int LogicalDpiX { get; }
    public int LogicalDpiY { get; }
    public MetafileType get_Type();
    public int get_MetafileSize();
    public int get_Version();
    public float get_DpiX();
    public float get_DpiY();
    public Rectangle get_Bounds();
    public bool IsWmf();
    public bool IsWmfPlaceable();
    public bool IsEmf();
    public bool IsEmfOrEmfPlus();
    public bool IsEmfPlus();
    public bool IsEmfPlusDual();
    public bool IsEmfPlusOnly();
    public bool IsDisplay();
    public MetaHeader get_WmfHeader();
    public int get_EmfPlusHeaderSize();
    public int get_LogicalDpiX();
    public int get_LogicalDpiY();
}
internal class System.Drawing.Imaging.MetafileHeaderEmf : object {
    public MetafileType type;
    public int size;
    public int version;
    public EmfPlusFlags emfPlusFlags;
    public float dpiX;
    public float dpiY;
    public int X;
    public int Y;
    public int Width;
    public int Height;
    public ENHMETAHEADER EmfHeader;
    public int EmfPlusHeaderSize;
    public int LogicalDpiX;
    public int LogicalDpiY;
}
internal class System.Drawing.Imaging.MetafileHeaderWmf : object {
    public MetafileType type;
    public int size;
    public int version;
    public EmfPlusFlags emfPlusFlags;
    public float dpiX;
    public float dpiY;
    public int X;
    public int Y;
    public int Width;
    public int Height;
    public MetaHeader WmfHeader;
    public int dummy1;
    public int dummy2;
    public int dummy3;
    public int dummy4;
    public int dummy5;
    public int dummy6;
    public int dummy7;
    public int dummy8;
    public int dummy9;
    public int dummy10;
    public int dummy11;
    public int dummy12;
    public int dummy13;
    public int dummy14;
    public int dummy15;
    public int dummy16;
    public int EmfPlusHeaderSize;
    public int LogicalDpiX;
    public int LogicalDpiY;
}
public enum System.Drawing.Imaging.MetafileType : Enum {
    public int value__;
    public static MetafileType Invalid;
    public static MetafileType Wmf;
    public static MetafileType WmfPlaceable;
    public static MetafileType Emf;
    public static MetafileType EmfPlusOnly;
    public static MetafileType EmfPlusDual;
}
public class System.Drawing.Imaging.MetaHeader : object {
    private short _type;
    private short _headerSize;
    private short _version;
    private int _size;
    private short _noObjects;
    private int _maxRecord;
    private short _noParameters;
    public short Type { get; public set; }
    public short HeaderSize { get; public set; }
    public short Version { get; public set; }
    public int Size { get; public set; }
    public short NoObjects { get; public set; }
    public int MaxRecord { get; public set; }
    public short NoParameters { get; public set; }
    public short get_Type();
    public void set_Type(short value);
    public short get_HeaderSize();
    public void set_HeaderSize(short value);
    public short get_Version();
    public void set_Version(short value);
    public int get_Size();
    public void set_Size(int value);
    public short get_NoObjects();
    public void set_NoObjects(short value);
    public int get_MaxRecord();
    public void set_MaxRecord(int value);
    public short get_NoParameters();
    public void set_NoParameters(short value);
}
[FlagsAttribute]
public enum System.Drawing.Imaging.PaletteFlags : Enum {
    public int value__;
    public static PaletteFlags HasAlpha;
    public static PaletteFlags GrayScale;
    public static PaletteFlags Halftone;
}
public enum System.Drawing.Imaging.PixelFormat : Enum {
    public int value__;
    public static PixelFormat Indexed;
    public static PixelFormat Gdi;
    public static PixelFormat Alpha;
    public static PixelFormat PAlpha;
    public static PixelFormat Extended;
    public static PixelFormat Canonical;
    public static PixelFormat Undefined;
    public static PixelFormat DontCare;
    public static PixelFormat Format1bppIndexed;
    public static PixelFormat Format4bppIndexed;
    public static PixelFormat Format8bppIndexed;
    public static PixelFormat Format16bppGrayScale;
    public static PixelFormat Format16bppRgb555;
    public static PixelFormat Format16bppRgb565;
    public static PixelFormat Format16bppArgb1555;
    public static PixelFormat Format24bppRgb;
    public static PixelFormat Format32bppRgb;
    public static PixelFormat Format32bppArgb;
    public static PixelFormat Format32bppPArgb;
    public static PixelFormat Format48bppRgb;
    public static PixelFormat Format64bppArgb;
    public static PixelFormat Format64bppPArgb;
    public static PixelFormat Max;
}
public class System.Drawing.Imaging.PlayRecordCallback : MulticastDelegate {
    public PlayRecordCallback(object object, IntPtr method);
    public virtual void Invoke(EmfPlusRecordType recordType, int flags, int dataSize, IntPtr recordData);
    public virtual IAsyncResult BeginInvoke(EmfPlusRecordType recordType, int flags, int dataSize, IntPtr recordData, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.Imaging.PropertyItem : object {
    private int _id;
    private int _len;
    private short _type;
    private Byte[] _value;
    public int Id { get; public set; }
    public int Len { get; public set; }
    public short Type { get; public set; }
    public Byte[] Value { get; public set; }
    public int get_Id();
    public void set_Id(int value);
    public int get_Len();
    public void set_Len(int value);
    public short get_Type();
    public void set_Type(short value);
    public Byte[] get_Value();
    public void set_Value(Byte[] value);
}
internal class System.Drawing.Imaging.PropertyItemInternal : object {
    public int id;
    public int len;
    public short type;
    public IntPtr value;
    public Byte[] Value { get; }
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal static PropertyItemInternal ConvertFromPropertyItem(PropertyItem propItem);
    internal static PropertyItem[] ConvertFromMemory(IntPtr propdata, int count);
    public Byte[] get_Value();
}
public class System.Drawing.Imaging.WmfPlaceableFileHeader : object {
    private int _key;
    private short _hmf;
    private short _bboxLeft;
    private short _bboxTop;
    private short _bboxRight;
    private short _bboxBottom;
    private short _inch;
    private int _reserved;
    private short _checksum;
    public int Key { get; public set; }
    public short Hmf { get; public set; }
    public short BboxLeft { get; public set; }
    public short BboxTop { get; public set; }
    public short BboxRight { get; public set; }
    public short BboxBottom { get; public set; }
    public short Inch { get; public set; }
    public int Reserved { get; public set; }
    public short Checksum { get; public set; }
    public int get_Key();
    public void set_Key(int value);
    public short get_Hmf();
    public void set_Hmf(short value);
    public short get_BboxLeft();
    public void set_BboxLeft(short value);
    public short get_BboxTop();
    public void set_BboxTop(short value);
    public short get_BboxRight();
    public void set_BboxRight(short value);
    public short get_BboxBottom();
    public void set_BboxBottom(short value);
    public short get_Inch();
    public void set_Inch(short value);
    public int get_Reserved();
    public void set_Reserved(int value);
    public short get_Checksum();
    public void set_Checksum(short value);
}
[FlagsAttribute]
internal enum System.Drawing.Internal.ApplyGraphicsProperties : Enum {
    public int value__;
    public static ApplyGraphicsProperties None;
    public static ApplyGraphicsProperties Clipping;
    public static ApplyGraphicsProperties TranslateTransform;
    public static ApplyGraphicsProperties All;
}
internal class System.Drawing.Internal.DbgUtil : object {
    [ConditionalAttribute("DEBUG")]
public static void AssertFinalization(object obj, bool disposing);
    [ConditionalAttribute("DEBUG")]
public static void AssertWin32(bool expression, string format, Object[] args);
}
internal class System.Drawing.Internal.DeviceContext : MarshalByRefObject {
    private IntPtr _hDC;
    private DeviceContextType _dcType;
    [CompilerGeneratedAttribute]
private EventHandler Disposing;
    private bool _disposed;
    private IntPtr _hWnd;
    private IntPtr _hInitialPen;
    private IntPtr _hInitialBrush;
    private IntPtr _hInitialBmp;
    private IntPtr _hInitialFont;
    private IntPtr _hCurrentPen;
    private IntPtr _hCurrentBrush;
    private IntPtr _hCurrentBmp;
    private IntPtr _hCurrentFont;
    private Stack _contextStack;
    public IntPtr Hdc { get; }
    private DeviceContext(IntPtr hWnd);
    private DeviceContext(IntPtr hDC, DeviceContextType dcType);
    [CompilerGeneratedAttribute]
public void add_Disposing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposing(EventHandler value);
    public IntPtr get_Hdc();
    private void CacheInitialState();
    public static DeviceContext CreateDC(string driverName, string deviceName, string fileName, IntPtr devMode);
    public static DeviceContext CreateIC(string driverName, string deviceName, string fileName, IntPtr devMode);
    public static DeviceContext FromCompatibleDC(IntPtr hdc);
    public static DeviceContext FromHdc(IntPtr hdc);
    public static DeviceContext FromHwnd(IntPtr hwnd);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    internal void Dispose(bool disposing);
    private sealed virtual override IntPtr System.Drawing.IDeviceContext.GetHdc();
    private sealed virtual override void System.Drawing.IDeviceContext.ReleaseHdc();
    public void RestoreHdc();
    public int SaveHdc();
    public void SetClip(WindowsRegion region);
    public void IntersectClip(WindowsRegion wr);
    public void TranslateTransform(int dx, int dy);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Drawing.Internal.DeviceContexts : object {
    [ThreadStaticAttribute]
private static WeakRefCollection t_activeDeviceContexts;
    internal static void AddDeviceContext(DeviceContext dc);
    private static void OnDcDisposing(object sender, EventArgs e);
    internal static void RemoveDeviceContext(DeviceContext dc);
}
internal enum System.Drawing.Internal.DeviceContextType : Enum {
    public int value__;
    public static DeviceContextType Unknown;
    public static DeviceContextType Display;
    public static DeviceContextType NCWindow;
    public static DeviceContextType NamedDevice;
    public static DeviceContextType Information;
    public static DeviceContextType Memory;
    public static DeviceContextType Metafile;
}
internal class System.Drawing.Internal.GpPathData : ValueType {
    public int Count;
    public PointF* Points;
    public Byte* Types;
}
internal class System.Drawing.Internal.GPStream : object {
    private Stream _dataStream;
    private long _virtualPosition;
    internal GPStream(Stream stream, bool makeSeekable);
    private void ActualizeVirtualPosition();
    public sealed virtual IStream Clone();
    public sealed virtual void Commit(UInt32 grfCommitFlags);
    public sealed virtual void CopyTo(IStream pstm, ulong cb, UInt64* pcbRead, UInt64* pcbWritten);
    public sealed virtual void Read(Byte* pv, UInt32 cb, UInt32* pcbRead);
    public sealed virtual void Revert();
    public sealed virtual void Seek(long dlibMove, SeekOrigin dwOrigin, UInt64* plibNewPosition);
    public sealed virtual void SetSize(ulong value);
    public sealed virtual void Stat(STATSTG& pstatstg, STATFLAG grfStatFlag);
    public sealed virtual void Write(Byte* pv, UInt32 cb, UInt32* pcbWritten);
    public sealed virtual HRESULT LockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    public sealed virtual HRESULT UnlockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
}
internal interface System.Drawing.Internal.ISystemColorTracker {
    public abstract virtual void OnSystemColorChanged();
}
internal static class System.Drawing.Internal.SystemColorTracker : object {
    private static int INITIAL_SIZE;
    private static int WARNING_SIZE;
    private static float EXPAND_THRESHOLD;
    private static int EXPAND_FACTOR;
    private static WeakReference[] list;
    private static int count;
    private static bool addedTracker;
    private static object lockObject;
    private static SystemColorTracker();
    internal static void Add(ISystemColorTracker obj);
    private static void CleanOutBrokenLinks();
    private static void GarbageCollectList();
    private static void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
}
internal class System.Drawing.Internal.WindowsGraphics : MarshalByRefObject {
    private DeviceContext _dc;
    private bool _disposeDc;
    private Graphics _graphics;
    public DeviceContext DeviceContext { get; }
    public WindowsGraphics(DeviceContext dc);
    public static WindowsGraphics FromHdc(IntPtr hDc);
    public static WindowsGraphics FromGraphics(Graphics g, ApplyGraphicsProperties properties);
    protected virtual override void Finalize();
    public DeviceContext get_DeviceContext();
    public sealed virtual void Dispose();
    internal void Dispose(bool disposing);
    public sealed virtual IntPtr GetHdc();
    public sealed virtual void ReleaseHdc();
}
internal class System.Drawing.Internal.WindowsRegion : MarshalByRefObject {
    private IntPtr _nativeHandle;
    private bool _ownHandle;
    public IntPtr HRegion { get; }
    public bool IsInfinite { get; }
    public WindowsRegion(Rectangle rect);
    public WindowsRegion(int x, int y, int width, int height);
    public static WindowsRegion FromHregion(IntPtr hRegion, bool takeOwnership);
    public static WindowsRegion FromRegion(Region region, Graphics g);
    public sealed virtual object Clone();
    public RegionType CombineRegion(WindowsRegion region1, WindowsRegion region2, CombineMode mode);
    private void CreateRegion(Rectangle rect);
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
    protected virtual override void Finalize();
    public IntPtr get_HRegion();
    public bool get_IsInfinite();
    public Rectangle ToRectangle();
}
internal class System.Drawing.NativeMethods : object {
    public static int MAX_PATH;
    internal static int SM_REMOTESESSION;
    internal static int DIB_RGB_COLORS;
    internal static int BI_BITFIELDS;
    internal static int BI_RGB;
    internal static int BITMAPINFO_MAX_COLORSIZE;
    internal static HandleRef NullHandleRef { get; }
    internal static HandleRef get_NullHandleRef();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Pen : MarshalByRefObject {
    private IntPtr _nativePen;
    private Color _color;
    private bool _immutable;
    private bool _dashStyleWasOrIsNotSolid;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
internal IntPtr NativePen { get; }
    public float Width { get; public set; }
    public LineCap StartCap { get; public set; }
    public LineCap EndCap { get; public set; }
    public DashCap DashCap { get; public set; }
    public LineJoin LineJoin { get; public set; }
    public float MiterLimit { get; public set; }
    public PenAlignment Alignment { get; public set; }
    public Matrix Transform { get; public set; }
    public PenType PenType { get; }
    public Color Color { get; public set; }
    public Brush Brush { get; public set; }
    public DashStyle DashStyle { get; public set; }
    public float DashOffset { get; public set; }
    public Single[] DashPattern { get; public set; }
    public Single[] CompoundArray { get; public set; }
    public CustomLineCap CustomStartCap { get; public set; }
    public CustomLineCap CustomEndCap { get; public set; }
    private Pen(IntPtr nativePen);
    internal Pen(Color color, bool immutable);
    public Pen(Color color);
    public Pen(Color color, float width);
    public Pen(Brush brush);
    public Pen(Brush brush, float width);
    internal void SetNativePen(IntPtr nativePen);
    internal IntPtr get_NativePen();
    public sealed virtual object Clone();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public float get_Width();
    public void set_Width(float value);
    public void SetLineCap(LineCap startCap, LineCap endCap, DashCap dashCap);
    public LineCap get_StartCap();
    public void set_StartCap(LineCap value);
    public LineCap get_EndCap();
    public void set_EndCap(LineCap value);
    public DashCap get_DashCap();
    public void set_DashCap(DashCap value);
    public LineJoin get_LineJoin();
    public void set_LineJoin(LineJoin value);
    public float get_MiterLimit();
    public void set_MiterLimit(float value);
    public PenAlignment get_Alignment();
    public void set_Alignment(PenAlignment value);
    public Matrix get_Transform();
    public void set_Transform(Matrix value);
    public void ResetTransform();
    public void MultiplyTransform(Matrix matrix);
    public void MultiplyTransform(Matrix matrix, MatrixOrder order);
    public void TranslateTransform(float dx, float dy);
    public void TranslateTransform(float dx, float dy, MatrixOrder order);
    public void ScaleTransform(float sx, float sy);
    public void ScaleTransform(float sx, float sy, MatrixOrder order);
    public void RotateTransform(float angle);
    public void RotateTransform(float angle, MatrixOrder order);
    private void InternalSetColor(Color value);
    public PenType get_PenType();
    public Color get_Color();
    public void set_Color(Color value);
    public Brush get_Brush();
    public void set_Brush(Brush value);
    private IntPtr GetNativeBrush();
    public DashStyle get_DashStyle();
    public void set_DashStyle(DashStyle value);
    private void EnsureValidDashPattern();
    public float get_DashOffset();
    public void set_DashOffset(float value);
    public Single[] get_DashPattern();
    public void set_DashPattern(Single[] value);
    public Single[] get_CompoundArray();
    public void set_CompoundArray(Single[] value);
    private sealed virtual override void System.Drawing.Internal.ISystemColorTracker.OnSystemColorChanged();
    public CustomLineCap get_CustomStartCap();
    public void set_CustomStartCap(CustomLineCap value);
    public CustomLineCap get_CustomEndCap();
    public void set_CustomEndCap(CustomLineCap value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Drawing.Pens : object {
    private static object s_transparentKey;
    private static object s_aliceBlueKey;
    private static object s_antiqueWhiteKey;
    private static object s_aquaKey;
    private static object s_aquamarineKey;
    private static object s_azureKey;
    private static object s_beigeKey;
    private static object s_bisqueKey;
    private static object s_blackKey;
    private static object s_blanchedAlmondKey;
    private static object s_blueKey;
    private static object s_blueVioletKey;
    private static object s_brownKey;
    private static object s_burlyWoodKey;
    private static object s_cadetBlueKey;
    private static object s_chartreuseKey;
    private static object s_chocolateKey;
    private static object s_coralKey;
    private static object s_cornflowerBlueKey;
    private static object s_cornsilkKey;
    private static object s_crimsonKey;
    private static object s_cyanKey;
    private static object s_darkBlueKey;
    private static object s_darkCyanKey;
    private static object s_darkGoldenrodKey;
    private static object s_darkGrayKey;
    private static object s_darkGreenKey;
    private static object s_darkKhakiKey;
    private static object s_darkMagentaKey;
    private static object s_darkOliveGreenKey;
    private static object s_darkOrangeKey;
    private static object s_darkOrchidKey;
    private static object s_darkRedKey;
    private static object s_darkSalmonKey;
    private static object s_darkSeaGreenKey;
    private static object s_darkSlateBlueKey;
    private static object s_darkSlateGrayKey;
    private static object s_darkTurquoiseKey;
    private static object s_darkVioletKey;
    private static object s_deepPinkKey;
    private static object s_deepSkyBlueKey;
    private static object s_dimGrayKey;
    private static object s_dodgerBlueKey;
    private static object s_firebrickKey;
    private static object s_floralWhiteKey;
    private static object s_forestGreenKey;
    private static object s_fuchsiaKey;
    private static object s_gainsboroKey;
    private static object s_ghostWhiteKey;
    private static object s_goldKey;
    private static object s_goldenrodKey;
    private static object s_grayKey;
    private static object s_greenKey;
    private static object s_greenYellowKey;
    private static object s_honeydewKey;
    private static object s_hotPinkKey;
    private static object s_indianRedKey;
    private static object s_indigoKey;
    private static object s_ivoryKey;
    private static object s_khakiKey;
    private static object s_lavenderKey;
    private static object s_lavenderBlushKey;
    private static object s_lawnGreenKey;
    private static object s_lemonChiffonKey;
    private static object s_lightBlueKey;
    private static object s_lightCoralKey;
    private static object s_lightCyanKey;
    private static object s_lightGoldenrodYellowKey;
    private static object s_lightGreenKey;
    private static object s_lightGrayKey;
    private static object s_lightPinkKey;
    private static object s_lightSalmonKey;
    private static object s_lightSeaGreenKey;
    private static object s_lightSkyBlueKey;
    private static object s_lightSlateGrayKey;
    private static object s_lightSteelBlueKey;
    private static object s_lightYellowKey;
    private static object s_limeKey;
    private static object s_limeGreenKey;
    private static object s_linenKey;
    private static object s_magentaKey;
    private static object s_maroonKey;
    private static object s_mediumAquamarineKey;
    private static object s_mediumBlueKey;
    private static object s_mediumOrchidKey;
    private static object s_mediumPurpleKey;
    private static object s_mediumSeaGreenKey;
    private static object s_mediumSlateBlueKey;
    private static object s_mediumSpringGreenKey;
    private static object s_mediumTurquoiseKey;
    private static object s_mediumVioletRedKey;
    private static object s_midnightBlueKey;
    private static object s_mintCreamKey;
    private static object s_mistyRoseKey;
    private static object s_moccasinKey;
    private static object s_navajoWhiteKey;
    private static object s_navyKey;
    private static object s_oldLaceKey;
    private static object s_oliveKey;
    private static object s_oliveDrabKey;
    private static object s_orangeKey;
    private static object s_orangeRedKey;
    private static object s_orchidKey;
    private static object s_paleGoldenrodKey;
    private static object s_paleGreenKey;
    private static object s_paleTurquoiseKey;
    private static object s_paleVioletRedKey;
    private static object s_papayaWhipKey;
    private static object s_peachPuffKey;
    private static object s_peruKey;
    private static object s_pinkKey;
    private static object s_plumKey;
    private static object s_powderBlueKey;
    private static object s_purpleKey;
    private static object s_redKey;
    private static object s_rosyBrownKey;
    private static object s_royalBlueKey;
    private static object s_saddleBrownKey;
    private static object s_salmonKey;
    private static object s_sandyBrownKey;
    private static object s_seaGreenKey;
    private static object s_seaShellKey;
    private static object s_siennaKey;
    private static object s_silverKey;
    private static object s_skyBlueKey;
    private static object s_slateBlueKey;
    private static object s_slateGrayKey;
    private static object s_snowKey;
    private static object s_springGreenKey;
    private static object s_steelBlueKey;
    private static object s_tanKey;
    private static object s_tealKey;
    private static object s_thistleKey;
    private static object s_tomatoKey;
    private static object s_turquoiseKey;
    private static object s_violetKey;
    private static object s_wheatKey;
    private static object s_whiteKey;
    private static object s_whiteSmokeKey;
    private static object s_yellowKey;
    private static object s_yellowGreenKey;
    public static Pen Transparent { get; }
    public static Pen AliceBlue { get; }
    public static Pen AntiqueWhite { get; }
    public static Pen Aqua { get; }
    public static Pen Aquamarine { get; }
    public static Pen Azure { get; }
    public static Pen Beige { get; }
    public static Pen Bisque { get; }
    public static Pen Black { get; }
    public static Pen BlanchedAlmond { get; }
    public static Pen Blue { get; }
    public static Pen BlueViolet { get; }
    public static Pen Brown { get; }
    public static Pen BurlyWood { get; }
    public static Pen CadetBlue { get; }
    public static Pen Chartreuse { get; }
    public static Pen Chocolate { get; }
    public static Pen Coral { get; }
    public static Pen CornflowerBlue { get; }
    public static Pen Cornsilk { get; }
    public static Pen Crimson { get; }
    public static Pen Cyan { get; }
    public static Pen DarkBlue { get; }
    public static Pen DarkCyan { get; }
    public static Pen DarkGoldenrod { get; }
    public static Pen DarkGray { get; }
    public static Pen DarkGreen { get; }
    public static Pen DarkKhaki { get; }
    public static Pen DarkMagenta { get; }
    public static Pen DarkOliveGreen { get; }
    public static Pen DarkOrange { get; }
    public static Pen DarkOrchid { get; }
    public static Pen DarkRed { get; }
    public static Pen DarkSalmon { get; }
    public static Pen DarkSeaGreen { get; }
    public static Pen DarkSlateBlue { get; }
    public static Pen DarkSlateGray { get; }
    public static Pen DarkTurquoise { get; }
    public static Pen DarkViolet { get; }
    public static Pen DeepPink { get; }
    public static Pen DeepSkyBlue { get; }
    public static Pen DimGray { get; }
    public static Pen DodgerBlue { get; }
    public static Pen Firebrick { get; }
    public static Pen FloralWhite { get; }
    public static Pen ForestGreen { get; }
    public static Pen Fuchsia { get; }
    public static Pen Gainsboro { get; }
    public static Pen GhostWhite { get; }
    public static Pen Gold { get; }
    public static Pen Goldenrod { get; }
    public static Pen Gray { get; }
    public static Pen Green { get; }
    public static Pen GreenYellow { get; }
    public static Pen Honeydew { get; }
    public static Pen HotPink { get; }
    public static Pen IndianRed { get; }
    public static Pen Indigo { get; }
    public static Pen Ivory { get; }
    public static Pen Khaki { get; }
    public static Pen Lavender { get; }
    public static Pen LavenderBlush { get; }
    public static Pen LawnGreen { get; }
    public static Pen LemonChiffon { get; }
    public static Pen LightBlue { get; }
    public static Pen LightCoral { get; }
    public static Pen LightCyan { get; }
    public static Pen LightGoldenrodYellow { get; }
    public static Pen LightGreen { get; }
    public static Pen LightGray { get; }
    public static Pen LightPink { get; }
    public static Pen LightSalmon { get; }
    public static Pen LightSeaGreen { get; }
    public static Pen LightSkyBlue { get; }
    public static Pen LightSlateGray { get; }
    public static Pen LightSteelBlue { get; }
    public static Pen LightYellow { get; }
    public static Pen Lime { get; }
    public static Pen LimeGreen { get; }
    public static Pen Linen { get; }
    public static Pen Magenta { get; }
    public static Pen Maroon { get; }
    public static Pen MediumAquamarine { get; }
    public static Pen MediumBlue { get; }
    public static Pen MediumOrchid { get; }
    public static Pen MediumPurple { get; }
    public static Pen MediumSeaGreen { get; }
    public static Pen MediumSlateBlue { get; }
    public static Pen MediumSpringGreen { get; }
    public static Pen MediumTurquoise { get; }
    public static Pen MediumVioletRed { get; }
    public static Pen MidnightBlue { get; }
    public static Pen MintCream { get; }
    public static Pen MistyRose { get; }
    public static Pen Moccasin { get; }
    public static Pen NavajoWhite { get; }
    public static Pen Navy { get; }
    public static Pen OldLace { get; }
    public static Pen Olive { get; }
    public static Pen OliveDrab { get; }
    public static Pen Orange { get; }
    public static Pen OrangeRed { get; }
    public static Pen Orchid { get; }
    public static Pen PaleGoldenrod { get; }
    public static Pen PaleGreen { get; }
    public static Pen PaleTurquoise { get; }
    public static Pen PaleVioletRed { get; }
    public static Pen PapayaWhip { get; }
    public static Pen PeachPuff { get; }
    public static Pen Peru { get; }
    public static Pen Pink { get; }
    public static Pen Plum { get; }
    public static Pen PowderBlue { get; }
    public static Pen Purple { get; }
    public static Pen Red { get; }
    public static Pen RosyBrown { get; }
    public static Pen RoyalBlue { get; }
    public static Pen SaddleBrown { get; }
    public static Pen Salmon { get; }
    public static Pen SandyBrown { get; }
    public static Pen SeaGreen { get; }
    public static Pen SeaShell { get; }
    public static Pen Sienna { get; }
    public static Pen Silver { get; }
    public static Pen SkyBlue { get; }
    public static Pen SlateBlue { get; }
    public static Pen SlateGray { get; }
    public static Pen Snow { get; }
    public static Pen SpringGreen { get; }
    public static Pen SteelBlue { get; }
    public static Pen Tan { get; }
    public static Pen Teal { get; }
    public static Pen Thistle { get; }
    public static Pen Tomato { get; }
    public static Pen Turquoise { get; }
    public static Pen Violet { get; }
    public static Pen Wheat { get; }
    public static Pen White { get; }
    public static Pen WhiteSmoke { get; }
    public static Pen Yellow { get; }
    public static Pen YellowGreen { get; }
    private static Pens();
    public static Pen get_Transparent();
    public static Pen get_AliceBlue();
    public static Pen get_AntiqueWhite();
    public static Pen get_Aqua();
    public static Pen get_Aquamarine();
    public static Pen get_Azure();
    public static Pen get_Beige();
    public static Pen get_Bisque();
    public static Pen get_Black();
    public static Pen get_BlanchedAlmond();
    public static Pen get_Blue();
    public static Pen get_BlueViolet();
    public static Pen get_Brown();
    public static Pen get_BurlyWood();
    public static Pen get_CadetBlue();
    public static Pen get_Chartreuse();
    public static Pen get_Chocolate();
    public static Pen get_Coral();
    public static Pen get_CornflowerBlue();
    public static Pen get_Cornsilk();
    public static Pen get_Crimson();
    public static Pen get_Cyan();
    public static Pen get_DarkBlue();
    public static Pen get_DarkCyan();
    public static Pen get_DarkGoldenrod();
    public static Pen get_DarkGray();
    public static Pen get_DarkGreen();
    public static Pen get_DarkKhaki();
    public static Pen get_DarkMagenta();
    public static Pen get_DarkOliveGreen();
    public static Pen get_DarkOrange();
    public static Pen get_DarkOrchid();
    public static Pen get_DarkRed();
    public static Pen get_DarkSalmon();
    public static Pen get_DarkSeaGreen();
    public static Pen get_DarkSlateBlue();
    public static Pen get_DarkSlateGray();
    public static Pen get_DarkTurquoise();
    public static Pen get_DarkViolet();
    public static Pen get_DeepPink();
    public static Pen get_DeepSkyBlue();
    public static Pen get_DimGray();
    public static Pen get_DodgerBlue();
    public static Pen get_Firebrick();
    public static Pen get_FloralWhite();
    public static Pen get_ForestGreen();
    public static Pen get_Fuchsia();
    public static Pen get_Gainsboro();
    public static Pen get_GhostWhite();
    public static Pen get_Gold();
    public static Pen get_Goldenrod();
    public static Pen get_Gray();
    public static Pen get_Green();
    public static Pen get_GreenYellow();
    public static Pen get_Honeydew();
    public static Pen get_HotPink();
    public static Pen get_IndianRed();
    public static Pen get_Indigo();
    public static Pen get_Ivory();
    public static Pen get_Khaki();
    public static Pen get_Lavender();
    public static Pen get_LavenderBlush();
    public static Pen get_LawnGreen();
    public static Pen get_LemonChiffon();
    public static Pen get_LightBlue();
    public static Pen get_LightCoral();
    public static Pen get_LightCyan();
    public static Pen get_LightGoldenrodYellow();
    public static Pen get_LightGreen();
    public static Pen get_LightGray();
    public static Pen get_LightPink();
    public static Pen get_LightSalmon();
    public static Pen get_LightSeaGreen();
    public static Pen get_LightSkyBlue();
    public static Pen get_LightSlateGray();
    public static Pen get_LightSteelBlue();
    public static Pen get_LightYellow();
    public static Pen get_Lime();
    public static Pen get_LimeGreen();
    public static Pen get_Linen();
    public static Pen get_Magenta();
    public static Pen get_Maroon();
    public static Pen get_MediumAquamarine();
    public static Pen get_MediumBlue();
    public static Pen get_MediumOrchid();
    public static Pen get_MediumPurple();
    public static Pen get_MediumSeaGreen();
    public static Pen get_MediumSlateBlue();
    public static Pen get_MediumSpringGreen();
    public static Pen get_MediumTurquoise();
    public static Pen get_MediumVioletRed();
    public static Pen get_MidnightBlue();
    public static Pen get_MintCream();
    public static Pen get_MistyRose();
    public static Pen get_Moccasin();
    public static Pen get_NavajoWhite();
    public static Pen get_Navy();
    public static Pen get_OldLace();
    public static Pen get_Olive();
    public static Pen get_OliveDrab();
    public static Pen get_Orange();
    public static Pen get_OrangeRed();
    public static Pen get_Orchid();
    public static Pen get_PaleGoldenrod();
    public static Pen get_PaleGreen();
    public static Pen get_PaleTurquoise();
    public static Pen get_PaleVioletRed();
    public static Pen get_PapayaWhip();
    public static Pen get_PeachPuff();
    public static Pen get_Peru();
    public static Pen get_Pink();
    public static Pen get_Plum();
    public static Pen get_PowderBlue();
    public static Pen get_Purple();
    public static Pen get_Red();
    public static Pen get_RosyBrown();
    public static Pen get_RoyalBlue();
    public static Pen get_SaddleBrown();
    public static Pen get_Salmon();
    public static Pen get_SandyBrown();
    public static Pen get_SeaGreen();
    public static Pen get_SeaShell();
    public static Pen get_Sienna();
    public static Pen get_Silver();
    public static Pen get_SkyBlue();
    public static Pen get_SlateBlue();
    public static Pen get_SlateGray();
    public static Pen get_Snow();
    public static Pen get_SpringGreen();
    public static Pen get_SteelBlue();
    public static Pen get_Tan();
    public static Pen get_Teal();
    public static Pen get_Thistle();
    public static Pen get_Tomato();
    public static Pen get_Turquoise();
    public static Pen get_Violet();
    public static Pen get_Wheat();
    public static Pen get_White();
    public static Pen get_WhiteSmoke();
    public static Pen get_Yellow();
    public static Pen get_YellowGreen();
    private static Pen GetPen(object key, Color color);
}
public enum System.Drawing.Printing.Duplex : Enum {
    public int value__;
    public static Duplex Default;
    public static Duplex Simplex;
    public static Duplex Horizontal;
    public static Duplex Vertical;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Drawing.Printing.InvalidPrinterException : SystemException {
    private PrinterSettings _settings;
    public InvalidPrinterException(PrinterSettings settings);
    protected InvalidPrinterException(SerializationInfo info, StreamingContext context);
    private static string GenerateMessage(PrinterSettings settings);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Drawing.Printing.MarginsConverter")]
public class System.Drawing.Printing.Margins : object {
    private int _left;
    private int _right;
    private int _bottom;
    private int _top;
    [OptionalFieldAttribute]
private double _doubleLeft;
    [OptionalFieldAttribute]
private double _doubleRight;
    [OptionalFieldAttribute]
private double _doubleTop;
    [OptionalFieldAttribute]
private double _doubleBottom;
    public int Left { get; public set; }
    public int Right { get; public set; }
    public int Top { get; public set; }
    public int Bottom { get; public set; }
    internal double DoubleLeft { get; internal set; }
    internal double DoubleRight { get; internal set; }
    internal double DoubleTop { get; internal set; }
    internal double DoubleBottom { get; internal set; }
    public Margins(int left, int right, int top, int bottom);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    internal double get_DoubleLeft();
    internal void set_DoubleLeft(double value);
    internal double get_DoubleRight();
    internal void set_DoubleRight(double value);
    internal double get_DoubleTop();
    internal void set_DoubleTop(double value);
    internal double get_DoubleBottom();
    internal void set_DoubleBottom(double value);
    private void CheckMargin(int margin, string name);
    [NullableContextAttribute("1")]
public sealed virtual object Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Margins m1, Margins m2);
    public static bool op_Inequality(Margins m1, Margins m2);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.Printing.MarginsConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    [NullableContextAttribute("1")]
public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
}
internal enum System.Drawing.Printing.ModeField : Enum {
    public int value__;
    public static ModeField Orientation;
    public static ModeField PaperSize;
    public static ModeField PaperLength;
    public static ModeField PaperWidth;
    public static ModeField Copies;
    public static ModeField DefaultSource;
    public static ModeField PrintQuality;
    public static ModeField Color;
    public static ModeField Duplex;
    public static ModeField YResolution;
    public static ModeField TTOption;
    public static ModeField Collate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.PageSettings : object {
    internal PrinterSettings printerSettings;
    private TriState _color;
    private PaperSize _paperSize;
    private PaperSource _paperSource;
    private PrinterResolution _printerResolution;
    private TriState _landscape;
    private Margins _margins;
    public Rectangle Bounds { get; }
    public bool Color { get; public set; }
    public float HardMarginX { get; }
    public float HardMarginY { get; }
    public bool Landscape { get; public set; }
    public Margins Margins { get; public set; }
    public PaperSize PaperSize { get; public set; }
    public PaperSource PaperSource { get; public set; }
    public RectangleF PrintableArea { get; }
    public PrinterResolution PrinterResolution { get; public set; }
    public PrinterSettings PrinterSettings { get; public set; }
    private short ExtraBytes { get; }
    public PageSettings(PrinterSettings printerSettings);
    public Rectangle get_Bounds();
    public bool get_Color();
    public void set_Color(bool value);
    public float get_HardMarginX();
    public float get_HardMarginY();
    public bool get_Landscape();
    public void set_Landscape(bool value);
    public Margins get_Margins();
    public void set_Margins(Margins value);
    public PaperSize get_PaperSize();
    public void set_PaperSize(PaperSize value);
    public PaperSource get_PaperSource();
    public void set_PaperSource(PaperSource value);
    public RectangleF get_PrintableArea();
    public PrinterResolution get_PrinterResolution();
    public void set_PrinterResolution(PrinterResolution value);
    public PrinterSettings get_PrinterSettings();
    public void set_PrinterSettings(PrinterSettings value);
    public sealed virtual object Clone();
    public void CopyToHdevmode(IntPtr hdevmode);
    private short get_ExtraBytes();
    internal Rectangle GetBounds(IntPtr modeHandle);
    private bool GetLandscape(IntPtr modeHandle);
    private PaperSize GetPaperSize(IntPtr modeHandle);
    private PaperSize PaperSizeFromMode(DEVMODE mode);
    private PaperSource PaperSourceFromMode(DEVMODE mode);
    private PrinterResolution PrinterResolutionFromMode(DEVMODE mode);
    public void SetHdevmode(IntPtr hdevmode);
    public virtual string ToString();
}
public enum System.Drawing.Printing.PaperKind : Enum {
    public int value__;
    public static PaperKind Custom;
    public static PaperKind Letter;
    public static PaperKind Legal;
    public static PaperKind A4;
    public static PaperKind CSheet;
    public static PaperKind DSheet;
    public static PaperKind ESheet;
    public static PaperKind LetterSmall;
    public static PaperKind Tabloid;
    public static PaperKind Ledger;
    public static PaperKind Statement;
    public static PaperKind Executive;
    public static PaperKind A3;
    public static PaperKind A4Small;
    public static PaperKind A5;
    public static PaperKind B4;
    public static PaperKind B5;
    public static PaperKind Folio;
    public static PaperKind Quarto;
    public static PaperKind Standard10x14;
    public static PaperKind Standard11x17;
    public static PaperKind Note;
    public static PaperKind Number9Envelope;
    public static PaperKind Number10Envelope;
    public static PaperKind Number11Envelope;
    public static PaperKind Number12Envelope;
    public static PaperKind Number14Envelope;
    public static PaperKind DLEnvelope;
    public static PaperKind C5Envelope;
    public static PaperKind C3Envelope;
    public static PaperKind C4Envelope;
    public static PaperKind C6Envelope;
    public static PaperKind C65Envelope;
    public static PaperKind B4Envelope;
    public static PaperKind B5Envelope;
    public static PaperKind B6Envelope;
    public static PaperKind ItalyEnvelope;
    public static PaperKind MonarchEnvelope;
    public static PaperKind PersonalEnvelope;
    public static PaperKind USStandardFanfold;
    public static PaperKind GermanStandardFanfold;
    public static PaperKind GermanLegalFanfold;
    public static PaperKind IsoB4;
    public static PaperKind JapanesePostcard;
    public static PaperKind Standard9x11;
    public static PaperKind Standard10x11;
    public static PaperKind Standard15x11;
    public static PaperKind InviteEnvelope;
    public static PaperKind LetterExtra;
    public static PaperKind LegalExtra;
    public static PaperKind TabloidExtra;
    public static PaperKind A4Extra;
    public static PaperKind LetterTransverse;
    public static PaperKind A4Transverse;
    public static PaperKind LetterExtraTransverse;
    public static PaperKind APlus;
    public static PaperKind BPlus;
    public static PaperKind LetterPlus;
    public static PaperKind A4Plus;
    public static PaperKind A5Transverse;
    public static PaperKind B5Transverse;
    public static PaperKind A3Extra;
    public static PaperKind A5Extra;
    public static PaperKind B5Extra;
    public static PaperKind A2;
    public static PaperKind A3Transverse;
    public static PaperKind A3ExtraTransverse;
    public static PaperKind JapaneseDoublePostcard;
    public static PaperKind A6;
    public static PaperKind JapaneseEnvelopeKakuNumber2;
    public static PaperKind JapaneseEnvelopeKakuNumber3;
    public static PaperKind JapaneseEnvelopeChouNumber3;
    public static PaperKind JapaneseEnvelopeChouNumber4;
    public static PaperKind LetterRotated;
    public static PaperKind A3Rotated;
    public static PaperKind A4Rotated;
    public static PaperKind A5Rotated;
    public static PaperKind B4JisRotated;
    public static PaperKind B5JisRotated;
    public static PaperKind JapanesePostcardRotated;
    public static PaperKind JapaneseDoublePostcardRotated;
    public static PaperKind A6Rotated;
    public static PaperKind JapaneseEnvelopeKakuNumber2Rotated;
    public static PaperKind JapaneseEnvelopeKakuNumber3Rotated;
    public static PaperKind JapaneseEnvelopeChouNumber3Rotated;
    public static PaperKind JapaneseEnvelopeChouNumber4Rotated;
    public static PaperKind B6Jis;
    public static PaperKind B6JisRotated;
    public static PaperKind Standard12x11;
    public static PaperKind JapaneseEnvelopeYouNumber4;
    public static PaperKind JapaneseEnvelopeYouNumber4Rotated;
    public static PaperKind Prc16K;
    public static PaperKind Prc32K;
    public static PaperKind Prc32KBig;
    public static PaperKind PrcEnvelopeNumber1;
    public static PaperKind PrcEnvelopeNumber2;
    public static PaperKind PrcEnvelopeNumber3;
    public static PaperKind PrcEnvelopeNumber4;
    public static PaperKind PrcEnvelopeNumber5;
    public static PaperKind PrcEnvelopeNumber6;
    public static PaperKind PrcEnvelopeNumber7;
    public static PaperKind PrcEnvelopeNumber8;
    public static PaperKind PrcEnvelopeNumber9;
    public static PaperKind PrcEnvelopeNumber10;
    public static PaperKind Prc16KRotated;
    public static PaperKind Prc32KRotated;
    public static PaperKind Prc32KBigRotated;
    public static PaperKind PrcEnvelopeNumber1Rotated;
    public static PaperKind PrcEnvelopeNumber2Rotated;
    public static PaperKind PrcEnvelopeNumber3Rotated;
    public static PaperKind PrcEnvelopeNumber4Rotated;
    public static PaperKind PrcEnvelopeNumber5Rotated;
    public static PaperKind PrcEnvelopeNumber6Rotated;
    public static PaperKind PrcEnvelopeNumber7Rotated;
    public static PaperKind PrcEnvelopeNumber8Rotated;
    public static PaperKind PrcEnvelopeNumber9Rotated;
    public static PaperKind PrcEnvelopeNumber10Rotated;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.PaperSize : object {
    private PaperKind _kind;
    private string _name;
    private int _width;
    private int _height;
    private bool _createdByDefaultConstructor;
    public int Height { get; public set; }
    public PaperKind Kind { get; }
    public string PaperName { get; public set; }
    public int RawKind { get; public set; }
    public int Width { get; public set; }
    internal PaperSize(PaperKind kind, string name, int width, int height);
    public PaperSize(string name, int width, int height);
    public int get_Height();
    public void set_Height(int value);
    public PaperKind get_Kind();
    public string get_PaperName();
    public void set_PaperName(string value);
    public int get_RawKind();
    public void set_RawKind(int value);
    public int get_Width();
    public void set_Width(int value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.PaperSource : object {
    private string _name;
    private PaperSourceKind _kind;
    public PaperSourceKind Kind { get; }
    public int RawKind { get; public set; }
    public string SourceName { get; public set; }
    internal PaperSource(PaperSourceKind kind, string name);
    public PaperSourceKind get_Kind();
    public int get_RawKind();
    public void set_RawKind(int value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public virtual string ToString();
}
public enum System.Drawing.Printing.PaperSourceKind : Enum {
    public int value__;
    public static PaperSourceKind Upper;
    public static PaperSourceKind Lower;
    public static PaperSourceKind Middle;
    public static PaperSourceKind Manual;
    public static PaperSourceKind Envelope;
    public static PaperSourceKind ManualFeed;
    public static PaperSourceKind AutomaticFeed;
    public static PaperSourceKind TractorFeed;
    public static PaperSourceKind SmallFormat;
    public static PaperSourceKind LargeFormat;
    public static PaperSourceKind LargeCapacity;
    public static PaperSourceKind Cassette;
    public static PaperSourceKind FormSource;
    public static PaperSourceKind Custom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.PreviewPageInfo : object {
    private Image _image;
    private Size _physicalSize;
    public Image Image { get; }
    public Size PhysicalSize { get; }
    public PreviewPageInfo(Image image, Size physicalSize);
    public Image get_Image();
    public Size get_PhysicalSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.PreviewPrintController : PrintController {
    private IList _list;
    [CompilerGeneratedAttribute]
private bool <UseAntiAlias>k__BackingField;
    private Graphics _graphics;
    private DeviceContext _dc;
    public bool IsPreview { get; }
    public bool UseAntiAlias { get; public set; }
    public virtual bool get_IsPreview();
    [CompilerGeneratedAttribute]
public virtual bool get_UseAntiAlias();
    [CompilerGeneratedAttribute]
public virtual void set_UseAntiAlias(bool value);
    public PreviewPageInfo[] GetPreviewPageInfo();
    public virtual void OnStartPrint(PrintDocument document, PrintEventArgs e);
    public virtual Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPrint(PrintDocument document, PrintEventArgs e);
}
public enum System.Drawing.Printing.PrintAction : Enum {
    public int value__;
    public static PrintAction PrintToFile;
    public static PrintAction PrintToPreview;
    public static PrintAction PrintToPrinter;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Drawing.Printing.PrintController : object {
    private protected SafeDeviceModeHandle _modeHandle;
    public bool IsPreview { get; }
    public virtual bool get_IsPreview();
    public virtual Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPage(PrintDocument document, PrintPageEventArgs e);
    internal void Print(PrintDocument document);
    private bool PrintLoop(PrintDocument document);
    private bool PrintLoopOptimized(PrintDocument document);
    private PrintPageEventArgs CreatePrintPageEvent(PageSettings pageSettings);
    public virtual void OnStartPrint(PrintDocument document, PrintEventArgs e);
    public virtual void OnEndPrint(PrintDocument document, PrintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("DocumentName")]
[DefaultEventAttribute("PrintPage")]
[SRDescriptionAttribute("PrintDocumentDesc")]
public class System.Drawing.Printing.PrintDocument : Component {
    private string _documentName;
    private PrintEventHandler _beginPrintHandler;
    private PrintEventHandler _endPrintHandler;
    private PrintPageEventHandler _printPageHandler;
    private QueryPageSettingsEventHandler _queryHandler;
    private PrinterSettings _printerSettings;
    private PageSettings _defaultPageSettings;
    private PrintController _printController;
    private bool _originAtMargins;
    private bool _userSetPageSettings;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PDOCdocumentPageSettingsDescr")]
public PageSettings DefaultPageSettings { get; public set; }
    [DefaultValueAttribute("document")]
[SRDescriptionAttribute("PDOCdocumentNameDescr")]
public string DocumentName { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDOCoriginAtMarginsDescr")]
public bool OriginAtMargins { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PDOCprintControllerDescr")]
public PrintController PrintController { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PDOCprinterSettingsDescr")]
public PrinterSettings PrinterSettings { get; public set; }
    public PageSettings get_DefaultPageSettings();
    public void set_DefaultPageSettings(PageSettings value);
    public string get_DocumentName();
    public void set_DocumentName(string value);
    public bool get_OriginAtMargins();
    public void set_OriginAtMargins(bool value);
    public PrintController get_PrintController();
    public void set_PrintController(PrintController value);
    public PrinterSettings get_PrinterSettings();
    public void set_PrinterSettings(PrinterSettings value);
    public void add_BeginPrint(PrintEventHandler value);
    public void remove_BeginPrint(PrintEventHandler value);
    public void add_EndPrint(PrintEventHandler value);
    public void remove_EndPrint(PrintEventHandler value);
    public void add_PrintPage(PrintPageEventHandler value);
    public void remove_PrintPage(PrintPageEventHandler value);
    public void add_QueryPageSettings(QueryPageSettingsEventHandler value);
    public void remove_QueryPageSettings(QueryPageSettingsEventHandler value);
    protected internal virtual void OnBeginPrint(PrintEventArgs e);
    protected internal virtual void OnEndPrint(PrintEventArgs e);
    protected internal virtual void OnPrintPage(PrintPageEventArgs e);
    protected internal virtual void OnQueryPageSettings(QueryPageSettingsEventArgs e);
    public void Print();
    public virtual string ToString();
}
public class System.Drawing.Printing.PrinterResolution : object {
    private int _x;
    private int _y;
    private PrinterResolutionKind _kind;
    public PrinterResolutionKind Kind { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    internal PrinterResolution(PrinterResolutionKind kind, int x, int y);
    public PrinterResolutionKind get_Kind();
    public void set_Kind(PrinterResolutionKind value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum System.Drawing.Printing.PrinterResolutionKind : Enum {
    public int value__;
    public static PrinterResolutionKind High;
    public static PrinterResolutionKind Medium;
    public static PrinterResolutionKind Low;
    public static PrinterResolutionKind Draft;
    public static PrinterResolutionKind Custom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.PrinterSettings : object {
    private static int Padding64Bit;
    private string _printerName;
    private string _driverName;
    private string _outputPort;
    private bool _printToFile;
    private bool _printDialogDisplayed;
    private short _extrabytes;
    private Byte[] _extrainfo;
    private short _copies;
    private Duplex _duplex;
    private TriState _collate;
    private PageSettings _defaultPageSettings;
    private int _fromPage;
    private int _toPage;
    private int _maxPage;
    private int _minPage;
    private PrintRange _printRange;
    private short _devmodebytes;
    private Byte[] _cachedDevmode;
    public bool CanDuplex { get; }
    public short Copies { get; public set; }
    public bool Collate { get; public set; }
    public PageSettings DefaultPageSettings { get; }
    internal string DriverName { get; }
    public Duplex Duplex { get; public set; }
    public int FromPage { get; public set; }
    public static StringCollection InstalledPrinters { get; }
    public bool IsDefaultPrinter { get; }
    public bool IsPlotter { get; }
    public bool IsValid { get; }
    public int LandscapeAngle { get; }
    public int MaximumCopies { get; }
    public int MaximumPage { get; public set; }
    public int MinimumPage { get; public set; }
    internal string OutputPort { get; internal set; }
    public string PrintFileName { get; public set; }
    public PaperSizeCollection PaperSizes { get; }
    public PaperSourceCollection PaperSources { get; }
    internal bool PrintDialogDisplayed { get; internal set; }
    public PrintRange PrintRange { get; public set; }
    public bool PrintToFile { get; public set; }
    public string PrinterName { get; public set; }
    private string PrinterNameInternal { get; private set; }
    public PrinterResolutionCollection PrinterResolutions { get; }
    public bool SupportsColor { get; }
    public int ToPage { get; public set; }
    public bool get_CanDuplex();
    public short get_Copies();
    public void set_Copies(short value);
    public bool get_Collate();
    public void set_Collate(bool value);
    public PageSettings get_DefaultPageSettings();
    internal string get_DriverName();
    public Duplex get_Duplex();
    public void set_Duplex(Duplex value);
    public int get_FromPage();
    public void set_FromPage(int value);
    public static StringCollection get_InstalledPrinters();
    public bool get_IsDefaultPrinter();
    public bool get_IsPlotter();
    public bool get_IsValid();
    public int get_LandscapeAngle();
    public int get_MaximumCopies();
    public int get_MaximumPage();
    public void set_MaximumPage(int value);
    public int get_MinimumPage();
    public void set_MinimumPage(int value);
    internal string get_OutputPort();
    internal void set_OutputPort(string value);
    public string get_PrintFileName();
    public void set_PrintFileName(string value);
    public PaperSizeCollection get_PaperSizes();
    public PaperSourceCollection get_PaperSources();
    internal bool get_PrintDialogDisplayed();
    internal void set_PrintDialogDisplayed(bool value);
    public PrintRange get_PrintRange();
    public void set_PrintRange(PrintRange value);
    public bool get_PrintToFile();
    public void set_PrintToFile(bool value);
    public string get_PrinterName();
    public void set_PrinterName(string value);
    private string get_PrinterNameInternal();
    private void set_PrinterNameInternal(string value);
    public PrinterResolutionCollection get_PrinterResolutions();
    public bool IsDirectPrintingSupported(ImageFormat imageFormat);
    public bool IsDirectPrintingSupported(Image image);
    public bool get_SupportsColor();
    public int get_ToPage();
    public void set_ToPage(int value);
    public sealed virtual object Clone();
    internal DeviceContext CreateDeviceContext(PageSettings pageSettings);
    internal DeviceContext CreateDeviceContext(IntPtr hdevmode);
    internal DeviceContext CreateInformationContext(PageSettings pageSettings);
    internal DeviceContext CreateInformationContext(IntPtr hdevmode);
    public Graphics CreateMeasurementGraphics();
    public Graphics CreateMeasurementGraphics(bool honorOriginAtMargins);
    public Graphics CreateMeasurementGraphics(PageSettings pageSettings);
    public Graphics CreateMeasurementGraphics(PageSettings pageSettings, bool honorOriginAtMargins);
    private static PRINTDLGX86 CreatePRINTDLGX86();
    private static PRINTDLG CreatePRINTDLG();
    private int DeviceCapabilities(short capability, IntPtr pointerToBuffer, int defaultValue);
    private static int FastDeviceCapabilities(short capability, IntPtr pointerToBuffer, int defaultValue, string printerName);
    private static string GetDefaultPrinterName();
    private static string GetOutputPort();
    private int GetDeviceCaps(DeviceCapability capability, int defaultValue);
    public IntPtr GetHdevmode();
    internal IntPtr GetHdevmodeInternal();
    private IntPtr GetHdevmodeInternal(string printer);
    public IntPtr GetHdevmode(PageSettings pageSettings);
    public IntPtr GetHdevnames();
    internal short GetModeField(ModeField field, short defaultValue);
    internal short GetModeField(ModeField field, short defaultValue, IntPtr modeHandle);
    internal PaperSize[] Get_PaperSizes();
    internal PaperSource[] Get_PaperSources();
    internal PrinterResolution[] Get_PrinterResolutions();
    private static string ReadOneDEVNAME(IntPtr pDevnames, int slot);
    public void SetHdevmode(IntPtr hdevmode);
    public void SetHdevnames(IntPtr hdevnames);
    public virtual string ToString();
    private short WriteOneDEVNAME(string str, IntPtr bufferStart, int index);
}
public enum System.Drawing.Printing.PrinterUnit : Enum {
    public int value__;
    public static PrinterUnit Display;
    public static PrinterUnit ThousandthsOfAnInch;
    public static PrinterUnit HundredthsOfAMillimeter;
    public static PrinterUnit TenthsOfAMillimeter;
}
public class System.Drawing.Printing.PrinterUnitConvert : object {
    public static double Convert(double value, PrinterUnit fromUnit, PrinterUnit toUnit);
    public static int Convert(int value, PrinterUnit fromUnit, PrinterUnit toUnit);
    public static Point Convert(Point value, PrinterUnit fromUnit, PrinterUnit toUnit);
    public static Size Convert(Size value, PrinterUnit fromUnit, PrinterUnit toUnit);
    public static Rectangle Convert(Rectangle value, PrinterUnit fromUnit, PrinterUnit toUnit);
    [NullableContextAttribute("1")]
public static Margins Convert(Margins value, PrinterUnit fromUnit, PrinterUnit toUnit);
    private static double UnitsPerDisplay(PrinterUnit unit);
}
public class System.Drawing.Printing.PrintEventArgs : CancelEventArgs {
    private PrintAction _printAction;
    public PrintAction PrintAction { get; }
    internal PrintEventArgs(PrintAction action);
    public PrintAction get_PrintAction();
}
public class System.Drawing.Printing.PrintEventHandler : MulticastDelegate {
    public PrintEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PrintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PrintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.PrintPageEventArgs : EventArgs {
    private bool _hasMorePages;
    private bool _cancel;
    private Graphics _graphics;
    private Rectangle _marginBounds;
    private Rectangle _pageBounds;
    private PageSettings _pageSettings;
    internal bool CopySettingsToDevMode;
    public bool Cancel { get; public set; }
    [NullableAttribute("2")]
public Graphics Graphics { get; }
    public bool HasMorePages { get; public set; }
    public Rectangle MarginBounds { get; }
    public Rectangle PageBounds { get; }
    public PageSettings PageSettings { get; }
    public PrintPageEventArgs(Graphics graphics, Rectangle marginBounds, Rectangle pageBounds, PageSettings pageSettings);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    [NullableContextAttribute("2")]
public Graphics get_Graphics();
    public bool get_HasMorePages();
    public void set_HasMorePages(bool value);
    public Rectangle get_MarginBounds();
    public Rectangle get_PageBounds();
    public PageSettings get_PageSettings();
    internal void Dispose();
    internal void SetGraphics(Graphics value);
}
public class System.Drawing.Printing.PrintPageEventHandler : MulticastDelegate {
    public PrintPageEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PrintPageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PrintPageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Drawing.Printing.PrintRange : Enum {
    public int value__;
    public static PrintRange AllPages;
    public static PrintRange SomePages;
    public static PrintRange Selection;
    public static PrintRange CurrentPage;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.QueryPageSettingsEventArgs : PrintEventArgs {
    private PageSettings _pageSettings;
    internal bool PageSettingsChanged;
    public PageSettings PageSettings { get; public set; }
    public QueryPageSettingsEventArgs(PageSettings pageSettings);
    public PageSettings get_PageSettings();
    public void set_PageSettings(PageSettings value);
}
public class System.Drawing.Printing.QueryPageSettingsEventHandler : MulticastDelegate {
    public QueryPageSettingsEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, QueryPageSettingsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryPageSettingsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Printing.StandardPrintController : PrintController {
    private DeviceContext _dc;
    private Graphics _graphics;
    public virtual void OnStartPrint(PrintDocument document, PrintEventArgs e);
    public virtual Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPrint(PrintDocument document, PrintEventArgs e);
}
[IsReadOnlyAttribute]
internal class System.Drawing.Printing.TriState : ValueType {
    private byte _value;
    public static TriState Default;
    public static TriState False;
    public static TriState True;
    public bool IsDefault { get; }
    public bool IsFalse { get; }
    public bool IsNotDefault { get; }
    public bool IsTrue { get; }
    private TriState(byte value);
    private static TriState();
    public bool get_IsDefault();
    public bool get_IsFalse();
    public bool get_IsNotDefault();
    public bool get_IsTrue();
    public static bool op_Equality(TriState left, TriState right);
    public static bool op_Inequality(TriState left, TriState right);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static TriState op_Implicit(bool value);
    public static bool op_Explicit(TriState value);
    public virtual string ToString();
}
internal class System.Drawing.PrintPreviewGraphics : object {
    private PrintPageEventArgs _printPageEventArgs;
    private PrintDocument _printDocument;
    public RectangleF VisibleClipBounds { get; }
    public PrintPreviewGraphics(PrintDocument document, PrintPageEventArgs e);
    public RectangleF get_VisibleClipBounds();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Region : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private IntPtr <NativeRegion>k__BackingField;
    internal IntPtr NativeRegion { get; private set; }
    public Region(RectangleF rect);
    public Region(Rectangle rect);
    public Region(GraphicsPath path);
    public Region(RegionData rgnData);
    internal Region(IntPtr nativeRegion);
    [CompilerGeneratedAttribute]
internal IntPtr get_NativeRegion();
    [CompilerGeneratedAttribute]
private void set_NativeRegion(IntPtr value);
    public static Region FromHrgn(IntPtr hrgn);
    private void SetNativeRegion(IntPtr nativeRegion);
    public Region Clone();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public void MakeInfinite();
    public void MakeEmpty();
    public void Intersect(RectangleF rect);
    public void Intersect(Rectangle rect);
    public void Intersect(GraphicsPath path);
    public void Intersect(Region region);
    public void Union(RectangleF rect);
    public void Union(Rectangle rect);
    public void Union(GraphicsPath path);
    public void Union(Region region);
    public void Xor(RectangleF rect);
    public void Xor(Rectangle rect);
    public void Xor(GraphicsPath path);
    public void Xor(Region region);
    public void Exclude(RectangleF rect);
    public void Exclude(Rectangle rect);
    public void Exclude(GraphicsPath path);
    public void Exclude(Region region);
    public void Complement(RectangleF rect);
    public void Complement(Rectangle rect);
    public void Complement(GraphicsPath path);
    public void Complement(Region region);
    public void Translate(float dx, float dy);
    public void Translate(int dx, int dy);
    public void Transform(Matrix matrix);
    public RectangleF GetBounds(Graphics g);
    public IntPtr GetHrgn(Graphics g);
    public bool IsEmpty(Graphics g);
    public bool IsInfinite(Graphics g);
    public bool Equals(Region region, Graphics g);
    [NullableContextAttribute("2")]
public RegionData GetRegionData();
    public bool IsVisible(float x, float y);
    public bool IsVisible(PointF point);
    [NullableContextAttribute("2")]
public bool IsVisible(float x, float y, Graphics g);
    [NullableContextAttribute("2")]
public bool IsVisible(PointF point, Graphics g);
    public bool IsVisible(float x, float y, float width, float height);
    public bool IsVisible(RectangleF rect);
    [NullableContextAttribute("2")]
public bool IsVisible(float x, float y, float width, float height, Graphics g);
    [NullableContextAttribute("2")]
public bool IsVisible(RectangleF rect, Graphics g);
    [NullableContextAttribute("2")]
public bool IsVisible(int x, int y, Graphics g);
    public bool IsVisible(Point point);
    [NullableContextAttribute("2")]
public bool IsVisible(Point point, Graphics g);
    public bool IsVisible(int x, int y, int width, int height);
    public bool IsVisible(Rectangle rect);
    [NullableContextAttribute("2")]
public bool IsVisible(int x, int y, int width, int height, Graphics g);
    [NullableContextAttribute("2")]
public bool IsVisible(Rectangle rect, Graphics g);
    public RectangleF[] GetRegionScans(Matrix matrix);
    public void ReleaseHrgn(IntPtr regionHandle);
}
public enum System.Drawing.RotateFlipType : Enum {
    public int value__;
    public static RotateFlipType RotateNoneFlipNone;
    public static RotateFlipType Rotate90FlipNone;
    public static RotateFlipType Rotate180FlipNone;
    public static RotateFlipType Rotate270FlipNone;
    public static RotateFlipType RotateNoneFlipX;
    public static RotateFlipType Rotate90FlipX;
    public static RotateFlipType Rotate180FlipX;
    public static RotateFlipType Rotate270FlipX;
    public static RotateFlipType RotateNoneFlipY;
    public static RotateFlipType Rotate90FlipY;
    public static RotateFlipType Rotate180FlipY;
    public static RotateFlipType Rotate270FlipY;
    public static RotateFlipType RotateNoneFlipXY;
    public static RotateFlipType Rotate90FlipXY;
    public static RotateFlipType Rotate180FlipXY;
    public static RotateFlipType Rotate270FlipXY;
}
internal static class System.Drawing.SafeNativeMethods : object {
    public static int ERROR_CANCELLED;
    public static int E_UNEXPECTED;
    public static int E_NOTIMPL;
    public static int E_ABORT;
    public static int E_FAIL;
    public static int E_ACCESSDENIED;
    public static int GMEM_MOVEABLE;
    public static int GMEM_ZEROINIT;
    public static int DM_IN_BUFFER;
    public static int DM_OUT_BUFFER;
    public static int DC_PAPERS;
    public static int DC_PAPERSIZE;
    public static int DC_BINS;
    public static int DC_DUPLEX;
    public static int DC_BINNAMES;
    public static int DC_ENUMRESOLUTIONS;
    public static int DC_PAPERNAMES;
    public static int DC_ORIENTATION;
    public static int DC_COPIES;
    public static int DC_COLORDEVICE;
    public static int PD_ALLPAGES;
    public static int PD_SELECTION;
    public static int PD_PAGENUMS;
    public static int PD_CURRENTPAGE;
    public static int PD_RETURNDEFAULT;
    public static int DI_NORMAL;
    public static int IMAGE_ICON;
    public static int IDI_APPLICATION;
    public static int IDI_HAND;
    public static int IDI_QUESTION;
    public static int IDI_EXCLAMATION;
    public static int IDI_ASTERISK;
    public static int IDI_WINLOGO;
    public static int IDI_WARNING;
    public static int IDI_ERROR;
    public static int IDI_INFORMATION;
    public static int DM_ORIENTATION;
    public static int DM_PAPERSIZE;
    public static int DM_PAPERLENGTH;
    public static int DM_PAPERWIDTH;
    public static int DM_COPIES;
    public static int DM_DEFAULTSOURCE;
    public static int DM_PRINTQUALITY;
    public static int DM_COLOR;
    public static int DM_DUPLEX;
    public static int DM_YRESOLUTION;
    public static int DM_COLLATE;
    public static int DMORIENT_PORTRAIT;
    public static int DMORIENT_LANDSCAPE;
    public static int DMPAPER_LETTER;
    public static int DMPAPER_LETTERSMALL;
    public static int DMPAPER_TABLOID;
    public static int DMPAPER_LEDGER;
    public static int DMPAPER_LEGAL;
    public static int DMPAPER_STATEMENT;
    public static int DMPAPER_EXECUTIVE;
    public static int DMPAPER_A3;
    public static int DMPAPER_A4;
    public static int DMPAPER_A4SMALL;
    public static int DMPAPER_A5;
    public static int DMPAPER_B4;
    public static int DMPAPER_B5;
    public static int DMPAPER_FOLIO;
    public static int DMPAPER_QUARTO;
    public static int DMPAPER_10X14;
    public static int DMPAPER_11X17;
    public static int DMPAPER_NOTE;
    public static int DMPAPER_ENV_9;
    public static int DMPAPER_ENV_10;
    public static int DMPAPER_ENV_11;
    public static int DMPAPER_ENV_12;
    public static int DMPAPER_ENV_14;
    public static int DMPAPER_CSHEET;
    public static int DMPAPER_DSHEET;
    public static int DMPAPER_ESHEET;
    public static int DMPAPER_ENV_DL;
    public static int DMPAPER_ENV_C5;
    public static int DMPAPER_ENV_C3;
    public static int DMPAPER_ENV_C4;
    public static int DMPAPER_ENV_C6;
    public static int DMPAPER_ENV_C65;
    public static int DMPAPER_ENV_B4;
    public static int DMPAPER_ENV_B5;
    public static int DMPAPER_ENV_B6;
    public static int DMPAPER_ENV_ITALY;
    public static int DMPAPER_ENV_MONARCH;
    public static int DMPAPER_ENV_PERSONAL;
    public static int DMPAPER_FANFOLD_US;
    public static int DMPAPER_FANFOLD_STD_GERMAN;
    public static int DMPAPER_FANFOLD_LGL_GERMAN;
    public static int DMPAPER_ISO_B4;
    public static int DMPAPER_JAPANESE_POSTCARD;
    public static int DMPAPER_9X11;
    public static int DMPAPER_10X11;
    public static int DMPAPER_15X11;
    public static int DMPAPER_ENV_INVITE;
    public static int DMPAPER_RESERVED_48;
    public static int DMPAPER_RESERVED_49;
    public static int DMPAPER_LETTER_EXTRA;
    public static int DMPAPER_LEGAL_EXTRA;
    public static int DMPAPER_TABLOID_EXTRA;
    public static int DMPAPER_A4_EXTRA;
    public static int DMPAPER_LETTER_TRANSVERSE;
    public static int DMPAPER_A4_TRANSVERSE;
    public static int DMPAPER_LETTER_EXTRA_TRANSVERSE;
    public static int DMPAPER_A_PLUS;
    public static int DMPAPER_B_PLUS;
    public static int DMPAPER_LETTER_PLUS;
    public static int DMPAPER_A4_PLUS;
    public static int DMPAPER_A5_TRANSVERSE;
    public static int DMPAPER_B5_TRANSVERSE;
    public static int DMPAPER_A3_EXTRA;
    public static int DMPAPER_A5_EXTRA;
    public static int DMPAPER_B5_EXTRA;
    public static int DMPAPER_A2;
    public static int DMPAPER_A3_TRANSVERSE;
    public static int DMPAPER_A3_EXTRA_TRANSVERSE;
    public static int DMPAPER_DBL_JAPANESE_POSTCARD;
    public static int DMPAPER_A6;
    public static int DMPAPER_JENV_KAKU2;
    public static int DMPAPER_JENV_KAKU3;
    public static int DMPAPER_JENV_CHOU3;
    public static int DMPAPER_JENV_CHOU4;
    public static int DMPAPER_LETTER_ROTATED;
    public static int DMPAPER_A3_ROTATED;
    public static int DMPAPER_A4_ROTATED;
    public static int DMPAPER_A5_ROTATED;
    public static int DMPAPER_B4_JIS_ROTATED;
    public static int DMPAPER_B5_JIS_ROTATED;
    public static int DMPAPER_JAPANESE_POSTCARD_ROTATED;
    public static int DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED;
    public static int DMPAPER_A6_ROTATED;
    public static int DMPAPER_JENV_KAKU2_ROTATED;
    public static int DMPAPER_JENV_KAKU3_ROTATED;
    public static int DMPAPER_JENV_CHOU3_ROTATED;
    public static int DMPAPER_JENV_CHOU4_ROTATED;
    public static int DMPAPER_B6_JIS;
    public static int DMPAPER_B6_JIS_ROTATED;
    public static int DMPAPER_12X11;
    public static int DMPAPER_JENV_YOU4;
    public static int DMPAPER_JENV_YOU4_ROTATED;
    public static int DMPAPER_P16K;
    public static int DMPAPER_P32K;
    public static int DMPAPER_P32KBIG;
    public static int DMPAPER_PENV_1;
    public static int DMPAPER_PENV_2;
    public static int DMPAPER_PENV_3;
    public static int DMPAPER_PENV_4;
    public static int DMPAPER_PENV_5;
    public static int DMPAPER_PENV_6;
    public static int DMPAPER_PENV_7;
    public static int DMPAPER_PENV_8;
    public static int DMPAPER_PENV_9;
    public static int DMPAPER_PENV_10;
    public static int DMPAPER_P16K_ROTATED;
    public static int DMPAPER_P32K_ROTATED;
    public static int DMPAPER_P32KBIG_ROTATED;
    public static int DMPAPER_PENV_1_ROTATED;
    public static int DMPAPER_PENV_2_ROTATED;
    public static int DMPAPER_PENV_3_ROTATED;
    public static int DMPAPER_PENV_4_ROTATED;
    public static int DMPAPER_PENV_5_ROTATED;
    public static int DMPAPER_PENV_6_ROTATED;
    public static int DMPAPER_PENV_7_ROTATED;
    public static int DMPAPER_PENV_8_ROTATED;
    public static int DMPAPER_PENV_9_ROTATED;
    public static int DMPAPER_PENV_10_ROTATED;
    public static int DMPAPER_LAST;
    public static int DMBIN_UPPER;
    public static int DMBIN_LOWER;
    public static int DMBIN_MIDDLE;
    public static int DMBIN_MANUAL;
    public static int DMBIN_ENVELOPE;
    public static int DMBIN_ENVMANUAL;
    public static int DMBIN_AUTO;
    public static int DMBIN_TRACTOR;
    public static int DMBIN_SMALLFMT;
    public static int DMBIN_LARGEFMT;
    public static int DMBIN_LARGECAPACITY;
    public static int DMBIN_CASSETTE;
    public static int DMBIN_FORMSOURCE;
    public static int DMBIN_LAST;
    public static int DMBIN_USER;
    public static int DMRES_DRAFT;
    public static int DMRES_LOW;
    public static int DMRES_MEDIUM;
    public static int DMRES_HIGH;
    public static int DMCOLOR_MONOCHROME;
    public static int DMCOLOR_COLOR;
    public static int DMDUP_SIMPLEX;
    public static int DMDUP_VERTICAL;
    public static int DMDUP_HORIZONTAL;
    public static int DMCOLLATE_FALSE;
    public static int DMCOLLATE_TRUE;
    public static int PRINTER_ENUM_LOCAL;
    public static int PRINTER_ENUM_CONNECTIONS;
    public static int SM_CXICON;
    public static int SM_CYICON;
    public static int DEFAULT_CHARSET;
    public static int QUERYESCSUPPORT;
    public static int CHECKJPEGFORMAT;
    public static int CHECKPNGFORMAT;
    public static int ERROR_ACCESS_DENIED;
    public static int ERROR_INVALID_PARAMETER;
    public static int ERROR_PROC_NOT_FOUND;
    public static IntPtr CreateCompatibleBitmap(HandleRef hDC, int width, int height);
    public static int GetDIBits(HandleRef hdc, HandleRef hbm, int arg1, int arg2, IntPtr arg3, BITMAPINFO_FLAT& bmi, int arg5);
    public static UInt32 GetPaletteEntries(HandleRef hpal, int iStartIndex, int nEntries, Byte[] lppe);
    public static IntPtr CreateDIBSection(HandleRef hdc, BITMAPINFO_FLAT& bmi, int iUsage, IntPtr& ppvBits, IntPtr hSection, int dwOffset);
    public static int StartDoc(HandleRef hDC, DOCINFO lpDocInfo);
    public static int StartPage(HandleRef hDC);
    public static int EndPage(HandleRef hDC);
    public static int AbortDoc(HandleRef hDC);
    public static int EndDoc(HandleRef hDC);
    public static bool PrintDlg(PRINTDLG lppd);
    public static bool PrintDlg(PRINTDLGX86 lppd);
    public static int DeviceCapabilities(string pDevice, string pPort, short fwCapabilities, IntPtr pOutput, IntPtr pDevMode);
    public static int DocumentProperties(HandleRef hwnd, HandleRef hPrinter, string pDeviceName, IntPtr pDevModeOutput, HandleRef pDevModeInput, int fMode);
    public static int DocumentProperties(HandleRef hwnd, HandleRef hPrinter, string pDeviceName, IntPtr pDevModeOutput, IntPtr pDevModeInput, int fMode);
    public static int EnumPrinters(int flags, string name, int level, IntPtr pPrinterEnum, int cbBuf, Int32& pcbNeeded, Int32& pcReturned);
    public static IntPtr ResetDC(HandleRef hDC, HandleRef lpDevMode);
    public static int AddFontResourceEx(string lpszFilename, int fl, IntPtr pdv);
    public static int AddFontFile(string fileName);
    public static int ExtEscape(HandleRef hDC, int nEscape, int cbInput, Int32& inData, int cbOutput, Int32& outData);
    public static int ExtEscape(HandleRef hDC, int nEscape, int cbInput, Byte[] inData, int cbOutput, Int32& outData);
    public static int IntersectClipRect(HandleRef hDC, int x1, int y1, int x2, int y2);
    public static IntPtr IntGlobalAlloc(int uFlags, UIntPtr dwBytes);
    public static IntPtr GlobalAlloc(int uFlags, UInt32 dwBytes);
    public static IntPtr SelectObject(HandleRef hdc, HandleRef obj);
    public static IntPtr CreateIconFromResourceEx(Byte* pbIconBits, UInt32 cbIconBits, bool fIcon, int dwVersion, int csDesired, int cyDesired, int flags);
    public static IntPtr ExtractAssociatedIcon(HandleRef hInst, Char* iconPath, Int32& index);
    public static IntPtr LoadIcon(HandleRef hInst, IntPtr iconId);
    public static bool DestroyIcon(HandleRef hIcon);
    public static IntPtr CopyImage(HandleRef hImage, int uType, int cxDesired, int cyDesired, int fuFlags);
    public static int GetObject(HandleRef hObject, int nSize, BITMAP& bm);
    public static int GetObject(HandleRef hObject, int nSize, LOGFONT& lf);
    public static int GetObject(HandleRef hObject, LOGFONT& lp);
    public static bool GetIconInfo(HandleRef hIcon, ICONINFO& info);
    public static bool DrawIconEx(HandleRef hDC, int x, int y, HandleRef hIcon, int width, int height, int iStepIfAniCursor, HandleRef hBrushFlickerFree, int diFlags);
}
internal class System.Drawing.ScreenDC : ValueType {
    private IntPtr _handle;
    public static ScreenDC Create();
    public static IntPtr op_Implicit(ScreenDC screenDC);
    public sealed virtual void Dispose();
}
public class System.Drawing.SolidBrush : Brush {
    private Color _color;
    private bool _immutable;
    public Color Color { get; public set; }
    public SolidBrush(Color color);
    internal SolidBrush(Color color, bool immutable);
    internal SolidBrush(IntPtr nativeBrush);
    [NullableContextAttribute("1")]
public virtual object Clone();
    protected virtual void Dispose(bool disposing);
    public Color get_Color();
    public void set_Color(Color value);
    private void InternalSetColor(Color value);
    private sealed virtual override void System.Drawing.Internal.ISystemColorTracker.OnSystemColorChanged();
}
[AttributeUsageAttribute("32767")]
internal class System.Drawing.SRDescriptionAttribute : DescriptionAttribute {
    private bool _replaced;
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
public enum System.Drawing.StringAlignment : Enum {
    public int value__;
    public static StringAlignment Near;
    public static StringAlignment Center;
    public static StringAlignment Far;
}
public enum System.Drawing.StringDigitSubstitute : Enum {
    public int value__;
    public static StringDigitSubstitute User;
    public static StringDigitSubstitute None;
    public static StringDigitSubstitute National;
    public static StringDigitSubstitute Traditional;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.StringFormat : MarshalByRefObject {
    internal IntPtr nativeFormat;
    public StringFormatFlags FormatFlags { get; public set; }
    public StringAlignment Alignment { get; public set; }
    public StringAlignment LineAlignment { get; public set; }
    public HotkeyPrefix HotkeyPrefix { get; public set; }
    public StringTrimming Trimming { get; public set; }
    public static StringFormat GenericDefault { get; }
    public static StringFormat GenericTypographic { get; }
    public StringDigitSubstitute DigitSubstitutionMethod { get; }
    public int DigitSubstitutionLanguage { get; }
    private StringFormat(IntPtr format);
    public StringFormat(StringFormatFlags options);
    public StringFormat(StringFormatFlags options, int language);
    public StringFormat(StringFormat format);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public sealed virtual object Clone();
    public StringFormatFlags get_FormatFlags();
    public void set_FormatFlags(StringFormatFlags value);
    public void SetMeasurableCharacterRanges(CharacterRange[] ranges);
    public StringAlignment get_Alignment();
    public void set_Alignment(StringAlignment value);
    public StringAlignment get_LineAlignment();
    public void set_LineAlignment(StringAlignment value);
    public HotkeyPrefix get_HotkeyPrefix();
    public void set_HotkeyPrefix(HotkeyPrefix value);
    public void SetTabStops(float firstTabOffset, Single[] tabStops);
    public Single[] GetTabStops(Single& firstTabOffset);
    public StringTrimming get_Trimming();
    public void set_Trimming(StringTrimming value);
    public static StringFormat get_GenericDefault();
    public static StringFormat get_GenericTypographic();
    public void SetDigitSubstitution(int language, StringDigitSubstitute substitute);
    public StringDigitSubstitute get_DigitSubstitutionMethod();
    public int get_DigitSubstitutionLanguage();
    internal int GetMeasurableCharacterRangeCount();
    protected virtual override void Finalize();
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Drawing.StringFormatFlags : Enum {
    public int value__;
    public static StringFormatFlags DirectionRightToLeft;
    public static StringFormatFlags DirectionVertical;
    public static StringFormatFlags FitBlackBox;
    public static StringFormatFlags DisplayFormatControl;
    public static StringFormatFlags NoFontFallback;
    public static StringFormatFlags MeasureTrailingSpaces;
    public static StringFormatFlags NoWrap;
    public static StringFormatFlags LineLimit;
    public static StringFormatFlags NoClip;
}
public enum System.Drawing.StringTrimming : Enum {
    public int value__;
    public static StringTrimming None;
    public static StringTrimming Character;
    public static StringTrimming Word;
    public static StringTrimming EllipsisCharacter;
    public static StringTrimming EllipsisWord;
    public static StringTrimming EllipsisPath;
}
public enum System.Drawing.StringUnit : Enum {
    public int value__;
    public static StringUnit World;
    public static StringUnit Display;
    public static StringUnit Pixel;
    public static StringUnit Point;
    public static StringUnit Inch;
    public static StringUnit Document;
    public static StringUnit Millimeter;
    public static StringUnit Em;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Drawing.SystemBrushes : object {
    private static object s_systemBrushesKey;
    public static Brush ActiveBorder { get; }
    public static Brush ActiveCaption { get; }
    public static Brush ActiveCaptionText { get; }
    public static Brush AppWorkspace { get; }
    public static Brush ButtonFace { get; }
    public static Brush ButtonHighlight { get; }
    public static Brush ButtonShadow { get; }
    public static Brush Control { get; }
    public static Brush ControlLightLight { get; }
    public static Brush ControlLight { get; }
    public static Brush ControlDark { get; }
    public static Brush ControlDarkDark { get; }
    public static Brush ControlText { get; }
    public static Brush Desktop { get; }
    public static Brush GradientActiveCaption { get; }
    public static Brush GradientInactiveCaption { get; }
    public static Brush GrayText { get; }
    public static Brush Highlight { get; }
    public static Brush HighlightText { get; }
    public static Brush HotTrack { get; }
    public static Brush InactiveCaption { get; }
    public static Brush InactiveBorder { get; }
    public static Brush InactiveCaptionText { get; }
    public static Brush Info { get; }
    public static Brush InfoText { get; }
    public static Brush Menu { get; }
    public static Brush MenuBar { get; }
    public static Brush MenuHighlight { get; }
    public static Brush MenuText { get; }
    public static Brush ScrollBar { get; }
    public static Brush Window { get; }
    public static Brush WindowFrame { get; }
    public static Brush WindowText { get; }
    private static SystemBrushes();
    public static Brush get_ActiveBorder();
    public static Brush get_ActiveCaption();
    public static Brush get_ActiveCaptionText();
    public static Brush get_AppWorkspace();
    public static Brush get_ButtonFace();
    public static Brush get_ButtonHighlight();
    public static Brush get_ButtonShadow();
    public static Brush get_Control();
    public static Brush get_ControlLightLight();
    public static Brush get_ControlLight();
    public static Brush get_ControlDark();
    public static Brush get_ControlDarkDark();
    public static Brush get_ControlText();
    public static Brush get_Desktop();
    public static Brush get_GradientActiveCaption();
    public static Brush get_GradientInactiveCaption();
    public static Brush get_GrayText();
    public static Brush get_Highlight();
    public static Brush get_HighlightText();
    public static Brush get_HotTrack();
    public static Brush get_InactiveCaption();
    public static Brush get_InactiveBorder();
    public static Brush get_InactiveCaptionText();
    public static Brush get_Info();
    public static Brush get_InfoText();
    public static Brush get_Menu();
    public static Brush get_MenuBar();
    public static Brush get_MenuHighlight();
    public static Brush get_MenuText();
    public static Brush get_ScrollBar();
    public static Brush get_Window();
    public static Brush get_WindowFrame();
    public static Brush get_WindowText();
    public static Brush FromSystemColor(Color c);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Drawing.SystemFonts : object {
    public static Font CaptionFont { get; }
    public static Font SmallCaptionFont { get; }
    public static Font MenuFont { get; }
    public static Font StatusFont { get; }
    public static Font MessageBoxFont { get; }
    public static Font IconTitleFont { get; }
    [NullableAttribute("1")]
public static Font DefaultFont { get; }
    [NullableAttribute("1")]
public static Font DialogFont { get; }
    [NullableContextAttribute("1")]
public static Font GetFontByName(string systemFontName);
    private static bool GetNonClientMetrics(NONCLIENTMETRICS& metrics);
    public static Font get_CaptionFont();
    public static Font get_SmallCaptionFont();
    public static Font get_MenuFont();
    public static Font get_StatusFont();
    public static Font get_MessageBoxFont();
    private static bool IsCriticalFontException(Exception ex);
    public static Font get_IconTitleFont();
    [NullableContextAttribute("1")]
public static Font get_DefaultFont();
    [NullableContextAttribute("1")]
public static Font get_DialogFont();
    private static Font FontInPoints(Font font);
    private static Font GetFontFromData(LOGFONT logFont);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Drawing.SystemIcons : object {
    private static Icon s_application;
    private static Icon s_asterisk;
    private static Icon s_error;
    private static Icon s_exclamation;
    private static Icon s_hand;
    private static Icon s_information;
    private static Icon s_question;
    private static Icon s_warning;
    private static Icon s_winlogo;
    private static Icon s_shield;
    public static Icon Application { get; }
    public static Icon Asterisk { get; }
    public static Icon Error { get; }
    public static Icon Exclamation { get; }
    public static Icon Hand { get; }
    public static Icon Information { get; }
    public static Icon Question { get; }
    public static Icon Warning { get; }
    public static Icon WinLogo { get; }
    public static Icon Shield { get; }
    public static Icon get_Application();
    public static Icon get_Asterisk();
    public static Icon get_Error();
    public static Icon get_Exclamation();
    public static Icon get_Hand();
    public static Icon get_Information();
    public static Icon get_Question();
    public static Icon get_Warning();
    public static Icon get_WinLogo();
    public static Icon get_Shield();
    private static Icon GetIcon(Icon& icon, int iconId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Drawing.SystemPens : object {
    private static object s_systemPensKey;
    public static Pen ActiveBorder { get; }
    public static Pen ActiveCaption { get; }
    public static Pen ActiveCaptionText { get; }
    public static Pen AppWorkspace { get; }
    public static Pen ButtonFace { get; }
    public static Pen ButtonHighlight { get; }
    public static Pen ButtonShadow { get; }
    public static Pen Control { get; }
    public static Pen ControlText { get; }
    public static Pen ControlDark { get; }
    public static Pen ControlDarkDark { get; }
    public static Pen ControlLight { get; }
    public static Pen ControlLightLight { get; }
    public static Pen Desktop { get; }
    public static Pen GradientActiveCaption { get; }
    public static Pen GradientInactiveCaption { get; }
    public static Pen GrayText { get; }
    public static Pen Highlight { get; }
    public static Pen HighlightText { get; }
    public static Pen HotTrack { get; }
    public static Pen InactiveBorder { get; }
    public static Pen InactiveCaption { get; }
    public static Pen InactiveCaptionText { get; }
    public static Pen Info { get; }
    public static Pen InfoText { get; }
    public static Pen Menu { get; }
    public static Pen MenuBar { get; }
    public static Pen MenuHighlight { get; }
    public static Pen MenuText { get; }
    public static Pen ScrollBar { get; }
    public static Pen Window { get; }
    public static Pen WindowFrame { get; }
    public static Pen WindowText { get; }
    private static SystemPens();
    public static Pen get_ActiveBorder();
    public static Pen get_ActiveCaption();
    public static Pen get_ActiveCaptionText();
    public static Pen get_AppWorkspace();
    public static Pen get_ButtonFace();
    public static Pen get_ButtonHighlight();
    public static Pen get_ButtonShadow();
    public static Pen get_Control();
    public static Pen get_ControlText();
    public static Pen get_ControlDark();
    public static Pen get_ControlDarkDark();
    public static Pen get_ControlLight();
    public static Pen get_ControlLightLight();
    public static Pen get_Desktop();
    public static Pen get_GradientActiveCaption();
    public static Pen get_GradientInactiveCaption();
    public static Pen get_GrayText();
    public static Pen get_Highlight();
    public static Pen get_HighlightText();
    public static Pen get_HotTrack();
    public static Pen get_InactiveBorder();
    public static Pen get_InactiveCaption();
    public static Pen get_InactiveCaptionText();
    public static Pen get_Info();
    public static Pen get_InfoText();
    public static Pen get_Menu();
    public static Pen get_MenuBar();
    public static Pen get_MenuHighlight();
    public static Pen get_MenuText();
    public static Pen get_ScrollBar();
    public static Pen get_Window();
    public static Pen get_WindowFrame();
    public static Pen get_WindowText();
    public static Pen FromSystemColor(Color c);
}
public abstract class System.Drawing.Text.FontCollection : object {
    internal IntPtr _nativeFontCollection;
    [NullableAttribute("1")]
public FontFamily[] Families { get; }
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public FontFamily[] get_Families();
    protected virtual override void Finalize();
}
public enum System.Drawing.Text.GenericFontFamilies : Enum {
    public int value__;
    public static GenericFontFamilies Serif;
    public static GenericFontFamilies SansSerif;
    public static GenericFontFamilies Monospace;
}
public enum System.Drawing.Text.HotkeyPrefix : Enum {
    public int value__;
    public static HotkeyPrefix None;
    public static HotkeyPrefix Show;
    public static HotkeyPrefix Hide;
}
public class System.Drawing.Text.InstalledFontCollection : FontCollection {
}
public class System.Drawing.Text.PrivateFontCollection : FontCollection {
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public void AddFontFile(string filename);
    public void AddMemoryFont(IntPtr memory, int length);
    private void GdiAddFontFile(string filename);
}
public enum System.Drawing.Text.TextRenderingHint : Enum {
    public int value__;
    public static TextRenderingHint SystemDefault;
    public static TextRenderingHint SingleBitPerPixelGridFit;
    public static TextRenderingHint SingleBitPerPixel;
    public static TextRenderingHint AntiAliasGridFit;
    public static TextRenderingHint AntiAlias;
    public static TextRenderingHint ClearTypeGridFit;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.TextureBrush : Brush {
    public Matrix Transform { get; public set; }
    public WrapMode WrapMode { get; public set; }
    public Image Image { get; }
    public TextureBrush(Image bitmap);
    public TextureBrush(Image image, WrapMode wrapMode);
    public TextureBrush(Image image, WrapMode wrapMode, RectangleF dstRect);
    public TextureBrush(Image image, WrapMode wrapMode, Rectangle dstRect);
    public TextureBrush(Image image, RectangleF dstRect);
    public TextureBrush(Image image, RectangleF dstRect, ImageAttributes imageAttr);
    public TextureBrush(Image image, Rectangle dstRect);
    public TextureBrush(Image image, Rectangle dstRect, ImageAttributes imageAttr);
    internal TextureBrush(IntPtr nativeBrush);
    public virtual object Clone();
    public Matrix get_Transform();
    public void set_Transform(Matrix value);
    public WrapMode get_WrapMode();
    public void set_WrapMode(WrapMode value);
    public Image get_Image();
    public void ResetTransform();
    public void MultiplyTransform(Matrix matrix);
    public void MultiplyTransform(Matrix matrix, MatrixOrder order);
    public void TranslateTransform(float dx, float dy);
    public void TranslateTransform(float dx, float dy, MatrixOrder order);
    public void ScaleTransform(float sx, float sy);
    public void ScaleTransform(float sx, float sy, MatrixOrder order);
    public void RotateTransform(float angle);
    public void RotateTransform(float angle, MatrixOrder order);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.Drawing.ToolboxBitmapAttribute : Attribute {
    private Image _smallImage;
    private Image _largeImage;
    private string _imageFile;
    private Type _imageType;
    private string _imageName;
    private static Size s_largeSize;
    private static Size s_smallSize;
    private static string s_lastOriginalFileName;
    private static string s_lastUpdatedFileName;
    public static ToolboxBitmapAttribute Default;
    private static ToolboxBitmapAttribute s_defaultComponent;
    public ToolboxBitmapAttribute(string imageFile);
    public ToolboxBitmapAttribute(Type t);
    public ToolboxBitmapAttribute(Type t, string name);
    private ToolboxBitmapAttribute(Image smallImage, Image largeImage);
    private static ToolboxBitmapAttribute();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public Image GetImage(object component);
    [NullableContextAttribute("2")]
public Image GetImage(object component, bool large);
    public Image GetImage(Type type);
    public Image GetImage(Type type, bool large);
    [NullableContextAttribute("2")]
public Image GetImage(Type type, string imgName, bool large);
    private static Image GetIconFromStream(Stream stream, bool large, bool scaled);
    private static string GetFileNameFromBitmapSelector(string originalName);
    private static Image GetImageFromFile(string imageFile, bool large, bool scaled);
    private static Image GetBitmapFromResource(Type t, string bitmapname, bool large, bool scaled);
    private static Image GetIconFromResource(Type t, string bitmapname, bool large, bool scaled);
    [NullableContextAttribute("2")]
public static Image GetImageFromResource(Type t, string imageName, bool large);
    internal static Image GetImageFromResource(Type t, string imageName, bool large, bool scaled);
    private static void MakeBackgroundAlphaZero(Bitmap img);
}
internal class System.Drawing.UnsafeNativeMethods : object {
    public static void CopyMemory(HandleRef destData, HandleRef srcData, int size);
    public static int GetSystemDefaultLCID();
    public static int GetSystemMetrics(int nIndex);
}
internal static class System.ExternDll : object {
    public static string Comdlg32;
    public static string Gdi32;
    public static string Gdiplus;
    public static string Kernel32;
    public static string Oleaut32;
    public static string Shell32;
    public static string User32;
    public static string Winspool;
}
internal static class System.LocalAppContextSwitches : object {
    private static int s_dontSupportPngFramesInIcons;
    private static int s_optimizePrintPreview;
    public static bool DontSupportPngFramesInIcons { get; }
    public static bool OptimizePrintPreview { get; }
    public static bool get_DontSupportPngFramesInIcons();
    public static bool get_OptimizePrintPreview();
    internal static bool GetSwitchValue(string switchName, Boolean& switchValue);
    internal static bool GetCachedSwitchValue(string switchName, Int32& cachedSwitchValue);
    private static bool GetCachedSwitchValueInternal(string switchName, Int32& cachedSwitchValue);
    private static bool GetSwitchDefaultValue(string switchName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformAttribute(string platformName);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string CantTellPrinterName { get; }
    internal static string CantChangeImmutableObjects { get; }
    internal static string CantMakeIconTransparent { get; }
    internal static string ColorNotSystemColor { get; }
    internal static string DotNET_ComponentType { get; }
    internal static string GdiplusAborted { get; }
    internal static string GdiplusAccessDenied { get; }
    internal static string GdiplusCannotCreateGraphicsFromIndexedPixelFormat { get; }
    internal static string GdiplusCannotSetPixelFromIndexedPixelFormat { get; }
    internal static string GdiplusDestPointsInvalidParallelogram { get; }
    internal static string GdiplusDestPointsInvalidLength { get; }
    internal static string GdiplusFileNotFound { get; }
    internal static string GdiplusFontFamilyNotFound { get; }
    internal static string GdiplusFontStyleNotFound { get; }
    internal static string GdiplusGenericError { get; }
    internal static string GdiplusInsufficientBuffer { get; }
    internal static string GdiplusInvalidParameter { get; }
    internal static string GdiplusInvalidRectangle { get; }
    internal static string GdiplusInvalidSize { get; }
    internal static string GdiplusOutOfMemory { get; }
    internal static string GdiplusNotImplemented { get; }
    internal static string GdiplusNotInitialized { get; }
    internal static string GdiplusNotTrueTypeFont { get; }
    internal static string GdiplusNotTrueTypeFont_NoName { get; }
    internal static string GdiplusObjectBusy { get; }
    internal static string GdiplusOverflow { get; }
    internal static string GdiplusPropertyNotFoundError { get; }
    internal static string GdiplusPropertyNotSupportedError { get; }
    internal static string GdiplusUnknown { get; }
    internal static string GdiplusUnknownImageFormat { get; }
    internal static string GdiplusUnsupportedGdiplusVersion { get; }
    internal static string GdiplusWrongState { get; }
    internal static string GlobalAssemblyCache { get; }
    internal static string GraphicsBufferCurrentlyBusy { get; }
    internal static string GraphicsBufferQueryFail { get; }
    internal static string IconInvalidMaskLength { get; }
    internal static string ToolboxItemLocked { get; }
    internal static string ToolboxItemInvalidPropertyType { get; }
    internal static string ToolboxItemValueNotSerializable { get; }
    internal static string ToolboxItemInvalidKey { get; }
    internal static string IllegalState { get; }
    internal static string InterpolationColorsColorBlendNotSet { get; }
    internal static string InterpolationColorsCommon { get; }
    internal static string InterpolationColorsInvalidColorBlendObject { get; }
    internal static string InterpolationColorsInvalidStartPosition { get; }
    internal static string InterpolationColorsInvalidEndPosition { get; }
    internal static string InterpolationColorsLength { get; }
    internal static string InterpolationColorsLengthsDiffer { get; }
    internal static string InvalidArgumentValue { get; }
    internal static string InvalidArgumentValueFontConverter { get; }
    internal static string InvalidBoundArgument { get; }
    internal static string InvalidClassName { get; }
    internal static string InvalidColor { get; }
    internal static string InvalidDashPattern { get; }
    internal static string InvalidEx2BoundArgument { get; }
    internal static string InvalidFrame { get; }
    internal static string InvalidGDIHandle { get; }
    internal static string InvalidImage { get; }
    internal static string InvalidLowBoundArgumentEx { get; }
    internal static string InvalidPermissionLevel { get; }
    internal static string InvalidPermissionState { get; }
    internal static string InvalidPictureType { get; }
    internal static string InvalidPrinterException_InvalidPrinter { get; }
    internal static string InvalidPrinterException_NoDefaultPrinter { get; }
    internal static string InvalidPrinterHandle { get; }
    internal static string ValidRangeX { get; }
    internal static string ValidRangeY { get; }
    internal static string NativeHandle0 { get; }
    internal static string NoDefaultPrinter { get; }
    internal static string NotImplemented { get; }
    internal static string PDOCbeginPrintDescr { get; }
    internal static string PDOCdocumentNameDescr { get; }
    internal static string PDOCdocumentPageSettingsDescr { get; }
    internal static string PDOCendPrintDescr { get; }
    internal static string PDOCoriginAtMarginsDescr { get; }
    internal static string PDOCprintControllerDescr { get; }
    internal static string PDOCprintPageDescr { get; }
    internal static string PDOCprinterSettingsDescr { get; }
    internal static string PDOCqueryPageSettingsDescr { get; }
    internal static string PlatformNotSupported_Drawing { get; }
    internal static string PrintDocumentDesc { get; }
    internal static string PrintingPermissionBadXml { get; }
    internal static string PrintingPermissionAttributeInvalidPermissionLevel { get; }
    internal static string PropertyValueInvalidEntry { get; }
    internal static string PSizeNotCustom { get; }
    internal static string ResourceNotFound { get; }
    internal static string TargetNotPrintingPermission { get; }
    internal static string TextParseFailedFormat { get; }
    internal static string TriStateCompareError { get; }
    internal static string toStringIcon { get; }
    internal static string toStringNone { get; }
    internal static string DCTypeInvalid { get; }
    internal static string InvalidEnumArgument { get; }
    internal static string ConvertInvalidPrimitive { get; }
    internal static string BlendObjectMustHaveTwoElements { get; }
    internal static string BlendObjectFirstElementInvalid { get; }
    internal static string BlendObjectLastElementInvalid { get; }
    internal static string DllNotFoundExceptionMessage { get; }
    internal static string EntryPointNotFoundExceptionMessage { get; }
    internal static string AvailableOnlyOnWMF { get; }
    internal static string CannotCreateGraphics { get; }
    internal static string CouldNotOpenDisplay { get; }
    internal static string CouldntFindSpecifiedFile { get; }
    internal static string IconInstanceWasDisposed { get; }
    internal static string InvalidGraphicsUnit { get; }
    internal static string InvalidThumbnailSize { get; }
    internal static string NoCodecAvailableForFormat { get; }
    internal static string NotImplementedUnderX11 { get; }
    internal static string none { get; }
    internal static string NoValidIconImageFound { get; }
    internal static string NullOrEmptyPath { get; }
    internal static string NumberOfPointsAndTypesMustBeSame { get; }
    internal static string ObjectDisposed { get; }
    internal static string ValueLessThenZero { get; }
    internal static string ValueNotOneOfValues { get; }
    internal static string TargetDirectoryDoesNotExist { get; }
    internal static string SystemDrawingCommon_PlatformNotSupported { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_CantTellPrinterName();
    internal static string get_CantChangeImmutableObjects();
    internal static string get_CantMakeIconTransparent();
    internal static string get_ColorNotSystemColor();
    internal static string get_DotNET_ComponentType();
    internal static string get_GdiplusAborted();
    internal static string get_GdiplusAccessDenied();
    internal static string get_GdiplusCannotCreateGraphicsFromIndexedPixelFormat();
    internal static string get_GdiplusCannotSetPixelFromIndexedPixelFormat();
    internal static string get_GdiplusDestPointsInvalidParallelogram();
    internal static string get_GdiplusDestPointsInvalidLength();
    internal static string get_GdiplusFileNotFound();
    internal static string get_GdiplusFontFamilyNotFound();
    internal static string get_GdiplusFontStyleNotFound();
    internal static string get_GdiplusGenericError();
    internal static string get_GdiplusInsufficientBuffer();
    internal static string get_GdiplusInvalidParameter();
    internal static string get_GdiplusInvalidRectangle();
    internal static string get_GdiplusInvalidSize();
    internal static string get_GdiplusOutOfMemory();
    internal static string get_GdiplusNotImplemented();
    internal static string get_GdiplusNotInitialized();
    internal static string get_GdiplusNotTrueTypeFont();
    internal static string get_GdiplusNotTrueTypeFont_NoName();
    internal static string get_GdiplusObjectBusy();
    internal static string get_GdiplusOverflow();
    internal static string get_GdiplusPropertyNotFoundError();
    internal static string get_GdiplusPropertyNotSupportedError();
    internal static string get_GdiplusUnknown();
    internal static string get_GdiplusUnknownImageFormat();
    internal static string get_GdiplusUnsupportedGdiplusVersion();
    internal static string get_GdiplusWrongState();
    internal static string get_GlobalAssemblyCache();
    internal static string get_GraphicsBufferCurrentlyBusy();
    internal static string get_GraphicsBufferQueryFail();
    internal static string get_IconInvalidMaskLength();
    internal static string get_ToolboxItemLocked();
    internal static string get_ToolboxItemInvalidPropertyType();
    internal static string get_ToolboxItemValueNotSerializable();
    internal static string get_ToolboxItemInvalidKey();
    internal static string get_IllegalState();
    internal static string get_InterpolationColorsColorBlendNotSet();
    internal static string get_InterpolationColorsCommon();
    internal static string get_InterpolationColorsInvalidColorBlendObject();
    internal static string get_InterpolationColorsInvalidStartPosition();
    internal static string get_InterpolationColorsInvalidEndPosition();
    internal static string get_InterpolationColorsLength();
    internal static string get_InterpolationColorsLengthsDiffer();
    internal static string get_InvalidArgumentValue();
    internal static string get_InvalidArgumentValueFontConverter();
    internal static string get_InvalidBoundArgument();
    internal static string get_InvalidClassName();
    internal static string get_InvalidColor();
    internal static string get_InvalidDashPattern();
    internal static string get_InvalidEx2BoundArgument();
    internal static string get_InvalidFrame();
    internal static string get_InvalidGDIHandle();
    internal static string get_InvalidImage();
    internal static string get_InvalidLowBoundArgumentEx();
    internal static string get_InvalidPermissionLevel();
    internal static string get_InvalidPermissionState();
    internal static string get_InvalidPictureType();
    internal static string get_InvalidPrinterException_InvalidPrinter();
    internal static string get_InvalidPrinterException_NoDefaultPrinter();
    internal static string get_InvalidPrinterHandle();
    internal static string get_ValidRangeX();
    internal static string get_ValidRangeY();
    internal static string get_NativeHandle0();
    internal static string get_NoDefaultPrinter();
    internal static string get_NotImplemented();
    internal static string get_PDOCbeginPrintDescr();
    internal static string get_PDOCdocumentNameDescr();
    internal static string get_PDOCdocumentPageSettingsDescr();
    internal static string get_PDOCendPrintDescr();
    internal static string get_PDOCoriginAtMarginsDescr();
    internal static string get_PDOCprintControllerDescr();
    internal static string get_PDOCprintPageDescr();
    internal static string get_PDOCprinterSettingsDescr();
    internal static string get_PDOCqueryPageSettingsDescr();
    internal static string get_PlatformNotSupported_Drawing();
    internal static string get_PrintDocumentDesc();
    internal static string get_PrintingPermissionBadXml();
    internal static string get_PrintingPermissionAttributeInvalidPermissionLevel();
    internal static string get_PropertyValueInvalidEntry();
    internal static string get_PSizeNotCustom();
    internal static string get_ResourceNotFound();
    internal static string get_TargetNotPrintingPermission();
    internal static string get_TextParseFailedFormat();
    internal static string get_TriStateCompareError();
    internal static string get_toStringIcon();
    internal static string get_toStringNone();
    internal static string get_DCTypeInvalid();
    internal static string get_InvalidEnumArgument();
    internal static string get_ConvertInvalidPrimitive();
    internal static string get_BlendObjectMustHaveTwoElements();
    internal static string get_BlendObjectFirstElementInvalid();
    internal static string get_BlendObjectLastElementInvalid();
    internal static string get_DllNotFoundExceptionMessage();
    internal static string get_EntryPointNotFoundExceptionMessage();
    internal static string get_AvailableOnlyOnWMF();
    internal static string get_CannotCreateGraphics();
    internal static string get_CouldNotOpenDisplay();
    internal static string get_CouldntFindSpecifiedFile();
    internal static string get_IconInstanceWasDisposed();
    internal static string get_InvalidGraphicsUnit();
    internal static string get_InvalidThumbnailSize();
    internal static string get_NoCodecAvailableForFormat();
    internal static string get_NotImplementedUnderX11();
    internal static string get_none();
    internal static string get_NoValidIconImageFound();
    internal static string get_NullOrEmptyPath();
    internal static string get_NumberOfPointsAndTypesMustBeSame();
    internal static string get_ObjectDisposed();
    internal static string get_ValueLessThenZero();
    internal static string get_ValueNotOneOfValues();
    internal static string get_TargetDirectoryDoesNotExist();
    internal static string get_SystemDrawingCommon_PlatformNotSupported();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    public void Insert(int index, string s);
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
internal static class System.Windows.Forms.DpiHelper : object {
    private static double LogicalDpi;
    private static bool s_isInitialized;
    private static double s_deviceDpiX;
    private static double s_deviceDpiY;
    private static double s_logicalToDeviceUnitsScalingFactorX;
    private static double s_logicalToDeviceUnitsScalingFactorY;
    private static InterpolationMode s_interpolationMode;
    private static double LogicalToDeviceUnitsScalingFactorX { get; }
    private static double LogicalToDeviceUnitsScalingFactorY { get; }
    private static InterpolationMode InterpolationMode { get; }
    public static bool IsScalingRequired { get; }
    private static DpiHelper();
    private static void Initialize();
    private static double get_LogicalToDeviceUnitsScalingFactorX();
    private static double get_LogicalToDeviceUnitsScalingFactorY();
    private static InterpolationMode get_InterpolationMode();
    private static Bitmap ScaleBitmapToSize(Bitmap logicalImage, Size deviceImageSize);
    private static Bitmap CreateScaledBitmap(Bitmap logicalImage);
    public static bool get_IsScalingRequired();
    public static int LogicalToDeviceUnitsX(int value);
    public static int LogicalToDeviceUnitsY(int value);
    public static Size LogicalToDeviceUnits(Size logicalSize);
    public static Bitmap CreateResizedBitmap(Bitmap logicalImage, Size targetImageSize);
    public static void ScaleBitmapLogicalToDevice(Bitmap& logicalBitmap);
}
