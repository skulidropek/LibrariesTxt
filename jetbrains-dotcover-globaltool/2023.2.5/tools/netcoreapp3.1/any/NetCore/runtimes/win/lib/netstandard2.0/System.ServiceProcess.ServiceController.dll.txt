internal static class FxResources.System.ServiceProcess.ServiceController.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Win32.SafeHandles.SafeServiceHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal SafeServiceHandle(IntPtr handle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
public enum System.ServiceProcess.PowerBroadcastStatus : Enum {
    public int value__;
    public static PowerBroadcastStatus BatteryLow;
    public static PowerBroadcastStatus OemEvent;
    public static PowerBroadcastStatus PowerStatusChange;
    public static PowerBroadcastStatus QuerySuspend;
    public static PowerBroadcastStatus QuerySuspendFailed;
    public static PowerBroadcastStatus ResumeAutomatic;
    public static PowerBroadcastStatus ResumeCritical;
    public static PowerBroadcastStatus ResumeSuspend;
    public static PowerBroadcastStatus Suspend;
}
public class System.ServiceProcess.ServiceBase : Component {
    private SERVICE_STATUS _status;
    private IntPtr _statusHandle;
    private ServiceControlCallbackEx _commandCallbackEx;
    private ServiceMainCallback _mainCallback;
    private IntPtr _handleName;
    private ManualResetEvent _startCompletedSignal;
    private ExceptionDispatchInfo _startFailedException;
    private int _acceptedCommands;
    private string _serviceName;
    private bool _nameFrozen;
    private bool _commandPropsFrozen;
    private bool _disposed;
    private bool _initialized;
    private EventLog _eventLog;
    public static int MaxNameLength;
    [CompilerGeneratedAttribute]
private bool <AutoLog>k__BackingField;
    [DefaultValueAttribute("True")]
public bool AutoLog { get; public set; }
    public int ExitCode { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanHandlePowerEvent { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanHandleSessionChangeEvent { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanPauseAndContinue { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanShutdown { get; public set; }
    [DefaultValueAttribute("True")]
public bool CanStop { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public EventLog EventLog { get; }
    [EditorBrowsableAttribute("2")]
protected IntPtr ServiceHandle { get; }
    public string ServiceName { get; public set; }
    public void RequestAdditionalTime(int milliseconds);
    [CompilerGeneratedAttribute]
public bool get_AutoLog();
    [CompilerGeneratedAttribute]
public void set_AutoLog(bool value);
    public int get_ExitCode();
    public void set_ExitCode(int value);
    public bool get_CanHandlePowerEvent();
    public void set_CanHandlePowerEvent(bool value);
    public bool get_CanHandleSessionChangeEvent();
    public void set_CanHandleSessionChangeEvent(bool value);
    public bool get_CanPauseAndContinue();
    public void set_CanPauseAndContinue(bool value);
    public bool get_CanShutdown();
    public void set_CanShutdown(bool value);
    public bool get_CanStop();
    public void set_CanStop(bool value);
    public virtual EventLog get_EventLog();
    protected IntPtr get_ServiceHandle();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    internal static bool ValidServiceName(string serviceName);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnContinue();
    protected virtual void OnPause();
    protected virtual bool OnPowerEvent(PowerBroadcastStatus powerStatus);
    protected virtual void OnSessionChange(SessionChangeDescription changeDescription);
    protected virtual void OnShutdown();
    protected virtual void OnStart(String[] args);
    protected virtual void OnStop();
    private void DeferredContinue();
    private void DeferredCustomCommand(int command);
    private void DeferredPause();
    private void DeferredPowerEvent(int eventType, IntPtr eventData);
    private void DeferredSessionChange(int eventType, int sessionId);
    private void DeferredStop();
    private void DeferredShutdown();
    protected virtual void OnCustomCommand(int command);
    public static void Run(ServiceBase[] services);
    public static void Run(ServiceBase service);
    public void Stop();
    private void Initialize(bool multipleServices);
    private SERVICE_TABLE_ENTRY GetEntry();
    private int ServiceCommandCallbackEx(int command, int eventType, IntPtr eventData, IntPtr eventContext);
    private void ServiceCommandCallback(int command);
    private void ServiceQueuedMainCallback(object state);
    [EditorBrowsableAttribute("1")]
public void ServiceMainCallback(int argCount, IntPtr argPointer);
    private void WriteLogEntry(string message, bool error);
}
public class System.ServiceProcess.ServiceController : Component {
    private string _machineName;
    private ManualResetEvent _waitForStatusSignal;
    private static string DefaultMachineName;
    private string _name;
    private string _eitherName;
    private string _displayName;
    private int _commandsAccepted;
    private bool _statusGenerated;
    private bool _startTypeInitialized;
    private int _type;
    private bool _disposed;
    private SafeServiceHandle _serviceManagerHandle;
    private ServiceControllerStatus _status;
    private ServiceController[] _dependentServices;
    private ServiceController[] _servicesDependedOn;
    private ServiceStartMode _startType;
    public bool CanPauseAndContinue { get; }
    public bool CanShutdown { get; }
    public bool CanStop { get; }
    public string DisplayName { get; public set; }
    public ServiceController[] DependentServices { get; }
    public string MachineName { get; public set; }
    public string ServiceName { get; public set; }
    public ServiceController[] ServicesDependedOn { get; }
    public ServiceStartMode StartType { get; }
    public SafeHandle ServiceHandle { get; }
    public ServiceControllerStatus Status { get; }
    public ServiceType ServiceType { get; }
    public ServiceController(string name);
    public ServiceController(string name, string machineName);
    private ServiceController(string machineName, ENUM_SERVICE_STATUS status);
    private ServiceController(string machineName, ENUM_SERVICE_STATUS_PROCESS status);
    public bool get_CanPauseAndContinue();
    public bool get_CanShutdown();
    public bool get_CanStop();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public ServiceController[] get_DependentServices();
    public string get_MachineName();
    public void set_MachineName(string value);
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public ServiceController[] get_ServicesDependedOn();
    public ServiceStartMode get_StartType();
    public SafeHandle get_ServiceHandle();
    public ServiceControllerStatus get_Status();
    public ServiceType get_ServiceType();
    private static bool CheckMachineName(string value);
    public void Close();
    protected virtual void Dispose(bool disposing);
    private void GenerateStatus();
    private void GenerateNames();
    private string GetServiceKeyName(SafeServiceHandle SCMHandle, string serviceDisplayName);
    private string GetServiceDisplayName(SafeServiceHandle SCMHandle, string serviceName);
    private static SafeServiceHandle GetDataBaseHandleWithAccess(string machineName, int serviceControlManagerAccess);
    private void GetDataBaseHandleWithConnectAccess();
    public static ServiceController[] GetDevices();
    public static ServiceController[] GetDevices(string machineName);
    private SafeServiceHandle GetServiceHandle(int desiredAccess);
    public static ServiceController[] GetServices();
    public static ServiceController[] GetServices(string machineName);
    private static ENUM_SERVICE_STATUS_PROCESS[] GetServicesInGroup(string machineName, string group);
    private static ServiceController[] GetServicesOfType(string machineName, int serviceType);
    private static T[] GetServices(string machineName, int serviceType, string group, Func`2<ENUM_SERVICE_STATUS_PROCESS, T> selector);
    public void Pause();
    public void Continue();
    public void ExecuteCommand(int command);
    public void Refresh();
    public void Start();
    public void Start(String[] args);
    public void Stop();
    public void WaitForStatus(ServiceControllerStatus desiredStatus);
    public void WaitForStatus(ServiceControllerStatus desiredStatus, TimeSpan timeout);
}
public enum System.ServiceProcess.ServiceControllerStatus : Enum {
    public int value__;
    public static ServiceControllerStatus ContinuePending;
    public static ServiceControllerStatus Paused;
    public static ServiceControllerStatus PausePending;
    public static ServiceControllerStatus Running;
    public static ServiceControllerStatus StartPending;
    public static ServiceControllerStatus Stopped;
    public static ServiceControllerStatus StopPending;
}
[AttributeUsageAttribute("32767")]
public class System.ServiceProcess.ServiceProcessDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public ServiceProcessDescriptionAttribute(string description);
    public virtual string get_Description();
}
public enum System.ServiceProcess.ServiceStartMode : Enum {
    public int value__;
    public static ServiceStartMode Manual;
    public static ServiceStartMode Automatic;
    public static ServiceStartMode Disabled;
    public static ServiceStartMode Boot;
    public static ServiceStartMode System;
}
[FlagsAttribute]
public enum System.ServiceProcess.ServiceType : Enum {
    public int value__;
    public static ServiceType Adapter;
    public static ServiceType FileSystemDriver;
    public static ServiceType InteractiveProcess;
    public static ServiceType KernelDriver;
    public static ServiceType RecognizerDriver;
    public static ServiceType Win32OwnProcess;
    public static ServiceType Win32ShareProcess;
}
[IsReadOnlyAttribute]
public class System.ServiceProcess.SessionChangeDescription : ValueType {
    private SessionChangeReason _reason;
    private int _id;
    public SessionChangeReason Reason { get; }
    public int SessionId { get; }
    internal SessionChangeDescription(SessionChangeReason reason, int id);
    public SessionChangeReason get_Reason();
    public int get_SessionId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(SessionChangeDescription changeDescription);
    public static bool op_Equality(SessionChangeDescription a, SessionChangeDescription b);
    public static bool op_Inequality(SessionChangeDescription a, SessionChangeDescription b);
}
public enum System.ServiceProcess.SessionChangeReason : Enum {
    public int value__;
    public static SessionChangeReason ConsoleConnect;
    public static SessionChangeReason ConsoleDisconnect;
    public static SessionChangeReason RemoteConnect;
    public static SessionChangeReason RemoteDisconnect;
    public static SessionChangeReason SessionLogon;
    public static SessionChangeReason SessionLogoff;
    public static SessionChangeReason SessionLock;
    public static SessionChangeReason SessionUnlock;
    public static SessionChangeReason SessionRemoteControl;
}
[TypeForwardedFromAttribute("System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.ServiceProcess.TimeoutException : SystemException {
    private static int ServiceControllerTimeout;
    public TimeoutException(string message);
    public TimeoutException(string message, Exception innerException);
    protected TimeoutException(SerializationInfo info, StreamingContext context);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgsCantBeNull { get; }
    internal static string BadMachineName { get; }
    internal static string CannotStart { get; }
    internal static string InvalidEnumArgument { get; }
    internal static string InvalidParameter { get; }
    internal static string NoMachineName { get; }
    internal static string NoService { get; }
    internal static string OpenSC { get; }
    internal static string OpenService { get; }
    internal static string PauseService { get; }
    internal static string ResumeService { get; }
    internal static string StopService { get; }
    internal static string Timeout { get; }
    internal static string PlatformNotSupported_ServiceController { get; }
    internal static string CannotChangeProperties { get; }
    internal static string CannotChangeName { get; }
    internal static string ServiceName { get; }
    internal static string NoServices { get; }
    internal static string CantStartFromCommandLine { get; }
    internal static string NotInPendingState { get; }
    internal static string StartSuccessful { get; }
    internal static string StopSuccessful { get; }
    internal static string PauseSuccessful { get; }
    internal static string ContinueSuccessful { get; }
    internal static string InstallSuccessful { get; }
    internal static string UninstallSuccessful { get; }
    internal static string CommandSuccessful { get; }
    internal static string StartFailed { get; }
    internal static string StopFailed { get; }
    internal static string PauseFailed { get; }
    internal static string ContinueFailed { get; }
    internal static string SessionChangeFailed { get; }
    internal static string InstallFailed { get; }
    internal static string UninstallFailed { get; }
    internal static string CommandFailed { get; }
    internal static string ErrorNumber { get; }
    internal static string ShutdownOK { get; }
    internal static string ShutdownFailed { get; }
    internal static string PowerEventOK { get; }
    internal static string PowerEventFailed { get; }
    internal static string InstallOK { get; }
    internal static string TryToStop { get; }
    internal static string ServiceRemoving { get; }
    internal static string ServiceRemoved { get; }
    internal static string ControlService { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgsCantBeNull();
    internal static string get_BadMachineName();
    internal static string get_CannotStart();
    internal static string get_InvalidEnumArgument();
    internal static string get_InvalidParameter();
    internal static string get_NoMachineName();
    internal static string get_NoService();
    internal static string get_OpenSC();
    internal static string get_OpenService();
    internal static string get_PauseService();
    internal static string get_ResumeService();
    internal static string get_StopService();
    internal static string get_Timeout();
    internal static string get_PlatformNotSupported_ServiceController();
    internal static string get_CannotChangeProperties();
    internal static string get_CannotChangeName();
    internal static string get_ServiceName();
    internal static string get_NoServices();
    internal static string get_CantStartFromCommandLine();
    internal static string get_NotInPendingState();
    internal static string get_StartSuccessful();
    internal static string get_StopSuccessful();
    internal static string get_PauseSuccessful();
    internal static string get_ContinueSuccessful();
    internal static string get_InstallSuccessful();
    internal static string get_UninstallSuccessful();
    internal static string get_CommandSuccessful();
    internal static string get_StartFailed();
    internal static string get_StopFailed();
    internal static string get_PauseFailed();
    internal static string get_ContinueFailed();
    internal static string get_SessionChangeFailed();
    internal static string get_InstallFailed();
    internal static string get_UninstallFailed();
    internal static string get_CommandFailed();
    internal static string get_ErrorNumber();
    internal static string get_ShutdownOK();
    internal static string get_ShutdownFailed();
    internal static string get_PowerEventOK();
    internal static string get_PowerEventFailed();
    internal static string get_InstallOK();
    internal static string get_TryToStop();
    internal static string get_ServiceRemoving();
    internal static string get_ServiceRemoved();
    internal static string get_ControlService();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    public void Insert(int index, string s);
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
