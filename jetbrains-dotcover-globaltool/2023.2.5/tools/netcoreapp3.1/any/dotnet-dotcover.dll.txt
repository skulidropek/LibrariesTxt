public class JetBrains.dotCover.GlobalTool.CanBeNullAttribute : Attribute {
}
internal interface JetBrains.dotCover.GlobalTool.CommandLineParser.IParsedCommandLine {
    public IReadOnlyList`1<string> DotNetArguments { get; }
    public IReadOnlyList`1<ParsedArgument> DotCoverArguments { get; }
    public IReadOnlyList`1<string> AdditionalArguments { get; }
    public abstract virtual IReadOnlyList`1<string> get_DotNetArguments();
    public abstract virtual IReadOnlyList`1<ParsedArgument> get_DotCoverArguments();
    public abstract virtual IReadOnlyList`1<string> get_AdditionalArguments();
}
[IsReadOnlyAttribute]
internal class JetBrains.dotCover.GlobalTool.CommandLineParser.ParsedArgument : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; }
    [CanBeNullAttribute]
public string Value { get; }
    public ParsedArgument(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Value();
}
internal class JetBrains.dotCover.GlobalTool.CommandLineParser.Parser : object {
    public static Parser Instance;
    private String[] myDotCoverNamePrefixes;
    private String[] myDotCoverKeyPrefixes;
    private Char[] myDotCoverKeyValueSeparators;
    private string myAdditionalArgsSeparator;
    private static Parser();
    public IParsedCommandLine ParseCommandLine(String[] args, bool commandLineContainsDotNetArguments);
    private static String[] NormalizeKeyPrefixes(String[] keyPrefixes);
}
internal static class JetBrains.dotCover.GlobalTool.Commands.CommandFactoriesRegistry : object {
    public static IEnumerable`1<ICommandFactory> PrioritizedFactories;
    private static CommandFactoriesRegistry();
}
internal class JetBrains.dotCover.GlobalTool.Commands.CoverDotNet.CoverDotNetCommand : DotCoverCallingCommandBase {
    private static string TargetExecutableParameterName;
    private static string TargetArgumentsParameterName;
    private static string TargetWorkingDirParameterName;
    private IParsedCommandLine myParsedCommandLine;
    public string HelpResourceName { get; }
    public CoverDotNetCommand(IParsedCommandLine parsedCommandLine);
    public virtual string get_HelpResourceName();
    internal virtual string GetDotCoverCommandLineString(string dotNetPath);
}
internal class JetBrains.dotCover.GlobalTool.Commands.CoverDotNet.CoverDotNetCommandFactory : object {
    public sealed virtual ICommand TryCreateCommand(String[] args);
}
internal static class JetBrains.dotCover.GlobalTool.Commands.CoverDotNet.TargetDotNetCommandLineBuilder : object {
    public static string BuildCommandLineString(IParsedCommandLine parsedCommandLine);
}
internal abstract class JetBrains.dotCover.GlobalTool.Commands.DotCoverCallingCommandBase : object {
    public string HelpResourceName { get; }
    public abstract virtual string get_HelpResourceName();
    public sealed virtual int Execute();
    protected virtual void BeforeDotCoverStarted();
    internal abstract virtual string GetDotCoverCommandLineString(string dotNetPath);
    protected virtual void AfterDotCoverFinished();
}
internal static class JetBrains.dotCover.GlobalTool.Commands.DotCoverCommandLineBuilder : object {
    private static string XmlConfigFileParameterName;
    private static string OutputParameterName;
    private static string OutputsParameterName;
    private static string ReportTypeParameterName;
    private static string ReportTypesParameterName;
    private static Char[] ReportTypeSeparators;
    private static string IsGlobalToolParameterName;
    private static string DefaultOutputName;
    private static string DefaultSnapshotExtension;
    private static string DefaultXmlReportExtension;
    private static Dictionary`2<string, string> ReportTypeToDefaultReportExtension;
    private static DotCoverCommandLineBuilder();
    public static string BuildCommandLineString(string command, IReadOnlyList`1<ParsedArgument> userArgs, IReadOnlyDictionary`2<string, string> argsToAdd, OutputTypes outputTypes);
    private static void PrintWarningMessage(string message);
}
internal static class JetBrains.dotCover.GlobalTool.Commands.DotCoverPathProvider : object {
    public static string GetPath();
}
internal static class JetBrains.dotCover.GlobalTool.Commands.DotNetExecCommandLineBuilder : object {
    public static string BuildCommandLineString(string dotCoverPath, string dotCoverCommandLine);
}
internal static class JetBrains.dotCover.GlobalTool.Commands.DotNetPathProvider : object {
    [CanBeNullAttribute]
public static string TryGetPath();
}
internal class JetBrains.dotCover.GlobalTool.Commands.Help.HelpCommand : DotCoverCallingCommandBase {
    private static string HelpTextResourceNamePrefix;
    private static Regex PlatformDependentStringRegex;
    private ICommand myForCommand;
    public string HelpResourceName { get; }
    public HelpCommand(ICommand forCommand);
    private static HelpCommand();
    public virtual string get_HelpResourceName();
    protected virtual void BeforeDotCoverStarted();
    internal virtual string GetDotCoverCommandLineString(string dotNetPath);
    protected virtual void AfterDotCoverFinished();
    private static string GetStringFromResource(string resourceName, bool platformDependent);
}
internal class JetBrains.dotCover.GlobalTool.Commands.Help.HelpCommandFactory : object {
    private ISet`1<string> myCommandNames;
    public sealed virtual ICommand TryCreateCommand(String[] args);
}
internal interface JetBrains.dotCover.GlobalTool.Commands.ICommand {
    public string HelpResourceName { get; }
    public abstract virtual string get_HelpResourceName();
    public abstract virtual int Execute();
}
internal interface JetBrains.dotCover.GlobalTool.Commands.ICommandFactory {
    public abstract virtual ICommand TryCreateCommand(String[] args);
}
internal class JetBrains.dotCover.GlobalTool.Commands.Merge.MergeCommandFactory : PureDotCoverCommandFactoryBase {
    [CompilerGeneratedAttribute]
private ISet`1<string> <CommandNames>k__BackingField;
    protected ISet`1<string> CommandNames { get; }
    protected OutputTypes OutputTypes { get; }
    protected string HelpResourceName { get; }
    [CompilerGeneratedAttribute]
protected virtual ISet`1<string> get_CommandNames();
    protected virtual OutputTypes get_OutputTypes();
    protected virtual string get_HelpResourceName();
}
[FlagsAttribute]
public enum JetBrains.dotCover.GlobalTool.Commands.OutputTypes : Enum {
    public int value__;
    public static OutputTypes Snapshot;
    public static OutputTypes Report;
}
internal static class JetBrains.dotCover.GlobalTool.Commands.ProcessLauncher : object {
    public static int StartAndWaitForExit(string executable, string arguments);
}
internal class JetBrains.dotCover.GlobalTool.Commands.PureDotCoverCommand : DotCoverCallingCommandBase {
    private string myCommand;
    private IReadOnlyList`1<ParsedArgument> myUserArgs;
    private OutputTypes myOutputTypes;
    [CompilerGeneratedAttribute]
private string <HelpResourceName>k__BackingField;
    public string HelpResourceName { get; }
    public PureDotCoverCommand(string command, IReadOnlyList`1<ParsedArgument> userArgs, OutputTypes outputTypes, string helpResourceName);
    [CompilerGeneratedAttribute]
public virtual string get_HelpResourceName();
    internal virtual string GetDotCoverCommandLineString(string dotNetPath);
}
internal abstract class JetBrains.dotCover.GlobalTool.Commands.PureDotCoverCommandFactoryBase : object {
    protected ISet`1<string> CommandNames { get; }
    protected OutputTypes OutputTypes { get; }
    protected string HelpResourceName { get; }
    protected abstract virtual ISet`1<string> get_CommandNames();
    protected abstract virtual OutputTypes get_OutputTypes();
    protected abstract virtual string get_HelpResourceName();
    public sealed virtual ICommand TryCreateCommand(String[] args);
}
internal class JetBrains.dotCover.GlobalTool.Commands.Report.ReportCommandFactory : PureDotCoverCommandFactoryBase {
    [CompilerGeneratedAttribute]
private ISet`1<string> <CommandNames>k__BackingField;
    protected ISet`1<string> CommandNames { get; }
    protected OutputTypes OutputTypes { get; }
    protected string HelpResourceName { get; }
    [CompilerGeneratedAttribute]
protected virtual ISet`1<string> get_CommandNames();
    protected virtual OutputTypes get_OutputTypes();
    protected virtual string get_HelpResourceName();
}
internal static class JetBrains.dotCover.GlobalTool.Commands.Utils : object {
    public static string EscapeSingleArgFixed(string value);
}
internal class JetBrains.dotCover.GlobalTool.Exceptions.CommandExecutionException : Exception {
    public CommandExecutionException(string message);
}
public class JetBrains.dotCover.GlobalTool.Exceptions.UnsuccessfulDotCoverExitCodeException : Exception {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public int ExitCode { get; }
    public UnsuccessfulDotCoverExitCodeException(int exitCode);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
}
internal class JetBrains.dotCover.GlobalTool.Exceptions.ValidationException : Exception {
    public ValidationException(string message);
}
internal static class JetBrains.dotCover.GlobalTool.ExitCodes : object {
    public static int Ok;
    public static int ValidationProblems;
    public static int ExecutionProblems;
    public static int NonZeroExitCodeInApplicationBeingAnalyzed;
    public static int Timeout;
    public static int UnhandledException;
}
public static class JetBrains.dotCover.GlobalTool.Program : object {
    private static ISet`1<string> HelpArgs;
    private static Program();
    public static int Main(String[] args);
    private static int ExecuteHelpCommand(ICommand forCommand);
    private static void PrintRunHelpMessage();
    private static void PrintErrorMessage(string message);
}
